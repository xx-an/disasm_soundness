LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7005080267760F3257E5369433D9124D018A953A9CFB64F84ECC0517A007BA0C
LOAD:0000000000000000 ; Input MD5    : 38A90F2D7635EDF2944B8422B0E696A8
LOAD:0000000000000000 ; Input CRC32  : 8D96596E
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/comm
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'comm.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'linebuffer.c'
LOAD:0000000000000000 ; Source File : 'memcmp2.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xmemcoll.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'memcoll.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2B510h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7CE8h                ; Size in file image
LOAD:00000000000000D8                 dq 7CE8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8AD0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208AD0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5D0h                 ; Size in file image
LOAD:0000000000000110                 dq 790h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6B40h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6B40h                ; Physical address
LOAD:00000000000001B0                 dq 2DCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2DCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8AD0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208AD0h              ; Physical address
LOAD:0000000000000220                 dq 530h                 ; Size in file image
LOAD:0000000000000228                 dq 530h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 7Fh, 0CCh, 24h, 0EDh, 74h, 0B8h, 0A9h, 0EBh, 0A2h, 0DFh ; Desc
LOAD:0000000000000284                 db 0EEh, 7Bh, 0BEh, 78h, 68h, 39h, 57h, 0Ah, 6Ah, 0ADh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8C8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_8C8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8C8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFcntl - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8C8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_8C8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_8C8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_8C8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_8C8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_8C8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_8C8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_8C8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrrchr - offset byte_8C8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLseek - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004C0                            0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMemset - offset byte_8C8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aFclose+1 - offset byte_8C8, 12h, 0, 0, \ ; "close"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aPosixFadvise - offset byte_8C8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLibcStartMain - offset byte_8C8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcmp - offset byte_8C8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFputsUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aCalloc - offset byte_8C8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrcmp - offset byte_8C8, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGmonStart - offset byte_8C8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcpy - offset byte_8C8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFileno - offset byte_8C8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMalloc - offset byte_8C8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFflush - offset byte_8C8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aNlLanginfo - offset byte_8C8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aStrcoll - offset byte_8C8, 12h, 0, 0, \ ; "strcoll"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFreading - offset byte_8C8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aRealloc - offset byte_8C8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFdopen - offset byte_8C8, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aSetlocale - offset byte_8C8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aPrintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFseeko - offset byte_8C8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFopen - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaAtexit - offset byte_8C8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8C8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8C8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aItmRegistertmc - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMbsinit - offset byte_8C8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aIswprint - offset byte_8C8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaFinalize - offset byte_8C8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStdout - offset byte_8C8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007F0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgname - offset byte_8C8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aStdin - offset byte_8C8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000820                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aPrognameFull - offset byte_8C8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aStderr - offset byte_8C8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000880                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aOptind - offset byte_8C8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000898                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptarg - offset byte_8C8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008B0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8 ; ELF String Table
LOAD:00000000000008C8 byte_8C8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008C8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008C9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:00000000000008D3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000008DA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008E7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008F1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008F9 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:00000000000008FF aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000907 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:000000000000090E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000916 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000920 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000926 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000937 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000940 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000948 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000094E aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000954 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000954                                         ; LOAD:0000000000000730↑o
LOAD:000000000000095A aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000095A                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000972 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000972                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000989 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000997 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:000000000000099E aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009A5 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009AC aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009BD aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009C4 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009D2 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:00000000000009D9 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000009DF aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009E6 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000009E6                                         ; LOAD:00000000000004F0↑o
LOAD:00000000000009ED aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:00000000000009F4 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009FC aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A04 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A10 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A1E aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A25 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A30 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A37 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A43 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A4A aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A51 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A5C aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A5C                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A7A aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000A81 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A90 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000A96 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A96                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000AA5 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AB5 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000ABC aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000ABC                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000ACE aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AD5 aStrcoll        db 'strcoll',0          ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000ADD aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AEC aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AF1 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AFC aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B0C aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B19 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B23 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:0000000000000B2F aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B3A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B44 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C68↓o
LOAD:0000000000000B50 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B50                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B6C aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B7B aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B7B                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B95                 align 2
LOAD:0000000000000B96 ; ELF GNU Symbol Version Table
LOAD:0000000000000B96                 dw 0
LOAD:0000000000000B98                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BA4                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BB8                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BD2                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BD4                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; strcoll@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BEA                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BF8                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BFA                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C02                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 0
LOAD:0000000000000C16                 dw 0
LOAD:0000000000000C18 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C18                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8C8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C28                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8C8, \ ; "GLIBC_2.3"
LOAD:0000000000000C28                                10h>
LOAD:0000000000000C38                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8C8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C38                                10h>
LOAD:0000000000000C48                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8C8, \ ; "GLIBC_2.14"
LOAD:0000000000000C48                                10h>
LOAD:0000000000000C58                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8C8, \ ; "GLIBC_2.4"
LOAD:0000000000000C58                                10h>
LOAD:0000000000000C68                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8C8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C78 ; ELF RELA Relocation Table
LOAD:0000000000000C78                 Elf64_Rela <208AD0h, 8, 1C10h> ; R_X86_64_RELATIVE +1C10h
LOAD:0000000000000C90                 Elf64_Rela <208AD8h, 8, 1BD0h> ; R_X86_64_RELATIVE +1BD0h
LOAD:0000000000000CA8                 Elf64_Rela <208AE0h, 8, 61BEh> ; R_X86_64_RELATIVE +61BEh
LOAD:0000000000000CC0                 Elf64_Rela <208B00h, 8, 61BCh> ; R_X86_64_RELATIVE +61BCh
LOAD:0000000000000CD8                 Elf64_Rela <208B20h, 8, 61CAh> ; R_X86_64_RELATIVE +61CAh
LOAD:0000000000000CF0                 Elf64_Rela <208B40h, 8, 6065h> ; R_X86_64_RELATIVE +6065h
LOAD:0000000000000D08                 Elf64_Rela <208B60h, 8, 61DBh> ; R_X86_64_RELATIVE +61DBh
LOAD:0000000000000D20                 Elf64_Rela <208B80h, 8, 61EBh> ; R_X86_64_RELATIVE +61EBh
LOAD:0000000000000D38                 Elf64_Rela <208BA0h, 8, 61F0h> ; R_X86_64_RELATIVE +61F0h
LOAD:0000000000000D50                 Elf64_Rela <208BE0h, 8, 6279h> ; R_X86_64_RELATIVE +6279h
LOAD:0000000000000D68                 Elf64_Rela <208BE8h, 8, 6281h> ; R_X86_64_RELATIVE +6281h
LOAD:0000000000000D80                 Elf64_Rela <208BF0h, 8, 6287h> ; R_X86_64_RELATIVE +6287h
LOAD:0000000000000D98                 Elf64_Rela <208BF8h, 8, 6294h> ; R_X86_64_RELATIVE +6294h
LOAD:0000000000000DB0                 Elf64_Rela <208C00h, 8, 62A1h> ; R_X86_64_RELATIVE +62A1h
LOAD:0000000000000DC8                 Elf64_Rela <208C08h, 8, 607Ah> ; R_X86_64_RELATIVE +607Ah
LOAD:0000000000000DE0                 Elf64_Rela <208C10h, 8, 62B5h> ; R_X86_64_RELATIVE +62B5h
LOAD:0000000000000DF8                 Elf64_Rela <208C18h, 8, 629Ah> ; R_X86_64_RELATIVE +629Ah
LOAD:0000000000000E10                 Elf64_Rela <208C20h, 8, 6135h> ; R_X86_64_RELATIVE +6135h
LOAD:0000000000000E28                 Elf64_Rela <208C28h, 8, 62BDh> ; R_X86_64_RELATIVE +62BDh
LOAD:0000000000000E40                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000E58                 Elf64_Rela <209018h, 8, 61F8h> ; R_X86_64_RELATIVE +61F8h
LOAD:0000000000000E70                 Elf64_Rela <209020h, 8, 61FAh> ; R_X86_64_RELATIVE +61FAh
LOAD:0000000000000E88                 Elf64_Rela <209080h, 8, 209090h> ; R_X86_64_RELATIVE +209090h
LOAD:0000000000000EA0                 Elf64_Rela <209098h, 8, 209120h> ; R_X86_64_RELATIVE +209120h
LOAD:0000000000000EB8                 Elf64_Rela <208FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000ED0                 Elf64_Rela <208FC8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000EE8                 Elf64_Rela <208FD0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F00                 Elf64_Rela <208FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F18                 Elf64_Rela <208FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F30                 Elf64_Rela <2090A0h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F48                 Elf64_Rela <2090A8h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F60                 Elf64_Rela <2090B0h, 3800000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000F78                 Elf64_Rela <2090B8h, 3D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F90                 Elf64_Rela <2090C0h, 3E00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000FA8                 Elf64_Rela <2090C8h, 3A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FC0                 Elf64_Rela <2090E0h, 3C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FD8 ; ELF JMPREL Relocation Table
LOAD:0000000000000FD8                 Elf64_Rela <208E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000000FF0                 Elf64_Rela <208E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001008                 Elf64_Rela <208E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001020                 Elf64_Rela <208E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001038                 Elf64_Rela <208E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001050                 Elf64_Rela <208E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001068                 Elf64_Rela <208E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001080                 Elf64_Rela <208E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001098                 Elf64_Rela <208E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000010B0                 Elf64_Rela <208E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000010C8                 Elf64_Rela <208E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010E0                 Elf64_Rela <208E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010F8                 Elf64_Rela <208EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001110                 Elf64_Rela <208EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001128                 Elf64_Rela <208EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001140                 Elf64_Rela <208EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001158                 Elf64_Rela <208EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001170                 Elf64_Rela <208EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001188                 Elf64_Rela <208ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011A0                 Elf64_Rela <208ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000011B8                 Elf64_Rela <208EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000011D0                 Elf64_Rela <208EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000011E8                 Elf64_Rela <208EF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001200                 Elf64_Rela <208EF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001218                 Elf64_Rela <208F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001230                 Elf64_Rela <208F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001248                 Elf64_Rela <208F10h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001260                 Elf64_Rela <208F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001278                 Elf64_Rela <208F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001290                 Elf64_Rela <208F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000012A8                 Elf64_Rela <208F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012C0                 Elf64_Rela <208F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT strcoll
LOAD:00000000000012D8                 Elf64_Rela <208F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012F0                 Elf64_Rela <208F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001308                 Elf64_Rela <208F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001320                 Elf64_Rela <208F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001338                 Elf64_Rela <208F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001350                 Elf64_Rela <208F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001368                 Elf64_Rela <208F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001380                 Elf64_Rela <208F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001398                 Elf64_Rela <208F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000013B0                 Elf64_Rela <208F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000013C8                 Elf64_Rela <208F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000013E0                 Elf64_Rela <208F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013F8                 Elf64_Rela <208FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001410                 Elf64_Rela <208FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001428                 Elf64_Rela <208FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001440                 Elf64_Rela <208FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001440 LOAD            ends
LOAD:0000000000001440
.init:0000000000001458 ; ===========================================================================
.init:0000000000001458
.init:0000000000001458 ; Segment type: Pure code
.init:0000000000001458 ; Segment permissions: Read/Execute
.init:0000000000001458 _init           segment dword public 'CODE' use64
.init:0000000000001458                 assume cs:_init
.init:0000000000001458                 ;org 1458h
.init:0000000000001458                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001458
.init:0000000000001458 ; =============== S U B R O U T I N E =======================================
.init:0000000000001458
.init:0000000000001458
.init:0000000000001458                 public _init_proc
.init:0000000000001458 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001458                 sub     rsp, 8          ; _init
.init:000000000000145C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001463                 test    rax, rax
.init:0000000000001466                 jz      short loc_146A
.init:0000000000001468                 call    rax ; __gmon_start__
.init:000000000000146A
.init:000000000000146A loc_146A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000146A                 add     rsp, 8
.init:000000000000146E                 retn
.init:000000000000146E _init_proc      endp
.init:000000000000146E
.init:000000000000146E _init           ends
.init:000000000000146E
LOAD:000000000000146F ; ===========================================================================
LOAD:000000000000146F
LOAD:000000000000146F ; Segment type: Pure code
LOAD:000000000000146F ; Segment permissions: Read/Execute
LOAD:000000000000146F LOAD            segment byte public 'CODE' use64
LOAD:000000000000146F                 assume cs:LOAD
LOAD:000000000000146F                 ;org 146Fh
LOAD:000000000000146F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000146F                 align 10h
LOAD:000000000000146F LOAD            ends
LOAD:000000000000146F
.plt:0000000000001470 ; ===========================================================================
.plt:0000000000001470
.plt:0000000000001470 ; Segment type: Pure code
.plt:0000000000001470 ; Segment permissions: Read/Execute
.plt:0000000000001470 _plt            segment para public 'CODE' use64
.plt:0000000000001470                 assume cs:_plt
.plt:0000000000001470                 ;org 1470h
.plt:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470
.plt:0000000000001470 sub_1470        proc near               ; CODE XREF: .plt:000000000000148B↓j
.plt:0000000000001470                                         ; .plt:000000000000149B↓j ...
.plt:0000000000001470 ; __unwind {
.plt:0000000000001470                 push    cs:qword_208E30
.plt:0000000000001476                 jmp     cs:qword_208E38
.plt:0000000000001476 sub_1470        endp
.plt:0000000000001476
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:000000000000147C                 align 20h
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int __uflow(_IO_FILE *)
.plt:0000000000001480 ___uflow        proc near               ; CODE XREF: readlinebuffer_delim+BB↓p
.plt:0000000000001480                 jmp     cs:__uflow_ptr
.plt:0000000000001480 ___uflow        endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0
.plt:000000000000148B                 jmp     sub_1470
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; void free(void *ptr)
.plt:0000000000001490 _free           proc near               ; CODE XREF: freebuffer+4↓j
.plt:0000000000001490                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001490                 jmp     cs:free_ptr
.plt:0000000000001490 _free           endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    1
.plt:000000000000149B                 jmp     sub_1470
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: noreturn thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void __noreturn abort(void)
.plt:00000000000014A0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000014A0                                         ; quotearg_buffer_restyled:def_2DE1↓p ...
.plt:00000000000014A0                 jmp     cs:abort_ptr
.plt:00000000000014A0 _abort          endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    2
.plt:00000000000014AB                 jmp     sub_1470
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int *__errno_location(void)
.plt:00000000000014B0 ___errno_location proc near             ; CODE XREF: compare_files+517↓p
.plt:00000000000014B0                                         ; compare_files+559↓p ...
.plt:00000000000014B0                 jmp     cs:__errno_location_ptr
.plt:00000000000014B0 ___errno_location endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    3
.plt:00000000000014BB                 jmp     sub_1470
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014C0 _strncmp        proc near               ; CODE XREF: usage+35C↓p
.plt:00000000000014C0                                         ; usage+41D↓p
.plt:00000000000014C0                 jmp     cs:strncmp_ptr
.plt:00000000000014C0 _strncmp        endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    4
.plt:00000000000014CB                 jmp     sub_1470
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: noreturn thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void __noreturn _exit(int status)
.plt:00000000000014D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014D0                 jmp     cs:_exit_ptr
.plt:00000000000014D0 __exit          endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    5
.plt:00000000000014DB                 jmp     sub_1470
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; size_t __fpending(FILE *fp)
.plt:00000000000014E0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000014E0                 jmp     cs:__fpending_ptr
.plt:00000000000014E0 ___fpending     endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    6
.plt:00000000000014EB                 jmp     sub_1470
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int fcntl(int fd, int cmd, ...)
.plt:00000000000014F0 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:00000000000014F0                                         ; rpl_fcntl+D4↓p ...
.plt:00000000000014F0                 jmp     cs:fcntl_ptr
.plt:00000000000014F0 _fcntl          endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    7
.plt:00000000000014FB                 jmp     sub_1470
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *textdomain(const char *domainname)
.plt:0000000000001500 _textdomain     proc near               ; CODE XREF: main+4A↓p
.plt:0000000000001500                 jmp     cs:textdomain_ptr
.plt:0000000000001500 _textdomain     endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    8
.plt:000000000000150B                 jmp     sub_1470
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int fclose(FILE *stream)
.plt:0000000000001510 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001510                                         ; rpl_fclose+6B↓j
.plt:0000000000001510                 jmp     cs:fclose_ptr
.plt:0000000000001510 _fclose         endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    9
.plt:000000000000151B                 jmp     sub_1470
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001520 _bindtextdomain proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001520                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001520 _bindtextdomain endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    0Ah
.plt:000000000000152B                 jmp     sub_1470
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001530 _dcgettext      proc near               ; CODE XREF: main+2C5↓p
.plt:0000000000001530                                         ; main+2FE↓p ...
.plt:0000000000001530                 jmp     cs:dcgettext_ptr
.plt:0000000000001530 _dcgettext      endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0Bh
.plt:000000000000153B                 jmp     sub_1470
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001540 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001540                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001540 ___ctype_get_mb_cur_max endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    0Ch
.plt:000000000000154B                 jmp     sub_1470
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; size_t strlen(const char *s)
.plt:0000000000001550 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001550                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001550                 jmp     cs:strlen_ptr
.plt:0000000000001550 _strlen         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Dh
.plt:000000000000155B                 jmp     sub_1470
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: noreturn thunk
.plt:0000000000001560
.plt:0000000000001560 ___stack_chk_fail proc near             ; CODE XREF: compare_files:loc_22D6↓p
.plt:0000000000001560                                         ; quotearg_buffer_restyled:loc_3F43↓p ...
.plt:0000000000001560                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001560 ___stack_chk_fail endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    0Eh
.plt:000000000000156B                 jmp     sub_1470
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001570 _getopt_long    proc near               ; CODE XREF: main+C6↓p
.plt:0000000000001570                 jmp     cs:getopt_long_ptr
.plt:0000000000001570 _getopt_long    endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Fh
.plt:000000000000157B                 jmp     sub_1470
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001580 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001580                 jmp     cs:mbrtowc_ptr
.plt:0000000000001580 _mbrtowc        endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    10h
.plt:000000000000158B                 jmp     sub_1470
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; char *strrchr(const char *s, int c)
.plt:0000000000001590 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001590                 jmp     cs:strrchr_ptr
.plt:0000000000001590 _strrchr        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    11h
.plt:000000000000159B                 jmp     sub_1470
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000015A0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000015A0                                         ; rpl_fseeko+3B↓p
.plt:00000000000015A0                 jmp     cs:lseek_ptr
.plt:00000000000015A0 _lseek          endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    12h
.plt:00000000000015AB                 jmp     sub_1470
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015B0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015B0                                         ; xzalloc+12↓j
.plt:00000000000015B0                 jmp     cs:memset_ptr
.plt:00000000000015B0 _memset         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    13h
.plt:00000000000015BB                 jmp     sub_1470
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int close(int fd)
.plt:00000000000015C0 _close          proc near               ; CODE XREF: fopen_safer+6A↓p
.plt:00000000000015C0                                         ; rpl_fcntl+1FE↓p
.plt:00000000000015C0                 jmp     cs:close_ptr
.plt:00000000000015C0 _close          endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    14h
.plt:00000000000015CB                 jmp     sub_1470
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000015D0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000015D0                                         ; fadvise+16↓j
.plt:00000000000015D0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000015D0 _posix_fadvise  endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    15h
.plt:00000000000015DB                 jmp     sub_1470
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000015E0 _memcmp         proc near               ; CODE XREF: compare_files+1B9↓p
.plt:00000000000015E0                                         ; memcmp2+19↓p ...
.plt:00000000000015E0                 jmp     cs:memcmp_ptr
.plt:00000000000015E0 _memcmp         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    16h
.plt:00000000000015EB                 jmp     sub_1470
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000015F0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000015F0                                         ; usage+C2↓p ...
.plt:00000000000015F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000015F0 _fputs_unlocked endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    17h
.plt:00000000000015FB                 jmp     sub_1470
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001600 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001600                 jmp     cs:calloc_ptr
.plt:0000000000001600 _calloc         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    18h
.plt:000000000000160B                 jmp     sub_1470
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001610 _strcmp         proc near               ; CODE XREF: main+18B↓p
.plt:0000000000001610                 jmp     cs:strcmp_ptr
.plt:0000000000001610 _strcmp         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    19h
.plt:000000000000161B                 jmp     sub_1470
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001620 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001620                 jmp     cs:memcpy_ptr
.plt:0000000000001620 _memcpy         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    1Ah
.plt:000000000000162B                 jmp     sub_1470
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; int fileno(FILE *stream)
.plt:0000000000001630 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001630                                         ; fopen_safer+17↓p ...
.plt:0000000000001630                 jmp     cs:fileno_ptr
.plt:0000000000001630 _fileno         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    1Bh
.plt:000000000000163B                 jmp     sub_1470
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; void *malloc(size_t size)
.plt:0000000000001640 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001640                 jmp     cs:malloc_ptr
.plt:0000000000001640 _malloc         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1Ch
.plt:000000000000164B                 jmp     sub_1470
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int fflush(FILE *stream)
.plt:0000000000001650 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001650                                         ; rpl_fflush+3B↓j
.plt:0000000000001650                 jmp     cs:fflush_ptr
.plt:0000000000001650 _fflush         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Dh
.plt:000000000000165B                 jmp     sub_1470
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; char *nl_langinfo(nl_item item)
.plt:0000000000001660 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001660                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001660 _nl_langinfo    endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    1Eh
.plt:000000000000166B                 jmp     sub_1470
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int strcoll(const char *s1, const char *s2)
.plt:0000000000001670 _strcoll        proc near               ; CODE XREF: strcoll_loop+60↓p
.plt:0000000000001670                 jmp     cs:strcoll_ptr
.plt:0000000000001670 _strcoll        endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Fh
.plt:000000000000167B                 jmp     sub_1470
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int __freading(FILE *fp)
.plt:0000000000001680 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001680                                         ; rpl_fflush+9↓p
.plt:0000000000001680                 jmp     cs:__freading_ptr
.plt:0000000000001680 ___freading     endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    20h ; ' '
.plt:000000000000168B                 jmp     sub_1470
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001690 _fwrite_unlocked proc near              ; CODE XREF: writeline_isra_0+3F↓p
.plt:0000000000001690                                         ; writeline_isra_0+61↓j ...
.plt:0000000000001690                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001690 _fwrite_unlocked endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    21h ; '!'
.plt:000000000000169B                 jmp     sub_1470
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000016A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000016A0                 jmp     cs:realloc_ptr
.plt:00000000000016A0 _realloc        endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    22h ; '"'
.plt:00000000000016AB                 jmp     sub_1470
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; FILE *fdopen(int fd, const char *modes)
.plt:00000000000016B0 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:00000000000016B0                 jmp     cs:fdopen_ptr
.plt:00000000000016B0 _fdopen         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    23h ; '#'
.plt:00000000000016BB                 jmp     sub_1470
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *setlocale(int category, const char *locale)
.plt:00000000000016C0 _setlocale      proc near               ; CODE XREF: main+2B↓p
.plt:00000000000016C0                                         ; usage+343↓p ...
.plt:00000000000016C0                 jmp     cs:setlocale_ptr
.plt:00000000000016C0 _setlocale      endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    24h ; '$'
.plt:00000000000016CB                 jmp     sub_1470
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ___printf_chk   proc near               ; CODE XREF: compare_files+4B3↓p
.plt:00000000000016D0                                         ; usage+78↓p ...
.plt:00000000000016D0                 jmp     cs:__printf_chk_ptr
.plt:00000000000016D0 ___printf_chk   endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    25h ; '%'
.plt:00000000000016DB                 jmp     sub_1470
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000016E0 _error          proc near               ; CODE XREF: main+2D6↓p
.plt:00000000000016E0                                         ; main+30C↓p ...
.plt:00000000000016E0                 jmp     cs:error_ptr
.plt:00000000000016E0 _error          endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    26h ; '&'
.plt:00000000000016EB                 jmp     sub_1470
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000016F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_565A↓j
.plt:00000000000016F0                 jmp     cs:fseeko_ptr
.plt:00000000000016F0 _fseeko         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    27h ; '''
.plt:00000000000016FB                 jmp     sub_1470
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001700 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001700                 jmp     cs:fopen_ptr
.plt:0000000000001700 _fopen          endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    28h ; '('
.plt:000000000000170B                 jmp     sub_1470
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001710 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001710                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001710 ___cxa_atexit   endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    29h ; ')'
.plt:000000000000171B                 jmp     sub_1470
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: noreturn thunk
.plt:0000000000001720
.plt:0000000000001720 ; void __noreturn exit(int status)
.plt:0000000000001720 _exit           proc near               ; CODE XREF: main+244↓p
.plt:0000000000001720                                         ; usage+58↓p
.plt:0000000000001720                 jmp     cs:exit_ptr
.plt:0000000000001720 _exit           endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    2Ah ; '*'
.plt:000000000000172B                 jmp     sub_1470
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001730 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001730                 jmp     cs:fwrite_ptr
.plt:0000000000001730 _fwrite         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2Bh ; '+'
.plt:000000000000173B                 jmp     sub_1470
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001740                                         ; version_etc_arn+37↓p ...
.plt:0000000000001740                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001740 ___fprintf_chk  endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    2Ch ; ','
.plt:000000000000174B                 jmp     sub_1470
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001750 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001750                 jmp     cs:mbsinit_ptr
.plt:0000000000001750 _mbsinit        endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Dh ; '-'
.plt:000000000000175B                 jmp     sub_1470
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int iswprint(wint_t wc)
.plt:0000000000001760 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001760                 jmp     cs:iswprint_ptr
.plt:0000000000001760 _iswprint       endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2Eh ; '.'
.plt:000000000000176B                 jmp     sub_1470
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001770 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001770                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001770 ___ctype_b_loc  endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Fh ; '/'
.plt:000000000000177B                 jmp     sub_1470
.plt:000000000000177B ; } // starts at 1470
.plt:000000000000177B _plt            ends
.plt:000000000000177B
.plt.got:0000000000001780 ; ===========================================================================
.plt.got:0000000000001780
.plt.got:0000000000001780 ; Segment type: Pure code
.plt.got:0000000000001780 ; Segment permissions: Read/Execute
.plt.got:0000000000001780 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001780                 assume cs:_plt_got
.plt.got:0000000000001780                 ;org 1780h
.plt.got:0000000000001780                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001780
.plt.got:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001780
.plt.got:0000000000001780 ; Attributes: thunk
.plt.got:0000000000001780
.plt.got:0000000000001780 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001780 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001780 ; __unwind {
.plt.got:0000000000001780                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001780 __cxa_finalize  endp
.plt.got:0000000000001780
.plt.got:0000000000001780 ; ---------------------------------------------------------------------------
.plt.got:0000000000001786                 align 8
.plt.got:0000000000001786 ; } // starts at 1780
.plt.got:0000000000001786 _plt_got        ends
.plt.got:0000000000001786
LOAD:0000000000001788 ; ===========================================================================
LOAD:0000000000001788
LOAD:0000000000001788 ; Segment type: Pure code
LOAD:0000000000001788 ; Segment permissions: Read/Execute
LOAD:0000000000001788 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001788                 assume cs:LOAD
LOAD:0000000000001788                 ;org 1788h
LOAD:0000000000001788                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001788                 align 10h
LOAD:0000000000001788 LOAD            ends
LOAD:0000000000001788
.text:0000000000001790 ; ===========================================================================
.text:0000000000001790
.text:0000000000001790 ; Segment type: Pure code
.text:0000000000001790 ; Segment permissions: Read/Execute
.text:0000000000001790 _text           segment para public 'CODE' use64
.text:0000000000001790                 assume cs:_text
.text:0000000000001790                 ;org 1790h
.text:0000000000001790                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001790
.text:0000000000001790 ; =============== S U B R O U T I N E =======================================
.text:0000000000001790
.text:0000000000001790
.text:0000000000001790 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001790                 public main
.text:0000000000001790 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001790 ; __unwind {
.text:0000000000001790                 push    r13
.text:0000000000001792                 push    r12
.text:0000000000001794                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000179B                 push    rbp
.text:000000000000179C                 push    rbx
.text:000000000000179D                 movsxd  rbp, edi
.text:00000000000017A0                 mov     rbx, rsi
.text:00000000000017A3                 sub     rsp, 8
.text:00000000000017A7                 mov     rdi, [rsi]
.text:00000000000017AA                 call    set_program_name
.text:00000000000017AF                 lea     rsi, locale     ; locale
.text:00000000000017B6                 mov     edi, 6          ; category
.text:00000000000017BB                 call    _setlocale
.text:00000000000017C0                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000017C7                 lea     rdi, domainname ; "coreutils"
.text:00000000000017CE                 call    _bindtextdomain
.text:00000000000017D3                 lea     rdi, domainname ; "coreutils"
.text:00000000000017DA                 call    _textdomain
.text:00000000000017DF                 mov     edi, 3
.text:00000000000017E4                 call    hard_locale
.text:00000000000017E9                 lea     rdi, close_stdout
.text:00000000000017F0                 mov     cs:hard_LC_COLLATE, al
.text:00000000000017F6                 call    atexit
.text:00000000000017FB                 mov     cs:only_file_1, 1
.text:0000000000001802                 mov     cs:only_file_2, 1
.text:0000000000001809                 mov     cs:both, 1
.text:0000000000001810                 mov     cs:seen_unpairable, 0
.text:0000000000001817                 mov     cs:byte_2090FE, 0
.text:000000000000181E                 mov     cs:issued_disorder_warning, 0
.text:0000000000001825                 mov     cs:check_input_order, 0
.text:000000000000182F                 mov     cs:total_option, 0
.text:0000000000001836                 db      2Eh
.text:0000000000001836                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001840
.text:0000000000001840 loc_1840:                               ; CODE XREF: main+104↓j
.text:0000000000001840                                         ; main+13A↓j ...
.text:0000000000001840                 lea     rcx, long_options ; longopts
.text:0000000000001847                 lea     rdx, shortopts  ; "123z"
.text:000000000000184E                 xor     r8d, r8d        ; longind
.text:0000000000001851                 mov     rsi, rbx        ; argv
.text:0000000000001854                 mov     edi, ebp        ; argc
.text:0000000000001856                 call    _getopt_long
.text:000000000000185B                 cmp     eax, 0FFFFFFFFh
.text:000000000000185E                 jz      loc_19D9
.text:0000000000001864                 cmp     eax, 33h ; '3'
.text:0000000000001867                 jz      loc_1960
.text:000000000000186D                 jle     short loc_18A0
.text:000000000000186F                 cmp     eax, 81h
.text:0000000000001874                 jz      short loc_18F0
.text:0000000000001876                 jg      short loc_18D0
.text:0000000000001878                 cmp     eax, 7Ah ; 'z'
.text:000000000000187B                 jz      loc_1970
.text:0000000000001881                 add     eax, 0FFFFFF80h
.text:0000000000001884                 jnz     loc_1A6B
.text:000000000000188A                 mov     cs:check_input_order, 1
.text:0000000000001894                 jmp     short loc_1840
.text:0000000000001894 ; ---------------------------------------------------------------------------
.text:0000000000001896                 align 20h
.text:00000000000018A0
.text:00000000000018A0 loc_18A0:                               ; CODE XREF: main+DD↑j
.text:00000000000018A0                 cmp     eax, 0FFFFFF7Eh
.text:00000000000018A5                 jz      loc_1A75
.text:00000000000018AB                 jle     loc_1990
.text:00000000000018B1                 cmp     eax, 31h ; '1'
.text:00000000000018B4                 jz      loc_1980
.text:00000000000018BA                 cmp     eax, 32h ; '2'
.text:00000000000018BD                 jnz     loc_1A6B
.text:00000000000018C3                 mov     cs:only_file_2, 0
.text:00000000000018CA                 jmp     loc_1840
.text:00000000000018CA ; ---------------------------------------------------------------------------
.text:00000000000018CF                 align 10h
.text:00000000000018D0
.text:00000000000018D0 loc_18D0:                               ; CODE XREF: main+E6↑j
.text:00000000000018D0                 cmp     eax, 82h
.text:00000000000018D5                 jz      short loc_1900
.text:00000000000018D7                 cmp     eax, 83h
.text:00000000000018DC                 jnz     loc_1A6B
.text:00000000000018E2                 mov     cs:total_option, 1
.text:00000000000018E9                 jmp     loc_1840
.text:00000000000018E9 ; ---------------------------------------------------------------------------
.text:00000000000018EE                 align 10h
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+E4↑j
.text:00000000000018F0                 mov     cs:check_input_order, 2
.text:00000000000018FA                 jmp     loc_1840
.text:00000000000018FA ; ---------------------------------------------------------------------------
.text:00000000000018FF                 align 20h
.text:0000000000001900
.text:0000000000001900 loc_1900:                               ; CODE XREF: main+145↑j
.text:0000000000001900                 cmp     cs:col_sep_len, 0
.text:0000000000001908                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:000000000000190F                 jz      short loc_1928
.text:0000000000001911                 mov     rdi, cs:col_sep ; s1
.text:0000000000001918                 mov     rsi, r13        ; s2
.text:000000000000191B                 call    _strcmp
.text:0000000000001920                 test    eax, eax
.text:0000000000001922                 jnz     loc_1AA3
.text:0000000000001928
.text:0000000000001928 loc_1928:                               ; CODE XREF: main+17F↑j
.text:0000000000001928                 cmp     byte ptr [r13+0], 0
.text:000000000000192D                 mov     cs:col_sep, r13
.text:0000000000001934                 mov     eax, 1
.text:0000000000001939                 jz      short loc_194F
.text:000000000000193B                 xor     eax, eax
.text:000000000000193D                 mov     rcx, r12
.text:0000000000001940                 mov     rdi, r13
.text:0000000000001943                 repne scasb
.text:0000000000001945                 mov     rax, rcx
.text:0000000000001948                 not     rax
.text:000000000000194B                 sub     rax, 1
.text:000000000000194F
.text:000000000000194F loc_194F:                               ; CODE XREF: main+1A9↑j
.text:000000000000194F                 mov     cs:col_sep_len, rax
.text:0000000000001956                 jmp     loc_1840
.text:0000000000001956 ; ---------------------------------------------------------------------------
.text:000000000000195B                 align 20h
.text:0000000000001960
.text:0000000000001960 loc_1960:                               ; CODE XREF: main+D7↑j
.text:0000000000001960                 mov     cs:both, 0
.text:0000000000001967                 jmp     loc_1840
.text:0000000000001967 ; ---------------------------------------------------------------------------
.text:000000000000196C                 align 10h
.text:0000000000001970
.text:0000000000001970 loc_1970:                               ; CODE XREF: main+EB↑j
.text:0000000000001970                 mov     cs:delim, 0
.text:0000000000001977                 jmp     loc_1840
.text:0000000000001977 ; ---------------------------------------------------------------------------
.text:000000000000197C                 align 20h
.text:0000000000001980
.text:0000000000001980 loc_1980:                               ; CODE XREF: main+124↑j
.text:0000000000001980                 mov     cs:only_file_1, 0
.text:0000000000001987                 jmp     loc_1840
.text:0000000000001987 ; ---------------------------------------------------------------------------
.text:000000000000198C                 align 10h
.text:0000000000001990
.text:0000000000001990 loc_1990:                               ; CODE XREF: main+11B↑j
.text:0000000000001990                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001995                 jnz     loc_1A6B
.text:000000000000199B                 sub     rsp, 8
.text:000000000000199F                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000019A6                 mov     rcx, cs:Version
.text:00000000000019AD                 push    0
.text:00000000000019AF                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:00000000000019B6                 lea     r8, aRichardMStallm ; "Richard M. Stallman"
.text:00000000000019BD                 lea     rdx, unk_60F7
.text:00000000000019C4                 lea     rsi, aComm      ; "comm"
.text:00000000000019CB                 xor     eax, eax
.text:00000000000019CD                 call    version_etc
.text:00000000000019D2                 xor     edi, edi        ; status
.text:00000000000019D4                 call    _exit
.text:00000000000019D9 ; ---------------------------------------------------------------------------
.text:00000000000019D9
.text:00000000000019D9 loc_19D9:                               ; CODE XREF: main+CE↑j
.text:00000000000019D9                 cmp     cs:col_sep_len, 0
.text:00000000000019E1                 jz      short loc_1A2D
.text:00000000000019E3
.text:00000000000019E3 loc_19E3:                               ; CODE XREF: main+2A8↓j
.text:00000000000019E3                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000019EA                 mov     edx, ebp
.text:00000000000019EC                 sub     edx, eax
.text:00000000000019EE                 cmp     edx, 1
.text:00000000000019F1                 jle     loc_1A7C
.text:00000000000019F7                 cmp     edx, 2
.text:00000000000019FA                 jnz     loc_1AC7
.text:0000000000001A00                 lea     rdi, [rbx+rax*8]
.text:0000000000001A04                 call    compare_files
.text:0000000000001A09                 cmp     cs:issued_disorder_warning, 0
.text:0000000000001A10                 jnz     loc_1AE5
.text:0000000000001A16                 cmp     cs:byte_2090FE, 0
.text:0000000000001A1D                 jnz     loc_1AE5
.text:0000000000001A23                 pop     rdx
.text:0000000000001A24                 xor     eax, eax
.text:0000000000001A26                 pop     rbx
.text:0000000000001A27                 pop     rbp
.text:0000000000001A28                 pop     r12
.text:0000000000001A2A                 pop     r13
.text:0000000000001A2C                 retn
.text:0000000000001A2D ; ---------------------------------------------------------------------------
.text:0000000000001A2D
.text:0000000000001A2D loc_1A2D:                               ; CODE XREF: main+251↑j
.text:0000000000001A2D                 mov     cs:col_sep_len, 1
.text:0000000000001A38                 jmp     short loc_19E3
.text:0000000000001A3A ; ---------------------------------------------------------------------------
.text:0000000000001A3A
.text:0000000000001A3A loc_1A3A:                               ; CODE XREF: main+2EE↓j
.text:0000000000001A3A                 mov     rdi, [rbx+rbp*8-8]
.text:0000000000001A3F                 call    quote
.text:0000000000001A44                 lea     rsi, msgid      ; "missing operand after %s"
.text:0000000000001A4B                 mov     rbx, rax
.text:0000000000001A4E                 mov     edx, 5          ; category
.text:0000000000001A53
.text:0000000000001A53 loc_1A53:                               ; CODE XREF: main+350↓j
.text:0000000000001A53                 xor     edi, edi        ; domainname
.text:0000000000001A55                 call    _dcgettext
.text:0000000000001A5A                 mov     rcx, rbx
.text:0000000000001A5D                 mov     rdx, rax        ; format
.text:0000000000001A60                 xor     esi, esi        ; errnum
.text:0000000000001A62                 xor     edi, edi        ; status
.text:0000000000001A64                 xor     eax, eax
.text:0000000000001A66                 call    _error
.text:0000000000001A6B
.text:0000000000001A6B loc_1A6B:                               ; CODE XREF: main+F4↑j
.text:0000000000001A6B                                         ; main+12D↑j ...
.text:0000000000001A6B                 mov     edi, 1          ; status
.text:0000000000001A70                 call    usage
.text:0000000000001A75 ; ---------------------------------------------------------------------------
.text:0000000000001A75
.text:0000000000001A75 loc_1A75:                               ; CODE XREF: main+115↑j
.text:0000000000001A75                 xor     edi, edi        ; status
.text:0000000000001A77                 call    usage
.text:0000000000001A7C ; ---------------------------------------------------------------------------
.text:0000000000001A7C
.text:0000000000001A7C loc_1A7C:                               ; CODE XREF: main+261↑j
.text:0000000000001A7C                 cmp     eax, ebp
.text:0000000000001A7E                 jl      short loc_1A3A
.text:0000000000001A80                 lea     rsi, aMissingOperand_0 ; "missing operand"
.text:0000000000001A87                 xor     edi, edi        ; domainname
.text:0000000000001A89                 mov     edx, 5          ; category
.text:0000000000001A8E                 call    _dcgettext
.text:0000000000001A93                 xor     esi, esi        ; errnum
.text:0000000000001A95                 mov     rdx, rax        ; format
.text:0000000000001A98                 xor     edi, edi        ; status
.text:0000000000001A9A                 xor     eax, eax
.text:0000000000001A9C                 call    _error
.text:0000000000001AA1                 jmp     short loc_1A6B
.text:0000000000001AA3 ; ---------------------------------------------------------------------------
.text:0000000000001AA3
.text:0000000000001AA3 loc_1AA3:                               ; CODE XREF: main+192↑j
.text:0000000000001AA3                 lea     rsi, aMultipleOutput ; "multiple output delimiters specified"
.text:0000000000001AAA                 mov     edx, 5          ; category
.text:0000000000001AAF                 xor     edi, edi        ; domainname
.text:0000000000001AB1                 call    _dcgettext
.text:0000000000001AB6                 xor     esi, esi        ; errnum
.text:0000000000001AB8                 mov     rdx, rax        ; format
.text:0000000000001ABB                 mov     edi, 1          ; status
.text:0000000000001AC0                 xor     eax, eax
.text:0000000000001AC2                 call    _error
.text:0000000000001AC7
.text:0000000000001AC7 loc_1AC7:                               ; CODE XREF: main+26A↑j
.text:0000000000001AC7                 mov     rdi, [rbx+rax*8+10h]
.text:0000000000001ACC                 call    quote
.text:0000000000001AD1                 mov     edx, 5
.text:0000000000001AD6                 mov     rbx, rax
.text:0000000000001AD9                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000001AE0                 jmp     loc_1A53
.text:0000000000001AE5 ; ---------------------------------------------------------------------------
.text:0000000000001AE5
.text:0000000000001AE5 loc_1AE5:                               ; CODE XREF: main+280↑j
.text:0000000000001AE5                                         ; main+28D↑j
.text:0000000000001AE5                 lea     rsi, aInputIsNotInSo ; "input is not in sorted order"
.text:0000000000001AEC                 mov     edx, 5          ; category
.text:0000000000001AF1                 xor     edi, edi        ; domainname
.text:0000000000001AF3                 call    _dcgettext
.text:0000000000001AF8                 xor     esi, esi        ; errnum
.text:0000000000001AFA                 mov     rdx, rax        ; format
.text:0000000000001AFD                 mov     edi, 1          ; status
.text:0000000000001B02                 xor     eax, eax
.text:0000000000001B04                 call    _error
.text:0000000000001B04 ; } // starts at 1790
.text:0000000000001B09                 nop     dword ptr [rax+00000000h]
.text:0000000000001B09 main            endp ; sp-analysis failed
.text:0000000000001B09
.text:0000000000001B10
.text:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B10
.text:0000000000001B10 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001B10
.text:0000000000001B10 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001B10                 public start
.text:0000000000001B10 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001B10 ; __unwind {
.text:0000000000001B10                 xor     ebp, ebp
.text:0000000000001B12                 mov     r9, rdx         ; rtld_fini
.text:0000000000001B15                 pop     rsi             ; argc
.text:0000000000001B16                 mov     rdx, rsp        ; ubp_av
.text:0000000000001B19                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001B1D                 push    rax
.text:0000000000001B1E                 push    rsp             ; stack_end
.text:0000000000001B1F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001B26                 lea     rcx, __libc_csu_init ; init
.text:0000000000001B2D                 lea     rdi, main       ; main
.text:0000000000001B34                 call    cs:__libc_start_main_ptr
.text:0000000000001B3A                 hlt
.text:0000000000001B3A ; } // starts at 1B10
.text:0000000000001B3A start           endp
.text:0000000000001B3A
.text:0000000000001B3A ; ---------------------------------------------------------------------------
.text:0000000000001B3B                 align 20h
.text:0000000000001B40
.text:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B40
.text:0000000000001B40 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001B40
.text:0000000000001B40 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1BF3↓p
.text:0000000000001B40                 lea     rdi, __bss_start
.text:0000000000001B47                 push    rbp
.text:0000000000001B48                 lea     rax, __bss_start
.text:0000000000001B4F                 cmp     rax, rdi
.text:0000000000001B52                 mov     rbp, rsp
.text:0000000000001B55                 jz      short loc_1B70
.text:0000000000001B57                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001B5E                 test    rax, rax
.text:0000000000001B61                 jz      short loc_1B70
.text:0000000000001B63                 pop     rbp
.text:0000000000001B64                 jmp     rax
.text:0000000000001B64 ; ---------------------------------------------------------------------------
.text:0000000000001B66                 align 10h
.text:0000000000001B70
.text:0000000000001B70 loc_1B70:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001B70                                         ; deregister_tm_clones+21↑j
.text:0000000000001B70                 pop     rbp
.text:0000000000001B71                 retn
.text:0000000000001B71 deregister_tm_clones endp
.text:0000000000001B71
.text:0000000000001B71 ; ---------------------------------------------------------------------------
.text:0000000000001B72                 align 20h
.text:0000000000001B80
.text:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B80
.text:0000000000001B80 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001B80
.text:0000000000001B80 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001B80                 lea     rdi, __bss_start
.text:0000000000001B87                 lea     rsi, __bss_start
.text:0000000000001B8E                 push    rbp
.text:0000000000001B8F                 sub     rsi, rdi
.text:0000000000001B92                 mov     rbp, rsp
.text:0000000000001B95                 sar     rsi, 3
.text:0000000000001B99                 mov     rax, rsi
.text:0000000000001B9C                 shr     rax, 3Fh
.text:0000000000001BA0                 add     rsi, rax
.text:0000000000001BA3                 sar     rsi, 1
.text:0000000000001BA6                 jz      short loc_1BC0
.text:0000000000001BA8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001BAF                 test    rax, rax
.text:0000000000001BB2                 jz      short loc_1BC0
.text:0000000000001BB4                 pop     rbp
.text:0000000000001BB5                 jmp     rax
.text:0000000000001BB5 ; ---------------------------------------------------------------------------
.text:0000000000001BB7                 align 20h
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001BC0                                         ; register_tm_clones+32↑j
.text:0000000000001BC0                 pop     rbp
.text:0000000000001BC1                 retn
.text:0000000000001BC1 register_tm_clones endp
.text:0000000000001BC1
.text:0000000000001BC1 ; ---------------------------------------------------------------------------
.text:0000000000001BC2                 align 10h
.text:0000000000001BD0
.text:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BD0
.text:0000000000001BD0 ; Attributes: info_from_lumina
.text:0000000000001BD0
.text:0000000000001BD0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001BD0                 cmp     cs:completed_7697, 0
.text:0000000000001BD7                 jnz     short locret_1C08
.text:0000000000001BD9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001BE1                 push    rbp
.text:0000000000001BE2                 mov     rbp, rsp
.text:0000000000001BE5                 jz      short loc_1BF3
.text:0000000000001BE7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001BEE                 call    __cxa_finalize
.text:0000000000001BF3
.text:0000000000001BF3 loc_1BF3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001BF3                 call    deregister_tm_clones
.text:0000000000001BF8                 mov     cs:completed_7697, 1
.text:0000000000001BFF                 pop     rbp
.text:0000000000001C00                 retn
.text:0000000000001C00 ; ---------------------------------------------------------------------------
.text:0000000000001C01                 align 8
.text:0000000000001C08
.text:0000000000001C08 locret_1C08:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001C08                 rep retn
.text:0000000000001C08 __do_global_dtors_aux endp
.text:0000000000001C08
.text:0000000000001C08 ; ---------------------------------------------------------------------------
.text:0000000000001C0A                 align 10h
.text:0000000000001C10
.text:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C10
.text:0000000000001C10 ; Attributes: bp-based frame
.text:0000000000001C10
.text:0000000000001C10 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001C10                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001C10                 push    rbp
.text:0000000000001C11                 mov     rbp, rsp
.text:0000000000001C14                 pop     rbp
.text:0000000000001C15                 jmp     register_tm_clones
.text:0000000000001C15 frame_dummy     endp
.text:0000000000001C15
.text:0000000000001C15 ; ---------------------------------------------------------------------------
.text:0000000000001C1A                 align 20h
.text:0000000000001C20
.text:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C20
.text:0000000000001C20
.text:0000000000001C20 writeline_isra_0 proc near              ; CODE XREF: compare_files+1F7↓p
.text:0000000000001C20                                         ; compare_files+377↓p ...
.text:0000000000001C20 ; __unwind {
.text:0000000000001C20                 cmp     ecx, 2
.text:0000000000001C23                 push    r12
.text:0000000000001C25                 mov     r12, rdi
.text:0000000000001C28                 push    rbp
.text:0000000000001C29                 mov     rbp, rsi
.text:0000000000001C2C                 push    rbx
.text:0000000000001C2D                 mov     rbx, rdx
.text:0000000000001C30                 jz      short loc_1CA0
.text:0000000000001C32                 cmp     ecx, 3
.text:0000000000001C35                 jnz     short loc_1C90
.text:0000000000001C37                 cmp     cs:both, 0
.text:0000000000001C3E                 jz      short loc_1C99
.text:0000000000001C40                 cmp     cs:only_file_1, 0
.text:0000000000001C47                 jz      short loc_1C64
.text:0000000000001C49                 mov     rcx, rdx        ; stream
.text:0000000000001C4C                 mov     rdi, cs:col_sep ; ptr
.text:0000000000001C53                 mov     rdx, cs:col_sep_len ; n
.text:0000000000001C5A                 mov     esi, 1          ; size
.text:0000000000001C5F                 call    _fwrite_unlocked
.text:0000000000001C64
.text:0000000000001C64 loc_1C64:                               ; CODE XREF: writeline_isra_0+27↑j
.text:0000000000001C64                 cmp     cs:only_file_2, 0
.text:0000000000001C6B                 jnz     short loc_1CB2
.text:0000000000001C6D
.text:0000000000001C6D loc_1C6D:                               ; CODE XREF: writeline_isra_0+77↓j
.text:0000000000001C6D                                         ; writeline_isra_0+90↓j ...
.text:0000000000001C6D                 mov     rcx, rbx        ; stream
.text:0000000000001C70                 mov     rdx, [r12]      ; n
.text:0000000000001C74                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000001C78                 pop     rbx
.text:0000000000001C79                 pop     rbp
.text:0000000000001C7A                 pop     r12
.text:0000000000001C7C                 mov     esi, 1          ; size
.text:0000000000001C81                 jmp     _fwrite_unlocked
.text:0000000000001C81 ; ---------------------------------------------------------------------------
.text:0000000000001C86                 align 10h
.text:0000000000001C90
.text:0000000000001C90 loc_1C90:                               ; CODE XREF: writeline_isra_0+15↑j
.text:0000000000001C90                 cmp     cs:only_file_1, 0
.text:0000000000001C97                 jnz     short loc_1C6D
.text:0000000000001C99
.text:0000000000001C99 loc_1C99:                               ; CODE XREF: writeline_isra_0+1E↑j
.text:0000000000001C99                                         ; writeline_isra_0+87↓j
.text:0000000000001C99                 pop     rbx
.text:0000000000001C9A                 pop     rbp
.text:0000000000001C9B                 pop     r12
.text:0000000000001C9D                 retn
.text:0000000000001C9D ; ---------------------------------------------------------------------------
.text:0000000000001C9E                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: writeline_isra_0+10↑j
.text:0000000000001CA0                 cmp     cs:only_file_2, 0
.text:0000000000001CA7                 jz      short loc_1C99
.text:0000000000001CA9                 cmp     cs:only_file_1, 0
.text:0000000000001CB0                 jz      short loc_1C6D
.text:0000000000001CB2
.text:0000000000001CB2 loc_1CB2:                               ; CODE XREF: writeline_isra_0+4B↑j
.text:0000000000001CB2                 mov     rdx, cs:col_sep_len ; n
.text:0000000000001CB9                 mov     rdi, cs:col_sep ; ptr
.text:0000000000001CC0                 mov     rcx, rbx        ; stream
.text:0000000000001CC3                 mov     esi, 1          ; size
.text:0000000000001CC8                 call    _fwrite_unlocked
.text:0000000000001CCD                 jmp     short loc_1C6D
.text:0000000000001CCD ; } // starts at 1C20
.text:0000000000001CCD writeline_isra_0 endp
.text:0000000000001CCD
.text:0000000000001CCD ; ---------------------------------------------------------------------------
.text:0000000000001CCF                 align 10h
.text:0000000000001CD0
.text:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CD0
.text:0000000000001CD0
.text:0000000000001CD0 check_order_isra_1_part_2 proc near     ; CODE XREF: compare_files+2D4↓p
.text:0000000000001CD0                                         ; compare_files+33E↓p
.text:0000000000001CD0 ; __unwind {
.text:0000000000001CD0                 push    r12
.text:0000000000001CD2                 push    rbp
.text:0000000000001CD3                 lea     r12, issued_disorder_warning
.text:0000000000001CDA                 push    rbx
.text:0000000000001CDB                 lea     ebx, [r8-1]
.text:0000000000001CDF                 movsxd  rbx, ebx
.text:0000000000001CE2                 cmp     byte ptr [r12+rbx], 0
.text:0000000000001CE7                 jnz     short loc_1D4B
.text:0000000000001CE9                 mov     rax, rsi
.text:0000000000001CEC                 mov     ebp, r8d
.text:0000000000001CEF                 mov     rsi, [rdi]
.text:0000000000001CF2                 mov     r8, rcx
.text:0000000000001CF5                 mov     rcx, [rdx]
.text:0000000000001CF8                 mov     rdi, [rax]
.text:0000000000001CFB                 mov     rdx, [r8]
.text:0000000000001CFE                 sub     rsi, 1
.text:0000000000001D02                 sub     rcx, 1
.text:0000000000001D06                 cmp     cs:hard_LC_COLLATE, 0
.text:0000000000001D0D                 jnz     short loc_1D50
.text:0000000000001D0F                 call    memcmp2
.text:0000000000001D14
.text:0000000000001D14 loc_1D14:                               ; CODE XREF: check_order_isra_1_part_2+85↓j
.text:0000000000001D14                 test    eax, eax
.text:0000000000001D16                 jle     short loc_1D4B
.text:0000000000001D18                 lea     rsi, aFileDIsNotInSo ; "file %d is not in sorted order"
.text:0000000000001D1F                 xor     edi, edi        ; domainname
.text:0000000000001D21                 mov     edx, 5          ; category
.text:0000000000001D26                 call    _dcgettext
.text:0000000000001D2B                 xor     edi, edi
.text:0000000000001D2D                 cmp     cs:check_input_order, 1
.text:0000000000001D34                 mov     rdx, rax        ; format
.text:0000000000001D37                 mov     ecx, ebp
.text:0000000000001D39                 setz    dil             ; status
.text:0000000000001D3D                 xor     esi, esi        ; errnum
.text:0000000000001D3F                 xor     eax, eax
.text:0000000000001D41                 call    _error
.text:0000000000001D46                 mov     byte ptr [r12+rbx], 1
.text:0000000000001D4B
.text:0000000000001D4B loc_1D4B:                               ; CODE XREF: check_order_isra_1_part_2+17↑j
.text:0000000000001D4B                                         ; check_order_isra_1_part_2+46↑j
.text:0000000000001D4B                 pop     rbx
.text:0000000000001D4C                 pop     rbp
.text:0000000000001D4D                 pop     r12
.text:0000000000001D4F                 retn
.text:0000000000001D50 ; ---------------------------------------------------------------------------
.text:0000000000001D50
.text:0000000000001D50 loc_1D50:                               ; CODE XREF: check_order_isra_1_part_2+3D↑j
.text:0000000000001D50                 call    xmemcoll
.text:0000000000001D55                 jmp     short loc_1D14
.text:0000000000001D55 ; } // starts at 1CD0
.text:0000000000001D55 check_order_isra_1_part_2 endp
.text:0000000000001D55
.text:0000000000001D55 ; ---------------------------------------------------------------------------
.text:0000000000001D57                 align 20h
.text:0000000000001D60
.text:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D60
.text:0000000000001D60
.text:0000000000001D60 compare_files   proc near               ; CODE XREF: main+274↑p
.text:0000000000001D60
.text:0000000000001D60 var_230         = qword ptr -230h
.text:0000000000001D60 var_228         = qword ptr -228h
.text:0000000000001D60 var_220         = qword ptr -220h
.text:0000000000001D60 var_218         = qword ptr -218h
.text:0000000000001D60 var_210         = qword ptr -210h
.text:0000000000001D60 var_208         = qword ptr -208h
.text:0000000000001D60 var_200         = qword ptr -200h
.text:0000000000001D60 var_1F4         = dword ptr -1F4h
.text:0000000000001D60 var_1F0         = qword ptr -1F0h
.text:0000000000001D60 var_1DA         = byte ptr -1DAh
.text:0000000000001D60 var_1D9         = byte ptr -1D9h
.text:0000000000001D60 var_1D8         = qword ptr -1D8h
.text:0000000000001D60 var_1D0         = qword ptr -1D0h
.text:0000000000001D60 stream          = qword ptr -1C8h
.text:0000000000001D60 var_1C0         = qword ptr -1C0h
.text:0000000000001D60 var_1B8         = byte ptr -1B8h
.text:0000000000001D60 var_198         = qword ptr -198h
.text:0000000000001D60 var_158         = byte ptr -158h
.text:0000000000001D60 var_98          = byte ptr -98h
.text:0000000000001D60 var_78          = byte ptr -78h
.text:0000000000001D60 var_58          = byte ptr -58h
.text:0000000000001D60 var_40          = qword ptr -40h
.text:0000000000001D60
.text:0000000000001D60 ; __unwind {
.text:0000000000001D60                 push    r15
.text:0000000000001D62                 push    r14
.text:0000000000001D64                 mov     r14, rdi
.text:0000000000001D67                 push    r13
.text:0000000000001D69                 push    r12
.text:0000000000001D6B                 push    rbp
.text:0000000000001D6C                 push    rbx
.text:0000000000001D6D                 xor     ebp, ebp
.text:0000000000001D6F                 sub     rsp, 208h
.text:0000000000001D76                 mov     rax, fs:28h
.text:0000000000001D7F                 mov     [rsp+238h+var_40], rax
.text:0000000000001D87                 xor     eax, eax
.text:0000000000001D89                 lea     rax, [rsp+238h+var_1B8]
.text:0000000000001D91                 lea     r15, [rsp+238h+var_158]
.text:0000000000001D99                 mov     [rsp+238h+var_1F0], rdi
.text:0000000000001D9E                 mov     [rsp+238h+var_228], rax
.text:0000000000001DA3                 mov     r12, rax
.text:0000000000001DA6                 lea     rax, [rsp+238h+stream]
.text:0000000000001DAB                 mov     [rsp+238h+var_220], rax
.text:0000000000001DB0                 lea     rax, [rsp+238h+var_198]
.text:0000000000001DB8                 mov     [rsp+238h+var_218], rax
.text:0000000000001DBD
.text:0000000000001DBD loc_1DBD:                               ; CODE XREF: compare_files+138↓j
.text:0000000000001DBD                 mov     rcx, [rsp+238h+var_218]
.text:0000000000001DC2                 mov     rax, rbp
.text:0000000000001DC5                 lea     r13, [r15+60h]
.text:0000000000001DC9                 shl     rax, 5
.text:0000000000001DCD                 mov     dword ptr [rsp+238h+var_230], ebp
.text:0000000000001DD1                 lea     rbx, [rcx+rax]
.text:0000000000001DD5
.text:0000000000001DD5 loc_1DD5:                               ; CODE XREF: compare_files+8C↓j
.text:0000000000001DD5                 mov     rdi, r15
.text:0000000000001DD8                 add     rbx, 8
.text:0000000000001DDC                 call    initbuffer
.text:0000000000001DE1                 mov     [rbx-8], r15
.text:0000000000001DE5                 add     r15, 18h
.text:0000000000001DE9                 cmp     r15, r13
.text:0000000000001DEC                 jnz     short loc_1DD5
.text:0000000000001DEE                 mov     rdx, [r14]
.text:0000000000001DF1                 lea     rdi, aLt+2      ; "-"
.text:0000000000001DF8                 mov     ecx, 2
.text:0000000000001DFD                 mov     dword ptr [r12], 0
.text:0000000000001E05                 mov     dword ptr [r12+4], 0
.text:0000000000001E0E                 mov     dword ptr [r12+8], 0
.text:0000000000001E17                 mov     r13, cs:stdin@@GLIBC_2_2_5
.text:0000000000001E1E                 mov     rsi, rdx
.text:0000000000001E21                 repe cmpsb
.text:0000000000001E23                 setnbe  al
.text:0000000000001E26                 sbb     al, 0
.text:0000000000001E28                 test    al, al
.text:0000000000001E2A                 jnz     loc_2245
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: compare_files+4F7↓j
.text:0000000000001E30                 mov     rax, [rsp+238h+var_220]
.text:0000000000001E35                 test    r13, r13
.text:0000000000001E38                 mov     [rax+rbp*8], r13
.text:0000000000001E3C                 jz      loc_230A
.text:0000000000001E42                 mov     esi, 2
.text:0000000000001E47                 mov     rdi, r13
.text:0000000000001E4A                 call    fadvise
.text:0000000000001E4F                 movsxd  rbx, dword ptr [rsp+238h+var_230]
.text:0000000000001E54                 movsx   edx, cs:delim
.text:0000000000001E5B                 mov     rsi, r13
.text:0000000000001E5E                 shl     rbx, 5
.text:0000000000001E62                 mov     rdi, [rsp+rbx+238h+var_198]
.text:0000000000001E6A                 call    readlinebuffer_delim
.text:0000000000001E6F                 lea     rdx, [rsp+238h+var_1D8]
.text:0000000000001E74                 mov     [rdx+rbp*8], rax
.text:0000000000001E78                 mov     eax, [r13+0]
.text:0000000000001E7C                 and     eax, 20h
.text:0000000000001E7F                 jnz     loc_22DB
.text:0000000000001E85                 add     r14, 8
.text:0000000000001E89                 add     r12, 0Ch
.text:0000000000001E8D                 cmp     rbp, 1
.text:0000000000001E91                 jz      short loc_1EA0
.text:0000000000001E93                 mov     ebp, 1
.text:0000000000001E98                 jmp     loc_1DBD
.text:0000000000001E98 ; ---------------------------------------------------------------------------
.text:0000000000001E9D                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: compare_files+131↑j
.text:0000000000001EA0                 mov     [rsp+238h+var_1F4], eax
.text:0000000000001EA4                 mov     [rsp+238h+var_218], rdx
.text:0000000000001EA9                 mov     [rsp+238h+var_200], 0
.text:0000000000001EB2                 mov     [rsp+238h+var_210], 0
.text:0000000000001EBB                 mov     [rsp+238h+var_208], 0
.text:0000000000001EC4                 nop     dword ptr [rax+00h]
.text:0000000000001EC8
.text:0000000000001EC8 loc_1EC8:                               ; CODE XREF: compare_files+221↓j
.text:0000000000001EC8                 mov     rbp, [rsp+238h+var_1D8]
.text:0000000000001ECD                 mov     rbx, [rsp+238h+var_1D0]
.text:0000000000001ED2                 test    rbp, rbp
.text:0000000000001ED5                 jz      loc_20A8
.text:0000000000001EDB                 test    rbx, rbx
.text:0000000000001EDE                 mov     [rsp+238h+var_1DA], 0
.text:0000000000001EE3                 mov     [rsp+238h+var_1D9], 0
.text:0000000000001EE8                 jz      loc_20F0
.text:0000000000001EEE                 cmp     cs:hard_LC_COLLATE, 0
.text:0000000000001EF5                 mov     r14, [rbx+8]
.text:0000000000001EF9                 mov     rsi, [rbx+10h]  ; s2
.text:0000000000001EFD                 mov     r15, [rbp+8]
.text:0000000000001F01                 mov     rdi, [rbp+10h]  ; s1
.text:0000000000001F05                 jnz     loc_2138
.text:0000000000001F0B                 cmp     r15, r14
.text:0000000000001F0E                 mov     rdx, r14
.text:0000000000001F11                 cmovbe  rdx, r15
.text:0000000000001F15                 sub     rdx, 1          ; n
.text:0000000000001F19                 call    _memcmp
.text:0000000000001F1E                 test    eax, eax
.text:0000000000001F20                 jnz     loc_2120
.text:0000000000001F26                 cmp     r15, r14
.text:0000000000001F29                 jb      loc_20F0
.text:0000000000001F2F                 setnz   al
.text:0000000000001F32                 movzx   eax, al
.text:0000000000001F35
.text:0000000000001F35 loc_1F35:                               ; CODE XREF: compare_files+3EB↓j
.text:0000000000001F35                 test    eax, eax
.text:0000000000001F37                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F3E                 jnz     loc_2127
.text:0000000000001F44                 lea     rsi, [rbx+10h]
.text:0000000000001F48                 lea     rdi, [rbx+8]
.text:0000000000001F4C                 mov     ecx, 3
.text:0000000000001F51                 add     [rsp+238h+var_200], 1
.text:0000000000001F57                 call    writeline_isra_0
.text:0000000000001F5C                 mov     [rsp+238h+var_1D9], 1
.text:0000000000001F61
.text:0000000000001F61 loc_1F61:                               ; CODE XREF: compare_files+3B6↓j
.text:0000000000001F61                 mov     [rsp+238h+var_1DA], 1
.text:0000000000001F66                 mov     eax, 1
.text:0000000000001F6B
.text:0000000000001F6B loc_1F6B:                               ; CODE XREF: compare_files+386↓j
.text:0000000000001F6B                 xor     ebx, ebx
.text:0000000000001F6D                 test    al, al
.text:0000000000001F6F                 mov     rbp, [rsp+238h+var_228]
.text:0000000000001F74                 mov     r14d, ebx
.text:0000000000001F77                 jnz     short loc_1F98
.text:0000000000001F79
.text:0000000000001F79 loc_1F79:                               ; CODE XREF: compare_files+236↓j
.text:0000000000001F79                                         ; compare_files+2E9↓j
.text:0000000000001F79                 add     rbp, 0Ch
.text:0000000000001F7D                 cmp     rbx, 1
.text:0000000000001F81                 jz      loc_1EC8
.text:0000000000001F87                 movzx   eax, [rsp+238h+var_1D9]
.text:0000000000001F8C                 mov     ebx, 1
.text:0000000000001F91                 mov     r14d, ebx
.text:0000000000001F94                 test    al, al
.text:0000000000001F96                 jz      short loc_1F79
.text:0000000000001F98
.text:0000000000001F98 loc_1F98:                               ; CODE XREF: compare_files+217↑j
.text:0000000000001F98                 movsxd  r12, dword ptr [rbp+0]
.text:0000000000001F9C                 mov     rcx, [rsp+238h+var_220]
.text:0000000000001FA1                 movsxd  r15, dword ptr [rbp+4]
.text:0000000000001FA5                 movsx   edx, cs:delim
.text:0000000000001FAC                 mov     r13, [rcx+rbx*8]
.text:0000000000001FB0                 lea     rcx, ds:0[rbx*4]
.text:0000000000001FB8                 lea     eax, [r12+1]
.text:0000000000001FBD                 mov     [rbp+4], r12d
.text:0000000000001FC1                 mov     [rbp+8], r15d
.text:0000000000001FC5                 mov     [rsp+238h+var_230], rcx
.text:0000000000001FCA                 and     eax, 3
.text:0000000000001FCD                 mov     rsi, r13
.text:0000000000001FD0                 mov     [rbp+0], eax
.text:0000000000001FD3                 cdqe
.text:0000000000001FD5                 add     rax, rcx
.text:0000000000001FD8                 mov     rdi, [rsp+rax*8+238h+var_198]
.text:0000000000001FE0                 call    readlinebuffer_delim
.text:0000000000001FE5                 mov     rsi, [rsp+238h+var_218]
.text:0000000000001FEA                 test    rax, rax
.text:0000000000001FED                 mov     rcx, [rsp+238h+var_230]
.text:0000000000001FF2                 mov     [rsi+rbx*8], rax
.text:0000000000001FF6                 jz      short loc_2050
.text:0000000000001FF8                 mov     edx, cs:check_input_order
.text:0000000000001FFE                 cmp     edx, 2
.text:0000000000002001                 jz      short loc_2039
.text:0000000000002003                 cmp     edx, 1
.text:0000000000002006                 jz      short loc_2011
.text:0000000000002008                 cmp     cs:seen_unpairable, 0
.text:000000000000200F                 jz      short loc_2039
.text:0000000000002011
.text:0000000000002011 loc_2011:                               ; CODE XREF: compare_files+2A6↑j
.text:0000000000002011                 movsxd  rdx, r14d
.text:0000000000002014                 lea     rcx, [rax+10h]
.text:0000000000002018                 lea     r8d, [rbx+1]
.text:000000000000201C                 lea     rdx, [r12+rdx*4]
.text:0000000000002020                 mov     rdi, [rsp+rdx*8+238h+var_198]
.text:0000000000002028                 lea     rdx, [rax+8]
.text:000000000000202C                 lea     rsi, [rdi+10h]
.text:0000000000002030                 add     rdi, 8
.text:0000000000002034                 call    check_order_isra_1_part_2
.text:0000000000002039
.text:0000000000002039 loc_2039:                               ; CODE XREF: compare_files+2A1↑j
.text:0000000000002039                                         ; compare_files+2AF↑j ...
.text:0000000000002039                 test    byte ptr [r13+0], 20h
.text:000000000000203E                 jnz     loc_225C
.text:0000000000002044                 mov     [rsp+rbx+238h+var_1DA], 0
.text:0000000000002049                 jmp     loc_1F79
.text:0000000000002049 ; ---------------------------------------------------------------------------
.text:000000000000204E                 align 10h
.text:0000000000002050
.text:0000000000002050 loc_2050:                               ; CODE XREF: compare_files+296↑j
.text:0000000000002050                 add     rcx, r15
.text:0000000000002053                 mov     rdi, [rsp+rcx*8+238h+var_198]
.text:000000000000205B                 cmp     qword ptr [rdi+10h], 0
.text:0000000000002060                 jz      short loc_2039
.text:0000000000002062                 mov     eax, cs:check_input_order
.text:0000000000002068                 cmp     eax, 2
.text:000000000000206B                 jz      short loc_2039
.text:000000000000206D                 cmp     eax, 1
.text:0000000000002070                 jz      short loc_207B
.text:0000000000002072                 cmp     cs:seen_unpairable, 0
.text:0000000000002079                 jz      short loc_2039
.text:000000000000207B
.text:000000000000207B loc_207B:                               ; CODE XREF: compare_files+310↑j
.text:000000000000207B                 movsxd  rax, r14d
.text:000000000000207E                 lea     rsi, [rdi+10h]
.text:0000000000002082                 lea     r8d, [rbx+1]
.text:0000000000002086                 lea     rax, [r12+rax*4]
.text:000000000000208A                 add     rdi, 8
.text:000000000000208E                 mov     rdx, [rsp+rax*8+238h+var_198]
.text:0000000000002096                 lea     rcx, [rdx+10h]
.text:000000000000209A                 add     rdx, 8
.text:000000000000209E                 call    check_order_isra_1_part_2
.text:00000000000020A3                 jmp     short loc_2039
.text:00000000000020A3 ; ---------------------------------------------------------------------------
.text:00000000000020A5                 align 8
.text:00000000000020A8
.text:00000000000020A8 loc_20A8:                               ; CODE XREF: compare_files+175↑j
.text:00000000000020A8                 test    rbx, rbx
.text:00000000000020AB                 jz      loc_2150
.text:00000000000020B1                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:00000000000020B8                 mov     [rsp+238h+var_1DA], 0
.text:00000000000020BD                 mov     cs:seen_unpairable, 1
.text:00000000000020C4
.text:00000000000020C4 loc_20C4:                               ; CODE XREF: compare_files+3D0↓j
.text:00000000000020C4                 lea     rsi, [rbx+10h]
.text:00000000000020C8                 lea     rdi, [rbx+8]
.text:00000000000020CC                 mov     ecx, 2
.text:00000000000020D1                 add     [rsp+238h+var_210], 1
.text:00000000000020D7                 call    writeline_isra_0
.text:00000000000020DC                 mov     [rsp+238h+var_1D9], 1
.text:00000000000020E1                 movzx   eax, [rsp+238h+var_1DA]
.text:00000000000020E6                 jmp     loc_1F6B
.text:00000000000020E6 ; ---------------------------------------------------------------------------
.text:00000000000020EB                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: compare_files+188↑j
.text:00000000000020F0                                         ; compare_files+1C9↑j
.text:00000000000020F0                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:00000000000020F7                 mov     cs:seen_unpairable, 1
.text:00000000000020FE
.text:00000000000020FE loc_20FE:                               ; CODE XREF: compare_files+3D2↓j
.text:00000000000020FE                 lea     rsi, [rbp+10h]
.text:0000000000002102                 lea     rdi, [rbp+8]
.text:0000000000002106                 mov     ecx, 1
.text:000000000000210B                 add     [rsp+238h+var_208], 1
.text:0000000000002111                 call    writeline_isra_0
.text:0000000000002116                 jmp     loc_1F61
.text:0000000000002116 ; ---------------------------------------------------------------------------
.text:000000000000211B                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: compare_files+1C0↑j
.text:0000000000002120                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002127
.text:0000000000002127 loc_2127:                               ; CODE XREF: compare_files+1DE↑j
.text:0000000000002127                 test    eax, eax
.text:0000000000002129                 mov     cs:seen_unpairable, 1
.text:0000000000002130                 jg      short loc_20C4
.text:0000000000002132                 jmp     short loc_20FE
.text:0000000000002132 ; ---------------------------------------------------------------------------
.text:0000000000002134                 align 8
.text:0000000000002138
.text:0000000000002138 loc_2138:                               ; CODE XREF: compare_files+1A5↑j
.text:0000000000002138                 sub     r15, 1
.text:000000000000213C                 lea     rcx, [r14-1]
.text:0000000000002140                 mov     rdx, rsi
.text:0000000000002143                 mov     rsi, r15
.text:0000000000002146                 call    xmemcoll
.text:000000000000214B                 jmp     loc_1F35
.text:0000000000002150 ; ---------------------------------------------------------------------------
.text:0000000000002150
.text:0000000000002150 loc_2150:                               ; CODE XREF: compare_files+34B↑j
.text:0000000000002150                 mov     rdi, [rsp+238h+stream] ; stream
.text:0000000000002155                 call    rpl_fclose
.text:000000000000215A                 test    eax, eax
.text:000000000000215C                 jnz     loc_229C
.text:0000000000002162                 mov     rdi, [rsp+238h+var_1C0] ; stream
.text:0000000000002167                 call    rpl_fclose
.text:000000000000216C                 test    eax, eax
.text:000000000000216E                 jnz     loc_2294
.text:0000000000002174                 cmp     cs:total_option, 0
.text:000000000000217B                 jz      loc_221C
.text:0000000000002181                 lea     rsi, aTotal     ; "total"
.text:0000000000002188                 mov     edx, 5          ; category
.text:000000000000218D                 xor     edi, edi        ; domainname
.text:000000000000218F                 movzx   ebp, cs:delim
.text:0000000000002196                 call    _dcgettext
.text:000000000000219B                 mov     rdi, [rsp+238h+var_200]
.text:00000000000021A0                 lea     rsi, [rsp+238h+var_58]
.text:00000000000021A8                 mov     rbx, rax
.text:00000000000021AB                 mov     r15, cs:col_sep
.text:00000000000021B2                 call    umaxtostr
.text:00000000000021B7                 mov     rdi, [rsp+238h+var_210]
.text:00000000000021BC                 lea     rsi, [rsp+238h+var_78]
.text:00000000000021C4                 mov     r14, rax
.text:00000000000021C7                 mov     r12, cs:col_sep
.text:00000000000021CE                 call    umaxtostr
.text:00000000000021D3                 mov     rdi, [rsp+238h+var_208]
.text:00000000000021D8                 lea     rsi, [rsp+238h+var_98]
.text:00000000000021E0                 mov     r13, cs:col_sep
.text:00000000000021E7                 mov     [rsp+238h+var_230], rax
.text:00000000000021EC                 call    umaxtostr
.text:00000000000021F1                 push    rbp
.text:00000000000021F2                 push    rbx
.text:00000000000021F3                 lea     rsi, aSSSSSSSC  ; "%s%s%s%s%s%s%s%c"
.text:00000000000021FA                 push    r15
.text:00000000000021FC                 push    r14
.text:00000000000021FE                 mov     rdx, rax
.text:0000000000002201                 mov     r8, [rsp+258h+var_230]
.text:0000000000002206                 mov     r9, r12
.text:0000000000002209                 mov     rcx, r13
.text:000000000000220C                 mov     edi, 1
.text:0000000000002211                 xor     eax, eax
.text:0000000000002213                 call    ___printf_chk
.text:0000000000002218                 add     rsp, 20h
.text:000000000000221C
.text:000000000000221C loc_221C:                               ; CODE XREF: compare_files+41B↑j
.text:000000000000221C                 mov     rax, [rsp+238h+var_40]
.text:0000000000002224                 xor     rax, fs:28h
.text:000000000000222D                 jnz     loc_22D6
.text:0000000000002233                 add     rsp, 208h
.text:000000000000223A                 pop     rbx
.text:000000000000223B                 pop     rbp
.text:000000000000223C                 pop     r12
.text:000000000000223E                 pop     r13
.text:0000000000002240                 pop     r14
.text:0000000000002242                 pop     r15
.text:0000000000002244                 retn
.text:0000000000002245 ; ---------------------------------------------------------------------------
.text:0000000000002245
.text:0000000000002245 loc_2245:                               ; CODE XREF: compare_files+CA↑j
.text:0000000000002245                 lea     rsi, aInputIsNotInSo+1Bh ; "r"
.text:000000000000224C                 mov     rdi, rdx
.text:000000000000224F                 call    fopen_safer
.text:0000000000002254                 mov     r13, rax
.text:0000000000002257                 jmp     loc_1E30
.text:000000000000225C ; ---------------------------------------------------------------------------
.text:000000000000225C
.text:000000000000225C loc_225C:                               ; CODE XREF: compare_files+2DE↑j
.text:000000000000225C                 mov     rax, [rsp+238h+var_1F0]
.text:0000000000002261                 movsxd  r15, r14d
.text:0000000000002264                 mov     esi, 3
.text:0000000000002269                 xor     edi, edi
.text:000000000000226B                 mov     rdx, [rax+r15*8]
.text:000000000000226F                 call    quotearg_n_style_colon
.text:0000000000002274                 mov     rbx, rax
.text:0000000000002277                 call    ___errno_location
.text:000000000000227C                 mov     esi, [rax]      ; errnum
.text:000000000000227E                 lea     rdx, format+4   ; format
.text:0000000000002285                 mov     rcx, rbx
.text:0000000000002288                 mov     edi, 1          ; status
.text:000000000000228D                 xor     eax, eax
.text:000000000000228F                 call    _error
.text:0000000000002294
.text:0000000000002294 loc_2294:                               ; CODE XREF: compare_files+40E↑j
.text:0000000000002294                 mov     [rsp+238h+var_1F4], 1
.text:000000000000229C
.text:000000000000229C loc_229C:                               ; CODE XREF: compare_files+3FC↑j
.text:000000000000229C                 movsxd  rax, [rsp+238h+var_1F4]
.text:00000000000022A1                 mov     rcx, [rsp+238h+var_1F0]
.text:00000000000022A6                 mov     esi, 3
.text:00000000000022AB                 xor     edi, edi
.text:00000000000022AD                 mov     rdx, [rcx+rax*8]
.text:00000000000022B1                 call    quotearg_n_style_colon
.text:00000000000022B6                 mov     rbx, rax
.text:00000000000022B9                 call    ___errno_location
.text:00000000000022BE                 mov     esi, [rax]      ; errnum
.text:00000000000022C0                 lea     rdx, format+4   ; format
.text:00000000000022C7                 mov     rcx, rbx
.text:00000000000022CA                 mov     edi, 1          ; status
.text:00000000000022CF                 xor     eax, eax
.text:00000000000022D1                 call    _error
.text:00000000000022D6
.text:00000000000022D6 loc_22D6:                               ; CODE XREF: compare_files+4CD↑j
.text:00000000000022D6                 call    ___stack_chk_fail
.text:00000000000022DB ; ---------------------------------------------------------------------------
.text:00000000000022DB
.text:00000000000022DB loc_22DB:                               ; CODE XREF: compare_files+11F↑j
.text:00000000000022DB                 mov     rdx, [r14]
.text:00000000000022DE                 mov     esi, 3
.text:00000000000022E3                 xor     edi, edi
.text:00000000000022E5                 call    quotearg_n_style_colon
.text:00000000000022EA                 mov     rbx, rax
.text:00000000000022ED                 call    ___errno_location
.text:00000000000022F2                 mov     esi, [rax]      ; errnum
.text:00000000000022F4                 lea     rdx, format+4   ; format
.text:00000000000022FB                 mov     rcx, rbx
.text:00000000000022FE                 mov     edi, 1          ; status
.text:0000000000002303                 xor     eax, eax
.text:0000000000002305                 call    _error
.text:000000000000230A
.text:000000000000230A loc_230A:                               ; CODE XREF: compare_files+DC↑j
.text:000000000000230A                 mov     rdx, [r14]
.text:000000000000230D                 mov     esi, 3
.text:0000000000002312                 xor     edi, edi
.text:0000000000002314                 call    quotearg_n_style_colon
.text:0000000000002319                 mov     rbx, rax
.text:000000000000231C                 call    ___errno_location
.text:0000000000002321                 mov     esi, [rax]      ; errnum
.text:0000000000002323                 lea     rdx, format+4   ; format
.text:000000000000232A                 mov     rcx, rbx
.text:000000000000232D                 mov     edi, 1          ; status
.text:0000000000002332                 xor     eax, eax
.text:0000000000002334                 call    _error
.text:0000000000002334 ; } // starts at 1D60
.text:0000000000002339                 nop     dword ptr [rax+00000000h]
.text:0000000000002339 compare_files   endp ; sp-analysis failed
.text:0000000000002339
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340 ; Attributes: noreturn
.text:0000000000002340
.text:0000000000002340 ; void __fastcall __noreturn usage(int status)
.text:0000000000002340                 public usage
.text:0000000000002340 usage           proc near               ; CODE XREF: main+2E0↑p
.text:0000000000002340                                         ; main+2E7↑p
.text:0000000000002340
.text:0000000000002340 var_A8          = qword ptr -0A8h
.text:0000000000002340 var_A0          = qword ptr -0A0h
.text:0000000000002340 var_98          = qword ptr -98h
.text:0000000000002340 var_90          = qword ptr -90h
.text:0000000000002340 var_88          = qword ptr -88h
.text:0000000000002340 var_80          = qword ptr -80h
.text:0000000000002340 var_78          = qword ptr -78h
.text:0000000000002340 var_70          = qword ptr -70h
.text:0000000000002340 var_68          = qword ptr -68h
.text:0000000000002340 var_60          = qword ptr -60h
.text:0000000000002340 var_58          = qword ptr -58h
.text:0000000000002340 var_50          = qword ptr -50h
.text:0000000000002340 var_48          = qword ptr -48h
.text:0000000000002340 var_40          = qword ptr -40h
.text:0000000000002340 var_30          = qword ptr -30h
.text:0000000000002340
.text:0000000000002340 ; __unwind {
.text:0000000000002340                 push    r13
.text:0000000000002342                 push    r12
.text:0000000000002344                 mov     edx, 5          ; category
.text:0000000000002349                 push    rbp
.text:000000000000234A                 push    rbx
.text:000000000000234B                 mov     ebp, edi
.text:000000000000234D                 sub     rsp, 88h
.text:0000000000002354                 mov     rbx, cs:program_name
.text:000000000000235B                 mov     rax, fs:28h
.text:0000000000002364                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002369                 xor     eax, eax
.text:000000000000236B                 test    edi, edi
.text:000000000000236D                 jz      short loc_239D
.text:000000000000236F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002376                 xor     edi, edi        ; domainname
.text:0000000000002378                 call    _dcgettext
.text:000000000000237D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002384                 mov     rdx, rax
.text:0000000000002387                 mov     rcx, rbx
.text:000000000000238A                 mov     esi, 1
.text:000000000000238F                 xor     eax, eax
.text:0000000000002391                 call    ___fprintf_chk
.text:0000000000002396
.text:0000000000002396 loc_2396:                               ; CODE XREF: usage+3D6↓j
.text:0000000000002396                 mov     edi, ebp        ; status
.text:0000000000002398                 call    _exit
.text:000000000000239D ; ---------------------------------------------------------------------------
.text:000000000000239D
.text:000000000000239D loc_239D:                               ; CODE XREF: usage+2D↑j
.text:000000000000239D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE1 FILE2\n"
.text:00000000000023A4                 xor     edi, edi        ; domainname
.text:00000000000023A6                 call    _dcgettext
.text:00000000000023AB                 mov     rdx, rbx
.text:00000000000023AE                 mov     rsi, rax
.text:00000000000023B1                 mov     edi, 1
.text:00000000000023B6                 xor     eax, eax
.text:00000000000023B8                 call    ___printf_chk
.text:00000000000023BD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023C4                 lea     rsi, aCompareSortedF ; "Compare sorted files FILE1 and FILE2 li"...
.text:00000000000023CB                 mov     edx, 5          ; category
.text:00000000000023D0                 xor     edi, edi        ; domainname
.text:00000000000023D2                 call    _dcgettext
.text:00000000000023D7                 mov     rsi, rbx        ; stream
.text:00000000000023DA                 mov     rdi, rax        ; s
.text:00000000000023DD                 call    _fputs_unlocked
.text:00000000000023E2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023E9                 lea     rsi, aWhenFile1OrFil ; "\nWhen FILE1 or FILE2 (not both) is -, "...
.text:00000000000023F0                 mov     edx, 5          ; category
.text:00000000000023F5                 xor     edi, edi        ; domainname
.text:00000000000023F7                 call    _dcgettext
.text:00000000000023FC                 mov     rsi, rbx        ; stream
.text:00000000000023FF                 mov     rdi, rax        ; s
.text:0000000000002402                 call    _fputs_unlocked
.text:0000000000002407                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000240E                 lea     rsi, aWithNoOptionsP ; "\nWith no options, produce three-column"...
.text:0000000000002415                 mov     edx, 5          ; category
.text:000000000000241A                 xor     edi, edi        ; domainname
.text:000000000000241C                 call    _dcgettext
.text:0000000000002421                 mov     rsi, rbx        ; stream
.text:0000000000002424                 mov     rdi, rax        ; s
.text:0000000000002427                 call    _fputs_unlocked
.text:000000000000242C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002433                 lea     rsi, a1SuppressColum ; "\n  -1              suppress column 1 ("...
.text:000000000000243A                 mov     edx, 5          ; category
.text:000000000000243F                 xor     edi, edi        ; domainname
.text:0000000000002441                 call    _dcgettext
.text:0000000000002446                 mov     rsi, rbx        ; stream
.text:0000000000002449                 mov     rdi, rax        ; s
.text:000000000000244C                 call    _fputs_unlocked
.text:0000000000002451                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002458                 lea     rsi, aCheckOrderChec ; "\n  --check-order     check that the in"...
.text:000000000000245F                 mov     edx, 5          ; category
.text:0000000000002464                 xor     edi, edi        ; domainname
.text:0000000000002466                 call    _dcgettext
.text:000000000000246B                 mov     rsi, rbx        ; stream
.text:000000000000246E                 mov     rdi, rax        ; s
.text:0000000000002471                 call    _fputs_unlocked
.text:0000000000002476                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000247D                 lea     rsi, aOutputDelimite ; "  --output-delimiter=STR  separate colu"...
.text:0000000000002484                 mov     edx, 5          ; category
.text:0000000000002489                 xor     edi, edi        ; domainname
.text:000000000000248B                 call    _dcgettext
.text:0000000000002490                 mov     rsi, rbx        ; stream
.text:0000000000002493                 mov     rdi, rax        ; s
.text:0000000000002496                 call    _fputs_unlocked
.text:000000000000249B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024A2                 lea     rsi, aTotalOutputASu ; "  --total           output a summary\n"
.text:00000000000024A9                 mov     edx, 5          ; category
.text:00000000000024AE                 xor     edi, edi        ; domainname
.text:00000000000024B0                 call    _dcgettext
.text:00000000000024B5                 mov     rsi, rbx        ; stream
.text:00000000000024B8                 mov     rdi, rax        ; s
.text:00000000000024BB                 call    _fputs_unlocked
.text:00000000000024C0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024C7                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated    line delimit"...
.text:00000000000024CE                 mov     edx, 5          ; category
.text:00000000000024D3                 xor     edi, edi        ; domainname
.text:00000000000024D5                 call    _dcgettext
.text:00000000000024DA                 mov     rsi, rbx        ; stream
.text:00000000000024DD                 mov     rdi, rax        ; s
.text:00000000000024E0                 call    _fputs_unlocked
.text:00000000000024E5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024EC                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000024F3                 mov     edx, 5          ; category
.text:00000000000024F8                 xor     edi, edi        ; domainname
.text:00000000000024FA                 call    _dcgettext
.text:00000000000024FF                 mov     rsi, rbx        ; stream
.text:0000000000002502                 mov     rdi, rax        ; s
.text:0000000000002505                 call    _fputs_unlocked
.text:000000000000250A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002511                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002518                 mov     edx, 5          ; category
.text:000000000000251D                 xor     edi, edi        ; domainname
.text:000000000000251F                 call    _dcgettext
.text:0000000000002524                 mov     rsi, rbx        ; stream
.text:0000000000002527                 mov     rdi, rax        ; s
.text:000000000000252A                 call    _fputs_unlocked
.text:000000000000252F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002536                 lea     rsi, aNoteComparison ; "\nNote, comparisons honor the rules spe"...
.text:000000000000253D                 mov     edx, 5          ; category
.text:0000000000002542                 xor     edi, edi        ; domainname
.text:0000000000002544                 call    _dcgettext
.text:0000000000002549                 mov     rsi, rbx        ; stream
.text:000000000000254C                 mov     rdi, rax        ; s
.text:000000000000254F                 call    _fputs_unlocked
.text:0000000000002554                 mov     rbx, cs:program_name
.text:000000000000255B                 lea     rsi, aExamplesS12Fil ; "\nExamples:\n  %s -12 file1 file2  Prin"...
.text:0000000000002562                 mov     edx, 5          ; category
.text:0000000000002567                 xor     edi, edi        ; domainname
.text:0000000000002569                 call    _dcgettext
.text:000000000000256E                 mov     rcx, rbx
.text:0000000000002571                 mov     rdx, rbx
.text:0000000000002574                 mov     rsi, rax
.text:0000000000002577                 mov     edi, 1
.text:000000000000257C                 xor     eax, eax
.text:000000000000257E                 lea     rbx, aComm      ; "comm"
.text:0000000000002585                 call    ___printf_chk
.text:000000000000258A                 lea     rax, asc_6081   ; "["
.text:0000000000002591                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002598                 mov     [rsp+0A8h+var_48], 0
.text:00000000000025A1                 mov     [rsp+0A8h+var_40], 0
.text:00000000000025AA                 mov     rdx, rsp
.text:00000000000025AD                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000025B1                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000025B8                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000025BD                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000025C4                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000025C9                 lea     rax, domainname ; "coreutils"
.text:00000000000025D0                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000025D5                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000025DC                 mov     [rsp+0A8h+var_98], rax
.text:00000000000025E1                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000025E8                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000025ED                 mov     [rsp+0A8h+var_90], rax
.text:00000000000025F2                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000025F9                 mov     [rsp+0A8h+var_88], rax
.text:00000000000025FE                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002605                 mov     [rsp+0A8h+var_80], rax
.text:000000000000260A                 mov     [rsp+0A8h+var_70], rax
.text:000000000000260F                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002614                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002619                 nop     dword ptr [rax+00000000h]
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: usage+2FD↓j
.text:0000000000002620                 add     rdx, 10h
.text:0000000000002624                 mov     rdi, [rdx]
.text:0000000000002627                 test    rdi, rdi
.text:000000000000262A                 jz      short loc_263F
.text:000000000000262C                 mov     ecx, 5
.text:0000000000002631                 mov     rsi, rbx
.text:0000000000002634                 repe cmpsb
.text:0000000000002636                 setnbe  al
.text:0000000000002639                 sbb     al, 0
.text:000000000000263B                 test    al, al
.text:000000000000263D                 jnz     short loc_2620
.text:000000000000263F
.text:000000000000263F loc_263F:                               ; CODE XREF: usage+2EA↑j
.text:000000000000263F                 mov     r12, [rdx+8]
.text:0000000000002643                 xor     edi, edi        ; domainname
.text:0000000000002645                 mov     edx, 5          ; category
.text:000000000000264A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002651                 test    r12, r12
.text:0000000000002654                 jz      loc_271B
.text:000000000000265A                 call    _dcgettext
.text:000000000000265F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002666                 lea     rdx, unk_60F7
.text:000000000000266D                 mov     rsi, rax
.text:0000000000002670                 mov     edi, 1
.text:0000000000002675                 xor     eax, eax
.text:0000000000002677                 call    ___printf_chk
.text:000000000000267C                 xor     esi, esi        ; locale
.text:000000000000267E                 mov     edi, 5          ; category
.text:0000000000002683                 call    _setlocale
.text:0000000000002688                 test    rax, rax
.text:000000000000268B                 jz      short loc_26A9
.text:000000000000268D                 lea     rsi, s2         ; "en_"
.text:0000000000002694                 mov     edx, 3          ; n
.text:0000000000002699                 mov     rdi, rax        ; s1
.text:000000000000269C                 call    _strncmp
.text:00000000000026A1                 test    eax, eax
.text:00000000000026A3                 jnz     loc_27B0
.text:00000000000026A9
.text:00000000000026A9 loc_26A9:                               ; CODE XREF: usage+34B↑j
.text:00000000000026A9                                         ; usage+495↓j
.text:00000000000026A9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000026B0                 xor     edi, edi        ; domainname
.text:00000000000026B2                 mov     edx, 5          ; category
.text:00000000000026B7                 call    _dcgettext
.text:00000000000026BC                 lea     rcx, aComm      ; "comm"
.text:00000000000026C3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000026CA                 mov     rsi, rax
.text:00000000000026CD                 mov     edi, 1
.text:00000000000026D2                 xor     eax, eax
.text:00000000000026D4                 call    ___printf_chk
.text:00000000000026D9                 cmp     r12, rbx
.text:00000000000026DC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000026E3                 lea     rbx, locale
.text:00000000000026EA                 cmovz   rbx, rcx
.text:00000000000026EE
.text:00000000000026EE loc_26EE:                               ; CODE XREF: usage+464↓j
.text:00000000000026EE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000026F5                 xor     edi, edi        ; domainname
.text:00000000000026F7                 mov     edx, 5          ; category
.text:00000000000026FC                 call    _dcgettext
.text:0000000000002701                 mov     rcx, rbx
.text:0000000000002704                 mov     rsi, rax
.text:0000000000002707                 mov     rdx, r12
.text:000000000000270A                 mov     edi, 1
.text:000000000000270F                 xor     eax, eax
.text:0000000000002711                 call    ___printf_chk
.text:0000000000002716                 jmp     loc_2396
.text:000000000000271B ; ---------------------------------------------------------------------------
.text:000000000000271B
.text:000000000000271B loc_271B:                               ; CODE XREF: usage+314↑j
.text:000000000000271B                 call    _dcgettext
.text:0000000000002720                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002727                 lea     rdx, unk_60F7
.text:000000000000272E                 mov     rsi, rax
.text:0000000000002731                 mov     edi, 1
.text:0000000000002736                 xor     eax, eax
.text:0000000000002738                 call    ___printf_chk
.text:000000000000273D                 xor     esi, esi        ; locale
.text:000000000000273F                 mov     edi, 5          ; category
.text:0000000000002744                 call    _setlocale
.text:0000000000002749                 test    rax, rax
.text:000000000000274C                 jz      short loc_2766
.text:000000000000274E                 lea     rsi, s2         ; "en_"
.text:0000000000002755                 mov     edx, 3          ; n
.text:000000000000275A                 mov     rdi, rax        ; s1
.text:000000000000275D                 call    _strncmp
.text:0000000000002762                 test    eax, eax
.text:0000000000002764                 jnz     short loc_27A9
.text:0000000000002766
.text:0000000000002766 loc_2766:                               ; CODE XREF: usage+40C↑j
.text:0000000000002766                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000276D                 mov     edx, 5          ; category
.text:0000000000002772                 xor     edi, edi        ; domainname
.text:0000000000002774                 lea     r12, aComm      ; "comm"
.text:000000000000277B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002782                 call    _dcgettext
.text:0000000000002787                 lea     rcx, aComm      ; "comm"
.text:000000000000278E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002795                 mov     rsi, rax
.text:0000000000002798                 mov     edi, 1
.text:000000000000279D                 xor     eax, eax
.text:000000000000279F                 call    ___printf_chk
.text:00000000000027A4                 jmp     loc_26EE
.text:00000000000027A9 ; ---------------------------------------------------------------------------
.text:00000000000027A9
.text:00000000000027A9 loc_27A9:                               ; CODE XREF: usage+424↑j
.text:00000000000027A9                 lea     r12, aComm      ; "comm"
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: usage+363↑j
.text:00000000000027B0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000027B7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000027BE                 xor     edi, edi        ; domainname
.text:00000000000027C0                 mov     edx, 5          ; category
.text:00000000000027C5                 call    _dcgettext
.text:00000000000027CA                 mov     rsi, r13        ; stream
.text:00000000000027CD                 mov     rdi, rax        ; s
.text:00000000000027D0                 call    _fputs_unlocked
.text:00000000000027D5                 jmp     loc_26A9
.text:00000000000027D5 ; } // starts at 2340
.text:00000000000027D5 usage           endp
.text:00000000000027D5
.text:00000000000027D5 ; ---------------------------------------------------------------------------
.text:00000000000027DA                 align 20h
.text:00000000000027E0
.text:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027E0
.text:00000000000027E0
.text:00000000000027E0                 public close_stdout_set_file_name
.text:00000000000027E0 close_stdout_set_file_name proc near
.text:00000000000027E0 ; __unwind {
.text:00000000000027E0                 mov     cs:file_name, rdi
.text:00000000000027E7                 retn
.text:00000000000027E7 ; } // starts at 27E0
.text:00000000000027E7 close_stdout_set_file_name endp
.text:00000000000027E7
.text:00000000000027E7 ; ---------------------------------------------------------------------------
.text:00000000000027E8                 align 10h
.text:00000000000027F0
.text:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027F0
.text:00000000000027F0
.text:00000000000027F0                 public close_stdout_set_ignore_EPIPE
.text:00000000000027F0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000027F0 ; __unwind {
.text:00000000000027F0                 mov     cs:ignore_EPIPE, dil
.text:00000000000027F7                 retn
.text:00000000000027F7 ; } // starts at 27F0
.text:00000000000027F7 close_stdout_set_ignore_EPIPE endp
.text:00000000000027F7
.text:00000000000027F7 ; ---------------------------------------------------------------------------
.text:00000000000027F8                 align 20h
.text:0000000000002800
.text:0000000000002800 ; =============== S U B R O U T I N E =======================================
.text:0000000000002800
.text:0000000000002800 ; Attributes: info_from_lumina
.text:0000000000002800
.text:0000000000002800 ; void __cdecl close_stdout()
.text:0000000000002800                 public close_stdout
.text:0000000000002800 close_stdout    proc near               ; DATA XREF: main+59↑o
.text:0000000000002800 ; __unwind {
.text:0000000000002800                 push    rbp
.text:0000000000002801                 push    rbx
.text:0000000000002802                 sub     rsp, 8
.text:0000000000002806                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000280D                 call    close_stream
.text:0000000000002812                 test    eax, eax
.text:0000000000002814                 jz      short loc_282C
.text:0000000000002816                 call    ___errno_location
.text:000000000000281B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002822                 mov     rbx, rax
.text:0000000000002825                 jz      short loc_2843
.text:0000000000002827                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000282A                 jnz     short loc_2843
.text:000000000000282C
.text:000000000000282C loc_282C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000282C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002833                 call    close_stream
.text:0000000000002838                 test    eax, eax
.text:000000000000283A                 jnz     short loc_2882
.text:000000000000283C                 add     rsp, 8
.text:0000000000002840                 pop     rbx
.text:0000000000002841                 pop     rbp
.text:0000000000002842                 retn
.text:0000000000002843 ; ---------------------------------------------------------------------------
.text:0000000000002843
.text:0000000000002843 loc_2843:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002843                                         ; close_stdout+2A↑j
.text:0000000000002843                 lea     rsi, aWriteError ; "write error"
.text:000000000000284A                 xor     edi, edi        ; domainname
.text:000000000000284C                 mov     edx, 5          ; category
.text:0000000000002851                 call    _dcgettext
.text:0000000000002856                 mov     rdi, cs:file_name
.text:000000000000285D                 mov     rbp, rax
.text:0000000000002860                 test    rdi, rdi
.text:0000000000002863                 jz      short loc_288D
.text:0000000000002865                 call    quotearg_colon
.text:000000000000286A                 mov     esi, [rbx]      ; errnum
.text:000000000000286C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002873                 mov     rcx, rax
.text:0000000000002876                 mov     r8, rbp
.text:0000000000002879                 xor     edi, edi        ; status
.text:000000000000287B                 xor     eax, eax
.text:000000000000287D                 call    _error
.text:0000000000002882
.text:0000000000002882 loc_2882:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002882                                         ; close_stdout+A2↓j
.text:0000000000002882                 mov     edi, cs:exit_failure ; status
.text:0000000000002888                 call    __exit
.text:000000000000288D ; ---------------------------------------------------------------------------
.text:000000000000288D
.text:000000000000288D loc_288D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000288D                 mov     esi, [rbx]      ; errnum
.text:000000000000288F                 lea     rdx, format+4   ; format
.text:0000000000002896                 mov     rcx, rax
.text:0000000000002899                 xor     edi, edi        ; status
.text:000000000000289B                 xor     eax, eax
.text:000000000000289D                 call    _error
.text:00000000000028A2                 jmp     short loc_2882
.text:00000000000028A2 ; } // starts at 2800
.text:00000000000028A2 close_stdout    endp
.text:00000000000028A2
.text:00000000000028A2 ; ---------------------------------------------------------------------------
.text:00000000000028A4                 align 10h
.text:00000000000028B0
.text:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028B0
.text:00000000000028B0
.text:00000000000028B0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:00000000000028B0                 public fdadvise
.text:00000000000028B0 fdadvise        proc near
.text:00000000000028B0 ; __unwind {
.text:00000000000028B0                 jmp     _posix_fadvise
.text:00000000000028B0 ; } // starts at 28B0
.text:00000000000028B0 fdadvise        endp
.text:00000000000028B0
.text:00000000000028B0 ; ---------------------------------------------------------------------------
.text:00000000000028B5                 align 20h
.text:00000000000028C0
.text:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028C0
.text:00000000000028C0
.text:00000000000028C0                 public fadvise
.text:00000000000028C0 fadvise         proc near               ; CODE XREF: compare_files+EA↑p
.text:00000000000028C0 ; __unwind {
.text:00000000000028C0                 test    rdi, rdi
.text:00000000000028C3                 jz      short locret_28E0
.text:00000000000028C5                 push    rbx
.text:00000000000028C6                 mov     ebx, esi
.text:00000000000028C8                 call    _fileno
.text:00000000000028CD                 mov     ecx, ebx        ; advise
.text:00000000000028CF                 xor     edx, edx        ; len
.text:00000000000028D1                 xor     esi, esi        ; offset
.text:00000000000028D3                 pop     rbx
.text:00000000000028D4                 mov     edi, eax        ; fd
.text:00000000000028D6                 jmp     _posix_fadvise
.text:00000000000028D6 ; ---------------------------------------------------------------------------
.text:00000000000028DB                 align 20h
.text:00000000000028E0
.text:00000000000028E0 locret_28E0:                            ; CODE XREF: fadvise+3↑j
.text:00000000000028E0                 rep retn
.text:00000000000028E0 ; } // starts at 28C0
.text:00000000000028E0 fadvise         endp
.text:00000000000028E0
.text:00000000000028E0 ; ---------------------------------------------------------------------------
.text:00000000000028E2                 align 10h
.text:00000000000028F0
.text:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028F0
.text:00000000000028F0
.text:00000000000028F0                 public fopen_safer
.text:00000000000028F0 fopen_safer     proc near               ; CODE XREF: compare_files+4EF↑p
.text:00000000000028F0 ; __unwind {
.text:00000000000028F0                 push    r12
.text:00000000000028F2                 push    rbp
.text:00000000000028F3                 mov     rbp, rsi
.text:00000000000028F6                 push    rbx
.text:00000000000028F7                 call    _fopen
.text:00000000000028FC                 test    rax, rax
.text:00000000000028FF                 mov     rbx, rax
.text:0000000000002902                 jz      short loc_2911
.text:0000000000002904                 mov     rdi, rax        ; stream
.text:0000000000002907                 call    _fileno
.text:000000000000290C                 cmp     eax, 2
.text:000000000000290F                 jbe     short loc_2920
.text:0000000000002911
.text:0000000000002911 loc_2911:                               ; CODE XREF: fopen_safer+12↑j
.text:0000000000002911                                         ; fopen_safer+5B↓j ...
.text:0000000000002911                 mov     rax, rbx
.text:0000000000002914                 pop     rbx
.text:0000000000002915                 pop     rbp
.text:0000000000002916                 pop     r12
.text:0000000000002918                 retn
.text:0000000000002918 ; ---------------------------------------------------------------------------
.text:0000000000002919                 align 20h
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000002920                 mov     edi, eax
.text:0000000000002922                 call    dup_safer
.text:0000000000002927                 test    eax, eax
.text:0000000000002929                 mov     r12d, eax
.text:000000000000292C                 js      short loc_2968
.text:000000000000292E                 mov     rdi, rbx        ; stream
.text:0000000000002931                 call    rpl_fclose
.text:0000000000002936                 test    eax, eax
.text:0000000000002938                 jnz     short loc_294D
.text:000000000000293A                 mov     rsi, rbp        ; modes
.text:000000000000293D                 mov     edi, r12d       ; fd
.text:0000000000002940                 call    _fdopen
.text:0000000000002945                 test    rax, rax
.text:0000000000002948                 mov     rbx, rax
.text:000000000000294B                 jnz     short loc_2911
.text:000000000000294D
.text:000000000000294D loc_294D:                               ; CODE XREF: fopen_safer+48↑j
.text:000000000000294D                 call    ___errno_location
.text:0000000000002952                 mov     ebp, [rax]
.text:0000000000002954                 mov     rbx, rax
.text:0000000000002957                 mov     edi, r12d       ; fd
.text:000000000000295A                 call    _close
.text:000000000000295F                 mov     [rbx], ebp
.text:0000000000002961                 xor     ebx, ebx
.text:0000000000002963                 jmp     short loc_2911
.text:0000000000002963 ; ---------------------------------------------------------------------------
.text:0000000000002965                 align 8
.text:0000000000002968
.text:0000000000002968 loc_2968:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000002968                 call    ___errno_location
.text:000000000000296D                 mov     r12d, [rax]
.text:0000000000002970                 mov     rbp, rax
.text:0000000000002973                 mov     rdi, rbx        ; stream
.text:0000000000002976                 call    rpl_fclose
.text:000000000000297B                 xor     ebx, ebx
.text:000000000000297D                 mov     [rbp+0], r12d
.text:0000000000002981                 jmp     short loc_2911
.text:0000000000002981 ; } // starts at 28F0
.text:0000000000002981 fopen_safer     endp
.text:0000000000002981
.text:0000000000002981 ; ---------------------------------------------------------------------------
.text:0000000000002983                 align 10h
.text:0000000000002990
.text:0000000000002990 ; =============== S U B R O U T I N E =======================================
.text:0000000000002990
.text:0000000000002990
.text:0000000000002990                 public hard_locale
.text:0000000000002990 hard_locale     proc near               ; CODE XREF: main+54↑p
.text:0000000000002990                                         ; rpl_mbrtowc+47↓p
.text:0000000000002990 ; __unwind {
.text:0000000000002990                 sub     rsp, 8
.text:0000000000002994                 xor     esi, esi        ; locale
.text:0000000000002996                 call    _setlocale
.text:000000000000299B                 mov     rdx, rax
.text:000000000000299E                 mov     eax, 1
.text:00000000000029A3                 test    rdx, rdx
.text:00000000000029A6                 jz      short loc_29C5
.text:00000000000029A8                 lea     rdi, aC         ; "C"
.text:00000000000029AF                 mov     ecx, 2
.text:00000000000029B4                 mov     rsi, rdx
.text:00000000000029B7                 repe cmpsb
.text:00000000000029B9                 setnbe  cl
.text:00000000000029BC                 sbb     cl, 0
.text:00000000000029BF                 xor     eax, eax
.text:00000000000029C1                 test    cl, cl
.text:00000000000029C3                 jnz     short loc_29D0
.text:00000000000029C5
.text:00000000000029C5 loc_29C5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000029C5                 add     rsp, 8
.text:00000000000029C9                 retn
.text:00000000000029C9 ; ---------------------------------------------------------------------------
.text:00000000000029CA                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000029D0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000029D7                 mov     ecx, 6
.text:00000000000029DC                 mov     rsi, rdx
.text:00000000000029DF                 repe cmpsb
.text:00000000000029E1                 setnbe  al
.text:00000000000029E4                 sbb     al, 0
.text:00000000000029E6                 test    al, al
.text:00000000000029E8                 setnz   al
.text:00000000000029EB                 add     rsp, 8
.text:00000000000029EF                 retn
.text:00000000000029EF ; } // starts at 2990
.text:00000000000029EF hard_locale     endp
.text:00000000000029EF
.text:00000000000029F0
.text:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029F0
.text:00000000000029F0 ; Attributes: info_from_lumina
.text:00000000000029F0
.text:00000000000029F0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:00000000000029F0                 public umaxtostr
.text:00000000000029F0 umaxtostr       proc near               ; CODE XREF: compare_files+452↑p
.text:00000000000029F0                                         ; compare_files+46E↑p ...
.text:00000000000029F0 ; __unwind {
.text:00000000000029F0                 lea     rcx, [rsi+14h]
.text:00000000000029F4                 mov     byte ptr [rsi+14h], 0
.text:00000000000029F8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000002A02                 nop     word ptr [rax+rax+00h]
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000002A08                 mov     rax, rdi
.text:0000000000002A0B                 sub     rcx, 1
.text:0000000000002A0F                 mul     rsi
.text:0000000000002A12                 shr     rdx, 3
.text:0000000000002A16                 lea     rax, [rdx+rdx*4]
.text:0000000000002A1A                 add     rax, rax
.text:0000000000002A1D                 sub     rdi, rax
.text:0000000000002A20                 add     edi, 30h ; '0'
.text:0000000000002A23                 test    rdx, rdx
.text:0000000000002A26                 mov     [rcx], dil
.text:0000000000002A29                 mov     rdi, rdx
.text:0000000000002A2C                 jnz     short loc_2A08
.text:0000000000002A2E                 mov     rax, rcx
.text:0000000000002A31                 retn
.text:0000000000002A31 ; } // starts at 29F0
.text:0000000000002A31 umaxtostr       endp
.text:0000000000002A31
.text:0000000000002A31 ; ---------------------------------------------------------------------------
.text:0000000000002A32                 align 20h
.text:0000000000002A40
.text:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A40
.text:0000000000002A40
.text:0000000000002A40                 public initbuffer
.text:0000000000002A40 initbuffer      proc near               ; CODE XREF: compare_files+7C↑p
.text:0000000000002A40 ; __unwind {
.text:0000000000002A40                 pxor    xmm0, xmm0
.text:0000000000002A44                 mov     qword ptr [rdi+10h], 0
.text:0000000000002A4C                 movups  xmmword ptr [rdi], xmm0
.text:0000000000002A4F                 retn
.text:0000000000002A4F ; } // starts at 2A40
.text:0000000000002A4F initbuffer      endp
.text:0000000000002A4F
.text:0000000000002A50
.text:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A50
.text:0000000000002A50
.text:0000000000002A50                 public readlinebuffer_delim
.text:0000000000002A50 readlinebuffer_delim proc near          ; CODE XREF: compare_files+10A↑p
.text:0000000000002A50                                         ; compare_files+280↑p ...
.text:0000000000002A50
.text:0000000000002A50 var_48          = qword ptr -48h
.text:0000000000002A50 var_39          = byte ptr -39h
.text:0000000000002A50
.text:0000000000002A50 ; __unwind {
.text:0000000000002A50                 push    r15
.text:0000000000002A52                 push    r14
.text:0000000000002A54                 push    r13
.text:0000000000002A56                 push    r12
.text:0000000000002A58                 push    rbp
.text:0000000000002A59                 push    rbx
.text:0000000000002A5A                 sub     rsp, 18h
.text:0000000000002A5E                 mov     r13, [rdi+10h]
.text:0000000000002A62                 mov     r8, [rdi]
.text:0000000000002A65                 add     r8, r13
.text:0000000000002A68                 test    byte ptr [rsi], 10h
.text:0000000000002A6B                 jnz     loc_2B40
.text:0000000000002A71                 mov     r14, rdi
.text:0000000000002A74                 mov     rbp, rsi
.text:0000000000002A77                 mov     rbx, r13
.text:0000000000002A7A                 movsx   r15d, dl
.text:0000000000002A7E                 jmp     short loc_2A8B
.text:0000000000002A80 ; ---------------------------------------------------------------------------
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: readlinebuffer_delim+5A↓j
.text:0000000000002A80                 cmp     r12d, r15d
.text:0000000000002A83                 lea     rbx, [rsi+1]
.text:0000000000002A87                 mov     [rsi], cl
.text:0000000000002A89                 jz      short loc_2AE6
.text:0000000000002A8B
.text:0000000000002A8B loc_2A8B:                               ; CODE XREF: readlinebuffer_delim+2E↑j
.text:0000000000002A8B                                         ; readlinebuffer_delim+94↓j
.text:0000000000002A8B                 mov     rcx, [rbp+8]
.text:0000000000002A8F                 cmp     rcx, [rbp+10h]
.text:0000000000002A93                 jnb     short loc_2B00
.text:0000000000002A95                 lea     rax, [rcx+1]
.text:0000000000002A99                 mov     [rbp+8], rax
.text:0000000000002A9D                 movzx   r12d, byte ptr [rcx]
.text:0000000000002AA1                 mov     ecx, r12d
.text:0000000000002AA4
.text:0000000000002AA4 loc_2AA4:                               ; CODE XREF: readlinebuffer_delim+E6↓j
.text:0000000000002AA4                                         ; readlinebuffer_delim+103↓j
.text:0000000000002AA4                 cmp     rbx, r8
.text:0000000000002AA7                 mov     rsi, rbx
.text:0000000000002AAA                 jnz     short loc_2A80
.text:0000000000002AAC                 mov     rbx, [r14]
.text:0000000000002AAF                 mov     rsi, r14
.text:0000000000002AB2                 mov     rdi, r13
.text:0000000000002AB5                 mov     [rsp+48h+var_39], dl
.text:0000000000002AB9                 mov     byte ptr [rsp+48h+var_48], cl
.text:0000000000002ABC                 call    x2realloc
.text:0000000000002AC1                 mov     r8, [r14]
.text:0000000000002AC4                 movzx   ecx, byte ptr [rsp+48h+var_48]
.text:0000000000002AC8                 lea     rsi, [rax+rbx]
.text:0000000000002ACC                 mov     [r14+10h], rax
.text:0000000000002AD0                 mov     r13, rax
.text:0000000000002AD3                 movzx   edx, [rsp+48h+var_39]
.text:0000000000002AD8                 lea     rbx, [rsi+1]
.text:0000000000002ADC                 add     r8, rax
.text:0000000000002ADF                 cmp     r12d, r15d
.text:0000000000002AE2                 mov     [rsi], cl
.text:0000000000002AE4                 jnz     short loc_2A8B
.text:0000000000002AE6
.text:0000000000002AE6 loc_2AE6:                               ; CODE XREF: readlinebuffer_delim+39↑j
.text:0000000000002AE6                                         ; readlinebuffer_delim+DF↓j
.text:0000000000002AE6                 sub     rbx, r13
.text:0000000000002AE9                 mov     rax, r14
.text:0000000000002AEC                 mov     [r14+8], rbx
.text:0000000000002AF0                 add     rsp, 18h
.text:0000000000002AF4                 pop     rbx
.text:0000000000002AF5                 pop     rbp
.text:0000000000002AF6                 pop     r12
.text:0000000000002AF8                 pop     r13
.text:0000000000002AFA                 pop     r14
.text:0000000000002AFC                 pop     r15
.text:0000000000002AFE                 retn
.text:0000000000002AFE ; ---------------------------------------------------------------------------
.text:0000000000002AFF                 align 20h
.text:0000000000002B00
.text:0000000000002B00 loc_2B00:                               ; CODE XREF: readlinebuffer_delim+43↑j
.text:0000000000002B00                 mov     rdi, rbp        ; _IO_FILE *
.text:0000000000002B03                 mov     [rsp+48h+var_39], dl
.text:0000000000002B07                 mov     [rsp+48h+var_48], r8
.text:0000000000002B0B                 call    ___uflow
.text:0000000000002B10                 cmp     eax, 0FFFFFFFFh
.text:0000000000002B13                 mov     r12d, eax
.text:0000000000002B16                 mov     r8, [rsp+48h+var_48]
.text:0000000000002B1A                 movzx   edx, [rsp+48h+var_39]
.text:0000000000002B1F                 jnz     short loc_2B51
.text:0000000000002B21                 cmp     r13, rbx
.text:0000000000002B24                 jz      short loc_2B40
.text:0000000000002B26                 test    byte ptr [rbp+0], 20h
.text:0000000000002B2A                 jnz     short loc_2B40
.text:0000000000002B2C                 cmp     [rbx-1], dl
.text:0000000000002B2F                 jz      short loc_2AE6
.text:0000000000002B31                 mov     r12d, r15d
.text:0000000000002B34                 mov     ecx, edx
.text:0000000000002B36                 jmp     loc_2AA4
.text:0000000000002B36 ; ---------------------------------------------------------------------------
.text:0000000000002B3B                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: readlinebuffer_delim+1B↑j
.text:0000000000002B40                                         ; readlinebuffer_delim+D4↑j ...
.text:0000000000002B40                 add     rsp, 18h
.text:0000000000002B44                 xor     eax, eax
.text:0000000000002B46                 pop     rbx
.text:0000000000002B47                 pop     rbp
.text:0000000000002B48                 pop     r12
.text:0000000000002B4A                 pop     r13
.text:0000000000002B4C                 pop     r14
.text:0000000000002B4E                 pop     r15
.text:0000000000002B50                 retn
.text:0000000000002B51 ; ---------------------------------------------------------------------------
.text:0000000000002B51
.text:0000000000002B51 loc_2B51:                               ; CODE XREF: readlinebuffer_delim+CF↑j
.text:0000000000002B51                 mov     ecx, eax
.text:0000000000002B53                 jmp     loc_2AA4
.text:0000000000002B53 ; } // starts at 2A50
.text:0000000000002B53 readlinebuffer_delim endp
.text:0000000000002B53
.text:0000000000002B53 ; ---------------------------------------------------------------------------
.text:0000000000002B58                 align 20h
.text:0000000000002B60
.text:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B60
.text:0000000000002B60
.text:0000000000002B60                 public readlinebuffer
.text:0000000000002B60 readlinebuffer  proc near
.text:0000000000002B60 ; __unwind {
.text:0000000000002B60                 mov     edx, 0Ah
.text:0000000000002B65                 jmp     readlinebuffer_delim
.text:0000000000002B65 ; } // starts at 2B60
.text:0000000000002B65 readlinebuffer  endp
.text:0000000000002B65
.text:0000000000002B65 ; ---------------------------------------------------------------------------
.text:0000000000002B6A                 align 10h
.text:0000000000002B70
.text:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B70
.text:0000000000002B70
.text:0000000000002B70                 public freebuffer
.text:0000000000002B70 freebuffer      proc near
.text:0000000000002B70 ; __unwind {
.text:0000000000002B70                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000002B74                 jmp     _free
.text:0000000000002B74 ; } // starts at 2B70
.text:0000000000002B74 freebuffer      endp
.text:0000000000002B74
.text:0000000000002B74 ; ---------------------------------------------------------------------------
.text:0000000000002B79                 align 20h
.text:0000000000002B80
.text:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B80
.text:0000000000002B80
.text:0000000000002B80                 public memcmp2
.text:0000000000002B80 memcmp2         proc near               ; CODE XREF: check_order_isra_1_part_2+3F↑p
.text:0000000000002B80 ; __unwind {
.text:0000000000002B80                 push    rbp
.text:0000000000002B81                 push    rbx
.text:0000000000002B82                 mov     rbp, rsi
.text:0000000000002B85                 mov     rsi, rdx        ; s2
.text:0000000000002B88                 mov     rdx, rcx
.text:0000000000002B8B                 mov     rbx, rcx
.text:0000000000002B8E                 sub     rsp, 8
.text:0000000000002B92                 cmp     rbp, rcx
.text:0000000000002B95                 cmovbe  rdx, rbp        ; n
.text:0000000000002B99                 call    _memcmp
.text:0000000000002B9E                 test    eax, eax
.text:0000000000002BA0                 jnz     short loc_2BAD
.text:0000000000002BA2                 cmp     rbp, rbx
.text:0000000000002BA5                 jb      short loc_2BB8
.text:0000000000002BA7                 setnbe  al
.text:0000000000002BAA                 movzx   eax, al
.text:0000000000002BAD
.text:0000000000002BAD loc_2BAD:                               ; CODE XREF: memcmp2+20↑j
.text:0000000000002BAD                                         ; memcmp2+3D↓j
.text:0000000000002BAD                 add     rsp, 8
.text:0000000000002BB1                 pop     rbx
.text:0000000000002BB2                 pop     rbp
.text:0000000000002BB3                 retn
.text:0000000000002BB3 ; ---------------------------------------------------------------------------
.text:0000000000002BB4                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: memcmp2+25↑j
.text:0000000000002BB8                 mov     eax, 0FFFFFFFFh
.text:0000000000002BBD                 jmp     short loc_2BAD
.text:0000000000002BBD ; } // starts at 2B80
.text:0000000000002BBD memcmp2         endp
.text:0000000000002BBD
.text:0000000000002BBD ; ---------------------------------------------------------------------------
.text:0000000000002BBF                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0
.text:0000000000002BC0                 public set_program_name
.text:0000000000002BC0 set_program_name proc near              ; CODE XREF: main+1A↑p
.text:0000000000002BC0 ; __unwind {
.text:0000000000002BC0                 test    rdi, rdi
.text:0000000000002BC3                 push    rbx
.text:0000000000002BC4                 jz      short loc_2C3D
.text:0000000000002BC6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002BCB                 mov     rbx, rdi
.text:0000000000002BCE                 call    _strrchr
.text:0000000000002BD3                 test    rax, rax
.text:0000000000002BD6                 jz      short loc_2C2D
.text:0000000000002BD8                 lea     r8, [rax+1]
.text:0000000000002BDC                 mov     rdx, r8
.text:0000000000002BDF                 sub     rdx, rbx
.text:0000000000002BE2                 cmp     rdx, 6
.text:0000000000002BE6                 jle     short loc_2C2D
.text:0000000000002BE8                 lea     rsi, [rax-6]
.text:0000000000002BEC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002BF3                 mov     ecx, 7
.text:0000000000002BF8                 repe cmpsb
.text:0000000000002BFA                 setnbe  dl
.text:0000000000002BFD                 sbb     dl, 0
.text:0000000000002C00                 test    dl, dl
.text:0000000000002C02                 jnz     short loc_2C2D
.text:0000000000002C04                 lea     rdi, aLt        ; "lt-"
.text:0000000000002C0B                 mov     ecx, 3
.text:0000000000002C10                 mov     rsi, r8
.text:0000000000002C13                 mov     rbx, r8
.text:0000000000002C16                 repe cmpsb
.text:0000000000002C18                 setnbe  dl
.text:0000000000002C1B                 sbb     dl, 0
.text:0000000000002C1E                 test    dl, dl
.text:0000000000002C20                 jnz     short loc_2C2D
.text:0000000000002C22                 lea     rbx, [rax+4]
.text:0000000000002C26                 mov     cs:__bss_start, rbx
.text:0000000000002C2D
.text:0000000000002C2D loc_2C2D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002C2D                                         ; set_program_name+26↑j ...
.text:0000000000002C2D                 mov     cs:program_name, rbx
.text:0000000000002C34                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002C3B                 pop     rbx
.text:0000000000002C3C                 retn
.text:0000000000002C3D ; ---------------------------------------------------------------------------
.text:0000000000002C3D
.text:0000000000002C3D loc_2C3D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002C3D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002C44                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002C4B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002C50                 mov     esi, 1          ; size
.text:0000000000002C55                 call    _fwrite
.text:0000000000002C5A                 call    _abort
.text:0000000000002C5A ; } // starts at 2BC0
.text:0000000000002C5A set_program_name endp
.text:0000000000002C5A
.text:0000000000002C5A ; ---------------------------------------------------------------------------
.text:0000000000002C5F                 align 20h
.text:0000000000002C60
.text:0000000000002C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C60
.text:0000000000002C60 ; Attributes: info_from_lumina
.text:0000000000002C60
.text:0000000000002C60 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002C60 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002C60                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002C60 ; __unwind {
.text:0000000000002C60                 push    rbp
.text:0000000000002C61                 push    rbx
.text:0000000000002C62                 mov     rbp, rdi
.text:0000000000002C65                 mov     ebx, esi
.text:0000000000002C67                 sub     rsp, 8
.text:0000000000002C6B                 call    locale_charset
.text:0000000000002C70                 movzx   edx, byte ptr [rax]
.text:0000000000002C73                 and     edx, 0FFFFFFDFh
.text:0000000000002C76                 cmp     dl, 55h ; 'U'
.text:0000000000002C79                 jz      short loc_2CF0
.text:0000000000002C7B                 cmp     dl, 47h ; 'G'
.text:0000000000002C7E                 jz      short loc_2CA0
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002C80                                         ; gettext_quote+50↓j ...
.text:0000000000002C80                 lea     rax, unk_6273
.text:0000000000002C87                 lea     rdx, asc_6275   ; "'"
.text:0000000000002C8E                 cmp     ebx, 9
.text:0000000000002C91                 cmovnz  rax, rdx
.text:0000000000002C95                 add     rsp, 8
.text:0000000000002C99                 pop     rbx
.text:0000000000002C9A                 pop     rbp
.text:0000000000002C9B                 retn
.text:0000000000002C9B ; ---------------------------------------------------------------------------
.text:0000000000002C9C                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002CA0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002CA4                 and     edx, 0FFFFFFDFh
.text:0000000000002CA7                 cmp     dl, 42h ; 'B'
.text:0000000000002CAA                 jnz     short loc_2C80
.text:0000000000002CAC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002CB0                 jnz     short loc_2C80
.text:0000000000002CB2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002CB6                 jnz     short loc_2C80
.text:0000000000002CB8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002CBC                 jnz     short loc_2C80
.text:0000000000002CBE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002CC2                 jnz     short loc_2C80
.text:0000000000002CC4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002CC8                 jnz     short loc_2C80
.text:0000000000002CCA                 cmp     byte ptr [rax+7], 0
.text:0000000000002CCE                 jnz     short loc_2C80
.text:0000000000002CD0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002CD4                 lea     rax, unk_626C
.text:0000000000002CDB                 lea     rdx, unk_6270
.text:0000000000002CE2                 cmovnz  rax, rdx
.text:0000000000002CE6                 add     rsp, 8
.text:0000000000002CEA                 pop     rbx
.text:0000000000002CEB                 pop     rbp
.text:0000000000002CEC                 retn
.text:0000000000002CEC ; ---------------------------------------------------------------------------
.text:0000000000002CED                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002CF0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002CF4                 and     edx, 0FFFFFFDFh
.text:0000000000002CF7                 cmp     dl, 54h ; 'T'
.text:0000000000002CFA                 jnz     short loc_2C80
.text:0000000000002CFC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002D00                 and     edx, 0FFFFFFDFh
.text:0000000000002D03                 cmp     dl, 46h ; 'F'
.text:0000000000002D06                 jnz     loc_2C80
.text:0000000000002D0C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002D10                 jnz     loc_2C80
.text:0000000000002D16                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002D1A                 jnz     loc_2C80
.text:0000000000002D20                 cmp     byte ptr [rax+5], 0
.text:0000000000002D24                 jnz     loc_2C80
.text:0000000000002D2A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002D2E                 lea     rax, unk_6264
.text:0000000000002D35                 lea     rdx, unk_6268
.text:0000000000002D3C                 cmovnz  rax, rdx
.text:0000000000002D40                 add     rsp, 8
.text:0000000000002D44                 pop     rbx
.text:0000000000002D45                 pop     rbp
.text:0000000000002D46                 retn
.text:0000000000002D46 ; } // starts at 2C60
.text:0000000000002D46 gettext_quote   endp
.text:0000000000002D46
.text:0000000000002D46 ; ---------------------------------------------------------------------------
.text:0000000000002D47                 align 10h
.text:0000000000002D50
.text:0000000000002D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D50
.text:0000000000002D50 ; Attributes: info_from_lumina
.text:0000000000002D50
.text:0000000000002D50 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002D50 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002D50                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002D50
.text:0000000000002D50 var_E0          = dword ptr -0E0h
.text:0000000000002D50 var_DB          = byte ptr -0DBh
.text:0000000000002D50 var_DA          = byte ptr -0DAh
.text:0000000000002D50 var_D9          = byte ptr -0D9h
.text:0000000000002D50 s               = qword ptr -0D8h
.text:0000000000002D50 n               = qword ptr -0D0h
.text:0000000000002D50 var_C8          = qword ptr -0C8h
.text:0000000000002D50 ps              = qword ptr -0C0h
.text:0000000000002D50 var_B8          = qword ptr -0B8h
.text:0000000000002D50 var_B0          = qword ptr -0B0h
.text:0000000000002D50 var_A8          = qword ptr -0A8h
.text:0000000000002D50 s2              = qword ptr -0A0h
.text:0000000000002D50 var_98          = qword ptr -98h
.text:0000000000002D50 var_90          = qword ptr -90h
.text:0000000000002D50 var_88          = qword ptr -88h
.text:0000000000002D50 var_80          = qword ptr -80h
.text:0000000000002D50 var_78          = qword ptr -78h
.text:0000000000002D50 var_70          = dword ptr -70h
.text:0000000000002D50 var_6C          = byte ptr -6Ch
.text:0000000000002D50 var_6B          = byte ptr -6Bh
.text:0000000000002D50 var_6A          = byte ptr -6Ah
.text:0000000000002D50 var_69          = byte ptr -69h
.text:0000000000002D50 var_68          = qword ptr -68h
.text:0000000000002D50 var_60          = qword ptr -60h
.text:0000000000002D50 wc              = dword ptr -4Ch
.text:0000000000002D50 var_48          = qword ptr -48h
.text:0000000000002D50 var_40          = qword ptr -40h
.text:0000000000002D50 arg_0           = qword ptr  8
.text:0000000000002D50 arg_8           = qword ptr  10h
.text:0000000000002D50 arg_10          = qword ptr  18h
.text:0000000000002D50
.text:0000000000002D50 ; __unwind {
.text:0000000000002D50                 push    r15
.text:0000000000002D52                 push    r14
.text:0000000000002D54                 mov     r15d, r8d
.text:0000000000002D57                 push    r13
.text:0000000000002D59                 push    r12
.text:0000000000002D5B                 mov     r14, rdi
.text:0000000000002D5E                 push    rbp
.text:0000000000002D5F                 push    rbx
.text:0000000000002D60                 mov     ebx, r9d
.text:0000000000002D63                 mov     r13, rsi
.text:0000000000002D66                 mov     rbp, rcx
.text:0000000000002D69                 and     ebx, 2
.text:0000000000002D6C                 sub     rsp, 0B8h
.text:0000000000002D73                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002D7B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002D80                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002D85                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002D8A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002D8F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002D97                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002D9C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002DA4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002DA9                 mov     rax, fs:28h
.text:0000000000002DB2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002DBA                 xor     eax, eax
.text:0000000000002DBC                 call    ___ctype_get_mb_cur_max
.text:0000000000002DC1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002DC5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002DCA                 ja      def_2DE1        ; jumptable 00000000000121F1 default case
.text:0000000000002DD0                 lea     rcx, jpt_2DE1
.text:0000000000002DD7                 mov     edx, r15d
.text:0000000000002DDA                 movsxd  rax, ds:(jpt_2DE1 - 62E0h)[rcx+rdx*4]
.text:0000000000002DDE                 add     rax, rcx
.text:0000000000002DE1                 jmp     rax             ; switch jump
.text:0000000000002DE3 ; ---------------------------------------------------------------------------
.text:0000000000002DE3
.text:0000000000002DE3 loc_2DE3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DE3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002DE3                                         ; DATA XREF: ...
.text:0000000000002DE3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002DE8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DED                 xor     r12d, r12d
.text:0000000000002DF0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DF9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002DFE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002E03
.text:0000000000002E03 loc_2E03:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002E03                 lea     rax, asc_6275   ; "'"
.text:0000000000002E0A                 mov     [rsp+0E8h+n], 1
.text:0000000000002E13                 xor     r15d, r15d
.text:0000000000002E16                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E1E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E23
.text:0000000000002E23 loc_2E23:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002E23                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002E23                 xor     r11d, r11d
.text:0000000000002E26                 mov     rax, rbp
.text:0000000000002E29                 mov     r8d, r12d
.text:0000000000002E2C                 mov     rbp, r11
.text:0000000000002E2F                 mov     r11, rax
.text:0000000000002E32                 nop     word ptr [rax+rax+00h]
.text:0000000000002E38
.text:0000000000002E38 loc_2E38:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002E38                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002E38                 cmp     r11, rbp
.text:0000000000002E3B                 setnz   r12b
.text:0000000000002E3F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E43                 jnz     short loc_2E52
.text:0000000000002E45                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E4A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002E4E                 setnz   r12b
.text:0000000000002E52
.text:0000000000002E52 loc_2E52:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002E52                 test    r12b, r12b
.text:0000000000002E55                 jz      loc_34B0
.text:0000000000002E5B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E60                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002E65                 lea     r9, [rdi+rbp]
.text:0000000000002E69                 setnz   al
.text:0000000000002E6C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002E70                 mov     r10d, eax
.text:0000000000002E73                 jz      loc_2F20
.text:0000000000002E79                 mov     rax, [rsp+0E8h+n]
.text:0000000000002E7E                 test    rax, rax
.text:0000000000002E81                 jz      loc_32B0
.text:0000000000002E87                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E8B                 lea     rbx, [rbp+rax+0]
.text:0000000000002E90                 jnz     short loc_2EC0
.text:0000000000002E92                 cmp     rax, 1
.text:0000000000002E96                 jbe     short loc_2EC0
.text:0000000000002E98                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002E9D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002EA2                 mov     [rsp+0E8h+ps], r9
.text:0000000000002EA7                 call    _strlen
.text:0000000000002EAC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002EB2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002EB8                 mov     r11, rax
.text:0000000000002EBB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002EC0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002EC0                 cmp     rbx, r11
.text:0000000000002EC3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002EC8                 ja      loc_3480
.text:0000000000002ECE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002ED3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002ED8                 mov     rdi, r9         ; s1
.text:0000000000002EDB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002EE0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002EE5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002EEA                 call    _memcmp
.text:0000000000002EEF                 test    eax, eax
.text:0000000000002EF1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002EF6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002EFC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002F01                 jnz     loc_3480
.text:0000000000002F07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002F12                 jnz     loc_3E95
.text:0000000000002F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002F20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002F20                 movzx   ebx, byte ptr [r9]
.text:0000000000002F24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002F27                 ja      def_2F3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002F2D                 lea     rcx, jpt_2F3E
.text:0000000000002F34                 movzx   edx, bl
.text:0000000000002F37                 movsxd  rax, ds:(jpt_2F3E - 630Ch)[rcx+rdx*4]
.text:0000000000002F3B                 add     rax, rcx
.text:0000000000002F3E                 jmp     rax             ; switch jump
.text:0000000000002F40 ; ---------------------------------------------------------------------------
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F40                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000002F40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002F43
.text:0000000000002F43 loc_2F43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F43                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000002F43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002F47                 setnz   al
.text:0000000000002F4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F4E                 jnz     short loc_2F5C
.text:0000000000002F50                 mov     rax, [rsp+0E8h+s]
.text:0000000000002F55                 cmp     byte ptr [rax+1], 0
.text:0000000000002F59                 setnz   al
.text:0000000000002F5C
.text:0000000000002F5C loc_2F5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002F5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F61                 setz    dl
.text:0000000000002F64                 test    al, al
.text:0000000000002F66                 jz      loc_31B8
.text:0000000000002F6C
.text:0000000000002F6C loc_2F6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002F6C                 xor     r12d, r12d
.text:0000000000002F6F                 xor     eax, eax
.text:0000000000002F71                 nop     dword ptr [rax+00000000h]
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002F78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002F78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002F7D                 jnz     loc_3092
.text:0000000000002F83                 test    dl, dl
.text:0000000000002F85                 jnz     loc_3092
.text:0000000000002F8B
.text:0000000000002F8B loc_2F8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002F8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002F90                 test    rsi, rsi
.text:0000000000002F93                 jz      short loc_2FA9
.text:0000000000002F95                 mov     edx, ebx
.text:0000000000002F97                 shr     dl, 5
.text:0000000000002F9A                 movzx   edx, dl
.text:0000000000002F9D                 mov     edx, [rsi+rdx*4]
.text:0000000000002FA0                 bt      edx, ebx
.text:0000000000002FA3                 jb      loc_30F3
.text:0000000000002FA9
.text:0000000000002FA9 loc_2FA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002FA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002FA9                 test    r10b, r10b
.text:0000000000002FAC                 jnz     loc_30F3
.text:0000000000002FB2                 xor     eax, 1
.text:0000000000002FB5                 add     rbp, 1
.text:0000000000002FB9                 and     eax, r8d
.text:0000000000002FBC
.text:0000000000002FBC loc_2FBC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002FBC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002FBC                 test    al, al
.text:0000000000002FBE                 jz      short loc_2FE0
.text:0000000000002FC0                 cmp     r13, r15
.text:0000000000002FC3                 jbe     short loc_2FCA
.text:0000000000002FC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002FCA
.text:0000000000002FCA loc_2FCA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002FCA                 lea     rax, [r15+1]
.text:0000000000002FCE                 cmp     r13, rax
.text:0000000000002FD1                 jbe     short loc_2FD9
.text:0000000000002FD3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002FD9
.text:0000000000002FD9 loc_2FD9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002FD9                 add     r15, 2
.text:0000000000002FDD                 xor     r8d, r8d
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002FE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002FE0                 cmp     r15, r13
.text:0000000000002FE3                 jnb     short loc_2FE9
.text:0000000000002FE5                 mov     [r14+r15], bl
.text:0000000000002FE9
.text:0000000000002FE9 loc_2FE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002FE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002FEE                 add     r15, 1
.text:0000000000002FF2                 mov     eax, 0
.text:0000000000002FF7                 test    r12b, r12b
.text:0000000000002FFA                 cmovz   edi, eax
.text:0000000000002FFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003002                 jmp     loc_2E38
.text:0000000000003002 ; ---------------------------------------------------------------------------
.text:0000000000003007                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003010                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003010                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003013
.text:0000000000003013 loc_3013:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003013                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003013                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003017                 cmp     eax, 2
.text:000000000000301A                 jz      loc_35D8
.text:0000000000003020                 cmp     eax, 5
.text:0000000000003023                 jz      loc_3598
.text:0000000000003029                 cmp     eax, 2
.text:000000000000302C                 mov     ebx, 3Fh ; '?'
.text:0000000000003031                 setz    dl
.text:0000000000003034                 xor     r12d, r12d
.text:0000000000003037                 xor     eax, eax
.text:0000000000003039                 jmp     loc_2F78
.text:0000000000003039 ; ---------------------------------------------------------------------------
.text:000000000000303E                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003040                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003040                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003043
.text:0000000000003043 loc_3043:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003043                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003043                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003048                 jz      loc_3550
.text:000000000000304E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003053                 xor     edx, edx
.text:0000000000003055                 xor     eax, eax
.text:0000000000003057                 mov     ebx, 27h ; '''
.text:000000000000305C                 jmp     loc_2F78
.text:000000000000305C ; ---------------------------------------------------------------------------
.text:0000000000003061                 align 8
.text:0000000000003068
.text:0000000000003068 loc_3068:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003068                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003068                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000306D                 mov     ebx, 74h ; 't'
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003072                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003072                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003077                 setz    al
.text:000000000000307A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000307E                 jnz     loc_31CE
.text:0000000000003084
.text:0000000000003084 loc_3084:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003084                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003084                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003089                 jnz     short loc_30F0
.text:000000000000308B
.text:000000000000308B loc_308B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000308B                 mov     ebx, edx
.text:000000000000308D                 xor     r12d, r12d
.text:0000000000003090                 xor     eax, eax
.text:0000000000003092
.text:0000000000003092 loc_3092:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003092                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003092                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003097                 jnz     loc_2F8B
.text:000000000000309D                 jmp     loc_2FA9
.text:000000000000309D ; ---------------------------------------------------------------------------
.text:00000000000030A2                 align 8
.text:00000000000030A8
.text:00000000000030A8 loc_30A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030A8                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:00000000000030A8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000030AD                 mov     ebx, 62h ; 'b'
.text:00000000000030B2                 jmp     short loc_3084
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B4                 align 8
.text:00000000000030B8
.text:00000000000030B8 loc_30B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030B8                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:00000000000030B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000030BD                 jz      loc_3490
.text:00000000000030C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000030C8                 jz      loc_32E0
.text:00000000000030CE
.text:00000000000030CE loc_30CE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000030CE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000030D3                 jz      loc_32E0
.text:00000000000030D9                 cmp     [rsp+0E8h+n], 0
.text:00000000000030DF                 jnz     loc_349B
.text:00000000000030E5                 mov     ebx, 5Ch ; '\'
.text:00000000000030EA                 nop     word ptr [rax+rax+00h]
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000030F0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000030F0                 xor     r12d, r12d
.text:00000000000030F3
.text:00000000000030F3 loc_30F3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000030F3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000030F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030F8                 setz    dl
.text:00000000000030FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003100                 mov     eax, edx
.text:0000000000003102                 jnz     loc_3958
.text:0000000000003108                 mov     eax, r8d
.text:000000000000310B                 xor     eax, 1
.text:000000000000310E                 and     al, dl
.text:0000000000003110                 jz      short loc_3141
.text:0000000000003112                 cmp     r13, r15
.text:0000000000003115                 jbe     short loc_311C
.text:0000000000003117                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000311C
.text:000000000000311C loc_311C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000311C                 lea     rdx, [r15+1]
.text:0000000000003120                 cmp     r13, rdx
.text:0000000000003123                 jbe     short loc_312B
.text:0000000000003125                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000312B
.text:000000000000312B loc_312B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000312B                 lea     rdx, [r15+2]
.text:000000000000312F                 cmp     r13, rdx
.text:0000000000003132                 jbe     short loc_313A
.text:0000000000003134                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000313A
.text:000000000000313A loc_313A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000313A                 add     r15, 3
.text:000000000000313E                 mov     r8d, eax
.text:0000000000003141
.text:0000000000003141 loc_3141:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003141                 cmp     r13, r15
.text:0000000000003144                 jbe     short loc_314B
.text:0000000000003146                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000314B
.text:000000000000314B loc_314B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000314B                 add     r15, 1
.text:000000000000314F                 add     rbp, 1
.text:0000000000003153                 jmp     loc_2FE0
.text:0000000000003153 ; ---------------------------------------------------------------------------
.text:0000000000003158                 align 20h
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003160                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003160                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003165                 jnz     loc_3333
.text:000000000000316B                 xor     edx, edx
.text:000000000000316D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003172                 jz      loc_308B
.text:0000000000003178                 add     rbp, 1
.text:000000000000317C                 jmp     loc_2E38
.text:000000000000317C ; ---------------------------------------------------------------------------
.text:0000000000003181                 align 8
.text:0000000000003188
.text:0000000000003188 loc_3188:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003188                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003188                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000318D                 setz    dl
.text:0000000000003190                 xor     eax, eax
.text:0000000000003192                 jmp     loc_2F78
.text:0000000000003192 ; ---------------------------------------------------------------------------
.text:0000000000003197                 align 20h
.text:00000000000031A0
.text:00000000000031A0 loc_31A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031A0                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:00000000000031A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000031A5                 mov     ebx, 61h ; 'a'
.text:00000000000031AA                 jmp     loc_3084
.text:00000000000031AA ; ---------------------------------------------------------------------------
.text:00000000000031AF                 align 10h
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031B0                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:00000000000031B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000031B5                 setz    dl
.text:00000000000031B8
.text:00000000000031B8 loc_31B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000031B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000031B8                 test    rbp, rbp
.text:00000000000031BB                 jnz     loc_2F6C
.text:00000000000031C1
.text:00000000000031C1 loc_31C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000031C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000031C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000031C6                 and     al, dl
.text:00000000000031C8                 jz      loc_2F78
.text:00000000000031CE
.text:00000000000031CE loc_31CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000031CE                 mov     rbp, r11
.text:00000000000031D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000031D9                 jmp     loc_38D9
.text:00000000000031D9 ; ---------------------------------------------------------------------------
.text:00000000000031DE                 align 20h
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031E0                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:00000000000031E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000031E5                 setz    dl
.text:00000000000031E8                 xor     r12d, r12d
.text:00000000000031EB                 jmp     short loc_31C1
.text:00000000000031EB ; ---------------------------------------------------------------------------
.text:00000000000031ED                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031F0                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:00000000000031F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000031F5                 mov     ebx, 20h ; ' '
.text:00000000000031FA                 setz    dl
.text:00000000000031FD                 jmp     short loc_31C1
.text:00000000000031FD ; ---------------------------------------------------------------------------
.text:00000000000031FF                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003200                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003200                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003205                 mov     ebx, 72h ; 'r'
.text:000000000000320A                 jmp     loc_3072
.text:000000000000320A ; ---------------------------------------------------------------------------
.text:000000000000320F                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003210                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003210                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003215                 mov     ebx, 66h ; 'f'
.text:000000000000321A                 jmp     loc_3084
.text:000000000000321A ; ---------------------------------------------------------------------------
.text:000000000000321F                 align 20h
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003220                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003220                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003225                 mov     ebx, 76h ; 'v'
.text:000000000000322A                 jmp     loc_3084
.text:000000000000322A ; ---------------------------------------------------------------------------
.text:000000000000322F                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003230                                         ; DATA XREF: .rodata:jpt_2F3E↓o
.text:0000000000003230                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003235                 mov     ebx, 6Eh ; 'n'
.text:000000000000323A                 jmp     loc_3072
.text:000000000000323A ; ---------------------------------------------------------------------------
.text:000000000000323F                 align 20h
.text:0000000000003240
.text:0000000000003240 def_32CA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003240                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003240                                         ; DATA XREF: ...
.text:0000000000003240                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003243                 nop     dword ptr [rax+rax+00h]
.text:0000000000003248
.text:0000000000003248 def_2F3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003248                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003248                                         ; DATA XREF: ...
.text:0000000000003248                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000324E                 jnz     loc_35F8
.text:0000000000003254                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003259                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000325E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003263                 call    ___ctype_b_loc
.text:0000000000003268                 mov     rcx, [rax]
.text:000000000000326B                 movzx   edx, bl
.text:000000000000326E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003274                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000327A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000327F                 mov     edi, 1
.text:0000000000003284                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003288                 and     ax, 4000h
.text:000000000000328C                 setnz   r12b
.text:0000000000003290                 setz    al
.text:0000000000003293                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003297
.text:0000000000003297 loc_3297:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003297                 test    al, al
.text:0000000000003299                 jnz     loc_3C31
.text:000000000000329F                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000032A4                 setz    dl
.text:00000000000032A7                 jmp     loc_2F78
.text:00000000000032A7 ; ---------------------------------------------------------------------------
.text:00000000000032AC                 align 10h
.text:00000000000032B0
.text:00000000000032B0 loc_32B0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000032B0                 movzx   ebx, byte ptr [r9]
.text:00000000000032B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000032B7                 ja      short def_32CA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000032B9                 lea     rcx, jpt_32CA
.text:00000000000032C0                 movzx   edx, bl
.text:00000000000032C3                 movsxd  rax, ds:(jpt_32CA - 6508h)[rcx+rdx*4]
.text:00000000000032C7                 add     rax, rcx
.text:00000000000032CA                 jmp     rax             ; switch jump
.text:00000000000032CA ; ---------------------------------------------------------------------------
.text:00000000000032CC                 align 10h
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032D0                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:00000000000032D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000032D3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000032D8                 jnz     loc_30CE
.text:00000000000032DE                 xchg    ax, ax
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000032E0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000032E0                 mov     edx, 5Ch ; '\'
.text:00000000000032E5                 mov     ebx, 5Ch ; '\'
.text:00000000000032EA                 jmp     loc_3084
.text:00000000000032EA ; ---------------------------------------------------------------------------
.text:00000000000032EF                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032F0                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:00000000000032F0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000032F5                 xor     r10d, r10d
.text:00000000000032F8                 mov     ebx, 66h ; 'f'
.text:00000000000032FD                 jmp     loc_3084
.text:00000000000032FD ; ---------------------------------------------------------------------------
.text:0000000000003302                 align 8
.text:0000000000003308
.text:0000000000003308 loc_3308:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003308                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003308                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000330D                 xor     r10d, r10d
.text:0000000000003310                 mov     ebx, 6Eh ; 'n'
.text:0000000000003315                 jmp     loc_3072
.text:0000000000003315 ; ---------------------------------------------------------------------------
.text:000000000000331A                 align 20h
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003320                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003320                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003325                 jmp     loc_30F0
.text:0000000000003325 ; ---------------------------------------------------------------------------
.text:000000000000332A                 align 10h
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003330                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003330                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003333
.text:0000000000003333 loc_3333:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003333                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003338                 setz    dl
.text:000000000000333B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003340                 jnz     loc_3EDA
.text:0000000000003346                 mov     eax, r8d
.text:0000000000003349                 mov     rcx, r15
.text:000000000000334C                 xor     eax, 1
.text:000000000000334F                 and     al, dl
.text:0000000000003351                 jz      short loc_3380
.text:0000000000003353                 cmp     r13, r15
.text:0000000000003356                 jbe     short loc_335D
.text:0000000000003358                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000335D
.text:000000000000335D loc_335D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000335D                 lea     rcx, [r15+1]
.text:0000000000003361                 cmp     r13, rcx
.text:0000000000003364                 jbe     short loc_336C
.text:0000000000003366                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000336C
.text:000000000000336C loc_336C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000336C                 lea     rcx, [r15+2]
.text:0000000000003370                 cmp     r13, rcx
.text:0000000000003373                 ja      loc_39A9
.text:0000000000003379
.text:0000000000003379 loc_3379:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003379                 lea     rcx, [r15+3]
.text:000000000000337D                 mov     r8d, eax
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003380                 cmp     r13, rcx
.text:0000000000003383                 jbe     short loc_338A
.text:0000000000003385                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000338A
.text:000000000000338A loc_338A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000338A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000338F                 lea     r15, [rcx+1]
.text:0000000000003393                 jz      loc_3999
.text:0000000000003399                 lea     rax, [rbp+1]
.text:000000000000339D                 cmp     rax, r11
.text:00000000000033A0                 jnb     short loc_33BB
.text:00000000000033A2                 mov     rax, [rsp+0E8h+s]
.text:00000000000033A7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000033AC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000033B0                 sub     eax, 30h ; '0'
.text:00000000000033B3                 cmp     al, 9
.text:00000000000033B5                 jbe     loc_3BE9
.text:00000000000033BB
.text:00000000000033BB loc_33BB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000033BB                 mov     eax, r12d
.text:00000000000033BE                 mov     ebx, 30h ; '0'
.text:00000000000033C3                 xor     r12d, r12d
.text:00000000000033C6                 jmp     loc_2F78
.text:00000000000033C6 ; ---------------------------------------------------------------------------
.text:00000000000033CB                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000033D0                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:00000000000033D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000033D5                 mov     r12d, r10d
.text:00000000000033D8                 setz    dl
.text:00000000000033DB                 xor     r10d, r10d
.text:00000000000033DE                 xor     eax, eax
.text:00000000000033E0                 jmp     loc_2F78
.text:00000000000033E0 ; ---------------------------------------------------------------------------
.text:00000000000033E5                 align 8
.text:00000000000033E8
.text:00000000000033E8 loc_33E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000033E8                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:00000000000033E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000033ED                 setz    dl
.text:00000000000033F0                 xor     r10d, r10d
.text:00000000000033F3                 jmp     loc_31B8
.text:00000000000033F3 ; ---------------------------------------------------------------------------
.text:00000000000033F8                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003400                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003400                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003405                 setz    dl
.text:0000000000003408                 xor     r10d, r10d
.text:000000000000340B                 xor     r12d, r12d
.text:000000000000340E                 jmp     loc_31C1
.text:000000000000340E ; ---------------------------------------------------------------------------
.text:0000000000003413                 align 8
.text:0000000000003418
.text:0000000000003418 loc_3418:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003418                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003418                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000341D                 mov     r12d, r10d
.text:0000000000003420                 mov     ebx, 20h ; ' '
.text:0000000000003425                 setz    dl
.text:0000000000003428                 xor     r10d, r10d
.text:000000000000342B                 jmp     loc_31C1
.text:0000000000003430 ; ---------------------------------------------------------------------------
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003430                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003430                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003435                 xor     r10d, r10d
.text:0000000000003438                 mov     ebx, 72h ; 'r'
.text:000000000000343D                 jmp     loc_3072
.text:000000000000343D ; ---------------------------------------------------------------------------
.text:0000000000003442                 align 8
.text:0000000000003448
.text:0000000000003448 loc_3448:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003448                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003448                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000344D                 jmp     loc_30F0
.text:000000000000344D ; ---------------------------------------------------------------------------
.text:0000000000003452                 align 8
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003458                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003458                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000345D                 xor     r10d, r10d
.text:0000000000003460                 mov     ebx, 74h ; 't'
.text:0000000000003465                 jmp     loc_3072
.text:0000000000003465 ; ---------------------------------------------------------------------------
.text:000000000000346A                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003470                                         ; DATA XREF: .rodata:jpt_32CA↓o
.text:0000000000003470                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003475                 jmp     loc_30F0
.text:0000000000003475 ; ---------------------------------------------------------------------------
.text:000000000000347A                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003480                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003480                 xor     r10d, r10d
.text:0000000000003483                 jmp     loc_2F20
.text:0000000000003483 ; ---------------------------------------------------------------------------
.text:0000000000003488                 align 10h
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003490                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003495                 jnz     loc_3E00
.text:000000000000349B
.text:000000000000349B loc_349B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000349B                 add     rbp, 1
.text:000000000000349F                 mov     eax, r8d
.text:00000000000034A2                 xor     r12d, r12d
.text:00000000000034A5                 mov     ebx, 5Ch ; '\'
.text:00000000000034AA                 jmp     loc_2FBC
.text:00000000000034AA ; ---------------------------------------------------------------------------
.text:00000000000034AF                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000034B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034B5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000034BA                 mov     r12d, r8d
.text:00000000000034BD                 mov     rbp, r11
.text:00000000000034C0                 setz    dl
.text:00000000000034C3                 mov     eax, ebx
.text:00000000000034C5                 test    r15, r15
.text:00000000000034C8                 setz    cl
.text:00000000000034CB                 and     eax, edx
.text:00000000000034CD                 and     al, cl
.text:00000000000034CF                 jnz     loc_3F36
.text:00000000000034D5                 mov     eax, ebx
.text:00000000000034D7                 xor     eax, 1
.text:00000000000034DA                 and     dl, al
.text:00000000000034DC                 jz      loc_3E4C
.text:00000000000034E2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000034E7                 jz      loc_3E4A
.text:00000000000034ED                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000034F2                 jnz     loc_3EED
.text:00000000000034F8                 test    r13, r13
.text:00000000000034FB                 setz    al
.text:00000000000034FE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003504                 setnz   dl
.text:0000000000003507                 and     al, dl
.text:0000000000003509                 jz      loc_3F2C
.text:000000000000350F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003514
.text:0000000000003514 loc_3514:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003514                 lea     rbx, asc_6275   ; "'"
.text:000000000000351B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000351F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003527                 mov     r15d, 1
.text:000000000000352D                 mov     [rsp+0E8h+n], 1
.text:0000000000003536                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000353B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003540                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003544                 jmp     loc_2E23
.text:0000000000003544 ; ---------------------------------------------------------------------------
.text:0000000000003549                 align 10h
.text:0000000000003550
.text:0000000000003550 loc_3550:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003550                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003555                 jnz     loc_3E00
.text:000000000000355B                 test    r13, r13
.text:000000000000355E                 jz      loc_3960
.text:0000000000003564                 xor     edx, edx
.text:0000000000003566                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000356C                 jnz     loc_3960
.text:0000000000003572
.text:0000000000003572 loc_3572:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003572                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003572                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003577                 add     r15, 3
.text:000000000000357B                 xor     eax, eax
.text:000000000000357D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003582                 xor     r8d, r8d
.text:0000000000003585                 mov     r13, rdx
.text:0000000000003588                 mov     ebx, 27h ; '''
.text:000000000000358D                 jmp     loc_2FA9
.text:000000000000358D ; ---------------------------------------------------------------------------
.text:0000000000003592                 align 8
.text:0000000000003598
.text:0000000000003598 loc_3598:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003598                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000359D                 jz      short loc_35C0
.text:000000000000359F                 lea     rcx, [rbp+2]
.text:00000000000035A3                 cmp     rcx, r11
.text:00000000000035A6                 jnb     short loc_35C0
.text:00000000000035A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000035AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000035B2                 jz      loc_3D42
.text:00000000000035B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000035C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000035C0                 xor     edx, edx
.text:00000000000035C2                 xor     r12d, r12d
.text:00000000000035C5                 xor     eax, eax
.text:00000000000035C7                 mov     ebx, 3Fh ; '?'
.text:00000000000035CC                 jmp     loc_2F78
.text:00000000000035CC ; ---------------------------------------------------------------------------
.text:00000000000035D1                 align 8
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000035D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000035DD                 jnz     loc_3E00
.text:00000000000035E3                 xor     r12d, r12d
.text:00000000000035E6                 xor     eax, eax
.text:00000000000035E8                 mov     ebx, 3Fh ; '?'
.text:00000000000035ED                 jmp     loc_2FA9
.text:00000000000035ED ; ---------------------------------------------------------------------------
.text:00000000000035F2                 align 8
.text:00000000000035F8
.text:00000000000035F8 loc_35F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000035F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003600                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003604                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003610                 mov     [rsp+0E8h+ps], rax
.text:0000000000003615                 jnz     short loc_3644
.text:0000000000003617                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000361C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003621                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003626                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000362B                 call    _strlen
.text:0000000000003630                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003636                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000363C                 mov     r11, rax
.text:000000000000363F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003644
.text:0000000000003644 loc_3644:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003644                 lea     rax, [rsp+0E8h+wc]
.text:000000000000364C                 xor     ecx, ecx
.text:000000000000364E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003652                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003657                 mov     rbx, rcx
.text:000000000000365A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003662                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003667                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000366C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003674                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003679                 mov     [rsp+0E8h+var_78], r13
.text:000000000000367E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003683
.text:0000000000003683 loc_3683:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003683                 mov     rax, [rsp+0E8h+s]
.text:0000000000003688                 lea     r14, [rbp+rbx+0]
.text:000000000000368D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003692                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003697                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000369C                 lea     r13, [rax+r14]
.text:00000000000036A0                 sub     rdx, r14
.text:00000000000036A3                 mov     rsi, r13
.text:00000000000036A6                 call    rpl_mbrtowc
.text:00000000000036AB                 test    rax, rax
.text:00000000000036AE                 mov     r15, rax
.text:00000000000036B1                 jz      short loc_3701
.text:00000000000036B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000036B7                 jz      loc_3CD5
.text:00000000000036BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000036C1                 jz      loc_3C61
.text:00000000000036C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036CC                 setz    al
.text:00000000000036CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000036D3                 jnz     loc_3870
.text:00000000000036D9
.text:00000000000036D9 loc_36D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000036D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000036D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000036E0                 call    _iswprint
.text:00000000000036E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000036EA                 test    eax, eax
.text:00000000000036EC                 mov     eax, 0
.text:00000000000036F1                 cmovz   r12d, eax
.text:00000000000036F5                 add     rbx, r15
.text:00000000000036F8                 call    _mbsinit
.text:00000000000036FD                 test    eax, eax
.text:00000000000036FF                 jz      short loc_3683
.text:0000000000003701
.text:0000000000003701 loc_3701:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003701                 mov     edx, r12d
.text:0000000000003704                 mov     rdi, rbx
.text:0000000000003707                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000370D                 xor     edx, 1
.text:0000000000003710                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003715                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000371B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000371F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003727                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000372C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003731                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003736
.text:0000000000003736 loc_3736:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003736                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003736                 cmp     rdi, 1
.text:000000000000373A                 jbe     loc_3D3B
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003740                 mov     rcx, rdi
.text:0000000000003743                 xor     esi, esi
.text:0000000000003745                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000374B                 add     rcx, rbp
.text:000000000000374E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003753                 jmp     loc_380E
.text:0000000000003753 ; ---------------------------------------------------------------------------
.text:0000000000003758                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003760                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003765                 setz    al
.text:0000000000003768                 test    r9b, r9b
.text:000000000000376B                 jnz     loc_3C20
.text:0000000000003771                 mov     esi, r8d
.text:0000000000003774                 xor     esi, 1
.text:0000000000003777                 and     al, sil
.text:000000000000377A                 jz      short loc_37AB
.text:000000000000377C                 cmp     r13, r15
.text:000000000000377F                 jbe     short loc_3786
.text:0000000000003781                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003786
.text:0000000000003786 loc_3786:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003786                 lea     rsi, [r15+1]
.text:000000000000378A                 cmp     r13, rsi
.text:000000000000378D                 jbe     short loc_3795
.text:000000000000378F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003795
.text:0000000000003795 loc_3795:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003795                 lea     rsi, [r15+2]
.text:0000000000003799                 cmp     r13, rsi
.text:000000000000379C                 jbe     short loc_37A4
.text:000000000000379E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000037A4
.text:00000000000037A4 loc_37A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000037A4                 add     r15, 3
.text:00000000000037A8                 mov     r8d, eax
.text:00000000000037AB
.text:00000000000037AB loc_37AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000037AB                 cmp     r13, r15
.text:00000000000037AE                 jbe     short loc_37B5
.text:00000000000037B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000037B5
.text:00000000000037B5 loc_37B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000037B5                 lea     rax, [r15+1]
.text:00000000000037B9                 cmp     r13, rax
.text:00000000000037BC                 jbe     short loc_37CB
.text:00000000000037BE                 mov     eax, ebx
.text:00000000000037C0                 shr     al, 6
.text:00000000000037C3                 add     eax, 30h ; '0'
.text:00000000000037C6                 mov     [r14+r15+1], al
.text:00000000000037CB
.text:00000000000037CB loc_37CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000037CB                 lea     rax, [r15+2]
.text:00000000000037CF                 cmp     r13, rax
.text:00000000000037D2                 jbe     short loc_37E4
.text:00000000000037D4                 mov     eax, ebx
.text:00000000000037D6                 shr     al, 3
.text:00000000000037D9                 and     eax, 7
.text:00000000000037DC                 add     eax, 30h ; '0'
.text:00000000000037DF                 mov     [r14+r15+2], al
.text:00000000000037E4
.text:00000000000037E4 loc_37E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000037E4                 and     ebx, 7
.text:00000000000037E7                 add     rbp, 1
.text:00000000000037EB                 add     r15, 3
.text:00000000000037EF                 add     ebx, 30h ; '0'
.text:00000000000037F2                 cmp     rbp, rcx
.text:00000000000037F5                 jnb     loc_2FE0
.text:00000000000037FB                 mov     esi, edx
.text:00000000000037FD
.text:00000000000037FD loc_37FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000037FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000037FD                 cmp     r13, r15
.text:0000000000003800                 jbe     short loc_3806
.text:0000000000003802                 mov     [r14+r15], bl
.text:0000000000003806
.text:0000000000003806 loc_3806:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003806                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000380A                 add     r15, 1
.text:000000000000380E
.text:000000000000380E loc_380E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000380E                 test    dl, dl
.text:0000000000003810                 jnz     loc_3760
.text:0000000000003816                 mov     eax, esi
.text:0000000000003818                 xor     eax, 1
.text:000000000000381B                 and     eax, r8d
.text:000000000000381E                 test    r10b, r10b
.text:0000000000003821                 jz      short loc_3831
.text:0000000000003823                 cmp     r13, r15
.text:0000000000003826                 jbe     short loc_382D
.text:0000000000003828                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000382D
.text:000000000000382D loc_382D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000382D                 add     r15, 1
.text:0000000000003831
.text:0000000000003831 loc_3831:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003831                 add     rbp, 1
.text:0000000000003835                 cmp     rbp, rcx
.text:0000000000003838                 jnb     loc_2FBC
.text:000000000000383E                 test    al, al
.text:0000000000003840                 jz      loc_3C3E
.text:0000000000003846                 cmp     r13, r15
.text:0000000000003849                 jbe     short loc_3850
.text:000000000000384B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003850                 lea     rax, [r15+1]
.text:0000000000003854                 cmp     r13, rax
.text:0000000000003857                 jbe     short loc_385F
.text:0000000000003859                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000385F
.text:000000000000385F loc_385F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000385F                 add     r15, 2
.text:0000000000003863                 xor     r10d, r10d
.text:0000000000003866                 xor     r8d, r8d
.text:0000000000003869                 jmp     short loc_37FD
.text:0000000000003869 ; ---------------------------------------------------------------------------
.text:000000000000386B                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003870                 cmp     r15, 1
.text:0000000000003874                 jz      loc_36D9
.text:000000000000387A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000387F                 lea     rcx, [rdi+r15]
.text:0000000000003883                 lea     rdx, [rdi+r14+1]
.text:0000000000003888                 lea     r8, [rcx+r14]
.text:000000000000388C                 jmp     short loc_389D
.text:000000000000388C ; ---------------------------------------------------------------------------
.text:000000000000388E                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003890                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003890                 add     rdx, 1
.text:0000000000003894                 cmp     r8, rdx
.text:0000000000003897                 jz      loc_36D9
.text:000000000000389D
.text:000000000000389D loc_389D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000389D                 movzx   ecx, byte ptr [rdx]
.text:00000000000038A0                 sub     ecx, 5Bh ; '['
.text:00000000000038A3                 cmp     cl, 21h ; '!'
.text:00000000000038A6                 ja      short loc_3890
.text:00000000000038A8                 mov     esi, 1
.text:00000000000038AD                 shl     rsi, cl
.text:00000000000038B0                 mov     rcx, rsi
.text:00000000000038B3                 mov     rsi, 20000002Bh
.text:00000000000038BD                 test    rcx, rsi
.text:00000000000038C0                 jz      short loc_3890
.text:00000000000038C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000038C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000038CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000038D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000038D9
.text:00000000000038D9 loc_38D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000038D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000038D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000038DE                 jz      short loc_38F0
.text:00000000000038E0                 test    al, al
.text:00000000000038E2                 mov     eax, 4
.text:00000000000038E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000038EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000038F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000038F0                 sub     rsp, 8
.text:00000000000038F4                 mov     rcx, rbp
.text:00000000000038F7                 mov     rsi, r13
.text:00000000000038FA                 push    [rsp+0F0h+var_88]
.text:00000000000038FE                 push    [rsp+0F8h+var_80]
.text:0000000000003902                 mov     rdi, r14
.text:0000000000003905                 push    0
.text:0000000000003907                 mov     r9d, [rsp+108h+var_70]
.text:000000000000390F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003914                 mov     rdx, [rsp+108h+s]
.text:0000000000003919                 and     r9d, 0FFFFFFFDh
.text:000000000000391D                 call    quotearg_buffer_restyled
.text:0000000000003922                 add     rsp, 20h
.text:0000000000003926                 mov     r15, rax
.text:0000000000003929
.text:0000000000003929 loc_3929:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003929                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003929                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003931                 xor     rbx, fs:28h
.text:000000000000393A                 mov     rax, r15
.text:000000000000393D                 jnz     loc_3F43
.text:0000000000003943                 add     rsp, 0B8h
.text:000000000000394A                 pop     rbx
.text:000000000000394B                 pop     rbp
.text:000000000000394C                 pop     r12
.text:000000000000394E                 pop     r13
.text:0000000000003950                 pop     r14
.text:0000000000003952                 pop     r15
.text:0000000000003954                 retn
.text:0000000000003954 ; ---------------------------------------------------------------------------
.text:0000000000003955                 align 8
.text:0000000000003958
.text:0000000000003958 loc_3958:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003958                 mov     rbp, r11
.text:000000000000395B                 jmp     loc_38D9
.text:0000000000003960 ; ---------------------------------------------------------------------------
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003960                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003960                 cmp     r13, r15
.text:0000000000003963                 jbe     short loc_396A
.text:0000000000003965                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000396A
.text:000000000000396A loc_396A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000396A                 lea     rax, [r15+1]
.text:000000000000396E                 cmp     r13, rax
.text:0000000000003971                 jbe     short loc_3979
.text:0000000000003973                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003979
.text:0000000000003979 loc_3979:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003979                 lea     rax, [r15+2]
.text:000000000000397D                 cmp     r13, rax
.text:0000000000003980                 jbe     loc_3F72
.text:0000000000003986                 mov     rdx, r13
.text:0000000000003989                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000398F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003994                 jmp     loc_3572
.text:0000000000003999 ; ---------------------------------------------------------------------------
.text:0000000000003999
.text:0000000000003999 loc_3999:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003999                 mov     eax, r12d
.text:000000000000399C                 mov     ebx, 30h ; '0'
.text:00000000000039A1                 xor     r12d, r12d
.text:00000000000039A4                 jmp     loc_2FA9
.text:00000000000039A9 ; ---------------------------------------------------------------------------
.text:00000000000039A9
.text:00000000000039A9 loc_39A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000039A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000039AF                 jmp     loc_3379
.text:00000000000039B4 ; ---------------------------------------------------------------------------
.text:00000000000039B4
.text:00000000000039B4 loc_39B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000039B4                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:00000000000039B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000039B6                 jnz     loc_2DE3        ; jumptable 00000000000121F1 case 1
.text:00000000000039BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000039C1
.text:00000000000039C1 loc_39C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000039C1                 test    r13, r13
.text:00000000000039C4                 jnz     loc_3F5A
.text:00000000000039CA                 lea     rax, asc_6275   ; "'"
.text:00000000000039D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000039DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000039DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000039E4                 xor     r12d, r12d
.text:00000000000039E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000039EC                 mov     [rsp+0E8h+n], 1
.text:00000000000039F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000039FA                 mov     r15d, 1
.text:0000000000003A00                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A08                 jmp     loc_2E23
.text:0000000000003A08 ; ---------------------------------------------------------------------------
.text:0000000000003A0D                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A10                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003A10                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003A12                 jnz     loc_3E0D
.text:0000000000003A18                 test    r13, r13
.text:0000000000003A1B                 jz      loc_3C46
.text:0000000000003A21                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003A25                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A2A                 xor     r12d, r12d
.text:0000000000003A2D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A32                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A3B
.text:0000000000003A3B loc_3A3B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003A3B                 lea     rax, unk_6273
.text:0000000000003A42                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003A47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A4C                 mov     [rsp+0E8h+n], 1
.text:0000000000003A55                 mov     r15d, 1
.text:0000000000003A5B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003A60                 jmp     loc_2E23
.text:0000000000003A65 ; ---------------------------------------------------------------------------
.text:0000000000003A65
.text:0000000000003A65 loc_3A65:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A65                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003A65                 lea     rax, unk_6273   ; jumptable 00000000000121F1 case 6
.text:0000000000003A6C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A71                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A76                 xor     r12d, r12d
.text:0000000000003A79                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A82                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003A87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A8C                 mov     [rsp+0E8h+n], 1
.text:0000000000003A95                 xor     r15d, r15d
.text:0000000000003A98                 mov     [rsp+0E8h+s2], rax
.text:0000000000003A9D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003AA5                 jmp     loc_2E23
.text:0000000000003AAA ; ---------------------------------------------------------------------------
.text:0000000000003AAA
.text:0000000000003AAA loc_3AAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AAA                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003AAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003AAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AB4                 xor     r12d, r12d
.text:0000000000003AB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003AC5                 xor     r15d, r15d
.text:0000000000003AC8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003ACD                 mov     [rsp+0E8h+n], 0
.text:0000000000003AD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003ADF                 jmp     loc_2E23
.text:0000000000003AE4 ; ---------------------------------------------------------------------------
.text:0000000000003AE4
.text:0000000000003AE4 loc_3AE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AE4                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003AE4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003AE9                 jz      short loc_3B41
.text:0000000000003AEB                 lea     rsi, asc_6277   ; "`"
.text:0000000000003AF2                 xor     edi, edi        ; domainname
.text:0000000000003AF4                 mov     edx, 5          ; category
.text:0000000000003AF9                 call    _dcgettext
.text:0000000000003AFE                 mov     rcx, rax
.text:0000000000003B01                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003B06                 lea     rax, asc_6277   ; "`"
.text:0000000000003B0D                 cmp     rcx, rax
.text:0000000000003B10                 jz      loc_3EAE
.text:0000000000003B16
.text:0000000000003B16 loc_3B16:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003B16                 lea     rsi, asc_6275   ; "'"
.text:0000000000003B1D                 xor     edi, edi        ; domainname
.text:0000000000003B1F                 mov     edx, 5          ; category
.text:0000000000003B24                 call    _dcgettext
.text:0000000000003B29                 mov     rcx, rax
.text:0000000000003B2C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003B31                 lea     rax, asc_6275   ; "'"
.text:0000000000003B38                 cmp     rcx, rax
.text:0000000000003B3B                 jz      loc_3EC4
.text:0000000000003B41
.text:0000000000003B41 loc_3B41:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003B41                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003B41                 xor     r15d, r15d
.text:0000000000003B44                 test    ebx, ebx
.text:0000000000003B46                 jz      loc_3D0D
.text:0000000000003B4C
.text:0000000000003B4C loc_3B4C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003B4C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003B4C                 test    ebx, ebx
.text:0000000000003B4E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003B53                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003B58                 xor     r12d, r12d
.text:0000000000003B5B                 mov     rdi, rbx        ; s
.text:0000000000003B5E                 call    _strlen
.text:0000000000003B63                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003B68                 mov     [rsp+0E8h+n], rax
.text:0000000000003B6D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B72                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B80                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B85                 jmp     loc_2E23
.text:0000000000003B8A ; ---------------------------------------------------------------------------
.text:0000000000003B8A
.text:0000000000003B8A loc_3B8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B8A                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003B8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003B8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B94                 xor     r12d, r12d
.text:0000000000003B97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003BA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003BA5                 xor     r15d, r15d
.text:0000000000003BA8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003BAD                 mov     [rsp+0E8h+n], 0
.text:0000000000003BB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003BBF                 jmp     loc_2E23
.text:0000000000003BC4 ; ---------------------------------------------------------------------------
.text:0000000000003BC4
.text:0000000000003BC4 loc_3BC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BC4                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003BC4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003BC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003BCE                 xor     r12d, r12d
.text:0000000000003BD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003BDA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003BDF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003BE4                 jmp     loc_2E03
.text:0000000000003BE9 ; ---------------------------------------------------------------------------
.text:0000000000003BE9
.text:0000000000003BE9 loc_3BE9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003BE9                 cmp     r13, r15
.text:0000000000003BEC                 jbe     short loc_3BF3
.text:0000000000003BEE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003BF3
.text:0000000000003BF3 loc_3BF3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003BF3                 lea     rax, [rcx+2]
.text:0000000000003BF7                 cmp     r13, rax
.text:0000000000003BFA                 jbe     short loc_3C02
.text:0000000000003BFC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003C02
.text:0000000000003C02 loc_3C02:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003C02                 mov     eax, r12d
.text:0000000000003C05                 lea     r15, [rcx+3]
.text:0000000000003C09                 xor     r12d, r12d
.text:0000000000003C0C                 mov     ebx, 30h ; '0'
.text:0000000000003C11                 jmp     loc_2F78
.text:0000000000003C11 ; ---------------------------------------------------------------------------
.text:0000000000003C16                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003C20                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003C25                 mov     rbp, r11
.text:0000000000003C28                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003C2C                 jmp     loc_38D9
.text:0000000000003C31 ; ---------------------------------------------------------------------------
.text:0000000000003C31
.text:0000000000003C31 loc_3C31:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003C31                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003C36                 xor     r12d, r12d
.text:0000000000003C39                 jmp     loc_3740
.text:0000000000003C3E ; ---------------------------------------------------------------------------
.text:0000000000003C3E
.text:0000000000003C3E loc_3C3E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003C3E                 xor     r10d, r10d
.text:0000000000003C41                 jmp     loc_37FD
.text:0000000000003C46 ; ---------------------------------------------------------------------------
.text:0000000000003C46
.text:0000000000003C46 loc_3C46:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003C46                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C4F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C54                 xor     r12d, r12d
.text:0000000000003C57                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C5C                 jmp     loc_3A3B
.text:0000000000003C61 ; ---------------------------------------------------------------------------
.text:0000000000003C61
.text:0000000000003C61 loc_3C61:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003C61                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003C66                 mov     rsi, r14
.text:0000000000003C69                 mov     rcx, r13
.text:0000000000003C6C                 mov     rax, rbx
.text:0000000000003C6F                 mov     rdi, rbx
.text:0000000000003C72                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003C78                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003C7D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003C85                 cmp     rsi, r11
.text:0000000000003C88                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003C8E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003C96                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003C9B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003CA0                 jnb     short loc_3CC8
.text:0000000000003CA2                 cmp     byte ptr [rcx], 0
.text:0000000000003CA5                 jnz     short loc_3CB7
.text:0000000000003CA7                 jmp     short loc_3CC8
.text:0000000000003CA7 ; ---------------------------------------------------------------------------
.text:0000000000003CA9                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003CB0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003CB5                 jz      short loc_3CC5
.text:0000000000003CB7
.text:0000000000003CB7 loc_3CB7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003CB7                 add     rax, 1
.text:0000000000003CBB                 lea     rdx, [rbp+rax+0]
.text:0000000000003CC0                 cmp     r11, rdx
.text:0000000000003CC3                 ja      short loc_3CB0
.text:0000000000003CC5
.text:0000000000003CC5 loc_3CC5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003CC5                 mov     rdi, rax
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003CC8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003CC8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003CCD                 xor     r12d, r12d
.text:0000000000003CD0                 jmp     loc_3736
.text:0000000000003CD5 ; ---------------------------------------------------------------------------
.text:0000000000003CD5
.text:0000000000003CD5 loc_3CD5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003CD5                 mov     rdi, rbx
.text:0000000000003CD8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003CDE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003CE3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003CE9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003CF1                 xor     r12d, r12d
.text:0000000000003CF4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003CF9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003CFE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003D03                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003D08                 jmp     loc_3736
.text:0000000000003D0D ; ---------------------------------------------------------------------------
.text:0000000000003D0D
.text:0000000000003D0D loc_3D0D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003D0D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003D12                 movzx   eax, byte ptr [rdx]
.text:0000000000003D15                 test    al, al
.text:0000000000003D17                 jz      loc_3B4C
.text:0000000000003D1D                 nop     dword ptr [rax]
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003D20                 cmp     r13, r15
.text:0000000000003D23                 jbe     short loc_3D29
.text:0000000000003D25                 mov     [r14+r15], al
.text:0000000000003D29
.text:0000000000003D29 loc_3D29:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003D29                 add     r15, 1
.text:0000000000003D2D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003D32                 test    al, al
.text:0000000000003D34                 jnz     short loc_3D20
.text:0000000000003D36                 jmp     loc_3B4C
.text:0000000000003D3B ; ---------------------------------------------------------------------------
.text:0000000000003D3B
.text:0000000000003D3B loc_3D3B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003D3B                 mov     eax, edx
.text:0000000000003D3D                 jmp     loc_3297
.text:0000000000003D42 ; ---------------------------------------------------------------------------
.text:0000000000003D42
.text:0000000000003D42 loc_3D42:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003D42                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003D46                 cmp     bl, 3Eh ; '>'
.text:0000000000003D49                 ja      loc_35C0
.text:0000000000003D4F                 mov     rax, 7000A38200000000h
.text:0000000000003D59                 bt      rax, rbx
.text:0000000000003D5D                 jnb     loc_35C0
.text:0000000000003D63                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D68                 jnz     loc_3F52
.text:0000000000003D6E                 cmp     r13, r15
.text:0000000000003D71                 jbe     short loc_3D78
.text:0000000000003D73                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003D78
.text:0000000000003D78 loc_3D78:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003D78                 lea     rax, [r15+1]
.text:0000000000003D7C                 cmp     r13, rax
.text:0000000000003D7F                 jbe     short loc_3D87
.text:0000000000003D81                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003D87
.text:0000000000003D87 loc_3D87:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003D87                 lea     rax, [r15+2]
.text:0000000000003D8B                 cmp     r13, rax
.text:0000000000003D8E                 jbe     short loc_3D96
.text:0000000000003D90                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003D96
.text:0000000000003D96 loc_3D96:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003D96                 lea     rax, [r15+3]
.text:0000000000003D9A                 cmp     r13, rax
.text:0000000000003D9D                 jbe     short loc_3DA5
.text:0000000000003D9F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003DA5
.text:0000000000003DA5 loc_3DA5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003DA5                 add     r15, 4
.text:0000000000003DA9                 xor     edx, edx
.text:0000000000003DAB                 xor     r12d, r12d
.text:0000000000003DAE                 xor     eax, eax
.text:0000000000003DB0                 mov     rbp, rcx
.text:0000000000003DB3                 jmp     loc_2F78
.text:0000000000003DB8 ; ---------------------------------------------------------------------------
.text:0000000000003DB8
.text:0000000000003DB8 loc_3DB8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DB8                                         ; DATA XREF: .rodata:jpt_2DE1↓o
.text:0000000000003DB8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003DBA                 jz      loc_3F48
.text:0000000000003DC0                 lea     rax, asc_6275   ; "'"
.text:0000000000003DC7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003DCC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DD1                 xor     r12d, r12d
.text:0000000000003DD4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DDD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003DE2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003DE7                 mov     [rsp+0E8h+n], 1
.text:0000000000003DF0                 xor     r15d, r15d
.text:0000000000003DF3                 mov     [rsp+0E8h+s2], rax
.text:0000000000003DF8                 jmp     loc_2E23
.text:0000000000003DF8 ; ---------------------------------------------------------------------------
.text:0000000000003DFD                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003E00                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003E00                 mov     rbp, r11
.text:0000000000003E03                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003E08                 jmp     loc_38D9
.text:0000000000003E0D ; ---------------------------------------------------------------------------
.text:0000000000003E0D
.text:0000000000003E0D loc_3E0D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003E0D                 lea     rax, unk_6273
.text:0000000000003E14                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E19                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E1E                 xor     r12d, r12d
.text:0000000000003E21                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E2A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003E2F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E34                 mov     [rsp+0E8h+n], 1
.text:0000000000003E3D                 xor     r15d, r15d
.text:0000000000003E40                 mov     [rsp+0E8h+s2], rax
.text:0000000000003E45                 jmp     loc_2E23
.text:0000000000003E4A ; ---------------------------------------------------------------------------
.text:0000000000003E4A
.text:0000000000003E4A loc_3E4A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003E4A                 mov     eax, edx
.text:0000000000003E4C
.text:0000000000003E4C loc_3E4C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003E4C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003E4C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003E51                 test    rbx, rbx
.text:0000000000003E54                 jz      short loc_3E82
.text:0000000000003E56                 test    al, al
.text:0000000000003E58                 jz      short loc_3E82
.text:0000000000003E5A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003E5D                 mov     rax, rbx
.text:0000000000003E60                 test    cl, cl
.text:0000000000003E62                 jz      short loc_3E82
.text:0000000000003E64                 mov     rdx, r15
.text:0000000000003E67                 sub     rax, r15
.text:0000000000003E6A
.text:0000000000003E6A loc_3E6A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003E6A                 cmp     r13, rdx
.text:0000000000003E6D                 jbe     short loc_3E73
.text:0000000000003E6F                 mov     [r14+rdx], cl
.text:0000000000003E73
.text:0000000000003E73 loc_3E73:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003E73                 add     rdx, 1
.text:0000000000003E77                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003E7B                 test    cl, cl
.text:0000000000003E7D                 jnz     short loc_3E6A
.text:0000000000003E7F                 mov     r15, rdx
.text:0000000000003E82
.text:0000000000003E82 loc_3E82:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003E82                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003E82                 cmp     r13, r15
.text:0000000000003E85                 jbe     loc_3929
.text:0000000000003E8B                 mov     byte ptr [r14+r15], 0
.text:0000000000003E90                 jmp     loc_3929
.text:0000000000003E95 ; ---------------------------------------------------------------------------
.text:0000000000003E95
.text:0000000000003E95 loc_3E95:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003E95                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E9F                 mov     rbp, r11
.text:0000000000003EA2                 setz    al
.text:0000000000003EA5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003EA9                 jmp     loc_38D9
.text:0000000000003EAE ; ---------------------------------------------------------------------------
.text:0000000000003EAE
.text:0000000000003EAE loc_3EAE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003EAE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003EB2                 mov     rdi, rcx
.text:0000000000003EB5                 call    gettext_quote
.text:0000000000003EBA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003EBF                 jmp     loc_3B16
.text:0000000000003EC4 ; ---------------------------------------------------------------------------
.text:0000000000003EC4
.text:0000000000003EC4 loc_3EC4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003EC4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003EC8                 mov     rdi, rcx
.text:0000000000003ECB                 call    gettext_quote
.text:0000000000003ED0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003ED5                 jmp     loc_3B41
.text:0000000000003EDA ; ---------------------------------------------------------------------------
.text:0000000000003EDA
.text:0000000000003EDA loc_3EDA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003EDA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003EDF                 mov     rbp, r11
.text:0000000000003EE2                 mov     eax, edx
.text:0000000000003EE4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003EE8                 jmp     loc_38D9
.text:0000000000003EED ; ---------------------------------------------------------------------------
.text:0000000000003EED
.text:0000000000003EED loc_3EED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003EED                 sub     rsp, 8
.text:0000000000003EF1                 mov     r8d, 5
.text:0000000000003EF7                 mov     rcx, r11
.text:0000000000003EFA                 push    [rsp+0F0h+var_88]
.text:0000000000003EFE                 push    [rsp+0F8h+var_80]
.text:0000000000003F02                 mov     rdi, r14
.text:0000000000003F05                 push    [rsp+100h+var_C8]
.text:0000000000003F09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003F11                 mov     rdx, [rsp+108h+s]
.text:0000000000003F16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003F1B                 call    quotearg_buffer_restyled
.text:0000000000003F20                 add     rsp, 20h
.text:0000000000003F24                 mov     r15, rax
.text:0000000000003F27                 jmp     loc_3929
.text:0000000000003F2C ; ---------------------------------------------------------------------------
.text:0000000000003F2C
.text:0000000000003F2C loc_3F2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003F2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003F31                 jmp     loc_3E4C
.text:0000000000003F36 ; ---------------------------------------------------------------------------
.text:0000000000003F36
.text:0000000000003F36 loc_3F36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003F36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003F3E                 jmp     loc_38D9
.text:0000000000003F43 ; ---------------------------------------------------------------------------
.text:0000000000003F43
.text:0000000000003F43 loc_3F43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003F43                 call    ___stack_chk_fail
.text:0000000000003F48 ; ---------------------------------------------------------------------------
.text:0000000000003F48
.text:0000000000003F48 loc_3F48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003F48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003F4D                 jmp     loc_39C1
.text:0000000000003F52 ; ---------------------------------------------------------------------------
.text:0000000000003F52
.text:0000000000003F52 loc_3F52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003F52                 mov     rbp, r11
.text:0000000000003F55                 jmp     loc_38F0
.text:0000000000003F5A ; ---------------------------------------------------------------------------
.text:0000000000003F5A
.text:0000000000003F5A loc_3F5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003F5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F5F                 xor     eax, eax
.text:0000000000003F61                 xor     r12d, r12d
.text:0000000000003F64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F6D                 jmp     loc_3514
.text:0000000000003F72 ; ---------------------------------------------------------------------------
.text:0000000000003F72
.text:0000000000003F72 loc_3F72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003F72                 mov     rdx, r13
.text:0000000000003F75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003F7A                 jmp     loc_3572
.text:0000000000003F7F ; ---------------------------------------------------------------------------
.text:0000000000003F7F
.text:0000000000003F7F def_2DE1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003F7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003F7F ; } // starts at 2D50
.text:0000000000003F7F quotearg_buffer_restyled endp
.text:0000000000003F7F
.text:0000000000003F7F ; ---------------------------------------------------------------------------
.text:0000000000003F84                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90
.text:0000000000003F90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003F90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003F90
.text:0000000000003F90 var_50          = qword ptr -50h
.text:0000000000003F90 var_48          = qword ptr -48h
.text:0000000000003F90 var_40          = dword ptr -40h
.text:0000000000003F90 var_3C          = dword ptr -3Ch
.text:0000000000003F90
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 push    r15
.text:0000000000003F92                 push    r14
.text:0000000000003F94                 movsxd  r15, edi
.text:0000000000003F97                 push    r13
.text:0000000000003F99                 push    r12
.text:0000000000003F9B                 mov     r14, rdx
.text:0000000000003F9E                 push    rbp
.text:0000000000003F9F                 push    rbx
.text:0000000000003FA0                 mov     rbp, rcx
.text:0000000000003FA3                 sub     rsp, 28h
.text:0000000000003FA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003FAC                 call    ___errno_location
.text:0000000000003FB1                 mov     r13, rax
.text:0000000000003FB4                 mov     eax, [rax]
.text:0000000000003FB6                 test    r15d, r15d
.text:0000000000003FB9                 mov     rbx, cs:slotvec
.text:0000000000003FC0                 mov     [rsp+58h+var_40], eax
.text:0000000000003FC4                 js      loc_4131
.text:0000000000003FCA                 cmp     cs:nslots, r15d
.text:0000000000003FD1                 jg      short loc_4035
.text:0000000000003FD3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003FDA                 jz      loc_4136
.text:0000000000003FE0                 lea     r12d, [r15+1]
.text:0000000000003FE4                 lea     rax, slotvec0
.text:0000000000003FEB                 movsxd  rsi, r12d
.text:0000000000003FEE                 shl     rsi, 4
.text:0000000000003FF2                 cmp     rbx, rax
.text:0000000000003FF5                 jz      loc_4110
.text:0000000000003FFB                 mov     rdi, rbx
.text:0000000000003FFE                 call    xrealloc
.text:0000000000004003                 mov     rbx, rax
.text:0000000000004006                 mov     cs:slotvec, rax
.text:000000000000400D
.text:000000000000400D loc_400D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000400D                 movsxd  rdi, cs:nslots
.text:0000000000004014                 mov     edx, r12d
.text:0000000000004017                 xor     esi, esi        ; c
.text:0000000000004019                 sub     edx, edi
.text:000000000000401B                 shl     rdi, 4
.text:000000000000401F                 movsxd  rdx, edx
.text:0000000000004022                 add     rdi, rbx        ; s
.text:0000000000004025                 shl     rdx, 4          ; n
.text:0000000000004029                 call    _memset
.text:000000000000402E                 mov     cs:nslots, r12d
.text:0000000000004035
.text:0000000000004035 loc_4035:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004035                 mov     eax, [rbp+4]
.text:0000000000004038                 shl     r15, 4
.text:000000000000403C                 sub     rsp, 8
.text:0000000000004040                 add     rbx, r15
.text:0000000000004043                 lea     r15, [rbp+8]
.text:0000000000004047                 mov     r8d, [rbp+0]
.text:000000000000404B                 mov     r11, [rbx]
.text:000000000000404E                 mov     r12, [rbx+8]
.text:0000000000004052                 mov     rcx, r14
.text:0000000000004055                 or      eax, 1
.text:0000000000004058                 mov     [rsp+60h+var_3C], eax
.text:000000000000405C                 push    qword ptr [rbp+30h]
.text:000000000000405F                 mov     r9d, eax
.text:0000000000004062                 push    qword ptr [rbp+28h]
.text:0000000000004065                 push    r15
.text:0000000000004067                 mov     rsi, r11
.text:000000000000406A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000406F                 mov     rdi, r12
.text:0000000000004072                 mov     [rsp+78h+var_48], r11
.text:0000000000004077                 call    quotearg_buffer_restyled
.text:000000000000407C                 add     rsp, 20h
.text:0000000000004080                 mov     r11, [rsp+58h+var_48]
.text:0000000000004085                 cmp     r11, rax
.text:0000000000004088                 ja      short loc_40F1
.text:000000000000408A                 lea     rsi, [rax+1]
.text:000000000000408E                 lea     rax, slot0
.text:0000000000004095                 cmp     r12, rax
.text:0000000000004098                 mov     [rbx], rsi
.text:000000000000409B                 jz      short loc_40AF
.text:000000000000409D                 mov     rdi, r12        ; ptr
.text:00000000000040A0                 mov     [rsp+58h+var_48], rsi
.text:00000000000040A5                 call    _free
.text:00000000000040AA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000040AF
.text:00000000000040AF loc_40AF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000040AF                 mov     rdi, rsi
.text:00000000000040B2                 mov     [rsp+58h+var_48], rsi
.text:00000000000040B7                 call    xmalloc
.text:00000000000040BC                 sub     rsp, 8
.text:00000000000040C0                 mov     [rbx+8], rax
.text:00000000000040C4                 mov     r8d, [rbp+0]
.text:00000000000040C8                 push    qword ptr [rbp+30h]
.text:00000000000040CB                 push    qword ptr [rbp+28h]
.text:00000000000040CE                 mov     rcx, r14
.text:00000000000040D1                 push    r15
.text:00000000000040D3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000040D8                 mov     rdi, rax
.text:00000000000040DB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000040E0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000040E5                 mov     r12, rax
.text:00000000000040E8                 call    quotearg_buffer_restyled
.text:00000000000040ED                 add     rsp, 20h
.text:00000000000040F1
.text:00000000000040F1 loc_40F1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000040F1                 mov     eax, [rsp+58h+var_40]
.text:00000000000040F5                 mov     [r13+0], eax
.text:00000000000040F9                 add     rsp, 28h
.text:00000000000040FD                 mov     rax, r12
.text:0000000000004100                 pop     rbx
.text:0000000000004101                 pop     rbp
.text:0000000000004102                 pop     r12
.text:0000000000004104                 pop     r13
.text:0000000000004106                 pop     r14
.text:0000000000004108                 pop     r15
.text:000000000000410A                 retn
.text:000000000000410A ; ---------------------------------------------------------------------------
.text:000000000000410B                 align 10h
.text:0000000000004110
.text:0000000000004110 loc_4110:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004110                 xor     edi, edi
.text:0000000000004112                 call    xrealloc
.text:0000000000004117                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000411F                 mov     rbx, rax
.text:0000000000004122                 mov     cs:slotvec, rax
.text:0000000000004129                 movups  xmmword ptr [rax], xmm0
.text:000000000000412C                 jmp     loc_400D
.text:0000000000004131 ; ---------------------------------------------------------------------------
.text:0000000000004131
.text:0000000000004131 loc_4131:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004131                 call    _abort
.text:0000000000004136 ; ---------------------------------------------------------------------------
.text:0000000000004136
.text:0000000000004136 loc_4136:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004136                 call    xalloc_die
.text:0000000000004136 ; } // starts at 3F90
.text:0000000000004136 quotearg_n_options endp
.text:0000000000004136
.text:0000000000004136 ; ---------------------------------------------------------------------------
.text:000000000000413B                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004140                 public clone_quoting_options
.text:0000000000004140 clone_quoting_options proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 push    r12
.text:0000000000004142                 push    rbp
.text:0000000000004143                 push    rbx
.text:0000000000004144                 mov     rbx, rdi
.text:0000000000004147                 call    ___errno_location
.text:000000000000414C                 mov     r12d, [rax]
.text:000000000000414F                 mov     rbp, rax
.text:0000000000004152                 lea     rax, default_quoting_options
.text:0000000000004159                 test    rbx, rbx
.text:000000000000415C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004161                 cmovz   rbx, rax
.text:0000000000004165                 mov     rdi, rbx        ; src
.text:0000000000004168                 call    xmemdup
.text:000000000000416D                 mov     [rbp+0], r12d
.text:0000000000004171                 pop     rbx
.text:0000000000004172                 pop     rbp
.text:0000000000004173                 pop     r12
.text:0000000000004175                 retn
.text:0000000000004175 ; } // starts at 4140
.text:0000000000004175 clone_quoting_options endp
.text:0000000000004175
.text:0000000000004175 ; ---------------------------------------------------------------------------
.text:0000000000004176                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180
.text:0000000000004180                 public get_quoting_style
.text:0000000000004180 get_quoting_style proc near
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 lea     rax, default_quoting_options
.text:0000000000004187                 test    rdi, rdi
.text:000000000000418A                 cmovz   rdi, rax
.text:000000000000418E                 mov     eax, [rdi]
.text:0000000000004190                 retn
.text:0000000000004190 ; } // starts at 4180
.text:0000000000004190 get_quoting_style endp
.text:0000000000004190
.text:0000000000004190 ; ---------------------------------------------------------------------------
.text:0000000000004191                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0
.text:00000000000041A0                 public set_quoting_style
.text:00000000000041A0 set_quoting_style proc near
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 lea     rax, default_quoting_options
.text:00000000000041A7                 test    rdi, rdi
.text:00000000000041AA                 cmovz   rdi, rax
.text:00000000000041AE                 mov     [rdi], esi
.text:00000000000041B0                 retn
.text:00000000000041B0 ; } // starts at 41A0
.text:00000000000041B0 set_quoting_style endp
.text:00000000000041B0
.text:00000000000041B0 ; ---------------------------------------------------------------------------
.text:00000000000041B1                 align 20h
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0 ; Attributes: info_from_lumina
.text:00000000000041C0
.text:00000000000041C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000041C0                 public set_char_quoting
.text:00000000000041C0 set_char_quoting proc near
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 lea     rax, default_quoting_options
.text:00000000000041C7                 test    rdi, rdi
.text:00000000000041CA                 mov     ecx, esi
.text:00000000000041CC                 cmovz   rdi, rax
.text:00000000000041D0                 mov     eax, esi
.text:00000000000041D2                 and     ecx, 1Fh
.text:00000000000041D5                 shr     al, 5
.text:00000000000041D8                 movzx   eax, al
.text:00000000000041DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000041E0                 mov     esi, [rdi]
.text:00000000000041E2                 mov     eax, esi
.text:00000000000041E4                 shr     eax, cl
.text:00000000000041E6                 xor     edx, eax
.text:00000000000041E8                 and     eax, 1
.text:00000000000041EB                 and     edx, 1
.text:00000000000041EE                 shl     edx, cl
.text:00000000000041F0                 xor     edx, esi
.text:00000000000041F2                 mov     [rdi], edx
.text:00000000000041F4                 retn
.text:00000000000041F4 ; } // starts at 41C0
.text:00000000000041F4 set_char_quoting endp
.text:00000000000041F4
.text:00000000000041F4 ; ---------------------------------------------------------------------------
.text:00000000000041F5                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200
.text:0000000000004200                 public set_quoting_flags
.text:0000000000004200 set_quoting_flags proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 lea     rax, default_quoting_options
.text:0000000000004207                 test    rdi, rdi
.text:000000000000420A                 cmovz   rdi, rax
.text:000000000000420E                 mov     eax, [rdi+4]
.text:0000000000004211                 mov     [rdi+4], esi
.text:0000000000004214                 retn
.text:0000000000004214 ; } // starts at 4200
.text:0000000000004214 set_quoting_flags endp
.text:0000000000004214
.text:0000000000004214 ; ---------------------------------------------------------------------------
.text:0000000000004215                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004220                 public set_custom_quoting
.text:0000000000004220 set_custom_quoting proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 lea     rax, default_quoting_options
.text:0000000000004227                 test    rdi, rdi
.text:000000000000422A                 cmovz   rdi, rax
.text:000000000000422E                 test    rsi, rsi
.text:0000000000004231                 mov     dword ptr [rdi], 0Ah
.text:0000000000004237                 jz      short loc_4247
.text:0000000000004239                 test    rdx, rdx
.text:000000000000423C                 jz      short loc_4247
.text:000000000000423E                 mov     [rdi+28h], rsi
.text:0000000000004242                 mov     [rdi+30h], rdx
.text:0000000000004246                 retn
.text:0000000000004247 ; ---------------------------------------------------------------------------
.text:0000000000004247
.text:0000000000004247 loc_4247:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004247                                         ; set_custom_quoting+1C↑j
.text:0000000000004247                 sub     rsp, 8
.text:000000000000424B                 call    _abort
.text:000000000000424B ; } // starts at 4220
.text:000000000000424B set_custom_quoting endp
.text:000000000000424B
.text:0000000000004250
.text:0000000000004250 ; =============== S U B R O U T I N E =======================================
.text:0000000000004250
.text:0000000000004250 ; Attributes: info_from_lumina
.text:0000000000004250
.text:0000000000004250 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004250                 public quotearg_buffer
.text:0000000000004250 quotearg_buffer proc near
.text:0000000000004250
.text:0000000000004250 var_40          = qword ptr -40h
.text:0000000000004250
.text:0000000000004250 ; __unwind {
.text:0000000000004250                 push    r15
.text:0000000000004252                 push    r14
.text:0000000000004254                 lea     rax, default_quoting_options
.text:000000000000425B                 push    r13
.text:000000000000425D                 push    r12
.text:000000000000425F                 mov     r13, rdi
.text:0000000000004262                 push    rbp
.text:0000000000004263                 push    rbx
.text:0000000000004264                 mov     rbx, r8
.text:0000000000004267                 mov     r14, rsi
.text:000000000000426A                 mov     r15, rdx
.text:000000000000426D                 sub     rsp, 18h
.text:0000000000004271                 test    r8, r8
.text:0000000000004274                 cmovz   rbx, rax
.text:0000000000004278                 mov     [rsp+48h+var_40], rcx
.text:000000000000427D                 call    ___errno_location
.text:0000000000004282                 mov     r12d, [rax]
.text:0000000000004285                 mov     rbp, rax
.text:0000000000004288                 lea     rax, [rbx+8]
.text:000000000000428C                 sub     rsp, 8
.text:0000000000004290                 mov     r9d, [rbx+4]
.text:0000000000004294                 push    qword ptr [rbx+30h]
.text:0000000000004297                 mov     r8d, [rbx]
.text:000000000000429A                 push    qword ptr [rbx+28h]
.text:000000000000429D                 mov     rdx, r15
.text:00000000000042A0                 push    rax
.text:00000000000042A1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000042A6                 mov     rsi, r14
.text:00000000000042A9                 mov     rdi, r13
.text:00000000000042AC                 call    quotearg_buffer_restyled
.text:00000000000042B1                 mov     [rbp+0], r12d
.text:00000000000042B5                 add     rsp, 38h
.text:00000000000042B9                 pop     rbx
.text:00000000000042BA                 pop     rbp
.text:00000000000042BB                 pop     r12
.text:00000000000042BD                 pop     r13
.text:00000000000042BF                 pop     r14
.text:00000000000042C1                 pop     r15
.text:00000000000042C3                 retn
.text:00000000000042C3 ; } // starts at 4250
.text:00000000000042C3 quotearg_buffer endp
.text:00000000000042C3
.text:00000000000042C3 ; ---------------------------------------------------------------------------
.text:00000000000042C4                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0 ; Attributes: info_from_lumina
.text:00000000000042D0
.text:00000000000042D0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000042D0                 public quotearg_alloc_mem
.text:00000000000042D0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000042D0
.text:00000000000042D0 var_5C          = dword ptr -5Ch
.text:00000000000042D0 var_58          = qword ptr -58h
.text:00000000000042D0 var_50          = qword ptr -50h
.text:00000000000042D0 var_48          = qword ptr -48h
.text:00000000000042D0 var_40          = qword ptr -40h
.text:00000000000042D0
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 push    r15
.text:00000000000042D2                 push    r14
.text:00000000000042D4                 lea     rax, default_quoting_options
.text:00000000000042DB                 push    r13
.text:00000000000042DD                 push    r12
.text:00000000000042DF                 mov     r12, rdx
.text:00000000000042E2                 push    rbp
.text:00000000000042E3                 push    rbx
.text:00000000000042E4                 mov     rbx, rcx
.text:00000000000042E7                 mov     r14, rdi
.text:00000000000042EA                 mov     r15, rsi
.text:00000000000042ED                 sub     rsp, 38h
.text:00000000000042F1                 test    rcx, rcx
.text:00000000000042F4                 cmovz   rbx, rax
.text:00000000000042F8                 xor     ebp, ebp
.text:00000000000042FA                 call    ___errno_location
.text:00000000000042FF                 test    r12, r12
.text:0000000000004302                 mov     r13, rax
.text:0000000000004305                 mov     eax, [rax]
.text:0000000000004307                 setz    bpl
.text:000000000000430B                 or      ebp, [rbx+4]
.text:000000000000430E                 lea     r10, [rbx+8]
.text:0000000000004312                 sub     rsp, 8
.text:0000000000004316                 mov     r8d, [rbx]
.text:0000000000004319                 mov     rcx, r15
.text:000000000000431C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004320                 push    qword ptr [rbx+30h]
.text:0000000000004323                 mov     rdx, r14
.text:0000000000004326                 push    qword ptr [rbx+28h]
.text:0000000000004329                 push    r10
.text:000000000000432B                 xor     esi, esi
.text:000000000000432D                 mov     r9d, ebp
.text:0000000000004330                 xor     edi, edi
.text:0000000000004332                 mov     [rsp+88h+var_48], r10
.text:0000000000004337                 call    quotearg_buffer_restyled
.text:000000000000433C                 lea     rsi, [rax+1]
.text:0000000000004340                 mov     [rsp+88h+var_40], rax
.text:0000000000004345                 add     rsp, 20h
.text:0000000000004349                 mov     rdi, rsi
.text:000000000000434C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004351                 call    xmalloc
.text:0000000000004356                 mov     [rsp+68h+var_58], rax
.text:000000000000435B                 sub     rsp, 8
.text:000000000000435F                 push    qword ptr [rbx+30h]
.text:0000000000004362                 push    qword ptr [rbx+28h]
.text:0000000000004365                 mov     r10, [rsp+80h+var_48]
.text:000000000000436A                 mov     r9d, ebp
.text:000000000000436D                 mov     r8d, [rbx]
.text:0000000000004370                 mov     rcx, r15
.text:0000000000004373                 mov     rdx, r14
.text:0000000000004376                 mov     rdi, rax
.text:0000000000004379                 push    r10
.text:000000000000437B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004380                 call    quotearg_buffer_restyled
.text:0000000000004385                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004389                 add     rsp, 20h
.text:000000000000438D                 test    r12, r12
.text:0000000000004390                 mov     [r13+0], eax
.text:0000000000004394                 jz      short loc_439F
.text:0000000000004396                 mov     r11, [rsp+68h+var_40]
.text:000000000000439B                 mov     [r12], r11
.text:000000000000439F
.text:000000000000439F loc_439F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000439F                 mov     rax, [rsp+68h+var_58]
.text:00000000000043A4                 add     rsp, 38h
.text:00000000000043A8                 pop     rbx
.text:00000000000043A9                 pop     rbp
.text:00000000000043AA                 pop     r12
.text:00000000000043AC                 pop     r13
.text:00000000000043AE                 pop     r14
.text:00000000000043B0                 pop     r15
.text:00000000000043B2                 retn
.text:00000000000043B2 ; } // starts at 42D0
.text:00000000000043B2 quotearg_alloc_mem endp
.text:00000000000043B2
.text:00000000000043B2 ; ---------------------------------------------------------------------------
.text:00000000000043B3                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0                 public quotearg_alloc
.text:00000000000043C0 quotearg_alloc  proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 mov     rcx, rdx
.text:00000000000043C3                 xor     edx, edx
.text:00000000000043C5                 jmp     quotearg_alloc_mem
.text:00000000000043C5 ; } // starts at 43C0
.text:00000000000043C5 quotearg_alloc  endp
.text:00000000000043C5
.text:00000000000043C5 ; ---------------------------------------------------------------------------
.text:00000000000043CA                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0 ; Attributes: info_from_lumina
.text:00000000000043D0
.text:00000000000043D0 ; void __cdecl quotearg_free()
.text:00000000000043D0                 public quotearg_free
.text:00000000000043D0 quotearg_free   proc near
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 mov     eax, cs:nslots
.text:00000000000043D6                 push    r12
.text:00000000000043D8                 mov     r12, cs:slotvec
.text:00000000000043DF                 push    rbp
.text:00000000000043E0                 push    rbx
.text:00000000000043E1                 cmp     eax, 1
.text:00000000000043E4                 jle     short loc_4411
.text:00000000000043E6                 sub     eax, 2
.text:00000000000043E9                 lea     rbx, [r12+18h]
.text:00000000000043EE                 shl     rax, 4
.text:00000000000043F2                 lea     rbp, [r12+rax+28h]
.text:00000000000043F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004400                 mov     rdi, [rbx]      ; ptr
.text:0000000000004403                 add     rbx, 10h
.text:0000000000004407                 call    _free
.text:000000000000440C                 cmp     rbx, rbp
.text:000000000000440F                 jnz     short loc_4400
.text:0000000000004411
.text:0000000000004411 loc_4411:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004411                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004416                 lea     rbx, slot0
.text:000000000000441D                 cmp     rdi, rbx
.text:0000000000004420                 jz      short loc_4439
.text:0000000000004422                 call    _free
.text:0000000000004427                 mov     cs:slotvec0, 100h
.text:0000000000004432                 mov     cs:off_209098, rbx
.text:0000000000004439
.text:0000000000004439 loc_4439:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004439                 lea     rbx, slotvec0
.text:0000000000004440                 cmp     r12, rbx
.text:0000000000004443                 jz      short loc_4454
.text:0000000000004445                 mov     rdi, r12        ; ptr
.text:0000000000004448                 call    _free
.text:000000000000444D                 mov     cs:slotvec, rbx
.text:0000000000004454
.text:0000000000004454 loc_4454:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004454                 pop     rbx
.text:0000000000004455                 mov     cs:nslots, 1
.text:000000000000445F                 pop     rbp
.text:0000000000004460                 pop     r12
.text:0000000000004462                 retn
.text:0000000000004462 ; } // starts at 43D0
.text:0000000000004462 quotearg_free   endp
.text:0000000000004462
.text:0000000000004462 ; ---------------------------------------------------------------------------
.text:0000000000004463                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470                 public quotearg_n
.text:0000000000004470 quotearg_n      proc near
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 lea     rcx, default_quoting_options
.text:0000000000004477                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000447E                 jmp     quotearg_n_options
.text:000000000000447E ; } // starts at 4470
.text:000000000000447E quotearg_n      endp
.text:000000000000447E
.text:000000000000447E ; ---------------------------------------------------------------------------
.text:0000000000004483                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490
.text:0000000000004490                 public quotearg_n_mem
.text:0000000000004490 quotearg_n_mem  proc near
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 lea     rcx, default_quoting_options
.text:0000000000004497                 jmp     quotearg_n_options
.text:0000000000004497 ; } // starts at 4490
.text:0000000000004497 quotearg_n_mem  endp
.text:0000000000004497
.text:0000000000004497 ; ---------------------------------------------------------------------------
.text:000000000000449C                 align 20h
.text:00000000000044A0
.text:00000000000044A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044A0
.text:00000000000044A0
.text:00000000000044A0                 public quotearg
.text:00000000000044A0 quotearg        proc near
.text:00000000000044A0 ; __unwind {
.text:00000000000044A0                 lea     rcx, default_quoting_options
.text:00000000000044A7                 mov     rsi, rdi
.text:00000000000044AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000044B1                 xor     edi, edi
.text:00000000000044B3                 jmp     quotearg_n_options
.text:00000000000044B3 ; } // starts at 44A0
.text:00000000000044B3 quotearg        endp
.text:00000000000044B3
.text:00000000000044B3 ; ---------------------------------------------------------------------------
.text:00000000000044B8                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0
.text:00000000000044C0                 public quotearg_mem
.text:00000000000044C0 quotearg_mem    proc near
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 lea     rcx, default_quoting_options
.text:00000000000044C7                 mov     rdx, rsi
.text:00000000000044CA                 mov     rsi, rdi
.text:00000000000044CD                 xor     edi, edi
.text:00000000000044CF                 jmp     quotearg_n_options
.text:00000000000044CF ; } // starts at 44C0
.text:00000000000044CF quotearg_mem    endp
.text:00000000000044CF
.text:00000000000044CF ; ---------------------------------------------------------------------------
.text:00000000000044D4                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0 ; Attributes: info_from_lumina
.text:00000000000044E0
.text:00000000000044E0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000044E0                 public quotearg_n_style
.text:00000000000044E0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000044E0
.text:00000000000044E0 var_48          = dword ptr -48h
.text:00000000000044E0 var_44          = qword ptr -44h
.text:00000000000044E0 var_3C          = qword ptr -3Ch
.text:00000000000044E0 var_34          = qword ptr -34h
.text:00000000000044E0 var_2C          = qword ptr -2Ch
.text:00000000000044E0 var_24          = qword ptr -24h
.text:00000000000044E0 var_1C          = qword ptr -1Ch
.text:00000000000044E0 var_14          = dword ptr -14h
.text:00000000000044E0 var_10          = qword ptr -10h
.text:00000000000044E0
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 sub     rsp, 48h
.text:00000000000044E4                 mov     rax, rdx
.text:00000000000044E7                 mov     rdx, fs:28h
.text:00000000000044F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000044F5                 xor     edx, edx
.text:00000000000044F7                 cmp     esi, 0Ah
.text:00000000000044FA                 jz      short loc_4564
.text:00000000000044FC                 mov     [rsp+48h+var_48], esi
.text:00000000000044FF                 mov     rcx, rsp
.text:0000000000004502                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004509                 mov     rsi, rax
.text:000000000000450C                 mov     [rsp+48h+var_44], 0
.text:0000000000004515                 mov     [rsp+48h+var_3C], 0
.text:000000000000451E                 mov     [rsp+48h+var_34], 0
.text:0000000000004527                 mov     [rsp+48h+var_2C], 0
.text:0000000000004530                 mov     [rsp+48h+var_24], 0
.text:0000000000004539                 mov     [rsp+48h+var_1C], 0
.text:0000000000004542                 mov     [rsp+48h+var_14], 0
.text:000000000000454A                 call    quotearg_n_options
.text:000000000000454F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004554                 xor     rcx, fs:28h
.text:000000000000455D                 jnz     short loc_4569
.text:000000000000455F                 add     rsp, 48h
.text:0000000000004563                 retn
.text:0000000000004564 ; ---------------------------------------------------------------------------
.text:0000000000004564
.text:0000000000004564 loc_4564:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004564                 call    _abort
.text:0000000000004569 ; ---------------------------------------------------------------------------
.text:0000000000004569
.text:0000000000004569 loc_4569:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004569                 call    ___stack_chk_fail
.text:0000000000004569 ; } // starts at 44E0
.text:0000000000004569 quotearg_n_style endp
.text:0000000000004569
.text:0000000000004569 ; ---------------------------------------------------------------------------
.text:000000000000456E                 align 10h
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570 ; Attributes: info_from_lumina
.text:0000000000004570
.text:0000000000004570 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004570                 public quotearg_n_style_mem
.text:0000000000004570 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004570                                         ; collate_error+6A↓p ...
.text:0000000000004570
.text:0000000000004570 var_48          = dword ptr -48h
.text:0000000000004570 var_44          = qword ptr -44h
.text:0000000000004570 var_3C          = qword ptr -3Ch
.text:0000000000004570 var_34          = qword ptr -34h
.text:0000000000004570 var_2C          = qword ptr -2Ch
.text:0000000000004570 var_24          = qword ptr -24h
.text:0000000000004570 var_1C          = qword ptr -1Ch
.text:0000000000004570 var_14          = dword ptr -14h
.text:0000000000004570 var_10          = qword ptr -10h
.text:0000000000004570
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 sub     rsp, 48h
.text:0000000000004574                 mov     rax, rdx
.text:0000000000004577                 mov     rdx, rcx
.text:000000000000457A                 mov     rcx, fs:28h
.text:0000000000004583                 mov     [rsp+48h+var_10], rcx
.text:0000000000004588                 xor     ecx, ecx
.text:000000000000458A                 cmp     esi, 0Ah
.text:000000000000458D                 jz      short loc_45F0
.text:000000000000458F                 mov     [rsp+48h+var_48], esi
.text:0000000000004592                 mov     rcx, rsp
.text:0000000000004595                 mov     rsi, rax
.text:0000000000004598                 mov     [rsp+48h+var_44], 0
.text:00000000000045A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000045AA                 mov     [rsp+48h+var_34], 0
.text:00000000000045B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000045BC                 mov     [rsp+48h+var_24], 0
.text:00000000000045C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000045CE                 mov     [rsp+48h+var_14], 0
.text:00000000000045D6                 call    quotearg_n_options
.text:00000000000045DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000045E0                 xor     rdx, fs:28h
.text:00000000000045E9                 jnz     short loc_45F5
.text:00000000000045EB                 add     rsp, 48h
.text:00000000000045EF                 retn
.text:00000000000045F0 ; ---------------------------------------------------------------------------
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000045F0                 call    _abort
.text:00000000000045F5 ; ---------------------------------------------------------------------------
.text:00000000000045F5
.text:00000000000045F5 loc_45F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000045F5                 call    ___stack_chk_fail
.text:00000000000045F5 ; } // starts at 4570
.text:00000000000045F5 quotearg_n_style_mem endp
.text:00000000000045F5
.text:00000000000045F5 ; ---------------------------------------------------------------------------
.text:00000000000045FA                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600
.text:0000000000004600                 public quotearg_style
.text:0000000000004600 quotearg_style  proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 mov     rdx, rsi
.text:0000000000004603                 mov     esi, edi
.text:0000000000004605                 xor     edi, edi
.text:0000000000004607                 jmp     quotearg_n_style
.text:0000000000004607 ; } // starts at 4600
.text:0000000000004607 quotearg_style  endp
.text:0000000000004607
.text:0000000000004607 ; ---------------------------------------------------------------------------
.text:000000000000460C                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610
.text:0000000000004610                 public quotearg_style_mem
.text:0000000000004610 quotearg_style_mem proc near
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 mov     rcx, rdx
.text:0000000000004613                 mov     rdx, rsi
.text:0000000000004616                 mov     esi, edi
.text:0000000000004618                 xor     edi, edi
.text:000000000000461A                 jmp     quotearg_n_style_mem
.text:000000000000461A ; } // starts at 4610
.text:000000000000461A quotearg_style_mem endp
.text:000000000000461A
.text:000000000000461A ; ---------------------------------------------------------------------------
.text:000000000000461F                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620 ; Attributes: info_from_lumina
.text:0000000000004620
.text:0000000000004620 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004620                 public quotearg_char_mem
.text:0000000000004620 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004620                                         ; quotearg_colon+C↓j ...
.text:0000000000004620
.text:0000000000004620 var_48          = xmmword ptr -48h
.text:0000000000004620 var_38          = xmmword ptr -38h
.text:0000000000004620 var_28          = xmmword ptr -28h
.text:0000000000004620 var_18          = qword ptr -18h
.text:0000000000004620 var_10          = qword ptr -10h
.text:0000000000004620
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 sub     rsp, 48h
.text:0000000000004624                 mov     ecx, edx
.text:0000000000004626                 mov     rax, fs:28h
.text:000000000000462F                 mov     [rsp+48h+var_10], rax
.text:0000000000004634                 xor     eax, eax
.text:0000000000004636                 mov     rax, cs:qword_209250
.text:000000000000463D                 mov     r8, rsp
.text:0000000000004640                 and     ecx, 1Fh
.text:0000000000004643                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000464B                 mov     [rsp+48h+var_18], rax
.text:0000000000004650                 mov     eax, edx
.text:0000000000004652                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004656                 shr     al, 5
.text:0000000000004659                 movzx   eax, al
.text:000000000000465C                 lea     r9, [r8+rax*4+8]
.text:0000000000004661                 movdqa  xmm0, cs:xmmword_209230
.text:0000000000004669                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000466E                 movdqa  xmm0, cs:xmmword_209240
.text:0000000000004676                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000467B                 mov     edx, [r9]
.text:000000000000467E                 mov     eax, edx
.text:0000000000004680                 shr     eax, cl
.text:0000000000004682                 not     eax
.text:0000000000004684                 and     eax, 1
.text:0000000000004687                 shl     eax, cl
.text:0000000000004689                 mov     rcx, r8
.text:000000000000468C                 xor     eax, edx
.text:000000000000468E                 mov     rdx, rsi
.text:0000000000004691                 mov     rsi, rdi
.text:0000000000004694                 mov     [r9], eax
.text:0000000000004697                 xor     edi, edi
.text:0000000000004699                 call    quotearg_n_options
.text:000000000000469E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000046A3                 xor     rsi, fs:28h
.text:00000000000046AC                 jnz     short loc_46B3
.text:00000000000046AE                 add     rsp, 48h
.text:00000000000046B2                 retn
.text:00000000000046B3 ; ---------------------------------------------------------------------------
.text:00000000000046B3
.text:00000000000046B3 loc_46B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000046B3                 call    ___stack_chk_fail
.text:00000000000046B3 ; } // starts at 4620
.text:00000000000046B3 quotearg_char_mem endp
.text:00000000000046B3
.text:00000000000046B3 ; ---------------------------------------------------------------------------
.text:00000000000046B8                 align 20h
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0
.text:00000000000046C0                 public quotearg_char
.text:00000000000046C0 quotearg_char   proc near
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 movsx   edx, sil
.text:00000000000046C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000046CB                 jmp     quotearg_char_mem
.text:00000000000046CB ; } // starts at 46C0
.text:00000000000046CB quotearg_char   endp
.text:00000000000046CB
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0
.text:00000000000046D0                 public quotearg_colon
.text:00000000000046D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 mov     edx, 3Ah ; ':'
.text:00000000000046D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000046DC                 jmp     quotearg_char_mem
.text:00000000000046DC ; } // starts at 46D0
.text:00000000000046DC quotearg_colon  endp
.text:00000000000046DC
.text:00000000000046DC ; ---------------------------------------------------------------------------
.text:00000000000046E1                 align 10h
.text:00000000000046F0
.text:00000000000046F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046F0
.text:00000000000046F0
.text:00000000000046F0                 public quotearg_colon_mem
.text:00000000000046F0 quotearg_colon_mem proc near
.text:00000000000046F0 ; __unwind {
.text:00000000000046F0                 mov     edx, 3Ah ; ':'
.text:00000000000046F5                 jmp     quotearg_char_mem
.text:00000000000046F5 ; } // starts at 46F0
.text:00000000000046F5 quotearg_colon_mem endp
.text:00000000000046F5
.text:00000000000046F5 ; ---------------------------------------------------------------------------
.text:00000000000046FA                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004700                 public quotearg_n_style_colon
.text:0000000000004700 quotearg_n_style_colon proc near        ; CODE XREF: compare_files+50F↑p
.text:0000000000004700                                         ; compare_files+551↑p ...
.text:0000000000004700
.text:0000000000004700 var_48          = dword ptr -48h
.text:0000000000004700 var_44          = qword ptr -44h
.text:0000000000004700 var_3C          = qword ptr -3Ch
.text:0000000000004700 var_34          = qword ptr -34h
.text:0000000000004700 var_2C          = qword ptr -2Ch
.text:0000000000004700 var_24          = qword ptr -24h
.text:0000000000004700 var_1C          = qword ptr -1Ch
.text:0000000000004700 var_14          = dword ptr -14h
.text:0000000000004700 var_10          = qword ptr -10h
.text:0000000000004700
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 sub     rsp, 48h
.text:0000000000004704                 mov     rax, rdx
.text:0000000000004707                 mov     rdx, fs:28h
.text:0000000000004710                 mov     [rsp+48h+var_10], rdx
.text:0000000000004715                 xor     edx, edx
.text:0000000000004717                 cmp     esi, 0Ah
.text:000000000000471A                 jz      short loc_4784
.text:000000000000471C                 mov     [rsp+48h+var_48], esi
.text:000000000000471F                 mov     rcx, rsp
.text:0000000000004722                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004729                 mov     rsi, rax
.text:000000000000472C                 mov     [rsp+48h+var_44], 0
.text:0000000000004735                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000473E                 mov     [rsp+48h+var_34], 0
.text:0000000000004747                 mov     [rsp+48h+var_2C], 0
.text:0000000000004750                 mov     [rsp+48h+var_24], 0
.text:0000000000004759                 mov     [rsp+48h+var_1C], 0
.text:0000000000004762                 mov     [rsp+48h+var_14], 0
.text:000000000000476A                 call    quotearg_n_options
.text:000000000000476F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004774                 xor     rcx, fs:28h
.text:000000000000477D                 jnz     short loc_4789
.text:000000000000477F                 add     rsp, 48h
.text:0000000000004783                 retn
.text:0000000000004784 ; ---------------------------------------------------------------------------
.text:0000000000004784
.text:0000000000004784 loc_4784:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004784                 call    _abort
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:0000000000004789
.text:0000000000004789 loc_4789:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004789                 call    ___stack_chk_fail
.text:0000000000004789 ; } // starts at 4700
.text:0000000000004789 quotearg_n_style_colon endp
.text:0000000000004789
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:000000000000478E                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004790                 public quotearg_n_custom_mem
.text:0000000000004790 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004790                                         ; quotearg_custom+12↓j ...
.text:0000000000004790
.text:0000000000004790 var_48          = xmmword ptr -48h
.text:0000000000004790 var_38          = xmmword ptr -38h
.text:0000000000004790 var_28          = xmmword ptr -28h
.text:0000000000004790 var_18          = qword ptr -18h
.text:0000000000004790 var_10          = qword ptr -10h
.text:0000000000004790
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 sub     rsp, 48h
.text:0000000000004794                 mov     r9, rcx
.text:0000000000004797                 mov     rcx, cs:qword_209250
.text:000000000000479E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000047A6                 mov     rax, fs:28h
.text:00000000000047AF                 mov     [rsp+48h+var_10], rax
.text:00000000000047B4                 xor     eax, eax
.text:00000000000047B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000047BA                 test    rsi, rsi
.text:00000000000047BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000047C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000047C9                 movdqa  xmm0, cs:xmmword_209230
.text:00000000000047D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000047D6                 movdqa  xmm0, cs:xmmword_209240
.text:00000000000047DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000047E3                 jz      short loc_4817
.text:00000000000047E5                 test    rdx, rdx
.text:00000000000047E8                 jz      short loc_4817
.text:00000000000047EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000047EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000047F4                 mov     rcx, rsp
.text:00000000000047F7                 mov     rdx, r8
.text:00000000000047FA                 mov     rsi, r9
.text:00000000000047FD                 call    quotearg_n_options
.text:0000000000004802                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004807                 xor     rdi, fs:28h
.text:0000000000004810                 jnz     short loc_481C
.text:0000000000004812                 add     rsp, 48h
.text:0000000000004816                 retn
.text:0000000000004817 ; ---------------------------------------------------------------------------
.text:0000000000004817
.text:0000000000004817 loc_4817:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004817                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004817                 call    _abort
.text:000000000000481C ; ---------------------------------------------------------------------------
.text:000000000000481C
.text:000000000000481C loc_481C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000481C                 call    ___stack_chk_fail
.text:000000000000481C ; } // starts at 4790
.text:000000000000481C quotearg_n_custom_mem endp
.text:000000000000481C
.text:000000000000481C ; ---------------------------------------------------------------------------
.text:0000000000004821                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830
.text:0000000000004830                 public quotearg_n_custom
.text:0000000000004830 quotearg_n_custom proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004837                 jmp     quotearg_n_custom_mem
.text:0000000000004837 ; } // starts at 4830
.text:0000000000004837 quotearg_n_custom endp
.text:0000000000004837
.text:0000000000004837 ; ---------------------------------------------------------------------------
.text:000000000000483C                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840
.text:0000000000004840                 public quotearg_custom
.text:0000000000004840 quotearg_custom proc near
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 mov     rcx, rdx
.text:0000000000004843                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000484A                 mov     rdx, rsi
.text:000000000000484D                 mov     rsi, rdi
.text:0000000000004850                 xor     edi, edi
.text:0000000000004852                 jmp     quotearg_n_custom_mem
.text:0000000000004852 ; } // starts at 4840
.text:0000000000004852 quotearg_custom endp
.text:0000000000004852
.text:0000000000004852 ; ---------------------------------------------------------------------------
.text:0000000000004857                 align 20h
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860
.text:0000000000004860                 public quotearg_custom_mem
.text:0000000000004860 quotearg_custom_mem proc near
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 mov     r8, rcx
.text:0000000000004863                 mov     rcx, rdx
.text:0000000000004866                 mov     rdx, rsi
.text:0000000000004869                 mov     rsi, rdi
.text:000000000000486C                 xor     edi, edi
.text:000000000000486E                 jmp     quotearg_n_custom_mem
.text:000000000000486E ; } // starts at 4860
.text:000000000000486E quotearg_custom_mem endp
.text:000000000000486E
.text:000000000000486E ; ---------------------------------------------------------------------------
.text:0000000000004873                 align 20h
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880
.text:0000000000004880                 public quote_n_mem
.text:0000000000004880 quote_n_mem     proc near
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 lea     rcx, quote_quoting_options
.text:0000000000004887                 jmp     quotearg_n_options
.text:0000000000004887 ; } // starts at 4880
.text:0000000000004887 quote_n_mem     endp
.text:0000000000004887
.text:0000000000004887 ; ---------------------------------------------------------------------------
.text:000000000000488C                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890
.text:0000000000004890                 public quote_mem
.text:0000000000004890 quote_mem       proc near
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 lea     rcx, quote_quoting_options
.text:0000000000004897                 mov     rdx, rsi
.text:000000000000489A                 mov     rsi, rdi
.text:000000000000489D                 xor     edi, edi
.text:000000000000489F                 jmp     quotearg_n_options
.text:000000000000489F ; } // starts at 4890
.text:000000000000489F quote_mem       endp
.text:000000000000489F
.text:000000000000489F ; ---------------------------------------------------------------------------
.text:00000000000048A4                 align 10h
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0
.text:00000000000048B0                 public quote_n
.text:00000000000048B0 quote_n         proc near
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 lea     rcx, quote_quoting_options
.text:00000000000048B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000048BE                 jmp     quotearg_n_options
.text:00000000000048BE ; } // starts at 48B0
.text:00000000000048BE quote_n         endp
.text:00000000000048BE
.text:00000000000048BE ; ---------------------------------------------------------------------------
.text:00000000000048C3                 align 10h
.text:00000000000048D0
.text:00000000000048D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048D0
.text:00000000000048D0
.text:00000000000048D0                 public quote
.text:00000000000048D0 quote           proc near               ; CODE XREF: main+2AF↑p
.text:00000000000048D0                                         ; main+33C↑p
.text:00000000000048D0 ; __unwind {
.text:00000000000048D0                 lea     rcx, quote_quoting_options
.text:00000000000048D7                 mov     rsi, rdi
.text:00000000000048DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000048E1                 xor     edi, edi
.text:00000000000048E3                 jmp     quotearg_n_options
.text:00000000000048E3 ; } // starts at 48D0
.text:00000000000048E3 quote           endp
.text:00000000000048E3
.text:00000000000048E3 ; ---------------------------------------------------------------------------
.text:00000000000048E8                 align 10h
.text:00000000000048F0
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0
.text:00000000000048F0
.text:00000000000048F0                 public dup_safer
.text:00000000000048F0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:00000000000048F0 ; __unwind {
.text:00000000000048F0                 mov     edx, 3
.text:00000000000048F5                 xor     esi, esi
.text:00000000000048F7                 xor     eax, eax
.text:00000000000048F9                 jmp     rpl_fcntl
.text:00000000000048F9 ; } // starts at 48F0
.text:00000000000048F9 dup_safer       endp
.text:00000000000048F9
.text:00000000000048F9 ; ---------------------------------------------------------------------------
.text:00000000000048FE                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004900                 public version_etc_arn
.text:0000000000004900 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4D3B↓j
.text:0000000000004900                                         ; version_etc_va:loc_4D8B↓p ...
.text:0000000000004900
.text:0000000000004900 var_58          = qword ptr -58h
.text:0000000000004900 var_50          = qword ptr -50h
.text:0000000000004900 var_48          = qword ptr -48h
.text:0000000000004900 var_40          = qword ptr -40h
.text:0000000000004900
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 push    r15
.text:0000000000004902                 push    r14
.text:0000000000004904                 push    r13
.text:0000000000004906                 push    r12
.text:0000000000004908                 mov     r12, r9
.text:000000000000490B                 push    rbp
.text:000000000000490C                 push    rbx
.text:000000000000490D                 mov     rbp, rdi
.text:0000000000004910                 mov     rbx, r8
.text:0000000000004913                 sub     rsp, 28h
.text:0000000000004917                 test    rsi, rsi
.text:000000000000491A                 jz      loc_4A38
.text:0000000000004920                 mov     r8, rdx
.text:0000000000004923                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000492A                 mov     r9, rcx
.text:000000000000492D                 xor     eax, eax
.text:000000000000492F                 mov     rcx, rsi
.text:0000000000004932                 mov     esi, 1
.text:0000000000004937                 call    ___fprintf_chk
.text:000000000000493C
.text:000000000000493C loc_493C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000493C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004943                 xor     edi, edi        ; domainname
.text:0000000000004945                 mov     edx, 5          ; category
.text:000000000000494A                 call    _dcgettext
.text:000000000000494F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004956                 mov     rcx, rax
.text:0000000000004959                 mov     r8d, 7E3h
.text:000000000000495F                 mov     esi, 1
.text:0000000000004964                 mov     rdi, rbp
.text:0000000000004967                 xor     eax, eax
.text:0000000000004969                 call    ___fprintf_chk
.text:000000000000496E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004975                 xor     edi, edi        ; domainname
.text:0000000000004977                 mov     edx, 5          ; category
.text:000000000000497C                 call    _dcgettext
.text:0000000000004981                 mov     rsi, rbp        ; stream
.text:0000000000004984                 mov     rdi, rax        ; s
.text:0000000000004987                 call    _fputs_unlocked
.text:000000000000498C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004990                 ja      def_49A4        ; jumptable 00000000000049A4 default case
.text:0000000000004996                 lea     rdx, jpt_49A4
.text:000000000000499D                 movsxd  rax, ds:(jpt_49A4 - 6A44h)[rdx+r12*4]
.text:00000000000049A1                 add     rax, rdx
.text:00000000000049A4                 jmp     rax             ; switch jump
.text:00000000000049A4 ; ---------------------------------------------------------------------------
.text:00000000000049A6                 align 10h
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000049B0                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:00000000000049B0                 mov     r9, [rbx+38h]   ; jumptable 00000000000049A4 case 8
.text:00000000000049B4                 mov     rax, [rbx+10h]
.text:00000000000049B8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000049BF                 mov     r8, [rbx+8]
.text:00000000000049C3                 mov     edx, 5          ; category
.text:00000000000049C8                 xor     edi, edi        ; domainname
.text:00000000000049CA                 mov     r13, [rbx+30h]
.text:00000000000049CE                 mov     r12, [rbx+28h]
.text:00000000000049D2                 mov     [rsp+58h+var_48], r9
.text:00000000000049D7                 mov     r15, [rbx+20h]
.text:00000000000049DB                 mov     r14, [rbx+18h]
.text:00000000000049DF                 mov     [rsp+58h+var_58], rax
.text:00000000000049E3                 mov     [rsp+58h+var_50], r8
.text:00000000000049E8                 mov     rbx, [rbx]
.text:00000000000049EB                 call    _dcgettext
.text:00000000000049F0                 sub     rsp, 8
.text:00000000000049F4
.text:00000000000049F4 loc_49F4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000049F4                 mov     r9, [rsp+60h+var_48]
.text:00000000000049F9                 mov     rdx, rax
.text:00000000000049FC                 mov     rcx, rbx
.text:00000000000049FF                 mov     esi, 1
.text:0000000000004A04                 mov     rdi, rbp
.text:0000000000004A07                 xor     eax, eax
.text:0000000000004A09                 push    r9
.text:0000000000004A0B                 push    r13
.text:0000000000004A0D                 push    r12
.text:0000000000004A0F                 push    r15
.text:0000000000004A11                 push    r14
.text:0000000000004A13                 mov     r9, [rsp+88h+var_58]
.text:0000000000004A18                 mov     r8, [rsp+88h+var_50]
.text:0000000000004A1D                 call    ___fprintf_chk
.text:0000000000004A22                 add     rsp, 30h
.text:0000000000004A26
.text:0000000000004A26 loc_4A26:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A26                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004A26                 add     rsp, 28h        ; jumptable 00000000000049A4 case 0
.text:0000000000004A2A                 pop     rbx
.text:0000000000004A2B                 pop     rbp
.text:0000000000004A2C                 pop     r12
.text:0000000000004A2E                 pop     r13
.text:0000000000004A30                 pop     r14
.text:0000000000004A32                 pop     r15
.text:0000000000004A34                 retn
.text:0000000000004A34 ; ---------------------------------------------------------------------------
.text:0000000000004A35                 align 8
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004A38                 mov     r8, rcx
.text:0000000000004A3B                 mov     rcx, rdx
.text:0000000000004A3E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004A45                 mov     esi, 1
.text:0000000000004A4A                 xor     eax, eax
.text:0000000000004A4C                 call    ___fprintf_chk
.text:0000000000004A51                 jmp     loc_493C
.text:0000000000004A51 ; ---------------------------------------------------------------------------
.text:0000000000004A56                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A60                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004A60                 mov     r10, [rbx+40h]  ; jumptable 00000000000049A4 case 9
.text:0000000000004A64                 mov     r9, [rbx+38h]
.text:0000000000004A68                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004A6F                 mov     rax, [rbx+10h]
.text:0000000000004A73                 mov     r8, [rbx+8]
.text:0000000000004A77                 mov     edx, 5          ; category
.text:0000000000004A7C                 mov     r13, [rbx+30h]
.text:0000000000004A80                 mov     r12, [rbx+28h]
.text:0000000000004A84                 mov     r15, [rbx+20h]
.text:0000000000004A88                 mov     r14, [rbx+18h]
.text:0000000000004A8C                 mov     rbx, [rbx]
.text:0000000000004A8F                 mov     [rsp+58h+var_40], r10
.text:0000000000004A94                 mov     [rsp+58h+var_48], r9
.text:0000000000004A99                 mov     [rsp+58h+var_58], rax
.text:0000000000004A9D                 mov     [rsp+58h+var_50], r8
.text:0000000000004AA2
.text:0000000000004AA2 loc_4AA2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004AA2                 xor     edi, edi        ; domainname
.text:0000000000004AA4                 call    _dcgettext
.text:0000000000004AA9                 mov     r10, [rsp+58h+var_40]
.text:0000000000004AAE                 push    r10
.text:0000000000004AB0                 jmp     loc_49F4
.text:0000000000004AB0 ; ---------------------------------------------------------------------------
.text:0000000000004AB5                 align 8
.text:0000000000004AB8
.text:0000000000004AB8 loc_4AB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AB8                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004AB8                 mov     rbx, [rbx]      ; jumptable 00000000000049A4 case 1
.text:0000000000004ABB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004AC2                 mov     edx, 5          ; category
.text:0000000000004AC7                 xor     edi, edi        ; domainname
.text:0000000000004AC9                 call    _dcgettext
.text:0000000000004ACE                 add     rsp, 28h
.text:0000000000004AD2                 mov     rcx, rbx
.text:0000000000004AD5                 mov     rdi, rbp
.text:0000000000004AD8                 pop     rbx
.text:0000000000004AD9                 pop     rbp
.text:0000000000004ADA                 pop     r12
.text:0000000000004ADC                 pop     r13
.text:0000000000004ADE                 pop     r14
.text:0000000000004AE0                 pop     r15
.text:0000000000004AE2                 mov     rdx, rax
.text:0000000000004AE5                 mov     esi, 1
.text:0000000000004AEA                 xor     eax, eax
.text:0000000000004AEC                 jmp     ___fprintf_chk
.text:0000000000004AEC ; ---------------------------------------------------------------------------
.text:0000000000004AF1                 align 8
.text:0000000000004AF8
.text:0000000000004AF8 loc_4AF8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AF8                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004AF8                 mov     r12, [rbx+8]    ; jumptable 00000000000049A4 case 2
.text:0000000000004AFC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004B03                 mov     rbx, [rbx]
.text:0000000000004B06                 mov     edx, 5          ; category
.text:0000000000004B0B                 xor     edi, edi        ; domainname
.text:0000000000004B0D                 call    _dcgettext
.text:0000000000004B12                 add     rsp, 28h
.text:0000000000004B16                 mov     r8, r12
.text:0000000000004B19                 mov     rcx, rbx
.text:0000000000004B1C                 mov     rdi, rbp
.text:0000000000004B1F                 mov     rdx, rax
.text:0000000000004B22                 mov     esi, 1
.text:0000000000004B27                 pop     rbx
.text:0000000000004B28                 pop     rbp
.text:0000000000004B29                 pop     r12
.text:0000000000004B2B                 pop     r13
.text:0000000000004B2D                 pop     r14
.text:0000000000004B2F                 pop     r15
.text:0000000000004B31                 xor     eax, eax
.text:0000000000004B33                 jmp     ___fprintf_chk
.text:0000000000004B33 ; ---------------------------------------------------------------------------
.text:0000000000004B38                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B40                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004B40                 mov     r13, [rbx+10h]  ; jumptable 00000000000049A4 case 3
.text:0000000000004B44                 mov     r12, [rbx+8]
.text:0000000000004B48                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004B4F                 mov     rbx, [rbx]
.text:0000000000004B52                 mov     edx, 5          ; category
.text:0000000000004B57                 xor     edi, edi        ; domainname
.text:0000000000004B59                 call    _dcgettext
.text:0000000000004B5E                 add     rsp, 28h
.text:0000000000004B62                 mov     r9, r13
.text:0000000000004B65                 mov     r8, r12
.text:0000000000004B68                 mov     rcx, rbx
.text:0000000000004B6B                 mov     rdi, rbp
.text:0000000000004B6E                 mov     rdx, rax
.text:0000000000004B71                 pop     rbx
.text:0000000000004B72                 pop     rbp
.text:0000000000004B73                 pop     r12
.text:0000000000004B75                 pop     r13
.text:0000000000004B77                 pop     r14
.text:0000000000004B79                 pop     r15
.text:0000000000004B7B                 mov     esi, 1
.text:0000000000004B80                 xor     eax, eax
.text:0000000000004B82                 jmp     ___fprintf_chk
.text:0000000000004B82 ; ---------------------------------------------------------------------------
.text:0000000000004B87                 align 10h
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B90                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004B90                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000049A4 case 4
.text:0000000000004B97                 mov     edx, 5          ; category
.text:0000000000004B9C                 xor     edi, edi        ; domainname
.text:0000000000004B9E                 mov     r14, [rbx+18h]
.text:0000000000004BA2                 mov     r13, [rbx+10h]
.text:0000000000004BA6                 mov     r12, [rbx+8]
.text:0000000000004BAA                 mov     rbx, [rbx]
.text:0000000000004BAD                 call    _dcgettext
.text:0000000000004BB2                 sub     rsp, 8
.text:0000000000004BB6
.text:0000000000004BB6 loc_4BB6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004BB6                 push    r14
.text:0000000000004BB8                 mov     rdx, rax
.text:0000000000004BBB                 mov     r9, r13
.text:0000000000004BBE                 mov     r8, r12
.text:0000000000004BC1                 mov     rcx, rbx
.text:0000000000004BC4                 mov     rdi, rbp
.text:0000000000004BC7                 mov     esi, 1
.text:0000000000004BCC                 xor     eax, eax
.text:0000000000004BCE                 call    ___fprintf_chk
.text:0000000000004BD3                 pop     rax
.text:0000000000004BD4                 pop     rdx
.text:0000000000004BD5                 add     rsp, 28h
.text:0000000000004BD9                 pop     rbx
.text:0000000000004BDA                 pop     rbp
.text:0000000000004BDB                 pop     r12
.text:0000000000004BDD                 pop     r13
.text:0000000000004BDF                 pop     r14
.text:0000000000004BE1                 pop     r15
.text:0000000000004BE3                 retn
.text:0000000000004BE3 ; ---------------------------------------------------------------------------
.text:0000000000004BE4                 align 8
.text:0000000000004BE8
.text:0000000000004BE8 loc_4BE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BE8                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004BE8                 mov     r15, [rbx+20h]  ; jumptable 00000000000049A4 case 5
.text:0000000000004BEC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004BF3                 mov     edx, 5          ; category
.text:0000000000004BF8                 xor     edi, edi        ; domainname
.text:0000000000004BFA                 mov     r14, [rbx+18h]
.text:0000000000004BFE                 mov     r13, [rbx+10h]
.text:0000000000004C02                 mov     r12, [rbx+8]
.text:0000000000004C06                 mov     rbx, [rbx]
.text:0000000000004C09                 call    _dcgettext
.text:0000000000004C0E                 push    r15
.text:0000000000004C10                 jmp     short loc_4BB6
.text:0000000000004C10 ; ---------------------------------------------------------------------------
.text:0000000000004C12                 align 8
.text:0000000000004C18
.text:0000000000004C18 loc_4C18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C18                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004C18                 mov     r8, [rbx+8]     ; jumptable 00000000000049A4 case 6
.text:0000000000004C1C                 mov     r12, [rbx+28h]
.text:0000000000004C20                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004C27                 mov     r15, [rbx+20h]
.text:0000000000004C2B                 mov     r14, [rbx+18h]
.text:0000000000004C2F                 mov     edx, 5          ; category
.text:0000000000004C34                 mov     r13, [rbx+10h]
.text:0000000000004C38                 xor     edi, edi        ; domainname
.text:0000000000004C3A                 mov     rbx, [rbx]
.text:0000000000004C3D                 mov     [rsp+58h+var_58], r8
.text:0000000000004C41                 call    _dcgettext
.text:0000000000004C46                 sub     rsp, 8
.text:0000000000004C4A                 mov     r9, r13
.text:0000000000004C4D                 push    r12
.text:0000000000004C4F                 push    r15
.text:0000000000004C51                 push    r14
.text:0000000000004C53
.text:0000000000004C53 loc_4C53:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004C53                 mov     r8, [rsp+78h+var_58]
.text:0000000000004C58                 mov     rcx, rbx
.text:0000000000004C5B                 mov     rdx, rax
.text:0000000000004C5E                 mov     rdi, rbp
.text:0000000000004C61                 mov     esi, 1
.text:0000000000004C66                 xor     eax, eax
.text:0000000000004C68                 call    ___fprintf_chk
.text:0000000000004C6D                 add     rsp, 20h
.text:0000000000004C71                 add     rsp, 28h
.text:0000000000004C75                 pop     rbx
.text:0000000000004C76                 pop     rbp
.text:0000000000004C77                 pop     r12
.text:0000000000004C79                 pop     r13
.text:0000000000004C7B                 pop     r14
.text:0000000000004C7D                 pop     r15
.text:0000000000004C7F                 retn
.text:0000000000004C80 ; ---------------------------------------------------------------------------
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C80                                         ; DATA XREF: .rodata:jpt_49A4↓o
.text:0000000000004C80                 mov     r9, [rbx+10h]   ; jumptable 00000000000049A4 case 7
.text:0000000000004C84                 mov     r13, [rbx+30h]
.text:0000000000004C88                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004C8F                 mov     r12, [rbx+28h]
.text:0000000000004C93                 mov     r15, [rbx+20h]
.text:0000000000004C97                 mov     edx, 5          ; category
.text:0000000000004C9C                 mov     r14, [rbx+18h]
.text:0000000000004CA0                 mov     r8, [rbx+8]
.text:0000000000004CA4                 xor     edi, edi        ; domainname
.text:0000000000004CA6                 mov     [rsp+58h+var_50], r9
.text:0000000000004CAB                 mov     rbx, [rbx]
.text:0000000000004CAE                 mov     [rsp+58h+var_58], r8
.text:0000000000004CB2                 call    _dcgettext
.text:0000000000004CB7                 push    r13
.text:0000000000004CB9                 push    r12
.text:0000000000004CBB                 push    r15
.text:0000000000004CBD                 push    r14
.text:0000000000004CBF                 mov     r9, [rsp+78h+var_50]
.text:0000000000004CC4                 jmp     short loc_4C53
.text:0000000000004CC4 ; ---------------------------------------------------------------------------
.text:0000000000004CC6                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 def_49A4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004CD0                 mov     r10, [rbx+40h]  ; jumptable 00000000000049A4 default case
.text:0000000000004CD4                 mov     r9, [rbx+38h]
.text:0000000000004CD8                 mov     edx, 5
.text:0000000000004CDD                 mov     rax, [rbx+10h]
.text:0000000000004CE1                 mov     r8, [rbx+8]
.text:0000000000004CE5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004CEC                 mov     r13, [rbx+30h]
.text:0000000000004CF0                 mov     r12, [rbx+28h]
.text:0000000000004CF4                 mov     r15, [rbx+20h]
.text:0000000000004CF8                 mov     r14, [rbx+18h]
.text:0000000000004CFC                 mov     [rsp+58h+var_40], r10
.text:0000000000004D01                 mov     [rsp+58h+var_48], r9
.text:0000000000004D06                 mov     [rsp+58h+var_58], rax
.text:0000000000004D0A                 mov     [rsp+58h+var_50], r8
.text:0000000000004D0F                 mov     rbx, [rbx]
.text:0000000000004D12                 jmp     loc_4AA2
.text:0000000000004D12 ; } // starts at 4900
.text:0000000000004D12 version_etc_arn endp
.text:0000000000004D12
.text:0000000000004D12 ; ---------------------------------------------------------------------------
.text:0000000000004D17                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20 ; Attributes: info_from_lumina
.text:0000000000004D20
.text:0000000000004D20 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004D20                 public version_etc_ar
.text:0000000000004D20 version_etc_ar  proc near
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 xor     r9d, r9d
.text:0000000000004D23                 cmp     qword ptr [r8], 0
.text:0000000000004D27                 jz      short loc_4D3B
.text:0000000000004D29                 nop     dword ptr [rax+00000000h]
.text:0000000000004D30
.text:0000000000004D30 loc_4D30:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004D30                 add     r9, 1
.text:0000000000004D34                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004D39                 jnz     short loc_4D30
.text:0000000000004D3B
.text:0000000000004D3B loc_4D3B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004D3B                 jmp     version_etc_arn
.text:0000000000004D3B ; } // starts at 4D20
.text:0000000000004D3B version_etc_ar  endp
.text:0000000000004D3B
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40 ; Attributes: info_from_lumina
.text:0000000000004D40
.text:0000000000004D40 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004D40                 public version_etc_va
.text:0000000000004D40 version_etc_va  proc near
.text:0000000000004D40
.text:0000000000004D40 authtab         = qword ptr -68h
.text:0000000000004D40 var_10          = qword ptr -10h
.text:0000000000004D40
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 sub     rsp, 68h
.text:0000000000004D44                 mov     r10, r8
.text:0000000000004D47                 xor     r9d, r9d
.text:0000000000004D4A                 mov     rax, fs:28h
.text:0000000000004D53                 mov     [rsp+68h+var_10], rax
.text:0000000000004D58                 xor     eax, eax
.text:0000000000004D5A                 mov     r8, rsp
.text:0000000000004D5D                 nop     dword ptr [rax]
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004D60                 mov     eax, [r10]
.text:0000000000004D63                 cmp     eax, 2Fh ; '/'
.text:0000000000004D66                 ja      short loc_4DAA
.text:0000000000004D68                 mov     r11d, eax
.text:0000000000004D6B                 add     r11, [r10+10h]
.text:0000000000004D6F                 add     eax, 8
.text:0000000000004D72                 mov     [r10], eax
.text:0000000000004D75
.text:0000000000004D75 loc_4D75:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004D75                 mov     rax, [r11]
.text:0000000000004D78                 test    rax, rax
.text:0000000000004D7B                 mov     [r8+r9*8], rax
.text:0000000000004D7F                 jz      short loc_4D8B
.text:0000000000004D81                 add     r9, 1
.text:0000000000004D85                 cmp     r9, 0Ah
.text:0000000000004D89                 jnz     short loc_4D60
.text:0000000000004D8B
.text:0000000000004D8B loc_4D8B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004D8B                 call    version_etc_arn
.text:0000000000004D90                 mov     rax, [rsp+68h+var_10]
.text:0000000000004D95                 xor     rax, fs:28h
.text:0000000000004D9E                 jnz     short loc_4DA5
.text:0000000000004DA0                 add     rsp, 68h
.text:0000000000004DA4                 retn
.text:0000000000004DA5 ; ---------------------------------------------------------------------------
.text:0000000000004DA5
.text:0000000000004DA5 loc_4DA5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004DA5                 call    ___stack_chk_fail
.text:0000000000004DAA ; ---------------------------------------------------------------------------
.text:0000000000004DAA
.text:0000000000004DAA loc_4DAA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004DAA                 mov     r11, [r10+8]
.text:0000000000004DAE                 lea     rax, [r11+8]
.text:0000000000004DB2                 mov     [r10+8], rax
.text:0000000000004DB6                 jmp     short loc_4D75
.text:0000000000004DB6 ; } // starts at 4D40
.text:0000000000004DB6 version_etc_va  endp
.text:0000000000004DB6
.text:0000000000004DB6 ; ---------------------------------------------------------------------------
.text:0000000000004DB8                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DC0
.text:0000000000004DC0 ; Attributes: info_from_lumina
.text:0000000000004DC0
.text:0000000000004DC0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004DC0                 public version_etc
.text:0000000000004DC0 version_etc     proc near               ; CODE XREF: main+23D↑p
.text:0000000000004DC0
.text:0000000000004DC0 var_C0          = dword ptr -0C0h
.text:0000000000004DC0 var_B8          = qword ptr -0B8h
.text:0000000000004DC0 var_B0          = qword ptr -0B0h
.text:0000000000004DC0 var_A8          = byte ptr -0A8h
.text:0000000000004DC0 var_50          = qword ptr -50h
.text:0000000000004DC0 var_48          = byte ptr -48h
.text:0000000000004DC0 var_28          = qword ptr -28h
.text:0000000000004DC0 var_20          = qword ptr -20h
.text:0000000000004DC0 arg_0           = byte ptr  8
.text:0000000000004DC0
.text:0000000000004DC0 ; __unwind {
.text:0000000000004DC0                 push    rbp
.text:0000000000004DC1                 push    rbx
.text:0000000000004DC2                 mov     r10d, 20h ; ' '
.text:0000000000004DC8                 xor     r11d, r11d
.text:0000000000004DCB                 sub     rsp, 0B8h
.text:0000000000004DD2                 mov     rax, fs:28h
.text:0000000000004DDB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004DE0                 xor     eax, eax
.text:0000000000004DE2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004DEA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004DF2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004DFA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004DFF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004E07                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004E0F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004E14                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004E1C                 xor     r9d, r9d
.text:0000000000004E1F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004E24                 mov     rbp, rax
.text:0000000000004E27                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004E30
.text:0000000000004E30 loc_4E30:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004E30                 cmp     r10d, 2Fh ; '/'
.text:0000000000004E34                 ja      short loc_4E8C
.text:0000000000004E36                 mov     eax, r10d
.text:0000000000004E39                 mov     r11d, 1
.text:0000000000004E3F                 add     r10d, 8
.text:0000000000004E43                 add     rax, rbp
.text:0000000000004E46
.text:0000000000004E46 loc_4E46:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004E46                 mov     rax, [rax]
.text:0000000000004E49                 test    rax, rax
.text:0000000000004E4C                 mov     [r8+r9*8], rax
.text:0000000000004E50                 jz      short loc_4E5C
.text:0000000000004E52                 add     r9, 1
.text:0000000000004E56                 cmp     r9, 0Ah
.text:0000000000004E5A                 jnz     short loc_4E30
.text:0000000000004E5C
.text:0000000000004E5C loc_4E5C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004E5C                 test    r11b, r11b
.text:0000000000004E5F                 jnz     short loc_4E85
.text:0000000000004E61
.text:0000000000004E61 loc_4E61:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004E61                 call    version_etc_arn
.text:0000000000004E66                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004E6B                 xor     rax, fs:28h
.text:0000000000004E74                 jnz     short loc_4E80
.text:0000000000004E76                 add     rsp, 0B8h
.text:0000000000004E7D                 pop     rbx
.text:0000000000004E7E                 pop     rbp
.text:0000000000004E7F                 retn
.text:0000000000004E80 ; ---------------------------------------------------------------------------
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004E80                 call    ___stack_chk_fail
.text:0000000000004E85 ; ---------------------------------------------------------------------------
.text:0000000000004E85
.text:0000000000004E85 loc_4E85:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004E85                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004E8A                 jmp     short loc_4E61
.text:0000000000004E8C ; ---------------------------------------------------------------------------
.text:0000000000004E8C
.text:0000000000004E8C loc_4E8C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004E8C                 mov     rax, rbx
.text:0000000000004E8F                 add     rbx, 8
.text:0000000000004E93                 jmp     short loc_4E46
.text:0000000000004E93 ; } // starts at 4DC0
.text:0000000000004E93 version_etc     endp
.text:0000000000004E93
.text:0000000000004E93 ; ---------------------------------------------------------------------------
.text:0000000000004E95                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0 ; Attributes: info_from_lumina
.text:0000000000004EA0
.text:0000000000004EA0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004EA0                 public emit_bug_reporting_address
.text:0000000000004EA0 emit_bug_reporting_address proc near
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 push    rbx
.text:0000000000004EA1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004EA8                 mov     edx, 5          ; category
.text:0000000000004EAD                 xor     edi, edi        ; domainname
.text:0000000000004EAF                 call    _dcgettext
.text:0000000000004EB4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004EBB                 mov     rsi, rax
.text:0000000000004EBE                 mov     edi, 1
.text:0000000000004EC3                 xor     eax, eax
.text:0000000000004EC5                 call    ___printf_chk
.text:0000000000004ECA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004ED1                 mov     edx, 5          ; category
.text:0000000000004ED6                 xor     edi, edi        ; domainname
.text:0000000000004ED8                 call    _dcgettext
.text:0000000000004EDD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004EE4                 lea     rdx, unk_60F7
.text:0000000000004EEB                 mov     rsi, rax
.text:0000000000004EEE                 mov     edi, 1
.text:0000000000004EF3                 xor     eax, eax
.text:0000000000004EF5                 call    ___printf_chk
.text:0000000000004EFA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F01                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004F08                 xor     edi, edi        ; domainname
.text:0000000000004F0A                 mov     edx, 5          ; category
.text:0000000000004F0F                 call    _dcgettext
.text:0000000000004F14                 mov     rsi, rbx        ; stream
.text:0000000000004F17                 mov     rdi, rax        ; s
.text:0000000000004F1A                 pop     rbx
.text:0000000000004F1B                 jmp     _fputs_unlocked
.text:0000000000004F1B ; } // starts at 4EA0
.text:0000000000004F1B emit_bug_reporting_address endp
.text:0000000000004F1B
.text:0000000000004F20
.text:0000000000004F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F20
.text:0000000000004F20
.text:0000000000004F20                 public xmalloc
.text:0000000000004F20 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004F20                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004F20 ; __unwind {
.text:0000000000004F20                 push    rbx
.text:0000000000004F21                 mov     rbx, rdi
.text:0000000000004F24                 call    _malloc
.text:0000000000004F29                 test    rax, rax
.text:0000000000004F2C                 jnz     short loc_4F33
.text:0000000000004F2E                 test    rbx, rbx
.text:0000000000004F31                 jnz     short loc_4F35
.text:0000000000004F33
.text:0000000000004F33 loc_4F33:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004F33                 pop     rbx
.text:0000000000004F34                 retn
.text:0000000000004F35 ; ---------------------------------------------------------------------------
.text:0000000000004F35
.text:0000000000004F35 loc_4F35:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004F35                 call    xalloc_die
.text:0000000000004F35 ; } // starts at 4F20
.text:0000000000004F35 xmalloc         endp
.text:0000000000004F35
.text:0000000000004F35 ; ---------------------------------------------------------------------------
.text:0000000000004F3A                 align 20h
.text:0000000000004F40
.text:0000000000004F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F40
.text:0000000000004F40 ; Attributes: info_from_lumina
.text:0000000000004F40
.text:0000000000004F40 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004F40                 public xnmalloc
.text:0000000000004F40 xnmalloc        proc near
.text:0000000000004F40 ; __unwind {
.text:0000000000004F40                 mov     rax, rdi
.text:0000000000004F43                 mul     rsi
.text:0000000000004F46                 mov     rdi, rax
.text:0000000000004F49                 seto    al
.text:0000000000004F4C                 test    rdi, rdi
.text:0000000000004F4F                 js      short loc_4F5B
.text:0000000000004F51                 movzx   eax, al
.text:0000000000004F54                 test    rax, rax
.text:0000000000004F57                 jnz     short loc_4F5B
.text:0000000000004F59                 jmp     short xmalloc
.text:0000000000004F5B ; ---------------------------------------------------------------------------
.text:0000000000004F5B
.text:0000000000004F5B loc_4F5B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004F5B                                         ; xnmalloc+17↑j
.text:0000000000004F5B                 sub     rsp, 8
.text:0000000000004F5F                 call    xalloc_die
.text:0000000000004F5F ; } // starts at 4F40
.text:0000000000004F5F xnmalloc        endp
.text:0000000000004F5F
.text:0000000000004F5F ; ---------------------------------------------------------------------------
.text:0000000000004F64                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70                 public xcharalloc
.text:0000000000004F70 xcharalloc      proc near
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 jmp     short xmalloc
.text:0000000000004F70 ; } // starts at 4F70
.text:0000000000004F70 xcharalloc      endp
.text:0000000000004F70
.text:0000000000004F70 ; ---------------------------------------------------------------------------
.text:0000000000004F72                 align 20h
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80 ; Attributes: info_from_lumina
.text:0000000000004F80
.text:0000000000004F80 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004F80                 public xrealloc
.text:0000000000004F80 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004F80                                         ; quotearg_n_options+182↑p ...
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 test    rsi, rsi
.text:0000000000004F83                 push    rbx
.text:0000000000004F84                 mov     rbx, rsi
.text:0000000000004F87                 jnz     short loc_4F8E
.text:0000000000004F89                 test    rdi, rdi
.text:0000000000004F8C                 jnz     short loc_4FA8
.text:0000000000004F8E
.text:0000000000004F8E loc_4F8E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004F8E                 mov     rsi, rbx        ; size
.text:0000000000004F91                 call    _realloc
.text:0000000000004F96                 test    rax, rax
.text:0000000000004F99                 jnz     short loc_4FA0
.text:0000000000004F9B                 test    rbx, rbx
.text:0000000000004F9E                 jnz     short loc_4FB1
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004FA0                 pop     rbx
.text:0000000000004FA1                 retn
.text:0000000000004FA1 ; ---------------------------------------------------------------------------
.text:0000000000004FA2                 align 8
.text:0000000000004FA8
.text:0000000000004FA8 loc_4FA8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004FA8                 call    _free
.text:0000000000004FAD                 xor     eax, eax
.text:0000000000004FAF                 pop     rbx
.text:0000000000004FB0                 retn
.text:0000000000004FB1 ; ---------------------------------------------------------------------------
.text:0000000000004FB1
.text:0000000000004FB1 loc_4FB1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004FB1                 call    xalloc_die
.text:0000000000004FB1 ; } // starts at 4F80
.text:0000000000004FB1 xrealloc        endp
.text:0000000000004FB1
.text:0000000000004FB1 ; ---------------------------------------------------------------------------
.text:0000000000004FB6                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0 ; Attributes: info_from_lumina
.text:0000000000004FC0
.text:0000000000004FC0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004FC0                 public xnrealloc
.text:0000000000004FC0 xnrealloc       proc near
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 mov     rax, rsi
.text:0000000000004FC3                 mul     rdx
.text:0000000000004FC6                 mov     rsi, rax
.text:0000000000004FC9                 seto    al
.text:0000000000004FCC                 test    rsi, rsi
.text:0000000000004FCF                 js      short loc_4FDB
.text:0000000000004FD1                 movzx   eax, al
.text:0000000000004FD4                 test    rax, rax
.text:0000000000004FD7                 jnz     short loc_4FDB
.text:0000000000004FD9                 jmp     short xrealloc
.text:0000000000004FDB ; ---------------------------------------------------------------------------
.text:0000000000004FDB
.text:0000000000004FDB loc_4FDB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004FDB                                         ; xnrealloc+17↑j
.text:0000000000004FDB                 sub     rsp, 8
.text:0000000000004FDF                 call    xalloc_die
.text:0000000000004FDF ; } // starts at 4FC0
.text:0000000000004FDF xnrealloc       endp
.text:0000000000004FDF
.text:0000000000004FDF ; ---------------------------------------------------------------------------
.text:0000000000004FE4                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FF0
.text:0000000000004FF0 ; Attributes: info_from_lumina
.text:0000000000004FF0
.text:0000000000004FF0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004FF0                 public x2nrealloc
.text:0000000000004FF0 x2nrealloc      proc near
.text:0000000000004FF0 ; __unwind {
.text:0000000000004FF0                 test    rdi, rdi
.text:0000000000004FF3                 mov     r9, rdx
.text:0000000000004FF6                 mov     rcx, [rsi]
.text:0000000000004FF9                 jz      short loc_5030
.text:0000000000004FFB                 xor     edx, edx
.text:0000000000004FFD                 mov     rax, 5555555555555554h
.text:0000000000005007                 div     r9
.text:000000000000500A                 cmp     rax, rcx
.text:000000000000500D                 jbe     short loc_504B
.text:000000000000500F                 mov     rax, rcx
.text:0000000000005012                 shr     rax, 1
.text:0000000000005015                 lea     rcx, [rax+rcx+1]
.text:000000000000501A
.text:000000000000501A loc_501A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000501A                 mov     [rsi], rcx
.text:000000000000501D                 imul    rcx, r9
.text:0000000000005021                 mov     rsi, rcx
.text:0000000000005024                 jmp     xrealloc
.text:0000000000005024 ; ---------------------------------------------------------------------------
.text:0000000000005029                 align 10h
.text:0000000000005030
.text:0000000000005030 loc_5030:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005030                 test    rcx, rcx
.text:0000000000005033                 jz      short loc_5058
.text:0000000000005035
.text:0000000000005035 loc_5035:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005035                 mov     rax, rcx
.text:0000000000005038                 mul     r9
.text:000000000000503B                 seto    dl
.text:000000000000503E                 test    rax, rax
.text:0000000000005041                 movzx   edx, dl
.text:0000000000005044                 js      short loc_504B
.text:0000000000005046                 test    rdx, rdx
.text:0000000000005049                 jz      short loc_501A
.text:000000000000504B
.text:000000000000504B loc_504B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000504B                                         ; x2nrealloc+54↑j
.text:000000000000504B                 sub     rsp, 8
.text:000000000000504F                 call    xalloc_die
.text:000000000000504F ; ---------------------------------------------------------------------------
.text:0000000000005054                 align 8
.text:0000000000005058
.text:0000000000005058 loc_5058:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005058                 xor     edx, edx
.text:000000000000505A                 mov     eax, 80h
.text:000000000000505F                 xor     r8d, r8d
.text:0000000000005062                 div     r9
.text:0000000000005065                 test    rax, rax
.text:0000000000005068                 setz    r8b
.text:000000000000506C                 lea     rcx, [r8+rax]
.text:0000000000005070                 jmp     short loc_5035
.text:0000000000005070 ; } // starts at 4FF0
.text:0000000000005070 x2nrealloc      endp
.text:0000000000005070
.text:0000000000005070 ; ---------------------------------------------------------------------------
.text:0000000000005072                 align 20h
.text:0000000000005080
.text:0000000000005080 ; =============== S U B R O U T I N E =======================================
.text:0000000000005080
.text:0000000000005080 ; Attributes: info_from_lumina
.text:0000000000005080
.text:0000000000005080 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005080                 public x2realloc
.text:0000000000005080 x2realloc       proc near               ; CODE XREF: readlinebuffer_delim+6C↑p
.text:0000000000005080 ; __unwind {
.text:0000000000005080                 test    rdi, rdi
.text:0000000000005083                 mov     rax, [rsi]
.text:0000000000005086                 jz      short loc_50B0
.text:0000000000005088                 mov     rdx, 5555555555555553h
.text:0000000000005092                 cmp     rax, rdx
.text:0000000000005095                 ja      short loc_50C1
.text:0000000000005097                 mov     rdx, rax
.text:000000000000509A                 shr     rdx, 1
.text:000000000000509D                 lea     rax, [rdx+rax+1]
.text:00000000000050A2
.text:00000000000050A2 loc_50A2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000050A2                 mov     [rsi], rax
.text:00000000000050A5                 mov     rsi, rax
.text:00000000000050A8                 jmp     xrealloc
.text:00000000000050A8 ; ---------------------------------------------------------------------------
.text:00000000000050AD                 align 10h
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000050B0                 test    rax, rax
.text:00000000000050B3                 mov     edx, 80h
.text:00000000000050B8                 cmovz   rax, rdx
.text:00000000000050BC                 test    rax, rax
.text:00000000000050BF                 jns     short loc_50A2
.text:00000000000050C1
.text:00000000000050C1 loc_50C1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000050C1                 sub     rsp, 8
.text:00000000000050C5                 call    xalloc_die
.text:00000000000050C5 ; } // starts at 5080
.text:00000000000050C5 x2realloc       endp
.text:00000000000050C5
.text:00000000000050C5 ; ---------------------------------------------------------------------------
.text:00000000000050CA                 align 10h
.text:00000000000050D0
.text:00000000000050D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050D0
.text:00000000000050D0
.text:00000000000050D0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000050D0                 public xzalloc
.text:00000000000050D0 xzalloc         proc near
.text:00000000000050D0 ; __unwind {
.text:00000000000050D0                 push    rbx
.text:00000000000050D1                 mov     rbx, rdi
.text:00000000000050D4                 call    xmalloc
.text:00000000000050D9                 mov     rdx, rbx        ; n
.text:00000000000050DC                 xor     esi, esi        ; c
.text:00000000000050DE                 mov     rdi, rax        ; s
.text:00000000000050E1                 pop     rbx
.text:00000000000050E2                 jmp     _memset
.text:00000000000050E2 ; } // starts at 50D0
.text:00000000000050E2 xzalloc         endp
.text:00000000000050E2
.text:00000000000050E2 ; ---------------------------------------------------------------------------
.text:00000000000050E7                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0 ; Attributes: info_from_lumina
.text:00000000000050F0
.text:00000000000050F0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000050F0                 public xcalloc
.text:00000000000050F0 xcalloc         proc near
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 mov     rax, rdi
.text:00000000000050F3                 sub     rsp, 8
.text:00000000000050F7                 mul     rsi
.text:00000000000050FA                 seto    dl
.text:00000000000050FD                 test    rax, rax
.text:0000000000005100                 js      short loc_5119
.text:0000000000005102                 movzx   edx, dl
.text:0000000000005105                 test    rdx, rdx
.text:0000000000005108                 jnz     short loc_5119
.text:000000000000510A                 call    _calloc
.text:000000000000510F                 test    rax, rax
.text:0000000000005112                 jz      short loc_5119
.text:0000000000005114                 add     rsp, 8
.text:0000000000005118                 retn
.text:0000000000005119 ; ---------------------------------------------------------------------------
.text:0000000000005119
.text:0000000000005119 loc_5119:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005119                                         ; xcalloc+18↑j ...
.text:0000000000005119                 call    xalloc_die
.text:0000000000005119 ; } // starts at 50F0
.text:0000000000005119 xcalloc         endp
.text:0000000000005119
.text:0000000000005119 ; ---------------------------------------------------------------------------
.text:000000000000511E                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120 ; Attributes: info_from_lumina
.text:0000000000005120
.text:0000000000005120 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005120                 public xmemdup
.text:0000000000005120 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005120                                         ; xstrdup+11↓j
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 push    rbp
.text:0000000000005121                 push    rbx
.text:0000000000005122                 mov     rbp, rdi
.text:0000000000005125                 mov     rdi, rsi
.text:0000000000005128                 mov     rbx, rsi
.text:000000000000512B                 sub     rsp, 8
.text:000000000000512F                 call    xmalloc
.text:0000000000005134                 add     rsp, 8
.text:0000000000005138                 mov     rdx, rbx        ; n
.text:000000000000513B                 mov     rsi, rbp        ; src
.text:000000000000513E                 pop     rbx
.text:000000000000513F                 pop     rbp
.text:0000000000005140                 mov     rdi, rax        ; dest
.text:0000000000005143                 jmp     _memcpy
.text:0000000000005143 ; } // starts at 5120
.text:0000000000005143 xmemdup         endp
.text:0000000000005143
.text:0000000000005143 ; ---------------------------------------------------------------------------
.text:0000000000005148                 align 10h
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150
.text:0000000000005150 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005150                 public xstrdup
.text:0000000000005150 xstrdup         proc near
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 push    rbx
.text:0000000000005151                 mov     rbx, rdi
.text:0000000000005154                 call    _strlen
.text:0000000000005159                 mov     rdi, rbx        ; src
.text:000000000000515C                 lea     rsi, [rax+1]    ; n
.text:0000000000005160                 pop     rbx
.text:0000000000005161                 jmp     short xmemdup
.text:0000000000005161 ; } // starts at 5150
.text:0000000000005161 xstrdup         endp
.text:0000000000005161
.text:0000000000005161 ; ---------------------------------------------------------------------------
.text:0000000000005163                 align 10h
.text:0000000000005170
.text:0000000000005170 ; =============== S U B R O U T I N E =======================================
.text:0000000000005170
.text:0000000000005170 ; Attributes: noreturn info_from_lumina
.text:0000000000005170
.text:0000000000005170 ; void __cdecl xalloc_die()
.text:0000000000005170                 public xalloc_die
.text:0000000000005170 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4136↑p
.text:0000000000005170                                         ; xmalloc:loc_4F35↑p ...
.text:0000000000005170 ; __unwind {
.text:0000000000005170                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005177                 sub     rsp, 8
.text:000000000000517B                 mov     edx, 5          ; category
.text:0000000000005180                 xor     edi, edi        ; domainname
.text:0000000000005182                 call    _dcgettext
.text:0000000000005187                 mov     edi, cs:exit_failure ; status
.text:000000000000518D                 lea     rdx, format+4   ; format
.text:0000000000005194                 mov     rcx, rax
.text:0000000000005197                 xor     esi, esi        ; errnum
.text:0000000000005199                 xor     eax, eax
.text:000000000000519B                 call    _error
.text:00000000000051A0                 call    _abort
.text:00000000000051A0 ; } // starts at 5170
.text:00000000000051A0 xalloc_die      endp
.text:00000000000051A0
.text:00000000000051A0 ; ---------------------------------------------------------------------------
.text:00000000000051A5                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0
.text:00000000000051B0 ; __int64 __fastcall collate_error(int errnum)
.text:00000000000051B0 collate_error   proc near               ; CODE XREF: xmemcoll+33↓p
.text:00000000000051B0                                         ; xmemcoll0+35↓p
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 push    r14
.text:00000000000051B2                 push    r13
.text:00000000000051B4                 mov     r14d, edi
.text:00000000000051B7                 push    r12
.text:00000000000051B9                 push    rbp
.text:00000000000051BA                 mov     r12, rdx
.text:00000000000051BD                 push    rbx
.text:00000000000051BE                 mov     rbx, rsi
.text:00000000000051C1                 lea     rsi, aStringComparis ; "string comparison failed"
.text:00000000000051C8                 mov     edx, 5          ; category
.text:00000000000051CD                 xor     edi, edi        ; domainname
.text:00000000000051CF                 mov     r13, r8
.text:00000000000051D2                 mov     rbp, rcx
.text:00000000000051D5                 call    _dcgettext
.text:00000000000051DA                 mov     esi, r14d       ; errnum
.text:00000000000051DD                 mov     rdx, rax        ; format
.text:00000000000051E0                 xor     edi, edi        ; status
.text:00000000000051E2                 xor     eax, eax
.text:00000000000051E4                 call    _error
.text:00000000000051E9                 lea     rsi, aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:00000000000051F0                 mov     edx, 5          ; category
.text:00000000000051F5                 xor     edi, edi        ; domainname
.text:00000000000051F7                 call    _dcgettext
.text:00000000000051FC                 xor     esi, esi        ; errnum
.text:00000000000051FE                 mov     rdx, rax        ; format
.text:0000000000005201                 xor     edi, edi        ; status
.text:0000000000005203                 xor     eax, eax
.text:0000000000005205                 call    _error
.text:000000000000520A                 mov     rcx, r13
.text:000000000000520D                 mov     rdx, rbp
.text:0000000000005210                 mov     esi, 8
.text:0000000000005215                 mov     edi, 1
.text:000000000000521A                 call    quotearg_n_style_mem
.text:000000000000521F                 mov     rcx, r12
.text:0000000000005222                 mov     rdx, rbx
.text:0000000000005225                 mov     esi, 8
.text:000000000000522A                 xor     edi, edi
.text:000000000000522C                 mov     rbp, rax
.text:000000000000522F                 call    quotearg_n_style_mem
.text:0000000000005234                 lea     rsi, aTheStringsComp ; "The strings compared were %s and %s."
.text:000000000000523B                 mov     rbx, rax
.text:000000000000523E                 mov     edx, 5          ; category
.text:0000000000005243                 xor     edi, edi        ; domainname
.text:0000000000005245                 call    _dcgettext
.text:000000000000524A                 mov     r8, rbp
.text:000000000000524D                 mov     rcx, rbx
.text:0000000000005250                 mov     edi, cs:exit_failure ; status
.text:0000000000005256                 pop     rbx
.text:0000000000005257                 pop     rbp
.text:0000000000005258                 pop     r12
.text:000000000000525A                 pop     r13
.text:000000000000525C                 pop     r14
.text:000000000000525E                 mov     rdx, rax        ; format
.text:0000000000005261                 xor     esi, esi        ; errnum
.text:0000000000005263                 xor     eax, eax
.text:0000000000005265                 jmp     _error
.text:0000000000005265 ; } // starts at 51B0
.text:0000000000005265 collate_error   endp
.text:0000000000005265
.text:0000000000005265 ; ---------------------------------------------------------------------------
.text:000000000000526A                 align 10h
.text:0000000000005270
.text:0000000000005270 ; =============== S U B R O U T I N E =======================================
.text:0000000000005270
.text:0000000000005270
.text:0000000000005270                 public xmemcoll
.text:0000000000005270 xmemcoll        proc near               ; CODE XREF: check_order_isra_1_part_2:loc_1D50↑p
.text:0000000000005270                                         ; compare_files+3E6↑p
.text:0000000000005270 ; __unwind {
.text:0000000000005270                 push    r14
.text:0000000000005272                 push    r13
.text:0000000000005274                 mov     r13, rcx
.text:0000000000005277                 push    r12
.text:0000000000005279                 push    rbp
.text:000000000000527A                 mov     r12, rdx
.text:000000000000527D                 push    rbx
.text:000000000000527E                 mov     rbp, rsi
.text:0000000000005281                 mov     rbx, rdi
.text:0000000000005284                 call    memcoll
.text:0000000000005289                 mov     r14d, eax
.text:000000000000528C                 call    ___errno_location
.text:0000000000005291                 mov     edi, [rax]      ; errnum
.text:0000000000005293                 test    edi, edi
.text:0000000000005295                 jz      short loc_52A8
.text:0000000000005297                 mov     r8, r13
.text:000000000000529A                 mov     rcx, r12
.text:000000000000529D                 mov     rdx, rbp
.text:00000000000052A0                 mov     rsi, rbx
.text:00000000000052A3                 call    collate_error
.text:00000000000052A8
.text:00000000000052A8 loc_52A8:                               ; CODE XREF: xmemcoll+25↑j
.text:00000000000052A8                 pop     rbx
.text:00000000000052A9                 mov     eax, r14d
.text:00000000000052AC                 pop     rbp
.text:00000000000052AD                 pop     r12
.text:00000000000052AF                 pop     r13
.text:00000000000052B1                 pop     r14
.text:00000000000052B3                 retn
.text:00000000000052B3 ; } // starts at 5270
.text:00000000000052B3 xmemcoll        endp
.text:00000000000052B3
.text:00000000000052B3 ; ---------------------------------------------------------------------------
.text:00000000000052B4                 align 20h
.text:00000000000052C0
.text:00000000000052C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052C0
.text:00000000000052C0
.text:00000000000052C0                 public xmemcoll0
.text:00000000000052C0 xmemcoll0       proc near
.text:00000000000052C0 ; __unwind {
.text:00000000000052C0                 push    r14
.text:00000000000052C2                 push    r13
.text:00000000000052C4                 mov     r14, rcx
.text:00000000000052C7                 push    r12
.text:00000000000052C9                 push    rbp
.text:00000000000052CA                 mov     r12, rdx
.text:00000000000052CD                 push    rbx
.text:00000000000052CE                 mov     rbp, rdi
.text:00000000000052D1                 mov     rbx, rsi
.text:00000000000052D4                 call    memcoll0
.text:00000000000052D9                 mov     r13d, eax
.text:00000000000052DC                 call    ___errno_location
.text:00000000000052E1                 mov     edi, [rax]      ; errnum
.text:00000000000052E3                 test    edi, edi
.text:00000000000052E5                 jz      short loc_52FA
.text:00000000000052E7                 lea     rdx, [rbx-1]
.text:00000000000052EB                 lea     r8, [r14-1]
.text:00000000000052EF                 mov     rcx, r12
.text:00000000000052F2                 mov     rsi, rbp
.text:00000000000052F5                 call    collate_error
.text:00000000000052FA
.text:00000000000052FA loc_52FA:                               ; CODE XREF: xmemcoll0+25↑j
.text:00000000000052FA                 pop     rbx
.text:00000000000052FB                 mov     eax, r13d
.text:00000000000052FE                 pop     rbp
.text:00000000000052FF                 pop     r12
.text:0000000000005301                 pop     r13
.text:0000000000005303                 pop     r14
.text:0000000000005305                 retn
.text:0000000000005305 ; } // starts at 52C0
.text:0000000000005305 xmemcoll0       endp
.text:0000000000005305
.text:0000000000005305 ; ---------------------------------------------------------------------------
.text:0000000000005306                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310 ; Attributes: info_from_lumina
.text:0000000000005310
.text:0000000000005310 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005310                 public rpl_fclose
.text:0000000000005310 rpl_fclose      proc near               ; CODE XREF: compare_files+3F5↑p
.text:0000000000005310                                         ; compare_files+407↑p ...
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 push    r12
.text:0000000000005312                 push    rbp
.text:0000000000005313                 push    rbx
.text:0000000000005314                 mov     rbx, rdi
.text:0000000000005317                 call    _fileno
.text:000000000000531C                 test    eax, eax
.text:000000000000531E                 mov     rdi, rbx        ; fp
.text:0000000000005321                 js      short loc_5377
.text:0000000000005323                 call    ___freading
.text:0000000000005328                 test    eax, eax
.text:000000000000532A                 jnz     short loc_5358
.text:000000000000532C
.text:000000000000532C loc_532C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000532C                 mov     rdi, rbx        ; stream
.text:000000000000532F                 call    rpl_fflush
.text:0000000000005334                 test    eax, eax
.text:0000000000005336                 jz      short loc_5374
.text:0000000000005338                 call    ___errno_location
.text:000000000000533D                 mov     r12d, [rax]
.text:0000000000005340                 mov     rdi, rbx        ; stream
.text:0000000000005343                 mov     rbp, rax
.text:0000000000005346                 call    _fclose
.text:000000000000534B                 test    r12d, r12d
.text:000000000000534E                 jnz     short loc_5380
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005350                 pop     rbx
.text:0000000000005351                 pop     rbp
.text:0000000000005352                 pop     r12
.text:0000000000005354                 retn
.text:0000000000005354 ; ---------------------------------------------------------------------------
.text:0000000000005355                 align 8
.text:0000000000005358
.text:0000000000005358 loc_5358:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005358                 mov     rdi, rbx        ; stream
.text:000000000000535B                 call    _fileno
.text:0000000000005360                 xor     esi, esi        ; offset
.text:0000000000005362                 mov     edx, 1          ; whence
.text:0000000000005367                 mov     edi, eax        ; fd
.text:0000000000005369                 call    _lseek
.text:000000000000536E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005372                 jnz     short loc_532C
.text:0000000000005374
.text:0000000000005374 loc_5374:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005374                 mov     rdi, rbx        ; stream
.text:0000000000005377
.text:0000000000005377 loc_5377:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005377                 pop     rbx
.text:0000000000005378                 pop     rbp
.text:0000000000005379                 pop     r12
.text:000000000000537B                 jmp     _fclose
.text:0000000000005380 ; ---------------------------------------------------------------------------
.text:0000000000005380
.text:0000000000005380 loc_5380:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005380                 mov     [rbp+0], r12d
.text:0000000000005384                 mov     eax, 0FFFFFFFFh
.text:0000000000005389                 jmp     short loc_5350
.text:0000000000005389 ; } // starts at 5310
.text:0000000000005389 rpl_fclose      endp
.text:0000000000005389
.text:0000000000005389 ; ---------------------------------------------------------------------------
.text:000000000000538B                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390
.text:0000000000005390 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000005390                 public rpl_fcntl
.text:0000000000005390 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000005390
.text:0000000000005390 var_68          = dword ptr -68h
.text:0000000000005390 var_60          = qword ptr -60h
.text:0000000000005390 var_58          = qword ptr -58h
.text:0000000000005390 var_50          = qword ptr -50h
.text:0000000000005390 var_48          = byte ptr -48h
.text:0000000000005390 var_38          = qword ptr -38h
.text:0000000000005390 var_30          = qword ptr -30h
.text:0000000000005390 var_28          = qword ptr -28h
.text:0000000000005390 var_20          = qword ptr -20h
.text:0000000000005390 arg_0           = byte ptr  8
.text:0000000000005390
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 push    r12
.text:0000000000005392                 push    rbp
.text:0000000000005393                 mov     ebp, edi
.text:0000000000005395                 push    rbx
.text:0000000000005396                 sub     rsp, 50h
.text:000000000000539A                 mov     rax, fs:28h
.text:00000000000053A3                 mov     [rsp+68h+var_50], rax
.text:00000000000053A8                 xor     eax, eax
.text:00000000000053AA                 lea     rax, [rsp+68h+arg_0]
.text:00000000000053AF                 test    esi, esi
.text:00000000000053B1                 mov     [rsp+68h+var_38], rdx
.text:00000000000053B6                 mov     [rsp+68h+var_30], rcx
.text:00000000000053BB                 mov     [rsp+68h+var_28], r8
.text:00000000000053C0                 mov     [rsp+68h+var_60], rax
.text:00000000000053C5                 lea     rax, [rsp+68h+var_48]
.text:00000000000053CA                 mov     [rsp+68h+var_20], r9
.text:00000000000053CF                 mov     [rsp+68h+var_68], 10h
.text:00000000000053D6                 mov     [rsp+68h+var_58], rax
.text:00000000000053DB                 jz      loc_55E2
.text:00000000000053E1                 cmp     esi, 406h
.text:00000000000053E7                 jnz     short loc_5430
.text:00000000000053E9                 mov     rax, [rsp+68h+var_58]
.text:00000000000053EE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:00000000000053F5                 mov     [rsp+68h+var_68], 18h
.text:00000000000053FC                 mov     r12d, [rax+10h]
.text:0000000000005400                 mov     edx, r12d
.text:0000000000005403                 js      loc_5533
.text:0000000000005409                 xor     eax, eax
.text:000000000000540B                 mov     esi, 406h       ; cmd
.text:0000000000005410                 call    _fcntl
.text:0000000000005415                 test    eax, eax
.text:0000000000005417                 mov     ebx, eax
.text:0000000000005419                 js      loc_55A8
.text:000000000000541F
.text:000000000000541F loc_541F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000541F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000005429                 jmp     short loc_5470
.text:0000000000005429 ; ---------------------------------------------------------------------------
.text:000000000000542B                 align 10h
.text:0000000000005430
.text:0000000000005430 loc_5430:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000005430                 cmp     esi, 0Bh
.text:0000000000005433                 jz      short loc_5460
.text:0000000000005435                 jg      short loc_5490
.text:0000000000005437                 cmp     esi, 4
.text:000000000000543A                 jz      loc_5510
.text:0000000000005440                 jg      loc_5500
.text:0000000000005446                 cmp     esi, 2
.text:0000000000005449                 jz      loc_5510
.text:000000000000544F                 jg      short loc_5460
.text:0000000000005451                 cmp     esi, 1
.text:0000000000005454                 jnz     short loc_54B8
.text:0000000000005456                 db      2Eh
.text:0000000000005456                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005460
.text:0000000000005460 loc_5460:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000005460                                         ; rpl_fcntl+BF↑j ...
.text:0000000000005460                 mov     edi, ebp        ; fd
.text:0000000000005462                 xor     eax, eax
.text:0000000000005464                 call    _fcntl
.text:0000000000005469                 mov     ebx, eax
.text:000000000000546B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005470
.text:0000000000005470 loc_5470:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000005470                                         ; rpl_fcntl+147↓j ...
.text:0000000000005470                 mov     rcx, [rsp+68h+var_50]
.text:0000000000005475                 xor     rcx, fs:28h
.text:000000000000547E                 mov     eax, ebx
.text:0000000000005480                 jnz     loc_55DD
.text:0000000000005486                 add     rsp, 50h
.text:000000000000548A                 pop     rbx
.text:000000000000548B                 pop     rbp
.text:000000000000548C                 pop     r12
.text:000000000000548E                 retn
.text:000000000000548E ; ---------------------------------------------------------------------------
.text:000000000000548F                 align 10h
.text:0000000000005490
.text:0000000000005490 loc_5490:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000005490                 cmp     esi, 407h
.text:0000000000005496                 jg      short loc_54E0
.text:0000000000005498                 cmp     esi, 406h
.text:000000000000549E                 jge     short loc_5510
.text:00000000000054A0                 cmp     esi, 401h
.text:00000000000054A6                 jz      short loc_5460
.text:00000000000054A8                 cmp     esi, 402h
.text:00000000000054AE                 jz      short loc_5510
.text:00000000000054B0                 cmp     esi, 400h
.text:00000000000054B6                 jz      short loc_5510
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:00000000000054B8                                         ; rpl_fcntl+164↓j ...
.text:00000000000054B8                 mov     eax, [rsp+68h+var_68]
.text:00000000000054BB                 cmp     eax, 2Fh ; '/'
.text:00000000000054BE                 ja      loc_55FA
.text:00000000000054C4                 add     rax, [rsp+68h+var_58]
.text:00000000000054C9
.text:00000000000054C9 loc_54C9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:00000000000054C9                 mov     rdx, [rax]
.text:00000000000054CC                 mov     edi, ebp        ; fd
.text:00000000000054CE                 xor     eax, eax
.text:00000000000054D0                 call    _fcntl
.text:00000000000054D5                 mov     ebx, eax
.text:00000000000054D7                 jmp     short loc_5470
.text:00000000000054D7 ; ---------------------------------------------------------------------------
.text:00000000000054D9                 align 20h
.text:00000000000054E0
.text:00000000000054E0 loc_54E0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:00000000000054E0                 cmp     esi, 409h
.text:00000000000054E6                 jz      short loc_5510
.text:00000000000054E8                 jl      loc_5460
.text:00000000000054EE                 cmp     esi, 40Ah
.text:00000000000054F4                 jnz     short loc_54B8
.text:00000000000054F6                 jmp     loc_5460
.text:00000000000054F6 ; ---------------------------------------------------------------------------
.text:00000000000054FB                 align 20h
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000005500                 cmp     esi, 9
.text:0000000000005503                 jz      loc_5460
.text:0000000000005509                 jg      short loc_5510
.text:000000000000550B                 cmp     esi, 8
.text:000000000000550E                 jnz     short loc_54B8
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000005510                                         ; rpl_fcntl+B9↑j ...
.text:0000000000005510                 mov     eax, [rsp+68h+var_68]
.text:0000000000005513                 cmp     eax, 2Fh ; '/'
.text:0000000000005516                 ja      loc_5604
.text:000000000000551C                 add     rax, [rsp+68h+var_58]
.text:0000000000005521
.text:0000000000005521 loc_5521:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000005521                 mov     edx, [rax]
.text:0000000000005523                 mov     edi, ebp        ; fd
.text:0000000000005525                 xor     eax, eax
.text:0000000000005527                 call    _fcntl
.text:000000000000552C                 mov     ebx, eax
.text:000000000000552E                 jmp     loc_5470
.text:0000000000005533 ; ---------------------------------------------------------------------------
.text:0000000000005533
.text:0000000000005533 loc_5533:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000005533                 xor     esi, esi        ; cmd
.text:0000000000005535                 xor     eax, eax
.text:0000000000005537                 call    _fcntl
.text:000000000000553C                 test    eax, eax
.text:000000000000553E                 mov     ebx, eax
.text:0000000000005540                 js      loc_5470
.text:0000000000005546                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000554D                 jnz     loc_5470
.text:0000000000005553
.text:0000000000005553 loc_5553:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000005553                 xor     eax, eax
.text:0000000000005555                 mov     esi, 1          ; cmd
.text:000000000000555A                 mov     edi, ebx        ; fd
.text:000000000000555C                 call    _fcntl
.text:0000000000005561                 test    eax, eax
.text:0000000000005563                 js      short loc_5581
.text:0000000000005565                 or      eax, 1
.text:0000000000005568                 mov     esi, 2          ; cmd
.text:000000000000556D                 mov     edi, ebx        ; fd
.text:000000000000556F                 mov     edx, eax
.text:0000000000005571                 xor     eax, eax
.text:0000000000005573                 call    _fcntl
.text:0000000000005578                 cmp     eax, 0FFFFFFFFh
.text:000000000000557B                 jnz     loc_5470
.text:0000000000005581
.text:0000000000005581 loc_5581:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000005581                 call    ___errno_location
.text:0000000000005586                 mov     r12d, [rax]
.text:0000000000005589                 mov     rbp, rax
.text:000000000000558C                 mov     edi, ebx        ; fd
.text:000000000000558E                 call    _close
.text:0000000000005593                 mov     ebx, 0FFFFFFFFh
.text:0000000000005598                 mov     [rbp+0], r12d
.text:000000000000559C                 jmp     loc_5470
.text:000000000000559C ; ---------------------------------------------------------------------------
.text:00000000000055A1                 align 8
.text:00000000000055A8
.text:00000000000055A8 loc_55A8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:00000000000055A8                 call    ___errno_location
.text:00000000000055AD                 cmp     dword ptr [rax], 16h
.text:00000000000055B0                 jnz     loc_541F
.text:00000000000055B6                 xor     esi, esi        ; cmd
.text:00000000000055B8                 xor     eax, eax
.text:00000000000055BA                 mov     edx, r12d
.text:00000000000055BD                 mov     edi, ebp        ; fd
.text:00000000000055BF                 call    _fcntl
.text:00000000000055C4                 test    eax, eax
.text:00000000000055C6                 mov     ebx, eax
.text:00000000000055C8                 js      loc_5470
.text:00000000000055CE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000055D8                 jmp     loc_5553
.text:00000000000055DD ; ---------------------------------------------------------------------------
.text:00000000000055DD
.text:00000000000055DD loc_55DD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:00000000000055DD                 call    ___stack_chk_fail
.text:00000000000055E2 ; ---------------------------------------------------------------------------
.text:00000000000055E2
.text:00000000000055E2 loc_55E2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:00000000000055E2                 mov     rax, [rsp+68h+var_58]
.text:00000000000055E7                 xor     esi, esi        ; cmd
.text:00000000000055E9                 mov     edx, [rax+10h]
.text:00000000000055EC                 xor     eax, eax
.text:00000000000055EE                 call    _fcntl
.text:00000000000055F3                 mov     ebx, eax
.text:00000000000055F5                 jmp     loc_5470
.text:00000000000055FA ; ---------------------------------------------------------------------------
.text:00000000000055FA
.text:00000000000055FA loc_55FA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:00000000000055FA                 mov     rax, [rsp+68h+var_60]
.text:00000000000055FF                 jmp     loc_54C9
.text:0000000000005604 ; ---------------------------------------------------------------------------
.text:0000000000005604
.text:0000000000005604 loc_5604:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000005604                 mov     rax, [rsp+68h+var_60]
.text:0000000000005609                 jmp     loc_5521
.text:0000000000005609 ; } // starts at 5390
.text:0000000000005609 rpl_fcntl       endp
.text:0000000000005609
.text:0000000000005609 ; ---------------------------------------------------------------------------
.text:000000000000560E                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610 ; Attributes: info_from_lumina
.text:0000000000005610
.text:0000000000005610 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005610                 public rpl_fflush
.text:0000000000005610 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 test    rdi, rdi
.text:0000000000005613                 push    rbx
.text:0000000000005614                 mov     rbx, rdi
.text:0000000000005617                 jz      short loc_562A
.text:0000000000005619                 call    ___freading
.text:000000000000561E                 test    eax, eax
.text:0000000000005620                 jz      short loc_562A
.text:0000000000005622                 test    dword ptr [rbx], 100h
.text:0000000000005628                 jnz     short loc_5638
.text:000000000000562A
.text:000000000000562A loc_562A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000562A                                         ; rpl_fflush+10↑j
.text:000000000000562A                 mov     rdi, rbx        ; stream
.text:000000000000562D                 pop     rbx
.text:000000000000562E                 jmp     _fflush
.text:000000000000562E ; ---------------------------------------------------------------------------
.text:0000000000005633                 align 8
.text:0000000000005638
.text:0000000000005638 loc_5638:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005638                 mov     rdi, rbx
.text:000000000000563B                 mov     edx, 1
.text:0000000000005640                 xor     esi, esi
.text:0000000000005642                 call    rpl_fseeko
.text:0000000000005647                 mov     rdi, rbx        ; stream
.text:000000000000564A                 pop     rbx
.text:000000000000564B                 jmp     _fflush
.text:000000000000564B ; } // starts at 5610
.text:000000000000564B rpl_fflush      endp
.text:000000000000564B
.text:0000000000005650
.text:0000000000005650 ; =============== S U B R O U T I N E =======================================
.text:0000000000005650
.text:0000000000005650 ; Attributes: info_from_lumina
.text:0000000000005650
.text:0000000000005650 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005650                 public rpl_fseeko
.text:0000000000005650 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005650 ; __unwind {
.text:0000000000005650                 mov     rax, [rdi+8]
.text:0000000000005654                 cmp     [rdi+10h], rax
.text:0000000000005658                 jz      short loc_5660
.text:000000000000565A
.text:000000000000565A loc_565A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000565A                                         ; rpl_fseeko+1F↓j
.text:000000000000565A                 jmp     _fseeko
.text:000000000000565A ; ---------------------------------------------------------------------------
.text:000000000000565F                 align 20h
.text:0000000000005660
.text:0000000000005660 loc_5660:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005660                 mov     rax, [rdi+20h]
.text:0000000000005664                 cmp     [rdi+28h], rax
.text:0000000000005668                 jnz     short loc_565A
.text:000000000000566A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000566F                 jnz     short loc_565A
.text:0000000000005671                 push    r12
.text:0000000000005673                 push    rbp
.text:0000000000005674                 mov     r12d, edx
.text:0000000000005677                 push    rbx
.text:0000000000005678                 mov     rbp, rsi
.text:000000000000567B                 mov     rbx, rdi
.text:000000000000567E                 call    _fileno
.text:0000000000005683                 mov     edx, r12d       ; whence
.text:0000000000005686                 mov     rsi, rbp        ; offset
.text:0000000000005689                 mov     edi, eax        ; fd
.text:000000000000568B                 call    _lseek
.text:0000000000005690                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005694                 jz      short loc_56A2
.text:0000000000005696                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005699                 mov     [rbx+90h], rax
.text:00000000000056A0                 xor     eax, eax
.text:00000000000056A2
.text:00000000000056A2 loc_56A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000056A2                 pop     rbx
.text:00000000000056A3                 pop     rbp
.text:00000000000056A4                 pop     r12
.text:00000000000056A6                 retn
.text:00000000000056A6 ; } // starts at 5650
.text:00000000000056A6 rpl_fseeko      endp
.text:00000000000056A6
.text:00000000000056A6 ; ---------------------------------------------------------------------------
.text:00000000000056A7                 align 10h
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0 ; Attributes: info_from_lumina
.text:00000000000056B0
.text:00000000000056B0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000056B0                 public rpl_mbrtowc
.text:00000000000056B0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000056B0
.text:00000000000056B0 pwc             = dword ptr -34h
.text:00000000000056B0 var_30          = qword ptr -30h
.text:00000000000056B0
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 push    r13
.text:00000000000056B2                 push    r12
.text:00000000000056B4                 mov     r13, rsi
.text:00000000000056B7                 push    rbp
.text:00000000000056B8                 push    rbx
.text:00000000000056B9                 mov     rbx, rdi
.text:00000000000056BC                 mov     r12, rdx
.text:00000000000056BF                 sub     rsp, 18h
.text:00000000000056C3                 mov     rax, fs:28h
.text:00000000000056CC                 mov     [rsp+38h+var_30], rax
.text:00000000000056D1                 xor     eax, eax
.text:00000000000056D3                 lea     rax, [rsp+38h+pwc]
.text:00000000000056D8                 test    rdi, rdi
.text:00000000000056DB                 cmovz   rbx, rax
.text:00000000000056DF                 mov     rdi, rbx        ; pwc
.text:00000000000056E2                 call    _mbrtowc
.text:00000000000056E7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000056EB                 mov     rbp, rax
.text:00000000000056EE                 jbe     short loc_5710
.text:00000000000056F0                 test    r12, r12
.text:00000000000056F3                 jz      short loc_5710
.text:00000000000056F5                 xor     edi, edi
.text:00000000000056F7                 call    hard_locale
.text:00000000000056FC                 test    al, al
.text:00000000000056FE                 jnz     short loc_5710
.text:0000000000005700                 movzx   eax, byte ptr [r13+0]
.text:0000000000005705                 mov     ebp, 1
.text:000000000000570A                 mov     [rbx], eax
.text:000000000000570C                 nop     dword ptr [rax+00h]
.text:0000000000005710
.text:0000000000005710 loc_5710:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005710                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005710                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005715                 xor     rdx, fs:28h
.text:000000000000571E                 mov     rax, rbp
.text:0000000000005721                 jnz     short loc_572E
.text:0000000000005723                 add     rsp, 18h
.text:0000000000005727                 pop     rbx
.text:0000000000005728                 pop     rbp
.text:0000000000005729                 pop     r12
.text:000000000000572B                 pop     r13
.text:000000000000572D                 retn
.text:000000000000572E ; ---------------------------------------------------------------------------
.text:000000000000572E
.text:000000000000572E loc_572E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000572E                 call    ___stack_chk_fail
.text:000000000000572E ; } // starts at 56B0
.text:000000000000572E rpl_mbrtowc     endp
.text:000000000000572E
.text:000000000000572E ; ---------------------------------------------------------------------------
.text:0000000000005733                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740 ; Attributes: info_from_lumina
.text:0000000000005740
.text:0000000000005740 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005740                 public close_stream
.text:0000000000005740 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005740                                         ; close_stdout+33↑p
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 push    r12
.text:0000000000005742                 push    rbp
.text:0000000000005743                 mov     rbp, rdi
.text:0000000000005746                 push    rbx
.text:0000000000005747                 call    ___fpending
.text:000000000000574C                 mov     ebx, [rbp+0]
.text:000000000000574F                 mov     rdi, rbp        ; stream
.text:0000000000005752                 mov     r12, rax
.text:0000000000005755                 call    rpl_fclose
.text:000000000000575A                 and     ebx, 20h
.text:000000000000575D                 test    ebx, ebx
.text:000000000000575F                 jnz     short loc_5778
.text:0000000000005761                 test    eax, eax
.text:0000000000005763                 jz      short loc_576F
.text:0000000000005765                 test    r12, r12
.text:0000000000005768                 mov     eax, 0FFFFFFFFh
.text:000000000000576D                 jz      short loc_57A8
.text:000000000000576F
.text:000000000000576F loc_576F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000576F                 pop     rbx
.text:0000000000005770                 pop     rbp
.text:0000000000005771                 pop     r12
.text:0000000000005773                 retn
.text:0000000000005773 ; ---------------------------------------------------------------------------
.text:0000000000005774                 align 8
.text:0000000000005778
.text:0000000000005778 loc_5778:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005778                 test    eax, eax
.text:000000000000577A                 jnz     short loc_5798
.text:000000000000577C                 call    ___errno_location
.text:0000000000005781                 mov     dword ptr [rax], 0
.text:0000000000005787                 mov     eax, 0FFFFFFFFh
.text:000000000000578C                 pop     rbx
.text:000000000000578D                 pop     rbp
.text:000000000000578E                 pop     r12
.text:0000000000005790                 retn
.text:0000000000005790 ; ---------------------------------------------------------------------------
.text:0000000000005791                 align 8
.text:0000000000005798
.text:0000000000005798 loc_5798:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005798                 pop     rbx
.text:0000000000005799                 mov     eax, 0FFFFFFFFh
.text:000000000000579E                 pop     rbp
.text:000000000000579F                 pop     r12
.text:00000000000057A1                 retn
.text:00000000000057A1 ; ---------------------------------------------------------------------------
.text:00000000000057A2                 align 8
.text:00000000000057A8
.text:00000000000057A8 loc_57A8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000057A8                 call    ___errno_location
.text:00000000000057AD                 cmp     dword ptr [rax], 9
.text:00000000000057B0                 pop     rbx
.text:00000000000057B1                 pop     rbp
.text:00000000000057B2                 pop     r12
.text:00000000000057B4                 setnz   al
.text:00000000000057B7                 movzx   eax, al
.text:00000000000057BA                 neg     eax
.text:00000000000057BC                 retn
.text:00000000000057BC ; } // starts at 5740
.text:00000000000057BC close_stream    endp
.text:00000000000057BC
.text:00000000000057BC ; ---------------------------------------------------------------------------
.text:00000000000057BD                 align 20h
.text:00000000000057C0
.text:00000000000057C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057C0
.text:00000000000057C0
.text:00000000000057C0                 public locale_charset
.text:00000000000057C0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000057C0 ; __unwind {
.text:00000000000057C0                 sub     rsp, 8
.text:00000000000057C4                 mov     edi, 0Eh        ; item
.text:00000000000057C9                 call    _nl_langinfo
.text:00000000000057CE                 test    rax, rax
.text:00000000000057D1                 jz      short loc_57F0
.text:00000000000057D3                 cmp     byte ptr [rax], 0
.text:00000000000057D6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000057DD                 cmovz   rax, rdx
.text:00000000000057E1                 add     rsp, 8
.text:00000000000057E5                 retn
.text:00000000000057E5 ; ---------------------------------------------------------------------------
.text:00000000000057E6                 align 10h
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000057F0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000057F7                 add     rsp, 8
.text:00000000000057FB                 retn
.text:00000000000057FB ; } // starts at 57C0
.text:00000000000057FB locale_charset  endp
.text:00000000000057FB
.text:00000000000057FB ; ---------------------------------------------------------------------------
.text:00000000000057FC                 align 20h
.text:0000000000005800
.text:0000000000005800 ; =============== S U B R O U T I N E =======================================
.text:0000000000005800
.text:0000000000005800
.text:0000000000005800 ; __int64 __fastcall strcoll_loop(char *s1)
.text:0000000000005800 strcoll_loop    proc near               ; CODE XREF: memcoll+66↓p
.text:0000000000005800                                         ; memcoll0+40↓j
.text:0000000000005800 ; __unwind {
.text:0000000000005800                 push    r15
.text:0000000000005802                 push    r14
.text:0000000000005804                 mov     r14, rcx
.text:0000000000005807                 push    r13
.text:0000000000005809                 push    r12
.text:000000000000580B                 mov     r13, rsi
.text:000000000000580E                 push    rbp
.text:000000000000580F                 push    rbx
.text:0000000000005810                 mov     r12, rdi
.text:0000000000005813                 mov     rbp, rdx
.text:0000000000005816                 sub     rsp, 8
.text:000000000000581A                 call    ___errno_location
.text:000000000000581F                 mov     r15, rax
.text:0000000000005822                 jmp     short loc_5853
.text:0000000000005822 ; ---------------------------------------------------------------------------
.text:0000000000005824                 align 8
.text:0000000000005828
.text:0000000000005828 loc_5828:                               ; CODE XREF: strcoll_loop+67↓j
.text:0000000000005828                 mov     rdi, r12        ; s
.text:000000000000582B                 call    _strlen
.text:0000000000005830                 mov     rdi, rbp        ; s
.text:0000000000005833                 lea     rbx, [rax+1]
.text:0000000000005837                 call    _strlen
.text:000000000000583C                 add     rax, 1
.text:0000000000005840                 add     r12, rbx
.text:0000000000005843                 add     rbp, rax
.text:0000000000005846                 sub     r14, rax
.text:0000000000005849                 sub     r13, rbx
.text:000000000000584C                 jz      short loc_5880
.text:000000000000584E                 test    r14, r14
.text:0000000000005851                 jz      short loc_58A0
.text:0000000000005853
.text:0000000000005853 loc_5853:                               ; CODE XREF: strcoll_loop+22↑j
.text:0000000000005853                 mov     dword ptr [r15], 0
.text:000000000000585A                 mov     rsi, rbp        ; s2
.text:000000000000585D                 mov     rdi, r12        ; s1
.text:0000000000005860                 call    _strcoll
.text:0000000000005865                 test    eax, eax
.text:0000000000005867                 jz      short loc_5828
.text:0000000000005869                 add     rsp, 8
.text:000000000000586D                 pop     rbx
.text:000000000000586E                 pop     rbp
.text:000000000000586F                 pop     r12
.text:0000000000005871                 pop     r13
.text:0000000000005873                 pop     r14
.text:0000000000005875                 pop     r15
.text:0000000000005877                 retn
.text:0000000000005877 ; ---------------------------------------------------------------------------
.text:0000000000005878                 align 20h
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: strcoll_loop+4C↑j
.text:0000000000005880                 xor     eax, eax
.text:0000000000005882                 test    r14, r14
.text:0000000000005885                 setnz   al
.text:0000000000005888                 add     rsp, 8
.text:000000000000588C                 pop     rbx
.text:000000000000588D                 neg     eax
.text:000000000000588F                 pop     rbp
.text:0000000000005890                 pop     r12
.text:0000000000005892                 pop     r13
.text:0000000000005894                 pop     r14
.text:0000000000005896                 pop     r15
.text:0000000000005898                 retn
.text:0000000000005898 ; ---------------------------------------------------------------------------
.text:0000000000005899                 align 20h
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: strcoll_loop+51↑j
.text:00000000000058A0                 add     rsp, 8
.text:00000000000058A4                 mov     eax, 1
.text:00000000000058A9                 pop     rbx
.text:00000000000058AA                 pop     rbp
.text:00000000000058AB                 pop     r12
.text:00000000000058AD                 pop     r13
.text:00000000000058AF                 pop     r14
.text:00000000000058B1                 pop     r15
.text:00000000000058B3                 retn
.text:00000000000058B3 ; } // starts at 5800
.text:00000000000058B3 strcoll_loop    endp
.text:00000000000058B3
.text:00000000000058B3 ; ---------------------------------------------------------------------------
.text:00000000000058B4                 align 20h
.text:00000000000058C0
.text:00000000000058C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058C0
.text:00000000000058C0
.text:00000000000058C0 ; __int64 __fastcall memcoll(char *s1, size_t n, void *s2)
.text:00000000000058C0                 public memcoll
.text:00000000000058C0 memcoll         proc near               ; CODE XREF: xmemcoll+14↑p
.text:00000000000058C0
.text:00000000000058C0 var_40          = dword ptr -40h
.text:00000000000058C0 var_39          = byte ptr -39h
.text:00000000000058C0
.text:00000000000058C0 ; __unwind {
.text:00000000000058C0                 push    r15
.text:00000000000058C2                 push    r14
.text:00000000000058C4                 mov     r15, rdx
.text:00000000000058C7                 push    r13
.text:00000000000058C9                 push    r12
.text:00000000000058CB                 mov     r14, rdi
.text:00000000000058CE                 push    rbp
.text:00000000000058CF                 push    rbx
.text:00000000000058D0                 mov     rbp, rcx
.text:00000000000058D3                 mov     rbx, rsi
.text:00000000000058D6                 sub     rsp, 18h
.text:00000000000058DA                 cmp     rsi, rcx
.text:00000000000058DD                 jnz     short loc_58F2
.text:00000000000058DF                 mov     rdx, rsi        ; n
.text:00000000000058E2                 mov     rsi, r15        ; s2
.text:00000000000058E5                 call    _memcmp
.text:00000000000058EA                 test    eax, eax
.text:00000000000058EC                 mov     [rsp+48h+var_40], eax
.text:00000000000058F0                 jz      short loc_5958
.text:00000000000058F2
.text:00000000000058F2 loc_58F2:                               ; CODE XREF: memcoll+1D↑j
.text:00000000000058F2                 lea     r13, [r14+rbx]
.text:00000000000058F6                 lea     r12, [r15+rbp]
.text:00000000000058FA                 lea     rcx, [rbp+1]
.text:00000000000058FE                 lea     rsi, [rbx+1]
.text:0000000000005902                 mov     rdx, r15
.text:0000000000005905                 mov     rdi, r14        ; s1
.text:0000000000005908                 movzx   r9d, byte ptr [r13+0]
.text:000000000000590D                 movzx   r8d, byte ptr [r12]
.text:0000000000005912                 mov     byte ptr [r13+0], 0
.text:0000000000005917                 mov     byte ptr [r12], 0
.text:000000000000591C                 mov     [rsp+48h+var_39], r9b
.text:0000000000005921                 mov     byte ptr [rsp+48h+var_40], r8b
.text:0000000000005926                 call    strcoll_loop
.text:000000000000592B                 movzx   r9d, [rsp+48h+var_39]
.text:0000000000005931                 movzx   r8d, byte ptr [rsp+48h+var_40]
.text:0000000000005937                 mov     edx, eax
.text:0000000000005939                 mov     [r13+0], r9b
.text:000000000000593D                 mov     [r12], r8b
.text:0000000000005941
.text:0000000000005941 loc_5941:                               ; CODE XREF: memcoll+A7↓j
.text:0000000000005941                 add     rsp, 18h
.text:0000000000005945                 mov     eax, edx
.text:0000000000005947                 pop     rbx
.text:0000000000005948                 pop     rbp
.text:0000000000005949                 pop     r12
.text:000000000000594B                 pop     r13
.text:000000000000594D                 pop     r14
.text:000000000000594F                 pop     r15
.text:0000000000005951                 retn
.text:0000000000005951 ; ---------------------------------------------------------------------------
.text:0000000000005952                 align 8
.text:0000000000005958
.text:0000000000005958 loc_5958:                               ; CODE XREF: memcoll+30↑j
.text:0000000000005958                 call    ___errno_location
.text:000000000000595D                 mov     edx, [rsp+48h+var_40]
.text:0000000000005961                 mov     dword ptr [rax], 0
.text:0000000000005967                 jmp     short loc_5941
.text:0000000000005967 ; } // starts at 58C0
.text:0000000000005967 memcoll         endp
.text:0000000000005967
.text:0000000000005967 ; ---------------------------------------------------------------------------
.text:0000000000005969                 align 10h
.text:0000000000005970
.text:0000000000005970 ; =============== S U B R O U T I N E =======================================
.text:0000000000005970
.text:0000000000005970
.text:0000000000005970 ; __int64 __fastcall memcoll0(char *s1, size_t n, void *s2)
.text:0000000000005970                 public memcoll0
.text:0000000000005970 memcoll0        proc near               ; CODE XREF: xmemcoll0+14↑p
.text:0000000000005970
.text:0000000000005970 var_20          = qword ptr -20h
.text:0000000000005970
.text:0000000000005970 ; __unwind {
.text:0000000000005970                 push    r12
.text:0000000000005972                 push    rbp
.text:0000000000005973                 mov     r12, rdx
.text:0000000000005976                 push    rbx
.text:0000000000005977                 mov     rbp, rdi
.text:000000000000597A                 mov     rbx, rsi
.text:000000000000597D                 sub     rsp, 10h
.text:0000000000005981                 cmp     rsi, rcx
.text:0000000000005984                 jnz     short loc_599F
.text:0000000000005986                 mov     rdx, rsi        ; n
.text:0000000000005989                 mov     rsi, r12        ; s2
.text:000000000000598C                 mov     [rsp+28h+var_20], rcx
.text:0000000000005991                 call    _memcmp
.text:0000000000005996                 test    eax, eax
.text:0000000000005998                 mov     rcx, [rsp+28h+var_20]
.text:000000000000599D                 jz      short loc_59B8
.text:000000000000599F
.text:000000000000599F loc_599F:                               ; CODE XREF: memcoll0+14↑j
.text:000000000000599F                 add     rsp, 10h
.text:00000000000059A3                 mov     rdx, r12
.text:00000000000059A6                 mov     rsi, rbx
.text:00000000000059A9                 mov     rdi, rbp        ; s1
.text:00000000000059AC                 pop     rbx
.text:00000000000059AD                 pop     rbp
.text:00000000000059AE                 pop     r12
.text:00000000000059B0                 jmp     strcoll_loop
.text:00000000000059B0 ; ---------------------------------------------------------------------------
.text:00000000000059B5                 align 8
.text:00000000000059B8
.text:00000000000059B8 loc_59B8:                               ; CODE XREF: memcoll0+2D↑j
.text:00000000000059B8                 call    ___errno_location
.text:00000000000059BD                 mov     dword ptr [rax], 0
.text:00000000000059C3                 add     rsp, 10h
.text:00000000000059C7                 xor     eax, eax
.text:00000000000059C9                 pop     rbx
.text:00000000000059CA                 pop     rbp
.text:00000000000059CB                 pop     r12
.text:00000000000059CD                 retn
.text:00000000000059CD ; } // starts at 5970
.text:00000000000059CD memcoll0        endp
.text:00000000000059CD
.text:00000000000059CD ; ---------------------------------------------------------------------------
.text:00000000000059CE                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0 ; Attributes: info_from_lumina
.text:00000000000059D0
.text:00000000000059D0 ; void _libc_csu_init(void)
.text:00000000000059D0                 public __libc_csu_init
.text:00000000000059D0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 push    r15
.text:00000000000059D2                 push    r14
.text:00000000000059D4                 mov     r15, rdx
.text:00000000000059D7                 push    r13
.text:00000000000059D9                 push    r12
.text:00000000000059DB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000059E2                 push    rbp
.text:00000000000059E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000059EA                 push    rbx
.text:00000000000059EB                 mov     r13d, edi
.text:00000000000059EE                 mov     r14, rsi
.text:00000000000059F1                 sub     rbp, r12
.text:00000000000059F4                 sub     rsp, 8
.text:00000000000059F8                 sar     rbp, 3
.text:00000000000059FC                 call    _init_proc
.text:0000000000005A01                 test    rbp, rbp
.text:0000000000005A04                 jz      short loc_5A26
.text:0000000000005A06                 xor     ebx, ebx
.text:0000000000005A08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005A10
.text:0000000000005A10 loc_5A10:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005A10                 mov     rdx, r15
.text:0000000000005A13                 mov     rsi, r14
.text:0000000000005A16                 mov     edi, r13d
.text:0000000000005A19                 call    ds:(__frame_dummy_init_array_entry - 208AD0h)[r12+rbx*8]
.text:0000000000005A1D                 add     rbx, 1
.text:0000000000005A21                 cmp     rbp, rbx
.text:0000000000005A24                 jnz     short loc_5A10
.text:0000000000005A26
.text:0000000000005A26 loc_5A26:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005A26                 add     rsp, 8
.text:0000000000005A2A                 pop     rbx
.text:0000000000005A2B                 pop     rbp
.text:0000000000005A2C                 pop     r12
.text:0000000000005A2E                 pop     r13
.text:0000000000005A30                 pop     r14
.text:0000000000005A32                 pop     r15
.text:0000000000005A34                 retn
.text:0000000000005A34 ; } // starts at 59D0
.text:0000000000005A34 __libc_csu_init endp
.text:0000000000005A34
.text:0000000000005A34 ; ---------------------------------------------------------------------------
.text:0000000000005A35                 align 20h
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40
.text:0000000000005A40 ; void _libc_csu_fini(void)
.text:0000000000005A40                 public __libc_csu_fini
.text:0000000000005A40 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 rep retn
.text:0000000000005A40 ; } // starts at 5A40
.text:0000000000005A40 __libc_csu_fini endp
.text:0000000000005A40
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A42                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50
.text:0000000000005A50 atexit          proc near               ; CODE XREF: main+66↑p
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005A57                 xor     esi, esi        ; obj
.text:0000000000005A59                 jmp     ___cxa_atexit
.text:0000000000005A59 ; } // starts at 5A50
.text:0000000000005A59 atexit          endp
.text:0000000000005A59
.text:0000000000005A59 _text           ends
.text:0000000000005A59
LOAD:0000000000005A5E ; ===========================================================================
LOAD:0000000000005A5E
LOAD:0000000000005A5E ; Segment type: Pure code
LOAD:0000000000005A5E ; Segment permissions: Read/Execute
LOAD:0000000000005A5E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005A5E                 assume cs:LOAD
LOAD:0000000000005A5E                 ;org 5A5Eh
LOAD:0000000000005A5E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005A5E                 align 20h
LOAD:0000000000005A5E LOAD            ends
LOAD:0000000000005A5E
.fini:0000000000005A60 ; ===========================================================================
.fini:0000000000005A60
.fini:0000000000005A60 ; Segment type: Pure code
.fini:0000000000005A60 ; Segment permissions: Read/Execute
.fini:0000000000005A60 _fini           segment dword public 'CODE' use64
.fini:0000000000005A60                 assume cs:_fini
.fini:0000000000005A60                 ;org 5A60h
.fini:0000000000005A60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005A60
.fini:0000000000005A60 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005A60
.fini:0000000000005A60
.fini:0000000000005A60                 public _term_proc
.fini:0000000000005A60 _term_proc      proc near
.fini:0000000000005A60                 sub     rsp, 8          ; _fini
.fini:0000000000005A64                 add     rsp, 8
.fini:0000000000005A68                 retn
.fini:0000000000005A68 _term_proc      endp
.fini:0000000000005A68
.fini:0000000000005A68 _fini           ends
.fini:0000000000005A68
LOAD:0000000000005A69 ; ===========================================================================
LOAD:0000000000005A69
LOAD:0000000000005A69 ; Segment type: Pure code
LOAD:0000000000005A69 ; Segment permissions: Read/Execute
LOAD:0000000000005A69 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005A69                 assume cs:LOAD
LOAD:0000000000005A69                 ;org 5A69h
LOAD:0000000000005A69                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005A69                 align 20h
LOAD:0000000000005A69 LOAD            ends
LOAD:0000000000005A69
.rodata:0000000000005A80 ; ===========================================================================
.rodata:0000000000005A80
.rodata:0000000000005A80 ; Segment type: Pure data
.rodata:0000000000005A80 ; Segment permissions: Read
.rodata:0000000000005A80 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005A80                 assume cs:_rodata
.rodata:0000000000005A80                 ;org 5A80h
.rodata:0000000000005A80                 public _IO_stdin_used
.rodata:0000000000005A80 _IO_stdin_used  db    1
.rodata:0000000000005A81                 db    0
.rodata:0000000000005A82                 db    2
.rodata:0000000000005A83                 db    0
.rodata:0000000000005A84                 db    0
.rodata:0000000000005A85                 db    0
.rodata:0000000000005A86                 db    0
.rodata:0000000000005A87                 db    0
.rodata:0000000000005A88 ; const char aFileDIsNotInSo[]
.rodata:0000000000005A88 aFileDIsNotInSo db 'file %d is not in sorted order',0
.rodata:0000000000005A88                                         ; DATA XREF: check_order_isra_1_part_2+48↑o
.rodata:0000000000005AA7                 align 8
.rodata:0000000000005AA8 ; const char aTrySHelpForMor[]
.rodata:0000000000005AA8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005AA8                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005ACF                 align 10h
.rodata:0000000000005AD0 ; const char aUsageSOptionFi[]
.rodata:0000000000005AD0 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE1 FILE2',0Ah,0
.rodata:0000000000005AD0                                         ; DATA XREF: usage:loc_239D↑o
.rodata:0000000000005AF3                 align 8
.rodata:0000000000005AF8 ; const char aCompareSortedF[]
.rodata:0000000000005AF8 aCompareSortedF db 'Compare sorted files FILE1 and FILE2 line by line.',0Ah,0
.rodata:0000000000005AF8                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005B2C                 align 10h
.rodata:0000000000005B30 ; const char aWhenFile1OrFil[]
.rodata:0000000000005B30 aWhenFile1OrFil db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000005B30                 db 'When FILE1 or FILE2 (not both) is -, read standard input.',0Ah,0
.rodata:0000000000005B6C                 align 10h
.rodata:0000000000005B70 ; const char aWithNoOptionsP[]
.rodata:0000000000005B70 aWithNoOptionsP db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000005B70                 db 'With no options, produce three-column output.  Column one contain'
.rodata:0000000000005B70                 db 's',0Ah
.rodata:0000000000005B70                 db 'lines unique to FILE1, column two contains lines unique to FILE2,'
.rodata:0000000000005B70                 db 0Ah
.rodata:0000000000005B70                 db 'and column three contains lines common to both files.',0Ah,0
.rodata:0000000000005C2D                 align 10h
.rodata:0000000000005C30 ; const char a1SuppressColum[]
.rodata:0000000000005C30 a1SuppressColum db 0Ah                  ; DATA XREF: usage+F3↑o
.rodata:0000000000005C30                 db '  -1              suppress column 1 (lines unique to FILE1)',0Ah
.rodata:0000000000005C30                 db '  -2              suppress column 2 (lines unique to FILE2)',0Ah
.rodata:0000000000005C30                 db '  -3              suppress column 3 (lines that appear in both fi'
.rodata:0000000000005C30                 db 'les)',0Ah,0
.rodata:0000000000005CF0 ; const char aCheckOrderChec[]
.rodata:0000000000005CF0 aCheckOrderChec db 0Ah                  ; DATA XREF: usage+118↑o
.rodata:0000000000005CF0                 db '  --check-order     check that the input is correctly sorted, eve'
.rodata:0000000000005CF0                 db 'n',0Ah
.rodata:0000000000005CF0                 db '                      if all input lines are pairable',0Ah
.rodata:0000000000005CF0                 db '  --nocheck-order   do not check that the input is correctly sort'
.rodata:0000000000005CF0                 db 'ed',0Ah,0
.rodata:0000000000005DAF                 align 10h
.rodata:0000000000005DB0 ; const char aOutputDelimite[]
.rodata:0000000000005DB0 aOutputDelimite db '  --output-delimiter=STR  separate columns with STR',0Ah,0
.rodata:0000000000005DB0                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000005DE5                 align 8
.rodata:0000000000005DE8 ; const char aTotalOutputASu[]
.rodata:0000000000005DE8 aTotalOutputASu db '  --total           output a summary',0Ah,0
.rodata:0000000000005DE8                                         ; DATA XREF: usage+162↑o
.rodata:0000000000005E0E                 align 10h
.rodata:0000000000005E10 ; const char aZZeroTerminate[]
.rodata:0000000000005E10 aZZeroTerminate db '  -z, --zero-terminated    line delimiter is NUL, not newline',0Ah
.rodata:0000000000005E10                                         ; DATA XREF: usage+187↑o
.rodata:0000000000005E10                 db 0
.rodata:0000000000005E4F                 align 10h
.rodata:0000000000005E50 ; const char aHelpDisplayThi[]
.rodata:0000000000005E50 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005E50                                         ; DATA XREF: usage+1AC↑o
.rodata:0000000000005E7D                 align 20h
.rodata:0000000000005E80 ; const char aVersionOutputV[]
.rodata:0000000000005E80 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005E80                                         ; DATA XREF: usage+1D1↑o
.rodata:0000000000005EB6                 align 8
.rodata:0000000000005EB8 ; const char aNoteComparison[]
.rodata:0000000000005EB8 aNoteComparison db 0Ah                  ; DATA XREF: usage+1F6↑o
.rodata:0000000000005EB8                 db 'Note, comparisons honor the rules specified by ',27h,'LC_COLLATE',27h
.rodata:0000000000005EB8                 db '.',0Ah,0
.rodata:0000000000005EF7                 align 8
.rodata:0000000000005EF8 ; const char aExamplesS12Fil[]
.rodata:0000000000005EF8 aExamplesS12Fil db 0Ah                  ; DATA XREF: usage+21B↑o
.rodata:0000000000005EF8                 db 'Examples:',0Ah
.rodata:0000000000005EF8                 db '  %s -12 file1 file2  Print only lines present in both file1 and '
.rodata:0000000000005EF8                 db 'file2.',0Ah
.rodata:0000000000005EF8                 db '  %s -3 file1 file2  Print lines in file1 not in file2, and vice '
.rodata:0000000000005EF8                 db 'versa.',0Ah,0
.rodata:0000000000005F94                 align 8
.rodata:0000000000005F98 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005F98                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000005F98                                         ; usage+383↑o ...
.rodata:0000000000005FC0 ; const char aReportAnyTrans[]
.rodata:0000000000005FC0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005FC0                                         ; DATA XREF: usage+477↑o
.rodata:0000000000005FC0                 db 'am/>',0Ah,0
.rodata:0000000000006007                 align 8
.rodata:0000000000006008 ; const char aOrAvailableLoc[]
.rodata:0000000000006008 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006008                                         ; DATA XREF: usage:loc_26EE↑o
.rodata:000000000000603B                 align 20h
.rodata:0000000000006040 ; const char aMultipleOutput[]
.rodata:0000000000006040 aMultipleOutput db 'multiple output delimiters specified',0
.rodata:0000000000006040                                         ; DATA XREF: main:loc_1AA3↑o
.rodata:0000000000006065 ; const char aTotal[]
.rodata:0000000000006065 aTotal          db 'total',0            ; DATA XREF: compare_files+421↑o
.rodata:0000000000006065                                         ; .data.rel.ro:0000000000208B40↓o
.rodata:000000000000606B aSSSSSSSC       db '%s%s%s%s%s%s%s%c',0 ; DATA XREF: compare_files+493↑o
.rodata:000000000000606B                                         ; .data.rel.ro:0000000000208C08↓o
.rodata:000000000000607C aComm           db 'comm',0             ; DATA XREF: main+234↑o
.rodata:000000000000607C                                         ; usage+23E↑o ...
.rodata:0000000000006081 asc_6081        db '[',0                ; DATA XREF: usage+24A↑o
.rodata:0000000000006083 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+271↑o
.rodata:0000000000006093 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006093                                         ; DATA XREF: usage+2A1↑o
.rodata:0000000000006093                                         ; usage+39C↑o ...
.rodata:00000000000060A9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2B2↑o
.rodata:00000000000060B3 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2BE↑o
.rodata:00000000000060C2 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+251↑o
.rodata:00000000000060CC aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+27D↑o
.rodata:00000000000060D6 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+295↑o
.rodata:00000000000060E0 ; const char aSOnlineHelpS[]
.rodata:00000000000060E0 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+30A↑o
.rodata:00000000000060E0                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000060F7 unk_60F7        db  47h ; G             ; DATA XREF: main+22D↑o
.rodata:00000000000060F7                                         ; usage+326↑o ...
.rodata:00000000000060F8                 db  4Eh ; N
.rodata:00000000000060F9                 db  55h ; U
.rodata:00000000000060FA                 db  20h
.rodata:00000000000060FB ; const char domainname[]
.rodata:00000000000060FB domainname      db 'coreutils',0        ; DATA XREF: main+37↑o
.rodata:00000000000060FB                                         ; main+43↑o ...
.rodata:0000000000006105 ; const char s2[]
.rodata:0000000000006105 s2              db 'en_',0              ; DATA XREF: usage+34D↑o
.rodata:0000000000006105                                         ; usage+40E↑o
.rodata:0000000000006109 ; const char aFullDocumentat[]
.rodata:0000000000006109 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006109                                         ; DATA XREF: usage:loc_26A9↑o
.rodata:0000000000006109                                         ; usage:loc_2766↑o
.rodata:0000000000006124 ; const char dirname[]
.rodata:0000000000006124 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006124                                         ; DATA XREF: main+30↑o
.rodata:000000000000613C aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+21F↑o
.rodata:000000000000614C aRichardMStallm db 'Richard M. Stallman',0
.rodata:000000000000614C                                         ; DATA XREF: main+226↑o
.rodata:0000000000006160 ; const char shortopts[]
.rodata:0000000000006160 shortopts       db '123z',0             ; DATA XREF: main+B7↑o
.rodata:0000000000006165 ; const char aMissingOperand_0[]
.rodata:0000000000006165 aMissingOperand_0 db 'missing operand',0
.rodata:0000000000006165                                         ; DATA XREF: main+2F0↑o
.rodata:0000000000006175 ; const char msgid[]
.rodata:0000000000006175 msgid           db 'missing operand after %s',0
.rodata:0000000000006175                                         ; DATA XREF: main+2B4↑o
.rodata:000000000000618E aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+349↑o
.rodata:000000000000619F ; const char aInputIsNotInSo[]
.rodata:000000000000619F aInputIsNotInSo db 'input is not in sorted order',0
.rodata:000000000000619F                                         ; DATA XREF: main:loc_1AE5↑o
.rodata:00000000000061BC unk_61BC        db  6Eh ; n             ; DATA XREF: .data.rel.ro:0000000000208B00↓o
.rodata:00000000000061BD                 db  6Fh ; o
.rodata:00000000000061BE aCheckOrder     db 'check-order',0      ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:00000000000061CA aOutputDelimite_0 db 'output-delimiter',0
.rodata:00000000000061CA                                         ; DATA XREF: .data.rel.ro:0000000000208B20↓o
.rodata:00000000000061DB aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:00000000000061EB aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B80↓o
.rodata:00000000000061F0 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208BA0↓o
.rodata:00000000000061F8 unk_61F8        db    9                 ; DATA XREF: .data:col_sep↓o
.rodata:00000000000061F9 ; const char locale
.rodata:00000000000061F9 locale          db 0                    ; DATA XREF: main+1F↑o
.rodata:00000000000061F9                                         ; usage+3A3↑o
.rodata:00000000000061FA a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000061FF ; const char aWriteError[]
.rodata:00000000000061FF aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2843↑o
.rodata:000000000000620B ; const char format[]
.rodata:000000000000620B format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000620B                                         ; compare_files+51E↑o ...
.rodata:0000000000006212 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006214 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_29D0↑o
.rodata:000000000000621A                 align 20h
.rodata:0000000000006220 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006220                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000006258 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000006260 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000006260                                         ; compare_files+91↑o
.rodata:0000000000006264 unk_6264        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000006265                 db  80h
.rodata:0000000000006266                 db  98h
.rodata:0000000000006267                 db    0
.rodata:0000000000006268 unk_6268        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000006269                 db  80h
.rodata:000000000000626A                 db  99h
.rodata:000000000000626B                 db    0
.rodata:000000000000626C unk_626C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000626D                 db    7
.rodata:000000000000626E                 db  65h ; e
.rodata:000000000000626F                 db    0
.rodata:0000000000006270 unk_6270        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000006271                 db 0AFh
.rodata:0000000000006272                 db    0
.rodata:0000000000006273 unk_6273        db  22h ; "             ; DATA XREF: gettext_quote:loc_2C80↑o
.rodata:0000000000006273                                         ; quotearg_buffer_restyled:loc_3A3B↑o ...
.rodata:0000000000006274                 db    0
.rodata:0000000000006275 ; const char asc_6275[2]
.rodata:0000000000006275 asc_6275        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000006275                                         ; quotearg_buffer_restyled:loc_2E03↑o ...
.rodata:0000000000006277 ; const char asc_6277[2]
.rodata:0000000000006277 asc_6277        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000006277                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000006279 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000006281 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208BE8↓o
.rodata:0000000000006287 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208BF0↓o
.rodata:0000000000006294 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208BF8↓o
.rodata:0000000000006294                                         ; .data.rel.ro:0000000000208C18↓o
.rodata:00000000000062A1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000062A1                                         ; DATA XREF: .data.rel.ro:0000000000208C00↓o
.rodata:00000000000062B5 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208C10↓o
.rodata:00000000000062BD aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208C28↓o
.rodata:00000000000062C5                 align 20h
.rodata:00000000000062E0 jpt_2DE1        dd offset loc_3B8A - 62E0h
.rodata:00000000000062E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000062E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000062E0                 dd offset loc_2DE3 - 62E0h ; jump table for switch statement
.rodata:00000000000062E0                 dd offset loc_3DB8 - 62E0h
.rodata:00000000000062E0                 dd offset loc_3BC4 - 62E0h
.rodata:00000000000062E0                 dd offset loc_39B4 - 62E0h
.rodata:00000000000062E0                 dd offset loc_3A10 - 62E0h
.rodata:00000000000062E0                 dd offset loc_3A65 - 62E0h
.rodata:00000000000062E0                 dd offset loc_3AAA - 62E0h
.rodata:00000000000062E0                 dd offset loc_3AE4 - 62E0h
.rodata:00000000000062E0                 dd offset loc_3AE4 - 62E0h
.rodata:00000000000062E0                 dd offset loc_3AE4 - 62E0h
.rodata:000000000000630C jpt_2F3E        dd offset loc_3160 - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000630C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch ; jump table for switch statement
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset loc_31A0 - 630Ch, offset loc_30A8 - 630Ch
.rodata:000000000000630C                 dd offset loc_3068 - 630Ch, offset loc_3230 - 630Ch, offset loc_3220 - 630Ch
.rodata:000000000000630C                 dd offset loc_3210 - 630Ch, offset loc_3200 - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset def_2F3E - 630Ch
.rodata:000000000000630C                 dd offset def_2F3E - 630Ch, offset def_2F3E - 630Ch, offset loc_31F0 - 630Ch
.rodata:000000000000630C                 dd offset loc_31E0 - 630Ch, offset loc_31E0 - 630Ch, offset loc_31B0 - 630Ch
.rodata:000000000000630C                 dd offset loc_31E0 - 630Ch, offset loc_3188 - 630Ch, offset loc_31E0 - 630Ch
.rodata:000000000000630C                 dd offset loc_3043 - 630Ch, offset loc_31E0 - 630Ch, offset loc_31E0 - 630Ch
.rodata:000000000000630C                 dd offset loc_31E0 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_31E0 - 630Ch
.rodata:000000000000630C                 dd offset loc_31E0 - 630Ch, offset loc_31E0 - 630Ch, offset loc_31E0 - 630Ch
.rodata:000000000000630C                 dd offset loc_3013 - 630Ch, offset def_2F3E - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_31E0 - 630Ch, offset loc_30B8 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_31E0 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_31E0 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_3188 - 630Ch, offset loc_3188 - 630Ch, offset loc_3188 - 630Ch
.rodata:000000000000630C                 dd offset loc_2F43 - 630Ch, offset loc_31E0 - 630Ch, offset loc_2F43 - 630Ch
.rodata:000000000000630C                 dd offset loc_31B0 - 630Ch
.rodata:0000000000006508 jpt_32CA        dd offset loc_3330 - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006508                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h ; jump table for switch statement
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset loc_3320 - 6508h, offset loc_3470 - 6508h
.rodata:0000000000006508                 dd offset loc_3458 - 6508h, offset loc_3308 - 6508h, offset loc_3448 - 6508h
.rodata:0000000000006508                 dd offset loc_32F0 - 6508h, offset loc_3430 - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset def_32CA - 6508h
.rodata:0000000000006508                 dd offset def_32CA - 6508h, offset def_32CA - 6508h, offset loc_3418 - 6508h
.rodata:0000000000006508                 dd offset loc_3400 - 6508h, offset loc_3400 - 6508h, offset loc_33E8 - 6508h
.rodata:0000000000006508                 dd offset loc_3400 - 6508h, offset loc_33D0 - 6508h, offset loc_3400 - 6508h
.rodata:0000000000006508                 dd offset loc_3040 - 6508h, offset loc_3400 - 6508h, offset loc_3400 - 6508h
.rodata:0000000000006508                 dd offset loc_3400 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_3400 - 6508h
.rodata:0000000000006508                 dd offset loc_3400 - 6508h, offset loc_3400 - 6508h, offset loc_3400 - 6508h
.rodata:0000000000006508                 dd offset loc_3010 - 6508h, offset def_32CA - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_3400 - 6508h, offset loc_32D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_3400 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_3400 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_33D0 - 6508h, offset loc_33D0 - 6508h, offset loc_33D0 - 6508h
.rodata:0000000000006508                 dd offset loc_2F40 - 6508h, offset loc_3400 - 6508h, offset loc_2F40 - 6508h
.rodata:0000000000006508                 dd offset loc_33E8 - 6508h
.rodata:0000000000006704                 align 20h
.rodata:0000000000006720                 public quoting_style_vals
.rodata:0000000000006720 quoting_style_vals db    0
.rodata:0000000000006721                 db    0
.rodata:0000000000006722                 db    0
.rodata:0000000000006723                 db    0
.rodata:0000000000006724                 db    1
.rodata:0000000000006725                 db    0
.rodata:0000000000006726                 db    0
.rodata:0000000000006727                 db    0
.rodata:0000000000006728                 db    2
.rodata:0000000000006729                 db    0
.rodata:000000000000672A                 db    0
.rodata:000000000000672B                 db    0
.rodata:000000000000672C                 db    3
.rodata:000000000000672D                 db    0
.rodata:000000000000672E                 db    0
.rodata:000000000000672F                 db    0
.rodata:0000000000006730                 db    4
.rodata:0000000000006731                 db    0
.rodata:0000000000006732                 db    0
.rodata:0000000000006733                 db    0
.rodata:0000000000006734                 db    5
.rodata:0000000000006735                 db    0
.rodata:0000000000006736                 db    0
.rodata:0000000000006737                 db    0
.rodata:0000000000006738                 db    6
.rodata:0000000000006739                 db    0
.rodata:000000000000673A                 db    0
.rodata:000000000000673B                 db    0
.rodata:000000000000673C                 db    7
.rodata:000000000000673D                 db    0
.rodata:000000000000673E                 db    0
.rodata:000000000000673F                 db    0
.rodata:0000000000006740                 db    8
.rodata:0000000000006741                 db    0
.rodata:0000000000006742                 db    0
.rodata:0000000000006743                 db    0
.rodata:0000000000006744                 db    9
.rodata:0000000000006745                 db    0
.rodata:0000000000006746                 db    0
.rodata:0000000000006747                 db    0
.rodata:0000000000006748 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006754 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000675B ; const char aC_0[]
.rodata:000000000000675B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_493C↑o
.rodata:000000000000675F ; const char aWrittenByS[]
.rodata:000000000000675F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000675F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000676F ; const char aWrittenBySAndS[]
.rodata:000000000000676F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000676F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006786 ; const char aWrittenBySSAnd[]
.rodata:0000000000006786 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006786                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000067A2 ; const char aReportBugsToS[]
.rodata:00000000000067A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000067A2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000067B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000067B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000067CD ; const char aSHomePageS[]
.rodata:00000000000067CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000067CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000067E1                 align 8
.rodata:00000000000067E8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000067E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000067E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000067E8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000067E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000067E8                 db '.',0Ah
.rodata:00000000000067E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000067E8                 db 0Ah,0
.rodata:00000000000068B4                 align 8
.rodata:00000000000068B8 ; const char aWrittenBySSSAn[]
.rodata:00000000000068B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000068B8                                         ; DATA XREF: version_etc_arn:loc_4B90↑o
.rodata:00000000000068B8                 db 'and %s.',0Ah,0
.rodata:00000000000068D8 ; const char aWrittenBySSSSA[]
.rodata:00000000000068D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000068D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000068D8                 db '%s, and %s.',0Ah,0
.rodata:00000000000068FC                 align 20h
.rodata:0000000000006900 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006900 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006900                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006900                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006928 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006928 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006928                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006928                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006954                 align 8
.rodata:0000000000006958 ; const char aWrittenBySSSSS[]
.rodata:0000000000006958 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006958                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006958                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006958                 db 'and %s.',0Ah,0
.rodata:0000000000006988 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006988 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006988                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006988                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006988                 db '%s, and %s.',0Ah,0
.rodata:00000000000069BC                 align 20h
.rodata:00000000000069C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000069C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000069C0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000069C0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000069FC                 align 20h
.rodata:0000000000006A00 ; const char aGeneralHelpUsi[]
.rodata:0000000000006A00 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006A00                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006A00                 db 0
.rodata:0000000000006A41                 align 4
.rodata:0000000000006A44 jpt_49A4        dd offset loc_4A26 - 6A44h
.rodata:0000000000006A44                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006A44                                         ; version_etc_arn+9D↑r
.rodata:0000000000006A44                 dd offset loc_4AB8 - 6A44h ; jump table for switch statement
.rodata:0000000000006A44                 dd offset loc_4AF8 - 6A44h
.rodata:0000000000006A44                 dd offset loc_4B40 - 6A44h
.rodata:0000000000006A44                 dd offset loc_4B90 - 6A44h
.rodata:0000000000006A44                 dd offset loc_4BE8 - 6A44h
.rodata:0000000000006A44                 dd offset loc_4C18 - 6A44h
.rodata:0000000000006A44                 dd offset loc_4C80 - 6A44h
.rodata:0000000000006A44                 dd offset loc_49B0 - 6A44h
.rodata:0000000000006A44                 dd offset loc_4A60 - 6A44h
.rodata:0000000000006A6C                 align 20h
.rodata:0000000000006A80                 public version_etc_copyright
.rodata:0000000000006A80 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006A80                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000006AAF ; const char aMemoryExhauste[]
.rodata:0000000000006AAF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006AC0 ; const char aStringComparis[]
.rodata:0000000000006AC0 aStringComparis db 'string comparison failed',0
.rodata:0000000000006AC0                                         ; DATA XREF: collate_error+11↑o
.rodata:0000000000006AD9                 align 20h
.rodata:0000000000006AE0 ; const char aSetLcAllCToWor[]
.rodata:0000000000006AE0 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.rodata:0000000000006AE0                                         ; DATA XREF: collate_error+39↑o
.rodata:0000000000006B0B                 align 10h
.rodata:0000000000006B10 ; const char aTheStringsComp[]
.rodata:0000000000006B10 aTheStringsComp db 'The strings compared were %s and %s.',0
.rodata:0000000000006B10                                         ; DATA XREF: collate_error+84↑o
.rodata:0000000000006B35                 align 8
.rodata:0000000000006B38 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006B38                                         ; locale_charset:loc_57F0↑o
.rodata:0000000000006B38 _rodata         ends
.rodata:0000000000006B38
LOAD:0000000000006B3E ; ===========================================================================
LOAD:0000000000006B3E
LOAD:0000000000006B3E ; Segment type: Pure code
LOAD:0000000000006B3E ; Segment permissions: Read/Execute
LOAD:0000000000006B3E LOAD            segment byte public 'CODE' use64
LOAD:0000000000006B3E                 assume cs:LOAD
LOAD:0000000000006B3E                 ;org 6B3Eh
LOAD:0000000000006B3E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006B3E                 align 20h
LOAD:0000000000006B3E LOAD            ends
LOAD:0000000000006B3E
.eh_frame_hdr:0000000000006B40 ; ===========================================================================
.eh_frame_hdr:0000000000006B40
.eh_frame_hdr:0000000000006B40 ; Segment type: Pure data
.eh_frame_hdr:0000000000006B40 ; Segment permissions: Read
.eh_frame_hdr:0000000000006B40 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006B40                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006B40                 ;org 6B40h
.eh_frame_hdr:0000000000006B40 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006B41                 db  1Bh
.eh_frame_hdr:0000000000006B42                 db    3
.eh_frame_hdr:0000000000006B43                 db  3Bh ; ;
.eh_frame_hdr:0000000000006B44                 db 0DCh
.eh_frame_hdr:0000000000006B45                 db    2
.eh_frame_hdr:0000000000006B46                 db    0
.eh_frame_hdr:0000000000006B47                 db    0
.eh_frame_hdr:0000000000006B48                 db  5Ah ; Z
.eh_frame_hdr:0000000000006B49                 db    0
.eh_frame_hdr:0000000000006B4A                 db    0
.eh_frame_hdr:0000000000006B4B                 db    0
.eh_frame_hdr:0000000000006B4C                 db  30h ; 0
.eh_frame_hdr:0000000000006B4D                 db 0A9h
.eh_frame_hdr:0000000000006B4E                 db 0FFh
.eh_frame_hdr:0000000000006B4F                 db 0FFh
.eh_frame_hdr:0000000000006B50                 db  28h ; (
.eh_frame_hdr:0000000000006B51                 db    3
.eh_frame_hdr:0000000000006B52                 db    0
.eh_frame_hdr:0000000000006B53                 db    0
.eh_frame_hdr:0000000000006B54                 db  40h ; @
.eh_frame_hdr:0000000000006B55                 db 0ACh
.eh_frame_hdr:0000000000006B56                 db 0FFh
.eh_frame_hdr:0000000000006B57                 db 0FFh
.eh_frame_hdr:0000000000006B58                 db  50h ; P
.eh_frame_hdr:0000000000006B59                 db    3
.eh_frame_hdr:0000000000006B5A                 db    0
.eh_frame_hdr:0000000000006B5B                 db    0
.eh_frame_hdr:0000000000006B5C                 db  50h ; P
.eh_frame_hdr:0000000000006B5D                 db 0ACh
.eh_frame_hdr:0000000000006B5E                 db 0FFh
.eh_frame_hdr:0000000000006B5F                 db 0FFh
.eh_frame_hdr:0000000000006B60                 db  64h ; d
.eh_frame_hdr:0000000000006B61                 db    4
.eh_frame_hdr:0000000000006B62                 db    0
.eh_frame_hdr:0000000000006B63                 db    0
.eh_frame_hdr:0000000000006B64                 db 0D0h
.eh_frame_hdr:0000000000006B65                 db 0AFh
.eh_frame_hdr:0000000000006B66                 db 0FFh
.eh_frame_hdr:0000000000006B67                 db 0FFh
.eh_frame_hdr:0000000000006B68                 db 0F8h
.eh_frame_hdr:0000000000006B69                 db    2
.eh_frame_hdr:0000000000006B6A                 db    0
.eh_frame_hdr:0000000000006B6B                 db    0
.eh_frame_hdr:0000000000006B6C                 db 0E0h
.eh_frame_hdr:0000000000006B6D                 db 0B0h
.eh_frame_hdr:0000000000006B6E                 db 0FFh
.eh_frame_hdr:0000000000006B6F                 db 0FFh
.eh_frame_hdr:0000000000006B70                 db  68h ; h
.eh_frame_hdr:0000000000006B71                 db    3
.eh_frame_hdr:0000000000006B72                 db    0
.eh_frame_hdr:0000000000006B73                 db    0
.eh_frame_hdr:0000000000006B74                 db  90h
.eh_frame_hdr:0000000000006B75                 db 0B1h
.eh_frame_hdr:0000000000006B76                 db 0FFh
.eh_frame_hdr:0000000000006B77                 db 0FFh
.eh_frame_hdr:0000000000006B78                 db 0A4h
.eh_frame_hdr:0000000000006B79                 db    3
.eh_frame_hdr:0000000000006B7A                 db    0
.eh_frame_hdr:0000000000006B7B                 db    0
.eh_frame_hdr:0000000000006B7C                 db  20h
.eh_frame_hdr:0000000000006B7D                 db 0B2h
.eh_frame_hdr:0000000000006B7E                 db 0FFh
.eh_frame_hdr:0000000000006B7F                 db 0FFh
.eh_frame_hdr:0000000000006B80                 db 0D4h
.eh_frame_hdr:0000000000006B81                 db    3
.eh_frame_hdr:0000000000006B82                 db    0
.eh_frame_hdr:0000000000006B83                 db    0
.eh_frame_hdr:0000000000006B84                 db    0
.eh_frame_hdr:0000000000006B85                 db 0B8h
.eh_frame_hdr:0000000000006B86                 db 0FFh
.eh_frame_hdr:0000000000006B87                 db 0FFh
.eh_frame_hdr:0000000000006B88                 db  38h ; 8
.eh_frame_hdr:0000000000006B89                 db    4
.eh_frame_hdr:0000000000006B8A                 db    0
.eh_frame_hdr:0000000000006B8B                 db    0
.eh_frame_hdr:0000000000006B8C                 db 0A0h
.eh_frame_hdr:0000000000006B8D                 db 0BCh
.eh_frame_hdr:0000000000006B8E                 db 0FFh
.eh_frame_hdr:0000000000006B8F                 db 0FFh
.eh_frame_hdr:0000000000006B90                 db 0B0h
.eh_frame_hdr:0000000000006B91                 db    4
.eh_frame_hdr:0000000000006B92                 db    0
.eh_frame_hdr:0000000000006B93                 db    0
.eh_frame_hdr:0000000000006B94                 db 0B0h
.eh_frame_hdr:0000000000006B95                 db 0BCh
.eh_frame_hdr:0000000000006B96                 db 0FFh
.eh_frame_hdr:0000000000006B97                 db 0FFh
.eh_frame_hdr:0000000000006B98                 db 0C4h
.eh_frame_hdr:0000000000006B99                 db    4
.eh_frame_hdr:0000000000006B9A                 db    0
.eh_frame_hdr:0000000000006B9B                 db    0
.eh_frame_hdr:0000000000006B9C                 db 0C0h
.eh_frame_hdr:0000000000006B9D                 db 0BCh
.eh_frame_hdr:0000000000006B9E                 db 0FFh
.eh_frame_hdr:0000000000006B9F                 db 0FFh
.eh_frame_hdr:0000000000006BA0                 db 0D8h
.eh_frame_hdr:0000000000006BA1                 db    4
.eh_frame_hdr:0000000000006BA2                 db    0
.eh_frame_hdr:0000000000006BA3                 db    0
.eh_frame_hdr:0000000000006BA4                 db  70h ; p
.eh_frame_hdr:0000000000006BA5                 db 0BDh
.eh_frame_hdr:0000000000006BA6                 db 0FFh
.eh_frame_hdr:0000000000006BA7                 db 0FFh
.eh_frame_hdr:0000000000006BA8                 db    8
.eh_frame_hdr:0000000000006BA9                 db    5
.eh_frame_hdr:0000000000006BAA                 db    0
.eh_frame_hdr:0000000000006BAB                 db    0
.eh_frame_hdr:0000000000006BAC                 db  80h
.eh_frame_hdr:0000000000006BAD                 db 0BDh
.eh_frame_hdr:0000000000006BAE                 db 0FFh
.eh_frame_hdr:0000000000006BAF                 db 0FFh
.eh_frame_hdr:0000000000006BB0                 db  1Ch
.eh_frame_hdr:0000000000006BB1                 db    5
.eh_frame_hdr:0000000000006BB2                 db    0
.eh_frame_hdr:0000000000006BB3                 db    0
.eh_frame_hdr:0000000000006BB4                 db 0B0h
.eh_frame_hdr:0000000000006BB5                 db 0BDh
.eh_frame_hdr:0000000000006BB6                 db 0FFh
.eh_frame_hdr:0000000000006BB7                 db 0FFh
.eh_frame_hdr:0000000000006BB8                 db  38h ; 8
.eh_frame_hdr:0000000000006BB9                 db    5
.eh_frame_hdr:0000000000006BBA                 db    0
.eh_frame_hdr:0000000000006BBB                 db    0
.eh_frame_hdr:0000000000006BBC                 db  50h ; P
.eh_frame_hdr:0000000000006BBD                 db 0BEh
.eh_frame_hdr:0000000000006BBE                 db 0FFh
.eh_frame_hdr:0000000000006BBF                 db 0FFh
.eh_frame_hdr:0000000000006BC0                 db  68h ; h
.eh_frame_hdr:0000000000006BC1                 db    5
.eh_frame_hdr:0000000000006BC2                 db    0
.eh_frame_hdr:0000000000006BC3                 db    0
.eh_frame_hdr:0000000000006BC4                 db 0B0h
.eh_frame_hdr:0000000000006BC5                 db 0BEh
.eh_frame_hdr:0000000000006BC6                 db 0FFh
.eh_frame_hdr:0000000000006BC7                 db 0FFh
.eh_frame_hdr:0000000000006BC8                 db  88h
.eh_frame_hdr:0000000000006BC9                 db    5
.eh_frame_hdr:0000000000006BCA                 db    0
.eh_frame_hdr:0000000000006BCB                 db    0
.eh_frame_hdr:0000000000006BCC                 db    0
.eh_frame_hdr:0000000000006BCD                 db 0BFh
.eh_frame_hdr:0000000000006BCE                 db 0FFh
.eh_frame_hdr:0000000000006BCF                 db 0FFh
.eh_frame_hdr:0000000000006BD0                 db 0A0h
.eh_frame_hdr:0000000000006BD1                 db    5
.eh_frame_hdr:0000000000006BD2                 db    0
.eh_frame_hdr:0000000000006BD3                 db    0
.eh_frame_hdr:0000000000006BD4                 db  10h
.eh_frame_hdr:0000000000006BD5                 db 0BFh
.eh_frame_hdr:0000000000006BD6                 db 0FFh
.eh_frame_hdr:0000000000006BD7                 db 0FFh
.eh_frame_hdr:0000000000006BD8                 db 0B4h
.eh_frame_hdr:0000000000006BD9                 db    5
.eh_frame_hdr:0000000000006BDA                 db    0
.eh_frame_hdr:0000000000006BDB                 db    0
.eh_frame_hdr:0000000000006BDC                 db  20h
.eh_frame_hdr:0000000000006BDD                 db 0C0h
.eh_frame_hdr:0000000000006BDE                 db 0FFh
.eh_frame_hdr:0000000000006BDF                 db 0FFh
.eh_frame_hdr:0000000000006BE0                 db  18h
.eh_frame_hdr:0000000000006BE1                 db    6
.eh_frame_hdr:0000000000006BE2                 db    0
.eh_frame_hdr:0000000000006BE3                 db    0
.eh_frame_hdr:0000000000006BE4                 db  30h ; 0
.eh_frame_hdr:0000000000006BE5                 db 0C0h
.eh_frame_hdr:0000000000006BE6                 db 0FFh
.eh_frame_hdr:0000000000006BE7                 db 0FFh
.eh_frame_hdr:0000000000006BE8                 db  2Ch ; ,
.eh_frame_hdr:0000000000006BE9                 db    6
.eh_frame_hdr:0000000000006BEA                 db    0
.eh_frame_hdr:0000000000006BEB                 db    0
.eh_frame_hdr:0000000000006BEC                 db  40h ; @
.eh_frame_hdr:0000000000006BED                 db 0C0h
.eh_frame_hdr:0000000000006BEE                 db 0FFh
.eh_frame_hdr:0000000000006BEF                 db 0FFh
.eh_frame_hdr:0000000000006BF0                 db  40h ; @
.eh_frame_hdr:0000000000006BF1                 db    6
.eh_frame_hdr:0000000000006BF2                 db    0
.eh_frame_hdr:0000000000006BF3                 db    0
.eh_frame_hdr:0000000000006BF4                 db  80h
.eh_frame_hdr:0000000000006BF5                 db 0C0h
.eh_frame_hdr:0000000000006BF6                 db 0FFh
.eh_frame_hdr:0000000000006BF7                 db 0FFh
.eh_frame_hdr:0000000000006BF8                 db  70h ; p
.eh_frame_hdr:0000000000006BF9                 db    6
.eh_frame_hdr:0000000000006BFA                 db    0
.eh_frame_hdr:0000000000006BFB                 db    0
.eh_frame_hdr:0000000000006BFC                 db  20h
.eh_frame_hdr:0000000000006BFD                 db 0C1h
.eh_frame_hdr:0000000000006BFE                 db 0FFh
.eh_frame_hdr:0000000000006BFF                 db 0FFh
.eh_frame_hdr:0000000000006C00                 db  90h
.eh_frame_hdr:0000000000006C01                 db    6
.eh_frame_hdr:0000000000006C02                 db    0
.eh_frame_hdr:0000000000006C03                 db    0
.eh_frame_hdr:0000000000006C04                 db  10h
.eh_frame_hdr:0000000000006C05                 db 0C2h
.eh_frame_hdr:0000000000006C06                 db 0FFh
.eh_frame_hdr:0000000000006C07                 db 0FFh
.eh_frame_hdr:0000000000006C08                 db 0D4h
.eh_frame_hdr:0000000000006C09                 db    6
.eh_frame_hdr:0000000000006C0A                 db    0
.eh_frame_hdr:0000000000006C0B                 db    0
.eh_frame_hdr:0000000000006C0C                 db  50h ; P
.eh_frame_hdr:0000000000006C0D                 db 0D4h
.eh_frame_hdr:0000000000006C0E                 db 0FFh
.eh_frame_hdr:0000000000006C0F                 db 0FFh
.eh_frame_hdr:0000000000006C10                 db  4Ch ; L
.eh_frame_hdr:0000000000006C11                 db    7
.eh_frame_hdr:0000000000006C12                 db    0
.eh_frame_hdr:0000000000006C13                 db    0
.eh_frame_hdr:0000000000006C14                 db    0
.eh_frame_hdr:0000000000006C15                 db 0D6h
.eh_frame_hdr:0000000000006C16                 db 0FFh
.eh_frame_hdr:0000000000006C17                 db 0FFh
.eh_frame_hdr:0000000000006C18                 db 0B8h
.eh_frame_hdr:0000000000006C19                 db    7
.eh_frame_hdr:0000000000006C1A                 db    0
.eh_frame_hdr:0000000000006C1B                 db    0
.eh_frame_hdr:0000000000006C1C                 db  40h ; @
.eh_frame_hdr:0000000000006C1D                 db 0D6h
.eh_frame_hdr:0000000000006C1E                 db 0FFh
.eh_frame_hdr:0000000000006C1F                 db 0FFh
.eh_frame_hdr:0000000000006C20                 db 0E4h
.eh_frame_hdr:0000000000006C21                 db    7
.eh_frame_hdr:0000000000006C22                 db    0
.eh_frame_hdr:0000000000006C23                 db    0
.eh_frame_hdr:0000000000006C24                 db  60h ; `
.eh_frame_hdr:0000000000006C25                 db 0D6h
.eh_frame_hdr:0000000000006C26                 db 0FFh
.eh_frame_hdr:0000000000006C27                 db 0FFh
.eh_frame_hdr:0000000000006C28                 db 0F8h
.eh_frame_hdr:0000000000006C29                 db    7
.eh_frame_hdr:0000000000006C2A                 db    0
.eh_frame_hdr:0000000000006C2B                 db    0
.eh_frame_hdr:0000000000006C2C                 db  80h
.eh_frame_hdr:0000000000006C2D                 db 0D6h
.eh_frame_hdr:0000000000006C2E                 db 0FFh
.eh_frame_hdr:0000000000006C2F                 db 0FFh
.eh_frame_hdr:0000000000006C30                 db  0Ch
.eh_frame_hdr:0000000000006C31                 db    8
.eh_frame_hdr:0000000000006C32                 db    0
.eh_frame_hdr:0000000000006C33                 db    0
.eh_frame_hdr:0000000000006C34                 db 0C0h
.eh_frame_hdr:0000000000006C35                 db 0D6h
.eh_frame_hdr:0000000000006C36                 db 0FFh
.eh_frame_hdr:0000000000006C37                 db 0FFh
.eh_frame_hdr:0000000000006C38                 db  20h
.eh_frame_hdr:0000000000006C39                 db    8
.eh_frame_hdr:0000000000006C3A                 db    0
.eh_frame_hdr:0000000000006C3B                 db    0
.eh_frame_hdr:0000000000006C3C                 db 0E0h
.eh_frame_hdr:0000000000006C3D                 db 0D6h
.eh_frame_hdr:0000000000006C3E                 db 0FFh
.eh_frame_hdr:0000000000006C3F                 db 0FFh
.eh_frame_hdr:0000000000006C40                 db  34h ; 4
.eh_frame_hdr:0000000000006C41                 db    8
.eh_frame_hdr:0000000000006C42                 db    0
.eh_frame_hdr:0000000000006C43                 db    0
.eh_frame_hdr:0000000000006C44                 db  10h
.eh_frame_hdr:0000000000006C45                 db 0D7h
.eh_frame_hdr:0000000000006C46                 db 0FFh
.eh_frame_hdr:0000000000006C47                 db 0FFh
.eh_frame_hdr:0000000000006C48                 db  48h ; H
.eh_frame_hdr:0000000000006C49                 db    8
.eh_frame_hdr:0000000000006C4A                 db    0
.eh_frame_hdr:0000000000006C4B                 db    0
.eh_frame_hdr:0000000000006C4C                 db  90h
.eh_frame_hdr:0000000000006C4D                 db 0D7h
.eh_frame_hdr:0000000000006C4E                 db 0FFh
.eh_frame_hdr:0000000000006C4F                 db 0FFh
.eh_frame_hdr:0000000000006C50                 db  9Ch
.eh_frame_hdr:0000000000006C51                 db    8
.eh_frame_hdr:0000000000006C52                 db    0
.eh_frame_hdr:0000000000006C53                 db    0
.eh_frame_hdr:0000000000006C54                 db  80h
.eh_frame_hdr:0000000000006C55                 db 0D8h
.eh_frame_hdr:0000000000006C56                 db 0FFh
.eh_frame_hdr:0000000000006C57                 db 0FFh
.eh_frame_hdr:0000000000006C58                 db    8
.eh_frame_hdr:0000000000006C59                 db    9
.eh_frame_hdr:0000000000006C5A                 db    0
.eh_frame_hdr:0000000000006C5B                 db    0
.eh_frame_hdr:0000000000006C5C                 db  90h
.eh_frame_hdr:0000000000006C5D                 db 0D8h
.eh_frame_hdr:0000000000006C5E                 db 0FFh
.eh_frame_hdr:0000000000006C5F                 db 0FFh
.eh_frame_hdr:0000000000006C60                 db  1Ch
.eh_frame_hdr:0000000000006C61                 db    9
.eh_frame_hdr:0000000000006C62                 db    0
.eh_frame_hdr:0000000000006C63                 db    0
.eh_frame_hdr:0000000000006C64                 db  30h ; 0
.eh_frame_hdr:0000000000006C65                 db 0D9h
.eh_frame_hdr:0000000000006C66                 db 0FFh
.eh_frame_hdr:0000000000006C67                 db 0FFh
.eh_frame_hdr:0000000000006C68                 db  48h ; H
.eh_frame_hdr:0000000000006C69                 db    9
.eh_frame_hdr:0000000000006C6A                 db    0
.eh_frame_hdr:0000000000006C6B                 db    0
.eh_frame_hdr:0000000000006C6C                 db  50h ; P
.eh_frame_hdr:0000000000006C6D                 db 0D9h
.eh_frame_hdr:0000000000006C6E                 db 0FFh
.eh_frame_hdr:0000000000006C6F                 db 0FFh
.eh_frame_hdr:0000000000006C70                 db  5Ch ; \
.eh_frame_hdr:0000000000006C71                 db    9
.eh_frame_hdr:0000000000006C72                 db    0
.eh_frame_hdr:0000000000006C73                 db    0
.eh_frame_hdr:0000000000006C74                 db  60h ; `
.eh_frame_hdr:0000000000006C75                 db 0D9h
.eh_frame_hdr:0000000000006C76                 db 0FFh
.eh_frame_hdr:0000000000006C77                 db 0FFh
.eh_frame_hdr:0000000000006C78                 db  70h ; p
.eh_frame_hdr:0000000000006C79                 db    9
.eh_frame_hdr:0000000000006C7A                 db    0
.eh_frame_hdr:0000000000006C7B                 db    0
.eh_frame_hdr:0000000000006C7C                 db  80h
.eh_frame_hdr:0000000000006C7D                 db 0D9h
.eh_frame_hdr:0000000000006C7E                 db 0FFh
.eh_frame_hdr:0000000000006C7F                 db 0FFh
.eh_frame_hdr:0000000000006C80                 db  84h
.eh_frame_hdr:0000000000006C81                 db    9
.eh_frame_hdr:0000000000006C82                 db    0
.eh_frame_hdr:0000000000006C83                 db    0
.eh_frame_hdr:0000000000006C84                 db 0A0h
.eh_frame_hdr:0000000000006C85                 db 0D9h
.eh_frame_hdr:0000000000006C86                 db 0FFh
.eh_frame_hdr:0000000000006C87                 db 0FFh
.eh_frame_hdr:0000000000006C88                 db  98h
.eh_frame_hdr:0000000000006C89                 db    9
.eh_frame_hdr:0000000000006C8A                 db    0
.eh_frame_hdr:0000000000006C8B                 db    0
.eh_frame_hdr:0000000000006C8C                 db  30h ; 0
.eh_frame_hdr:0000000000006C8D                 db 0DAh
.eh_frame_hdr:0000000000006C8E                 db 0FFh
.eh_frame_hdr:0000000000006C8F                 db 0FFh
.eh_frame_hdr:0000000000006C90                 db 0B4h
.eh_frame_hdr:0000000000006C91                 db    9
.eh_frame_hdr:0000000000006C92                 db    0
.eh_frame_hdr:0000000000006C93                 db    0
.eh_frame_hdr:0000000000006C94                 db 0C0h
.eh_frame_hdr:0000000000006C95                 db 0DAh
.eh_frame_hdr:0000000000006C96                 db 0FFh
.eh_frame_hdr:0000000000006C97                 db 0FFh
.eh_frame_hdr:0000000000006C98                 db 0D0h
.eh_frame_hdr:0000000000006C99                 db    9
.eh_frame_hdr:0000000000006C9A                 db    0
.eh_frame_hdr:0000000000006C9B                 db    0
.eh_frame_hdr:0000000000006C9C                 db 0D0h
.eh_frame_hdr:0000000000006C9D                 db 0DAh
.eh_frame_hdr:0000000000006C9E                 db 0FFh
.eh_frame_hdr:0000000000006C9F                 db 0FFh
.eh_frame_hdr:0000000000006CA0                 db 0E4h
.eh_frame_hdr:0000000000006CA1                 db    9
.eh_frame_hdr:0000000000006CA2                 db    0
.eh_frame_hdr:0000000000006CA3                 db    0
.eh_frame_hdr:0000000000006CA4                 db 0E0h
.eh_frame_hdr:0000000000006CA5                 db 0DAh
.eh_frame_hdr:0000000000006CA6                 db 0FFh
.eh_frame_hdr:0000000000006CA7                 db 0FFh
.eh_frame_hdr:0000000000006CA8                 db 0F8h
.eh_frame_hdr:0000000000006CA9                 db    9
.eh_frame_hdr:0000000000006CAA                 db    0
.eh_frame_hdr:0000000000006CAB                 db    0
.eh_frame_hdr:0000000000006CAC                 db  80h
.eh_frame_hdr:0000000000006CAD                 db 0DBh
.eh_frame_hdr:0000000000006CAE                 db 0FFh
.eh_frame_hdr:0000000000006CAF                 db 0FFh
.eh_frame_hdr:0000000000006CB0                 db  14h
.eh_frame_hdr:0000000000006CB1                 db  0Ah
.eh_frame_hdr:0000000000006CB2                 db    0
.eh_frame_hdr:0000000000006CB3                 db    0
.eh_frame_hdr:0000000000006CB4                 db  90h
.eh_frame_hdr:0000000000006CB5                 db 0DBh
.eh_frame_hdr:0000000000006CB6                 db 0FFh
.eh_frame_hdr:0000000000006CB7                 db 0FFh
.eh_frame_hdr:0000000000006CB8                 db  28h ; (
.eh_frame_hdr:0000000000006CB9                 db  0Ah
.eh_frame_hdr:0000000000006CBA                 db    0
.eh_frame_hdr:0000000000006CBB                 db    0
.eh_frame_hdr:0000000000006CBC                 db 0B0h
.eh_frame_hdr:0000000000006CBD                 db 0DBh
.eh_frame_hdr:0000000000006CBE                 db 0FFh
.eh_frame_hdr:0000000000006CBF                 db 0FFh
.eh_frame_hdr:0000000000006CC0                 db  3Ch ; <
.eh_frame_hdr:0000000000006CC1                 db  0Ah
.eh_frame_hdr:0000000000006CC2                 db    0
.eh_frame_hdr:0000000000006CC3                 db    0
.eh_frame_hdr:0000000000006CC4                 db 0C0h
.eh_frame_hdr:0000000000006CC5                 db 0DBh
.eh_frame_hdr:0000000000006CC6                 db 0FFh
.eh_frame_hdr:0000000000006CC7                 db 0FFh
.eh_frame_hdr:0000000000006CC8                 db  50h ; P
.eh_frame_hdr:0000000000006CC9                 db  0Ah
.eh_frame_hdr:0000000000006CCA                 db    0
.eh_frame_hdr:0000000000006CCB                 db    0
.eh_frame_hdr:0000000000006CCC                 db  50h ; P
.eh_frame_hdr:0000000000006CCD                 db 0DCh
.eh_frame_hdr:0000000000006CCE                 db 0FFh
.eh_frame_hdr:0000000000006CCF                 db 0FFh
.eh_frame_hdr:0000000000006CD0                 db  6Ch ; l
.eh_frame_hdr:0000000000006CD1                 db  0Ah
.eh_frame_hdr:0000000000006CD2                 db    0
.eh_frame_hdr:0000000000006CD3                 db    0
.eh_frame_hdr:0000000000006CD4                 db 0F0h
.eh_frame_hdr:0000000000006CD5                 db 0DCh
.eh_frame_hdr:0000000000006CD6                 db 0FFh
.eh_frame_hdr:0000000000006CD7                 db 0FFh
.eh_frame_hdr:0000000000006CD8                 db  88h
.eh_frame_hdr:0000000000006CD9                 db  0Ah
.eh_frame_hdr:0000000000006CDA                 db    0
.eh_frame_hdr:0000000000006CDB                 db    0
.eh_frame_hdr:0000000000006CDC                 db    0
.eh_frame_hdr:0000000000006CDD                 db 0DDh
.eh_frame_hdr:0000000000006CDE                 db 0FFh
.eh_frame_hdr:0000000000006CDF                 db 0FFh
.eh_frame_hdr:0000000000006CE0                 db  9Ch
.eh_frame_hdr:0000000000006CE1                 db  0Ah
.eh_frame_hdr:0000000000006CE2                 db    0
.eh_frame_hdr:0000000000006CE3                 db    0
.eh_frame_hdr:0000000000006CE4                 db  20h
.eh_frame_hdr:0000000000006CE5                 db 0DDh
.eh_frame_hdr:0000000000006CE6                 db 0FFh
.eh_frame_hdr:0000000000006CE7                 db 0FFh
.eh_frame_hdr:0000000000006CE8                 db 0B0h
.eh_frame_hdr:0000000000006CE9                 db  0Ah
.eh_frame_hdr:0000000000006CEA                 db    0
.eh_frame_hdr:0000000000006CEB                 db    0
.eh_frame_hdr:0000000000006CEC                 db  40h ; @
.eh_frame_hdr:0000000000006CED                 db 0DDh
.eh_frame_hdr:0000000000006CEE                 db 0FFh
.eh_frame_hdr:0000000000006CEF                 db 0FFh
.eh_frame_hdr:0000000000006CF0                 db 0C4h
.eh_frame_hdr:0000000000006CF1                 db  0Ah
.eh_frame_hdr:0000000000006CF2                 db    0
.eh_frame_hdr:0000000000006CF3                 db    0
.eh_frame_hdr:0000000000006CF4                 db  50h ; P
.eh_frame_hdr:0000000000006CF5                 db 0DDh
.eh_frame_hdr:0000000000006CF6                 db 0FFh
.eh_frame_hdr:0000000000006CF7                 db 0FFh
.eh_frame_hdr:0000000000006CF8                 db 0D8h
.eh_frame_hdr:0000000000006CF9                 db  0Ah
.eh_frame_hdr:0000000000006CFA                 db    0
.eh_frame_hdr:0000000000006CFB                 db    0
.eh_frame_hdr:0000000000006CFC                 db  70h ; p
.eh_frame_hdr:0000000000006CFD                 db 0DDh
.eh_frame_hdr:0000000000006CFE                 db 0FFh
.eh_frame_hdr:0000000000006CFF                 db 0FFh
.eh_frame_hdr:0000000000006D00                 db 0ECh
.eh_frame_hdr:0000000000006D01                 db  0Ah
.eh_frame_hdr:0000000000006D02                 db    0
.eh_frame_hdr:0000000000006D03                 db    0
.eh_frame_hdr:0000000000006D04                 db  90h
.eh_frame_hdr:0000000000006D05                 db 0DDh
.eh_frame_hdr:0000000000006D06                 db 0FFh
.eh_frame_hdr:0000000000006D07                 db 0FFh
.eh_frame_hdr:0000000000006D08                 db    0
.eh_frame_hdr:0000000000006D09                 db  0Bh
.eh_frame_hdr:0000000000006D0A                 db    0
.eh_frame_hdr:0000000000006D0B                 db    0
.eh_frame_hdr:0000000000006D0C                 db 0B0h
.eh_frame_hdr:0000000000006D0D                 db 0DDh
.eh_frame_hdr:0000000000006D0E                 db 0FFh
.eh_frame_hdr:0000000000006D0F                 db 0FFh
.eh_frame_hdr:0000000000006D10                 db  18h
.eh_frame_hdr:0000000000006D11                 db  0Bh
.eh_frame_hdr:0000000000006D12                 db    0
.eh_frame_hdr:0000000000006D13                 db    0
.eh_frame_hdr:0000000000006D14                 db 0C0h
.eh_frame_hdr:0000000000006D15                 db 0DDh
.eh_frame_hdr:0000000000006D16                 db 0FFh
.eh_frame_hdr:0000000000006D17                 db 0FFh
.eh_frame_hdr:0000000000006D18                 db  30h ; 0
.eh_frame_hdr:0000000000006D19                 db  0Bh
.eh_frame_hdr:0000000000006D1A                 db    0
.eh_frame_hdr:0000000000006D1B                 db    0
.eh_frame_hdr:0000000000006D1C                 db 0E0h
.eh_frame_hdr:0000000000006D1D                 db 0E1h
.eh_frame_hdr:0000000000006D1E                 db 0FFh
.eh_frame_hdr:0000000000006D1F                 db 0FFh
.eh_frame_hdr:0000000000006D20                 db  44h ; D
.eh_frame_hdr:0000000000006D21                 db  0Ch
.eh_frame_hdr:0000000000006D22                 db    0
.eh_frame_hdr:0000000000006D23                 db    0
.eh_frame_hdr:0000000000006D24                 db    0
.eh_frame_hdr:0000000000006D25                 db 0E2h
.eh_frame_hdr:0000000000006D26                 db 0FFh
.eh_frame_hdr:0000000000006D27                 db 0FFh
.eh_frame_hdr:0000000000006D28                 db  58h ; X
.eh_frame_hdr:0000000000006D29                 db  0Ch
.eh_frame_hdr:0000000000006D2A                 db    0
.eh_frame_hdr:0000000000006D2B                 db    0
.eh_frame_hdr:0000000000006D2C                 db  80h
.eh_frame_hdr:0000000000006D2D                 db 0E2h
.eh_frame_hdr:0000000000006D2E                 db 0FFh
.eh_frame_hdr:0000000000006D2F                 db 0FFh
.eh_frame_hdr:0000000000006D30                 db  74h ; t
.eh_frame_hdr:0000000000006D31                 db  0Ch
.eh_frame_hdr:0000000000006D32                 db    0
.eh_frame_hdr:0000000000006D33                 db    0
.eh_frame_hdr:0000000000006D34                 db  60h ; `
.eh_frame_hdr:0000000000006D35                 db 0E3h
.eh_frame_hdr:0000000000006D36                 db 0FFh
.eh_frame_hdr:0000000000006D37                 db 0FFh
.eh_frame_hdr:0000000000006D38                 db 0A0h
.eh_frame_hdr:0000000000006D39                 db  0Ch
.eh_frame_hdr:0000000000006D3A                 db    0
.eh_frame_hdr:0000000000006D3B                 db    0
.eh_frame_hdr:0000000000006D3C                 db 0E0h
.eh_frame_hdr:0000000000006D3D                 db 0E3h
.eh_frame_hdr:0000000000006D3E                 db 0FFh
.eh_frame_hdr:0000000000006D3F                 db 0FFh
.eh_frame_hdr:0000000000006D40                 db 0C0h
.eh_frame_hdr:0000000000006D41                 db  0Ch
.eh_frame_hdr:0000000000006D42                 db    0
.eh_frame_hdr:0000000000006D43                 db    0
.eh_frame_hdr:0000000000006D44                 db    0
.eh_frame_hdr:0000000000006D45                 db 0E4h
.eh_frame_hdr:0000000000006D46                 db 0FFh
.eh_frame_hdr:0000000000006D47                 db 0FFh
.eh_frame_hdr:0000000000006D48                 db 0DCh
.eh_frame_hdr:0000000000006D49                 db  0Ch
.eh_frame_hdr:0000000000006D4A                 db    0
.eh_frame_hdr:0000000000006D4B                 db    0
.eh_frame_hdr:0000000000006D4C                 db  30h ; 0
.eh_frame_hdr:0000000000006D4D                 db 0E4h
.eh_frame_hdr:0000000000006D4E                 db 0FFh
.eh_frame_hdr:0000000000006D4F                 db 0FFh
.eh_frame_hdr:0000000000006D50                 db 0F0h
.eh_frame_hdr:0000000000006D51                 db  0Ch
.eh_frame_hdr:0000000000006D52                 db    0
.eh_frame_hdr:0000000000006D53                 db    0
.eh_frame_hdr:0000000000006D54                 db  40h ; @
.eh_frame_hdr:0000000000006D55                 db 0E4h
.eh_frame_hdr:0000000000006D56                 db 0FFh
.eh_frame_hdr:0000000000006D57                 db 0FFh
.eh_frame_hdr:0000000000006D58                 db    4
.eh_frame_hdr:0000000000006D59                 db  0Dh
.eh_frame_hdr:0000000000006D5A                 db    0
.eh_frame_hdr:0000000000006D5B                 db    0
.eh_frame_hdr:0000000000006D5C                 db  80h
.eh_frame_hdr:0000000000006D5D                 db 0E4h
.eh_frame_hdr:0000000000006D5E                 db 0FFh
.eh_frame_hdr:0000000000006D5F                 db 0FFh
.eh_frame_hdr:0000000000006D60                 db  28h ; (
.eh_frame_hdr:0000000000006D61                 db  0Dh
.eh_frame_hdr:0000000000006D62                 db    0
.eh_frame_hdr:0000000000006D63                 db    0
.eh_frame_hdr:0000000000006D64                 db 0B0h
.eh_frame_hdr:0000000000006D65                 db 0E4h
.eh_frame_hdr:0000000000006D66                 db 0FFh
.eh_frame_hdr:0000000000006D67                 db 0FFh
.eh_frame_hdr:0000000000006D68                 db  3Ch ; <
.eh_frame_hdr:0000000000006D69                 db  0Dh
.eh_frame_hdr:0000000000006D6A                 db    0
.eh_frame_hdr:0000000000006D6B                 db    0
.eh_frame_hdr:0000000000006D6C                 db  40h ; @
.eh_frame_hdr:0000000000006D6D                 db 0E5h
.eh_frame_hdr:0000000000006D6E                 db 0FFh
.eh_frame_hdr:0000000000006D6F                 db 0FFh
.eh_frame_hdr:0000000000006D70                 db  54h ; T
.eh_frame_hdr:0000000000006D71                 db  0Dh
.eh_frame_hdr:0000000000006D72                 db    0
.eh_frame_hdr:0000000000006D73                 db    0
.eh_frame_hdr:0000000000006D74                 db  90h
.eh_frame_hdr:0000000000006D75                 db 0E5h
.eh_frame_hdr:0000000000006D76                 db 0FFh
.eh_frame_hdr:0000000000006D77                 db 0FFh
.eh_frame_hdr:0000000000006D78                 db  6Ch ; l
.eh_frame_hdr:0000000000006D79                 db  0Dh
.eh_frame_hdr:0000000000006D7A                 db    0
.eh_frame_hdr:0000000000006D7B                 db    0
.eh_frame_hdr:0000000000006D7C                 db 0B0h
.eh_frame_hdr:0000000000006D7D                 db 0E5h
.eh_frame_hdr:0000000000006D7E                 db 0FFh
.eh_frame_hdr:0000000000006D7F                 db 0FFh
.eh_frame_hdr:0000000000006D80                 db  88h
.eh_frame_hdr:0000000000006D81                 db  0Dh
.eh_frame_hdr:0000000000006D82                 db    0
.eh_frame_hdr:0000000000006D83                 db    0
.eh_frame_hdr:0000000000006D84                 db 0E0h
.eh_frame_hdr:0000000000006D85                 db 0E5h
.eh_frame_hdr:0000000000006D86                 db 0FFh
.eh_frame_hdr:0000000000006D87                 db 0FFh
.eh_frame_hdr:0000000000006D88                 db 0A4h
.eh_frame_hdr:0000000000006D89                 db  0Dh
.eh_frame_hdr:0000000000006D8A                 db    0
.eh_frame_hdr:0000000000006D8B                 db    0
.eh_frame_hdr:0000000000006D8C                 db  10h
.eh_frame_hdr:0000000000006D8D                 db 0E6h
.eh_frame_hdr:0000000000006D8E                 db 0FFh
.eh_frame_hdr:0000000000006D8F                 db 0FFh
.eh_frame_hdr:0000000000006D90                 db 0CCh
.eh_frame_hdr:0000000000006D91                 db  0Dh
.eh_frame_hdr:0000000000006D92                 db    0
.eh_frame_hdr:0000000000006D93                 db    0
.eh_frame_hdr:0000000000006D94                 db  30h ; 0
.eh_frame_hdr:0000000000006D95                 db 0E6h
.eh_frame_hdr:0000000000006D96                 db 0FFh
.eh_frame_hdr:0000000000006D97                 db 0FFh
.eh_frame_hdr:0000000000006D98                 db 0E8h
.eh_frame_hdr:0000000000006D99                 db  0Dh
.eh_frame_hdr:0000000000006D9A                 db    0
.eh_frame_hdr:0000000000006D9B                 db    0
.eh_frame_hdr:0000000000006D9C                 db  70h ; p
.eh_frame_hdr:0000000000006D9D                 db 0E6h
.eh_frame_hdr:0000000000006D9E                 db 0FFh
.eh_frame_hdr:0000000000006D9F                 db 0FFh
.eh_frame_hdr:0000000000006DA0                 db    0
.eh_frame_hdr:0000000000006DA1                 db  0Eh
.eh_frame_hdr:0000000000006DA2                 db    0
.eh_frame_hdr:0000000000006DA3                 db    0
.eh_frame_hdr:0000000000006DA4                 db  30h ; 0
.eh_frame_hdr:0000000000006DA5                 db 0E7h
.eh_frame_hdr:0000000000006DA6                 db 0FFh
.eh_frame_hdr:0000000000006DA7                 db 0FFh
.eh_frame_hdr:0000000000006DA8                 db  3Ch ; <
.eh_frame_hdr:0000000000006DA9                 db  0Eh
.eh_frame_hdr:0000000000006DAA                 db    0
.eh_frame_hdr:0000000000006DAB                 db    0
.eh_frame_hdr:0000000000006DAC                 db  80h
.eh_frame_hdr:0000000000006DAD                 db 0E7h
.eh_frame_hdr:0000000000006DAE                 db 0FFh
.eh_frame_hdr:0000000000006DAF                 db 0FFh
.eh_frame_hdr:0000000000006DB0                 db  78h ; x
.eh_frame_hdr:0000000000006DB1                 db  0Eh
.eh_frame_hdr:0000000000006DB2                 db    0
.eh_frame_hdr:0000000000006DB3                 db    0
.eh_frame_hdr:0000000000006DB4                 db 0D0h
.eh_frame_hdr:0000000000006DB5                 db 0E7h
.eh_frame_hdr:0000000000006DB6                 db 0FFh
.eh_frame_hdr:0000000000006DB7                 db 0FFh
.eh_frame_hdr:0000000000006DB8                 db 0B8h
.eh_frame_hdr:0000000000006DB9                 db  0Eh
.eh_frame_hdr:0000000000006DBA                 db    0
.eh_frame_hdr:0000000000006DBB                 db    0
.eh_frame_hdr:0000000000006DBC                 db  50h ; P
.eh_frame_hdr:0000000000006DBD                 db 0E8h
.eh_frame_hdr:0000000000006DBE                 db 0FFh
.eh_frame_hdr:0000000000006DBF                 db 0FFh
.eh_frame_hdr:0000000000006DC0                 db 0F0h
.eh_frame_hdr:0000000000006DC1                 db  0Eh
.eh_frame_hdr:0000000000006DC2                 db    0
.eh_frame_hdr:0000000000006DC3                 db    0
.eh_frame_hdr:0000000000006DC4                 db 0D0h
.eh_frame_hdr:0000000000006DC5                 db 0EAh
.eh_frame_hdr:0000000000006DC6                 db 0FFh
.eh_frame_hdr:0000000000006DC7                 db 0FFh
.eh_frame_hdr:0000000000006DC8                 db  28h ; (
.eh_frame_hdr:0000000000006DC9                 db  0Fh
.eh_frame_hdr:0000000000006DCA                 db    0
.eh_frame_hdr:0000000000006DCB                 db    0
.eh_frame_hdr:0000000000006DCC                 db  10h
.eh_frame_hdr:0000000000006DCD                 db 0EBh
.eh_frame_hdr:0000000000006DCE                 db 0FFh
.eh_frame_hdr:0000000000006DCF                 db 0FFh
.eh_frame_hdr:0000000000006DD0                 db  48h ; H
.eh_frame_hdr:0000000000006DD1                 db  0Fh
.eh_frame_hdr:0000000000006DD2                 db    0
.eh_frame_hdr:0000000000006DD3                 db    0
.eh_frame_hdr:0000000000006DD4                 db  70h ; p
.eh_frame_hdr:0000000000006DD5                 db 0EBh
.eh_frame_hdr:0000000000006DD6                 db 0FFh
.eh_frame_hdr:0000000000006DD7                 db 0FFh
.eh_frame_hdr:0000000000006DD8                 db  78h ; x
.eh_frame_hdr:0000000000006DD9                 db  0Fh
.eh_frame_hdr:0000000000006DDA                 db    0
.eh_frame_hdr:0000000000006DDB                 db    0
.eh_frame_hdr:0000000000006DDC                 db    0
.eh_frame_hdr:0000000000006DDD                 db 0ECh
.eh_frame_hdr:0000000000006DDE                 db 0FFh
.eh_frame_hdr:0000000000006DDF                 db 0FFh
.eh_frame_hdr:0000000000006DE0                 db 0B8h
.eh_frame_hdr:0000000000006DE1                 db  0Fh
.eh_frame_hdr:0000000000006DE2                 db    0
.eh_frame_hdr:0000000000006DE3                 db    0
.eh_frame_hdr:0000000000006DE4                 db  80h
.eh_frame_hdr:0000000000006DE5                 db 0ECh
.eh_frame_hdr:0000000000006DE6                 db 0FFh
.eh_frame_hdr:0000000000006DE7                 db 0FFh
.eh_frame_hdr:0000000000006DE8                 db    8
.eh_frame_hdr:0000000000006DE9                 db  10h
.eh_frame_hdr:0000000000006DEA                 db    0
.eh_frame_hdr:0000000000006DEB                 db    0
.eh_frame_hdr:0000000000006DEC                 db 0C0h
.eh_frame_hdr:0000000000006DED                 db 0ECh
.eh_frame_hdr:0000000000006DEE                 db 0FFh
.eh_frame_hdr:0000000000006DEF                 db 0FFh
.eh_frame_hdr:0000000000006DF0                 db  28h ; (
.eh_frame_hdr:0000000000006DF1                 db  10h
.eh_frame_hdr:0000000000006DF2                 db    0
.eh_frame_hdr:0000000000006DF3                 db    0
.eh_frame_hdr:0000000000006DF4                 db  80h
.eh_frame_hdr:0000000000006DF5                 db 0EDh
.eh_frame_hdr:0000000000006DF6                 db 0FFh
.eh_frame_hdr:0000000000006DF7                 db 0FFh
.eh_frame_hdr:0000000000006DF8                 db 0A0h
.eh_frame_hdr:0000000000006DF9                 db  10h
.eh_frame_hdr:0000000000006DFA                 db    0
.eh_frame_hdr:0000000000006DFB                 db    0
.eh_frame_hdr:0000000000006DFC                 db  30h ; 0
.eh_frame_hdr:0000000000006DFD                 db 0EEh
.eh_frame_hdr:0000000000006DFE                 db 0FFh
.eh_frame_hdr:0000000000006DFF                 db 0FFh
.eh_frame_hdr:0000000000006E00                 db 0ECh
.eh_frame_hdr:0000000000006E01                 db  10h
.eh_frame_hdr:0000000000006E02                 db    0
.eh_frame_hdr:0000000000006E03                 db    0
.eh_frame_hdr:0000000000006E04                 db  90h
.eh_frame_hdr:0000000000006E05                 db 0EEh
.eh_frame_hdr:0000000000006E06                 db 0FFh
.eh_frame_hdr:0000000000006E07                 db 0FFh
.eh_frame_hdr:0000000000006E08                 db  30h ; 0
.eh_frame_hdr:0000000000006E09                 db  11h
.eh_frame_hdr:0000000000006E0A                 db    0
.eh_frame_hdr:0000000000006E0B                 db    0
.eh_frame_hdr:0000000000006E0C                 db    0
.eh_frame_hdr:0000000000006E0D                 db 0EFh
.eh_frame_hdr:0000000000006E0E                 db 0FFh
.eh_frame_hdr:0000000000006E0F                 db 0FFh
.eh_frame_hdr:0000000000006E10                 db  78h ; x
.eh_frame_hdr:0000000000006E11                 db  11h
.eh_frame_hdr:0000000000006E12                 db    0
.eh_frame_hdr:0000000000006E13                 db    0
.eh_frame_hdr:0000000000006E14                 db  10h
.eh_frame_hdr:0000000000006E15                 db 0EFh
.eh_frame_hdr:0000000000006E16                 db 0FFh
.eh_frame_hdr:0000000000006E17                 db 0FFh
.eh_frame_hdr:0000000000006E18                 db  90h
.eh_frame_hdr:0000000000006E19                 db  11h
.eh_frame_hdr:0000000000006E1A                 db    0
.eh_frame_hdr:0000000000006E1B                 db    0
.eh_frame_hdr:0000000000006E1B _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006E1B
LOAD:0000000000006E1C ; ===========================================================================
LOAD:0000000000006E1C
LOAD:0000000000006E1C ; Segment type: Pure code
LOAD:0000000000006E1C ; Segment permissions: Read/Execute
LOAD:0000000000006E1C LOAD            segment byte public 'CODE' use64
LOAD:0000000000006E1C                 assume cs:LOAD
LOAD:0000000000006E1C                 ;org 6E1Ch
LOAD:0000000000006E1C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006E1C                 align 20h
LOAD:0000000000006E1C LOAD            ends
LOAD:0000000000006E1C
.eh_frame:0000000000006E20 ; ===========================================================================
.eh_frame:0000000000006E20
.eh_frame:0000000000006E20 ; Segment type: Pure data
.eh_frame:0000000000006E20 ; Segment permissions: Read
.eh_frame:0000000000006E20 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006E20                 assume cs:_eh_frame
.eh_frame:0000000000006E20                 ;org 6E20h
.eh_frame:0000000000006E20                 db  14h
.eh_frame:0000000000006E21                 db    0
.eh_frame:0000000000006E22                 db    0
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db    0
.eh_frame:0000000000006E25                 db    0
.eh_frame:0000000000006E26                 db    0
.eh_frame:0000000000006E27                 db    0
.eh_frame:0000000000006E28                 db    1
.eh_frame:0000000000006E29                 db  7Ah ; z
.eh_frame:0000000000006E2A                 db  52h ; R
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db    1
.eh_frame:0000000000006E2D                 db  78h ; x
.eh_frame:0000000000006E2E                 db  10h
.eh_frame:0000000000006E2F                 db    1
.eh_frame:0000000000006E30                 db  1Bh
.eh_frame:0000000000006E31                 db  0Ch
.eh_frame:0000000000006E32                 db    7
.eh_frame:0000000000006E33                 db    8
.eh_frame:0000000000006E34                 db  90h
.eh_frame:0000000000006E35                 db    1
.eh_frame:0000000000006E36                 db    7
.eh_frame:0000000000006E37                 db  10h
.eh_frame:0000000000006E38                 db  14h
.eh_frame:0000000000006E39                 db    0
.eh_frame:0000000000006E3A                 db    0
.eh_frame:0000000000006E3B                 db    0
.eh_frame:0000000000006E3C                 db  1Ch
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db 0D0h
.eh_frame:0000000000006E41                 db 0ACh
.eh_frame:0000000000006E42                 db 0FFh
.eh_frame:0000000000006E43                 db 0FFh
.eh_frame:0000000000006E44                 db  2Bh ; +
.eh_frame:0000000000006E45                 db    0
.eh_frame:0000000000006E46                 db    0
.eh_frame:0000000000006E47                 db    0
.eh_frame:0000000000006E48                 db    0
.eh_frame:0000000000006E49                 db    0
.eh_frame:0000000000006E4A                 db    0
.eh_frame:0000000000006E4B                 db    0
.eh_frame:0000000000006E4C                 db    0
.eh_frame:0000000000006E4D                 db    0
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db  14h
.eh_frame:0000000000006E51                 db    0
.eh_frame:0000000000006E52                 db    0
.eh_frame:0000000000006E53                 db    0
.eh_frame:0000000000006E54                 db    0
.eh_frame:0000000000006E55                 db    0
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db    1
.eh_frame:0000000000006E59                 db  7Ah ; z
.eh_frame:0000000000006E5A                 db  52h ; R
.eh_frame:0000000000006E5B                 db    0
.eh_frame:0000000000006E5C                 db    1
.eh_frame:0000000000006E5D                 db  78h ; x
.eh_frame:0000000000006E5E                 db  10h
.eh_frame:0000000000006E5F                 db    1
.eh_frame:0000000000006E60                 db  1Bh
.eh_frame:0000000000006E61                 db  0Ch
.eh_frame:0000000000006E62                 db    7
.eh_frame:0000000000006E63                 db    8
.eh_frame:0000000000006E64                 db  90h
.eh_frame:0000000000006E65                 db    1
.eh_frame:0000000000006E66                 db    0
.eh_frame:0000000000006E67                 db    0
.eh_frame:0000000000006E68                 db  24h ; $
.eh_frame:0000000000006E69                 db    0
.eh_frame:0000000000006E6A                 db    0
.eh_frame:0000000000006E6B                 db    0
.eh_frame:0000000000006E6C                 db  1Ch
.eh_frame:0000000000006E6D                 db    0
.eh_frame:0000000000006E6E                 db    0
.eh_frame:0000000000006E6F                 db    0
.eh_frame:0000000000006E70                 db    0
.eh_frame:0000000000006E71                 db 0A6h
.eh_frame:0000000000006E72                 db 0FFh
.eh_frame:0000000000006E73                 db 0FFh
.eh_frame:0000000000006E74                 db  10h
.eh_frame:0000000000006E75                 db    3
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db    0
.eh_frame:0000000000006E79                 db  0Eh
.eh_frame:0000000000006E7A                 db  10h
.eh_frame:0000000000006E7B                 db  46h ; F
.eh_frame:0000000000006E7C                 db  0Eh
.eh_frame:0000000000006E7D                 db  18h
.eh_frame:0000000000006E7E                 db  4Ah ; J
.eh_frame:0000000000006E7F                 db  0Fh
.eh_frame:0000000000006E80                 db  0Bh
.eh_frame:0000000000006E81                 db  77h ; w
.eh_frame:0000000000006E82                 db    8
.eh_frame:0000000000006E83                 db  80h
.eh_frame:0000000000006E84                 db    0
.eh_frame:0000000000006E85                 db  3Fh ; ?
.eh_frame:0000000000006E86                 db  1Ah
.eh_frame:0000000000006E87                 db  3Bh ; ;
.eh_frame:0000000000006E88                 db  2Ah ; *
.eh_frame:0000000000006E89                 db  33h ; 3
.eh_frame:0000000000006E8A                 db  24h ; $
.eh_frame:0000000000006E8B                 db  22h ; "
.eh_frame:0000000000006E8C                 db    0
.eh_frame:0000000000006E8D                 db    0
.eh_frame:0000000000006E8E                 db    0
.eh_frame:0000000000006E8F                 db    0
.eh_frame:0000000000006E90                 db  14h
.eh_frame:0000000000006E91                 db    0
.eh_frame:0000000000006E92                 db    0
.eh_frame:0000000000006E93                 db    0
.eh_frame:0000000000006E94                 db  44h ; D
.eh_frame:0000000000006E95                 db    0
.eh_frame:0000000000006E96                 db    0
.eh_frame:0000000000006E97                 db    0
.eh_frame:0000000000006E98                 db 0E8h
.eh_frame:0000000000006E99                 db 0A8h
.eh_frame:0000000000006E9A                 db 0FFh
.eh_frame:0000000000006E9B                 db 0FFh
.eh_frame:0000000000006E9C                 db    8
.eh_frame:0000000000006E9D                 db    0
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db    0
.eh_frame:0000000000006EA1                 db    0
.eh_frame:0000000000006EA2                 db    0
.eh_frame:0000000000006EA3                 db    0
.eh_frame:0000000000006EA4                 db    0
.eh_frame:0000000000006EA5                 db    0
.eh_frame:0000000000006EA6                 db    0
.eh_frame:0000000000006EA7                 db    0
.eh_frame:0000000000006EA8                 db  38h ; 8
.eh_frame:0000000000006EA9                 db    0
.eh_frame:0000000000006EAA                 db    0
.eh_frame:0000000000006EAB                 db    0
.eh_frame:0000000000006EAC                 db  5Ch ; \
.eh_frame:0000000000006EAD                 db    0
.eh_frame:0000000000006EAE                 db    0
.eh_frame:0000000000006EAF                 db    0
.eh_frame:0000000000006EB0                 db  70h ; p
.eh_frame:0000000000006EB1                 db 0ADh
.eh_frame:0000000000006EB2                 db 0FFh
.eh_frame:0000000000006EB3                 db 0FFh
.eh_frame:0000000000006EB4                 db 0AFh
.eh_frame:0000000000006EB5                 db    0
.eh_frame:0000000000006EB6                 db    0
.eh_frame:0000000000006EB7                 db    0
.eh_frame:0000000000006EB8                 db    0
.eh_frame:0000000000006EB9                 db  45h ; E
.eh_frame:0000000000006EBA                 db  0Eh
.eh_frame:0000000000006EBB                 db  10h
.eh_frame:0000000000006EBC                 db  8Ch
.eh_frame:0000000000006EBD                 db    2
.eh_frame:0000000000006EBE                 db  44h ; D
.eh_frame:0000000000006EBF                 db  0Eh
.eh_frame:0000000000006EC0                 db  18h
.eh_frame:0000000000006EC1                 db  86h
.eh_frame:0000000000006EC2                 db    3
.eh_frame:0000000000006EC3                 db  44h ; D
.eh_frame:0000000000006EC4                 db  0Eh
.eh_frame:0000000000006EC5                 db  20h
.eh_frame:0000000000006EC6                 db  83h
.eh_frame:0000000000006EC7                 db    4
.eh_frame:0000000000006EC8                 db    2
.eh_frame:0000000000006EC9                 db  4Ch ; L
.eh_frame:0000000000006ECA                 db  0Ah
.eh_frame:0000000000006ECB                 db  0Eh
.eh_frame:0000000000006ECC                 db  18h
.eh_frame:0000000000006ECD                 db  41h ; A
.eh_frame:0000000000006ECE                 db  0Eh
.eh_frame:0000000000006ECF                 db  10h
.eh_frame:0000000000006ED0                 db  42h ; B
.eh_frame:0000000000006ED1                 db  0Eh
.eh_frame:0000000000006ED2                 db    8
.eh_frame:0000000000006ED3                 db  54h ; T
.eh_frame:0000000000006ED4                 db  0Bh
.eh_frame:0000000000006ED5                 db  4Ah ; J
.eh_frame:0000000000006ED6                 db  0Ah
.eh_frame:0000000000006ED7                 db  0Eh
.eh_frame:0000000000006ED8                 db  18h
.eh_frame:0000000000006ED9                 db  41h ; A
.eh_frame:0000000000006EDA                 db  0Eh
.eh_frame:0000000000006EDB                 db  10h
.eh_frame:0000000000006EDC                 db  42h ; B
.eh_frame:0000000000006EDD                 db  0Eh
.eh_frame:0000000000006EDE                 db    8
.eh_frame:0000000000006EDF                 db  43h ; C
.eh_frame:0000000000006EE0                 db  0Bh
.eh_frame:0000000000006EE1                 db    0
.eh_frame:0000000000006EE2                 db    0
.eh_frame:0000000000006EE3                 db    0
.eh_frame:0000000000006EE4                 db  2Ch ; ,
.eh_frame:0000000000006EE5                 db    0
.eh_frame:0000000000006EE6                 db    0
.eh_frame:0000000000006EE7                 db    0
.eh_frame:0000000000006EE8                 db  98h
.eh_frame:0000000000006EE9                 db    0
.eh_frame:0000000000006EEA                 db    0
.eh_frame:0000000000006EEB                 db    0
.eh_frame:0000000000006EEC                 db 0E4h
.eh_frame:0000000000006EED                 db 0ADh
.eh_frame:0000000000006EEE                 db 0FFh
.eh_frame:0000000000006EEF                 db 0FFh
.eh_frame:0000000000006EF0                 db  87h
.eh_frame:0000000000006EF1                 db    0
.eh_frame:0000000000006EF2                 db    0
.eh_frame:0000000000006EF3                 db    0
.eh_frame:0000000000006EF4                 db    0
.eh_frame:0000000000006EF5                 db  42h ; B
.eh_frame:0000000000006EF6                 db  0Eh
.eh_frame:0000000000006EF7                 db  10h
.eh_frame:0000000000006EF8                 db  8Ch
.eh_frame:0000000000006EF9                 db    2
.eh_frame:0000000000006EFA                 db  41h ; A
.eh_frame:0000000000006EFB                 db  0Eh
.eh_frame:0000000000006EFC                 db  18h
.eh_frame:0000000000006EFD                 db  86h
.eh_frame:0000000000006EFE                 db    3
.eh_frame:0000000000006EFF                 db  48h ; H
.eh_frame:0000000000006F00                 db  0Eh
.eh_frame:0000000000006F01                 db  20h
.eh_frame:0000000000006F02                 db  83h
.eh_frame:0000000000006F03                 db    4
.eh_frame:0000000000006F04                 db    2
.eh_frame:0000000000006F05                 db  71h ; q
.eh_frame:0000000000006F06                 db  0Ah
.eh_frame:0000000000006F07                 db  0Eh
.eh_frame:0000000000006F08                 db  18h
.eh_frame:0000000000006F09                 db  41h ; A
.eh_frame:0000000000006F0A                 db  0Eh
.eh_frame:0000000000006F0B                 db  10h
.eh_frame:0000000000006F0C                 db  42h ; B
.eh_frame:0000000000006F0D                 db  0Eh
.eh_frame:0000000000006F0E                 db    8
.eh_frame:0000000000006F0F                 db  41h ; A
.eh_frame:0000000000006F10                 db  0Bh
.eh_frame:0000000000006F11                 db    0
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db  60h ; `
.eh_frame:0000000000006F15                 db    0
.eh_frame:0000000000006F16                 db    0
.eh_frame:0000000000006F17                 db    0
.eh_frame:0000000000006F18                 db 0C8h
.eh_frame:0000000000006F19                 db    0
.eh_frame:0000000000006F1A                 db    0
.eh_frame:0000000000006F1B                 db    0
.eh_frame:0000000000006F1C                 db  44h ; D
.eh_frame:0000000000006F1D                 db 0AEh
.eh_frame:0000000000006F1E                 db 0FFh
.eh_frame:0000000000006F1F                 db 0FFh
.eh_frame:0000000000006F20                 db 0D9h
.eh_frame:0000000000006F21                 db    5
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db    0
.eh_frame:0000000000006F25                 db  42h ; B
.eh_frame:0000000000006F26                 db  0Eh
.eh_frame:0000000000006F27                 db  10h
.eh_frame:0000000000006F28                 db  8Fh
.eh_frame:0000000000006F29                 db    2
.eh_frame:0000000000006F2A                 db  42h ; B
.eh_frame:0000000000006F2B                 db  0Eh
.eh_frame:0000000000006F2C                 db  18h
.eh_frame:0000000000006F2D                 db  8Eh
.eh_frame:0000000000006F2E                 db    3
.eh_frame:0000000000006F2F                 db  45h ; E
.eh_frame:0000000000006F30                 db  0Eh
.eh_frame:0000000000006F31                 db  20h
.eh_frame:0000000000006F32                 db  8Dh
.eh_frame:0000000000006F33                 db    4
.eh_frame:0000000000006F34                 db  42h ; B
.eh_frame:0000000000006F35                 db  0Eh
.eh_frame:0000000000006F36                 db  28h ; (
.eh_frame:0000000000006F37                 db  8Ch
.eh_frame:0000000000006F38                 db    5
.eh_frame:0000000000006F39                 db  41h ; A
.eh_frame:0000000000006F3A                 db  0Eh
.eh_frame:0000000000006F3B                 db  30h ; 0
.eh_frame:0000000000006F3C                 db  86h
.eh_frame:0000000000006F3D                 db    6
.eh_frame:0000000000006F3E                 db  41h ; A
.eh_frame:0000000000006F3F                 db  0Eh
.eh_frame:0000000000006F40                 db  38h ; 8
.eh_frame:0000000000006F41                 db  83h
.eh_frame:0000000000006F42                 db    7
.eh_frame:0000000000006F43                 db  49h ; I
.eh_frame:0000000000006F44                 db  0Eh
.eh_frame:0000000000006F45                 db 0C0h
.eh_frame:0000000000006F46                 db    4
.eh_frame:0000000000006F47                 db    3
.eh_frame:0000000000006F48                 db  7Ch ; |
.eh_frame:0000000000006F49                 db    4
.eh_frame:0000000000006F4A                 db  0Eh
.eh_frame:0000000000006F4B                 db 0C8h
.eh_frame:0000000000006F4C                 db    4
.eh_frame:0000000000006F4D                 db  41h ; A
.eh_frame:0000000000006F4E                 db  0Eh
.eh_frame:0000000000006F4F                 db 0D0h
.eh_frame:0000000000006F50                 db    4
.eh_frame:0000000000006F51                 db  49h ; I
.eh_frame:0000000000006F52                 db  0Eh
.eh_frame:0000000000006F53                 db 0D8h
.eh_frame:0000000000006F54                 db    4
.eh_frame:0000000000006F55                 db  42h ; B
.eh_frame:0000000000006F56                 db  0Eh
.eh_frame:0000000000006F57                 db 0E0h
.eh_frame:0000000000006F58                 db    4
.eh_frame:0000000000006F59                 db  5Eh ; ^
.eh_frame:0000000000006F5A                 db  0Eh
.eh_frame:0000000000006F5B                 db 0C0h
.eh_frame:0000000000006F5C                 db    4
.eh_frame:0000000000006F5D                 db  5Eh ; ^
.eh_frame:0000000000006F5E                 db  0Ah
.eh_frame:0000000000006F5F                 db  0Eh
.eh_frame:0000000000006F60                 db  38h ; 8
.eh_frame:0000000000006F61                 db  41h ; A
.eh_frame:0000000000006F62                 db  0Eh
.eh_frame:0000000000006F63                 db  30h ; 0
.eh_frame:0000000000006F64                 db  41h ; A
.eh_frame:0000000000006F65                 db  0Eh
.eh_frame:0000000000006F66                 db  28h ; (
.eh_frame:0000000000006F67                 db  42h ; B
.eh_frame:0000000000006F68                 db  0Eh
.eh_frame:0000000000006F69                 db  20h
.eh_frame:0000000000006F6A                 db  42h ; B
.eh_frame:0000000000006F6B                 db  0Eh
.eh_frame:0000000000006F6C                 db  18h
.eh_frame:0000000000006F6D                 db  42h ; B
.eh_frame:0000000000006F6E                 db  0Eh
.eh_frame:0000000000006F6F                 db  10h
.eh_frame:0000000000006F70                 db  42h ; B
.eh_frame:0000000000006F71                 db  0Eh
.eh_frame:0000000000006F72                 db    8
.eh_frame:0000000000006F73                 db  41h ; A
.eh_frame:0000000000006F74                 db  0Bh
.eh_frame:0000000000006F75                 db    0
.eh_frame:0000000000006F76                 db    0
.eh_frame:0000000000006F77                 db    0
.eh_frame:0000000000006F78                 db  28h ; (
.eh_frame:0000000000006F79                 db    0
.eh_frame:0000000000006F7A                 db    0
.eh_frame:0000000000006F7B                 db    0
.eh_frame:0000000000006F7C                 db  2Ch ; ,
.eh_frame:0000000000006F7D                 db    1
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db 0C0h
.eh_frame:0000000000006F81                 db 0B3h
.eh_frame:0000000000006F82                 db 0FFh
.eh_frame:0000000000006F83                 db 0FFh
.eh_frame:0000000000006F84                 db  9Ah
.eh_frame:0000000000006F85                 db    4
.eh_frame:0000000000006F86                 db    0
.eh_frame:0000000000006F87                 db    0
.eh_frame:0000000000006F88                 db    0
.eh_frame:0000000000006F89                 db  42h ; B
.eh_frame:0000000000006F8A                 db  0Eh
.eh_frame:0000000000006F8B                 db  10h
.eh_frame:0000000000006F8C                 db  8Dh
.eh_frame:0000000000006F8D                 db    2
.eh_frame:0000000000006F8E                 db  42h ; B
.eh_frame:0000000000006F8F                 db  0Eh
.eh_frame:0000000000006F90                 db  18h
.eh_frame:0000000000006F91                 db  8Ch
.eh_frame:0000000000006F92                 db    3
.eh_frame:0000000000006F93                 db  46h ; F
.eh_frame:0000000000006F94                 db  0Eh
.eh_frame:0000000000006F95                 db  20h
.eh_frame:0000000000006F96                 db  86h
.eh_frame:0000000000006F97                 db    4
.eh_frame:0000000000006F98                 db  41h ; A
.eh_frame:0000000000006F99                 db  0Eh
.eh_frame:0000000000006F9A                 db  28h ; (
.eh_frame:0000000000006F9B                 db  83h
.eh_frame:0000000000006F9C                 db    5
.eh_frame:0000000000006F9D                 db  49h ; I
.eh_frame:0000000000006F9E                 db  0Eh
.eh_frame:0000000000006F9F                 db 0B0h
.eh_frame:0000000000006FA0                 db    1
.eh_frame:0000000000006FA1                 db    0
.eh_frame:0000000000006FA2                 db    0
.eh_frame:0000000000006FA3                 db    0
.eh_frame:0000000000006FA4                 db  48h ; H
.eh_frame:0000000000006FA5                 db    0
.eh_frame:0000000000006FA6                 db    0
.eh_frame:0000000000006FA7                 db    0
.eh_frame:0000000000006FA8                 db  58h ; X
.eh_frame:0000000000006FA9                 db    1
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db 0E4h
.eh_frame:0000000000006FAD                 db 0A7h
.eh_frame:0000000000006FAE                 db 0FFh
.eh_frame:0000000000006FAF                 db 0FFh
.eh_frame:0000000000006FB0                 db  79h ; y
.eh_frame:0000000000006FB1                 db    3
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db    0
.eh_frame:0000000000006FB5                 db  42h ; B
.eh_frame:0000000000006FB6                 db  0Eh
.eh_frame:0000000000006FB7                 db  10h
.eh_frame:0000000000006FB8                 db  8Dh
.eh_frame:0000000000006FB9                 db    2
.eh_frame:0000000000006FBA                 db  42h ; B
.eh_frame:0000000000006FBB                 db  0Eh
.eh_frame:0000000000006FBC                 db  18h
.eh_frame:0000000000006FBD                 db  8Ch
.eh_frame:0000000000006FBE                 db    3
.eh_frame:0000000000006FBF                 db  48h ; H
.eh_frame:0000000000006FC0                 db  0Eh
.eh_frame:0000000000006FC1                 db  20h
.eh_frame:0000000000006FC2                 db  86h
.eh_frame:0000000000006FC3                 db    4
.eh_frame:0000000000006FC4                 db  41h ; A
.eh_frame:0000000000006FC5                 db  0Eh
.eh_frame:0000000000006FC6                 db  28h ; (
.eh_frame:0000000000006FC7                 db  83h
.eh_frame:0000000000006FC8                 db    5
.eh_frame:0000000000006FC9                 db  4Ah ; J
.eh_frame:0000000000006FCA                 db  0Eh
.eh_frame:0000000000006FCB                 db  30h ; 0
.eh_frame:0000000000006FCC                 db    3
.eh_frame:0000000000006FCD                 db 0F8h
.eh_frame:0000000000006FCE                 db    1
.eh_frame:0000000000006FCF                 db  0Ah
.eh_frame:0000000000006FD0                 db  0Eh
.eh_frame:0000000000006FD1                 db  38h ; 8
.eh_frame:0000000000006FD2                 db  50h ; P
.eh_frame:0000000000006FD3                 db  0Eh
.eh_frame:0000000000006FD4                 db  40h ; @
.eh_frame:0000000000006FD5                 db  6Ah ; j
.eh_frame:0000000000006FD6                 db  0Bh
.eh_frame:0000000000006FD7                 db    2
.eh_frame:0000000000006FD8                 db  4Bh ; K
.eh_frame:0000000000006FD9                 db  0Ah
.eh_frame:0000000000006FDA                 db  0Eh
.eh_frame:0000000000006FDB                 db  28h ; (
.eh_frame:0000000000006FDC                 db  43h ; C
.eh_frame:0000000000006FDD                 db  0Eh
.eh_frame:0000000000006FDE                 db  20h
.eh_frame:0000000000006FDF                 db  41h ; A
.eh_frame:0000000000006FE0                 db  0Eh
.eh_frame:0000000000006FE1                 db  18h
.eh_frame:0000000000006FE2                 db  42h ; B
.eh_frame:0000000000006FE3                 db  0Eh
.eh_frame:0000000000006FE4                 db  10h
.eh_frame:0000000000006FE5                 db  42h ; B
.eh_frame:0000000000006FE6                 db  0Eh
.eh_frame:0000000000006FE7                 db    8
.eh_frame:0000000000006FE8                 db  41h ; A
.eh_frame:0000000000006FE9                 db  0Bh
.eh_frame:0000000000006FEA                 db    0
.eh_frame:0000000000006FEB                 db    0
.eh_frame:0000000000006FEC                 db    0
.eh_frame:0000000000006FED                 db    0
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db  10h
.eh_frame:0000000000006FF1                 db    0
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db 0A4h
.eh_frame:0000000000006FF5                 db    1
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db 0E8h
.eh_frame:0000000000006FF9                 db 0B7h
.eh_frame:0000000000006FFA                 db 0FFh
.eh_frame:0000000000006FFB                 db 0FFh
.eh_frame:0000000000006FFC                 db    8
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db    0
.eh_frame:0000000000007001                 db    0
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db  10h
.eh_frame:0000000000007005                 db    0
.eh_frame:0000000000007006                 db    0
.eh_frame:0000000000007007                 db    0
.eh_frame:0000000000007008                 db 0B8h
.eh_frame:0000000000007009                 db    1
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db 0E4h
.eh_frame:000000000000700D                 db 0B7h
.eh_frame:000000000000700E                 db 0FFh
.eh_frame:000000000000700F                 db 0FFh
.eh_frame:0000000000007010                 db    8
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db    0
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db  2Ch ; ,
.eh_frame:0000000000007019                 db    0
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db 0CCh
.eh_frame:000000000000701D                 db    1
.eh_frame:000000000000701E                 db    0
.eh_frame:000000000000701F                 db    0
.eh_frame:0000000000007020                 db 0E0h
.eh_frame:0000000000007021                 db 0B7h
.eh_frame:0000000000007022                 db 0FFh
.eh_frame:0000000000007023                 db 0FFh
.eh_frame:0000000000007024                 db 0A4h
.eh_frame:0000000000007025                 db    0
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db    0
.eh_frame:0000000000007029                 db  41h ; A
.eh_frame:000000000000702A                 db  0Eh
.eh_frame:000000000000702B                 db  10h
.eh_frame:000000000000702C                 db  86h
.eh_frame:000000000000702D                 db    2
.eh_frame:000000000000702E                 db  41h ; A
.eh_frame:000000000000702F                 db  0Eh
.eh_frame:0000000000007030                 db  18h
.eh_frame:0000000000007031                 db  83h
.eh_frame:0000000000007032                 db    3
.eh_frame:0000000000007033                 db  44h ; D
.eh_frame:0000000000007034                 db  0Eh
.eh_frame:0000000000007035                 db  20h
.eh_frame:0000000000007036                 db  7Ah ; z
.eh_frame:0000000000007037                 db  0Ah
.eh_frame:0000000000007038                 db  0Eh
.eh_frame:0000000000007039                 db  18h
.eh_frame:000000000000703A                 db  41h ; A
.eh_frame:000000000000703B                 db  0Eh
.eh_frame:000000000000703C                 db  10h
.eh_frame:000000000000703D                 db  41h ; A
.eh_frame:000000000000703E                 db  0Eh
.eh_frame:000000000000703F                 db    8
.eh_frame:0000000000007040                 db  41h ; A
.eh_frame:0000000000007041                 db  0Bh
.eh_frame:0000000000007042                 db    0
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db    0
.eh_frame:0000000000007045                 db    0
.eh_frame:0000000000007046                 db    0
.eh_frame:0000000000007047                 db    0
.eh_frame:0000000000007048                 db  10h
.eh_frame:0000000000007049                 db    0
.eh_frame:000000000000704A                 db    0
.eh_frame:000000000000704B                 db    0
.eh_frame:000000000000704C                 db 0FCh
.eh_frame:000000000000704D                 db    1
.eh_frame:000000000000704E                 db    0
.eh_frame:000000000000704F                 db    0
.eh_frame:0000000000007050                 db  60h ; `
.eh_frame:0000000000007051                 db 0B8h
.eh_frame:0000000000007052                 db 0FFh
.eh_frame:0000000000007053                 db 0FFh
.eh_frame:0000000000007054                 db    5
.eh_frame:0000000000007055                 db    0
.eh_frame:0000000000007056                 db    0
.eh_frame:0000000000007057                 db    0
.eh_frame:0000000000007058                 db    0
.eh_frame:0000000000007059                 db    0
.eh_frame:000000000000705A                 db    0
.eh_frame:000000000000705B                 db    0
.eh_frame:000000000000705C                 db  18h
.eh_frame:000000000000705D                 db    0
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  10h
.eh_frame:0000000000007061                 db    2
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db  5Ch ; \
.eh_frame:0000000000007065                 db 0B8h
.eh_frame:0000000000007066                 db 0FFh
.eh_frame:0000000000007067                 db 0FFh
.eh_frame:0000000000007068                 db  22h ; "
.eh_frame:0000000000007069                 db    0
.eh_frame:000000000000706A                 db    0
.eh_frame:000000000000706B                 db    0
.eh_frame:000000000000706C                 db    0
.eh_frame:000000000000706D                 db  46h ; F
.eh_frame:000000000000706E                 db  0Eh
.eh_frame:000000000000706F                 db  10h
.eh_frame:0000000000007070                 db  83h
.eh_frame:0000000000007071                 db    2
.eh_frame:0000000000007072                 db  4Eh ; N
.eh_frame:0000000000007073                 db 0C3h
.eh_frame:0000000000007074                 db  0Eh
.eh_frame:0000000000007075                 db    8
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  2Ch ; ,
.eh_frame:0000000000007079                 db    0
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db  2Ch ; ,
.eh_frame:000000000000707D                 db    2
.eh_frame:000000000000707E                 db    0
.eh_frame:000000000000707F                 db    0
.eh_frame:0000000000007080                 db  70h ; p
.eh_frame:0000000000007081                 db 0B8h
.eh_frame:0000000000007082                 db 0FFh
.eh_frame:0000000000007083                 db 0FFh
.eh_frame:0000000000007084                 db  93h
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db    0
.eh_frame:0000000000007089                 db  42h ; B
.eh_frame:000000000000708A                 db  0Eh
.eh_frame:000000000000708B                 db  10h
.eh_frame:000000000000708C                 db  8Ch
.eh_frame:000000000000708D                 db    2
.eh_frame:000000000000708E                 db  41h ; A
.eh_frame:000000000000708F                 db  0Eh
.eh_frame:0000000000007090                 db  18h
.eh_frame:0000000000007091                 db  86h
.eh_frame:0000000000007092                 db    3
.eh_frame:0000000000007093                 db  44h ; D
.eh_frame:0000000000007094                 db  0Eh
.eh_frame:0000000000007095                 db  20h
.eh_frame:0000000000007096                 db  83h
.eh_frame:0000000000007097                 db    4
.eh_frame:0000000000007098                 db  5Eh ; ^
.eh_frame:0000000000007099                 db  0Ah
.eh_frame:000000000000709A                 db  0Eh
.eh_frame:000000000000709B                 db  18h
.eh_frame:000000000000709C                 db  41h ; A
.eh_frame:000000000000709D                 db  0Eh
.eh_frame:000000000000709E                 db  10h
.eh_frame:000000000000709F                 db  42h ; B
.eh_frame:00000000000070A0                 db  0Eh
.eh_frame:00000000000070A1                 db    8
.eh_frame:00000000000070A2                 db  48h ; H
.eh_frame:00000000000070A3                 db  0Bh
.eh_frame:00000000000070A4                 db    0
.eh_frame:00000000000070A5                 db    0
.eh_frame:00000000000070A6                 db    0
.eh_frame:00000000000070A7                 db    0
.eh_frame:00000000000070A8                 db  1Ch
.eh_frame:00000000000070A9                 db    0
.eh_frame:00000000000070AA                 db    0
.eh_frame:00000000000070AB                 db    0
.eh_frame:00000000000070AC                 db  5Ch ; \
.eh_frame:00000000000070AD                 db    2
.eh_frame:00000000000070AE                 db    0
.eh_frame:00000000000070AF                 db    0
.eh_frame:00000000000070B0                 db 0E0h
.eh_frame:00000000000070B1                 db 0B8h
.eh_frame:00000000000070B2                 db 0FFh
.eh_frame:00000000000070B3                 db 0FFh
.eh_frame:00000000000070B4                 db  60h ; `
.eh_frame:00000000000070B5                 db    0
.eh_frame:00000000000070B6                 db    0
.eh_frame:00000000000070B7                 db    0
.eh_frame:00000000000070B8                 db    0
.eh_frame:00000000000070B9                 db  44h ; D
.eh_frame:00000000000070BA                 db  0Eh
.eh_frame:00000000000070BB                 db  10h
.eh_frame:00000000000070BC                 db  75h ; u
.eh_frame:00000000000070BD                 db  0Ah
.eh_frame:00000000000070BE                 db  0Eh
.eh_frame:00000000000070BF                 db    8
.eh_frame:00000000000070C0                 db  47h ; G
.eh_frame:00000000000070C1                 db  0Bh
.eh_frame:00000000000070C2                 db  5Fh ; _
.eh_frame:00000000000070C3                 db  0Eh
.eh_frame:00000000000070C4                 db    8
.eh_frame:00000000000070C5                 db    0
.eh_frame:00000000000070C6                 db    0
.eh_frame:00000000000070C7                 db    0
.eh_frame:00000000000070C8                 db  14h
.eh_frame:00000000000070C9                 db    0
.eh_frame:00000000000070CA                 db    0
.eh_frame:00000000000070CB                 db    0
.eh_frame:00000000000070CC                 db  7Ch ; |
.eh_frame:00000000000070CD                 db    2
.eh_frame:00000000000070CE                 db    0
.eh_frame:00000000000070CF                 db    0
.eh_frame:00000000000070D0                 db  20h
.eh_frame:00000000000070D1                 db 0B9h
.eh_frame:00000000000070D2                 db 0FFh
.eh_frame:00000000000070D3                 db 0FFh
.eh_frame:00000000000070D4                 db  42h ; B
.eh_frame:00000000000070D5                 db    0
.eh_frame:00000000000070D6                 db    0
.eh_frame:00000000000070D7                 db    0
.eh_frame:00000000000070D8                 db    0
.eh_frame:00000000000070D9                 db    0
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db    0
.eh_frame:00000000000070DD                 db    0
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db  10h
.eh_frame:00000000000070E1                 db    0
.eh_frame:00000000000070E2                 db    0
.eh_frame:00000000000070E3                 db    0
.eh_frame:00000000000070E4                 db  94h
.eh_frame:00000000000070E5                 db    2
.eh_frame:00000000000070E6                 db    0
.eh_frame:00000000000070E7                 db    0
.eh_frame:00000000000070E8                 db  58h ; X
.eh_frame:00000000000070E9                 db 0B9h
.eh_frame:00000000000070EA                 db 0FFh
.eh_frame:00000000000070EB                 db 0FFh
.eh_frame:00000000000070EC                 db  10h
.eh_frame:00000000000070ED                 db    0
.eh_frame:00000000000070EE                 db    0
.eh_frame:00000000000070EF                 db    0
.eh_frame:00000000000070F0                 db    0
.eh_frame:00000000000070F1                 db    0
.eh_frame:00000000000070F2                 db    0
.eh_frame:00000000000070F3                 db    0
.eh_frame:00000000000070F4                 db  60h ; `
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db 0A8h
.eh_frame:00000000000070F9                 db    2
.eh_frame:00000000000070FA                 db    0
.eh_frame:00000000000070FB                 db    0
.eh_frame:00000000000070FC                 db  54h ; T
.eh_frame:00000000000070FD                 db 0B9h
.eh_frame:00000000000070FE                 db 0FFh
.eh_frame:00000000000070FF                 db 0FFh
.eh_frame:0000000000007100                 db    8
.eh_frame:0000000000007101                 db    1
.eh_frame:0000000000007102                 db    0
.eh_frame:0000000000007103                 db    0
.eh_frame:0000000000007104                 db    0
.eh_frame:0000000000007105                 db  42h ; B
.eh_frame:0000000000007106                 db  0Eh
.eh_frame:0000000000007107                 db  10h
.eh_frame:0000000000007108                 db  8Fh
.eh_frame:0000000000007109                 db    2
.eh_frame:000000000000710A                 db  42h ; B
.eh_frame:000000000000710B                 db  0Eh
.eh_frame:000000000000710C                 db  18h
.eh_frame:000000000000710D                 db  8Eh
.eh_frame:000000000000710E                 db    3
.eh_frame:000000000000710F                 db  42h ; B
.eh_frame:0000000000007110                 db  0Eh
.eh_frame:0000000000007111                 db  20h
.eh_frame:0000000000007112                 db  8Dh
.eh_frame:0000000000007113                 db    4
.eh_frame:0000000000007114                 db  42h ; B
.eh_frame:0000000000007115                 db  0Eh
.eh_frame:0000000000007116                 db  28h ; (
.eh_frame:0000000000007117                 db  8Ch
.eh_frame:0000000000007118                 db    5
.eh_frame:0000000000007119                 db  41h ; A
.eh_frame:000000000000711A                 db  0Eh
.eh_frame:000000000000711B                 db  30h ; 0
.eh_frame:000000000000711C                 db  86h
.eh_frame:000000000000711D                 db    6
.eh_frame:000000000000711E                 db  41h ; A
.eh_frame:000000000000711F                 db  0Eh
.eh_frame:0000000000007120                 db  38h ; 8
.eh_frame:0000000000007121                 db  83h
.eh_frame:0000000000007122                 db    7
.eh_frame:0000000000007123                 db  44h ; D
.eh_frame:0000000000007124                 db  0Eh
.eh_frame:0000000000007125                 db  50h ; P
.eh_frame:0000000000007126                 db    2
.eh_frame:0000000000007127                 db  96h
.eh_frame:0000000000007128                 db  0Ah
.eh_frame:0000000000007129                 db  0Eh
.eh_frame:000000000000712A                 db  38h ; 8
.eh_frame:000000000000712B                 db  41h ; A
.eh_frame:000000000000712C                 db  0Eh
.eh_frame:000000000000712D                 db  30h ; 0
.eh_frame:000000000000712E                 db  41h ; A
.eh_frame:000000000000712F                 db  0Eh
.eh_frame:0000000000007130                 db  28h ; (
.eh_frame:0000000000007131                 db  42h ; B
.eh_frame:0000000000007132                 db  0Eh
.eh_frame:0000000000007133                 db  20h
.eh_frame:0000000000007134                 db  42h ; B
.eh_frame:0000000000007135                 db  0Eh
.eh_frame:0000000000007136                 db  18h
.eh_frame:0000000000007137                 db  42h ; B
.eh_frame:0000000000007138                 db  0Eh
.eh_frame:0000000000007139                 db  10h
.eh_frame:000000000000713A                 db  42h ; B
.eh_frame:000000000000713B                 db  0Eh
.eh_frame:000000000000713C                 db    8
.eh_frame:000000000000713D                 db  42h ; B
.eh_frame:000000000000713E                 db  0Bh
.eh_frame:000000000000713F                 db    2
.eh_frame:0000000000007140                 db  44h ; D
.eh_frame:0000000000007141                 db  0Ah
.eh_frame:0000000000007142                 db  0Eh
.eh_frame:0000000000007143                 db  38h ; 8
.eh_frame:0000000000007144                 db  43h ; C
.eh_frame:0000000000007145                 db  0Eh
.eh_frame:0000000000007146                 db  30h ; 0
.eh_frame:0000000000007147                 db  41h ; A
.eh_frame:0000000000007148                 db  0Eh
.eh_frame:0000000000007149                 db  28h ; (
.eh_frame:000000000000714A                 db  42h ; B
.eh_frame:000000000000714B                 db  0Eh
.eh_frame:000000000000714C                 db  20h
.eh_frame:000000000000714D                 db  42h ; B
.eh_frame:000000000000714E                 db  0Eh
.eh_frame:000000000000714F                 db  18h
.eh_frame:0000000000007150                 db  42h ; B
.eh_frame:0000000000007151                 db  0Eh
.eh_frame:0000000000007152                 db  10h
.eh_frame:0000000000007153                 db  42h ; B
.eh_frame:0000000000007154                 db  0Eh
.eh_frame:0000000000007155                 db    8
.eh_frame:0000000000007156                 db  41h ; A
.eh_frame:0000000000007157                 db  0Bh
.eh_frame:0000000000007158                 db  10h
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db  0Ch
.eh_frame:000000000000715D                 db    3
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db    0
.eh_frame:0000000000007161                 db 0BAh
.eh_frame:0000000000007162                 db 0FFh
.eh_frame:0000000000007163                 db 0FFh
.eh_frame:0000000000007164                 db  0Ah
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db    0
.eh_frame:0000000000007169                 db    0
.eh_frame:000000000000716A                 db    0
.eh_frame:000000000000716B                 db    0
.eh_frame:000000000000716C                 db  10h
.eh_frame:000000000000716D                 db    0
.eh_frame:000000000000716E                 db    0
.eh_frame:000000000000716F                 db    0
.eh_frame:0000000000007170                 db  20h
.eh_frame:0000000000007171                 db    3
.eh_frame:0000000000007172                 db    0
.eh_frame:0000000000007173                 db    0
.eh_frame:0000000000007174                 db 0FCh
.eh_frame:0000000000007175                 db 0B9h
.eh_frame:0000000000007176                 db 0FFh
.eh_frame:0000000000007177                 db 0FFh
.eh_frame:0000000000007178                 db    9
.eh_frame:0000000000007179                 db    0
.eh_frame:000000000000717A                 db    0
.eh_frame:000000000000717B                 db    0
.eh_frame:000000000000717C                 db    0
.eh_frame:000000000000717D                 db    0
.eh_frame:000000000000717E                 db    0
.eh_frame:000000000000717F                 db    0
.eh_frame:0000000000007180                 db  2Ch ; ,
.eh_frame:0000000000007181                 db    0
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db  34h ; 4
.eh_frame:0000000000007185                 db    3
.eh_frame:0000000000007186                 db    0
.eh_frame:0000000000007187                 db    0
.eh_frame:0000000000007188                 db 0F8h
.eh_frame:0000000000007189                 db 0B9h
.eh_frame:000000000000718A                 db 0FFh
.eh_frame:000000000000718B                 db 0FFh
.eh_frame:000000000000718C                 db  3Fh ; ?
.eh_frame:000000000000718D                 db    0
.eh_frame:000000000000718E                 db    0
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db    0
.eh_frame:0000000000007191                 db  41h ; A
.eh_frame:0000000000007192                 db  0Eh
.eh_frame:0000000000007193                 db  10h
.eh_frame:0000000000007194                 db  86h
.eh_frame:0000000000007195                 db    2
.eh_frame:0000000000007196                 db  41h ; A
.eh_frame:0000000000007197                 db  0Eh
.eh_frame:0000000000007198                 db  18h
.eh_frame:0000000000007199                 db  83h
.eh_frame:000000000000719A                 db    3
.eh_frame:000000000000719B                 db  50h ; P
.eh_frame:000000000000719C                 db  0Eh
.eh_frame:000000000000719D                 db  20h
.eh_frame:000000000000719E                 db  5Fh ; _
.eh_frame:000000000000719F                 db  0Ah
.eh_frame:00000000000071A0                 db  0Eh
.eh_frame:00000000000071A1                 db  18h
.eh_frame:00000000000071A2                 db  41h ; A
.eh_frame:00000000000071A3                 db  0Eh
.eh_frame:00000000000071A4                 db  10h
.eh_frame:00000000000071A5                 db  41h ; A
.eh_frame:00000000000071A6                 db  0Eh
.eh_frame:00000000000071A7                 db    8
.eh_frame:00000000000071A8                 db  45h ; E
.eh_frame:00000000000071A9                 db  0Bh
.eh_frame:00000000000071AA                 db    0
.eh_frame:00000000000071AB                 db    0
.eh_frame:00000000000071AC                 db    0
.eh_frame:00000000000071AD                 db    0
.eh_frame:00000000000071AE                 db    0
.eh_frame:00000000000071AF                 db    0
.eh_frame:00000000000071B0                 db  1Ch
.eh_frame:00000000000071B1                 db    0
.eh_frame:00000000000071B2                 db    0
.eh_frame:00000000000071B3                 db    0
.eh_frame:00000000000071B4                 db  64h ; d
.eh_frame:00000000000071B5                 db    3
.eh_frame:00000000000071B6                 db    0
.eh_frame:00000000000071B7                 db    0
.eh_frame:00000000000071B8                 db    8
.eh_frame:00000000000071B9                 db 0BAh
.eh_frame:00000000000071BA                 db 0FFh
.eh_frame:00000000000071BB                 db 0FFh
.eh_frame:00000000000071BC                 db  9Fh
.eh_frame:00000000000071BD                 db    0
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db    0
.eh_frame:00000000000071C1                 db  44h ; D
.eh_frame:00000000000071C2                 db  0Eh
.eh_frame:00000000000071C3                 db  10h
.eh_frame:00000000000071C4                 db  83h
.eh_frame:00000000000071C5                 db    2
.eh_frame:00000000000071C6                 db    2
.eh_frame:00000000000071C7                 db  78h ; x
.eh_frame:00000000000071C8                 db  0Ah
.eh_frame:00000000000071C9                 db  0Eh
.eh_frame:00000000000071CA                 db    8
.eh_frame:00000000000071CB                 db  41h ; A
.eh_frame:00000000000071CC                 db  0Bh
.eh_frame:00000000000071CD                 db    0
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db  40h ; @
.eh_frame:00000000000071D1                 db    0
.eh_frame:00000000000071D2                 db    0
.eh_frame:00000000000071D3                 db    0
.eh_frame:00000000000071D4                 db  84h
.eh_frame:00000000000071D5                 db    3
.eh_frame:00000000000071D6                 db    0
.eh_frame:00000000000071D7                 db    0
.eh_frame:00000000000071D8                 db  88h
.eh_frame:00000000000071D9                 db 0BAh
.eh_frame:00000000000071DA                 db 0FFh
.eh_frame:00000000000071DB                 db 0FFh
.eh_frame:00000000000071DC                 db 0E7h
.eh_frame:00000000000071DD                 db    0
.eh_frame:00000000000071DE                 db    0
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db    0
.eh_frame:00000000000071E1                 db  41h ; A
.eh_frame:00000000000071E2                 db  0Eh
.eh_frame:00000000000071E3                 db  10h
.eh_frame:00000000000071E4                 db  86h
.eh_frame:00000000000071E5                 db    2
.eh_frame:00000000000071E6                 db  41h ; A
.eh_frame:00000000000071E7                 db  0Eh
.eh_frame:00000000000071E8                 db  18h
.eh_frame:00000000000071E9                 db  83h
.eh_frame:00000000000071EA                 db    3
.eh_frame:00000000000071EB                 db  49h ; I
.eh_frame:00000000000071EC                 db  0Eh
.eh_frame:00000000000071ED                 db  20h
.eh_frame:00000000000071EE                 db  6Eh ; n
.eh_frame:00000000000071EF                 db  0Ah
.eh_frame:00000000000071F0                 db  0Eh
.eh_frame:00000000000071F1                 db  18h
.eh_frame:00000000000071F2                 db  41h ; A
.eh_frame:00000000000071F3                 db  0Eh
.eh_frame:00000000000071F4                 db  10h
.eh_frame:00000000000071F5                 db  41h ; A
.eh_frame:00000000000071F6                 db  0Eh
.eh_frame:00000000000071F7                 db    8
.eh_frame:00000000000071F8                 db  45h ; E
.eh_frame:00000000000071F9                 db  0Bh
.eh_frame:00000000000071FA                 db    2
.eh_frame:00000000000071FB                 db  4Ah ; J
.eh_frame:00000000000071FC                 db  0Ah
.eh_frame:00000000000071FD                 db  0Eh
.eh_frame:00000000000071FE                 db  18h
.eh_frame:00000000000071FF                 db  41h ; A
.eh_frame:0000000000007200                 db  0Eh
.eh_frame:0000000000007201                 db  10h
.eh_frame:0000000000007202                 db  41h ; A
.eh_frame:0000000000007203                 db  0Eh
.eh_frame:0000000000007204                 db    8
.eh_frame:0000000000007205                 db  44h ; D
.eh_frame:0000000000007206                 db  0Bh
.eh_frame:0000000000007207                 db    2
.eh_frame:0000000000007208                 db  54h ; T
.eh_frame:0000000000007209                 db  0Eh
.eh_frame:000000000000720A                 db  18h
.eh_frame:000000000000720B                 db  41h ; A
.eh_frame:000000000000720C                 db  0Eh
.eh_frame:000000000000720D                 db  10h
.eh_frame:000000000000720E                 db  41h ; A
.eh_frame:000000000000720F                 db  0Eh
.eh_frame:0000000000007210                 db    8
.eh_frame:0000000000007211                 db    0
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db  74h ; t
.eh_frame:0000000000007215                 db    0
.eh_frame:0000000000007216                 db    0
.eh_frame:0000000000007217                 db    0
.eh_frame:0000000000007218                 db 0C8h
.eh_frame:0000000000007219                 db    3
.eh_frame:000000000000721A                 db    0
.eh_frame:000000000000721B                 db    0
.eh_frame:000000000000721C                 db  34h ; 4
.eh_frame:000000000000721D                 db 0BBh
.eh_frame:000000000000721E                 db 0FFh
.eh_frame:000000000000721F                 db 0FFh
.eh_frame:0000000000007220                 db  34h ; 4
.eh_frame:0000000000007221                 db  12h
.eh_frame:0000000000007222                 db    0
.eh_frame:0000000000007223                 db    0
.eh_frame:0000000000007224                 db    0
.eh_frame:0000000000007225                 db  42h ; B
.eh_frame:0000000000007226                 db  0Eh
.eh_frame:0000000000007227                 db  10h
.eh_frame:0000000000007228                 db  8Fh
.eh_frame:0000000000007229                 db    2
.eh_frame:000000000000722A                 db  42h ; B
.eh_frame:000000000000722B                 db  0Eh
.eh_frame:000000000000722C                 db  18h
.eh_frame:000000000000722D                 db  8Eh
.eh_frame:000000000000722E                 db    3
.eh_frame:000000000000722F                 db  45h ; E
.eh_frame:0000000000007230                 db  0Eh
.eh_frame:0000000000007231                 db  20h
.eh_frame:0000000000007232                 db  8Dh
.eh_frame:0000000000007233                 db    4
.eh_frame:0000000000007234                 db  42h ; B
.eh_frame:0000000000007235                 db  0Eh
.eh_frame:0000000000007236                 db  28h ; (
.eh_frame:0000000000007237                 db  8Ch
.eh_frame:0000000000007238                 db    5
.eh_frame:0000000000007239                 db  44h ; D
.eh_frame:000000000000723A                 db  0Eh
.eh_frame:000000000000723B                 db  30h ; 0
.eh_frame:000000000000723C                 db  86h
.eh_frame:000000000000723D                 db    6
.eh_frame:000000000000723E                 db  41h ; A
.eh_frame:000000000000723F                 db  0Eh
.eh_frame:0000000000007240                 db  38h ; 8
.eh_frame:0000000000007241                 db  83h
.eh_frame:0000000000007242                 db    7
.eh_frame:0000000000007243                 db  53h ; S
.eh_frame:0000000000007244                 db  0Eh
.eh_frame:0000000000007245                 db 0F0h
.eh_frame:0000000000007246                 db    1
.eh_frame:0000000000007247                 db    3
.eh_frame:0000000000007248                 db  81h
.eh_frame:0000000000007249                 db  0Bh
.eh_frame:000000000000724A                 db  0Eh
.eh_frame:000000000000724B                 db 0F8h
.eh_frame:000000000000724C                 db    1
.eh_frame:000000000000724D                 db  4Ah ; J
.eh_frame:000000000000724E                 db  0Eh
.eh_frame:000000000000724F                 db  80h
.eh_frame:0000000000007250                 db    2
.eh_frame:0000000000007251                 db  44h ; D
.eh_frame:0000000000007252                 db  0Eh
.eh_frame:0000000000007253                 db  88h
.eh_frame:0000000000007254                 db    2
.eh_frame:0000000000007255                 db  45h ; E
.eh_frame:0000000000007256                 db  0Eh
.eh_frame:0000000000007257                 db  90h
.eh_frame:0000000000007258                 db    2
.eh_frame:0000000000007259                 db  5Fh ; _
.eh_frame:000000000000725A                 db  0Eh
.eh_frame:000000000000725B                 db 0F0h
.eh_frame:000000000000725C                 db    1
.eh_frame:000000000000725D                 db  64h ; d
.eh_frame:000000000000725E                 db  0Ah
.eh_frame:000000000000725F                 db  0Eh
.eh_frame:0000000000007260                 db  38h ; 8
.eh_frame:0000000000007261                 db  41h ; A
.eh_frame:0000000000007262                 db  0Eh
.eh_frame:0000000000007263                 db  30h ; 0
.eh_frame:0000000000007264                 db  41h ; A
.eh_frame:0000000000007265                 db  0Eh
.eh_frame:0000000000007266                 db  28h ; (
.eh_frame:0000000000007267                 db  42h ; B
.eh_frame:0000000000007268                 db  0Eh
.eh_frame:0000000000007269                 db  20h
.eh_frame:000000000000726A                 db  42h ; B
.eh_frame:000000000000726B                 db  0Eh
.eh_frame:000000000000726C                 db  18h
.eh_frame:000000000000726D                 db  42h ; B
.eh_frame:000000000000726E                 db  0Eh
.eh_frame:000000000000726F                 db  10h
.eh_frame:0000000000007270                 db  42h ; B
.eh_frame:0000000000007271                 db  0Eh
.eh_frame:0000000000007272                 db    8
.eh_frame:0000000000007273                 db  44h ; D
.eh_frame:0000000000007274                 db  0Bh
.eh_frame:0000000000007275                 db    3
.eh_frame:0000000000007276                 db  99h
.eh_frame:0000000000007277                 db    5
.eh_frame:0000000000007278                 db  0Eh
.eh_frame:0000000000007279                 db 0F8h
.eh_frame:000000000000727A                 db    1
.eh_frame:000000000000727B                 db  4Dh ; M
.eh_frame:000000000000727C                 db  0Eh
.eh_frame:000000000000727D                 db  80h
.eh_frame:000000000000727E                 db    2
.eh_frame:000000000000727F                 db  44h ; D
.eh_frame:0000000000007280                 db  0Eh
.eh_frame:0000000000007281                 db  88h
.eh_frame:0000000000007282                 db    2
.eh_frame:0000000000007283                 db  47h ; G
.eh_frame:0000000000007284                 db  0Eh
.eh_frame:0000000000007285                 db  90h
.eh_frame:0000000000007286                 db    2
.eh_frame:0000000000007287                 db  5Bh ; [
.eh_frame:0000000000007288                 db  0Eh
.eh_frame:0000000000007289                 db 0F0h
.eh_frame:000000000000728A                 db    1
.eh_frame:000000000000728B                 db    0
.eh_frame:000000000000728C                 db  68h ; h
.eh_frame:000000000000728D                 db    0
.eh_frame:000000000000728E                 db    0
.eh_frame:000000000000728F                 db    0
.eh_frame:0000000000007290                 db  40h ; @
.eh_frame:0000000000007291                 db    4
.eh_frame:0000000000007292                 db    0
.eh_frame:0000000000007293                 db    0
.eh_frame:0000000000007294                 db 0FCh
.eh_frame:0000000000007295                 db 0CCh
.eh_frame:0000000000007296                 db 0FFh
.eh_frame:0000000000007297                 db 0FFh
.eh_frame:0000000000007298                 db 0ABh
.eh_frame:0000000000007299                 db    1
.eh_frame:000000000000729A                 db    0
.eh_frame:000000000000729B                 db    0
.eh_frame:000000000000729C                 db    0
.eh_frame:000000000000729D                 db  42h ; B
.eh_frame:000000000000729E                 db  0Eh
.eh_frame:000000000000729F                 db  10h
.eh_frame:00000000000072A0                 db  8Fh
.eh_frame:00000000000072A1                 db    2
.eh_frame:00000000000072A2                 db  42h ; B
.eh_frame:00000000000072A3                 db  0Eh
.eh_frame:00000000000072A4                 db  18h
.eh_frame:00000000000072A5                 db  8Eh
.eh_frame:00000000000072A6                 db    3
.eh_frame:00000000000072A7                 db  45h ; E
.eh_frame:00000000000072A8                 db  0Eh
.eh_frame:00000000000072A9                 db  20h
.eh_frame:00000000000072AA                 db  8Dh
.eh_frame:00000000000072AB                 db    4
.eh_frame:00000000000072AC                 db  42h ; B
.eh_frame:00000000000072AD                 db  0Eh
.eh_frame:00000000000072AE                 db  28h ; (
.eh_frame:00000000000072AF                 db  8Ch
.eh_frame:00000000000072B0                 db    5
.eh_frame:00000000000072B1                 db  44h ; D
.eh_frame:00000000000072B2                 db  0Eh
.eh_frame:00000000000072B3                 db  30h ; 0
.eh_frame:00000000000072B4                 db  86h
.eh_frame:00000000000072B5                 db    6
.eh_frame:00000000000072B6                 db  41h ; A
.eh_frame:00000000000072B7                 db  0Eh
.eh_frame:00000000000072B8                 db  38h ; 8
.eh_frame:00000000000072B9                 db  83h
.eh_frame:00000000000072BA                 db    7
.eh_frame:00000000000072BB                 db  47h ; G
.eh_frame:00000000000072BC                 db  0Eh
.eh_frame:00000000000072BD                 db  60h ; `
.eh_frame:00000000000072BE                 db    2
.eh_frame:00000000000072BF                 db  99h
.eh_frame:00000000000072C0                 db  0Eh
.eh_frame:00000000000072C1                 db  68h ; h
.eh_frame:00000000000072C2                 db  5Fh ; _
.eh_frame:00000000000072C3                 db  0Eh
.eh_frame:00000000000072C4                 db  70h ; p
.eh_frame:00000000000072C5                 db  46h ; F
.eh_frame:00000000000072C6                 db  0Eh
.eh_frame:00000000000072C7                 db  78h ; x
.eh_frame:00000000000072C8                 db  42h ; B
.eh_frame:00000000000072C9                 db  0Eh
.eh_frame:00000000000072CA                 db  80h
.eh_frame:00000000000072CB                 db    1
.eh_frame:00000000000072CC                 db  59h ; Y
.eh_frame:00000000000072CD                 db  0Eh
.eh_frame:00000000000072CE                 db  60h ; `
.eh_frame:00000000000072CF                 db    2
.eh_frame:00000000000072D0                 db  40h ; @
.eh_frame:00000000000072D1                 db  0Eh
.eh_frame:00000000000072D2                 db  68h ; h
.eh_frame:00000000000072D3                 db  4Bh ; K
.eh_frame:00000000000072D4                 db  0Eh
.eh_frame:00000000000072D5                 db  70h ; p
.eh_frame:00000000000072D6                 db  43h ; C
.eh_frame:00000000000072D7                 db  0Eh
.eh_frame:00000000000072D8                 db  78h ; x
.eh_frame:00000000000072D9                 db  45h ; E
.eh_frame:00000000000072DA                 db  0Eh
.eh_frame:00000000000072DB                 db  80h
.eh_frame:00000000000072DC                 db    1
.eh_frame:00000000000072DD                 db  5Eh ; ^
.eh_frame:00000000000072DE                 db  0Eh
.eh_frame:00000000000072DF                 db  60h ; `
.eh_frame:00000000000072E0                 db  4Ch ; L
.eh_frame:00000000000072E1                 db  0Ah
.eh_frame:00000000000072E2                 db  0Eh
.eh_frame:00000000000072E3                 db  38h ; 8
.eh_frame:00000000000072E4                 db  44h ; D
.eh_frame:00000000000072E5                 db  0Eh
.eh_frame:00000000000072E6                 db  30h ; 0
.eh_frame:00000000000072E7                 db  41h ; A
.eh_frame:00000000000072E8                 db  0Eh
.eh_frame:00000000000072E9                 db  28h ; (
.eh_frame:00000000000072EA                 db  42h ; B
.eh_frame:00000000000072EB                 db  0Eh
.eh_frame:00000000000072EC                 db  20h
.eh_frame:00000000000072ED                 db  42h ; B
.eh_frame:00000000000072EE                 db  0Eh
.eh_frame:00000000000072EF                 db  18h
.eh_frame:00000000000072F0                 db  42h ; B
.eh_frame:00000000000072F1                 db  0Eh
.eh_frame:00000000000072F2                 db  10h
.eh_frame:00000000000072F3                 db  42h ; B
.eh_frame:00000000000072F4                 db  0Eh
.eh_frame:00000000000072F5                 db    8
.eh_frame:00000000000072F6                 db  46h ; F
.eh_frame:00000000000072F7                 db  0Bh
.eh_frame:00000000000072F8                 db  28h ; (
.eh_frame:00000000000072F9                 db    0
.eh_frame:00000000000072FA                 db    0
.eh_frame:00000000000072FB                 db    0
.eh_frame:00000000000072FC                 db 0ACh
.eh_frame:00000000000072FD                 db    4
.eh_frame:00000000000072FE                 db    0
.eh_frame:00000000000072FF                 db    0
.eh_frame:0000000000007300                 db  40h ; @
.eh_frame:0000000000007301                 db 0CEh
.eh_frame:0000000000007302                 db 0FFh
.eh_frame:0000000000007303                 db 0FFh
.eh_frame:0000000000007304                 db  36h ; 6
.eh_frame:0000000000007305                 db    0
.eh_frame:0000000000007306                 db    0
.eh_frame:0000000000007307                 db    0
.eh_frame:0000000000007308                 db    0
.eh_frame:0000000000007309                 db  42h ; B
.eh_frame:000000000000730A                 db  0Eh
.eh_frame:000000000000730B                 db  10h
.eh_frame:000000000000730C                 db  8Ch
.eh_frame:000000000000730D                 db    2
.eh_frame:000000000000730E                 db  41h ; A
.eh_frame:000000000000730F                 db  0Eh
.eh_frame:0000000000007310                 db  18h
.eh_frame:0000000000007311                 db  86h
.eh_frame:0000000000007312                 db    3
.eh_frame:0000000000007313                 db  41h ; A
.eh_frame:0000000000007314                 db  0Eh
.eh_frame:0000000000007315                 db  20h
.eh_frame:0000000000007316                 db  83h
.eh_frame:0000000000007317                 db    4
.eh_frame:0000000000007318                 db  6Eh ; n
.eh_frame:0000000000007319                 db  0Eh
.eh_frame:000000000000731A                 db  18h
.eh_frame:000000000000731B                 db  41h ; A
.eh_frame:000000000000731C                 db  0Eh
.eh_frame:000000000000731D                 db  10h
.eh_frame:000000000000731E                 db  42h ; B
.eh_frame:000000000000731F                 db  0Eh
.eh_frame:0000000000007320                 db    8
.eh_frame:0000000000007321                 db    0
.eh_frame:0000000000007322                 db    0
.eh_frame:0000000000007323                 db    0
.eh_frame:0000000000007324                 db  10h
.eh_frame:0000000000007325                 db    0
.eh_frame:0000000000007326                 db    0
.eh_frame:0000000000007327                 db    0
.eh_frame:0000000000007328                 db 0D8h
.eh_frame:0000000000007329                 db    4
.eh_frame:000000000000732A                 db    0
.eh_frame:000000000000732B                 db    0
.eh_frame:000000000000732C                 db  54h ; T
.eh_frame:000000000000732D                 db 0CEh
.eh_frame:000000000000732E                 db 0FFh
.eh_frame:000000000000732F                 db 0FFh
.eh_frame:0000000000007330                 db  11h
.eh_frame:0000000000007331                 db    0
.eh_frame:0000000000007332                 db    0
.eh_frame:0000000000007333                 db    0
.eh_frame:0000000000007334                 db    0
.eh_frame:0000000000007335                 db    0
.eh_frame:0000000000007336                 db    0
.eh_frame:0000000000007337                 db    0
.eh_frame:0000000000007338                 db  10h
.eh_frame:0000000000007339                 db    0
.eh_frame:000000000000733A                 db    0
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db 0ECh
.eh_frame:000000000000733D                 db    4
.eh_frame:000000000000733E                 db    0
.eh_frame:000000000000733F                 db    0
.eh_frame:0000000000007340                 db  60h ; `
.eh_frame:0000000000007341                 db 0CEh
.eh_frame:0000000000007342                 db 0FFh
.eh_frame:0000000000007343                 db 0FFh
.eh_frame:0000000000007344                 db  11h
.eh_frame:0000000000007345                 db    0
.eh_frame:0000000000007346                 db    0
.eh_frame:0000000000007347                 db    0
.eh_frame:0000000000007348                 db    0
.eh_frame:0000000000007349                 db    0
.eh_frame:000000000000734A                 db    0
.eh_frame:000000000000734B                 db    0
.eh_frame:000000000000734C                 db  10h
.eh_frame:000000000000734D                 db    0
.eh_frame:000000000000734E                 db    0
.eh_frame:000000000000734F                 db    0
.eh_frame:0000000000007350                 db    0
.eh_frame:0000000000007351                 db    5
.eh_frame:0000000000007352                 db    0
.eh_frame:0000000000007353                 db    0
.eh_frame:0000000000007354                 db  6Ch ; l
.eh_frame:0000000000007355                 db 0CEh
.eh_frame:0000000000007356                 db 0FFh
.eh_frame:0000000000007357                 db 0FFh
.eh_frame:0000000000007358                 db  35h ; 5
.eh_frame:0000000000007359                 db    0
.eh_frame:000000000000735A                 db    0
.eh_frame:000000000000735B                 db    0
.eh_frame:000000000000735C                 db    0
.eh_frame:000000000000735D                 db    0
.eh_frame:000000000000735E                 db    0
.eh_frame:000000000000735F                 db    0
.eh_frame:0000000000007360                 db  10h
.eh_frame:0000000000007361                 db    0
.eh_frame:0000000000007362                 db    0
.eh_frame:0000000000007363                 db    0
.eh_frame:0000000000007364                 db  14h
.eh_frame:0000000000007365                 db    5
.eh_frame:0000000000007366                 db    0
.eh_frame:0000000000007367                 db    0
.eh_frame:0000000000007368                 db  98h
.eh_frame:0000000000007369                 db 0CEh
.eh_frame:000000000000736A                 db 0FFh
.eh_frame:000000000000736B                 db 0FFh
.eh_frame:000000000000736C                 db  15h
.eh_frame:000000000000736D                 db    0
.eh_frame:000000000000736E                 db    0
.eh_frame:000000000000736F                 db    0
.eh_frame:0000000000007370                 db    0
.eh_frame:0000000000007371                 db    0
.eh_frame:0000000000007372                 db    0
.eh_frame:0000000000007373                 db    0
.eh_frame:0000000000007374                 db  10h
.eh_frame:0000000000007375                 db    0
.eh_frame:0000000000007376                 db    0
.eh_frame:0000000000007377                 db    0
.eh_frame:0000000000007378                 db  28h ; (
.eh_frame:0000000000007379                 db    5
.eh_frame:000000000000737A                 db    0
.eh_frame:000000000000737B                 db    0
.eh_frame:000000000000737C                 db 0A4h
.eh_frame:000000000000737D                 db 0CEh
.eh_frame:000000000000737E                 db 0FFh
.eh_frame:000000000000737F                 db 0FFh
.eh_frame:0000000000007380                 db  30h ; 0
.eh_frame:0000000000007381                 db    0
.eh_frame:0000000000007382                 db    0
.eh_frame:0000000000007383                 db    0
.eh_frame:0000000000007384                 db    0
.eh_frame:0000000000007385                 db  6Bh ; k
.eh_frame:0000000000007386                 db  0Eh
.eh_frame:0000000000007387                 db  10h
.eh_frame:0000000000007388                 db  50h ; P
.eh_frame:0000000000007389                 db    0
.eh_frame:000000000000738A                 db    0
.eh_frame:000000000000738B                 db    0
.eh_frame:000000000000738C                 db  3Ch ; <
.eh_frame:000000000000738D                 db    5
.eh_frame:000000000000738E                 db    0
.eh_frame:000000000000738F                 db    0
.eh_frame:0000000000007390                 db 0C0h
.eh_frame:0000000000007391                 db 0CEh
.eh_frame:0000000000007392                 db 0FFh
.eh_frame:0000000000007393                 db 0FFh
.eh_frame:0000000000007394                 db  74h ; t
.eh_frame:0000000000007395                 db    0
.eh_frame:0000000000007396                 db    0
.eh_frame:0000000000007397                 db    0
.eh_frame:0000000000007398                 db    0
.eh_frame:0000000000007399                 db  42h ; B
.eh_frame:000000000000739A                 db  0Eh
.eh_frame:000000000000739B                 db  10h
.eh_frame:000000000000739C                 db  8Fh
.eh_frame:000000000000739D                 db    2
.eh_frame:000000000000739E                 db  42h ; B
.eh_frame:000000000000739F                 db  0Eh
.eh_frame:00000000000073A0                 db  18h
.eh_frame:00000000000073A1                 db  8Eh
.eh_frame:00000000000073A2                 db    3
.eh_frame:00000000000073A3                 db  49h ; I
.eh_frame:00000000000073A4                 db  0Eh
.eh_frame:00000000000073A5                 db  20h
.eh_frame:00000000000073A6                 db  8Dh
.eh_frame:00000000000073A7                 db    4
.eh_frame:00000000000073A8                 db  42h ; B
.eh_frame:00000000000073A9                 db  0Eh
.eh_frame:00000000000073AA                 db  28h ; (
.eh_frame:00000000000073AB                 db  8Ch
.eh_frame:00000000000073AC                 db    5
.eh_frame:00000000000073AD                 db  44h ; D
.eh_frame:00000000000073AE                 db  0Eh
.eh_frame:00000000000073AF                 db  30h ; 0
.eh_frame:00000000000073B0                 db  86h
.eh_frame:00000000000073B1                 db    6
.eh_frame:00000000000073B2                 db  41h ; A
.eh_frame:00000000000073B3                 db  0Eh
.eh_frame:00000000000073B4                 db  38h ; 8
.eh_frame:00000000000073B5                 db  83h
.eh_frame:00000000000073B6                 db    7
.eh_frame:00000000000073B7                 db  4Dh ; M
.eh_frame:00000000000073B8                 db  0Eh
.eh_frame:00000000000073B9                 db  50h ; P
.eh_frame:00000000000073BA                 db  5Fh ; _
.eh_frame:00000000000073BB                 db  0Eh
.eh_frame:00000000000073BC                 db  58h ; X
.eh_frame:00000000000073BD                 db  47h ; G
.eh_frame:00000000000073BE                 db  0Eh
.eh_frame:00000000000073BF                 db  60h ; `
.eh_frame:00000000000073C0                 db  46h ; F
.eh_frame:00000000000073C1                 db  0Eh
.eh_frame:00000000000073C2                 db  68h ; h
.eh_frame:00000000000073C3                 db  44h ; D
.eh_frame:00000000000073C4                 db  0Eh
.eh_frame:00000000000073C5                 db  70h ; p
.eh_frame:00000000000073C6                 db  58h ; X
.eh_frame:00000000000073C7                 db  0Eh
.eh_frame:00000000000073C8                 db  38h ; 8
.eh_frame:00000000000073C9                 db  41h ; A
.eh_frame:00000000000073CA                 db  0Eh
.eh_frame:00000000000073CB                 db  30h ; 0
.eh_frame:00000000000073CC                 db  41h ; A
.eh_frame:00000000000073CD                 db  0Eh
.eh_frame:00000000000073CE                 db  28h ; (
.eh_frame:00000000000073CF                 db  42h ; B
.eh_frame:00000000000073D0                 db  0Eh
.eh_frame:00000000000073D1                 db  20h
.eh_frame:00000000000073D2                 db  42h ; B
.eh_frame:00000000000073D3                 db  0Eh
.eh_frame:00000000000073D4                 db  18h
.eh_frame:00000000000073D5                 db  42h ; B
.eh_frame:00000000000073D6                 db  0Eh
.eh_frame:00000000000073D7                 db  10h
.eh_frame:00000000000073D8                 db  42h ; B
.eh_frame:00000000000073D9                 db  0Eh
.eh_frame:00000000000073DA                 db    8
.eh_frame:00000000000073DB                 db    0
.eh_frame:00000000000073DC                 db  68h ; h
.eh_frame:00000000000073DD                 db    0
.eh_frame:00000000000073DE                 db    0
.eh_frame:00000000000073DF                 db    0
.eh_frame:00000000000073E0                 db  90h
.eh_frame:00000000000073E1                 db    5
.eh_frame:00000000000073E2                 db    0
.eh_frame:00000000000073E3                 db    0
.eh_frame:00000000000073E4                 db 0ECh
.eh_frame:00000000000073E5                 db 0CEh
.eh_frame:00000000000073E6                 db 0FFh
.eh_frame:00000000000073E7                 db 0FFh
.eh_frame:00000000000073E8                 db 0E3h
.eh_frame:00000000000073E9                 db    0
.eh_frame:00000000000073EA                 db    0
.eh_frame:00000000000073EB                 db    0
.eh_frame:00000000000073EC                 db    0
.eh_frame:00000000000073ED                 db  42h ; B
.eh_frame:00000000000073EE                 db  0Eh
.eh_frame:00000000000073EF                 db  10h
.eh_frame:00000000000073F0                 db  8Fh
.eh_frame:00000000000073F1                 db    2
.eh_frame:00000000000073F2                 db  42h ; B
.eh_frame:00000000000073F3                 db  0Eh
.eh_frame:00000000000073F4                 db  18h
.eh_frame:00000000000073F5                 db  8Eh
.eh_frame:00000000000073F6                 db    3
.eh_frame:00000000000073F7                 db  49h ; I
.eh_frame:00000000000073F8                 db  0Eh
.eh_frame:00000000000073F9                 db  20h
.eh_frame:00000000000073FA                 db  8Dh
.eh_frame:00000000000073FB                 db    4
.eh_frame:00000000000073FC                 db  42h ; B
.eh_frame:00000000000073FD                 db  0Eh
.eh_frame:00000000000073FE                 db  28h ; (
.eh_frame:00000000000073FF                 db  8Ch
.eh_frame:0000000000007400                 db    5
.eh_frame:0000000000007401                 db  44h ; D
.eh_frame:0000000000007402                 db  0Eh
.eh_frame:0000000000007403                 db  30h ; 0
.eh_frame:0000000000007404                 db  86h
.eh_frame:0000000000007405                 db    6
.eh_frame:0000000000007406                 db  41h ; A
.eh_frame:0000000000007407                 db  0Eh
.eh_frame:0000000000007408                 db  38h ; 8
.eh_frame:0000000000007409                 db  83h
.eh_frame:000000000000740A                 db    7
.eh_frame:000000000000740B                 db  4Dh ; M
.eh_frame:000000000000740C                 db  0Eh
.eh_frame:000000000000740D                 db  70h ; p
.eh_frame:000000000000740E                 db  65h ; e
.eh_frame:000000000000740F                 db  0Eh
.eh_frame:0000000000007410                 db  78h ; x
.eh_frame:0000000000007411                 db  4Dh ; M
.eh_frame:0000000000007412                 db  0Eh
.eh_frame:0000000000007413                 db  80h
.eh_frame:0000000000007414                 db    1
.eh_frame:0000000000007415                 db  46h ; F
.eh_frame:0000000000007416                 db  0Eh
.eh_frame:0000000000007417                 db  88h
.eh_frame:0000000000007418                 db    1
.eh_frame:0000000000007419                 db  42h ; B
.eh_frame:000000000000741A                 db  0Eh
.eh_frame:000000000000741B                 db  90h
.eh_frame:000000000000741C                 db    1
.eh_frame:000000000000741D                 db  5Eh ; ^
.eh_frame:000000000000741E                 db  0Eh
.eh_frame:000000000000741F                 db  70h ; p
.eh_frame:0000000000007420                 db  56h ; V
.eh_frame:0000000000007421                 db  0Eh
.eh_frame:0000000000007422                 db  78h ; x
.eh_frame:0000000000007423                 db  43h ; C
.eh_frame:0000000000007424                 db  0Eh
.eh_frame:0000000000007425                 db  80h
.eh_frame:0000000000007426                 db    1
.eh_frame:0000000000007427                 db  43h ; C
.eh_frame:0000000000007428                 db  0Eh
.eh_frame:0000000000007429                 db  88h
.eh_frame:000000000000742A                 db    1
.eh_frame:000000000000742B                 db  56h ; V
.eh_frame:000000000000742C                 db  0Eh
.eh_frame:000000000000742D                 db  90h
.eh_frame:000000000000742E                 db    1
.eh_frame:000000000000742F                 db  52h ; R
.eh_frame:0000000000007430                 db  0Eh
.eh_frame:0000000000007431                 db  70h ; p
.eh_frame:0000000000007432                 db  5Bh ; [
.eh_frame:0000000000007433                 db  0Eh
.eh_frame:0000000000007434                 db  38h ; 8
.eh_frame:0000000000007435                 db  41h ; A
.eh_frame:0000000000007436                 db  0Eh
.eh_frame:0000000000007437                 db  30h ; 0
.eh_frame:0000000000007438                 db  41h ; A
.eh_frame:0000000000007439                 db  0Eh
.eh_frame:000000000000743A                 db  28h ; (
.eh_frame:000000000000743B                 db  42h ; B
.eh_frame:000000000000743C                 db  0Eh
.eh_frame:000000000000743D                 db  20h
.eh_frame:000000000000743E                 db  42h ; B
.eh_frame:000000000000743F                 db  0Eh
.eh_frame:0000000000007440                 db  18h
.eh_frame:0000000000007441                 db  42h ; B
.eh_frame:0000000000007442                 db  0Eh
.eh_frame:0000000000007443                 db  10h
.eh_frame:0000000000007444                 db  42h ; B
.eh_frame:0000000000007445                 db  0Eh
.eh_frame:0000000000007446                 db    8
.eh_frame:0000000000007447                 db    0
.eh_frame:0000000000007448                 db  10h
.eh_frame:0000000000007449                 db    0
.eh_frame:000000000000744A                 db    0
.eh_frame:000000000000744B                 db    0
.eh_frame:000000000000744C                 db 0FCh
.eh_frame:000000000000744D                 db    5
.eh_frame:000000000000744E                 db    0
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db  70h ; p
.eh_frame:0000000000007451                 db 0CFh
.eh_frame:0000000000007452                 db 0FFh
.eh_frame:0000000000007453                 db 0FFh
.eh_frame:0000000000007454                 db  0Ah
.eh_frame:0000000000007455                 db    0
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db    0
.eh_frame:0000000000007459                 db    0
.eh_frame:000000000000745A                 db    0
.eh_frame:000000000000745B                 db    0
.eh_frame:000000000000745C                 db  28h ; (
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db  10h
.eh_frame:0000000000007461                 db    6
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db  6Ch ; l
.eh_frame:0000000000007465                 db 0CFh
.eh_frame:0000000000007466                 db 0FFh
.eh_frame:0000000000007467                 db 0FFh
.eh_frame:0000000000007468                 db  93h
.eh_frame:0000000000007469                 db    0
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db    0
.eh_frame:000000000000746D                 db  48h ; H
.eh_frame:000000000000746E                 db  0Eh
.eh_frame:000000000000746F                 db  10h
.eh_frame:0000000000007470                 db  8Ch
.eh_frame:0000000000007471                 db    2
.eh_frame:0000000000007472                 db  48h ; H
.eh_frame:0000000000007473                 db  0Eh
.eh_frame:0000000000007474                 db  18h
.eh_frame:0000000000007475                 db  86h
.eh_frame:0000000000007476                 db    3
.eh_frame:0000000000007477                 db  41h ; A
.eh_frame:0000000000007478                 db  0Eh
.eh_frame:0000000000007479                 db  20h
.eh_frame:000000000000747A                 db  83h
.eh_frame:000000000000747B                 db    4
.eh_frame:000000000000747C                 db    2
.eh_frame:000000000000747D                 db  74h ; t
.eh_frame:000000000000747E                 db  0Eh
.eh_frame:000000000000747F                 db  18h
.eh_frame:0000000000007480                 db  4Bh ; K
.eh_frame:0000000000007481                 db  0Eh
.eh_frame:0000000000007482                 db  10h
.eh_frame:0000000000007483                 db  42h ; B
.eh_frame:0000000000007484                 db  0Eh
.eh_frame:0000000000007485                 db    8
.eh_frame:0000000000007486                 db    0
.eh_frame:0000000000007487                 db    0
.eh_frame:0000000000007488                 db  10h
.eh_frame:0000000000007489                 db    0
.eh_frame:000000000000748A                 db    0
.eh_frame:000000000000748B                 db    0
.eh_frame:000000000000748C                 db  3Ch ; <
.eh_frame:000000000000748D                 db    6
.eh_frame:000000000000748E                 db    0
.eh_frame:000000000000748F                 db    0
.eh_frame:0000000000007490                 db 0E0h
.eh_frame:0000000000007491                 db 0CFh
.eh_frame:0000000000007492                 db 0FFh
.eh_frame:0000000000007493                 db 0FFh
.eh_frame:0000000000007494                 db  13h
.eh_frame:0000000000007495                 db    0
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db    0
.eh_frame:0000000000007499                 db    0
.eh_frame:000000000000749A                 db    0
.eh_frame:000000000000749B                 db    0
.eh_frame:000000000000749C                 db  10h
.eh_frame:000000000000749D                 db    0
.eh_frame:000000000000749E                 db    0
.eh_frame:000000000000749F                 db    0
.eh_frame:00000000000074A0                 db  50h ; P
.eh_frame:00000000000074A1                 db    6
.eh_frame:00000000000074A2                 db    0
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db 0ECh
.eh_frame:00000000000074A5                 db 0CFh
.eh_frame:00000000000074A6                 db 0FFh
.eh_frame:00000000000074A7                 db 0FFh
.eh_frame:00000000000074A8                 db  0Ch
.eh_frame:00000000000074A9                 db    0
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db    0
.eh_frame:00000000000074AD                 db    0
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db  10h
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db  64h ; d
.eh_frame:00000000000074B5                 db    6
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db 0E8h
.eh_frame:00000000000074B9                 db 0CFh
.eh_frame:00000000000074BA                 db 0FFh
.eh_frame:00000000000074BB                 db 0FFh
.eh_frame:00000000000074BC                 db  18h
.eh_frame:00000000000074BD                 db    0
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db    0
.eh_frame:00000000000074C1                 db    0
.eh_frame:00000000000074C2                 db    0
.eh_frame:00000000000074C3                 db    0
.eh_frame:00000000000074C4                 db  10h
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db  78h ; x
.eh_frame:00000000000074C9                 db    6
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db 0F4h
.eh_frame:00000000000074CD                 db 0CFh
.eh_frame:00000000000074CE                 db 0FFh
.eh_frame:00000000000074CF                 db 0FFh
.eh_frame:00000000000074D0                 db  14h
.eh_frame:00000000000074D1                 db    0
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db    0
.eh_frame:00000000000074D5                 db    0
.eh_frame:00000000000074D6                 db    0
.eh_frame:00000000000074D7                 db    0
.eh_frame:00000000000074D8                 db  18h
.eh_frame:00000000000074D9                 db    0
.eh_frame:00000000000074DA                 db    0
.eh_frame:00000000000074DB                 db    0
.eh_frame:00000000000074DC                 db  8Ch
.eh_frame:00000000000074DD                 db    6
.eh_frame:00000000000074DE                 db    0
.eh_frame:00000000000074DF                 db    0
.eh_frame:00000000000074E0                 db    0
.eh_frame:00000000000074E1                 db 0D0h
.eh_frame:00000000000074E2                 db 0FFh
.eh_frame:00000000000074E3                 db 0FFh
.eh_frame:00000000000074E4                 db  8Eh
.eh_frame:00000000000074E5                 db    0
.eh_frame:00000000000074E6                 db    0
.eh_frame:00000000000074E7                 db    0
.eh_frame:00000000000074E8                 db    0
.eh_frame:00000000000074E9                 db  44h ; D
.eh_frame:00000000000074EA                 db  0Eh
.eh_frame:00000000000074EB                 db  50h ; P
.eh_frame:00000000000074EC                 db    2
.eh_frame:00000000000074ED                 db  7Fh ; 
.eh_frame:00000000000074EE                 db  0Ah
.eh_frame:00000000000074EF                 db  0Eh
.eh_frame:00000000000074F0                 db    8
.eh_frame:00000000000074F1                 db  41h ; A
.eh_frame:00000000000074F2                 db  0Bh
.eh_frame:00000000000074F3                 db    0
.eh_frame:00000000000074F4                 db  18h
.eh_frame:00000000000074F5                 db    0
.eh_frame:00000000000074F6                 db    0
.eh_frame:00000000000074F7                 db    0
.eh_frame:00000000000074F8                 db 0A8h
.eh_frame:00000000000074F9                 db    6
.eh_frame:00000000000074FA                 db    0
.eh_frame:00000000000074FB                 db    0
.eh_frame:00000000000074FC                 db  74h ; t
.eh_frame:00000000000074FD                 db 0D0h
.eh_frame:00000000000074FE                 db 0FFh
.eh_frame:00000000000074FF                 db 0FFh
.eh_frame:0000000000007500                 db  8Ah
.eh_frame:0000000000007501                 db    0
.eh_frame:0000000000007502                 db    0
.eh_frame:0000000000007503                 db    0
.eh_frame:0000000000007504                 db    0
.eh_frame:0000000000007505                 db  44h ; D
.eh_frame:0000000000007506                 db  0Eh
.eh_frame:0000000000007507                 db  50h ; P
.eh_frame:0000000000007508                 db    2
.eh_frame:0000000000007509                 db  7Bh ; {
.eh_frame:000000000000750A                 db  0Ah
.eh_frame:000000000000750B                 db  0Eh
.eh_frame:000000000000750C                 db    8
.eh_frame:000000000000750D                 db  41h ; A
.eh_frame:000000000000750E                 db  0Bh
.eh_frame:000000000000750F                 db    0
.eh_frame:0000000000007510                 db  10h
.eh_frame:0000000000007511                 db    0
.eh_frame:0000000000007512                 db    0
.eh_frame:0000000000007513                 db    0
.eh_frame:0000000000007514                 db 0C4h
.eh_frame:0000000000007515                 db    6
.eh_frame:0000000000007516                 db    0
.eh_frame:0000000000007517                 db    0
.eh_frame:0000000000007518                 db 0E8h
.eh_frame:0000000000007519                 db 0D0h
.eh_frame:000000000000751A                 db 0FFh
.eh_frame:000000000000751B                 db 0FFh
.eh_frame:000000000000751C                 db  0Ch
.eh_frame:000000000000751D                 db    0
.eh_frame:000000000000751E                 db    0
.eh_frame:000000000000751F                 db    0
.eh_frame:0000000000007520                 db    0
.eh_frame:0000000000007521                 db    0
.eh_frame:0000000000007522                 db    0
.eh_frame:0000000000007523                 db    0
.eh_frame:0000000000007524                 db  10h
.eh_frame:0000000000007525                 db    0
.eh_frame:0000000000007526                 db    0
.eh_frame:0000000000007527                 db    0
.eh_frame:0000000000007528                 db 0D8h
.eh_frame:0000000000007529                 db    6
.eh_frame:000000000000752A                 db    0
.eh_frame:000000000000752B                 db    0
.eh_frame:000000000000752C                 db 0E4h
.eh_frame:000000000000752D                 db 0D0h
.eh_frame:000000000000752E                 db 0FFh
.eh_frame:000000000000752F                 db 0FFh
.eh_frame:0000000000007530                 db  0Fh
.eh_frame:0000000000007531                 db    0
.eh_frame:0000000000007532                 db    0
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db    0
.eh_frame:0000000000007535                 db    0
.eh_frame:0000000000007536                 db    0
.eh_frame:0000000000007537                 db    0
.eh_frame:0000000000007538                 db  18h
.eh_frame:0000000000007539                 db    0
.eh_frame:000000000000753A                 db    0
.eh_frame:000000000000753B                 db    0
.eh_frame:000000000000753C                 db 0ECh
.eh_frame:000000000000753D                 db    6
.eh_frame:000000000000753E                 db    0
.eh_frame:000000000000753F                 db    0
.eh_frame:0000000000007540                 db 0E0h
.eh_frame:0000000000007541                 db 0D0h
.eh_frame:0000000000007542                 db 0FFh
.eh_frame:0000000000007543                 db 0FFh
.eh_frame:0000000000007544                 db  98h
.eh_frame:0000000000007545                 db    0
.eh_frame:0000000000007546                 db    0
.eh_frame:0000000000007547                 db    0
.eh_frame:0000000000007548                 db    0
.eh_frame:0000000000007549                 db  44h ; D
.eh_frame:000000000000754A                 db  0Eh
.eh_frame:000000000000754B                 db  50h ; P
.eh_frame:000000000000754C                 db    2
.eh_frame:000000000000754D                 db  8Eh
.eh_frame:000000000000754E                 db  0Ah
.eh_frame:000000000000754F                 db  0Eh
.eh_frame:0000000000007550                 db    8
.eh_frame:0000000000007551                 db  41h ; A
.eh_frame:0000000000007552                 db  0Bh
.eh_frame:0000000000007553                 db    0
.eh_frame:0000000000007554                 db  10h
.eh_frame:0000000000007555                 db    0
.eh_frame:0000000000007556                 db    0
.eh_frame:0000000000007557                 db    0
.eh_frame:0000000000007558                 db    8
.eh_frame:0000000000007559                 db    7
.eh_frame:000000000000755A                 db    0
.eh_frame:000000000000755B                 db    0
.eh_frame:000000000000755C                 db  64h ; d
.eh_frame:000000000000755D                 db 0D1h
.eh_frame:000000000000755E                 db 0FFh
.eh_frame:000000000000755F                 db 0FFh
.eh_frame:0000000000007560                 db  10h
.eh_frame:0000000000007561                 db    0
.eh_frame:0000000000007562                 db    0
.eh_frame:0000000000007563                 db    0
.eh_frame:0000000000007564                 db    0
.eh_frame:0000000000007565                 db    0
.eh_frame:0000000000007566                 db    0
.eh_frame:0000000000007567                 db    0
.eh_frame:0000000000007568                 db  10h
.eh_frame:0000000000007569                 db    0
.eh_frame:000000000000756A                 db    0
.eh_frame:000000000000756B                 db    0
.eh_frame:000000000000756C                 db  1Ch
.eh_frame:000000000000756D                 db    7
.eh_frame:000000000000756E                 db    0
.eh_frame:000000000000756F                 db    0
.eh_frame:0000000000007570                 db  60h ; `
.eh_frame:0000000000007571                 db 0D1h
.eh_frame:0000000000007572                 db 0FFh
.eh_frame:0000000000007573                 db 0FFh
.eh_frame:0000000000007574                 db  11h
.eh_frame:0000000000007575                 db    0
.eh_frame:0000000000007576                 db    0
.eh_frame:0000000000007577                 db    0
.eh_frame:0000000000007578                 db    0
.eh_frame:0000000000007579                 db    0
.eh_frame:000000000000757A                 db    0
.eh_frame:000000000000757B                 db    0
.eh_frame:000000000000757C                 db  10h
.eh_frame:000000000000757D                 db    0
.eh_frame:000000000000757E                 db    0
.eh_frame:000000000000757F                 db    0
.eh_frame:0000000000007580                 db  30h ; 0
.eh_frame:0000000000007581                 db    7
.eh_frame:0000000000007582                 db    0
.eh_frame:0000000000007583                 db    0
.eh_frame:0000000000007584                 db  6Ch ; l
.eh_frame:0000000000007585                 db 0D1h
.eh_frame:0000000000007586                 db 0FFh
.eh_frame:0000000000007587                 db 0FFh
.eh_frame:0000000000007588                 db  0Ah
.eh_frame:0000000000007589                 db    0
.eh_frame:000000000000758A                 db    0
.eh_frame:000000000000758B                 db    0
.eh_frame:000000000000758C                 db    0
.eh_frame:000000000000758D                 db    0
.eh_frame:000000000000758E                 db    0
.eh_frame:000000000000758F                 db    0
.eh_frame:0000000000007590                 db  18h
.eh_frame:0000000000007591                 db    0
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db  44h ; D
.eh_frame:0000000000007595                 db    7
.eh_frame:0000000000007596                 db    0
.eh_frame:0000000000007597                 db    0
.eh_frame:0000000000007598                 db  68h ; h
.eh_frame:0000000000007599                 db 0D1h
.eh_frame:000000000000759A                 db 0FFh
.eh_frame:000000000000759B                 db 0FFh
.eh_frame:000000000000759C                 db  8Eh
.eh_frame:000000000000759D                 db    0
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db    0
.eh_frame:00000000000075A1                 db  44h ; D
.eh_frame:00000000000075A2                 db  0Eh
.eh_frame:00000000000075A3                 db  50h ; P
.eh_frame:00000000000075A4                 db    2
.eh_frame:00000000000075A5                 db  7Fh ; 
.eh_frame:00000000000075A6                 db  0Ah
.eh_frame:00000000000075A7                 db  0Eh
.eh_frame:00000000000075A8                 db    8
.eh_frame:00000000000075A9                 db  41h ; A
.eh_frame:00000000000075AA                 db  0Bh
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC                 db  18h
.eh_frame:00000000000075AD                 db    0
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db  60h ; `
.eh_frame:00000000000075B1                 db    7
.eh_frame:00000000000075B2                 db    0
.eh_frame:00000000000075B3                 db    0
.eh_frame:00000000000075B4                 db 0DCh
.eh_frame:00000000000075B5                 db 0D1h
.eh_frame:00000000000075B6                 db 0FFh
.eh_frame:00000000000075B7                 db 0FFh
.eh_frame:00000000000075B8                 db  91h
.eh_frame:00000000000075B9                 db    0
.eh_frame:00000000000075BA                 db    0
.eh_frame:00000000000075BB                 db    0
.eh_frame:00000000000075BC                 db    0
.eh_frame:00000000000075BD                 db  44h ; D
.eh_frame:00000000000075BE                 db  0Eh
.eh_frame:00000000000075BF                 db  50h ; P
.eh_frame:00000000000075C0                 db    2
.eh_frame:00000000000075C1                 db  82h
.eh_frame:00000000000075C2                 db  0Ah
.eh_frame:00000000000075C3                 db  0Eh
.eh_frame:00000000000075C4                 db    8
.eh_frame:00000000000075C5                 db  41h ; A
.eh_frame:00000000000075C6                 db  0Bh
.eh_frame:00000000000075C7                 db    0
.eh_frame:00000000000075C8                 db  10h
.eh_frame:00000000000075C9                 db    0
.eh_frame:00000000000075CA                 db    0
.eh_frame:00000000000075CB                 db    0
.eh_frame:00000000000075CC                 db  7Ch ; |
.eh_frame:00000000000075CD                 db    7
.eh_frame:00000000000075CE                 db    0
.eh_frame:00000000000075CF                 db    0
.eh_frame:00000000000075D0                 db  60h ; `
.eh_frame:00000000000075D1                 db 0D2h
.eh_frame:00000000000075D2                 db 0FFh
.eh_frame:00000000000075D3                 db 0FFh
.eh_frame:00000000000075D4                 db  0Ch
.eh_frame:00000000000075D5                 db    0
.eh_frame:00000000000075D6                 db    0
.eh_frame:00000000000075D7                 db    0
.eh_frame:00000000000075D8                 db    0
.eh_frame:00000000000075D9                 db    0
.eh_frame:00000000000075DA                 db    0
.eh_frame:00000000000075DB                 db    0
.eh_frame:00000000000075DC                 db  10h
.eh_frame:00000000000075DD                 db    0
.eh_frame:00000000000075DE                 db    0
.eh_frame:00000000000075DF                 db    0
.eh_frame:00000000000075E0                 db  90h
.eh_frame:00000000000075E1                 db    7
.eh_frame:00000000000075E2                 db    0
.eh_frame:00000000000075E3                 db    0
.eh_frame:00000000000075E4                 db  5Ch ; \
.eh_frame:00000000000075E5                 db 0D2h
.eh_frame:00000000000075E6                 db 0FFh
.eh_frame:00000000000075E7                 db 0FFh
.eh_frame:00000000000075E8                 db  17h
.eh_frame:00000000000075E9                 db    0
.eh_frame:00000000000075EA                 db    0
.eh_frame:00000000000075EB                 db    0
.eh_frame:00000000000075EC                 db    0
.eh_frame:00000000000075ED                 db    0
.eh_frame:00000000000075EE                 db    0
.eh_frame:00000000000075EF                 db    0
.eh_frame:00000000000075F0                 db  10h
.eh_frame:00000000000075F1                 db    0
.eh_frame:00000000000075F2                 db    0
.eh_frame:00000000000075F3                 db    0
.eh_frame:00000000000075F4                 db 0A4h
.eh_frame:00000000000075F5                 db    7
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db  68h ; h
.eh_frame:00000000000075F9                 db 0D2h
.eh_frame:00000000000075FA                 db 0FFh
.eh_frame:00000000000075FB                 db 0FFh
.eh_frame:00000000000075FC                 db  13h
.eh_frame:00000000000075FD                 db    0
.eh_frame:00000000000075FE                 db    0
.eh_frame:00000000000075FF                 db    0
.eh_frame:0000000000007600                 db    0
.eh_frame:0000000000007601                 db    0
.eh_frame:0000000000007602                 db    0
.eh_frame:0000000000007603                 db    0
.eh_frame:0000000000007604                 db  10h
.eh_frame:0000000000007605                 db    0
.eh_frame:0000000000007606                 db    0
.eh_frame:0000000000007607                 db    0
.eh_frame:0000000000007608                 db 0B8h
.eh_frame:0000000000007609                 db    7
.eh_frame:000000000000760A                 db    0
.eh_frame:000000000000760B                 db    0
.eh_frame:000000000000760C                 db  74h ; t
.eh_frame:000000000000760D                 db 0D2h
.eh_frame:000000000000760E                 db 0FFh
.eh_frame:000000000000760F                 db 0FFh
.eh_frame:0000000000007610                 db  0Ch
.eh_frame:0000000000007611                 db    0
.eh_frame:0000000000007612                 db    0
.eh_frame:0000000000007613                 db    0
.eh_frame:0000000000007614                 db    0
.eh_frame:0000000000007615                 db    0
.eh_frame:0000000000007616                 db    0
.eh_frame:0000000000007617                 db    0
.eh_frame:0000000000007618                 db  10h
.eh_frame:0000000000007619                 db    0
.eh_frame:000000000000761A                 db    0
.eh_frame:000000000000761B                 db    0
.eh_frame:000000000000761C                 db 0CCh
.eh_frame:000000000000761D                 db    7
.eh_frame:000000000000761E                 db    0
.eh_frame:000000000000761F                 db    0
.eh_frame:0000000000007620                 db  70h ; p
.eh_frame:0000000000007621                 db 0D2h
.eh_frame:0000000000007622                 db 0FFh
.eh_frame:0000000000007623                 db 0FFh
.eh_frame:0000000000007624                 db  14h
.eh_frame:0000000000007625                 db    0
.eh_frame:0000000000007626                 db    0
.eh_frame:0000000000007627                 db    0
.eh_frame:0000000000007628                 db    0
.eh_frame:0000000000007629                 db    0
.eh_frame:000000000000762A                 db    0
.eh_frame:000000000000762B                 db    0
.eh_frame:000000000000762C                 db  10h
.eh_frame:000000000000762D                 db    0
.eh_frame:000000000000762E                 db    0
.eh_frame:000000000000762F                 db    0
.eh_frame:0000000000007630                 db 0E0h
.eh_frame:0000000000007631                 db    7
.eh_frame:0000000000007632                 db    0
.eh_frame:0000000000007633                 db    0
.eh_frame:0000000000007634                 db  7Ch ; |
.eh_frame:0000000000007635                 db 0D2h
.eh_frame:0000000000007636                 db 0FFh
.eh_frame:0000000000007637                 db 0FFh
.eh_frame:0000000000007638                 db  13h
.eh_frame:0000000000007639                 db    0
.eh_frame:000000000000763A                 db    0
.eh_frame:000000000000763B                 db    0
.eh_frame:000000000000763C                 db    0
.eh_frame:000000000000763D                 db    0
.eh_frame:000000000000763E                 db    0
.eh_frame:000000000000763F                 db    0
.eh_frame:0000000000007640                 db  14h
.eh_frame:0000000000007641                 db    0
.eh_frame:0000000000007642                 db    0
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db 0F4h
.eh_frame:0000000000007645                 db    7
.eh_frame:0000000000007646                 db    0
.eh_frame:0000000000007647                 db    0
.eh_frame:0000000000007648                 db  88h
.eh_frame:0000000000007649                 db 0D2h
.eh_frame:000000000000764A                 db 0FFh
.eh_frame:000000000000764B                 db 0FFh
.eh_frame:000000000000764C                 db  18h
.eh_frame:000000000000764D                 db    0
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db    0
.eh_frame:0000000000007651                 db    0
.eh_frame:0000000000007652                 db    0
.eh_frame:0000000000007653                 db    0
.eh_frame:0000000000007654                 db    0
.eh_frame:0000000000007655                 db    0
.eh_frame:0000000000007656                 db    0
.eh_frame:0000000000007657                 db    0
.eh_frame:0000000000007658                 db  14h
.eh_frame:0000000000007659                 db    0
.eh_frame:000000000000765A                 db    0
.eh_frame:000000000000765B                 db    0
.eh_frame:000000000000765C                 db  0Ch
.eh_frame:000000000000765D                 db    8
.eh_frame:000000000000765E                 db    0
.eh_frame:000000000000765F                 db    0
.eh_frame:0000000000007660                 db  90h
.eh_frame:0000000000007661                 db 0D2h
.eh_frame:0000000000007662                 db 0FFh
.eh_frame:0000000000007663                 db 0FFh
.eh_frame:0000000000007664                 db  0Eh
.eh_frame:0000000000007665                 db    0
.eh_frame:0000000000007666                 db    0
.eh_frame:0000000000007667                 db    0
.eh_frame:0000000000007668                 db    0
.eh_frame:0000000000007669                 db    0
.eh_frame:000000000000766A                 db    0
.eh_frame:000000000000766B                 db    0
.eh_frame:000000000000766C                 db    0
.eh_frame:000000000000766D                 db    0
.eh_frame:000000000000766E                 db    0
.eh_frame:000000000000766F                 db    0
.eh_frame:0000000000007670                 db  10h
.eh_frame:0000000000007671                 db    1
.eh_frame:0000000000007672                 db    0
.eh_frame:0000000000007673                 db    0
.eh_frame:0000000000007674                 db  24h ; $
.eh_frame:0000000000007675                 db    8
.eh_frame:0000000000007676                 db    0
.eh_frame:0000000000007677                 db    0
.eh_frame:0000000000007678                 db  88h
.eh_frame:0000000000007679                 db 0D2h
.eh_frame:000000000000767A                 db 0FFh
.eh_frame:000000000000767B                 db 0FFh
.eh_frame:000000000000767C                 db  17h
.eh_frame:000000000000767D                 db    4
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db    0
.eh_frame:0000000000007681                 db  42h ; B
.eh_frame:0000000000007682                 db  0Eh
.eh_frame:0000000000007683                 db  10h
.eh_frame:0000000000007684                 db  8Fh
.eh_frame:0000000000007685                 db    2
.eh_frame:0000000000007686                 db  42h ; B
.eh_frame:0000000000007687                 db  0Eh
.eh_frame:0000000000007688                 db  18h
.eh_frame:0000000000007689                 db  8Eh
.eh_frame:000000000000768A                 db    3
.eh_frame:000000000000768B                 db  42h ; B
.eh_frame:000000000000768C                 db  0Eh
.eh_frame:000000000000768D                 db  20h
.eh_frame:000000000000768E                 db  8Dh
.eh_frame:000000000000768F                 db    4
.eh_frame:0000000000007690                 db  42h ; B
.eh_frame:0000000000007691                 db  0Eh
.eh_frame:0000000000007692                 db  28h ; (
.eh_frame:0000000000007693                 db  8Ch
.eh_frame:0000000000007694                 db    5
.eh_frame:0000000000007695                 db  44h ; D
.eh_frame:0000000000007696                 db  0Eh
.eh_frame:0000000000007697                 db  30h ; 0
.eh_frame:0000000000007698                 db  86h
.eh_frame:0000000000007699                 db    6
.eh_frame:000000000000769A                 db  41h ; A
.eh_frame:000000000000769B                 db  0Eh
.eh_frame:000000000000769C                 db  38h ; 8
.eh_frame:000000000000769D                 db  83h
.eh_frame:000000000000769E                 db    7
.eh_frame:000000000000769F                 db  4Ah ; J
.eh_frame:00000000000076A0                 db  0Eh
.eh_frame:00000000000076A1                 db  60h ; `
.eh_frame:00000000000076A2                 db    2
.eh_frame:00000000000076A3                 db 0DDh
.eh_frame:00000000000076A4                 db  0Eh
.eh_frame:00000000000076A5                 db  68h ; h
.eh_frame:00000000000076A6                 db  57h ; W
.eh_frame:00000000000076A7                 db  0Eh
.eh_frame:00000000000076A8                 db  70h ; p
.eh_frame:00000000000076A9                 db  42h ; B
.eh_frame:00000000000076AA                 db  0Eh
.eh_frame:00000000000076AB                 db  78h ; x
.eh_frame:00000000000076AC                 db  42h ; B
.eh_frame:00000000000076AD                 db  0Eh
.eh_frame:00000000000076AE                 db  80h
.eh_frame:00000000000076AF                 db    1
.eh_frame:00000000000076B0                 db  42h ; B
.eh_frame:00000000000076B1                 db  0Eh
.eh_frame:00000000000076B2                 db  88h
.eh_frame:00000000000076B3                 db    1
.eh_frame:00000000000076B4                 db  42h ; B
.eh_frame:00000000000076B5                 db  0Eh
.eh_frame:00000000000076B6                 db  90h
.eh_frame:00000000000076B7                 db    1
.eh_frame:00000000000076B8                 db  53h ; S
.eh_frame:00000000000076B9                 db  0Eh
.eh_frame:00000000000076BA                 db  60h ; `
.eh_frame:00000000000076BB                 db  44h ; D
.eh_frame:00000000000076BC                 db  0Ah
.eh_frame:00000000000076BD                 db  0Eh
.eh_frame:00000000000076BE                 db  38h ; 8
.eh_frame:00000000000076BF                 db  41h ; A
.eh_frame:00000000000076C0                 db  0Eh
.eh_frame:00000000000076C1                 db  30h ; 0
.eh_frame:00000000000076C2                 db  41h ; A
.eh_frame:00000000000076C3                 db  0Eh
.eh_frame:00000000000076C4                 db  28h ; (
.eh_frame:00000000000076C5                 db  42h ; B
.eh_frame:00000000000076C6                 db  0Eh
.eh_frame:00000000000076C7                 db  20h
.eh_frame:00000000000076C8                 db  42h ; B
.eh_frame:00000000000076C9                 db  0Eh
.eh_frame:00000000000076CA                 db  18h
.eh_frame:00000000000076CB                 db  42h ; B
.eh_frame:00000000000076CC                 db  0Eh
.eh_frame:00000000000076CD                 db  10h
.eh_frame:00000000000076CE                 db  42h ; B
.eh_frame:00000000000076CF                 db  0Eh
.eh_frame:00000000000076D0                 db    8
.eh_frame:00000000000076D1                 db  44h ; D
.eh_frame:00000000000076D2                 db  0Bh
.eh_frame:00000000000076D3                 db    2
.eh_frame:00000000000076D4                 db  78h ; x
.eh_frame:00000000000076D5                 db  0Ah
.eh_frame:00000000000076D6                 db  0Eh
.eh_frame:00000000000076D7                 db  68h ; h
.eh_frame:00000000000076D8                 db  48h ; H
.eh_frame:00000000000076D9                 db  0Bh
.eh_frame:00000000000076DA                 db  5Ah ; Z
.eh_frame:00000000000076DB                 db  0Ah
.eh_frame:00000000000076DC                 db  0Eh
.eh_frame:00000000000076DD                 db  38h ; 8
.eh_frame:00000000000076DE                 db  47h ; G
.eh_frame:00000000000076DF                 db  0Eh
.eh_frame:00000000000076E0                 db  30h ; 0
.eh_frame:00000000000076E1                 db  41h ; A
.eh_frame:00000000000076E2                 db  0Eh
.eh_frame:00000000000076E3                 db  28h ; (
.eh_frame:00000000000076E4                 db  42h ; B
.eh_frame:00000000000076E5                 db  0Eh
.eh_frame:00000000000076E6                 db  20h
.eh_frame:00000000000076E7                 db  42h ; B
.eh_frame:00000000000076E8                 db  0Eh
.eh_frame:00000000000076E9                 db  18h
.eh_frame:00000000000076EA                 db  42h ; B
.eh_frame:00000000000076EB                 db  0Eh
.eh_frame:00000000000076EC                 db  10h
.eh_frame:00000000000076ED                 db  42h ; B
.eh_frame:00000000000076EE                 db  0Eh
.eh_frame:00000000000076EF                 db    8
.eh_frame:00000000000076F0                 db  56h ; V
.eh_frame:00000000000076F1                 db  0Bh
.eh_frame:00000000000076F2                 db  5Eh ; ^
.eh_frame:00000000000076F3                 db  0Ah
.eh_frame:00000000000076F4                 db  0Eh
.eh_frame:00000000000076F5                 db  38h ; 8
.eh_frame:00000000000076F6                 db  52h ; R
.eh_frame:00000000000076F7                 db  0Eh
.eh_frame:00000000000076F8                 db  30h ; 0
.eh_frame:00000000000076F9                 db  41h ; A
.eh_frame:00000000000076FA                 db  0Eh
.eh_frame:00000000000076FB                 db  28h ; (
.eh_frame:00000000000076FC                 db  42h ; B
.eh_frame:00000000000076FD                 db  0Eh
.eh_frame:00000000000076FE                 db  20h
.eh_frame:00000000000076FF                 db  42h ; B
.eh_frame:0000000000007700                 db  0Eh
.eh_frame:0000000000007701                 db  18h
.eh_frame:0000000000007702                 db  42h ; B
.eh_frame:0000000000007703                 db  0Eh
.eh_frame:0000000000007704                 db  10h
.eh_frame:0000000000007705                 db  42h ; B
.eh_frame:0000000000007706                 db  0Eh
.eh_frame:0000000000007707                 db    8
.eh_frame:0000000000007708                 db  4Fh ; O
.eh_frame:0000000000007709                 db  0Bh
.eh_frame:000000000000770A                 db  62h ; b
.eh_frame:000000000000770B                 db  0Ah
.eh_frame:000000000000770C                 db  0Eh
.eh_frame:000000000000770D                 db  38h ; 8
.eh_frame:000000000000770E                 db  50h ; P
.eh_frame:000000000000770F                 db  0Eh
.eh_frame:0000000000007710                 db  30h ; 0
.eh_frame:0000000000007711                 db  41h ; A
.eh_frame:0000000000007712                 db  0Eh
.eh_frame:0000000000007713                 db  28h ; (
.eh_frame:0000000000007714                 db  42h ; B
.eh_frame:0000000000007715                 db  0Eh
.eh_frame:0000000000007716                 db  20h
.eh_frame:0000000000007717                 db  42h ; B
.eh_frame:0000000000007718                 db  0Eh
.eh_frame:0000000000007719                 db  18h
.eh_frame:000000000000771A                 db  42h ; B
.eh_frame:000000000000771B                 db  0Eh
.eh_frame:000000000000771C                 db  10h
.eh_frame:000000000000771D                 db  42h ; B
.eh_frame:000000000000771E                 db  0Eh
.eh_frame:000000000000771F                 db    8
.eh_frame:0000000000007720                 db  55h ; U
.eh_frame:0000000000007721                 db  0Bh
.eh_frame:0000000000007722                 db  66h ; f
.eh_frame:0000000000007723                 db  0Eh
.eh_frame:0000000000007724                 db  68h ; h
.eh_frame:0000000000007725                 db  42h ; B
.eh_frame:0000000000007726                 db  0Eh
.eh_frame:0000000000007727                 db  70h ; p
.eh_frame:0000000000007728                 db  5Ch ; \
.eh_frame:0000000000007729                 db  0Eh
.eh_frame:000000000000772A                 db  68h ; h
.eh_frame:000000000000772B                 db  41h ; A
.eh_frame:000000000000772C                 db  0Eh
.eh_frame:000000000000772D                 db  60h ; `
.eh_frame:000000000000772E                 db  44h ; D
.eh_frame:000000000000772F                 db  0Ah
.eh_frame:0000000000007730                 db  0Eh
.eh_frame:0000000000007731                 db  38h ; 8
.eh_frame:0000000000007732                 db  41h ; A
.eh_frame:0000000000007733                 db  0Eh
.eh_frame:0000000000007734                 db  30h ; 0
.eh_frame:0000000000007735                 db  41h ; A
.eh_frame:0000000000007736                 db  0Eh
.eh_frame:0000000000007737                 db  28h ; (
.eh_frame:0000000000007738                 db  42h ; B
.eh_frame:0000000000007739                 db  0Eh
.eh_frame:000000000000773A                 db  20h
.eh_frame:000000000000773B                 db  42h ; B
.eh_frame:000000000000773C                 db  0Eh
.eh_frame:000000000000773D                 db  18h
.eh_frame:000000000000773E                 db  42h ; B
.eh_frame:000000000000773F                 db  0Eh
.eh_frame:0000000000007740                 db  10h
.eh_frame:0000000000007741                 db  42h ; B
.eh_frame:0000000000007742                 db  0Eh
.eh_frame:0000000000007743                 db    8
.eh_frame:0000000000007744                 db  45h ; E
.eh_frame:0000000000007745                 db  0Bh
.eh_frame:0000000000007746                 db  68h ; h
.eh_frame:0000000000007747                 db  0Ah
.eh_frame:0000000000007748                 db  0Eh
.eh_frame:0000000000007749                 db  68h ; h
.eh_frame:000000000000774A                 db  48h ; H
.eh_frame:000000000000774B                 db  0Bh
.eh_frame:000000000000774C                 db  72h ; r
.eh_frame:000000000000774D                 db  0Eh
.eh_frame:000000000000774E                 db  68h ; h
.eh_frame:000000000000774F                 db  45h ; E
.eh_frame:0000000000007750                 db  0Eh
.eh_frame:0000000000007751                 db  70h ; p
.eh_frame:0000000000007752                 db  42h ; B
.eh_frame:0000000000007753                 db  0Eh
.eh_frame:0000000000007754                 db  78h ; x
.eh_frame:0000000000007755                 db  42h ; B
.eh_frame:0000000000007756                 db  0Eh
.eh_frame:0000000000007757                 db  80h
.eh_frame:0000000000007758                 db    1
.eh_frame:0000000000007759                 db  5Eh ; ^
.eh_frame:000000000000775A                 db  0Eh
.eh_frame:000000000000775B                 db  60h ; `
.eh_frame:000000000000775C                 db  44h ; D
.eh_frame:000000000000775D                 db  0Ah
.eh_frame:000000000000775E                 db  0Eh
.eh_frame:000000000000775F                 db  38h ; 8
.eh_frame:0000000000007760                 db  41h ; A
.eh_frame:0000000000007761                 db  0Eh
.eh_frame:0000000000007762                 db  30h ; 0
.eh_frame:0000000000007763                 db  41h ; A
.eh_frame:0000000000007764                 db  0Eh
.eh_frame:0000000000007765                 db  28h ; (
.eh_frame:0000000000007766                 db  42h ; B
.eh_frame:0000000000007767                 db  0Eh
.eh_frame:0000000000007768                 db  20h
.eh_frame:0000000000007769                 db  42h ; B
.eh_frame:000000000000776A                 db  0Eh
.eh_frame:000000000000776B                 db  18h
.eh_frame:000000000000776C                 db  42h ; B
.eh_frame:000000000000776D                 db  0Eh
.eh_frame:000000000000776E                 db  10h
.eh_frame:000000000000776F                 db  42h ; B
.eh_frame:0000000000007770                 db  0Eh
.eh_frame:0000000000007771                 db    8
.eh_frame:0000000000007772                 db  41h ; A
.eh_frame:0000000000007773                 db  0Bh
.eh_frame:0000000000007774                 db  79h ; y
.eh_frame:0000000000007775                 db  0Ah
.eh_frame:0000000000007776                 db  0Eh
.eh_frame:0000000000007777                 db  68h ; h
.eh_frame:0000000000007778                 db  42h ; B
.eh_frame:0000000000007779                 db  0Eh
.eh_frame:000000000000777A                 db  70h ; p
.eh_frame:000000000000777B                 db  42h ; B
.eh_frame:000000000000777C                 db  0Eh
.eh_frame:000000000000777D                 db  78h ; x
.eh_frame:000000000000777E                 db  42h ; B
.eh_frame:000000000000777F                 db  0Eh
.eh_frame:0000000000007780                 db  80h
.eh_frame:0000000000007781                 db    1
.eh_frame:0000000000007782                 db  51h ; Q
.eh_frame:0000000000007783                 db  0Bh
.eh_frame:0000000000007784                 db  10h
.eh_frame:0000000000007785                 db    0
.eh_frame:0000000000007786                 db    0
.eh_frame:0000000000007787                 db    0
.eh_frame:0000000000007788                 db  38h ; 8
.eh_frame:0000000000007789                 db    9
.eh_frame:000000000000778A                 db    0
.eh_frame:000000000000778B                 db    0
.eh_frame:000000000000778C                 db  94h
.eh_frame:000000000000778D                 db 0D5h
.eh_frame:000000000000778E                 db 0FFh
.eh_frame:000000000000778F                 db 0FFh
.eh_frame:0000000000007790                 db  20h
.eh_frame:0000000000007791                 db    0
.eh_frame:0000000000007792                 db    0
.eh_frame:0000000000007793                 db    0
.eh_frame:0000000000007794                 db    0
.eh_frame:0000000000007795                 db    0
.eh_frame:0000000000007796                 db    0
.eh_frame:0000000000007797                 db    0
.eh_frame:0000000000007798                 db  18h
.eh_frame:0000000000007799                 db    0
.eh_frame:000000000000779A                 db    0
.eh_frame:000000000000779B                 db    0
.eh_frame:000000000000779C                 db  4Ch ; L
.eh_frame:000000000000779D                 db    9
.eh_frame:000000000000779E                 db    0
.eh_frame:000000000000779F                 db    0
.eh_frame:00000000000077A0                 db 0A0h
.eh_frame:00000000000077A1                 db 0D5h
.eh_frame:00000000000077A2                 db 0FFh
.eh_frame:00000000000077A3                 db 0FFh
.eh_frame:00000000000077A4                 db  78h ; x
.eh_frame:00000000000077A5                 db    0
.eh_frame:00000000000077A6                 db    0
.eh_frame:00000000000077A7                 db    0
.eh_frame:00000000000077A8                 db    0
.eh_frame:00000000000077A9                 db  44h ; D
.eh_frame:00000000000077AA                 db  0Eh
.eh_frame:00000000000077AB                 db  70h ; p
.eh_frame:00000000000077AC                 db    2
.eh_frame:00000000000077AD                 db  60h ; `
.eh_frame:00000000000077AE                 db  0Ah
.eh_frame:00000000000077AF                 db  0Eh
.eh_frame:00000000000077B0                 db    8
.eh_frame:00000000000077B1                 db  41h ; A
.eh_frame:00000000000077B2                 db  0Bh
.eh_frame:00000000000077B3                 db    0
.eh_frame:00000000000077B4                 db  28h ; (
.eh_frame:00000000000077B5                 db    0
.eh_frame:00000000000077B6                 db    0
.eh_frame:00000000000077B7                 db    0
.eh_frame:00000000000077B8                 db  68h ; h
.eh_frame:00000000000077B9                 db    9
.eh_frame:00000000000077BA                 db    0
.eh_frame:00000000000077BB                 db    0
.eh_frame:00000000000077BC                 db    4
.eh_frame:00000000000077BD                 db 0D6h
.eh_frame:00000000000077BE                 db 0FFh
.eh_frame:00000000000077BF                 db 0FFh
.eh_frame:00000000000077C0                 db 0D5h
.eh_frame:00000000000077C1                 db    0
.eh_frame:00000000000077C2                 db    0
.eh_frame:00000000000077C3                 db    0
.eh_frame:00000000000077C4                 db    0
.eh_frame:00000000000077C5                 db  41h ; A
.eh_frame:00000000000077C6                 db  0Eh
.eh_frame:00000000000077C7                 db  10h
.eh_frame:00000000000077C8                 db  86h
.eh_frame:00000000000077C9                 db    2
.eh_frame:00000000000077CA                 db  41h ; A
.eh_frame:00000000000077CB                 db  0Eh
.eh_frame:00000000000077CC                 db  18h
.eh_frame:00000000000077CD                 db  83h
.eh_frame:00000000000077CE                 db    3
.eh_frame:00000000000077CF                 db  50h ; P
.eh_frame:00000000000077D0                 db  0Eh
.eh_frame:00000000000077D1                 db 0D0h
.eh_frame:00000000000077D2                 db    1
.eh_frame:00000000000077D3                 db    2
.eh_frame:00000000000077D4                 db 0ABh
.eh_frame:00000000000077D5                 db  0Ah
.eh_frame:00000000000077D6                 db  0Eh
.eh_frame:00000000000077D7                 db  18h
.eh_frame:00000000000077D8                 db  41h ; A
.eh_frame:00000000000077D9                 db  0Eh
.eh_frame:00000000000077DA                 db  10h
.eh_frame:00000000000077DB                 db  41h ; A
.eh_frame:00000000000077DC                 db  0Eh
.eh_frame:00000000000077DD                 db    8
.eh_frame:00000000000077DE                 db  41h ; A
.eh_frame:00000000000077DF                 db  0Bh
.eh_frame:00000000000077E0                 db  1Ch
.eh_frame:00000000000077E1                 db    0
.eh_frame:00000000000077E2                 db    0
.eh_frame:00000000000077E3                 db    0
.eh_frame:00000000000077E4                 db  94h
.eh_frame:00000000000077E5                 db    9
.eh_frame:00000000000077E6                 db    0
.eh_frame:00000000000077E7                 db    0
.eh_frame:00000000000077E8                 db 0B8h
.eh_frame:00000000000077E9                 db 0D6h
.eh_frame:00000000000077EA                 db 0FFh
.eh_frame:00000000000077EB                 db 0FFh
.eh_frame:00000000000077EC                 db  80h
.eh_frame:00000000000077ED                 db    0
.eh_frame:00000000000077EE                 db    0
.eh_frame:00000000000077EF                 db    0
.eh_frame:00000000000077F0                 db    0
.eh_frame:00000000000077F1                 db  41h ; A
.eh_frame:00000000000077F2                 db  0Eh
.eh_frame:00000000000077F3                 db  10h
.eh_frame:00000000000077F4                 db  83h
.eh_frame:00000000000077F5                 db    2
.eh_frame:00000000000077F6                 db    2
.eh_frame:00000000000077F7                 db  7Ah ; z
.eh_frame:00000000000077F8                 db  0Eh
.eh_frame:00000000000077F9                 db    8
.eh_frame:00000000000077FA                 db    0
.eh_frame:00000000000077FB                 db    0
.eh_frame:00000000000077FC                 db    0
.eh_frame:00000000000077FD                 db    0
.eh_frame:00000000000077FE                 db    0
.eh_frame:00000000000077FF                 db    0
.eh_frame:0000000000007800                 db  18h
.eh_frame:0000000000007801                 db    0
.eh_frame:0000000000007802                 db    0
.eh_frame:0000000000007803                 db    0
.eh_frame:0000000000007804                 db 0B4h
.eh_frame:0000000000007805                 db    9
.eh_frame:0000000000007806                 db    0
.eh_frame:0000000000007807                 db    0
.eh_frame:0000000000007808                 db  18h
.eh_frame:0000000000007809                 db 0D7h
.eh_frame:000000000000780A                 db 0FFh
.eh_frame:000000000000780B                 db 0FFh
.eh_frame:000000000000780C                 db  1Ah
.eh_frame:000000000000780D                 db    0
.eh_frame:000000000000780E                 db    0
.eh_frame:000000000000780F                 db    0
.eh_frame:0000000000007810                 db    0
.eh_frame:0000000000007811                 db  41h ; A
.eh_frame:0000000000007812                 db  0Eh
.eh_frame:0000000000007813                 db  10h
.eh_frame:0000000000007814                 db  83h
.eh_frame:0000000000007815                 db    2
.eh_frame:0000000000007816                 db  53h ; S
.eh_frame:0000000000007817                 db  0Ah
.eh_frame:0000000000007818                 db  0Eh
.eh_frame:0000000000007819                 db    8
.eh_frame:000000000000781A                 db  41h ; A
.eh_frame:000000000000781B                 db  0Bh
.eh_frame:000000000000781C                 db  10h
.eh_frame:000000000000781D                 db    0
.eh_frame:000000000000781E                 db    0
.eh_frame:000000000000781F                 db    0
.eh_frame:0000000000007820                 db 0D0h
.eh_frame:0000000000007821                 db    9
.eh_frame:0000000000007822                 db    0
.eh_frame:0000000000007823                 db    0
.eh_frame:0000000000007824                 db  1Ch
.eh_frame:0000000000007825                 db 0D7h
.eh_frame:0000000000007826                 db 0FFh
.eh_frame:0000000000007827                 db 0FFh
.eh_frame:0000000000007828                 db  24h ; $
.eh_frame:0000000000007829                 db    0
.eh_frame:000000000000782A                 db    0
.eh_frame:000000000000782B                 db    0
.eh_frame:000000000000782C                 db    0
.eh_frame:000000000000782D                 db  5Fh ; _
.eh_frame:000000000000782E                 db  0Eh
.eh_frame:000000000000782F                 db  10h
.eh_frame:0000000000007830                 db  10h
.eh_frame:0000000000007831                 db    0
.eh_frame:0000000000007832                 db    0
.eh_frame:0000000000007833                 db    0
.eh_frame:0000000000007834                 db 0E4h
.eh_frame:0000000000007835                 db    9
.eh_frame:0000000000007836                 db    0
.eh_frame:0000000000007837                 db    0
.eh_frame:0000000000007838                 db  38h ; 8
.eh_frame:0000000000007839                 db 0D7h
.eh_frame:000000000000783A                 db 0FFh
.eh_frame:000000000000783B                 db 0FFh
.eh_frame:000000000000783C                 db    2
.eh_frame:000000000000783D                 db    0
.eh_frame:000000000000783E                 db    0
.eh_frame:000000000000783F                 db    0
.eh_frame:0000000000007840                 db    0
.eh_frame:0000000000007841                 db    0
.eh_frame:0000000000007842                 db    0
.eh_frame:0000000000007843                 db    0
.eh_frame:0000000000007844                 db  20h
.eh_frame:0000000000007845                 db    0
.eh_frame:0000000000007846                 db    0
.eh_frame:0000000000007847                 db    0
.eh_frame:0000000000007848                 db 0F8h
.eh_frame:0000000000007849                 db    9
.eh_frame:000000000000784A                 db    0
.eh_frame:000000000000784B                 db    0
.eh_frame:000000000000784C                 db  34h ; 4
.eh_frame:000000000000784D                 db 0D7h
.eh_frame:000000000000784E                 db 0FFh
.eh_frame:000000000000784F                 db 0FFh
.eh_frame:0000000000007850                 db  36h ; 6
.eh_frame:0000000000007851                 db    0
.eh_frame:0000000000007852                 db    0
.eh_frame:0000000000007853                 db    0
.eh_frame:0000000000007854                 db    0
.eh_frame:0000000000007855                 db  44h ; D
.eh_frame:0000000000007856                 db  0Eh
.eh_frame:0000000000007857                 db  10h
.eh_frame:0000000000007858                 db  83h
.eh_frame:0000000000007859                 db    2
.eh_frame:000000000000785A                 db  5Dh ; ]
.eh_frame:000000000000785B                 db  0Ah
.eh_frame:000000000000785C                 db  0Eh
.eh_frame:000000000000785D                 db    8
.eh_frame:000000000000785E                 db  47h ; G
.eh_frame:000000000000785F                 db  0Bh
.eh_frame:0000000000007860                 db  48h ; H
.eh_frame:0000000000007861                 db  0Ah
.eh_frame:0000000000007862                 db  0Eh
.eh_frame:0000000000007863                 db    8
.eh_frame:0000000000007864                 db  41h ; A
.eh_frame:0000000000007865                 db  0Bh
.eh_frame:0000000000007866                 db    0
.eh_frame:0000000000007867                 db    0
.eh_frame:0000000000007868                 db  10h
.eh_frame:0000000000007869                 db    0
.eh_frame:000000000000786A                 db    0
.eh_frame:000000000000786B                 db    0
.eh_frame:000000000000786C                 db  1Ch
.eh_frame:000000000000786D                 db  0Ah
.eh_frame:000000000000786E                 db    0
.eh_frame:000000000000786F                 db    0
.eh_frame:0000000000007870                 db  50h ; P
.eh_frame:0000000000007871                 db 0D7h
.eh_frame:0000000000007872                 db 0FFh
.eh_frame:0000000000007873                 db 0FFh
.eh_frame:0000000000007874                 db  24h ; $
.eh_frame:0000000000007875                 db    0
.eh_frame:0000000000007876                 db    0
.eh_frame:0000000000007877                 db    0
.eh_frame:0000000000007878                 db    0
.eh_frame:0000000000007879                 db  5Fh ; _
.eh_frame:000000000000787A                 db  0Eh
.eh_frame:000000000000787B                 db  10h
.eh_frame:000000000000787C                 db  14h
.eh_frame:000000000000787D                 db    0
.eh_frame:000000000000787E                 db    0
.eh_frame:000000000000787F                 db    0
.eh_frame:0000000000007880                 db  30h ; 0
.eh_frame:0000000000007881                 db  0Ah
.eh_frame:0000000000007882                 db    0
.eh_frame:0000000000007883                 db    0
.eh_frame:0000000000007884                 db  6Ch ; l
.eh_frame:0000000000007885                 db 0D7h
.eh_frame:0000000000007886                 db 0FFh
.eh_frame:0000000000007887                 db 0FFh
.eh_frame:0000000000007888                 db  82h
.eh_frame:0000000000007889                 db    0
.eh_frame:000000000000788A                 db    0
.eh_frame:000000000000788B                 db    0
.eh_frame:000000000000788C                 db    0
.eh_frame:000000000000788D                 db    2
.eh_frame:000000000000788E                 db  5Fh ; _
.eh_frame:000000000000788F                 db  0Eh
.eh_frame:0000000000007890                 db  10h
.eh_frame:0000000000007891                 db  49h ; I
.eh_frame:0000000000007892                 db  0Eh
.eh_frame:0000000000007893                 db    8
.eh_frame:0000000000007894                 db  14h
.eh_frame:0000000000007895                 db    0
.eh_frame:0000000000007896                 db    0
.eh_frame:0000000000007897                 db    0
.eh_frame:0000000000007898                 db  48h ; H
.eh_frame:0000000000007899                 db  0Ah
.eh_frame:000000000000789A                 db    0
.eh_frame:000000000000789B                 db    0
.eh_frame:000000000000789C                 db 0E4h
.eh_frame:000000000000789D                 db 0D7h
.eh_frame:000000000000789E                 db 0FFh
.eh_frame:000000000000789F                 db 0FFh
.eh_frame:00000000000078A0                 db  4Ah ; J
.eh_frame:00000000000078A1                 db    0
.eh_frame:00000000000078A2                 db    0
.eh_frame:00000000000078A3                 db    0
.eh_frame:00000000000078A4                 db    0
.eh_frame:00000000000078A5                 db    2
.eh_frame:00000000000078A6                 db  45h ; E
.eh_frame:00000000000078A7                 db  0Eh
.eh_frame:00000000000078A8                 db  10h
.eh_frame:00000000000078A9                 db    0
.eh_frame:00000000000078AA                 db    0
.eh_frame:00000000000078AB                 db    0
.eh_frame:00000000000078AC                 db  18h
.eh_frame:00000000000078AD                 db    0
.eh_frame:00000000000078AE                 db    0
.eh_frame:00000000000078AF                 db    0
.eh_frame:00000000000078B0                 db  60h ; `
.eh_frame:00000000000078B1                 db  0Ah
.eh_frame:00000000000078B2                 db    0
.eh_frame:00000000000078B3                 db    0
.eh_frame:00000000000078B4                 db  1Ch
.eh_frame:00000000000078B5                 db 0D8h
.eh_frame:00000000000078B6                 db 0FFh
.eh_frame:00000000000078B7                 db 0FFh
.eh_frame:00000000000078B8                 db  17h
.eh_frame:00000000000078B9                 db    0
.eh_frame:00000000000078BA                 db    0
.eh_frame:00000000000078BB                 db    0
.eh_frame:00000000000078BC                 db    0
.eh_frame:00000000000078BD                 db  41h ; A
.eh_frame:00000000000078BE                 db  0Eh
.eh_frame:00000000000078BF                 db  10h
.eh_frame:00000000000078C0                 db  83h
.eh_frame:00000000000078C1                 db    2
.eh_frame:00000000000078C2                 db  51h ; Q
.eh_frame:00000000000078C3                 db  0Eh
.eh_frame:00000000000078C4                 db    8
.eh_frame:00000000000078C5                 db    0
.eh_frame:00000000000078C6                 db    0
.eh_frame:00000000000078C7                 db    0
.eh_frame:00000000000078C8                 db  18h
.eh_frame:00000000000078C9                 db    0
.eh_frame:00000000000078CA                 db    0
.eh_frame:00000000000078CB                 db    0
.eh_frame:00000000000078CC                 db  7Ch ; |
.eh_frame:00000000000078CD                 db  0Ah
.eh_frame:00000000000078CE                 db    0
.eh_frame:00000000000078CF                 db    0
.eh_frame:00000000000078D0                 db  20h
.eh_frame:00000000000078D1                 db 0D8h
.eh_frame:00000000000078D2                 db 0FFh
.eh_frame:00000000000078D3                 db 0FFh
.eh_frame:00000000000078D4                 db  2Eh ; .
.eh_frame:00000000000078D5                 db    0
.eh_frame:00000000000078D6                 db    0
.eh_frame:00000000000078D7                 db    0
.eh_frame:00000000000078D8                 db    0
.eh_frame:00000000000078D9                 db  47h ; G
.eh_frame:00000000000078DA                 db  0Eh
.eh_frame:00000000000078DB                 db  10h
.eh_frame:00000000000078DC                 db  61h ; a
.eh_frame:00000000000078DD                 db  0Ah
.eh_frame:00000000000078DE                 db  0Eh
.eh_frame:00000000000078DF                 db    8
.eh_frame:00000000000078E0                 db  41h ; A
.eh_frame:00000000000078E1                 db  0Bh
.eh_frame:00000000000078E2                 db    0
.eh_frame:00000000000078E3                 db    0
.eh_frame:00000000000078E4                 db  24h ; $
.eh_frame:00000000000078E5                 db    0
.eh_frame:00000000000078E6                 db    0
.eh_frame:00000000000078E7                 db    0
.eh_frame:00000000000078E8                 db  98h
.eh_frame:00000000000078E9                 db  0Ah
.eh_frame:00000000000078EA                 db    0
.eh_frame:00000000000078EB                 db    0
.eh_frame:00000000000078EC                 db  34h ; 4
.eh_frame:00000000000078ED                 db 0D8h
.eh_frame:00000000000078EE                 db 0FFh
.eh_frame:00000000000078EF                 db 0FFh
.eh_frame:00000000000078F0                 db  28h ; (
.eh_frame:00000000000078F1                 db    0
.eh_frame:00000000000078F2                 db    0
.eh_frame:00000000000078F3                 db    0
.eh_frame:00000000000078F4                 db    0
.eh_frame:00000000000078F5                 db  41h ; A
.eh_frame:00000000000078F6                 db  0Eh
.eh_frame:00000000000078F7                 db  10h
.eh_frame:00000000000078F8                 db  86h
.eh_frame:00000000000078F9                 db    2
.eh_frame:00000000000078FA                 db  41h ; A
.eh_frame:00000000000078FB                 db  0Eh
.eh_frame:00000000000078FC                 db  18h
.eh_frame:00000000000078FD                 db  83h
.eh_frame:00000000000078FE                 db    3
.eh_frame:00000000000078FF                 db  4Dh ; M
.eh_frame:0000000000007900                 db  0Eh
.eh_frame:0000000000007901                 db  20h
.eh_frame:0000000000007902                 db  49h ; I
.eh_frame:0000000000007903                 db  0Eh
.eh_frame:0000000000007904                 db  18h
.eh_frame:0000000000007905                 db  47h ; G
.eh_frame:0000000000007906                 db  0Eh
.eh_frame:0000000000007907                 db  10h
.eh_frame:0000000000007908                 db  41h ; A
.eh_frame:0000000000007909                 db  0Eh
.eh_frame:000000000000790A                 db    8
.eh_frame:000000000000790B                 db    0
.eh_frame:000000000000790C                 db  18h
.eh_frame:000000000000790D                 db    0
.eh_frame:000000000000790E                 db    0
.eh_frame:000000000000790F                 db    0
.eh_frame:0000000000007910                 db 0C0h
.eh_frame:0000000000007911                 db  0Ah
.eh_frame:0000000000007912                 db    0
.eh_frame:0000000000007913                 db    0
.eh_frame:0000000000007914                 db  3Ch ; <
.eh_frame:0000000000007915                 db 0D8h
.eh_frame:0000000000007916                 db 0FFh
.eh_frame:0000000000007917                 db 0FFh
.eh_frame:0000000000007918                 db  13h
.eh_frame:0000000000007919                 db    0
.eh_frame:000000000000791A                 db    0
.eh_frame:000000000000791B                 db    0
.eh_frame:000000000000791C                 db    0
.eh_frame:000000000000791D                 db  41h ; A
.eh_frame:000000000000791E                 db  0Eh
.eh_frame:000000000000791F                 db  10h
.eh_frame:0000000000007920                 db  83h
.eh_frame:0000000000007921                 db    2
.eh_frame:0000000000007922                 db  50h ; P
.eh_frame:0000000000007923                 db  0Eh
.eh_frame:0000000000007924                 db    8
.eh_frame:0000000000007925                 db    0
.eh_frame:0000000000007926                 db    0
.eh_frame:0000000000007927                 db    0
.eh_frame:0000000000007928                 db  14h
.eh_frame:0000000000007929                 db    0
.eh_frame:000000000000792A                 db    0
.eh_frame:000000000000792B                 db    0
.eh_frame:000000000000792C                 db 0DCh
.eh_frame:000000000000792D                 db  0Ah
.eh_frame:000000000000792E                 db    0
.eh_frame:000000000000792F                 db    0
.eh_frame:0000000000007930                 db  40h ; @
.eh_frame:0000000000007931                 db 0D8h
.eh_frame:0000000000007932                 db 0FFh
.eh_frame:0000000000007933                 db 0FFh
.eh_frame:0000000000007934                 db  35h ; 5
.eh_frame:0000000000007935                 db    0
.eh_frame:0000000000007936                 db    0
.eh_frame:0000000000007937                 db    0
.eh_frame:0000000000007938                 db    0
.eh_frame:0000000000007939                 db  4Bh ; K
.eh_frame:000000000000793A                 db  0Eh
.eh_frame:000000000000793B                 db  10h
.eh_frame:000000000000793C                 db    0
.eh_frame:000000000000793D                 db    0
.eh_frame:000000000000793E                 db    0
.eh_frame:000000000000793F                 db    0
.eh_frame:0000000000007940                 db  38h ; 8
.eh_frame:0000000000007941                 db    0
.eh_frame:0000000000007942                 db    0
.eh_frame:0000000000007943                 db    0
.eh_frame:0000000000007944                 db 0F4h
.eh_frame:0000000000007945                 db  0Ah
.eh_frame:0000000000007946                 db    0
.eh_frame:0000000000007947                 db    0
.eh_frame:0000000000007948                 db  68h ; h
.eh_frame:0000000000007949                 db 0D8h
.eh_frame:000000000000794A                 db 0FFh
.eh_frame:000000000000794B                 db 0FFh
.eh_frame:000000000000794C                 db 0BAh
.eh_frame:000000000000794D                 db    0
.eh_frame:000000000000794E                 db    0
.eh_frame:000000000000794F                 db    0
.eh_frame:0000000000007950                 db    0
.eh_frame:0000000000007951                 db  42h ; B
.eh_frame:0000000000007952                 db  0Eh
.eh_frame:0000000000007953                 db  10h
.eh_frame:0000000000007954                 db  8Eh
.eh_frame:0000000000007955                 db    2
.eh_frame:0000000000007956                 db  42h ; B
.eh_frame:0000000000007957                 db  0Eh
.eh_frame:0000000000007958                 db  18h
.eh_frame:0000000000007959                 db  8Dh
.eh_frame:000000000000795A                 db    3
.eh_frame:000000000000795B                 db  45h ; E
.eh_frame:000000000000795C                 db  0Eh
.eh_frame:000000000000795D                 db  20h
.eh_frame:000000000000795E                 db  8Ch
.eh_frame:000000000000795F                 db    4
.eh_frame:0000000000007960                 db  41h ; A
.eh_frame:0000000000007961                 db  0Eh
.eh_frame:0000000000007962                 db  28h ; (
.eh_frame:0000000000007963                 db  86h
.eh_frame:0000000000007964                 db    5
.eh_frame:0000000000007965                 db  44h ; D
.eh_frame:0000000000007966                 db  0Eh
.eh_frame:0000000000007967                 db  30h ; 0
.eh_frame:0000000000007968                 db  83h
.eh_frame:0000000000007969                 db    6
.eh_frame:000000000000796A                 db    2
.eh_frame:000000000000796B                 db  99h
.eh_frame:000000000000796C                 db  0Eh
.eh_frame:000000000000796D                 db  28h ; (
.eh_frame:000000000000796E                 db  41h ; A
.eh_frame:000000000000796F                 db  0Eh
.eh_frame:0000000000007970                 db  20h
.eh_frame:0000000000007971                 db  42h ; B
.eh_frame:0000000000007972                 db  0Eh
.eh_frame:0000000000007973                 db  18h
.eh_frame:0000000000007974                 db  42h ; B
.eh_frame:0000000000007975                 db  0Eh
.eh_frame:0000000000007976                 db  10h
.eh_frame:0000000000007977                 db  42h ; B
.eh_frame:0000000000007978                 db  0Eh
.eh_frame:0000000000007979                 db    8
.eh_frame:000000000000797A                 db    0
.eh_frame:000000000000797B                 db    0
.eh_frame:000000000000797C                 db  38h ; 8
.eh_frame:000000000000797D                 db    0
.eh_frame:000000000000797E                 db    0
.eh_frame:000000000000797F                 db    0
.eh_frame:0000000000007980                 db  30h ; 0
.eh_frame:0000000000007981                 db  0Bh
.eh_frame:0000000000007982                 db    0
.eh_frame:0000000000007983                 db    0
.eh_frame:0000000000007984                 db 0ECh
.eh_frame:0000000000007985                 db 0D8h
.eh_frame:0000000000007986                 db 0FFh
.eh_frame:0000000000007987                 db 0FFh
.eh_frame:0000000000007988                 db  44h ; D
.eh_frame:0000000000007989                 db    0
.eh_frame:000000000000798A                 db    0
.eh_frame:000000000000798B                 db    0
.eh_frame:000000000000798C                 db    0
.eh_frame:000000000000798D                 db  42h ; B
.eh_frame:000000000000798E                 db  0Eh
.eh_frame:000000000000798F                 db  10h
.eh_frame:0000000000007990                 db  8Eh
.eh_frame:0000000000007991                 db    2
.eh_frame:0000000000007992                 db  42h ; B
.eh_frame:0000000000007993                 db  0Eh
.eh_frame:0000000000007994                 db  18h
.eh_frame:0000000000007995                 db  8Dh
.eh_frame:0000000000007996                 db    3
.eh_frame:0000000000007997                 db  45h ; E
.eh_frame:0000000000007998                 db  0Eh
.eh_frame:0000000000007999                 db  20h
.eh_frame:000000000000799A                 db  8Ch
.eh_frame:000000000000799B                 db    4
.eh_frame:000000000000799C                 db  41h ; A
.eh_frame:000000000000799D                 db  0Eh
.eh_frame:000000000000799E                 db  28h ; (
.eh_frame:000000000000799F                 db  86h
.eh_frame:00000000000079A0                 db    5
.eh_frame:00000000000079A1                 db  44h ; D
.eh_frame:00000000000079A2                 db  0Eh
.eh_frame:00000000000079A3                 db  30h ; 0
.eh_frame:00000000000079A4                 db  83h
.eh_frame:00000000000079A5                 db    6
.eh_frame:00000000000079A6                 db  6Bh ; k
.eh_frame:00000000000079A7                 db  0Eh
.eh_frame:00000000000079A8                 db  28h ; (
.eh_frame:00000000000079A9                 db  44h ; D
.eh_frame:00000000000079AA                 db  0Eh
.eh_frame:00000000000079AB                 db  20h
.eh_frame:00000000000079AC                 db  42h ; B
.eh_frame:00000000000079AD                 db  0Eh
.eh_frame:00000000000079AE                 db  18h
.eh_frame:00000000000079AF                 db  42h ; B
.eh_frame:00000000000079B0                 db  0Eh
.eh_frame:00000000000079B1                 db  10h
.eh_frame:00000000000079B2                 db  42h ; B
.eh_frame:00000000000079B3                 db  0Eh
.eh_frame:00000000000079B4                 db    8
.eh_frame:00000000000079B5                 db    0
.eh_frame:00000000000079B6                 db    0
.eh_frame:00000000000079B7                 db    0
.eh_frame:00000000000079B8                 db  3Ch ; <
.eh_frame:00000000000079B9                 db    0
.eh_frame:00000000000079BA                 db    0
.eh_frame:00000000000079BB                 db    0
.eh_frame:00000000000079BC                 db  6Ch ; l
.eh_frame:00000000000079BD                 db  0Bh
.eh_frame:00000000000079BE                 db    0
.eh_frame:00000000000079BF                 db    0
.eh_frame:00000000000079C0                 db    0
.eh_frame:00000000000079C1                 db 0D9h
.eh_frame:00000000000079C2                 db 0FFh
.eh_frame:00000000000079C3                 db 0FFh
.eh_frame:00000000000079C4                 db  46h ; F
.eh_frame:00000000000079C5                 db    0
.eh_frame:00000000000079C6                 db    0
.eh_frame:00000000000079C7                 db    0
.eh_frame:00000000000079C8                 db    0
.eh_frame:00000000000079C9                 db  42h ; B
.eh_frame:00000000000079CA                 db  0Eh
.eh_frame:00000000000079CB                 db  10h
.eh_frame:00000000000079CC                 db  8Eh
.eh_frame:00000000000079CD                 db    2
.eh_frame:00000000000079CE                 db  42h ; B
.eh_frame:00000000000079CF                 db  0Eh
.eh_frame:00000000000079D0                 db  18h
.eh_frame:00000000000079D1                 db  8Dh
.eh_frame:00000000000079D2                 db    3
.eh_frame:00000000000079D3                 db  45h ; E
.eh_frame:00000000000079D4                 db  0Eh
.eh_frame:00000000000079D5                 db  20h
.eh_frame:00000000000079D6                 db  8Ch
.eh_frame:00000000000079D7                 db    4
.eh_frame:00000000000079D8                 db  41h ; A
.eh_frame:00000000000079D9                 db  0Eh
.eh_frame:00000000000079DA                 db  28h ; (
.eh_frame:00000000000079DB                 db  86h
.eh_frame:00000000000079DC                 db    5
.eh_frame:00000000000079DD                 db  44h ; D
.eh_frame:00000000000079DE                 db  0Eh
.eh_frame:00000000000079DF                 db  30h ; 0
.eh_frame:00000000000079E0                 db  83h
.eh_frame:00000000000079E1                 db    6
.eh_frame:00000000000079E2                 db  6Dh ; m
.eh_frame:00000000000079E3                 db  0Eh
.eh_frame:00000000000079E4                 db  28h ; (
.eh_frame:00000000000079E5                 db  44h ; D
.eh_frame:00000000000079E6                 db  0Eh
.eh_frame:00000000000079E7                 db  20h
.eh_frame:00000000000079E8                 db  42h ; B
.eh_frame:00000000000079E9                 db  0Eh
.eh_frame:00000000000079EA                 db  18h
.eh_frame:00000000000079EB                 db  42h ; B
.eh_frame:00000000000079EC                 db  0Eh
.eh_frame:00000000000079ED                 db  10h
.eh_frame:00000000000079EE                 db  42h ; B
.eh_frame:00000000000079EF                 db  0Eh
.eh_frame:00000000000079F0                 db    8
.eh_frame:00000000000079F1                 db    0
.eh_frame:00000000000079F2                 db    0
.eh_frame:00000000000079F3                 db    0
.eh_frame:00000000000079F4                 db    0
.eh_frame:00000000000079F5                 db    0
.eh_frame:00000000000079F6                 db    0
.eh_frame:00000000000079F7                 db    0
.eh_frame:00000000000079F8                 db  34h ; 4
.eh_frame:00000000000079F9                 db    0
.eh_frame:00000000000079FA                 db    0
.eh_frame:00000000000079FB                 db    0
.eh_frame:00000000000079FC                 db 0ACh
.eh_frame:00000000000079FD                 db  0Bh
.eh_frame:00000000000079FE                 db    0
.eh_frame:00000000000079FF                 db    0
.eh_frame:0000000000007A00                 db  10h
.eh_frame:0000000000007A01                 db 0D9h
.eh_frame:0000000000007A02                 db 0FFh
.eh_frame:0000000000007A03                 db 0FFh
.eh_frame:0000000000007A04                 db  7Bh ; {
.eh_frame:0000000000007A05                 db    0
.eh_frame:0000000000007A06                 db    0
.eh_frame:0000000000007A07                 db    0
.eh_frame:0000000000007A08                 db    0
.eh_frame:0000000000007A09                 db  42h ; B
.eh_frame:0000000000007A0A                 db  0Eh
.eh_frame:0000000000007A0B                 db  10h
.eh_frame:0000000000007A0C                 db  8Ch
.eh_frame:0000000000007A0D                 db    2
.eh_frame:0000000000007A0E                 db  41h ; A
.eh_frame:0000000000007A0F                 db  0Eh
.eh_frame:0000000000007A10                 db  18h
.eh_frame:0000000000007A11                 db  86h
.eh_frame:0000000000007A12                 db    3
.eh_frame:0000000000007A13                 db  41h ; A
.eh_frame:0000000000007A14                 db  0Eh
.eh_frame:0000000000007A15                 db  20h
.eh_frame:0000000000007A16                 db  83h
.eh_frame:0000000000007A17                 db    4
.eh_frame:0000000000007A18                 db  7Dh ; }
.eh_frame:0000000000007A19                 db  0Ah
.eh_frame:0000000000007A1A                 db  0Eh
.eh_frame:0000000000007A1B                 db  18h
.eh_frame:0000000000007A1C                 db  41h ; A
.eh_frame:0000000000007A1D                 db  0Eh
.eh_frame:0000000000007A1E                 db  10h
.eh_frame:0000000000007A1F                 db  42h ; B
.eh_frame:0000000000007A20                 db  0Eh
.eh_frame:0000000000007A21                 db    8
.eh_frame:0000000000007A22                 db  44h ; D
.eh_frame:0000000000007A23                 db  0Bh
.eh_frame:0000000000007A24                 db  60h ; `
.eh_frame:0000000000007A25                 db  0Ah
.eh_frame:0000000000007A26                 db  0Eh
.eh_frame:0000000000007A27                 db  18h
.eh_frame:0000000000007A28                 db  41h ; A
.eh_frame:0000000000007A29                 db  0Eh
.eh_frame:0000000000007A2A                 db  10h
.eh_frame:0000000000007A2B                 db  42h ; B
.eh_frame:0000000000007A2C                 db  0Eh
.eh_frame:0000000000007A2D                 db    8
.eh_frame:0000000000007A2E                 db  45h ; E
.eh_frame:0000000000007A2F                 db  0Bh
.eh_frame:0000000000007A30                 db  34h ; 4
.eh_frame:0000000000007A31                 db    0
.eh_frame:0000000000007A32                 db    0
.eh_frame:0000000000007A33                 db    0
.eh_frame:0000000000007A34                 db 0E4h
.eh_frame:0000000000007A35                 db  0Bh
.eh_frame:0000000000007A36                 db    0
.eh_frame:0000000000007A37                 db    0
.eh_frame:0000000000007A38                 db  58h ; X
.eh_frame:0000000000007A39                 db 0D9h
.eh_frame:0000000000007A3A                 db 0FFh
.eh_frame:0000000000007A3B                 db 0FFh
.eh_frame:0000000000007A3C                 db  7Eh ; ~
.eh_frame:0000000000007A3D                 db    2
.eh_frame:0000000000007A3E                 db    0
.eh_frame:0000000000007A3F                 db    0
.eh_frame:0000000000007A40                 db    0
.eh_frame:0000000000007A41                 db  42h ; B
.eh_frame:0000000000007A42                 db  0Eh
.eh_frame:0000000000007A43                 db  10h
.eh_frame:0000000000007A44                 db  8Ch
.eh_frame:0000000000007A45                 db    2
.eh_frame:0000000000007A46                 db  41h ; A
.eh_frame:0000000000007A47                 db  0Eh
.eh_frame:0000000000007A48                 db  18h
.eh_frame:0000000000007A49                 db  86h
.eh_frame:0000000000007A4A                 db    3
.eh_frame:0000000000007A4B                 db  43h ; C
.eh_frame:0000000000007A4C                 db  0Eh
.eh_frame:0000000000007A4D                 db  20h
.eh_frame:0000000000007A4E                 db  83h
.eh_frame:0000000000007A4F                 db    4
.eh_frame:0000000000007A50                 db  44h ; D
.eh_frame:0000000000007A51                 db  0Eh
.eh_frame:0000000000007A52                 db  70h ; p
.eh_frame:0000000000007A53                 db    2
.eh_frame:0000000000007A54                 db 0F0h
.eh_frame:0000000000007A55                 db  0Ah
.eh_frame:0000000000007A56                 db  0Eh
.eh_frame:0000000000007A57                 db  20h
.eh_frame:0000000000007A58                 db  41h ; A
.eh_frame:0000000000007A59                 db  0Eh
.eh_frame:0000000000007A5A                 db  18h
.eh_frame:0000000000007A5B                 db  41h ; A
.eh_frame:0000000000007A5C                 db  0Eh
.eh_frame:0000000000007A5D                 db  10h
.eh_frame:0000000000007A5E                 db  42h ; B
.eh_frame:0000000000007A5F                 db  0Eh
.eh_frame:0000000000007A60                 db    8
.eh_frame:0000000000007A61                 db  42h ; B
.eh_frame:0000000000007A62                 db  0Bh
.eh_frame:0000000000007A63                 db    0
.eh_frame:0000000000007A64                 db    0
.eh_frame:0000000000007A65                 db    0
.eh_frame:0000000000007A66                 db    0
.eh_frame:0000000000007A67                 db    0
.eh_frame:0000000000007A68                 db  1Ch
.eh_frame:0000000000007A69                 db    0
.eh_frame:0000000000007A6A                 db    0
.eh_frame:0000000000007A6B                 db    0
.eh_frame:0000000000007A6C                 db  1Ch
.eh_frame:0000000000007A6D                 db  0Ch
.eh_frame:0000000000007A6E                 db    0
.eh_frame:0000000000007A6F                 db    0
.eh_frame:0000000000007A70                 db 0A0h
.eh_frame:0000000000007A71                 db 0DBh
.eh_frame:0000000000007A72                 db 0FFh
.eh_frame:0000000000007A73                 db 0FFh
.eh_frame:0000000000007A74                 db  40h ; @
.eh_frame:0000000000007A75                 db    0
.eh_frame:0000000000007A76                 db    0
.eh_frame:0000000000007A77                 db    0
.eh_frame:0000000000007A78                 db    0
.eh_frame:0000000000007A79                 db  44h ; D
.eh_frame:0000000000007A7A                 db  0Eh
.eh_frame:0000000000007A7B                 db  10h
.eh_frame:0000000000007A7C                 db  83h
.eh_frame:0000000000007A7D                 db    2
.eh_frame:0000000000007A7E                 db  5Ah ; Z
.eh_frame:0000000000007A7F                 db  0Ah
.eh_frame:0000000000007A80                 db  0Eh
.eh_frame:0000000000007A81                 db    8
.eh_frame:0000000000007A82                 db  4Ah ; J
.eh_frame:0000000000007A83                 db  0Bh
.eh_frame:0000000000007A84                 db  53h ; S
.eh_frame:0000000000007A85                 db  0Eh
.eh_frame:0000000000007A86                 db    8
.eh_frame:0000000000007A87                 db    0
.eh_frame:0000000000007A88                 db  2Ch ; ,
.eh_frame:0000000000007A89                 db    0
.eh_frame:0000000000007A8A                 db    0
.eh_frame:0000000000007A8B                 db    0
.eh_frame:0000000000007A8C                 db  3Ch ; <
.eh_frame:0000000000007A8D                 db  0Ch
.eh_frame:0000000000007A8E                 db    0
.eh_frame:0000000000007A8F                 db    0
.eh_frame:0000000000007A90                 db 0C0h
.eh_frame:0000000000007A91                 db 0DBh
.eh_frame:0000000000007A92                 db 0FFh
.eh_frame:0000000000007A93                 db 0FFh
.eh_frame:0000000000007A94                 db  57h ; W
.eh_frame:0000000000007A95                 db    0
.eh_frame:0000000000007A96                 db    0
.eh_frame:0000000000007A97                 db    0
.eh_frame:0000000000007A98                 db    0
.eh_frame:0000000000007A99                 db  63h ; c
.eh_frame:0000000000007A9A                 db  0Eh
.eh_frame:0000000000007A9B                 db  10h
.eh_frame:0000000000007A9C                 db  8Ch
.eh_frame:0000000000007A9D                 db    2
.eh_frame:0000000000007A9E                 db  41h ; A
.eh_frame:0000000000007A9F                 db  0Eh
.eh_frame:0000000000007AA0                 db  18h
.eh_frame:0000000000007AA1                 db  86h
.eh_frame:0000000000007AA2                 db    3
.eh_frame:0000000000007AA3                 db  44h ; D
.eh_frame:0000000000007AA4                 db  0Eh
.eh_frame:0000000000007AA5                 db  20h
.eh_frame:0000000000007AA6                 db  83h
.eh_frame:0000000000007AA7                 db    4
.eh_frame:0000000000007AA8                 db  6Bh ; k
.eh_frame:0000000000007AA9                 db  0Eh
.eh_frame:0000000000007AAA                 db  18h
.eh_frame:0000000000007AAB                 db  41h ; A
.eh_frame:0000000000007AAC                 db  0Eh
.eh_frame:0000000000007AAD                 db  10h
.eh_frame:0000000000007AAE                 db  42h ; B
.eh_frame:0000000000007AAF                 db  0Eh
.eh_frame:0000000000007AB0                 db    8
.eh_frame:0000000000007AB1                 db    0
.eh_frame:0000000000007AB2                 db    0
.eh_frame:0000000000007AB3                 db    0
.eh_frame:0000000000007AB4                 db    0
.eh_frame:0000000000007AB5                 db    0
.eh_frame:0000000000007AB6                 db    0
.eh_frame:0000000000007AB7                 db    0
.eh_frame:0000000000007AB8                 db  3Ch ; <
.eh_frame:0000000000007AB9                 db    0
.eh_frame:0000000000007ABA                 db    0
.eh_frame:0000000000007ABB                 db    0
.eh_frame:0000000000007ABC                 db  6Ch ; l
.eh_frame:0000000000007ABD                 db  0Ch
.eh_frame:0000000000007ABE                 db    0
.eh_frame:0000000000007ABF                 db    0
.eh_frame:0000000000007AC0                 db 0F0h
.eh_frame:0000000000007AC1                 db 0DBh
.eh_frame:0000000000007AC2                 db 0FFh
.eh_frame:0000000000007AC3                 db 0FFh
.eh_frame:0000000000007AC4                 db  83h
.eh_frame:0000000000007AC5                 db    0
.eh_frame:0000000000007AC6                 db    0
.eh_frame:0000000000007AC7                 db    0
.eh_frame:0000000000007AC8                 db    0
.eh_frame:0000000000007AC9                 db  42h ; B
.eh_frame:0000000000007ACA                 db  0Eh
.eh_frame:0000000000007ACB                 db  10h
.eh_frame:0000000000007ACC                 db  8Dh
.eh_frame:0000000000007ACD                 db    2
.eh_frame:0000000000007ACE                 db  42h ; B
.eh_frame:0000000000007ACF                 db  0Eh
.eh_frame:0000000000007AD0                 db  18h
.eh_frame:0000000000007AD1                 db  8Ch
.eh_frame:0000000000007AD2                 db    3
.eh_frame:0000000000007AD3                 db  44h ; D
.eh_frame:0000000000007AD4                 db  0Eh
.eh_frame:0000000000007AD5                 db  20h
.eh_frame:0000000000007AD6                 db  86h
.eh_frame:0000000000007AD7                 db    4
.eh_frame:0000000000007AD8                 db  41h ; A
.eh_frame:0000000000007AD9                 db  0Eh
.eh_frame:0000000000007ADA                 db  28h ; (
.eh_frame:0000000000007ADB                 db  83h
.eh_frame:0000000000007ADC                 db    5
.eh_frame:0000000000007ADD                 db  4Ah ; J
.eh_frame:0000000000007ADE                 db  0Eh
.eh_frame:0000000000007ADF                 db  40h ; @
.eh_frame:0000000000007AE0                 db    2
.eh_frame:0000000000007AE1                 db  64h ; d
.eh_frame:0000000000007AE2                 db  0Ah
.eh_frame:0000000000007AE3                 db  0Eh
.eh_frame:0000000000007AE4                 db  28h ; (
.eh_frame:0000000000007AE5                 db  41h ; A
.eh_frame:0000000000007AE6                 db  0Eh
.eh_frame:0000000000007AE7                 db  20h
.eh_frame:0000000000007AE8                 db  41h ; A
.eh_frame:0000000000007AE9                 db  0Eh
.eh_frame:0000000000007AEA                 db  18h
.eh_frame:0000000000007AEB                 db  42h ; B
.eh_frame:0000000000007AEC                 db  0Eh
.eh_frame:0000000000007AED                 db  10h
.eh_frame:0000000000007AEE                 db  42h ; B
.eh_frame:0000000000007AEF                 db  0Eh
.eh_frame:0000000000007AF0                 db    8
.eh_frame:0000000000007AF1                 db  41h ; A
.eh_frame:0000000000007AF2                 db  0Bh
.eh_frame:0000000000007AF3                 db    0
.eh_frame:0000000000007AF4                 db    0
.eh_frame:0000000000007AF5                 db    0
.eh_frame:0000000000007AF6                 db    0
.eh_frame:0000000000007AF7                 db    0
.eh_frame:0000000000007AF8                 db  4Ch ; L
.eh_frame:0000000000007AF9                 db    0
.eh_frame:0000000000007AFA                 db    0
.eh_frame:0000000000007AFB                 db    0
.eh_frame:0000000000007AFC                 db 0ACh
.eh_frame:0000000000007AFD                 db  0Ch
.eh_frame:0000000000007AFE                 db    0
.eh_frame:0000000000007AFF                 db    0
.eh_frame:0000000000007B00                 db  40h ; @
.eh_frame:0000000000007B01                 db 0DCh
.eh_frame:0000000000007B02                 db 0FFh
.eh_frame:0000000000007B03                 db 0FFh
.eh_frame:0000000000007B04                 db  7Dh ; }
.eh_frame:0000000000007B05                 db    0
.eh_frame:0000000000007B06                 db    0
.eh_frame:0000000000007B07                 db    0
.eh_frame:0000000000007B08                 db    0
.eh_frame:0000000000007B09                 db  42h ; B
.eh_frame:0000000000007B0A                 db  0Eh
.eh_frame:0000000000007B0B                 db  10h
.eh_frame:0000000000007B0C                 db  8Ch
.eh_frame:0000000000007B0D                 db    2
.eh_frame:0000000000007B0E                 db  41h ; A
.eh_frame:0000000000007B0F                 db  0Eh
.eh_frame:0000000000007B10                 db  18h
.eh_frame:0000000000007B11                 db  86h
.eh_frame:0000000000007B12                 db    3
.eh_frame:0000000000007B13                 db  44h ; D
.eh_frame:0000000000007B14                 db  0Eh
.eh_frame:0000000000007B15                 db  20h
.eh_frame:0000000000007B16                 db  83h
.eh_frame:0000000000007B17                 db    4
.eh_frame:0000000000007B18                 db  69h ; i
.eh_frame:0000000000007B19                 db  0Ah
.eh_frame:0000000000007B1A                 db  0Eh
.eh_frame:0000000000007B1B                 db  18h
.eh_frame:0000000000007B1C                 db  41h ; A
.eh_frame:0000000000007B1D                 db  0Eh
.eh_frame:0000000000007B1E                 db  10h
.eh_frame:0000000000007B1F                 db  42h ; B
.eh_frame:0000000000007B20                 db  0Eh
.eh_frame:0000000000007B21                 db    8
.eh_frame:0000000000007B22                 db  45h ; E
.eh_frame:0000000000007B23                 db  0Bh
.eh_frame:0000000000007B24                 db  55h ; U
.eh_frame:0000000000007B25                 db  0Ah
.eh_frame:0000000000007B26                 db  0Eh
.eh_frame:0000000000007B27                 db  18h
.eh_frame:0000000000007B28                 db  41h ; A
.eh_frame:0000000000007B29                 db  0Eh
.eh_frame:0000000000007B2A                 db  10h
.eh_frame:0000000000007B2B                 db  42h ; B
.eh_frame:0000000000007B2C                 db  0Eh
.eh_frame:0000000000007B2D                 db    8
.eh_frame:0000000000007B2E                 db  48h ; H
.eh_frame:0000000000007B2F                 db  0Bh
.eh_frame:0000000000007B30                 db  41h ; A
.eh_frame:0000000000007B31                 db  0Ah
.eh_frame:0000000000007B32                 db  0Eh
.eh_frame:0000000000007B33                 db  18h
.eh_frame:0000000000007B34                 db  46h ; F
.eh_frame:0000000000007B35                 db  0Eh
.eh_frame:0000000000007B36                 db  10h
.eh_frame:0000000000007B37                 db  42h ; B
.eh_frame:0000000000007B38                 db  0Eh
.eh_frame:0000000000007B39                 db    8
.eh_frame:0000000000007B3A                 db  47h ; G
.eh_frame:0000000000007B3B                 db  0Bh
.eh_frame:0000000000007B3C                 db  49h ; I
.eh_frame:0000000000007B3D                 db  0Eh
.eh_frame:0000000000007B3E                 db  18h
.eh_frame:0000000000007B3F                 db  41h ; A
.eh_frame:0000000000007B40                 db  0Eh
.eh_frame:0000000000007B41                 db  10h
.eh_frame:0000000000007B42                 db  42h ; B
.eh_frame:0000000000007B43                 db  0Eh
.eh_frame:0000000000007B44                 db    8
.eh_frame:0000000000007B45                 db    0
.eh_frame:0000000000007B46                 db    0
.eh_frame:0000000000007B47                 db    0
.eh_frame:0000000000007B48                 db  1Ch
.eh_frame:0000000000007B49                 db    0
.eh_frame:0000000000007B4A                 db    0
.eh_frame:0000000000007B4B                 db    0
.eh_frame:0000000000007B4C                 db 0FCh
.eh_frame:0000000000007B4D                 db  0Ch
.eh_frame:0000000000007B4E                 db    0
.eh_frame:0000000000007B4F                 db    0
.eh_frame:0000000000007B50                 db  70h ; p
.eh_frame:0000000000007B51                 db 0DCh
.eh_frame:0000000000007B52                 db 0FFh
.eh_frame:0000000000007B53                 db 0FFh
.eh_frame:0000000000007B54                 db  3Ch ; <
.eh_frame:0000000000007B55                 db    0
.eh_frame:0000000000007B56                 db    0
.eh_frame:0000000000007B57                 db    0
.eh_frame:0000000000007B58                 db    0
.eh_frame:0000000000007B59                 db  44h ; D
.eh_frame:0000000000007B5A                 db  0Eh
.eh_frame:0000000000007B5B                 db  10h
.eh_frame:0000000000007B5C                 db  61h ; a
.eh_frame:0000000000007B5D                 db  0Ah
.eh_frame:0000000000007B5E                 db  0Eh
.eh_frame:0000000000007B5F                 db    8
.eh_frame:0000000000007B60                 db  4Bh ; K
.eh_frame:0000000000007B61                 db  0Bh
.eh_frame:0000000000007B62                 db  4Bh ; K
.eh_frame:0000000000007B63                 db  0Eh
.eh_frame:0000000000007B64                 db    8
.eh_frame:0000000000007B65                 db    0
.eh_frame:0000000000007B66                 db    0
.eh_frame:0000000000007B67                 db    0
.eh_frame:0000000000007B68                 db  74h ; t
.eh_frame:0000000000007B69                 db    0
.eh_frame:0000000000007B6A                 db    0
.eh_frame:0000000000007B6B                 db    0
.eh_frame:0000000000007B6C                 db  1Ch
.eh_frame:0000000000007B6D                 db  0Dh
.eh_frame:0000000000007B6E                 db    0
.eh_frame:0000000000007B6F                 db    0
.eh_frame:0000000000007B70                 db  90h
.eh_frame:0000000000007B71                 db 0DCh
.eh_frame:0000000000007B72                 db 0FFh
.eh_frame:0000000000007B73                 db 0FFh
.eh_frame:0000000000007B74                 db 0B4h
.eh_frame:0000000000007B75                 db    0
.eh_frame:0000000000007B76                 db    0
.eh_frame:0000000000007B77                 db    0
.eh_frame:0000000000007B78                 db    0
.eh_frame:0000000000007B79                 db  42h ; B
.eh_frame:0000000000007B7A                 db  0Eh
.eh_frame:0000000000007B7B                 db  10h
.eh_frame:0000000000007B7C                 db  8Fh
.eh_frame:0000000000007B7D                 db    2
.eh_frame:0000000000007B7E                 db  42h ; B
.eh_frame:0000000000007B7F                 db  0Eh
.eh_frame:0000000000007B80                 db  18h
.eh_frame:0000000000007B81                 db  8Eh
.eh_frame:0000000000007B82                 db    3
.eh_frame:0000000000007B83                 db  45h ; E
.eh_frame:0000000000007B84                 db  0Eh
.eh_frame:0000000000007B85                 db  20h
.eh_frame:0000000000007B86                 db  8Dh
.eh_frame:0000000000007B87                 db    4
.eh_frame:0000000000007B88                 db  42h ; B
.eh_frame:0000000000007B89                 db  0Eh
.eh_frame:0000000000007B8A                 db  28h ; (
.eh_frame:0000000000007B8B                 db  8Ch
.eh_frame:0000000000007B8C                 db    5
.eh_frame:0000000000007B8D                 db  44h ; D
.eh_frame:0000000000007B8E                 db  0Eh
.eh_frame:0000000000007B8F                 db  30h ; 0
.eh_frame:0000000000007B90                 db  86h
.eh_frame:0000000000007B91                 db    6
.eh_frame:0000000000007B92                 db  41h ; A
.eh_frame:0000000000007B93                 db  0Eh
.eh_frame:0000000000007B94                 db  38h ; 8
.eh_frame:0000000000007B95                 db  83h
.eh_frame:0000000000007B96                 db    7
.eh_frame:0000000000007B97                 db  4Ah ; J
.eh_frame:0000000000007B98                 db  0Eh
.eh_frame:0000000000007B99                 db  40h ; @
.eh_frame:0000000000007B9A                 db    2
.eh_frame:0000000000007B9B                 db  53h ; S
.eh_frame:0000000000007B9C                 db  0Ah
.eh_frame:0000000000007B9D                 db  0Eh
.eh_frame:0000000000007B9E                 db  38h ; 8
.eh_frame:0000000000007B9F                 db  41h ; A
.eh_frame:0000000000007BA0                 db  0Eh
.eh_frame:0000000000007BA1                 db  30h ; 0
.eh_frame:0000000000007BA2                 db  41h ; A
.eh_frame:0000000000007BA3                 db  0Eh
.eh_frame:0000000000007BA4                 db  28h ; (
.eh_frame:0000000000007BA5                 db  42h ; B
.eh_frame:0000000000007BA6                 db  0Eh
.eh_frame:0000000000007BA7                 db  20h
.eh_frame:0000000000007BA8                 db  42h ; B
.eh_frame:0000000000007BA9                 db  0Eh
.eh_frame:0000000000007BAA                 db  18h
.eh_frame:0000000000007BAB                 db  42h ; B
.eh_frame:0000000000007BAC                 db  0Eh
.eh_frame:0000000000007BAD                 db  10h
.eh_frame:0000000000007BAE                 db  42h ; B
.eh_frame:0000000000007BAF                 db  0Eh
.eh_frame:0000000000007BB0                 db    8
.eh_frame:0000000000007BB1                 db  49h ; I
.eh_frame:0000000000007BB2                 db  0Bh
.eh_frame:0000000000007BB3                 db  4Ch ; L
.eh_frame:0000000000007BB4                 db  0Ah
.eh_frame:0000000000007BB5                 db  0Eh
.eh_frame:0000000000007BB6                 db  38h ; 8
.eh_frame:0000000000007BB7                 db  41h ; A
.eh_frame:0000000000007BB8                 db  0Eh
.eh_frame:0000000000007BB9                 db  30h ; 0
.eh_frame:0000000000007BBA                 db  43h ; C
.eh_frame:0000000000007BBB                 db  0Eh
.eh_frame:0000000000007BBC                 db  28h ; (
.eh_frame:0000000000007BBD                 db  42h ; B
.eh_frame:0000000000007BBE                 db  0Eh
.eh_frame:0000000000007BBF                 db  20h
.eh_frame:0000000000007BC0                 db  42h ; B
.eh_frame:0000000000007BC1                 db  0Eh
.eh_frame:0000000000007BC2                 db  18h
.eh_frame:0000000000007BC3                 db  42h ; B
.eh_frame:0000000000007BC4                 db  0Eh
.eh_frame:0000000000007BC5                 db  10h
.eh_frame:0000000000007BC6                 db  42h ; B
.eh_frame:0000000000007BC7                 db  0Eh
.eh_frame:0000000000007BC8                 db    8
.eh_frame:0000000000007BC9                 db  48h ; H
.eh_frame:0000000000007BCA                 db  0Bh
.eh_frame:0000000000007BCB                 db  44h ; D
.eh_frame:0000000000007BCC                 db  0Eh
.eh_frame:0000000000007BCD                 db  38h ; 8
.eh_frame:0000000000007BCE                 db  46h ; F
.eh_frame:0000000000007BCF                 db  0Eh
.eh_frame:0000000000007BD0                 db  30h ; 0
.eh_frame:0000000000007BD1                 db  41h ; A
.eh_frame:0000000000007BD2                 db  0Eh
.eh_frame:0000000000007BD3                 db  28h ; (
.eh_frame:0000000000007BD4                 db  42h ; B
.eh_frame:0000000000007BD5                 db  0Eh
.eh_frame:0000000000007BD6                 db  20h
.eh_frame:0000000000007BD7                 db  42h ; B
.eh_frame:0000000000007BD8                 db  0Eh
.eh_frame:0000000000007BD9                 db  18h
.eh_frame:0000000000007BDA                 db  42h ; B
.eh_frame:0000000000007BDB                 db  0Eh
.eh_frame:0000000000007BDC                 db  10h
.eh_frame:0000000000007BDD                 db  42h ; B
.eh_frame:0000000000007BDE                 db  0Eh
.eh_frame:0000000000007BDF                 db    8
.eh_frame:0000000000007BE0                 db  48h ; H
.eh_frame:0000000000007BE1                 db    0
.eh_frame:0000000000007BE2                 db    0
.eh_frame:0000000000007BE3                 db    0
.eh_frame:0000000000007BE4                 db  94h
.eh_frame:0000000000007BE5                 db  0Dh
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db 0D8h
.eh_frame:0000000000007BE9                 db 0DCh
.eh_frame:0000000000007BEA                 db 0FFh
.eh_frame:0000000000007BEB                 db 0FFh
.eh_frame:0000000000007BEC                 db 0A9h
.eh_frame:0000000000007BED                 db    0
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db    0
.eh_frame:0000000000007BF1                 db  42h ; B
.eh_frame:0000000000007BF2                 db  0Eh
.eh_frame:0000000000007BF3                 db  10h
.eh_frame:0000000000007BF4                 db  8Fh
.eh_frame:0000000000007BF5                 db    2
.eh_frame:0000000000007BF6                 db  42h ; B
.eh_frame:0000000000007BF7                 db  0Eh
.eh_frame:0000000000007BF8                 db  18h
.eh_frame:0000000000007BF9                 db  8Eh
.eh_frame:0000000000007BFA                 db    3
.eh_frame:0000000000007BFB                 db  45h ; E
.eh_frame:0000000000007BFC                 db  0Eh
.eh_frame:0000000000007BFD                 db  20h
.eh_frame:0000000000007BFE                 db  8Dh
.eh_frame:0000000000007BFF                 db    4
.eh_frame:0000000000007C00                 db  42h ; B
.eh_frame:0000000000007C01                 db  0Eh
.eh_frame:0000000000007C02                 db  28h ; (
.eh_frame:0000000000007C03                 db  8Ch
.eh_frame:0000000000007C04                 db    5
.eh_frame:0000000000007C05                 db  44h ; D
.eh_frame:0000000000007C06                 db  0Eh
.eh_frame:0000000000007C07                 db  30h ; 0
.eh_frame:0000000000007C08                 db  86h
.eh_frame:0000000000007C09                 db    6
.eh_frame:0000000000007C0A                 db  41h ; A
.eh_frame:0000000000007C0B                 db  0Eh
.eh_frame:0000000000007C0C                 db  38h ; 8
.eh_frame:0000000000007C0D                 db  83h
.eh_frame:0000000000007C0E                 db    7
.eh_frame:0000000000007C0F                 db  4Ah ; J
.eh_frame:0000000000007C10                 db  0Eh
.eh_frame:0000000000007C11                 db  50h ; P
.eh_frame:0000000000007C12                 db    2
.eh_frame:0000000000007C13                 db  6Bh ; k
.eh_frame:0000000000007C14                 db  0Ah
.eh_frame:0000000000007C15                 db  0Eh
.eh_frame:0000000000007C16                 db  38h ; 8
.eh_frame:0000000000007C17                 db  43h ; C
.eh_frame:0000000000007C18                 db  0Eh
.eh_frame:0000000000007C19                 db  30h ; 0
.eh_frame:0000000000007C1A                 db  41h ; A
.eh_frame:0000000000007C1B                 db  0Eh
.eh_frame:0000000000007C1C                 db  28h ; (
.eh_frame:0000000000007C1D                 db  42h ; B
.eh_frame:0000000000007C1E                 db  0Eh
.eh_frame:0000000000007C1F                 db  20h
.eh_frame:0000000000007C20                 db  42h ; B
.eh_frame:0000000000007C21                 db  0Eh
.eh_frame:0000000000007C22                 db  18h
.eh_frame:0000000000007C23                 db  42h ; B
.eh_frame:0000000000007C24                 db  0Eh
.eh_frame:0000000000007C25                 db  10h
.eh_frame:0000000000007C26                 db  42h ; B
.eh_frame:0000000000007C27                 db  0Eh
.eh_frame:0000000000007C28                 db    8
.eh_frame:0000000000007C29                 db  47h ; G
.eh_frame:0000000000007C2A                 db  0Bh
.eh_frame:0000000000007C2B                 db    0
.eh_frame:0000000000007C2C                 db  40h ; @
.eh_frame:0000000000007C2D                 db    0
.eh_frame:0000000000007C2E                 db    0
.eh_frame:0000000000007C2F                 db    0
.eh_frame:0000000000007C30                 db 0E0h
.eh_frame:0000000000007C31                 db  0Dh
.eh_frame:0000000000007C32                 db    0
.eh_frame:0000000000007C33                 db    0
.eh_frame:0000000000007C34                 db  3Ch ; <
.eh_frame:0000000000007C35                 db 0DDh
.eh_frame:0000000000007C36                 db 0FFh
.eh_frame:0000000000007C37                 db 0FFh
.eh_frame:0000000000007C38                 db  5Eh ; ^
.eh_frame:0000000000007C39                 db    0
.eh_frame:0000000000007C3A                 db    0
.eh_frame:0000000000007C3B                 db    0
.eh_frame:0000000000007C3C                 db    0
.eh_frame:0000000000007C3D                 db  42h ; B
.eh_frame:0000000000007C3E                 db  0Eh
.eh_frame:0000000000007C3F                 db  10h
.eh_frame:0000000000007C40                 db  8Ch
.eh_frame:0000000000007C41                 db    2
.eh_frame:0000000000007C42                 db  41h ; A
.eh_frame:0000000000007C43                 db  0Eh
.eh_frame:0000000000007C44                 db  18h
.eh_frame:0000000000007C45                 db  86h
.eh_frame:0000000000007C46                 db    3
.eh_frame:0000000000007C47                 db  44h ; D
.eh_frame:0000000000007C48                 db  0Eh
.eh_frame:0000000000007C49                 db  20h
.eh_frame:0000000000007C4A                 db  83h
.eh_frame:0000000000007C4B                 db    4
.eh_frame:0000000000007C4C                 db  4Ah ; J
.eh_frame:0000000000007C4D                 db  0Eh
.eh_frame:0000000000007C4E                 db  30h ; 0
.eh_frame:0000000000007C4F                 db  62h ; b
.eh_frame:0000000000007C50                 db  0Ah
.eh_frame:0000000000007C51                 db  0Eh
.eh_frame:0000000000007C52                 db  20h
.eh_frame:0000000000007C53                 db  4Ah ; J
.eh_frame:0000000000007C54                 db  0Eh
.eh_frame:0000000000007C55                 db  18h
.eh_frame:0000000000007C56                 db  41h ; A
.eh_frame:0000000000007C57                 db  0Eh
.eh_frame:0000000000007C58                 db  10h
.eh_frame:0000000000007C59                 db  42h ; B
.eh_frame:0000000000007C5A                 db  0Eh
.eh_frame:0000000000007C5B                 db    8
.eh_frame:0000000000007C5C                 db  48h ; H
.eh_frame:0000000000007C5D                 db  0Bh
.eh_frame:0000000000007C5E                 db  4Fh ; O
.eh_frame:0000000000007C5F                 db  0Eh
.eh_frame:0000000000007C60                 db  20h
.eh_frame:0000000000007C61                 db  43h ; C
.eh_frame:0000000000007C62                 db  0Eh
.eh_frame:0000000000007C63                 db  18h
.eh_frame:0000000000007C64                 db  41h ; A
.eh_frame:0000000000007C65                 db  0Eh
.eh_frame:0000000000007C66                 db  10h
.eh_frame:0000000000007C67                 db  42h ; B
.eh_frame:0000000000007C68                 db  0Eh
.eh_frame:0000000000007C69                 db    8
.eh_frame:0000000000007C6A                 db    0
.eh_frame:0000000000007C6B                 db    0
.eh_frame:0000000000007C6C                 db    0
.eh_frame:0000000000007C6D                 db    0
.eh_frame:0000000000007C6E                 db    0
.eh_frame:0000000000007C6F                 db    0
.eh_frame:0000000000007C70                 db  44h ; D
.eh_frame:0000000000007C71                 db    0
.eh_frame:0000000000007C72                 db    0
.eh_frame:0000000000007C73                 db    0
.eh_frame:0000000000007C74                 db  24h ; $
.eh_frame:0000000000007C75                 db  0Eh
.eh_frame:0000000000007C76                 db    0
.eh_frame:0000000000007C77                 db    0
.eh_frame:0000000000007C78                 db  58h ; X
.eh_frame:0000000000007C79                 db 0DDh
.eh_frame:0000000000007C7A                 db 0FFh
.eh_frame:0000000000007C7B                 db 0FFh
.eh_frame:0000000000007C7C                 db  65h ; e
.eh_frame:0000000000007C7D                 db    0
.eh_frame:0000000000007C7E                 db    0
.eh_frame:0000000000007C7F                 db    0
.eh_frame:0000000000007C80                 db    0
.eh_frame:0000000000007C81                 db  42h ; B
.eh_frame:0000000000007C82                 db  0Eh
.eh_frame:0000000000007C83                 db  10h
.eh_frame:0000000000007C84                 db  8Fh
.eh_frame:0000000000007C85                 db    2
.eh_frame:0000000000007C86                 db  42h ; B
.eh_frame:0000000000007C87                 db  0Eh
.eh_frame:0000000000007C88                 db  18h
.eh_frame:0000000000007C89                 db  8Eh
.eh_frame:0000000000007C8A                 db    3
.eh_frame:0000000000007C8B                 db  45h ; E
.eh_frame:0000000000007C8C                 db  0Eh
.eh_frame:0000000000007C8D                 db  20h
.eh_frame:0000000000007C8E                 db  8Dh
.eh_frame:0000000000007C8F                 db    4
.eh_frame:0000000000007C90                 db  42h ; B
.eh_frame:0000000000007C91                 db  0Eh
.eh_frame:0000000000007C92                 db  28h ; (
.eh_frame:0000000000007C93                 db  8Ch
.eh_frame:0000000000007C94                 db    5
.eh_frame:0000000000007C95                 db  48h ; H
.eh_frame:0000000000007C96                 db  0Eh
.eh_frame:0000000000007C97                 db  30h ; 0
.eh_frame:0000000000007C98                 db  86h
.eh_frame:0000000000007C99                 db    6
.eh_frame:0000000000007C9A                 db  48h ; H
.eh_frame:0000000000007C9B                 db  0Eh
.eh_frame:0000000000007C9C                 db  38h ; 8
.eh_frame:0000000000007C9D                 db  83h
.eh_frame:0000000000007C9E                 db    7
.eh_frame:0000000000007C9F                 db  4Dh ; M
.eh_frame:0000000000007CA0                 db  0Eh
.eh_frame:0000000000007CA1                 db  40h ; @
.eh_frame:0000000000007CA2                 db  72h ; r
.eh_frame:0000000000007CA3                 db  0Eh
.eh_frame:0000000000007CA4                 db  38h ; 8
.eh_frame:0000000000007CA5                 db  41h ; A
.eh_frame:0000000000007CA6                 db  0Eh
.eh_frame:0000000000007CA7                 db  30h ; 0
.eh_frame:0000000000007CA8                 db  41h ; A
.eh_frame:0000000000007CA9                 db  0Eh
.eh_frame:0000000000007CAA                 db  28h ; (
.eh_frame:0000000000007CAB                 db  42h ; B
.eh_frame:0000000000007CAC                 db  0Eh
.eh_frame:0000000000007CAD                 db  20h
.eh_frame:0000000000007CAE                 db  42h ; B
.eh_frame:0000000000007CAF                 db  0Eh
.eh_frame:0000000000007CB0                 db  18h
.eh_frame:0000000000007CB1                 db  42h ; B
.eh_frame:0000000000007CB2                 db  0Eh
.eh_frame:0000000000007CB3                 db  10h
.eh_frame:0000000000007CB4                 db  42h ; B
.eh_frame:0000000000007CB5                 db  0Eh
.eh_frame:0000000000007CB6                 db    8
.eh_frame:0000000000007CB7                 db    0
.eh_frame:0000000000007CB8                 db  14h
.eh_frame:0000000000007CB9                 db    0
.eh_frame:0000000000007CBA                 db    0
.eh_frame:0000000000007CBB                 db    0
.eh_frame:0000000000007CBC                 db  6Ch ; l
.eh_frame:0000000000007CBD                 db  0Eh
.eh_frame:0000000000007CBE                 db    0
.eh_frame:0000000000007CBF                 db    0
.eh_frame:0000000000007CC0                 db  80h
.eh_frame:0000000000007CC1                 db 0DDh
.eh_frame:0000000000007CC2                 db 0FFh
.eh_frame:0000000000007CC3                 db 0FFh
.eh_frame:0000000000007CC4                 db    2
.eh_frame:0000000000007CC5                 db    0
.eh_frame:0000000000007CC6                 db    0
.eh_frame:0000000000007CC7                 db    0
.eh_frame:0000000000007CC8                 db    0
.eh_frame:0000000000007CC9                 db    0
.eh_frame:0000000000007CCA                 db    0
.eh_frame:0000000000007CCB                 db    0
.eh_frame:0000000000007CCC                 db    0
.eh_frame:0000000000007CCD                 db    0
.eh_frame:0000000000007CCE                 db    0
.eh_frame:0000000000007CCF                 db    0
.eh_frame:0000000000007CD0                 db  10h
.eh_frame:0000000000007CD1                 db    0
.eh_frame:0000000000007CD2                 db    0
.eh_frame:0000000000007CD3                 db    0
.eh_frame:0000000000007CD4                 db  84h
.eh_frame:0000000000007CD5                 db  0Eh
.eh_frame:0000000000007CD6                 db    0
.eh_frame:0000000000007CD7                 db    0
.eh_frame:0000000000007CD8                 db  78h ; x
.eh_frame:0000000000007CD9                 db 0DDh
.eh_frame:0000000000007CDA                 db 0FFh
.eh_frame:0000000000007CDB                 db 0FFh
.eh_frame:0000000000007CDC                 db  0Eh
.eh_frame:0000000000007CDD                 db    0
.eh_frame:0000000000007CDE                 db    0
.eh_frame:0000000000007CDF                 db    0
.eh_frame:0000000000007CE0                 db    0
.eh_frame:0000000000007CE1                 db    0
.eh_frame:0000000000007CE2                 db    0
.eh_frame:0000000000007CE3                 db    0
.eh_frame:0000000000007CE4 __FRAME_END__   db    0
.eh_frame:0000000000007CE5                 db    0
.eh_frame:0000000000007CE6                 db    0
.eh_frame:0000000000007CE7                 db    0
.eh_frame:0000000000007CE7 _eh_frame       ends
.eh_frame:0000000000007CE7
.init_array:0000000000208AD0 ; ELF Initialization Function Table
.init_array:0000000000208AD0 ; ===========================================================================
.init_array:0000000000208AD0
.init_array:0000000000208AD0 ; Segment type: Pure data
.init_array:0000000000208AD0 ; Segment permissions: Read/Write
.init_array:0000000000208AD0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208AD0                 assume cs:_init_array
.init_array:0000000000208AD0                 ;org 208AD0h
.init_array:0000000000208AD0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208AD0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208AD0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208AD0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208AD0
.fini_array:0000000000208AD8 ; ELF Termination Function Table
.fini_array:0000000000208AD8 ; ===========================================================================
.fini_array:0000000000208AD8
.fini_array:0000000000208AD8 ; Segment type: Pure data
.fini_array:0000000000208AD8 ; Segment permissions: Read/Write
.fini_array:0000000000208AD8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208AD8                 assume cs:_fini_array
.fini_array:0000000000208AD8                 ;org 208AD8h
.fini_array:0000000000208AD8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208AD8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208AD8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208AD8
.data.rel.ro:0000000000208AE0 ; ===========================================================================
.data.rel.ro:0000000000208AE0
.data.rel.ro:0000000000208AE0 ; Segment type: Pure data
.data.rel.ro:0000000000208AE0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208AE0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208AE0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208AE0                 ;org 208AE0h
.data.rel.ro:0000000000208AE0 ; struct option long_options
.data.rel.ro:0000000000208AE0 long_options    dq offset aCheckOrder   ; name
.data.rel.ro:0000000000208AE0                                         ; DATA XREF: main:loc_1840↑o
.data.rel.ro:0000000000208AE0                 dd 0                    ; has_arg ; "check-order"
.data.rel.ro:0000000000208AE0                 db 4 dup(0)
.data.rel.ro:0000000000208AE0                 dq 0                    ; flag
.data.rel.ro:0000000000208AE0                 dd 80h                  ; val
.data.rel.ro:0000000000208AE0                 db 4 dup(0)
.data.rel.ro:0000000000208B00                 dq offset unk_61BC
.data.rel.ro:0000000000208B08                 db    0
.data.rel.ro:0000000000208B09                 db    0
.data.rel.ro:0000000000208B0A                 db    0
.data.rel.ro:0000000000208B0B                 db    0
.data.rel.ro:0000000000208B0C                 db    0
.data.rel.ro:0000000000208B0D                 db    0
.data.rel.ro:0000000000208B0E                 db    0
.data.rel.ro:0000000000208B0F                 db    0
.data.rel.ro:0000000000208B10                 db    0
.data.rel.ro:0000000000208B11                 db    0
.data.rel.ro:0000000000208B12                 db    0
.data.rel.ro:0000000000208B13                 db    0
.data.rel.ro:0000000000208B14                 db    0
.data.rel.ro:0000000000208B15                 db    0
.data.rel.ro:0000000000208B16                 db    0
.data.rel.ro:0000000000208B17                 db    0
.data.rel.ro:0000000000208B18                 db  81h
.data.rel.ro:0000000000208B19                 db    0
.data.rel.ro:0000000000208B1A                 db    0
.data.rel.ro:0000000000208B1B                 db    0
.data.rel.ro:0000000000208B1C                 db    0
.data.rel.ro:0000000000208B1D                 db    0
.data.rel.ro:0000000000208B1E                 db    0
.data.rel.ro:0000000000208B1F                 db    0
.data.rel.ro:0000000000208B20                 dq offset aOutputDelimite_0 ; "output-delimiter"
.data.rel.ro:0000000000208B28                 db    1
.data.rel.ro:0000000000208B29                 db    0
.data.rel.ro:0000000000208B2A                 db    0
.data.rel.ro:0000000000208B2B                 db    0
.data.rel.ro:0000000000208B2C                 db    0
.data.rel.ro:0000000000208B2D                 db    0
.data.rel.ro:0000000000208B2E                 db    0
.data.rel.ro:0000000000208B2F                 db    0
.data.rel.ro:0000000000208B30                 db    0
.data.rel.ro:0000000000208B31                 db    0
.data.rel.ro:0000000000208B32                 db    0
.data.rel.ro:0000000000208B33                 db    0
.data.rel.ro:0000000000208B34                 db    0
.data.rel.ro:0000000000208B35                 db    0
.data.rel.ro:0000000000208B36                 db    0
.data.rel.ro:0000000000208B37                 db    0
.data.rel.ro:0000000000208B38                 db  82h
.data.rel.ro:0000000000208B39                 db    0
.data.rel.ro:0000000000208B3A                 db    0
.data.rel.ro:0000000000208B3B                 db    0
.data.rel.ro:0000000000208B3C                 db    0
.data.rel.ro:0000000000208B3D                 db    0
.data.rel.ro:0000000000208B3E                 db    0
.data.rel.ro:0000000000208B3F                 db    0
.data.rel.ro:0000000000208B40                 dq offset aTotal        ; "total"
.data.rel.ro:0000000000208B48                 db    0
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  83h
.data.rel.ro:0000000000208B59                 db    0
.data.rel.ro:0000000000208B5A                 db    0
.data.rel.ro:0000000000208B5B                 db    0
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db  7Ah ; z
.data.rel.ro:0000000000208B79                 db    0
.data.rel.ro:0000000000208B7A                 db    0
.data.rel.ro:0000000000208B7B                 db    0
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B88                 db    0
.data.rel.ro:0000000000208B89                 db    0
.data.rel.ro:0000000000208B8A                 db    0
.data.rel.ro:0000000000208B8B                 db    0
.data.rel.ro:0000000000208B8C                 db    0
.data.rel.ro:0000000000208B8D                 db    0
.data.rel.ro:0000000000208B8E                 db    0
.data.rel.ro:0000000000208B8F                 db    0
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B98                 db  7Eh ; ~
.data.rel.ro:0000000000208B99                 db 0FFh
.data.rel.ro:0000000000208B9A                 db 0FFh
.data.rel.ro:0000000000208B9B                 db 0FFh
.data.rel.ro:0000000000208B9C                 db    0
.data.rel.ro:0000000000208B9D                 db    0
.data.rel.ro:0000000000208B9E                 db    0
.data.rel.ro:0000000000208B9F                 db    0
.data.rel.ro:0000000000208BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208BA8                 db    0
.data.rel.ro:0000000000208BA9                 db    0
.data.rel.ro:0000000000208BAA                 db    0
.data.rel.ro:0000000000208BAB                 db    0
.data.rel.ro:0000000000208BAC                 db    0
.data.rel.ro:0000000000208BAD                 db    0
.data.rel.ro:0000000000208BAE                 db    0
.data.rel.ro:0000000000208BAF                 db    0
.data.rel.ro:0000000000208BB0                 db    0
.data.rel.ro:0000000000208BB1                 db    0
.data.rel.ro:0000000000208BB2                 db    0
.data.rel.ro:0000000000208BB3                 db    0
.data.rel.ro:0000000000208BB4                 db    0
.data.rel.ro:0000000000208BB5                 db    0
.data.rel.ro:0000000000208BB6                 db    0
.data.rel.ro:0000000000208BB7                 db    0
.data.rel.ro:0000000000208BB8                 db  7Dh ; }
.data.rel.ro:0000000000208BB9                 db 0FFh
.data.rel.ro:0000000000208BBA                 db 0FFh
.data.rel.ro:0000000000208BBB                 db 0FFh
.data.rel.ro:0000000000208BBC                 db    0
.data.rel.ro:0000000000208BBD                 db    0
.data.rel.ro:0000000000208BBE                 db    0
.data.rel.ro:0000000000208BBF                 db    0
.data.rel.ro:0000000000208BC0                 db    0
.data.rel.ro:0000000000208BC1                 db    0
.data.rel.ro:0000000000208BC2                 db    0
.data.rel.ro:0000000000208BC3                 db    0
.data.rel.ro:0000000000208BC4                 db    0
.data.rel.ro:0000000000208BC5                 db    0
.data.rel.ro:0000000000208BC6                 db    0
.data.rel.ro:0000000000208BC7                 db    0
.data.rel.ro:0000000000208BC8                 db    0
.data.rel.ro:0000000000208BC9                 db    0
.data.rel.ro:0000000000208BCA                 db    0
.data.rel.ro:0000000000208BCB                 db    0
.data.rel.ro:0000000000208BCC                 db    0
.data.rel.ro:0000000000208BCD                 db    0
.data.rel.ro:0000000000208BCE                 db    0
.data.rel.ro:0000000000208BCF                 db    0
.data.rel.ro:0000000000208BD0                 db    0
.data.rel.ro:0000000000208BD1                 db    0
.data.rel.ro:0000000000208BD2                 db    0
.data.rel.ro:0000000000208BD3                 db    0
.data.rel.ro:0000000000208BD4                 db    0
.data.rel.ro:0000000000208BD5                 db    0
.data.rel.ro:0000000000208BD6                 db    0
.data.rel.ro:0000000000208BD7                 db    0
.data.rel.ro:0000000000208BD8                 db    0
.data.rel.ro:0000000000208BD9                 db    0
.data.rel.ro:0000000000208BDA                 db    0
.data.rel.ro:0000000000208BDB                 db    0
.data.rel.ro:0000000000208BDC                 db    0
.data.rel.ro:0000000000208BDD                 db    0
.data.rel.ro:0000000000208BDE                 db    0
.data.rel.ro:0000000000208BDF                 db    0
.data.rel.ro:0000000000208BE0                 public quoting_style_args
.data.rel.ro:0000000000208BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208C08                 dq offset aSSSSSSSC+0Fh ; "c"
.data.rel.ro:0000000000208C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208C30                 db    0
.data.rel.ro:0000000000208C31                 db    0
.data.rel.ro:0000000000208C32                 db    0
.data.rel.ro:0000000000208C33                 db    0
.data.rel.ro:0000000000208C34                 db    0
.data.rel.ro:0000000000208C35                 db    0
.data.rel.ro:0000000000208C36                 db    0
.data.rel.ro:0000000000208C37                 db    0
.data.rel.ro:0000000000208C37 _data_rel_ro    ends
.data.rel.ro:0000000000208C37
LOAD:0000000000208C38 ; ELF Dynamic Information
LOAD:0000000000208C38 ; ===========================================================================
LOAD:0000000000208C38
LOAD:0000000000208C38 ; Segment type: Pure data
LOAD:0000000000208C38 ; Segment permissions: Read/Write
LOAD:0000000000208C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208C38                 assume cs:LOAD
LOAD:0000000000208C38                 ;org 208C38h
LOAD:0000000000208C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208C48                 Elf64_Dyn <0Ch, 1458h>  ; DT_INIT
LOAD:0000000000208C58                 Elf64_Dyn <0Dh, 5A60h>  ; DT_FINI
LOAD:0000000000208C68                 Elf64_Dyn <19h, 208AD0h> ; DT_INIT_ARRAY
LOAD:0000000000208C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C88                 Elf64_Dyn <1Ah, 208AD8h> ; DT_FINI_ARRAY
LOAD:0000000000208C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208CB8                 Elf64_Dyn <5, 8C8h>     ; DT_STRTAB
LOAD:0000000000208CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208CD8                 Elf64_Dyn <0Ah, 2CDh>   ; DT_STRSZ
LOAD:0000000000208CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208D08                 Elf64_Dyn <3, 208E28h>  ; DT_PLTGOT
LOAD:0000000000208D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000208D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208D38                 Elf64_Dyn <17h, 0FD8h>  ; DT_JMPREL
LOAD:0000000000208D48                 Elf64_Dyn <7, 0C78h>    ; DT_RELA
LOAD:0000000000208D58                 Elf64_Dyn <8, 360h>     ; DT_RELASZ
LOAD:0000000000208D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D98                 Elf64_Dyn <6FFFFFFEh, 0C18h> ; DT_VERNEED
LOAD:0000000000208DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208DB8                 Elf64_Dyn <6FFFFFF0h, 0B96h> ; DT_VERSYM
LOAD:0000000000208DC8                 Elf64_Dyn <6FFFFFF9h, 18h> ; DT_RELACOUNT
LOAD:0000000000208DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208DE8                 db    0
LOAD:0000000000208DE9                 db    0
LOAD:0000000000208DEA                 db    0
LOAD:0000000000208DEB                 db    0
LOAD:0000000000208DEC                 db    0
LOAD:0000000000208DED                 db    0
LOAD:0000000000208DEE                 db    0
LOAD:0000000000208DEF                 db    0
LOAD:0000000000208DF0                 db    0
LOAD:0000000000208DF1                 db    0
LOAD:0000000000208DF2                 db    0
LOAD:0000000000208DF3                 db    0
LOAD:0000000000208DF4                 db    0
LOAD:0000000000208DF5                 db    0
LOAD:0000000000208DF6                 db    0
LOAD:0000000000208DF7                 db    0
LOAD:0000000000208DF8                 db    0
LOAD:0000000000208DF9                 db    0
LOAD:0000000000208DFA                 db    0
LOAD:0000000000208DFB                 db    0
LOAD:0000000000208DFC                 db    0
LOAD:0000000000208DFD                 db    0
LOAD:0000000000208DFE                 db    0
LOAD:0000000000208DFF                 db    0
LOAD:0000000000208E00                 db    0
LOAD:0000000000208E01                 db    0
LOAD:0000000000208E02                 db    0
LOAD:0000000000208E03                 db    0
LOAD:0000000000208E04                 db    0
LOAD:0000000000208E05                 db    0
LOAD:0000000000208E06                 db    0
LOAD:0000000000208E07                 db    0
LOAD:0000000000208E08                 db    0
LOAD:0000000000208E09                 db    0
LOAD:0000000000208E0A                 db    0
LOAD:0000000000208E0B                 db    0
LOAD:0000000000208E0C                 db    0
LOAD:0000000000208E0D                 db    0
LOAD:0000000000208E0E                 db    0
LOAD:0000000000208E0F                 db    0
LOAD:0000000000208E10                 db    0
LOAD:0000000000208E11                 db    0
LOAD:0000000000208E12                 db    0
LOAD:0000000000208E13                 db    0
LOAD:0000000000208E14                 db    0
LOAD:0000000000208E15                 db    0
LOAD:0000000000208E16                 db    0
LOAD:0000000000208E17                 db    0
LOAD:0000000000208E18                 db    0
LOAD:0000000000208E19                 db    0
LOAD:0000000000208E1A                 db    0
LOAD:0000000000208E1B                 db    0
LOAD:0000000000208E1C                 db    0
LOAD:0000000000208E1D                 db    0
LOAD:0000000000208E1E                 db    0
LOAD:0000000000208E1F                 db    0
LOAD:0000000000208E20                 db    0
LOAD:0000000000208E21                 db    0
LOAD:0000000000208E22                 db    0
LOAD:0000000000208E23                 db    0
LOAD:0000000000208E24                 db    0
LOAD:0000000000208E25                 db    0
LOAD:0000000000208E26                 db    0
LOAD:0000000000208E27                 db    0
LOAD:0000000000208E27 LOAD            ends
LOAD:0000000000208E27
.got:0000000000208E28 ; ===========================================================================
.got:0000000000208E28
.got:0000000000208E28 ; Segment type: Pure data
.got:0000000000208E28 ; Segment permissions: Read/Write
.got:0000000000208E28 _got            segment qword public 'DATA' use64
.got:0000000000208E28                 assume cs:_got
.got:0000000000208E28                 ;org 208E28h
.got:0000000000208E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208E30 qword_208E30    dq 0                    ; DATA XREF: sub_1470↑r
.got:0000000000208E38 qword_208E38    dq 0                    ; DATA XREF: sub_1470+6↑r
.got:0000000000208E40 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000208E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E58 __errno_location_ptr dq offset __errno_location
.got:0000000000208E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E78 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000208E80 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E88 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E90 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E90                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E98 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208EA0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208EA0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208EA8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208EC8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208ED0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208ED8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208EE0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000208EE8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000208EE8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000208EF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208EF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208EF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208F00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208F08 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000208F10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208F18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F20 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F28 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F30 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F38 strcoll_ptr     dq offset strcoll       ; DATA XREF: _strcoll↑r
.got:0000000000208F40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F48 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000208F48                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000208F50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F58 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000208F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F80 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000208F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FC8                                         ; DATA XREF: start+24↑r
.got:0000000000208FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FE0 _got            ends
.got:0000000000208FE0
LOAD:0000000000208FE8 ; ===========================================================================
LOAD:0000000000208FE8
LOAD:0000000000208FE8 ; Segment type: Pure data
LOAD:0000000000208FE8 ; Segment permissions: Read/Write
LOAD:0000000000208FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208FE8                 assume cs:LOAD
LOAD:0000000000208FE8                 ;org 208FE8h
LOAD:0000000000208FE8                 align 20h
LOAD:0000000000208FE8 LOAD            ends
LOAD:0000000000208FE8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010 delim           db 0Ah                  ; DATA XREF: main:loc_1970↑w
.data:0000000000209010                                         ; compare_files+F4↑r ...
.data:0000000000209011                 align 8
.data:0000000000209018 ; char *col_sep
.data:0000000000209018 col_sep         dq offset unk_61F8      ; DATA XREF: main+181↑r
.data:0000000000209018                                         ; main+19D↑w ...
.data:0000000000209020                 public Version
.data:0000000000209020 Version         dq offset a831          ; DATA XREF: main+216↑r
.data:0000000000209020                                         ; "8.31"
.data:0000000000209028                 public exit_failure
.data:0000000000209028 ; int exit_failure
.data:0000000000209028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2882↑r
.data:0000000000209028                                         ; xalloc_die+17↑r ...
.data:000000000020902C                 align 20h
.data:0000000000209040                 public quote_quoting_options
.data:0000000000209040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209040                                         ; quote_mem↑o ...
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058                 db    0
.data:0000000000209059                 db    0
.data:000000000020905A                 db    0
.data:000000000020905B                 db    0
.data:000000000020905C                 db    0
.data:000000000020905D                 db    0
.data:000000000020905E                 db    0
.data:000000000020905F                 db    0
.data:0000000000209060                 db    0
.data:0000000000209061                 db    0
.data:0000000000209062                 db    0
.data:0000000000209063                 db    0
.data:0000000000209064                 db    0
.data:0000000000209065                 db    0
.data:0000000000209066                 db    0
.data:0000000000209067                 db    0
.data:0000000000209068                 db    0
.data:0000000000209069                 db    0
.data:000000000020906A                 db    0
.data:000000000020906B                 db    0
.data:000000000020906C                 db    0
.data:000000000020906D                 db    0
.data:000000000020906E                 db    0
.data:000000000020906F                 db    0
.data:0000000000209070                 db    0
.data:0000000000209071                 db    0
.data:0000000000209072                 db    0
.data:0000000000209073                 db    0
.data:0000000000209074                 db    0
.data:0000000000209075                 db    0
.data:0000000000209076                 db    0
.data:0000000000209077                 db    0
.data:0000000000209078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209078                                         ; quotearg_n_options:loc_400D↑r ...
.data:000000000020907C                 align 20h
.data:0000000000209080 ; void *slotvec
.data:0000000000209080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209080                                         ; quotearg_n_options+76↑w ...
.data:0000000000209088                 align 10h
.data:0000000000209090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209090                                         ; quotearg_n_options+187↑r ...
.data:0000000000209098 off_209098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209098 _data           ends
.data:0000000000209098
.bss:00000000002090A0 ; ===========================================================================
.bss:00000000002090A0
.bss:00000000002090A0 ; Segment type: Uninitialized
.bss:00000000002090A0 ; Segment permissions: Read/Write
.bss:00000000002090A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002090A0                 assume cs:_bss
.bss:00000000002090A0                 ;org 2090A0h
.bss:00000000002090A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002090A0                 public __bss_start ; weak
.bss:00000000002090A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002090A0                                         ; LOAD:0000000000000868↑o ...
.bss:00000000002090A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002090A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002090A0                                         ; _edata
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002090A8 ; FILE *stdout
.bss:00000000002090A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002090A8                                         ; main+20F↑r ...
.bss:00000000002090A8                                         ; Alternative name is 'stdout'
.bss:00000000002090A8                                         ; Copy of shared data
.bss:00000000002090B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002090B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000820↑o
.bss:00000000002090B0                                         ; compare_files+B7↑r
.bss:00000000002090B0                                         ; Alternative name is 'stdin'
.bss:00000000002090B0                                         ; Copy of shared data
.bss:00000000002090B8                 public optind@@GLIBC_2_2_5
.bss:00000000002090B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002090B8                                         ; main:loc_19E3↑r
.bss:00000000002090B8                                         ; Alternative name is 'optind'
.bss:00000000002090B8                                         ; Copy of shared data
.bss:00000000002090BC                 align 20h
.bss:00000000002090C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002090C0 ; char *optarg
.bss:00000000002090C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002090C0                                         ; main+178↑r
.bss:00000000002090C0                                         ; Alternative name is 'optarg'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090C8                                         ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002090C8                                         ; LOAD:0000000000000850↑o ...
.bss:00000000002090C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090C8                                         ; Copy of shared data
.bss:00000000002090D0                 align 20h
.bss:00000000002090E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090E0 ; FILE *stderr
.bss:00000000002090E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002090E0                                         ; usage+3D↑r ...
.bss:00000000002090E0                                         ; Alternative name is 'stderr'
.bss:00000000002090E0                                         ; Copy of shared data
.bss:00000000002090E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090E9                 align 10h
.bss:00000000002090F0 ; size_t col_sep_len
.bss:00000000002090F0 col_sep_len     dq ?                    ; DATA XREF: main:loc_1900↑r
.bss:00000000002090F0                                         ; main:loc_194F↑w ...
.bss:00000000002090F8 check_input_order dd ?                  ; DATA XREF: main+95↑w
.bss:00000000002090F8                                         ; main+FA↑w ...
.bss:00000000002090FC total_option    db ?                    ; DATA XREF: main+9F↑w
.bss:00000000002090FC                                         ; main+152↑w ...
.bss:00000000002090FD issued_disorder_warning db ?            ; DATA XREF: main+8E↑w
.bss:00000000002090FD                                         ; main+279↑r ...
.bss:00000000002090FE byte_2090FE     db ?                    ; DATA XREF: main+87↑w
.bss:00000000002090FE                                         ; main+286↑r
.bss:00000000002090FF seen_unpairable db ?                    ; DATA XREF: main+80↑w
.bss:00000000002090FF                                         ; compare_files+2A8↑r ...
.bss:0000000000209100 both            db ?                    ; DATA XREF: main+79↑w
.bss:0000000000209100                                         ; main:loc_1960↑w ...
.bss:0000000000209101 only_file_2     db ?                    ; DATA XREF: main+72↑w
.bss:0000000000209101                                         ; main+133↑w ...
.bss:0000000000209102 only_file_1     db ?                    ; DATA XREF: main+6B↑w
.bss:0000000000209102                                         ; main:loc_1980↑w ...
.bss:0000000000209103 hard_LC_COLLATE db ?                    ; DATA XREF: main+60↑w
.bss:0000000000209103                                         ; check_order_isra_1_part_2+36↑r ...
.bss:0000000000209104                 align 8
.bss:0000000000209108 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000209108                                         ; close_stdout+1B↑r
.bss:0000000000209109                 align 10h
.bss:0000000000209110 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000209110                                         ; close_stdout+56↑r
.bss:0000000000209118                 public program_name
.bss:0000000000209118 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000209118                                         ; usage+214↑r ...
.bss:0000000000209120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209120                                         ; quotearg_free+46↑o ...
.bss:0000000000209121                 db    ? ;
.bss:0000000000209122                 db    ? ;
.bss:0000000000209123                 db    ? ;
.bss:0000000000209124                 db    ? ;
.bss:0000000000209125                 db    ? ;
.bss:0000000000209126                 db    ? ;
.bss:0000000000209127                 db    ? ;
.bss:0000000000209128                 db    ? ;
.bss:0000000000209129                 db    ? ;
.bss:000000000020912A                 db    ? ;
.bss:000000000020912B                 db    ? ;
.bss:000000000020912C                 db    ? ;
.bss:000000000020912D                 db    ? ;
.bss:000000000020912E                 db    ? ;
.bss:000000000020912F                 db    ? ;
.bss:0000000000209130                 db    ? ;
.bss:0000000000209131                 db    ? ;
.bss:0000000000209132                 db    ? ;
.bss:0000000000209133                 db    ? ;
.bss:0000000000209134                 db    ? ;
.bss:0000000000209135                 db    ? ;
.bss:0000000000209136                 db    ? ;
.bss:0000000000209137                 db    ? ;
.bss:0000000000209138                 db    ? ;
.bss:0000000000209139                 db    ? ;
.bss:000000000020913A                 db    ? ;
.bss:000000000020913B                 db    ? ;
.bss:000000000020913C                 db    ? ;
.bss:000000000020913D                 db    ? ;
.bss:000000000020913E                 db    ? ;
.bss:000000000020913F                 db    ? ;
.bss:0000000000209140                 db    ? ;
.bss:0000000000209141                 db    ? ;
.bss:0000000000209142                 db    ? ;
.bss:0000000000209143                 db    ? ;
.bss:0000000000209144                 db    ? ;
.bss:0000000000209145                 db    ? ;
.bss:0000000000209146                 db    ? ;
.bss:0000000000209147                 db    ? ;
.bss:0000000000209148                 db    ? ;
.bss:0000000000209149                 db    ? ;
.bss:000000000020914A                 db    ? ;
.bss:000000000020914B                 db    ? ;
.bss:000000000020914C                 db    ? ;
.bss:000000000020914D                 db    ? ;
.bss:000000000020914E                 db    ? ;
.bss:000000000020914F                 db    ? ;
.bss:0000000000209150                 db    ? ;
.bss:0000000000209151                 db    ? ;
.bss:0000000000209152                 db    ? ;
.bss:0000000000209153                 db    ? ;
.bss:0000000000209154                 db    ? ;
.bss:0000000000209155                 db    ? ;
.bss:0000000000209156                 db    ? ;
.bss:0000000000209157                 db    ? ;
.bss:0000000000209158                 db    ? ;
.bss:0000000000209159                 db    ? ;
.bss:000000000020915A                 db    ? ;
.bss:000000000020915B                 db    ? ;
.bss:000000000020915C                 db    ? ;
.bss:000000000020915D                 db    ? ;
.bss:000000000020915E                 db    ? ;
.bss:000000000020915F                 db    ? ;
.bss:0000000000209160                 db    ? ;
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200                 db    ? ;
.bss:0000000000209201                 db    ? ;
.bss:0000000000209202                 db    ? ;
.bss:0000000000209203                 db    ? ;
.bss:0000000000209204                 db    ? ;
.bss:0000000000209205                 db    ? ;
.bss:0000000000209206                 db    ? ;
.bss:0000000000209207                 db    ? ;
.bss:0000000000209208                 db    ? ;
.bss:0000000000209209                 db    ? ;
.bss:000000000020920A                 db    ? ;
.bss:000000000020920B                 db    ? ;
.bss:000000000020920C                 db    ? ;
.bss:000000000020920D                 db    ? ;
.bss:000000000020920E                 db    ? ;
.bss:000000000020920F                 db    ? ;
.bss:0000000000209210                 db    ? ;
.bss:0000000000209211                 db    ? ;
.bss:0000000000209212                 db    ? ;
.bss:0000000000209213                 db    ? ;
.bss:0000000000209214                 db    ? ;
.bss:0000000000209215                 db    ? ;
.bss:0000000000209216                 db    ? ;
.bss:0000000000209217                 db    ? ;
.bss:0000000000209218                 db    ? ;
.bss:0000000000209219                 db    ? ;
.bss:000000000020921A                 db    ? ;
.bss:000000000020921B                 db    ? ;
.bss:000000000020921C                 db    ? ;
.bss:000000000020921D                 db    ? ;
.bss:000000000020921E                 db    ? ;
.bss:000000000020921F                 db    ? ;
.bss:0000000000209220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209220                                         ; get_quoting_style↑o ...
.bss:0000000000209230 xmmword_209230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209230                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209240 xmmword_209240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209240                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209250 qword_209250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209250                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209258 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000209258                                         ; rpl_fcntl:loc_541F↑w ...
.bss:000000000020925C                 align 20h
.bss:000000000020925C _bss            ends
.bss:000000000020925C
.prgend:0000000000209260 ; ===========================================================================
.prgend:0000000000209260
.prgend:0000000000209260 ; Segment type: Zero-length
.prgend:0000000000209260 _prgend         segment byte public '' use64
.prgend:0000000000209260 _end            label byte
.prgend:0000000000209260 _prgend         ends
.prgend:0000000000209260
extern:0000000000209268 ; ===========================================================================
extern:0000000000209268
extern:0000000000209268 ; Segment type: Externs
extern:0000000000209268 ; extern
extern:0000000000209268 ; int _uflow(_IO_FILE *)
extern:0000000000209268                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:0000000000209268                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:0000000000209270 ; void free(void *ptr)
extern:0000000000209270                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000209270                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000209278 ; void __noreturn abort(void)
extern:0000000000209278                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000209278                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000209280 ; int *_errno_location(void)
extern:0000000000209280                 extrn __errno_location:near
extern:0000000000209280                                         ; CODE XREF: ___errno_location↑j
extern:0000000000209280                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000209288 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000209288                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000209288                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000209290 ; void __noreturn exit(int status)
extern:0000000000209290                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000209290                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000209298 ; size_t _fpending(FILE *fp)
extern:0000000000209298                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000209298                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002092A0 ; int fcntl(int fd, int cmd, ...)
extern:00000000002092A0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:00000000002092A0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:00000000002092A8 ; char *textdomain(const char *domainname)
extern:00000000002092A8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002092A8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002092B0 ; int fclose(FILE *stream)
extern:00000000002092B0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002092B0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002092B8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002092B8                 extrn bindtextdomain:near
extern:00000000002092B8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002092B8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002092C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002092C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002092C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002092C8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002092C8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002092C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002092C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002092D0 ; size_t strlen(const char *s)
extern:00000000002092D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002092D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002092D8                 extrn __stack_chk_fail:near
extern:00000000002092D8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002092D8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002092E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002092E0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002092E0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002092E8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002092E8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002092E8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002092F0 ; char *strrchr(const char *s, int c)
extern:00000000002092F0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002092F0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002092F8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002092F8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002092F8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000209300 ; void *memset(void *s, int c, size_t n)
extern:0000000000209300                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000209300                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000209308 ; int close(int fd)
extern:0000000000209308                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000209308                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000209310 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000209310                 extrn posix_fadvise:near
extern:0000000000209310                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000209310                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000209318 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209318                 extrn __libc_start_main:near
extern:0000000000209318                                         ; CODE XREF: start+24↑p
extern:0000000000209318                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209320 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209320                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209320                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209328 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209328                 extrn fputs_unlocked:near
extern:0000000000209328                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209328                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209330 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209330                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209330                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209338 ; int strcmp(const char *s1, const char *s2)
extern:0000000000209338                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000209338                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000209340 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000209340                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000209340                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000209348 ; int fileno(FILE *stream)
extern:0000000000209348                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000209348                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000209350 ; void *malloc(size_t size)
extern:0000000000209350                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000209350                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000209358 ; int fflush(FILE *stream)
extern:0000000000209358                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000209358                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000209360 ; char *nl_langinfo(nl_item item)
extern:0000000000209360                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000209360                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000209368 ; int strcoll(const char *s1, const char *s2)
extern:0000000000209368                 extrn strcoll:near      ; CODE XREF: _strcoll↑j
extern:0000000000209368                                         ; DATA XREF: .got:strcoll_ptr↑o
extern:0000000000209370 ; int _freading(FILE *fp)
extern:0000000000209370                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000209370                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000209378 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000209378                 extrn fwrite_unlocked:near
extern:0000000000209378                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000209378                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000209380 ; void *realloc(void *ptr, size_t size)
extern:0000000000209380                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000209380                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000209388 ; FILE *fdopen(int fd, const char *modes)
extern:0000000000209388                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:0000000000209388                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:0000000000209390 ; char *setlocale(int category, const char *locale)
extern:0000000000209390                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000209390                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000209398                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000209398                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002093A0 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002093A0                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002093A0                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002093A8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002093A8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002093A8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002093B0 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002093B0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002093B0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002093B8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002093B8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002093B8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002093C0 ; void __noreturn exit(int status)
extern:00000000002093C0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002093C0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002093C8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002093C8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002093C8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002093D0                 extrn __fprintf_chk:near
extern:00000000002093D0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002093D0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002093D8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002093D8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002093D8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002093E0 ; int iswprint(wint_t wc)
extern:00000000002093E0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002093E0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002093E8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002093E8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002093E8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002093E8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002093F0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002093F0                 extrn __ctype_b_loc:near
extern:00000000002093F0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002093F0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002093F8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002093F8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000209400                 extrn __gmon_start__:near ; weak
extern:0000000000209400                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000209400                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000209408                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000209408                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000209408
extern:0000000000209408
extern:0000000000209408                 end start
