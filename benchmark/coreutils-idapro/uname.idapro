LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 632201153E87FBBD128AA13689C56A2210DF6B93EFEAAF722CE7357AF4671D25
LOAD:0000000000000000 ; Input MD5    : 7C1112CEE7832EBF40CF7A11B7511CF2
LOAD:0000000000000000 ; Input CRC32  : DA577ECA
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/uname
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'uname.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'uname-uname.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 225E8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6498h                ; Size in file image
LOAD:00000000000000D8                 dq 6498h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 69F0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2069F0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6B0h                 ; Size in file image
LOAD:0000000000000110                 dq 848h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5790h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5790h                ; Physical address
LOAD:00000000000001B0                 dq 244h                 ; Size in file image
LOAD:00000000000001B8                 dq 244h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 69F0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2069F0h              ; Physical address
LOAD:0000000000000220                 dq 610h                 ; Size in file image
LOAD:0000000000000228                 dq 610h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 97h, 10h, 1, 0FDh, 0D0h, 0B6h, 0BAh, 93h, 0F8h, 2Bh ; Desc
LOAD:0000000000000284                 db 0C0h, 2Dh, 76h, 3Eh, 0ECh, 8, 88h, 0, 94h, 0D0h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 30h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 30h, 31h, 36h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_800, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_800, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_800, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_800, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_800, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_800, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_800, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFclose - offset byte_800, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain - offset byte_800, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aDcgettext - offset byte_800, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_800, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aStrlen - offset byte_800, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStackChkFail - offset byte_800, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aGetoptLong - offset byte_800, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aMbrtowc - offset byte_800, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aOverflow - offset byte_800, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStrrchr - offset byte_800, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aUname - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "uname"
LOAD:00000000000004A0                            0>
LOAD:00000000000004B8                 Elf64_Sym <offset aLseek - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004B8                            0>
LOAD:00000000000004D0                 Elf64_Sym <offset aMemset - offset byte_800, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aLibcStartMain - offset byte_800, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aMemcmp - offset byte_800, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aFputsUnlocked - offset byte_800, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aCalloc - offset byte_800, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aStrcmp - offset byte_800, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aGmonStart - offset byte_800, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aMemcpy - offset byte_800, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aFileno - offset byte_800, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aMalloc - offset byte_800, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aFflush - offset byte_800, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aNlLanginfo - offset byte_800, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aFreading - offset byte_800, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aRealloc - offset byte_800, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aSetlocale - offset byte_800, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aPrintfChk - offset byte_800, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aError - offset byte_800, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000650                            0>
LOAD:0000000000000668                 Elf64_Sym <offset aFseeko - offset byte_800, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aCxaAtexit - offset byte_800, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aExit+1 - offset byte_800, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aFwrite - offset byte_800, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFprintfChk - offset byte_800, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aItmRegistertmc - offset byte_800, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aMbsinit - offset byte_800, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aIswprint - offset byte_800, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aCxaFinalize - offset byte_800, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aCtypeBLoc - offset byte_800, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aStdout - offset byte_800, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000758                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000770                 Elf64_Sym <offset aProgname - offset byte_800, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000770                            offset __bss_start, 8>
LOAD:0000000000000788                 Elf64_Sym <offset aProgramInvocat - offset byte_800, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000788                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A0                 Elf64_Sym <offset aPrognameFull - offset byte_800, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007A0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007B8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_800, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007B8                            offset __bss_start, 8>
LOAD:00000000000007D0                 Elf64_Sym <offset aStderr - offset byte_800, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007D0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007E8                 Elf64_Sym <offset aOptind - offset byte_800, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007E8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000800 ; ELF String Table
LOAD:0000000000000800 byte_800        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000800                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000801 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B00↓o
LOAD:000000000000080B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000812 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000638↑o
LOAD:000000000000081F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000829 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000831 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000839 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000840 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000848 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000852 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000858 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000869 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000872 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000608↑o
LOAD:000000000000087A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000880 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000880                                         ; LOAD:0000000000000698↑o
LOAD:0000000000000886 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000886                                         ; DATA XREF: LOAD:0000000000000788↑o
LOAD:000000000000089E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000089E                                         ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000008B5 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:00000000000008BC aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008C3 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000008CA aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:00000000000008DB aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:00000000000008E2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:00000000000008F0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000758↑o
LOAD:00000000000008F7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:00000000000008FD aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000904 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:000000000000090B aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000912 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:000000000000091A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000926 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000934 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:000000000000093F aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000946 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000952 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000959 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000960 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:000000000000096B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000096B                                         ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000989 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000998 aUname          db 'uname',0            ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:000000000000099E aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:000000000000099E                                         ; LOAD:0000000000000398↑o
LOAD:00000000000009AD aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000548↑o
LOAD:00000000000009B4 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009B4                                         ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009C6 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009CD aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000009D8 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000009E7 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009EC aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009F7 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000A07 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000A14 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B10↓o
LOAD:0000000000000A1E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B20↓o
LOAD:0000000000000A2A aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B30↓o
LOAD:0000000000000A35 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B40↓o
LOAD:0000000000000A3F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B50↓o
LOAD:0000000000000A4B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A4B                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A67 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000A76 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A76                                         ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A90 ; ELF GNU Symbol Version Table
LOAD:0000000000000A90                 dw 0
LOAD:0000000000000A92                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A9C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AAE                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; uname@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AC8                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000ACA                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000ADA                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AE6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AE8                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AEC                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AF0                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 0
LOAD:0000000000000B00 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B00                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_800, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B10                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_800, \ ; "GLIBC_2.3"
LOAD:0000000000000B10                                10h>
LOAD:0000000000000B20                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_800, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B20                                10h>
LOAD:0000000000000B30                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_800, \ ; "GLIBC_2.14"
LOAD:0000000000000B30                                10h>
LOAD:0000000000000B40                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_800, \ ; "GLIBC_2.4"
LOAD:0000000000000B40                                10h>
LOAD:0000000000000B50                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_800, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B60 ; ELF RELA Relocation Table
LOAD:0000000000000B60                 Elf64_Rela <2069F0h, 8, 1B10h> ; R_X86_64_RELATIVE +1B10h
LOAD:0000000000000B78                 Elf64_Rela <2069F8h, 8, 1AD0h> ; R_X86_64_RELATIVE +1AD0h
LOAD:0000000000000B90                 Elf64_Rela <206A00h, 8, 4A75h> ; R_X86_64_RELATIVE +4A75h
LOAD:0000000000000BA8                 Elf64_Rela <206A20h, 8, 4AB1h> ; R_X86_64_RELATIVE +4AB1h
LOAD:0000000000000BC0                 Elf64_Rela <206A60h, 8, 4A7Ah> ; R_X86_64_RELATIVE +4A7Ah
LOAD:0000000000000BD8                 Elf64_Rela <206A80h, 8, 4A7Eh> ; R_X86_64_RELATIVE +4A7Eh
LOAD:0000000000000BF0                 Elf64_Rela <206AA0h, 8, 4A8Ah> ; R_X86_64_RELATIVE +4A8Ah
LOAD:0000000000000C08                 Elf64_Rela <206AC0h, 8, 4A92h> ; R_X86_64_RELATIVE +4A92h
LOAD:0000000000000C20                 Elf64_Rela <206AE0h, 8, 4A9Bh> ; R_X86_64_RELATIVE +4A9Bh
LOAD:0000000000000C38                 Elf64_Rela <206B00h, 8, 4AA2h> ; R_X86_64_RELATIVE +4AA2h
LOAD:0000000000000C50                 Elf64_Rela <206B20h, 8, 4AAAh> ; R_X86_64_RELATIVE +4AAAh
LOAD:0000000000000C68                 Elf64_Rela <206B40h, 8, 4AB9h> ; R_X86_64_RELATIVE +4AB9h
LOAD:0000000000000C80                 Elf64_Rela <206B60h, 8, 4AC1h> ; R_X86_64_RELATIVE +4AC1h
LOAD:0000000000000C98                 Elf64_Rela <206B80h, 8, 4ACBh> ; R_X86_64_RELATIVE +4ACBh
LOAD:0000000000000CB0                 Elf64_Rela <206BA0h, 8, 4ADDh> ; R_X86_64_RELATIVE +4ADDh
LOAD:0000000000000CC8                 Elf64_Rela <206BC0h, 8, 4A75h> ; R_X86_64_RELATIVE +4A75h
LOAD:0000000000000CE0                 Elf64_Rela <206BE0h, 8, 4AB1h> ; R_X86_64_RELATIVE +4AB1h
LOAD:0000000000000CF8                 Elf64_Rela <206C20h, 8, 4F41h> ; R_X86_64_RELATIVE +4F41h
LOAD:0000000000000D10                 Elf64_Rela <206C28h, 8, 4F49h> ; R_X86_64_RELATIVE +4F49h
LOAD:0000000000000D28                 Elf64_Rela <206C30h, 8, 4F4Fh> ; R_X86_64_RELATIVE +4F4Fh
LOAD:0000000000000D40                 Elf64_Rela <206C38h, 8, 4F5Ch> ; R_X86_64_RELATIVE +4F5Ch
LOAD:0000000000000D58                 Elf64_Rela <206C40h, 8, 4F69h> ; R_X86_64_RELATIVE +4F69h
LOAD:0000000000000D70                 Elf64_Rela <206C48h, 8, 4F7Dh> ; R_X86_64_RELATIVE +4F7Dh
LOAD:0000000000000D88                 Elf64_Rela <206C50h, 8, 4F7Fh> ; R_X86_64_RELATIVE +4F7Fh
LOAD:0000000000000DA0                 Elf64_Rela <206C58h, 8, 4F62h> ; R_X86_64_RELATIVE +4F62h
LOAD:0000000000000DB8                 Elf64_Rela <206C60h, 8, 4A18h> ; R_X86_64_RELATIVE +4A18h
LOAD:0000000000000DD0                 Elf64_Rela <206C68h, 8, 4F87h> ; R_X86_64_RELATIVE +4F87h
LOAD:0000000000000DE8                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000E00                 Elf64_Rela <207018h, 8, 4ED0h> ; R_X86_64_RELATIVE +4ED0h
LOAD:0000000000000E18                 Elf64_Rela <207080h, 8, 207090h> ; R_X86_64_RELATIVE +207090h
LOAD:0000000000000E30                 Elf64_Rela <207098h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000E48                 Elf64_Rela <206FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E60                 Elf64_Rela <206FD8h, 1600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E78                 Elf64_Rela <206FE0h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E90                 Elf64_Rela <206FE8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EA8                 Elf64_Rela <206FF0h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000EC0                 Elf64_Rela <2070A0h, 3100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000ED8                 Elf64_Rela <2070A8h, 3000000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EF0                 Elf64_Rela <2070B0h, 3600000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F08                 Elf64_Rela <2070B8h, 3300000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F20                 Elf64_Rela <2070C0h, 3500000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F38 ; ELF JMPREL Relocation Table
LOAD:0000000000000F38                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F50                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F68                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F80                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F98                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FB0                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FC8                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000FE0                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000FF8                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001010                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001028                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001040                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001058                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001070                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001088                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010A0                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000010B8                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000010D0                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT uname
LOAD:00000000000010E8                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001100                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001118                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001130                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001148                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001160                 Elf64_Rela <206F38h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001178                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001190                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011A8                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000011C0                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000011D8                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000011F0                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001208                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001220                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001238                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001250                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001268                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001280                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001298                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000012B0                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000012C8                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000012E0                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000012F8                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001310                 Elf64_Rela <206FC8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001310 LOAD            ends
LOAD:0000000000001310
.init:0000000000001328 ; ===========================================================================
.init:0000000000001328
.init:0000000000001328 ; Segment type: Pure code
.init:0000000000001328 ; Segment permissions: Read/Execute
.init:0000000000001328 _init           segment dword public 'CODE' use64
.init:0000000000001328                 assume cs:_init
.init:0000000000001328                 ;org 1328h
.init:0000000000001328                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001328
.init:0000000000001328 ; =============== S U B R O U T I N E =======================================
.init:0000000000001328
.init:0000000000001328
.init:0000000000001328                 public _init_proc
.init:0000000000001328 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001328                 sub     rsp, 8          ; _init
.init:000000000000132C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001333                 test    rax, rax
.init:0000000000001336                 jz      short loc_133A
.init:0000000000001338                 call    rax ; __gmon_start__
.init:000000000000133A
.init:000000000000133A loc_133A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000133A                 add     rsp, 8
.init:000000000000133E                 retn
.init:000000000000133E _init_proc      endp
.init:000000000000133E
.init:000000000000133E _init           ends
.init:000000000000133E
LOAD:000000000000133F ; ===========================================================================
LOAD:000000000000133F
LOAD:000000000000133F ; Segment type: Pure code
LOAD:000000000000133F ; Segment permissions: Read/Execute
LOAD:000000000000133F LOAD            segment byte public 'CODE' use64
LOAD:000000000000133F                 assume cs:LOAD
LOAD:000000000000133F                 ;org 133Fh
LOAD:000000000000133F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000133F                 align 20h
LOAD:000000000000133F LOAD            ends
LOAD:000000000000133F
.plt:0000000000001340 ; ===========================================================================
.plt:0000000000001340
.plt:0000000000001340 ; Segment type: Pure code
.plt:0000000000001340 ; Segment permissions: Read/Execute
.plt:0000000000001340 _plt            segment para public 'CODE' use64
.plt:0000000000001340                 assume cs:_plt
.plt:0000000000001340                 ;org 1340h
.plt:0000000000001340                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340
.plt:0000000000001340 sub_1340        proc near               ; CODE XREF: .plt:000000000000135B↓j
.plt:0000000000001340                                         ; .plt:000000000000136B↓j ...
.plt:0000000000001340 ; __unwind {
.plt:0000000000001340                 push    cs:qword_206E70
.plt:0000000000001346                 jmp     cs:qword_206E78
.plt:0000000000001346 sub_1340        endp
.plt:0000000000001346
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:000000000000134C                 align 10h
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; void free(void *ptr)
.plt:0000000000001350 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001350                                         ; quotearg_free+37↓p ...
.plt:0000000000001350                 jmp     cs:free_ptr
.plt:0000000000001350 _free           endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    0
.plt:000000000000135B                 jmp     sub_1340
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: noreturn thunk
.plt:0000000000001360
.plt:0000000000001360 ; void __noreturn abort(void)
.plt:0000000000001360 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001360                                         ; quotearg_buffer_restyled:def_21E1↓p ...
.plt:0000000000001360                 jmp     cs:abort_ptr
.plt:0000000000001360 _abort          endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    1
.plt:000000000000136B                 jmp     sub_1340
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int *__errno_location(void)
.plt:0000000000001370 ___errno_location proc near             ; CODE XREF: main+1DA↓p
.plt:0000000000001370                                         ; close_stdout+16↓p ...
.plt:0000000000001370                 jmp     cs:__errno_location_ptr
.plt:0000000000001370 ___errno_location endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    2
.plt:000000000000137B                 jmp     sub_1340
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001380 _strncmp        proc near               ; CODE XREF: usage+21D↓p
.plt:0000000000001380                                         ; usage+30B↓p
.plt:0000000000001380                 jmp     cs:strncmp_ptr
.plt:0000000000001380 _strncmp        endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    3
.plt:000000000000138B                 jmp     sub_1340
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: noreturn thunk
.plt:0000000000001390
.plt:0000000000001390 ; void __noreturn _exit(int status)
.plt:0000000000001390 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001390                 jmp     cs:_exit_ptr
.plt:0000000000001390 __exit          endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    4
.plt:000000000000139B                 jmp     sub_1340
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; size_t __fpending(FILE *fp)
.plt:00000000000013A0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000013A0                 jmp     cs:__fpending_ptr
.plt:00000000000013A0 ___fpending     endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    5
.plt:00000000000013AB                 jmp     sub_1340
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; char *textdomain(const char *domainname)
.plt:00000000000013B0 _textdomain     proc near               ; CODE XREF: main+59↓p
.plt:00000000000013B0                 jmp     cs:textdomain_ptr
.plt:00000000000013B0 _textdomain     endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    6
.plt:00000000000013BB                 jmp     sub_1340
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; int fclose(FILE *stream)
.plt:00000000000013C0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013C0                                         ; rpl_fclose+6B↓j
.plt:00000000000013C0                 jmp     cs:fclose_ptr
.plt:00000000000013C0 _fclose         endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    7
.plt:00000000000013CB                 jmp     sub_1340
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000013D0 _bindtextdomain proc near               ; CODE XREF: main+4D↓p
.plt:00000000000013D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000013D0 _bindtextdomain endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    8
.plt:00000000000013DB                 jmp     sub_1340
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000013E0 _dcgettext      proc near               ; CODE XREF: main+1D2↓p
.plt:00000000000013E0                                         ; main+3E2↓p ...
.plt:00000000000013E0                 jmp     cs:dcgettext_ptr
.plt:00000000000013E0 _dcgettext      endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    9
.plt:00000000000013EB                 jmp     sub_1340
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000013F0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000013F0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000013F0 ___ctype_get_mb_cur_max endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0Ah
.plt:00000000000013FB                 jmp     sub_1340
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; size_t strlen(const char *s)
.plt:0000000000001400 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001400                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001400                 jmp     cs:strlen_ptr
.plt:0000000000001400 _strlen         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    0Bh
.plt:000000000000140B                 jmp     sub_1340
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: noreturn thunk
.plt:0000000000001410
.plt:0000000000001410 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1A02↓p
.plt:0000000000001410                                         ; quotearg_buffer_restyled:loc_3343↓p ...
.plt:0000000000001410                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001410 ___stack_chk_fail endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    0Ch
.plt:000000000000141B                 jmp     sub_1340
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001420 _getopt_long    proc near               ; CODE XREF: main+93↓p
.plt:0000000000001420                                         ; main+207↓p
.plt:0000000000001420                 jmp     cs:getopt_long_ptr
.plt:0000000000001420 _getopt_long    endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    0Dh
.plt:000000000000142B                 jmp     sub_1340
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001430 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001430                 jmp     cs:mbrtowc_ptr
.plt:0000000000001430 _mbrtowc        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    0Eh
.plt:000000000000143B                 jmp     sub_1340
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001440 ___overflow     proc near               ; CODE XREF: main+3AF↓p
.plt:0000000000001440                                         ; print_element+45↓p
.plt:0000000000001440                 jmp     cs:__overflow_ptr
.plt:0000000000001440 ___overflow     endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    0Fh
.plt:000000000000144B                 jmp     sub_1340
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *strrchr(const char *s, int c)
.plt:0000000000001450 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001450                 jmp     cs:strrchr_ptr
.plt:0000000000001450 _strrchr        endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    10h
.plt:000000000000145B                 jmp     sub_1340
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int uname(struct utsname *name)
.plt:0000000000001460 _uname          proc near               ; CODE XREF: main+1B6↓p
.plt:0000000000001460                                         ; main+312↓p ...
.plt:0000000000001460                 jmp     cs:uname_ptr
.plt:0000000000001460 _uname          endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    11h
.plt:000000000000146B                 jmp     sub_1340
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001470 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001470                                         ; rpl_fseeko+3B↓p
.plt:0000000000001470                 jmp     cs:lseek_ptr
.plt:0000000000001470 _lseek          endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    12h
.plt:000000000000147B                 jmp     sub_1340
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001480 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001480                                         ; xzalloc+12↓j
.plt:0000000000001480                 jmp     cs:memset_ptr
.plt:0000000000001480 _memset         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    13h
.plt:000000000000148B                 jmp     sub_1340
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001490 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001490                 jmp     cs:memcmp_ptr
.plt:0000000000001490 _memcmp         endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    14h
.plt:000000000000149B                 jmp     sub_1340
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000014A0 _fputs_unlocked proc near               ; CODE XREF: print_element+3B↓j
.plt:00000000000014A0                                         ; usage+B3↓p ...
.plt:00000000000014A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000014A0 _fputs_unlocked endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    15h
.plt:00000000000014AB                 jmp     sub_1340
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000014B0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000014B0                 jmp     cs:calloc_ptr
.plt:00000000000014B0 _calloc         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    16h
.plt:00000000000014BB                 jmp     sub_1340
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000014C0 _strcmp         proc near               ; CODE XREF: usage+1B7↓p
.plt:00000000000014C0                 jmp     cs:strcmp_ptr
.plt:00000000000014C0 _strcmp         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    17h
.plt:00000000000014CB                 jmp     sub_1340
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000014D0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000014D0                 jmp     cs:memcpy_ptr
.plt:00000000000014D0 _memcpy         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    18h
.plt:00000000000014DB                 jmp     sub_1340
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int fileno(FILE *stream)
.plt:00000000000014E0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000014E0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000014E0                 jmp     cs:fileno_ptr
.plt:00000000000014E0 _fileno         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    19h
.plt:00000000000014EB                 jmp     sub_1340
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; void *malloc(size_t size)
.plt:00000000000014F0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000014F0                 jmp     cs:malloc_ptr
.plt:00000000000014F0 _malloc         endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    1Ah
.plt:00000000000014FB                 jmp     sub_1340
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int fflush(FILE *stream)
.plt:0000000000001500 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001500                                         ; rpl_fflush+3B↓j
.plt:0000000000001500                 jmp     cs:fflush_ptr
.plt:0000000000001500 _fflush         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    1Bh
.plt:000000000000150B                 jmp     sub_1340
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *nl_langinfo(nl_item item)
.plt:0000000000001510 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001510                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001510 _nl_langinfo    endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    1Ch
.plt:000000000000151B                 jmp     sub_1340
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int __freading(FILE *fp)
.plt:0000000000001520 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001520                                         ; rpl_fflush+9↓p
.plt:0000000000001520                 jmp     cs:__freading_ptr
.plt:0000000000001520 ___freading     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    1Dh
.plt:000000000000152B                 jmp     sub_1340
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001530 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001530                 jmp     cs:realloc_ptr
.plt:0000000000001530 _realloc        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    1Eh
.plt:000000000000153B                 jmp     sub_1340
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *setlocale(int category, const char *locale)
.plt:0000000000001540 _setlocale      proc near               ; CODE XREF: main+3A↓p
.plt:0000000000001540                                         ; usage+204↓p ...
.plt:0000000000001540                 jmp     cs:setlocale_ptr
.plt:0000000000001540 _setlocale      endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    1Fh
.plt:000000000000154B                 jmp     sub_1340
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ___printf_chk   proc near               ; CODE XREF: usage+7A↓p
.plt:0000000000001550                                         ; usage+1F8↓p ...
.plt:0000000000001550                 jmp     cs:__printf_chk_ptr
.plt:0000000000001550 ___printf_chk   endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    20h ; ' '
.plt:000000000000155B                 jmp     sub_1340
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001560 _error          proc near               ; CODE XREF: main+1EB↓p
.plt:0000000000001560                                         ; main+3F3↓p ...
.plt:0000000000001560                 jmp     cs:error_ptr
.plt:0000000000001560 _error          endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    21h ; '!'
.plt:000000000000156B                 jmp     sub_1340
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001570 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_481A↓j
.plt:0000000000001570                 jmp     cs:fseeko_ptr
.plt:0000000000001570 _fseeko         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    22h ; '"'
.plt:000000000000157B                 jmp     sub_1340
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001580 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001580                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001580 ___cxa_atexit   endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    23h ; '#'
.plt:000000000000158B                 jmp     sub_1340
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: noreturn thunk
.plt:0000000000001590
.plt:0000000000001590 ; void __noreturn exit(int status)
.plt:0000000000001590 _exit           proc near               ; CODE XREF: main+15E↓p
.plt:0000000000001590                                         ; main+26B↓p ...
.plt:0000000000001590                 jmp     cs:exit_ptr
.plt:0000000000001590 _exit           endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    24h ; '$'
.plt:000000000000159B                 jmp     sub_1340
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000015A0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000015A0                 jmp     cs:fwrite_ptr
.plt:00000000000015A0 _fwrite         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    25h ; '%'
.plt:00000000000015AB                 jmp     sub_1340
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ___fprintf_chk  proc near               ; CODE XREF: usage+52↓p
.plt:00000000000015B0                                         ; version_etc_arn+37↓p ...
.plt:00000000000015B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000015B0 ___fprintf_chk  endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    26h ; '&'
.plt:00000000000015BB                 jmp     sub_1340
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000015C0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000015C0                 jmp     cs:mbsinit_ptr
.plt:00000000000015C0 _mbsinit        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    27h ; '''
.plt:00000000000015CB                 jmp     sub_1340
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int iswprint(wint_t wc)
.plt:00000000000015D0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000015D0                 jmp     cs:iswprint_ptr
.plt:00000000000015D0 _iswprint       endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    28h ; '('
.plt:00000000000015DB                 jmp     sub_1340
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000015E0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000015E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000015E0 ___ctype_b_loc  endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    29h ; ')'
.plt:00000000000015EB                 jmp     sub_1340
.plt:00000000000015EB ; } // starts at 1340
.plt:00000000000015EB _plt            ends
.plt:00000000000015EB
.plt.got:00000000000015F0 ; ===========================================================================
.plt.got:00000000000015F0
.plt.got:00000000000015F0 ; Segment type: Pure code
.plt.got:00000000000015F0 ; Segment permissions: Read/Execute
.plt.got:00000000000015F0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000015F0                 assume cs:_plt_got
.plt.got:00000000000015F0                 ;org 15F0h
.plt.got:00000000000015F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000015F0
.plt.got:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000015F0
.plt.got:00000000000015F0 ; Attributes: thunk
.plt.got:00000000000015F0
.plt.got:00000000000015F0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000015F0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000015F0 ; __unwind {
.plt.got:00000000000015F0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000015F0 __cxa_finalize  endp
.plt.got:00000000000015F0
.plt.got:00000000000015F0 ; ---------------------------------------------------------------------------
.plt.got:00000000000015F6                 align 8
.plt.got:00000000000015F6 ; } // starts at 15F0
.plt.got:00000000000015F6 _plt_got        ends
.plt.got:00000000000015F6
LOAD:00000000000015F8 ; ===========================================================================
LOAD:00000000000015F8
LOAD:00000000000015F8 ; Segment type: Pure code
LOAD:00000000000015F8 ; Segment permissions: Read/Execute
LOAD:00000000000015F8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000015F8                 assume cs:LOAD
LOAD:00000000000015F8                 ;org 15F8h
LOAD:00000000000015F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000015F8                 align 20h
LOAD:00000000000015F8 LOAD            ends
LOAD:00000000000015F8
.text:0000000000001600 ; ===========================================================================
.text:0000000000001600
.text:0000000000001600 ; Segment type: Pure code
.text:0000000000001600 ; Segment permissions: Read/Execute
.text:0000000000001600 _text           segment para public 'CODE' use64
.text:0000000000001600                 assume cs:_text
.text:0000000000001600                 ;org 1600h
.text:0000000000001600                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001600
.text:0000000000001600 ; =============== S U B R O U T I N E =======================================
.text:0000000000001600
.text:0000000000001600
.text:0000000000001600 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001600                 public main
.text:0000000000001600 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001600
.text:0000000000001600 var_30          = qword ptr -30h
.text:0000000000001600
.text:0000000000001600 ; __unwind {
.text:0000000000001600                 push    r13
.text:0000000000001602                 push    r12
.text:0000000000001604                 mov     r12d, edi
.text:0000000000001607                 push    rbp
.text:0000000000001608                 push    rbx
.text:0000000000001609                 mov     rbp, rsi
.text:000000000000160C                 sub     rsp, 198h
.text:0000000000001613                 mov     rdi, [rsi]
.text:0000000000001616                 mov     rax, fs:28h
.text:000000000000161F                 mov     [rsp+1B8h+var_30], rax
.text:0000000000001627                 xor     eax, eax
.text:0000000000001629                 call    set_program_name
.text:000000000000162E                 lea     rsi, aPrintMachineAr+1Dh ; locale
.text:0000000000001635                 mov     edi, 6          ; category
.text:000000000000163A                 call    _setlocale
.text:000000000000163F                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001646                 lea     rdi, domainname ; "coreutils"
.text:000000000000164D                 call    _bindtextdomain
.text:0000000000001652                 lea     rdi, domainname ; "coreutils"
.text:0000000000001659                 call    _textdomain
.text:000000000000165E                 lea     rdi, close_stdout
.text:0000000000001665                 call    atexit
.text:000000000000166A                 cmp     cs:uname_mode, 2
.text:0000000000001671                 jz      loc_17F0
.text:0000000000001677                 lea     r13, uname_long_options
.text:000000000000167E                 xor     ebx, ebx
.text:0000000000001680
.text:0000000000001680 loc_1680:                               ; CODE XREF: main+CC↓j
.text:0000000000001680                                         ; main+F0↓j ...
.text:0000000000001680                 lea     rdx, shortopts  ; "asnrvmpio"
.text:0000000000001687                 xor     r8d, r8d        ; longind
.text:000000000000168A                 mov     rcx, r13        ; longopts
.text:000000000000168D                 mov     rsi, rbp        ; argv
.text:0000000000001690                 mov     edi, r12d       ; argc
.text:0000000000001693                 call    _getopt_long
.text:0000000000001698                 cmp     eax, 0FFFFFFFFh
.text:000000000000169B                 jz      loc_1793
.text:00000000000016A1                 cmp     eax, 6Eh ; 'n'
.text:00000000000016A4                 jz      loc_1763
.text:00000000000016AA                 jle     short loc_16D0
.text:00000000000016AC                 cmp     eax, 72h ; 'r'
.text:00000000000016AF                 jz      loc_1773
.text:00000000000016B5                 jg      short loc_16F8
.text:00000000000016B7                 cmp     eax, 6Fh ; 'o'
.text:00000000000016BA                 jz      loc_176B
.text:00000000000016C0                 cmp     eax, 70h ; 'p'
.text:00000000000016C3                 jnz     loc_19F8
.text:00000000000016C9                 or      ebx, 20h
.text:00000000000016CC                 jmp     short loc_1680
.text:00000000000016CC ; ---------------------------------------------------------------------------
.text:00000000000016CE                 align 10h
.text:00000000000016D0
.text:00000000000016D0 loc_16D0:                               ; CODE XREF: main+AA↑j
.text:00000000000016D0                 cmp     eax, 61h ; 'a'
.text:00000000000016D3                 jz      loc_1783
.text:00000000000016D9                 jle     short loc_1712
.text:00000000000016DB                 cmp     eax, 69h ; 'i'
.text:00000000000016DE                 jz      loc_177B
.text:00000000000016E4                 cmp     eax, 6Dh ; 'm'
.text:00000000000016E7                 jnz     loc_19F8
.text:00000000000016ED                 or      ebx, 10h
.text:00000000000016F0                 jmp     short loc_1680
.text:00000000000016F0 ; ---------------------------------------------------------------------------
.text:00000000000016F2                 align 8
.text:00000000000016F8
.text:00000000000016F8 loc_16F8:                               ; CODE XREF: main+B5↑j
.text:00000000000016F8                 cmp     eax, 73h ; 's'
.text:00000000000016FB                 jz      loc_178B
.text:0000000000001701                 cmp     eax, 76h ; 'v'
.text:0000000000001704                 jnz     loc_19F8
.text:000000000000170A                 or      ebx, 8
.text:000000000000170D                 jmp     loc_1680
.text:0000000000001712 ; ---------------------------------------------------------------------------
.text:0000000000001712
.text:0000000000001712 loc_1712:                               ; CODE XREF: main+D9↑j
.text:0000000000001712                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001717                 jnz     loc_19B9
.text:000000000000171D                 cmp     cs:uname_mode, 1
.text:0000000000001724                 lea     rax, aArch      ; "arch"
.text:000000000000172B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001732                 lea     rsi, s1         ; "uname"
.text:0000000000001739                 mov     rcx, cs:Version
.text:0000000000001740                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001747                 lea     rdx, unk_49DA
.text:000000000000174E                 cmovnz  rsi, rax
.text:0000000000001752                 xor     r9d, r9d
.text:0000000000001755                 xor     eax, eax
.text:0000000000001757                 call    version_etc
.text:000000000000175C                 xor     edi, edi        ; status
.text:000000000000175E                 call    _exit
.text:0000000000001763 ; ---------------------------------------------------------------------------
.text:0000000000001763
.text:0000000000001763 loc_1763:                               ; CODE XREF: main+A4↑j
.text:0000000000001763                 or      ebx, 2
.text:0000000000001766                 jmp     loc_1680
.text:000000000000176B ; ---------------------------------------------------------------------------
.text:000000000000176B
.text:000000000000176B loc_176B:                               ; CODE XREF: main+BA↑j
.text:000000000000176B                 or      bl, 80h
.text:000000000000176E                 jmp     loc_1680
.text:0000000000001773 ; ---------------------------------------------------------------------------
.text:0000000000001773
.text:0000000000001773 loc_1773:                               ; CODE XREF: main+AF↑j
.text:0000000000001773                 or      ebx, 4
.text:0000000000001776                 jmp     loc_1680
.text:000000000000177B ; ---------------------------------------------------------------------------
.text:000000000000177B
.text:000000000000177B loc_177B:                               ; CODE XREF: main+DE↑j
.text:000000000000177B                 or      ebx, 40h
.text:000000000000177E                 jmp     loc_1680
.text:0000000000001783 ; ---------------------------------------------------------------------------
.text:0000000000001783
.text:0000000000001783 loc_1783:                               ; CODE XREF: main+D3↑j
.text:0000000000001783                 or      ebx, 0FFFFFFFFh
.text:0000000000001786                 jmp     loc_1680
.text:000000000000178B ; ---------------------------------------------------------------------------
.text:000000000000178B
.text:000000000000178B loc_178B:                               ; CODE XREF: main+FB↑j
.text:000000000000178B                 or      ebx, 1
.text:000000000000178E                 jmp     loc_1680
.text:0000000000001793 ; ---------------------------------------------------------------------------
.text:0000000000001793
.text:0000000000001793 loc_1793:                               ; CODE XREF: main+9B↑j
.text:0000000000001793                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000179A                 cmp     r12d, eax
.text:000000000000179D                 jnz     loc_19C7
.text:00000000000017A3                 test    ebx, ebx
.text:00000000000017A5                 jnz     loc_1870
.text:00000000000017AB                 mov     rbp, rsp
.text:00000000000017AE                 mov     ebx, 1
.text:00000000000017B3                 mov     rdi, rbp        ; name
.text:00000000000017B6                 call    _uname
.text:00000000000017BB                 add     eax, 1
.text:00000000000017BE                 jnz     loc_198F
.text:00000000000017C4
.text:00000000000017C4 loc_17C4:                               ; CODE XREF: main+31A↓j
.text:00000000000017C4                                         ; main+384↓j
.text:00000000000017C4                 lea     rsi, msgid      ; "cannot get system name"
.text:00000000000017CB                 mov     edx, 5          ; category
.text:00000000000017D0                 xor     edi, edi        ; domainname
.text:00000000000017D2                 call    _dcgettext
.text:00000000000017D7                 mov     rbx, rax
.text:00000000000017DA                 call    ___errno_location
.text:00000000000017DF                 mov     esi, [rax]      ; errnum
.text:00000000000017E1                 mov     rdx, rbx        ; format
.text:00000000000017E4                 mov     edi, 1          ; status
.text:00000000000017E9                 xor     eax, eax
.text:00000000000017EB                 call    _error
.text:00000000000017F0
.text:00000000000017F0 loc_17F0:                               ; CODE XREF: main+71↑j
.text:00000000000017F0                 lea     rcx, arch_long_options ; longopts
.text:00000000000017F7                 lea     rdx, aPrintMachineAr+1Dh ; shortopts
.text:00000000000017FE                 xor     r8d, r8d        ; longind
.text:0000000000001801                 mov     rsi, rbp        ; argv
.text:0000000000001804                 mov     edi, r12d       ; argc
.text:0000000000001807                 call    _getopt_long
.text:000000000000180C                 cmp     eax, 0FFFFFFFFh
.text:000000000000180F                 jz      loc_18FC
.text:0000000000001815                 cmp     eax, 0FFFFFF7Dh
.text:000000000000181A                 jnz     loc_19B9
.text:0000000000001820                 cmp     cs:uname_mode, 1
.text:0000000000001827                 lea     rax, aArch      ; "arch"
.text:000000000000182E                 lea     rsi, s1         ; "uname"
.text:0000000000001835                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000183C                 mov     rcx, cs:Version
.text:0000000000001843                 lea     r9, aKarelZak   ; "Karel Zak"
.text:000000000000184A                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001851                 lea     rdx, unk_49DA
.text:0000000000001858                 cmovnz  rsi, rax
.text:000000000000185C                 sub     rsp, 8
.text:0000000000001860                 xor     eax, eax
.text:0000000000001862                 push    0
.text:0000000000001864                 call    version_etc
.text:0000000000001869                 xor     edi, edi        ; status
.text:000000000000186B                 call    _exit
.text:0000000000001870 ; ---------------------------------------------------------------------------
.text:0000000000001870
.text:0000000000001870 loc_1870:                               ; CODE XREF: main+1A5↑j
.text:0000000000001870                 test    bl, 1Fh
.text:0000000000001873                 jnz     loc_1976
.text:0000000000001879
.text:0000000000001879 loc_1879:                               ; CODE XREF: main+332↓j
.text:0000000000001879                                         ; main+344↓j
.text:0000000000001879                 cmp     ebx, 0FFFFFFFFh
.text:000000000000187C                 setnz   bpl
.text:0000000000001880                 test    bl, 20h
.text:0000000000001883                 jz      short loc_1896
.text:0000000000001885                 test    bpl, bpl
.text:0000000000001888                 jz      short loc_1896
.text:000000000000188A                 lea     rdi, unknown_7592 ; "unknown"
.text:0000000000001891                 call    print_element
.text:0000000000001896
.text:0000000000001896 loc_1896:                               ; CODE XREF: main+283↑j
.text:0000000000001896                                         ; main+288↑j
.text:0000000000001896                 test    bl, 40h
.text:0000000000001899                 jz      short loc_18AC
.text:000000000000189B                 test    bpl, bpl
.text:000000000000189E                 jz      short loc_18AC
.text:00000000000018A0                 lea     rdi, unknown_7592 ; "unknown"
.text:00000000000018A7                 call    print_element
.text:00000000000018AC
.text:00000000000018AC loc_18AC:                               ; CODE XREF: main+299↑j
.text:00000000000018AC                                         ; main+29E↑j
.text:00000000000018AC                 and     bl, 80h
.text:00000000000018AF                 jnz     loc_1949
.text:00000000000018B5
.text:00000000000018B5 loc_18B5:                               ; CODE XREF: main+355↓j
.text:00000000000018B5                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000018BC                 mov     rax, [rdi+28h]
.text:00000000000018C0                 cmp     rax, [rdi+30h]
.text:00000000000018C4                 jnb     loc_19AA
.text:00000000000018CA                 lea     rdx, [rax+1]
.text:00000000000018CE                 mov     [rdi+28h], rdx
.text:00000000000018D2                 mov     byte ptr [rax], 0Ah
.text:00000000000018D5
.text:00000000000018D5 loc_18D5:                               ; CODE XREF: main+3B4↓j
.text:00000000000018D5                 xor     eax, eax
.text:00000000000018D7                 mov     rcx, [rsp+1B8h+var_30]
.text:00000000000018DF                 xor     rcx, fs:28h
.text:00000000000018E8                 jnz     loc_1A02
.text:00000000000018EE                 add     rsp, 198h
.text:00000000000018F5                 pop     rbx
.text:00000000000018F6                 pop     rbp
.text:00000000000018F7                 pop     r12
.text:00000000000018F9                 pop     r13
.text:00000000000018FB                 retn
.text:00000000000018FC ; ---------------------------------------------------------------------------
.text:00000000000018FC
.text:00000000000018FC loc_18FC:                               ; CODE XREF: main+20F↑j
.text:00000000000018FC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001903                 cmp     r12d, eax
.text:0000000000001906                 jnz     loc_19C7
.text:000000000000190C                 mov     rbp, rsp
.text:000000000000190F                 mov     rdi, rbp        ; name
.text:0000000000001912                 call    _uname
.text:0000000000001917                 add     eax, 1
.text:000000000000191A                 jz      loc_17C4
.text:0000000000001920                 mov     ebx, 10h
.text:0000000000001925
.text:0000000000001925 loc_1925:                               ; CODE XREF: main+39A↓j
.text:0000000000001925                                         ; main+3A5↓j
.text:0000000000001925                 test    bl, 4
.text:0000000000001928                 jnz     short loc_1968
.text:000000000000192A
.text:000000000000192A loc_192A:                               ; CODE XREF: main+374↓j
.text:000000000000192A                 test    bl, 8
.text:000000000000192D                 jnz     short loc_195A
.text:000000000000192F
.text:000000000000192F loc_192F:                               ; CODE XREF: main+366↓j
.text:000000000000192F                 test    bl, 10h
.text:0000000000001932                 jz      loc_1879
.text:0000000000001938                 lea     rdi, [rbp+104h] ; s
.text:000000000000193F                 call    print_element
.text:0000000000001944                 jmp     loc_1879
.text:0000000000001949 ; ---------------------------------------------------------------------------
.text:0000000000001949
.text:0000000000001949 loc_1949:                               ; CODE XREF: main+2AF↑j
.text:0000000000001949                 lea     rdi, s          ; "GNU/Linux"
.text:0000000000001950                 call    print_element
.text:0000000000001955                 jmp     loc_18B5
.text:000000000000195A ; ---------------------------------------------------------------------------
.text:000000000000195A
.text:000000000000195A loc_195A:                               ; CODE XREF: main+32D↑j
.text:000000000000195A                 lea     rdi, [rbp+0C3h] ; s
.text:0000000000001961                 call    print_element
.text:0000000000001966                 jmp     short loc_192F
.text:0000000000001968 ; ---------------------------------------------------------------------------
.text:0000000000001968
.text:0000000000001968 loc_1968:                               ; CODE XREF: main+328↑j
.text:0000000000001968                 lea     rdi, [rbp+82h]  ; s
.text:000000000000196F                 call    print_element
.text:0000000000001974                 jmp     short loc_192A
.text:0000000000001976 ; ---------------------------------------------------------------------------
.text:0000000000001976
.text:0000000000001976 loc_1976:                               ; CODE XREF: main+273↑j
.text:0000000000001976                 mov     rbp, rsp
.text:0000000000001979                 mov     rdi, rbp        ; name
.text:000000000000197C                 call    _uname
.text:0000000000001981                 add     eax, 1
.text:0000000000001984                 jz      loc_17C4
.text:000000000000198A                 test    bl, 1
.text:000000000000198D                 jz      short loc_1997
.text:000000000000198F
.text:000000000000198F loc_198F:                               ; CODE XREF: main+1BE↑j
.text:000000000000198F                 mov     rdi, rbp        ; s
.text:0000000000001992                 call    print_element
.text:0000000000001997
.text:0000000000001997 loc_1997:                               ; CODE XREF: main+38D↑j
.text:0000000000001997                 test    bl, 2
.text:000000000000199A                 jz      short loc_1925
.text:000000000000199C                 lea     rdi, [rbp+41h]  ; s
.text:00000000000019A0                 call    print_element
.text:00000000000019A5                 jmp     loc_1925
.text:00000000000019AA ; ---------------------------------------------------------------------------
.text:00000000000019AA
.text:00000000000019AA loc_19AA:                               ; CODE XREF: main+2C4↑j
.text:00000000000019AA                 mov     esi, 0Ah        ; int
.text:00000000000019AF                 call    ___overflow
.text:00000000000019B4                 jmp     loc_18D5
.text:00000000000019B9 ; ---------------------------------------------------------------------------
.text:00000000000019B9
.text:00000000000019B9 loc_19B9:                               ; CODE XREF: main+117↑j
.text:00000000000019B9                                         ; main+21A↑j
.text:00000000000019B9                 cmp     eax, 0FFFFFF7Eh
.text:00000000000019BE                 jnz     short loc_19F8
.text:00000000000019C0                 xor     edi, edi        ; status
.text:00000000000019C2                 call    usage
.text:00000000000019C7 ; ---------------------------------------------------------------------------
.text:00000000000019C7
.text:00000000000019C7 loc_19C7:                               ; CODE XREF: main+19D↑j
.text:00000000000019C7                                         ; main+306↑j
.text:00000000000019C7                 mov     rdi, [rbp+rax*8+0]
.text:00000000000019CC                 call    quote
.text:00000000000019D1                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000019D8                 mov     rbx, rax
.text:00000000000019DB                 mov     edx, 5          ; category
.text:00000000000019E0                 xor     edi, edi        ; domainname
.text:00000000000019E2                 call    _dcgettext
.text:00000000000019E7                 mov     rcx, rbx
.text:00000000000019EA                 mov     rdx, rax        ; format
.text:00000000000019ED                 xor     esi, esi        ; errnum
.text:00000000000019EF                 xor     edi, edi        ; status
.text:00000000000019F1                 xor     eax, eax
.text:00000000000019F3                 call    _error
.text:00000000000019F8
.text:00000000000019F8 loc_19F8:                               ; CODE XREF: main+C3↑j
.text:00000000000019F8                                         ; main+E7↑j ...
.text:00000000000019F8                 mov     edi, 1          ; status
.text:00000000000019FD                 call    usage
.text:0000000000001A02 ; ---------------------------------------------------------------------------
.text:0000000000001A02
.text:0000000000001A02 loc_1A02:                               ; CODE XREF: main+2E8↑j
.text:0000000000001A02                 call    ___stack_chk_fail
.text:0000000000001A02 ; } // starts at 1600
.text:0000000000001A02 main            endp
.text:0000000000001A02
.text:0000000000001A02 ; ---------------------------------------------------------------------------
.text:0000000000001A07                 align 10h
.text:0000000000001A10
.text:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A10
.text:0000000000001A10 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001A10
.text:0000000000001A10 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001A10                 public start
.text:0000000000001A10 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001A10 ; __unwind {
.text:0000000000001A10                 xor     ebp, ebp
.text:0000000000001A12                 mov     r9, rdx         ; rtld_fini
.text:0000000000001A15                 pop     rsi             ; argc
.text:0000000000001A16                 mov     rdx, rsp        ; ubp_av
.text:0000000000001A19                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001A1D                 push    rax
.text:0000000000001A1E                 push    rsp             ; stack_end
.text:0000000000001A1F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001A26                 lea     rcx, __libc_csu_init ; init
.text:0000000000001A2D                 lea     rdi, main       ; main
.text:0000000000001A34                 call    cs:__libc_start_main_ptr
.text:0000000000001A3A                 hlt
.text:0000000000001A3A ; } // starts at 1A10
.text:0000000000001A3A start           endp
.text:0000000000001A3A
.text:0000000000001A3A ; ---------------------------------------------------------------------------
.text:0000000000001A3B                 align 20h
.text:0000000000001A40
.text:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A40
.text:0000000000001A40 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A40
.text:0000000000001A40 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1AF3↓p
.text:0000000000001A40                 lea     rdi, __bss_start
.text:0000000000001A47                 push    rbp
.text:0000000000001A48                 lea     rax, __bss_start
.text:0000000000001A4F                 cmp     rax, rdi
.text:0000000000001A52                 mov     rbp, rsp
.text:0000000000001A55                 jz      short loc_1A70
.text:0000000000001A57                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001A5E                 test    rax, rax
.text:0000000000001A61                 jz      short loc_1A70
.text:0000000000001A63                 pop     rbp
.text:0000000000001A64                 jmp     rax
.text:0000000000001A64 ; ---------------------------------------------------------------------------
.text:0000000000001A66                 align 10h
.text:0000000000001A70
.text:0000000000001A70 loc_1A70:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A70                                         ; deregister_tm_clones+21↑j
.text:0000000000001A70                 pop     rbp
.text:0000000000001A71                 retn
.text:0000000000001A71 deregister_tm_clones endp
.text:0000000000001A71
.text:0000000000001A71 ; ---------------------------------------------------------------------------
.text:0000000000001A72                 align 20h
.text:0000000000001A80
.text:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A80
.text:0000000000001A80 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A80
.text:0000000000001A80 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A80                 lea     rdi, __bss_start
.text:0000000000001A87                 lea     rsi, __bss_start
.text:0000000000001A8E                 push    rbp
.text:0000000000001A8F                 sub     rsi, rdi
.text:0000000000001A92                 mov     rbp, rsp
.text:0000000000001A95                 sar     rsi, 3
.text:0000000000001A99                 mov     rax, rsi
.text:0000000000001A9C                 shr     rax, 3Fh
.text:0000000000001AA0                 add     rsi, rax
.text:0000000000001AA3                 sar     rsi, 1
.text:0000000000001AA6                 jz      short loc_1AC0
.text:0000000000001AA8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001AAF                 test    rax, rax
.text:0000000000001AB2                 jz      short loc_1AC0
.text:0000000000001AB4                 pop     rbp
.text:0000000000001AB5                 jmp     rax
.text:0000000000001AB5 ; ---------------------------------------------------------------------------
.text:0000000000001AB7                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001AC0                                         ; register_tm_clones+32↑j
.text:0000000000001AC0                 pop     rbp
.text:0000000000001AC1                 retn
.text:0000000000001AC1 register_tm_clones endp
.text:0000000000001AC1
.text:0000000000001AC1 ; ---------------------------------------------------------------------------
.text:0000000000001AC2                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AD0
.text:0000000000001AD0 ; Attributes: info_from_lumina
.text:0000000000001AD0
.text:0000000000001AD0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001AD0                 cmp     cs:completed_7697, 0
.text:0000000000001AD7                 jnz     short locret_1B08
.text:0000000000001AD9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001AE1                 push    rbp
.text:0000000000001AE2                 mov     rbp, rsp
.text:0000000000001AE5                 jz      short loc_1AF3
.text:0000000000001AE7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001AEE                 call    __cxa_finalize
.text:0000000000001AF3
.text:0000000000001AF3 loc_1AF3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001AF3                 call    deregister_tm_clones
.text:0000000000001AF8                 mov     cs:completed_7697, 1
.text:0000000000001AFF                 pop     rbp
.text:0000000000001B00                 retn
.text:0000000000001B00 ; ---------------------------------------------------------------------------
.text:0000000000001B01                 align 8
.text:0000000000001B08
.text:0000000000001B08 locret_1B08:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001B08                 rep retn
.text:0000000000001B08 __do_global_dtors_aux endp
.text:0000000000001B08
.text:0000000000001B08 ; ---------------------------------------------------------------------------
.text:0000000000001B0A                 align 10h
.text:0000000000001B10
.text:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B10
.text:0000000000001B10 ; Attributes: bp-based frame
.text:0000000000001B10
.text:0000000000001B10 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001B10                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001B10                 push    rbp
.text:0000000000001B11                 mov     rbp, rsp
.text:0000000000001B14                 pop     rbp
.text:0000000000001B15                 jmp     register_tm_clones
.text:0000000000001B15 frame_dummy     endp
.text:0000000000001B15
.text:0000000000001B15 ; ---------------------------------------------------------------------------
.text:0000000000001B1A                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20
.text:0000000000001B20 ; __int64 __fastcall print_element(char *s)
.text:0000000000001B20 print_element   proc near               ; CODE XREF: main+291↑p
.text:0000000000001B20                                         ; main+2A7↑p ...
.text:0000000000001B20 ; __unwind {
.text:0000000000001B20                 cmp     cs:printed_7559, 0
.text:0000000000001B27                 push    rbx
.text:0000000000001B28                 mov     rbx, rdi
.text:0000000000001B2B                 jz      short loc_1B49
.text:0000000000001B2D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001B34                 mov     rax, [rdi+28h]
.text:0000000000001B38                 cmp     rax, [rdi+30h]
.text:0000000000001B3C                 jnb     short loc_1B60
.text:0000000000001B3E                 lea     rdx, [rax+1]
.text:0000000000001B42                 mov     [rdi+28h], rdx
.text:0000000000001B46                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000001B49
.text:0000000000001B49 loc_1B49:                               ; CODE XREF: print_element+B↑j
.text:0000000000001B49                                         ; print_element+4A↓j
.text:0000000000001B49                 mov     rdi, rbx        ; s
.text:0000000000001B4C                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001B53                 mov     cs:printed_7559, 1
.text:0000000000001B5A                 pop     rbx
.text:0000000000001B5B                 jmp     _fputs_unlocked
.text:0000000000001B60 ; ---------------------------------------------------------------------------
.text:0000000000001B60
.text:0000000000001B60 loc_1B60:                               ; CODE XREF: print_element+1C↑j
.text:0000000000001B60                 mov     esi, 20h ; ' '  ; int
.text:0000000000001B65                 call    ___overflow
.text:0000000000001B6A                 jmp     short loc_1B49
.text:0000000000001B6A ; } // starts at 1B20
.text:0000000000001B6A print_element   endp
.text:0000000000001B6A
.text:0000000000001B6A ; ---------------------------------------------------------------------------
.text:0000000000001B6C                 align 10h
.text:0000000000001B70
.text:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B70
.text:0000000000001B70 ; Attributes: noreturn
.text:0000000000001B70
.text:0000000000001B70 ; void __fastcall __noreturn usage(int status)
.text:0000000000001B70                 public usage
.text:0000000000001B70 usage           proc near               ; CODE XREF: main+3C2↑p
.text:0000000000001B70                                         ; main+3FD↑p
.text:0000000000001B70
.text:0000000000001B70 var_A8          = qword ptr -0A8h
.text:0000000000001B70 var_A0          = qword ptr -0A0h
.text:0000000000001B70 var_98          = qword ptr -98h
.text:0000000000001B70 var_90          = qword ptr -90h
.text:0000000000001B70 var_88          = qword ptr -88h
.text:0000000000001B70 var_80          = qword ptr -80h
.text:0000000000001B70 var_78          = qword ptr -78h
.text:0000000000001B70 var_70          = qword ptr -70h
.text:0000000000001B70 var_68          = qword ptr -68h
.text:0000000000001B70 var_60          = qword ptr -60h
.text:0000000000001B70 var_58          = qword ptr -58h
.text:0000000000001B70 var_50          = qword ptr -50h
.text:0000000000001B70 var_48          = qword ptr -48h
.text:0000000000001B70 var_40          = qword ptr -40h
.text:0000000000001B70 var_30          = qword ptr -30h
.text:0000000000001B70
.text:0000000000001B70 ; __unwind {
.text:0000000000001B70                 push    r13
.text:0000000000001B72                 push    r12
.text:0000000000001B74                 mov     edx, 5          ; category
.text:0000000000001B79                 push    rbp
.text:0000000000001B7A                 push    rbx
.text:0000000000001B7B                 mov     r12d, edi
.text:0000000000001B7E                 sub     rsp, 88h
.text:0000000000001B85                 mov     rbx, cs:program_name
.text:0000000000001B8C                 mov     rax, fs:28h
.text:0000000000001B95                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001B9A                 xor     eax, eax
.text:0000000000001B9C                 test    edi, edi
.text:0000000000001B9E                 jz      short loc_1BCF
.text:0000000000001BA0                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001BA7                 xor     edi, edi        ; domainname
.text:0000000000001BA9                 call    _dcgettext
.text:0000000000001BAE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001BB5                 mov     rdx, rax
.text:0000000000001BB8                 mov     rcx, rbx
.text:0000000000001BBB                 mov     esi, 1
.text:0000000000001BC0                 xor     eax, eax
.text:0000000000001BC2                 call    ___fprintf_chk
.text:0000000000001BC7
.text:0000000000001BC7 loc_1BC7:                               ; CODE XREF: usage+293↓j
.text:0000000000001BC7                 mov     edi, r12d       ; status
.text:0000000000001BCA                 call    _exit
.text:0000000000001BCF ; ---------------------------------------------------------------------------
.text:0000000000001BCF
.text:0000000000001BCF loc_1BCF:                               ; CODE XREF: usage+2E↑j
.text:0000000000001BCF                 lea     rsi, aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:0000000000001BD6                 xor     edi, edi        ; domainname
.text:0000000000001BD8                 call    _dcgettext
.text:0000000000001BDD                 mov     rdx, rbx
.text:0000000000001BE0                 mov     rsi, rax
.text:0000000000001BE3                 mov     edi, 1
.text:0000000000001BE8                 xor     eax, eax
.text:0000000000001BEA                 call    ___printf_chk
.text:0000000000001BEF                 cmp     cs:uname_mode, 1
.text:0000000000001BF6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BFD                 mov     edx, 5          ; category
.text:0000000000001C02                 lea     rsi, aPrintMachineAr ; "Print machine architecture.\n\n"
.text:0000000000001C09                 jz      loc_1E08
.text:0000000000001C0F
.text:0000000000001C0F loc_1C0F:                               ; CODE XREF: usage+2C4↓j
.text:0000000000001C0F                 xor     edi, edi        ; domainname
.text:0000000000001C11                 lea     rbp, aArch      ; "arch"
.text:0000000000001C18                 call    _dcgettext
.text:0000000000001C1D                 mov     rsi, rbx        ; stream
.text:0000000000001C20                 mov     rdi, rax        ; s
.text:0000000000001C23                 call    _fputs_unlocked
.text:0000000000001C28                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C2F                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001C36                 mov     edx, 5          ; category
.text:0000000000001C3B                 xor     edi, edi        ; domainname
.text:0000000000001C3D                 call    _dcgettext
.text:0000000000001C42                 mov     rsi, rbx        ; stream
.text:0000000000001C45                 mov     rdi, rax        ; s
.text:0000000000001C48                 call    _fputs_unlocked
.text:0000000000001C4D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C54                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001C5B                 xor     edi, edi        ; domainname
.text:0000000000001C5D                 mov     edx, 5          ; category
.text:0000000000001C62                 call    _dcgettext
.text:0000000000001C67                 mov     rsi, rbx        ; stream
.text:0000000000001C6A                 mov     rdi, rax        ; s
.text:0000000000001C6D                 mov     rbx, rsp
.text:0000000000001C70                 call    _fputs_unlocked
.text:0000000000001C75                 cmp     cs:uname_mode, 1
.text:0000000000001C7C                 lea     rax, s1         ; "uname"
.text:0000000000001C83                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001C8A                 lea     rsi, asc_492F   ; "["
.text:0000000000001C91                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001C9A                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001CA3                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001CA8                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001CAF                 mov     [rsp+0A8h+var_A8], rsi
.text:0000000000001CB3                 cmovz   rbp, rax
.text:0000000000001CB7                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001CBE                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001CC3                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001CCA                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001CCF                 lea     rax, domainname ; "coreutils"
.text:0000000000001CD6                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001CDB                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001CE0                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001CE7                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001CEC                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001CF3                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001CF8                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001CFF                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001D04                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001D09                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001D0E                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001D13                 jmp     short loc_1D24
.text:0000000000001D13 ; ---------------------------------------------------------------------------
.text:0000000000001D15                 align 8
.text:0000000000001D18
.text:0000000000001D18 loc_1D18:                               ; CODE XREF: usage+1BE↓j
.text:0000000000001D18                 add     rbx, 10h
.text:0000000000001D1C                 mov     rsi, [rbx]      ; s2
.text:0000000000001D1F                 test    rsi, rsi
.text:0000000000001D22                 jz      short loc_1D30
.text:0000000000001D24
.text:0000000000001D24 loc_1D24:                               ; CODE XREF: usage+1A3↑j
.text:0000000000001D24                 mov     rdi, rbp        ; s1
.text:0000000000001D27                 call    _strcmp
.text:0000000000001D2C                 test    eax, eax
.text:0000000000001D2E                 jnz     short loc_1D18
.text:0000000000001D30
.text:0000000000001D30 loc_1D30:                               ; CODE XREF: usage+1B2↑j
.text:0000000000001D30                 mov     rbx, [rbx+8]
.text:0000000000001D34                 xor     edi, edi        ; domainname
.text:0000000000001D36                 mov     edx, 5          ; category
.text:0000000000001D3B                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001D42                 test    rbx, rbx
.text:0000000000001D45                 jz      loc_1E39
.text:0000000000001D4B                 call    _dcgettext
.text:0000000000001D50                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D57                 lea     rdx, unk_49DA
.text:0000000000001D5E                 mov     rsi, rax
.text:0000000000001D61                 mov     edi, 1
.text:0000000000001D66                 xor     eax, eax
.text:0000000000001D68                 call    ___printf_chk
.text:0000000000001D6D                 xor     esi, esi        ; locale
.text:0000000000001D6F                 mov     edi, 5          ; category
.text:0000000000001D74                 call    _setlocale
.text:0000000000001D79                 test    rax, rax
.text:0000000000001D7C                 jz      short loc_1D9A
.text:0000000000001D7E                 lea     rsi, s2         ; "en_"
.text:0000000000001D85                 mov     edx, 3          ; n
.text:0000000000001D8A                 mov     rdi, rax        ; s1
.text:0000000000001D8D                 call    _strncmp
.text:0000000000001D92                 test    eax, eax
.text:0000000000001D94                 jnz     loc_1EC2
.text:0000000000001D9A
.text:0000000000001D9A loc_1D9A:                               ; CODE XREF: usage+20C↑j
.text:0000000000001D9A                                         ; usage+377↓j
.text:0000000000001D9A                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001DA1                 xor     edi, edi        ; domainname
.text:0000000000001DA3                 mov     edx, 5          ; category
.text:0000000000001DA8                 call    _dcgettext
.text:0000000000001DAD                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DB4                 mov     rcx, rbp
.text:0000000000001DB7                 mov     rsi, rax
.text:0000000000001DBA                 mov     edi, 1
.text:0000000000001DBF                 xor     eax, eax
.text:0000000000001DC1                 call    ___printf_chk
.text:0000000000001DC6                 cmp     rbp, rbx
.text:0000000000001DC9                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001DD0                 lea     rbp, aPrintMachineAr+1Dh ; ""
.text:0000000000001DD7                 cmovz   rbp, rcx
.text:0000000000001DDB
.text:0000000000001DDB loc_1DDB:                               ; CODE XREF: usage+34A↓j
.text:0000000000001DDB                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001DE2                 xor     edi, edi        ; domainname
.text:0000000000001DE4                 mov     edx, 5          ; category
.text:0000000000001DE9                 call    _dcgettext
.text:0000000000001DEE                 mov     rcx, rbp
.text:0000000000001DF1                 mov     rsi, rax
.text:0000000000001DF4                 mov     rdx, rbx
.text:0000000000001DF7                 mov     edi, 1
.text:0000000000001DFC                 xor     eax, eax
.text:0000000000001DFE                 call    ___printf_chk
.text:0000000000001E03                 jmp     loc_1BC7
.text:0000000000001E08 ; ---------------------------------------------------------------------------
.text:0000000000001E08
.text:0000000000001E08 loc_1E08:                               ; CODE XREF: usage+99↑j
.text:0000000000001E08                 lea     rsi, aPrintCertainSy ; "Print certain system information.  With"...
.text:0000000000001E0F                 xor     edi, edi        ; domainname
.text:0000000000001E11                 call    _dcgettext
.text:0000000000001E16                 mov     rsi, rbx        ; stream
.text:0000000000001E19                 mov     rdi, rax        ; s
.text:0000000000001E1C                 call    _fputs_unlocked
.text:0000000000001E21                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E28                 mov     edx, 5
.text:0000000000001E2D                 lea     rsi, aVKernelVersion ; "  -v, --kernel-version     print the ke"...
.text:0000000000001E34                 jmp     loc_1C0F
.text:0000000000001E39 ; ---------------------------------------------------------------------------
.text:0000000000001E39
.text:0000000000001E39 loc_1E39:                               ; CODE XREF: usage+1D5↑j
.text:0000000000001E39                 call    _dcgettext
.text:0000000000001E3E                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E45                 lea     rdx, unk_49DA
.text:0000000000001E4C                 mov     rsi, rax
.text:0000000000001E4F                 mov     edi, 1
.text:0000000000001E54                 xor     eax, eax
.text:0000000000001E56                 call    ___printf_chk
.text:0000000000001E5B                 xor     esi, esi        ; locale
.text:0000000000001E5D                 mov     edi, 5          ; category
.text:0000000000001E62                 call    _setlocale
.text:0000000000001E67                 test    rax, rax
.text:0000000000001E6A                 jz      short loc_1E84
.text:0000000000001E6C                 lea     rsi, s2         ; "en_"
.text:0000000000001E73                 mov     edx, 3          ; n
.text:0000000000001E78                 mov     rdi, rax        ; s1
.text:0000000000001E7B                 call    _strncmp
.text:0000000000001E80                 test    eax, eax
.text:0000000000001E82                 jnz     short loc_1EBF
.text:0000000000001E84
.text:0000000000001E84 loc_1E84:                               ; CODE XREF: usage+2FA↑j
.text:0000000000001E84                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001E8B                 mov     edx, 5          ; category
.text:0000000000001E90                 xor     edi, edi        ; domainname
.text:0000000000001E92                 mov     rbx, rbp
.text:0000000000001E95                 call    _dcgettext
.text:0000000000001E9A                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001EA1                 mov     rcx, rbp
.text:0000000000001EA4                 mov     rsi, rax
.text:0000000000001EA7                 mov     edi, 1
.text:0000000000001EAC                 xor     eax, eax
.text:0000000000001EAE                 lea     rbp, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001EB5                 call    ___printf_chk
.text:0000000000001EBA                 jmp     loc_1DDB
.text:0000000000001EBF ; ---------------------------------------------------------------------------
.text:0000000000001EBF
.text:0000000000001EBF loc_1EBF:                               ; CODE XREF: usage+312↑j
.text:0000000000001EBF                 mov     rbx, rbp
.text:0000000000001EC2
.text:0000000000001EC2 loc_1EC2:                               ; CODE XREF: usage+224↑j
.text:0000000000001EC2                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EC9                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001ED0                 xor     edi, edi        ; domainname
.text:0000000000001ED2                 mov     edx, 5          ; category
.text:0000000000001ED7                 call    _dcgettext
.text:0000000000001EDC                 mov     rsi, r13        ; stream
.text:0000000000001EDF                 mov     rdi, rax        ; s
.text:0000000000001EE2                 call    _fputs_unlocked
.text:0000000000001EE7                 jmp     loc_1D9A
.text:0000000000001EE7 ; } // starts at 1B70
.text:0000000000001EE7 usage           endp
.text:0000000000001EE7
.text:0000000000001EE7 ; ---------------------------------------------------------------------------
.text:0000000000001EEC                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EF0
.text:0000000000001EF0
.text:0000000000001EF0                 public close_stdout_set_file_name
.text:0000000000001EF0 close_stdout_set_file_name proc near
.text:0000000000001EF0 ; __unwind {
.text:0000000000001EF0                 mov     cs:file_name, rdi
.text:0000000000001EF7                 retn
.text:0000000000001EF7 ; } // starts at 1EF0
.text:0000000000001EF7 close_stdout_set_file_name endp
.text:0000000000001EF7
.text:0000000000001EF7 ; ---------------------------------------------------------------------------
.text:0000000000001EF8                 align 20h
.text:0000000000001F00
.text:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F00
.text:0000000000001F00
.text:0000000000001F00                 public close_stdout_set_ignore_EPIPE
.text:0000000000001F00 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001F00 ; __unwind {
.text:0000000000001F00                 mov     cs:ignore_EPIPE, dil
.text:0000000000001F07                 retn
.text:0000000000001F07 ; } // starts at 1F00
.text:0000000000001F07 close_stdout_set_ignore_EPIPE endp
.text:0000000000001F07
.text:0000000000001F07 ; ---------------------------------------------------------------------------
.text:0000000000001F08                 align 10h
.text:0000000000001F10
.text:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F10
.text:0000000000001F10 ; Attributes: info_from_lumina
.text:0000000000001F10
.text:0000000000001F10 ; void __cdecl close_stdout()
.text:0000000000001F10                 public close_stdout
.text:0000000000001F10 close_stdout    proc near               ; DATA XREF: main+5E↑o
.text:0000000000001F10 ; __unwind {
.text:0000000000001F10                 push    rbp
.text:0000000000001F11                 push    rbx
.text:0000000000001F12                 sub     rsp, 8
.text:0000000000001F16                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001F1D                 call    close_stream
.text:0000000000001F22                 test    eax, eax
.text:0000000000001F24                 jz      short loc_1F3C
.text:0000000000001F26                 call    ___errno_location
.text:0000000000001F2B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001F32                 mov     rbx, rax
.text:0000000000001F35                 jz      short loc_1F53
.text:0000000000001F37                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001F3A                 jnz     short loc_1F53
.text:0000000000001F3C
.text:0000000000001F3C loc_1F3C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001F3C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001F43                 call    close_stream
.text:0000000000001F48                 test    eax, eax
.text:0000000000001F4A                 jnz     short loc_1F92
.text:0000000000001F4C                 add     rsp, 8
.text:0000000000001F50                 pop     rbx
.text:0000000000001F51                 pop     rbp
.text:0000000000001F52                 retn
.text:0000000000001F53 ; ---------------------------------------------------------------------------
.text:0000000000001F53
.text:0000000000001F53 loc_1F53:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001F53                                         ; close_stdout+2A↑j
.text:0000000000001F53                 lea     rsi, aWriteError ; "write error"
.text:0000000000001F5A                 xor     edi, edi        ; domainname
.text:0000000000001F5C                 mov     edx, 5          ; category
.text:0000000000001F61                 call    _dcgettext
.text:0000000000001F66                 mov     rdi, cs:file_name
.text:0000000000001F6D                 mov     rbp, rax
.text:0000000000001F70                 test    rdi, rdi
.text:0000000000001F73                 jz      short loc_1F9D
.text:0000000000001F75                 call    quotearg_colon
.text:0000000000001F7A                 mov     esi, [rbx]      ; errnum
.text:0000000000001F7C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001F83                 mov     rcx, rax
.text:0000000000001F86                 mov     r8, rbp
.text:0000000000001F89                 xor     edi, edi        ; status
.text:0000000000001F8B                 xor     eax, eax
.text:0000000000001F8D                 call    _error
.text:0000000000001F92
.text:0000000000001F92 loc_1F92:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001F92                                         ; close_stdout+A2↓j
.text:0000000000001F92                 mov     edi, cs:exit_failure ; status
.text:0000000000001F98                 call    __exit
.text:0000000000001F9D ; ---------------------------------------------------------------------------
.text:0000000000001F9D
.text:0000000000001F9D loc_1F9D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001F9D                 mov     esi, [rbx]      ; errnum
.text:0000000000001F9F                 lea     rdx, format+4   ; format
.text:0000000000001FA6                 mov     rcx, rax
.text:0000000000001FA9                 xor     edi, edi        ; status
.text:0000000000001FAB                 xor     eax, eax
.text:0000000000001FAD                 call    _error
.text:0000000000001FB2                 jmp     short loc_1F92
.text:0000000000001FB2 ; } // starts at 1F10
.text:0000000000001FB2 close_stdout    endp
.text:0000000000001FB2
.text:0000000000001FB2 ; ---------------------------------------------------------------------------
.text:0000000000001FB4                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FC0
.text:0000000000001FC0
.text:0000000000001FC0                 public set_program_name
.text:0000000000001FC0 set_program_name proc near              ; CODE XREF: main+29↑p
.text:0000000000001FC0 ; __unwind {
.text:0000000000001FC0                 test    rdi, rdi
.text:0000000000001FC3                 push    rbx
.text:0000000000001FC4                 jz      short loc_203D
.text:0000000000001FC6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001FCB                 mov     rbx, rdi
.text:0000000000001FCE                 call    _strrchr
.text:0000000000001FD3                 test    rax, rax
.text:0000000000001FD6                 jz      short loc_202D
.text:0000000000001FD8                 lea     r8, [rax+1]
.text:0000000000001FDC                 mov     rdx, r8
.text:0000000000001FDF                 sub     rdx, rbx
.text:0000000000001FE2                 cmp     rdx, 6
.text:0000000000001FE6                 jle     short loc_202D
.text:0000000000001FE8                 lea     rsi, [rax-6]
.text:0000000000001FEC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001FF3                 mov     ecx, 7
.text:0000000000001FF8                 repe cmpsb
.text:0000000000001FFA                 setnbe  dl
.text:0000000000001FFD                 sbb     dl, 0
.text:0000000000002000                 test    dl, dl
.text:0000000000002002                 jnz     short loc_202D
.text:0000000000002004                 lea     rdi, aLt        ; "lt-"
.text:000000000000200B                 mov     ecx, 3
.text:0000000000002010                 mov     rsi, r8
.text:0000000000002013                 mov     rbx, r8
.text:0000000000002016                 repe cmpsb
.text:0000000000002018                 setnbe  dl
.text:000000000000201B                 sbb     dl, 0
.text:000000000000201E                 test    dl, dl
.text:0000000000002020                 jnz     short loc_202D
.text:0000000000002022                 lea     rbx, [rax+4]
.text:0000000000002026                 mov     cs:__bss_start, rbx
.text:000000000000202D
.text:000000000000202D loc_202D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000202D                                         ; set_program_name+26↑j ...
.text:000000000000202D                 mov     cs:program_name, rbx
.text:0000000000002034                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000203B                 pop     rbx
.text:000000000000203C                 retn
.text:000000000000203D ; ---------------------------------------------------------------------------
.text:000000000000203D
.text:000000000000203D loc_203D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000203D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002044                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000204B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002050                 mov     esi, 1          ; size
.text:0000000000002055                 call    _fwrite
.text:000000000000205A                 call    _abort
.text:000000000000205A ; } // starts at 1FC0
.text:000000000000205A set_program_name endp
.text:000000000000205A
.text:000000000000205A ; ---------------------------------------------------------------------------
.text:000000000000205F                 align 20h
.text:0000000000002060
.text:0000000000002060 ; =============== S U B R O U T I N E =======================================
.text:0000000000002060
.text:0000000000002060 ; Attributes: info_from_lumina
.text:0000000000002060
.text:0000000000002060 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002060 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002060                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002060 ; __unwind {
.text:0000000000002060                 push    rbp
.text:0000000000002061                 push    rbx
.text:0000000000002062                 mov     rbp, rdi
.text:0000000000002065                 mov     ebx, esi
.text:0000000000002067                 sub     rsp, 8
.text:000000000000206B                 call    locale_charset
.text:0000000000002070                 movzx   edx, byte ptr [rax]
.text:0000000000002073                 and     edx, 0FFFFFFDFh
.text:0000000000002076                 cmp     dl, 55h ; 'U'
.text:0000000000002079                 jz      short loc_20F0
.text:000000000000207B                 cmp     dl, 47h ; 'G'
.text:000000000000207E                 jz      short loc_20A0
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002080                                         ; gettext_quote+50↓j ...
.text:0000000000002080                 lea     rax, unk_4F3B
.text:0000000000002087                 lea     rdx, asc_4F3D   ; "'"
.text:000000000000208E                 cmp     ebx, 9
.text:0000000000002091                 cmovnz  rax, rdx
.text:0000000000002095                 add     rsp, 8
.text:0000000000002099                 pop     rbx
.text:000000000000209A                 pop     rbp
.text:000000000000209B                 retn
.text:000000000000209B ; ---------------------------------------------------------------------------
.text:000000000000209C                 align 20h
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000020A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000020A4                 and     edx, 0FFFFFFDFh
.text:00000000000020A7                 cmp     dl, 42h ; 'B'
.text:00000000000020AA                 jnz     short loc_2080
.text:00000000000020AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000020B0                 jnz     short loc_2080
.text:00000000000020B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000020B6                 jnz     short loc_2080
.text:00000000000020B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000020BC                 jnz     short loc_2080
.text:00000000000020BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000020C2                 jnz     short loc_2080
.text:00000000000020C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000020C8                 jnz     short loc_2080
.text:00000000000020CA                 cmp     byte ptr [rax+7], 0
.text:00000000000020CE                 jnz     short loc_2080
.text:00000000000020D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000020D4                 lea     rax, unk_4F34
.text:00000000000020DB                 lea     rdx, unk_4F38
.text:00000000000020E2                 cmovnz  rax, rdx
.text:00000000000020E6                 add     rsp, 8
.text:00000000000020EA                 pop     rbx
.text:00000000000020EB                 pop     rbp
.text:00000000000020EC                 retn
.text:00000000000020EC ; ---------------------------------------------------------------------------
.text:00000000000020ED                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000020F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000020F4                 and     edx, 0FFFFFFDFh
.text:00000000000020F7                 cmp     dl, 54h ; 'T'
.text:00000000000020FA                 jnz     short loc_2080
.text:00000000000020FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002100                 and     edx, 0FFFFFFDFh
.text:0000000000002103                 cmp     dl, 46h ; 'F'
.text:0000000000002106                 jnz     loc_2080
.text:000000000000210C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002110                 jnz     loc_2080
.text:0000000000002116                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000211A                 jnz     loc_2080
.text:0000000000002120                 cmp     byte ptr [rax+5], 0
.text:0000000000002124                 jnz     loc_2080
.text:000000000000212A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000212E                 lea     rax, unk_4F2C
.text:0000000000002135                 lea     rdx, unk_4F30
.text:000000000000213C                 cmovnz  rax, rdx
.text:0000000000002140                 add     rsp, 8
.text:0000000000002144                 pop     rbx
.text:0000000000002145                 pop     rbp
.text:0000000000002146                 retn
.text:0000000000002146 ; } // starts at 2060
.text:0000000000002146 gettext_quote   endp
.text:0000000000002146
.text:0000000000002146 ; ---------------------------------------------------------------------------
.text:0000000000002147                 align 10h
.text:0000000000002150
.text:0000000000002150 ; =============== S U B R O U T I N E =======================================
.text:0000000000002150
.text:0000000000002150 ; Attributes: info_from_lumina
.text:0000000000002150
.text:0000000000002150 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002150 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002150                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002150
.text:0000000000002150 var_E0          = dword ptr -0E0h
.text:0000000000002150 var_DB          = byte ptr -0DBh
.text:0000000000002150 var_DA          = byte ptr -0DAh
.text:0000000000002150 var_D9          = byte ptr -0D9h
.text:0000000000002150 s               = qword ptr -0D8h
.text:0000000000002150 n               = qword ptr -0D0h
.text:0000000000002150 var_C8          = qword ptr -0C8h
.text:0000000000002150 ps              = qword ptr -0C0h
.text:0000000000002150 var_B8          = qword ptr -0B8h
.text:0000000000002150 var_B0          = qword ptr -0B0h
.text:0000000000002150 var_A8          = qword ptr -0A8h
.text:0000000000002150 s2              = qword ptr -0A0h
.text:0000000000002150 var_98          = qword ptr -98h
.text:0000000000002150 var_90          = qword ptr -90h
.text:0000000000002150 var_88          = qword ptr -88h
.text:0000000000002150 var_80          = qword ptr -80h
.text:0000000000002150 var_78          = qword ptr -78h
.text:0000000000002150 var_70          = dword ptr -70h
.text:0000000000002150 var_6C          = byte ptr -6Ch
.text:0000000000002150 var_6B          = byte ptr -6Bh
.text:0000000000002150 var_6A          = byte ptr -6Ah
.text:0000000000002150 var_69          = byte ptr -69h
.text:0000000000002150 var_68          = qword ptr -68h
.text:0000000000002150 var_60          = qword ptr -60h
.text:0000000000002150 wc              = dword ptr -4Ch
.text:0000000000002150 var_48          = qword ptr -48h
.text:0000000000002150 var_40          = qword ptr -40h
.text:0000000000002150 arg_0           = qword ptr  8
.text:0000000000002150 arg_8           = qword ptr  10h
.text:0000000000002150 arg_10          = qword ptr  18h
.text:0000000000002150
.text:0000000000002150 ; __unwind {
.text:0000000000002150                 push    r15
.text:0000000000002152                 push    r14
.text:0000000000002154                 mov     r15d, r8d
.text:0000000000002157                 push    r13
.text:0000000000002159                 push    r12
.text:000000000000215B                 mov     r14, rdi
.text:000000000000215E                 push    rbp
.text:000000000000215F                 push    rbx
.text:0000000000002160                 mov     ebx, r9d
.text:0000000000002163                 mov     r13, rsi
.text:0000000000002166                 mov     rbp, rcx
.text:0000000000002169                 and     ebx, 2
.text:000000000000216C                 sub     rsp, 0B8h
.text:0000000000002173                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000217B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002180                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002185                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000218A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000218F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002197                 mov     [rsp+0E8h+var_80], rax
.text:000000000000219C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000021A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000021A9                 mov     rax, fs:28h
.text:00000000000021B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000021BA                 xor     eax, eax
.text:00000000000021BC                 call    ___ctype_get_mb_cur_max
.text:00000000000021C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000021C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000021CA                 ja      def_21E1        ; jumptable 00000000000121F1 default case
.text:00000000000021D0                 lea     rcx, jpt_21E1
.text:00000000000021D7                 mov     edx, r15d
.text:00000000000021DA                 movsxd  rax, ds:(jpt_21E1 - 4FA0h)[rcx+rdx*4]
.text:00000000000021DE                 add     rax, rcx
.text:00000000000021E1                 jmp     rax             ; switch jump
.text:00000000000021E3 ; ---------------------------------------------------------------------------
.text:00000000000021E3
.text:00000000000021E3 loc_21E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000021E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000021E3                                         ; DATA XREF: ...
.text:00000000000021E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000021E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000021ED                 xor     r12d, r12d
.text:00000000000021F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000021F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000021FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002203
.text:0000000000002203 loc_2203:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002203                 lea     rax, asc_4F3D   ; "'"
.text:000000000000220A                 mov     [rsp+0E8h+n], 1
.text:0000000000002213                 xor     r15d, r15d
.text:0000000000002216                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000221E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002223
.text:0000000000002223 loc_2223:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002223                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002223                 xor     r11d, r11d
.text:0000000000002226                 mov     rax, rbp
.text:0000000000002229                 mov     r8d, r12d
.text:000000000000222C                 mov     rbp, r11
.text:000000000000222F                 mov     r11, rax
.text:0000000000002232                 nop     word ptr [rax+rax+00h]
.text:0000000000002238
.text:0000000000002238 loc_2238:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002238                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002238                 cmp     r11, rbp
.text:000000000000223B                 setnz   r12b
.text:000000000000223F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002243                 jnz     short loc_2252
.text:0000000000002245                 mov     rax, [rsp+0E8h+s]
.text:000000000000224A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000224E                 setnz   r12b
.text:0000000000002252
.text:0000000000002252 loc_2252:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002252                 test    r12b, r12b
.text:0000000000002255                 jz      loc_28B0
.text:000000000000225B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002260                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002265                 lea     r9, [rdi+rbp]
.text:0000000000002269                 setnz   al
.text:000000000000226C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002270                 mov     r10d, eax
.text:0000000000002273                 jz      loc_2320
.text:0000000000002279                 mov     rax, [rsp+0E8h+n]
.text:000000000000227E                 test    rax, rax
.text:0000000000002281                 jz      loc_26B0
.text:0000000000002287                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000228B                 lea     rbx, [rbp+rax+0]
.text:0000000000002290                 jnz     short loc_22C0
.text:0000000000002292                 cmp     rax, 1
.text:0000000000002296                 jbe     short loc_22C0
.text:0000000000002298                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000229D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000022A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000022A7                 call    _strlen
.text:00000000000022AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000022B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000022B8                 mov     r11, rax
.text:00000000000022BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000022C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000022C0                 cmp     rbx, r11
.text:00000000000022C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000022C8                 ja      loc_2880
.text:00000000000022CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000022D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000022D8                 mov     rdi, r9         ; s1
.text:00000000000022DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000022E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000022E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000022EA                 call    _memcmp
.text:00000000000022EF                 test    eax, eax
.text:00000000000022F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000022F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000022FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002301                 jnz     loc_2880
.text:0000000000002307                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000230C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002312                 jnz     loc_3295
.text:0000000000002318                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002320                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002320                 movzx   ebx, byte ptr [r9]
.text:0000000000002324                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002327                 ja      def_233E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000232D                 lea     rcx, jpt_233E
.text:0000000000002334                 movzx   edx, bl
.text:0000000000002337                 movsxd  rax, ds:(jpt_233E - 4FCCh)[rcx+rdx*4]
.text:000000000000233B                 add     rax, rcx
.text:000000000000233E                 jmp     rax             ; switch jump
.text:0000000000002340 ; ---------------------------------------------------------------------------
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002340                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002343
.text:0000000000002343 loc_2343:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002343                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002343                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002347                 setnz   al
.text:000000000000234A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000234E                 jnz     short loc_235C
.text:0000000000002350                 mov     rax, [rsp+0E8h+s]
.text:0000000000002355                 cmp     byte ptr [rax+1], 0
.text:0000000000002359                 setnz   al
.text:000000000000235C
.text:000000000000235C loc_235C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000235C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002361                 setz    dl
.text:0000000000002364                 test    al, al
.text:0000000000002366                 jz      loc_25B8
.text:000000000000236C
.text:000000000000236C loc_236C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000236C                 xor     r12d, r12d
.text:000000000000236F                 xor     eax, eax
.text:0000000000002371                 nop     dword ptr [rax+00000000h]
.text:0000000000002378
.text:0000000000002378 loc_2378:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002378                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002378                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000237D                 jnz     loc_2492
.text:0000000000002383                 test    dl, dl
.text:0000000000002385                 jnz     loc_2492
.text:000000000000238B
.text:000000000000238B loc_238B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000238B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002390                 test    rsi, rsi
.text:0000000000002393                 jz      short loc_23A9
.text:0000000000002395                 mov     edx, ebx
.text:0000000000002397                 shr     dl, 5
.text:000000000000239A                 movzx   edx, dl
.text:000000000000239D                 mov     edx, [rsi+rdx*4]
.text:00000000000023A0                 bt      edx, ebx
.text:00000000000023A3                 jb      loc_24F3
.text:00000000000023A9
.text:00000000000023A9 loc_23A9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000023A9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000023A9                 test    r10b, r10b
.text:00000000000023AC                 jnz     loc_24F3
.text:00000000000023B2                 xor     eax, 1
.text:00000000000023B5                 add     rbp, 1
.text:00000000000023B9                 and     eax, r8d
.text:00000000000023BC
.text:00000000000023BC loc_23BC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000023BC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000023BC                 test    al, al
.text:00000000000023BE                 jz      short loc_23E0
.text:00000000000023C0                 cmp     r13, r15
.text:00000000000023C3                 jbe     short loc_23CA
.text:00000000000023C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000023CA
.text:00000000000023CA loc_23CA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000023CA                 lea     rax, [r15+1]
.text:00000000000023CE                 cmp     r13, rax
.text:00000000000023D1                 jbe     short loc_23D9
.text:00000000000023D3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000023D9
.text:00000000000023D9 loc_23D9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000023D9                 add     r15, 2
.text:00000000000023DD                 xor     r8d, r8d
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000023E0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000023E0                 cmp     r15, r13
.text:00000000000023E3                 jnb     short loc_23E9
.text:00000000000023E5                 mov     [r14+r15], bl
.text:00000000000023E9
.text:00000000000023E9 loc_23E9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000023E9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000023EE                 add     r15, 1
.text:00000000000023F2                 mov     eax, 0
.text:00000000000023F7                 test    r12b, r12b
.text:00000000000023FA                 cmovz   edi, eax
.text:00000000000023FD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002402                 jmp     loc_2238
.text:0000000000002402 ; ---------------------------------------------------------------------------
.text:0000000000002407                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002410                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002410                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002413
.text:0000000000002413 loc_2413:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002413                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002413                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002417                 cmp     eax, 2
.text:000000000000241A                 jz      loc_29D8
.text:0000000000002420                 cmp     eax, 5
.text:0000000000002423                 jz      loc_2998
.text:0000000000002429                 cmp     eax, 2
.text:000000000000242C                 mov     ebx, 3Fh ; '?'
.text:0000000000002431                 setz    dl
.text:0000000000002434                 xor     r12d, r12d
.text:0000000000002437                 xor     eax, eax
.text:0000000000002439                 jmp     loc_2378
.text:0000000000002439 ; ---------------------------------------------------------------------------
.text:000000000000243E                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002440                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002440                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002443
.text:0000000000002443 loc_2443:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002443                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002443                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002448                 jz      loc_2950
.text:000000000000244E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002453                 xor     edx, edx
.text:0000000000002455                 xor     eax, eax
.text:0000000000002457                 mov     ebx, 27h ; '''
.text:000000000000245C                 jmp     loc_2378
.text:000000000000245C ; ---------------------------------------------------------------------------
.text:0000000000002461                 align 8
.text:0000000000002468
.text:0000000000002468 loc_2468:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002468                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002468                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000246D                 mov     ebx, 74h ; 't'
.text:0000000000002472
.text:0000000000002472 loc_2472:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002472                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002472                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002477                 setz    al
.text:000000000000247A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000247E                 jnz     loc_25CE
.text:0000000000002484
.text:0000000000002484 loc_2484:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002484                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002484                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002489                 jnz     short loc_24F0
.text:000000000000248B
.text:000000000000248B loc_248B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000248B                 mov     ebx, edx
.text:000000000000248D                 xor     r12d, r12d
.text:0000000000002490                 xor     eax, eax
.text:0000000000002492
.text:0000000000002492 loc_2492:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002492                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002492                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002497                 jnz     loc_238B
.text:000000000000249D                 jmp     loc_23A9
.text:000000000000249D ; ---------------------------------------------------------------------------
.text:00000000000024A2                 align 8
.text:00000000000024A8
.text:00000000000024A8 loc_24A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024A8                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:00000000000024A8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000024AD                 mov     ebx, 62h ; 'b'
.text:00000000000024B2                 jmp     short loc_2484
.text:00000000000024B2 ; ---------------------------------------------------------------------------
.text:00000000000024B4                 align 8
.text:00000000000024B8
.text:00000000000024B8 loc_24B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024B8                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:00000000000024B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000024BD                 jz      loc_2890
.text:00000000000024C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000024C8                 jz      loc_26E0
.text:00000000000024CE
.text:00000000000024CE loc_24CE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000024CE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024D3                 jz      loc_26E0
.text:00000000000024D9                 cmp     [rsp+0E8h+n], 0
.text:00000000000024DF                 jnz     loc_289B
.text:00000000000024E5                 mov     ebx, 5Ch ; '\'
.text:00000000000024EA                 nop     word ptr [rax+rax+00h]
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000024F0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000024F0                 xor     r12d, r12d
.text:00000000000024F3
.text:00000000000024F3 loc_24F3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000024F3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000024F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024F8                 setz    dl
.text:00000000000024FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002500                 mov     eax, edx
.text:0000000000002502                 jnz     loc_2D58
.text:0000000000002508                 mov     eax, r8d
.text:000000000000250B                 xor     eax, 1
.text:000000000000250E                 and     al, dl
.text:0000000000002510                 jz      short loc_2541
.text:0000000000002512                 cmp     r13, r15
.text:0000000000002515                 jbe     short loc_251C
.text:0000000000002517                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000251C
.text:000000000000251C loc_251C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000251C                 lea     rdx, [r15+1]
.text:0000000000002520                 cmp     r13, rdx
.text:0000000000002523                 jbe     short loc_252B
.text:0000000000002525                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000252B
.text:000000000000252B loc_252B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000252B                 lea     rdx, [r15+2]
.text:000000000000252F                 cmp     r13, rdx
.text:0000000000002532                 jbe     short loc_253A
.text:0000000000002534                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000253A
.text:000000000000253A loc_253A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000253A                 add     r15, 3
.text:000000000000253E                 mov     r8d, eax
.text:0000000000002541
.text:0000000000002541 loc_2541:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002541                 cmp     r13, r15
.text:0000000000002544                 jbe     short loc_254B
.text:0000000000002546                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000254B
.text:000000000000254B loc_254B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000254B                 add     r15, 1
.text:000000000000254F                 add     rbp, 1
.text:0000000000002553                 jmp     loc_23E0
.text:0000000000002553 ; ---------------------------------------------------------------------------
.text:0000000000002558                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002560                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002565                 jnz     loc_2733
.text:000000000000256B                 xor     edx, edx
.text:000000000000256D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002572                 jz      loc_248B
.text:0000000000002578                 add     rbp, 1
.text:000000000000257C                 jmp     loc_2238
.text:000000000000257C ; ---------------------------------------------------------------------------
.text:0000000000002581                 align 8
.text:0000000000002588
.text:0000000000002588 loc_2588:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002588                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002588                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000258D                 setz    dl
.text:0000000000002590                 xor     eax, eax
.text:0000000000002592                 jmp     loc_2378
.text:0000000000002592 ; ---------------------------------------------------------------------------
.text:0000000000002597                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025A0                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:00000000000025A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000025A5                 mov     ebx, 61h ; 'a'
.text:00000000000025AA                 jmp     loc_2484
.text:00000000000025AA ; ---------------------------------------------------------------------------
.text:00000000000025AF                 align 10h
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025B0                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:00000000000025B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000025B5                 setz    dl
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000025B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000025B8                 test    rbp, rbp
.text:00000000000025BB                 jnz     loc_236C
.text:00000000000025C1
.text:00000000000025C1 loc_25C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000025C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000025C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000025C6                 and     al, dl
.text:00000000000025C8                 jz      loc_2378
.text:00000000000025CE
.text:00000000000025CE loc_25CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000025CE                 mov     rbp, r11
.text:00000000000025D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000025D9                 jmp     loc_2CD9
.text:00000000000025D9 ; ---------------------------------------------------------------------------
.text:00000000000025DE                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025E0                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:00000000000025E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000025E5                 setz    dl
.text:00000000000025E8                 xor     r12d, r12d
.text:00000000000025EB                 jmp     short loc_25C1
.text:00000000000025EB ; ---------------------------------------------------------------------------
.text:00000000000025ED                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025F0                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:00000000000025F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000025F5                 mov     ebx, 20h ; ' '
.text:00000000000025FA                 setz    dl
.text:00000000000025FD                 jmp     short loc_25C1
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:00000000000025FF                 align 20h
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002600                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002600                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002605                 mov     ebx, 72h ; 'r'
.text:000000000000260A                 jmp     loc_2472
.text:000000000000260A ; ---------------------------------------------------------------------------
.text:000000000000260F                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002610                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002610                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002615                 mov     ebx, 66h ; 'f'
.text:000000000000261A                 jmp     loc_2484
.text:000000000000261A ; ---------------------------------------------------------------------------
.text:000000000000261F                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002620                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002620                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002625                 mov     ebx, 76h ; 'v'
.text:000000000000262A                 jmp     loc_2484
.text:000000000000262A ; ---------------------------------------------------------------------------
.text:000000000000262F                 align 10h
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002630                                         ; DATA XREF: .rodata:jpt_233E↓o
.text:0000000000002630                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002635                 mov     ebx, 6Eh ; 'n'
.text:000000000000263A                 jmp     loc_2472
.text:000000000000263A ; ---------------------------------------------------------------------------
.text:000000000000263F                 align 20h
.text:0000000000002640
.text:0000000000002640 def_26CA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002640                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002640                                         ; DATA XREF: ...
.text:0000000000002640                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002643                 nop     dword ptr [rax+rax+00h]
.text:0000000000002648
.text:0000000000002648 def_233E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002648                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002648                                         ; DATA XREF: ...
.text:0000000000002648                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000264E                 jnz     loc_29F8
.text:0000000000002654                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002659                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000265E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002663                 call    ___ctype_b_loc
.text:0000000000002668                 mov     rcx, [rax]
.text:000000000000266B                 movzx   edx, bl
.text:000000000000266E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002674                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000267A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000267F                 mov     edi, 1
.text:0000000000002684                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002688                 and     ax, 4000h
.text:000000000000268C                 setnz   r12b
.text:0000000000002690                 setz    al
.text:0000000000002693                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002697
.text:0000000000002697 loc_2697:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002697                 test    al, al
.text:0000000000002699                 jnz     loc_3031
.text:000000000000269F                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026A4                 setz    dl
.text:00000000000026A7                 jmp     loc_2378
.text:00000000000026A7 ; ---------------------------------------------------------------------------
.text:00000000000026AC                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000026B0                 movzx   ebx, byte ptr [r9]
.text:00000000000026B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000026B7                 ja      short def_26CA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000026B9                 lea     rcx, jpt_26CA
.text:00000000000026C0                 movzx   edx, bl
.text:00000000000026C3                 movsxd  rax, ds:(jpt_26CA - 51C8h)[rcx+rdx*4]
.text:00000000000026C7                 add     rax, rcx
.text:00000000000026CA                 jmp     rax             ; switch jump
.text:00000000000026CA ; ---------------------------------------------------------------------------
.text:00000000000026CC                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026D0                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:00000000000026D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000026D3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000026D8                 jnz     loc_24CE
.text:00000000000026DE                 xchg    ax, ax
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000026E0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000026E0                 mov     edx, 5Ch ; '\'
.text:00000000000026E5                 mov     ebx, 5Ch ; '\'
.text:00000000000026EA                 jmp     loc_2484
.text:00000000000026EA ; ---------------------------------------------------------------------------
.text:00000000000026EF                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026F0                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:00000000000026F0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000026F5                 xor     r10d, r10d
.text:00000000000026F8                 mov     ebx, 66h ; 'f'
.text:00000000000026FD                 jmp     loc_2484
.text:00000000000026FD ; ---------------------------------------------------------------------------
.text:0000000000002702                 align 8
.text:0000000000002708
.text:0000000000002708 loc_2708:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002708                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002708                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000270D                 xor     r10d, r10d
.text:0000000000002710                 mov     ebx, 6Eh ; 'n'
.text:0000000000002715                 jmp     loc_2472
.text:0000000000002715 ; ---------------------------------------------------------------------------
.text:000000000000271A                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002720                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002720                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002725                 jmp     loc_24F0
.text:0000000000002725 ; ---------------------------------------------------------------------------
.text:000000000000272A                 align 10h
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002730                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002730                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002733
.text:0000000000002733 loc_2733:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002733                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002738                 setz    dl
.text:000000000000273B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002740                 jnz     loc_32DA
.text:0000000000002746                 mov     eax, r8d
.text:0000000000002749                 mov     rcx, r15
.text:000000000000274C                 xor     eax, 1
.text:000000000000274F                 and     al, dl
.text:0000000000002751                 jz      short loc_2780
.text:0000000000002753                 cmp     r13, r15
.text:0000000000002756                 jbe     short loc_275D
.text:0000000000002758                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000275D
.text:000000000000275D loc_275D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000275D                 lea     rcx, [r15+1]
.text:0000000000002761                 cmp     r13, rcx
.text:0000000000002764                 jbe     short loc_276C
.text:0000000000002766                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000276C
.text:000000000000276C loc_276C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000276C                 lea     rcx, [r15+2]
.text:0000000000002770                 cmp     r13, rcx
.text:0000000000002773                 ja      loc_2DA9
.text:0000000000002779
.text:0000000000002779 loc_2779:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002779                 lea     rcx, [r15+3]
.text:000000000000277D                 mov     r8d, eax
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002780                 cmp     r13, rcx
.text:0000000000002783                 jbe     short loc_278A
.text:0000000000002785                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000278A
.text:000000000000278A loc_278A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000278A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000278F                 lea     r15, [rcx+1]
.text:0000000000002793                 jz      loc_2D99
.text:0000000000002799                 lea     rax, [rbp+1]
.text:000000000000279D                 cmp     rax, r11
.text:00000000000027A0                 jnb     short loc_27BB
.text:00000000000027A2                 mov     rax, [rsp+0E8h+s]
.text:00000000000027A7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000027AC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000027B0                 sub     eax, 30h ; '0'
.text:00000000000027B3                 cmp     al, 9
.text:00000000000027B5                 jbe     loc_2FE9
.text:00000000000027BB
.text:00000000000027BB loc_27BB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000027BB                 mov     eax, r12d
.text:00000000000027BE                 mov     ebx, 30h ; '0'
.text:00000000000027C3                 xor     r12d, r12d
.text:00000000000027C6                 jmp     loc_2378
.text:00000000000027C6 ; ---------------------------------------------------------------------------
.text:00000000000027CB                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027D0                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:00000000000027D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000027D5                 mov     r12d, r10d
.text:00000000000027D8                 setz    dl
.text:00000000000027DB                 xor     r10d, r10d
.text:00000000000027DE                 xor     eax, eax
.text:00000000000027E0                 jmp     loc_2378
.text:00000000000027E0 ; ---------------------------------------------------------------------------
.text:00000000000027E5                 align 8
.text:00000000000027E8
.text:00000000000027E8 loc_27E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027E8                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:00000000000027E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000027ED                 setz    dl
.text:00000000000027F0                 xor     r10d, r10d
.text:00000000000027F3                 jmp     loc_25B8
.text:00000000000027F3 ; ---------------------------------------------------------------------------
.text:00000000000027F8                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002800                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002800                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002805                 setz    dl
.text:0000000000002808                 xor     r10d, r10d
.text:000000000000280B                 xor     r12d, r12d
.text:000000000000280E                 jmp     loc_25C1
.text:000000000000280E ; ---------------------------------------------------------------------------
.text:0000000000002813                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002818                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002818                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000281D                 mov     r12d, r10d
.text:0000000000002820                 mov     ebx, 20h ; ' '
.text:0000000000002825                 setz    dl
.text:0000000000002828                 xor     r10d, r10d
.text:000000000000282B                 jmp     loc_25C1
.text:0000000000002830 ; ---------------------------------------------------------------------------
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002830                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002830                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002835                 xor     r10d, r10d
.text:0000000000002838                 mov     ebx, 72h ; 'r'
.text:000000000000283D                 jmp     loc_2472
.text:000000000000283D ; ---------------------------------------------------------------------------
.text:0000000000002842                 align 8
.text:0000000000002848
.text:0000000000002848 loc_2848:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002848                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002848                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000284D                 jmp     loc_24F0
.text:000000000000284D ; ---------------------------------------------------------------------------
.text:0000000000002852                 align 8
.text:0000000000002858
.text:0000000000002858 loc_2858:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002858                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002858                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000285D                 xor     r10d, r10d
.text:0000000000002860                 mov     ebx, 74h ; 't'
.text:0000000000002865                 jmp     loc_2472
.text:0000000000002865 ; ---------------------------------------------------------------------------
.text:000000000000286A                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002870                                         ; DATA XREF: .rodata:jpt_26CA↓o
.text:0000000000002870                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002875                 jmp     loc_24F0
.text:0000000000002875 ; ---------------------------------------------------------------------------
.text:000000000000287A                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002880                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002880                 xor     r10d, r10d
.text:0000000000002883                 jmp     loc_2320
.text:0000000000002883 ; ---------------------------------------------------------------------------
.text:0000000000002888                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002890                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002895                 jnz     loc_3200
.text:000000000000289B
.text:000000000000289B loc_289B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000289B                 add     rbp, 1
.text:000000000000289F                 mov     eax, r8d
.text:00000000000028A2                 xor     r12d, r12d
.text:00000000000028A5                 mov     ebx, 5Ch ; '\'
.text:00000000000028AA                 jmp     loc_23BC
.text:00000000000028AA ; ---------------------------------------------------------------------------
.text:00000000000028AF                 align 10h
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000028B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028B5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000028BA                 mov     r12d, r8d
.text:00000000000028BD                 mov     rbp, r11
.text:00000000000028C0                 setz    dl
.text:00000000000028C3                 mov     eax, ebx
.text:00000000000028C5                 test    r15, r15
.text:00000000000028C8                 setz    cl
.text:00000000000028CB                 and     eax, edx
.text:00000000000028CD                 and     al, cl
.text:00000000000028CF                 jnz     loc_3336
.text:00000000000028D5                 mov     eax, ebx
.text:00000000000028D7                 xor     eax, 1
.text:00000000000028DA                 and     dl, al
.text:00000000000028DC                 jz      loc_324C
.text:00000000000028E2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000028E7                 jz      loc_324A
.text:00000000000028ED                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000028F2                 jnz     loc_32ED
.text:00000000000028F8                 test    r13, r13
.text:00000000000028FB                 setz    al
.text:00000000000028FE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002904                 setnz   dl
.text:0000000000002907                 and     al, dl
.text:0000000000002909                 jz      loc_332C
.text:000000000000290F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002914
.text:0000000000002914 loc_2914:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002914                 lea     rbx, asc_4F3D   ; "'"
.text:000000000000291B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000291F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002927                 mov     r15d, 1
.text:000000000000292D                 mov     [rsp+0E8h+n], 1
.text:0000000000002936                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000293B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002940                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002944                 jmp     loc_2223
.text:0000000000002944 ; ---------------------------------------------------------------------------
.text:0000000000002949                 align 10h
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002950                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002955                 jnz     loc_3200
.text:000000000000295B                 test    r13, r13
.text:000000000000295E                 jz      loc_2D60
.text:0000000000002964                 xor     edx, edx
.text:0000000000002966                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000296C                 jnz     loc_2D60
.text:0000000000002972
.text:0000000000002972 loc_2972:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002972                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002972                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002977                 add     r15, 3
.text:000000000000297B                 xor     eax, eax
.text:000000000000297D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002982                 xor     r8d, r8d
.text:0000000000002985                 mov     r13, rdx
.text:0000000000002988                 mov     ebx, 27h ; '''
.text:000000000000298D                 jmp     loc_23A9
.text:000000000000298D ; ---------------------------------------------------------------------------
.text:0000000000002992                 align 8
.text:0000000000002998
.text:0000000000002998 loc_2998:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002998                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000299D                 jz      short loc_29C0
.text:000000000000299F                 lea     rcx, [rbp+2]
.text:00000000000029A3                 cmp     rcx, r11
.text:00000000000029A6                 jnb     short loc_29C0
.text:00000000000029A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000029AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000029B2                 jz      loc_3142
.text:00000000000029B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000029C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000029C0                 xor     edx, edx
.text:00000000000029C2                 xor     r12d, r12d
.text:00000000000029C5                 xor     eax, eax
.text:00000000000029C7                 mov     ebx, 3Fh ; '?'
.text:00000000000029CC                 jmp     loc_2378
.text:00000000000029CC ; ---------------------------------------------------------------------------
.text:00000000000029D1                 align 8
.text:00000000000029D8
.text:00000000000029D8 loc_29D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000029D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000029DD                 jnz     loc_3200
.text:00000000000029E3                 xor     r12d, r12d
.text:00000000000029E6                 xor     eax, eax
.text:00000000000029E8                 mov     ebx, 3Fh ; '?'
.text:00000000000029ED                 jmp     loc_23A9
.text:00000000000029ED ; ---------------------------------------------------------------------------
.text:00000000000029F2                 align 8
.text:00000000000029F8
.text:00000000000029F8 loc_29F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000029F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002A00                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A04                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002A10                 mov     [rsp+0E8h+ps], rax
.text:0000000000002A15                 jnz     short loc_2A44
.text:0000000000002A17                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002A1C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002A21                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002A26                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002A2B                 call    _strlen
.text:0000000000002A30                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002A36                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002A3C                 mov     r11, rax
.text:0000000000002A3F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002A44
.text:0000000000002A44 loc_2A44:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002A44                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002A4C                 xor     ecx, ecx
.text:0000000000002A4E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002A52                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002A57                 mov     rbx, rcx
.text:0000000000002A5A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002A62                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002A67                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002A6C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002A74                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002A79                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002A7E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002A83
.text:0000000000002A83 loc_2A83:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002A83                 mov     rax, [rsp+0E8h+s]
.text:0000000000002A88                 lea     r14, [rbp+rbx+0]
.text:0000000000002A8D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002A92                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002A97                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002A9C                 lea     r13, [rax+r14]
.text:0000000000002AA0                 sub     rdx, r14
.text:0000000000002AA3                 mov     rsi, r13
.text:0000000000002AA6                 call    rpl_mbrtowc
.text:0000000000002AAB                 test    rax, rax
.text:0000000000002AAE                 mov     r15, rax
.text:0000000000002AB1                 jz      short loc_2B01
.text:0000000000002AB3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AB7                 jz      loc_30D5
.text:0000000000002ABD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002AC1                 jz      loc_3061
.text:0000000000002AC7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002ACC                 setz    al
.text:0000000000002ACF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002AD3                 jnz     loc_2C70
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002AD9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002AD9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002AE0                 call    _iswprint
.text:0000000000002AE5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002AEA                 test    eax, eax
.text:0000000000002AEC                 mov     eax, 0
.text:0000000000002AF1                 cmovz   r12d, eax
.text:0000000000002AF5                 add     rbx, r15
.text:0000000000002AF8                 call    _mbsinit
.text:0000000000002AFD                 test    eax, eax
.text:0000000000002AFF                 jz      short loc_2A83
.text:0000000000002B01
.text:0000000000002B01 loc_2B01:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002B01                 mov     edx, r12d
.text:0000000000002B04                 mov     rdi, rbx
.text:0000000000002B07                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002B0D                 xor     edx, 1
.text:0000000000002B10                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002B15                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002B1B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002B1F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002B27                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002B2C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002B31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002B36
.text:0000000000002B36 loc_2B36:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002B36                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002B36                 cmp     rdi, 1
.text:0000000000002B3A                 jbe     loc_313B
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002B40                 mov     rcx, rdi
.text:0000000000002B43                 xor     esi, esi
.text:0000000000002B45                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002B4B                 add     rcx, rbp
.text:0000000000002B4E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002B53                 jmp     loc_2C0E
.text:0000000000002B53 ; ---------------------------------------------------------------------------
.text:0000000000002B58                 align 20h
.text:0000000000002B60
.text:0000000000002B60 loc_2B60:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002B60                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B65                 setz    al
.text:0000000000002B68                 test    r9b, r9b
.text:0000000000002B6B                 jnz     loc_3020
.text:0000000000002B71                 mov     esi, r8d
.text:0000000000002B74                 xor     esi, 1
.text:0000000000002B77                 and     al, sil
.text:0000000000002B7A                 jz      short loc_2BAB
.text:0000000000002B7C                 cmp     r13, r15
.text:0000000000002B7F                 jbe     short loc_2B86
.text:0000000000002B81                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B86
.text:0000000000002B86 loc_2B86:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002B86                 lea     rsi, [r15+1]
.text:0000000000002B8A                 cmp     r13, rsi
.text:0000000000002B8D                 jbe     short loc_2B95
.text:0000000000002B8F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002B95
.text:0000000000002B95 loc_2B95:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002B95                 lea     rsi, [r15+2]
.text:0000000000002B99                 cmp     r13, rsi
.text:0000000000002B9C                 jbe     short loc_2BA4
.text:0000000000002B9E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002BA4
.text:0000000000002BA4 loc_2BA4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002BA4                 add     r15, 3
.text:0000000000002BA8                 mov     r8d, eax
.text:0000000000002BAB
.text:0000000000002BAB loc_2BAB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002BAB                 cmp     r13, r15
.text:0000000000002BAE                 jbe     short loc_2BB5
.text:0000000000002BB0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002BB5
.text:0000000000002BB5 loc_2BB5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002BB5                 lea     rax, [r15+1]
.text:0000000000002BB9                 cmp     r13, rax
.text:0000000000002BBC                 jbe     short loc_2BCB
.text:0000000000002BBE                 mov     eax, ebx
.text:0000000000002BC0                 shr     al, 6
.text:0000000000002BC3                 add     eax, 30h ; '0'
.text:0000000000002BC6                 mov     [r14+r15+1], al
.text:0000000000002BCB
.text:0000000000002BCB loc_2BCB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002BCB                 lea     rax, [r15+2]
.text:0000000000002BCF                 cmp     r13, rax
.text:0000000000002BD2                 jbe     short loc_2BE4
.text:0000000000002BD4                 mov     eax, ebx
.text:0000000000002BD6                 shr     al, 3
.text:0000000000002BD9                 and     eax, 7
.text:0000000000002BDC                 add     eax, 30h ; '0'
.text:0000000000002BDF                 mov     [r14+r15+2], al
.text:0000000000002BE4
.text:0000000000002BE4 loc_2BE4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002BE4                 and     ebx, 7
.text:0000000000002BE7                 add     rbp, 1
.text:0000000000002BEB                 add     r15, 3
.text:0000000000002BEF                 add     ebx, 30h ; '0'
.text:0000000000002BF2                 cmp     rbp, rcx
.text:0000000000002BF5                 jnb     loc_23E0
.text:0000000000002BFB                 mov     esi, edx
.text:0000000000002BFD
.text:0000000000002BFD loc_2BFD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002BFD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002BFD                 cmp     r13, r15
.text:0000000000002C00                 jbe     short loc_2C06
.text:0000000000002C02                 mov     [r14+r15], bl
.text:0000000000002C06
.text:0000000000002C06 loc_2C06:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002C06                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002C0A                 add     r15, 1
.text:0000000000002C0E
.text:0000000000002C0E loc_2C0E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002C0E                 test    dl, dl
.text:0000000000002C10                 jnz     loc_2B60
.text:0000000000002C16                 mov     eax, esi
.text:0000000000002C18                 xor     eax, 1
.text:0000000000002C1B                 and     eax, r8d
.text:0000000000002C1E                 test    r10b, r10b
.text:0000000000002C21                 jz      short loc_2C31
.text:0000000000002C23                 cmp     r13, r15
.text:0000000000002C26                 jbe     short loc_2C2D
.text:0000000000002C28                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C2D
.text:0000000000002C2D loc_2C2D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002C2D                 add     r15, 1
.text:0000000000002C31
.text:0000000000002C31 loc_2C31:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002C31                 add     rbp, 1
.text:0000000000002C35                 cmp     rbp, rcx
.text:0000000000002C38                 jnb     loc_23BC
.text:0000000000002C3E                 test    al, al
.text:0000000000002C40                 jz      loc_303E
.text:0000000000002C46                 cmp     r13, r15
.text:0000000000002C49                 jbe     short loc_2C50
.text:0000000000002C4B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002C50                 lea     rax, [r15+1]
.text:0000000000002C54                 cmp     r13, rax
.text:0000000000002C57                 jbe     short loc_2C5F
.text:0000000000002C59                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002C5F
.text:0000000000002C5F loc_2C5F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002C5F                 add     r15, 2
.text:0000000000002C63                 xor     r10d, r10d
.text:0000000000002C66                 xor     r8d, r8d
.text:0000000000002C69                 jmp     short loc_2BFD
.text:0000000000002C69 ; ---------------------------------------------------------------------------
.text:0000000000002C6B                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002C70                 cmp     r15, 1
.text:0000000000002C74                 jz      loc_2AD9
.text:0000000000002C7A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002C7F                 lea     rcx, [rdi+r15]
.text:0000000000002C83                 lea     rdx, [rdi+r14+1]
.text:0000000000002C88                 lea     r8, [rcx+r14]
.text:0000000000002C8C                 jmp     short loc_2C9D
.text:0000000000002C8C ; ---------------------------------------------------------------------------
.text:0000000000002C8E                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002C90                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002C90                 add     rdx, 1
.text:0000000000002C94                 cmp     r8, rdx
.text:0000000000002C97                 jz      loc_2AD9
.text:0000000000002C9D
.text:0000000000002C9D loc_2C9D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002C9D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002CA0                 sub     ecx, 5Bh ; '['
.text:0000000000002CA3                 cmp     cl, 21h ; '!'
.text:0000000000002CA6                 ja      short loc_2C90
.text:0000000000002CA8                 mov     esi, 1
.text:0000000000002CAD                 shl     rsi, cl
.text:0000000000002CB0                 mov     rcx, rsi
.text:0000000000002CB3                 mov     rsi, 20000002Bh
.text:0000000000002CBD                 test    rcx, rsi
.text:0000000000002CC0                 jz      short loc_2C90
.text:0000000000002CC2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002CC7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002CCC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002CD1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CD9
.text:0000000000002CD9 loc_2CD9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002CD9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002CD9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002CDE                 jz      short loc_2CF0
.text:0000000000002CE0                 test    al, al
.text:0000000000002CE2                 mov     eax, 4
.text:0000000000002CE7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002CEC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002CF0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002CF0                 sub     rsp, 8
.text:0000000000002CF4                 mov     rcx, rbp
.text:0000000000002CF7                 mov     rsi, r13
.text:0000000000002CFA                 push    [rsp+0F0h+var_88]
.text:0000000000002CFE                 push    [rsp+0F8h+var_80]
.text:0000000000002D02                 mov     rdi, r14
.text:0000000000002D05                 push    0
.text:0000000000002D07                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002D0F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002D14                 mov     rdx, [rsp+108h+s]
.text:0000000000002D19                 and     r9d, 0FFFFFFFDh
.text:0000000000002D1D                 call    quotearg_buffer_restyled
.text:0000000000002D22                 add     rsp, 20h
.text:0000000000002D26                 mov     r15, rax
.text:0000000000002D29
.text:0000000000002D29 loc_2D29:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002D29                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002D29                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002D31                 xor     rbx, fs:28h
.text:0000000000002D3A                 mov     rax, r15
.text:0000000000002D3D                 jnz     loc_3343
.text:0000000000002D43                 add     rsp, 0B8h
.text:0000000000002D4A                 pop     rbx
.text:0000000000002D4B                 pop     rbp
.text:0000000000002D4C                 pop     r12
.text:0000000000002D4E                 pop     r13
.text:0000000000002D50                 pop     r14
.text:0000000000002D52                 pop     r15
.text:0000000000002D54                 retn
.text:0000000000002D54 ; ---------------------------------------------------------------------------
.text:0000000000002D55                 align 8
.text:0000000000002D58
.text:0000000000002D58 loc_2D58:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002D58                 mov     rbp, r11
.text:0000000000002D5B                 jmp     loc_2CD9
.text:0000000000002D60 ; ---------------------------------------------------------------------------
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002D60                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002D60                 cmp     r13, r15
.text:0000000000002D63                 jbe     short loc_2D6A
.text:0000000000002D65                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D6A
.text:0000000000002D6A loc_2D6A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002D6A                 lea     rax, [r15+1]
.text:0000000000002D6E                 cmp     r13, rax
.text:0000000000002D71                 jbe     short loc_2D79
.text:0000000000002D73                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002D79
.text:0000000000002D79 loc_2D79:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002D79                 lea     rax, [r15+2]
.text:0000000000002D7D                 cmp     r13, rax
.text:0000000000002D80                 jbe     loc_3372
.text:0000000000002D86                 mov     rdx, r13
.text:0000000000002D89                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D8F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002D94                 jmp     loc_2972
.text:0000000000002D99 ; ---------------------------------------------------------------------------
.text:0000000000002D99
.text:0000000000002D99 loc_2D99:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002D99                 mov     eax, r12d
.text:0000000000002D9C                 mov     ebx, 30h ; '0'
.text:0000000000002DA1                 xor     r12d, r12d
.text:0000000000002DA4                 jmp     loc_23A9
.text:0000000000002DA9 ; ---------------------------------------------------------------------------
.text:0000000000002DA9
.text:0000000000002DA9 loc_2DA9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002DA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DAF                 jmp     loc_2779
.text:0000000000002DB4 ; ---------------------------------------------------------------------------
.text:0000000000002DB4
.text:0000000000002DB4 loc_2DB4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DB4                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002DB4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002DB6                 jnz     loc_21E3        ; jumptable 00000000000121F1 case 1
.text:0000000000002DBC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DC1
.text:0000000000002DC1 loc_2DC1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002DC1                 test    r13, r13
.text:0000000000002DC4                 jnz     loc_335A
.text:0000000000002DCA                 lea     rax, asc_4F3D   ; "'"
.text:0000000000002DD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DDA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DDF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DE4                 xor     r12d, r12d
.text:0000000000002DE7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DEC                 mov     [rsp+0E8h+n], 1
.text:0000000000002DF5                 mov     [rsp+0E8h+s2], rax
.text:0000000000002DFA                 mov     r15d, 1
.text:0000000000002E00                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E08                 jmp     loc_2223
.text:0000000000002E08 ; ---------------------------------------------------------------------------
.text:0000000000002E0D                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E10                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002E10                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002E12                 jnz     loc_320D
.text:0000000000002E18                 test    r13, r13
.text:0000000000002E1B                 jz      loc_3046
.text:0000000000002E21                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002E25                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E2A                 xor     r12d, r12d
.text:0000000000002E2D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E32                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E3B
.text:0000000000002E3B loc_2E3B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002E3B                 lea     rax, unk_4F3B
.text:0000000000002E42                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002E47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E4C                 mov     [rsp+0E8h+n], 1
.text:0000000000002E55                 mov     r15d, 1
.text:0000000000002E5B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E60                 jmp     loc_2223
.text:0000000000002E65 ; ---------------------------------------------------------------------------
.text:0000000000002E65
.text:0000000000002E65 loc_2E65:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E65                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002E65                 lea     rax, unk_4F3B   ; jumptable 00000000000121F1 case 6
.text:0000000000002E6C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E71                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E76                 xor     r12d, r12d
.text:0000000000002E79                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E82                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002E87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E8C                 mov     [rsp+0E8h+n], 1
.text:0000000000002E95                 xor     r15d, r15d
.text:0000000000002E98                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E9D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002EA5                 jmp     loc_2223
.text:0000000000002EAA ; ---------------------------------------------------------------------------
.text:0000000000002EAA
.text:0000000000002EAA loc_2EAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EAA                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002EAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002EAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EB4                 xor     r12d, r12d
.text:0000000000002EB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EC5                 xor     r15d, r15d
.text:0000000000002EC8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002ECD                 mov     [rsp+0E8h+n], 0
.text:0000000000002ED6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002EDF                 jmp     loc_2223
.text:0000000000002EE4 ; ---------------------------------------------------------------------------
.text:0000000000002EE4
.text:0000000000002EE4 loc_2EE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EE4                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002EE4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002EE9                 jz      short loc_2F41
.text:0000000000002EEB                 lea     rsi, asc_4F3F   ; "`"
.text:0000000000002EF2                 xor     edi, edi        ; domainname
.text:0000000000002EF4                 mov     edx, 5          ; category
.text:0000000000002EF9                 call    _dcgettext
.text:0000000000002EFE                 mov     rcx, rax
.text:0000000000002F01                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002F06                 lea     rax, asc_4F3F   ; "`"
.text:0000000000002F0D                 cmp     rcx, rax
.text:0000000000002F10                 jz      loc_32AE
.text:0000000000002F16
.text:0000000000002F16 loc_2F16:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002F16                 lea     rsi, asc_4F3D   ; "'"
.text:0000000000002F1D                 xor     edi, edi        ; domainname
.text:0000000000002F1F                 mov     edx, 5          ; category
.text:0000000000002F24                 call    _dcgettext
.text:0000000000002F29                 mov     rcx, rax
.text:0000000000002F2C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002F31                 lea     rax, asc_4F3D   ; "'"
.text:0000000000002F38                 cmp     rcx, rax
.text:0000000000002F3B                 jz      loc_32C4
.text:0000000000002F41
.text:0000000000002F41 loc_2F41:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002F41                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002F41                 xor     r15d, r15d
.text:0000000000002F44                 test    ebx, ebx
.text:0000000000002F46                 jz      loc_310D
.text:0000000000002F4C
.text:0000000000002F4C loc_2F4C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002F4C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002F4C                 test    ebx, ebx
.text:0000000000002F4E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002F53                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002F58                 xor     r12d, r12d
.text:0000000000002F5B                 mov     rdi, rbx        ; s
.text:0000000000002F5E                 call    _strlen
.text:0000000000002F63                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002F68                 mov     [rsp+0E8h+n], rax
.text:0000000000002F6D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F72                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F80                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F85                 jmp     loc_2223
.text:0000000000002F8A ; ---------------------------------------------------------------------------
.text:0000000000002F8A
.text:0000000000002F8A loc_2F8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F8A                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002F8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002F8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F94                 xor     r12d, r12d
.text:0000000000002F97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002FA5                 xor     r15d, r15d
.text:0000000000002FA8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002FAD                 mov     [rsp+0E8h+n], 0
.text:0000000000002FB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002FBF                 jmp     loc_2223
.text:0000000000002FC4 ; ---------------------------------------------------------------------------
.text:0000000000002FC4
.text:0000000000002FC4 loc_2FC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FC4                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:0000000000002FC4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002FC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FCE                 xor     r12d, r12d
.text:0000000000002FD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FDA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002FDF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FE4                 jmp     loc_2203
.text:0000000000002FE9 ; ---------------------------------------------------------------------------
.text:0000000000002FE9
.text:0000000000002FE9 loc_2FE9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002FE9                 cmp     r13, r15
.text:0000000000002FEC                 jbe     short loc_2FF3
.text:0000000000002FEE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002FF3
.text:0000000000002FF3 loc_2FF3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002FF3                 lea     rax, [rcx+2]
.text:0000000000002FF7                 cmp     r13, rax
.text:0000000000002FFA                 jbe     short loc_3002
.text:0000000000002FFC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003002
.text:0000000000003002 loc_3002:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003002                 mov     eax, r12d
.text:0000000000003005                 lea     r15, [rcx+3]
.text:0000000000003009                 xor     r12d, r12d
.text:000000000000300C                 mov     ebx, 30h ; '0'
.text:0000000000003011                 jmp     loc_2378
.text:0000000000003011 ; ---------------------------------------------------------------------------
.text:0000000000003016                 align 20h
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003020                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003025                 mov     rbp, r11
.text:0000000000003028                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000302C                 jmp     loc_2CD9
.text:0000000000003031 ; ---------------------------------------------------------------------------
.text:0000000000003031
.text:0000000000003031 loc_3031:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003031                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003036                 xor     r12d, r12d
.text:0000000000003039                 jmp     loc_2B40
.text:000000000000303E ; ---------------------------------------------------------------------------
.text:000000000000303E
.text:000000000000303E loc_303E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000303E                 xor     r10d, r10d
.text:0000000000003041                 jmp     loc_2BFD
.text:0000000000003046 ; ---------------------------------------------------------------------------
.text:0000000000003046
.text:0000000000003046 loc_3046:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003046                 mov     [rsp+0E8h+var_98], 0
.text:000000000000304F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003054                 xor     r12d, r12d
.text:0000000000003057                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000305C                 jmp     loc_2E3B
.text:0000000000003061 ; ---------------------------------------------------------------------------
.text:0000000000003061
.text:0000000000003061 loc_3061:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003061                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003066                 mov     rsi, r14
.text:0000000000003069                 mov     rcx, r13
.text:000000000000306C                 mov     rax, rbx
.text:000000000000306F                 mov     rdi, rbx
.text:0000000000003072                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003078                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000307D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003085                 cmp     rsi, r11
.text:0000000000003088                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000308E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003096                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000309B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030A0                 jnb     short loc_30C8
.text:00000000000030A2                 cmp     byte ptr [rcx], 0
.text:00000000000030A5                 jnz     short loc_30B7
.text:00000000000030A7                 jmp     short loc_30C8
.text:00000000000030A7 ; ---------------------------------------------------------------------------
.text:00000000000030A9                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000030B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000030B5                 jz      short loc_30C5
.text:00000000000030B7
.text:00000000000030B7 loc_30B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000030B7                 add     rax, 1
.text:00000000000030BB                 lea     rdx, [rbp+rax+0]
.text:00000000000030C0                 cmp     r11, rdx
.text:00000000000030C3                 ja      short loc_30B0
.text:00000000000030C5
.text:00000000000030C5 loc_30C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000030C5                 mov     rdi, rax
.text:00000000000030C8
.text:00000000000030C8 loc_30C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000030C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000030C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000030CD                 xor     r12d, r12d
.text:00000000000030D0                 jmp     loc_2B36
.text:00000000000030D5 ; ---------------------------------------------------------------------------
.text:00000000000030D5
.text:00000000000030D5 loc_30D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000030D5                 mov     rdi, rbx
.text:00000000000030D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000030DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000030E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000030E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000030F1                 xor     r12d, r12d
.text:00000000000030F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000030F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003103                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003108                 jmp     loc_2B36
.text:000000000000310D ; ---------------------------------------------------------------------------
.text:000000000000310D
.text:000000000000310D loc_310D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000310D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003112                 movzx   eax, byte ptr [rdx]
.text:0000000000003115                 test    al, al
.text:0000000000003117                 jz      loc_2F4C
.text:000000000000311D                 nop     dword ptr [rax]
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003120                 cmp     r13, r15
.text:0000000000003123                 jbe     short loc_3129
.text:0000000000003125                 mov     [r14+r15], al
.text:0000000000003129
.text:0000000000003129 loc_3129:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003129                 add     r15, 1
.text:000000000000312D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003132                 test    al, al
.text:0000000000003134                 jnz     short loc_3120
.text:0000000000003136                 jmp     loc_2F4C
.text:000000000000313B ; ---------------------------------------------------------------------------
.text:000000000000313B
.text:000000000000313B loc_313B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000313B                 mov     eax, edx
.text:000000000000313D                 jmp     loc_2697
.text:0000000000003142 ; ---------------------------------------------------------------------------
.text:0000000000003142
.text:0000000000003142 loc_3142:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003142                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003146                 cmp     bl, 3Eh ; '>'
.text:0000000000003149                 ja      loc_29C0
.text:000000000000314F                 mov     rax, 7000A38200000000h
.text:0000000000003159                 bt      rax, rbx
.text:000000000000315D                 jnb     loc_29C0
.text:0000000000003163                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003168                 jnz     loc_3352
.text:000000000000316E                 cmp     r13, r15
.text:0000000000003171                 jbe     short loc_3178
.text:0000000000003173                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003178
.text:0000000000003178 loc_3178:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003178                 lea     rax, [r15+1]
.text:000000000000317C                 cmp     r13, rax
.text:000000000000317F                 jbe     short loc_3187
.text:0000000000003181                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003187
.text:0000000000003187 loc_3187:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003187                 lea     rax, [r15+2]
.text:000000000000318B                 cmp     r13, rax
.text:000000000000318E                 jbe     short loc_3196
.text:0000000000003190                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003196
.text:0000000000003196 loc_3196:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003196                 lea     rax, [r15+3]
.text:000000000000319A                 cmp     r13, rax
.text:000000000000319D                 jbe     short loc_31A5
.text:000000000000319F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000031A5
.text:00000000000031A5 loc_31A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000031A5                 add     r15, 4
.text:00000000000031A9                 xor     edx, edx
.text:00000000000031AB                 xor     r12d, r12d
.text:00000000000031AE                 xor     eax, eax
.text:00000000000031B0                 mov     rbp, rcx
.text:00000000000031B3                 jmp     loc_2378
.text:00000000000031B8 ; ---------------------------------------------------------------------------
.text:00000000000031B8
.text:00000000000031B8 loc_31B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031B8                                         ; DATA XREF: .rodata:jpt_21E1↓o
.text:00000000000031B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000031BA                 jz      loc_3348
.text:00000000000031C0                 lea     rax, asc_4F3D   ; "'"
.text:00000000000031C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000031CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031D1                 xor     r12d, r12d
.text:00000000000031D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000031E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000031E7                 mov     [rsp+0E8h+n], 1
.text:00000000000031F0                 xor     r15d, r15d
.text:00000000000031F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000031F8                 jmp     loc_2223
.text:00000000000031F8 ; ---------------------------------------------------------------------------
.text:00000000000031FD                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003200                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003200                 mov     rbp, r11
.text:0000000000003203                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003208                 jmp     loc_2CD9
.text:000000000000320D ; ---------------------------------------------------------------------------
.text:000000000000320D
.text:000000000000320D loc_320D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000320D                 lea     rax, unk_4F3B
.text:0000000000003214                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003219                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000321E                 xor     r12d, r12d
.text:0000000000003221                 mov     [rsp+0E8h+var_98], 0
.text:000000000000322A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000322F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003234                 mov     [rsp+0E8h+n], 1
.text:000000000000323D                 xor     r15d, r15d
.text:0000000000003240                 mov     [rsp+0E8h+s2], rax
.text:0000000000003245                 jmp     loc_2223
.text:000000000000324A ; ---------------------------------------------------------------------------
.text:000000000000324A
.text:000000000000324A loc_324A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000324A                 mov     eax, edx
.text:000000000000324C
.text:000000000000324C loc_324C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000324C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000324C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003251                 test    rbx, rbx
.text:0000000000003254                 jz      short loc_3282
.text:0000000000003256                 test    al, al
.text:0000000000003258                 jz      short loc_3282
.text:000000000000325A                 movzx   ecx, byte ptr [rbx]
.text:000000000000325D                 mov     rax, rbx
.text:0000000000003260                 test    cl, cl
.text:0000000000003262                 jz      short loc_3282
.text:0000000000003264                 mov     rdx, r15
.text:0000000000003267                 sub     rax, r15
.text:000000000000326A
.text:000000000000326A loc_326A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000326A                 cmp     r13, rdx
.text:000000000000326D                 jbe     short loc_3273
.text:000000000000326F                 mov     [r14+rdx], cl
.text:0000000000003273
.text:0000000000003273 loc_3273:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003273                 add     rdx, 1
.text:0000000000003277                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000327B                 test    cl, cl
.text:000000000000327D                 jnz     short loc_326A
.text:000000000000327F                 mov     r15, rdx
.text:0000000000003282
.text:0000000000003282 loc_3282:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003282                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003282                 cmp     r13, r15
.text:0000000000003285                 jbe     loc_2D29
.text:000000000000328B                 mov     byte ptr [r14+r15], 0
.text:0000000000003290                 jmp     loc_2D29
.text:0000000000003295 ; ---------------------------------------------------------------------------
.text:0000000000003295
.text:0000000000003295 loc_3295:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003295                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000329A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000329F                 mov     rbp, r11
.text:00000000000032A2                 setz    al
.text:00000000000032A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000032A9                 jmp     loc_2CD9
.text:00000000000032AE ; ---------------------------------------------------------------------------
.text:00000000000032AE
.text:00000000000032AE loc_32AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000032AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000032B2                 mov     rdi, rcx
.text:00000000000032B5                 call    gettext_quote
.text:00000000000032BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000032BF                 jmp     loc_2F16
.text:00000000000032C4 ; ---------------------------------------------------------------------------
.text:00000000000032C4
.text:00000000000032C4 loc_32C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000032C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000032C8                 mov     rdi, rcx
.text:00000000000032CB                 call    gettext_quote
.text:00000000000032D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000032D5                 jmp     loc_2F41
.text:00000000000032DA ; ---------------------------------------------------------------------------
.text:00000000000032DA
.text:00000000000032DA loc_32DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000032DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000032DF                 mov     rbp, r11
.text:00000000000032E2                 mov     eax, edx
.text:00000000000032E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000032E8                 jmp     loc_2CD9
.text:00000000000032ED ; ---------------------------------------------------------------------------
.text:00000000000032ED
.text:00000000000032ED loc_32ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000032ED                 sub     rsp, 8
.text:00000000000032F1                 mov     r8d, 5
.text:00000000000032F7                 mov     rcx, r11
.text:00000000000032FA                 push    [rsp+0F0h+var_88]
.text:00000000000032FE                 push    [rsp+0F8h+var_80]
.text:0000000000003302                 mov     rdi, r14
.text:0000000000003305                 push    [rsp+100h+var_C8]
.text:0000000000003309                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003311                 mov     rdx, [rsp+108h+s]
.text:0000000000003316                 mov     rsi, [rsp+108h+var_98]
.text:000000000000331B                 call    quotearg_buffer_restyled
.text:0000000000003320                 add     rsp, 20h
.text:0000000000003324                 mov     r15, rax
.text:0000000000003327                 jmp     loc_2D29
.text:000000000000332C ; ---------------------------------------------------------------------------
.text:000000000000332C
.text:000000000000332C loc_332C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000332C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003331                 jmp     loc_324C
.text:0000000000003336 ; ---------------------------------------------------------------------------
.text:0000000000003336
.text:0000000000003336 loc_3336:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003336                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000333E                 jmp     loc_2CD9
.text:0000000000003343 ; ---------------------------------------------------------------------------
.text:0000000000003343
.text:0000000000003343 loc_3343:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003343                 call    ___stack_chk_fail
.text:0000000000003348 ; ---------------------------------------------------------------------------
.text:0000000000003348
.text:0000000000003348 loc_3348:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003348                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000334D                 jmp     loc_2DC1
.text:0000000000003352 ; ---------------------------------------------------------------------------
.text:0000000000003352
.text:0000000000003352 loc_3352:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003352                 mov     rbp, r11
.text:0000000000003355                 jmp     loc_2CF0
.text:000000000000335A ; ---------------------------------------------------------------------------
.text:000000000000335A
.text:000000000000335A loc_335A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000335A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000335F                 xor     eax, eax
.text:0000000000003361                 xor     r12d, r12d
.text:0000000000003364                 mov     [rsp+0E8h+var_98], 0
.text:000000000000336D                 jmp     loc_2914
.text:0000000000003372 ; ---------------------------------------------------------------------------
.text:0000000000003372
.text:0000000000003372 loc_3372:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003372                 mov     rdx, r13
.text:0000000000003375                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000337A                 jmp     loc_2972
.text:000000000000337F ; ---------------------------------------------------------------------------
.text:000000000000337F
.text:000000000000337F def_21E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000337F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000337F ; } // starts at 2150
.text:000000000000337F quotearg_buffer_restyled endp
.text:000000000000337F
.text:000000000000337F ; ---------------------------------------------------------------------------
.text:0000000000003384                 align 10h
.text:0000000000003390
.text:0000000000003390 ; =============== S U B R O U T I N E =======================================
.text:0000000000003390
.text:0000000000003390
.text:0000000000003390 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003390                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003390
.text:0000000000003390 var_50          = qword ptr -50h
.text:0000000000003390 var_48          = qword ptr -48h
.text:0000000000003390 var_40          = dword ptr -40h
.text:0000000000003390 var_3C          = dword ptr -3Ch
.text:0000000000003390
.text:0000000000003390 ; __unwind {
.text:0000000000003390                 push    r15
.text:0000000000003392                 push    r14
.text:0000000000003394                 movsxd  r15, edi
.text:0000000000003397                 push    r13
.text:0000000000003399                 push    r12
.text:000000000000339B                 mov     r14, rdx
.text:000000000000339E                 push    rbp
.text:000000000000339F                 push    rbx
.text:00000000000033A0                 mov     rbp, rcx
.text:00000000000033A3                 sub     rsp, 28h
.text:00000000000033A7                 mov     [rsp+58h+var_50], rsi
.text:00000000000033AC                 call    ___errno_location
.text:00000000000033B1                 mov     r13, rax
.text:00000000000033B4                 mov     eax, [rax]
.text:00000000000033B6                 test    r15d, r15d
.text:00000000000033B9                 mov     rbx, cs:slotvec
.text:00000000000033C0                 mov     [rsp+58h+var_40], eax
.text:00000000000033C4                 js      loc_3531
.text:00000000000033CA                 cmp     cs:nslots, r15d
.text:00000000000033D1                 jg      short loc_3435
.text:00000000000033D3                 cmp     r15d, 7FFFFFFFh
.text:00000000000033DA                 jz      loc_3536
.text:00000000000033E0                 lea     r12d, [r15+1]
.text:00000000000033E4                 lea     rax, slotvec0
.text:00000000000033EB                 movsxd  rsi, r12d
.text:00000000000033EE                 shl     rsi, 4
.text:00000000000033F2                 cmp     rbx, rax
.text:00000000000033F5                 jz      loc_3510
.text:00000000000033FB                 mov     rdi, rbx
.text:00000000000033FE                 call    xrealloc
.text:0000000000003403                 mov     rbx, rax
.text:0000000000003406                 mov     cs:slotvec, rax
.text:000000000000340D
.text:000000000000340D loc_340D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000340D                 movsxd  rdi, cs:nslots
.text:0000000000003414                 mov     edx, r12d
.text:0000000000003417                 xor     esi, esi        ; c
.text:0000000000003419                 sub     edx, edi
.text:000000000000341B                 shl     rdi, 4
.text:000000000000341F                 movsxd  rdx, edx
.text:0000000000003422                 add     rdi, rbx        ; s
.text:0000000000003425                 shl     rdx, 4          ; n
.text:0000000000003429                 call    _memset
.text:000000000000342E                 mov     cs:nslots, r12d
.text:0000000000003435
.text:0000000000003435 loc_3435:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003435                 mov     eax, [rbp+4]
.text:0000000000003438                 shl     r15, 4
.text:000000000000343C                 sub     rsp, 8
.text:0000000000003440                 add     rbx, r15
.text:0000000000003443                 lea     r15, [rbp+8]
.text:0000000000003447                 mov     r8d, [rbp+0]
.text:000000000000344B                 mov     r11, [rbx]
.text:000000000000344E                 mov     r12, [rbx+8]
.text:0000000000003452                 mov     rcx, r14
.text:0000000000003455                 or      eax, 1
.text:0000000000003458                 mov     [rsp+60h+var_3C], eax
.text:000000000000345C                 push    qword ptr [rbp+30h]
.text:000000000000345F                 mov     r9d, eax
.text:0000000000003462                 push    qword ptr [rbp+28h]
.text:0000000000003465                 push    r15
.text:0000000000003467                 mov     rsi, r11
.text:000000000000346A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000346F                 mov     rdi, r12
.text:0000000000003472                 mov     [rsp+78h+var_48], r11
.text:0000000000003477                 call    quotearg_buffer_restyled
.text:000000000000347C                 add     rsp, 20h
.text:0000000000003480                 mov     r11, [rsp+58h+var_48]
.text:0000000000003485                 cmp     r11, rax
.text:0000000000003488                 ja      short loc_34F1
.text:000000000000348A                 lea     rsi, [rax+1]
.text:000000000000348E                 lea     rax, slot0
.text:0000000000003495                 cmp     r12, rax
.text:0000000000003498                 mov     [rbx], rsi
.text:000000000000349B                 jz      short loc_34AF
.text:000000000000349D                 mov     rdi, r12        ; ptr
.text:00000000000034A0                 mov     [rsp+58h+var_48], rsi
.text:00000000000034A5                 call    _free
.text:00000000000034AA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000034AF
.text:00000000000034AF loc_34AF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000034AF                 mov     rdi, rsi
.text:00000000000034B2                 mov     [rsp+58h+var_48], rsi
.text:00000000000034B7                 call    xmalloc
.text:00000000000034BC                 sub     rsp, 8
.text:00000000000034C0                 mov     [rbx+8], rax
.text:00000000000034C4                 mov     r8d, [rbp+0]
.text:00000000000034C8                 push    qword ptr [rbp+30h]
.text:00000000000034CB                 push    qword ptr [rbp+28h]
.text:00000000000034CE                 mov     rcx, r14
.text:00000000000034D1                 push    r15
.text:00000000000034D3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000034D8                 mov     rdi, rax
.text:00000000000034DB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000034E0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000034E5                 mov     r12, rax
.text:00000000000034E8                 call    quotearg_buffer_restyled
.text:00000000000034ED                 add     rsp, 20h
.text:00000000000034F1
.text:00000000000034F1 loc_34F1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000034F1                 mov     eax, [rsp+58h+var_40]
.text:00000000000034F5                 mov     [r13+0], eax
.text:00000000000034F9                 add     rsp, 28h
.text:00000000000034FD                 mov     rax, r12
.text:0000000000003500                 pop     rbx
.text:0000000000003501                 pop     rbp
.text:0000000000003502                 pop     r12
.text:0000000000003504                 pop     r13
.text:0000000000003506                 pop     r14
.text:0000000000003508                 pop     r15
.text:000000000000350A                 retn
.text:000000000000350A ; ---------------------------------------------------------------------------
.text:000000000000350B                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003510                 xor     edi, edi
.text:0000000000003512                 call    xrealloc
.text:0000000000003517                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000351F                 mov     rbx, rax
.text:0000000000003522                 mov     cs:slotvec, rax
.text:0000000000003529                 movups  xmmword ptr [rax], xmm0
.text:000000000000352C                 jmp     loc_340D
.text:0000000000003531 ; ---------------------------------------------------------------------------
.text:0000000000003531
.text:0000000000003531 loc_3531:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003531                 call    _abort
.text:0000000000003536 ; ---------------------------------------------------------------------------
.text:0000000000003536
.text:0000000000003536 loc_3536:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003536                 call    xalloc_die
.text:0000000000003536 ; } // starts at 3390
.text:0000000000003536 quotearg_n_options endp
.text:0000000000003536
.text:0000000000003536 ; ---------------------------------------------------------------------------
.text:000000000000353B                 align 20h
.text:0000000000003540
.text:0000000000003540 ; =============== S U B R O U T I N E =======================================
.text:0000000000003540
.text:0000000000003540 ; Attributes: info_from_lumina
.text:0000000000003540
.text:0000000000003540 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003540                 public clone_quoting_options
.text:0000000000003540 clone_quoting_options proc near
.text:0000000000003540 ; __unwind {
.text:0000000000003540                 push    r12
.text:0000000000003542                 push    rbp
.text:0000000000003543                 push    rbx
.text:0000000000003544                 mov     rbx, rdi
.text:0000000000003547                 call    ___errno_location
.text:000000000000354C                 mov     r12d, [rax]
.text:000000000000354F                 mov     rbp, rax
.text:0000000000003552                 lea     rax, default_quoting_options
.text:0000000000003559                 test    rbx, rbx
.text:000000000000355C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003561                 cmovz   rbx, rax
.text:0000000000003565                 mov     rdi, rbx        ; src
.text:0000000000003568                 call    xmemdup
.text:000000000000356D                 mov     [rbp+0], r12d
.text:0000000000003571                 pop     rbx
.text:0000000000003572                 pop     rbp
.text:0000000000003573                 pop     r12
.text:0000000000003575                 retn
.text:0000000000003575 ; } // starts at 3540
.text:0000000000003575 clone_quoting_options endp
.text:0000000000003575
.text:0000000000003575 ; ---------------------------------------------------------------------------
.text:0000000000003576                 align 20h
.text:0000000000003580
.text:0000000000003580 ; =============== S U B R O U T I N E =======================================
.text:0000000000003580
.text:0000000000003580
.text:0000000000003580                 public get_quoting_style
.text:0000000000003580 get_quoting_style proc near
.text:0000000000003580 ; __unwind {
.text:0000000000003580                 lea     rax, default_quoting_options
.text:0000000000003587                 test    rdi, rdi
.text:000000000000358A                 cmovz   rdi, rax
.text:000000000000358E                 mov     eax, [rdi]
.text:0000000000003590                 retn
.text:0000000000003590 ; } // starts at 3580
.text:0000000000003590 get_quoting_style endp
.text:0000000000003590
.text:0000000000003590 ; ---------------------------------------------------------------------------
.text:0000000000003591                 align 20h
.text:00000000000035A0
.text:00000000000035A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035A0
.text:00000000000035A0
.text:00000000000035A0                 public set_quoting_style
.text:00000000000035A0 set_quoting_style proc near
.text:00000000000035A0 ; __unwind {
.text:00000000000035A0                 lea     rax, default_quoting_options
.text:00000000000035A7                 test    rdi, rdi
.text:00000000000035AA                 cmovz   rdi, rax
.text:00000000000035AE                 mov     [rdi], esi
.text:00000000000035B0                 retn
.text:00000000000035B0 ; } // starts at 35A0
.text:00000000000035B0 set_quoting_style endp
.text:00000000000035B0
.text:00000000000035B0 ; ---------------------------------------------------------------------------
.text:00000000000035B1                 align 20h
.text:00000000000035C0
.text:00000000000035C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035C0
.text:00000000000035C0 ; Attributes: info_from_lumina
.text:00000000000035C0
.text:00000000000035C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000035C0                 public set_char_quoting
.text:00000000000035C0 set_char_quoting proc near
.text:00000000000035C0 ; __unwind {
.text:00000000000035C0                 lea     rax, default_quoting_options
.text:00000000000035C7                 test    rdi, rdi
.text:00000000000035CA                 mov     ecx, esi
.text:00000000000035CC                 cmovz   rdi, rax
.text:00000000000035D0                 mov     eax, esi
.text:00000000000035D2                 and     ecx, 1Fh
.text:00000000000035D5                 shr     al, 5
.text:00000000000035D8                 movzx   eax, al
.text:00000000000035DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000035E0                 mov     esi, [rdi]
.text:00000000000035E2                 mov     eax, esi
.text:00000000000035E4                 shr     eax, cl
.text:00000000000035E6                 xor     edx, eax
.text:00000000000035E8                 and     eax, 1
.text:00000000000035EB                 and     edx, 1
.text:00000000000035EE                 shl     edx, cl
.text:00000000000035F0                 xor     edx, esi
.text:00000000000035F2                 mov     [rdi], edx
.text:00000000000035F4                 retn
.text:00000000000035F4 ; } // starts at 35C0
.text:00000000000035F4 set_char_quoting endp
.text:00000000000035F4
.text:00000000000035F4 ; ---------------------------------------------------------------------------
.text:00000000000035F5                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public set_quoting_flags
.text:0000000000003600 set_quoting_flags proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 lea     rax, default_quoting_options
.text:0000000000003607                 test    rdi, rdi
.text:000000000000360A                 cmovz   rdi, rax
.text:000000000000360E                 mov     eax, [rdi+4]
.text:0000000000003611                 mov     [rdi+4], esi
.text:0000000000003614                 retn
.text:0000000000003614 ; } // starts at 3600
.text:0000000000003614 set_quoting_flags endp
.text:0000000000003614
.text:0000000000003614 ; ---------------------------------------------------------------------------
.text:0000000000003615                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620 ; Attributes: info_from_lumina
.text:0000000000003620
.text:0000000000003620 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003620                 public set_custom_quoting
.text:0000000000003620 set_custom_quoting proc near
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 lea     rax, default_quoting_options
.text:0000000000003627                 test    rdi, rdi
.text:000000000000362A                 cmovz   rdi, rax
.text:000000000000362E                 test    rsi, rsi
.text:0000000000003631                 mov     dword ptr [rdi], 0Ah
.text:0000000000003637                 jz      short loc_3647
.text:0000000000003639                 test    rdx, rdx
.text:000000000000363C                 jz      short loc_3647
.text:000000000000363E                 mov     [rdi+28h], rsi
.text:0000000000003642                 mov     [rdi+30h], rdx
.text:0000000000003646                 retn
.text:0000000000003647 ; ---------------------------------------------------------------------------
.text:0000000000003647
.text:0000000000003647 loc_3647:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003647                                         ; set_custom_quoting+1C↑j
.text:0000000000003647                 sub     rsp, 8
.text:000000000000364B                 call    _abort
.text:000000000000364B ; } // starts at 3620
.text:000000000000364B set_custom_quoting endp
.text:000000000000364B
.text:0000000000003650
.text:0000000000003650 ; =============== S U B R O U T I N E =======================================
.text:0000000000003650
.text:0000000000003650 ; Attributes: info_from_lumina
.text:0000000000003650
.text:0000000000003650 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003650                 public quotearg_buffer
.text:0000000000003650 quotearg_buffer proc near
.text:0000000000003650
.text:0000000000003650 var_40          = qword ptr -40h
.text:0000000000003650
.text:0000000000003650 ; __unwind {
.text:0000000000003650                 push    r15
.text:0000000000003652                 push    r14
.text:0000000000003654                 lea     rax, default_quoting_options
.text:000000000000365B                 push    r13
.text:000000000000365D                 push    r12
.text:000000000000365F                 mov     r13, rdi
.text:0000000000003662                 push    rbp
.text:0000000000003663                 push    rbx
.text:0000000000003664                 mov     rbx, r8
.text:0000000000003667                 mov     r14, rsi
.text:000000000000366A                 mov     r15, rdx
.text:000000000000366D                 sub     rsp, 18h
.text:0000000000003671                 test    r8, r8
.text:0000000000003674                 cmovz   rbx, rax
.text:0000000000003678                 mov     [rsp+48h+var_40], rcx
.text:000000000000367D                 call    ___errno_location
.text:0000000000003682                 mov     r12d, [rax]
.text:0000000000003685                 mov     rbp, rax
.text:0000000000003688                 lea     rax, [rbx+8]
.text:000000000000368C                 sub     rsp, 8
.text:0000000000003690                 mov     r9d, [rbx+4]
.text:0000000000003694                 push    qword ptr [rbx+30h]
.text:0000000000003697                 mov     r8d, [rbx]
.text:000000000000369A                 push    qword ptr [rbx+28h]
.text:000000000000369D                 mov     rdx, r15
.text:00000000000036A0                 push    rax
.text:00000000000036A1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000036A6                 mov     rsi, r14
.text:00000000000036A9                 mov     rdi, r13
.text:00000000000036AC                 call    quotearg_buffer_restyled
.text:00000000000036B1                 mov     [rbp+0], r12d
.text:00000000000036B5                 add     rsp, 38h
.text:00000000000036B9                 pop     rbx
.text:00000000000036BA                 pop     rbp
.text:00000000000036BB                 pop     r12
.text:00000000000036BD                 pop     r13
.text:00000000000036BF                 pop     r14
.text:00000000000036C1                 pop     r15
.text:00000000000036C3                 retn
.text:00000000000036C3 ; } // starts at 3650
.text:00000000000036C3 quotearg_buffer endp
.text:00000000000036C3
.text:00000000000036C3 ; ---------------------------------------------------------------------------
.text:00000000000036C4                 align 10h
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0 ; Attributes: info_from_lumina
.text:00000000000036D0
.text:00000000000036D0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000036D0                 public quotearg_alloc_mem
.text:00000000000036D0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000036D0
.text:00000000000036D0 var_5C          = dword ptr -5Ch
.text:00000000000036D0 var_58          = qword ptr -58h
.text:00000000000036D0 var_50          = qword ptr -50h
.text:00000000000036D0 var_48          = qword ptr -48h
.text:00000000000036D0 var_40          = qword ptr -40h
.text:00000000000036D0
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 push    r15
.text:00000000000036D2                 push    r14
.text:00000000000036D4                 lea     rax, default_quoting_options
.text:00000000000036DB                 push    r13
.text:00000000000036DD                 push    r12
.text:00000000000036DF                 mov     r12, rdx
.text:00000000000036E2                 push    rbp
.text:00000000000036E3                 push    rbx
.text:00000000000036E4                 mov     rbx, rcx
.text:00000000000036E7                 mov     r14, rdi
.text:00000000000036EA                 mov     r15, rsi
.text:00000000000036ED                 sub     rsp, 38h
.text:00000000000036F1                 test    rcx, rcx
.text:00000000000036F4                 cmovz   rbx, rax
.text:00000000000036F8                 xor     ebp, ebp
.text:00000000000036FA                 call    ___errno_location
.text:00000000000036FF                 test    r12, r12
.text:0000000000003702                 mov     r13, rax
.text:0000000000003705                 mov     eax, [rax]
.text:0000000000003707                 setz    bpl
.text:000000000000370B                 or      ebp, [rbx+4]
.text:000000000000370E                 lea     r10, [rbx+8]
.text:0000000000003712                 sub     rsp, 8
.text:0000000000003716                 mov     r8d, [rbx]
.text:0000000000003719                 mov     rcx, r15
.text:000000000000371C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003720                 push    qword ptr [rbx+30h]
.text:0000000000003723                 mov     rdx, r14
.text:0000000000003726                 push    qword ptr [rbx+28h]
.text:0000000000003729                 push    r10
.text:000000000000372B                 xor     esi, esi
.text:000000000000372D                 mov     r9d, ebp
.text:0000000000003730                 xor     edi, edi
.text:0000000000003732                 mov     [rsp+88h+var_48], r10
.text:0000000000003737                 call    quotearg_buffer_restyled
.text:000000000000373C                 lea     rsi, [rax+1]
.text:0000000000003740                 mov     [rsp+88h+var_40], rax
.text:0000000000003745                 add     rsp, 20h
.text:0000000000003749                 mov     rdi, rsi
.text:000000000000374C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003751                 call    xmalloc
.text:0000000000003756                 mov     [rsp+68h+var_58], rax
.text:000000000000375B                 sub     rsp, 8
.text:000000000000375F                 push    qword ptr [rbx+30h]
.text:0000000000003762                 push    qword ptr [rbx+28h]
.text:0000000000003765                 mov     r10, [rsp+80h+var_48]
.text:000000000000376A                 mov     r9d, ebp
.text:000000000000376D                 mov     r8d, [rbx]
.text:0000000000003770                 mov     rcx, r15
.text:0000000000003773                 mov     rdx, r14
.text:0000000000003776                 mov     rdi, rax
.text:0000000000003779                 push    r10
.text:000000000000377B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003780                 call    quotearg_buffer_restyled
.text:0000000000003785                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003789                 add     rsp, 20h
.text:000000000000378D                 test    r12, r12
.text:0000000000003790                 mov     [r13+0], eax
.text:0000000000003794                 jz      short loc_379F
.text:0000000000003796                 mov     r11, [rsp+68h+var_40]
.text:000000000000379B                 mov     [r12], r11
.text:000000000000379F
.text:000000000000379F loc_379F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000379F                 mov     rax, [rsp+68h+var_58]
.text:00000000000037A4                 add     rsp, 38h
.text:00000000000037A8                 pop     rbx
.text:00000000000037A9                 pop     rbp
.text:00000000000037AA                 pop     r12
.text:00000000000037AC                 pop     r13
.text:00000000000037AE                 pop     r14
.text:00000000000037B0                 pop     r15
.text:00000000000037B2                 retn
.text:00000000000037B2 ; } // starts at 36D0
.text:00000000000037B2 quotearg_alloc_mem endp
.text:00000000000037B2
.text:00000000000037B2 ; ---------------------------------------------------------------------------
.text:00000000000037B3                 align 20h
.text:00000000000037C0
.text:00000000000037C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037C0
.text:00000000000037C0
.text:00000000000037C0                 public quotearg_alloc
.text:00000000000037C0 quotearg_alloc  proc near
.text:00000000000037C0 ; __unwind {
.text:00000000000037C0                 mov     rcx, rdx
.text:00000000000037C3                 xor     edx, edx
.text:00000000000037C5                 jmp     quotearg_alloc_mem
.text:00000000000037C5 ; } // starts at 37C0
.text:00000000000037C5 quotearg_alloc  endp
.text:00000000000037C5
.text:00000000000037C5 ; ---------------------------------------------------------------------------
.text:00000000000037CA                 align 10h
.text:00000000000037D0
.text:00000000000037D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037D0
.text:00000000000037D0 ; Attributes: info_from_lumina
.text:00000000000037D0
.text:00000000000037D0 ; void __cdecl quotearg_free()
.text:00000000000037D0                 public quotearg_free
.text:00000000000037D0 quotearg_free   proc near
.text:00000000000037D0 ; __unwind {
.text:00000000000037D0                 mov     eax, cs:nslots
.text:00000000000037D6                 push    r12
.text:00000000000037D8                 mov     r12, cs:slotvec
.text:00000000000037DF                 push    rbp
.text:00000000000037E0                 push    rbx
.text:00000000000037E1                 cmp     eax, 1
.text:00000000000037E4                 jle     short loc_3811
.text:00000000000037E6                 sub     eax, 2
.text:00000000000037E9                 lea     rbx, [r12+18h]
.text:00000000000037EE                 shl     rax, 4
.text:00000000000037F2                 lea     rbp, [r12+rax+28h]
.text:00000000000037F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003800                 mov     rdi, [rbx]      ; ptr
.text:0000000000003803                 add     rbx, 10h
.text:0000000000003807                 call    _free
.text:000000000000380C                 cmp     rbx, rbp
.text:000000000000380F                 jnz     short loc_3800
.text:0000000000003811
.text:0000000000003811 loc_3811:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003811                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003816                 lea     rbx, slot0
.text:000000000000381D                 cmp     rdi, rbx
.text:0000000000003820                 jz      short loc_3839
.text:0000000000003822                 call    _free
.text:0000000000003827                 mov     cs:slotvec0, 100h
.text:0000000000003832                 mov     cs:off_207098, rbx
.text:0000000000003839
.text:0000000000003839 loc_3839:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003839                 lea     rbx, slotvec0
.text:0000000000003840                 cmp     r12, rbx
.text:0000000000003843                 jz      short loc_3854
.text:0000000000003845                 mov     rdi, r12        ; ptr
.text:0000000000003848                 call    _free
.text:000000000000384D                 mov     cs:slotvec, rbx
.text:0000000000003854
.text:0000000000003854 loc_3854:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003854                 pop     rbx
.text:0000000000003855                 mov     cs:nslots, 1
.text:000000000000385F                 pop     rbp
.text:0000000000003860                 pop     r12
.text:0000000000003862                 retn
.text:0000000000003862 ; } // starts at 37D0
.text:0000000000003862 quotearg_free   endp
.text:0000000000003862
.text:0000000000003862 ; ---------------------------------------------------------------------------
.text:0000000000003863                 align 10h
.text:0000000000003870
.text:0000000000003870 ; =============== S U B R O U T I N E =======================================
.text:0000000000003870
.text:0000000000003870
.text:0000000000003870                 public quotearg_n
.text:0000000000003870 quotearg_n      proc near
.text:0000000000003870 ; __unwind {
.text:0000000000003870                 lea     rcx, default_quoting_options
.text:0000000000003877                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000387E                 jmp     quotearg_n_options
.text:000000000000387E ; } // starts at 3870
.text:000000000000387E quotearg_n      endp
.text:000000000000387E
.text:000000000000387E ; ---------------------------------------------------------------------------
.text:0000000000003883                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890
.text:0000000000003890                 public quotearg_n_mem
.text:0000000000003890 quotearg_n_mem  proc near
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 lea     rcx, default_quoting_options
.text:0000000000003897                 jmp     quotearg_n_options
.text:0000000000003897 ; } // starts at 3890
.text:0000000000003897 quotearg_n_mem  endp
.text:0000000000003897
.text:0000000000003897 ; ---------------------------------------------------------------------------
.text:000000000000389C                 align 20h
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0
.text:00000000000038A0                 public quotearg
.text:00000000000038A0 quotearg        proc near
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 lea     rcx, default_quoting_options
.text:00000000000038A7                 mov     rsi, rdi
.text:00000000000038AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038B1                 xor     edi, edi
.text:00000000000038B3                 jmp     quotearg_n_options
.text:00000000000038B3 ; } // starts at 38A0
.text:00000000000038B3 quotearg        endp
.text:00000000000038B3
.text:00000000000038B3 ; ---------------------------------------------------------------------------
.text:00000000000038B8                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0
.text:00000000000038C0                 public quotearg_mem
.text:00000000000038C0 quotearg_mem    proc near
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 lea     rcx, default_quoting_options
.text:00000000000038C7                 mov     rdx, rsi
.text:00000000000038CA                 mov     rsi, rdi
.text:00000000000038CD                 xor     edi, edi
.text:00000000000038CF                 jmp     quotearg_n_options
.text:00000000000038CF ; } // starts at 38C0
.text:00000000000038CF quotearg_mem    endp
.text:00000000000038CF
.text:00000000000038CF ; ---------------------------------------------------------------------------
.text:00000000000038D4                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0 ; Attributes: info_from_lumina
.text:00000000000038E0
.text:00000000000038E0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000038E0                 public quotearg_n_style
.text:00000000000038E0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000038E0
.text:00000000000038E0 var_48          = dword ptr -48h
.text:00000000000038E0 var_44          = qword ptr -44h
.text:00000000000038E0 var_3C          = qword ptr -3Ch
.text:00000000000038E0 var_34          = qword ptr -34h
.text:00000000000038E0 var_2C          = qword ptr -2Ch
.text:00000000000038E0 var_24          = qword ptr -24h
.text:00000000000038E0 var_1C          = qword ptr -1Ch
.text:00000000000038E0 var_14          = dword ptr -14h
.text:00000000000038E0 var_10          = qword ptr -10h
.text:00000000000038E0
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 sub     rsp, 48h
.text:00000000000038E4                 mov     rax, rdx
.text:00000000000038E7                 mov     rdx, fs:28h
.text:00000000000038F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000038F5                 xor     edx, edx
.text:00000000000038F7                 cmp     esi, 0Ah
.text:00000000000038FA                 jz      short loc_3964
.text:00000000000038FC                 mov     [rsp+48h+var_48], esi
.text:00000000000038FF                 mov     rcx, rsp
.text:0000000000003902                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003909                 mov     rsi, rax
.text:000000000000390C                 mov     [rsp+48h+var_44], 0
.text:0000000000003915                 mov     [rsp+48h+var_3C], 0
.text:000000000000391E                 mov     [rsp+48h+var_34], 0
.text:0000000000003927                 mov     [rsp+48h+var_2C], 0
.text:0000000000003930                 mov     [rsp+48h+var_24], 0
.text:0000000000003939                 mov     [rsp+48h+var_1C], 0
.text:0000000000003942                 mov     [rsp+48h+var_14], 0
.text:000000000000394A                 call    quotearg_n_options
.text:000000000000394F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003954                 xor     rcx, fs:28h
.text:000000000000395D                 jnz     short loc_3969
.text:000000000000395F                 add     rsp, 48h
.text:0000000000003963                 retn
.text:0000000000003964 ; ---------------------------------------------------------------------------
.text:0000000000003964
.text:0000000000003964 loc_3964:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003964                 call    _abort
.text:0000000000003969 ; ---------------------------------------------------------------------------
.text:0000000000003969
.text:0000000000003969 loc_3969:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003969                 call    ___stack_chk_fail
.text:0000000000003969 ; } // starts at 38E0
.text:0000000000003969 quotearg_n_style endp
.text:0000000000003969
.text:0000000000003969 ; ---------------------------------------------------------------------------
.text:000000000000396E                 align 10h
.text:0000000000003970
.text:0000000000003970 ; =============== S U B R O U T I N E =======================================
.text:0000000000003970
.text:0000000000003970 ; Attributes: info_from_lumina
.text:0000000000003970
.text:0000000000003970 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003970                 public quotearg_n_style_mem
.text:0000000000003970 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003970
.text:0000000000003970 var_48          = dword ptr -48h
.text:0000000000003970 var_44          = qword ptr -44h
.text:0000000000003970 var_3C          = qword ptr -3Ch
.text:0000000000003970 var_34          = qword ptr -34h
.text:0000000000003970 var_2C          = qword ptr -2Ch
.text:0000000000003970 var_24          = qword ptr -24h
.text:0000000000003970 var_1C          = qword ptr -1Ch
.text:0000000000003970 var_14          = dword ptr -14h
.text:0000000000003970 var_10          = qword ptr -10h
.text:0000000000003970
.text:0000000000003970 ; __unwind {
.text:0000000000003970                 sub     rsp, 48h
.text:0000000000003974                 mov     rax, rdx
.text:0000000000003977                 mov     rdx, rcx
.text:000000000000397A                 mov     rcx, fs:28h
.text:0000000000003983                 mov     [rsp+48h+var_10], rcx
.text:0000000000003988                 xor     ecx, ecx
.text:000000000000398A                 cmp     esi, 0Ah
.text:000000000000398D                 jz      short loc_39F0
.text:000000000000398F                 mov     [rsp+48h+var_48], esi
.text:0000000000003992                 mov     rcx, rsp
.text:0000000000003995                 mov     rsi, rax
.text:0000000000003998                 mov     [rsp+48h+var_44], 0
.text:00000000000039A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000039AA                 mov     [rsp+48h+var_34], 0
.text:00000000000039B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000039BC                 mov     [rsp+48h+var_24], 0
.text:00000000000039C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000039CE                 mov     [rsp+48h+var_14], 0
.text:00000000000039D6                 call    quotearg_n_options
.text:00000000000039DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000039E0                 xor     rdx, fs:28h
.text:00000000000039E9                 jnz     short loc_39F5
.text:00000000000039EB                 add     rsp, 48h
.text:00000000000039EF                 retn
.text:00000000000039F0 ; ---------------------------------------------------------------------------
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000039F0                 call    _abort
.text:00000000000039F5 ; ---------------------------------------------------------------------------
.text:00000000000039F5
.text:00000000000039F5 loc_39F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000039F5                 call    ___stack_chk_fail
.text:00000000000039F5 ; } // starts at 3970
.text:00000000000039F5 quotearg_n_style_mem endp
.text:00000000000039F5
.text:00000000000039F5 ; ---------------------------------------------------------------------------
.text:00000000000039FA                 align 20h
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00
.text:0000000000003A00                 public quotearg_style
.text:0000000000003A00 quotearg_style  proc near
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 mov     rdx, rsi
.text:0000000000003A03                 mov     esi, edi
.text:0000000000003A05                 xor     edi, edi
.text:0000000000003A07                 jmp     quotearg_n_style
.text:0000000000003A07 ; } // starts at 3A00
.text:0000000000003A07 quotearg_style  endp
.text:0000000000003A07
.text:0000000000003A07 ; ---------------------------------------------------------------------------
.text:0000000000003A0C                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public quotearg_style_mem
.text:0000000000003A10 quotearg_style_mem proc near
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 mov     rcx, rdx
.text:0000000000003A13                 mov     rdx, rsi
.text:0000000000003A16                 mov     esi, edi
.text:0000000000003A18                 xor     edi, edi
.text:0000000000003A1A                 jmp     quotearg_n_style_mem
.text:0000000000003A1A ; } // starts at 3A10
.text:0000000000003A1A quotearg_style_mem endp
.text:0000000000003A1A
.text:0000000000003A1A ; ---------------------------------------------------------------------------
.text:0000000000003A1F                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20 ; Attributes: info_from_lumina
.text:0000000000003A20
.text:0000000000003A20 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003A20                 public quotearg_char_mem
.text:0000000000003A20 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003A20                                         ; quotearg_colon+C↓j ...
.text:0000000000003A20
.text:0000000000003A20 var_48          = xmmword ptr -48h
.text:0000000000003A20 var_38          = xmmword ptr -38h
.text:0000000000003A20 var_28          = xmmword ptr -28h
.text:0000000000003A20 var_18          = qword ptr -18h
.text:0000000000003A20 var_10          = qword ptr -10h
.text:0000000000003A20
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 sub     rsp, 48h
.text:0000000000003A24                 mov     ecx, edx
.text:0000000000003A26                 mov     rax, fs:28h
.text:0000000000003A2F                 mov     [rsp+48h+var_10], rax
.text:0000000000003A34                 xor     eax, eax
.text:0000000000003A36                 mov     rax, cs:qword_207230
.text:0000000000003A3D                 mov     r8, rsp
.text:0000000000003A40                 and     ecx, 1Fh
.text:0000000000003A43                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003A4B                 mov     [rsp+48h+var_18], rax
.text:0000000000003A50                 mov     eax, edx
.text:0000000000003A52                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003A56                 shr     al, 5
.text:0000000000003A59                 movzx   eax, al
.text:0000000000003A5C                 lea     r9, [r8+rax*4+8]
.text:0000000000003A61                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003A69                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003A6E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003A76                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003A7B                 mov     edx, [r9]
.text:0000000000003A7E                 mov     eax, edx
.text:0000000000003A80                 shr     eax, cl
.text:0000000000003A82                 not     eax
.text:0000000000003A84                 and     eax, 1
.text:0000000000003A87                 shl     eax, cl
.text:0000000000003A89                 mov     rcx, r8
.text:0000000000003A8C                 xor     eax, edx
.text:0000000000003A8E                 mov     rdx, rsi
.text:0000000000003A91                 mov     rsi, rdi
.text:0000000000003A94                 mov     [r9], eax
.text:0000000000003A97                 xor     edi, edi
.text:0000000000003A99                 call    quotearg_n_options
.text:0000000000003A9E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003AA3                 xor     rsi, fs:28h
.text:0000000000003AAC                 jnz     short loc_3AB3
.text:0000000000003AAE                 add     rsp, 48h
.text:0000000000003AB2                 retn
.text:0000000000003AB3 ; ---------------------------------------------------------------------------
.text:0000000000003AB3
.text:0000000000003AB3 loc_3AB3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003AB3                 call    ___stack_chk_fail
.text:0000000000003AB3 ; } // starts at 3A20
.text:0000000000003AB3 quotearg_char_mem endp
.text:0000000000003AB3
.text:0000000000003AB3 ; ---------------------------------------------------------------------------
.text:0000000000003AB8                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0
.text:0000000000003AC0                 public quotearg_char
.text:0000000000003AC0 quotearg_char   proc near
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 movsx   edx, sil
.text:0000000000003AC4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003ACB                 jmp     quotearg_char_mem
.text:0000000000003ACB ; } // starts at 3AC0
.text:0000000000003ACB quotearg_char   endp
.text:0000000000003ACB
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0
.text:0000000000003AD0                 public quotearg_colon
.text:0000000000003AD0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 mov     edx, 3Ah ; ':'
.text:0000000000003AD5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003ADC                 jmp     quotearg_char_mem
.text:0000000000003ADC ; } // starts at 3AD0
.text:0000000000003ADC quotearg_colon  endp
.text:0000000000003ADC
.text:0000000000003ADC ; ---------------------------------------------------------------------------
.text:0000000000003AE1                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AF0
.text:0000000000003AF0
.text:0000000000003AF0                 public quotearg_colon_mem
.text:0000000000003AF0 quotearg_colon_mem proc near
.text:0000000000003AF0 ; __unwind {
.text:0000000000003AF0                 mov     edx, 3Ah ; ':'
.text:0000000000003AF5                 jmp     quotearg_char_mem
.text:0000000000003AF5 ; } // starts at 3AF0
.text:0000000000003AF5 quotearg_colon_mem endp
.text:0000000000003AF5
.text:0000000000003AF5 ; ---------------------------------------------------------------------------
.text:0000000000003AFA                 align 20h
.text:0000000000003B00
.text:0000000000003B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B00
.text:0000000000003B00 ; Attributes: info_from_lumina
.text:0000000000003B00
.text:0000000000003B00 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003B00                 public quotearg_n_style_colon
.text:0000000000003B00 quotearg_n_style_colon proc near
.text:0000000000003B00
.text:0000000000003B00 var_48          = dword ptr -48h
.text:0000000000003B00 var_44          = qword ptr -44h
.text:0000000000003B00 var_3C          = qword ptr -3Ch
.text:0000000000003B00 var_34          = qword ptr -34h
.text:0000000000003B00 var_2C          = qword ptr -2Ch
.text:0000000000003B00 var_24          = qword ptr -24h
.text:0000000000003B00 var_1C          = qword ptr -1Ch
.text:0000000000003B00 var_14          = dword ptr -14h
.text:0000000000003B00 var_10          = qword ptr -10h
.text:0000000000003B00
.text:0000000000003B00 ; __unwind {
.text:0000000000003B00                 sub     rsp, 48h
.text:0000000000003B04                 mov     rax, rdx
.text:0000000000003B07                 mov     rdx, fs:28h
.text:0000000000003B10                 mov     [rsp+48h+var_10], rdx
.text:0000000000003B15                 xor     edx, edx
.text:0000000000003B17                 cmp     esi, 0Ah
.text:0000000000003B1A                 jz      short loc_3B84
.text:0000000000003B1C                 mov     [rsp+48h+var_48], esi
.text:0000000000003B1F                 mov     rcx, rsp
.text:0000000000003B22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B29                 mov     rsi, rax
.text:0000000000003B2C                 mov     [rsp+48h+var_44], 0
.text:0000000000003B35                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003B3E                 mov     [rsp+48h+var_34], 0
.text:0000000000003B47                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B50                 mov     [rsp+48h+var_24], 0
.text:0000000000003B59                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B62                 mov     [rsp+48h+var_14], 0
.text:0000000000003B6A                 call    quotearg_n_options
.text:0000000000003B6F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003B74                 xor     rcx, fs:28h
.text:0000000000003B7D                 jnz     short loc_3B89
.text:0000000000003B7F                 add     rsp, 48h
.text:0000000000003B83                 retn
.text:0000000000003B84 ; ---------------------------------------------------------------------------
.text:0000000000003B84
.text:0000000000003B84 loc_3B84:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003B84                 call    _abort
.text:0000000000003B89 ; ---------------------------------------------------------------------------
.text:0000000000003B89
.text:0000000000003B89 loc_3B89:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003B89                 call    ___stack_chk_fail
.text:0000000000003B89 ; } // starts at 3B00
.text:0000000000003B89 quotearg_n_style_colon endp
.text:0000000000003B89
.text:0000000000003B89 ; ---------------------------------------------------------------------------
.text:0000000000003B8E                 align 10h
.text:0000000000003B90
.text:0000000000003B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B90
.text:0000000000003B90 ; Attributes: info_from_lumina
.text:0000000000003B90
.text:0000000000003B90 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003B90                 public quotearg_n_custom_mem
.text:0000000000003B90 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003B90                                         ; quotearg_custom+12↓j ...
.text:0000000000003B90
.text:0000000000003B90 var_48          = xmmword ptr -48h
.text:0000000000003B90 var_38          = xmmword ptr -38h
.text:0000000000003B90 var_28          = xmmword ptr -28h
.text:0000000000003B90 var_18          = qword ptr -18h
.text:0000000000003B90 var_10          = qword ptr -10h
.text:0000000000003B90
.text:0000000000003B90 ; __unwind {
.text:0000000000003B90                 sub     rsp, 48h
.text:0000000000003B94                 mov     r9, rcx
.text:0000000000003B97                 mov     rcx, cs:qword_207230
.text:0000000000003B9E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003BA6                 mov     rax, fs:28h
.text:0000000000003BAF                 mov     [rsp+48h+var_10], rax
.text:0000000000003BB4                 xor     eax, eax
.text:0000000000003BB6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003BBA                 test    rsi, rsi
.text:0000000000003BBD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003BC2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003BC9                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003BD1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003BD6                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003BDE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003BE3                 jz      short loc_3C17
.text:0000000000003BE5                 test    rdx, rdx
.text:0000000000003BE8                 jz      short loc_3C17
.text:0000000000003BEA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003BEF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003BF4                 mov     rcx, rsp
.text:0000000000003BF7                 mov     rdx, r8
.text:0000000000003BFA                 mov     rsi, r9
.text:0000000000003BFD                 call    quotearg_n_options
.text:0000000000003C02                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003C07                 xor     rdi, fs:28h
.text:0000000000003C10                 jnz     short loc_3C1C
.text:0000000000003C12                 add     rsp, 48h
.text:0000000000003C16                 retn
.text:0000000000003C17 ; ---------------------------------------------------------------------------
.text:0000000000003C17
.text:0000000000003C17 loc_3C17:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003C17                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003C17                 call    _abort
.text:0000000000003C1C ; ---------------------------------------------------------------------------
.text:0000000000003C1C
.text:0000000000003C1C loc_3C1C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003C1C                 call    ___stack_chk_fail
.text:0000000000003C1C ; } // starts at 3B90
.text:0000000000003C1C quotearg_n_custom_mem endp
.text:0000000000003C1C
.text:0000000000003C1C ; ---------------------------------------------------------------------------
.text:0000000000003C21                 align 10h
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30
.text:0000000000003C30                 public quotearg_n_custom
.text:0000000000003C30 quotearg_n_custom proc near
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C37                 jmp     quotearg_n_custom_mem
.text:0000000000003C37 ; } // starts at 3C30
.text:0000000000003C37 quotearg_n_custom endp
.text:0000000000003C37
.text:0000000000003C37 ; ---------------------------------------------------------------------------
.text:0000000000003C3C                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40
.text:0000000000003C40                 public quotearg_custom
.text:0000000000003C40 quotearg_custom proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 mov     rcx, rdx
.text:0000000000003C43                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C4A                 mov     rdx, rsi
.text:0000000000003C4D                 mov     rsi, rdi
.text:0000000000003C50                 xor     edi, edi
.text:0000000000003C52                 jmp     quotearg_n_custom_mem
.text:0000000000003C52 ; } // starts at 3C40
.text:0000000000003C52 quotearg_custom endp
.text:0000000000003C52
.text:0000000000003C52 ; ---------------------------------------------------------------------------
.text:0000000000003C57                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60                 public quotearg_custom_mem
.text:0000000000003C60 quotearg_custom_mem proc near
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 mov     r8, rcx
.text:0000000000003C63                 mov     rcx, rdx
.text:0000000000003C66                 mov     rdx, rsi
.text:0000000000003C69                 mov     rsi, rdi
.text:0000000000003C6C                 xor     edi, edi
.text:0000000000003C6E                 jmp     quotearg_n_custom_mem
.text:0000000000003C6E ; } // starts at 3C60
.text:0000000000003C6E quotearg_custom_mem endp
.text:0000000000003C6E
.text:0000000000003C6E ; ---------------------------------------------------------------------------
.text:0000000000003C73                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80                 public quote_n_mem
.text:0000000000003C80 quote_n_mem     proc near
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 lea     rcx, quote_quoting_options
.text:0000000000003C87                 jmp     quotearg_n_options
.text:0000000000003C87 ; } // starts at 3C80
.text:0000000000003C87 quote_n_mem     endp
.text:0000000000003C87
.text:0000000000003C87 ; ---------------------------------------------------------------------------
.text:0000000000003C8C                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90                 public quote_mem
.text:0000000000003C90 quote_mem       proc near
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 lea     rcx, quote_quoting_options
.text:0000000000003C97                 mov     rdx, rsi
.text:0000000000003C9A                 mov     rsi, rdi
.text:0000000000003C9D                 xor     edi, edi
.text:0000000000003C9F                 jmp     quotearg_n_options
.text:0000000000003C9F ; } // starts at 3C90
.text:0000000000003C9F quote_mem       endp
.text:0000000000003C9F
.text:0000000000003C9F ; ---------------------------------------------------------------------------
.text:0000000000003CA4                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0
.text:0000000000003CB0                 public quote_n
.text:0000000000003CB0 quote_n         proc near
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 lea     rcx, quote_quoting_options
.text:0000000000003CB7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CBE                 jmp     quotearg_n_options
.text:0000000000003CBE ; } // starts at 3CB0
.text:0000000000003CBE quote_n         endp
.text:0000000000003CBE
.text:0000000000003CBE ; ---------------------------------------------------------------------------
.text:0000000000003CC3                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CD0
.text:0000000000003CD0
.text:0000000000003CD0                 public quote
.text:0000000000003CD0 quote           proc near               ; CODE XREF: main+3CC↑p
.text:0000000000003CD0 ; __unwind {
.text:0000000000003CD0                 lea     rcx, quote_quoting_options
.text:0000000000003CD7                 mov     rsi, rdi
.text:0000000000003CDA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CE1                 xor     edi, edi
.text:0000000000003CE3                 jmp     quotearg_n_options
.text:0000000000003CE3 ; } // starts at 3CD0
.text:0000000000003CE3 quote           endp
.text:0000000000003CE3
.text:0000000000003CE3 ; ---------------------------------------------------------------------------
.text:0000000000003CE8                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0
.text:0000000000003CF0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003CF0                 public version_etc_arn
.text:0000000000003CF0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_412B↓j
.text:0000000000003CF0                                         ; version_etc_va:loc_417B↓p ...
.text:0000000000003CF0
.text:0000000000003CF0 var_58          = qword ptr -58h
.text:0000000000003CF0 var_50          = qword ptr -50h
.text:0000000000003CF0 var_48          = qword ptr -48h
.text:0000000000003CF0 var_40          = qword ptr -40h
.text:0000000000003CF0
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 push    r15
.text:0000000000003CF2                 push    r14
.text:0000000000003CF4                 push    r13
.text:0000000000003CF6                 push    r12
.text:0000000000003CF8                 mov     r12, r9
.text:0000000000003CFB                 push    rbp
.text:0000000000003CFC                 push    rbx
.text:0000000000003CFD                 mov     rbp, rdi
.text:0000000000003D00                 mov     rbx, r8
.text:0000000000003D03                 sub     rsp, 28h
.text:0000000000003D07                 test    rsi, rsi
.text:0000000000003D0A                 jz      loc_3E28
.text:0000000000003D10                 mov     r8, rdx
.text:0000000000003D13                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003D1A                 mov     r9, rcx
.text:0000000000003D1D                 xor     eax, eax
.text:0000000000003D1F                 mov     rcx, rsi
.text:0000000000003D22                 mov     esi, 1
.text:0000000000003D27                 call    ___fprintf_chk
.text:0000000000003D2C
.text:0000000000003D2C loc_3D2C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003D2C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003D33                 xor     edi, edi        ; domainname
.text:0000000000003D35                 mov     edx, 5          ; category
.text:0000000000003D3A                 call    _dcgettext
.text:0000000000003D3F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003D46                 mov     rcx, rax
.text:0000000000003D49                 mov     r8d, 7E3h
.text:0000000000003D4F                 mov     esi, 1
.text:0000000000003D54                 mov     rdi, rbp
.text:0000000000003D57                 xor     eax, eax
.text:0000000000003D59                 call    ___fprintf_chk
.text:0000000000003D5E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003D65                 xor     edi, edi        ; domainname
.text:0000000000003D67                 mov     edx, 5          ; category
.text:0000000000003D6C                 call    _dcgettext
.text:0000000000003D71                 mov     rsi, rbp        ; stream
.text:0000000000003D74                 mov     rdi, rax        ; s
.text:0000000000003D77                 call    _fputs_unlocked
.text:0000000000003D7C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003D80                 ja      def_3D94        ; jumptable 0000000000003D94 default case
.text:0000000000003D86                 lea     rdx, jpt_3D94
.text:0000000000003D8D                 movsxd  rax, ds:(jpt_3D94 - 5708h)[rdx+r12*4]
.text:0000000000003D91                 add     rax, rdx
.text:0000000000003D94                 jmp     rax             ; switch jump
.text:0000000000003D94 ; ---------------------------------------------------------------------------
.text:0000000000003D96                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DA0                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003DA0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003D94 case 8
.text:0000000000003DA4                 mov     rax, [rbx+10h]
.text:0000000000003DA8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003DAF                 mov     r8, [rbx+8]
.text:0000000000003DB3                 mov     edx, 5          ; category
.text:0000000000003DB8                 xor     edi, edi        ; domainname
.text:0000000000003DBA                 mov     r13, [rbx+30h]
.text:0000000000003DBE                 mov     r12, [rbx+28h]
.text:0000000000003DC2                 mov     [rsp+58h+var_48], r9
.text:0000000000003DC7                 mov     r15, [rbx+20h]
.text:0000000000003DCB                 mov     r14, [rbx+18h]
.text:0000000000003DCF                 mov     [rsp+58h+var_58], rax
.text:0000000000003DD3                 mov     [rsp+58h+var_50], r8
.text:0000000000003DD8                 mov     rbx, [rbx]
.text:0000000000003DDB                 call    _dcgettext
.text:0000000000003DE0                 sub     rsp, 8
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003DE4                 mov     r9, [rsp+60h+var_48]
.text:0000000000003DE9                 mov     rdx, rax
.text:0000000000003DEC                 mov     rcx, rbx
.text:0000000000003DEF                 mov     esi, 1
.text:0000000000003DF4                 mov     rdi, rbp
.text:0000000000003DF7                 xor     eax, eax
.text:0000000000003DF9                 push    r9
.text:0000000000003DFB                 push    r13
.text:0000000000003DFD                 push    r12
.text:0000000000003DFF                 push    r15
.text:0000000000003E01                 push    r14
.text:0000000000003E03                 mov     r9, [rsp+88h+var_58]
.text:0000000000003E08                 mov     r8, [rsp+88h+var_50]
.text:0000000000003E0D                 call    ___fprintf_chk
.text:0000000000003E12                 add     rsp, 30h
.text:0000000000003E16
.text:0000000000003E16 loc_3E16:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E16                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003E16                 add     rsp, 28h        ; jumptable 0000000000003D94 case 0
.text:0000000000003E1A                 pop     rbx
.text:0000000000003E1B                 pop     rbp
.text:0000000000003E1C                 pop     r12
.text:0000000000003E1E                 pop     r13
.text:0000000000003E20                 pop     r14
.text:0000000000003E22                 pop     r15
.text:0000000000003E24                 retn
.text:0000000000003E24 ; ---------------------------------------------------------------------------
.text:0000000000003E25                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003E28                 mov     r8, rcx
.text:0000000000003E2B                 mov     rcx, rdx
.text:0000000000003E2E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003E35                 mov     esi, 1
.text:0000000000003E3A                 xor     eax, eax
.text:0000000000003E3C                 call    ___fprintf_chk
.text:0000000000003E41                 jmp     loc_3D2C
.text:0000000000003E41 ; ---------------------------------------------------------------------------
.text:0000000000003E46                 align 10h
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E50                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003E50                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D94 case 9
.text:0000000000003E54                 mov     r9, [rbx+38h]
.text:0000000000003E58                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E5F                 mov     rax, [rbx+10h]
.text:0000000000003E63                 mov     r8, [rbx+8]
.text:0000000000003E67                 mov     edx, 5          ; category
.text:0000000000003E6C                 mov     r13, [rbx+30h]
.text:0000000000003E70                 mov     r12, [rbx+28h]
.text:0000000000003E74                 mov     r15, [rbx+20h]
.text:0000000000003E78                 mov     r14, [rbx+18h]
.text:0000000000003E7C                 mov     rbx, [rbx]
.text:0000000000003E7F                 mov     [rsp+58h+var_40], r10
.text:0000000000003E84                 mov     [rsp+58h+var_48], r9
.text:0000000000003E89                 mov     [rsp+58h+var_58], rax
.text:0000000000003E8D                 mov     [rsp+58h+var_50], r8
.text:0000000000003E92
.text:0000000000003E92 loc_3E92:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003E92                 xor     edi, edi        ; domainname
.text:0000000000003E94                 call    _dcgettext
.text:0000000000003E99                 mov     r10, [rsp+58h+var_40]
.text:0000000000003E9E                 push    r10
.text:0000000000003EA0                 jmp     loc_3DE4
.text:0000000000003EA0 ; ---------------------------------------------------------------------------
.text:0000000000003EA5                 align 8
.text:0000000000003EA8
.text:0000000000003EA8 loc_3EA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EA8                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003EA8                 mov     rbx, [rbx]      ; jumptable 0000000000003D94 case 1
.text:0000000000003EAB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003EB2                 mov     edx, 5          ; category
.text:0000000000003EB7                 xor     edi, edi        ; domainname
.text:0000000000003EB9                 call    _dcgettext
.text:0000000000003EBE                 add     rsp, 28h
.text:0000000000003EC2                 mov     rcx, rbx
.text:0000000000003EC5                 mov     rdi, rbp
.text:0000000000003EC8                 pop     rbx
.text:0000000000003EC9                 pop     rbp
.text:0000000000003ECA                 pop     r12
.text:0000000000003ECC                 pop     r13
.text:0000000000003ECE                 pop     r14
.text:0000000000003ED0                 pop     r15
.text:0000000000003ED2                 mov     rdx, rax
.text:0000000000003ED5                 mov     esi, 1
.text:0000000000003EDA                 xor     eax, eax
.text:0000000000003EDC                 jmp     ___fprintf_chk
.text:0000000000003EDC ; ---------------------------------------------------------------------------
.text:0000000000003EE1                 align 8
.text:0000000000003EE8
.text:0000000000003EE8 loc_3EE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EE8                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003EE8                 mov     r12, [rbx+8]    ; jumptable 0000000000003D94 case 2
.text:0000000000003EEC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003EF3                 mov     rbx, [rbx]
.text:0000000000003EF6                 mov     edx, 5          ; category
.text:0000000000003EFB                 xor     edi, edi        ; domainname
.text:0000000000003EFD                 call    _dcgettext
.text:0000000000003F02                 add     rsp, 28h
.text:0000000000003F06                 mov     r8, r12
.text:0000000000003F09                 mov     rcx, rbx
.text:0000000000003F0C                 mov     rdi, rbp
.text:0000000000003F0F                 mov     rdx, rax
.text:0000000000003F12                 mov     esi, 1
.text:0000000000003F17                 pop     rbx
.text:0000000000003F18                 pop     rbp
.text:0000000000003F19                 pop     r12
.text:0000000000003F1B                 pop     r13
.text:0000000000003F1D                 pop     r14
.text:0000000000003F1F                 pop     r15
.text:0000000000003F21                 xor     eax, eax
.text:0000000000003F23                 jmp     ___fprintf_chk
.text:0000000000003F23 ; ---------------------------------------------------------------------------
.text:0000000000003F28                 align 10h
.text:0000000000003F30
.text:0000000000003F30 loc_3F30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F30                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003F30                 mov     r13, [rbx+10h]  ; jumptable 0000000000003D94 case 3
.text:0000000000003F34                 mov     r12, [rbx+8]
.text:0000000000003F38                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003F3F                 mov     rbx, [rbx]
.text:0000000000003F42                 mov     edx, 5          ; category
.text:0000000000003F47                 xor     edi, edi        ; domainname
.text:0000000000003F49                 call    _dcgettext
.text:0000000000003F4E                 add     rsp, 28h
.text:0000000000003F52                 mov     r9, r13
.text:0000000000003F55                 mov     r8, r12
.text:0000000000003F58                 mov     rcx, rbx
.text:0000000000003F5B                 mov     rdi, rbp
.text:0000000000003F5E                 mov     rdx, rax
.text:0000000000003F61                 pop     rbx
.text:0000000000003F62                 pop     rbp
.text:0000000000003F63                 pop     r12
.text:0000000000003F65                 pop     r13
.text:0000000000003F67                 pop     r14
.text:0000000000003F69                 pop     r15
.text:0000000000003F6B                 mov     esi, 1
.text:0000000000003F70                 xor     eax, eax
.text:0000000000003F72                 jmp     ___fprintf_chk
.text:0000000000003F72 ; ---------------------------------------------------------------------------
.text:0000000000003F77                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F80                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003F80                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003D94 case 4
.text:0000000000003F87                 mov     edx, 5          ; category
.text:0000000000003F8C                 xor     edi, edi        ; domainname
.text:0000000000003F8E                 mov     r14, [rbx+18h]
.text:0000000000003F92                 mov     r13, [rbx+10h]
.text:0000000000003F96                 mov     r12, [rbx+8]
.text:0000000000003F9A                 mov     rbx, [rbx]
.text:0000000000003F9D                 call    _dcgettext
.text:0000000000003FA2                 sub     rsp, 8
.text:0000000000003FA6
.text:0000000000003FA6 loc_3FA6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003FA6                 push    r14
.text:0000000000003FA8                 mov     rdx, rax
.text:0000000000003FAB                 mov     r9, r13
.text:0000000000003FAE                 mov     r8, r12
.text:0000000000003FB1                 mov     rcx, rbx
.text:0000000000003FB4                 mov     rdi, rbp
.text:0000000000003FB7                 mov     esi, 1
.text:0000000000003FBC                 xor     eax, eax
.text:0000000000003FBE                 call    ___fprintf_chk
.text:0000000000003FC3                 pop     rax
.text:0000000000003FC4                 pop     rdx
.text:0000000000003FC5                 add     rsp, 28h
.text:0000000000003FC9                 pop     rbx
.text:0000000000003FCA                 pop     rbp
.text:0000000000003FCB                 pop     r12
.text:0000000000003FCD                 pop     r13
.text:0000000000003FCF                 pop     r14
.text:0000000000003FD1                 pop     r15
.text:0000000000003FD3                 retn
.text:0000000000003FD3 ; ---------------------------------------------------------------------------
.text:0000000000003FD4                 align 8
.text:0000000000003FD8
.text:0000000000003FD8 loc_3FD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FD8                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000003FD8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003D94 case 5
.text:0000000000003FDC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003FE3                 mov     edx, 5          ; category
.text:0000000000003FE8                 xor     edi, edi        ; domainname
.text:0000000000003FEA                 mov     r14, [rbx+18h]
.text:0000000000003FEE                 mov     r13, [rbx+10h]
.text:0000000000003FF2                 mov     r12, [rbx+8]
.text:0000000000003FF6                 mov     rbx, [rbx]
.text:0000000000003FF9                 call    _dcgettext
.text:0000000000003FFE                 push    r15
.text:0000000000004000                 jmp     short loc_3FA6
.text:0000000000004000 ; ---------------------------------------------------------------------------
.text:0000000000004002                 align 8
.text:0000000000004008
.text:0000000000004008 loc_4008:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004008                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000004008                 mov     r8, [rbx+8]     ; jumptable 0000000000003D94 case 6
.text:000000000000400C                 mov     r12, [rbx+28h]
.text:0000000000004010                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004017                 mov     r15, [rbx+20h]
.text:000000000000401B                 mov     r14, [rbx+18h]
.text:000000000000401F                 mov     edx, 5          ; category
.text:0000000000004024                 mov     r13, [rbx+10h]
.text:0000000000004028                 xor     edi, edi        ; domainname
.text:000000000000402A                 mov     rbx, [rbx]
.text:000000000000402D                 mov     [rsp+58h+var_58], r8
.text:0000000000004031                 call    _dcgettext
.text:0000000000004036                 sub     rsp, 8
.text:000000000000403A                 mov     r9, r13
.text:000000000000403D                 push    r12
.text:000000000000403F                 push    r15
.text:0000000000004041                 push    r14
.text:0000000000004043
.text:0000000000004043 loc_4043:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004043                 mov     r8, [rsp+78h+var_58]
.text:0000000000004048                 mov     rcx, rbx
.text:000000000000404B                 mov     rdx, rax
.text:000000000000404E                 mov     rdi, rbp
.text:0000000000004051                 mov     esi, 1
.text:0000000000004056                 xor     eax, eax
.text:0000000000004058                 call    ___fprintf_chk
.text:000000000000405D                 add     rsp, 20h
.text:0000000000004061                 add     rsp, 28h
.text:0000000000004065                 pop     rbx
.text:0000000000004066                 pop     rbp
.text:0000000000004067                 pop     r12
.text:0000000000004069                 pop     r13
.text:000000000000406B                 pop     r14
.text:000000000000406D                 pop     r15
.text:000000000000406F                 retn
.text:0000000000004070 ; ---------------------------------------------------------------------------
.text:0000000000004070
.text:0000000000004070 loc_4070:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004070                                         ; DATA XREF: .rodata:jpt_3D94↓o
.text:0000000000004070                 mov     r9, [rbx+10h]   ; jumptable 0000000000003D94 case 7
.text:0000000000004074                 mov     r13, [rbx+30h]
.text:0000000000004078                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000407F                 mov     r12, [rbx+28h]
.text:0000000000004083                 mov     r15, [rbx+20h]
.text:0000000000004087                 mov     edx, 5          ; category
.text:000000000000408C                 mov     r14, [rbx+18h]
.text:0000000000004090                 mov     r8, [rbx+8]
.text:0000000000004094                 xor     edi, edi        ; domainname
.text:0000000000004096                 mov     [rsp+58h+var_50], r9
.text:000000000000409B                 mov     rbx, [rbx]
.text:000000000000409E                 mov     [rsp+58h+var_58], r8
.text:00000000000040A2                 call    _dcgettext
.text:00000000000040A7                 push    r13
.text:00000000000040A9                 push    r12
.text:00000000000040AB                 push    r15
.text:00000000000040AD                 push    r14
.text:00000000000040AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000040B4                 jmp     short loc_4043
.text:00000000000040B4 ; ---------------------------------------------------------------------------
.text:00000000000040B6                 align 20h
.text:00000000000040C0
.text:00000000000040C0 def_3D94:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000040C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D94 default case
.text:00000000000040C4                 mov     r9, [rbx+38h]
.text:00000000000040C8                 mov     edx, 5
.text:00000000000040CD                 mov     rax, [rbx+10h]
.text:00000000000040D1                 mov     r8, [rbx+8]
.text:00000000000040D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000040DC                 mov     r13, [rbx+30h]
.text:00000000000040E0                 mov     r12, [rbx+28h]
.text:00000000000040E4                 mov     r15, [rbx+20h]
.text:00000000000040E8                 mov     r14, [rbx+18h]
.text:00000000000040EC                 mov     [rsp+58h+var_40], r10
.text:00000000000040F1                 mov     [rsp+58h+var_48], r9
.text:00000000000040F6                 mov     [rsp+58h+var_58], rax
.text:00000000000040FA                 mov     [rsp+58h+var_50], r8
.text:00000000000040FF                 mov     rbx, [rbx]
.text:0000000000004102                 jmp     loc_3E92
.text:0000000000004102 ; } // starts at 3CF0
.text:0000000000004102 version_etc_arn endp
.text:0000000000004102
.text:0000000000004102 ; ---------------------------------------------------------------------------
.text:0000000000004107                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110 ; Attributes: info_from_lumina
.text:0000000000004110
.text:0000000000004110 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004110                 public version_etc_ar
.text:0000000000004110 version_etc_ar  proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 xor     r9d, r9d
.text:0000000000004113                 cmp     qword ptr [r8], 0
.text:0000000000004117                 jz      short loc_412B
.text:0000000000004119                 nop     dword ptr [rax+00000000h]
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004120                 add     r9, 1
.text:0000000000004124                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004129                 jnz     short loc_4120
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000412B                 jmp     version_etc_arn
.text:000000000000412B ; } // starts at 4110
.text:000000000000412B version_etc_ar  endp
.text:000000000000412B
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130 ; Attributes: info_from_lumina
.text:0000000000004130
.text:0000000000004130 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004130                 public version_etc_va
.text:0000000000004130 version_etc_va  proc near
.text:0000000000004130
.text:0000000000004130 authtab         = qword ptr -68h
.text:0000000000004130 var_10          = qword ptr -10h
.text:0000000000004130
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 sub     rsp, 68h
.text:0000000000004134                 mov     r10, r8
.text:0000000000004137                 xor     r9d, r9d
.text:000000000000413A                 mov     rax, fs:28h
.text:0000000000004143                 mov     [rsp+68h+var_10], rax
.text:0000000000004148                 xor     eax, eax
.text:000000000000414A                 mov     r8, rsp
.text:000000000000414D                 nop     dword ptr [rax]
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004150                 mov     eax, [r10]
.text:0000000000004153                 cmp     eax, 2Fh ; '/'
.text:0000000000004156                 ja      short loc_419A
.text:0000000000004158                 mov     r11d, eax
.text:000000000000415B                 add     r11, [r10+10h]
.text:000000000000415F                 add     eax, 8
.text:0000000000004162                 mov     [r10], eax
.text:0000000000004165
.text:0000000000004165 loc_4165:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004165                 mov     rax, [r11]
.text:0000000000004168                 test    rax, rax
.text:000000000000416B                 mov     [r8+r9*8], rax
.text:000000000000416F                 jz      short loc_417B
.text:0000000000004171                 add     r9, 1
.text:0000000000004175                 cmp     r9, 0Ah
.text:0000000000004179                 jnz     short loc_4150
.text:000000000000417B
.text:000000000000417B loc_417B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000417B                 call    version_etc_arn
.text:0000000000004180                 mov     rax, [rsp+68h+var_10]
.text:0000000000004185                 xor     rax, fs:28h
.text:000000000000418E                 jnz     short loc_4195
.text:0000000000004190                 add     rsp, 68h
.text:0000000000004194                 retn
.text:0000000000004195 ; ---------------------------------------------------------------------------
.text:0000000000004195
.text:0000000000004195 loc_4195:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004195                 call    ___stack_chk_fail
.text:000000000000419A ; ---------------------------------------------------------------------------
.text:000000000000419A
.text:000000000000419A loc_419A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000419A                 mov     r11, [r10+8]
.text:000000000000419E                 lea     rax, [r11+8]
.text:00000000000041A2                 mov     [r10+8], rax
.text:00000000000041A6                 jmp     short loc_4165
.text:00000000000041A6 ; } // starts at 4130
.text:00000000000041A6 version_etc_va  endp
.text:00000000000041A6
.text:00000000000041A6 ; ---------------------------------------------------------------------------
.text:00000000000041A8                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0 ; Attributes: info_from_lumina
.text:00000000000041B0
.text:00000000000041B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000041B0                 public version_etc
.text:00000000000041B0 version_etc     proc near               ; CODE XREF: main+157↑p
.text:00000000000041B0                                         ; main+264↑p
.text:00000000000041B0
.text:00000000000041B0 var_C0          = dword ptr -0C0h
.text:00000000000041B0 var_B8          = qword ptr -0B8h
.text:00000000000041B0 var_B0          = qword ptr -0B0h
.text:00000000000041B0 var_A8          = byte ptr -0A8h
.text:00000000000041B0 var_50          = qword ptr -50h
.text:00000000000041B0 var_48          = byte ptr -48h
.text:00000000000041B0 var_28          = qword ptr -28h
.text:00000000000041B0 var_20          = qword ptr -20h
.text:00000000000041B0 arg_0           = byte ptr  8
.text:00000000000041B0
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 push    rbp
.text:00000000000041B1                 push    rbx
.text:00000000000041B2                 mov     r10d, 20h ; ' '
.text:00000000000041B8                 xor     r11d, r11d
.text:00000000000041BB                 sub     rsp, 0B8h
.text:00000000000041C2                 mov     rax, fs:28h
.text:00000000000041CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000041D0                 xor     eax, eax
.text:00000000000041D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000041DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000041E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000041EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000041EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000041F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000041FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004204                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000420C                 xor     r9d, r9d
.text:000000000000420F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004214                 mov     rbp, rax
.text:0000000000004217                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004220                 cmp     r10d, 2Fh ; '/'
.text:0000000000004224                 ja      short loc_427C
.text:0000000000004226                 mov     eax, r10d
.text:0000000000004229                 mov     r11d, 1
.text:000000000000422F                 add     r10d, 8
.text:0000000000004233                 add     rax, rbp
.text:0000000000004236
.text:0000000000004236 loc_4236:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004236                 mov     rax, [rax]
.text:0000000000004239                 test    rax, rax
.text:000000000000423C                 mov     [r8+r9*8], rax
.text:0000000000004240                 jz      short loc_424C
.text:0000000000004242                 add     r9, 1
.text:0000000000004246                 cmp     r9, 0Ah
.text:000000000000424A                 jnz     short loc_4220
.text:000000000000424C
.text:000000000000424C loc_424C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000424C                 test    r11b, r11b
.text:000000000000424F                 jnz     short loc_4275
.text:0000000000004251
.text:0000000000004251 loc_4251:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004251                 call    version_etc_arn
.text:0000000000004256                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000425B                 xor     rax, fs:28h
.text:0000000000004264                 jnz     short loc_4270
.text:0000000000004266                 add     rsp, 0B8h
.text:000000000000426D                 pop     rbx
.text:000000000000426E                 pop     rbp
.text:000000000000426F                 retn
.text:0000000000004270 ; ---------------------------------------------------------------------------
.text:0000000000004270
.text:0000000000004270 loc_4270:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004270                 call    ___stack_chk_fail
.text:0000000000004275 ; ---------------------------------------------------------------------------
.text:0000000000004275
.text:0000000000004275 loc_4275:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004275                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000427A                 jmp     short loc_4251
.text:000000000000427C ; ---------------------------------------------------------------------------
.text:000000000000427C
.text:000000000000427C loc_427C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000427C                 mov     rax, rbx
.text:000000000000427F                 add     rbx, 8
.text:0000000000004283                 jmp     short loc_4236
.text:0000000000004283 ; } // starts at 41B0
.text:0000000000004283 version_etc     endp
.text:0000000000004283
.text:0000000000004283 ; ---------------------------------------------------------------------------
.text:0000000000004285                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004290                 public emit_bug_reporting_address
.text:0000000000004290 emit_bug_reporting_address proc near
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 push    rbx
.text:0000000000004291                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004298                 mov     edx, 5          ; category
.text:000000000000429D                 xor     edi, edi        ; domainname
.text:000000000000429F                 call    _dcgettext
.text:00000000000042A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000042AB                 mov     rsi, rax
.text:00000000000042AE                 mov     edi, 1
.text:00000000000042B3                 xor     eax, eax
.text:00000000000042B5                 call    ___printf_chk
.text:00000000000042BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000042C1                 mov     edx, 5          ; category
.text:00000000000042C6                 xor     edi, edi        ; domainname
.text:00000000000042C8                 call    _dcgettext
.text:00000000000042CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000042D4                 lea     rdx, unk_49DA
.text:00000000000042DB                 mov     rsi, rax
.text:00000000000042DE                 mov     edi, 1
.text:00000000000042E3                 xor     eax, eax
.text:00000000000042E5                 call    ___printf_chk
.text:00000000000042EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000042F8                 xor     edi, edi        ; domainname
.text:00000000000042FA                 mov     edx, 5          ; category
.text:00000000000042FF                 call    _dcgettext
.text:0000000000004304                 mov     rsi, rbx        ; stream
.text:0000000000004307                 mov     rdi, rax        ; s
.text:000000000000430A                 pop     rbx
.text:000000000000430B                 jmp     _fputs_unlocked
.text:000000000000430B ; } // starts at 4290
.text:000000000000430B emit_bug_reporting_address endp
.text:000000000000430B
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310
.text:0000000000004310                 public xmalloc
.text:0000000000004310 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004310                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 push    rbx
.text:0000000000004311                 mov     rbx, rdi
.text:0000000000004314                 call    _malloc
.text:0000000000004319                 test    rax, rax
.text:000000000000431C                 jnz     short loc_4323
.text:000000000000431E                 test    rbx, rbx
.text:0000000000004321                 jnz     short loc_4325
.text:0000000000004323
.text:0000000000004323 loc_4323:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004323                 pop     rbx
.text:0000000000004324                 retn
.text:0000000000004325 ; ---------------------------------------------------------------------------
.text:0000000000004325
.text:0000000000004325 loc_4325:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004325                 call    xalloc_die
.text:0000000000004325 ; } // starts at 4310
.text:0000000000004325 xmalloc         endp
.text:0000000000004325
.text:0000000000004325 ; ---------------------------------------------------------------------------
.text:000000000000432A                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330 ; Attributes: info_from_lumina
.text:0000000000004330
.text:0000000000004330 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004330                 public xnmalloc
.text:0000000000004330 xnmalloc        proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 mov     rax, rdi
.text:0000000000004333                 mul     rsi
.text:0000000000004336                 mov     rdi, rax
.text:0000000000004339                 seto    al
.text:000000000000433C                 test    rdi, rdi
.text:000000000000433F                 js      short loc_434B
.text:0000000000004341                 movzx   eax, al
.text:0000000000004344                 test    rax, rax
.text:0000000000004347                 jnz     short loc_434B
.text:0000000000004349                 jmp     short xmalloc
.text:000000000000434B ; ---------------------------------------------------------------------------
.text:000000000000434B
.text:000000000000434B loc_434B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000434B                                         ; xnmalloc+17↑j
.text:000000000000434B                 sub     rsp, 8
.text:000000000000434F                 call    xalloc_die
.text:000000000000434F ; } // starts at 4330
.text:000000000000434F xnmalloc        endp
.text:000000000000434F
.text:000000000000434F ; ---------------------------------------------------------------------------
.text:0000000000004354                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public xcharalloc
.text:0000000000004360 xcharalloc      proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 jmp     short xmalloc
.text:0000000000004360 ; } // starts at 4360
.text:0000000000004360 xcharalloc      endp
.text:0000000000004360
.text:0000000000004360 ; ---------------------------------------------------------------------------
.text:0000000000004362                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370 ; Attributes: info_from_lumina
.text:0000000000004370
.text:0000000000004370 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004370                 public xrealloc
.text:0000000000004370 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004370                                         ; quotearg_n_options+182↑p ...
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 test    rsi, rsi
.text:0000000000004373                 push    rbx
.text:0000000000004374                 mov     rbx, rsi
.text:0000000000004377                 jnz     short loc_437E
.text:0000000000004379                 test    rdi, rdi
.text:000000000000437C                 jnz     short loc_4398
.text:000000000000437E
.text:000000000000437E loc_437E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000437E                 mov     rsi, rbx        ; size
.text:0000000000004381                 call    _realloc
.text:0000000000004386                 test    rax, rax
.text:0000000000004389                 jnz     short loc_4390
.text:000000000000438B                 test    rbx, rbx
.text:000000000000438E                 jnz     short loc_43A1
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004390                 pop     rbx
.text:0000000000004391                 retn
.text:0000000000004391 ; ---------------------------------------------------------------------------
.text:0000000000004392                 align 8
.text:0000000000004398
.text:0000000000004398 loc_4398:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004398                 call    _free
.text:000000000000439D                 xor     eax, eax
.text:000000000000439F                 pop     rbx
.text:00000000000043A0                 retn
.text:00000000000043A1 ; ---------------------------------------------------------------------------
.text:00000000000043A1
.text:00000000000043A1 loc_43A1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000043A1                 call    xalloc_die
.text:00000000000043A1 ; } // starts at 4370
.text:00000000000043A1 xrealloc        endp
.text:00000000000043A1
.text:00000000000043A1 ; ---------------------------------------------------------------------------
.text:00000000000043A6                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0 ; Attributes: info_from_lumina
.text:00000000000043B0
.text:00000000000043B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000043B0                 public xnrealloc
.text:00000000000043B0 xnrealloc       proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 mov     rax, rsi
.text:00000000000043B3                 mul     rdx
.text:00000000000043B6                 mov     rsi, rax
.text:00000000000043B9                 seto    al
.text:00000000000043BC                 test    rsi, rsi
.text:00000000000043BF                 js      short loc_43CB
.text:00000000000043C1                 movzx   eax, al
.text:00000000000043C4                 test    rax, rax
.text:00000000000043C7                 jnz     short loc_43CB
.text:00000000000043C9                 jmp     short xrealloc
.text:00000000000043CB ; ---------------------------------------------------------------------------
.text:00000000000043CB
.text:00000000000043CB loc_43CB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000043CB                                         ; xnrealloc+17↑j
.text:00000000000043CB                 sub     rsp, 8
.text:00000000000043CF                 call    xalloc_die
.text:00000000000043CF ; } // starts at 43B0
.text:00000000000043CF xnrealloc       endp
.text:00000000000043CF
.text:00000000000043CF ; ---------------------------------------------------------------------------
.text:00000000000043D4                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000043E0                 public x2nrealloc
.text:00000000000043E0 x2nrealloc      proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 test    rdi, rdi
.text:00000000000043E3                 mov     r9, rdx
.text:00000000000043E6                 mov     rcx, [rsi]
.text:00000000000043E9                 jz      short loc_4420
.text:00000000000043EB                 xor     edx, edx
.text:00000000000043ED                 mov     rax, 5555555555555554h
.text:00000000000043F7                 div     r9
.text:00000000000043FA                 cmp     rax, rcx
.text:00000000000043FD                 jbe     short loc_443B
.text:00000000000043FF                 mov     rax, rcx
.text:0000000000004402                 shr     rax, 1
.text:0000000000004405                 lea     rcx, [rax+rcx+1]
.text:000000000000440A
.text:000000000000440A loc_440A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000440A                 mov     [rsi], rcx
.text:000000000000440D                 imul    rcx, r9
.text:0000000000004411                 mov     rsi, rcx
.text:0000000000004414                 jmp     xrealloc
.text:0000000000004414 ; ---------------------------------------------------------------------------
.text:0000000000004419                 align 20h
.text:0000000000004420
.text:0000000000004420 loc_4420:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004420                 test    rcx, rcx
.text:0000000000004423                 jz      short loc_4448
.text:0000000000004425
.text:0000000000004425 loc_4425:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004425                 mov     rax, rcx
.text:0000000000004428                 mul     r9
.text:000000000000442B                 seto    dl
.text:000000000000442E                 test    rax, rax
.text:0000000000004431                 movzx   edx, dl
.text:0000000000004434                 js      short loc_443B
.text:0000000000004436                 test    rdx, rdx
.text:0000000000004439                 jz      short loc_440A
.text:000000000000443B
.text:000000000000443B loc_443B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000443B                                         ; x2nrealloc+54↑j
.text:000000000000443B                 sub     rsp, 8
.text:000000000000443F                 call    xalloc_die
.text:000000000000443F ; ---------------------------------------------------------------------------
.text:0000000000004444                 align 8
.text:0000000000004448
.text:0000000000004448 loc_4448:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004448                 xor     edx, edx
.text:000000000000444A                 mov     eax, 80h
.text:000000000000444F                 xor     r8d, r8d
.text:0000000000004452                 div     r9
.text:0000000000004455                 test    rax, rax
.text:0000000000004458                 setz    r8b
.text:000000000000445C                 lea     rcx, [r8+rax]
.text:0000000000004460                 jmp     short loc_4425
.text:0000000000004460 ; } // starts at 43E0
.text:0000000000004460 x2nrealloc      endp
.text:0000000000004460
.text:0000000000004460 ; ---------------------------------------------------------------------------
.text:0000000000004462                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470 ; Attributes: info_from_lumina
.text:0000000000004470
.text:0000000000004470 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004470                 public x2realloc
.text:0000000000004470 x2realloc       proc near
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 test    rdi, rdi
.text:0000000000004473                 mov     rax, [rsi]
.text:0000000000004476                 jz      short loc_44A0
.text:0000000000004478                 mov     rdx, 5555555555555553h
.text:0000000000004482                 cmp     rax, rdx
.text:0000000000004485                 ja      short loc_44B1
.text:0000000000004487                 mov     rdx, rax
.text:000000000000448A                 shr     rdx, 1
.text:000000000000448D                 lea     rax, [rdx+rax+1]
.text:0000000000004492
.text:0000000000004492 loc_4492:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004492                 mov     [rsi], rax
.text:0000000000004495                 mov     rsi, rax
.text:0000000000004498                 jmp     xrealloc
.text:0000000000004498 ; ---------------------------------------------------------------------------
.text:000000000000449D                 align 20h
.text:00000000000044A0
.text:00000000000044A0 loc_44A0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000044A0                 test    rax, rax
.text:00000000000044A3                 mov     edx, 80h
.text:00000000000044A8                 cmovz   rax, rdx
.text:00000000000044AC                 test    rax, rax
.text:00000000000044AF                 jns     short loc_4492
.text:00000000000044B1
.text:00000000000044B1 loc_44B1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000044B1                 sub     rsp, 8
.text:00000000000044B5                 call    xalloc_die
.text:00000000000044B5 ; } // starts at 4470
.text:00000000000044B5 x2realloc       endp
.text:00000000000044B5
.text:00000000000044B5 ; ---------------------------------------------------------------------------
.text:00000000000044BA                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0
.text:00000000000044C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000044C0                 public xzalloc
.text:00000000000044C0 xzalloc         proc near
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 push    rbx
.text:00000000000044C1                 mov     rbx, rdi
.text:00000000000044C4                 call    xmalloc
.text:00000000000044C9                 mov     rdx, rbx        ; n
.text:00000000000044CC                 xor     esi, esi        ; c
.text:00000000000044CE                 mov     rdi, rax        ; s
.text:00000000000044D1                 pop     rbx
.text:00000000000044D2                 jmp     _memset
.text:00000000000044D2 ; } // starts at 44C0
.text:00000000000044D2 xzalloc         endp
.text:00000000000044D2
.text:00000000000044D2 ; ---------------------------------------------------------------------------
.text:00000000000044D7                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0 ; Attributes: info_from_lumina
.text:00000000000044E0
.text:00000000000044E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000044E0                 public xcalloc
.text:00000000000044E0 xcalloc         proc near
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 mov     rax, rdi
.text:00000000000044E3                 sub     rsp, 8
.text:00000000000044E7                 mul     rsi
.text:00000000000044EA                 seto    dl
.text:00000000000044ED                 test    rax, rax
.text:00000000000044F0                 js      short loc_4509
.text:00000000000044F2                 movzx   edx, dl
.text:00000000000044F5                 test    rdx, rdx
.text:00000000000044F8                 jnz     short loc_4509
.text:00000000000044FA                 call    _calloc
.text:00000000000044FF                 test    rax, rax
.text:0000000000004502                 jz      short loc_4509
.text:0000000000004504                 add     rsp, 8
.text:0000000000004508                 retn
.text:0000000000004509 ; ---------------------------------------------------------------------------
.text:0000000000004509
.text:0000000000004509 loc_4509:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004509                                         ; xcalloc+18↑j ...
.text:0000000000004509                 call    xalloc_die
.text:0000000000004509 ; } // starts at 44E0
.text:0000000000004509 xcalloc         endp
.text:0000000000004509
.text:0000000000004509 ; ---------------------------------------------------------------------------
.text:000000000000450E                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004510                 public xmemdup
.text:0000000000004510 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004510                                         ; xstrdup+11↓j
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 push    rbp
.text:0000000000004511                 push    rbx
.text:0000000000004512                 mov     rbp, rdi
.text:0000000000004515                 mov     rdi, rsi
.text:0000000000004518                 mov     rbx, rsi
.text:000000000000451B                 sub     rsp, 8
.text:000000000000451F                 call    xmalloc
.text:0000000000004524                 add     rsp, 8
.text:0000000000004528                 mov     rdx, rbx        ; n
.text:000000000000452B                 mov     rsi, rbp        ; src
.text:000000000000452E                 pop     rbx
.text:000000000000452F                 pop     rbp
.text:0000000000004530                 mov     rdi, rax        ; dest
.text:0000000000004533                 jmp     _memcpy
.text:0000000000004533 ; } // starts at 4510
.text:0000000000004533 xmemdup         endp
.text:0000000000004533
.text:0000000000004533 ; ---------------------------------------------------------------------------
.text:0000000000004538                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540
.text:0000000000004540 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004540                 public xstrdup
.text:0000000000004540 xstrdup         proc near
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 push    rbx
.text:0000000000004541                 mov     rbx, rdi
.text:0000000000004544                 call    _strlen
.text:0000000000004549                 mov     rdi, rbx        ; src
.text:000000000000454C                 lea     rsi, [rax+1]    ; n
.text:0000000000004550                 pop     rbx
.text:0000000000004551                 jmp     short xmemdup
.text:0000000000004551 ; } // starts at 4540
.text:0000000000004551 xstrdup         endp
.text:0000000000004551
.text:0000000000004551 ; ---------------------------------------------------------------------------
.text:0000000000004553                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560 ; Attributes: noreturn info_from_lumina
.text:0000000000004560
.text:0000000000004560 ; void __cdecl xalloc_die()
.text:0000000000004560                 public xalloc_die
.text:0000000000004560 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3536↑p
.text:0000000000004560                                         ; xmalloc:loc_4325↑p ...
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004567                 sub     rsp, 8
.text:000000000000456B                 mov     edx, 5          ; category
.text:0000000000004570                 xor     edi, edi        ; domainname
.text:0000000000004572                 call    _dcgettext
.text:0000000000004577                 mov     edi, cs:exit_failure ; status
.text:000000000000457D                 lea     rdx, format+4   ; format
.text:0000000000004584                 mov     rcx, rax
.text:0000000000004587                 xor     esi, esi        ; errnum
.text:0000000000004589                 xor     eax, eax
.text:000000000000458B                 call    _error
.text:0000000000004590                 call    _abort
.text:0000000000004590 ; } // starts at 4560
.text:0000000000004590 xalloc_die      endp
.text:0000000000004590
.text:0000000000004590 ; ---------------------------------------------------------------------------
.text:0000000000004595                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000045A0                 public rpl_mbrtowc
.text:00000000000045A0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000045A0
.text:00000000000045A0 pwc             = dword ptr -34h
.text:00000000000045A0 var_30          = qword ptr -30h
.text:00000000000045A0
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 push    r13
.text:00000000000045A2                 push    r12
.text:00000000000045A4                 mov     r13, rsi
.text:00000000000045A7                 push    rbp
.text:00000000000045A8                 push    rbx
.text:00000000000045A9                 mov     rbx, rdi
.text:00000000000045AC                 mov     r12, rdx
.text:00000000000045AF                 sub     rsp, 18h
.text:00000000000045B3                 mov     rax, fs:28h
.text:00000000000045BC                 mov     [rsp+38h+var_30], rax
.text:00000000000045C1                 xor     eax, eax
.text:00000000000045C3                 lea     rax, [rsp+38h+pwc]
.text:00000000000045C8                 test    rdi, rdi
.text:00000000000045CB                 cmovz   rbx, rax
.text:00000000000045CF                 mov     rdi, rbx        ; pwc
.text:00000000000045D2                 call    _mbrtowc
.text:00000000000045D7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000045DB                 mov     rbp, rax
.text:00000000000045DE                 jbe     short loc_4600
.text:00000000000045E0                 test    r12, r12
.text:00000000000045E3                 jz      short loc_4600
.text:00000000000045E5                 xor     edi, edi
.text:00000000000045E7                 call    hard_locale
.text:00000000000045EC                 test    al, al
.text:00000000000045EE                 jnz     short loc_4600
.text:00000000000045F0                 movzx   eax, byte ptr [r13+0]
.text:00000000000045F5                 mov     ebp, 1
.text:00000000000045FA                 mov     [rbx], eax
.text:00000000000045FC                 nop     dword ptr [rax+00h]
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004600                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004600                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004605                 xor     rdx, fs:28h
.text:000000000000460E                 mov     rax, rbp
.text:0000000000004611                 jnz     short loc_461E
.text:0000000000004613                 add     rsp, 18h
.text:0000000000004617                 pop     rbx
.text:0000000000004618                 pop     rbp
.text:0000000000004619                 pop     r12
.text:000000000000461B                 pop     r13
.text:000000000000461D                 retn
.text:000000000000461E ; ---------------------------------------------------------------------------
.text:000000000000461E
.text:000000000000461E loc_461E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000461E                 call    ___stack_chk_fail
.text:000000000000461E ; } // starts at 45A0
.text:000000000000461E rpl_mbrtowc     endp
.text:000000000000461E
.text:000000000000461E ; ---------------------------------------------------------------------------
.text:0000000000004623                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630 ; Attributes: info_from_lumina
.text:0000000000004630
.text:0000000000004630 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004630                 public close_stream
.text:0000000000004630 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004630                                         ; close_stdout+33↑p
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 push    r12
.text:0000000000004632                 push    rbp
.text:0000000000004633                 mov     rbp, rdi
.text:0000000000004636                 push    rbx
.text:0000000000004637                 call    ___fpending
.text:000000000000463C                 mov     ebx, [rbp+0]
.text:000000000000463F                 mov     rdi, rbp        ; stream
.text:0000000000004642                 mov     r12, rax
.text:0000000000004645                 call    rpl_fclose
.text:000000000000464A                 and     ebx, 20h
.text:000000000000464D                 test    ebx, ebx
.text:000000000000464F                 jnz     short loc_4668
.text:0000000000004651                 test    eax, eax
.text:0000000000004653                 jz      short loc_465F
.text:0000000000004655                 test    r12, r12
.text:0000000000004658                 mov     eax, 0FFFFFFFFh
.text:000000000000465D                 jz      short loc_4698
.text:000000000000465F
.text:000000000000465F loc_465F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000465F                 pop     rbx
.text:0000000000004660                 pop     rbp
.text:0000000000004661                 pop     r12
.text:0000000000004663                 retn
.text:0000000000004663 ; ---------------------------------------------------------------------------
.text:0000000000004664                 align 8
.text:0000000000004668
.text:0000000000004668 loc_4668:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004668                 test    eax, eax
.text:000000000000466A                 jnz     short loc_4688
.text:000000000000466C                 call    ___errno_location
.text:0000000000004671                 mov     dword ptr [rax], 0
.text:0000000000004677                 mov     eax, 0FFFFFFFFh
.text:000000000000467C                 pop     rbx
.text:000000000000467D                 pop     rbp
.text:000000000000467E                 pop     r12
.text:0000000000004680                 retn
.text:0000000000004680 ; ---------------------------------------------------------------------------
.text:0000000000004681                 align 8
.text:0000000000004688
.text:0000000000004688 loc_4688:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004688                 pop     rbx
.text:0000000000004689                 mov     eax, 0FFFFFFFFh
.text:000000000000468E                 pop     rbp
.text:000000000000468F                 pop     r12
.text:0000000000004691                 retn
.text:0000000000004691 ; ---------------------------------------------------------------------------
.text:0000000000004692                 align 8
.text:0000000000004698
.text:0000000000004698 loc_4698:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004698                 call    ___errno_location
.text:000000000000469D                 cmp     dword ptr [rax], 9
.text:00000000000046A0                 pop     rbx
.text:00000000000046A1                 pop     rbp
.text:00000000000046A2                 pop     r12
.text:00000000000046A4                 setnz   al
.text:00000000000046A7                 movzx   eax, al
.text:00000000000046AA                 neg     eax
.text:00000000000046AC                 retn
.text:00000000000046AC ; } // starts at 4630
.text:00000000000046AC close_stream    endp
.text:00000000000046AC
.text:00000000000046AC ; ---------------------------------------------------------------------------
.text:00000000000046AD                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0                 public hard_locale
.text:00000000000046B0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 sub     rsp, 8
.text:00000000000046B4                 xor     esi, esi        ; locale
.text:00000000000046B6                 call    _setlocale
.text:00000000000046BB                 mov     rdx, rax
.text:00000000000046BE                 mov     eax, 1
.text:00000000000046C3                 test    rdx, rdx
.text:00000000000046C6                 jz      short loc_46E5
.text:00000000000046C8                 lea     rdi, aC         ; "C"
.text:00000000000046CF                 mov     ecx, 2
.text:00000000000046D4                 mov     rsi, rdx
.text:00000000000046D7                 repe cmpsb
.text:00000000000046D9                 setnbe  cl
.text:00000000000046DC                 sbb     cl, 0
.text:00000000000046DF                 xor     eax, eax
.text:00000000000046E1                 test    cl, cl
.text:00000000000046E3                 jnz     short loc_46F0
.text:00000000000046E5
.text:00000000000046E5 loc_46E5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000046E5                 add     rsp, 8
.text:00000000000046E9                 retn
.text:00000000000046E9 ; ---------------------------------------------------------------------------
.text:00000000000046EA                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000046F0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000046F7                 mov     ecx, 6
.text:00000000000046FC                 mov     rsi, rdx
.text:00000000000046FF                 repe cmpsb
.text:0000000000004701                 setnbe  al
.text:0000000000004704                 sbb     al, 0
.text:0000000000004706                 test    al, al
.text:0000000000004708                 setnz   al
.text:000000000000470B                 add     rsp, 8
.text:000000000000470F                 retn
.text:000000000000470F ; } // starts at 46B0
.text:000000000000470F hard_locale     endp
.text:000000000000470F
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710
.text:0000000000004710                 public locale_charset
.text:0000000000004710 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 sub     rsp, 8
.text:0000000000004714                 mov     edi, 0Eh        ; item
.text:0000000000004719                 call    _nl_langinfo
.text:000000000000471E                 test    rax, rax
.text:0000000000004721                 jz      short loc_4740
.text:0000000000004723                 cmp     byte ptr [rax], 0
.text:0000000000004726                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000472D                 cmovz   rax, rdx
.text:0000000000004731                 add     rsp, 8
.text:0000000000004735                 retn
.text:0000000000004735 ; ---------------------------------------------------------------------------
.text:0000000000004736                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004740                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004747                 add     rsp, 8
.text:000000000000474B                 retn
.text:000000000000474B ; } // starts at 4710
.text:000000000000474B locale_charset  endp
.text:000000000000474B
.text:000000000000474B ; ---------------------------------------------------------------------------
.text:000000000000474C                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750 ; Attributes: info_from_lumina
.text:0000000000004750
.text:0000000000004750 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004750                 public rpl_fclose
.text:0000000000004750 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 push    r12
.text:0000000000004752                 push    rbp
.text:0000000000004753                 push    rbx
.text:0000000000004754                 mov     rbx, rdi
.text:0000000000004757                 call    _fileno
.text:000000000000475C                 test    eax, eax
.text:000000000000475E                 mov     rdi, rbx        ; fp
.text:0000000000004761                 js      short loc_47B7
.text:0000000000004763                 call    ___freading
.text:0000000000004768                 test    eax, eax
.text:000000000000476A                 jnz     short loc_4798
.text:000000000000476C
.text:000000000000476C loc_476C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000476C                 mov     rdi, rbx        ; stream
.text:000000000000476F                 call    rpl_fflush
.text:0000000000004774                 test    eax, eax
.text:0000000000004776                 jz      short loc_47B4
.text:0000000000004778                 call    ___errno_location
.text:000000000000477D                 mov     r12d, [rax]
.text:0000000000004780                 mov     rdi, rbx        ; stream
.text:0000000000004783                 mov     rbp, rax
.text:0000000000004786                 call    _fclose
.text:000000000000478B                 test    r12d, r12d
.text:000000000000478E                 jnz     short loc_47C0
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004790                 pop     rbx
.text:0000000000004791                 pop     rbp
.text:0000000000004792                 pop     r12
.text:0000000000004794                 retn
.text:0000000000004794 ; ---------------------------------------------------------------------------
.text:0000000000004795                 align 8
.text:0000000000004798
.text:0000000000004798 loc_4798:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004798                 mov     rdi, rbx        ; stream
.text:000000000000479B                 call    _fileno
.text:00000000000047A0                 xor     esi, esi        ; offset
.text:00000000000047A2                 mov     edx, 1          ; whence
.text:00000000000047A7                 mov     edi, eax        ; fd
.text:00000000000047A9                 call    _lseek
.text:00000000000047AE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000047B2                 jnz     short loc_476C
.text:00000000000047B4
.text:00000000000047B4 loc_47B4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000047B4                 mov     rdi, rbx        ; stream
.text:00000000000047B7
.text:00000000000047B7 loc_47B7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000047B7                 pop     rbx
.text:00000000000047B8                 pop     rbp
.text:00000000000047B9                 pop     r12
.text:00000000000047BB                 jmp     _fclose
.text:00000000000047C0 ; ---------------------------------------------------------------------------
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000047C0                 mov     [rbp+0], r12d
.text:00000000000047C4                 mov     eax, 0FFFFFFFFh
.text:00000000000047C9                 jmp     short loc_4790
.text:00000000000047C9 ; } // starts at 4750
.text:00000000000047C9 rpl_fclose      endp
.text:00000000000047C9
.text:00000000000047C9 ; ---------------------------------------------------------------------------
.text:00000000000047CB                 align 10h
.text:00000000000047D0
.text:00000000000047D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047D0
.text:00000000000047D0 ; Attributes: info_from_lumina
.text:00000000000047D0
.text:00000000000047D0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000047D0                 public rpl_fflush
.text:00000000000047D0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000047D0 ; __unwind {
.text:00000000000047D0                 test    rdi, rdi
.text:00000000000047D3                 push    rbx
.text:00000000000047D4                 mov     rbx, rdi
.text:00000000000047D7                 jz      short loc_47EA
.text:00000000000047D9                 call    ___freading
.text:00000000000047DE                 test    eax, eax
.text:00000000000047E0                 jz      short loc_47EA
.text:00000000000047E2                 test    dword ptr [rbx], 100h
.text:00000000000047E8                 jnz     short loc_47F8
.text:00000000000047EA
.text:00000000000047EA loc_47EA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000047EA                                         ; rpl_fflush+10↑j
.text:00000000000047EA                 mov     rdi, rbx        ; stream
.text:00000000000047ED                 pop     rbx
.text:00000000000047EE                 jmp     _fflush
.text:00000000000047EE ; ---------------------------------------------------------------------------
.text:00000000000047F3                 align 8
.text:00000000000047F8
.text:00000000000047F8 loc_47F8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000047F8                 mov     rdi, rbx
.text:00000000000047FB                 mov     edx, 1
.text:0000000000004800                 xor     esi, esi
.text:0000000000004802                 call    rpl_fseeko
.text:0000000000004807                 mov     rdi, rbx        ; stream
.text:000000000000480A                 pop     rbx
.text:000000000000480B                 jmp     _fflush
.text:000000000000480B ; } // starts at 47D0
.text:000000000000480B rpl_fflush      endp
.text:000000000000480B
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810 ; Attributes: info_from_lumina
.text:0000000000004810
.text:0000000000004810 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004810                 public rpl_fseeko
.text:0000000000004810 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 mov     rax, [rdi+8]
.text:0000000000004814                 cmp     [rdi+10h], rax
.text:0000000000004818                 jz      short loc_4820
.text:000000000000481A
.text:000000000000481A loc_481A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000481A                                         ; rpl_fseeko+1F↓j
.text:000000000000481A                 jmp     _fseeko
.text:000000000000481A ; ---------------------------------------------------------------------------
.text:000000000000481F                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004820                 mov     rax, [rdi+20h]
.text:0000000000004824                 cmp     [rdi+28h], rax
.text:0000000000004828                 jnz     short loc_481A
.text:000000000000482A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000482F                 jnz     short loc_481A
.text:0000000000004831                 push    r12
.text:0000000000004833                 push    rbp
.text:0000000000004834                 mov     r12d, edx
.text:0000000000004837                 push    rbx
.text:0000000000004838                 mov     rbp, rsi
.text:000000000000483B                 mov     rbx, rdi
.text:000000000000483E                 call    _fileno
.text:0000000000004843                 mov     edx, r12d       ; whence
.text:0000000000004846                 mov     rsi, rbp        ; offset
.text:0000000000004849                 mov     edi, eax        ; fd
.text:000000000000484B                 call    _lseek
.text:0000000000004850                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004854                 jz      short loc_4862
.text:0000000000004856                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004859                 mov     [rbx+90h], rax
.text:0000000000004860                 xor     eax, eax
.text:0000000000004862
.text:0000000000004862 loc_4862:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004862                 pop     rbx
.text:0000000000004863                 pop     rbp
.text:0000000000004864                 pop     r12
.text:0000000000004866                 retn
.text:0000000000004866 ; } // starts at 4810
.text:0000000000004866 rpl_fseeko      endp
.text:0000000000004866
.text:0000000000004866 ; ---------------------------------------------------------------------------
.text:0000000000004867                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870 ; Attributes: info_from_lumina
.text:0000000000004870
.text:0000000000004870 ; void _libc_csu_init(void)
.text:0000000000004870                 public __libc_csu_init
.text:0000000000004870 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 push    r15
.text:0000000000004872                 push    r14
.text:0000000000004874                 mov     r15, rdx
.text:0000000000004877                 push    r13
.text:0000000000004879                 push    r12
.text:000000000000487B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004882                 push    rbp
.text:0000000000004883                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000488A                 push    rbx
.text:000000000000488B                 mov     r13d, edi
.text:000000000000488E                 mov     r14, rsi
.text:0000000000004891                 sub     rbp, r12
.text:0000000000004894                 sub     rsp, 8
.text:0000000000004898                 sar     rbp, 3
.text:000000000000489C                 call    _init_proc
.text:00000000000048A1                 test    rbp, rbp
.text:00000000000048A4                 jz      short loc_48C6
.text:00000000000048A6                 xor     ebx, ebx
.text:00000000000048A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000048B0                 mov     rdx, r15
.text:00000000000048B3                 mov     rsi, r14
.text:00000000000048B6                 mov     edi, r13d
.text:00000000000048B9                 call    ds:(__frame_dummy_init_array_entry - 2069F0h)[r12+rbx*8]
.text:00000000000048BD                 add     rbx, 1
.text:00000000000048C1                 cmp     rbp, rbx
.text:00000000000048C4                 jnz     short loc_48B0
.text:00000000000048C6
.text:00000000000048C6 loc_48C6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000048C6                 add     rsp, 8
.text:00000000000048CA                 pop     rbx
.text:00000000000048CB                 pop     rbp
.text:00000000000048CC                 pop     r12
.text:00000000000048CE                 pop     r13
.text:00000000000048D0                 pop     r14
.text:00000000000048D2                 pop     r15
.text:00000000000048D4                 retn
.text:00000000000048D4 ; } // starts at 4870
.text:00000000000048D4 __libc_csu_init endp
.text:00000000000048D4
.text:00000000000048D4 ; ---------------------------------------------------------------------------
.text:00000000000048D5                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0
.text:00000000000048E0 ; void _libc_csu_fini(void)
.text:00000000000048E0                 public __libc_csu_fini
.text:00000000000048E0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 rep retn
.text:00000000000048E0 ; } // starts at 48E0
.text:00000000000048E0 __libc_csu_fini endp
.text:00000000000048E0
.text:00000000000048E0 ; ---------------------------------------------------------------------------
.text:00000000000048E2                 align 10h
.text:00000000000048F0
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0
.text:00000000000048F0
.text:00000000000048F0 atexit          proc near               ; CODE XREF: main+65↑p
.text:00000000000048F0 ; __unwind {
.text:00000000000048F0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000048F7                 xor     esi, esi        ; obj
.text:00000000000048F9                 jmp     ___cxa_atexit
.text:00000000000048F9 ; } // starts at 48F0
.text:00000000000048F9 atexit          endp
.text:00000000000048F9
.text:00000000000048F9 _text           ends
.text:00000000000048F9
LOAD:00000000000048FE ; ===========================================================================
LOAD:00000000000048FE
LOAD:00000000000048FE ; Segment type: Pure code
LOAD:00000000000048FE ; Segment permissions: Read/Execute
LOAD:00000000000048FE LOAD            segment byte public 'CODE' use64
LOAD:00000000000048FE                 assume cs:LOAD
LOAD:00000000000048FE                 ;org 48FEh
LOAD:00000000000048FE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000048FE                 align 20h
LOAD:00000000000048FE LOAD            ends
LOAD:00000000000048FE
.fini:0000000000004900 ; ===========================================================================
.fini:0000000000004900
.fini:0000000000004900 ; Segment type: Pure code
.fini:0000000000004900 ; Segment permissions: Read/Execute
.fini:0000000000004900 _fini           segment dword public 'CODE' use64
.fini:0000000000004900                 assume cs:_fini
.fini:0000000000004900                 ;org 4900h
.fini:0000000000004900                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004900
.fini:0000000000004900 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004900
.fini:0000000000004900
.fini:0000000000004900                 public _term_proc
.fini:0000000000004900 _term_proc      proc near
.fini:0000000000004900                 sub     rsp, 8          ; _fini
.fini:0000000000004904                 add     rsp, 8
.fini:0000000000004908                 retn
.fini:0000000000004908 _term_proc      endp
.fini:0000000000004908
.fini:0000000000004908 _fini           ends
.fini:0000000000004908
LOAD:0000000000004909 ; ===========================================================================
LOAD:0000000000004909
LOAD:0000000000004909 ; Segment type: Pure code
LOAD:0000000000004909 ; Segment permissions: Read/Execute
LOAD:0000000000004909 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004909                 assume cs:LOAD
LOAD:0000000000004909                 ;org 4909h
LOAD:0000000000004909                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004909                 align 20h
LOAD:0000000000004909 LOAD            ends
LOAD:0000000000004909
.rodata:0000000000004920 ; ===========================================================================
.rodata:0000000000004920
.rodata:0000000000004920 ; Segment type: Pure data
.rodata:0000000000004920 ; Segment permissions: Read
.rodata:0000000000004920 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004920                 assume cs:_rodata
.rodata:0000000000004920                 ;org 4920h
.rodata:0000000000004920                 public _IO_stdin_used
.rodata:0000000000004920 _IO_stdin_used  db    1
.rodata:0000000000004921                 db    0
.rodata:0000000000004922                 db    2
.rodata:0000000000004923                 db    0
.rodata:0000000000004924 ; const char s1[]
.rodata:0000000000004924 s1              db 'uname',0            ; DATA XREF: main+132↑o
.rodata:0000000000004924                                         ; main+22E↑o ...
.rodata:000000000000492A aArch           db 'arch',0             ; DATA XREF: main+124↑o
.rodata:000000000000492A                                         ; main+227↑o ...
.rodata:000000000000492F asc_492F        db '[',0                ; DATA XREF: usage+11A↑o
.rodata:0000000000004931 ; const char aUsageSOption[]
.rodata:0000000000004931 aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.rodata:0000000000004931                                         ; DATA XREF: usage:loc_1BCF↑o
.rodata:0000000000004948 ; const char aPrintMachineAr[]
.rodata:0000000000004948 aPrintMachineAr db 'Print machine architecture.',0Ah
.rodata:0000000000004948                                         ; DATA XREF: usage+92↑o
.rodata:0000000000004948                 db 0Ah,0
.rodata:0000000000004966 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+147↑o
.rodata:0000000000004976 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004976                                         ; DATA XREF: usage+170↑o
.rodata:0000000000004976                                         ; usage+259↑o ...
.rodata:000000000000498C aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+17C↑o
.rodata:0000000000004996 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+188↑o
.rodata:00000000000049A5 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+113↑o
.rodata:00000000000049AF aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+138↑o
.rodata:00000000000049B9 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+153↑o
.rodata:00000000000049C3 ; const char aSOnlineHelpS[]
.rodata:00000000000049C3 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1CB↑o
.rodata:00000000000049C3                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000049DA unk_49DA        db  47h ; G             ; DATA XREF: main+147↑o
.rodata:00000000000049DA                                         ; main+251↑o ...
.rodata:00000000000049DB                 db  4Eh ; N
.rodata:00000000000049DC                 db  55h ; U
.rodata:00000000000049DD                 db  20h
.rodata:00000000000049DE ; const char domainname[]
.rodata:00000000000049DE domainname      db 'coreutils',0        ; DATA XREF: main+46↑o
.rodata:00000000000049DE                                         ; main+52↑o ...
.rodata:00000000000049E8 ; const char s2[]
.rodata:00000000000049E8 s2              db 'en_',0              ; DATA XREF: usage+20E↑o
.rodata:00000000000049E8                                         ; usage+2FC↑o
.rodata:00000000000049EC ; const char aFullDocumentat[]
.rodata:00000000000049EC aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000049EC                                         ; DATA XREF: usage:loc_1D9A↑o
.rodata:00000000000049EC                                         ; usage:loc_1E84↑o
.rodata:0000000000004A07 ; const char dirname[]
.rodata:0000000000004A07 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004A07                                         ; DATA XREF: main+3F↑o
.rodata:0000000000004A1F aKarelZak       db 'Karel Zak',0        ; DATA XREF: main+243↑o
.rodata:0000000000004A29 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+140↑o
.rodata:0000000000004A29                                         ; main+24A↑o
.rodata:0000000000004A39 ; const char shortopts[]
.rodata:0000000000004A39 shortopts       db 'asnrvmpio',0        ; DATA XREF: main:loc_1680↑o
.rodata:0000000000004A43 ; const char aExtraOperandS[]
.rodata:0000000000004A43 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+3D1↑o
.rodata:0000000000004A54 ; const char msgid[]
.rodata:0000000000004A54 msgid           db 'cannot get system name',0
.rodata:0000000000004A54                                         ; DATA XREF: main:loc_17C4↑o
.rodata:0000000000004A6B ; const char s[]
.rodata:0000000000004A6B s               db 'GNU/Linux',0        ; DATA XREF: main:loc_1949↑o
.rodata:0000000000004A75 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:arch_long_options↓o
.rodata:0000000000004A75                                         ; .data.rel.ro:0000000000206BC0↓o
.rodata:0000000000004A7A aAll            db 'all',0              ; DATA XREF: .data.rel.ro:uname_long_options↓o
.rodata:0000000000004A7E aKernelName     db 'kernel-name',0      ; DATA XREF: .data.rel.ro:0000000000206A80↓o
.rodata:0000000000004A8A aSysname        db 'sysname',0          ; DATA XREF: .data.rel.ro:0000000000206AA0↓o
.rodata:0000000000004A92 aNodename       db 'nodename',0         ; DATA XREF: .data.rel.ro:0000000000206AC0↓o
.rodata:0000000000004A9B aKernelRelease  db 'kernel-release',0   ; DATA XREF: .data.rel.ro:0000000000206AE0↓o
.rodata:0000000000004A9B                                         ; .data.rel.ro:0000000000206B00↓o
.rodata:0000000000004AAA aKernelVersion  db 'kernel-version',0   ; DATA XREF: .data.rel.ro:0000000000206B20↓o
.rodata:0000000000004AAA                                         ; .data.rel.ro:0000000000206A20↓o ...
.rodata:0000000000004AB9 aMachine        db 'machine',0          ; DATA XREF: .data.rel.ro:0000000000206B40↓o
.rodata:0000000000004AC1 aProcessor      db 'processor',0        ; DATA XREF: .data.rel.ro:0000000000206B60↓o
.rodata:0000000000004ACB aHardwarePlatfo db 'hardware-platform',0
.rodata:0000000000004ACB                                         ; DATA XREF: .data.rel.ro:0000000000206B80↓o
.rodata:0000000000004ADD aOperatingSyste db 'operating-system',0 ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:0000000000004AEE                 align 10h
.rodata:0000000000004AF0 ; const char aTrySHelpForMor[]
.rodata:0000000000004AF0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004AF0                                         ; DATA XREF: usage+30↑o
.rodata:0000000000004B17                 align 8
.rodata:0000000000004B18 ; const char aPrintCertainSy[]
.rodata:0000000000004B18 aPrintCertainSy db 'Print certain system information.  With no OPTION, same as -s.',0Ah
.rodata:0000000000004B18                                         ; DATA XREF: usage:loc_1E08↑o
.rodata:0000000000004B18                 db 0Ah
.rodata:0000000000004B18                 db '  -a, --all                print all information, in the followin'
.rodata:0000000000004B18                 db 'g order,',0Ah
.rodata:0000000000004B18                 db '                             except omit -p and -i if unknown:',0Ah
.rodata:0000000000004B18                 db '  -s, --kernel-name        print the kernel name',0Ah
.rodata:0000000000004B18                 db '  -n, --nodename           print the network node hostname',0Ah
.rodata:0000000000004B18                 db '  -r, --kernel-release     print the kernel release',0Ah,0
.rodata:0000000000004C82                 align 8
.rodata:0000000000004C88 aVKernelVersion db '  -v, --kernel-version     print the kernel version',0Ah
.rodata:0000000000004C88                                         ; DATA XREF: usage+2BD↑o
.rodata:0000000000004C88                 db '  -m, --machine            print the machine hardware name',0Ah
.rodata:0000000000004C88                 db '  -p, --processor          print the processor type (non-portable'
.rodata:0000000000004C88                 db ')',0Ah
.rodata:0000000000004C88                 db '  -i, --hardware-platform  print the hardware platform (non-porta'
.rodata:0000000000004C88                 db 'ble)',0Ah
.rodata:0000000000004C88                 db '  -o, --operating-system   print the operating system',0Ah,0
.rodata:0000000000004DB7                 align 8
.rodata:0000000000004DB8 ; const char aHelpDisplayThi[]
.rodata:0000000000004DB8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004DB8                                         ; DATA XREF: usage+BF↑o
.rodata:0000000000004DE5                 align 8
.rodata:0000000000004DE8 ; const char aVersionOutputV[]
.rodata:0000000000004DE8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004DE8                                         ; DATA XREF: usage+E4↑o
.rodata:0000000000004E1E                 align 20h
.rodata:0000000000004E20 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004E20                                         ; DATA XREF: usage+1E0↑o
.rodata:0000000000004E20                                         ; usage+23D↑o ...
.rodata:0000000000004E48 ; const char aReportAnyTrans[]
.rodata:0000000000004E48 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004E48                                         ; DATA XREF: usage+359↑o
.rodata:0000000000004E48                 db 'am/>',0Ah,0
.rodata:0000000000004E8F                 align 10h
.rodata:0000000000004E90 ; const char aOrAvailableLoc[]
.rodata:0000000000004E90 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004E90                                         ; DATA XREF: usage:loc_1DDB↑o
.rodata:0000000000004EC3                 align 8
.rodata:0000000000004EC8 ; const char unknown_7592[]
.rodata:0000000000004EC8 unknown_7592    db 'unknown',0          ; DATA XREF: main+28A↑o
.rodata:0000000000004EC8                                         ; main+2A0↑o
.rodata:0000000000004ED0 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004ED5 ; const char aWriteError[]
.rodata:0000000000004ED5 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1F53↑o
.rodata:0000000000004EE1 ; const char format[]
.rodata:0000000000004EE1 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004EE1                                         ; close_stdout+8F↑o ...
.rodata:0000000000004EE8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004EE8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004F20 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004F28 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004F2C unk_4F2C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004F2D                 db  80h
.rodata:0000000000004F2E                 db  98h
.rodata:0000000000004F2F                 db    0
.rodata:0000000000004F30 unk_4F30        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004F31                 db  80h
.rodata:0000000000004F32                 db  99h
.rodata:0000000000004F33                 db    0
.rodata:0000000000004F34 unk_4F34        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004F35                 db    7
.rodata:0000000000004F36                 db  65h ; e
.rodata:0000000000004F37                 db    0
.rodata:0000000000004F38 unk_4F38        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004F39                 db 0AFh
.rodata:0000000000004F3A                 db    0
.rodata:0000000000004F3B unk_4F3B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2080↑o
.rodata:0000000000004F3B                                         ; quotearg_buffer_restyled:loc_2E3B↑o ...
.rodata:0000000000004F3C                 db    0
.rodata:0000000000004F3D ; const char asc_4F3D[2]
.rodata:0000000000004F3D asc_4F3D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004F3D                                         ; quotearg_buffer_restyled:loc_2203↑o ...
.rodata:0000000000004F3F ; const char asc_4F3F[2]
.rodata:0000000000004F3F asc_4F3F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004F3F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004F41 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004F49 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004F4F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004F5C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004F5C                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004F69 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004F69                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004F7D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004F7F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004F87 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004F8F                 align 20h
.rodata:0000000000004FA0 jpt_21E1        dd offset loc_2F8A - 4FA0h
.rodata:0000000000004FA0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004FA0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004FA0                 dd offset loc_21E3 - 4FA0h ; jump table for switch statement
.rodata:0000000000004FA0                 dd offset loc_31B8 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2FC4 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2DB4 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2E10 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2E65 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2EAA - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2EE4 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2EE4 - 4FA0h
.rodata:0000000000004FA0                 dd offset loc_2EE4 - 4FA0h
.rodata:0000000000004FCC jpt_233E        dd offset loc_2560 - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004FCC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh ; jump table for switch statement
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset loc_25A0 - 4FCCh, offset loc_24A8 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2468 - 4FCCh, offset loc_2630 - 4FCCh, offset loc_2620 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2610 - 4FCCh, offset loc_2600 - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset def_233E - 4FCCh
.rodata:0000000000004FCC                 dd offset def_233E - 4FCCh, offset def_233E - 4FCCh, offset loc_25F0 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_25E0 - 4FCCh, offset loc_25E0 - 4FCCh, offset loc_25B0 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_25E0 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_25E0 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2443 - 4FCCh, offset loc_25E0 - 4FCCh, offset loc_25E0 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_25E0 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_25E0 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_25E0 - 4FCCh, offset loc_25E0 - 4FCCh, offset loc_25E0 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2413 - 4FCCh, offset def_233E - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_25E0 - 4FCCh, offset loc_24B8 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_25E0 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_25E0 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh, offset loc_2588 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_2343 - 4FCCh, offset loc_25E0 - 4FCCh, offset loc_2343 - 4FCCh
.rodata:0000000000004FCC                 dd offset loc_25B0 - 4FCCh
.rodata:00000000000051C8 jpt_26CA        dd offset loc_2730 - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000051C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h ; jump table for switch statement
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset loc_2720 - 51C8h, offset loc_2870 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2858 - 51C8h, offset loc_2708 - 51C8h, offset loc_2848 - 51C8h
.rodata:00000000000051C8                 dd offset loc_26F0 - 51C8h, offset loc_2830 - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset def_26CA - 51C8h
.rodata:00000000000051C8                 dd offset def_26CA - 51C8h, offset def_26CA - 51C8h, offset loc_2818 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2800 - 51C8h, offset loc_2800 - 51C8h, offset loc_27E8 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2800 - 51C8h, offset loc_27D0 - 51C8h, offset loc_2800 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2440 - 51C8h, offset loc_2800 - 51C8h, offset loc_2800 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2800 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_2800 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2800 - 51C8h, offset loc_2800 - 51C8h, offset loc_2800 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2410 - 51C8h, offset def_26CA - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_2800 - 51C8h, offset loc_26D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_2800 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2800 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h, offset loc_27D0 - 51C8h
.rodata:00000000000051C8                 dd offset loc_2340 - 51C8h, offset loc_2800 - 51C8h, offset loc_2340 - 51C8h
.rodata:00000000000051C8                 dd offset loc_27E8 - 51C8h
.rodata:00000000000053C4                 align 20h
.rodata:00000000000053E0                 public quoting_style_vals
.rodata:00000000000053E0 quoting_style_vals db    0
.rodata:00000000000053E1                 db    0
.rodata:00000000000053E2                 db    0
.rodata:00000000000053E3                 db    0
.rodata:00000000000053E4                 db    1
.rodata:00000000000053E5                 db    0
.rodata:00000000000053E6                 db    0
.rodata:00000000000053E7                 db    0
.rodata:00000000000053E8                 db    2
.rodata:00000000000053E9                 db    0
.rodata:00000000000053EA                 db    0
.rodata:00000000000053EB                 db    0
.rodata:00000000000053EC                 db    3
.rodata:00000000000053ED                 db    0
.rodata:00000000000053EE                 db    0
.rodata:00000000000053EF                 db    0
.rodata:00000000000053F0                 db    4
.rodata:00000000000053F1                 db    0
.rodata:00000000000053F2                 db    0
.rodata:00000000000053F3                 db    0
.rodata:00000000000053F4                 db    5
.rodata:00000000000053F5                 db    0
.rodata:00000000000053F6                 db    0
.rodata:00000000000053F7                 db    0
.rodata:00000000000053F8                 db    6
.rodata:00000000000053F9                 db    0
.rodata:00000000000053FA                 db    0
.rodata:00000000000053FB                 db    0
.rodata:00000000000053FC                 db    7
.rodata:00000000000053FD                 db    0
.rodata:00000000000053FE                 db    0
.rodata:00000000000053FF                 db    0
.rodata:0000000000005400                 db    8
.rodata:0000000000005401                 db    0
.rodata:0000000000005402                 db    0
.rodata:0000000000005403                 db    0
.rodata:0000000000005404                 db    9
.rodata:0000000000005405                 db    0
.rodata:0000000000005406                 db    0
.rodata:0000000000005407                 db    0
.rodata:0000000000005408 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005414 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000541B ; const char aC_0[]
.rodata:000000000000541B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3D2C↑o
.rodata:000000000000541F ; const char aWrittenByS[]
.rodata:000000000000541F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000541F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000542F ; const char aWrittenBySAndS[]
.rodata:000000000000542F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000542F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005446 ; const char aWrittenBySSAnd[]
.rodata:0000000000005446 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005446                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005462 ; const char aReportBugsToS[]
.rodata:0000000000005462 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005462                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005477 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005477                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000548D ; const char aSHomePageS[]
.rodata:000000000000548D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000548D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000054A1                 align 8
.rodata:00000000000054A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000054A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000054A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000054A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000054A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000054A8                 db '.',0Ah
.rodata:00000000000054A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000054A8                 db 0Ah,0
.rodata:0000000000005574                 align 8
.rodata:0000000000005578 ; const char aWrittenBySSSAn[]
.rodata:0000000000005578 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005578                                         ; DATA XREF: version_etc_arn:loc_3F80↑o
.rodata:0000000000005578                 db 'and %s.',0Ah,0
.rodata:0000000000005598 ; const char aWrittenBySSSSA[]
.rodata:0000000000005598 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005598                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005598                 db '%s, and %s.',0Ah,0
.rodata:00000000000055BC                 align 20h
.rodata:00000000000055C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000055C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000055C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000055C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000055E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000055E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000055E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000055E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005614                 align 8
.rodata:0000000000005618 ; const char aWrittenBySSSSS[]
.rodata:0000000000005618 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005618                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005618                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005618                 db 'and %s.',0Ah,0
.rodata:0000000000005648 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005648 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005648                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005648                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005648                 db '%s, and %s.',0Ah,0
.rodata:000000000000567C                 align 20h
.rodata:0000000000005680 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005680                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005680                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005680                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000056BC                 align 20h
.rodata:00000000000056C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000056C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000056C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000056C0                 db 0
.rodata:0000000000005701                 align 8
.rodata:0000000000005708 jpt_3D94        dd offset loc_3E16 - 5708h
.rodata:0000000000005708                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005708                                         ; version_etc_arn+9D↑r
.rodata:0000000000005708                 dd offset loc_3EA8 - 5708h ; jump table for switch statement
.rodata:0000000000005708                 dd offset loc_3EE8 - 5708h
.rodata:0000000000005708                 dd offset loc_3F30 - 5708h
.rodata:0000000000005708                 dd offset loc_3F80 - 5708h
.rodata:0000000000005708                 dd offset loc_3FD8 - 5708h
.rodata:0000000000005708                 dd offset loc_4008 - 5708h
.rodata:0000000000005708                 dd offset loc_4070 - 5708h
.rodata:0000000000005708                 dd offset loc_3DA0 - 5708h
.rodata:0000000000005708                 dd offset loc_3E50 - 5708h
.rodata:0000000000005730                 align 20h
.rodata:0000000000005740                 public version_etc_copyright
.rodata:0000000000005740 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005740                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000576F ; const char aMemoryExhauste[]
.rodata:000000000000576F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005780 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005782 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_46F0↑o
.rodata:0000000000005788 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005788                                         ; locale_charset:loc_4740↑o
.rodata:0000000000005788 _rodata         ends
.rodata:0000000000005788
LOAD:000000000000578E ; ===========================================================================
LOAD:000000000000578E
LOAD:000000000000578E ; Segment type: Pure code
LOAD:000000000000578E ; Segment permissions: Read/Execute
LOAD:000000000000578E LOAD            segment byte public 'CODE' use64
LOAD:000000000000578E                 assume cs:LOAD
LOAD:000000000000578E                 ;org 578Eh
LOAD:000000000000578E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000578E                 align 10h
LOAD:000000000000578E LOAD            ends
LOAD:000000000000578E
.eh_frame_hdr:0000000000005790 ; ===========================================================================
.eh_frame_hdr:0000000000005790
.eh_frame_hdr:0000000000005790 ; Segment type: Pure data
.eh_frame_hdr:0000000000005790 ; Segment permissions: Read
.eh_frame_hdr:0000000000005790 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005790                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005790                 ;org 5790h
.eh_frame_hdr:0000000000005790 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005791                 db  1Bh
.eh_frame_hdr:0000000000005792                 db    3
.eh_frame_hdr:0000000000005793                 db  3Bh ; ;
.eh_frame_hdr:0000000000005794                 db  44h ; D
.eh_frame_hdr:0000000000005795                 db    2
.eh_frame_hdr:0000000000005796                 db    0
.eh_frame_hdr:0000000000005797                 db    0
.eh_frame_hdr:0000000000005798                 db  47h ; G
.eh_frame_hdr:0000000000005799                 db    0
.eh_frame_hdr:000000000000579A                 db    0
.eh_frame_hdr:000000000000579B                 db    0
.eh_frame_hdr:000000000000579C                 db 0B0h
.eh_frame_hdr:000000000000579D                 db 0BBh
.eh_frame_hdr:000000000000579E                 db 0FFh
.eh_frame_hdr:000000000000579F                 db 0FFh
.eh_frame_hdr:00000000000057A0                 db  90h
.eh_frame_hdr:00000000000057A1                 db    2
.eh_frame_hdr:00000000000057A2                 db    0
.eh_frame_hdr:00000000000057A3                 db    0
.eh_frame_hdr:00000000000057A4                 db  60h ; `
.eh_frame_hdr:00000000000057A5                 db 0BEh
.eh_frame_hdr:00000000000057A6                 db 0FFh
.eh_frame_hdr:00000000000057A7                 db 0FFh
.eh_frame_hdr:00000000000057A8                 db 0B8h
.eh_frame_hdr:00000000000057A9                 db    2
.eh_frame_hdr:00000000000057AA                 db    0
.eh_frame_hdr:00000000000057AB                 db    0
.eh_frame_hdr:00000000000057AC                 db  70h ; p
.eh_frame_hdr:00000000000057AD                 db 0BEh
.eh_frame_hdr:00000000000057AE                 db 0FFh
.eh_frame_hdr:00000000000057AF                 db 0FFh
.eh_frame_hdr:00000000000057B0                 db  18h
.eh_frame_hdr:00000000000057B1                 db    3
.eh_frame_hdr:00000000000057B2                 db    0
.eh_frame_hdr:00000000000057B3                 db    0
.eh_frame_hdr:00000000000057B4                 db  80h
.eh_frame_hdr:00000000000057B5                 db 0C2h
.eh_frame_hdr:00000000000057B6                 db 0FFh
.eh_frame_hdr:00000000000057B7                 db 0FFh
.eh_frame_hdr:00000000000057B8                 db  60h ; `
.eh_frame_hdr:00000000000057B9                 db    2
.eh_frame_hdr:00000000000057BA                 db    0
.eh_frame_hdr:00000000000057BB                 db    0
.eh_frame_hdr:00000000000057BC                 db  90h
.eh_frame_hdr:00000000000057BD                 db 0C3h
.eh_frame_hdr:00000000000057BE                 db 0FFh
.eh_frame_hdr:00000000000057BF                 db 0FFh
.eh_frame_hdr:00000000000057C0                 db 0D0h
.eh_frame_hdr:00000000000057C1                 db    2
.eh_frame_hdr:00000000000057C2                 db    0
.eh_frame_hdr:00000000000057C3                 db    0
.eh_frame_hdr:00000000000057C4                 db 0E0h
.eh_frame_hdr:00000000000057C5                 db 0C3h
.eh_frame_hdr:00000000000057C6                 db 0FFh
.eh_frame_hdr:00000000000057C7                 db 0FFh
.eh_frame_hdr:00000000000057C8                 db 0ECh
.eh_frame_hdr:00000000000057C9                 db    2
.eh_frame_hdr:00000000000057CA                 db    0
.eh_frame_hdr:00000000000057CB                 db    0
.eh_frame_hdr:00000000000057CC                 db  60h ; `
.eh_frame_hdr:00000000000057CD                 db 0C7h
.eh_frame_hdr:00000000000057CE                 db 0FFh
.eh_frame_hdr:00000000000057CF                 db 0FFh
.eh_frame_hdr:00000000000057D0                 db  68h ; h
.eh_frame_hdr:00000000000057D1                 db    3
.eh_frame_hdr:00000000000057D2                 db    0
.eh_frame_hdr:00000000000057D3                 db    0
.eh_frame_hdr:00000000000057D4                 db  70h ; p
.eh_frame_hdr:00000000000057D5                 db 0C7h
.eh_frame_hdr:00000000000057D6                 db 0FFh
.eh_frame_hdr:00000000000057D7                 db 0FFh
.eh_frame_hdr:00000000000057D8                 db  7Ch ; |
.eh_frame_hdr:00000000000057D9                 db    3
.eh_frame_hdr:00000000000057DA                 db    0
.eh_frame_hdr:00000000000057DB                 db    0
.eh_frame_hdr:00000000000057DC                 db  80h
.eh_frame_hdr:00000000000057DD                 db 0C7h
.eh_frame_hdr:00000000000057DE                 db 0FFh
.eh_frame_hdr:00000000000057DF                 db 0FFh
.eh_frame_hdr:00000000000057E0                 db  90h
.eh_frame_hdr:00000000000057E1                 db    3
.eh_frame_hdr:00000000000057E2                 db    0
.eh_frame_hdr:00000000000057E3                 db    0
.eh_frame_hdr:00000000000057E4                 db  30h ; 0
.eh_frame_hdr:00000000000057E5                 db 0C8h
.eh_frame_hdr:00000000000057E6                 db 0FFh
.eh_frame_hdr:00000000000057E7                 db 0FFh
.eh_frame_hdr:00000000000057E8                 db 0C0h
.eh_frame_hdr:00000000000057E9                 db    3
.eh_frame_hdr:00000000000057EA                 db    0
.eh_frame_hdr:00000000000057EB                 db    0
.eh_frame_hdr:00000000000057EC                 db 0D0h
.eh_frame_hdr:00000000000057ED                 db 0C8h
.eh_frame_hdr:00000000000057EE                 db 0FFh
.eh_frame_hdr:00000000000057EF                 db 0FFh
.eh_frame_hdr:00000000000057F0                 db 0E0h
.eh_frame_hdr:00000000000057F1                 db    3
.eh_frame_hdr:00000000000057F2                 db    0
.eh_frame_hdr:00000000000057F3                 db    0
.eh_frame_hdr:00000000000057F4                 db 0C0h
.eh_frame_hdr:00000000000057F5                 db 0C9h
.eh_frame_hdr:00000000000057F6                 db 0FFh
.eh_frame_hdr:00000000000057F7                 db 0FFh
.eh_frame_hdr:00000000000057F8                 db  24h ; $
.eh_frame_hdr:00000000000057F9                 db    4
.eh_frame_hdr:00000000000057FA                 db    0
.eh_frame_hdr:00000000000057FB                 db    0
.eh_frame_hdr:00000000000057FC                 db    0
.eh_frame_hdr:00000000000057FD                 db 0DCh
.eh_frame_hdr:00000000000057FE                 db 0FFh
.eh_frame_hdr:00000000000057FF                 db 0FFh
.eh_frame_hdr:0000000000005800                 db  9Ch
.eh_frame_hdr:0000000000005801                 db    4
.eh_frame_hdr:0000000000005802                 db    0
.eh_frame_hdr:0000000000005803                 db    0
.eh_frame_hdr:0000000000005804                 db 0B0h
.eh_frame_hdr:0000000000005805                 db 0DDh
.eh_frame_hdr:0000000000005806                 db 0FFh
.eh_frame_hdr:0000000000005807                 db 0FFh
.eh_frame_hdr:0000000000005808                 db    8
.eh_frame_hdr:0000000000005809                 db    5
.eh_frame_hdr:000000000000580A                 db    0
.eh_frame_hdr:000000000000580B                 db    0
.eh_frame_hdr:000000000000580C                 db 0F0h
.eh_frame_hdr:000000000000580D                 db 0DDh
.eh_frame_hdr:000000000000580E                 db 0FFh
.eh_frame_hdr:000000000000580F                 db 0FFh
.eh_frame_hdr:0000000000005810                 db  34h ; 4
.eh_frame_hdr:0000000000005811                 db    5
.eh_frame_hdr:0000000000005812                 db    0
.eh_frame_hdr:0000000000005813                 db    0
.eh_frame_hdr:0000000000005814                 db  10h
.eh_frame_hdr:0000000000005815                 db 0DEh
.eh_frame_hdr:0000000000005816                 db 0FFh
.eh_frame_hdr:0000000000005817                 db 0FFh
.eh_frame_hdr:0000000000005818                 db  48h ; H
.eh_frame_hdr:0000000000005819                 db    5
.eh_frame_hdr:000000000000581A                 db    0
.eh_frame_hdr:000000000000581B                 db    0
.eh_frame_hdr:000000000000581C                 db  30h ; 0
.eh_frame_hdr:000000000000581D                 db 0DEh
.eh_frame_hdr:000000000000581E                 db 0FFh
.eh_frame_hdr:000000000000581F                 db 0FFh
.eh_frame_hdr:0000000000005820                 db  5Ch ; \
.eh_frame_hdr:0000000000005821                 db    5
.eh_frame_hdr:0000000000005822                 db    0
.eh_frame_hdr:0000000000005823                 db    0
.eh_frame_hdr:0000000000005824                 db  70h ; p
.eh_frame_hdr:0000000000005825                 db 0DEh
.eh_frame_hdr:0000000000005826                 db 0FFh
.eh_frame_hdr:0000000000005827                 db 0FFh
.eh_frame_hdr:0000000000005828                 db  70h ; p
.eh_frame_hdr:0000000000005829                 db    5
.eh_frame_hdr:000000000000582A                 db    0
.eh_frame_hdr:000000000000582B                 db    0
.eh_frame_hdr:000000000000582C                 db  90h
.eh_frame_hdr:000000000000582D                 db 0DEh
.eh_frame_hdr:000000000000582E                 db 0FFh
.eh_frame_hdr:000000000000582F                 db 0FFh
.eh_frame_hdr:0000000000005830                 db  84h
.eh_frame_hdr:0000000000005831                 db    5
.eh_frame_hdr:0000000000005832                 db    0
.eh_frame_hdr:0000000000005833                 db    0
.eh_frame_hdr:0000000000005834                 db 0C0h
.eh_frame_hdr:0000000000005835                 db 0DEh
.eh_frame_hdr:0000000000005836                 db 0FFh
.eh_frame_hdr:0000000000005837                 db 0FFh
.eh_frame_hdr:0000000000005838                 db  98h
.eh_frame_hdr:0000000000005839                 db    5
.eh_frame_hdr:000000000000583A                 db    0
.eh_frame_hdr:000000000000583B                 db    0
.eh_frame_hdr:000000000000583C                 db  40h ; @
.eh_frame_hdr:000000000000583D                 db 0DFh
.eh_frame_hdr:000000000000583E                 db 0FFh
.eh_frame_hdr:000000000000583F                 db 0FFh
.eh_frame_hdr:0000000000005840                 db 0ECh
.eh_frame_hdr:0000000000005841                 db    5
.eh_frame_hdr:0000000000005842                 db    0
.eh_frame_hdr:0000000000005843                 db    0
.eh_frame_hdr:0000000000005844                 db  30h ; 0
.eh_frame_hdr:0000000000005845                 db 0E0h
.eh_frame_hdr:0000000000005846                 db 0FFh
.eh_frame_hdr:0000000000005847                 db 0FFh
.eh_frame_hdr:0000000000005848                 db  58h ; X
.eh_frame_hdr:0000000000005849                 db    6
.eh_frame_hdr:000000000000584A                 db    0
.eh_frame_hdr:000000000000584B                 db    0
.eh_frame_hdr:000000000000584C                 db  40h ; @
.eh_frame_hdr:000000000000584D                 db 0E0h
.eh_frame_hdr:000000000000584E                 db 0FFh
.eh_frame_hdr:000000000000584F                 db 0FFh
.eh_frame_hdr:0000000000005850                 db  6Ch ; l
.eh_frame_hdr:0000000000005851                 db    6
.eh_frame_hdr:0000000000005852                 db    0
.eh_frame_hdr:0000000000005853                 db    0
.eh_frame_hdr:0000000000005854                 db 0E0h
.eh_frame_hdr:0000000000005855                 db 0E0h
.eh_frame_hdr:0000000000005856                 db 0FFh
.eh_frame_hdr:0000000000005857                 db 0FFh
.eh_frame_hdr:0000000000005858                 db  98h
.eh_frame_hdr:0000000000005859                 db    6
.eh_frame_hdr:000000000000585A                 db    0
.eh_frame_hdr:000000000000585B                 db    0
.eh_frame_hdr:000000000000585C                 db    0
.eh_frame_hdr:000000000000585D                 db 0E1h
.eh_frame_hdr:000000000000585E                 db 0FFh
.eh_frame_hdr:000000000000585F                 db 0FFh
.eh_frame_hdr:0000000000005860                 db 0ACh
.eh_frame_hdr:0000000000005861                 db    6
.eh_frame_hdr:0000000000005862                 db    0
.eh_frame_hdr:0000000000005863                 db    0
.eh_frame_hdr:0000000000005864                 db  10h
.eh_frame_hdr:0000000000005865                 db 0E1h
.eh_frame_hdr:0000000000005866                 db 0FFh
.eh_frame_hdr:0000000000005867                 db 0FFh
.eh_frame_hdr:0000000000005868                 db 0C0h
.eh_frame_hdr:0000000000005869                 db    6
.eh_frame_hdr:000000000000586A                 db    0
.eh_frame_hdr:000000000000586B                 db    0
.eh_frame_hdr:000000000000586C                 db  30h ; 0
.eh_frame_hdr:000000000000586D                 db 0E1h
.eh_frame_hdr:000000000000586E                 db 0FFh
.eh_frame_hdr:000000000000586F                 db 0FFh
.eh_frame_hdr:0000000000005870                 db 0D4h
.eh_frame_hdr:0000000000005871                 db    6
.eh_frame_hdr:0000000000005872                 db    0
.eh_frame_hdr:0000000000005873                 db    0
.eh_frame_hdr:0000000000005874                 db  50h ; P
.eh_frame_hdr:0000000000005875                 db 0E1h
.eh_frame_hdr:0000000000005876                 db 0FFh
.eh_frame_hdr:0000000000005877                 db 0FFh
.eh_frame_hdr:0000000000005878                 db 0E8h
.eh_frame_hdr:0000000000005879                 db    6
.eh_frame_hdr:000000000000587A                 db    0
.eh_frame_hdr:000000000000587B                 db    0
.eh_frame_hdr:000000000000587C                 db 0E0h
.eh_frame_hdr:000000000000587D                 db 0E1h
.eh_frame_hdr:000000000000587E                 db 0FFh
.eh_frame_hdr:000000000000587F                 db 0FFh
.eh_frame_hdr:0000000000005880                 db    4
.eh_frame_hdr:0000000000005881                 db    7
.eh_frame_hdr:0000000000005882                 db    0
.eh_frame_hdr:0000000000005883                 db    0
.eh_frame_hdr:0000000000005884                 db  70h ; p
.eh_frame_hdr:0000000000005885                 db 0E2h
.eh_frame_hdr:0000000000005886                 db 0FFh
.eh_frame_hdr:0000000000005887                 db 0FFh
.eh_frame_hdr:0000000000005888                 db  20h
.eh_frame_hdr:0000000000005889                 db    7
.eh_frame_hdr:000000000000588A                 db    0
.eh_frame_hdr:000000000000588B                 db    0
.eh_frame_hdr:000000000000588C                 db  80h
.eh_frame_hdr:000000000000588D                 db 0E2h
.eh_frame_hdr:000000000000588E                 db 0FFh
.eh_frame_hdr:000000000000588F                 db 0FFh
.eh_frame_hdr:0000000000005890                 db  34h ; 4
.eh_frame_hdr:0000000000005891                 db    7
.eh_frame_hdr:0000000000005892                 db    0
.eh_frame_hdr:0000000000005893                 db    0
.eh_frame_hdr:0000000000005894                 db  90h
.eh_frame_hdr:0000000000005895                 db 0E2h
.eh_frame_hdr:0000000000005896                 db 0FFh
.eh_frame_hdr:0000000000005897                 db 0FFh
.eh_frame_hdr:0000000000005898                 db  48h ; H
.eh_frame_hdr:0000000000005899                 db    7
.eh_frame_hdr:000000000000589A                 db    0
.eh_frame_hdr:000000000000589B                 db    0
.eh_frame_hdr:000000000000589C                 db  30h ; 0
.eh_frame_hdr:000000000000589D                 db 0E3h
.eh_frame_hdr:000000000000589E                 db 0FFh
.eh_frame_hdr:000000000000589F                 db 0FFh
.eh_frame_hdr:00000000000058A0                 db  64h ; d
.eh_frame_hdr:00000000000058A1                 db    7
.eh_frame_hdr:00000000000058A2                 db    0
.eh_frame_hdr:00000000000058A3                 db    0
.eh_frame_hdr:00000000000058A4                 db  40h ; @
.eh_frame_hdr:00000000000058A5                 db 0E3h
.eh_frame_hdr:00000000000058A6                 db 0FFh
.eh_frame_hdr:00000000000058A7                 db 0FFh
.eh_frame_hdr:00000000000058A8                 db  78h ; x
.eh_frame_hdr:00000000000058A9                 db    7
.eh_frame_hdr:00000000000058AA                 db    0
.eh_frame_hdr:00000000000058AB                 db    0
.eh_frame_hdr:00000000000058AC                 db  60h ; `
.eh_frame_hdr:00000000000058AD                 db 0E3h
.eh_frame_hdr:00000000000058AE                 db 0FFh
.eh_frame_hdr:00000000000058AF                 db 0FFh
.eh_frame_hdr:00000000000058B0                 db  8Ch
.eh_frame_hdr:00000000000058B1                 db    7
.eh_frame_hdr:00000000000058B2                 db    0
.eh_frame_hdr:00000000000058B3                 db    0
.eh_frame_hdr:00000000000058B4                 db  70h ; p
.eh_frame_hdr:00000000000058B5                 db 0E3h
.eh_frame_hdr:00000000000058B6                 db 0FFh
.eh_frame_hdr:00000000000058B7                 db 0FFh
.eh_frame_hdr:00000000000058B8                 db 0A0h
.eh_frame_hdr:00000000000058B9                 db    7
.eh_frame_hdr:00000000000058BA                 db    0
.eh_frame_hdr:00000000000058BB                 db    0
.eh_frame_hdr:00000000000058BC                 db    0
.eh_frame_hdr:00000000000058BD                 db 0E4h
.eh_frame_hdr:00000000000058BE                 db 0FFh
.eh_frame_hdr:00000000000058BF                 db 0FFh
.eh_frame_hdr:00000000000058C0                 db 0BCh
.eh_frame_hdr:00000000000058C1                 db    7
.eh_frame_hdr:00000000000058C2                 db    0
.eh_frame_hdr:00000000000058C3                 db    0
.eh_frame_hdr:00000000000058C4                 db 0A0h
.eh_frame_hdr:00000000000058C5                 db 0E4h
.eh_frame_hdr:00000000000058C6                 db 0FFh
.eh_frame_hdr:00000000000058C7                 db 0FFh
.eh_frame_hdr:00000000000058C8                 db 0D8h
.eh_frame_hdr:00000000000058C9                 db    7
.eh_frame_hdr:00000000000058CA                 db    0
.eh_frame_hdr:00000000000058CB                 db    0
.eh_frame_hdr:00000000000058CC                 db 0B0h
.eh_frame_hdr:00000000000058CD                 db 0E4h
.eh_frame_hdr:00000000000058CE                 db 0FFh
.eh_frame_hdr:00000000000058CF                 db 0FFh
.eh_frame_hdr:00000000000058D0                 db 0ECh
.eh_frame_hdr:00000000000058D1                 db    7
.eh_frame_hdr:00000000000058D2                 db    0
.eh_frame_hdr:00000000000058D3                 db    0
.eh_frame_hdr:00000000000058D4                 db 0D0h
.eh_frame_hdr:00000000000058D5                 db 0E4h
.eh_frame_hdr:00000000000058D6                 db 0FFh
.eh_frame_hdr:00000000000058D7                 db 0FFh
.eh_frame_hdr:00000000000058D8                 db    0
.eh_frame_hdr:00000000000058D9                 db    8
.eh_frame_hdr:00000000000058DA                 db    0
.eh_frame_hdr:00000000000058DB                 db    0
.eh_frame_hdr:00000000000058DC                 db 0F0h
.eh_frame_hdr:00000000000058DD                 db 0E4h
.eh_frame_hdr:00000000000058DE                 db 0FFh
.eh_frame_hdr:00000000000058DF                 db 0FFh
.eh_frame_hdr:00000000000058E0                 db  14h
.eh_frame_hdr:00000000000058E1                 db    8
.eh_frame_hdr:00000000000058E2                 db    0
.eh_frame_hdr:00000000000058E3                 db    0
.eh_frame_hdr:00000000000058E4                 db    0
.eh_frame_hdr:00000000000058E5                 db 0E5h
.eh_frame_hdr:00000000000058E6                 db 0FFh
.eh_frame_hdr:00000000000058E7                 db 0FFh
.eh_frame_hdr:00000000000058E8                 db  28h ; (
.eh_frame_hdr:00000000000058E9                 db    8
.eh_frame_hdr:00000000000058EA                 db    0
.eh_frame_hdr:00000000000058EB                 db    0
.eh_frame_hdr:00000000000058EC                 db  20h
.eh_frame_hdr:00000000000058ED                 db 0E5h
.eh_frame_hdr:00000000000058EE                 db 0FFh
.eh_frame_hdr:00000000000058EF                 db 0FFh
.eh_frame_hdr:00000000000058F0                 db  3Ch ; <
.eh_frame_hdr:00000000000058F1                 db    8
.eh_frame_hdr:00000000000058F2                 db    0
.eh_frame_hdr:00000000000058F3                 db    0
.eh_frame_hdr:00000000000058F4                 db  40h ; @
.eh_frame_hdr:00000000000058F5                 db 0E5h
.eh_frame_hdr:00000000000058F6                 db 0FFh
.eh_frame_hdr:00000000000058F7                 db 0FFh
.eh_frame_hdr:00000000000058F8                 db  50h ; P
.eh_frame_hdr:00000000000058F9                 db    8
.eh_frame_hdr:00000000000058FA                 db    0
.eh_frame_hdr:00000000000058FB                 db    0
.eh_frame_hdr:00000000000058FC                 db  60h ; `
.eh_frame_hdr:00000000000058FD                 db 0E5h
.eh_frame_hdr:00000000000058FE                 db 0FFh
.eh_frame_hdr:00000000000058FF                 db 0FFh
.eh_frame_hdr:0000000000005900                 db  68h ; h
.eh_frame_hdr:0000000000005901                 db    8
.eh_frame_hdr:0000000000005902                 db    0
.eh_frame_hdr:0000000000005903                 db    0
.eh_frame_hdr:0000000000005904                 db  80h
.eh_frame_hdr:0000000000005905                 db 0E9h
.eh_frame_hdr:0000000000005906                 db 0FFh
.eh_frame_hdr:0000000000005907                 db 0FFh
.eh_frame_hdr:0000000000005908                 db  7Ch ; |
.eh_frame_hdr:0000000000005909                 db    9
.eh_frame_hdr:000000000000590A                 db    0
.eh_frame_hdr:000000000000590B                 db    0
.eh_frame_hdr:000000000000590C                 db 0A0h
.eh_frame_hdr:000000000000590D                 db 0E9h
.eh_frame_hdr:000000000000590E                 db 0FFh
.eh_frame_hdr:000000000000590F                 db 0FFh
.eh_frame_hdr:0000000000005910                 db  90h
.eh_frame_hdr:0000000000005911                 db    9
.eh_frame_hdr:0000000000005912                 db    0
.eh_frame_hdr:0000000000005913                 db    0
.eh_frame_hdr:0000000000005914                 db  20h
.eh_frame_hdr:0000000000005915                 db 0EAh
.eh_frame_hdr:0000000000005916                 db 0FFh
.eh_frame_hdr:0000000000005917                 db 0FFh
.eh_frame_hdr:0000000000005918                 db 0ACh
.eh_frame_hdr:0000000000005919                 db    9
.eh_frame_hdr:000000000000591A                 db    0
.eh_frame_hdr:000000000000591B                 db    0
.eh_frame_hdr:000000000000591C                 db    0
.eh_frame_hdr:000000000000591D                 db 0EBh
.eh_frame_hdr:000000000000591E                 db 0FFh
.eh_frame_hdr:000000000000591F                 db 0FFh
.eh_frame_hdr:0000000000005920                 db 0D8h
.eh_frame_hdr:0000000000005921                 db    9
.eh_frame_hdr:0000000000005922                 db    0
.eh_frame_hdr:0000000000005923                 db    0
.eh_frame_hdr:0000000000005924                 db  80h
.eh_frame_hdr:0000000000005925                 db 0EBh
.eh_frame_hdr:0000000000005926                 db 0FFh
.eh_frame_hdr:0000000000005927                 db 0FFh
.eh_frame_hdr:0000000000005928                 db 0F8h
.eh_frame_hdr:0000000000005929                 db    9
.eh_frame_hdr:000000000000592A                 db    0
.eh_frame_hdr:000000000000592B                 db    0
.eh_frame_hdr:000000000000592C                 db 0A0h
.eh_frame_hdr:000000000000592D                 db 0EBh
.eh_frame_hdr:000000000000592E                 db 0FFh
.eh_frame_hdr:000000000000592F                 db 0FFh
.eh_frame_hdr:0000000000005930                 db  14h
.eh_frame_hdr:0000000000005931                 db  0Ah
.eh_frame_hdr:0000000000005932                 db    0
.eh_frame_hdr:0000000000005933                 db    0
.eh_frame_hdr:0000000000005934                 db 0D0h
.eh_frame_hdr:0000000000005935                 db 0EBh
.eh_frame_hdr:0000000000005936                 db 0FFh
.eh_frame_hdr:0000000000005937                 db 0FFh
.eh_frame_hdr:0000000000005938                 db  28h ; (
.eh_frame_hdr:0000000000005939                 db  0Ah
.eh_frame_hdr:000000000000593A                 db    0
.eh_frame_hdr:000000000000593B                 db    0
.eh_frame_hdr:000000000000593C                 db 0E0h
.eh_frame_hdr:000000000000593D                 db 0EBh
.eh_frame_hdr:000000000000593E                 db 0FFh
.eh_frame_hdr:000000000000593F                 db 0FFh
.eh_frame_hdr:0000000000005940                 db  3Ch ; <
.eh_frame_hdr:0000000000005941                 db  0Ah
.eh_frame_hdr:0000000000005942                 db    0
.eh_frame_hdr:0000000000005943                 db    0
.eh_frame_hdr:0000000000005944                 db  20h
.eh_frame_hdr:0000000000005945                 db 0ECh
.eh_frame_hdr:0000000000005946                 db 0FFh
.eh_frame_hdr:0000000000005947                 db 0FFh
.eh_frame_hdr:0000000000005948                 db  60h ; `
.eh_frame_hdr:0000000000005949                 db  0Ah
.eh_frame_hdr:000000000000594A                 db    0
.eh_frame_hdr:000000000000594B                 db    0
.eh_frame_hdr:000000000000594C                 db  50h ; P
.eh_frame_hdr:000000000000594D                 db 0ECh
.eh_frame_hdr:000000000000594E                 db 0FFh
.eh_frame_hdr:000000000000594F                 db 0FFh
.eh_frame_hdr:0000000000005950                 db  74h ; t
.eh_frame_hdr:0000000000005951                 db  0Ah
.eh_frame_hdr:0000000000005952                 db    0
.eh_frame_hdr:0000000000005953                 db    0
.eh_frame_hdr:0000000000005954                 db 0E0h
.eh_frame_hdr:0000000000005955                 db 0ECh
.eh_frame_hdr:0000000000005956                 db 0FFh
.eh_frame_hdr:0000000000005957                 db 0FFh
.eh_frame_hdr:0000000000005958                 db  8Ch
.eh_frame_hdr:0000000000005959                 db  0Ah
.eh_frame_hdr:000000000000595A                 db    0
.eh_frame_hdr:000000000000595B                 db    0
.eh_frame_hdr:000000000000595C                 db  30h ; 0
.eh_frame_hdr:000000000000595D                 db 0EDh
.eh_frame_hdr:000000000000595E                 db 0FFh
.eh_frame_hdr:000000000000595F                 db 0FFh
.eh_frame_hdr:0000000000005960                 db 0A4h
.eh_frame_hdr:0000000000005961                 db  0Ah
.eh_frame_hdr:0000000000005962                 db    0
.eh_frame_hdr:0000000000005963                 db    0
.eh_frame_hdr:0000000000005964                 db  50h ; P
.eh_frame_hdr:0000000000005965                 db 0EDh
.eh_frame_hdr:0000000000005966                 db 0FFh
.eh_frame_hdr:0000000000005967                 db 0FFh
.eh_frame_hdr:0000000000005968                 db 0C0h
.eh_frame_hdr:0000000000005969                 db  0Ah
.eh_frame_hdr:000000000000596A                 db    0
.eh_frame_hdr:000000000000596B                 db    0
.eh_frame_hdr:000000000000596C                 db  80h
.eh_frame_hdr:000000000000596D                 db 0EDh
.eh_frame_hdr:000000000000596E                 db 0FFh
.eh_frame_hdr:000000000000596F                 db 0FFh
.eh_frame_hdr:0000000000005970                 db 0DCh
.eh_frame_hdr:0000000000005971                 db  0Ah
.eh_frame_hdr:0000000000005972                 db    0
.eh_frame_hdr:0000000000005973                 db    0
.eh_frame_hdr:0000000000005974                 db 0B0h
.eh_frame_hdr:0000000000005975                 db 0EDh
.eh_frame_hdr:0000000000005976                 db 0FFh
.eh_frame_hdr:0000000000005977                 db 0FFh
.eh_frame_hdr:0000000000005978                 db    4
.eh_frame_hdr:0000000000005979                 db  0Bh
.eh_frame_hdr:000000000000597A                 db    0
.eh_frame_hdr:000000000000597B                 db    0
.eh_frame_hdr:000000000000597C                 db 0D0h
.eh_frame_hdr:000000000000597D                 db 0EDh
.eh_frame_hdr:000000000000597E                 db 0FFh
.eh_frame_hdr:000000000000597F                 db 0FFh
.eh_frame_hdr:0000000000005980                 db  20h
.eh_frame_hdr:0000000000005981                 db  0Bh
.eh_frame_hdr:0000000000005982                 db    0
.eh_frame_hdr:0000000000005983                 db    0
.eh_frame_hdr:0000000000005984                 db  10h
.eh_frame_hdr:0000000000005985                 db 0EEh
.eh_frame_hdr:0000000000005986                 db 0FFh
.eh_frame_hdr:0000000000005987                 db 0FFh
.eh_frame_hdr:0000000000005988                 db  38h ; 8
.eh_frame_hdr:0000000000005989                 db  0Bh
.eh_frame_hdr:000000000000598A                 db    0
.eh_frame_hdr:000000000000598B                 db    0
.eh_frame_hdr:000000000000598C                 db 0A0h
.eh_frame_hdr:000000000000598D                 db 0EEh
.eh_frame_hdr:000000000000598E                 db 0FFh
.eh_frame_hdr:000000000000598F                 db 0FFh
.eh_frame_hdr:0000000000005990                 db  78h ; x
.eh_frame_hdr:0000000000005991                 db  0Bh
.eh_frame_hdr:0000000000005992                 db    0
.eh_frame_hdr:0000000000005993                 db    0
.eh_frame_hdr:0000000000005994                 db  20h
.eh_frame_hdr:0000000000005995                 db 0EFh
.eh_frame_hdr:0000000000005996                 db 0FFh
.eh_frame_hdr:0000000000005997                 db 0FFh
.eh_frame_hdr:0000000000005998                 db 0C8h
.eh_frame_hdr:0000000000005999                 db  0Bh
.eh_frame_hdr:000000000000599A                 db    0
.eh_frame_hdr:000000000000599B                 db    0
.eh_frame_hdr:000000000000599C                 db  80h
.eh_frame_hdr:000000000000599D                 db 0EFh
.eh_frame_hdr:000000000000599E                 db 0FFh
.eh_frame_hdr:000000000000599F                 db 0FFh
.eh_frame_hdr:00000000000059A0                 db 0E8h
.eh_frame_hdr:00000000000059A1                 db  0Bh
.eh_frame_hdr:00000000000059A2                 db    0
.eh_frame_hdr:00000000000059A3                 db    0
.eh_frame_hdr:00000000000059A4                 db 0C0h
.eh_frame_hdr:00000000000059A5                 db 0EFh
.eh_frame_hdr:00000000000059A6                 db 0FFh
.eh_frame_hdr:00000000000059A7                 db 0FFh
.eh_frame_hdr:00000000000059A8                 db    8
.eh_frame_hdr:00000000000059A9                 db  0Ch
.eh_frame_hdr:00000000000059AA                 db    0
.eh_frame_hdr:00000000000059AB                 db    0
.eh_frame_hdr:00000000000059AC                 db  40h ; @
.eh_frame_hdr:00000000000059AD                 db 0F0h
.eh_frame_hdr:00000000000059AE                 db 0FFh
.eh_frame_hdr:00000000000059AF                 db 0FFh
.eh_frame_hdr:00000000000059B0                 db  40h ; @
.eh_frame_hdr:00000000000059B1                 db  0Ch
.eh_frame_hdr:00000000000059B2                 db    0
.eh_frame_hdr:00000000000059B3                 db    0
.eh_frame_hdr:00000000000059B4                 db  80h
.eh_frame_hdr:00000000000059B5                 db 0F0h
.eh_frame_hdr:00000000000059B6                 db 0FFh
.eh_frame_hdr:00000000000059B7                 db 0FFh
.eh_frame_hdr:00000000000059B8                 db  60h ; `
.eh_frame_hdr:00000000000059B9                 db  0Ch
.eh_frame_hdr:00000000000059BA                 db    0
.eh_frame_hdr:00000000000059BB                 db    0
.eh_frame_hdr:00000000000059BC                 db 0E0h
.eh_frame_hdr:00000000000059BD                 db 0F0h
.eh_frame_hdr:00000000000059BE                 db 0FFh
.eh_frame_hdr:00000000000059BF                 db 0FFh
.eh_frame_hdr:00000000000059C0                 db  90h
.eh_frame_hdr:00000000000059C1                 db  0Ch
.eh_frame_hdr:00000000000059C2                 db    0
.eh_frame_hdr:00000000000059C3                 db    0
.eh_frame_hdr:00000000000059C4                 db  50h ; P
.eh_frame_hdr:00000000000059C5                 db 0F1h
.eh_frame_hdr:00000000000059C6                 db 0FFh
.eh_frame_hdr:00000000000059C7                 db 0FFh
.eh_frame_hdr:00000000000059C8                 db 0D8h
.eh_frame_hdr:00000000000059C9                 db  0Ch
.eh_frame_hdr:00000000000059CA                 db    0
.eh_frame_hdr:00000000000059CB                 db    0
.eh_frame_hdr:00000000000059CC                 db  60h ; `
.eh_frame_hdr:00000000000059CD                 db 0F1h
.eh_frame_hdr:00000000000059CE                 db 0FFh
.eh_frame_hdr:00000000000059CF                 db 0FFh
.eh_frame_hdr:00000000000059D0                 db 0F0h
.eh_frame_hdr:00000000000059D1                 db  0Ch
.eh_frame_hdr:00000000000059D2                 db    0
.eh_frame_hdr:00000000000059D3                 db    0
.eh_frame_hdr:00000000000059D3 _eh_frame_hdr   ends
.eh_frame_hdr:00000000000059D3
LOAD:00000000000059D4 ; ===========================================================================
LOAD:00000000000059D4
LOAD:00000000000059D4 ; Segment type: Pure code
LOAD:00000000000059D4 ; Segment permissions: Read/Execute
LOAD:00000000000059D4 LOAD            segment byte public 'CODE' use64
LOAD:00000000000059D4                 assume cs:LOAD
LOAD:00000000000059D4                 ;org 59D4h
LOAD:00000000000059D4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000059D4                 align 8
LOAD:00000000000059D4 LOAD            ends
LOAD:00000000000059D4
.eh_frame:00000000000059D8 ; ===========================================================================
.eh_frame:00000000000059D8
.eh_frame:00000000000059D8 ; Segment type: Pure data
.eh_frame:00000000000059D8 ; Segment permissions: Read
.eh_frame:00000000000059D8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000059D8                 assume cs:_eh_frame
.eh_frame:00000000000059D8                 ;org 59D8h
.eh_frame:00000000000059D8                 db  14h
.eh_frame:00000000000059D9                 db    0
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db    0
.eh_frame:00000000000059DD                 db    0
.eh_frame:00000000000059DE                 db    0
.eh_frame:00000000000059DF                 db    0
.eh_frame:00000000000059E0                 db    1
.eh_frame:00000000000059E1                 db  7Ah ; z
.eh_frame:00000000000059E2                 db  52h ; R
.eh_frame:00000000000059E3                 db    0
.eh_frame:00000000000059E4                 db    1
.eh_frame:00000000000059E5                 db  78h ; x
.eh_frame:00000000000059E6                 db  10h
.eh_frame:00000000000059E7                 db    1
.eh_frame:00000000000059E8                 db  1Bh
.eh_frame:00000000000059E9                 db  0Ch
.eh_frame:00000000000059EA                 db    7
.eh_frame:00000000000059EB                 db    8
.eh_frame:00000000000059EC                 db  90h
.eh_frame:00000000000059ED                 db    1
.eh_frame:00000000000059EE                 db    7
.eh_frame:00000000000059EF                 db  10h
.eh_frame:00000000000059F0                 db  14h
.eh_frame:00000000000059F1                 db    0
.eh_frame:00000000000059F2                 db    0
.eh_frame:00000000000059F3                 db    0
.eh_frame:00000000000059F4                 db  1Ch
.eh_frame:00000000000059F5                 db    0
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db  18h
.eh_frame:00000000000059F9                 db 0C0h
.eh_frame:00000000000059FA                 db 0FFh
.eh_frame:00000000000059FB                 db 0FFh
.eh_frame:00000000000059FC                 db  2Bh ; +
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db    0
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db    0
.eh_frame:0000000000005A05                 db    0
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db  14h
.eh_frame:0000000000005A09                 db    0
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db    0
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db    1
.eh_frame:0000000000005A11                 db  7Ah ; z
.eh_frame:0000000000005A12                 db  52h ; R
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db    1
.eh_frame:0000000000005A15                 db  78h ; x
.eh_frame:0000000000005A16                 db  10h
.eh_frame:0000000000005A17                 db    1
.eh_frame:0000000000005A18                 db  1Bh
.eh_frame:0000000000005A19                 db  0Ch
.eh_frame:0000000000005A1A                 db    7
.eh_frame:0000000000005A1B                 db    8
.eh_frame:0000000000005A1C                 db  90h
.eh_frame:0000000000005A1D                 db    1
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db  24h ; $
.eh_frame:0000000000005A21                 db    0
.eh_frame:0000000000005A22                 db    0
.eh_frame:0000000000005A23                 db    0
.eh_frame:0000000000005A24                 db  1Ch
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db  18h
.eh_frame:0000000000005A29                 db 0B9h
.eh_frame:0000000000005A2A                 db 0FFh
.eh_frame:0000000000005A2B                 db 0FFh
.eh_frame:0000000000005A2C                 db 0B0h
.eh_frame:0000000000005A2D                 db    2
.eh_frame:0000000000005A2E                 db    0
.eh_frame:0000000000005A2F                 db    0
.eh_frame:0000000000005A30                 db    0
.eh_frame:0000000000005A31                 db  0Eh
.eh_frame:0000000000005A32                 db  10h
.eh_frame:0000000000005A33                 db  46h ; F
.eh_frame:0000000000005A34                 db  0Eh
.eh_frame:0000000000005A35                 db  18h
.eh_frame:0000000000005A36                 db  4Ah ; J
.eh_frame:0000000000005A37                 db  0Fh
.eh_frame:0000000000005A38                 db  0Bh
.eh_frame:0000000000005A39                 db  77h ; w
.eh_frame:0000000000005A3A                 db    8
.eh_frame:0000000000005A3B                 db  80h
.eh_frame:0000000000005A3C                 db    0
.eh_frame:0000000000005A3D                 db  3Fh ; ?
.eh_frame:0000000000005A3E                 db  1Ah
.eh_frame:0000000000005A3F                 db  3Bh ; ;
.eh_frame:0000000000005A40                 db  2Ah ; *
.eh_frame:0000000000005A41                 db  33h ; 3
.eh_frame:0000000000005A42                 db  24h ; $
.eh_frame:0000000000005A43                 db  22h ; "
.eh_frame:0000000000005A44                 db    0
.eh_frame:0000000000005A45                 db    0
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db  14h
.eh_frame:0000000000005A49                 db    0
.eh_frame:0000000000005A4A                 db    0
.eh_frame:0000000000005A4B                 db    0
.eh_frame:0000000000005A4C                 db  44h ; D
.eh_frame:0000000000005A4D                 db    0
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db 0A0h
.eh_frame:0000000000005A51                 db 0BBh
.eh_frame:0000000000005A52                 db 0FFh
.eh_frame:0000000000005A53                 db 0FFh
.eh_frame:0000000000005A54                 db    8
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db    0
.eh_frame:0000000000005A59                 db    0
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db    0
.eh_frame:0000000000005A5D                 db    0
.eh_frame:0000000000005A5E                 db    0
.eh_frame:0000000000005A5F                 db    0
.eh_frame:0000000000005A60                 db  18h
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db  5Ch ; \
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db 0B8h
.eh_frame:0000000000005A69                 db 0C0h
.eh_frame:0000000000005A6A                 db 0FFh
.eh_frame:0000000000005A6B                 db 0FFh
.eh_frame:0000000000005A6C                 db  4Ch ; L
.eh_frame:0000000000005A6D                 db    0
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db    0
.eh_frame:0000000000005A71                 db  48h ; H
.eh_frame:0000000000005A72                 db  0Eh
.eh_frame:0000000000005A73                 db  10h
.eh_frame:0000000000005A74                 db  83h
.eh_frame:0000000000005A75                 db    2
.eh_frame:0000000000005A76                 db  73h ; s
.eh_frame:0000000000005A77                 db  0Ah
.eh_frame:0000000000005A78                 db  0Eh
.eh_frame:0000000000005A79                 db    8
.eh_frame:0000000000005A7A                 db  45h ; E
.eh_frame:0000000000005A7B                 db  0Bh
.eh_frame:0000000000005A7C                 db  28h ; (
.eh_frame:0000000000005A7D                 db    0
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db  78h ; x
.eh_frame:0000000000005A81                 db    0
.eh_frame:0000000000005A82                 db    0
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db 0ECh
.eh_frame:0000000000005A85                 db 0C0h
.eh_frame:0000000000005A86                 db 0FFh
.eh_frame:0000000000005A87                 db 0FFh
.eh_frame:0000000000005A88                 db  7Ch ; |
.eh_frame:0000000000005A89                 db    3
.eh_frame:0000000000005A8A                 db    0
.eh_frame:0000000000005A8B                 db    0
.eh_frame:0000000000005A8C                 db    0
.eh_frame:0000000000005A8D                 db  42h ; B
.eh_frame:0000000000005A8E                 db  0Eh
.eh_frame:0000000000005A8F                 db  10h
.eh_frame:0000000000005A90                 db  8Dh
.eh_frame:0000000000005A91                 db    2
.eh_frame:0000000000005A92                 db  42h ; B
.eh_frame:0000000000005A93                 db  0Eh
.eh_frame:0000000000005A94                 db  18h
.eh_frame:0000000000005A95                 db  8Ch
.eh_frame:0000000000005A96                 db    3
.eh_frame:0000000000005A97                 db  46h ; F
.eh_frame:0000000000005A98                 db  0Eh
.eh_frame:0000000000005A99                 db  20h
.eh_frame:0000000000005A9A                 db  86h
.eh_frame:0000000000005A9B                 db    4
.eh_frame:0000000000005A9C                 db  41h ; A
.eh_frame:0000000000005A9D                 db  0Eh
.eh_frame:0000000000005A9E                 db  28h ; (
.eh_frame:0000000000005A9F                 db  83h
.eh_frame:0000000000005AA0                 db    5
.eh_frame:0000000000005AA1                 db  4Ah ; J
.eh_frame:0000000000005AA2                 db  0Eh
.eh_frame:0000000000005AA3                 db 0B0h
.eh_frame:0000000000005AA4                 db    1
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db  4Ch ; L
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db 0A4h
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  50h ; P
.eh_frame:0000000000005AB1                 db 0BBh
.eh_frame:0000000000005AB2                 db 0FFh
.eh_frame:0000000000005AB3                 db 0FFh
.eh_frame:0000000000005AB4                 db    7
.eh_frame:0000000000005AB5                 db    4
.eh_frame:0000000000005AB6                 db    0
.eh_frame:0000000000005AB7                 db    0
.eh_frame:0000000000005AB8                 db    0
.eh_frame:0000000000005AB9                 db  42h ; B
.eh_frame:0000000000005ABA                 db  0Eh
.eh_frame:0000000000005ABB                 db  10h
.eh_frame:0000000000005ABC                 db  8Dh
.eh_frame:0000000000005ABD                 db    2
.eh_frame:0000000000005ABE                 db  42h ; B
.eh_frame:0000000000005ABF                 db  0Eh
.eh_frame:0000000000005AC0                 db  18h
.eh_frame:0000000000005AC1                 db  8Ch
.eh_frame:0000000000005AC2                 db    3
.eh_frame:0000000000005AC3                 db  44h ; D
.eh_frame:0000000000005AC4                 db  0Eh
.eh_frame:0000000000005AC5                 db  20h
.eh_frame:0000000000005AC6                 db  86h
.eh_frame:0000000000005AC7                 db    4
.eh_frame:0000000000005AC8                 db  41h ; A
.eh_frame:0000000000005AC9                 db  0Eh
.eh_frame:0000000000005ACA                 db  28h ; (
.eh_frame:0000000000005ACB                 db  83h
.eh_frame:0000000000005ACC                 db    5
.eh_frame:0000000000005ACD                 db  4Ah ; J
.eh_frame:0000000000005ACE                 db  0Eh
.eh_frame:0000000000005ACF                 db 0C0h
.eh_frame:0000000000005AD0                 db    3
.eh_frame:0000000000005AD1                 db    3
.eh_frame:0000000000005AD2                 db  4Dh ; M
.eh_frame:0000000000005AD3                 db    2
.eh_frame:0000000000005AD4                 db  0Ah
.eh_frame:0000000000005AD5                 db  0Eh
.eh_frame:0000000000005AD6                 db 0C8h
.eh_frame:0000000000005AD7                 db    3
.eh_frame:0000000000005AD8                 db  44h ; D
.eh_frame:0000000000005AD9                 db  0Eh
.eh_frame:0000000000005ADA                 db 0D0h
.eh_frame:0000000000005ADB                 db    3
.eh_frame:0000000000005ADC                 db  4Ch ; L
.eh_frame:0000000000005ADD                 db  0Bh
.eh_frame:0000000000005ADE                 db    2
.eh_frame:0000000000005ADF                 db  85h
.eh_frame:0000000000005AE0                 db  0Ah
.eh_frame:0000000000005AE1                 db  0Eh
.eh_frame:0000000000005AE2                 db  28h ; (
.eh_frame:0000000000005AE3                 db  41h ; A
.eh_frame:0000000000005AE4                 db  0Eh
.eh_frame:0000000000005AE5                 db  20h
.eh_frame:0000000000005AE6                 db  41h ; A
.eh_frame:0000000000005AE7                 db  0Eh
.eh_frame:0000000000005AE8                 db  18h
.eh_frame:0000000000005AE9                 db  42h ; B
.eh_frame:0000000000005AEA                 db  0Eh
.eh_frame:0000000000005AEB                 db  10h
.eh_frame:0000000000005AEC                 db  42h ; B
.eh_frame:0000000000005AED                 db  0Eh
.eh_frame:0000000000005AEE                 db    8
.eh_frame:0000000000005AEF                 db  41h ; A
.eh_frame:0000000000005AF0                 db  0Bh
.eh_frame:0000000000005AF1                 db    0
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db    0
.eh_frame:0000000000005AF5                 db    0
.eh_frame:0000000000005AF6                 db    0
.eh_frame:0000000000005AF7                 db    0
.eh_frame:0000000000005AF8                 db  10h
.eh_frame:0000000000005AF9                 db    0
.eh_frame:0000000000005AFA                 db    0
.eh_frame:0000000000005AFB                 db    0
.eh_frame:0000000000005AFC                 db 0F4h
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db 0F0h
.eh_frame:0000000000005B01                 db 0C3h
.eh_frame:0000000000005B02                 db 0FFh
.eh_frame:0000000000005B03                 db 0FFh
.eh_frame:0000000000005B04                 db    8
.eh_frame:0000000000005B05                 db    0
.eh_frame:0000000000005B06                 db    0
.eh_frame:0000000000005B07                 db    0
.eh_frame:0000000000005B08                 db    0
.eh_frame:0000000000005B09                 db    0
.eh_frame:0000000000005B0A                 db    0
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db  10h
.eh_frame:0000000000005B0D                 db    0
.eh_frame:0000000000005B0E                 db    0
.eh_frame:0000000000005B0F                 db    0
.eh_frame:0000000000005B10                 db    8
.eh_frame:0000000000005B11                 db    1
.eh_frame:0000000000005B12                 db    0
.eh_frame:0000000000005B13                 db    0
.eh_frame:0000000000005B14                 db 0ECh
.eh_frame:0000000000005B15                 db 0C3h
.eh_frame:0000000000005B16                 db 0FFh
.eh_frame:0000000000005B17                 db 0FFh
.eh_frame:0000000000005B18                 db    8
.eh_frame:0000000000005B19                 db    0
.eh_frame:0000000000005B1A                 db    0
.eh_frame:0000000000005B1B                 db    0
.eh_frame:0000000000005B1C                 db    0
.eh_frame:0000000000005B1D                 db    0
.eh_frame:0000000000005B1E                 db    0
.eh_frame:0000000000005B1F                 db    0
.eh_frame:0000000000005B20                 db  2Ch ; ,
.eh_frame:0000000000005B21                 db    0
.eh_frame:0000000000005B22                 db    0
.eh_frame:0000000000005B23                 db    0
.eh_frame:0000000000005B24                 db  1Ch
.eh_frame:0000000000005B25                 db    1
.eh_frame:0000000000005B26                 db    0
.eh_frame:0000000000005B27                 db    0
.eh_frame:0000000000005B28                 db 0E8h
.eh_frame:0000000000005B29                 db 0C3h
.eh_frame:0000000000005B2A                 db 0FFh
.eh_frame:0000000000005B2B                 db 0FFh
.eh_frame:0000000000005B2C                 db 0A4h
.eh_frame:0000000000005B2D                 db    0
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db    0
.eh_frame:0000000000005B31                 db  41h ; A
.eh_frame:0000000000005B32                 db  0Eh
.eh_frame:0000000000005B33                 db  10h
.eh_frame:0000000000005B34                 db  86h
.eh_frame:0000000000005B35                 db    2
.eh_frame:0000000000005B36                 db  41h ; A
.eh_frame:0000000000005B37                 db  0Eh
.eh_frame:0000000000005B38                 db  18h
.eh_frame:0000000000005B39                 db  83h
.eh_frame:0000000000005B3A                 db    3
.eh_frame:0000000000005B3B                 db  44h ; D
.eh_frame:0000000000005B3C                 db  0Eh
.eh_frame:0000000000005B3D                 db  20h
.eh_frame:0000000000005B3E                 db  7Ah ; z
.eh_frame:0000000000005B3F                 db  0Ah
.eh_frame:0000000000005B40                 db  0Eh
.eh_frame:0000000000005B41                 db  18h
.eh_frame:0000000000005B42                 db  41h ; A
.eh_frame:0000000000005B43                 db  0Eh
.eh_frame:0000000000005B44                 db  10h
.eh_frame:0000000000005B45                 db  41h ; A
.eh_frame:0000000000005B46                 db  0Eh
.eh_frame:0000000000005B47                 db    8
.eh_frame:0000000000005B48                 db  41h ; A
.eh_frame:0000000000005B49                 db  0Bh
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db    0
.eh_frame:0000000000005B4D                 db    0
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  1Ch
.eh_frame:0000000000005B51                 db    0
.eh_frame:0000000000005B52                 db    0
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db  4Ch ; L
.eh_frame:0000000000005B55                 db    1
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db  68h ; h
.eh_frame:0000000000005B59                 db 0C4h
.eh_frame:0000000000005B5A                 db 0FFh
.eh_frame:0000000000005B5B                 db 0FFh
.eh_frame:0000000000005B5C                 db  9Fh
.eh_frame:0000000000005B5D                 db    0
.eh_frame:0000000000005B5E                 db    0
.eh_frame:0000000000005B5F                 db    0
.eh_frame:0000000000005B60                 db    0
.eh_frame:0000000000005B61                 db  44h ; D
.eh_frame:0000000000005B62                 db  0Eh
.eh_frame:0000000000005B63                 db  10h
.eh_frame:0000000000005B64                 db  83h
.eh_frame:0000000000005B65                 db    2
.eh_frame:0000000000005B66                 db    2
.eh_frame:0000000000005B67                 db  78h ; x
.eh_frame:0000000000005B68                 db  0Ah
.eh_frame:0000000000005B69                 db  0Eh
.eh_frame:0000000000005B6A                 db    8
.eh_frame:0000000000005B6B                 db  41h ; A
.eh_frame:0000000000005B6C                 db  0Bh
.eh_frame:0000000000005B6D                 db    0
.eh_frame:0000000000005B6E                 db    0
.eh_frame:0000000000005B6F                 db    0
.eh_frame:0000000000005B70                 db  40h ; @
.eh_frame:0000000000005B71                 db    0
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db  6Ch ; l
.eh_frame:0000000000005B75                 db    1
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db 0E8h
.eh_frame:0000000000005B79                 db 0C4h
.eh_frame:0000000000005B7A                 db 0FFh
.eh_frame:0000000000005B7B                 db 0FFh
.eh_frame:0000000000005B7C                 db 0E7h
.eh_frame:0000000000005B7D                 db    0
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db    0
.eh_frame:0000000000005B81                 db  41h ; A
.eh_frame:0000000000005B82                 db  0Eh
.eh_frame:0000000000005B83                 db  10h
.eh_frame:0000000000005B84                 db  86h
.eh_frame:0000000000005B85                 db    2
.eh_frame:0000000000005B86                 db  41h ; A
.eh_frame:0000000000005B87                 db  0Eh
.eh_frame:0000000000005B88                 db  18h
.eh_frame:0000000000005B89                 db  83h
.eh_frame:0000000000005B8A                 db    3
.eh_frame:0000000000005B8B                 db  49h ; I
.eh_frame:0000000000005B8C                 db  0Eh
.eh_frame:0000000000005B8D                 db  20h
.eh_frame:0000000000005B8E                 db  6Eh ; n
.eh_frame:0000000000005B8F                 db  0Ah
.eh_frame:0000000000005B90                 db  0Eh
.eh_frame:0000000000005B91                 db  18h
.eh_frame:0000000000005B92                 db  41h ; A
.eh_frame:0000000000005B93                 db  0Eh
.eh_frame:0000000000005B94                 db  10h
.eh_frame:0000000000005B95                 db  41h ; A
.eh_frame:0000000000005B96                 db  0Eh
.eh_frame:0000000000005B97                 db    8
.eh_frame:0000000000005B98                 db  45h ; E
.eh_frame:0000000000005B99                 db  0Bh
.eh_frame:0000000000005B9A                 db    2
.eh_frame:0000000000005B9B                 db  4Ah ; J
.eh_frame:0000000000005B9C                 db  0Ah
.eh_frame:0000000000005B9D                 db  0Eh
.eh_frame:0000000000005B9E                 db  18h
.eh_frame:0000000000005B9F                 db  41h ; A
.eh_frame:0000000000005BA0                 db  0Eh
.eh_frame:0000000000005BA1                 db  10h
.eh_frame:0000000000005BA2                 db  41h ; A
.eh_frame:0000000000005BA3                 db  0Eh
.eh_frame:0000000000005BA4                 db    8
.eh_frame:0000000000005BA5                 db  44h ; D
.eh_frame:0000000000005BA6                 db  0Bh
.eh_frame:0000000000005BA7                 db    2
.eh_frame:0000000000005BA8                 db  54h ; T
.eh_frame:0000000000005BA9                 db  0Eh
.eh_frame:0000000000005BAA                 db  18h
.eh_frame:0000000000005BAB                 db  41h ; A
.eh_frame:0000000000005BAC                 db  0Eh
.eh_frame:0000000000005BAD                 db  10h
.eh_frame:0000000000005BAE                 db  41h ; A
.eh_frame:0000000000005BAF                 db  0Eh
.eh_frame:0000000000005BB0                 db    8
.eh_frame:0000000000005BB1                 db    0
.eh_frame:0000000000005BB2                 db    0
.eh_frame:0000000000005BB3                 db    0
.eh_frame:0000000000005BB4                 db  74h ; t
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db 0B0h
.eh_frame:0000000000005BB9                 db    1
.eh_frame:0000000000005BBA                 db    0
.eh_frame:0000000000005BBB                 db    0
.eh_frame:0000000000005BBC                 db  94h
.eh_frame:0000000000005BBD                 db 0C5h
.eh_frame:0000000000005BBE                 db 0FFh
.eh_frame:0000000000005BBF                 db 0FFh
.eh_frame:0000000000005BC0                 db  34h ; 4
.eh_frame:0000000000005BC1                 db  12h
.eh_frame:0000000000005BC2                 db    0
.eh_frame:0000000000005BC3                 db    0
.eh_frame:0000000000005BC4                 db    0
.eh_frame:0000000000005BC5                 db  42h ; B
.eh_frame:0000000000005BC6                 db  0Eh
.eh_frame:0000000000005BC7                 db  10h
.eh_frame:0000000000005BC8                 db  8Fh
.eh_frame:0000000000005BC9                 db    2
.eh_frame:0000000000005BCA                 db  42h ; B
.eh_frame:0000000000005BCB                 db  0Eh
.eh_frame:0000000000005BCC                 db  18h
.eh_frame:0000000000005BCD                 db  8Eh
.eh_frame:0000000000005BCE                 db    3
.eh_frame:0000000000005BCF                 db  45h ; E
.eh_frame:0000000000005BD0                 db  0Eh
.eh_frame:0000000000005BD1                 db  20h
.eh_frame:0000000000005BD2                 db  8Dh
.eh_frame:0000000000005BD3                 db    4
.eh_frame:0000000000005BD4                 db  42h ; B
.eh_frame:0000000000005BD5                 db  0Eh
.eh_frame:0000000000005BD6                 db  28h ; (
.eh_frame:0000000000005BD7                 db  8Ch
.eh_frame:0000000000005BD8                 db    5
.eh_frame:0000000000005BD9                 db  44h ; D
.eh_frame:0000000000005BDA                 db  0Eh
.eh_frame:0000000000005BDB                 db  30h ; 0
.eh_frame:0000000000005BDC                 db  86h
.eh_frame:0000000000005BDD                 db    6
.eh_frame:0000000000005BDE                 db  41h ; A
.eh_frame:0000000000005BDF                 db  0Eh
.eh_frame:0000000000005BE0                 db  38h ; 8
.eh_frame:0000000000005BE1                 db  83h
.eh_frame:0000000000005BE2                 db    7
.eh_frame:0000000000005BE3                 db  53h ; S
.eh_frame:0000000000005BE4                 db  0Eh
.eh_frame:0000000000005BE5                 db 0F0h
.eh_frame:0000000000005BE6                 db    1
.eh_frame:0000000000005BE7                 db    3
.eh_frame:0000000000005BE8                 db  81h
.eh_frame:0000000000005BE9                 db  0Bh
.eh_frame:0000000000005BEA                 db  0Eh
.eh_frame:0000000000005BEB                 db 0F8h
.eh_frame:0000000000005BEC                 db    1
.eh_frame:0000000000005BED                 db  4Ah ; J
.eh_frame:0000000000005BEE                 db  0Eh
.eh_frame:0000000000005BEF                 db  80h
.eh_frame:0000000000005BF0                 db    2
.eh_frame:0000000000005BF1                 db  44h ; D
.eh_frame:0000000000005BF2                 db  0Eh
.eh_frame:0000000000005BF3                 db  88h
.eh_frame:0000000000005BF4                 db    2
.eh_frame:0000000000005BF5                 db  45h ; E
.eh_frame:0000000000005BF6                 db  0Eh
.eh_frame:0000000000005BF7                 db  90h
.eh_frame:0000000000005BF8                 db    2
.eh_frame:0000000000005BF9                 db  5Fh ; _
.eh_frame:0000000000005BFA                 db  0Eh
.eh_frame:0000000000005BFB                 db 0F0h
.eh_frame:0000000000005BFC                 db    1
.eh_frame:0000000000005BFD                 db  64h ; d
.eh_frame:0000000000005BFE                 db  0Ah
.eh_frame:0000000000005BFF                 db  0Eh
.eh_frame:0000000000005C00                 db  38h ; 8
.eh_frame:0000000000005C01                 db  41h ; A
.eh_frame:0000000000005C02                 db  0Eh
.eh_frame:0000000000005C03                 db  30h ; 0
.eh_frame:0000000000005C04                 db  41h ; A
.eh_frame:0000000000005C05                 db  0Eh
.eh_frame:0000000000005C06                 db  28h ; (
.eh_frame:0000000000005C07                 db  42h ; B
.eh_frame:0000000000005C08                 db  0Eh
.eh_frame:0000000000005C09                 db  20h
.eh_frame:0000000000005C0A                 db  42h ; B
.eh_frame:0000000000005C0B                 db  0Eh
.eh_frame:0000000000005C0C                 db  18h
.eh_frame:0000000000005C0D                 db  42h ; B
.eh_frame:0000000000005C0E                 db  0Eh
.eh_frame:0000000000005C0F                 db  10h
.eh_frame:0000000000005C10                 db  42h ; B
.eh_frame:0000000000005C11                 db  0Eh
.eh_frame:0000000000005C12                 db    8
.eh_frame:0000000000005C13                 db  44h ; D
.eh_frame:0000000000005C14                 db  0Bh
.eh_frame:0000000000005C15                 db    3
.eh_frame:0000000000005C16                 db  99h
.eh_frame:0000000000005C17                 db    5
.eh_frame:0000000000005C18                 db  0Eh
.eh_frame:0000000000005C19                 db 0F8h
.eh_frame:0000000000005C1A                 db    1
.eh_frame:0000000000005C1B                 db  4Dh ; M
.eh_frame:0000000000005C1C                 db  0Eh
.eh_frame:0000000000005C1D                 db  80h
.eh_frame:0000000000005C1E                 db    2
.eh_frame:0000000000005C1F                 db  44h ; D
.eh_frame:0000000000005C20                 db  0Eh
.eh_frame:0000000000005C21                 db  88h
.eh_frame:0000000000005C22                 db    2
.eh_frame:0000000000005C23                 db  47h ; G
.eh_frame:0000000000005C24                 db  0Eh
.eh_frame:0000000000005C25                 db  90h
.eh_frame:0000000000005C26                 db    2
.eh_frame:0000000000005C27                 db  5Bh ; [
.eh_frame:0000000000005C28                 db  0Eh
.eh_frame:0000000000005C29                 db 0F0h
.eh_frame:0000000000005C2A                 db    1
.eh_frame:0000000000005C2B                 db    0
.eh_frame:0000000000005C2C                 db  68h ; h
.eh_frame:0000000000005C2D                 db    0
.eh_frame:0000000000005C2E                 db    0
.eh_frame:0000000000005C2F                 db    0
.eh_frame:0000000000005C30                 db  28h ; (
.eh_frame:0000000000005C31                 db    2
.eh_frame:0000000000005C32                 db    0
.eh_frame:0000000000005C33                 db    0
.eh_frame:0000000000005C34                 db  5Ch ; \
.eh_frame:0000000000005C35                 db 0D7h
.eh_frame:0000000000005C36                 db 0FFh
.eh_frame:0000000000005C37                 db 0FFh
.eh_frame:0000000000005C38                 db 0ABh
.eh_frame:0000000000005C39                 db    1
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db    0
.eh_frame:0000000000005C3D                 db  42h ; B
.eh_frame:0000000000005C3E                 db  0Eh
.eh_frame:0000000000005C3F                 db  10h
.eh_frame:0000000000005C40                 db  8Fh
.eh_frame:0000000000005C41                 db    2
.eh_frame:0000000000005C42                 db  42h ; B
.eh_frame:0000000000005C43                 db  0Eh
.eh_frame:0000000000005C44                 db  18h
.eh_frame:0000000000005C45                 db  8Eh
.eh_frame:0000000000005C46                 db    3
.eh_frame:0000000000005C47                 db  45h ; E
.eh_frame:0000000000005C48                 db  0Eh
.eh_frame:0000000000005C49                 db  20h
.eh_frame:0000000000005C4A                 db  8Dh
.eh_frame:0000000000005C4B                 db    4
.eh_frame:0000000000005C4C                 db  42h ; B
.eh_frame:0000000000005C4D                 db  0Eh
.eh_frame:0000000000005C4E                 db  28h ; (
.eh_frame:0000000000005C4F                 db  8Ch
.eh_frame:0000000000005C50                 db    5
.eh_frame:0000000000005C51                 db  44h ; D
.eh_frame:0000000000005C52                 db  0Eh
.eh_frame:0000000000005C53                 db  30h ; 0
.eh_frame:0000000000005C54                 db  86h
.eh_frame:0000000000005C55                 db    6
.eh_frame:0000000000005C56                 db  41h ; A
.eh_frame:0000000000005C57                 db  0Eh
.eh_frame:0000000000005C58                 db  38h ; 8
.eh_frame:0000000000005C59                 db  83h
.eh_frame:0000000000005C5A                 db    7
.eh_frame:0000000000005C5B                 db  47h ; G
.eh_frame:0000000000005C5C                 db  0Eh
.eh_frame:0000000000005C5D                 db  60h ; `
.eh_frame:0000000000005C5E                 db    2
.eh_frame:0000000000005C5F                 db  99h
.eh_frame:0000000000005C60                 db  0Eh
.eh_frame:0000000000005C61                 db  68h ; h
.eh_frame:0000000000005C62                 db  5Fh ; _
.eh_frame:0000000000005C63                 db  0Eh
.eh_frame:0000000000005C64                 db  70h ; p
.eh_frame:0000000000005C65                 db  46h ; F
.eh_frame:0000000000005C66                 db  0Eh
.eh_frame:0000000000005C67                 db  78h ; x
.eh_frame:0000000000005C68                 db  42h ; B
.eh_frame:0000000000005C69                 db  0Eh
.eh_frame:0000000000005C6A                 db  80h
.eh_frame:0000000000005C6B                 db    1
.eh_frame:0000000000005C6C                 db  59h ; Y
.eh_frame:0000000000005C6D                 db  0Eh
.eh_frame:0000000000005C6E                 db  60h ; `
.eh_frame:0000000000005C6F                 db    2
.eh_frame:0000000000005C70                 db  40h ; @
.eh_frame:0000000000005C71                 db  0Eh
.eh_frame:0000000000005C72                 db  68h ; h
.eh_frame:0000000000005C73                 db  4Bh ; K
.eh_frame:0000000000005C74                 db  0Eh
.eh_frame:0000000000005C75                 db  70h ; p
.eh_frame:0000000000005C76                 db  43h ; C
.eh_frame:0000000000005C77                 db  0Eh
.eh_frame:0000000000005C78                 db  78h ; x
.eh_frame:0000000000005C79                 db  45h ; E
.eh_frame:0000000000005C7A                 db  0Eh
.eh_frame:0000000000005C7B                 db  80h
.eh_frame:0000000000005C7C                 db    1
.eh_frame:0000000000005C7D                 db  5Eh ; ^
.eh_frame:0000000000005C7E                 db  0Eh
.eh_frame:0000000000005C7F                 db  60h ; `
.eh_frame:0000000000005C80                 db  4Ch ; L
.eh_frame:0000000000005C81                 db  0Ah
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  38h ; 8
.eh_frame:0000000000005C84                 db  44h ; D
.eh_frame:0000000000005C85                 db  0Eh
.eh_frame:0000000000005C86                 db  30h ; 0
.eh_frame:0000000000005C87                 db  41h ; A
.eh_frame:0000000000005C88                 db  0Eh
.eh_frame:0000000000005C89                 db  28h ; (
.eh_frame:0000000000005C8A                 db  42h ; B
.eh_frame:0000000000005C8B                 db  0Eh
.eh_frame:0000000000005C8C                 db  20h
.eh_frame:0000000000005C8D                 db  42h ; B
.eh_frame:0000000000005C8E                 db  0Eh
.eh_frame:0000000000005C8F                 db  18h
.eh_frame:0000000000005C90                 db  42h ; B
.eh_frame:0000000000005C91                 db  0Eh
.eh_frame:0000000000005C92                 db  10h
.eh_frame:0000000000005C93                 db  42h ; B
.eh_frame:0000000000005C94                 db  0Eh
.eh_frame:0000000000005C95                 db    8
.eh_frame:0000000000005C96                 db  46h ; F
.eh_frame:0000000000005C97                 db  0Bh
.eh_frame:0000000000005C98                 db  28h ; (
.eh_frame:0000000000005C99                 db    0
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db  94h
.eh_frame:0000000000005C9D                 db    2
.eh_frame:0000000000005C9E                 db    0
.eh_frame:0000000000005C9F                 db    0
.eh_frame:0000000000005CA0                 db 0A0h
.eh_frame:0000000000005CA1                 db 0D8h
.eh_frame:0000000000005CA2                 db 0FFh
.eh_frame:0000000000005CA3                 db 0FFh
.eh_frame:0000000000005CA4                 db  36h ; 6
.eh_frame:0000000000005CA5                 db    0
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db    0
.eh_frame:0000000000005CA9                 db  42h ; B
.eh_frame:0000000000005CAA                 db  0Eh
.eh_frame:0000000000005CAB                 db  10h
.eh_frame:0000000000005CAC                 db  8Ch
.eh_frame:0000000000005CAD                 db    2
.eh_frame:0000000000005CAE                 db  41h ; A
.eh_frame:0000000000005CAF                 db  0Eh
.eh_frame:0000000000005CB0                 db  18h
.eh_frame:0000000000005CB1                 db  86h
.eh_frame:0000000000005CB2                 db    3
.eh_frame:0000000000005CB3                 db  41h ; A
.eh_frame:0000000000005CB4                 db  0Eh
.eh_frame:0000000000005CB5                 db  20h
.eh_frame:0000000000005CB6                 db  83h
.eh_frame:0000000000005CB7                 db    4
.eh_frame:0000000000005CB8                 db  6Eh ; n
.eh_frame:0000000000005CB9                 db  0Eh
.eh_frame:0000000000005CBA                 db  18h
.eh_frame:0000000000005CBB                 db  41h ; A
.eh_frame:0000000000005CBC                 db  0Eh
.eh_frame:0000000000005CBD                 db  10h
.eh_frame:0000000000005CBE                 db  42h ; B
.eh_frame:0000000000005CBF                 db  0Eh
.eh_frame:0000000000005CC0                 db    8
.eh_frame:0000000000005CC1                 db    0
.eh_frame:0000000000005CC2                 db    0
.eh_frame:0000000000005CC3                 db    0
.eh_frame:0000000000005CC4                 db  10h
.eh_frame:0000000000005CC5                 db    0
.eh_frame:0000000000005CC6                 db    0
.eh_frame:0000000000005CC7                 db    0
.eh_frame:0000000000005CC8                 db 0C0h
.eh_frame:0000000000005CC9                 db    2
.eh_frame:0000000000005CCA                 db    0
.eh_frame:0000000000005CCB                 db    0
.eh_frame:0000000000005CCC                 db 0B4h
.eh_frame:0000000000005CCD                 db 0D8h
.eh_frame:0000000000005CCE                 db 0FFh
.eh_frame:0000000000005CCF                 db 0FFh
.eh_frame:0000000000005CD0                 db  11h
.eh_frame:0000000000005CD1                 db    0
.eh_frame:0000000000005CD2                 db    0
.eh_frame:0000000000005CD3                 db    0
.eh_frame:0000000000005CD4                 db    0
.eh_frame:0000000000005CD5                 db    0
.eh_frame:0000000000005CD6                 db    0
.eh_frame:0000000000005CD7                 db    0
.eh_frame:0000000000005CD8                 db  10h
.eh_frame:0000000000005CD9                 db    0
.eh_frame:0000000000005CDA                 db    0
.eh_frame:0000000000005CDB                 db    0
.eh_frame:0000000000005CDC                 db 0D4h
.eh_frame:0000000000005CDD                 db    2
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db 0C0h
.eh_frame:0000000000005CE1                 db 0D8h
.eh_frame:0000000000005CE2                 db 0FFh
.eh_frame:0000000000005CE3                 db 0FFh
.eh_frame:0000000000005CE4                 db  11h
.eh_frame:0000000000005CE5                 db    0
.eh_frame:0000000000005CE6                 db    0
.eh_frame:0000000000005CE7                 db    0
.eh_frame:0000000000005CE8                 db    0
.eh_frame:0000000000005CE9                 db    0
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db  10h
.eh_frame:0000000000005CED                 db    0
.eh_frame:0000000000005CEE                 db    0
.eh_frame:0000000000005CEF                 db    0
.eh_frame:0000000000005CF0                 db 0E8h
.eh_frame:0000000000005CF1                 db    2
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db 0CCh
.eh_frame:0000000000005CF5                 db 0D8h
.eh_frame:0000000000005CF6                 db 0FFh
.eh_frame:0000000000005CF7                 db 0FFh
.eh_frame:0000000000005CF8                 db  35h ; 5
.eh_frame:0000000000005CF9                 db    0
.eh_frame:0000000000005CFA                 db    0
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db    0
.eh_frame:0000000000005CFD                 db    0
.eh_frame:0000000000005CFE                 db    0
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db  10h
.eh_frame:0000000000005D01                 db    0
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db 0FCh
.eh_frame:0000000000005D05                 db    2
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db 0F8h
.eh_frame:0000000000005D09                 db 0D8h
.eh_frame:0000000000005D0A                 db 0FFh
.eh_frame:0000000000005D0B                 db 0FFh
.eh_frame:0000000000005D0C                 db  15h
.eh_frame:0000000000005D0D                 db    0
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db    0
.eh_frame:0000000000005D11                 db    0
.eh_frame:0000000000005D12                 db    0
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db  10h
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db  10h
.eh_frame:0000000000005D19                 db    3
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db    4
.eh_frame:0000000000005D1D                 db 0D9h
.eh_frame:0000000000005D1E                 db 0FFh
.eh_frame:0000000000005D1F                 db 0FFh
.eh_frame:0000000000005D20                 db  30h ; 0
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db    0
.eh_frame:0000000000005D25                 db  6Bh ; k
.eh_frame:0000000000005D26                 db  0Eh
.eh_frame:0000000000005D27                 db  10h
.eh_frame:0000000000005D28                 db  50h ; P
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db  24h ; $
.eh_frame:0000000000005D2D                 db    3
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  20h
.eh_frame:0000000000005D31                 db 0D9h
.eh_frame:0000000000005D32                 db 0FFh
.eh_frame:0000000000005D33                 db 0FFh
.eh_frame:0000000000005D34                 db  74h ; t
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db    0
.eh_frame:0000000000005D39                 db  42h ; B
.eh_frame:0000000000005D3A                 db  0Eh
.eh_frame:0000000000005D3B                 db  10h
.eh_frame:0000000000005D3C                 db  8Fh
.eh_frame:0000000000005D3D                 db    2
.eh_frame:0000000000005D3E                 db  42h ; B
.eh_frame:0000000000005D3F                 db  0Eh
.eh_frame:0000000000005D40                 db  18h
.eh_frame:0000000000005D41                 db  8Eh
.eh_frame:0000000000005D42                 db    3
.eh_frame:0000000000005D43                 db  49h ; I
.eh_frame:0000000000005D44                 db  0Eh
.eh_frame:0000000000005D45                 db  20h
.eh_frame:0000000000005D46                 db  8Dh
.eh_frame:0000000000005D47                 db    4
.eh_frame:0000000000005D48                 db  42h ; B
.eh_frame:0000000000005D49                 db  0Eh
.eh_frame:0000000000005D4A                 db  28h ; (
.eh_frame:0000000000005D4B                 db  8Ch
.eh_frame:0000000000005D4C                 db    5
.eh_frame:0000000000005D4D                 db  44h ; D
.eh_frame:0000000000005D4E                 db  0Eh
.eh_frame:0000000000005D4F                 db  30h ; 0
.eh_frame:0000000000005D50                 db  86h
.eh_frame:0000000000005D51                 db    6
.eh_frame:0000000000005D52                 db  41h ; A
.eh_frame:0000000000005D53                 db  0Eh
.eh_frame:0000000000005D54                 db  38h ; 8
.eh_frame:0000000000005D55                 db  83h
.eh_frame:0000000000005D56                 db    7
.eh_frame:0000000000005D57                 db  4Dh ; M
.eh_frame:0000000000005D58                 db  0Eh
.eh_frame:0000000000005D59                 db  50h ; P
.eh_frame:0000000000005D5A                 db  5Fh ; _
.eh_frame:0000000000005D5B                 db  0Eh
.eh_frame:0000000000005D5C                 db  58h ; X
.eh_frame:0000000000005D5D                 db  47h ; G
.eh_frame:0000000000005D5E                 db  0Eh
.eh_frame:0000000000005D5F                 db  60h ; `
.eh_frame:0000000000005D60                 db  46h ; F
.eh_frame:0000000000005D61                 db  0Eh
.eh_frame:0000000000005D62                 db  68h ; h
.eh_frame:0000000000005D63                 db  44h ; D
.eh_frame:0000000000005D64                 db  0Eh
.eh_frame:0000000000005D65                 db  70h ; p
.eh_frame:0000000000005D66                 db  58h ; X
.eh_frame:0000000000005D67                 db  0Eh
.eh_frame:0000000000005D68                 db  38h ; 8
.eh_frame:0000000000005D69                 db  41h ; A
.eh_frame:0000000000005D6A                 db  0Eh
.eh_frame:0000000000005D6B                 db  30h ; 0
.eh_frame:0000000000005D6C                 db  41h ; A
.eh_frame:0000000000005D6D                 db  0Eh
.eh_frame:0000000000005D6E                 db  28h ; (
.eh_frame:0000000000005D6F                 db  42h ; B
.eh_frame:0000000000005D70                 db  0Eh
.eh_frame:0000000000005D71                 db  20h
.eh_frame:0000000000005D72                 db  42h ; B
.eh_frame:0000000000005D73                 db  0Eh
.eh_frame:0000000000005D74                 db  18h
.eh_frame:0000000000005D75                 db  42h ; B
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db  10h
.eh_frame:0000000000005D78                 db  42h ; B
.eh_frame:0000000000005D79                 db  0Eh
.eh_frame:0000000000005D7A                 db    8
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db  68h ; h
.eh_frame:0000000000005D7D                 db    0
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db  78h ; x
.eh_frame:0000000000005D81                 db    3
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db  4Ch ; L
.eh_frame:0000000000005D85                 db 0D9h
.eh_frame:0000000000005D86                 db 0FFh
.eh_frame:0000000000005D87                 db 0FFh
.eh_frame:0000000000005D88                 db 0E3h
.eh_frame:0000000000005D89                 db    0
.eh_frame:0000000000005D8A                 db    0
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db    0
.eh_frame:0000000000005D8D                 db  42h ; B
.eh_frame:0000000000005D8E                 db  0Eh
.eh_frame:0000000000005D8F                 db  10h
.eh_frame:0000000000005D90                 db  8Fh
.eh_frame:0000000000005D91                 db    2
.eh_frame:0000000000005D92                 db  42h ; B
.eh_frame:0000000000005D93                 db  0Eh
.eh_frame:0000000000005D94                 db  18h
.eh_frame:0000000000005D95                 db  8Eh
.eh_frame:0000000000005D96                 db    3
.eh_frame:0000000000005D97                 db  49h ; I
.eh_frame:0000000000005D98                 db  0Eh
.eh_frame:0000000000005D99                 db  20h
.eh_frame:0000000000005D9A                 db  8Dh
.eh_frame:0000000000005D9B                 db    4
.eh_frame:0000000000005D9C                 db  42h ; B
.eh_frame:0000000000005D9D                 db  0Eh
.eh_frame:0000000000005D9E                 db  28h ; (
.eh_frame:0000000000005D9F                 db  8Ch
.eh_frame:0000000000005DA0                 db    5
.eh_frame:0000000000005DA1                 db  44h ; D
.eh_frame:0000000000005DA2                 db  0Eh
.eh_frame:0000000000005DA3                 db  30h ; 0
.eh_frame:0000000000005DA4                 db  86h
.eh_frame:0000000000005DA5                 db    6
.eh_frame:0000000000005DA6                 db  41h ; A
.eh_frame:0000000000005DA7                 db  0Eh
.eh_frame:0000000000005DA8                 db  38h ; 8
.eh_frame:0000000000005DA9                 db  83h
.eh_frame:0000000000005DAA                 db    7
.eh_frame:0000000000005DAB                 db  4Dh ; M
.eh_frame:0000000000005DAC                 db  0Eh
.eh_frame:0000000000005DAD                 db  70h ; p
.eh_frame:0000000000005DAE                 db  65h ; e
.eh_frame:0000000000005DAF                 db  0Eh
.eh_frame:0000000000005DB0                 db  78h ; x
.eh_frame:0000000000005DB1                 db  4Dh ; M
.eh_frame:0000000000005DB2                 db  0Eh
.eh_frame:0000000000005DB3                 db  80h
.eh_frame:0000000000005DB4                 db    1
.eh_frame:0000000000005DB5                 db  46h ; F
.eh_frame:0000000000005DB6                 db  0Eh
.eh_frame:0000000000005DB7                 db  88h
.eh_frame:0000000000005DB8                 db    1
.eh_frame:0000000000005DB9                 db  42h ; B
.eh_frame:0000000000005DBA                 db  0Eh
.eh_frame:0000000000005DBB                 db  90h
.eh_frame:0000000000005DBC                 db    1
.eh_frame:0000000000005DBD                 db  5Eh ; ^
.eh_frame:0000000000005DBE                 db  0Eh
.eh_frame:0000000000005DBF                 db  70h ; p
.eh_frame:0000000000005DC0                 db  56h ; V
.eh_frame:0000000000005DC1                 db  0Eh
.eh_frame:0000000000005DC2                 db  78h ; x
.eh_frame:0000000000005DC3                 db  43h ; C
.eh_frame:0000000000005DC4                 db  0Eh
.eh_frame:0000000000005DC5                 db  80h
.eh_frame:0000000000005DC6                 db    1
.eh_frame:0000000000005DC7                 db  43h ; C
.eh_frame:0000000000005DC8                 db  0Eh
.eh_frame:0000000000005DC9                 db  88h
.eh_frame:0000000000005DCA                 db    1
.eh_frame:0000000000005DCB                 db  56h ; V
.eh_frame:0000000000005DCC                 db  0Eh
.eh_frame:0000000000005DCD                 db  90h
.eh_frame:0000000000005DCE                 db    1
.eh_frame:0000000000005DCF                 db  52h ; R
.eh_frame:0000000000005DD0                 db  0Eh
.eh_frame:0000000000005DD1                 db  70h ; p
.eh_frame:0000000000005DD2                 db  5Bh ; [
.eh_frame:0000000000005DD3                 db  0Eh
.eh_frame:0000000000005DD4                 db  38h ; 8
.eh_frame:0000000000005DD5                 db  41h ; A
.eh_frame:0000000000005DD6                 db  0Eh
.eh_frame:0000000000005DD7                 db  30h ; 0
.eh_frame:0000000000005DD8                 db  41h ; A
.eh_frame:0000000000005DD9                 db  0Eh
.eh_frame:0000000000005DDA                 db  28h ; (
.eh_frame:0000000000005DDB                 db  42h ; B
.eh_frame:0000000000005DDC                 db  0Eh
.eh_frame:0000000000005DDD                 db  20h
.eh_frame:0000000000005DDE                 db  42h ; B
.eh_frame:0000000000005DDF                 db  0Eh
.eh_frame:0000000000005DE0                 db  18h
.eh_frame:0000000000005DE1                 db  42h ; B
.eh_frame:0000000000005DE2                 db  0Eh
.eh_frame:0000000000005DE3                 db  10h
.eh_frame:0000000000005DE4                 db  42h ; B
.eh_frame:0000000000005DE5                 db  0Eh
.eh_frame:0000000000005DE6                 db    8
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db  10h
.eh_frame:0000000000005DE9                 db    0
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db 0E4h
.eh_frame:0000000000005DED                 db    3
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db 0D0h
.eh_frame:0000000000005DF1                 db 0D9h
.eh_frame:0000000000005DF2                 db 0FFh
.eh_frame:0000000000005DF3                 db 0FFh
.eh_frame:0000000000005DF4                 db  0Ah
.eh_frame:0000000000005DF5                 db    0
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db    0
.eh_frame:0000000000005DF9                 db    0
.eh_frame:0000000000005DFA                 db    0
.eh_frame:0000000000005DFB                 db    0
.eh_frame:0000000000005DFC                 db  28h ; (
.eh_frame:0000000000005DFD                 db    0
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db 0F8h
.eh_frame:0000000000005E01                 db    3
.eh_frame:0000000000005E02                 db    0
.eh_frame:0000000000005E03                 db    0
.eh_frame:0000000000005E04                 db 0CCh
.eh_frame:0000000000005E05                 db 0D9h
.eh_frame:0000000000005E06                 db 0FFh
.eh_frame:0000000000005E07                 db 0FFh
.eh_frame:0000000000005E08                 db  93h
.eh_frame:0000000000005E09                 db    0
.eh_frame:0000000000005E0A                 db    0
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db    0
.eh_frame:0000000000005E0D                 db  48h ; H
.eh_frame:0000000000005E0E                 db  0Eh
.eh_frame:0000000000005E0F                 db  10h
.eh_frame:0000000000005E10                 db  8Ch
.eh_frame:0000000000005E11                 db    2
.eh_frame:0000000000005E12                 db  48h ; H
.eh_frame:0000000000005E13                 db  0Eh
.eh_frame:0000000000005E14                 db  18h
.eh_frame:0000000000005E15                 db  86h
.eh_frame:0000000000005E16                 db    3
.eh_frame:0000000000005E17                 db  41h ; A
.eh_frame:0000000000005E18                 db  0Eh
.eh_frame:0000000000005E19                 db  20h
.eh_frame:0000000000005E1A                 db  83h
.eh_frame:0000000000005E1B                 db    4
.eh_frame:0000000000005E1C                 db    2
.eh_frame:0000000000005E1D                 db  74h ; t
.eh_frame:0000000000005E1E                 db  0Eh
.eh_frame:0000000000005E1F                 db  18h
.eh_frame:0000000000005E20                 db  4Bh ; K
.eh_frame:0000000000005E21                 db  0Eh
.eh_frame:0000000000005E22                 db  10h
.eh_frame:0000000000005E23                 db  42h ; B
.eh_frame:0000000000005E24                 db  0Eh
.eh_frame:0000000000005E25                 db    8
.eh_frame:0000000000005E26                 db    0
.eh_frame:0000000000005E27                 db    0
.eh_frame:0000000000005E28                 db  10h
.eh_frame:0000000000005E29                 db    0
.eh_frame:0000000000005E2A                 db    0
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db  24h ; $
.eh_frame:0000000000005E2D                 db    4
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db  40h ; @
.eh_frame:0000000000005E31                 db 0DAh
.eh_frame:0000000000005E32                 db 0FFh
.eh_frame:0000000000005E33                 db 0FFh
.eh_frame:0000000000005E34                 db  13h
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db    0
.eh_frame:0000000000005E39                 db    0
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db  10h
.eh_frame:0000000000005E3D                 db    0
.eh_frame:0000000000005E3E                 db    0
.eh_frame:0000000000005E3F                 db    0
.eh_frame:0000000000005E40                 db  38h ; 8
.eh_frame:0000000000005E41                 db    4
.eh_frame:0000000000005E42                 db    0
.eh_frame:0000000000005E43                 db    0
.eh_frame:0000000000005E44                 db  4Ch ; L
.eh_frame:0000000000005E45                 db 0DAh
.eh_frame:0000000000005E46                 db 0FFh
.eh_frame:0000000000005E47                 db 0FFh
.eh_frame:0000000000005E48                 db  0Ch
.eh_frame:0000000000005E49                 db    0
.eh_frame:0000000000005E4A                 db    0
.eh_frame:0000000000005E4B                 db    0
.eh_frame:0000000000005E4C                 db    0
.eh_frame:0000000000005E4D                 db    0
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db  10h
.eh_frame:0000000000005E51                 db    0
.eh_frame:0000000000005E52                 db    0
.eh_frame:0000000000005E53                 db    0
.eh_frame:0000000000005E54                 db  4Ch ; L
.eh_frame:0000000000005E55                 db    4
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db  48h ; H
.eh_frame:0000000000005E59                 db 0DAh
.eh_frame:0000000000005E5A                 db 0FFh
.eh_frame:0000000000005E5B                 db 0FFh
.eh_frame:0000000000005E5C                 db  18h
.eh_frame:0000000000005E5D                 db    0
.eh_frame:0000000000005E5E                 db    0
.eh_frame:0000000000005E5F                 db    0
.eh_frame:0000000000005E60                 db    0
.eh_frame:0000000000005E61                 db    0
.eh_frame:0000000000005E62                 db    0
.eh_frame:0000000000005E63                 db    0
.eh_frame:0000000000005E64                 db  10h
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db  60h ; `
.eh_frame:0000000000005E69                 db    4
.eh_frame:0000000000005E6A                 db    0
.eh_frame:0000000000005E6B                 db    0
.eh_frame:0000000000005E6C                 db  54h ; T
.eh_frame:0000000000005E6D                 db 0DAh
.eh_frame:0000000000005E6E                 db 0FFh
.eh_frame:0000000000005E6F                 db 0FFh
.eh_frame:0000000000005E70                 db  14h
.eh_frame:0000000000005E71                 db    0
.eh_frame:0000000000005E72                 db    0
.eh_frame:0000000000005E73                 db    0
.eh_frame:0000000000005E74                 db    0
.eh_frame:0000000000005E75                 db    0
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db  18h
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db  74h ; t
.eh_frame:0000000000005E7D                 db    4
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db  60h ; `
.eh_frame:0000000000005E81                 db 0DAh
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db  8Eh
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db  44h ; D
.eh_frame:0000000000005E8A                 db  0Eh
.eh_frame:0000000000005E8B                 db  50h ; P
.eh_frame:0000000000005E8C                 db    2
.eh_frame:0000000000005E8D                 db  7Fh ; 
.eh_frame:0000000000005E8E                 db  0Ah
.eh_frame:0000000000005E8F                 db  0Eh
.eh_frame:0000000000005E90                 db    8
.eh_frame:0000000000005E91                 db  41h ; A
.eh_frame:0000000000005E92                 db  0Bh
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db  18h
.eh_frame:0000000000005E95                 db    0
.eh_frame:0000000000005E96                 db    0
.eh_frame:0000000000005E97                 db    0
.eh_frame:0000000000005E98                 db  90h
.eh_frame:0000000000005E99                 db    4
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db 0D4h
.eh_frame:0000000000005E9D                 db 0DAh
.eh_frame:0000000000005E9E                 db 0FFh
.eh_frame:0000000000005E9F                 db 0FFh
.eh_frame:0000000000005EA0                 db  8Ah
.eh_frame:0000000000005EA1                 db    0
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db    0
.eh_frame:0000000000005EA5                 db  44h ; D
.eh_frame:0000000000005EA6                 db  0Eh
.eh_frame:0000000000005EA7                 db  50h ; P
.eh_frame:0000000000005EA8                 db    2
.eh_frame:0000000000005EA9                 db  7Bh ; {
.eh_frame:0000000000005EAA                 db  0Ah
.eh_frame:0000000000005EAB                 db  0Eh
.eh_frame:0000000000005EAC                 db    8
.eh_frame:0000000000005EAD                 db  41h ; A
.eh_frame:0000000000005EAE                 db  0Bh
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db  10h
.eh_frame:0000000000005EB1                 db    0
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db 0ACh
.eh_frame:0000000000005EB5                 db    4
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  48h ; H
.eh_frame:0000000000005EB9                 db 0DBh
.eh_frame:0000000000005EBA                 db 0FFh
.eh_frame:0000000000005EBB                 db 0FFh
.eh_frame:0000000000005EBC                 db  0Ch
.eh_frame:0000000000005EBD                 db    0
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db    0
.eh_frame:0000000000005EC1                 db    0
.eh_frame:0000000000005EC2                 db    0
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db  10h
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db 0C0h
.eh_frame:0000000000005EC9                 db    4
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  44h ; D
.eh_frame:0000000000005ECD                 db 0DBh
.eh_frame:0000000000005ECE                 db 0FFh
.eh_frame:0000000000005ECF                 db 0FFh
.eh_frame:0000000000005ED0                 db  0Fh
.eh_frame:0000000000005ED1                 db    0
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db    0
.eh_frame:0000000000005ED5                 db    0
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db  18h
.eh_frame:0000000000005ED9                 db    0
.eh_frame:0000000000005EDA                 db    0
.eh_frame:0000000000005EDB                 db    0
.eh_frame:0000000000005EDC                 db 0D4h
.eh_frame:0000000000005EDD                 db    4
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db  40h ; @
.eh_frame:0000000000005EE1                 db 0DBh
.eh_frame:0000000000005EE2                 db 0FFh
.eh_frame:0000000000005EE3                 db 0FFh
.eh_frame:0000000000005EE4                 db  98h
.eh_frame:0000000000005EE5                 db    0
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db    0
.eh_frame:0000000000005EE9                 db  44h ; D
.eh_frame:0000000000005EEA                 db  0Eh
.eh_frame:0000000000005EEB                 db  50h ; P
.eh_frame:0000000000005EEC                 db    2
.eh_frame:0000000000005EED                 db  8Eh
.eh_frame:0000000000005EEE                 db  0Ah
.eh_frame:0000000000005EEF                 db  0Eh
.eh_frame:0000000000005EF0                 db    8
.eh_frame:0000000000005EF1                 db  41h ; A
.eh_frame:0000000000005EF2                 db  0Bh
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db  10h
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db 0F0h
.eh_frame:0000000000005EF9                 db    4
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db 0C4h
.eh_frame:0000000000005EFD                 db 0DBh
.eh_frame:0000000000005EFE                 db 0FFh
.eh_frame:0000000000005EFF                 db 0FFh
.eh_frame:0000000000005F00                 db  10h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db    0
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  10h
.eh_frame:0000000000005F09                 db    0
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db    4
.eh_frame:0000000000005F0D                 db    5
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db 0C0h
.eh_frame:0000000000005F11                 db 0DBh
.eh_frame:0000000000005F12                 db 0FFh
.eh_frame:0000000000005F13                 db 0FFh
.eh_frame:0000000000005F14                 db  11h
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db    0
.eh_frame:0000000000005F19                 db    0
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db  10h
.eh_frame:0000000000005F1D                 db    0
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db  18h
.eh_frame:0000000000005F21                 db    5
.eh_frame:0000000000005F22                 db    0
.eh_frame:0000000000005F23                 db    0
.eh_frame:0000000000005F24                 db 0CCh
.eh_frame:0000000000005F25                 db 0DBh
.eh_frame:0000000000005F26                 db 0FFh
.eh_frame:0000000000005F27                 db 0FFh
.eh_frame:0000000000005F28                 db  0Ah
.eh_frame:0000000000005F29                 db    0
.eh_frame:0000000000005F2A                 db    0
.eh_frame:0000000000005F2B                 db    0
.eh_frame:0000000000005F2C                 db    0
.eh_frame:0000000000005F2D                 db    0
.eh_frame:0000000000005F2E                 db    0
.eh_frame:0000000000005F2F                 db    0
.eh_frame:0000000000005F30                 db  18h
.eh_frame:0000000000005F31                 db    0
.eh_frame:0000000000005F32                 db    0
.eh_frame:0000000000005F33                 db    0
.eh_frame:0000000000005F34                 db  2Ch ; ,
.eh_frame:0000000000005F35                 db    5
.eh_frame:0000000000005F36                 db    0
.eh_frame:0000000000005F37                 db    0
.eh_frame:0000000000005F38                 db 0C8h
.eh_frame:0000000000005F39                 db 0DBh
.eh_frame:0000000000005F3A                 db 0FFh
.eh_frame:0000000000005F3B                 db 0FFh
.eh_frame:0000000000005F3C                 db  8Eh
.eh_frame:0000000000005F3D                 db    0
.eh_frame:0000000000005F3E                 db    0
.eh_frame:0000000000005F3F                 db    0
.eh_frame:0000000000005F40                 db    0
.eh_frame:0000000000005F41                 db  44h ; D
.eh_frame:0000000000005F42                 db  0Eh
.eh_frame:0000000000005F43                 db  50h ; P
.eh_frame:0000000000005F44                 db    2
.eh_frame:0000000000005F45                 db  7Fh ; 
.eh_frame:0000000000005F46                 db  0Ah
.eh_frame:0000000000005F47                 db  0Eh
.eh_frame:0000000000005F48                 db    8
.eh_frame:0000000000005F49                 db  41h ; A
.eh_frame:0000000000005F4A                 db  0Bh
.eh_frame:0000000000005F4B                 db    0
.eh_frame:0000000000005F4C                 db  18h
.eh_frame:0000000000005F4D                 db    0
.eh_frame:0000000000005F4E                 db    0
.eh_frame:0000000000005F4F                 db    0
.eh_frame:0000000000005F50                 db  48h ; H
.eh_frame:0000000000005F51                 db    5
.eh_frame:0000000000005F52                 db    0
.eh_frame:0000000000005F53                 db    0
.eh_frame:0000000000005F54                 db  3Ch ; <
.eh_frame:0000000000005F55                 db 0DCh
.eh_frame:0000000000005F56                 db 0FFh
.eh_frame:0000000000005F57                 db 0FFh
.eh_frame:0000000000005F58                 db  91h
.eh_frame:0000000000005F59                 db    0
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db    0
.eh_frame:0000000000005F5D                 db  44h ; D
.eh_frame:0000000000005F5E                 db  0Eh
.eh_frame:0000000000005F5F                 db  50h ; P
.eh_frame:0000000000005F60                 db    2
.eh_frame:0000000000005F61                 db  82h
.eh_frame:0000000000005F62                 db  0Ah
.eh_frame:0000000000005F63                 db  0Eh
.eh_frame:0000000000005F64                 db    8
.eh_frame:0000000000005F65                 db  41h ; A
.eh_frame:0000000000005F66                 db  0Bh
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db  10h
.eh_frame:0000000000005F69                 db    0
.eh_frame:0000000000005F6A                 db    0
.eh_frame:0000000000005F6B                 db    0
.eh_frame:0000000000005F6C                 db  64h ; d
.eh_frame:0000000000005F6D                 db    5
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db 0C0h
.eh_frame:0000000000005F71                 db 0DCh
.eh_frame:0000000000005F72                 db 0FFh
.eh_frame:0000000000005F73                 db 0FFh
.eh_frame:0000000000005F74                 db  0Ch
.eh_frame:0000000000005F75                 db    0
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db    0
.eh_frame:0000000000005F79                 db    0
.eh_frame:0000000000005F7A                 db    0
.eh_frame:0000000000005F7B                 db    0
.eh_frame:0000000000005F7C                 db  10h
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db  78h ; x
.eh_frame:0000000000005F81                 db    5
.eh_frame:0000000000005F82                 db    0
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db 0BCh
.eh_frame:0000000000005F85                 db 0DCh
.eh_frame:0000000000005F86                 db 0FFh
.eh_frame:0000000000005F87                 db 0FFh
.eh_frame:0000000000005F88                 db  17h
.eh_frame:0000000000005F89                 db    0
.eh_frame:0000000000005F8A                 db    0
.eh_frame:0000000000005F8B                 db    0
.eh_frame:0000000000005F8C                 db    0
.eh_frame:0000000000005F8D                 db    0
.eh_frame:0000000000005F8E                 db    0
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db  10h
.eh_frame:0000000000005F91                 db    0
.eh_frame:0000000000005F92                 db    0
.eh_frame:0000000000005F93                 db    0
.eh_frame:0000000000005F94                 db  8Ch
.eh_frame:0000000000005F95                 db    5
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db 0C8h
.eh_frame:0000000000005F99                 db 0DCh
.eh_frame:0000000000005F9A                 db 0FFh
.eh_frame:0000000000005F9B                 db 0FFh
.eh_frame:0000000000005F9C                 db  13h
.eh_frame:0000000000005F9D                 db    0
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db    0
.eh_frame:0000000000005FA1                 db    0
.eh_frame:0000000000005FA2                 db    0
.eh_frame:0000000000005FA3                 db    0
.eh_frame:0000000000005FA4                 db  10h
.eh_frame:0000000000005FA5                 db    0
.eh_frame:0000000000005FA6                 db    0
.eh_frame:0000000000005FA7                 db    0
.eh_frame:0000000000005FA8                 db 0A0h
.eh_frame:0000000000005FA9                 db    5
.eh_frame:0000000000005FAA                 db    0
.eh_frame:0000000000005FAB                 db    0
.eh_frame:0000000000005FAC                 db 0D4h
.eh_frame:0000000000005FAD                 db 0DCh
.eh_frame:0000000000005FAE                 db 0FFh
.eh_frame:0000000000005FAF                 db 0FFh
.eh_frame:0000000000005FB0                 db  0Ch
.eh_frame:0000000000005FB1                 db    0
.eh_frame:0000000000005FB2                 db    0
.eh_frame:0000000000005FB3                 db    0
.eh_frame:0000000000005FB4                 db    0
.eh_frame:0000000000005FB5                 db    0
.eh_frame:0000000000005FB6                 db    0
.eh_frame:0000000000005FB7                 db    0
.eh_frame:0000000000005FB8                 db  10h
.eh_frame:0000000000005FB9                 db    0
.eh_frame:0000000000005FBA                 db    0
.eh_frame:0000000000005FBB                 db    0
.eh_frame:0000000000005FBC                 db 0B4h
.eh_frame:0000000000005FBD                 db    5
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db 0D0h
.eh_frame:0000000000005FC1                 db 0DCh
.eh_frame:0000000000005FC2                 db 0FFh
.eh_frame:0000000000005FC3                 db 0FFh
.eh_frame:0000000000005FC4                 db  14h
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db    0
.eh_frame:0000000000005FC9                 db    0
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db  10h
.eh_frame:0000000000005FCD                 db    0
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db 0C8h
.eh_frame:0000000000005FD1                 db    5
.eh_frame:0000000000005FD2                 db    0
.eh_frame:0000000000005FD3                 db    0
.eh_frame:0000000000005FD4                 db 0DCh
.eh_frame:0000000000005FD5                 db 0DCh
.eh_frame:0000000000005FD6                 db 0FFh
.eh_frame:0000000000005FD7                 db 0FFh
.eh_frame:0000000000005FD8                 db  13h
.eh_frame:0000000000005FD9                 db    0
.eh_frame:0000000000005FDA                 db    0
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db    0
.eh_frame:0000000000005FDD                 db    0
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db  14h
.eh_frame:0000000000005FE1                 db    0
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db 0DCh
.eh_frame:0000000000005FE5                 db    5
.eh_frame:0000000000005FE6                 db    0
.eh_frame:0000000000005FE7                 db    0
.eh_frame:0000000000005FE8                 db 0E8h
.eh_frame:0000000000005FE9                 db 0DCh
.eh_frame:0000000000005FEA                 db 0FFh
.eh_frame:0000000000005FEB                 db 0FFh
.eh_frame:0000000000005FEC                 db  18h
.eh_frame:0000000000005FED                 db    0
.eh_frame:0000000000005FEE                 db    0
.eh_frame:0000000000005FEF                 db    0
.eh_frame:0000000000005FF0                 db    0
.eh_frame:0000000000005FF1                 db    0
.eh_frame:0000000000005FF2                 db    0
.eh_frame:0000000000005FF3                 db    0
.eh_frame:0000000000005FF4                 db    0
.eh_frame:0000000000005FF5                 db    0
.eh_frame:0000000000005FF6                 db    0
.eh_frame:0000000000005FF7                 db    0
.eh_frame:0000000000005FF8                 db  10h
.eh_frame:0000000000005FF9                 db    1
.eh_frame:0000000000005FFA                 db    0
.eh_frame:0000000000005FFB                 db    0
.eh_frame:0000000000005FFC                 db 0F4h
.eh_frame:0000000000005FFD                 db    5
.eh_frame:0000000000005FFE                 db    0
.eh_frame:0000000000005FFF                 db    0
.eh_frame:0000000000006000                 db 0F0h
.eh_frame:0000000000006001                 db 0DCh
.eh_frame:0000000000006002                 db 0FFh
.eh_frame:0000000000006003                 db 0FFh
.eh_frame:0000000000006004                 db  17h
.eh_frame:0000000000006005                 db    4
.eh_frame:0000000000006006                 db    0
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db    0
.eh_frame:0000000000006009                 db  42h ; B
.eh_frame:000000000000600A                 db  0Eh
.eh_frame:000000000000600B                 db  10h
.eh_frame:000000000000600C                 db  8Fh
.eh_frame:000000000000600D                 db    2
.eh_frame:000000000000600E                 db  42h ; B
.eh_frame:000000000000600F                 db  0Eh
.eh_frame:0000000000006010                 db  18h
.eh_frame:0000000000006011                 db  8Eh
.eh_frame:0000000000006012                 db    3
.eh_frame:0000000000006013                 db  42h ; B
.eh_frame:0000000000006014                 db  0Eh
.eh_frame:0000000000006015                 db  20h
.eh_frame:0000000000006016                 db  8Dh
.eh_frame:0000000000006017                 db    4
.eh_frame:0000000000006018                 db  42h ; B
.eh_frame:0000000000006019                 db  0Eh
.eh_frame:000000000000601A                 db  28h ; (
.eh_frame:000000000000601B                 db  8Ch
.eh_frame:000000000000601C                 db    5
.eh_frame:000000000000601D                 db  44h ; D
.eh_frame:000000000000601E                 db  0Eh
.eh_frame:000000000000601F                 db  30h ; 0
.eh_frame:0000000000006020                 db  86h
.eh_frame:0000000000006021                 db    6
.eh_frame:0000000000006022                 db  41h ; A
.eh_frame:0000000000006023                 db  0Eh
.eh_frame:0000000000006024                 db  38h ; 8
.eh_frame:0000000000006025                 db  83h
.eh_frame:0000000000006026                 db    7
.eh_frame:0000000000006027                 db  4Ah ; J
.eh_frame:0000000000006028                 db  0Eh
.eh_frame:0000000000006029                 db  60h ; `
.eh_frame:000000000000602A                 db    2
.eh_frame:000000000000602B                 db 0DDh
.eh_frame:000000000000602C                 db  0Eh
.eh_frame:000000000000602D                 db  68h ; h
.eh_frame:000000000000602E                 db  57h ; W
.eh_frame:000000000000602F                 db  0Eh
.eh_frame:0000000000006030                 db  70h ; p
.eh_frame:0000000000006031                 db  42h ; B
.eh_frame:0000000000006032                 db  0Eh
.eh_frame:0000000000006033                 db  78h ; x
.eh_frame:0000000000006034                 db  42h ; B
.eh_frame:0000000000006035                 db  0Eh
.eh_frame:0000000000006036                 db  80h
.eh_frame:0000000000006037                 db    1
.eh_frame:0000000000006038                 db  42h ; B
.eh_frame:0000000000006039                 db  0Eh
.eh_frame:000000000000603A                 db  88h
.eh_frame:000000000000603B                 db    1
.eh_frame:000000000000603C                 db  42h ; B
.eh_frame:000000000000603D                 db  0Eh
.eh_frame:000000000000603E                 db  90h
.eh_frame:000000000000603F                 db    1
.eh_frame:0000000000006040                 db  53h ; S
.eh_frame:0000000000006041                 db  0Eh
.eh_frame:0000000000006042                 db  60h ; `
.eh_frame:0000000000006043                 db  44h ; D
.eh_frame:0000000000006044                 db  0Ah
.eh_frame:0000000000006045                 db  0Eh
.eh_frame:0000000000006046                 db  38h ; 8
.eh_frame:0000000000006047                 db  41h ; A
.eh_frame:0000000000006048                 db  0Eh
.eh_frame:0000000000006049                 db  30h ; 0
.eh_frame:000000000000604A                 db  41h ; A
.eh_frame:000000000000604B                 db  0Eh
.eh_frame:000000000000604C                 db  28h ; (
.eh_frame:000000000000604D                 db  42h ; B
.eh_frame:000000000000604E                 db  0Eh
.eh_frame:000000000000604F                 db  20h
.eh_frame:0000000000006050                 db  42h ; B
.eh_frame:0000000000006051                 db  0Eh
.eh_frame:0000000000006052                 db  18h
.eh_frame:0000000000006053                 db  42h ; B
.eh_frame:0000000000006054                 db  0Eh
.eh_frame:0000000000006055                 db  10h
.eh_frame:0000000000006056                 db  42h ; B
.eh_frame:0000000000006057                 db  0Eh
.eh_frame:0000000000006058                 db    8
.eh_frame:0000000000006059                 db  44h ; D
.eh_frame:000000000000605A                 db  0Bh
.eh_frame:000000000000605B                 db    2
.eh_frame:000000000000605C                 db  78h ; x
.eh_frame:000000000000605D                 db  0Ah
.eh_frame:000000000000605E                 db  0Eh
.eh_frame:000000000000605F                 db  68h ; h
.eh_frame:0000000000006060                 db  48h ; H
.eh_frame:0000000000006061                 db  0Bh
.eh_frame:0000000000006062                 db  5Ah ; Z
.eh_frame:0000000000006063                 db  0Ah
.eh_frame:0000000000006064                 db  0Eh
.eh_frame:0000000000006065                 db  38h ; 8
.eh_frame:0000000000006066                 db  47h ; G
.eh_frame:0000000000006067                 db  0Eh
.eh_frame:0000000000006068                 db  30h ; 0
.eh_frame:0000000000006069                 db  41h ; A
.eh_frame:000000000000606A                 db  0Eh
.eh_frame:000000000000606B                 db  28h ; (
.eh_frame:000000000000606C                 db  42h ; B
.eh_frame:000000000000606D                 db  0Eh
.eh_frame:000000000000606E                 db  20h
.eh_frame:000000000000606F                 db  42h ; B
.eh_frame:0000000000006070                 db  0Eh
.eh_frame:0000000000006071                 db  18h
.eh_frame:0000000000006072                 db  42h ; B
.eh_frame:0000000000006073                 db  0Eh
.eh_frame:0000000000006074                 db  10h
.eh_frame:0000000000006075                 db  42h ; B
.eh_frame:0000000000006076                 db  0Eh
.eh_frame:0000000000006077                 db    8
.eh_frame:0000000000006078                 db  56h ; V
.eh_frame:0000000000006079                 db  0Bh
.eh_frame:000000000000607A                 db  5Eh ; ^
.eh_frame:000000000000607B                 db  0Ah
.eh_frame:000000000000607C                 db  0Eh
.eh_frame:000000000000607D                 db  38h ; 8
.eh_frame:000000000000607E                 db  52h ; R
.eh_frame:000000000000607F                 db  0Eh
.eh_frame:0000000000006080                 db  30h ; 0
.eh_frame:0000000000006081                 db  41h ; A
.eh_frame:0000000000006082                 db  0Eh
.eh_frame:0000000000006083                 db  28h ; (
.eh_frame:0000000000006084                 db  42h ; B
.eh_frame:0000000000006085                 db  0Eh
.eh_frame:0000000000006086                 db  20h
.eh_frame:0000000000006087                 db  42h ; B
.eh_frame:0000000000006088                 db  0Eh
.eh_frame:0000000000006089                 db  18h
.eh_frame:000000000000608A                 db  42h ; B
.eh_frame:000000000000608B                 db  0Eh
.eh_frame:000000000000608C                 db  10h
.eh_frame:000000000000608D                 db  42h ; B
.eh_frame:000000000000608E                 db  0Eh
.eh_frame:000000000000608F                 db    8
.eh_frame:0000000000006090                 db  4Fh ; O
.eh_frame:0000000000006091                 db  0Bh
.eh_frame:0000000000006092                 db  62h ; b
.eh_frame:0000000000006093                 db  0Ah
.eh_frame:0000000000006094                 db  0Eh
.eh_frame:0000000000006095                 db  38h ; 8
.eh_frame:0000000000006096                 db  50h ; P
.eh_frame:0000000000006097                 db  0Eh
.eh_frame:0000000000006098                 db  30h ; 0
.eh_frame:0000000000006099                 db  41h ; A
.eh_frame:000000000000609A                 db  0Eh
.eh_frame:000000000000609B                 db  28h ; (
.eh_frame:000000000000609C                 db  42h ; B
.eh_frame:000000000000609D                 db  0Eh
.eh_frame:000000000000609E                 db  20h
.eh_frame:000000000000609F                 db  42h ; B
.eh_frame:00000000000060A0                 db  0Eh
.eh_frame:00000000000060A1                 db  18h
.eh_frame:00000000000060A2                 db  42h ; B
.eh_frame:00000000000060A3                 db  0Eh
.eh_frame:00000000000060A4                 db  10h
.eh_frame:00000000000060A5                 db  42h ; B
.eh_frame:00000000000060A6                 db  0Eh
.eh_frame:00000000000060A7                 db    8
.eh_frame:00000000000060A8                 db  55h ; U
.eh_frame:00000000000060A9                 db  0Bh
.eh_frame:00000000000060AA                 db  66h ; f
.eh_frame:00000000000060AB                 db  0Eh
.eh_frame:00000000000060AC                 db  68h ; h
.eh_frame:00000000000060AD                 db  42h ; B
.eh_frame:00000000000060AE                 db  0Eh
.eh_frame:00000000000060AF                 db  70h ; p
.eh_frame:00000000000060B0                 db  5Ch ; \
.eh_frame:00000000000060B1                 db  0Eh
.eh_frame:00000000000060B2                 db  68h ; h
.eh_frame:00000000000060B3                 db  41h ; A
.eh_frame:00000000000060B4                 db  0Eh
.eh_frame:00000000000060B5                 db  60h ; `
.eh_frame:00000000000060B6                 db  44h ; D
.eh_frame:00000000000060B7                 db  0Ah
.eh_frame:00000000000060B8                 db  0Eh
.eh_frame:00000000000060B9                 db  38h ; 8
.eh_frame:00000000000060BA                 db  41h ; A
.eh_frame:00000000000060BB                 db  0Eh
.eh_frame:00000000000060BC                 db  30h ; 0
.eh_frame:00000000000060BD                 db  41h ; A
.eh_frame:00000000000060BE                 db  0Eh
.eh_frame:00000000000060BF                 db  28h ; (
.eh_frame:00000000000060C0                 db  42h ; B
.eh_frame:00000000000060C1                 db  0Eh
.eh_frame:00000000000060C2                 db  20h
.eh_frame:00000000000060C3                 db  42h ; B
.eh_frame:00000000000060C4                 db  0Eh
.eh_frame:00000000000060C5                 db  18h
.eh_frame:00000000000060C6                 db  42h ; B
.eh_frame:00000000000060C7                 db  0Eh
.eh_frame:00000000000060C8                 db  10h
.eh_frame:00000000000060C9                 db  42h ; B
.eh_frame:00000000000060CA                 db  0Eh
.eh_frame:00000000000060CB                 db    8
.eh_frame:00000000000060CC                 db  45h ; E
.eh_frame:00000000000060CD                 db  0Bh
.eh_frame:00000000000060CE                 db  68h ; h
.eh_frame:00000000000060CF                 db  0Ah
.eh_frame:00000000000060D0                 db  0Eh
.eh_frame:00000000000060D1                 db  68h ; h
.eh_frame:00000000000060D2                 db  48h ; H
.eh_frame:00000000000060D3                 db  0Bh
.eh_frame:00000000000060D4                 db  72h ; r
.eh_frame:00000000000060D5                 db  0Eh
.eh_frame:00000000000060D6                 db  68h ; h
.eh_frame:00000000000060D7                 db  45h ; E
.eh_frame:00000000000060D8                 db  0Eh
.eh_frame:00000000000060D9                 db  70h ; p
.eh_frame:00000000000060DA                 db  42h ; B
.eh_frame:00000000000060DB                 db  0Eh
.eh_frame:00000000000060DC                 db  78h ; x
.eh_frame:00000000000060DD                 db  42h ; B
.eh_frame:00000000000060DE                 db  0Eh
.eh_frame:00000000000060DF                 db  80h
.eh_frame:00000000000060E0                 db    1
.eh_frame:00000000000060E1                 db  5Eh ; ^
.eh_frame:00000000000060E2                 db  0Eh
.eh_frame:00000000000060E3                 db  60h ; `
.eh_frame:00000000000060E4                 db  44h ; D
.eh_frame:00000000000060E5                 db  0Ah
.eh_frame:00000000000060E6                 db  0Eh
.eh_frame:00000000000060E7                 db  38h ; 8
.eh_frame:00000000000060E8                 db  41h ; A
.eh_frame:00000000000060E9                 db  0Eh
.eh_frame:00000000000060EA                 db  30h ; 0
.eh_frame:00000000000060EB                 db  41h ; A
.eh_frame:00000000000060EC                 db  0Eh
.eh_frame:00000000000060ED                 db  28h ; (
.eh_frame:00000000000060EE                 db  42h ; B
.eh_frame:00000000000060EF                 db  0Eh
.eh_frame:00000000000060F0                 db  20h
.eh_frame:00000000000060F1                 db  42h ; B
.eh_frame:00000000000060F2                 db  0Eh
.eh_frame:00000000000060F3                 db  18h
.eh_frame:00000000000060F4                 db  42h ; B
.eh_frame:00000000000060F5                 db  0Eh
.eh_frame:00000000000060F6                 db  10h
.eh_frame:00000000000060F7                 db  42h ; B
.eh_frame:00000000000060F8                 db  0Eh
.eh_frame:00000000000060F9                 db    8
.eh_frame:00000000000060FA                 db  41h ; A
.eh_frame:00000000000060FB                 db  0Bh
.eh_frame:00000000000060FC                 db  79h ; y
.eh_frame:00000000000060FD                 db  0Ah
.eh_frame:00000000000060FE                 db  0Eh
.eh_frame:00000000000060FF                 db  68h ; h
.eh_frame:0000000000006100                 db  42h ; B
.eh_frame:0000000000006101                 db  0Eh
.eh_frame:0000000000006102                 db  70h ; p
.eh_frame:0000000000006103                 db  42h ; B
.eh_frame:0000000000006104                 db  0Eh
.eh_frame:0000000000006105                 db  78h ; x
.eh_frame:0000000000006106                 db  42h ; B
.eh_frame:0000000000006107                 db  0Eh
.eh_frame:0000000000006108                 db  80h
.eh_frame:0000000000006109                 db    1
.eh_frame:000000000000610A                 db  51h ; Q
.eh_frame:000000000000610B                 db  0Bh
.eh_frame:000000000000610C                 db  10h
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db    8
.eh_frame:0000000000006111                 db    7
.eh_frame:0000000000006112                 db    0
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db 0FCh
.eh_frame:0000000000006115                 db 0DFh
.eh_frame:0000000000006116                 db 0FFh
.eh_frame:0000000000006117                 db 0FFh
.eh_frame:0000000000006118                 db  20h
.eh_frame:0000000000006119                 db    0
.eh_frame:000000000000611A                 db    0
.eh_frame:000000000000611B                 db    0
.eh_frame:000000000000611C                 db    0
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db  18h
.eh_frame:0000000000006121                 db    0
.eh_frame:0000000000006122                 db    0
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db  1Ch
.eh_frame:0000000000006125                 db    7
.eh_frame:0000000000006126                 db    0
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db    8
.eh_frame:0000000000006129                 db 0E0h
.eh_frame:000000000000612A                 db 0FFh
.eh_frame:000000000000612B                 db 0FFh
.eh_frame:000000000000612C                 db  78h ; x
.eh_frame:000000000000612D                 db    0
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db    0
.eh_frame:0000000000006131                 db  44h ; D
.eh_frame:0000000000006132                 db  0Eh
.eh_frame:0000000000006133                 db  70h ; p
.eh_frame:0000000000006134                 db    2
.eh_frame:0000000000006135                 db  60h ; `
.eh_frame:0000000000006136                 db  0Ah
.eh_frame:0000000000006137                 db  0Eh
.eh_frame:0000000000006138                 db    8
.eh_frame:0000000000006139                 db  41h ; A
.eh_frame:000000000000613A                 db  0Bh
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db  28h ; (
.eh_frame:000000000000613D                 db    0
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db  38h ; 8
.eh_frame:0000000000006141                 db    7
.eh_frame:0000000000006142                 db    0
.eh_frame:0000000000006143                 db    0
.eh_frame:0000000000006144                 db  6Ch ; l
.eh_frame:0000000000006145                 db 0E0h
.eh_frame:0000000000006146                 db 0FFh
.eh_frame:0000000000006147                 db 0FFh
.eh_frame:0000000000006148                 db 0D5h
.eh_frame:0000000000006149                 db    0
.eh_frame:000000000000614A                 db    0
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db    0
.eh_frame:000000000000614D                 db  41h ; A
.eh_frame:000000000000614E                 db  0Eh
.eh_frame:000000000000614F                 db  10h
.eh_frame:0000000000006150                 db  86h
.eh_frame:0000000000006151                 db    2
.eh_frame:0000000000006152                 db  41h ; A
.eh_frame:0000000000006153                 db  0Eh
.eh_frame:0000000000006154                 db  18h
.eh_frame:0000000000006155                 db  83h
.eh_frame:0000000000006156                 db    3
.eh_frame:0000000000006157                 db  50h ; P
.eh_frame:0000000000006158                 db  0Eh
.eh_frame:0000000000006159                 db 0D0h
.eh_frame:000000000000615A                 db    1
.eh_frame:000000000000615B                 db    2
.eh_frame:000000000000615C                 db 0ABh
.eh_frame:000000000000615D                 db  0Ah
.eh_frame:000000000000615E                 db  0Eh
.eh_frame:000000000000615F                 db  18h
.eh_frame:0000000000006160                 db  41h ; A
.eh_frame:0000000000006161                 db  0Eh
.eh_frame:0000000000006162                 db  10h
.eh_frame:0000000000006163                 db  41h ; A
.eh_frame:0000000000006164                 db  0Eh
.eh_frame:0000000000006165                 db    8
.eh_frame:0000000000006166                 db  41h ; A
.eh_frame:0000000000006167                 db  0Bh
.eh_frame:0000000000006168                 db  1Ch
.eh_frame:0000000000006169                 db    0
.eh_frame:000000000000616A                 db    0
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db  64h ; d
.eh_frame:000000000000616D                 db    7
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db  20h
.eh_frame:0000000000006171                 db 0E1h
.eh_frame:0000000000006172                 db 0FFh
.eh_frame:0000000000006173                 db 0FFh
.eh_frame:0000000000006174                 db  80h
.eh_frame:0000000000006175                 db    0
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db    0
.eh_frame:0000000000006179                 db  41h ; A
.eh_frame:000000000000617A                 db  0Eh
.eh_frame:000000000000617B                 db  10h
.eh_frame:000000000000617C                 db  83h
.eh_frame:000000000000617D                 db    2
.eh_frame:000000000000617E                 db    2
.eh_frame:000000000000617F                 db  7Ah ; z
.eh_frame:0000000000006180                 db  0Eh
.eh_frame:0000000000006181                 db    8
.eh_frame:0000000000006182                 db    0
.eh_frame:0000000000006183                 db    0
.eh_frame:0000000000006184                 db    0
.eh_frame:0000000000006185                 db    0
.eh_frame:0000000000006186                 db    0
.eh_frame:0000000000006187                 db    0
.eh_frame:0000000000006188                 db  18h
.eh_frame:0000000000006189                 db    0
.eh_frame:000000000000618A                 db    0
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db  84h
.eh_frame:000000000000618D                 db    7
.eh_frame:000000000000618E                 db    0
.eh_frame:000000000000618F                 db    0
.eh_frame:0000000000006190                 db  80h
.eh_frame:0000000000006191                 db 0E1h
.eh_frame:0000000000006192                 db 0FFh
.eh_frame:0000000000006193                 db 0FFh
.eh_frame:0000000000006194                 db  1Ah
.eh_frame:0000000000006195                 db    0
.eh_frame:0000000000006196                 db    0
.eh_frame:0000000000006197                 db    0
.eh_frame:0000000000006198                 db    0
.eh_frame:0000000000006199                 db  41h ; A
.eh_frame:000000000000619A                 db  0Eh
.eh_frame:000000000000619B                 db  10h
.eh_frame:000000000000619C                 db  83h
.eh_frame:000000000000619D                 db    2
.eh_frame:000000000000619E                 db  53h ; S
.eh_frame:000000000000619F                 db  0Ah
.eh_frame:00000000000061A0                 db  0Eh
.eh_frame:00000000000061A1                 db    8
.eh_frame:00000000000061A2                 db  41h ; A
.eh_frame:00000000000061A3                 db  0Bh
.eh_frame:00000000000061A4                 db  10h
.eh_frame:00000000000061A5                 db    0
.eh_frame:00000000000061A6                 db    0
.eh_frame:00000000000061A7                 db    0
.eh_frame:00000000000061A8                 db 0A0h
.eh_frame:00000000000061A9                 db    7
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db  84h
.eh_frame:00000000000061AD                 db 0E1h
.eh_frame:00000000000061AE                 db 0FFh
.eh_frame:00000000000061AF                 db 0FFh
.eh_frame:00000000000061B0                 db  24h ; $
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db    0
.eh_frame:00000000000061B5                 db  5Fh ; _
.eh_frame:00000000000061B6                 db  0Eh
.eh_frame:00000000000061B7                 db  10h
.eh_frame:00000000000061B8                 db  10h
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db 0B4h
.eh_frame:00000000000061BD                 db    7
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db 0A0h
.eh_frame:00000000000061C1                 db 0E1h
.eh_frame:00000000000061C2                 db 0FFh
.eh_frame:00000000000061C3                 db 0FFh
.eh_frame:00000000000061C4                 db    2
.eh_frame:00000000000061C5                 db    0
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db    0
.eh_frame:00000000000061C9                 db    0
.eh_frame:00000000000061CA                 db    0
.eh_frame:00000000000061CB                 db    0
.eh_frame:00000000000061CC                 db  20h
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db 0C8h
.eh_frame:00000000000061D1                 db    7
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db  9Ch
.eh_frame:00000000000061D5                 db 0E1h
.eh_frame:00000000000061D6                 db 0FFh
.eh_frame:00000000000061D7                 db 0FFh
.eh_frame:00000000000061D8                 db  36h ; 6
.eh_frame:00000000000061D9                 db    0
.eh_frame:00000000000061DA                 db    0
.eh_frame:00000000000061DB                 db    0
.eh_frame:00000000000061DC                 db    0
.eh_frame:00000000000061DD                 db  44h ; D
.eh_frame:00000000000061DE                 db  0Eh
.eh_frame:00000000000061DF                 db  10h
.eh_frame:00000000000061E0                 db  83h
.eh_frame:00000000000061E1                 db    2
.eh_frame:00000000000061E2                 db  5Dh ; ]
.eh_frame:00000000000061E3                 db  0Ah
.eh_frame:00000000000061E4                 db  0Eh
.eh_frame:00000000000061E5                 db    8
.eh_frame:00000000000061E6                 db  47h ; G
.eh_frame:00000000000061E7                 db  0Bh
.eh_frame:00000000000061E8                 db  48h ; H
.eh_frame:00000000000061E9                 db  0Ah
.eh_frame:00000000000061EA                 db  0Eh
.eh_frame:00000000000061EB                 db    8
.eh_frame:00000000000061EC                 db  41h ; A
.eh_frame:00000000000061ED                 db  0Bh
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db  10h
.eh_frame:00000000000061F1                 db    0
.eh_frame:00000000000061F2                 db    0
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db 0ECh
.eh_frame:00000000000061F5                 db    7
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db 0B8h
.eh_frame:00000000000061F9                 db 0E1h
.eh_frame:00000000000061FA                 db 0FFh
.eh_frame:00000000000061FB                 db 0FFh
.eh_frame:00000000000061FC                 db  24h ; $
.eh_frame:00000000000061FD                 db    0
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db    0
.eh_frame:0000000000006201                 db  5Fh ; _
.eh_frame:0000000000006202                 db  0Eh
.eh_frame:0000000000006203                 db  10h
.eh_frame:0000000000006204                 db  14h
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db    8
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C                 db 0D4h
.eh_frame:000000000000620D                 db 0E1h
.eh_frame:000000000000620E                 db 0FFh
.eh_frame:000000000000620F                 db 0FFh
.eh_frame:0000000000006210                 db  82h
.eh_frame:0000000000006211                 db    0
.eh_frame:0000000000006212                 db    0
.eh_frame:0000000000006213                 db    0
.eh_frame:0000000000006214                 db    0
.eh_frame:0000000000006215                 db    2
.eh_frame:0000000000006216                 db  5Fh ; _
.eh_frame:0000000000006217                 db  0Eh
.eh_frame:0000000000006218                 db  10h
.eh_frame:0000000000006219                 db  49h ; I
.eh_frame:000000000000621A                 db  0Eh
.eh_frame:000000000000621B                 db    8
.eh_frame:000000000000621C                 db  14h
.eh_frame:000000000000621D                 db    0
.eh_frame:000000000000621E                 db    0
.eh_frame:000000000000621F                 db    0
.eh_frame:0000000000006220                 db  18h
.eh_frame:0000000000006221                 db    8
.eh_frame:0000000000006222                 db    0
.eh_frame:0000000000006223                 db    0
.eh_frame:0000000000006224                 db  4Ch ; L
.eh_frame:0000000000006225                 db 0E2h
.eh_frame:0000000000006226                 db 0FFh
.eh_frame:0000000000006227                 db 0FFh
.eh_frame:0000000000006228                 db  4Ah ; J
.eh_frame:0000000000006229                 db    0
.eh_frame:000000000000622A                 db    0
.eh_frame:000000000000622B                 db    0
.eh_frame:000000000000622C                 db    0
.eh_frame:000000000000622D                 db    2
.eh_frame:000000000000622E                 db  45h ; E
.eh_frame:000000000000622F                 db  0Eh
.eh_frame:0000000000006230                 db  10h
.eh_frame:0000000000006231                 db    0
.eh_frame:0000000000006232                 db    0
.eh_frame:0000000000006233                 db    0
.eh_frame:0000000000006234                 db  18h
.eh_frame:0000000000006235                 db    0
.eh_frame:0000000000006236                 db    0
.eh_frame:0000000000006237                 db    0
.eh_frame:0000000000006238                 db  30h ; 0
.eh_frame:0000000000006239                 db    8
.eh_frame:000000000000623A                 db    0
.eh_frame:000000000000623B                 db    0
.eh_frame:000000000000623C                 db  84h
.eh_frame:000000000000623D                 db 0E2h
.eh_frame:000000000000623E                 db 0FFh
.eh_frame:000000000000623F                 db 0FFh
.eh_frame:0000000000006240                 db  17h
.eh_frame:0000000000006241                 db    0
.eh_frame:0000000000006242                 db    0
.eh_frame:0000000000006243                 db    0
.eh_frame:0000000000006244                 db    0
.eh_frame:0000000000006245                 db  41h ; A
.eh_frame:0000000000006246                 db  0Eh
.eh_frame:0000000000006247                 db  10h
.eh_frame:0000000000006248                 db  83h
.eh_frame:0000000000006249                 db    2
.eh_frame:000000000000624A                 db  51h ; Q
.eh_frame:000000000000624B                 db  0Eh
.eh_frame:000000000000624C                 db    8
.eh_frame:000000000000624D                 db    0
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db  18h
.eh_frame:0000000000006251                 db    0
.eh_frame:0000000000006252                 db    0
.eh_frame:0000000000006253                 db    0
.eh_frame:0000000000006254                 db  4Ch ; L
.eh_frame:0000000000006255                 db    8
.eh_frame:0000000000006256                 db    0
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db  88h
.eh_frame:0000000000006259                 db 0E2h
.eh_frame:000000000000625A                 db 0FFh
.eh_frame:000000000000625B                 db 0FFh
.eh_frame:000000000000625C                 db  2Eh ; .
.eh_frame:000000000000625D                 db    0
.eh_frame:000000000000625E                 db    0
.eh_frame:000000000000625F                 db    0
.eh_frame:0000000000006260                 db    0
.eh_frame:0000000000006261                 db  47h ; G
.eh_frame:0000000000006262                 db  0Eh
.eh_frame:0000000000006263                 db  10h
.eh_frame:0000000000006264                 db  61h ; a
.eh_frame:0000000000006265                 db  0Ah
.eh_frame:0000000000006266                 db  0Eh
.eh_frame:0000000000006267                 db    8
.eh_frame:0000000000006268                 db  41h ; A
.eh_frame:0000000000006269                 db  0Bh
.eh_frame:000000000000626A                 db    0
.eh_frame:000000000000626B                 db    0
.eh_frame:000000000000626C                 db  24h ; $
.eh_frame:000000000000626D                 db    0
.eh_frame:000000000000626E                 db    0
.eh_frame:000000000000626F                 db    0
.eh_frame:0000000000006270                 db  68h ; h
.eh_frame:0000000000006271                 db    8
.eh_frame:0000000000006272                 db    0
.eh_frame:0000000000006273                 db    0
.eh_frame:0000000000006274                 db  9Ch
.eh_frame:0000000000006275                 db 0E2h
.eh_frame:0000000000006276                 db 0FFh
.eh_frame:0000000000006277                 db 0FFh
.eh_frame:0000000000006278                 db  28h ; (
.eh_frame:0000000000006279                 db    0
.eh_frame:000000000000627A                 db    0
.eh_frame:000000000000627B                 db    0
.eh_frame:000000000000627C                 db    0
.eh_frame:000000000000627D                 db  41h ; A
.eh_frame:000000000000627E                 db  0Eh
.eh_frame:000000000000627F                 db  10h
.eh_frame:0000000000006280                 db  86h
.eh_frame:0000000000006281                 db    2
.eh_frame:0000000000006282                 db  41h ; A
.eh_frame:0000000000006283                 db  0Eh
.eh_frame:0000000000006284                 db  18h
.eh_frame:0000000000006285                 db  83h
.eh_frame:0000000000006286                 db    3
.eh_frame:0000000000006287                 db  4Dh ; M
.eh_frame:0000000000006288                 db  0Eh
.eh_frame:0000000000006289                 db  20h
.eh_frame:000000000000628A                 db  49h ; I
.eh_frame:000000000000628B                 db  0Eh
.eh_frame:000000000000628C                 db  18h
.eh_frame:000000000000628D                 db  47h ; G
.eh_frame:000000000000628E                 db  0Eh
.eh_frame:000000000000628F                 db  10h
.eh_frame:0000000000006290                 db  41h ; A
.eh_frame:0000000000006291                 db  0Eh
.eh_frame:0000000000006292                 db    8
.eh_frame:0000000000006293                 db    0
.eh_frame:0000000000006294                 db  18h
.eh_frame:0000000000006295                 db    0
.eh_frame:0000000000006296                 db    0
.eh_frame:0000000000006297                 db    0
.eh_frame:0000000000006298                 db  90h
.eh_frame:0000000000006299                 db    8
.eh_frame:000000000000629A                 db    0
.eh_frame:000000000000629B                 db    0
.eh_frame:000000000000629C                 db 0A4h
.eh_frame:000000000000629D                 db 0E2h
.eh_frame:000000000000629E                 db 0FFh
.eh_frame:000000000000629F                 db 0FFh
.eh_frame:00000000000062A0                 db  13h
.eh_frame:00000000000062A1                 db    0
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db    0
.eh_frame:00000000000062A5                 db  41h ; A
.eh_frame:00000000000062A6                 db  0Eh
.eh_frame:00000000000062A7                 db  10h
.eh_frame:00000000000062A8                 db  83h
.eh_frame:00000000000062A9                 db    2
.eh_frame:00000000000062AA                 db  50h ; P
.eh_frame:00000000000062AB                 db  0Eh
.eh_frame:00000000000062AC                 db    8
.eh_frame:00000000000062AD                 db    0
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db  14h
.eh_frame:00000000000062B1                 db    0
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db 0ACh
.eh_frame:00000000000062B5                 db    8
.eh_frame:00000000000062B6                 db    0
.eh_frame:00000000000062B7                 db    0
.eh_frame:00000000000062B8                 db 0A8h
.eh_frame:00000000000062B9                 db 0E2h
.eh_frame:00000000000062BA                 db 0FFh
.eh_frame:00000000000062BB                 db 0FFh
.eh_frame:00000000000062BC                 db  35h ; 5
.eh_frame:00000000000062BD                 db    0
.eh_frame:00000000000062BE                 db    0
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db    0
.eh_frame:00000000000062C1                 db  4Bh ; K
.eh_frame:00000000000062C2                 db  0Eh
.eh_frame:00000000000062C3                 db  10h
.eh_frame:00000000000062C4                 db    0
.eh_frame:00000000000062C5                 db    0
.eh_frame:00000000000062C6                 db    0
.eh_frame:00000000000062C7                 db    0
.eh_frame:00000000000062C8                 db  3Ch ; <
.eh_frame:00000000000062C9                 db    0
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db 0C4h
.eh_frame:00000000000062CD                 db    8
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db 0D0h
.eh_frame:00000000000062D1                 db 0E2h
.eh_frame:00000000000062D2                 db 0FFh
.eh_frame:00000000000062D3                 db 0FFh
.eh_frame:00000000000062D4                 db  83h
.eh_frame:00000000000062D5                 db    0
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db    0
.eh_frame:00000000000062D9                 db  42h ; B
.eh_frame:00000000000062DA                 db  0Eh
.eh_frame:00000000000062DB                 db  10h
.eh_frame:00000000000062DC                 db  8Dh
.eh_frame:00000000000062DD                 db    2
.eh_frame:00000000000062DE                 db  42h ; B
.eh_frame:00000000000062DF                 db  0Eh
.eh_frame:00000000000062E0                 db  18h
.eh_frame:00000000000062E1                 db  8Ch
.eh_frame:00000000000062E2                 db    3
.eh_frame:00000000000062E3                 db  44h ; D
.eh_frame:00000000000062E4                 db  0Eh
.eh_frame:00000000000062E5                 db  20h
.eh_frame:00000000000062E6                 db  86h
.eh_frame:00000000000062E7                 db    4
.eh_frame:00000000000062E8                 db  41h ; A
.eh_frame:00000000000062E9                 db  0Eh
.eh_frame:00000000000062EA                 db  28h ; (
.eh_frame:00000000000062EB                 db  83h
.eh_frame:00000000000062EC                 db    5
.eh_frame:00000000000062ED                 db  4Ah ; J
.eh_frame:00000000000062EE                 db  0Eh
.eh_frame:00000000000062EF                 db  40h ; @
.eh_frame:00000000000062F0                 db    2
.eh_frame:00000000000062F1                 db  64h ; d
.eh_frame:00000000000062F2                 db  0Ah
.eh_frame:00000000000062F3                 db  0Eh
.eh_frame:00000000000062F4                 db  28h ; (
.eh_frame:00000000000062F5                 db  41h ; A
.eh_frame:00000000000062F6                 db  0Eh
.eh_frame:00000000000062F7                 db  20h
.eh_frame:00000000000062F8                 db  41h ; A
.eh_frame:00000000000062F9                 db  0Eh
.eh_frame:00000000000062FA                 db  18h
.eh_frame:00000000000062FB                 db  42h ; B
.eh_frame:00000000000062FC                 db  0Eh
.eh_frame:00000000000062FD                 db  10h
.eh_frame:00000000000062FE                 db  42h ; B
.eh_frame:00000000000062FF                 db  0Eh
.eh_frame:0000000000006300                 db    8
.eh_frame:0000000000006301                 db  41h ; A
.eh_frame:0000000000006302                 db  0Bh
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db    0
.eh_frame:0000000000006305                 db    0
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db  4Ch ; L
.eh_frame:0000000000006309                 db    0
.eh_frame:000000000000630A                 db    0
.eh_frame:000000000000630B                 db    0
.eh_frame:000000000000630C                 db    4
.eh_frame:000000000000630D                 db    9
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db  20h
.eh_frame:0000000000006311                 db 0E3h
.eh_frame:0000000000006312                 db 0FFh
.eh_frame:0000000000006313                 db 0FFh
.eh_frame:0000000000006314                 db  7Dh ; }
.eh_frame:0000000000006315                 db    0
.eh_frame:0000000000006316                 db    0
.eh_frame:0000000000006317                 db    0
.eh_frame:0000000000006318                 db    0
.eh_frame:0000000000006319                 db  42h ; B
.eh_frame:000000000000631A                 db  0Eh
.eh_frame:000000000000631B                 db  10h
.eh_frame:000000000000631C                 db  8Ch
.eh_frame:000000000000631D                 db    2
.eh_frame:000000000000631E                 db  41h ; A
.eh_frame:000000000000631F                 db  0Eh
.eh_frame:0000000000006320                 db  18h
.eh_frame:0000000000006321                 db  86h
.eh_frame:0000000000006322                 db    3
.eh_frame:0000000000006323                 db  44h ; D
.eh_frame:0000000000006324                 db  0Eh
.eh_frame:0000000000006325                 db  20h
.eh_frame:0000000000006326                 db  83h
.eh_frame:0000000000006327                 db    4
.eh_frame:0000000000006328                 db  69h ; i
.eh_frame:0000000000006329                 db  0Ah
.eh_frame:000000000000632A                 db  0Eh
.eh_frame:000000000000632B                 db  18h
.eh_frame:000000000000632C                 db  41h ; A
.eh_frame:000000000000632D                 db  0Eh
.eh_frame:000000000000632E                 db  10h
.eh_frame:000000000000632F                 db  42h ; B
.eh_frame:0000000000006330                 db  0Eh
.eh_frame:0000000000006331                 db    8
.eh_frame:0000000000006332                 db  45h ; E
.eh_frame:0000000000006333                 db  0Bh
.eh_frame:0000000000006334                 db  55h ; U
.eh_frame:0000000000006335                 db  0Ah
.eh_frame:0000000000006336                 db  0Eh
.eh_frame:0000000000006337                 db  18h
.eh_frame:0000000000006338                 db  41h ; A
.eh_frame:0000000000006339                 db  0Eh
.eh_frame:000000000000633A                 db  10h
.eh_frame:000000000000633B                 db  42h ; B
.eh_frame:000000000000633C                 db  0Eh
.eh_frame:000000000000633D                 db    8
.eh_frame:000000000000633E                 db  48h ; H
.eh_frame:000000000000633F                 db  0Bh
.eh_frame:0000000000006340                 db  41h ; A
.eh_frame:0000000000006341                 db  0Ah
.eh_frame:0000000000006342                 db  0Eh
.eh_frame:0000000000006343                 db  18h
.eh_frame:0000000000006344                 db  46h ; F
.eh_frame:0000000000006345                 db  0Eh
.eh_frame:0000000000006346                 db  10h
.eh_frame:0000000000006347                 db  42h ; B
.eh_frame:0000000000006348                 db  0Eh
.eh_frame:0000000000006349                 db    8
.eh_frame:000000000000634A                 db  47h ; G
.eh_frame:000000000000634B                 db  0Bh
.eh_frame:000000000000634C                 db  49h ; I
.eh_frame:000000000000634D                 db  0Eh
.eh_frame:000000000000634E                 db  18h
.eh_frame:000000000000634F                 db  41h ; A
.eh_frame:0000000000006350                 db  0Eh
.eh_frame:0000000000006351                 db  10h
.eh_frame:0000000000006352                 db  42h ; B
.eh_frame:0000000000006353                 db  0Eh
.eh_frame:0000000000006354                 db    8
.eh_frame:0000000000006355                 db    0
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db  1Ch
.eh_frame:0000000000006359                 db    0
.eh_frame:000000000000635A                 db    0
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db  54h ; T
.eh_frame:000000000000635D                 db    9
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db  50h ; P
.eh_frame:0000000000006361                 db 0E3h
.eh_frame:0000000000006362                 db 0FFh
.eh_frame:0000000000006363                 db 0FFh
.eh_frame:0000000000006364                 db  60h ; `
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db    0
.eh_frame:0000000000006369                 db  44h ; D
.eh_frame:000000000000636A                 db  0Eh
.eh_frame:000000000000636B                 db  10h
.eh_frame:000000000000636C                 db  75h ; u
.eh_frame:000000000000636D                 db  0Ah
.eh_frame:000000000000636E                 db  0Eh
.eh_frame:000000000000636F                 db    8
.eh_frame:0000000000006370                 db  47h ; G
.eh_frame:0000000000006371                 db  0Bh
.eh_frame:0000000000006372                 db  5Fh ; _
.eh_frame:0000000000006373                 db  0Eh
.eh_frame:0000000000006374                 db    8
.eh_frame:0000000000006375                 db    0
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db  1Ch
.eh_frame:0000000000006379                 db    0
.eh_frame:000000000000637A                 db    0
.eh_frame:000000000000637B                 db    0
.eh_frame:000000000000637C                 db  74h ; t
.eh_frame:000000000000637D                 db    9
.eh_frame:000000000000637E                 db    0
.eh_frame:000000000000637F                 db    0
.eh_frame:0000000000006380                 db  90h
.eh_frame:0000000000006381                 db 0E3h
.eh_frame:0000000000006382                 db 0FFh
.eh_frame:0000000000006383                 db 0FFh
.eh_frame:0000000000006384                 db  3Ch ; <
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db    0
.eh_frame:0000000000006389                 db  44h ; D
.eh_frame:000000000000638A                 db  0Eh
.eh_frame:000000000000638B                 db  10h
.eh_frame:000000000000638C                 db  61h ; a
.eh_frame:000000000000638D                 db  0Ah
.eh_frame:000000000000638E                 db  0Eh
.eh_frame:000000000000638F                 db    8
.eh_frame:0000000000006390                 db  4Bh ; K
.eh_frame:0000000000006391                 db  0Bh
.eh_frame:0000000000006392                 db  4Bh ; K
.eh_frame:0000000000006393                 db  0Eh
.eh_frame:0000000000006394                 db    8
.eh_frame:0000000000006395                 db    0
.eh_frame:0000000000006396                 db    0
.eh_frame:0000000000006397                 db    0
.eh_frame:0000000000006398                 db  34h ; 4
.eh_frame:0000000000006399                 db    0
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db  94h
.eh_frame:000000000000639D                 db    9
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db 0B0h
.eh_frame:00000000000063A1                 db 0E3h
.eh_frame:00000000000063A2                 db 0FFh
.eh_frame:00000000000063A3                 db 0FFh
.eh_frame:00000000000063A4                 db  7Bh ; {
.eh_frame:00000000000063A5                 db    0
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db    0
.eh_frame:00000000000063A9                 db  42h ; B
.eh_frame:00000000000063AA                 db  0Eh
.eh_frame:00000000000063AB                 db  10h
.eh_frame:00000000000063AC                 db  8Ch
.eh_frame:00000000000063AD                 db    2
.eh_frame:00000000000063AE                 db  41h ; A
.eh_frame:00000000000063AF                 db  0Eh
.eh_frame:00000000000063B0                 db  18h
.eh_frame:00000000000063B1                 db  86h
.eh_frame:00000000000063B2                 db    3
.eh_frame:00000000000063B3                 db  41h ; A
.eh_frame:00000000000063B4                 db  0Eh
.eh_frame:00000000000063B5                 db  20h
.eh_frame:00000000000063B6                 db  83h
.eh_frame:00000000000063B7                 db    4
.eh_frame:00000000000063B8                 db  7Dh ; }
.eh_frame:00000000000063B9                 db  0Ah
.eh_frame:00000000000063BA                 db  0Eh
.eh_frame:00000000000063BB                 db  18h
.eh_frame:00000000000063BC                 db  41h ; A
.eh_frame:00000000000063BD                 db  0Eh
.eh_frame:00000000000063BE                 db  10h
.eh_frame:00000000000063BF                 db  42h ; B
.eh_frame:00000000000063C0                 db  0Eh
.eh_frame:00000000000063C1                 db    8
.eh_frame:00000000000063C2                 db  44h ; D
.eh_frame:00000000000063C3                 db  0Bh
.eh_frame:00000000000063C4                 db  60h ; `
.eh_frame:00000000000063C5                 db  0Ah
.eh_frame:00000000000063C6                 db  0Eh
.eh_frame:00000000000063C7                 db  18h
.eh_frame:00000000000063C8                 db  41h ; A
.eh_frame:00000000000063C9                 db  0Eh
.eh_frame:00000000000063CA                 db  10h
.eh_frame:00000000000063CB                 db  42h ; B
.eh_frame:00000000000063CC                 db  0Eh
.eh_frame:00000000000063CD                 db    8
.eh_frame:00000000000063CE                 db  45h ; E
.eh_frame:00000000000063CF                 db  0Bh
.eh_frame:00000000000063D0                 db  1Ch
.eh_frame:00000000000063D1                 db    0
.eh_frame:00000000000063D2                 db    0
.eh_frame:00000000000063D3                 db    0
.eh_frame:00000000000063D4                 db 0CCh
.eh_frame:00000000000063D5                 db    9
.eh_frame:00000000000063D6                 db    0
.eh_frame:00000000000063D7                 db    0
.eh_frame:00000000000063D8                 db 0F8h
.eh_frame:00000000000063D9                 db 0E3h
.eh_frame:00000000000063DA                 db 0FFh
.eh_frame:00000000000063DB                 db 0FFh
.eh_frame:00000000000063DC                 db  40h ; @
.eh_frame:00000000000063DD                 db    0
.eh_frame:00000000000063DE                 db    0
.eh_frame:00000000000063DF                 db    0
.eh_frame:00000000000063E0                 db    0
.eh_frame:00000000000063E1                 db  44h ; D
.eh_frame:00000000000063E2                 db  0Eh
.eh_frame:00000000000063E3                 db  10h
.eh_frame:00000000000063E4                 db  83h
.eh_frame:00000000000063E5                 db    2
.eh_frame:00000000000063E6                 db  5Ah ; Z
.eh_frame:00000000000063E7                 db  0Ah
.eh_frame:00000000000063E8                 db  0Eh
.eh_frame:00000000000063E9                 db    8
.eh_frame:00000000000063EA                 db  4Ah ; J
.eh_frame:00000000000063EB                 db  0Bh
.eh_frame:00000000000063EC                 db  53h ; S
.eh_frame:00000000000063ED                 db  0Eh
.eh_frame:00000000000063EE                 db    8
.eh_frame:00000000000063EF                 db    0
.eh_frame:00000000000063F0                 db  2Ch ; ,
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db 0ECh
.eh_frame:00000000000063F5                 db    9
.eh_frame:00000000000063F6                 db    0
.eh_frame:00000000000063F7                 db    0
.eh_frame:00000000000063F8                 db  18h
.eh_frame:00000000000063F9                 db 0E4h
.eh_frame:00000000000063FA                 db 0FFh
.eh_frame:00000000000063FB                 db 0FFh
.eh_frame:00000000000063FC                 db  57h ; W
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db    0
.eh_frame:0000000000006401                 db  63h ; c
.eh_frame:0000000000006402                 db  0Eh
.eh_frame:0000000000006403                 db  10h
.eh_frame:0000000000006404                 db  8Ch
.eh_frame:0000000000006405                 db    2
.eh_frame:0000000000006406                 db  41h ; A
.eh_frame:0000000000006407                 db  0Eh
.eh_frame:0000000000006408                 db  18h
.eh_frame:0000000000006409                 db  86h
.eh_frame:000000000000640A                 db    3
.eh_frame:000000000000640B                 db  44h ; D
.eh_frame:000000000000640C                 db  0Eh
.eh_frame:000000000000640D                 db  20h
.eh_frame:000000000000640E                 db  83h
.eh_frame:000000000000640F                 db    4
.eh_frame:0000000000006410                 db  6Bh ; k
.eh_frame:0000000000006411                 db  0Eh
.eh_frame:0000000000006412                 db  18h
.eh_frame:0000000000006413                 db  41h ; A
.eh_frame:0000000000006414                 db  0Eh
.eh_frame:0000000000006415                 db  10h
.eh_frame:0000000000006416                 db  42h ; B
.eh_frame:0000000000006417                 db  0Eh
.eh_frame:0000000000006418                 db    8
.eh_frame:0000000000006419                 db    0
.eh_frame:000000000000641A                 db    0
.eh_frame:000000000000641B                 db    0
.eh_frame:000000000000641C                 db    0
.eh_frame:000000000000641D                 db    0
.eh_frame:000000000000641E                 db    0
.eh_frame:000000000000641F                 db    0
.eh_frame:0000000000006420                 db  44h ; D
.eh_frame:0000000000006421                 db    0
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db  1Ch
.eh_frame:0000000000006425                 db  0Ah
.eh_frame:0000000000006426                 db    0
.eh_frame:0000000000006427                 db    0
.eh_frame:0000000000006428                 db  48h ; H
.eh_frame:0000000000006429                 db 0E4h
.eh_frame:000000000000642A                 db 0FFh
.eh_frame:000000000000642B                 db 0FFh
.eh_frame:000000000000642C                 db  65h ; e
.eh_frame:000000000000642D                 db    0
.eh_frame:000000000000642E                 db    0
.eh_frame:000000000000642F                 db    0
.eh_frame:0000000000006430                 db    0
.eh_frame:0000000000006431                 db  42h ; B
.eh_frame:0000000000006432                 db  0Eh
.eh_frame:0000000000006433                 db  10h
.eh_frame:0000000000006434                 db  8Fh
.eh_frame:0000000000006435                 db    2
.eh_frame:0000000000006436                 db  42h ; B
.eh_frame:0000000000006437                 db  0Eh
.eh_frame:0000000000006438                 db  18h
.eh_frame:0000000000006439                 db  8Eh
.eh_frame:000000000000643A                 db    3
.eh_frame:000000000000643B                 db  45h ; E
.eh_frame:000000000000643C                 db  0Eh
.eh_frame:000000000000643D                 db  20h
.eh_frame:000000000000643E                 db  8Dh
.eh_frame:000000000000643F                 db    4
.eh_frame:0000000000006440                 db  42h ; B
.eh_frame:0000000000006441                 db  0Eh
.eh_frame:0000000000006442                 db  28h ; (
.eh_frame:0000000000006443                 db  8Ch
.eh_frame:0000000000006444                 db    5
.eh_frame:0000000000006445                 db  48h ; H
.eh_frame:0000000000006446                 db  0Eh
.eh_frame:0000000000006447                 db  30h ; 0
.eh_frame:0000000000006448                 db  86h
.eh_frame:0000000000006449                 db    6
.eh_frame:000000000000644A                 db  48h ; H
.eh_frame:000000000000644B                 db  0Eh
.eh_frame:000000000000644C                 db  38h ; 8
.eh_frame:000000000000644D                 db  83h
.eh_frame:000000000000644E                 db    7
.eh_frame:000000000000644F                 db  4Dh ; M
.eh_frame:0000000000006450                 db  0Eh
.eh_frame:0000000000006451                 db  40h ; @
.eh_frame:0000000000006452                 db  72h ; r
.eh_frame:0000000000006453                 db  0Eh
.eh_frame:0000000000006454                 db  38h ; 8
.eh_frame:0000000000006455                 db  41h ; A
.eh_frame:0000000000006456                 db  0Eh
.eh_frame:0000000000006457                 db  30h ; 0
.eh_frame:0000000000006458                 db  41h ; A
.eh_frame:0000000000006459                 db  0Eh
.eh_frame:000000000000645A                 db  28h ; (
.eh_frame:000000000000645B                 db  42h ; B
.eh_frame:000000000000645C                 db  0Eh
.eh_frame:000000000000645D                 db  20h
.eh_frame:000000000000645E                 db  42h ; B
.eh_frame:000000000000645F                 db  0Eh
.eh_frame:0000000000006460                 db  18h
.eh_frame:0000000000006461                 db  42h ; B
.eh_frame:0000000000006462                 db  0Eh
.eh_frame:0000000000006463                 db  10h
.eh_frame:0000000000006464                 db  42h ; B
.eh_frame:0000000000006465                 db  0Eh
.eh_frame:0000000000006466                 db    8
.eh_frame:0000000000006467                 db    0
.eh_frame:0000000000006468                 db  14h
.eh_frame:0000000000006469                 db    0
.eh_frame:000000000000646A                 db    0
.eh_frame:000000000000646B                 db    0
.eh_frame:000000000000646C                 db  64h ; d
.eh_frame:000000000000646D                 db  0Ah
.eh_frame:000000000000646E                 db    0
.eh_frame:000000000000646F                 db    0
.eh_frame:0000000000006470                 db  70h ; p
.eh_frame:0000000000006471                 db 0E4h
.eh_frame:0000000000006472                 db 0FFh
.eh_frame:0000000000006473                 db 0FFh
.eh_frame:0000000000006474                 db    2
.eh_frame:0000000000006475                 db    0
.eh_frame:0000000000006476                 db    0
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db    0
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db    0
.eh_frame:000000000000647D                 db    0
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db  10h
.eh_frame:0000000000006481                 db    0
.eh_frame:0000000000006482                 db    0
.eh_frame:0000000000006483                 db    0
.eh_frame:0000000000006484                 db  7Ch ; |
.eh_frame:0000000000006485                 db  0Ah
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db  68h ; h
.eh_frame:0000000000006489                 db 0E4h
.eh_frame:000000000000648A                 db 0FFh
.eh_frame:000000000000648B                 db 0FFh
.eh_frame:000000000000648C                 db  0Eh
.eh_frame:000000000000648D                 db    0
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db    0
.eh_frame:0000000000006491                 db    0
.eh_frame:0000000000006492                 db    0
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494 __FRAME_END__   db    0
.eh_frame:0000000000006495                 db    0
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006497 _eh_frame       ends
.eh_frame:0000000000006497
.init_array:00000000002069F0 ; ELF Initialization Function Table
.init_array:00000000002069F0 ; ===========================================================================
.init_array:00000000002069F0
.init_array:00000000002069F0 ; Segment type: Pure data
.init_array:00000000002069F0 ; Segment permissions: Read/Write
.init_array:00000000002069F0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002069F0                 assume cs:_init_array
.init_array:00000000002069F0                 ;org 2069F0h
.init_array:00000000002069F0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002069F0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002069F0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002069F0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002069F0
.fini_array:00000000002069F8 ; ELF Termination Function Table
.fini_array:00000000002069F8 ; ===========================================================================
.fini_array:00000000002069F8
.fini_array:00000000002069F8 ; Segment type: Pure data
.fini_array:00000000002069F8 ; Segment permissions: Read/Write
.fini_array:00000000002069F8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002069F8                 assume cs:_fini_array
.fini_array:00000000002069F8                 ;org 2069F8h
.fini_array:00000000002069F8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002069F8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002069F8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002069F8
.data.rel.ro:0000000000206A00 ; ===========================================================================
.data.rel.ro:0000000000206A00
.data.rel.ro:0000000000206A00 ; Segment type: Pure data
.data.rel.ro:0000000000206A00 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206A00 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206A00                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206A00                 ;org 206A00h
.data.rel.ro:0000000000206A00 ; struct option arch_long_options
.data.rel.ro:0000000000206A00 arch_long_options dq offset aHelp         ; name
.data.rel.ro:0000000000206A00                                         ; DATA XREF: main:loc_17F0↑o
.data.rel.ro:0000000000206A00                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206A00                 db 4 dup(0)
.data.rel.ro:0000000000206A00                 dq 0                    ; flag
.data.rel.ro:0000000000206A00                 dd 0FFFFFF7Eh           ; val
.data.rel.ro:0000000000206A00                 db 4 dup(0)
.data.rel.ro:0000000000206A20                 dq offset aKernelVersion+7 ; "version"
.data.rel.ro:0000000000206A28                 db    0
.data.rel.ro:0000000000206A29                 db    0
.data.rel.ro:0000000000206A2A                 db    0
.data.rel.ro:0000000000206A2B                 db    0
.data.rel.ro:0000000000206A2C                 db    0
.data.rel.ro:0000000000206A2D                 db    0
.data.rel.ro:0000000000206A2E                 db    0
.data.rel.ro:0000000000206A2F                 db    0
.data.rel.ro:0000000000206A30                 db    0
.data.rel.ro:0000000000206A31                 db    0
.data.rel.ro:0000000000206A32                 db    0
.data.rel.ro:0000000000206A33                 db    0
.data.rel.ro:0000000000206A34                 db    0
.data.rel.ro:0000000000206A35                 db    0
.data.rel.ro:0000000000206A36                 db    0
.data.rel.ro:0000000000206A37                 db    0
.data.rel.ro:0000000000206A38                 db  7Dh ; }
.data.rel.ro:0000000000206A39                 db 0FFh
.data.rel.ro:0000000000206A3A                 db 0FFh
.data.rel.ro:0000000000206A3B                 db 0FFh
.data.rel.ro:0000000000206A3C                 db    0
.data.rel.ro:0000000000206A3D                 db    0
.data.rel.ro:0000000000206A3E                 db    0
.data.rel.ro:0000000000206A3F                 db    0
.data.rel.ro:0000000000206A40                 db    0
.data.rel.ro:0000000000206A41                 db    0
.data.rel.ro:0000000000206A42                 db    0
.data.rel.ro:0000000000206A43                 db    0
.data.rel.ro:0000000000206A44                 db    0
.data.rel.ro:0000000000206A45                 db    0
.data.rel.ro:0000000000206A46                 db    0
.data.rel.ro:0000000000206A47                 db    0
.data.rel.ro:0000000000206A48                 db    0
.data.rel.ro:0000000000206A49                 db    0
.data.rel.ro:0000000000206A4A                 db    0
.data.rel.ro:0000000000206A4B                 db    0
.data.rel.ro:0000000000206A4C                 db    0
.data.rel.ro:0000000000206A4D                 db    0
.data.rel.ro:0000000000206A4E                 db    0
.data.rel.ro:0000000000206A4F                 db    0
.data.rel.ro:0000000000206A50                 db    0
.data.rel.ro:0000000000206A51                 db    0
.data.rel.ro:0000000000206A52                 db    0
.data.rel.ro:0000000000206A53                 db    0
.data.rel.ro:0000000000206A54                 db    0
.data.rel.ro:0000000000206A55                 db    0
.data.rel.ro:0000000000206A56                 db    0
.data.rel.ro:0000000000206A57                 db    0
.data.rel.ro:0000000000206A58                 db    0
.data.rel.ro:0000000000206A59                 db    0
.data.rel.ro:0000000000206A5A                 db    0
.data.rel.ro:0000000000206A5B                 db    0
.data.rel.ro:0000000000206A5C                 db    0
.data.rel.ro:0000000000206A5D                 db    0
.data.rel.ro:0000000000206A5E                 db    0
.data.rel.ro:0000000000206A5F                 db    0
.data.rel.ro:0000000000206A60 ; struct option uname_long_options
.data.rel.ro:0000000000206A60 uname_long_options dq offset aAll          ; name
.data.rel.ro:0000000000206A60                                         ; DATA XREF: main+77↑o
.data.rel.ro:0000000000206A60                 dd 0                    ; has_arg ; "all"
.data.rel.ro:0000000000206A60                 db 4 dup(0)
.data.rel.ro:0000000000206A60                 dq 0                    ; flag
.data.rel.ro:0000000000206A60                 dd 61h                  ; val
.data.rel.ro:0000000000206A60                 db 4 dup(0)
.data.rel.ro:0000000000206A80                 dq offset aKernelName   ; "kernel-name"
.data.rel.ro:0000000000206A88                 db    0
.data.rel.ro:0000000000206A89                 db    0
.data.rel.ro:0000000000206A8A                 db    0
.data.rel.ro:0000000000206A8B                 db    0
.data.rel.ro:0000000000206A8C                 db    0
.data.rel.ro:0000000000206A8D                 db    0
.data.rel.ro:0000000000206A8E                 db    0
.data.rel.ro:0000000000206A8F                 db    0
.data.rel.ro:0000000000206A90                 db    0
.data.rel.ro:0000000000206A91                 db    0
.data.rel.ro:0000000000206A92                 db    0
.data.rel.ro:0000000000206A93                 db    0
.data.rel.ro:0000000000206A94                 db    0
.data.rel.ro:0000000000206A95                 db    0
.data.rel.ro:0000000000206A96                 db    0
.data.rel.ro:0000000000206A97                 db    0
.data.rel.ro:0000000000206A98                 db  73h ; s
.data.rel.ro:0000000000206A99                 db    0
.data.rel.ro:0000000000206A9A                 db    0
.data.rel.ro:0000000000206A9B                 db    0
.data.rel.ro:0000000000206A9C                 db    0
.data.rel.ro:0000000000206A9D                 db    0
.data.rel.ro:0000000000206A9E                 db    0
.data.rel.ro:0000000000206A9F                 db    0
.data.rel.ro:0000000000206AA0                 dq offset aSysname      ; "sysname"
.data.rel.ro:0000000000206AA8                 db    0
.data.rel.ro:0000000000206AA9                 db    0
.data.rel.ro:0000000000206AAA                 db    0
.data.rel.ro:0000000000206AAB                 db    0
.data.rel.ro:0000000000206AAC                 db    0
.data.rel.ro:0000000000206AAD                 db    0
.data.rel.ro:0000000000206AAE                 db    0
.data.rel.ro:0000000000206AAF                 db    0
.data.rel.ro:0000000000206AB0                 db    0
.data.rel.ro:0000000000206AB1                 db    0
.data.rel.ro:0000000000206AB2                 db    0
.data.rel.ro:0000000000206AB3                 db    0
.data.rel.ro:0000000000206AB4                 db    0
.data.rel.ro:0000000000206AB5                 db    0
.data.rel.ro:0000000000206AB6                 db    0
.data.rel.ro:0000000000206AB7                 db    0
.data.rel.ro:0000000000206AB8                 db  73h ; s
.data.rel.ro:0000000000206AB9                 db    0
.data.rel.ro:0000000000206ABA                 db    0
.data.rel.ro:0000000000206ABB                 db    0
.data.rel.ro:0000000000206ABC                 db    0
.data.rel.ro:0000000000206ABD                 db    0
.data.rel.ro:0000000000206ABE                 db    0
.data.rel.ro:0000000000206ABF                 db    0
.data.rel.ro:0000000000206AC0                 dq offset aNodename     ; "nodename"
.data.rel.ro:0000000000206AC8                 db    0
.data.rel.ro:0000000000206AC9                 db    0
.data.rel.ro:0000000000206ACA                 db    0
.data.rel.ro:0000000000206ACB                 db    0
.data.rel.ro:0000000000206ACC                 db    0
.data.rel.ro:0000000000206ACD                 db    0
.data.rel.ro:0000000000206ACE                 db    0
.data.rel.ro:0000000000206ACF                 db    0
.data.rel.ro:0000000000206AD0                 db    0
.data.rel.ro:0000000000206AD1                 db    0
.data.rel.ro:0000000000206AD2                 db    0
.data.rel.ro:0000000000206AD3                 db    0
.data.rel.ro:0000000000206AD4                 db    0
.data.rel.ro:0000000000206AD5                 db    0
.data.rel.ro:0000000000206AD6                 db    0
.data.rel.ro:0000000000206AD7                 db    0
.data.rel.ro:0000000000206AD8                 db  6Eh ; n
.data.rel.ro:0000000000206AD9                 db    0
.data.rel.ro:0000000000206ADA                 db    0
.data.rel.ro:0000000000206ADB                 db    0
.data.rel.ro:0000000000206ADC                 db    0
.data.rel.ro:0000000000206ADD                 db    0
.data.rel.ro:0000000000206ADE                 db    0
.data.rel.ro:0000000000206ADF                 db    0
.data.rel.ro:0000000000206AE0                 dq offset aKernelRelease ; "kernel-release"
.data.rel.ro:0000000000206AE8                 db    0
.data.rel.ro:0000000000206AE9                 db    0
.data.rel.ro:0000000000206AEA                 db    0
.data.rel.ro:0000000000206AEB                 db    0
.data.rel.ro:0000000000206AEC                 db    0
.data.rel.ro:0000000000206AED                 db    0
.data.rel.ro:0000000000206AEE                 db    0
.data.rel.ro:0000000000206AEF                 db    0
.data.rel.ro:0000000000206AF0                 db    0
.data.rel.ro:0000000000206AF1                 db    0
.data.rel.ro:0000000000206AF2                 db    0
.data.rel.ro:0000000000206AF3                 db    0
.data.rel.ro:0000000000206AF4                 db    0
.data.rel.ro:0000000000206AF5                 db    0
.data.rel.ro:0000000000206AF6                 db    0
.data.rel.ro:0000000000206AF7                 db    0
.data.rel.ro:0000000000206AF8                 db  72h ; r
.data.rel.ro:0000000000206AF9                 db    0
.data.rel.ro:0000000000206AFA                 db    0
.data.rel.ro:0000000000206AFB                 db    0
.data.rel.ro:0000000000206AFC                 db    0
.data.rel.ro:0000000000206AFD                 db    0
.data.rel.ro:0000000000206AFE                 db    0
.data.rel.ro:0000000000206AFF                 db    0
.data.rel.ro:0000000000206B00                 dq offset aKernelRelease+7 ; "release"
.data.rel.ro:0000000000206B08                 db    0
.data.rel.ro:0000000000206B09                 db    0
.data.rel.ro:0000000000206B0A                 db    0
.data.rel.ro:0000000000206B0B                 db    0
.data.rel.ro:0000000000206B0C                 db    0
.data.rel.ro:0000000000206B0D                 db    0
.data.rel.ro:0000000000206B0E                 db    0
.data.rel.ro:0000000000206B0F                 db    0
.data.rel.ro:0000000000206B10                 db    0
.data.rel.ro:0000000000206B11                 db    0
.data.rel.ro:0000000000206B12                 db    0
.data.rel.ro:0000000000206B13                 db    0
.data.rel.ro:0000000000206B14                 db    0
.data.rel.ro:0000000000206B15                 db    0
.data.rel.ro:0000000000206B16                 db    0
.data.rel.ro:0000000000206B17                 db    0
.data.rel.ro:0000000000206B18                 db  72h ; r
.data.rel.ro:0000000000206B19                 db    0
.data.rel.ro:0000000000206B1A                 db    0
.data.rel.ro:0000000000206B1B                 db    0
.data.rel.ro:0000000000206B1C                 db    0
.data.rel.ro:0000000000206B1D                 db    0
.data.rel.ro:0000000000206B1E                 db    0
.data.rel.ro:0000000000206B1F                 db    0
.data.rel.ro:0000000000206B20                 dq offset aKernelVersion ; "kernel-version"
.data.rel.ro:0000000000206B28                 db    0
.data.rel.ro:0000000000206B29                 db    0
.data.rel.ro:0000000000206B2A                 db    0
.data.rel.ro:0000000000206B2B                 db    0
.data.rel.ro:0000000000206B2C                 db    0
.data.rel.ro:0000000000206B2D                 db    0
.data.rel.ro:0000000000206B2E                 db    0
.data.rel.ro:0000000000206B2F                 db    0
.data.rel.ro:0000000000206B30                 db    0
.data.rel.ro:0000000000206B31                 db    0
.data.rel.ro:0000000000206B32                 db    0
.data.rel.ro:0000000000206B33                 db    0
.data.rel.ro:0000000000206B34                 db    0
.data.rel.ro:0000000000206B35                 db    0
.data.rel.ro:0000000000206B36                 db    0
.data.rel.ro:0000000000206B37                 db    0
.data.rel.ro:0000000000206B38                 db  76h ; v
.data.rel.ro:0000000000206B39                 db    0
.data.rel.ro:0000000000206B3A                 db    0
.data.rel.ro:0000000000206B3B                 db    0
.data.rel.ro:0000000000206B3C                 db    0
.data.rel.ro:0000000000206B3D                 db    0
.data.rel.ro:0000000000206B3E                 db    0
.data.rel.ro:0000000000206B3F                 db    0
.data.rel.ro:0000000000206B40                 dq offset aMachine      ; "machine"
.data.rel.ro:0000000000206B48                 db    0
.data.rel.ro:0000000000206B49                 db    0
.data.rel.ro:0000000000206B4A                 db    0
.data.rel.ro:0000000000206B4B                 db    0
.data.rel.ro:0000000000206B4C                 db    0
.data.rel.ro:0000000000206B4D                 db    0
.data.rel.ro:0000000000206B4E                 db    0
.data.rel.ro:0000000000206B4F                 db    0
.data.rel.ro:0000000000206B50                 db    0
.data.rel.ro:0000000000206B51                 db    0
.data.rel.ro:0000000000206B52                 db    0
.data.rel.ro:0000000000206B53                 db    0
.data.rel.ro:0000000000206B54                 db    0
.data.rel.ro:0000000000206B55                 db    0
.data.rel.ro:0000000000206B56                 db    0
.data.rel.ro:0000000000206B57                 db    0
.data.rel.ro:0000000000206B58                 db  6Dh ; m
.data.rel.ro:0000000000206B59                 db    0
.data.rel.ro:0000000000206B5A                 db    0
.data.rel.ro:0000000000206B5B                 db    0
.data.rel.ro:0000000000206B5C                 db    0
.data.rel.ro:0000000000206B5D                 db    0
.data.rel.ro:0000000000206B5E                 db    0
.data.rel.ro:0000000000206B5F                 db    0
.data.rel.ro:0000000000206B60                 dq offset aProcessor    ; "processor"
.data.rel.ro:0000000000206B68                 db    0
.data.rel.ro:0000000000206B69                 db    0
.data.rel.ro:0000000000206B6A                 db    0
.data.rel.ro:0000000000206B6B                 db    0
.data.rel.ro:0000000000206B6C                 db    0
.data.rel.ro:0000000000206B6D                 db    0
.data.rel.ro:0000000000206B6E                 db    0
.data.rel.ro:0000000000206B6F                 db    0
.data.rel.ro:0000000000206B70                 db    0
.data.rel.ro:0000000000206B71                 db    0
.data.rel.ro:0000000000206B72                 db    0
.data.rel.ro:0000000000206B73                 db    0
.data.rel.ro:0000000000206B74                 db    0
.data.rel.ro:0000000000206B75                 db    0
.data.rel.ro:0000000000206B76                 db    0
.data.rel.ro:0000000000206B77                 db    0
.data.rel.ro:0000000000206B78                 db  70h ; p
.data.rel.ro:0000000000206B79                 db    0
.data.rel.ro:0000000000206B7A                 db    0
.data.rel.ro:0000000000206B7B                 db    0
.data.rel.ro:0000000000206B7C                 db    0
.data.rel.ro:0000000000206B7D                 db    0
.data.rel.ro:0000000000206B7E                 db    0
.data.rel.ro:0000000000206B7F                 db    0
.data.rel.ro:0000000000206B80                 dq offset aHardwarePlatfo ; "hardware-platform"
.data.rel.ro:0000000000206B88                 db    0
.data.rel.ro:0000000000206B89                 db    0
.data.rel.ro:0000000000206B8A                 db    0
.data.rel.ro:0000000000206B8B                 db    0
.data.rel.ro:0000000000206B8C                 db    0
.data.rel.ro:0000000000206B8D                 db    0
.data.rel.ro:0000000000206B8E                 db    0
.data.rel.ro:0000000000206B8F                 db    0
.data.rel.ro:0000000000206B90                 db    0
.data.rel.ro:0000000000206B91                 db    0
.data.rel.ro:0000000000206B92                 db    0
.data.rel.ro:0000000000206B93                 db    0
.data.rel.ro:0000000000206B94                 db    0
.data.rel.ro:0000000000206B95                 db    0
.data.rel.ro:0000000000206B96                 db    0
.data.rel.ro:0000000000206B97                 db    0
.data.rel.ro:0000000000206B98                 db  69h ; i
.data.rel.ro:0000000000206B99                 db    0
.data.rel.ro:0000000000206B9A                 db    0
.data.rel.ro:0000000000206B9B                 db    0
.data.rel.ro:0000000000206B9C                 db    0
.data.rel.ro:0000000000206B9D                 db    0
.data.rel.ro:0000000000206B9E                 db    0
.data.rel.ro:0000000000206B9F                 db    0
.data.rel.ro:0000000000206BA0                 dq offset aOperatingSyste ; "operating-system"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  6Fh ; o
.data.rel.ro:0000000000206BB9                 db    0
.data.rel.ro:0000000000206BBA                 db    0
.data.rel.ro:0000000000206BBB                 db    0
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aKernelVersion+7 ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1328h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4900h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 2069F0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 2069F8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 800h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 290h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3F0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0F38h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B60h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 3D8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B00h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A90h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 1Fh> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1340↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1340+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EC8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206ED8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 uname_ptr       dq offset uname         ; DATA XREF: _uname↑r
.got:0000000000206F10 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F18 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F20 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F28 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F28                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F30 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F38 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000206F40 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F48 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F50 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F58 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F60 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD8                                         ; DATA XREF: start+24↑r
.got:0000000000206FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF0 _got            ends
.got:0000000000206FF0
LOAD:0000000000206FF8 ; ===========================================================================
LOAD:0000000000206FF8
LOAD:0000000000206FF8 ; Segment type: Pure data
LOAD:0000000000206FF8 ; Segment permissions: Read/Write
LOAD:0000000000206FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF8                 assume cs:LOAD
LOAD:0000000000206FF8                 ;org 206FF8h
LOAD:0000000000206FF8                 align 20h
LOAD:0000000000206FF8 LOAD            ends
LOAD:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public uname_mode
.data:0000000000207010 uname_mode      dd 1                    ; DATA XREF: main+6A↑r
.data:0000000000207010                                         ; main+11D↑r ...
.data:0000000000207014                 align 8
.data:0000000000207018                 public Version
.data:0000000000207018 Version         dq offset a831          ; DATA XREF: main+139↑r
.data:0000000000207018                                         ; main+23C↑r
.data:0000000000207018                                         ; "8.31"
.data:0000000000207020                 public exit_failure
.data:0000000000207020 ; int exit_failure
.data:0000000000207020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1F92↑r
.data:0000000000207020                                         ; xalloc_die+17↑r
.data:0000000000207024                 align 20h
.data:0000000000207040                 public quote_quoting_options
.data:0000000000207040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207040                                         ; quote_mem↑o ...
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058                 db    0
.data:0000000000207059                 db    0
.data:000000000020705A                 db    0
.data:000000000020705B                 db    0
.data:000000000020705C                 db    0
.data:000000000020705D                 db    0
.data:000000000020705E                 db    0
.data:000000000020705F                 db    0
.data:0000000000207060                 db    0
.data:0000000000207061                 db    0
.data:0000000000207062                 db    0
.data:0000000000207063                 db    0
.data:0000000000207064                 db    0
.data:0000000000207065                 db    0
.data:0000000000207066                 db    0
.data:0000000000207067                 db    0
.data:0000000000207068                 db    0
.data:0000000000207069                 db    0
.data:000000000020706A                 db    0
.data:000000000020706B                 db    0
.data:000000000020706C                 db    0
.data:000000000020706D                 db    0
.data:000000000020706E                 db    0
.data:000000000020706F                 db    0
.data:0000000000207070                 db    0
.data:0000000000207071                 db    0
.data:0000000000207072                 db    0
.data:0000000000207073                 db    0
.data:0000000000207074                 db    0
.data:0000000000207075                 db    0
.data:0000000000207076                 db    0
.data:0000000000207077                 db    0
.data:0000000000207078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207078                                         ; quotearg_n_options:loc_340D↑r ...
.data:000000000020707C                 align 20h
.data:0000000000207080 ; void *slotvec
.data:0000000000207080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207080                                         ; quotearg_n_options+76↑w ...
.data:0000000000207088                 align 10h
.data:0000000000207090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207090                                         ; quotearg_n_options+187↑r ...
.data:0000000000207098 off_207098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207098 _data           ends
.data:0000000000207098
.bss:00000000002070A0 ; ===========================================================================
.bss:00000000002070A0
.bss:00000000002070A0 ; Segment type: Uninitialized
.bss:00000000002070A0 ; Segment permissions: Read/Write
.bss:00000000002070A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002070A0                 assume cs:_bss
.bss:00000000002070A0                 ;org 2070A0h
.bss:00000000002070A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002070A0                 public __bss_start ; weak
.bss:00000000002070A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000770↑o
.bss:00000000002070A0                                         ; LOAD:00000000000007B8↑o ...
.bss:00000000002070A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002070A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002070A0                                         ; _edata
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002070A8 ; _IO_FILE *stdout
.bss:00000000002070A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000758↑o
.bss:00000000002070A8                                         ; main+12B↑r ...
.bss:00000000002070A8                                         ; Alternative name is 'stdout'
.bss:00000000002070A8                                         ; Copy of shared data
.bss:00000000002070B0                 public optind@@GLIBC_2_2_5
.bss:00000000002070B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:00000000002070B0                                         ; main:loc_1793↑r ...
.bss:00000000002070B0                                         ; Alternative name is 'optind'
.bss:00000000002070B0                                         ; Copy of shared data
.bss:00000000002070B4                 align 8
.bss:00000000002070B8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002070B8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002070B8                                         ; DATA XREF: LOAD:0000000000000788↑o
.bss:00000000002070B8                                         ; LOAD:00000000000007A0↑o ...
.bss:00000000002070B8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002070B8                                         ; Copy of shared data
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D0↑o
.bss:00000000002070C0                                         ; usage+3E↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9 printed_7559    db ?                    ; DATA XREF: print_element↑r
.bss:00000000002070C9                                         ; print_element+33↑w
.bss:00000000002070CA                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+15↑r
.bss:00000000002070E0                                         ; set_program_name:loc_202D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; char *textdomain(const char *domainname)
extern:0000000000207270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207278 ; int fclose(FILE *stream)
extern:0000000000207278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207280                 extrn bindtextdomain:near
extern:0000000000207280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207298 ; size_t strlen(const char *s)
extern:0000000000207298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; int _overflow(_IO_FILE *, int)
extern:00000000002072B8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002072B8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002072C0 ; char *strrchr(const char *s, int c)
extern:00000000002072C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C8 ; int uname(struct utsname *name)
extern:00000000002072C8                 extrn uname:near        ; CODE XREF: _uname↑j
extern:00000000002072C8                                         ; DATA XREF: .got:uname_ptr↑o
extern:00000000002072D0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072D0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072D0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072E0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072E0                 extrn __libc_start_main:near
extern:00000000002072E0                                         ; CODE XREF: start+24↑p
extern:00000000002072E0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072F0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072F0                 extrn fputs_unlocked:near
extern:00000000002072F0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072F0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000207300 ; int strcmp(const char *s1, const char *s2)
extern:0000000000207300                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000207300                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000207308 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207308                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207308                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207310 ; int fileno(FILE *stream)
extern:0000000000207310                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207310                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207318 ; void *malloc(size_t size)
extern:0000000000207318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207320 ; int fflush(FILE *stream)
extern:0000000000207320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207328 ; char *nl_langinfo(nl_item item)
extern:0000000000207328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207330 ; int _freading(FILE *fp)
extern:0000000000207330                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207330                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207338 ; void *realloc(void *ptr, size_t size)
extern:0000000000207338                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207338                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207340 ; char *setlocale(int category, const char *locale)
extern:0000000000207340                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207340                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207348                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207348                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207350 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207350                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207350                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207358 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207358                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207358                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207360 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207360                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207360                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207368 ; void __noreturn exit(int status)
extern:0000000000207368                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207368                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207370 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207370                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207370                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207378                 extrn __fprintf_chk:near
extern:0000000000207378                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207378                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207380 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207380                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207380                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207388 ; int iswprint(wint_t wc)
extern:0000000000207388                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207388                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207390 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207390                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207390                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207390                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207398 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207398                 extrn __ctype_b_loc:near
extern:0000000000207398                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207398                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073A0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073A8                 extrn __gmon_start__:near ; weak
extern:00000000002073A8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073A8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073B0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073B0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073B0
extern:00000000002073B0
extern:00000000002073B0                 end start
