LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 737640215B423AF56EB86E8F3140184B8D9B7F03F158A2A4D179F17B1976CA43
LOAD:0000000000000000 ; Input MD5    : 00B536E80041EB3BE4A03F2909D583BC
LOAD:0000000000000000 ; Input CRC32  : 40C21222
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/shred
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'shred.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'human.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'renameatu.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 47300h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0C960h               ; Size in file image
LOAD:00000000000000D8                 dq 0C960h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0D950h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20D950h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 750h                 ; Size in file image
LOAD:0000000000000110                 dq 910h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DB58h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20DB58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0B1FCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0B1FCh               ; Physical address
LOAD:00000000000001B0                 dq 394h                 ; Size in file image
LOAD:00000000000001B8                 dq 394h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0D950h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20D950h              ; Physical address
LOAD:0000000000000220                 dq 6B0h                 ; Size in file image
LOAD:0000000000000228                 dq 6B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0B1h, 60h, 9Dh, 52h, 43h, 0DCh, 62h, 59h, 96h, 4Fh ; Desc
LOAD:0000000000000284                 db 3Ah, 38h, 0F3h, 0BFh, 5Eh, 3, 31h, 23h, 14h, 93h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 55h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 55h, 56h, 5Bh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_B98, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_B98, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_B98, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aFdatasync - offset byte_B98, 12h, 0, 0, \ ; "fdatasync"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aUnlink - offset byte_B98, 12h, 0, 0, \ ; "unlink"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_B98, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_B98, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_B98, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_B98, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aReadChk - offset byte_B98, 12h, 0, 0, \ ; "__read_chk"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aIsatty - offset byte_B98, 12h, 0, 0, \ ; "isatty"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aLocaleconv - offset byte_B98, 12h, 0, 0, \ ; "localeconv"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aFcntl - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000430                            0>
LOAD:0000000000000448                 Elf64_Sym <offset aFwrite+1 - offset byte_B98, 12h, 0, 0, \ ; "write"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetpid - offset byte_B98, 12h, 0, 0, \ ; "getpid"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFreadUnlocked - offset byte_B98, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B98, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFclose - offset byte_B98, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aBindtextdomain - offset byte_B98, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aDcgettext - offset byte_B98, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B98, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrlen - offset byte_B98, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStackChkFail - offset byte_B98, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGetuid - offset byte_B98, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aGetoptLong - offset byte_B98, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMbrtowc - offset byte_B98, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrchr - offset byte_B98, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFxstatat - offset byte_B98, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aOverflow - offset byte_B98, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrrchr - offset byte_B98, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFtruncate - offset byte_B98, 12h, 0, 0, \ ; "ftruncate"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aLseek - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005F8                            0>
LOAD:0000000000000610                 Elf64_Sym <offset aGettimeofday - offset byte_B98, 12h, 0, 0, \ ; "gettimeofday"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aAssertFail - offset byte_B98, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStrtoulInterna - offset byte_B98, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemset - offset byte_B98, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aIoctl - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aFclose+1 - offset byte_B98, 12h, 0, 0, \ ; "close"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aLibcStartMain - offset byte_B98, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMemcmp - offset byte_B98, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFputsUnlocked - offset byte_B98, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aCalloc - offset byte_B98, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aStrcmp - offset byte_B98, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMemcpyChk - offset byte_B98, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSyscall - offset byte_B98, 12h, 0, 0, \ ; "syscall"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aGmonStart - offset byte_B98, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aMemcpy - offset byte_B98, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aTime - offset byte_B98, 12h, 0, 0, offset dword_0, \ ; "time"
LOAD:0000000000000778                            0>
LOAD:0000000000000790                 Elf64_Sym <offset aFileno - offset byte_B98, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aGetgid - offset byte_B98, 12h, 0, 0, \ ; "getgid"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFdatasync+5 - offset byte_B98, 12h, 0, 0, \ ; "sync"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aMalloc - offset byte_B98, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFflush - offset byte_B98, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aNlLanginfo - offset byte_B98, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aFxstat - offset byte_B98, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFreading - offset byte_B98, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aRealloc - offset byte_B98, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aStrcpyChk - offset byte_B98, 12h, 0, 0, \ ; "__strcpy_chk"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFdopen - offset byte_B98, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aSetlocale - offset byte_B98, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aPrintfChk - offset byte_B98, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aSetvbuf - offset byte_B98, 12h, 0, 0, \ ; "setvbuf"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aChmod - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "chmod"
LOAD:00000000000008E0                            0>
LOAD:00000000000008F8                 Elf64_Sym <offset aMemmove - offset byte_B98, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aError - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000910                            0>
LOAD:0000000000000928                 Elf64_Sym <offset aFsync - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "fsync"
LOAD:0000000000000928                            0>
LOAD:0000000000000940                 Elf64_Sym <offset aExplicitBzeroC - offset byte_B98, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFdopen+2 - offset byte_B98, 12h, 0, 0, \ ; "open"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aFseeko - offset byte_B98, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aFopen - offset byte_B98, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000988                            0>
LOAD:00000000000009A0                 Elf64_Sym <offset aCxaAtexit - offset byte_B98, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aRenameat - offset byte_B98, 12h, 0, 0, \ ; "renameat"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aGetpagesize - offset byte_B98, 12h, 0, 0, \ ; "getpagesize"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aGetppid - offset byte_B98, 12h, 0, 0, \ ; "getppid"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aExit+1 - offset byte_B98, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aFwrite - offset byte_B98, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aFprintfChk - offset byte_B98, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aItmRegistertmc - offset byte_B98, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aMbsinit - offset byte_B98, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aIswprint - offset byte_B98, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aCxaFinalize - offset byte_B98, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aCtypeBLoc - offset byte_B98, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aSprintfChk - offset byte_B98, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aStdout - offset byte_B98, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000AD8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000AF0                 Elf64_Sym <offset aProgname - offset byte_B98, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000AF0                            offset __bss_start, 8>
LOAD:0000000000000B08                 Elf64_Sym <offset aProgramInvocat - offset byte_B98, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000B08                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B20                 Elf64_Sym <offset aPrognameFull - offset byte_B98, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000B20                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B38                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B98, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000B38                            offset __bss_start, 8>
LOAD:0000000000000B50                 Elf64_Sym <offset aStderr - offset byte_B98, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000B50                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000B68                 Elf64_Sym <offset aOptind - offset byte_B98, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000B68                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B80                 Elf64_Sym <offset aOptarg - offset byte_B98, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000B80                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000B98 ; ELF String Table
LOAD:0000000000000B98 byte_B98        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B98                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000B99 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001038↓o
LOAD:0000000000000BA3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000BAA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BB7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BC1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000BC9 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000BCF aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000BD7 aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BE1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000000BE8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BF0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BFA aError          db 'error',0            ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C00 aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000C0B aTime           db 'time',0             ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C10 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C21 aUnlink         db 'unlink',0           ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000C28 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000C31 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000C39 aFsync          db 'fsync',0            ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000C3F aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C45 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000C45                                         ; LOAD:0000000000000A00↑o
LOAD:0000000000000C4B aGetpid         db 'getpid',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000C52 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000C52                                         ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000C6A aChmod          db 'chmod',0            ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C70 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C7E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000C7E                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C95 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000C9C aFdatasync      db 'fdatasync',0        ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000C9C                                         ; LOAD:00000000000007C0↑o
LOAD:0000000000000CA6 aGetppid        db 'getppid',0          ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000CAE aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000CB5 aRenameat       db 'renameat',0         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000CBE aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000CC5 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000CD4 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000CDB aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000CE6 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000CF7 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000CFE aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000D0A aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000D18 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000D1F aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000D25 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000D2C aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000D2C                                         ; LOAD:0000000000000688↑o
LOAD:0000000000000D33 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000D3A aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000D42 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000D49 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000D55 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000D63 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D6A aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:0000000000000D71 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000D7C aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000D83 aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000D89 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000D90 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000D9C aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000DA5 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000DAC aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000DAC                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000DB3 aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000DC0 aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:0000000000000DC0                                         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000DD5 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000DE2 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000DED aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000DF4 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000DF4                                         ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000E12 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000E12                                         ; LOAD:0000000000000958↑o
LOAD:0000000000000E19 aStrcpyChk      db '__strcpy_chk',0     ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000E26 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000E35 aSyscall        db 'syscall',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000E3D aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000E45 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000E4B aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000E59 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000E61 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000E61                                         ; LOAD:0000000000000490↑o
LOAD:0000000000000E70 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000E7B aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000E82 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000E82                                         ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000E94 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000E9B aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000EA6 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000EA6                                         ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000EB9 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000EC8 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000ECD aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000ED8 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000EE8 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000EF5 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001048↓o
LOAD:0000000000000EFF aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:0000000000001058↓o
LOAD:0000000000000F0A aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001068↓o
LOAD:0000000000000F15 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001078↓o
LOAD:0000000000000F21 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001088↓o
LOAD:0000000000000F2B aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001098↓o
LOAD:0000000000000F37 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000F37                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000F53 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000F62 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000F62                                         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000F7C ; ELF GNU Symbol Version Table
LOAD:0000000000000F7C                 dw 0
LOAD:0000000000000F7E                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000F80                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000F82                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000F84                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000F86                 dw 2                    ; fdatasync@@GLIBC_2.2.5
LOAD:0000000000000F88                 dw 2                    ; unlink@@GLIBC_2.2.5
LOAD:0000000000000F8A                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000F8C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000F8E                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000F90                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 3                    ; __read_chk@@GLIBC_2.4
LOAD:0000000000000F94                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000F96                 dw 2                    ; localeconv@@GLIBC_2.2.5
LOAD:0000000000000F98                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000F9A                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:0000000000000F9C                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:0000000000000F9E                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000FA0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000FA2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000FA4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000FA6                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000FA8                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000FAA                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000FAC                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000FAE                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000000FB0                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000FB2                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000FB4                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000FB6                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000FB8                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000FBA                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000FBC                 dw 2                    ; ftruncate@@GLIBC_2.2.5
LOAD:0000000000000FBE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000FC0                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:0000000000000FC2                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000FC4                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000FC6                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000FC8                 dw 2                    ; ioctl@@GLIBC_2.2.5
LOAD:0000000000000FCA                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000FCC                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000FCE                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000FD0                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000FD2                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000FD4                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000FD6                 dw 4                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000FD8                 dw 2                    ; syscall@@GLIBC_2.2.5
LOAD:0000000000000FDA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000FDC                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000FDE                 dw 2                    ; time@@GLIBC_2.2.5
LOAD:0000000000000FE0                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000FE2                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000000FE4                 dw 2                    ; sync@@GLIBC_2.2.5
LOAD:0000000000000FE6                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000FE8                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000FEA                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000FEC                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000FEE                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000FF0                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000FF2                 dw 4                    ; __strcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000FF4                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000FF6                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000FF8                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000FFA                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000FFC                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:0000000000000FFE                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000001000                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000001002                 dw 2                    ; fsync@@GLIBC_2.2.5
LOAD:0000000000001004                 dw 6                    ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:0000000000001006                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000001008                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:000000000000100A                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:000000000000100C                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:000000000000100E                 dw 3                    ; renameat@@GLIBC_2.4
LOAD:0000000000001010                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:0000000000001012                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:0000000000001014                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000001016                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000001018                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:000000000000101A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:000000000000101C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:000000000000101E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000001020                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000001022                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000001024                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000001026                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000001028                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:000000000000102A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:000000000000102C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:000000000000102E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000001030                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000001032                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000001034                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000001036                 dw 0
LOAD:0000000000001038 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001038                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_B98, 10h, 0> ; "libc.so.6"
LOAD:0000000000001048                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_B98, \ ; "GLIBC_2.3"
LOAD:0000000000001048                                10h>
LOAD:0000000000001058                 Elf64_Vernaux <6969185h, 0, 6, offset aGlibc225 - offset byte_B98, \ ; "GLIBC_2.25"
LOAD:0000000000001058                                10h>
LOAD:0000000000001068                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_B98, \ ; "GLIBC_2.14"
LOAD:0000000000001068                                10h>
LOAD:0000000000001078                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_B98, \ ; "GLIBC_2.3.4"
LOAD:0000000000001078                                10h>
LOAD:0000000000001088                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_B98, \ ; "GLIBC_2.4"
LOAD:0000000000001088                                10h>
LOAD:0000000000001098                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_B98, \ ; "GLIBC_2.2.5"
LOAD:0000000000001098                                0>
LOAD:00000000000010A8 ; ELF RELA Relocation Table
LOAD:00000000000010A8                 Elf64_Rela <20D950h, 8, 2B40h> ; R_X86_64_RELATIVE +2B40h
LOAD:00000000000010C0                 Elf64_Rela <20D958h, 8, 2B00h> ; R_X86_64_RELATIVE +2B00h
LOAD:00000000000010D8                 Elf64_Rela <20D960h, 8, 9829h> ; R_X86_64_RELATIVE +9829h
LOAD:00000000000010F0                 Elf64_Rela <20D980h, 8, 982Fh> ; R_X86_64_RELATIVE +982Fh
LOAD:0000000000001108                 Elf64_Rela <20D9A0h, 8, 9835h> ; R_X86_64_RELATIVE +9835h
LOAD:0000000000001120                 Elf64_Rela <20D9C0h, 8, 9768h> ; R_X86_64_RELATIVE +9768h
LOAD:0000000000001138                 Elf64_Rela <20D9E0h, 8, 9840h> ; R_X86_64_RELATIVE +9840h
LOAD:0000000000001150                 Elf64_Rela <20DA00h, 8, 9816h> ; R_X86_64_RELATIVE +9816h
LOAD:0000000000001168                 Elf64_Rela <20DA20h, 8, 984Eh> ; R_X86_64_RELATIVE +984Eh
LOAD:0000000000001180                 Elf64_Rela <20DA40h, 8, 9856h> ; R_X86_64_RELATIVE +9856h
LOAD:0000000000001198                 Elf64_Rela <20DA60h, 8, 985Bh> ; R_X86_64_RELATIVE +985Bh
LOAD:00000000000011B0                 Elf64_Rela <20DA80h, 8, 9860h> ; R_X86_64_RELATIVE +9860h
LOAD:00000000000011C8                 Elf64_Rela <20DAC0h, 8, 9868h> ; R_X86_64_RELATIVE +9868h
LOAD:00000000000011E0                 Elf64_Rela <20DAC8h, 8, 986Fh> ; R_X86_64_RELATIVE +986Fh
LOAD:00000000000011F8                 Elf64_Rela <20DAD0h, 8, 9874h> ; R_X86_64_RELATIVE +9874h
LOAD:0000000000001210                 Elf64_Rela <20DAE0h, 8, 0A7C1h> ; R_X86_64_RELATIVE +0A7C1h
LOAD:0000000000001228                 Elf64_Rela <20DAE8h, 8, 0A7D0h> ; R_X86_64_RELATIVE +0A7D0h
LOAD:0000000000001240                 Elf64_Rela <20DB00h, 8, 0A869h> ; R_X86_64_RELATIVE +0A869h
LOAD:0000000000001258                 Elf64_Rela <20DB08h, 8, 0A871h> ; R_X86_64_RELATIVE +0A871h
LOAD:0000000000001270                 Elf64_Rela <20DB10h, 8, 0A877h> ; R_X86_64_RELATIVE +0A877h
LOAD:0000000000001288                 Elf64_Rela <20DB18h, 8, 0A884h> ; R_X86_64_RELATIVE +0A884h
LOAD:00000000000012A0                 Elf64_Rela <20DB20h, 8, 0A891h> ; R_X86_64_RELATIVE +0A891h
LOAD:00000000000012B8                 Elf64_Rela <20DB28h, 8, 97F4h> ; R_X86_64_RELATIVE +97F4h
LOAD:00000000000012D0                 Elf64_Rela <20DB30h, 8, 0A8A5h> ; R_X86_64_RELATIVE +0A8A5h
LOAD:00000000000012E8                 Elf64_Rela <20DB38h, 8, 0A88Ah> ; R_X86_64_RELATIVE +0A88Ah
LOAD:0000000000001300                 Elf64_Rela <20DB40h, 8, 9732h> ; R_X86_64_RELATIVE +9732h
LOAD:0000000000001318                 Elf64_Rela <20DB48h, 8, 0A8ADh> ; R_X86_64_RELATIVE +0A8ADh
LOAD:0000000000001330                 Elf64_Rela <20E008h, 8, 20E008h> ; R_X86_64_RELATIVE +20E008h
LOAD:0000000000001348                 Elf64_Rela <20E010h, 8, 0A70Ch> ; R_X86_64_RELATIVE +0A70Ch
LOAD:0000000000001360                 Elf64_Rela <20E018h, 8, 40E0h> ; R_X86_64_RELATIVE +40E0h
LOAD:0000000000001378                 Elf64_Rela <20E080h, 8, 20E090h> ; R_X86_64_RELATIVE +20E090h
LOAD:0000000000001390                 Elf64_Rela <20E098h, 8, 20E120h> ; R_X86_64_RELATIVE +20E120h
LOAD:00000000000013A8                 Elf64_Rela <20DFD8h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000013C0                 Elf64_Rela <20DFE0h, 2800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000013D8                 Elf64_Rela <20DFE8h, 2F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000013F0                 Elf64_Rela <20DFF0h, 4F00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001408                 Elf64_Rela <20DFF8h, 5200000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001420                 Elf64_Rela <20E0A0h, 5600000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001438                 Elf64_Rela <20E0A8h, 5500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001450                 Elf64_Rela <20E0B0h, 5B00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001468                 Elf64_Rela <20E0B8h, 5C00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001480                 Elf64_Rela <20E0C0h, 5800000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001498                 Elf64_Rela <20E0E0h, 5A00000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000014B0 ; ELF JMPREL Relocation Table
LOAD:00000000000014B0                 Elf64_Rela <20DD60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000014C8                 Elf64_Rela <20DD68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000014E0                 Elf64_Rela <20DD70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000014F8                 Elf64_Rela <20DD78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001510                 Elf64_Rela <20DD80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT fdatasync
LOAD:0000000000001528                 Elf64_Rela <20DD88h, 600000007h, 0> ; R_X86_64_JUMP_SLOT unlink
LOAD:0000000000001540                 Elf64_Rela <20DD90h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001558                 Elf64_Rela <20DD98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001570                 Elf64_Rela <20DDA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001588                 Elf64_Rela <20DDA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:00000000000015A0                 Elf64_Rela <20DDB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:00000000000015B8                 Elf64_Rela <20DDB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:00000000000015D0                 Elf64_Rela <20DDC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000015E8                 Elf64_Rela <20DDC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000001600                 Elf64_Rela <20DDD0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:0000000000001618                 Elf64_Rela <20DDD8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001630                 Elf64_Rela <20DDE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001648                 Elf64_Rela <20DDE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001660                 Elf64_Rela <20DDF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001678                 Elf64_Rela <20DDF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001690                 Elf64_Rela <20DE00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000016A8                 Elf64_Rela <20DE08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000016C0                 Elf64_Rela <20DE10h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000016D8                 Elf64_Rela <20DE18h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:00000000000016F0                 Elf64_Rela <20DE20h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001708                 Elf64_Rela <20DE28h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001720                 Elf64_Rela <20DE30h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001738                 Elf64_Rela <20DE38h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001750                 Elf64_Rela <20DE40h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001768                 Elf64_Rela <20DE48h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001780                 Elf64_Rela <20DE50h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000001798                 Elf64_Rela <20DE58h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000017B0                 Elf64_Rela <20DE60h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:00000000000017C8                 Elf64_Rela <20DE68h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000017E0                 Elf64_Rela <20DE70h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000017F8                 Elf64_Rela <20DE78h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001810                 Elf64_Rela <20DE80h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:0000000000001828                 Elf64_Rela <20DE88h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001840                 Elf64_Rela <20DE90h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001858                 Elf64_Rela <20DE98h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001870                 Elf64_Rela <20DEA0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001888                 Elf64_Rela <20DEA8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000018A0                 Elf64_Rela <20DEB0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:00000000000018B8                 Elf64_Rela <20DEB8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT syscall
LOAD:00000000000018D0                 Elf64_Rela <20DEC0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000018E8                 Elf64_Rela <20DEC8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT time
LOAD:0000000000001900                 Elf64_Rela <20DED0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001918                 Elf64_Rela <20DED8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000001930                 Elf64_Rela <20DEE0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT sync
LOAD:0000000000001948                 Elf64_Rela <20DEE8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001960                 Elf64_Rela <20DEF0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001978                 Elf64_Rela <20DEF8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001990                 Elf64_Rela <20DF00h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000019A8                 Elf64_Rela <20DF08h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000019C0                 Elf64_Rela <20DF10h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000019D8                 Elf64_Rela <20DF18h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __strcpy_chk
LOAD:00000000000019F0                 Elf64_Rela <20DF20h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001A08                 Elf64_Rela <20DF28h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001A20                 Elf64_Rela <20DF30h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001A38                 Elf64_Rela <20DF38h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001A50                 Elf64_Rela <20DF40h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:0000000000001A68                 Elf64_Rela <20DF48h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001A80                 Elf64_Rela <20DF50h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001A98                 Elf64_Rela <20DF58h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT fsync
LOAD:0000000000001AB0                 Elf64_Rela <20DF60h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000001AC8                 Elf64_Rela <20DF68h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001AE0                 Elf64_Rela <20DF70h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001AF8                 Elf64_Rela <20DF78h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001B10                 Elf64_Rela <20DF80h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001B28                 Elf64_Rela <20DF88h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT renameat
LOAD:0000000000001B40                 Elf64_Rela <20DF90h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:0000000000001B58                 Elf64_Rela <20DF98h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:0000000000001B70                 Elf64_Rela <20DFA0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001B88                 Elf64_Rela <20DFA8h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001BA0                 Elf64_Rela <20DFB0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001BB8                 Elf64_Rela <20DFB8h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001BD0                 Elf64_Rela <20DFC0h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001BE8                 Elf64_Rela <20DFC8h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001C00                 Elf64_Rela <20DFD0h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001C00 LOAD            ends
LOAD:0000000000001C00
.init:0000000000001C18 ; ===========================================================================
.init:0000000000001C18
.init:0000000000001C18 ; Segment type: Pure code
.init:0000000000001C18 ; Segment permissions: Read/Execute
.init:0000000000001C18 _init           segment dword public 'CODE' use64
.init:0000000000001C18                 assume cs:_init
.init:0000000000001C18                 ;org 1C18h
.init:0000000000001C18                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001C18
.init:0000000000001C18 ; =============== S U B R O U T I N E =======================================
.init:0000000000001C18
.init:0000000000001C18
.init:0000000000001C18                 public _init_proc
.init:0000000000001C18 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001C18                 sub     rsp, 8          ; _init
.init:0000000000001C1C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001C23                 test    rax, rax
.init:0000000000001C26                 jz      short loc_1C2A
.init:0000000000001C28                 call    rax ; __gmon_start__
.init:0000000000001C2A
.init:0000000000001C2A loc_1C2A:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001C2A                 add     rsp, 8
.init:0000000000001C2E                 retn
.init:0000000000001C2E _init_proc      endp
.init:0000000000001C2E
.init:0000000000001C2E _init           ends
.init:0000000000001C2E
LOAD:0000000000001C2F ; ===========================================================================
LOAD:0000000000001C2F
LOAD:0000000000001C2F ; Segment type: Pure code
LOAD:0000000000001C2F ; Segment permissions: Read/Execute
LOAD:0000000000001C2F LOAD            segment byte public 'CODE' use64
LOAD:0000000000001C2F                 assume cs:LOAD
LOAD:0000000000001C2F                 ;org 1C2Fh
LOAD:0000000000001C2F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001C2F                 align 10h
LOAD:0000000000001C2F LOAD            ends
LOAD:0000000000001C2F
.plt:0000000000001C30 ; ===========================================================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Segment type: Pure code
.plt:0000000000001C30 ; Segment permissions: Read/Execute
.plt:0000000000001C30 _plt            segment para public 'CODE' use64
.plt:0000000000001C30                 assume cs:_plt
.plt:0000000000001C30                 ;org 1C30h
.plt:0000000000001C30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30
.plt:0000000000001C30 sub_1C30        proc near               ; CODE XREF: .plt:0000000000001C4B↓j
.plt:0000000000001C30                                         ; .plt:0000000000001C5B↓j ...
.plt:0000000000001C30 ; __unwind {
.plt:0000000000001C30                 push    cs:qword_20DD50
.plt:0000000000001C36                 jmp     cs:qword_20DD58
.plt:0000000000001C36 sub_1C30        endp
.plt:0000000000001C36
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C3C                 align 20h
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *getenv(const char *name)
.plt:0000000000001C40 _getenv         proc near               ; CODE XREF: human_options+114↓p
.plt:0000000000001C40                                         ; human_options+147↓p ...
.plt:0000000000001C40                 jmp     cs:getenv_ptr
.plt:0000000000001C40 _getenv         endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    0
.plt:0000000000001C4B                 jmp     sub_1C30
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; void free(void *ptr)
.plt:0000000000001C50 _free           proc near               ; CODE XREF: main+366↓p
.plt:0000000000001C50                                         ; main+709↓p ...
.plt:0000000000001C50                 jmp     cs:free_ptr
.plt:0000000000001C50 _free           endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    1
.plt:0000000000001C5B                 jmp     sub_1C30
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: noreturn thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; void __noreturn abort(void)
.plt:0000000000001C60 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001C60                                         ; quotearg_buffer_restyled:def_5681↓p ...
.plt:0000000000001C60                 jmp     cs:abort_ptr
.plt:0000000000001C60 _abort          endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    2
.plt:0000000000001C6B                 jmp     sub_1C30
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int *__errno_location(void)
.plt:0000000000001C70 ___errno_location proc near             ; CODE XREF: main:loc_2578↓p
.plt:0000000000001C70                                         ; main+4C3↓p ...
.plt:0000000000001C70                 jmp     cs:__errno_location_ptr
.plt:0000000000001C70 ___errno_location endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    3
.plt:0000000000001C7B                 jmp     sub_1C30
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int fdatasync(int fildes)
.plt:0000000000001C80 _fdatasync      proc near               ; CODE XREF: dosync+F↓p
.plt:0000000000001C80                 jmp     cs:fdatasync_ptr
.plt:0000000000001C80 _fdatasync      endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    4
.plt:0000000000001C8B                 jmp     sub_1C30
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; int unlink(const char *name)
.plt:0000000000001C90 _unlink         proc near               ; CODE XREF: main+68D↓p
.plt:0000000000001C90                 jmp     cs:unlink_ptr
.plt:0000000000001C90 _unlink         endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    5
.plt:0000000000001C9B                 jmp     sub_1C30
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001CA0 _strncmp        proc near               ; CODE XREF: usage+37C↓p
.plt:0000000000001CA0                                         ; usage+43D↓p ...
.plt:0000000000001CA0                 jmp     cs:strncmp_ptr
.plt:0000000000001CA0 _strncmp        endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    6
.plt:0000000000001CAB                 jmp     sub_1C30
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: noreturn thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; void __noreturn _exit(int status)
.plt:0000000000001CB0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001CB0                 jmp     cs:_exit_ptr
.plt:0000000000001CB0 __exit          endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    7
.plt:0000000000001CBB                 jmp     sub_1C30
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; size_t __fpending(FILE *fp)
.plt:0000000000001CC0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001CC0                 jmp     cs:__fpending_ptr
.plt:0000000000001CC0 ___fpending     endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    8
.plt:0000000000001CCB                 jmp     sub_1C30
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:0000000000001CD0                 jmp     cs:__read_chk_ptr
.plt:0000000000001CD0 ___read_chk     endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    9
.plt:0000000000001CDB                 jmp     sub_1C30
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int isatty(int fd)
.plt:0000000000001CE0 _isatty         proc near               ; CODE XREF: do_wipefd+34A↓p
.plt:0000000000001CE0                 jmp     cs:isatty_ptr
.plt:0000000000001CE0 _isatty         endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    0Ah
.plt:0000000000001CEB                 jmp     sub_1C30
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; struct lconv *localeconv(void)
.plt:0000000000001CF0 _localeconv     proc near               ; CODE XREF: human_readable+59↓p
.plt:0000000000001CF0                 jmp     cs:localeconv_ptr
.plt:0000000000001CF0 _localeconv     endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    0Bh
.plt:0000000000001CFB                 jmp     sub_1C30
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001D00 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001D00                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001D00                 jmp     cs:fcntl_ptr
.plt:0000000000001D00 _fcntl          endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    0Ch
.plt:0000000000001D0B                 jmp     sub_1C30
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000001D10 _write          proc near               ; CODE XREF: dopass+329↓p
.plt:0000000000001D10                 jmp     cs:write_ptr
.plt:0000000000001D10 _write          endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    0Dh
.plt:0000000000001D1B                 jmp     sub_1C30
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; __pid_t getpid(void)
.plt:0000000000001D20 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:0000000000001D20                                         ; randread_new+2C2↓p
.plt:0000000000001D20                 jmp     cs:getpid_ptr
.plt:0000000000001D20 _getpid         endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    0Eh
.plt:0000000000001D2B                 jmp     sub_1C30
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001D30 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:0000000000001D30                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001D30 _fread_unlocked endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    0Fh
.plt:0000000000001D3B                 jmp     sub_1C30
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; char *textdomain(const char *domainname)
.plt:0000000000001D40 _textdomain     proc near               ; CODE XREF: main+71↓p
.plt:0000000000001D40                 jmp     cs:textdomain_ptr
.plt:0000000000001D40 _textdomain     endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    10h
.plt:0000000000001D4B                 jmp     sub_1C30
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; int fclose(FILE *stream)
.plt:0000000000001D50 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001D50                                         ; rpl_fclose+6B↓j
.plt:0000000000001D50                 jmp     cs:fclose_ptr
.plt:0000000000001D50 _fclose         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    11h
.plt:0000000000001D5B                 jmp     sub_1C30
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001D60 _bindtextdomain proc near               ; CODE XREF: main+65↓p
.plt:0000000000001D60                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001D60 _bindtextdomain endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    12h
.plt:0000000000001D6B                 jmp     sub_1C30
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001D70 _dcgettext      proc near               ; CODE XREF: main+121↓p
.plt:0000000000001D70                                         ; main+1BE↓p ...
.plt:0000000000001D70                 jmp     cs:dcgettext_ptr
.plt:0000000000001D70 _dcgettext      endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    13h
.plt:0000000000001D7B                 jmp     sub_1C30
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001D80 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001D80                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001D80 ___ctype_get_mb_cur_max endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    14h
.plt:0000000000001D8B                 jmp     sub_1C30
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; size_t strlen(const char *s)
.plt:0000000000001D90 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000001D90                                         ; argmatch+AE↓p ...
.plt:0000000000001D90                 jmp     cs:strlen_ptr
.plt:0000000000001D90 _strlen         endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    15h
.plt:0000000000001D9B                 jmp     sub_1C30
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: noreturn thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_29E6↓p
.plt:0000000000001DA0                                         ; dopass:loc_34FC↓p ...
.plt:0000000000001DA0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001DA0 ___stack_chk_fail endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    16h
.plt:0000000000001DAB                 jmp     sub_1C30
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; __uid_t getuid(void)
.plt:0000000000001DB0 _getuid         proc near               ; CODE XREF: randread_new+1C4↓p
.plt:0000000000001DB0                 jmp     cs:getuid_ptr
.plt:0000000000001DB0 _getuid         endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    17h
.plt:0000000000001DBB                 jmp     sub_1C30
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001DC0 _getopt_long    proc near               ; CODE XREF: main+AA↓p
.plt:0000000000001DC0                 jmp     cs:getopt_long_ptr
.plt:0000000000001DC0 _getopt_long    endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    18h
.plt:0000000000001DCB                 jmp     sub_1C30
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001DD0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001DD0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001DD0 _mbrtowc        endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    19h
.plt:0000000000001DDB                 jmp     sub_1C30
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; char *strchr(const char *s, int c)
.plt:0000000000001DE0 _strchr         proc near               ; CODE XREF: main+65E↓p
.plt:0000000000001DE0                                         ; xstrtoumax+123↓p ...
.plt:0000000000001DE0                 jmp     cs:strchr_ptr
.plt:0000000000001DE0 _strchr         endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    1Ah
.plt:0000000000001DEB                 jmp     sub_1C30
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001DF0 ___fxstatat     proc near               ; CODE XREF: renameat2+13C↓p
.plt:0000000000001DF0                                         ; renameat2+18E↓p ...
.plt:0000000000001DF0                 jmp     cs:__fxstatat_ptr
.plt:0000000000001DF0 ___fxstatat     endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    1Bh
.plt:0000000000001DFB                 jmp     sub_1C30
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001E00 ___overflow     proc near               ; CODE XREF: argmatch_valid+11B↓j
.plt:0000000000001E00                 jmp     cs:__overflow_ptr
.plt:0000000000001E00 ___overflow     endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    1Ch
.plt:0000000000001E0B                 jmp     sub_1C30
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; char *strrchr(const char *s, int c)
.plt:0000000000001E10 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001E10                 jmp     cs:strrchr_ptr
.plt:0000000000001E10 _strrchr        endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    1Dh
.plt:0000000000001E1B                 jmp     sub_1C30
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; int ftruncate(int fd, __off_t length)
.plt:0000000000001E20 _ftruncate      proc near               ; CODE XREF: do_wipefd+45A↓p
.plt:0000000000001E20                 jmp     cs:ftruncate_ptr
.plt:0000000000001E20 _ftruncate      endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    1Eh
.plt:0000000000001E2B                 jmp     sub_1C30
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001E30 _lseek          proc near               ; CODE XREF: dopass+D5↓p
.plt:0000000000001E30                                         ; dopass+3DD↓p ...
.plt:0000000000001E30                 jmp     cs:lseek_ptr
.plt:0000000000001E30 _lseek          endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    1Fh
.plt:0000000000001E3B                 jmp     sub_1C30
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:0000000000001E40 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:0000000000001E40                                         ; randread_new+278↓p
.plt:0000000000001E40                 jmp     cs:gettimeofday_ptr
.plt:0000000000001E40 _gettimeofday   endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    20h ; ' '
.plt:0000000000001E4B                 jmp     sub_1C30
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: noreturn thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001E50 ___assert_fail  proc near               ; CODE XREF: main+8A1↓p
.plt:0000000000001E50                                         ; xstrtoumax+39F↓p
.plt:0000000000001E50                 jmp     cs:__assert_fail_ptr
.plt:0000000000001E50 ___assert_fail  endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    21h ; '!'
.plt:0000000000001E5B                 jmp     sub_1C30
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001E60 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001E60                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001E60 ___strtoul_internal endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    22h ; '"'
.plt:0000000000001E6B                 jmp     sub_1C30
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001E70 _memset         proc near               ; CODE XREF: main+601↓p
.plt:0000000000001E70                                         ; quotearg_n_options+99↓p ...
.plt:0000000000001E70                 jmp     cs:memset_ptr
.plt:0000000000001E70 _memset         endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    23h ; '#'
.plt:0000000000001E7B                 jmp     sub_1C30
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:0000000000001E80 _ioctl          proc near               ; CODE XREF: dopass+189↓p
.plt:0000000000001E80                 jmp     cs:ioctl_ptr
.plt:0000000000001E80 _ioctl          endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    24h ; '$'
.plt:0000000000001E8B                 jmp     sub_1C30
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; int close(int fd)
.plt:0000000000001E90 _close          proc near               ; CODE XREF: main+3E6↓p
.plt:0000000000001E90                                         ; main+6CA↓p ...
.plt:0000000000001E90                 jmp     cs:close_ptr
.plt:0000000000001E90 _close          endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    25h ; '%'
.plt:0000000000001E9B                 jmp     sub_1C30
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001EA0 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000001EA0                                         ; argmatch_valid+96↓p ...
.plt:0000000000001EA0                 jmp     cs:memcmp_ptr
.plt:0000000000001EA0 _memcmp         endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    26h ; '&'
.plt:0000000000001EAB                 jmp     sub_1C30
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001EB0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001EB0                                         ; usage+C2↓p ...
.plt:0000000000001EB0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001EB0 _fputs_unlocked endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    27h ; '''
.plt:0000000000001EBB                 jmp     sub_1C30
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001EC0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001EC0                 jmp     cs:calloc_ptr
.plt:0000000000001EC0 _calloc         endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    28h ; '('
.plt:0000000000001ECB                 jmp     sub_1C30
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001ED0 _strcmp         proc near               ; CODE XREF: main+178↓p
.plt:0000000000001ED0                                         ; dopass+624↓p
.plt:0000000000001ED0                 jmp     cs:strcmp_ptr
.plt:0000000000001ED0 _strcmp         endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    29h ; ')'
.plt:0000000000001EDB                 jmp     sub_1C30
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ___memcpy_chk   proc near               ; CODE XREF: human_readable+49C↓p
.plt:0000000000001EE0                 jmp     cs:__memcpy_chk_ptr
.plt:0000000000001EE0 ___memcpy_chk   endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    2Ah ; '*'
.plt:0000000000001EEB                 jmp     sub_1C30
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; __int64 syscall(__int64 sysno, ...)
.plt:0000000000001EF0 _syscall        proc near               ; CODE XREF: renameat2+46↓p
.plt:0000000000001EF0                 jmp     cs:syscall_ptr
.plt:0000000000001EF0 _syscall        endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    2Bh ; '+'
.plt:0000000000001EFB                 jmp     sub_1C30
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001F00 _memcpy         proc near               ; CODE XREF: main+81E↓p
.plt:0000000000001F00                                         ; dopass+205↓p ...
.plt:0000000000001F00                 jmp     cs:memcpy_ptr
.plt:0000000000001F00 _memcpy         endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    2Ch ; ','
.plt:0000000000001F0B                 jmp     sub_1C30
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; time_t time(time_t *timer)
.plt:0000000000001F10 _time           proc near               ; CODE XREF: dopass+515↓p
.plt:0000000000001F10                                         ; dopass+5E3↓p ...
.plt:0000000000001F10                 jmp     cs:time_ptr
.plt:0000000000001F10 _time           endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    2Dh ; '-'
.plt:0000000000001F1B                 jmp     sub_1C30
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; int fileno(FILE *stream)
.plt:0000000000001F20 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001F20                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001F20                 jmp     cs:fileno_ptr
.plt:0000000000001F20 _fileno         endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    2Eh ; '.'
.plt:0000000000001F2B                 jmp     sub_1C30
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; __gid_t getgid(void)
.plt:0000000000001F30 _getgid         proc near               ; CODE XREF: randread_new+1FC↓p
.plt:0000000000001F30                 jmp     cs:getgid_ptr
.plt:0000000000001F30 _getgid         endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    2Fh ; '/'
.plt:0000000000001F3B                 jmp     sub_1C30
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; void sync(void)
.plt:0000000000001F40 _sync           proc near               ; CODE XREF: dosync:loc_2C30↓p
.plt:0000000000001F40                 jmp     cs:sync_ptr
.plt:0000000000001F40 _sync           endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    30h ; '0'
.plt:0000000000001F4B                 jmp     sub_1C30
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ; void *malloc(size_t size)
.plt:0000000000001F50 _malloc         proc near               ; CODE XREF: mdir_name+1F↓p
.plt:0000000000001F50                                         ; xmalloc+4↓p
.plt:0000000000001F50                 jmp     cs:malloc_ptr
.plt:0000000000001F50 _malloc         endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    31h ; '1'
.plt:0000000000001F5B                 jmp     sub_1C30
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; int fflush(FILE *stream)
.plt:0000000000001F60 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001F60                                         ; rpl_fflush+3B↓j
.plt:0000000000001F60                 jmp     cs:fflush_ptr
.plt:0000000000001F60 _fflush         endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    32h ; '2'
.plt:0000000000001F6B                 jmp     sub_1C30
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; char *nl_langinfo(nl_item item)
.plt:0000000000001F70 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001F70                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001F70 _nl_langinfo    endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    33h ; '3'
.plt:0000000000001F7B                 jmp     sub_1C30
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001F80 ___fxstat       proc near               ; CODE XREF: do_wipefd+62↓p
.plt:0000000000001F80                 jmp     cs:__fxstat_ptr
.plt:0000000000001F80 ___fxstat       endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    34h ; '4'
.plt:0000000000001F8B                 jmp     sub_1C30
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; int __freading(FILE *fp)
.plt:0000000000001F90 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001F90                                         ; rpl_fflush+9↓p
.plt:0000000000001F90                 jmp     cs:__freading_ptr
.plt:0000000000001F90 ___freading     endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    35h ; '5'
.plt:0000000000001F9B                 jmp     sub_1C30
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001FA0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001FA0                 jmp     cs:realloc_ptr
.plt:0000000000001FA0 _realloc        endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    36h ; '6'
.plt:0000000000001FAB                 jmp     sub_1C30
.plt:0000000000001FB0
.plt:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FB0
.plt:0000000000001FB0 ; Attributes: thunk
.plt:0000000000001FB0
.plt:0000000000001FB0 ___strcpy_chk   proc near               ; CODE XREF: dopass+6F6↓p
.plt:0000000000001FB0                 jmp     cs:__strcpy_chk_ptr
.plt:0000000000001FB0 ___strcpy_chk   endp
.plt:0000000000001FB0
.plt:0000000000001FB6 ; ---------------------------------------------------------------------------
.plt:0000000000001FB6                 push    37h ; '7'
.plt:0000000000001FBB                 jmp     sub_1C30
.plt:0000000000001FC0
.plt:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FC0
.plt:0000000000001FC0 ; Attributes: thunk
.plt:0000000000001FC0
.plt:0000000000001FC0 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001FC0 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001FC0                 jmp     cs:fdopen_ptr
.plt:0000000000001FC0 _fdopen         endp
.plt:0000000000001FC0
.plt:0000000000001FC6 ; ---------------------------------------------------------------------------
.plt:0000000000001FC6                 push    38h ; '8'
.plt:0000000000001FCB                 jmp     sub_1C30
.plt:0000000000001FD0
.plt:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FD0
.plt:0000000000001FD0 ; Attributes: thunk
.plt:0000000000001FD0
.plt:0000000000001FD0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001FD0 _setlocale      proc near               ; CODE XREF: main+52↓p
.plt:0000000000001FD0                                         ; usage+363↓p ...
.plt:0000000000001FD0                 jmp     cs:setlocale_ptr
.plt:0000000000001FD0 _setlocale      endp
.plt:0000000000001FD0
.plt:0000000000001FD6 ; ---------------------------------------------------------------------------
.plt:0000000000001FD6                 push    39h ; '9'
.plt:0000000000001FDB                 jmp     sub_1C30
.plt:0000000000001FE0
.plt:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FE0
.plt:0000000000001FE0 ; Attributes: thunk
.plt:0000000000001FE0
.plt:0000000000001FE0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001FE0                                         ; usage+10E↓p ...
.plt:0000000000001FE0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001FE0 ___printf_chk   endp
.plt:0000000000001FE0
.plt:0000000000001FE6 ; ---------------------------------------------------------------------------
.plt:0000000000001FE6                 push    3Ah ; ':'
.plt:0000000000001FEB                 jmp     sub_1C30
.plt:0000000000001FF0
.plt:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FF0
.plt:0000000000001FF0 ; Attributes: thunk
.plt:0000000000001FF0
.plt:0000000000001FF0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001FF0 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000001FF0                 jmp     cs:setvbuf_ptr
.plt:0000000000001FF0 _setvbuf        endp
.plt:0000000000001FF0
.plt:0000000000001FF6 ; ---------------------------------------------------------------------------
.plt:0000000000001FF6                 push    3Bh ; ';'
.plt:0000000000001FFB                 jmp     sub_1C30
.plt:0000000000002000
.plt:0000000000002000 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002000
.plt:0000000000002000 ; Attributes: thunk
.plt:0000000000002000
.plt:0000000000002000 ; int chmod(const char *file, __mode_t mode)
.plt:0000000000002000 _chmod          proc near               ; CODE XREF: main+524↓p
.plt:0000000000002000                 jmp     cs:chmod_ptr
.plt:0000000000002000 _chmod          endp
.plt:0000000000002000
.plt:0000000000002006 ; ---------------------------------------------------------------------------
.plt:0000000000002006                 push    3Ch ; '<'
.plt:000000000000200B                 jmp     sub_1C30
.plt:0000000000002010
.plt:0000000000002010 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002010
.plt:0000000000002010 ; Attributes: thunk
.plt:0000000000002010
.plt:0000000000002010 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000002010 _memmove        proc near               ; CODE XREF: human_readable+375↓p
.plt:0000000000002010                 jmp     cs:memmove_ptr
.plt:0000000000002010 _memmove        endp
.plt:0000000000002010
.plt:0000000000002016 ; ---------------------------------------------------------------------------
.plt:0000000000002016                 push    3Dh ; '='
.plt:000000000000201B                 jmp     sub_1C30
.plt:0000000000002020
.plt:0000000000002020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002020
.plt:0000000000002020 ; Attributes: thunk
.plt:0000000000002020
.plt:0000000000002020 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002020 _error          proc near               ; CODE XREF: main+42C↓p
.plt:0000000000002020                                         ; main+46D↓p ...
.plt:0000000000002020                 jmp     cs:error_ptr
.plt:0000000000002020 _error          endp
.plt:0000000000002020
.plt:0000000000002026 ; ---------------------------------------------------------------------------
.plt:0000000000002026                 push    3Eh ; '>'
.plt:000000000000202B                 jmp     sub_1C30
.plt:0000000000002030
.plt:0000000000002030 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002030
.plt:0000000000002030 ; Attributes: thunk
.plt:0000000000002030
.plt:0000000000002030 ; int fsync(int fd)
.plt:0000000000002030 _fsync          proc near               ; CODE XREF: dosync+31↓p
.plt:0000000000002030                 jmp     cs:fsync_ptr
.plt:0000000000002030 _fsync          endp
.plt:0000000000002030
.plt:0000000000002036 ; ---------------------------------------------------------------------------
.plt:0000000000002036                 push    3Fh ; '?'
.plt:000000000000203B                 jmp     sub_1C30
.plt:0000000000002040
.plt:0000000000002040 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002040
.plt:0000000000002040 ; Attributes: thunk
.plt:0000000000002040
.plt:0000000000002040 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:0000000000002040                                         ; randint_all_free+32↓p ...
.plt:0000000000002040                 jmp     cs:__explicit_bzero_chk_ptr
.plt:0000000000002040 ___explicit_bzero_chk endp
.plt:0000000000002040
.plt:0000000000002046 ; ---------------------------------------------------------------------------
.plt:0000000000002046                 push    40h ; '@'
.plt:000000000000204B                 jmp     sub_1C30
.plt:0000000000002050
.plt:0000000000002050 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002050
.plt:0000000000002050 ; Attributes: thunk
.plt:0000000000002050
.plt:0000000000002050 ; int open(const char *file, int oflag, ...)
.plt:0000000000002050 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000002050                                         ; randread_new+EA↓p
.plt:0000000000002050                 jmp     cs:open_ptr
.plt:0000000000002050 _open           endp
.plt:0000000000002050
.plt:0000000000002056 ; ---------------------------------------------------------------------------
.plt:0000000000002056                 push    41h ; 'A'
.plt:000000000000205B                 jmp     sub_1C30
.plt:0000000000002060
.plt:0000000000002060 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002060
.plt:0000000000002060 ; Attributes: thunk
.plt:0000000000002060
.plt:0000000000002060 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002060 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_921A↓j
.plt:0000000000002060                 jmp     cs:fseeko_ptr
.plt:0000000000002060 _fseeko         endp
.plt:0000000000002060
.plt:0000000000002066 ; ---------------------------------------------------------------------------
.plt:0000000000002066                 push    42h ; 'B'
.plt:000000000000206B                 jmp     sub_1C30
.plt:0000000000002070
.plt:0000000000002070 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002070
.plt:0000000000002070 ; Attributes: thunk
.plt:0000000000002070
.plt:0000000000002070 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002070 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000002070                 jmp     cs:fopen_ptr
.plt:0000000000002070 _fopen          endp
.plt:0000000000002070
.plt:0000000000002076 ; ---------------------------------------------------------------------------
.plt:0000000000002076                 push    43h ; 'C'
.plt:000000000000207B                 jmp     sub_1C30
.plt:0000000000002080
.plt:0000000000002080 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002080
.plt:0000000000002080 ; Attributes: thunk
.plt:0000000000002080
.plt:0000000000002080 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002080 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002080                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002080 ___cxa_atexit   endp
.plt:0000000000002080
.plt:0000000000002086 ; ---------------------------------------------------------------------------
.plt:0000000000002086                 push    44h ; 'D'
.plt:000000000000208B                 jmp     sub_1C30
.plt:0000000000002090
.plt:0000000000002090 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002090
.plt:0000000000002090 ; Attributes: thunk
.plt:0000000000002090
.plt:0000000000002090 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
.plt:0000000000002090 _renameat       proc near               ; CODE XREF: renameat2+F0↓p
.plt:0000000000002090                 jmp     cs:renameat_ptr
.plt:0000000000002090 _renameat       endp
.plt:0000000000002090
.plt:0000000000002096 ; ---------------------------------------------------------------------------
.plt:0000000000002096                 push    45h ; 'E'
.plt:000000000000209B                 jmp     sub_1C30
.plt:00000000000020A0
.plt:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020A0
.plt:00000000000020A0 ; Attributes: thunk
.plt:00000000000020A0
.plt:00000000000020A0 ; int getpagesize(void)
.plt:00000000000020A0 _getpagesize    proc near               ; CODE XREF: dopass+48↓p
.plt:00000000000020A0                 jmp     cs:getpagesize_ptr
.plt:00000000000020A0 _getpagesize    endp
.plt:00000000000020A0
.plt:00000000000020A6 ; ---------------------------------------------------------------------------
.plt:00000000000020A6                 push    46h ; 'F'
.plt:00000000000020AB                 jmp     sub_1C30
.plt:00000000000020B0
.plt:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020B0
.plt:00000000000020B0 ; Attributes: thunk
.plt:00000000000020B0
.plt:00000000000020B0 ; __pid_t getppid(void)
.plt:00000000000020B0 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:00000000000020B0                                         ; randread_new+2F7↓p
.plt:00000000000020B0                 jmp     cs:getppid_ptr
.plt:00000000000020B0 _getppid        endp
.plt:00000000000020B0
.plt:00000000000020B6 ; ---------------------------------------------------------------------------
.plt:00000000000020B6                 push    47h ; 'G'
.plt:00000000000020BB                 jmp     sub_1C30
.plt:00000000000020C0
.plt:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020C0
.plt:00000000000020C0 ; Attributes: noreturn thunk
.plt:00000000000020C0
.plt:00000000000020C0 ; void __noreturn exit(int status)
.plt:00000000000020C0 _exit           proc near               ; CODE XREF: main+29A↓p
.plt:00000000000020C0                                         ; usage+58↓p
.plt:00000000000020C0                 jmp     cs:exit_ptr
.plt:00000000000020C0 _exit           endp
.plt:00000000000020C0
.plt:00000000000020C6 ; ---------------------------------------------------------------------------
.plt:00000000000020C6                 push    48h ; 'H'
.plt:00000000000020CB                 jmp     sub_1C30
.plt:00000000000020D0
.plt:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020D0
.plt:00000000000020D0 ; Attributes: thunk
.plt:00000000000020D0
.plt:00000000000020D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000020D0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000020D0                 jmp     cs:fwrite_ptr
.plt:00000000000020D0 _fwrite         endp
.plt:00000000000020D0
.plt:00000000000020D6 ; ---------------------------------------------------------------------------
.plt:00000000000020D6                 push    49h ; 'I'
.plt:00000000000020DB                 jmp     sub_1C30
.plt:00000000000020E0
.plt:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020E0
.plt:00000000000020E0 ; Attributes: thunk
.plt:00000000000020E0
.plt:00000000000020E0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000020E0                                         ; argmatch_valid+7A↓p ...
.plt:00000000000020E0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000020E0 ___fprintf_chk  endp
.plt:00000000000020E0
.plt:00000000000020E6 ; ---------------------------------------------------------------------------
.plt:00000000000020E6                 push    4Ah ; 'J'
.plt:00000000000020EB                 jmp     sub_1C30
.plt:00000000000020F0
.plt:00000000000020F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020F0
.plt:00000000000020F0 ; Attributes: thunk
.plt:00000000000020F0
.plt:00000000000020F0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000020F0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000020F0                 jmp     cs:mbsinit_ptr
.plt:00000000000020F0 _mbsinit        endp
.plt:00000000000020F0
.plt:00000000000020F6 ; ---------------------------------------------------------------------------
.plt:00000000000020F6                 push    4Bh ; 'K'
.plt:00000000000020FB                 jmp     sub_1C30
.plt:0000000000002100
.plt:0000000000002100 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002100
.plt:0000000000002100 ; Attributes: thunk
.plt:0000000000002100
.plt:0000000000002100 ; int iswprint(wint_t wc)
.plt:0000000000002100 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000002100                 jmp     cs:iswprint_ptr
.plt:0000000000002100 _iswprint       endp
.plt:0000000000002100
.plt:0000000000002106 ; ---------------------------------------------------------------------------
.plt:0000000000002106                 push    4Ch ; 'L'
.plt:000000000000210B                 jmp     sub_1C30
.plt:0000000000002110
.plt:0000000000002110 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002110
.plt:0000000000002110 ; Attributes: thunk
.plt:0000000000002110
.plt:0000000000002110 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002110 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000002110                                         ; xstrtoumax+55↓p
.plt:0000000000002110                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002110 ___ctype_b_loc  endp
.plt:0000000000002110
.plt:0000000000002116 ; ---------------------------------------------------------------------------
.plt:0000000000002116                 push    4Dh ; 'M'
.plt:000000000000211B                 jmp     sub_1C30
.plt:0000000000002120
.plt:0000000000002120 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002120
.plt:0000000000002120 ; Attributes: thunk
.plt:0000000000002120
.plt:0000000000002120 ___sprintf_chk  proc near               ; CODE XREF: dopass+269↓p
.plt:0000000000002120                                         ; human_readable+1C1↓p ...
.plt:0000000000002120                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000002120 ___sprintf_chk  endp
.plt:0000000000002120
.plt:0000000000002126 ; ---------------------------------------------------------------------------
.plt:0000000000002126                 push    4Eh ; 'N'
.plt:000000000000212B                 jmp     sub_1C30
.plt:000000000000212B ; } // starts at 1C30
.plt:000000000000212B _plt            ends
.plt:000000000000212B
.plt.got:0000000000002130 ; ===========================================================================
.plt.got:0000000000002130
.plt.got:0000000000002130 ; Segment type: Pure code
.plt.got:0000000000002130 ; Segment permissions: Read/Execute
.plt.got:0000000000002130 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002130                 assume cs:_plt_got
.plt.got:0000000000002130                 ;org 2130h
.plt.got:0000000000002130                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002130
.plt.got:0000000000002130 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002130
.plt.got:0000000000002130 ; Attributes: thunk
.plt.got:0000000000002130
.plt.got:0000000000002130 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002130 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002130 ; __unwind {
.plt.got:0000000000002130                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002130 __cxa_finalize  endp
.plt.got:0000000000002130
.plt.got:0000000000002130 ; ---------------------------------------------------------------------------
.plt.got:0000000000002136                 align 8
.plt.got:0000000000002136 ; } // starts at 2130
.plt.got:0000000000002136 _plt_got        ends
.plt.got:0000000000002136
LOAD:0000000000002138 ; ===========================================================================
LOAD:0000000000002138
LOAD:0000000000002138 ; Segment type: Pure code
LOAD:0000000000002138 ; Segment permissions: Read/Execute
LOAD:0000000000002138 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002138                 assume cs:LOAD
LOAD:0000000000002138                 ;org 2138h
LOAD:0000000000002138                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002138                 align 20h
LOAD:0000000000002138 LOAD            ends
LOAD:0000000000002138
.text:0000000000002140 ; ===========================================================================
.text:0000000000002140
.text:0000000000002140 ; Segment type: Pure code
.text:0000000000002140 ; Segment permissions: Read/Execute
.text:0000000000002140 _text           segment para public 'CODE' use64
.text:0000000000002140                 assume cs:_text
.text:0000000000002140                 ;org 2140h
.text:0000000000002140                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002140
.text:0000000000002140 ; =============== S U B R O U T I N E =======================================
.text:0000000000002140
.text:0000000000002140
.text:0000000000002140 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002140                 public main
.text:0000000000002140 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002140
.text:0000000000002140 var_B8          = qword ptr -0B8h
.text:0000000000002140 var_B0          = qword ptr -0B0h
.text:0000000000002140 var_A5          = byte ptr -0A5h
.text:0000000000002140 fd              = dword ptr -0A4h
.text:0000000000002140 var_A0          = qword ptr -0A0h
.text:0000000000002140 var_98          = dword ptr -98h
.text:0000000000002140 var_91          = byte ptr -91h
.text:0000000000002140 ptr             = qword ptr -90h
.text:0000000000002140 var_88          = qword ptr -88h
.text:0000000000002140 var_80          = qword ptr -80h
.text:0000000000002140 var_78          = qword ptr -78h
.text:0000000000002140 var_70          = qword ptr -70h
.text:0000000000002140 var_68          = xmmword ptr -68h
.text:0000000000002140 var_58          = xmmword ptr -58h
.text:0000000000002140 var_40          = qword ptr -40h
.text:0000000000002140
.text:0000000000002140 ; __unwind {
.text:0000000000002140                 push    r15
.text:0000000000002142                 push    r14
.text:0000000000002144                 push    r13
.text:0000000000002146                 push    r12
.text:0000000000002148                 lea     r12, long_opts
.text:000000000000214F                 push    rbp
.text:0000000000002150                 push    rbx
.text:0000000000002151                 mov     ebp, edi
.text:0000000000002153                 pxor    xmm0, xmm0
.text:0000000000002157                 mov     rbx, rsi
.text:000000000000215A                 sub     rsp, 88h
.text:0000000000002161                 mov     rdi, [rsi]
.text:0000000000002164                 xor     r13d, r13d
.text:0000000000002167                 mov     rax, fs:28h
.text:0000000000002170                 mov     [rsp+0B8h+var_40], rax
.text:0000000000002175                 xor     eax, eax
.text:0000000000002177                 movaps  [rsp+0B8h+var_68], xmm0
.text:000000000000217C                 movaps  [rsp+0B8h+var_58], xmm0
.text:0000000000002181                 call    set_program_name
.text:0000000000002186                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000218D                 mov     edi, 6          ; category
.text:0000000000002192                 call    _setlocale
.text:0000000000002197                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000219E                 lea     rdi, domainname ; "coreutils"
.text:00000000000021A5                 call    _bindtextdomain
.text:00000000000021AA                 lea     rdi, domainname ; "coreutils"
.text:00000000000021B1                 call    _textdomain
.text:00000000000021B6                 lea     rdi, close_stdout
.text:00000000000021BD                 call    atexit
.text:00000000000021C2                 mov     qword ptr [rsp+0B8h+var_68+8], 3
.text:00000000000021CB                 mov     qword ptr [rsp+0B8h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000021D4                 nop     dword ptr [rax+00h]
.text:00000000000021D8
.text:00000000000021D8 loc_21D8:                               ; CODE XREF: main+E9↓j
.text:00000000000021D8                                         ; main+150↓j ...
.text:00000000000021D8                 lea     rdx, shortopts  ; "fn:s:uvxz"
.text:00000000000021DF                 xor     r8d, r8d        ; longind
.text:00000000000021E2                 mov     rcx, r12        ; longopts
.text:00000000000021E5                 mov     rsi, rbx        ; argv
.text:00000000000021E8                 mov     edi, ebp        ; argc
.text:00000000000021EA                 call    _getopt_long
.text:00000000000021EF                 cmp     eax, 0FFFFFFFFh
.text:00000000000021F2                 jz      loc_23EC
.text:00000000000021F8                 cmp     eax, 73h ; 's'
.text:00000000000021FB                 jz      loc_22F0
.text:0000000000002201                 jle     short loc_2230
.text:0000000000002203                 cmp     eax, 78h ; 'x'
.text:0000000000002206                 jz      loc_22E0
.text:000000000000220C                 jg      loc_2298
.text:0000000000002212                 cmp     eax, 75h ; 'u'
.text:0000000000002215                 jz      loc_2340
.text:000000000000221B                 cmp     eax, 76h ; 'v'
.text:000000000000221E                 jnz     loc_29BD
.text:0000000000002224                 mov     byte ptr [rsp+0B8h+var_58+0Ch], 1
.text:0000000000002229                 jmp     short loc_21D8
.text:0000000000002229 ; ---------------------------------------------------------------------------
.text:000000000000222B                 align 10h
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: main+C1↑j
.text:0000000000002230                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002235                 jz      loc_2995
.text:000000000000223B                 jle     loc_23A0
.text:0000000000002241                 cmp     eax, 66h ; 'f'
.text:0000000000002244                 jz      loc_2390
.text:000000000000224A                 cmp     eax, 6Eh ; 'n'
.text:000000000000224D                 jnz     loc_29BD
.text:0000000000002253                 lea     rsi, msgid      ; "invalid number of passes"
.text:000000000000225A                 mov     edx, 5          ; category
.text:000000000000225F                 xor     edi, edi        ; domainname
.text:0000000000002261                 call    _dcgettext
.text:0000000000002266                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000226D                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002274                 mov     r8, rax
.text:0000000000002277                 xor     r9d, r9d
.text:000000000000227A                 mov     rdx, 3FFFFFFFFFFFFFFFh
.text:0000000000002284                 xor     esi, esi
.text:0000000000002286                 call    xdectoumax
.text:000000000000228B                 mov     qword ptr [rsp+0B8h+var_68+8], rax
.text:0000000000002290                 jmp     loc_21D8
.text:0000000000002290 ; ---------------------------------------------------------------------------
.text:0000000000002295                 align 8
.text:0000000000002298
.text:0000000000002298 loc_2298:                               ; CODE XREF: main+CC↑j
.text:0000000000002298                 cmp     eax, 7Ah ; 'z'
.text:000000000000229B                 jz      short loc_22D0
.text:000000000000229D                 add     eax, 0FFFFFF80h
.text:00000000000022A0                 jnz     loc_29BD
.text:00000000000022A6                 test    r13, r13
.text:00000000000022A9                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:00000000000022B0                 jz      short loc_22C5
.text:00000000000022B2                 mov     rsi, r14        ; s2
.text:00000000000022B5                 mov     rdi, r13        ; s1
.text:00000000000022B8                 call    _strcmp
.text:00000000000022BD                 test    eax, eax
.text:00000000000022BF                 jnz     loc_2A1A
.text:00000000000022C5
.text:00000000000022C5 loc_22C5:                               ; CODE XREF: main+170↑j
.text:00000000000022C5                 mov     r13, r14
.text:00000000000022C8                 jmp     loc_21D8
.text:00000000000022C8 ; ---------------------------------------------------------------------------
.text:00000000000022CD                 align 10h
.text:00000000000022D0
.text:00000000000022D0 loc_22D0:                               ; CODE XREF: main+15B↑j
.text:00000000000022D0                 mov     byte ptr [rsp+0B8h+var_58+0Eh], 1
.text:00000000000022D5                 jmp     loc_21D8
.text:00000000000022D5 ; ---------------------------------------------------------------------------
.text:00000000000022DA                 align 20h
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: main+C6↑j
.text:00000000000022E0                 mov     byte ptr [rsp+0B8h+var_58+0Dh], 1
.text:00000000000022E5                 jmp     loc_21D8
.text:00000000000022E5 ; ---------------------------------------------------------------------------
.text:00000000000022EA                 align 10h
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: main+BB↑j
.text:00000000000022F0                 lea     rsi, aInvalidFileSiz ; "invalid file size"
.text:00000000000022F7                 mov     edx, 5          ; category
.text:00000000000022FC                 xor     edi, edi        ; domainname
.text:00000000000022FE                 call    _dcgettext
.text:0000000000002303                 sub     rsp, 8
.text:0000000000002307                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000230E                 lea     r8, aCbbkkmgtpezy0 ; "cbBkKMGTPEZY0"
.text:0000000000002315                 push    0
.text:0000000000002317                 xor     edx, edx
.text:0000000000002319                 mov     r9, rax
.text:000000000000231C                 mov     rcx, 7FFFFFFFFFFFFFFFh
.text:0000000000002326                 xor     esi, esi
.text:0000000000002328                 call    xnumtoumax
.text:000000000000232D                 mov     qword ptr [rsp+0C8h+var_58], rax
.text:0000000000002332                 pop     rax
.text:0000000000002333                 pop     rdx
.text:0000000000002334                 jmp     loc_21D8
.text:0000000000002334 ; ---------------------------------------------------------------------------
.text:0000000000002339                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: main+D5↑j
.text:0000000000002340                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002347                 test    rsi, rsi
.text:000000000000234A                 jz      loc_23DF
.text:0000000000002350                 mov     r9, cs:argmatch_die
.text:0000000000002357                 lea     rdx, remove_args
.text:000000000000235E                 lea     rcx, remove_methods
.text:0000000000002365                 lea     rdi, aRemove    ; "--remove"
.text:000000000000236C                 mov     r8d, 4
.text:0000000000002372                 call    __xargmatch_internal
.text:0000000000002377                 lea     rdx, remove_methods
.text:000000000000237E                 mov     eax, [rdx+rax*4]
.text:0000000000002381                 mov     dword ptr [rsp+0B8h+var_58+8], eax
.text:0000000000002385                 jmp     loc_21D8
.text:0000000000002385 ; ---------------------------------------------------------------------------
.text:000000000000238A                 align 10h
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: main+104↑j
.text:0000000000002390                 mov     byte ptr [rsp+0B8h+var_68], 1
.text:0000000000002395                 jmp     loc_21D8
.text:0000000000002395 ; ---------------------------------------------------------------------------
.text:000000000000239A                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: main+FB↑j
.text:00000000000023A0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000023A5                 jnz     loc_29BD
.text:00000000000023AB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000023B2                 mov     rcx, cs:Version
.text:00000000000023B9                 lea     r8, aColinPlumb ; "Colin Plumb"
.text:00000000000023C0                 lea     rdx, unk_96F4
.text:00000000000023C7                 lea     rsi, aShred     ; "shred"
.text:00000000000023CE                 xor     r9d, r9d
.text:00000000000023D1                 xor     eax, eax
.text:00000000000023D3                 call    version_etc
.text:00000000000023D8                 xor     edi, edi        ; status
.text:00000000000023DA                 call    _exit
.text:00000000000023DF ; ---------------------------------------------------------------------------
.text:00000000000023DF
.text:00000000000023DF loc_23DF:                               ; CODE XREF: main+20A↑j
.text:00000000000023DF                 mov     dword ptr [rsp+0B8h+var_58+8], 3
.text:00000000000023E7                 jmp     loc_21D8
.text:00000000000023EC ; ---------------------------------------------------------------------------
.text:00000000000023EC
.text:00000000000023EC loc_23EC:                               ; CODE XREF: main+B2↑j
.text:00000000000023EC                 movsxd  r12, cs:optind@@GLIBC_2_2_5
.text:00000000000023F3                 mov     r14d, eax
.text:00000000000023F6                 mov     rax, r12
.text:00000000000023F9                 shl     r12, 3
.text:00000000000023FD                 sub     ebp, eax
.text:00000000000023FF                 jz      loc_299C
.text:0000000000002405                 or      rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002409                 mov     rdi, r13
.text:000000000000240C                 call    randint_all_new
.text:0000000000002411                 test    rax, rax
.text:0000000000002414                 mov     cs:randint_source, rax
.text:000000000000241B                 jz      loc_29EB
.text:0000000000002421                 lea     rdi, clear_random_data
.text:0000000000002428                 call    atexit
.text:000000000000242D                 test    ebp, ebp
.text:000000000000242F                 jle     loc_25B4
.text:0000000000002435                 lea     rax, [rbx+r12+8]
.text:000000000000243A                 lea     edx, [rbp-1]
.text:000000000000243D                 lea     r15, [rbx+r12]
.text:0000000000002441                 mov     [rsp+0B8h+var_A5], 1
.text:0000000000002446                 mov     [rsp+0B8h+var_98], r14d
.text:000000000000244B                 lea     rax, [rax+rdx*8]
.text:000000000000244F                 mov     [rsp+0B8h+var_B8], rax
.text:0000000000002453                 lea     rax, [rsp+0B8h+var_68]
.text:0000000000002458                 mov     [rsp+0B8h+var_B0], rax
.text:000000000000245D                 jmp     short loc_24B5
.text:000000000000245F ; ---------------------------------------------------------------------------
.text:000000000000245F
.text:000000000000245F loc_245F:                               ; CODE XREF: main+3AA↓j
.text:000000000000245F                 mov     esi, 3
.text:0000000000002464                 mov     edi, 1          ; fd
.text:0000000000002469                 mov     rbp, cs:randint_source
.text:0000000000002470                 call    rpl_fcntl
.text:0000000000002475                 test    eax, eax
.text:0000000000002477                 js      loc_261E
.text:000000000000247D                 test    ah, 4
.text:0000000000002480                 jnz     loc_254D
.text:0000000000002486                 mov     rcx, [rsp+0B8h+var_B0]
.text:000000000000248B                 mov     rdx, rbp
.text:000000000000248E                 mov     rsi, rbx
.text:0000000000002491                 mov     edi, 1          ; fd
.text:0000000000002496                 call    do_wipefd
.text:000000000000249B
.text:000000000000249B loc_249B:                               ; CODE XREF: main+433↓j
.text:000000000000249B                                         ; main+50C↓j
.text:000000000000249B                 and     [rsp+0B8h+var_A5], al
.text:000000000000249F
.text:000000000000249F loc_249F:                               ; CODE XREF: main+408↓j
.text:000000000000249F                 mov     rdi, rbx        ; ptr
.text:00000000000024A2                 add     r15, 8
.text:00000000000024A6                 call    _free
.text:00000000000024AB                 cmp     r15, [rsp+0B8h+var_B8]
.text:00000000000024AF                 jz      loc_25B9
.text:00000000000024B5
.text:00000000000024B5 loc_24B5:                               ; CODE XREF: main+31D↑j
.text:00000000000024B5                 mov     rdx, [r15]
.text:00000000000024B8                 mov     esi, 3
.text:00000000000024BD                 xor     edi, edi
.text:00000000000024BF                 call    quotearg_n_style_colon
.text:00000000000024C4                 mov     rdi, rax        ; src
.text:00000000000024C7                 call    xstrdup
.text:00000000000024CC                 mov     rbp, [r15]
.text:00000000000024CF                 lea     rdi, aLt+2      ; "-"
.text:00000000000024D6                 mov     ecx, 2
.text:00000000000024DB                 mov     rbx, rax
.text:00000000000024DE                 mov     rsi, rbp
.text:00000000000024E1                 repe cmpsb
.text:00000000000024E3                 setnbe  al
.text:00000000000024E6                 sbb     al, 0
.text:00000000000024E8                 test    al, al
.text:00000000000024EA                 jz      loc_245F
.text:00000000000024F0                 xor     eax, eax
.text:00000000000024F2                 mov     esi, 101h
.text:00000000000024F7                 mov     rdi, rbp
.text:00000000000024FA                 mov     r12, cs:randint_source
.text:0000000000002501                 call    open_safer
.text:0000000000002506                 test    eax, eax
.text:0000000000002508                 mov     r14d, eax
.text:000000000000250B                 js      short loc_2578
.text:000000000000250D
.text:000000000000250D loc_250D:                               ; CODE XREF: main+543↓j
.text:000000000000250D                 mov     rcx, [rsp+0B8h+var_B0]
.text:0000000000002512                 mov     rdx, r12
.text:0000000000002515                 mov     rsi, rbx
.text:0000000000002518                 mov     edi, r14d       ; fd
.text:000000000000251B                 call    do_wipefd
.text:0000000000002520                 mov     edi, r14d       ; fd
.text:0000000000002523                 mov     r13d, eax
.text:0000000000002526                 call    _close
.text:000000000000252B                 test    eax, eax
.text:000000000000252D                 jnz     loc_25EA
.text:0000000000002533                 test    r13b, r13b
.text:0000000000002536                 jz      short loc_2543
.text:0000000000002538                 cmp     dword ptr [rsp+0B8h+var_58+8], 0
.text:000000000000253D                 jnz     loc_268E
.text:0000000000002543
.text:0000000000002543 loc_2543:                               ; CODE XREF: main+3F6↑j
.text:0000000000002543                                         ; main+472↓j ...
.text:0000000000002543                 and     [rsp+0B8h+var_A5], r13b
.text:0000000000002548                 jmp     loc_249F
.text:000000000000254D ; ---------------------------------------------------------------------------
.text:000000000000254D
.text:000000000000254D loc_254D:                               ; CODE XREF: main+340↑j
.text:000000000000254D                 lea     rsi, aSCannotShredAp ; "%s: cannot shred append-only file descr"...
.text:0000000000002554                 mov     edx, 5          ; category
.text:0000000000002559                 xor     edi, edi        ; domainname
.text:000000000000255B                 call    _dcgettext
.text:0000000000002560                 mov     rcx, rbx
.text:0000000000002563                 mov     rdx, rax        ; format
.text:0000000000002566                 xor     esi, esi        ; errnum
.text:0000000000002568                 xor     eax, eax
.text:000000000000256A                 xor     edi, edi        ; status
.text:000000000000256C                 call    _error
.text:0000000000002571                 xor     eax, eax
.text:0000000000002573                 jmp     loc_249B
.text:0000000000002578 ; ---------------------------------------------------------------------------
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: main+3CB↑j
.text:0000000000002578                 call    ___errno_location
.text:000000000000257D                 cmp     dword ptr [rax], 0Dh
.text:0000000000002580                 mov     r13, rax
.text:0000000000002583                 jz      loc_2651
.text:0000000000002589
.text:0000000000002589 loc_2589:                               ; CODE XREF: main+516↓j
.text:0000000000002589                                         ; main+52B↓j ...
.text:0000000000002589                 lea     rsi, aSFailedToOpenF ; "%s: failed to open for writing"
.text:0000000000002590                 mov     edx, 5          ; category
.text:0000000000002595                 xor     edi, edi        ; domainname
.text:0000000000002597                 call    _dcgettext
.text:000000000000259C                 mov     esi, [r13+0]    ; errnum
.text:00000000000025A0                 mov     rdx, rax        ; format
.text:00000000000025A3                 mov     rcx, rbx
.text:00000000000025A6                 xor     edi, edi        ; status
.text:00000000000025A8                 xor     eax, eax
.text:00000000000025AA                 xor     r13d, r13d
.text:00000000000025AD                 call    _error
.text:00000000000025B2                 jmp     short loc_2543
.text:00000000000025B4 ; ---------------------------------------------------------------------------
.text:00000000000025B4
.text:00000000000025B4 loc_25B4:                               ; CODE XREF: main+2EF↑j
.text:00000000000025B4                 mov     [rsp+0B8h+var_A5], 1
.text:00000000000025B9
.text:00000000000025B9 loc_25B9:                               ; CODE XREF: main+36F↑j
.text:00000000000025B9                 movzx   eax, [rsp+0B8h+var_A5]
.text:00000000000025BE                 xor     eax, 1
.text:00000000000025C1                 mov     rcx, [rsp+0B8h+var_40]
.text:00000000000025C6                 xor     rcx, fs:28h
.text:00000000000025CF                 movzx   eax, al
.text:00000000000025D2                 jnz     loc_29E6
.text:00000000000025D8                 add     rsp, 88h
.text:00000000000025DF                 pop     rbx
.text:00000000000025E0                 pop     rbp
.text:00000000000025E1                 pop     r12
.text:00000000000025E3                 pop     r13
.text:00000000000025E5                 pop     r14
.text:00000000000025E7                 pop     r15
.text:00000000000025E9                 retn
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EA
.text:00000000000025EA loc_25EA:                               ; CODE XREF: main+3ED↑j
.text:00000000000025EA                 lea     rsi, aSFailedToClose ; "%s: failed to close"
.text:00000000000025F1                 mov     edx, 5          ; category
.text:00000000000025F6                 xor     edi, edi        ; domainname
.text:00000000000025F8                 xor     r13d, r13d
.text:00000000000025FB                 call    _dcgettext
.text:0000000000002600                 mov     rbp, rax
.text:0000000000002603                 call    ___errno_location
.text:0000000000002608                 mov     esi, [rax]      ; errnum
.text:000000000000260A                 mov     rcx, rbx
.text:000000000000260D                 mov     rdx, rbp        ; format
.text:0000000000002610                 xor     edi, edi        ; status
.text:0000000000002612                 xor     eax, eax
.text:0000000000002614                 call    _error
.text:0000000000002619                 jmp     loc_2543
.text:000000000000261E ; ---------------------------------------------------------------------------
.text:000000000000261E
.text:000000000000261E loc_261E:                               ; CODE XREF: main+337↑j
.text:000000000000261E                 lea     rsi, aSFcntlFailed ; "%s: fcntl failed"
.text:0000000000002625                 mov     edx, 5          ; category
.text:000000000000262A                 xor     edi, edi        ; domainname
.text:000000000000262C                 call    _dcgettext
.text:0000000000002631                 mov     rbp, rax
.text:0000000000002634                 call    ___errno_location
.text:0000000000002639                 mov     esi, [rax]      ; errnum
.text:000000000000263B                 mov     rcx, rbx
.text:000000000000263E                 xor     eax, eax
.text:0000000000002640                 mov     rdx, rbp        ; format
.text:0000000000002643                 xor     edi, edi        ; status
.text:0000000000002645                 call    _error
.text:000000000000264A                 xor     eax, eax
.text:000000000000264C                 jmp     loc_249B
.text:0000000000002651 ; ---------------------------------------------------------------------------
.text:0000000000002651
.text:0000000000002651 loc_2651:                               ; CODE XREF: main+443↑j
.text:0000000000002651                 cmp     byte ptr [rsp+0B8h+var_68], 0
.text:0000000000002656                 jz      loc_2589
.text:000000000000265C                 mov     esi, 80h        ; mode
.text:0000000000002661                 mov     rdi, rbp        ; file
.text:0000000000002664                 call    _chmod
.text:0000000000002669                 test    eax, eax
.text:000000000000266B                 jnz     loc_2589
.text:0000000000002671                 mov     esi, 101h
.text:0000000000002676                 mov     rdi, rbp
.text:0000000000002679                 call    open_safer
.text:000000000000267E                 test    eax, eax
.text:0000000000002680                 mov     r14d, eax
.text:0000000000002683                 jns     loc_250D
.text:0000000000002689                 jmp     loc_2589
.text:000000000000268E ; ---------------------------------------------------------------------------
.text:000000000000268E
.text:000000000000268E loc_268E:                               ; CODE XREF: main+3FD↑j
.text:000000000000268E                 mov     rdi, rbp        ; src
.text:0000000000002691                 call    xstrdup
.text:0000000000002696                 mov     r14, rax
.text:0000000000002699                 mov     rdi, rax
.text:000000000000269C                 mov     [rsp+0B8h+ptr], rax
.text:00000000000026A1                 call    last_component
.text:00000000000026A6                 mov     rdi, r14
.text:00000000000026A9                 mov     r12, rax
.text:00000000000026AC                 call    dir_name
.text:00000000000026B1                 xor     edi, edi
.text:00000000000026B3                 mov     rdx, rax
.text:00000000000026B6                 mov     esi, 3
.text:00000000000026BB                 mov     [rsp+0B8h+var_78], rax
.text:00000000000026C0                 call    quotearg_n_style_colon
.text:00000000000026C5                 mov     rdi, rax        ; src
.text:00000000000026C8                 call    xstrdup
.text:00000000000026CD                 cmp     dword ptr [rsp+0B8h+var_58+8], 3
.text:00000000000026D2                 mov     [rsp+0B8h+var_A0], rax
.text:00000000000026D7                 mov     eax, [rsp+0B8h+var_98]
.text:00000000000026DB                 mov     [rsp+0B8h+fd], eax
.text:00000000000026DF                 jz      loc_28C4
.text:00000000000026E5
.text:00000000000026E5 loc_26E5:                               ; CODE XREF: main+799↓j
.text:00000000000026E5                 cmp     byte ptr [rsp+0B8h+var_58+0Ch], 0
.text:00000000000026EA                 jnz     loc_289B
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: main+77F↓j
.text:00000000000026F0                 cmp     dword ptr [rsp+0B8h+var_58+8], 1
.text:00000000000026F5                 jz      loc_27CA
.text:00000000000026FB                 mov     rdi, r12
.text:00000000000026FE                 mov     r14, r12
.text:0000000000002701                 lea     r12, [r12-1]
.text:0000000000002706                 call    base_len
.text:000000000000270B                 mov     [rsp+0B8h+var_70], r15
.text:0000000000002710                 mov     r15, [rsp+0B8h+ptr]
.text:0000000000002715                 sub     rax, 1
.text:0000000000002719                 mov     [rsp+0B8h+var_80], rbx
.text:000000000000271E                 mov     byte ptr [rsp+0B8h+var_88], r13b
.text:0000000000002723                 mov     rbx, rax
.text:0000000000002726                 mov     [rsp+0B8h+var_91], r13b
.text:000000000000272B
.text:000000000000272B loc_272B:                               ; CODE XREF: main+827↓j
.text:000000000000272B                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000272F                 lea     rdx, [rbx+1]    ; n
.text:0000000000002733                 jz      loc_27BA
.text:0000000000002739                 mov     esi, 30h ; '0'  ; c
.text:000000000000273E                 mov     rdi, r14        ; s
.text:0000000000002741                 call    _memset
.text:0000000000002746                 mov     byte ptr [r14+rbx+1], 0
.text:000000000000274C
.text:000000000000274C loc_274C:                               ; CODE XREF: main+678↓j
.text:000000000000274C                 mov     edx, 0FFFFFF9Ch
.text:0000000000002751                 mov     r8d, 1
.text:0000000000002757                 mov     rcx, r15
.text:000000000000275A                 mov     rsi, rbp
.text:000000000000275D                 mov     edi, edx
.text:000000000000275F                 call    renameat2
.text:0000000000002764                 test    eax, eax
.text:0000000000002766                 jz      loc_28DE
.text:000000000000276C                 call    ___errno_location
.text:0000000000002771                 cmp     dword ptr [rax], 11h
.text:0000000000002774                 jnz     loc_2963
.text:000000000000277A                 lea     r13, [r14+rbx]
.text:000000000000277E                 jmp     short loc_2792
.text:0000000000002780 ; ---------------------------------------------------------------------------
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: main+672↓j
.text:0000000000002780                 mov     byte ptr [r13+0], 30h ; '0'
.text:0000000000002785                 sub     r13, 1
.text:0000000000002789                 cmp     r12, r13
.text:000000000000278C                 jz      loc_2963
.text:0000000000002792
.text:0000000000002792 loc_2792:                               ; CODE XREF: main+63E↑j
.text:0000000000002792                 movsx   esi, byte ptr [r13+0] ; c
.text:0000000000002797                 lea     rdi, nameset    ; "0123456789abcdefghijklmnopqrstuvwxyzABC"...
.text:000000000000279E                 call    _strchr
.text:00000000000027A3                 test    rax, rax
.text:00000000000027A6                 jz      loc_29C7
.text:00000000000027AC                 movzx   eax, byte ptr [rax+1]
.text:00000000000027B0                 test    al, al
.text:00000000000027B2                 jz      short loc_2780
.text:00000000000027B4                 mov     [r13+0], al
.text:00000000000027B8                 jmp     short loc_274C
.text:00000000000027BA ; ---------------------------------------------------------------------------
.text:00000000000027BA
.text:00000000000027BA loc_27BA:                               ; CODE XREF: main+5F3↑j
.text:00000000000027BA                 movzx   r13d, [rsp+0B8h+var_91]
.text:00000000000027C0                 mov     rbx, [rsp+0B8h+var_80]
.text:00000000000027C5                 mov     r15, [rsp+0B8h+var_70]
.text:00000000000027CA
.text:00000000000027CA loc_27CA:                               ; CODE XREF: main+5B5↑j
.text:00000000000027CA                 mov     rdi, rbp        ; name
.text:00000000000027CD                 call    _unlink
.text:00000000000027D2                 test    eax, eax
.text:00000000000027D4                 jnz     loc_2867
.text:00000000000027DA                 cmp     byte ptr [rsp+0B8h+var_58+0Ch], 0
.text:00000000000027DF                 jnz     loc_296C
.text:00000000000027E5
.text:00000000000027E5 loc_27E5:                               ; CODE XREF: main+756↓j
.text:00000000000027E5                                         ; main+850↓j
.text:00000000000027E5                 mov     r14d, [rsp+0B8h+fd]
.text:00000000000027EA                 test    r14d, r14d
.text:00000000000027ED                 js      short loc_2844
.text:00000000000027EF                 mov     rsi, [rsp+0B8h+var_A0]
.text:00000000000027F4                 mov     edi, r14d       ; fd
.text:00000000000027F7                 call    dosync
.text:00000000000027FC                 mov     edi, r14d       ; fd
.text:00000000000027FF                 test    eax, eax
.text:0000000000002801                 mov     eax, 0
.text:0000000000002806                 cmovnz  r13d, eax
.text:000000000000280A                 call    _close
.text:000000000000280F                 test    eax, eax
.text:0000000000002811                 jz      short loc_2844
.text:0000000000002813                 lea     rsi, aSFailedToClose ; "%s: failed to close"
.text:000000000000281A                 mov     edx, 5          ; category
.text:000000000000281F                 xor     edi, edi        ; domainname
.text:0000000000002821                 xor     r13d, r13d
.text:0000000000002824                 call    _dcgettext
.text:0000000000002829                 mov     rbp, rax
.text:000000000000282C                 call    ___errno_location
.text:0000000000002831                 mov     rcx, [rsp+0B8h+var_A0]
.text:0000000000002836                 mov     esi, [rax]      ; errnum
.text:0000000000002838                 mov     rdx, rbp        ; format
.text:000000000000283B                 xor     edi, edi        ; status
.text:000000000000283D                 xor     eax, eax
.text:000000000000283F                 call    _error
.text:0000000000002844
.text:0000000000002844 loc_2844:                               ; CODE XREF: main+6AD↑j
.text:0000000000002844                                         ; main+6D1↑j
.text:0000000000002844                 mov     rdi, [rsp+0B8h+ptr] ; ptr
.text:0000000000002849                 call    _free
.text:000000000000284E                 mov     rdi, [rsp+0B8h+var_78] ; ptr
.text:0000000000002853                 call    _free
.text:0000000000002858                 mov     rdi, [rsp+0B8h+var_A0] ; ptr
.text:000000000000285D                 call    _free
.text:0000000000002862                 jmp     loc_2543
.text:0000000000002867 ; ---------------------------------------------------------------------------
.text:0000000000002867
.text:0000000000002867 loc_2867:                               ; CODE XREF: main+694↑j
.text:0000000000002867                 lea     rsi, aSFailedToRemov ; "%s: failed to remove"
.text:000000000000286E                 mov     edx, 5          ; category
.text:0000000000002873                 xor     edi, edi        ; domainname
.text:0000000000002875                 xor     r13d, r13d
.text:0000000000002878                 call    _dcgettext
.text:000000000000287D                 mov     rbp, rax
.text:0000000000002880                 call    ___errno_location
.text:0000000000002885                 mov     esi, [rax]      ; errnum
.text:0000000000002887                 mov     rcx, rbx
.text:000000000000288A                 mov     rdx, rbp        ; format
.text:000000000000288D                 xor     edi, edi        ; status
.text:000000000000288F                 xor     eax, eax
.text:0000000000002891                 call    _error
.text:0000000000002896                 jmp     loc_27E5
.text:000000000000289B ; ---------------------------------------------------------------------------
.text:000000000000289B
.text:000000000000289B loc_289B:                               ; CODE XREF: main+5AA↑j
.text:000000000000289B                 lea     rsi, aSRemoving ; "%s: removing"
.text:00000000000028A2                 xor     edi, edi        ; domainname
.text:00000000000028A4                 mov     edx, 5          ; category
.text:00000000000028A9                 call    _dcgettext
.text:00000000000028AE                 mov     rcx, rbx
.text:00000000000028B1                 mov     rdx, rax        ; format
.text:00000000000028B4                 xor     esi, esi        ; errnum
.text:00000000000028B6                 xor     edi, edi        ; status
.text:00000000000028B8                 xor     eax, eax
.text:00000000000028BA                 call    _error
.text:00000000000028BF                 jmp     loc_26F0
.text:00000000000028C4 ; ---------------------------------------------------------------------------
.text:00000000000028C4
.text:00000000000028C4 loc_28C4:                               ; CODE XREF: main+59F↑j
.text:00000000000028C4                 mov     rdi, [rsp+0B8h+var_78]
.text:00000000000028C9                 mov     esi, 10900h
.text:00000000000028CE                 xor     eax, eax
.text:00000000000028D0                 call    open_safer
.text:00000000000028D5                 mov     [rsp+0B8h+fd], eax
.text:00000000000028D9                 jmp     loc_26E5
.text:00000000000028DE ; ---------------------------------------------------------------------------
.text:00000000000028DE
.text:00000000000028DE loc_28DE:                               ; CODE XREF: main+626↑j
.text:00000000000028DE                 cmp     [rsp+0B8h+fd], 0
.text:00000000000028E3                 js      short loc_2906
.text:00000000000028E5                 mov     rsi, [rsp+0B8h+var_A0]
.text:00000000000028EA                 mov     edi, [rsp+0B8h+fd] ; fd
.text:00000000000028EE                 call    dosync
.text:00000000000028F3                 movzx   ecx, [rsp+0B8h+var_91]
.text:00000000000028F8                 test    eax, eax
.text:00000000000028FA                 mov     eax, 0
.text:00000000000028FF                 cmovnz  ecx, eax
.text:0000000000002902                 mov     [rsp+0B8h+var_91], cl
.text:0000000000002906
.text:0000000000002906 loc_2906:                               ; CODE XREF: main+7A3↑j
.text:0000000000002906                 cmp     byte ptr [rsp+0B8h+var_58+0Ch], 0
.text:000000000000290B                 jz      short loc_294E
.text:000000000000290D                 cmp     byte ptr [rsp+0B8h+var_88], 0
.text:0000000000002912                 mov     rcx, [rsp+0B8h+var_80]
.text:0000000000002917                 lea     rsi, aSRenamedToS ; "%s: renamed to %s"
.text:000000000000291E                 mov     edx, 5          ; category
.text:0000000000002923                 cmovz   rcx, rbp
.text:0000000000002927                 xor     edi, edi        ; domainname
.text:0000000000002929                 mov     [rsp+0B8h+var_88], rcx
.text:000000000000292E                 call    _dcgettext
.text:0000000000002933                 mov     rcx, [rsp+0B8h+var_88]
.text:0000000000002938                 mov     rdx, rax        ; format
.text:000000000000293B                 mov     r8, r15
.text:000000000000293E                 xor     esi, esi        ; errnum
.text:0000000000002940                 xor     edi, edi        ; status
.text:0000000000002942                 xor     eax, eax
.text:0000000000002944                 call    _error
.text:0000000000002949                 mov     byte ptr [rsp+0B8h+var_88], 0
.text:000000000000294E
.text:000000000000294E loc_294E:                               ; CODE XREF: main+7CB↑j
.text:000000000000294E                 mov     rdi, r14
.text:0000000000002951                 lea     rdx, [rbx+2]    ; n
.text:0000000000002955                 mov     rsi, r14        ; src
.text:0000000000002958                 sub     rdi, r15
.text:000000000000295B                 add     rdi, rbp        ; dest
.text:000000000000295E                 call    _memcpy
.text:0000000000002963
.text:0000000000002963 loc_2963:                               ; CODE XREF: main+634↑j
.text:0000000000002963                                         ; main+64C↑j
.text:0000000000002963                 sub     rbx, 1
.text:0000000000002967                 jmp     loc_272B
.text:000000000000296C ; ---------------------------------------------------------------------------
.text:000000000000296C
.text:000000000000296C loc_296C:                               ; CODE XREF: main+69F↑j
.text:000000000000296C                 lea     rsi, aSRemoved  ; "%s: removed"
.text:0000000000002973                 xor     edi, edi        ; domainname
.text:0000000000002975                 mov     edx, 5          ; category
.text:000000000000297A                 call    _dcgettext
.text:000000000000297F                 mov     rcx, rbx
.text:0000000000002982                 mov     rdx, rax        ; format
.text:0000000000002985                 xor     esi, esi        ; errnum
.text:0000000000002987                 xor     edi, edi        ; status
.text:0000000000002989                 xor     eax, eax
.text:000000000000298B                 call    _error
.text:0000000000002990                 jmp     loc_27E5
.text:0000000000002995 ; ---------------------------------------------------------------------------
.text:0000000000002995
.text:0000000000002995 loc_2995:                               ; CODE XREF: main+F5↑j
.text:0000000000002995                 xor     edi, edi        ; status
.text:0000000000002997                 call    usage
.text:000000000000299C ; ---------------------------------------------------------------------------
.text:000000000000299C
.text:000000000000299C loc_299C:                               ; CODE XREF: main+2BF↑j
.text:000000000000299C                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:00000000000029A3                 mov     edx, 5          ; category
.text:00000000000029A8                 xor     edi, edi        ; domainname
.text:00000000000029AA                 call    _dcgettext
.text:00000000000029AF                 xor     esi, esi        ; errnum
.text:00000000000029B1                 mov     rdx, rax        ; format
.text:00000000000029B4                 xor     edi, edi        ; status
.text:00000000000029B6                 xor     eax, eax
.text:00000000000029B8                 call    _error
.text:00000000000029BD
.text:00000000000029BD loc_29BD:                               ; CODE XREF: main+DE↑j
.text:00000000000029BD                                         ; main+10D↑j ...
.text:00000000000029BD                 mov     edi, 1          ; status
.text:00000000000029C2                 call    usage
.text:00000000000029C7 ; ---------------------------------------------------------------------------
.text:00000000000029C7
.text:00000000000029C7 loc_29C7:                               ; CODE XREF: main+666↑j
.text:00000000000029C7                 lea     rcx, __PRETTY_FUNCTION___7286 ; "incname"
.text:00000000000029CE                 lea     rsi, file       ; "../coreutils-8.31/src/shred.c"
.text:00000000000029D5                 lea     rdi, assertion  ; "p"
.text:00000000000029DC                 mov     edx, 40Ch       ; line
.text:00000000000029E1                 call    ___assert_fail
.text:00000000000029E6 ; ---------------------------------------------------------------------------
.text:00000000000029E6
.text:00000000000029E6 loc_29E6:                               ; CODE XREF: main+492↑j
.text:00000000000029E6                 call    ___stack_chk_fail
.text:00000000000029EB ; ---------------------------------------------------------------------------
.text:00000000000029EB
.text:00000000000029EB loc_29EB:                               ; CODE XREF: main+2DB↑j
.text:00000000000029EB                 mov     rdx, r13
.text:00000000000029EE                 mov     esi, 3
.text:00000000000029F3                 xor     edi, edi
.text:00000000000029F5                 call    quotearg_n_style_colon
.text:00000000000029FA                 mov     rbx, rax
.text:00000000000029FD                 call    ___errno_location
.text:0000000000002A02                 mov     esi, [rax]      ; errnum
.text:0000000000002A04                 lea     rdx, aS_0+2     ; format
.text:0000000000002A0B                 mov     rcx, rbx
.text:0000000000002A0E                 mov     edi, 1          ; status
.text:0000000000002A13                 xor     eax, eax
.text:0000000000002A15                 call    _error
.text:0000000000002A1A
.text:0000000000002A1A loc_2A1A:                               ; CODE XREF: main+17F↑j
.text:0000000000002A1A                 lea     rsi, aMultipleRandom ; "multiple random sources specified"
.text:0000000000002A21                 mov     edx, 5          ; category
.text:0000000000002A26                 xor     edi, edi        ; domainname
.text:0000000000002A28                 call    _dcgettext
.text:0000000000002A2D                 xor     esi, esi        ; errnum
.text:0000000000002A2F                 mov     rdx, rax        ; format
.text:0000000000002A32                 mov     edi, 1          ; status
.text:0000000000002A37                 xor     eax, eax
.text:0000000000002A39                 call    _error
.text:0000000000002A39 ; } // starts at 2140
.text:0000000000002A3E                 xchg    ax, ax
.text:0000000000002A3E main            endp ; sp-analysis failed
.text:0000000000002A3E
.text:0000000000002A40
.text:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A40
.text:0000000000002A40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002A40
.text:0000000000002A40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002A40                 public start
.text:0000000000002A40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002A40 ; __unwind {
.text:0000000000002A40                 xor     ebp, ebp
.text:0000000000002A42                 mov     r9, rdx         ; rtld_fini
.text:0000000000002A45                 pop     rsi             ; argc
.text:0000000000002A46                 mov     rdx, rsp        ; ubp_av
.text:0000000000002A49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002A4D                 push    rax
.text:0000000000002A4E                 push    rsp             ; stack_end
.text:0000000000002A4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002A56                 lea     rcx, __libc_csu_init ; init
.text:0000000000002A5D                 lea     rdi, main       ; main
.text:0000000000002A64                 call    cs:__libc_start_main_ptr
.text:0000000000002A6A                 hlt
.text:0000000000002A6A ; } // starts at 2A40
.text:0000000000002A6A start           endp
.text:0000000000002A6A
.text:0000000000002A6A ; ---------------------------------------------------------------------------
.text:0000000000002A6B                 align 10h
.text:0000000000002A70
.text:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A70
.text:0000000000002A70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002A70
.text:0000000000002A70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2B23↓p
.text:0000000000002A70                 lea     rdi, __bss_start
.text:0000000000002A77                 push    rbp
.text:0000000000002A78                 lea     rax, __bss_start
.text:0000000000002A7F                 cmp     rax, rdi
.text:0000000000002A82                 mov     rbp, rsp
.text:0000000000002A85                 jz      short loc_2AA0
.text:0000000000002A87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002A8E                 test    rax, rax
.text:0000000000002A91                 jz      short loc_2AA0
.text:0000000000002A93                 pop     rbp
.text:0000000000002A94                 jmp     rax
.text:0000000000002A94 ; ---------------------------------------------------------------------------
.text:0000000000002A96                 align 20h
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002AA0                                         ; deregister_tm_clones+21↑j
.text:0000000000002AA0                 pop     rbp
.text:0000000000002AA1                 retn
.text:0000000000002AA1 deregister_tm_clones endp
.text:0000000000002AA1
.text:0000000000002AA1 ; ---------------------------------------------------------------------------
.text:0000000000002AA2                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AB0
.text:0000000000002AB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002AB0
.text:0000000000002AB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002AB0                 lea     rdi, __bss_start
.text:0000000000002AB7                 lea     rsi, __bss_start
.text:0000000000002ABE                 push    rbp
.text:0000000000002ABF                 sub     rsi, rdi
.text:0000000000002AC2                 mov     rbp, rsp
.text:0000000000002AC5                 sar     rsi, 3
.text:0000000000002AC9                 mov     rax, rsi
.text:0000000000002ACC                 shr     rax, 3Fh
.text:0000000000002AD0                 add     rsi, rax
.text:0000000000002AD3                 sar     rsi, 1
.text:0000000000002AD6                 jz      short loc_2AF0
.text:0000000000002AD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000002ADF                 test    rax, rax
.text:0000000000002AE2                 jz      short loc_2AF0
.text:0000000000002AE4                 pop     rbp
.text:0000000000002AE5                 jmp     rax
.text:0000000000002AE5 ; ---------------------------------------------------------------------------
.text:0000000000002AE7                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002AF0                                         ; register_tm_clones+32↑j
.text:0000000000002AF0                 pop     rbp
.text:0000000000002AF1                 retn
.text:0000000000002AF1 register_tm_clones endp
.text:0000000000002AF1
.text:0000000000002AF1 ; ---------------------------------------------------------------------------
.text:0000000000002AF2                 align 20h
.text:0000000000002B00
.text:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B00
.text:0000000000002B00 ; Attributes: info_from_lumina
.text:0000000000002B00
.text:0000000000002B00 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002B00                 cmp     cs:completed_7697, 0
.text:0000000000002B07                 jnz     short locret_2B38
.text:0000000000002B09                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002B11                 push    rbp
.text:0000000000002B12                 mov     rbp, rsp
.text:0000000000002B15                 jz      short loc_2B23
.text:0000000000002B17                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002B1E                 call    __cxa_finalize
.text:0000000000002B23
.text:0000000000002B23 loc_2B23:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002B23                 call    deregister_tm_clones
.text:0000000000002B28                 mov     cs:completed_7697, 1
.text:0000000000002B2F                 pop     rbp
.text:0000000000002B30                 retn
.text:0000000000002B30 ; ---------------------------------------------------------------------------
.text:0000000000002B31                 align 8
.text:0000000000002B38
.text:0000000000002B38 locret_2B38:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002B38                 rep retn
.text:0000000000002B38 __do_global_dtors_aux endp
.text:0000000000002B38
.text:0000000000002B38 ; ---------------------------------------------------------------------------
.text:0000000000002B3A                 align 20h
.text:0000000000002B40
.text:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B40
.text:0000000000002B40 ; Attributes: bp-based frame
.text:0000000000002B40
.text:0000000000002B40 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002B40                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002B40                 push    rbp
.text:0000000000002B41                 mov     rbp, rsp
.text:0000000000002B44                 pop     rbp
.text:0000000000002B45                 jmp     register_tm_clones
.text:0000000000002B45 frame_dummy     endp
.text:0000000000002B45
.text:0000000000002B45 ; ---------------------------------------------------------------------------
.text:0000000000002B4A                 align 10h
.text:0000000000002B50
.text:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B50
.text:0000000000002B50
.text:0000000000002B50 clear_random_data proc near             ; DATA XREF: main+2E1↑o
.text:0000000000002B50 ; __unwind {
.text:0000000000002B50                 mov     rdi, cs:randint_source ; ptr
.text:0000000000002B57                 jmp     randint_all_free
.text:0000000000002B57 ; } // starts at 2B50
.text:0000000000002B57 clear_random_data endp
.text:0000000000002B57
.text:0000000000002B57 ; ---------------------------------------------------------------------------
.text:0000000000002B5C                 align 20h
.text:0000000000002B60
.text:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B60
.text:0000000000002B60
.text:0000000000002B60 ; __int64 __fastcall direct_mode(int fd)
.text:0000000000002B60 direct_mode     proc near               ; CODE XREF: dopass+4A8↓p
.text:0000000000002B60                                         ; dopass+589↓p
.text:0000000000002B60 ; __unwind {
.text:0000000000002B60                 push    rbp
.text:0000000000002B61                 push    rbx
.text:0000000000002B62                 xor     eax, eax
.text:0000000000002B64                 mov     ebp, esi
.text:0000000000002B66                 mov     esi, 3
.text:0000000000002B6B                 mov     ebx, edi
.text:0000000000002B6D                 sub     rsp, 8
.text:0000000000002B71                 call    rpl_fcntl
.text:0000000000002B76                 test    eax, eax
.text:0000000000002B78                 jle     short loc_2BA8
.text:0000000000002B7A                 mov     ecx, eax
.text:0000000000002B7C                 mov     edx, eax
.text:0000000000002B7E                 or      ch, 40h
.text:0000000000002B81                 and     dh, 0BFh
.text:0000000000002B84                 test    bpl, bpl
.text:0000000000002B87                 cmovnz  edx, ecx
.text:0000000000002B8A                 cmp     edx, eax
.text:0000000000002B8C                 jz      short loc_2BA8
.text:0000000000002B8E                 add     rsp, 8
.text:0000000000002B92                 mov     edi, ebx        ; fd
.text:0000000000002B94                 mov     esi, 4
.text:0000000000002B99                 pop     rbx
.text:0000000000002B9A                 pop     rbp
.text:0000000000002B9B                 xor     eax, eax
.text:0000000000002B9D                 jmp     rpl_fcntl
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002BA2                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: direct_mode+18↑j
.text:0000000000002BA8                                         ; direct_mode+2C↑j
.text:0000000000002BA8                 add     rsp, 8
.text:0000000000002BAC                 pop     rbx
.text:0000000000002BAD                 pop     rbp
.text:0000000000002BAE                 retn
.text:0000000000002BAE ; } // starts at 2B60
.text:0000000000002BAE direct_mode     endp
.text:0000000000002BAE
.text:0000000000002BAE ; ---------------------------------------------------------------------------
.text:0000000000002BAF                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BB0
.text:0000000000002BB0
.text:0000000000002BB0 ; __int64 __fastcall dosync(int fd)
.text:0000000000002BB0 dosync          proc near               ; CODE XREF: main+6B7↑p
.text:0000000000002BB0                                         ; main+7AE↑p ...
.text:0000000000002BB0 ; __unwind {
.text:0000000000002BB0                 push    r13
.text:0000000000002BB2                 push    r12
.text:0000000000002BB4                 mov     r13, rsi
.text:0000000000002BB7                 push    rbp
.text:0000000000002BB8                 push    rbx
.text:0000000000002BB9                 mov     ebx, edi
.text:0000000000002BBB                 sub     rsp, 8
.text:0000000000002BBF                 call    _fdatasync
.text:0000000000002BC4                 test    eax, eax
.text:0000000000002BC6                 jz      short loc_2C35
.text:0000000000002BC8                 call    ___errno_location
.text:0000000000002BCD                 mov     ebp, [rax]
.text:0000000000002BCF                 mov     r12, rax
.text:0000000000002BD2                 lea     eax, [rbp-15h]
.text:0000000000002BD5                 cmp     eax, 1
.text:0000000000002BD8                 jbe     short loc_2BDF
.text:0000000000002BDA                 cmp     ebp, 9
.text:0000000000002BDD                 jnz     short loc_2C48
.text:0000000000002BDF
.text:0000000000002BDF loc_2BDF:                               ; CODE XREF: dosync+28↑j
.text:0000000000002BDF                 mov     edi, ebx        ; fd
.text:0000000000002BE1                 call    _fsync
.text:0000000000002BE6                 test    eax, eax
.text:0000000000002BE8                 jz      short loc_2C35
.text:0000000000002BEA                 mov     ebx, [r12]
.text:0000000000002BEE                 lea     eax, [rbx-15h]
.text:0000000000002BF1                 cmp     eax, 1
.text:0000000000002BF4                 jbe     short loc_2C30
.text:0000000000002BF6                 cmp     ebx, 9
.text:0000000000002BF9                 jz      short loc_2C30
.text:0000000000002BFB                 lea     rsi, aSFsyncFailed ; "%s: fsync failed"
.text:0000000000002C02                 mov     edx, 5          ; category
.text:0000000000002C07                 xor     edi, edi        ; domainname
.text:0000000000002C09                 call    _dcgettext
.text:0000000000002C0E                 mov     rcx, r13
.text:0000000000002C11                 mov     rdx, rax        ; format
.text:0000000000002C14                 mov     esi, ebx        ; errnum
.text:0000000000002C16                 xor     eax, eax
.text:0000000000002C18                 xor     edi, edi        ; status
.text:0000000000002C1A                 call    _error
.text:0000000000002C1F                 mov     [r12], ebx
.text:0000000000002C23                 mov     eax, 0FFFFFFFFh
.text:0000000000002C28                 jmp     short loc_2C37
.text:0000000000002C28 ; ---------------------------------------------------------------------------
.text:0000000000002C2A                 align 10h
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: dosync+44↑j
.text:0000000000002C30                                         ; dosync+49↑j
.text:0000000000002C30                 call    _sync
.text:0000000000002C35
.text:0000000000002C35 loc_2C35:                               ; CODE XREF: dosync+16↑j
.text:0000000000002C35                                         ; dosync+38↑j
.text:0000000000002C35                 xor     eax, eax
.text:0000000000002C37
.text:0000000000002C37 loc_2C37:                               ; CODE XREF: dosync+78↑j
.text:0000000000002C37                 add     rsp, 8
.text:0000000000002C3B                 pop     rbx
.text:0000000000002C3C                 pop     rbp
.text:0000000000002C3D                 pop     r12
.text:0000000000002C3F                 pop     r13
.text:0000000000002C41                 retn
.text:0000000000002C41 ; ---------------------------------------------------------------------------
.text:0000000000002C42                 align 8
.text:0000000000002C48
.text:0000000000002C48 loc_2C48:                               ; CODE XREF: dosync+2D↑j
.text:0000000000002C48                 lea     rsi, aSFdatasyncFail ; "%s: fdatasync failed"
.text:0000000000002C4F                 mov     edx, 5          ; category
.text:0000000000002C54                 xor     edi, edi        ; domainname
.text:0000000000002C56                 call    _dcgettext
.text:0000000000002C5B                 mov     rcx, r13
.text:0000000000002C5E                 mov     rdx, rax        ; format
.text:0000000000002C61                 mov     esi, ebp        ; errnum
.text:0000000000002C63                 xor     eax, eax
.text:0000000000002C65                 xor     edi, edi        ; status
.text:0000000000002C67                 call    _error
.text:0000000000002C6C                 mov     [r12], ebp
.text:0000000000002C70                 add     rsp, 8
.text:0000000000002C74                 mov     eax, 0FFFFFFFFh
.text:0000000000002C79                 pop     rbx
.text:0000000000002C7A                 pop     rbp
.text:0000000000002C7B                 pop     r12
.text:0000000000002C7D                 pop     r13
.text:0000000000002C7F                 retn
.text:0000000000002C7F ; } // starts at 2BB0
.text:0000000000002C7F dosync          endp
.text:0000000000002C7F
.text:0000000000002C80
.text:0000000000002C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C80
.text:0000000000002C80
.text:0000000000002C80 ; __int64 __usercall dopass@<rax>(int fd@<edi>, __int64, __int64)
.text:0000000000002C80 dopass          proc near               ; CODE XREF: do_wipefd+42B↓p
.text:0000000000002C80
.text:0000000000002C80 var_878         = qword ptr -878h
.text:0000000000002C80 var_870         = qword ptr -870h
.text:0000000000002C80 var_868         = qword ptr -868h
.text:0000000000002C80 var_860         = qword ptr -860h
.text:0000000000002C80 var_858         = dword ptr -858h
.text:0000000000002C80 var_851         = byte ptr -851h
.text:0000000000002C80 var_850         = qword ptr -850h
.text:0000000000002C80 ptr             = qword ptr -848h
.text:0000000000002C80 var_840         = qword ptr -840h
.text:0000000000002C80 var_838         = qword ptr -838h
.text:0000000000002C80 var_830         = qword ptr -830h
.text:0000000000002C80 var_828         = qword ptr -828h
.text:0000000000002C80 s1              = qword ptr -820h
.text:0000000000002C80 var_818         = qword ptr -818h
.text:0000000000002C80 var_810         = qword ptr -810h
.text:0000000000002C80 var_808         = word ptr -808h
.text:0000000000002C80 var_804         = dword ptr -804h
.text:0000000000002C80 var_7FF         = dword ptr -7FFh
.text:0000000000002C80 var_7FB         = word ptr -7FBh
.text:0000000000002C80 var_7F9         = byte ptr -7F9h
.text:0000000000002C80 var_7F8         = byte ptr -7F8h
.text:0000000000002C80 var_568         = byte ptr -568h
.text:0000000000002C80 var_2D8         = byte ptr -2D8h
.text:0000000000002C80 var_40          = qword ptr -40h
.text:0000000000002C80 arg_0           = qword ptr  8
.text:0000000000002C80 arg_8           = qword ptr  10h
.text:0000000000002C80
.text:0000000000002C80 ; __unwind {
.text:0000000000002C80                 push    r15
.text:0000000000002C82                 push    r14
.text:0000000000002C84                 mov     rax, rcx
.text:0000000000002C87                 push    r13
.text:0000000000002C89                 push    r12
.text:0000000000002C8B                 mov     r14d, edi
.text:0000000000002C8E                 push    rbp
.text:0000000000002C8F                 push    rbx
.text:0000000000002C90                 mov     ebx, r8d
.text:0000000000002C93                 sub     rsp, 848h
.text:0000000000002C9A                 mov     r15, [rax]
.text:0000000000002C9D                 mov     [rsp+878h+var_828], rcx
.text:0000000000002CA2                 mov     [rsp+878h+var_878], rsi
.text:0000000000002CA6                 mov     rcx, fs:28h
.text:0000000000002CAF                 mov     [rsp+878h+var_40], rcx
.text:0000000000002CB7                 xor     ecx, ecx
.text:0000000000002CB9                 mov     [rsp+878h+var_870], rdx
.text:0000000000002CBE                 mov     [rsp+878h+var_858], r8d
.text:0000000000002CC3                 mov     [rsp+878h+var_830], r9
.text:0000000000002CC8                 call    _getpagesize
.text:0000000000002CCD                 test    ebx, ebx
.text:0000000000002CCF                 movsxd  rbp, eax
.text:0000000000002CD2                 jle     loc_2DD0
.text:0000000000002CD8                 mov     edx, ebx
.text:0000000000002CDA                 and     edx, 0FFFh
.text:0000000000002CE0                 mov     eax, edx
.text:0000000000002CE2                 shl     eax, 0Ch
.text:0000000000002CE5                 or      eax, edx
.text:0000000000002CE7                 mov     edx, eax
.text:0000000000002CE9                 shr     edx, 4
.text:0000000000002CEC                 cmp     ah, dl
.text:0000000000002CEE                 jnz     short loc_2CF8
.text:0000000000002CF0                 cmp     dl, al
.text:0000000000002CF2                 jz      loc_2DD0
.text:0000000000002CF8
.text:0000000000002CF8 loc_2CF8:                               ; CODE XREF: dopass+6E↑j
.text:0000000000002CF8                 mov     r13d, 0F000h
.text:0000000000002CFE                 mov     [rsp+878h+var_860], 0F000h
.text:0000000000002D07
.text:0000000000002D07 loc_2D07:                               ; CODE XREF: dopass+15F↓j
.text:0000000000002D07                 lea     rbx, [rbp-1]
.text:0000000000002D0B                 mov     r12, r15
.text:0000000000002D0E                 lea     rdi, [r13+rbx+0]
.text:0000000000002D13                 call    xmalloc
.text:0000000000002D18                 test    r15, r15
.text:0000000000002D1B                 mov     [rsp+878h+ptr], rax
.text:0000000000002D20                 setnle  dl
.text:0000000000002D23                 cmp     r15, [rsp+878h+var_860]
.text:0000000000002D28                 setb    al
.text:0000000000002D2B                 and     dl, al
.text:0000000000002D2D                 mov     [rsp+878h+var_851], dl
.text:0000000000002D31                 jz      loc_3120
.text:0000000000002D37
.text:0000000000002D37 loc_2D37:                               ; CODE XREF: dopass+4AD↓j
.text:0000000000002D37                 mov     rax, [rsp+878h+var_878]
.text:0000000000002D3B                 mov     eax, [rax+18h]
.text:0000000000002D3E                 and     eax, 0F000h
.text:0000000000002D43                 cmp     eax, 2000h
.text:0000000000002D48                 jz      loc_2DE8
.text:0000000000002D4E
.text:0000000000002D4E loc_2D4E:                               ; CODE XREF: dopass+190↓j
.text:0000000000002D4E                 xor     edx, edx        ; whence
.text:0000000000002D50                 xor     esi, esi        ; offset
.text:0000000000002D52                 mov     edi, r14d       ; fd
.text:0000000000002D55                 call    _lseek
.text:0000000000002D5A                 cmp     rax, 0
.text:0000000000002D5E                 jle     loc_3138
.text:0000000000002D64                 call    ___errno_location
.text:0000000000002D69                 mov     rbx, rax
.text:0000000000002D6C                 mov     dword ptr [rax], 16h
.text:0000000000002D72
.text:0000000000002D72 loc_2D72:                               ; CODE XREF: dopass+4C6↓j
.text:0000000000002D72                 lea     rsi, aSCannotRewind ; "%s: cannot rewind"
.text:0000000000002D79                 mov     edx, 5          ; category
.text:0000000000002D7E                 xor     edi, edi        ; domainname
.text:0000000000002D80                 call    _dcgettext
.text:0000000000002D85                 mov     rcx, [rsp+878h+var_870]
.text:0000000000002D8A                 mov     esi, [rbx]      ; errnum
.text:0000000000002D8C                 mov     rdx, rax        ; format
.text:0000000000002D8F
.text:0000000000002D8F loc_2D8F:                               ; CODE XREF: dopass+46E↓j
.text:0000000000002D8F                 xor     edi, edi        ; status
.text:0000000000002D91                 xor     eax, eax
.text:0000000000002D93                 call    _error
.text:0000000000002D98
.text:0000000000002D98 loc_2D98:                               ; CODE XREF: dopass+3B3↓j
.text:0000000000002D98                                         ; dopass+3C6↓j ...
.text:0000000000002D98                 mov     rdi, [rsp+878h+ptr] ; ptr
.text:0000000000002D9D
.text:0000000000002D9D loc_2D9D:                               ; CODE XREF: dopass+7DC↓j
.text:0000000000002D9D                 call    _free
.text:0000000000002DA2                 mov     eax, 0FFFFFFFFh
.text:0000000000002DA7
.text:0000000000002DA7 loc_2DA7:                               ; CODE XREF: dopass+7EC↓j
.text:0000000000002DA7                                         ; dopass+877↓j
.text:0000000000002DA7                 mov     rcx, [rsp+878h+var_40]
.text:0000000000002DAF                 xor     rcx, fs:28h
.text:0000000000002DB8                 jnz     loc_34FC
.text:0000000000002DBE                 add     rsp, 848h
.text:0000000000002DC5                 pop     rbx
.text:0000000000002DC6                 pop     rbp
.text:0000000000002DC7                 pop     r12
.text:0000000000002DC9                 pop     r13
.text:0000000000002DCB                 pop     r14
.text:0000000000002DCD                 pop     r15
.text:0000000000002DCF                 retn
.text:0000000000002DD0 ; ---------------------------------------------------------------------------
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: dopass+52↑j
.text:0000000000002DD0                                         ; dopass+72↑j
.text:0000000000002DD0                 mov     r13d, 10002h
.text:0000000000002DD6                 mov     [rsp+878h+var_860], 10000h
.text:0000000000002DDF                 jmp     loc_2D07
.text:0000000000002DDF ; ---------------------------------------------------------------------------
.text:0000000000002DE4                 align 8
.text:0000000000002DE8
.text:0000000000002DE8 loc_2DE8:                               ; CODE XREF: dopass+C8↑j
.text:0000000000002DE8                 mov     eax, 6
.text:0000000000002DED                 lea     rdx, [rsp+878h+var_808]
.text:0000000000002DF2                 mov     esi, 40086D01h  ; request
.text:0000000000002DF7                 mov     [rsp+878h+var_808], ax
.text:0000000000002DFC                 mov     edi, r14d       ; fd
.text:0000000000002DFF                 xor     eax, eax
.text:0000000000002E01                 mov     [rsp+878h+var_804], 1
.text:0000000000002E09                 call    _ioctl
.text:0000000000002E0E                 test    eax, eax
.text:0000000000002E10                 jnz     loc_2D4E
.text:0000000000002E16
.text:0000000000002E16 loc_2E16:                               ; CODE XREF: dopass:loc_3138↓j
.text:0000000000002E16                 add     rbx, [rsp+878h+ptr]
.text:0000000000002E1B                 xor     edx, edx
.text:0000000000002E1D                 mov     r11d, [rsp+878h+var_858]
.text:0000000000002E22                 mov     rax, rbx
.text:0000000000002E25                 div     rbp
.text:0000000000002E28                 sub     rbx, rdx
.text:0000000000002E2B                 test    r11d, r11d
.text:0000000000002E2E                 js      loc_31E0
.text:0000000000002E34                 cmp     r15, r13
.text:0000000000002E37                 jnb     loc_31D0
.text:0000000000002E3D                 test    r15, r15
.text:0000000000002E40                 js      loc_31D0
.text:0000000000002E46
.text:0000000000002E46 loc_2E46:                               ; CODE XREF: dopass+553↓j
.text:0000000000002E46                 mov     eax, [rsp+878h+var_858]
.text:0000000000002E4A                 mov     rbp, r12
.text:0000000000002E4D                 mov     r13d, 3
.text:0000000000002E53                 shr     rbp, 1
.text:0000000000002E56                 and     eax, 0FFFh
.text:0000000000002E5B                 mov     edx, eax
.text:0000000000002E5D                 shl     edx, 0Ch
.text:0000000000002E60                 or      eax, edx
.text:0000000000002E62                 mov     edx, eax
.text:0000000000002E64                 mov     [rbx+1], ah
.text:0000000000002E67                 mov     [rbx+2], al
.text:0000000000002E6A                 shr     edx, 4
.text:0000000000002E6D                 cmp     rbp, 2
.text:0000000000002E71                 mov     [rbx], dl
.text:0000000000002E73                 jbe     short loc_2E8F
.text:0000000000002E75                 nop     dword ptr [rax]
.text:0000000000002E78
.text:0000000000002E78 loc_2E78:                               ; CODE XREF: dopass+20D↓j
.text:0000000000002E78                 lea     rdi, [rbx+r13]  ; dest
.text:0000000000002E7C                 mov     rdx, r13        ; n
.text:0000000000002E7F                 mov     rsi, rbx        ; src
.text:0000000000002E82                 add     r13, r13
.text:0000000000002E85                 call    _memcpy
.text:0000000000002E8A                 cmp     rbp, r13
.text:0000000000002E8D                 jnb     short loc_2E78
.text:0000000000002E8F
.text:0000000000002E8F loc_2E8F:                               ; CODE XREF: dopass+1F3↑j
.text:0000000000002E8F                 cmp     r12, r13
.text:0000000000002E92                 ja      loc_31B0
.text:0000000000002E98
.text:0000000000002E98 loc_2E98:                               ; CODE XREF: dopass+542↓j
.text:0000000000002E98                 test    [rsp+878h+var_858], 1000h
.text:0000000000002EA0                 jz      short loc_2EBF
.text:0000000000002EA2                 test    r12, r12
.text:0000000000002EA5                 jz      short loc_2EBF
.text:0000000000002EA7                 xor     eax, eax
.text:0000000000002EA9                 nop     dword ptr [rax+00000000h]
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: dopass+23D↓j
.text:0000000000002EB0                 add     byte ptr [rbx+rax], 80h
.text:0000000000002EB4                 add     rax, 200h
.text:0000000000002EBA                 cmp     r12, rax
.text:0000000000002EBD                 ja      short loc_2EB0
.text:0000000000002EBF
.text:0000000000002EBF loc_2EBF:                               ; CODE XREF: dopass+220↑j
.text:0000000000002EBF                                         ; dopass+225↑j
.text:0000000000002EBF                 movzx   eax, byte ptr [rbx+2]
.text:0000000000002EC3                 lea     rdi, [rsp+878h+var_7FF]
.text:0000000000002EC8                 sub     rsp, 8
.text:0000000000002ECC                 lea     rcx, a02x02x02x ; "%02x%02x%02x"
.text:0000000000002ED3                 mov     edx, 7
.text:0000000000002ED8                 mov     esi, 1
.text:0000000000002EDD                 push    rax
.text:0000000000002EDE                 movzx   r9d, byte ptr [rbx+1]
.text:0000000000002EE3                 xor     eax, eax
.text:0000000000002EE5                 movzx   r8d, byte ptr [rbx]
.text:0000000000002EE9                 call    ___sprintf_chk
.text:0000000000002EEE                 pop     rax
.text:0000000000002EEF                 pop     rdx
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: dopass+579↓j
.text:0000000000002EF0                 cmp     [rsp+878h+arg_8], 0
.text:0000000000002EF9                 jnz     loc_3150
.text:0000000000002EFF
.text:0000000000002EFF loc_2EFF:                               ; CODE XREF: dopass+527↓j
.text:0000000000002EFF                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002F06                 mov     byte ptr [rsp+878h+var_868], 0
.text:0000000000002F0B                 mov     [rsp+878h+var_818], 0
.text:0000000000002F14                 mov     [rsp+878h+var_878], 0
.text:0000000000002F1C                 mov     r13, r15
.text:0000000000002F1F                 mov     [rsp+878h+s1], rax
.text:0000000000002F24
.text:0000000000002F24 loc_2F24:                               ; CODE XREF: dopass+5D2↓j
.text:0000000000002F24                                         ; dopass+5F2↓j ...
.text:0000000000002F24                 test    r13, r13
.text:0000000000002F27                 js      loc_30F8
.text:0000000000002F2D                 mov     rax, [rsp+878h+var_878]
.text:0000000000002F31                 mov     rbp, r13
.text:0000000000002F34                 sub     rbp, rax
.text:0000000000002F37                 cmp     rbp, [rsp+878h+var_860]
.text:0000000000002F3C                 jnb     loc_30F8
.text:0000000000002F42                 test    rbp, rbp
.text:0000000000002F45                 jz      loc_343A
.text:0000000000002F4B                 cmp     r13, rax
.text:0000000000002F4E                 jl      loc_343A
.text:0000000000002F54                 mov     edi, [rsp+878h+var_858]
.text:0000000000002F58                 test    edi, edi
.text:0000000000002F5A                 js      loc_3109
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: dopass+483↓j
.text:0000000000002F60                                         ; dopass+499↓j
.text:0000000000002F60                 lea     rax, [rsp+878h+var_2D8]
.text:0000000000002F68                 xor     r15d, r15d
.text:0000000000002F6B                 mov     [rsp+878h+var_850], r13
.text:0000000000002F70                 mov     [rsp+878h+var_840], rax
.text:0000000000002F75                 mov     rax, r13
.text:0000000000002F78                 not     rax
.text:0000000000002F7B                 shr     rax, 3Fh
.text:0000000000002F7F                 mov     [rsp+878h+var_838], rax
.text:0000000000002F84                 jmp     short loc_2F9C
.text:0000000000002F84 ; ---------------------------------------------------------------------------
.text:0000000000002F86                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: dopass+331↓j
.text:0000000000002F90                 add     r15, rax
.text:0000000000002F93
.text:0000000000002F93 loc_2F93:                               ; CODE XREF: dopass+3E6↓j
.text:0000000000002F93                 cmp     rbp, r15
.text:0000000000002F96                 jbe     loc_3220
.text:0000000000002F9C
.text:0000000000002F9C loc_2F9C:                               ; CODE XREF: dopass+304↑j
.text:0000000000002F9C                                         ; dopass+591↓j
.text:0000000000002F9C                 mov     rdx, rbp
.text:0000000000002F9F                 lea     rsi, [rbx+r15]  ; buf
.text:0000000000002FA3                 mov     edi, r14d       ; fd
.text:0000000000002FA6                 sub     rdx, r15        ; n
.text:0000000000002FA9                 call    _write
.text:0000000000002FAE                 test    rax, rax
.text:0000000000002FB1                 jg      short loc_2F90
.text:0000000000002FB3                 cmp     [rsp+878h+var_850], 0
.text:0000000000002FB9                 js      loc_30A0
.text:0000000000002FBF                 call    ___errno_location
.text:0000000000002FC4                 mov     r12d, [rax]
.text:0000000000002FC7                 mov     r13, rax
.text:0000000000002FCA
.text:0000000000002FCA loc_2FCA:                               ; CODE XREF: dopass+434↓j
.text:0000000000002FCA                 movzx   eax, [rsp+878h+var_851]
.text:0000000000002FCF                 xor     eax, 1
.text:0000000000002FD2                 cmp     r12d, 16h
.text:0000000000002FD6                 setz    dl
.text:0000000000002FD9                 and     al, dl
.text:0000000000002FDB                 jnz     loc_3200
.text:0000000000002FE1                 mov     rax, [rsp+878h+var_878]
.text:0000000000002FE5                 mov     rsi, [rsp+878h+var_840]
.text:0000000000002FEA                 lea     rdi, [rax+r15]
.text:0000000000002FEE                 call    umaxtostr
.text:0000000000002FF3                 lea     rsi, aSErrorWritingA ; "%s: error writing at offset %s"
.text:0000000000002FFA                 xor     edi, edi        ; domainname
.text:0000000000002FFC                 mov     edx, 5          ; category
.text:0000000000003001                 mov     [rsp+878h+var_868], rax
.text:0000000000003006                 call    _dcgettext
.text:000000000000300B                 mov     r8, [rsp+878h+var_868]
.text:0000000000003010                 mov     rcx, [rsp+878h+var_870]
.text:0000000000003015                 mov     rdx, rax        ; format
.text:0000000000003018                 xor     edi, edi        ; status
.text:000000000000301A                 xor     eax, eax
.text:000000000000301C                 mov     esi, r12d       ; errnum
.text:000000000000301F                 call    _error
.text:0000000000003024                 cmp     r12d, 5
.text:0000000000003028                 setz    al
.text:000000000000302B                 and     al, byte ptr [rsp+878h+var_838]
.text:000000000000302F                 mov     byte ptr [rsp+878h+var_868], al
.text:0000000000003033                 jz      loc_2D98
.text:0000000000003039                 mov     r9, r15
.text:000000000000303C                 or      r9, 1FFh
.text:0000000000003043                 cmp     r9, rbp
.text:0000000000003046                 jnb     loc_2D98
.text:000000000000304C                 mov     rax, [rsp+878h+var_878]
.text:0000000000003050                 lea     r15, [r9+1]
.text:0000000000003054                 xor     edx, edx        ; whence
.text:0000000000003056                 mov     edi, r14d       ; fd
.text:0000000000003059                 lea     rsi, [rax+r15]  ; offset
.text:000000000000305D                 call    _lseek
.text:0000000000003062                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003066                 jnz     loc_2F93
.text:000000000000306C                 lea     rsi, aSLseekFailed ; "%s: lseek failed"
.text:0000000000003073                 xor     edi, edi        ; domainname
.text:0000000000003075                 mov     edx, 5          ; category
.text:000000000000307A                 call    _dcgettext
.text:000000000000307F                 mov     rcx, [rsp+878h+var_870]
.text:0000000000003084                 mov     esi, [r13+0]    ; errnum
.text:0000000000003088                 mov     rdx, rax        ; format
.text:000000000000308B                 xor     edi, edi        ; status
.text:000000000000308D                 xor     eax, eax
.text:000000000000308F                 call    _error
.text:0000000000003094                 jmp     loc_2D98
.text:0000000000003094 ; ---------------------------------------------------------------------------
.text:0000000000003099                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: dopass+339↑j
.text:00000000000030A0                 test    rax, rax
.text:00000000000030A3                 jz      short loc_30BA
.text:00000000000030A5                 call    ___errno_location
.text:00000000000030AA                 mov     r12d, [rax]
.text:00000000000030AD                 mov     r13, rax
.text:00000000000030B0                 cmp     r12d, 1Ch
.text:00000000000030B4                 jnz     loc_2FCA
.text:00000000000030BA
.text:00000000000030BA loc_30BA:                               ; CODE XREF: dopass+423↑j
.text:00000000000030BA                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:00000000000030C4                 sub     rax, [rsp+878h+var_878]
.text:00000000000030C8                 cmp     rax, r15
.text:00000000000030CB                 jnb     loc_33BB
.text:00000000000030D1
.text:00000000000030D1 loc_30D1:                               ; CODE XREF: dopass+5B9↓j
.text:00000000000030D1                 lea     rsi, aSFileTooLarge ; "%s: file too large"
.text:00000000000030D8                 mov     edx, 5          ; category
.text:00000000000030DD                 xor     edi, edi        ; domainname
.text:00000000000030DF                 call    _dcgettext
.text:00000000000030E4                 mov     rcx, [rsp+878h+var_870]
.text:00000000000030E9                 mov     rdx, rax
.text:00000000000030EC                 xor     esi, esi
.text:00000000000030EE                 jmp     loc_2D8F
.text:00000000000030EE ; ---------------------------------------------------------------------------
.text:00000000000030F3                 align 8
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: dopass+2A7↑j
.text:00000000000030F8                                         ; dopass+2BC↑j
.text:00000000000030F8                 mov     edi, [rsp+878h+var_858]
.text:00000000000030FC                 mov     rbp, [rsp+878h+var_860]
.text:0000000000003101                 test    edi, edi
.text:0000000000003103                 jns     loc_2F60
.text:0000000000003109
.text:0000000000003109 loc_3109:                               ; CODE XREF: dopass+2DA↑j
.text:0000000000003109                 mov     rdi, [rsp+878h+var_830]
.text:000000000000310E                 mov     rdx, rbp
.text:0000000000003111                 mov     rsi, rbx
.text:0000000000003114                 call    randread
.text:0000000000003119                 jmp     loc_2F60
.text:0000000000003119 ; ---------------------------------------------------------------------------
.text:000000000000311E                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: dopass+B1↑j
.text:0000000000003120                 mov     esi, 1
.text:0000000000003125                 mov     edi, r14d       ; fd
.text:0000000000003128                 call    direct_mode
.text:000000000000312D                 jmp     loc_2D37
.text:000000000000312D ; ---------------------------------------------------------------------------
.text:0000000000003132                 align 8
.text:0000000000003138
.text:0000000000003138 loc_3138:                               ; CODE XREF: dopass+DE↑j
.text:0000000000003138                 jz      loc_2E16
.text:000000000000313E                 call    ___errno_location
.text:0000000000003143                 mov     rbx, rax
.text:0000000000003146                 jmp     loc_2D72
.text:0000000000003146 ; ---------------------------------------------------------------------------
.text:000000000000314B                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: dopass+279↑j
.text:0000000000003150                 lea     rsi, aSPassLuLuS ; "%s: pass %lu/%lu (%s)..."
.text:0000000000003157                 mov     edx, 5          ; category
.text:000000000000315C                 xor     edi, edi        ; domainname
.text:000000000000315E                 call    _dcgettext
.text:0000000000003163                 sub     rsp, 8
.text:0000000000003167                 xor     esi, esi        ; errnum
.text:0000000000003169                 xor     edi, edi        ; status
.text:000000000000316B                 lea     rdx, [rsp+880h+var_7FF]
.text:0000000000003173                 push    rdx
.text:0000000000003174                 mov     r9, [rsp+888h+arg_8]
.text:000000000000317C                 mov     rdx, rax        ; format
.text:000000000000317F                 mov     r8, [rsp+888h+arg_0]
.text:0000000000003187                 mov     rcx, [rsp+888h+var_870]
.text:000000000000318C                 xor     eax, eax
.text:000000000000318E                 call    _error
.text:0000000000003193                 xor     edi, edi        ; timer
.text:0000000000003195                 call    _time
.text:000000000000319A                 add     rax, 5
.text:000000000000319E                 mov     [rsp+888h+var_810], rax
.text:00000000000031A3                 pop     r8
.text:00000000000031A5                 pop     r9
.text:00000000000031A7                 jmp     loc_2EFF
.text:00000000000031A7 ; ---------------------------------------------------------------------------
.text:00000000000031AC                 align 10h
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: dopass+212↑j
.text:00000000000031B0                 mov     rdx, r12
.text:00000000000031B3                 lea     rdi, [rbx+r13]  ; dest
.text:00000000000031B7                 mov     rsi, rbx        ; src
.text:00000000000031BA                 sub     rdx, r13        ; n
.text:00000000000031BD                 call    _memcpy
.text:00000000000031C2                 jmp     loc_2E98
.text:00000000000031C2 ; ---------------------------------------------------------------------------
.text:00000000000031C7                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: dopass+1B7↑j
.text:00000000000031D0                                         ; dopass+1C0↑j
.text:00000000000031D0                 mov     r12, r13
.text:00000000000031D3                 jmp     loc_2E46
.text:00000000000031D3 ; ---------------------------------------------------------------------------
.text:00000000000031D8                 align 20h
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: dopass+1AE↑j
.text:00000000000031E0                 mov     r10d, 6D6Fh
.text:00000000000031E6                 mov     [rsp+878h+var_7FF], 646E6172h
.text:00000000000031EE                 mov     [rsp+878h+var_7F9], 0
.text:00000000000031F3                 mov     [rsp+878h+var_7FB], r10w
.text:00000000000031F9                 jmp     loc_2EF0
.text:00000000000031F9 ; ---------------------------------------------------------------------------
.text:00000000000031FE                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: dopass+35B↑j
.text:0000000000003200                 xor     esi, esi
.text:0000000000003202                 mov     edi, r14d       ; fd
.text:0000000000003205                 mov     [rsp+878h+var_851], al
.text:0000000000003209                 call    direct_mode
.text:000000000000320E                 cmp     rbp, r15
.text:0000000000003211                 ja      loc_2F9C
.text:0000000000003217                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: dopass+316↑j
.text:0000000000003220                 mov     rcx, [rsp+878h+var_878]
.text:0000000000003224                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000322E                 mov     r13, [rsp+878h+var_850]
.text:0000000000003233                 sub     rax, rcx
.text:0000000000003236                 cmp     rax, r15
.text:0000000000003239                 jb      loc_30D1
.text:000000000000323F                 add     rcx, r15
.text:0000000000003242                 cmp     [rsp+878h+arg_8], 0
.text:000000000000324B                 mov     rbp, rcx
.text:000000000000324E                 mov     [rsp+878h+var_878], rcx
.text:0000000000003252                 jz      loc_2F24
.text:0000000000003258                 cmp     r13, rcx
.text:000000000000325B                 jz      loc_33E0
.text:0000000000003261                 xor     edi, edi        ; timer
.text:0000000000003263                 call    _time
.text:0000000000003268                 cmp     [rsp+878h+var_810], rax
.text:000000000000326D                 mov     [rsp+878h+var_818], rax
.text:0000000000003272                 jg      loc_2F24
.text:0000000000003278                 mov     rdi, [rsp+878h+var_878]
.text:000000000000327C                 lea     rsi, [rsp+878h+var_568]
.text:0000000000003284                 mov     r8d, 1
.text:000000000000328A                 mov     ecx, 1
.text:000000000000328F                 mov     edx, 1B2h
.text:0000000000003294                 call    human_readable
.text:0000000000003299                 mov     rdi, [rsp+878h+s1] ; s1
.text:000000000000329E                 mov     rsi, rax        ; s2
.text:00000000000032A1                 mov     r12, rax
.text:00000000000032A4                 call    _strcmp
.text:00000000000032A9                 test    eax, eax
.text:00000000000032AB                 jz      loc_2F24
.text:00000000000032B1
.text:00000000000032B1 loc_32B1:                               ; CODE XREF: dopass+78D↓j
.text:00000000000032B1                 test    r13, r13
.text:00000000000032B4                 js      loc_3471
.text:00000000000032BA                 mov     r15d, 64h ; 'd'
.text:00000000000032C0                 jz      short loc_32EA
.text:00000000000032C2                 mov     rax, 28F5C28F5C28F5Ch
.text:00000000000032CC                 cmp     rbp, rax
.text:00000000000032CF                 ja      loc_34B9
.text:00000000000032D5                 lea     rax, [rbp+rbp*4+0]
.text:00000000000032DA                 xor     edx, edx
.text:00000000000032DC                 lea     rax, [rax+rax*4]
.text:00000000000032E0                 shl     rax, 2
.text:00000000000032E4                 div     r13
.text:00000000000032E7                 mov     r15d, eax
.text:00000000000032EA
.text:00000000000032EA loc_32EA:                               ; CODE XREF: dopass+640↑j
.text:00000000000032EA                                         ; dopass+863↓j
.text:00000000000032EA                 lea     rsi, [rsp+878h+var_2D8]
.text:00000000000032F2                 mov     r8d, 1
.text:00000000000032F8                 mov     ecx, 1
.text:00000000000032FD                 mov     edx, 1B0h
.text:0000000000003302                 mov     rdi, r13
.text:0000000000003305                 call    human_readable
.text:000000000000330A                 cmp     rbp, r13
.text:000000000000330D                 lea     rsi, aSPassLuLuSSSD ; "%s: pass %lu/%lu (%s)...%s/%s %d%%"
.text:0000000000003314                 mov     edx, 5          ; category
.text:0000000000003319                 cmovz   r12, rax
.text:000000000000331D                 xor     edi, edi        ; domainname
.text:000000000000331F                 mov     [rsp+878h+var_850], rax
.text:0000000000003324                 call    _dcgettext
.text:0000000000003329                 push    r15
.text:000000000000332B                 mov     rcx, [rsp+880h+var_850]
.text:0000000000003330                 xor     esi, esi        ; errnum
.text:0000000000003332                 xor     edi, edi        ; status
.text:0000000000003334                 push    rcx
.text:0000000000003335                 push    r12
.text:0000000000003337                 lea     rdx, [rsp+890h+var_7FF]
.text:000000000000333F                 push    rdx
.text:0000000000003340                 mov     r9, [rsp+898h+arg_8]
.text:0000000000003348                 mov     rdx, rax        ; format
.text:000000000000334B                 mov     r8, [rsp+898h+arg_0]
.text:0000000000003353                 mov     rcx, [rsp+898h+var_870]
.text:0000000000003358                 xor     eax, eax
.text:000000000000335A                 call    _error
.text:000000000000335F                 add     rsp, 20h
.text:0000000000003363
.text:0000000000003363 loc_3363:                               ; CODE XREF: dopass+834↓j
.text:0000000000003363                 lea     rbp, [rsp+878h+var_7F8]
.text:000000000000336B                 mov     edx, 28Ch
.text:0000000000003370                 mov     rsi, r12
.text:0000000000003373                 mov     rdi, rbp
.text:0000000000003376                 call    ___strcpy_chk
.text:000000000000337B                 mov     rax, [rsp+878h+var_818]
.text:0000000000003380                 mov     rsi, [rsp+878h+var_870]
.text:0000000000003385                 mov     edi, r14d       ; fd
.text:0000000000003388                 add     rax, 5
.text:000000000000338C                 mov     [rsp+878h+var_810], rax
.text:0000000000003391                 call    dosync
.text:0000000000003396                 test    eax, eax
.text:0000000000003398                 jz      loc_3430
.text:000000000000339E                 call    ___errno_location
.text:00000000000033A3                 cmp     dword ptr [rax], 5
.text:00000000000033A6                 jnz     loc_2D98
.text:00000000000033AC                 mov     [rsp+878h+s1], rbp
.text:00000000000033B1                 mov     byte ptr [rsp+878h+var_868], 1
.text:00000000000033B6                 jmp     loc_2F24
.text:00000000000033BB ; ---------------------------------------------------------------------------
.text:00000000000033BB
.text:00000000000033BB loc_33BB:                               ; CODE XREF: dopass+44B↑j
.text:00000000000033BB                 mov     rbp, [rsp+878h+var_878]
.text:00000000000033BF                 mov     rax, [rsp+878h+var_828]
.text:00000000000033C4                 add     rbp, r15
.text:00000000000033C7                 cmp     [rsp+878h+arg_8], 0
.text:00000000000033D0                 mov     r13, rbp
.text:00000000000033D3                 mov     [rsp+878h+var_878], rbp
.text:00000000000033D7                 mov     [rax], rbp
.text:00000000000033DA                 jz      loc_2F24
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: dopass+5DB↑j
.text:00000000000033E0                 mov     rax, [rsp+878h+s1]
.text:00000000000033E5                 cmp     byte ptr [rax], 0
.text:00000000000033E8                 jz      short loc_3412
.text:00000000000033EA
.text:00000000000033EA loc_33EA:                               ; CODE XREF: dopass+7A9↓j
.text:00000000000033EA                 lea     rsi, [rsp+878h+var_568]
.text:00000000000033F2                 mov     r8d, 1
.text:00000000000033F8                 mov     ecx, 1
.text:00000000000033FD                 mov     edx, 1B2h
.text:0000000000003402                 mov     rdi, rbp
.text:0000000000003405                 call    human_readable
.text:000000000000340A                 mov     r12, rax
.text:000000000000340D                 jmp     loc_32B1
.text:0000000000003412 ; ---------------------------------------------------------------------------
.text:0000000000003412
.text:0000000000003412 loc_3412:                               ; CODE XREF: dopass+768↑j
.text:0000000000003412                 xor     edi, edi        ; timer
.text:0000000000003414                 call    _time
.text:0000000000003419                 cmp     [rsp+878h+var_810], rax
.text:000000000000341E                 mov     [rsp+878h+var_818], rax
.text:0000000000003423                 jg      loc_2F24
.text:0000000000003429                 jmp     short loc_33EA
.text:0000000000003429 ; ---------------------------------------------------------------------------
.text:000000000000342B                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: dopass+718↑j
.text:0000000000003430                 mov     [rsp+878h+s1], rbp
.text:0000000000003435                 jmp     loc_2F24
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: dopass+2C5↑j
.text:000000000000343A                                         ; dopass+2CE↑j
.text:000000000000343A                 mov     rsi, [rsp+878h+var_870]
.text:000000000000343F                 mov     edi, r14d       ; fd
.text:0000000000003442                 call    dosync
.text:0000000000003447                 test    eax, eax
.text:0000000000003449                 jz      loc_34E8
.text:000000000000344F                 call    ___errno_location
.text:0000000000003454                 cmp     dword ptr [rax], 5
.text:0000000000003457                 mov     rdi, [rsp+878h+ptr] ; ptr
.text:000000000000345C                 jnz     loc_2D9D
.text:0000000000003462                 call    _free
.text:0000000000003467                 mov     eax, 1
.text:000000000000346C                 jmp     loc_2DA7
.text:0000000000003471 ; ---------------------------------------------------------------------------
.text:0000000000003471
.text:0000000000003471 loc_3471:                               ; CODE XREF: dopass+634↑j
.text:0000000000003471                 lea     rsi, aSPassLuLuSS ; "%s: pass %lu/%lu (%s)...%s"
.text:0000000000003478                 mov     edx, 5          ; category
.text:000000000000347D                 xor     edi, edi        ; domainname
.text:000000000000347F                 call    _dcgettext
.text:0000000000003484                 push    r12
.text:0000000000003486                 xor     esi, esi        ; errnum
.text:0000000000003488                 xor     edi, edi        ; status
.text:000000000000348A                 lea     rdx, [rsp+880h+var_7FF]
.text:0000000000003492                 push    rdx
.text:0000000000003493                 mov     r9, [rsp+888h+arg_8]
.text:000000000000349B                 mov     rdx, rax        ; format
.text:000000000000349E                 mov     r8, [rsp+888h+arg_0]
.text:00000000000034A6                 mov     rcx, [rsp+888h+var_870]
.text:00000000000034AB                 xor     eax, eax
.text:00000000000034AD                 call    _error
.text:00000000000034B2                 pop     rcx
.text:00000000000034B3                 pop     rsi
.text:00000000000034B4                 jmp     loc_3363
.text:00000000000034B9 ; ---------------------------------------------------------------------------
.text:00000000000034B9
.text:00000000000034B9 loc_34B9:                               ; CODE XREF: dopass+64F↑j
.text:00000000000034B9                 mov     rax, 0A3D70A3D70A3D70Bh
.text:00000000000034C3                 imul    r13
.text:00000000000034C6                 mov     rax, r13
.text:00000000000034C9                 sar     rax, 3Fh
.text:00000000000034CD                 lea     rcx, [rdx+r13]
.text:00000000000034D1                 xor     edx, edx
.text:00000000000034D3                 sar     rcx, 6
.text:00000000000034D7                 sub     rcx, rax
.text:00000000000034DA                 mov     rax, rbp
.text:00000000000034DD                 div     rcx
.text:00000000000034E0                 mov     r15d, eax
.text:00000000000034E3                 jmp     loc_32EA
.text:00000000000034E8 ; ---------------------------------------------------------------------------
.text:00000000000034E8
.text:00000000000034E8 loc_34E8:                               ; CODE XREF: dopass+7C9↑j
.text:00000000000034E8                 mov     rdi, [rsp+878h+ptr] ; ptr
.text:00000000000034ED                 call    _free
.text:00000000000034F2                 movzx   eax, byte ptr [rsp+878h+var_868]
.text:00000000000034F7                 jmp     loc_2DA7
.text:00000000000034FC ; ---------------------------------------------------------------------------
.text:00000000000034FC
.text:00000000000034FC loc_34FC:                               ; CODE XREF: dopass+138↑j
.text:00000000000034FC                 call    ___stack_chk_fail
.text:00000000000034FC ; } // starts at 2C80
.text:00000000000034FC dopass          endp
.text:00000000000034FC
.text:00000000000034FC ; ---------------------------------------------------------------------------
.text:0000000000003501                 align 10h
.text:0000000000003510
.text:0000000000003510 ; =============== S U B R O U T I N E =======================================
.text:0000000000003510
.text:0000000000003510
.text:0000000000003510 ; __int64 __fastcall do_wipefd(int fd)
.text:0000000000003510 do_wipefd       proc near               ; CODE XREF: main+356↑p
.text:0000000000003510                                         ; main+3DB↑p
.text:0000000000003510
.text:0000000000003510 var_148         = qword ptr -148h
.text:0000000000003510 var_140         = qword ptr -140h
.text:0000000000003510 dest            = qword ptr -138h
.text:0000000000003510 var_130         = qword ptr -130h
.text:0000000000003510 var_121         = byte ptr -121h
.text:0000000000003510 var_120         = qword ptr -120h
.text:0000000000003510 var_118         = qword ptr -118h
.text:0000000000003510 var_110         = qword ptr -110h
.text:0000000000003510 var_108         = qword ptr -108h
.text:0000000000003510 var_100         = qword ptr -100h
.text:0000000000003510 var_F8          = qword ptr -0F8h
.text:0000000000003510 var_F0          = qword ptr -0F0h
.text:0000000000003510 var_E0          = qword ptr -0E0h
.text:0000000000003510 stat_buf        = stat ptr -0D8h
.text:0000000000003510 var_40          = qword ptr -40h
.text:0000000000003510
.text:0000000000003510 ; __unwind {
.text:0000000000003510                 push    r15
.text:0000000000003512                 push    r14
.text:0000000000003514                 push    r13
.text:0000000000003516                 push    r12
.text:0000000000003518                 push    rbp
.text:0000000000003519                 push    rbx
.text:000000000000351A                 mov     ebp, edi
.text:000000000000351C                 mov     rbx, rcx
.text:000000000000351F                 sub     rsp, 118h
.text:0000000000003526                 mov     rax, fs:28h
.text:000000000000352F                 mov     [rsp+148h+var_40], rax
.text:0000000000003537                 xor     eax, eax
.text:0000000000003539                 cmp     byte ptr [rcx+1Ch], 0
.text:000000000000353D                 mov     [rsp+148h+var_148], rsi
.text:0000000000003541                 mov     [rsp+148h+var_118], rdx
.text:0000000000003546                 mov     [rsp+148h+var_120], 0
.text:000000000000354F                 jz      short loc_355E
.text:0000000000003551                 movzx   eax, byte ptr [rcx+1Eh]
.text:0000000000003555                 add     rax, [rcx+8]
.text:0000000000003559                 mov     [rsp+148h+var_120], rax
.text:000000000000355E
.text:000000000000355E loc_355E:                               ; CODE XREF: do_wipefd+3F↑j
.text:000000000000355E                 lea     rax, [rsp+148h+stat_buf]
.text:0000000000003563                 mov     esi, ebp        ; fildes
.text:0000000000003565                 mov     edi, 1          ; ver
.text:000000000000356A                 mov     rdx, rax        ; stat_buf
.text:000000000000356D                 mov     [rsp+148h+var_140], rax
.text:0000000000003572                 call    ___fxstat
.text:0000000000003577                 test    eax, eax
.text:0000000000003579                 jnz     loc_3720
.text:000000000000357F                 mov     eax, [rsp+148h+stat_buf.st_mode]
.text:0000000000003586                 and     eax, 0F000h
.text:000000000000358B                 cmp     eax, 2000h
.text:0000000000003590                 jz      loc_3858
.text:0000000000003596
.text:0000000000003596 loc_3596:                               ; CODE XREF: do_wipefd+363↓j
.text:0000000000003596                 cmp     eax, 0C000h
.text:000000000000359B                 setz    cl
.text:000000000000359E                 cmp     eax, 1000h
.text:00000000000035A3                 setz    dl
.text:00000000000035A6                 or      cl, dl
.text:00000000000035A8                 mov     [rsp+148h+var_121], cl
.text:00000000000035AC                 jz      short loc_3610
.text:00000000000035AE
.text:00000000000035AE loc_35AE:                               ; CODE XREF: do_wipefd+351↓j
.text:00000000000035AE                 lea     rsi, aSInvalidFileTy ; "%s: invalid file type"
.text:00000000000035B5                 mov     edx, 5          ; category
.text:00000000000035BA                 xor     edi, edi        ; domainname
.text:00000000000035BC                 call    _dcgettext
.text:00000000000035C1                 mov     rcx, [rsp+148h+var_148]
.text:00000000000035C5                 mov     rdx, rax        ; format
.text:00000000000035C8                 xor     esi, esi        ; errnum
.text:00000000000035CA                 xor     edi, edi        ; status
.text:00000000000035CC                 xor     eax, eax
.text:00000000000035CE                 call    _error
.text:00000000000035D3                 mov     [rsp+148h+var_121], 0
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: do_wipefd+242↓j
.text:00000000000035D8                                         ; do_wipefd+3A4↓j ...
.text:00000000000035D8                 mov     rcx, [rsp+148h+var_40]
.text:00000000000035E0                 xor     rcx, fs:28h
.text:00000000000035E9                 movzx   eax, [rsp+148h+var_121]
.text:00000000000035EE                 jnz     loc_3C11
.text:00000000000035F4                 add     rsp, 118h
.text:00000000000035FB                 pop     rbx
.text:00000000000035FC                 pop     rbp
.text:00000000000035FD                 pop     r12
.text:00000000000035FF                 pop     r13
.text:0000000000003601                 pop     r14
.text:0000000000003603                 pop     r15
.text:0000000000003605                 retn
.text:0000000000003605 ; ---------------------------------------------------------------------------
.text:0000000000003606                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: do_wipefd+9C↑j
.text:0000000000003610                 cmp     eax, 8000h
.text:0000000000003615                 jz      loc_3880
.text:000000000000361B
.text:000000000000361B loc_361B:                               ; CODE XREF: do_wipefd+379↓j
.text:000000000000361B                 mov     rdi, [rbx+8]
.text:000000000000361F                 mov     edx, 4
.text:0000000000003624                 xor     ecx, ecx
.text:0000000000003626                 mov     rax, rdx
.text:0000000000003629                 mul     rdi
.text:000000000000362C                 jo      loc_3C07
.text:0000000000003632
.text:0000000000003632 loc_3632:                               ; CODE XREF: do_wipefd+6FC↓j
.text:0000000000003632                 test    rax, rax
.text:0000000000003635                 js      loc_3C16
.text:000000000000363B                 test    rcx, rcx
.text:000000000000363E                 jnz     loc_3C16
.text:0000000000003644                 shl     rdi, 2
.text:0000000000003648                 call    xmalloc
.text:000000000000364D                 mov     [rsp+148h+dest], rax
.text:0000000000003652                 mov     rax, [rbx+10h]
.text:0000000000003656                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000365A                 mov     [rsp+148h+var_108], rax
.text:000000000000365F                 jz      loc_3760
.text:0000000000003665                 mov     rax, [rbx+8]
.text:0000000000003669                 mov     [rsp+148h+var_110], rax
.text:000000000000366E                 mov     eax, [rsp+148h+stat_buf.st_mode]
.text:0000000000003675                 and     eax, 0F000h
.text:000000000000367A                 cmp     eax, 8000h
.text:000000000000367F                 jz      loc_39CF
.text:0000000000003685
.text:0000000000003685 loc_3685:                               ; CODE XREF: do_wipefd+503↓j
.text:0000000000003685                 cmp     [rsp+148h+var_110], 0
.text:000000000000368B                 mov     [rsp+148h+var_100], 0
.text:0000000000003694                 jz      loc_38B9
.text:000000000000369A
.text:000000000000369A loc_369A:                               ; CODE XREF: do_wipefd+304↓j
.text:000000000000369A                                         ; do_wipefd+5CD↓j ...
.text:000000000000369A                 mov     r12, [rsp+148h+dest]
.text:000000000000369F                 xor     ecx, ecx
.text:00000000000036A1                 mov     r14, [rsp+148h+var_110]
.text:00000000000036A6                 mov     eax, 0FFFFFFFEh
.text:00000000000036AB                 lea     r13, patterns
.text:00000000000036B2                 mov     [rsp+148h+var_F8], rbx
.text:00000000000036B7                 mov     r8, r12
.text:00000000000036BA                 mov     r12, rcx
.text:00000000000036BD                 jmp     short loc_36E3
.text:00000000000036BD ; ---------------------------------------------------------------------------
.text:00000000000036BF                 align 20h
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: do_wipefd+1D5↓j
.text:00000000000036C0                 lea     r13, unk_A624
.text:00000000000036C7                 mov     eax, 0FFFFFFFEh
.text:00000000000036CC
.text:00000000000036CC loc_36CC:                               ; CODE XREF: do_wipefd+1DD↓j
.text:00000000000036CC                 neg     eax
.text:00000000000036CE                 cdqe
.text:00000000000036D0                 cmp     rax, r14
.text:00000000000036D3                 jnb     loc_3A18
.text:00000000000036D9                 add     r12, rax
.text:00000000000036DC                 sub     r14, rax
.text:00000000000036DF
.text:00000000000036DF loc_36DF:                               ; CODE XREF: do_wipefd+20D↓j
.text:00000000000036DF                 mov     eax, [r13+0]
.text:00000000000036E3
.text:00000000000036E3 loc_36E3:                               ; CODE XREF: do_wipefd+1AD↑j
.text:00000000000036E3                 test    eax, eax
.text:00000000000036E5                 jz      short loc_36C0
.text:00000000000036E7                 add     r13, 4
.text:00000000000036EB                 test    eax, eax
.text:00000000000036ED                 js      short loc_36CC
.text:00000000000036EF                 movsxd  r15, eax
.text:00000000000036F2                 cmp     r15, r14
.text:00000000000036F5                 ja      loc_3AF8
.text:00000000000036FB                 lea     rbx, ds:0[r15*4]
.text:0000000000003703                 mov     rsi, r13        ; src
.text:0000000000003706                 mov     rdi, r8         ; dest
.text:0000000000003709                 sub     r14, r15
.text:000000000000370C                 mov     rdx, rbx        ; n
.text:000000000000370F                 add     r13, rbx
.text:0000000000003712                 call    _memcpy
.text:0000000000003717                 mov     r8, rax
.text:000000000000371A                 add     r8, rbx
.text:000000000000371D                 jmp     short loc_36DF
.text:000000000000371D ; ---------------------------------------------------------------------------
.text:000000000000371F                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: do_wipefd+69↑j
.text:0000000000003720                 lea     rsi, aSFstatFailed ; "%s: fstat failed"
.text:0000000000003727                 mov     edx, 5          ; category
.text:000000000000372C                 xor     edi, edi        ; domainname
.text:000000000000372E                 call    _dcgettext
.text:0000000000003733                 mov     rbx, rax
.text:0000000000003736                 call    ___errno_location
.text:000000000000373B                 mov     rcx, [rsp+148h+var_148]
.text:000000000000373F                 mov     esi, [rax]      ; errnum
.text:0000000000003741                 mov     rdx, rbx        ; format
.text:0000000000003744                 xor     edi, edi        ; status
.text:0000000000003746                 xor     eax, eax
.text:0000000000003748                 call    _error
.text:000000000000374D                 mov     [rsp+148h+var_121], 0
.text:0000000000003752                 jmp     loc_35D8
.text:0000000000003752 ; ---------------------------------------------------------------------------
.text:0000000000003757                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: do_wipefd+14F↑j
.text:0000000000003760                 mov     eax, [rsp+148h+stat_buf.st_mode]
.text:0000000000003767                 and     eax, 0F000h
.text:000000000000376C                 cmp     eax, 8000h
.text:0000000000003771                 jnz     loc_3B6D
.text:0000000000003777                 mov     rax, [rsp+148h+stat_buf.st_size]
.text:000000000000377F                 mov     rcx, [rbx+8]
.text:0000000000003783                 mov     [rsp+148h+var_108], rax
.text:0000000000003788                 movzx   eax, byte ptr [rbx+1Dh]
.text:000000000000378C                 mov     [rsp+148h+var_110], rcx
.text:0000000000003791                 test    al, al
.text:0000000000003793                 mov     byte ptr [rsp+148h+var_130], al
.text:0000000000003797                 jnz     loc_3AD1
.text:000000000000379D                 mov     rcx, [rsp+148h+stat_buf.st_blksize]
.text:00000000000037A5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:00000000000037AF                 lea     rdx, [rcx-1]
.text:00000000000037B3                 cmp     rdx, rax
.text:00000000000037B6                 mov     eax, 200h
.text:00000000000037BB                 cmova   rcx, rax
.text:00000000000037BF                 mov     rax, [rsp+148h+var_108]
.text:00000000000037C4                 cqo
.text:00000000000037C6                 idiv    rcx
.text:00000000000037C9                 mov     rax, [rsp+148h+var_108]
.text:00000000000037CE                 cmp     rcx, rax
.text:00000000000037D1                 jle     loc_3BEF
.text:00000000000037D7                 test    rax, rax
.text:00000000000037DA                 mov     [rsp+148h+var_100], rax
.text:00000000000037DF                 jz      loc_3BEF
.text:00000000000037E5
.text:00000000000037E5 loc_37E5:                               ; CODE XREF: do_wipefd+6E8↓j
.text:00000000000037E5                 test    rdx, rdx
.text:00000000000037E8                 jz      short loc_380E
.text:00000000000037EA                 mov     rdi, [rsp+148h+var_108]
.text:00000000000037EF                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:00000000000037F9                 sub     rcx, rdx
.text:00000000000037FC                 sub     rax, rdi
.text:00000000000037FF                 cmp     rax, rcx
.text:0000000000003802                 cmovle  rcx, rax
.text:0000000000003806                 add     rdi, rcx
.text:0000000000003809                 mov     [rsp+148h+var_108], rdi
.text:000000000000380E
.text:000000000000380E loc_380E:                               ; CODE XREF: do_wipefd+2D8↑j
.text:000000000000380E                                         ; do_wipefd+4FD↓j
.text:000000000000380E                 cmp     [rsp+148h+var_110], 0
.text:0000000000003814                 jnz     loc_369A
.text:000000000000381A                 nop     word ptr [rax+rax+00h]
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: do_wipefd+5BC↓j
.text:0000000000003820                 mov     rdi, [rsp+148h+var_118]
.text:0000000000003825                 call    randint_get_source
.text:000000000000382A                 mov     r14, rax
.text:000000000000382D                 mov     rax, [rsp+148h+var_100]
.text:0000000000003832                 test    rax, rax
.text:0000000000003835                 jz      loc_3BFD
.text:000000000000383B                 mov     [rsp+148h+var_E0], rax
.text:0000000000003840                 mov     rdx, [rbx+8]
.text:0000000000003844                 xor     r13d, r13d
.text:0000000000003847                 mov     byte ptr [rsp+148h+var_130], 1
.text:000000000000384C                 jmp     loc_38F8
.text:000000000000384C ; ---------------------------------------------------------------------------
.text:0000000000003851                 align 8
.text:0000000000003858
.text:0000000000003858 loc_3858:                               ; CODE XREF: do_wipefd+80↑j
.text:0000000000003858                 mov     edi, ebp        ; fd
.text:000000000000385A                 call    _isatty
.text:000000000000385F                 test    eax, eax
.text:0000000000003861                 jnz     loc_35AE
.text:0000000000003867                 mov     eax, [rsp+148h+stat_buf.st_mode]
.text:000000000000386E                 and     eax, 0F000h
.text:0000000000003873                 jmp     loc_3596
.text:0000000000003873 ; ---------------------------------------------------------------------------
.text:0000000000003878                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: do_wipefd+105↑j
.text:0000000000003880                 cmp     [rsp+148h+stat_buf.st_size], 0
.text:0000000000003889                 jns     loc_361B
.text:000000000000388F                 lea     rsi, aSFileHasNegati ; "%s: file has negative size"
.text:0000000000003896                 xor     edi, edi        ; domainname
.text:0000000000003898                 mov     edx, 5          ; category
.text:000000000000389D                 call    _dcgettext
.text:00000000000038A2                 mov     rcx, [rsp+148h+var_148]
.text:00000000000038A6                 mov     rdx, rax        ; format
.text:00000000000038A9                 xor     esi, esi        ; errnum
.text:00000000000038AB                 xor     edi, edi        ; status
.text:00000000000038AD                 xor     eax, eax
.text:00000000000038AF                 call    _error
.text:00000000000038B4                 jmp     loc_35D8
.text:00000000000038B9 ; ---------------------------------------------------------------------------
.text:00000000000038B9
.text:00000000000038B9 loc_38B9:                               ; CODE XREF: do_wipefd+184↑j
.text:00000000000038B9                 mov     rdi, [rsp+148h+var_118]
.text:00000000000038BE                 call    randint_get_source
.text:00000000000038C3                 mov     byte ptr [rsp+148h+var_130], 1
.text:00000000000038C8                 mov     r14, rax
.text:00000000000038CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: do_wipefd+451↓j
.text:00000000000038D0                                         ; do_wipefd+5E0↓j ...
.text:00000000000038D0                 cmp     [rsp+148h+var_108], 0
.text:00000000000038D6                 jz      loc_3BA4
.text:00000000000038DC                 mov     rdx, [rbx+8]
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: do_wipefd+6C6↓j
.text:00000000000038E0                 mov     rax, [rsp+148h+var_108]
.text:00000000000038E5                 mov     r13, [rsp+148h+var_120]
.text:00000000000038EA                 mov     [rsp+148h+var_108], 0
.text:00000000000038F3                 mov     [rsp+148h+var_E0], rax
.text:00000000000038F8
.text:00000000000038F8 loc_38F8:                               ; CODE XREF: do_wipefd+33C↑j
.text:00000000000038F8                 lea     r12, [rsp+148h+var_E0]
.text:00000000000038FD                 xor     r15d, r15d
.text:0000000000003900                 mov     rax, r12
.text:0000000000003903                 mov     r12, r15
.text:0000000000003906                 mov     r15, rbx
.text:0000000000003909                 mov     rbx, rax
.text:000000000000390C                 jmp     short loc_3951
.text:000000000000390C ; ---------------------------------------------------------------------------
.text:000000000000390E                 align 10h
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: do_wipefd+44C↓j
.text:0000000000003910                 xor     r8d, r8d
.text:0000000000003913                 cmp     r12, rdx
.text:0000000000003916                 jnb     short loc_3921
.text:0000000000003918                 mov     rax, [rsp+148h+dest]
.text:000000000000391D                 mov     r8d, [rax+r12*4]
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: do_wipefd+406↑j
.text:0000000000003921                 add     r12, 1
.text:0000000000003925                 push    r13             ; __int64
.text:0000000000003927                 mov     rcx, rbx
.text:000000000000392A                 push    r12             ; __int64
.text:000000000000392C                 mov     rdx, [rsp+158h+var_148]
.text:0000000000003931                 mov     r9, r14
.text:0000000000003934                 mov     rsi, [rsp+158h+var_140]
.text:0000000000003939                 mov     edi, ebp        ; fd
.text:000000000000393B                 call    dopass
.text:0000000000003940                 test    eax, eax
.text:0000000000003942                 pop     rdx
.text:0000000000003943                 pop     rcx
.text:0000000000003944                 jz      short loc_394D
.text:0000000000003946                 js      short loc_39C0
.text:0000000000003948                 mov     byte ptr [rsp+148h+var_130], 0
.text:000000000000394D
.text:000000000000394D loc_394D:                               ; CODE XREF: do_wipefd+434↑j
.text:000000000000394D                 mov     rdx, [r15+8]
.text:0000000000003951
.text:0000000000003951 loc_3951:                               ; CODE XREF: do_wipefd+3FC↑j
.text:0000000000003951                 movzx   eax, byte ptr [r15+1Eh]
.text:0000000000003956                 add     rax, rdx
.text:0000000000003959                 cmp     rax, r12
.text:000000000000395C                 ja      short loc_3910
.text:000000000000395E                 mov     rbx, r15
.text:0000000000003961                 jmp     loc_38D0
.text:0000000000003966 ; ---------------------------------------------------------------------------
.text:0000000000003966
.text:0000000000003966 loc_3966:                               ; CODE XREF: do_wipefd+699↓j
.text:0000000000003966                 xor     esi, esi        ; length
.text:0000000000003968                 mov     edi, ebp        ; fd
.text:000000000000396A                 call    _ftruncate
.text:000000000000396F                 test    eax, eax
.text:0000000000003971                 jz      loc_3BAF
.text:0000000000003977                 mov     eax, [rsp+148h+stat_buf.st_mode]
.text:000000000000397E                 and     eax, 0F000h
.text:0000000000003983                 cmp     eax, 8000h
.text:0000000000003988                 jnz     loc_3BAF
.text:000000000000398E                 lea     rsi, aSErrorTruncati ; "%s: error truncating"
.text:0000000000003995                 mov     edx, 5          ; category
.text:000000000000399A                 xor     edi, edi        ; domainname
.text:000000000000399C                 call    _dcgettext
.text:00000000000039A1                 mov     rbx, rax
.text:00000000000039A4                 call    ___errno_location
.text:00000000000039A9                 mov     rcx, [rsp+148h+var_148]
.text:00000000000039AD                 mov     esi, [rax]      ; errnum
.text:00000000000039AF                 mov     rdx, rbx        ; format
.text:00000000000039B2                 xor     edi, edi        ; status
.text:00000000000039B4                 xor     eax, eax
.text:00000000000039B6                 call    _error
.text:00000000000039BB                 nop     dword ptr [rax+rax+00h]
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: do_wipefd+436↑j
.text:00000000000039C0                                         ; do_wipefd+6A8↓j
.text:00000000000039C0                 mov     rdi, [rsp+148h+dest] ; ptr
.text:00000000000039C5                 call    _free
.text:00000000000039CA                 jmp     loc_35D8
.text:00000000000039CF ; ---------------------------------------------------------------------------
.text:00000000000039CF
.text:00000000000039CF loc_39CF:                               ; CODE XREF: do_wipefd+16F↑j
.text:00000000000039CF                 mov     rax, [rsp+148h+stat_buf.st_blksize]
.text:00000000000039D7                 mov     rdx, 1FFFFFFFFFFFFFFFh
.text:00000000000039E1                 mov     rdi, [rsp+148h+stat_buf.st_size]
.text:00000000000039E9                 lea     rcx, [rax-1]
.text:00000000000039ED                 mov     [rsp+148h+var_100], rdi
.text:00000000000039F2                 cmp     rcx, rdx
.text:00000000000039F5                 mov     rcx, [rsp+148h+var_108]
.text:00000000000039FA                 mov     edx, 200h
.text:00000000000039FF                 cmova   rax, rdx
.text:0000000000003A03                 cmp     rax, rcx
.text:0000000000003A06                 cmovg   rax, rcx
.text:0000000000003A0A                 cmp     rdi, rax
.text:0000000000003A0D                 jl      loc_380E
.text:0000000000003A13                 jmp     loc_3685
.text:0000000000003A18 ; ---------------------------------------------------------------------------
.text:0000000000003A18
.text:0000000000003A18 loc_3A18:                               ; CODE XREF: do_wipefd+1C3↑j
.text:0000000000003A18                 mov     rbx, [rsp+148h+var_F8]
.text:0000000000003A1D                 add     r12, r14
.text:0000000000003A20                 mov     [rsp+148h+var_130], r12
.text:0000000000003A25
.text:0000000000003A25 loc_3A25:                               ; CODE XREF: do_wipefd+64E↓j
.text:0000000000003A25                                         ; do_wipefd+658↓j
.text:0000000000003A25                 mov     rax, [rsp+148h+var_110]
.text:0000000000003A2A                 mov     rsi, [rsp+148h+var_130]
.text:0000000000003A2F                 xor     r12d, r12d
.text:0000000000003A32                 mov     dword ptr [rsp+148h+var_F8], ebp
.text:0000000000003A36                 mov     [rsp+148h+var_F0], rbx
.text:0000000000003A3B                 mov     r14, [rsp+148h+dest]
.text:0000000000003A40                 lea     rdx, [rsi-1]
.text:0000000000003A44                 mov     r15, rax
.text:0000000000003A47                 lea     r8, [rax-1]
.text:0000000000003A4B                 sub     r15, rsi
.text:0000000000003A4E                 mov     rbx, r15
.text:0000000000003A51                 mov     r13, rdx
.text:0000000000003A54                 mov     rbp, rdx
.text:0000000000003A57                 mov     r15, r8
.text:0000000000003A5A                 jmp     short loc_3A81
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5C                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: do_wipefd+578↓j
.text:0000000000003A60                 add     r13, r15
.text:0000000000003A63                 mov     [r14+rbx*4], r9d
.text:0000000000003A67                 mov     dword ptr [r14+r12*4], 0FFFFFFFFh
.text:0000000000003A6F                 add     rbx, 1
.text:0000000000003A73                 sub     r13, rbp
.text:0000000000003A76                 add     r12, 1
.text:0000000000003A7A                 cmp     r12, [rsp+148h+var_110]
.text:0000000000003A7F                 jz      short loc_3AC3
.text:0000000000003A81
.text:0000000000003A81 loc_3A81:                               ; CODE XREF: do_wipefd+54A↑j
.text:0000000000003A81                                         ; do_wipefd+5B1↓j
.text:0000000000003A81                 cmp     r13, rbp
.text:0000000000003A84                 mov     r9d, [r14+r12*4]
.text:0000000000003A88                 jbe     short loc_3A60
.text:0000000000003A8A                 lea     rsi, [rbx-1]
.text:0000000000003A8E                 mov     rdi, [rsp+148h+var_118]
.text:0000000000003A93                 mov     dword ptr [rsp+148h+var_130], r9d
.text:0000000000003A98                 sub     r13, rbp
.text:0000000000003A9B                 sub     rsi, r12
.text:0000000000003A9E                 call    randint_genmax
.text:0000000000003AA3                 add     rax, r12
.text:0000000000003AA6                 mov     r9d, dword ptr [rsp+148h+var_130]
.text:0000000000003AAB                 lea     rax, [r14+rax*4]
.text:0000000000003AAF                 mov     esi, [rax]
.text:0000000000003AB1                 mov     [r14+r12*4], esi
.text:0000000000003AB5                 add     r12, 1
.text:0000000000003AB9                 cmp     r12, [rsp+148h+var_110]
.text:0000000000003ABE                 mov     [rax], r9d
.text:0000000000003AC1                 jnz     short loc_3A81
.text:0000000000003AC3
.text:0000000000003AC3 loc_3AC3:                               ; CODE XREF: do_wipefd+56F↑j
.text:0000000000003AC3                 mov     ebp, dword ptr [rsp+148h+var_F8]
.text:0000000000003AC7                 mov     rbx, [rsp+148h+var_F0]
.text:0000000000003ACC                 jmp     loc_3820
.text:0000000000003AD1 ; ---------------------------------------------------------------------------
.text:0000000000003AD1
.text:0000000000003AD1 loc_3AD1:                               ; CODE XREF: do_wipefd+287↑j
.text:0000000000003AD1                 test    rcx, rcx
.text:0000000000003AD4                 mov     [rsp+148h+var_100], 0
.text:0000000000003ADD                 jnz     loc_369A
.text:0000000000003AE3                 mov     rdi, [rsp+148h+var_118]
.text:0000000000003AE8                 call    randint_get_source
.text:0000000000003AED                 mov     r14, rax
.text:0000000000003AF0                 jmp     loc_38D0
.text:0000000000003AF0 ; ---------------------------------------------------------------------------
.text:0000000000003AF5                 align 8
.text:0000000000003AF8
.text:0000000000003AF8 loc_3AF8:                               ; CODE XREF: do_wipefd+1E5↑j
.text:0000000000003AF8                 cmp     r14, 1
.text:0000000000003AFC                 mov     [rsp+148h+var_130], r12
.text:0000000000003B01                 mov     rbx, [rsp+148h+var_F8]
.text:0000000000003B06                 jbe     short loc_3B63
.text:0000000000003B08                 lea     rax, [r14+r14*2]
.text:0000000000003B0C                 cmp     r15, rax
.text:0000000000003B0F                 ja      short loc_3B63
.text:0000000000003B11                 mov     [rsp+148h+var_F8], rbx
.text:0000000000003B16                 mov     rbx, r8
.text:0000000000003B19                 jmp     short loc_3B2A
.text:0000000000003B19 ; ---------------------------------------------------------------------------
.text:0000000000003B1B                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: do_wipefd+647↓j
.text:0000000000003B20                 lea     r12, [r15-1]
.text:0000000000003B24                 mov     rbx, rcx
.text:0000000000003B27
.text:0000000000003B27 loc_3B27:                               ; CODE XREF: do_wipefd+637↓j
.text:0000000000003B27                 mov     r15, r12
.text:0000000000003B2A
.text:0000000000003B2A loc_3B2A:                               ; CODE XREF: do_wipefd+609↑j
.text:0000000000003B2A                 add     r13, 4
.text:0000000000003B2E                 cmp     r14, r15
.text:0000000000003B31                 jz      short loc_3B49
.text:0000000000003B33                 lea     r12, [r15-1]
.text:0000000000003B37                 mov     rdi, [rsp+148h+var_118]
.text:0000000000003B3C                 mov     rsi, r12
.text:0000000000003B3F                 call    randint_genmax
.text:0000000000003B44                 cmp     r14, rax
.text:0000000000003B47                 jbe     short loc_3B27
.text:0000000000003B49
.text:0000000000003B49 loc_3B49:                               ; CODE XREF: do_wipefd+621↑j
.text:0000000000003B49                 mov     eax, [r13-4]
.text:0000000000003B4D                 sub     r14, 1
.text:0000000000003B51                 lea     rcx, [rbx+4]
.text:0000000000003B55                 mov     [rbx], eax
.text:0000000000003B57                 jnz     short loc_3B20
.text:0000000000003B59                 mov     rbx, [rsp+148h+var_F8]
.text:0000000000003B5E                 jmp     loc_3A25
.text:0000000000003B63 ; ---------------------------------------------------------------------------
.text:0000000000003B63
.text:0000000000003B63 loc_3B63:                               ; CODE XREF: do_wipefd+5F6↑j
.text:0000000000003B63                                         ; do_wipefd+5FF↑j
.text:0000000000003B63                 add     [rsp+148h+var_130], r14
.text:0000000000003B68                 jmp     loc_3A25
.text:0000000000003B6D ; ---------------------------------------------------------------------------
.text:0000000000003B6D
.text:0000000000003B6D loc_3B6D:                               ; CODE XREF: do_wipefd+261↑j
.text:0000000000003B6D                 xor     esi, esi        ; offset
.text:0000000000003B6F                 mov     edx, 2          ; whence
.text:0000000000003B74                 mov     edi, ebp        ; fd
.text:0000000000003B76                 call    _lseek
.text:0000000000003B7B                 mov     r12, rax
.text:0000000000003B7E                 mov     rax, [rbx+8]
.text:0000000000003B82                 test    r12, r12
.text:0000000000003B85                 mov     [rsp+148h+var_110], rax
.text:0000000000003B8A                 jle     short loc_3BBD
.text:0000000000003B8C                 test    rax, rax
.text:0000000000003B8F                 jz      short loc_3BDB
.text:0000000000003B91                 mov     [rsp+148h+var_108], r12
.text:0000000000003B96
.text:0000000000003B96 loc_3B96:                               ; CODE XREF: do_wipefd+6B0↓j
.text:0000000000003B96                 mov     [rsp+148h+var_100], 0
.text:0000000000003B9F                 jmp     loc_369A
.text:0000000000003BA4 ; ---------------------------------------------------------------------------
.text:0000000000003BA4
.text:0000000000003BA4 loc_3BA4:                               ; CODE XREF: do_wipefd+3C6↑j
.text:0000000000003BA4                 mov     eax, [rbx+18h]
.text:0000000000003BA7                 test    eax, eax
.text:0000000000003BA9                 jnz     loc_3966
.text:0000000000003BAF
.text:0000000000003BAF loc_3BAF:                               ; CODE XREF: do_wipefd+461↑j
.text:0000000000003BAF                                         ; do_wipefd+478↑j
.text:0000000000003BAF                 movzx   eax, byte ptr [rsp+148h+var_130]
.text:0000000000003BB4                 mov     [rsp+148h+var_121], al
.text:0000000000003BB8                 jmp     loc_39C0
.text:0000000000003BBD ; ---------------------------------------------------------------------------
.text:0000000000003BBD
.text:0000000000003BBD loc_3BBD:                               ; CODE XREF: do_wipefd+67A↑j
.text:0000000000003BBD                 test    rax, rax
.text:0000000000003BC0                 jnz     short loc_3B96
.text:0000000000003BC2                 mov     rdi, [rsp+148h+var_118]
.text:0000000000003BC7                 call    randint_get_source
.text:0000000000003BCC                 mov     r14, rax
.text:0000000000003BCF
.text:0000000000003BCF loc_3BCF:                               ; CODE XREF: do_wipefd+6DD↓j
.text:0000000000003BCF                 xor     edx, edx
.text:0000000000003BD1                 mov     byte ptr [rsp+148h+var_130], 1
.text:0000000000003BD6                 jmp     loc_38E0
.text:0000000000003BDB ; ---------------------------------------------------------------------------
.text:0000000000003BDB
.text:0000000000003BDB loc_3BDB:                               ; CODE XREF: do_wipefd+67F↑j
.text:0000000000003BDB                 mov     rdi, [rsp+148h+var_118]
.text:0000000000003BE0                 call    randint_get_source
.text:0000000000003BE5                 mov     [rsp+148h+var_108], r12
.text:0000000000003BEA                 mov     r14, rax
.text:0000000000003BED                 jmp     short loc_3BCF
.text:0000000000003BEF ; ---------------------------------------------------------------------------
.text:0000000000003BEF
.text:0000000000003BEF loc_3BEF:                               ; CODE XREF: do_wipefd+2C1↑j
.text:0000000000003BEF                                         ; do_wipefd+2CF↑j
.text:0000000000003BEF                 mov     [rsp+148h+var_100], 0
.text:0000000000003BF8                 jmp     loc_37E5
.text:0000000000003BFD ; ---------------------------------------------------------------------------
.text:0000000000003BFD
.text:0000000000003BFD loc_3BFD:                               ; CODE XREF: do_wipefd+325↑j
.text:0000000000003BFD                 mov     byte ptr [rsp+148h+var_130], 1
.text:0000000000003C02                 jmp     loc_38D0
.text:0000000000003C07 ; ---------------------------------------------------------------------------
.text:0000000000003C07
.text:0000000000003C07 loc_3C07:                               ; CODE XREF: do_wipefd+11C↑j
.text:0000000000003C07                 mov     ecx, 1
.text:0000000000003C0C                 jmp     loc_3632
.text:0000000000003C11 ; ---------------------------------------------------------------------------
.text:0000000000003C11
.text:0000000000003C11 loc_3C11:                               ; CODE XREF: do_wipefd+DE↑j
.text:0000000000003C11                 call    ___stack_chk_fail
.text:0000000000003C16 ; ---------------------------------------------------------------------------
.text:0000000000003C16
.text:0000000000003C16 loc_3C16:                               ; CODE XREF: do_wipefd+125↑j
.text:0000000000003C16                                         ; do_wipefd+12E↑j
.text:0000000000003C16                 call    xalloc_die
.text:0000000000003C16 ; } // starts at 3510
.text:0000000000003C16 do_wipefd       endp
.text:0000000000003C16
.text:0000000000003C16 ; ---------------------------------------------------------------------------
.text:0000000000003C1B                 align 20h
.text:0000000000003C20
.text:0000000000003C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C20
.text:0000000000003C20 ; Attributes: noreturn
.text:0000000000003C20
.text:0000000000003C20 ; void __fastcall __noreturn usage(int status)
.text:0000000000003C20                 public usage
.text:0000000000003C20 usage           proc near               ; CODE XREF: main+857↑p
.text:0000000000003C20                                         ; main+882↑p ...
.text:0000000000003C20
.text:0000000000003C20 var_A8          = qword ptr -0A8h
.text:0000000000003C20 var_A0          = qword ptr -0A0h
.text:0000000000003C20 var_98          = qword ptr -98h
.text:0000000000003C20 var_90          = qword ptr -90h
.text:0000000000003C20 var_88          = qword ptr -88h
.text:0000000000003C20 var_80          = qword ptr -80h
.text:0000000000003C20 var_78          = qword ptr -78h
.text:0000000000003C20 var_70          = qword ptr -70h
.text:0000000000003C20 var_68          = qword ptr -68h
.text:0000000000003C20 var_60          = qword ptr -60h
.text:0000000000003C20 var_58          = qword ptr -58h
.text:0000000000003C20 var_50          = qword ptr -50h
.text:0000000000003C20 var_48          = qword ptr -48h
.text:0000000000003C20 var_40          = qword ptr -40h
.text:0000000000003C20 var_30          = qword ptr -30h
.text:0000000000003C20
.text:0000000000003C20 ; __unwind {
.text:0000000000003C20                 push    r13
.text:0000000000003C22                 push    r12
.text:0000000000003C24                 mov     edx, 5          ; category
.text:0000000000003C29                 push    rbp
.text:0000000000003C2A                 push    rbx
.text:0000000000003C2B                 mov     ebp, edi
.text:0000000000003C2D                 sub     rsp, 88h
.text:0000000000003C34                 mov     rbx, cs:program_name
.text:0000000000003C3B                 mov     rax, fs:28h
.text:0000000000003C44                 mov     [rsp+0A8h+var_30], rax
.text:0000000000003C49                 xor     eax, eax
.text:0000000000003C4B                 test    edi, edi
.text:0000000000003C4D                 jz      short loc_3C7D
.text:0000000000003C4F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000003C56                 xor     edi, edi        ; domainname
.text:0000000000003C58                 call    _dcgettext
.text:0000000000003C5D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003C64                 mov     rdx, rax
.text:0000000000003C67                 mov     rcx, rbx
.text:0000000000003C6A                 mov     esi, 1
.text:0000000000003C6F                 xor     eax, eax
.text:0000000000003C71                 call    ___fprintf_chk
.text:0000000000003C76
.text:0000000000003C76 loc_3C76:                               ; CODE XREF: usage+3F6↓j
.text:0000000000003C76                 mov     edi, ebp        ; status
.text:0000000000003C78                 call    _exit
.text:0000000000003C7D ; ---------------------------------------------------------------------------
.text:0000000000003C7D
.text:0000000000003C7D loc_3C7D:                               ; CODE XREF: usage+2D↑j
.text:0000000000003C7D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:0000000000003C84                 xor     edi, edi        ; domainname
.text:0000000000003C86                 call    _dcgettext
.text:0000000000003C8B                 mov     rdx, rbx
.text:0000000000003C8E                 mov     rsi, rax
.text:0000000000003C91                 mov     edi, 1
.text:0000000000003C96                 xor     eax, eax
.text:0000000000003C98                 call    ___printf_chk
.text:0000000000003C9D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CA4                 lea     rsi, aOverwriteTheSp ; "Overwrite the specified FILE(s) repeate"...
.text:0000000000003CAB                 mov     edx, 5          ; category
.text:0000000000003CB0                 xor     edi, edi        ; domainname
.text:0000000000003CB2                 call    _dcgettext
.text:0000000000003CB7                 mov     rsi, rbx        ; stream
.text:0000000000003CBA                 mov     rdi, rax        ; s
.text:0000000000003CBD                 call    _fputs_unlocked
.text:0000000000003CC2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CC9                 lea     rsi, aIfFileIsShredS ; "\nIf FILE is -, shred standard output."...
.text:0000000000003CD0                 mov     edx, 5          ; category
.text:0000000000003CD5                 xor     edi, edi        ; domainname
.text:0000000000003CD7                 call    _dcgettext
.text:0000000000003CDC                 mov     rsi, rbx        ; stream
.text:0000000000003CDF                 mov     rdi, rax        ; s
.text:0000000000003CE2                 call    _fputs_unlocked
.text:0000000000003CE7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CEE                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003CF5                 mov     edx, 5          ; category
.text:0000000000003CFA                 xor     edi, edi        ; domainname
.text:0000000000003CFC                 call    _dcgettext
.text:0000000000003D01                 mov     rsi, rbx        ; stream
.text:0000000000003D04                 mov     rdi, rax        ; s
.text:0000000000003D07                 call    _fputs_unlocked
.text:0000000000003D0C                 lea     rsi, aFForceChangePe ; "  -f, --force    change permissions to "...
.text:0000000000003D13                 xor     edi, edi        ; domainname
.text:0000000000003D15                 mov     edx, 5          ; category
.text:0000000000003D1A                 call    _dcgettext
.text:0000000000003D1F                 mov     edx, 3
.text:0000000000003D24                 mov     rsi, rax
.text:0000000000003D27                 mov     edi, 1
.text:0000000000003D2C                 xor     eax, eax
.text:0000000000003D2E                 call    ___printf_chk
.text:0000000000003D33                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D3A                 lea     rsi, aUDeallocateAnd ; "  -u             deallocate and remove "...
.text:0000000000003D41                 mov     edx, 5          ; category
.text:0000000000003D46                 xor     edi, edi        ; domainname
.text:0000000000003D48                 call    _dcgettext
.text:0000000000003D4D                 mov     rsi, rbx        ; stream
.text:0000000000003D50                 mov     rdi, rax        ; s
.text:0000000000003D53                 call    _fputs_unlocked
.text:0000000000003D58                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D5F                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000003D66                 mov     edx, 5          ; category
.text:0000000000003D6B                 xor     edi, edi        ; domainname
.text:0000000000003D6D                 call    _dcgettext
.text:0000000000003D72                 mov     rsi, rbx        ; stream
.text:0000000000003D75                 mov     rdi, rax        ; s
.text:0000000000003D78                 call    _fputs_unlocked
.text:0000000000003D7D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D84                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003D8B                 mov     edx, 5          ; category
.text:0000000000003D90                 xor     edi, edi        ; domainname
.text:0000000000003D92                 call    _dcgettext
.text:0000000000003D97                 mov     rsi, rbx        ; stream
.text:0000000000003D9A                 mov     rdi, rax        ; s
.text:0000000000003D9D                 call    _fputs_unlocked
.text:0000000000003DA2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003DA9                 lea     rsi, aDeleteFileSIfR ; "\nDelete FILE(s) if --remove (-u) is sp"...
.text:0000000000003DB0                 mov     edx, 5          ; category
.text:0000000000003DB5                 xor     edi, edi        ; domainname
.text:0000000000003DB7                 call    _dcgettext
.text:0000000000003DBC                 mov     rsi, rbx        ; stream
.text:0000000000003DBF                 mov     rdi, rax        ; s
.text:0000000000003DC2                 call    _fputs_unlocked
.text:0000000000003DC7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003DCE                 lea     rsi, aCautionNoteTha ; "CAUTION: Note that shred relies on a ve"...
.text:0000000000003DD5                 mov     edx, 5          ; category
.text:0000000000003DDA                 xor     edi, edi        ; domainname
.text:0000000000003DDC                 call    _dcgettext
.text:0000000000003DE1                 mov     rsi, rbx        ; stream
.text:0000000000003DE4                 mov     rdi, rax        ; s
.text:0000000000003DE7                 call    _fputs_unlocked
.text:0000000000003DEC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003DF3                 lea     rsi, aLogStructuredO ; "* log-structured or journaled file syst"...
.text:0000000000003DFA                 xor     edi, edi        ; domainname
.text:0000000000003DFC                 mov     edx, 5          ; category
.text:0000000000003E01                 call    _dcgettext
.text:0000000000003E06                 mov     rsi, rbx        ; stream
.text:0000000000003E09                 mov     rdi, rax        ; s
.text:0000000000003E0C                 call    _fputs_unlocked
.text:0000000000003E11                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E18                 lea     rsi, aFileSystemsTha ; "* file systems that cache in temporary "...
.text:0000000000003E1F                 mov     edx, 5          ; category
.text:0000000000003E24                 xor     edi, edi        ; domainname
.text:0000000000003E26                 call    _dcgettext
.text:0000000000003E2B                 mov     rsi, rbx        ; stream
.text:0000000000003E2E                 mov     rdi, rax        ; s
.text:0000000000003E31                 call    _fputs_unlocked
.text:0000000000003E36                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E3D                 lea     rsi, aInTheCaseOfExt ; "In the case of ext3 file systems, the a"...
.text:0000000000003E44                 mov     edx, 5          ; category
.text:0000000000003E49                 xor     edi, edi        ; domainname
.text:0000000000003E4B                 call    _dcgettext
.text:0000000000003E50                 mov     rsi, rbx        ; stream
.text:0000000000003E53                 mov     rdi, rax        ; s
.text:0000000000003E56                 call    _fputs_unlocked
.text:0000000000003E5B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E62                 lea     rsi, aInAdditionFile ; "In addition, file system backups and re"...
.text:0000000000003E69                 mov     edx, 5          ; category
.text:0000000000003E6E                 xor     edi, edi        ; domainname
.text:0000000000003E70                 call    _dcgettext
.text:0000000000003E75                 mov     rsi, rbx        ; stream
.text:0000000000003E78                 mov     rdi, rax        ; s
.text:0000000000003E7B                 lea     rbx, aShred     ; "shred"
.text:0000000000003E82                 call    _fputs_unlocked
.text:0000000000003E87                 lea     rax, asc_967E   ; "["
.text:0000000000003E8E                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000003E95                 mov     [rsp+0A8h+var_48], 0
.text:0000000000003E9E                 mov     [rsp+0A8h+var_40], 0
.text:0000000000003EA7                 mov     rdx, rsp
.text:0000000000003EAA                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000003EAE                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000003EB5                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000003EBA                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003EC1                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000003EC6                 lea     rax, domainname ; "coreutils"
.text:0000000000003ECD                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000003ED2                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000003ED9                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003EDE                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000003EE5                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000003EEA                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003EEF                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000003EF6                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003EFB                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000003F02                 mov     [rsp+0A8h+var_80], rax
.text:0000000000003F07                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003F0C                 mov     [rsp+0A8h+var_60], rax
.text:0000000000003F11                 mov     [rsp+0A8h+var_50], rax
.text:0000000000003F16                 db      2Eh
.text:0000000000003F16                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: usage+31D↓j
.text:0000000000003F20                 add     rdx, 10h
.text:0000000000003F24                 mov     rdi, [rdx]
.text:0000000000003F27                 test    rdi, rdi
.text:0000000000003F2A                 jz      short loc_3F3F
.text:0000000000003F2C                 mov     ecx, 6
.text:0000000000003F31                 mov     rsi, rbx
.text:0000000000003F34                 repe cmpsb
.text:0000000000003F36                 setnbe  al
.text:0000000000003F39                 sbb     al, 0
.text:0000000000003F3B                 test    al, al
.text:0000000000003F3D                 jnz     short loc_3F20
.text:0000000000003F3F
.text:0000000000003F3F loc_3F3F:                               ; CODE XREF: usage+30A↑j
.text:0000000000003F3F                 mov     r12, [rdx+8]
.text:0000000000003F43                 xor     edi, edi        ; domainname
.text:0000000000003F45                 mov     edx, 5          ; category
.text:0000000000003F4A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003F51                 test    r12, r12
.text:0000000000003F54                 jz      loc_401B
.text:0000000000003F5A                 call    _dcgettext
.text:0000000000003F5F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003F66                 lea     rdx, unk_96F4
.text:0000000000003F6D                 mov     rsi, rax
.text:0000000000003F70                 mov     edi, 1
.text:0000000000003F75                 xor     eax, eax
.text:0000000000003F77                 call    ___printf_chk
.text:0000000000003F7C                 xor     esi, esi        ; locale
.text:0000000000003F7E                 mov     edi, 5          ; category
.text:0000000000003F83                 call    _setlocale
.text:0000000000003F88                 test    rax, rax
.text:0000000000003F8B                 jz      short loc_3FA9
.text:0000000000003F8D                 lea     rsi, s2         ; "en_"
.text:0000000000003F94                 mov     edx, 3          ; n
.text:0000000000003F99                 mov     rdi, rax        ; s1
.text:0000000000003F9C                 call    _strncmp
.text:0000000000003FA1                 test    eax, eax
.text:0000000000003FA3                 jnz     loc_40B0
.text:0000000000003FA9
.text:0000000000003FA9 loc_3FA9:                               ; CODE XREF: usage+36B↑j
.text:0000000000003FA9                                         ; usage+4B5↓j
.text:0000000000003FA9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003FB0                 xor     edi, edi        ; domainname
.text:0000000000003FB2                 mov     edx, 5          ; category
.text:0000000000003FB7                 call    _dcgettext
.text:0000000000003FBC                 lea     rcx, aShred     ; "shred"
.text:0000000000003FC3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003FCA                 mov     rsi, rax
.text:0000000000003FCD                 mov     edi, 1
.text:0000000000003FD2                 xor     eax, eax
.text:0000000000003FD4                 call    ___printf_chk
.text:0000000000003FD9                 cmp     r12, rbx
.text:0000000000003FDC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003FE3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000003FEA                 cmovz   rbx, rcx
.text:0000000000003FEE
.text:0000000000003FEE loc_3FEE:                               ; CODE XREF: usage+484↓j
.text:0000000000003FEE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003FF5                 xor     edi, edi        ; domainname
.text:0000000000003FF7                 mov     edx, 5          ; category
.text:0000000000003FFC                 call    _dcgettext
.text:0000000000004001                 mov     rcx, rbx
.text:0000000000004004                 mov     rsi, rax
.text:0000000000004007                 mov     rdx, r12
.text:000000000000400A                 mov     edi, 1
.text:000000000000400F                 xor     eax, eax
.text:0000000000004011                 call    ___printf_chk
.text:0000000000004016                 jmp     loc_3C76
.text:000000000000401B ; ---------------------------------------------------------------------------
.text:000000000000401B
.text:000000000000401B loc_401B:                               ; CODE XREF: usage+334↑j
.text:000000000000401B                 call    _dcgettext
.text:0000000000004020                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004027                 lea     rdx, unk_96F4
.text:000000000000402E                 mov     rsi, rax
.text:0000000000004031                 mov     edi, 1
.text:0000000000004036                 xor     eax, eax
.text:0000000000004038                 call    ___printf_chk
.text:000000000000403D                 xor     esi, esi        ; locale
.text:000000000000403F                 mov     edi, 5          ; category
.text:0000000000004044                 call    _setlocale
.text:0000000000004049                 test    rax, rax
.text:000000000000404C                 jz      short loc_4066
.text:000000000000404E                 lea     rsi, s2         ; "en_"
.text:0000000000004055                 mov     edx, 3          ; n
.text:000000000000405A                 mov     rdi, rax        ; s1
.text:000000000000405D                 call    _strncmp
.text:0000000000004062                 test    eax, eax
.text:0000000000004064                 jnz     short loc_40A9
.text:0000000000004066
.text:0000000000004066 loc_4066:                               ; CODE XREF: usage+42C↑j
.text:0000000000004066                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000406D                 mov     edx, 5          ; category
.text:0000000000004072                 xor     edi, edi        ; domainname
.text:0000000000004074                 lea     r12, aShred     ; "shred"
.text:000000000000407B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004082                 call    _dcgettext
.text:0000000000004087                 lea     rcx, aShred     ; "shred"
.text:000000000000408E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004095                 mov     rsi, rax
.text:0000000000004098                 mov     edi, 1
.text:000000000000409D                 xor     eax, eax
.text:000000000000409F                 call    ___printf_chk
.text:00000000000040A4                 jmp     loc_3FEE
.text:00000000000040A9 ; ---------------------------------------------------------------------------
.text:00000000000040A9
.text:00000000000040A9 loc_40A9:                               ; CODE XREF: usage+444↑j
.text:00000000000040A9                 lea     r12, aShred     ; "shred"
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: usage+383↑j
.text:00000000000040B0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000040B7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000040BE                 xor     edi, edi        ; domainname
.text:00000000000040C0                 mov     edx, 5          ; category
.text:00000000000040C5                 call    _dcgettext
.text:00000000000040CA                 mov     rsi, r13        ; stream
.text:00000000000040CD                 mov     rdi, rax        ; s
.text:00000000000040D0                 call    _fputs_unlocked
.text:00000000000040D5                 jmp     loc_3FA9
.text:00000000000040D5 ; } // starts at 3C20
.text:00000000000040D5 usage           endp
.text:00000000000040D5
.text:00000000000040D5 ; ---------------------------------------------------------------------------
.text:00000000000040DA                 align 20h
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0 ; Attributes: noreturn
.text:00000000000040E0
.text:00000000000040E0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 mov     edi, 1          ; status
.text:00000000000040E5                 jmp     usage
.text:00000000000040E5 ; } // starts at 40E0
.text:00000000000040E5 __argmatch_die  endp
.text:00000000000040E5
.text:00000000000040E5 ; ---------------------------------------------------------------------------
.text:00000000000040EA                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0 ; Attributes: info_from_lumina
.text:00000000000040F0
.text:00000000000040F0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000040F0                 public argmatch
.text:00000000000040F0 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:00000000000040F0                                         ; human_options+52↓p
.text:00000000000040F0
.text:00000000000040F0 var_58          = qword ptr -58h
.text:00000000000040F0 s2              = qword ptr -50h
.text:00000000000040F0 var_41          = byte ptr -41h
.text:00000000000040F0 var_40          = qword ptr -40h
.text:00000000000040F0
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    r15
.text:00000000000040F2                 push    r14
.text:00000000000040F4                 mov     r15, rsi
.text:00000000000040F7                 push    r13
.text:00000000000040F9                 push    r12
.text:00000000000040FB                 mov     r13, rcx
.text:00000000000040FE                 push    rbp
.text:00000000000040FF                 push    rbx
.text:0000000000004100                 mov     rbp, rdx
.text:0000000000004103                 sub     rsp, 28h
.text:0000000000004107                 mov     [rsp+58h+s2], rdi
.text:000000000000410C                 mov     [rsp+58h+var_40], rdx
.text:0000000000004111                 call    _strlen
.text:0000000000004116                 mov     r14, [r15]
.text:0000000000004119                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000004121                 test    r14, r14
.text:0000000000004124                 jz      loc_41DD
.text:000000000000412A                 mov     r12, rax
.text:000000000000412D                 mov     [rsp+58h+var_41], 0
.text:0000000000004132                 xor     ebx, ebx
.text:0000000000004134                 jmp     short loc_4187
.text:0000000000004134 ; ---------------------------------------------------------------------------
.text:0000000000004136                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000004140                 mov     rax, [rsp+58h+var_40]
.text:0000000000004145                 test    rax, rax
.text:0000000000004148                 jz      loc_41F0
.text:000000000000414E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000004152                 mov     rdx, r13        ; n
.text:0000000000004155                 mov     rsi, rbp        ; s2
.text:0000000000004158                 imul    rdi, r13
.text:000000000000415C                 add     rdi, rax        ; s1
.text:000000000000415F                 call    _memcmp
.text:0000000000004164                 test    eax, eax
.text:0000000000004166                 movzx   eax, [rsp+58h+var_41]
.text:000000000000416B                 mov     ecx, 1
.text:0000000000004170                 cmovnz  eax, ecx
.text:0000000000004173                 mov     [rsp+58h+var_41], al
.text:0000000000004177
.text:0000000000004177 loc_4177:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000004177                                         ; argmatch+105↓j
.text:0000000000004177                 add     rbx, 1
.text:000000000000417B                 add     rbp, r13
.text:000000000000417E                 mov     r14, [r15+rbx*8]
.text:0000000000004182                 test    r14, r14
.text:0000000000004185                 jz      short loc_41C8
.text:0000000000004187
.text:0000000000004187 loc_4187:                               ; CODE XREF: argmatch+44↑j
.text:0000000000004187                                         ; argmatch+D1↓j
.text:0000000000004187                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000418C                 mov     rdx, r12        ; n
.text:000000000000418F                 mov     rdi, r14        ; s1
.text:0000000000004192                 call    _strncmp
.text:0000000000004197                 test    eax, eax
.text:0000000000004199                 jnz     short loc_4177
.text:000000000000419B                 mov     rdi, r14        ; s
.text:000000000000419E                 call    _strlen
.text:00000000000041A3                 cmp     rax, r12
.text:00000000000041A6                 jz      short loc_4200
.text:00000000000041A8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000041AD                 jnz     short loc_4140
.text:00000000000041AF                 mov     [rsp+58h+var_58], rbx
.text:00000000000041B3                 add     rbx, 1
.text:00000000000041B7                 add     rbp, r13
.text:00000000000041BA                 mov     r14, [r15+rbx*8]
.text:00000000000041BE                 test    r14, r14
.text:00000000000041C1                 jnz     short loc_4187
.text:00000000000041C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000041C8
.text:00000000000041C8 loc_41C8:                               ; CODE XREF: argmatch+95↑j
.text:00000000000041C8                 cmp     [rsp+58h+var_41], 0
.text:00000000000041CD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000041D4                 cmovz   rax, [rsp+58h+var_58]
.text:00000000000041D9                 mov     [rsp+58h+var_58], rax
.text:00000000000041DD
.text:00000000000041DD loc_41DD:                               ; CODE XREF: argmatch+34↑j
.text:00000000000041DD                                         ; argmatch+114↓j
.text:00000000000041DD                 mov     rax, [rsp+58h+var_58]
.text:00000000000041E1                 add     rsp, 28h
.text:00000000000041E5                 pop     rbx
.text:00000000000041E6                 pop     rbp
.text:00000000000041E7                 pop     r12
.text:00000000000041E9                 pop     r13
.text:00000000000041EB                 pop     r14
.text:00000000000041ED                 pop     r15
.text:00000000000041EF                 retn
.text:00000000000041F0 ; ---------------------------------------------------------------------------
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: argmatch+58↑j
.text:00000000000041F0                 mov     [rsp+58h+var_41], 1
.text:00000000000041F5                 jmp     short loc_4177
.text:00000000000041F5 ; ---------------------------------------------------------------------------
.text:00000000000041F7                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000004200                 mov     [rsp+58h+var_58], rbx
.text:0000000000004204                 jmp     short loc_41DD
.text:0000000000004204 ; } // starts at 40F0
.text:0000000000004204 argmatch        endp
.text:0000000000004204
.text:0000000000004204 ; ---------------------------------------------------------------------------
.text:0000000000004206                 align 10h
.text:0000000000004210
.text:0000000000004210 ; =============== S U B R O U T I N E =======================================
.text:0000000000004210
.text:0000000000004210 ; Attributes: info_from_lumina
.text:0000000000004210
.text:0000000000004210 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000004210                 public argmatch_invalid
.text:0000000000004210 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000004210 ; __unwind {
.text:0000000000004210                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004214                 push    r12
.text:0000000000004216                 mov     edx, 5          ; category
.text:000000000000421B                 push    rbp
.text:000000000000421C                 mov     r12, rsi
.text:000000000000421F                 push    rbx
.text:0000000000004220                 mov     rbp, rdi
.text:0000000000004223                 jz      short loc_4270
.text:0000000000004225                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000422C                 xor     edi, edi        ; domainname
.text:000000000000422E                 call    _dcgettext
.text:0000000000004233                 mov     rbx, rax
.text:0000000000004236
.text:0000000000004236 loc_4236:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000004236                 mov     rsi, rbp
.text:0000000000004239                 mov     edi, 1
.text:000000000000423E                 call    quote_n
.text:0000000000004243                 mov     rdx, r12
.text:0000000000004246                 mov     rbp, rax
.text:0000000000004249                 mov     esi, 8
.text:000000000000424E                 xor     edi, edi
.text:0000000000004250                 call    quotearg_n_style
.text:0000000000004255                 mov     r8, rbp
.text:0000000000004258                 mov     rdx, rbx        ; format
.text:000000000000425B                 mov     rcx, rax
.text:000000000000425E                 pop     rbx
.text:000000000000425F                 pop     rbp
.text:0000000000004260                 pop     r12
.text:0000000000004262                 xor     esi, esi        ; errnum
.text:0000000000004264                 xor     edi, edi        ; status
.text:0000000000004266                 xor     eax, eax
.text:0000000000004268                 jmp     _error
.text:0000000000004268 ; ---------------------------------------------------------------------------
.text:000000000000426D                 align 10h
.text:0000000000004270
.text:0000000000004270 loc_4270:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000004270                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000004277                 xor     edi, edi        ; domainname
.text:0000000000004279                 call    _dcgettext
.text:000000000000427E                 mov     rbx, rax
.text:0000000000004281                 jmp     short loc_4236
.text:0000000000004281 ; } // starts at 4210
.text:0000000000004281 argmatch_invalid endp
.text:0000000000004281
.text:0000000000004281 ; ---------------------------------------------------------------------------
.text:0000000000004283                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000004290                 public argmatch_valid
.text:0000000000004290 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 push    r15
.text:0000000000004292                 push    r14
.text:0000000000004294                 mov     r14, rdi
.text:0000000000004297                 push    r13
.text:0000000000004299                 push    r12
.text:000000000000429B                 xor     edi, edi        ; domainname
.text:000000000000429D                 push    rbp
.text:000000000000429E                 push    rbx
.text:000000000000429F                 mov     rbp, rsi
.text:00000000000042A2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:00000000000042A9                 mov     r12, rdx
.text:00000000000042AC                 mov     edx, 5          ; category
.text:00000000000042B1                 sub     rsp, 8
.text:00000000000042B5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:00000000000042BC                 call    _dcgettext
.text:00000000000042C1                 mov     rdi, rax        ; s
.text:00000000000042C4                 mov     rsi, rbx        ; stream
.text:00000000000042C7                 call    _fputs_unlocked
.text:00000000000042CC                 mov     r15, [r14]
.text:00000000000042CF                 test    r15, r15
.text:00000000000042D2                 jz      loc_4368
.text:00000000000042D8                 xor     r13d, r13d
.text:00000000000042DB                 xor     ebx, ebx
.text:00000000000042DD                 jmp     short loc_4318
.text:00000000000042DD ; ---------------------------------------------------------------------------
.text:00000000000042DF                 align 20h
.text:00000000000042E0
.text:00000000000042E0 loc_42E0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:00000000000042E0                                         ; argmatch_valid+9D↓j
.text:00000000000042E0                 mov     rdi, r15
.text:00000000000042E3                 add     rbx, 1
.text:00000000000042E7                 mov     r13, rbp
.text:00000000000042EA                 call    quote
.text:00000000000042EF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000042F6                 lea     rdx, aS         ; "\n  - %s"
.text:00000000000042FD                 mov     rcx, rax
.text:0000000000004300                 mov     esi, 1
.text:0000000000004305                 xor     eax, eax
.text:0000000000004307                 add     rbp, r12
.text:000000000000430A                 call    ___fprintf_chk
.text:000000000000430F                 mov     r15, [r14+rbx*8]
.text:0000000000004313                 test    r15, r15
.text:0000000000004316                 jz      short loc_4368
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000004318                                         ; argmatch_valid+D2↓j
.text:0000000000004318                 test    rbx, rbx
.text:000000000000431B                 jz      short loc_42E0
.text:000000000000431D                 mov     rdx, r12        ; n
.text:0000000000004320                 mov     rsi, rbp        ; s2
.text:0000000000004323                 mov     rdi, r13        ; s1
.text:0000000000004326                 call    _memcmp
.text:000000000000432B                 test    eax, eax
.text:000000000000432D                 jnz     short loc_42E0
.text:000000000000432F                 mov     rdi, r15
.text:0000000000004332                 add     rbx, 1
.text:0000000000004336                 add     rbp, r12
.text:0000000000004339                 call    quote
.text:000000000000433E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004345                 lea     rdx, aS_0       ; ", %s"
.text:000000000000434C                 mov     rcx, rax
.text:000000000000434F                 mov     esi, 1
.text:0000000000004354                 xor     eax, eax
.text:0000000000004356                 call    ___fprintf_chk
.text:000000000000435B                 mov     r15, [r14+rbx*8]
.text:000000000000435F                 test    r15, r15
.text:0000000000004362                 jnz     short loc_4318
.text:0000000000004364                 nop     dword ptr [rax+00h]
.text:0000000000004368
.text:0000000000004368 loc_4368:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000004368                                         ; argmatch_valid+86↑j
.text:0000000000004368                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000436F                 mov     rax, [rdi+28h]
.text:0000000000004373                 cmp     rax, [rdi+30h]
.text:0000000000004377                 jnb     short loc_4398
.text:0000000000004379                 lea     rdx, [rax+1]
.text:000000000000437D                 mov     [rdi+28h], rdx
.text:0000000000004381                 mov     byte ptr [rax], 0Ah
.text:0000000000004384                 add     rsp, 8
.text:0000000000004388                 pop     rbx
.text:0000000000004389                 pop     rbp
.text:000000000000438A                 pop     r12
.text:000000000000438C                 pop     r13
.text:000000000000438E                 pop     r14
.text:0000000000004390                 pop     r15
.text:0000000000004392                 retn
.text:0000000000004392 ; ---------------------------------------------------------------------------
.text:0000000000004393                 align 8
.text:0000000000004398
.text:0000000000004398 loc_4398:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000004398                 add     rsp, 8
.text:000000000000439C                 mov     esi, 0Ah        ; int
.text:00000000000043A1                 pop     rbx
.text:00000000000043A2                 pop     rbp
.text:00000000000043A3                 pop     r12
.text:00000000000043A5                 pop     r13
.text:00000000000043A7                 pop     r14
.text:00000000000043A9                 pop     r15
.text:00000000000043AB                 jmp     ___overflow
.text:00000000000043AB ; } // starts at 4290
.text:00000000000043AB argmatch_valid  endp
.text:00000000000043AB
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0 ; Attributes: info_from_lumina
.text:00000000000043B0
.text:00000000000043B0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:00000000000043B0                 public __xargmatch_internal
.text:00000000000043B0 __xargmatch_internal proc near          ; CODE XREF: main+232↑p
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 push    r15
.text:00000000000043B2                 push    r14
.text:00000000000043B4                 mov     r14, rdi
.text:00000000000043B7                 push    r13
.text:00000000000043B9                 push    r12
.text:00000000000043BB                 mov     r12, rsi
.text:00000000000043BE                 push    rbp
.text:00000000000043BF                 push    rbx
.text:00000000000043C0                 mov     rbp, rcx
.text:00000000000043C3                 mov     rbx, rdx
.text:00000000000043C6                 mov     rcx, r8
.text:00000000000043C9                 mov     rdx, rbp
.text:00000000000043CC                 sub     rsp, 8
.text:00000000000043D0                 mov     rsi, rbx
.text:00000000000043D3                 mov     rdi, r12
.text:00000000000043D6                 mov     r15, r8
.text:00000000000043D9                 mov     r13, r9
.text:00000000000043DC                 call    argmatch
.text:00000000000043E1                 test    rax, rax
.text:00000000000043E4                 js      short loc_43F5
.text:00000000000043E6
.text:00000000000043E6 loc_43E6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:00000000000043E6                 add     rsp, 8
.text:00000000000043EA                 pop     rbx
.text:00000000000043EB                 pop     rbp
.text:00000000000043EC                 pop     r12
.text:00000000000043EE                 pop     r13
.text:00000000000043F0                 pop     r14
.text:00000000000043F2                 pop     r15
.text:00000000000043F4                 retn
.text:00000000000043F5 ; ---------------------------------------------------------------------------
.text:00000000000043F5
.text:00000000000043F5 loc_43F5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:00000000000043F5                 mov     rdx, rax
.text:00000000000043F8                 mov     rsi, r12
.text:00000000000043FB                 mov     rdi, r14
.text:00000000000043FE                 call    argmatch_invalid
.text:0000000000004403                 mov     rdx, r15
.text:0000000000004406                 mov     rsi, rbp
.text:0000000000004409                 mov     rdi, rbx
.text:000000000000440C                 call    argmatch_valid
.text:0000000000004411                 call    r13
.text:0000000000004414                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000441B                 jmp     short loc_43E6
.text:000000000000441B ; } // starts at 43B0
.text:000000000000441B __xargmatch_internal endp
.text:000000000000441B
.text:000000000000441B ; ---------------------------------------------------------------------------
.text:000000000000441D                 align 20h
.text:0000000000004420
.text:0000000000004420 ; =============== S U B R O U T I N E =======================================
.text:0000000000004420
.text:0000000000004420 ; Attributes: info_from_lumina
.text:0000000000004420
.text:0000000000004420 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000004420                 public argmatch_to_argument
.text:0000000000004420 argmatch_to_argument proc near
.text:0000000000004420 ; __unwind {
.text:0000000000004420                 push    r14
.text:0000000000004422                 push    r13
.text:0000000000004424                 push    r12
.text:0000000000004426                 push    rbp
.text:0000000000004427                 push    rbx
.text:0000000000004428                 mov     r14, [rsi]
.text:000000000000442B                 test    r14, r14
.text:000000000000442E                 jz      short loc_4461
.text:0000000000004430                 mov     r12, rcx
.text:0000000000004433                 mov     r13, rdi
.text:0000000000004436                 mov     rbp, rdx
.text:0000000000004439                 lea     rbx, [rsi+8]
.text:000000000000443D                 jmp     short loc_444F
.text:000000000000443D ; ---------------------------------------------------------------------------
.text:000000000000443F                 align 20h
.text:0000000000004440
.text:0000000000004440 loc_4440:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000004440                 mov     r14, [rbx]
.text:0000000000004443                 add     rbp, r12
.text:0000000000004446                 add     rbx, 8
.text:000000000000444A                 test    r14, r14
.text:000000000000444D                 jz      short loc_4461
.text:000000000000444F
.text:000000000000444F loc_444F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000444F                 mov     rdx, r12        ; n
.text:0000000000004452                 mov     rsi, rbp        ; s2
.text:0000000000004455                 mov     rdi, r13        ; s1
.text:0000000000004458                 call    _memcmp
.text:000000000000445D                 test    eax, eax
.text:000000000000445F                 jnz     short loc_4440
.text:0000000000004461
.text:0000000000004461 loc_4461:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000004461                                         ; argmatch_to_argument+2D↑j
.text:0000000000004461                 pop     rbx
.text:0000000000004462                 mov     rax, r14
.text:0000000000004465                 pop     rbp
.text:0000000000004466                 pop     r12
.text:0000000000004468                 pop     r13
.text:000000000000446A                 pop     r14
.text:000000000000446C                 retn
.text:000000000000446C ; } // starts at 4420
.text:000000000000446C argmatch_to_argument endp
.text:000000000000446C
.text:000000000000446C ; ---------------------------------------------------------------------------
.text:000000000000446D                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470                 public close_stdout_set_file_name
.text:0000000000004470 close_stdout_set_file_name proc near
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 mov     cs:file_name, rdi
.text:0000000000004477                 retn
.text:0000000000004477 ; } // starts at 4470
.text:0000000000004477 close_stdout_set_file_name endp
.text:0000000000004477
.text:0000000000004477 ; ---------------------------------------------------------------------------
.text:0000000000004478                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480
.text:0000000000004480                 public close_stdout_set_ignore_EPIPE
.text:0000000000004480 close_stdout_set_ignore_EPIPE proc near
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 mov     cs:ignore_EPIPE, dil
.text:0000000000004487                 retn
.text:0000000000004487 ; } // starts at 4480
.text:0000000000004487 close_stdout_set_ignore_EPIPE endp
.text:0000000000004487
.text:0000000000004487 ; ---------------------------------------------------------------------------
.text:0000000000004488                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; void __cdecl close_stdout()
.text:0000000000004490                 public close_stdout
.text:0000000000004490 close_stdout    proc near               ; DATA XREF: main+76↑o
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 push    rbp
.text:0000000000004491                 push    rbx
.text:0000000000004492                 sub     rsp, 8
.text:0000000000004496                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000449D                 call    close_stream
.text:00000000000044A2                 test    eax, eax
.text:00000000000044A4                 jz      short loc_44BC
.text:00000000000044A6                 call    ___errno_location
.text:00000000000044AB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000044B2                 mov     rbx, rax
.text:00000000000044B5                 jz      short loc_44D3
.text:00000000000044B7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000044BA                 jnz     short loc_44D3
.text:00000000000044BC
.text:00000000000044BC loc_44BC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000044BC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000044C3                 call    close_stream
.text:00000000000044C8                 test    eax, eax
.text:00000000000044CA                 jnz     short loc_4512
.text:00000000000044CC                 add     rsp, 8
.text:00000000000044D0                 pop     rbx
.text:00000000000044D1                 pop     rbp
.text:00000000000044D2                 retn
.text:00000000000044D3 ; ---------------------------------------------------------------------------
.text:00000000000044D3
.text:00000000000044D3 loc_44D3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000044D3                                         ; close_stdout+2A↑j
.text:00000000000044D3                 lea     rsi, aWriteError ; "write error"
.text:00000000000044DA                 xor     edi, edi        ; domainname
.text:00000000000044DC                 mov     edx, 5          ; category
.text:00000000000044E1                 call    _dcgettext
.text:00000000000044E6                 mov     rdi, cs:file_name
.text:00000000000044ED                 mov     rbp, rax
.text:00000000000044F0                 test    rdi, rdi
.text:00000000000044F3                 jz      short loc_451D
.text:00000000000044F5                 call    quotearg_colon
.text:00000000000044FA                 mov     esi, [rbx]      ; errnum
.text:00000000000044FC                 lea     rdx, format     ; "%s: %s"
.text:0000000000004503                 mov     rcx, rax
.text:0000000000004506                 mov     r8, rbp
.text:0000000000004509                 xor     edi, edi        ; status
.text:000000000000450B                 xor     eax, eax
.text:000000000000450D                 call    _error
.text:0000000000004512
.text:0000000000004512 loc_4512:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000004512                                         ; close_stdout+A2↓j
.text:0000000000004512                 mov     edi, cs:exit_failure ; status
.text:0000000000004518                 call    __exit
.text:000000000000451D ; ---------------------------------------------------------------------------
.text:000000000000451D
.text:000000000000451D loc_451D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000451D                 mov     esi, [rbx]      ; errnum
.text:000000000000451F                 lea     rdx, aS_0+2     ; format
.text:0000000000004526                 mov     rcx, rax
.text:0000000000004529                 xor     edi, edi        ; status
.text:000000000000452B                 xor     eax, eax
.text:000000000000452D                 call    _error
.text:0000000000004532                 jmp     short loc_4512
.text:0000000000004532 ; } // starts at 4490
.text:0000000000004532 close_stdout    endp
.text:0000000000004532
.text:0000000000004532 ; ---------------------------------------------------------------------------
.text:0000000000004534                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540
.text:0000000000004540                 public dir_name
.text:0000000000004540 dir_name        proc near               ; CODE XREF: main+56C↑p
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 sub     rsp, 8
.text:0000000000004544                 call    mdir_name
.text:0000000000004549                 test    rax, rax
.text:000000000000454C                 jz      short loc_4553
.text:000000000000454E                 add     rsp, 8
.text:0000000000004552                 retn
.text:0000000000004553 ; ---------------------------------------------------------------------------
.text:0000000000004553
.text:0000000000004553 loc_4553:                               ; CODE XREF: dir_name+C↑j
.text:0000000000004553                 call    xalloc_die
.text:0000000000004553 ; } // starts at 4540
.text:0000000000004553 dir_name        endp
.text:0000000000004553
.text:0000000000004553 ; ---------------------------------------------------------------------------
.text:0000000000004558                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560 ; Attributes: info_from_lumina
.text:0000000000004560
.text:0000000000004560 ; size_t __fastcall dir_len(const char *file)
.text:0000000000004560                 public dir_len
.text:0000000000004560 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 push    rbp
.text:0000000000004561                 push    rbx
.text:0000000000004562                 xor     ebp, ebp
.text:0000000000004564                 mov     rbx, rdi
.text:0000000000004567                 sub     rsp, 8
.text:000000000000456B                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000456E                 setz    bpl
.text:0000000000004572                 call    last_component
.text:0000000000004577                 mov     rcx, rax
.text:000000000000457A                 sub     rcx, rbx
.text:000000000000457D                 cmp     rcx, rbp
.text:0000000000004580                 jbe     short loc_45B0
.text:0000000000004582                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000004586                 lea     rdx, [rcx-1]
.text:000000000000458A                 jz      short loc_459E
.text:000000000000458C                 jmp     short loc_45B0
.text:000000000000458C ; ---------------------------------------------------------------------------
.text:000000000000458E                 align 10h
.text:0000000000004590
.text:0000000000004590 loc_4590:                               ; CODE XREF: dir_len+41↓j
.text:0000000000004590                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000004595                 lea     rax, [rdx-1]
.text:0000000000004599                 jnz     short loc_45A3
.text:000000000000459B                 mov     rdx, rax
.text:000000000000459E
.text:000000000000459E loc_459E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000459E                 cmp     rbp, rdx
.text:00000000000045A1                 jnz     short loc_4590
.text:00000000000045A3
.text:00000000000045A3 loc_45A3:                               ; CODE XREF: dir_len+39↑j
.text:00000000000045A3                 add     rsp, 8
.text:00000000000045A7                 mov     rax, rdx
.text:00000000000045AA                 pop     rbx
.text:00000000000045AB                 pop     rbp
.text:00000000000045AC                 retn
.text:00000000000045AC ; ---------------------------------------------------------------------------
.text:00000000000045AD                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: dir_len+20↑j
.text:00000000000045B0                                         ; dir_len+2C↑j
.text:00000000000045B0                 add     rsp, 8
.text:00000000000045B4                 mov     rdx, rcx
.text:00000000000045B7                 mov     rax, rdx
.text:00000000000045BA                 pop     rbx
.text:00000000000045BB                 pop     rbp
.text:00000000000045BC                 retn
.text:00000000000045BC ; } // starts at 4560
.text:00000000000045BC dir_len         endp
.text:00000000000045BC
.text:00000000000045BC ; ---------------------------------------------------------------------------
.text:00000000000045BD                 align 20h
.text:00000000000045C0
.text:00000000000045C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045C0
.text:00000000000045C0 ; Attributes: info_from_lumina
.text:00000000000045C0
.text:00000000000045C0 ; char *__fastcall mdir_name(const char *file)
.text:00000000000045C0                 public mdir_name
.text:00000000000045C0 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:00000000000045C0 ; __unwind {
.text:00000000000045C0                 push    rbp
.text:00000000000045C1                 push    rbx
.text:00000000000045C2                 mov     rbp, rdi
.text:00000000000045C5                 sub     rsp, 8
.text:00000000000045C9                 call    dir_len
.text:00000000000045CE                 test    rax, rax
.text:00000000000045D1                 mov     rbx, rax
.text:00000000000045D4                 setz    al
.text:00000000000045D7                 movzx   eax, al
.text:00000000000045DA                 lea     rdi, [rbx+rax+1] ; size
.text:00000000000045DF                 call    _malloc
.text:00000000000045E4                 test    rax, rax
.text:00000000000045E7                 mov     rcx, rax
.text:00000000000045EA                 jz      short loc_4606
.text:00000000000045EC                 mov     rdx, rbx        ; n
.text:00000000000045EF                 mov     rsi, rbp        ; src
.text:00000000000045F2                 mov     rdi, rax        ; dest
.text:00000000000045F5                 call    _memcpy
.text:00000000000045FA                 test    rbx, rbx
.text:00000000000045FD                 mov     rcx, rax
.text:0000000000004600                 jz      short loc_4610
.text:0000000000004602
.text:0000000000004602 loc_4602:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000004602                 mov     byte ptr [rcx+rbx], 0
.text:0000000000004606
.text:0000000000004606 loc_4606:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000004606                 add     rsp, 8
.text:000000000000460A                 mov     rax, rcx
.text:000000000000460D                 pop     rbx
.text:000000000000460E                 pop     rbp
.text:000000000000460F                 retn
.text:0000000000004610 ; ---------------------------------------------------------------------------
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000004610                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000004613                 mov     ebx, 1
.text:0000000000004618                 jmp     short loc_4602
.text:0000000000004618 ; } // starts at 45C0
.text:0000000000004618 mdir_name       endp
.text:0000000000004618
.text:0000000000004618 ; ---------------------------------------------------------------------------
.text:000000000000461A                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620 ; Attributes: info_from_lumina
.text:0000000000004620
.text:0000000000004620 ; char *__fastcall last_component(const char *name)
.text:0000000000004620                 public last_component
.text:0000000000004620 last_component  proc near               ; CODE XREF: main+561↑p
.text:0000000000004620                                         ; dir_len+12↑p
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 movzx   edx, byte ptr [rdi]
.text:0000000000004623                 mov     rax, rdi
.text:0000000000004626                 cmp     dl, 2Fh ; '/'
.text:0000000000004629                 jnz     short loc_463C
.text:000000000000462B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: last_component+1A↓j
.text:0000000000004630                 add     rax, 1
.text:0000000000004634                 movzx   edx, byte ptr [rax]
.text:0000000000004637                 cmp     dl, 2Fh ; '/'
.text:000000000000463A                 jz      short loc_4630
.text:000000000000463C
.text:000000000000463C loc_463C:                               ; CODE XREF: last_component+9↑j
.text:000000000000463C                 test    dl, dl
.text:000000000000463E                 jz      short locret_467A
.text:0000000000004640                 mov     rcx, rax
.text:0000000000004643                 xor     esi, esi
.text:0000000000004645                 jmp     short loc_4665
.text:0000000000004645 ; ---------------------------------------------------------------------------
.text:0000000000004647                 align 10h
.text:0000000000004650
.text:0000000000004650 loc_4650:                               ; CODE XREF: last_component+48↓j
.text:0000000000004650                 test    sil, sil
.text:0000000000004653                 jz      short loc_465A
.text:0000000000004655                 mov     rax, rcx
.text:0000000000004658                 xor     esi, esi
.text:000000000000465A
.text:000000000000465A loc_465A:                               ; CODE XREF: last_component+33↑j
.text:000000000000465A                 add     rcx, 1
.text:000000000000465E                 movzx   edx, byte ptr [rcx]
.text:0000000000004661                 test    dl, dl
.text:0000000000004663                 jz      short locret_467A
.text:0000000000004665
.text:0000000000004665 loc_4665:                               ; CODE XREF: last_component+25↑j
.text:0000000000004665                                         ; last_component+58↓j
.text:0000000000004665                 cmp     dl, 2Fh ; '/'
.text:0000000000004668                 jnz     short loc_4650
.text:000000000000466A                 add     rcx, 1
.text:000000000000466E                 movzx   edx, byte ptr [rcx]
.text:0000000000004671                 mov     esi, 1
.text:0000000000004676                 test    dl, dl
.text:0000000000004678                 jnz     short loc_4665
.text:000000000000467A
.text:000000000000467A locret_467A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000467A                                         ; last_component+43↑j
.text:000000000000467A                 rep retn
.text:000000000000467A ; } // starts at 4620
.text:000000000000467A last_component  endp
.text:000000000000467A
.text:000000000000467A ; ---------------------------------------------------------------------------
.text:000000000000467C                 align 20h
.text:0000000000004680
.text:0000000000004680 ; =============== S U B R O U T I N E =======================================
.text:0000000000004680
.text:0000000000004680 ; Attributes: info_from_lumina
.text:0000000000004680
.text:0000000000004680 ; size_t __fastcall base_len(const char *name)
.text:0000000000004680                 public base_len
.text:0000000000004680 base_len        proc near               ; CODE XREF: main+5C6↑p
.text:0000000000004680 ; __unwind {
.text:0000000000004680                 push    rbx
.text:0000000000004681                 mov     rbx, rdi
.text:0000000000004684                 call    _strlen
.text:0000000000004689                 cmp     rax, 1
.text:000000000000468D                 jbe     short loc_469A
.text:000000000000468F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000004694                 lea     rdx, [rax-1]
.text:0000000000004698                 jz      short loc_46A8
.text:000000000000469A
.text:000000000000469A loc_469A:                               ; CODE XREF: base_len+D↑j
.text:000000000000469A                 pop     rbx
.text:000000000000469B                 retn
.text:000000000000469B ; ---------------------------------------------------------------------------
.text:000000000000469C                 align 20h
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: base_len+37↓j
.text:00000000000046A0                 mov     rdx, rax
.text:00000000000046A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000046A8
.text:00000000000046A8 loc_46A8:                               ; CODE XREF: base_len+18↑j
.text:00000000000046A8                 cmp     rdx, 1
.text:00000000000046AC                 jz      short loc_46C0
.text:00000000000046AE                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:00000000000046B3                 lea     rax, [rdx-1]
.text:00000000000046B7                 jz      short loc_46A0
.text:00000000000046B9                 mov     rax, rdx
.text:00000000000046BC                 pop     rbx
.text:00000000000046BD                 retn
.text:00000000000046BD ; ---------------------------------------------------------------------------
.text:00000000000046BE                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: base_len+2C↑j
.text:00000000000046C0                 mov     eax, 1
.text:00000000000046C5                 pop     rbx
.text:00000000000046C6                 retn
.text:00000000000046C6 ; } // starts at 4680
.text:00000000000046C6 base_len        endp
.text:00000000000046C6
.text:00000000000046C6 ; ---------------------------------------------------------------------------
.text:00000000000046C7                 align 10h
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0
.text:00000000000046D0                 public open_safer
.text:00000000000046D0 open_safer      proc near               ; CODE XREF: main+3C1↑p
.text:00000000000046D0                                         ; main+539↑p ...
.text:00000000000046D0
.text:00000000000046D0 var_58          = dword ptr -58h
.text:00000000000046D0 var_50          = qword ptr -50h
.text:00000000000046D0 var_48          = qword ptr -48h
.text:00000000000046D0 var_40          = qword ptr -40h
.text:00000000000046D0 var_38          = byte ptr -38h
.text:00000000000046D0 var_28          = qword ptr -28h
.text:00000000000046D0 arg_0           = byte ptr  8
.text:00000000000046D0
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 sub     rsp, 58h
.text:00000000000046D4                 mov     [rsp+58h+var_28], rdx
.text:00000000000046D9                 xor     edx, edx
.text:00000000000046DB                 mov     rax, fs:28h
.text:00000000000046E4                 mov     [rsp+58h+var_40], rax
.text:00000000000046E9                 xor     eax, eax
.text:00000000000046EB                 test    sil, 40h
.text:00000000000046EF                 jnz     short loc_4718
.text:00000000000046F1
.text:00000000000046F1 loc_46F1:                               ; CODE XREF: open_safer+67↓j
.text:00000000000046F1                 xor     eax, eax
.text:00000000000046F3                 call    _open
.text:00000000000046F8                 mov     edi, eax        ; fd
.text:00000000000046FA                 call    fd_safer_flag
.text:00000000000046FF                 mov     rcx, [rsp+58h+var_40]
.text:0000000000004704                 xor     rcx, fs:28h
.text:000000000000470D                 jnz     short loc_4739
.text:000000000000470F                 add     rsp, 58h
.text:0000000000004713                 retn
.text:0000000000004713 ; ---------------------------------------------------------------------------
.text:0000000000004714                 align 8
.text:0000000000004718
.text:0000000000004718 loc_4718:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000004718                 lea     rax, [rsp+58h+arg_0]
.text:000000000000471D                 mov     [rsp+58h+var_58], 10h
.text:0000000000004724                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000004728                 mov     [rsp+58h+var_50], rax
.text:000000000000472D                 lea     rax, [rsp+58h+var_38]
.text:0000000000004732                 mov     [rsp+58h+var_48], rax
.text:0000000000004737                 jmp     short loc_46F1
.text:0000000000004739 ; ---------------------------------------------------------------------------
.text:0000000000004739
.text:0000000000004739 loc_4739:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000004739                 call    ___stack_chk_fail
.text:0000000000004739 ; } // starts at 46D0
.text:0000000000004739 open_safer      endp
.text:0000000000004739
.text:0000000000004739 ; ---------------------------------------------------------------------------
.text:000000000000473E                 align 20h
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740 ; Attributes: info_from_lumina
.text:0000000000004740
.text:0000000000004740 ; long double __usercall adjust_value@<st0>(int inexact_style@<edi>, long double value)
.text:0000000000004740 adjust_value    proc near               ; CODE XREF: human_readable+578↓p
.text:0000000000004740                                         ; human_readable+59A↓p ...
.text:0000000000004740
.text:0000000000004740 var_20          = qword ptr -20h
.text:0000000000004740 var_18          = qword ptr -18h
.text:0000000000004740 var_C           = word ptr -0Ch
.text:0000000000004740 var_A           = word ptr -0Ah
.text:0000000000004740 arg_0           = tbyte ptr  8
.text:0000000000004740
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 fld     cs:flt_A7EC
.text:0000000000004746                 fld     [rsp+arg_0]
.text:000000000000474A                 fucomi  st, st(1)
.text:000000000000474C                 jnb     short loc_47C0
.text:000000000000474E                 fstp    st(1)
.text:0000000000004750                 fnstcw  [rsp+var_A]
.text:0000000000004754                 movzx   eax, [rsp+var_A]
.text:0000000000004759                 or      ah, 0Ch
.text:000000000000475C                 mov     [rsp+var_C], ax
.text:0000000000004761                 fld     st
.text:0000000000004763                 fldcw   [rsp+var_C]
.text:0000000000004767                 fistp   [rsp+var_18]
.text:000000000000476B                 fldcw   [rsp+var_A]
.text:000000000000476F                 mov     rax, [rsp+var_18]
.text:0000000000004774
.text:0000000000004774 loc_4774:                               ; CODE XREF: adjust_value+B3↓j
.text:0000000000004774                 mov     [rsp+var_20], rax
.text:0000000000004779                 test    rax, rax
.text:000000000000477C                 fild    [rsp+var_20]
.text:0000000000004780                 jns     short loc_4788
.text:0000000000004782                 fadd    cs:flt_A7F0
.text:0000000000004788
.text:0000000000004788 loc_4788:                               ; CODE XREF: adjust_value+40↑j
.text:0000000000004788                 test    edi, edi
.text:000000000000478A                 jnz     short loc_47B8
.text:000000000000478C                 fxch    st(1)
.text:000000000000478E                 fucomip st, st(1)
.text:0000000000004790                 jp      short loc_4798
.text:0000000000004792                 jz      short locret_47BA
.text:0000000000004794                 fstp    st
.text:0000000000004796                 jmp     short loc_47A0
.text:0000000000004798 ; ---------------------------------------------------------------------------
.text:0000000000004798
.text:0000000000004798 loc_4798:                               ; CODE XREF: adjust_value+50↑j
.text:0000000000004798                 fstp    st
.text:000000000000479A                 nop     word ptr [rax+rax+00h]
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: adjust_value+56↑j
.text:00000000000047A0                 add     rax, 1
.text:00000000000047A4                 mov     [rsp+var_20], rax
.text:00000000000047A9                 test    rax, rax
.text:00000000000047AC                 fild    [rsp+var_20]
.text:00000000000047B0                 js      short loc_4800
.text:00000000000047B2                 jmp     short locret_47BA
.text:00000000000047B2 ; ---------------------------------------------------------------------------
.text:00000000000047B4                 align 8
.text:00000000000047B8
.text:00000000000047B8 loc_47B8:                               ; CODE XREF: adjust_value+4A↑j
.text:00000000000047B8                 fstp    st(1)
.text:00000000000047BA
.text:00000000000047BA locret_47BA:                            ; CODE XREF: adjust_value+52↑j
.text:00000000000047BA                                         ; adjust_value+72↑j
.text:00000000000047BA                 rep retn
.text:00000000000047BA ; ---------------------------------------------------------------------------
.text:00000000000047BC                 align 20h
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: adjust_value+C↑j
.text:00000000000047C0                 fnstcw  [rsp+var_A]
.text:00000000000047C4                 movzx   eax, [rsp+var_A]
.text:00000000000047C9                 fsubr   st(1), st
.text:00000000000047CB                 fxch    st(1)
.text:00000000000047CD                 mov     rdx, 8000000000000000h
.text:00000000000047D7                 or      ah, 0Ch
.text:00000000000047DA                 mov     [rsp+var_C], ax
.text:00000000000047DF                 fldcw   [rsp+var_C]
.text:00000000000047E3                 fistp   [rsp+var_18]
.text:00000000000047E7                 fldcw   [rsp+var_A]
.text:00000000000047EB                 mov     rax, [rsp+var_18]
.text:00000000000047F0                 xor     rax, rdx
.text:00000000000047F3                 jmp     loc_4774
.text:00000000000047F3 ; ---------------------------------------------------------------------------
.text:00000000000047F8                 align 20h
.text:0000000000004800
.text:0000000000004800 loc_4800:                               ; CODE XREF: adjust_value+70↑j
.text:0000000000004800                 fadd    cs:flt_A7F0
.text:0000000000004806                 retn
.text:0000000000004806 ; } // starts at 4740
.text:0000000000004806 adjust_value    endp
.text:0000000000004806
.text:0000000000004806 ; ---------------------------------------------------------------------------
.text:0000000000004807                 align 10h
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810 ; Attributes: info_from_lumina
.text:0000000000004810
.text:0000000000004810 ; char *__fastcall human_readable(uintmax_t n, char *buf, int opts, uintmax_t from_block_size, uintmax_t to_block_size)
.text:0000000000004810                 public human_readable
.text:0000000000004810 human_readable  proc near               ; CODE XREF: dopass+614↑p
.text:0000000000004810                                         ; dopass+685↑p ...
.text:0000000000004810
.text:0000000000004810 var_D8          = tbyte ptr -0D8h
.text:0000000000004810 s               = qword ptr -0C8h
.text:0000000000004810 var_C0          = qword ptr -0C0h
.text:0000000000004810 var_B8          = qword ptr -0B8h
.text:0000000000004810 src             = qword ptr -0B0h
.text:0000000000004810 var_A8          = tbyte ptr -0A8h
.text:0000000000004810 var_98          = dword ptr -98h
.text:0000000000004810 var_94          = dword ptr -94h
.text:0000000000004810 var_90          = qword ptr -90h
.text:0000000000004810 n               = qword ptr -88h
.text:0000000000004810 var_80          = qword ptr -80h
.text:0000000000004810 var_78          = byte ptr -78h
.text:0000000000004810 var_40          = qword ptr -40h
.text:0000000000004810
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 push    r15
.text:0000000000004812                 push    r14
.text:0000000000004814                 mov     eax, edx
.text:0000000000004816                 push    r13
.text:0000000000004818                 push    r12
.text:000000000000481A                 mov     r15d, edx
.text:000000000000481D                 push    rbp
.text:000000000000481E                 push    rbx
.text:000000000000481F                 and     eax, 20h
.text:0000000000004822                 and     r15d, 3
.text:0000000000004826                 mov     r12d, edx
.text:0000000000004829                 mov     rbx, rdi
.text:000000000000482C                 sub     rsp, 98h
.text:0000000000004833                 mov     [rsp+0C8h+src], rcx
.text:0000000000004838                 mov     [rsp+0C8h+var_98], eax
.text:000000000000483C                 mov     rcx, fs:28h
.text:0000000000004845                 mov     [rsp+0C8h+var_40], rcx
.text:000000000000484D                 xor     ecx, ecx
.text:000000000000484F                 cmp     eax, 1
.text:0000000000004852                 mov     [rsp+0C8h+s], rsi
.text:0000000000004856                 mov     [rsp+0C8h+var_B8], r8
.text:000000000000485B                 sbb     eax, eax
.text:000000000000485D                 and     eax, 0FFFFFFE8h
.text:0000000000004860                 add     eax, 400h
.text:0000000000004865                 mov     [rsp+0C8h+var_94], eax
.text:0000000000004869                 call    _localeconv
.text:000000000000486E                 mov     r14, [rax]
.text:0000000000004871                 mov     r13, rax
.text:0000000000004874                 mov     rdi, r14        ; s
.text:0000000000004877                 call    _strlen
.text:000000000000487C                 mov     rcx, [r13+10h]
.text:0000000000004880                 mov     r13, [r13+8]
.text:0000000000004884                 mov     rbp, rax
.text:0000000000004887                 sub     rax, 1
.text:000000000000488B                 mov     edx, 1
.text:0000000000004890                 cmp     rax, 10h
.text:0000000000004894                 lea     rax, aSPassLuLuS+17h ; "."
.text:000000000000489B                 mov     rdi, r13        ; s
.text:000000000000489E                 cmovnb  rbp, rdx
.text:00000000000048A2                 mov     [rsp+0C8h+var_90], rcx
.text:00000000000048A7                 cmovnb  r14, rax
.text:00000000000048AB                 call    _strlen
.text:00000000000048B0                 cmp     rax, 11h
.text:00000000000048B4                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:00000000000048BB                 mov     rdi, [rsp+0C8h+var_B8]
.text:00000000000048C0                 mov     rcx, [rsp+0C8h+src]
.text:00000000000048C5                 cmovnb  r13, rax
.text:00000000000048C9                 mov     rax, [rsp+0C8h+s]
.text:00000000000048CD                 add     rax, 287h
.text:00000000000048D3                 cmp     rdi, rcx
.text:00000000000048D6                 mov     [rsp+0C8h+var_C0], rax
.text:00000000000048DB                 ja      loc_4A28
.text:00000000000048E1                 xor     edx, edx
.text:00000000000048E3                 mov     rax, rcx
.text:00000000000048E6                 div     rdi
.text:00000000000048E9                 test    rdx, rdx
.text:00000000000048EC                 mov     rdi, rax
.text:00000000000048EF                 jz      loc_4C50
.text:00000000000048F5
.text:00000000000048F5 loc_48F5:                               ; CODE XREF: human_readable+21B↓j
.text:00000000000048F5                                         ; human_readable+231↓j ...
.text:00000000000048F5                 mov     [rsp+0C8h+src], rcx
.text:00000000000048FA                 test    rcx, rcx
.text:00000000000048FD                 fild    [rsp+0C8h+src]
.text:0000000000004901                 jns     short loc_4909
.text:0000000000004903                 fadd    cs:flt_A7F0
.text:0000000000004909
.text:0000000000004909 loc_4909:                               ; CODE XREF: human_readable+F1↑j
.text:0000000000004909                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000490E                 mov     [rsp+0C8h+src], rax
.text:0000000000004913                 test    rax, rax
.text:0000000000004916                 fild    [rsp+0C8h+src]
.text:000000000000491A                 jns     short loc_4922
.text:000000000000491C                 fadd    cs:flt_A7F0
.text:0000000000004922
.text:0000000000004922 loc_4922:                               ; CODE XREF: human_readable+10A↑j
.text:0000000000004922                 fdivp   st(1), st
.text:0000000000004924                 mov     [rsp+0C8h+src], rbx
.text:0000000000004929                 test    rbx, rbx
.text:000000000000492C                 fild    [rsp+0C8h+src]
.text:0000000000004930                 jns     short loc_4938
.text:0000000000004932                 fadd    cs:flt_A7F0
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: human_readable+120↑j
.text:0000000000004938                 test    r12b, 10h
.text:000000000000493C                 fmulp   st(1), st
.text:000000000000493E                 jz      loc_4B08
.text:0000000000004944                 fild    [rsp+0C8h+var_94]
.text:0000000000004948                 xor     ebx, ebx
.text:000000000000494A                 fld     st
.text:000000000000494C                 jmp     short loc_4954
.text:000000000000494C ; ---------------------------------------------------------------------------
.text:000000000000494E                 align 10h
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: human_readable+154↓j
.text:0000000000004950                 fstp    st(1)
.text:0000000000004952                 fxch    st(2)
.text:0000000000004954
.text:0000000000004954 loc_4954:                               ; CODE XREF: human_readable+13C↑j
.text:0000000000004954                 fld     st
.text:0000000000004956                 add     ebx, 1
.text:0000000000004959                 fmul    st, st(2)
.text:000000000000495B                 fxch    st(3)
.text:000000000000495D                 fucomi  st, st(3)
.text:000000000000495F                 jb      short loc_4970
.text:0000000000004961                 cmp     ebx, 8
.text:0000000000004964                 jnz     short loc_4950
.text:0000000000004966                 fstp    st(2)
.text:0000000000004968                 fstp    st(2)
.text:000000000000496A                 jmp     short loc_4974
.text:000000000000496A ; ---------------------------------------------------------------------------
.text:000000000000496C                 align 10h
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: human_readable+14F↑j
.text:0000000000004970                 fstp    st(2)
.text:0000000000004972                 fstp    st(2)
.text:0000000000004974
.text:0000000000004974 loc_4974:                               ; CODE XREF: human_readable+15A↑j
.text:0000000000004974                 mov     ecx, [rsp+0C8h+var_98]
.text:0000000000004978                 add     rbp, 1
.text:000000000000497C                 xor     eax, eax
.text:000000000000497E                 fdivrp  st(1), st
.text:0000000000004980                 test    ecx, ecx
.text:0000000000004982                 setz    al
.text:0000000000004985                 cmp     r15d, 1
.text:0000000000004989                 lea     rax, [rbp+rax+1]
.text:000000000000498E                 mov     [rsp+0C8h+src], rax
.text:0000000000004993                 jz      loc_4F00
.text:0000000000004999                 fld     cs:tbyte_A800
.text:000000000000499F                 fucomip st, st(1)
.text:00000000000049A1                 ja      loc_4D78
.text:00000000000049A7                 fld     st
.text:00000000000049A9
.text:00000000000049A9 loc_49A9:                               ; CODE XREF: human_readable+583↓j
.text:00000000000049A9                 fstp    [rsp+0C8h+var_A8]
.text:00000000000049AD                 sub     rsp, 10h
.text:00000000000049B1                 lea     rcx, a1lf       ; "%.1Lf"
.text:00000000000049B8                 mov     esi, 1
.text:00000000000049BD                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000049C4                 xor     eax, eax
.text:00000000000049C6                 mov     r14, [rsp+0D8h+s]
.text:00000000000049CB                 mov     rdi, r14
.text:00000000000049CE                 fstp    [rsp+0D8h+var_D8]
.text:00000000000049D1                 call    ___sprintf_chk
.text:00000000000049D6                 mov     rdi, r14        ; s
.text:00000000000049D9                 call    _strlen
.text:00000000000049DE                 pop     rcx
.text:00000000000049DF                 pop     rsi
.text:00000000000049E0                 cmp     rax, [rsp+0C8h+src]
.text:00000000000049E5                 mov     r14, rax
.text:00000000000049E8                 fld     [rsp+0C8h+var_A8]
.text:00000000000049EC                 ja      loc_4F98
.text:00000000000049F2
.text:00000000000049F2 loc_49F2:                               ; CODE XREF: human_readable+735↓j
.text:00000000000049F2                 test    r12b, 8
.text:00000000000049F6                 jz      loc_4B60
.text:00000000000049FC                 mov     rax, [rsp+0C8h+s]
.text:0000000000004A00                 cmp     byte ptr [rax+r14-1], 30h ; '0'
.text:0000000000004A06                 jnz     loc_4B68
.text:0000000000004A0C                 fld     cs:flt_A7F4
.text:0000000000004A12                 cmp     r15d, 1
.text:0000000000004A16                 fmul    st(1), st
.text:0000000000004A18                 jnz     loc_4FA0
.text:0000000000004A1E                 jmp     loc_4F53
.text:0000000000004A1E ; ---------------------------------------------------------------------------
.text:0000000000004A23                 align 8
.text:0000000000004A28
.text:0000000000004A28 loc_4A28:                               ; CODE XREF: human_readable+CB↑j
.text:0000000000004A28                 test    rcx, rcx
.text:0000000000004A2B                 jz      loc_48F5
.text:0000000000004A31                 mov     rax, [rsp+0C8h+var_B8]
.text:0000000000004A36                 xor     edx, edx
.text:0000000000004A38                 div     rcx
.text:0000000000004A3B                 test    rdx, rdx
.text:0000000000004A3E                 mov     r8, rax
.text:0000000000004A41                 jnz     loc_48F5
.text:0000000000004A47                 mov     rax, rbx
.text:0000000000004A4A                 xor     edx, edx
.text:0000000000004A4C                 div     r8
.text:0000000000004A4F                 mov     rbx, rax
.text:0000000000004A52                 lea     rax, [rdx+rdx*4]
.text:0000000000004A56                 xor     edx, edx
.text:0000000000004A58                 mov     rsi, rbx
.text:0000000000004A5B                 add     rax, rax
.text:0000000000004A5E                 div     r8
.text:0000000000004A61                 add     rdx, rdx
.text:0000000000004A64                 mov     r9d, eax
.text:0000000000004A67                 cmp     r8, rdx
.text:0000000000004A6A                 jbe     loc_4FF8
.text:0000000000004A70                 xor     edi, edi
.text:0000000000004A72                 test    rdx, rdx
.text:0000000000004A75                 setnz   dil
.text:0000000000004A79
.text:0000000000004A79 loc_4A79:                               ; CODE XREF: human_readable+45D↓j
.text:0000000000004A79                                         ; human_readable+7F3↓j
.text:0000000000004A79                 mov     ecx, r12d
.text:0000000000004A7C                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000004A81                 mov     ebx, 0FFFFFFFFh
.text:0000000000004A86                 and     ecx, 10h
.text:0000000000004A89                 jz      loc_4E50
.text:0000000000004A8F                 mov     r8d, [rsp+0C8h+var_94]
.text:0000000000004A94                 cmp     r8, rsi
.text:0000000000004A97                 mov     r11, r8
.text:0000000000004A9A                 ja      loc_5010
.text:0000000000004AA0                 xor     ebx, ebx
.text:0000000000004AA2                 jmp     short loc_4AC7
.text:0000000000004AA2 ; ---------------------------------------------------------------------------
.text:0000000000004AA4                 align 8
.text:0000000000004AA8
.text:0000000000004AA8 loc_4AA8:                               ; CODE XREF: human_readable+2E0↓j
.text:0000000000004AA8                 test    edi, edi
.text:0000000000004AAA                 setnz   dil
.text:0000000000004AAE                 movzx   edi, dil
.text:0000000000004AB2
.text:0000000000004AB2 loc_4AB2:                               ; CODE XREF: human_readable+2F0↓j
.text:0000000000004AB2                 add     ebx, 1
.text:0000000000004AB5                 cmp     r8, r10
.text:0000000000004AB8                 ja      loc_4DCD
.text:0000000000004ABE                 cmp     ebx, 8
.text:0000000000004AC1                 jz      loc_5068
.text:0000000000004AC7
.text:0000000000004AC7 loc_4AC7:                               ; CODE XREF: human_readable+292↑j
.text:0000000000004AC7                 mov     rax, rsi
.text:0000000000004ACA                 xor     edx, edx
.text:0000000000004ACC                 mov     esi, edi
.text:0000000000004ACE                 div     r8
.text:0000000000004AD1                 sar     esi, 1
.text:0000000000004AD3                 mov     r10, rax
.text:0000000000004AD6                 lea     eax, [rdx+rdx*4]
.text:0000000000004AD9                 xor     edx, edx
.text:0000000000004ADB                 lea     eax, [r9+rax*2]
.text:0000000000004ADF                 div     r11d
.text:0000000000004AE2                 lea     edx, [rsi+rdx*2]
.text:0000000000004AE5                 mov     r9d, eax
.text:0000000000004AE8                 mov     rsi, r10
.text:0000000000004AEB                 add     edi, edx
.text:0000000000004AED                 cmp     r11d, edx
.text:0000000000004AF0                 ja      short loc_4AA8
.text:0000000000004AF2                 cmp     r11d, edi
.text:0000000000004AF5                 setb    dil
.text:0000000000004AF9                 movzx   edi, dil
.text:0000000000004AFD                 add     edi, 2
.text:0000000000004B00                 jmp     short loc_4AB2
.text:0000000000004B00 ; ---------------------------------------------------------------------------
.text:0000000000004B02                 align 8
.text:0000000000004B08
.text:0000000000004B08 loc_4B08:                               ; CODE XREF: human_readable+12E↑j
.text:0000000000004B08                 cmp     r15d, 1
.text:0000000000004B0C                 jz      short loc_4B1C
.text:0000000000004B0E                 fld     cs:tbyte_A800
.text:0000000000004B14                 fucomip st, st(1)
.text:0000000000004B16                 ja      loc_4DA0
.text:0000000000004B1C
.text:0000000000004B1C loc_4B1C:                               ; CODE XREF: human_readable+2FC↑j
.text:0000000000004B1C                                         ; human_readable+5A3↓j
.text:0000000000004B1C                 sub     rsp, 10h
.text:0000000000004B20                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000004B27                 mov     esi, 1
.text:0000000000004B2C                 mov     rbx, [rsp+0D8h+s]
.text:0000000000004B31                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B38                 xor     eax, eax
.text:0000000000004B3A                 fstp    [rsp+0D8h+var_D8]
.text:0000000000004B3D                 xor     ebp, ebp
.text:0000000000004B3F                 mov     rdi, rbx
.text:0000000000004B42                 call    ___sprintf_chk
.text:0000000000004B47                 mov     rdi, rbx        ; s
.text:0000000000004B4A                 mov     ebx, 0FFFFFFFFh
.text:0000000000004B4F                 call    _strlen
.text:0000000000004B54                 pop     rsi
.text:0000000000004B55                 pop     rdi
.text:0000000000004B56                 mov     r14, rax
.text:0000000000004B59                 jmp     short loc_4B70
.text:0000000000004B59 ; ---------------------------------------------------------------------------
.text:0000000000004B5B                 align 20h
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: human_readable+1E6↑j
.text:0000000000004B60                 fstp    st
.text:0000000000004B62                 jmp     short loc_4B70
.text:0000000000004B62 ; ---------------------------------------------------------------------------
.text:0000000000004B64                 align 8
.text:0000000000004B68
.text:0000000000004B68 loc_4B68:                               ; CODE XREF: human_readable+1F6↑j
.text:0000000000004B68                 fstp    st
.text:0000000000004B6A                 nop     word ptr [rax+rax+00h]
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: human_readable+349↑j
.text:0000000000004B70                                         ; human_readable+352↑j ...
.text:0000000000004B70                 mov     r15, [rsp+0C8h+var_C0]
.text:0000000000004B75                 mov     rsi, [rsp+0C8h+s] ; src
.text:0000000000004B79                 mov     rdx, r14        ; n
.text:0000000000004B7C                 sub     r15, r14
.text:0000000000004B7F                 sub     r14, rbp
.text:0000000000004B82                 mov     rdi, r15        ; dest
.text:0000000000004B85                 call    _memmove
.text:0000000000004B8A                 mov     r8, r14
.text:0000000000004B8D                 add     r8, r15
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: human_readable+6A6↓j
.text:0000000000004B90                                         ; human_readable+84F↓j
.text:0000000000004B90                 test    r12b, 4
.text:0000000000004B94                 jnz     loc_4C78
.text:0000000000004B9A
.text:0000000000004B9A loc_4B9A:                               ; CODE XREF: human_readable+53F↓j
.text:0000000000004B9A                                         ; human_readable+A02↓j
.text:0000000000004B9A                 test    r12b, 80h
.text:0000000000004B9E                 jz      short loc_4C17
.text:0000000000004BA0                 cmp     ebx, 0FFFFFFFFh
.text:0000000000004BA3                 jz      loc_4EC0
.text:0000000000004BA9
.text:0000000000004BA9 loc_4BA9:                               ; CODE XREF: human_readable+6D4↓j
.text:0000000000004BA9                                         ; human_readable+6E2↓j ...
.text:0000000000004BA9                 mov     eax, r12d
.text:0000000000004BAC                 and     eax, 100h
.text:0000000000004BB1                 mov     ecx, eax
.text:0000000000004BB3                 or      ecx, ebx
.text:0000000000004BB5                 jz      short loc_4C17
.text:0000000000004BB7                 and     r12d, 40h
.text:0000000000004BBB                 jnz     loc_4D58
.text:0000000000004BC1
.text:0000000000004BC1 loc_4BC1:                               ; CODE XREF: human_readable+55F↓j
.text:0000000000004BC1                 test    ebx, ebx
.text:0000000000004BC3                 jz      loc_51F6
.text:0000000000004BC9                 cmp     ebx, 1
.text:0000000000004BCC                 jnz     short loc_4BDC
.text:0000000000004BCE                 mov     r9d, [rsp+0C8h+var_98]
.text:0000000000004BD3                 test    r9d, r9d
.text:0000000000004BD6                 jz      loc_5020
.text:0000000000004BDC
.text:0000000000004BDC loc_4BDC:                               ; CODE XREF: human_readable+3BC↑j
.text:0000000000004BDC                 lea     rcx, power_letter
.text:0000000000004BE3                 movsxd  rbx, ebx
.text:0000000000004BE6                 mov     rdi, [rsp+0C8h+var_C0]
.text:0000000000004BEB                 test    eax, eax
.text:0000000000004BED                 movzx   ecx, byte ptr [rcx+rbx]
.text:0000000000004BF1                 lea     rdx, [rdi+1]
.text:0000000000004BF5                 mov     [rdi], cl
.text:0000000000004BF7                 jz      loc_5034
.text:0000000000004BFD                 mov     r8d, [rsp+0C8h+var_98]
.text:0000000000004C02                 test    r8d, r8d
.text:0000000000004C05                 jnz     loc_4DC0
.text:0000000000004C0B
.text:0000000000004C0B loc_4C0B:                               ; CODE XREF: human_readable+5B8↓j
.text:0000000000004C0B                                         ; human_readable+81E↓j ...
.text:0000000000004C0B                 lea     rax, [rdx+1]
.text:0000000000004C0F                 mov     byte ptr [rdx], 42h ; 'B'
.text:0000000000004C12                 mov     [rsp+0C8h+var_C0], rax
.text:0000000000004C17
.text:0000000000004C17 loc_4C17:                               ; CODE XREF: human_readable+38E↑j
.text:0000000000004C17                                         ; human_readable+3A5↑j ...
.text:0000000000004C17                 mov     rax, [rsp+0C8h+var_C0]
.text:0000000000004C1C                 mov     rcx, [rsp+0C8h+var_40]
.text:0000000000004C24                 xor     rcx, fs:28h
.text:0000000000004C2D                 mov     byte ptr [rax], 0
.text:0000000000004C30                 mov     rax, r15
.text:0000000000004C33                 jnz     loc_51CB
.text:0000000000004C39                 add     rsp, 98h
.text:0000000000004C40                 pop     rbx
.text:0000000000004C41                 pop     rbp
.text:0000000000004C42                 pop     r12
.text:0000000000004C44                 pop     r13
.text:0000000000004C46                 pop     r14
.text:0000000000004C48                 pop     r15
.text:0000000000004C4A                 retn
.text:0000000000004C4A ; ---------------------------------------------------------------------------
.text:0000000000004C4B                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: human_readable+DF↑j
.text:0000000000004C50                 mov     rsi, rbx
.text:0000000000004C53                 xor     edx, edx
.text:0000000000004C55                 imul    rsi, rax
.text:0000000000004C59                 mov     rax, rsi
.text:0000000000004C5C                 div     rdi
.text:0000000000004C5F                 cmp     rax, rbx
.text:0000000000004C62                 jnz     loc_48F5
.text:0000000000004C68                 xor     edi, edi
.text:0000000000004C6A                 xor     r9d, r9d
.text:0000000000004C6D                 jmp     loc_4A79
.text:0000000000004C6D ; ---------------------------------------------------------------------------
.text:0000000000004C72                 align 8
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: human_readable+384↑j
.text:0000000000004C78                 mov     r14, r8
.text:0000000000004C7B                 mov     rdi, r13        ; s
.text:0000000000004C7E                 mov     [rsp+0C8h+var_80], r8
.text:0000000000004C83                 sub     r14, r15
.text:0000000000004C86                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C8D                 call    _strlen
.text:0000000000004C92                 lea     rdi, [rsp+0C8h+var_78]
.text:0000000000004C97                 mov     ecx, 29h ; ')'
.text:0000000000004C9C                 mov     rdx, r14
.text:0000000000004C9F                 mov     rsi, r15
.text:0000000000004CA2                 mov     [rsp+0C8h+n], rax
.text:0000000000004CA7                 mov     [rsp+0C8h+src], rdi
.text:0000000000004CAC                 call    ___memcpy_chk
.text:0000000000004CB1                 mov     ecx, r12d
.text:0000000000004CB4                 mov     dword ptr [rsp+0C8h+var_A8], ebx
.text:0000000000004CB8                 mov     r12, r14
.text:0000000000004CBB                 mov     rbx, r13
.text:0000000000004CBE                 mov     r8, [rsp+0C8h+var_80]
.text:0000000000004CC3                 mov     r15, [rsp+0C8h+var_90]
.text:0000000000004CC8                 mov     r13, [rsp+0C8h+n]
.text:0000000000004CCD                 mov     r14d, ecx
.text:0000000000004CD0                 jmp     short loc_4D12
.text:0000000000004CD0 ; ---------------------------------------------------------------------------
.text:0000000000004CD2                 align 8
.text:0000000000004CD8
.text:0000000000004CD8 loc_4CD8:                               ; CODE XREF: human_readable+51A↓j
.text:0000000000004CD8                 mov     rax, [rsp+0C8h+src]
.text:0000000000004CDD                 sub     r12, rbp
.text:0000000000004CE0                 sub     r8, rbp
.text:0000000000004CE3                 mov     rdi, r8         ; dest
.text:0000000000004CE6                 mov     rdx, rbp        ; n
.text:0000000000004CE9                 lea     rsi, [rax+r12]  ; src
.text:0000000000004CED                 call    _memcpy
.text:0000000000004CF2                 test    r12, r12
.text:0000000000004CF5                 mov     r8, rax
.text:0000000000004CF8                 jz      loc_5208
.text:0000000000004CFE                 sub     r8, r13
.text:0000000000004D01                 mov     rdx, r13        ; n
.text:0000000000004D04                 mov     rsi, rbx        ; src
.text:0000000000004D07                 mov     rdi, r8         ; dest
.text:0000000000004D0A                 call    _memcpy
.text:0000000000004D0F                 mov     r8, rax
.text:0000000000004D12
.text:0000000000004D12 loc_4D12:                               ; CODE XREF: human_readable+4C0↑j
.text:0000000000004D12                 movzx   eax, byte ptr [r15]
.text:0000000000004D16                 test    al, al
.text:0000000000004D18                 jz      short loc_4D27
.text:0000000000004D1A                 cmp     al, 7Fh
.text:0000000000004D1C                 movzx   ebp, al
.text:0000000000004D1F                 cmovnb  rbp, r12
.text:0000000000004D23                 add     r15, 1
.text:0000000000004D27
.text:0000000000004D27 loc_4D27:                               ; CODE XREF: human_readable+508↑j
.text:0000000000004D27                 cmp     rbp, r12
.text:0000000000004D2A                 jbe     short loc_4CD8
.text:0000000000004D2C                 mov     eax, r14d
.text:0000000000004D2F                 mov     r15, r8
.text:0000000000004D32                 mov     r14, r12
.text:0000000000004D35                 mov     rsi, [rsp+0C8h+src] ; src
.text:0000000000004D3A                 sub     r15, r14
.text:0000000000004D3D                 mov     rdx, r14        ; n
.text:0000000000004D40                 mov     rdi, r15        ; dest
.text:0000000000004D43                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000004D47                 mov     r12d, eax
.text:0000000000004D4A                 call    _memcpy
.text:0000000000004D4F                 jmp     loc_4B9A
.text:0000000000004D4F ; ---------------------------------------------------------------------------
.text:0000000000004D54                 align 8
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: human_readable+3AB↑j
.text:0000000000004D58                 mov     rcx, [rsp+0C8h+s]
.text:0000000000004D5C                 lea     rdi, [rcx+288h]
.text:0000000000004D63                 mov     byte ptr [rcx+287h], 20h ; ' '
.text:0000000000004D6A                 mov     [rsp+0C8h+var_C0], rdi
.text:0000000000004D6F                 jmp     loc_4BC1
.text:0000000000004D6F ; ---------------------------------------------------------------------------
.text:0000000000004D74                 align 8
.text:0000000000004D78
.text:0000000000004D78 loc_4D78:                               ; CODE XREF: human_readable+191↑j
.text:0000000000004D78                 sub     rsp, 10h
.text:0000000000004D7C                 mov     edi, r15d
.text:0000000000004D7F                 fld     st
.text:0000000000004D81                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000004D84                 fstp    [rsp+0D8h+var_A8]
.text:0000000000004D88                 call    adjust_value
.text:0000000000004D8D                 pop     rax
.text:0000000000004D8E                 pop     rdx
.text:0000000000004D8F                 fld     [rsp+0C8h+var_A8]
.text:0000000000004D93                 jmp     loc_49A9
.text:0000000000004D93 ; ---------------------------------------------------------------------------
.text:0000000000004D98                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: human_readable+306↑j
.text:0000000000004DA0                 sub     rsp, 10h
.text:0000000000004DA4                 mov     edi, r15d
.text:0000000000004DA7                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000004DAA                 call    adjust_value
.text:0000000000004DAF                 pop     r8
.text:0000000000004DB1                 pop     r9
.text:0000000000004DB3                 jmp     loc_4B1C
.text:0000000000004DB3 ; ---------------------------------------------------------------------------
.text:0000000000004DB8                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: human_readable+3F5↑j
.text:0000000000004DC0                 lea     rdx, [rdi+2]
.text:0000000000004DC4                 mov     byte ptr [rdi+1], 69h ; 'i'
.text:0000000000004DC8                 jmp     loc_4C0B
.text:0000000000004DCD ; ---------------------------------------------------------------------------
.text:0000000000004DCD
.text:0000000000004DCD loc_4DCD:                               ; CODE XREF: human_readable+2A8↑j
.text:0000000000004DCD                 cmp     r10, 9
.text:0000000000004DD1                 ja      loc_5068
.text:0000000000004DD7                 cmp     r15d, 1
.text:0000000000004DDB                 jz      loc_5092
.text:0000000000004DE1                 test    r15d, r15d
.text:0000000000004DE4                 setz    dl
.text:0000000000004DE7                 test    edi, edi
.text:0000000000004DE9                 setnle  r8b
.text:0000000000004DED                 and     edx, r8d
.text:0000000000004DF0
.text:0000000000004DF0 loc_4DF0:                               ; CODE XREF: human_readable+88F↓j
.text:0000000000004DF0                 test    dl, dl
.text:0000000000004DF2                 jz      loc_5079
.text:0000000000004DF8                 lea     r9d, [rax+1]
.text:0000000000004DFC                 cmp     r9d, 0Ah
.text:0000000000004E00                 jz      loc_5101
.text:0000000000004E06
.text:0000000000004E06 loc_4E06:                               ; CODE XREF: human_readable+86B↓j
.text:0000000000004E06                 add     r9d, 30h ; '0'
.text:0000000000004E0A
.text:0000000000004E0A loc_4E0A:                               ; CODE XREF: human_readable+87D↓j
.text:0000000000004E0A                 mov     rax, [rsp+0C8h+s]
.text:0000000000004E0E                 lea     r8, [rax+286h]
.text:0000000000004E15                 mov     [rax+286h], r9b
.text:0000000000004E1C                 mov     eax, ebp
.text:0000000000004E1E                 sub     r8, rbp
.text:0000000000004E21                 cmp     ebp, 8
.text:0000000000004E24                 jnb     loc_50B1
.text:0000000000004E2A                 test    bpl, 4
.text:0000000000004E2E                 jnz     loc_51B6
.text:0000000000004E34                 test    eax, eax
.text:0000000000004E36                 jz      short loc_4E47
.text:0000000000004E38                 movzx   edx, byte ptr [r14]
.text:0000000000004E3C                 test    al, 2
.text:0000000000004E3E                 mov     [r8], dl
.text:0000000000004E41                 jnz     loc_51D0
.text:0000000000004E47
.text:0000000000004E47 loc_4E47:                               ; CODE XREF: human_readable+626↑j
.text:0000000000004E47                                         ; human_readable+8CF↓j ...
.text:0000000000004E47                 xor     edi, edi
.text:0000000000004E49                 xor     r9d, r9d
.text:0000000000004E4C                 nop     dword ptr [rax+00h]
.text:0000000000004E50
.text:0000000000004E50 loc_4E50:                               ; CODE XREF: human_readable+279↑j
.text:0000000000004E50                                         ; human_readable+807↓j ...
.text:0000000000004E50                 cmp     r15d, 1
.text:0000000000004E54                 jz      loc_4FD0
.text:0000000000004E5A                 test    r15d, r15d
.text:0000000000004E5D                 jnz     short loc_4E80
.text:0000000000004E5F                 add     edi, r9d
.text:0000000000004E62                 test    edi, edi
.text:0000000000004E64                 jle     short loc_4E80
.text:0000000000004E66
.text:0000000000004E66 loc_4E66:                               ; CODE XREF: human_readable+7D9↓j
.text:0000000000004E66                 add     rsi, 1
.text:0000000000004E6A                 test    ecx, ecx
.text:0000000000004E6C                 jz      short loc_4E80
.text:0000000000004E6E                 mov     eax, [rsp+0C8h+var_94]
.text:0000000000004E72                 cmp     rax, rsi
.text:0000000000004E75                 jz      loc_5040
.text:0000000000004E7B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: human_readable+64D↑j
.text:0000000000004E80                                         ; human_readable+654↑j ...
.text:0000000000004E80                 mov     r15, r8
.text:0000000000004E83                 mov     rcx, 0CCCCCCCCCCCCCCCDh
.text:0000000000004E8D                 nop     dword ptr [rax]
.text:0000000000004E90
.text:0000000000004E90 loc_4E90:                               ; CODE XREF: human_readable+6A4↓j
.text:0000000000004E90                 mov     rax, rsi
.text:0000000000004E93                 sub     r15, 1
.text:0000000000004E97                 mul     rcx
.text:0000000000004E9A                 shr     rdx, 3
.text:0000000000004E9E                 lea     rax, [rdx+rdx*4]
.text:0000000000004EA2                 add     rax, rax
.text:0000000000004EA5                 sub     rsi, rax
.text:0000000000004EA8                 add     esi, 30h ; '0'
.text:0000000000004EAB                 test    rdx, rdx
.text:0000000000004EAE                 mov     [r15], sil
.text:0000000000004EB1                 mov     rsi, rdx
.text:0000000000004EB4                 jnz     short loc_4E90
.text:0000000000004EB6                 jmp     loc_4B90
.text:0000000000004EB6 ; ---------------------------------------------------------------------------
.text:0000000000004EBB                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 loc_4EC0:                               ; CODE XREF: human_readable+393↑j
.text:0000000000004EC0                 mov     rcx, [rsp+0C8h+var_B8]
.text:0000000000004EC5                 cmp     rcx, 1
.text:0000000000004EC9                 jbe     loc_5072
.text:0000000000004ECF                 mov     edx, [rsp+0C8h+var_94]
.text:0000000000004ED3                 mov     ebx, 1
.text:0000000000004ED8                 mov     eax, 1
.text:0000000000004EDD
.text:0000000000004EDD loc_4EDD:                               ; CODE XREF: human_readable+6E0↓j
.text:0000000000004EDD                 imul    rax, rdx
.text:0000000000004EE1                 cmp     rcx, rax
.text:0000000000004EE4                 jbe     loc_4BA9
.text:0000000000004EEA                 add     ebx, 1
.text:0000000000004EED                 cmp     ebx, 8
.text:0000000000004EF0                 jnz     short loc_4EDD
.text:0000000000004EF2                 jmp     loc_4BA9
.text:0000000000004EF2 ; ---------------------------------------------------------------------------
.text:0000000000004EF7                 align 20h
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: human_readable+183↑j
.text:0000000000004F00                 sub     rsp, 10h
.text:0000000000004F04                 lea     rcx, a1lf       ; "%.1Lf"
.text:0000000000004F0B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F12                 fld     st
.text:0000000000004F14                 fstp    [rsp+0D8h+var_D8]
.text:0000000000004F17                 mov     r14, [rsp+0D8h+s]
.text:0000000000004F1C                 mov     esi, 1
.text:0000000000004F21                 xor     eax, eax
.text:0000000000004F23                 mov     rdi, r14
.text:0000000000004F26                 fstp    [rsp+0D8h+var_A8]
.text:0000000000004F2A                 call    ___sprintf_chk
.text:0000000000004F2F                 mov     rdi, r14        ; s
.text:0000000000004F32                 call    _strlen
.text:0000000000004F37                 mov     r14, rax
.text:0000000000004F3A                 pop     rax
.text:0000000000004F3B                 pop     rdx
.text:0000000000004F3C                 cmp     r14, [rsp+0C8h+src]
.text:0000000000004F41                 fld     [rsp+0C8h+var_A8]
.text:0000000000004F45                 jbe     loc_49F2
.text:0000000000004F4B                 fld     cs:flt_A7F4
.text:0000000000004F51                 fmul    st(1), st
.text:0000000000004F53
.text:0000000000004F53 loc_4F53:                               ; CODE XREF: human_readable+20E↑j
.text:0000000000004F53                                         ; human_readable+798↓j ...
.text:0000000000004F53                 fdivp   st(1), st
.text:0000000000004F55                 sub     rsp, 10h
.text:0000000000004F59                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000004F60                 mov     r14, [rsp+0D8h+s]
.text:0000000000004F65                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F6C                 mov     esi, 1
.text:0000000000004F71                 xor     eax, eax
.text:0000000000004F73                 xor     ebp, ebp
.text:0000000000004F75                 mov     rdi, r14
.text:0000000000004F78                 fstp    [rsp+0D8h+var_D8]
.text:0000000000004F7B                 call    ___sprintf_chk
.text:0000000000004F80                 mov     rdi, r14        ; s
.text:0000000000004F83                 call    _strlen
.text:0000000000004F88                 pop     r10
.text:0000000000004F8A                 mov     r14, rax
.text:0000000000004F8D                 pop     r11
.text:0000000000004F8F                 jmp     loc_4B70
.text:0000000000004F8F ; ---------------------------------------------------------------------------
.text:0000000000004F94                 align 8
.text:0000000000004F98
.text:0000000000004F98 loc_4F98:                               ; CODE XREF: human_readable+1DC↑j
.text:0000000000004F98                 fld     cs:flt_A7F4
.text:0000000000004F9E                 fmul    st(1), st
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: human_readable+208↑j
.text:0000000000004FA0                 fld     cs:tbyte_A800
.text:0000000000004FA6                 fucomip st, st(2)
.text:0000000000004FA8                 jbe     short loc_4F53
.text:0000000000004FAA                 fstp    dword ptr [rsp+0C8h+src]
.text:0000000000004FAE                 sub     rsp, 10h
.text:0000000000004FB2                 mov     edi, r15d
.text:0000000000004FB5                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000004FB8                 call    adjust_value
.text:0000000000004FBD                 pop     rbp
.text:0000000000004FBE                 pop     r14
.text:0000000000004FC0                 fld     dword ptr [rsp+0C8h+src]
.text:0000000000004FC4                 jmp     short loc_4F53
.text:0000000000004FC4 ; ---------------------------------------------------------------------------
.text:0000000000004FC6                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 loc_4FD0:                               ; CODE XREF: human_readable+644↑j
.text:0000000000004FD0                 mov     rax, rsi
.text:0000000000004FD3                 movsxd  rdi, edi
.text:0000000000004FD6                 and     eax, 1
.text:0000000000004FD9                 add     rax, rdi
.text:0000000000004FDC                 setnz   al
.text:0000000000004FDF                 movzx   eax, al
.text:0000000000004FE2                 add     r9d, eax
.text:0000000000004FE5                 cmp     r9d, 5
.text:0000000000004FE9                 jg      loc_4E66
.text:0000000000004FEF                 jmp     loc_4E80
.text:0000000000004FEF ; ---------------------------------------------------------------------------
.text:0000000000004FF4                 align 8
.text:0000000000004FF8
.text:0000000000004FF8 loc_4FF8:                               ; CODE XREF: human_readable+25A↑j
.text:0000000000004FF8                 setb    dil
.text:0000000000004FFC                 movzx   edi, dil
.text:0000000000005000                 add     edi, 2
.text:0000000000005003                 jmp     loc_4A79
.text:0000000000005003 ; ---------------------------------------------------------------------------
.text:0000000000005008                 align 10h
.text:0000000000005010
.text:0000000000005010 loc_5010:                               ; CODE XREF: human_readable+28A↑j
.text:0000000000005010                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000005015                 xor     ebx, ebx
.text:0000000000005017                 jmp     loc_4E50
.text:0000000000005017 ; ---------------------------------------------------------------------------
.text:000000000000501C                 align 20h
.text:0000000000005020
.text:0000000000005020 loc_5020:                               ; CODE XREF: human_readable+3C6↑j
.text:0000000000005020                 mov     rbx, [rsp+0C8h+var_C0]
.text:0000000000005025                 test    eax, eax
.text:0000000000005027                 lea     rdx, [rbx+1]
.text:000000000000502B                 mov     byte ptr [rbx], 6Bh ; 'k'
.text:000000000000502E                 jnz     loc_4C0B
.text:0000000000005034
.text:0000000000005034 loc_5034:                               ; CODE XREF: human_readable+3E7↑j
.text:0000000000005034                 mov     [rsp+0C8h+var_C0], rdx
.text:0000000000005039                 jmp     loc_4C17
.text:0000000000005039 ; ---------------------------------------------------------------------------
.text:000000000000503E                 align 20h
.text:0000000000005040
.text:0000000000005040 loc_5040:                               ; CODE XREF: human_readable+665↑j
.text:0000000000005040                 cmp     ebx, 8
.text:0000000000005043                 jz      loc_4E80
.text:0000000000005049                 add     ebx, 1
.text:000000000000504C                 test    r12b, 8
.text:0000000000005050                 jz      loc_5112
.text:0000000000005056
.text:0000000000005056 loc_5056:                               ; CODE XREF: human_readable+922↓j
.text:0000000000005056                                         ; human_readable+931↓j ...
.text:0000000000005056                 lea     r15, [r8-1]
.text:000000000000505A                 mov     byte ptr [r8-1], 31h ; '1'
.text:000000000000505F                 jmp     loc_4B90
.text:000000000000505F ; ---------------------------------------------------------------------------
.text:0000000000005064                 align 8
.text:0000000000005068
.text:0000000000005068 loc_5068:                               ; CODE XREF: human_readable+2B1↑j
.text:0000000000005068                                         ; human_readable+5C1↑j
.text:0000000000005068                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000506D                 jmp     loc_4E50
.text:0000000000005072 ; ---------------------------------------------------------------------------
.text:0000000000005072
.text:0000000000005072 loc_5072:                               ; CODE XREF: human_readable+6B9↑j
.text:0000000000005072                 xor     ebx, ebx
.text:0000000000005074                 jmp     loc_4BA9
.text:0000000000005079 ; ---------------------------------------------------------------------------
.text:0000000000005079
.text:0000000000005079 loc_5079:                               ; CODE XREF: human_readable+5E2↑j
.text:0000000000005079                 test    eax, eax
.text:000000000000507B                 jnz     loc_4E06
.text:0000000000005081
.text:0000000000005081 loc_5081:                               ; CODE XREF: human_readable+8FD↓j
.text:0000000000005081                 test    r12b, 8
.text:0000000000005085                 jnz     short loc_50A4
.text:0000000000005087                 mov     r9d, 30h ; '0'
.text:000000000000508D                 jmp     loc_4E0A
.text:0000000000005092 ; ---------------------------------------------------------------------------
.text:0000000000005092
.text:0000000000005092 loc_5092:                               ; CODE XREF: human_readable+5CB↑j
.text:0000000000005092                 mov     edx, eax
.text:0000000000005094                 and     edx, 1
.text:0000000000005097                 add     edx, edi
.text:0000000000005099                 cmp     edx, 2
.text:000000000000509C                 setnle  dl
.text:000000000000509F                 jmp     loc_4DF0
.text:00000000000050A4 ; ---------------------------------------------------------------------------
.text:00000000000050A4
.text:00000000000050A4 loc_50A4:                               ; CODE XREF: human_readable+875↑j
.text:00000000000050A4                 mov     r8, [rsp+0C8h+var_C0]
.text:00000000000050A9                 xor     r9d, r9d
.text:00000000000050AC                 jmp     loc_4E50
.text:00000000000050B1 ; ---------------------------------------------------------------------------
.text:00000000000050B1
.text:00000000000050B1 loc_50B1:                               ; CODE XREF: human_readable+614↑j
.text:00000000000050B1                 mov     rax, [r14]
.text:00000000000050B4                 mov     r9, r14
.text:00000000000050B7                 mov     [r8], rax
.text:00000000000050BA                 mov     eax, ebp
.text:00000000000050BC                 mov     rdx, [r14+rax-8]
.text:00000000000050C1                 mov     [r8+rax-8], rdx
.text:00000000000050C6                 lea     rdx, [r8+8]
.text:00000000000050CA                 mov     rax, r8
.text:00000000000050CD                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:00000000000050D1                 sub     rax, rdx
.text:00000000000050D4                 sub     r9, rax
.text:00000000000050D7                 add     eax, ebp
.text:00000000000050D9                 and     eax, 0FFFFFFF8h
.text:00000000000050DC                 cmp     eax, 8
.text:00000000000050DF                 jb      loc_4E47
.text:00000000000050E5                 and     eax, 0FFFFFFF8h
.text:00000000000050E8                 xor     edi, edi
.text:00000000000050EA
.text:00000000000050EA loc_50EA:                               ; CODE XREF: human_readable+8EA↓j
.text:00000000000050EA                 mov     r10d, edi
.text:00000000000050ED                 add     edi, 8
.text:00000000000050F0                 mov     r11, [r9+r10]
.text:00000000000050F4                 cmp     edi, eax
.text:00000000000050F6                 mov     [rdx+r10], r11
.text:00000000000050FA                 jb      short loc_50EA
.text:00000000000050FC                 jmp     loc_4E47
.text:0000000000005101 ; ---------------------------------------------------------------------------
.text:0000000000005101
.text:0000000000005101 loc_5101:                               ; CODE XREF: human_readable+5F0↑j
.text:0000000000005101                 lea     rsi, [r10+1]
.text:0000000000005105                 cmp     rsi, 0Ah
.text:0000000000005109                 jz      short loc_5160
.text:000000000000510B                 xor     edi, edi
.text:000000000000510D                 jmp     loc_5081
.text:0000000000005112 ; ---------------------------------------------------------------------------
.text:0000000000005112
.text:0000000000005112 loc_5112:                               ; CODE XREF: human_readable+840↑j
.text:0000000000005112                 mov     rax, rbp
.text:0000000000005115                 mov     byte ptr [r8-1], 30h ; '0'
.text:000000000000511A                 not     rax
.text:000000000000511D                 add     r8, rax
.text:0000000000005120                 cmp     ebp, 8
.text:0000000000005123                 mov     eax, ebp
.text:0000000000005125                 jnb     short loc_516A
.text:0000000000005127                 and     ebp, 4
.text:000000000000512A                 jnz     loc_51E1
.text:0000000000005130                 test    eax, eax
.text:0000000000005132                 jz      loc_5056
.text:0000000000005138                 movzx   edx, byte ptr [r14]
.text:000000000000513C                 test    al, 2
.text:000000000000513E                 mov     [r8], dl
.text:0000000000005141                 jz      loc_5056
.text:0000000000005147                 movzx   edx, word ptr [r14+rax-2]
.text:000000000000514D                 mov     [r8+rax-2], dx
.text:0000000000005153                 jmp     loc_5056
.text:0000000000005153 ; ---------------------------------------------------------------------------
.text:0000000000005158                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: human_readable+8F9↑j
.text:0000000000005160                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000005165                 jmp     loc_4E47
.text:000000000000516A ; ---------------------------------------------------------------------------
.text:000000000000516A
.text:000000000000516A loc_516A:                               ; CODE XREF: human_readable+915↑j
.text:000000000000516A                 mov     rax, [r14]
.text:000000000000516D                 lea     rcx, [r8+8]
.text:0000000000005171                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000005175                 mov     [r8], rax
.text:0000000000005178                 mov     eax, ebp
.text:000000000000517A                 mov     rdx, [r14+rax-8]
.text:000000000000517F                 mov     [r8+rax-8], rdx
.text:0000000000005184                 mov     rax, r8
.text:0000000000005187                 sub     rax, rcx
.text:000000000000518A                 sub     r14, rax
.text:000000000000518D                 add     eax, ebp
.text:000000000000518F                 and     eax, 0FFFFFFF8h
.text:0000000000005192                 cmp     eax, 8
.text:0000000000005195                 jb      loc_5056
.text:000000000000519B                 and     eax, 0FFFFFFF8h
.text:000000000000519E                 xor     edx, edx
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: human_readable+99F↓j
.text:00000000000051A0                 mov     esi, edx
.text:00000000000051A2                 add     edx, 8
.text:00000000000051A5                 mov     rdi, [r14+rsi]
.text:00000000000051A9                 cmp     edx, eax
.text:00000000000051AB                 mov     [rcx+rsi], rdi
.text:00000000000051AF                 jb      short loc_51A0
.text:00000000000051B1                 jmp     loc_5056
.text:00000000000051B6 ; ---------------------------------------------------------------------------
.text:00000000000051B6
.text:00000000000051B6 loc_51B6:                               ; CODE XREF: human_readable+61E↑j
.text:00000000000051B6                 mov     edx, [r14]
.text:00000000000051B9                 mov     [r8], edx
.text:00000000000051BC                 mov     edx, [r14+rax-4]
.text:00000000000051C1                 mov     [r8+rax-4], edx
.text:00000000000051C6                 jmp     loc_4E47
.text:00000000000051CB ; ---------------------------------------------------------------------------
.text:00000000000051CB
.text:00000000000051CB loc_51CB:                               ; CODE XREF: human_readable+423↑j
.text:00000000000051CB                 call    ___stack_chk_fail
.text:00000000000051D0 ; ---------------------------------------------------------------------------
.text:00000000000051D0
.text:00000000000051D0 loc_51D0:                               ; CODE XREF: human_readable+631↑j
.text:00000000000051D0                 movzx   edx, word ptr [r14+rax-2]
.text:00000000000051D6                 mov     [r8+rax-2], dx
.text:00000000000051DC                 jmp     loc_4E47
.text:00000000000051E1 ; ---------------------------------------------------------------------------
.text:00000000000051E1
.text:00000000000051E1 loc_51E1:                               ; CODE XREF: human_readable+91A↑j
.text:00000000000051E1                 mov     edx, [r14]
.text:00000000000051E4                 mov     [r8], edx
.text:00000000000051E7                 mov     edx, [r14+rax-4]
.text:00000000000051EC                 mov     [r8+rax-4], edx
.text:00000000000051F1                 jmp     loc_5056
.text:00000000000051F6 ; ---------------------------------------------------------------------------
.text:00000000000051F6
.text:00000000000051F6 loc_51F6:                               ; CODE XREF: human_readable+3B3↑j
.text:00000000000051F6                 test    eax, eax
.text:00000000000051F8                 mov     rdx, [rsp+0C8h+var_C0]
.text:00000000000051FD                 jnz     loc_4C0B
.text:0000000000005203                 jmp     loc_4C17
.text:0000000000005208 ; ---------------------------------------------------------------------------
.text:0000000000005208
.text:0000000000005208 loc_5208:                               ; CODE XREF: human_readable+4E8↑j
.text:0000000000005208                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:000000000000520C                 mov     r15, rax
.text:000000000000520F                 mov     r12d, r14d
.text:0000000000005212                 jmp     loc_4B9A
.text:0000000000005212 ; } // starts at 4810
.text:0000000000005212 human_readable  endp
.text:0000000000005212
.text:0000000000005212 ; ---------------------------------------------------------------------------
.text:0000000000005217                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220 ; Attributes: info_from_lumina
.text:0000000000005220
.text:0000000000005220 ; strtol_error __fastcall human_options(const char *spec, int *opts, uintmax_t *block_size)
.text:0000000000005220                 public human_options
.text:0000000000005220 human_options   proc near
.text:0000000000005220
.text:0000000000005220 var_38          = qword ptr -38h
.text:0000000000005220 var_30          = qword ptr -30h
.text:0000000000005220
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 push    r13
.text:0000000000005222                 push    r12
.text:0000000000005224                 mov     r13, rsi
.text:0000000000005227                 push    rbp
.text:0000000000005228                 push    rbx
.text:0000000000005229                 mov     r12, rdx
.text:000000000000522C                 mov     rbx, rdi
.text:000000000000522F                 sub     rsp, 18h
.text:0000000000005233                 mov     rax, fs:28h
.text:000000000000523C                 mov     [rsp+38h+var_30], rax
.text:0000000000005241                 xor     eax, eax
.text:0000000000005243                 test    rdi, rdi
.text:0000000000005246                 jz      loc_5360
.text:000000000000524C
.text:000000000000524C loc_524C:                               ; CODE XREF: human_options+152↓j
.text:000000000000524C                                         ; human_options+16A↓j
.text:000000000000524C                 xor     ebp, ebp
.text:000000000000524E                 cmp     byte ptr [rbx], 27h ; '''
.text:0000000000005251                 jnz     short loc_525C
.text:0000000000005253                 add     rbx, 1
.text:0000000000005257                 mov     ebp, 4
.text:000000000000525C
.text:000000000000525C loc_525C:                               ; CODE XREF: human_options+31↑j
.text:000000000000525C                 lea     rdx, block_size_opts
.text:0000000000005263                 lea     rsi, block_size_args
.text:000000000000526A                 mov     ecx, 4
.text:000000000000526F                 mov     rdi, rbx
.text:0000000000005272                 call    argmatch
.text:0000000000005277                 test    eax, eax
.text:0000000000005279                 js      short loc_52B8
.text:000000000000527B                 lea     rdx, block_size_opts
.text:0000000000005282                 cdqe
.text:0000000000005284                 mov     qword ptr [r12], 1
.text:000000000000528C                 or      ebp, [rdx+rax*4]
.text:000000000000528F                 xor     eax, eax
.text:0000000000005291                 mov     [r13+0], ebp
.text:0000000000005295
.text:0000000000005295 loc_5295:                               ; CODE XREF: human_options+107↓j
.text:0000000000005295                                         ; human_options+134↓j ...
.text:0000000000005295                 mov     rcx, [rsp+38h+var_30]
.text:000000000000529A                 xor     rcx, fs:28h
.text:00000000000052A3                 jnz     loc_5401
.text:00000000000052A9                 add     rsp, 18h
.text:00000000000052AD                 pop     rbx
.text:00000000000052AE                 pop     rbp
.text:00000000000052AF                 pop     r12
.text:00000000000052B1                 pop     r13
.text:00000000000052B3                 retn
.text:00000000000052B3 ; ---------------------------------------------------------------------------
.text:00000000000052B4                 align 8
.text:00000000000052B8
.text:00000000000052B8 loc_52B8:                               ; CODE XREF: human_options+59↑j
.text:00000000000052B8                 lea     r8, aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:00000000000052BF                 xor     edx, edx
.text:00000000000052C1                 mov     rsi, rsp
.text:00000000000052C4                 mov     rcx, r12
.text:00000000000052C7                 mov     rdi, rbx        ; nptr
.text:00000000000052CA                 call    xstrtoumax
.text:00000000000052CF                 test    eax, eax
.text:00000000000052D1                 jnz     short loc_5318
.text:00000000000052D3                 movzx   esi, byte ptr [rbx]
.text:00000000000052D6                 lea     edx, [rsi-30h]
.text:00000000000052D9                 cmp     dl, 9
.text:00000000000052DC                 jbe     short loc_5308
.text:00000000000052DE                 mov     rcx, [rsp+38h+var_38]
.text:00000000000052E2                 cmp     rbx, rcx
.text:00000000000052E5                 jnz     short loc_52F9
.text:00000000000052E7                 jmp     loc_53C0
.text:00000000000052E7 ; ---------------------------------------------------------------------------
.text:00000000000052EC                 align 10h
.text:00000000000052F0
.text:00000000000052F0 loc_52F0:                               ; CODE XREF: human_options+E6↓j
.text:00000000000052F0                 cmp     rbx, rcx
.text:00000000000052F3                 jz      loc_53C0
.text:00000000000052F9
.text:00000000000052F9 loc_52F9:                               ; CODE XREF: human_options+C5↑j
.text:00000000000052F9                 add     rbx, 1
.text:00000000000052FD                 movzx   edi, byte ptr [rbx]
.text:0000000000005300                 lea     edx, [rdi-30h]
.text:0000000000005303                 cmp     dl, 9
.text:0000000000005306                 ja      short loc_52F0
.text:0000000000005308
.text:0000000000005308 loc_5308:                               ; CODE XREF: human_options+BC↑j
.text:0000000000005308                                         ; human_options+1AD↓j ...
.text:0000000000005308                 mov     rdx, [r12]
.text:000000000000530C                 mov     [r13+0], ebp
.text:0000000000005310                 jmp     short loc_5324
.text:0000000000005310 ; ---------------------------------------------------------------------------
.text:0000000000005312                 align 8
.text:0000000000005318
.text:0000000000005318 loc_5318:                               ; CODE XREF: human_options+B1↑j
.text:0000000000005318                 mov     rdx, [r12]
.text:000000000000531C                 mov     dword ptr [r13+0], 0
.text:0000000000005324
.text:0000000000005324 loc_5324:                               ; CODE XREF: human_options+F0↑j
.text:0000000000005324                 test    rdx, rdx
.text:0000000000005327                 jnz     loc_5295
.text:000000000000532D                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000005334                 call    _getenv
.text:0000000000005339                 cmp     rax, 1
.text:000000000000533D                 sbb     rax, rax
.text:0000000000005340                 and     eax, 200h
.text:0000000000005345                 add     rax, 200h
.text:000000000000534B                 mov     [r12], rax
.text:000000000000534F                 mov     eax, 4
.text:0000000000005354                 jmp     loc_5295
.text:0000000000005354 ; ---------------------------------------------------------------------------
.text:0000000000005359                 align 20h
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: human_options+26↑j
.text:0000000000005360                 lea     rdi, aBlockSize ; "BLOCK_SIZE"
.text:0000000000005367                 call    _getenv
.text:000000000000536C                 test    rax, rax
.text:000000000000536F                 mov     rbx, rax
.text:0000000000005372                 jnz     loc_524C
.text:0000000000005378                 lea     rdi, aBlocksize ; "BLOCKSIZE"
.text:000000000000537F                 call    _getenv
.text:0000000000005384                 test    rax, rax
.text:0000000000005387                 mov     rbx, rax
.text:000000000000538A                 jnz     loc_524C
.text:0000000000005390                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000005397                 call    _getenv
.text:000000000000539C                 test    rax, rax
.text:000000000000539F                 jz      short loc_53EA
.text:00000000000053A1                 mov     qword ptr [r12], 200h
.text:00000000000053A9                 xor     eax, eax
.text:00000000000053AB                 mov     dword ptr [r13+0], 0
.text:00000000000053B3                 jmp     loc_5295
.text:00000000000053B3 ; ---------------------------------------------------------------------------
.text:00000000000053B8                 align 20h
.text:00000000000053C0
.text:00000000000053C0 loc_53C0:                               ; CODE XREF: human_options+C7↑j
.text:00000000000053C0                                         ; human_options+D3↑j
.text:00000000000053C0                 cmp     byte ptr [rcx-1], 42h ; 'B'
.text:00000000000053C4                 jz      short loc_53D8
.text:00000000000053C6                 or      bpl, 80h
.text:00000000000053CA
.text:00000000000053CA loc_53CA:                               ; CODE XREF: human_options+1C8↓j
.text:00000000000053CA                 or      ebp, 20h
.text:00000000000053CD                 jmp     loc_5308
.text:00000000000053CD ; ---------------------------------------------------------------------------
.text:00000000000053D2                 align 8
.text:00000000000053D8
.text:00000000000053D8 loc_53D8:                               ; CODE XREF: human_options+1A4↑j
.text:00000000000053D8                 or      ebp, 180h
.text:00000000000053DE                 cmp     byte ptr [rcx-2], 69h ; 'i'
.text:00000000000053E2                 jnz     loc_5308
.text:00000000000053E8                 jmp     short loc_53CA
.text:00000000000053EA ; ---------------------------------------------------------------------------
.text:00000000000053EA
.text:00000000000053EA loc_53EA:                               ; CODE XREF: human_options+17F↑j
.text:00000000000053EA                 mov     qword ptr [r12], 400h
.text:00000000000053F2                 xor     eax, eax
.text:00000000000053F4                 mov     dword ptr [r13+0], 0
.text:00000000000053FC                 jmp     loc_5295
.text:0000000000005401 ; ---------------------------------------------------------------------------
.text:0000000000005401
.text:0000000000005401 loc_5401:                               ; CODE XREF: human_options+83↑j
.text:0000000000005401                 call    ___stack_chk_fail
.text:0000000000005401 ; } // starts at 5220
.text:0000000000005401 human_options   endp
.text:0000000000005401
.text:0000000000005401 ; ---------------------------------------------------------------------------
.text:0000000000005406                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410 ; Attributes: info_from_lumina
.text:0000000000005410
.text:0000000000005410 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000005410                 public umaxtostr
.text:0000000000005410 umaxtostr       proc near               ; CODE XREF: dopass+36E↑p
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 lea     rcx, [rsi+14h]
.text:0000000000005414                 mov     byte ptr [rsi+14h], 0
.text:0000000000005418                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000005422                 nop     word ptr [rax+rax+00h]
.text:0000000000005428
.text:0000000000005428 loc_5428:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000005428                 mov     rax, rdi
.text:000000000000542B                 sub     rcx, 1
.text:000000000000542F                 mul     rsi
.text:0000000000005432                 shr     rdx, 3
.text:0000000000005436                 lea     rax, [rdx+rdx*4]
.text:000000000000543A                 add     rax, rax
.text:000000000000543D                 sub     rdi, rax
.text:0000000000005440                 add     edi, 30h ; '0'
.text:0000000000005443                 test    rdx, rdx
.text:0000000000005446                 mov     [rcx], dil
.text:0000000000005449                 mov     rdi, rdx
.text:000000000000544C                 jnz     short loc_5428
.text:000000000000544E                 mov     rax, rcx
.text:0000000000005451                 retn
.text:0000000000005451 ; } // starts at 5410
.text:0000000000005451 umaxtostr       endp
.text:0000000000005451
.text:0000000000005451 ; ---------------------------------------------------------------------------
.text:0000000000005452                 align 20h
.text:0000000000005460
.text:0000000000005460 ; =============== S U B R O U T I N E =======================================
.text:0000000000005460
.text:0000000000005460
.text:0000000000005460                 public set_program_name
.text:0000000000005460 set_program_name proc near              ; CODE XREF: main+41↑p
.text:0000000000005460 ; __unwind {
.text:0000000000005460                 test    rdi, rdi
.text:0000000000005463                 push    rbx
.text:0000000000005464                 jz      short loc_54DD
.text:0000000000005466                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000546B                 mov     rbx, rdi
.text:000000000000546E                 call    _strrchr
.text:0000000000005473                 test    rax, rax
.text:0000000000005476                 jz      short loc_54CD
.text:0000000000005478                 lea     r8, [rax+1]
.text:000000000000547C                 mov     rdx, r8
.text:000000000000547F                 sub     rdx, rbx
.text:0000000000005482                 cmp     rdx, 6
.text:0000000000005486                 jle     short loc_54CD
.text:0000000000005488                 lea     rsi, [rax-6]
.text:000000000000548C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000005493                 mov     ecx, 7
.text:0000000000005498                 repe cmpsb
.text:000000000000549A                 setnbe  dl
.text:000000000000549D                 sbb     dl, 0
.text:00000000000054A0                 test    dl, dl
.text:00000000000054A2                 jnz     short loc_54CD
.text:00000000000054A4                 lea     rdi, aLt        ; "lt-"
.text:00000000000054AB                 mov     ecx, 3
.text:00000000000054B0                 mov     rsi, r8
.text:00000000000054B3                 mov     rbx, r8
.text:00000000000054B6                 repe cmpsb
.text:00000000000054B8                 setnbe  dl
.text:00000000000054BB                 sbb     dl, 0
.text:00000000000054BE                 test    dl, dl
.text:00000000000054C0                 jnz     short loc_54CD
.text:00000000000054C2                 lea     rbx, [rax+4]
.text:00000000000054C6                 mov     cs:__bss_start, rbx
.text:00000000000054CD
.text:00000000000054CD loc_54CD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000054CD                                         ; set_program_name+26↑j ...
.text:00000000000054CD                 mov     cs:program_name, rbx
.text:00000000000054D4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000054DB                 pop     rbx
.text:00000000000054DC                 retn
.text:00000000000054DD ; ---------------------------------------------------------------------------
.text:00000000000054DD
.text:00000000000054DD loc_54DD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000054DD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000054E4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000054EB                 mov     edx, 37h ; '7'  ; n
.text:00000000000054F0                 mov     esi, 1          ; size
.text:00000000000054F5                 call    _fwrite
.text:00000000000054FA                 call    _abort
.text:00000000000054FA ; } // starts at 5460
.text:00000000000054FA set_program_name endp
.text:00000000000054FA
.text:00000000000054FA ; ---------------------------------------------------------------------------
.text:00000000000054FF                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500 ; Attributes: info_from_lumina
.text:0000000000005500
.text:0000000000005500 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000005500 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000005500                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 push    rbp
.text:0000000000005501                 push    rbx
.text:0000000000005502                 mov     rbp, rdi
.text:0000000000005505                 mov     ebx, esi
.text:0000000000005507                 sub     rsp, 8
.text:000000000000550B                 call    locale_charset
.text:0000000000005510                 movzx   edx, byte ptr [rax]
.text:0000000000005513                 and     edx, 0FFFFFFDFh
.text:0000000000005516                 cmp     dl, 55h ; 'U'
.text:0000000000005519                 jz      short loc_5590
.text:000000000000551B                 cmp     dl, 47h ; 'G'
.text:000000000000551E                 jz      short loc_5540
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000005520                                         ; gettext_quote+50↓j ...
.text:0000000000005520                 lea     rax, unk_A863
.text:0000000000005527                 lea     rdx, asc_A865   ; "'"
.text:000000000000552E                 cmp     ebx, 9
.text:0000000000005531                 cmovnz  rax, rdx
.text:0000000000005535                 add     rsp, 8
.text:0000000000005539                 pop     rbx
.text:000000000000553A                 pop     rbp
.text:000000000000553B                 retn
.text:000000000000553B ; ---------------------------------------------------------------------------
.text:000000000000553C                 align 20h
.text:0000000000005540
.text:0000000000005540 loc_5540:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000005540                 movzx   edx, byte ptr [rax+1]
.text:0000000000005544                 and     edx, 0FFFFFFDFh
.text:0000000000005547                 cmp     dl, 42h ; 'B'
.text:000000000000554A                 jnz     short loc_5520
.text:000000000000554C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000005550                 jnz     short loc_5520
.text:0000000000005552                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000005556                 jnz     short loc_5520
.text:0000000000005558                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000555C                 jnz     short loc_5520
.text:000000000000555E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000005562                 jnz     short loc_5520
.text:0000000000005564                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000005568                 jnz     short loc_5520
.text:000000000000556A                 cmp     byte ptr [rax+7], 0
.text:000000000000556E                 jnz     short loc_5520
.text:0000000000005570                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005574                 lea     rax, unk_A85C
.text:000000000000557B                 lea     rdx, unk_A860
.text:0000000000005582                 cmovnz  rax, rdx
.text:0000000000005586                 add     rsp, 8
.text:000000000000558A                 pop     rbx
.text:000000000000558B                 pop     rbp
.text:000000000000558C                 retn
.text:000000000000558C ; ---------------------------------------------------------------------------
.text:000000000000558D                 align 10h
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000005590                 movzx   edx, byte ptr [rax+1]
.text:0000000000005594                 and     edx, 0FFFFFFDFh
.text:0000000000005597                 cmp     dl, 54h ; 'T'
.text:000000000000559A                 jnz     short loc_5520
.text:000000000000559C                 movzx   edx, byte ptr [rax+2]
.text:00000000000055A0                 and     edx, 0FFFFFFDFh
.text:00000000000055A3                 cmp     dl, 46h ; 'F'
.text:00000000000055A6                 jnz     loc_5520
.text:00000000000055AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000055B0                 jnz     loc_5520
.text:00000000000055B6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000055BA                 jnz     loc_5520
.text:00000000000055C0                 cmp     byte ptr [rax+5], 0
.text:00000000000055C4                 jnz     loc_5520
.text:00000000000055CA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000055CE                 lea     rax, unk_A854
.text:00000000000055D5                 lea     rdx, unk_A858
.text:00000000000055DC                 cmovnz  rax, rdx
.text:00000000000055E0                 add     rsp, 8
.text:00000000000055E4                 pop     rbx
.text:00000000000055E5                 pop     rbp
.text:00000000000055E6                 retn
.text:00000000000055E6 ; } // starts at 5500
.text:00000000000055E6 gettext_quote   endp
.text:00000000000055E6
.text:00000000000055E6 ; ---------------------------------------------------------------------------
.text:00000000000055E7                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0 ; Attributes: info_from_lumina
.text:00000000000055F0
.text:00000000000055F0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000055F0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000055F0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000055F0
.text:00000000000055F0 var_E0          = dword ptr -0E0h
.text:00000000000055F0 var_DB          = byte ptr -0DBh
.text:00000000000055F0 var_DA          = byte ptr -0DAh
.text:00000000000055F0 var_D9          = byte ptr -0D9h
.text:00000000000055F0 s               = qword ptr -0D8h
.text:00000000000055F0 n               = qword ptr -0D0h
.text:00000000000055F0 var_C8          = qword ptr -0C8h
.text:00000000000055F0 ps              = qword ptr -0C0h
.text:00000000000055F0 var_B8          = qword ptr -0B8h
.text:00000000000055F0 var_B0          = qword ptr -0B0h
.text:00000000000055F0 var_A8          = qword ptr -0A8h
.text:00000000000055F0 s2              = qword ptr -0A0h
.text:00000000000055F0 var_98          = qword ptr -98h
.text:00000000000055F0 var_90          = qword ptr -90h
.text:00000000000055F0 var_88          = qword ptr -88h
.text:00000000000055F0 var_80          = qword ptr -80h
.text:00000000000055F0 var_78          = qword ptr -78h
.text:00000000000055F0 var_70          = dword ptr -70h
.text:00000000000055F0 var_6C          = byte ptr -6Ch
.text:00000000000055F0 var_6B          = byte ptr -6Bh
.text:00000000000055F0 var_6A          = byte ptr -6Ah
.text:00000000000055F0 var_69          = byte ptr -69h
.text:00000000000055F0 var_68          = qword ptr -68h
.text:00000000000055F0 var_60          = qword ptr -60h
.text:00000000000055F0 wc              = dword ptr -4Ch
.text:00000000000055F0 var_48          = qword ptr -48h
.text:00000000000055F0 var_40          = qword ptr -40h
.text:00000000000055F0 arg_0           = qword ptr  8
.text:00000000000055F0 arg_8           = qword ptr  10h
.text:00000000000055F0 arg_10          = qword ptr  18h
.text:00000000000055F0
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 push    r15
.text:00000000000055F2                 push    r14
.text:00000000000055F4                 mov     r15d, r8d
.text:00000000000055F7                 push    r13
.text:00000000000055F9                 push    r12
.text:00000000000055FB                 mov     r14, rdi
.text:00000000000055FE                 push    rbp
.text:00000000000055FF                 push    rbx
.text:0000000000005600                 mov     ebx, r9d
.text:0000000000005603                 mov     r13, rsi
.text:0000000000005606                 mov     rbp, rcx
.text:0000000000005609                 and     ebx, 2
.text:000000000000560C                 sub     rsp, 0B8h
.text:0000000000005613                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000561B                 mov     [rsp+0E8h+s], rdx
.text:0000000000005620                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000005625                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000562A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000562F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000005637                 mov     [rsp+0E8h+var_80], rax
.text:000000000000563C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000005644                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005649                 mov     rax, fs:28h
.text:0000000000005652                 mov     [rsp+0E8h+var_40], rax
.text:000000000000565A                 xor     eax, eax
.text:000000000000565C                 call    ___ctype_get_mb_cur_max
.text:0000000000005661                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000005665                 mov     [rsp+0E8h+var_90], rax
.text:000000000000566A                 ja      def_5681        ; jumptable 00000000000121F1 default case
.text:0000000000005670                 lea     rcx, jpt_5681
.text:0000000000005677                 mov     edx, r15d
.text:000000000000567A                 movsxd  rax, ds:(jpt_5681 - 0A8C0h)[rcx+rdx*4]
.text:000000000000567E                 add     rax, rcx
.text:0000000000005681                 jmp     rax             ; switch jump
.text:0000000000005683 ; ---------------------------------------------------------------------------
.text:0000000000005683
.text:0000000000005683 loc_5683:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005683                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000005683                                         ; DATA XREF: ...
.text:0000000000005683                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000005688                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000568D                 xor     r12d, r12d
.text:0000000000005690                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005699                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000569E                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000056A3
.text:00000000000056A3 loc_56A3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000056A3                 lea     rax, asc_A865   ; "'"
.text:00000000000056AA                 mov     [rsp+0E8h+n], 1
.text:00000000000056B3                 xor     r15d, r15d
.text:00000000000056B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000056BE                 mov     [rsp+0E8h+s2], rax
.text:00000000000056C3
.text:00000000000056C3 loc_56C3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000056C3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000056C3                 xor     r11d, r11d
.text:00000000000056C6                 mov     rax, rbp
.text:00000000000056C9                 mov     r8d, r12d
.text:00000000000056CC                 mov     rbp, r11
.text:00000000000056CF                 mov     r11, rax
.text:00000000000056D2                 nop     word ptr [rax+rax+00h]
.text:00000000000056D8
.text:00000000000056D8 loc_56D8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000056D8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000056D8                 cmp     r11, rbp
.text:00000000000056DB                 setnz   r12b
.text:00000000000056DF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000056E3                 jnz     short loc_56F2
.text:00000000000056E5                 mov     rax, [rsp+0E8h+s]
.text:00000000000056EA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000056EE                 setnz   r12b
.text:00000000000056F2
.text:00000000000056F2 loc_56F2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000056F2                 test    r12b, r12b
.text:00000000000056F5                 jz      loc_5D50
.text:00000000000056FB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005700                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000005705                 lea     r9, [rdi+rbp]
.text:0000000000005709                 setnz   al
.text:000000000000570C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000005710                 mov     r10d, eax
.text:0000000000005713                 jz      loc_57C0
.text:0000000000005719                 mov     rax, [rsp+0E8h+n]
.text:000000000000571E                 test    rax, rax
.text:0000000000005721                 jz      loc_5B50
.text:0000000000005727                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000572B                 lea     rbx, [rbp+rax+0]
.text:0000000000005730                 jnz     short loc_5760
.text:0000000000005732                 cmp     rax, 1
.text:0000000000005736                 jbe     short loc_5760
.text:0000000000005738                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000573D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000005742                 mov     [rsp+0E8h+ps], r9
.text:0000000000005747                 call    _strlen
.text:000000000000574C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005752                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005758                 mov     r11, rax
.text:000000000000575B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000005760
.text:0000000000005760 loc_5760:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000005760                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000005760                 cmp     rbx, r11
.text:0000000000005763                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005768                 ja      loc_5D20
.text:000000000000576E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000005773                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000005778                 mov     rdi, r9         ; s1
.text:000000000000577B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000005780                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005785                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000578A                 call    _memcmp
.text:000000000000578F                 test    eax, eax
.text:0000000000005791                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005796                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000579C                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000057A1                 jnz     loc_5D20
.text:00000000000057A7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000057AC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000057B2                 jnz     loc_6735
.text:00000000000057B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000057C0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000057C0                 movzx   ebx, byte ptr [r9]
.text:00000000000057C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000057C7                 ja      def_57DE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000057CD                 lea     rcx, jpt_57DE
.text:00000000000057D4                 movzx   edx, bl
.text:00000000000057D7                 movsxd  rax, ds:(jpt_57DE - 0A8ECh)[rcx+rdx*4]
.text:00000000000057DB                 add     rax, rcx
.text:00000000000057DE                 jmp     rax             ; switch jump
.text:00000000000057E0 ; ---------------------------------------------------------------------------
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000057E0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:00000000000057E0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000057E3
.text:00000000000057E3 loc_57E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000057E3                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:00000000000057E3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000057E7                 setnz   al
.text:00000000000057EA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000057EE                 jnz     short loc_57FC
.text:00000000000057F0                 mov     rax, [rsp+0E8h+s]
.text:00000000000057F5                 cmp     byte ptr [rax+1], 0
.text:00000000000057F9                 setnz   al
.text:00000000000057FC
.text:00000000000057FC loc_57FC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000057FC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005801                 setz    dl
.text:0000000000005804                 test    al, al
.text:0000000000005806                 jz      loc_5A58
.text:000000000000580C
.text:000000000000580C loc_580C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000580C                 xor     r12d, r12d
.text:000000000000580F                 xor     eax, eax
.text:0000000000005811                 nop     dword ptr [rax+00000000h]
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000005818                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000005818                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000581D                 jnz     loc_5932
.text:0000000000005823                 test    dl, dl
.text:0000000000005825                 jnz     loc_5932
.text:000000000000582B
.text:000000000000582B loc_582B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000582B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000005830                 test    rsi, rsi
.text:0000000000005833                 jz      short loc_5849
.text:0000000000005835                 mov     edx, ebx
.text:0000000000005837                 shr     dl, 5
.text:000000000000583A                 movzx   edx, dl
.text:000000000000583D                 mov     edx, [rsi+rdx*4]
.text:0000000000005840                 bt      edx, ebx
.text:0000000000005843                 jb      loc_5993
.text:0000000000005849
.text:0000000000005849 loc_5849:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000005849                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000005849                 test    r10b, r10b
.text:000000000000584C                 jnz     loc_5993
.text:0000000000005852                 xor     eax, 1
.text:0000000000005855                 add     rbp, 1
.text:0000000000005859                 and     eax, r8d
.text:000000000000585C
.text:000000000000585C loc_585C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000585C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000585C                 test    al, al
.text:000000000000585E                 jz      short loc_5880
.text:0000000000005860                 cmp     r13, r15
.text:0000000000005863                 jbe     short loc_586A
.text:0000000000005865                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000586A
.text:000000000000586A loc_586A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000586A                 lea     rax, [r15+1]
.text:000000000000586E                 cmp     r13, rax
.text:0000000000005871                 jbe     short loc_5879
.text:0000000000005873                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000005879
.text:0000000000005879 loc_5879:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000005879                 add     r15, 2
.text:000000000000587D                 xor     r8d, r8d
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000005880                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000005880                 cmp     r15, r13
.text:0000000000005883                 jnb     short loc_5889
.text:0000000000005885                 mov     [r14+r15], bl
.text:0000000000005889
.text:0000000000005889 loc_5889:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000005889                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000588E                 add     r15, 1
.text:0000000000005892                 mov     eax, 0
.text:0000000000005897                 test    r12b, r12b
.text:000000000000589A                 cmovz   edi, eax
.text:000000000000589D                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000058A2                 jmp     loc_56D8
.text:00000000000058A2 ; ---------------------------------------------------------------------------
.text:00000000000058A7                 align 10h
.text:00000000000058B0
.text:00000000000058B0 loc_58B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000058B0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:00000000000058B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000058B3
.text:00000000000058B3 loc_58B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000058B3                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:00000000000058B3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000058B7                 cmp     eax, 2
.text:00000000000058BA                 jz      loc_5E78
.text:00000000000058C0                 cmp     eax, 5
.text:00000000000058C3                 jz      loc_5E38
.text:00000000000058C9                 cmp     eax, 2
.text:00000000000058CC                 mov     ebx, 3Fh ; '?'
.text:00000000000058D1                 setz    dl
.text:00000000000058D4                 xor     r12d, r12d
.text:00000000000058D7                 xor     eax, eax
.text:00000000000058D9                 jmp     loc_5818
.text:00000000000058D9 ; ---------------------------------------------------------------------------
.text:00000000000058DE                 align 20h
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000058E0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:00000000000058E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000058E3
.text:00000000000058E3 loc_58E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000058E3                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:00000000000058E3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000058E8                 jz      loc_5DF0
.text:00000000000058EE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000058F3                 xor     edx, edx
.text:00000000000058F5                 xor     eax, eax
.text:00000000000058F7                 mov     ebx, 27h ; '''
.text:00000000000058FC                 jmp     loc_5818
.text:00000000000058FC ; ---------------------------------------------------------------------------
.text:0000000000005901                 align 8
.text:0000000000005908
.text:0000000000005908 loc_5908:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005908                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005908                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000590D                 mov     ebx, 74h ; 't'
.text:0000000000005912
.text:0000000000005912 loc_5912:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000005912                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000005912                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005917                 setz    al
.text:000000000000591A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000591E                 jnz     loc_5A6E
.text:0000000000005924
.text:0000000000005924 loc_5924:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000005924                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000005924                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005929                 jnz     short loc_5990
.text:000000000000592B
.text:000000000000592B loc_592B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000592B                 mov     ebx, edx
.text:000000000000592D                 xor     r12d, r12d
.text:0000000000005930                 xor     eax, eax
.text:0000000000005932
.text:0000000000005932 loc_5932:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000005932                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000005932                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005937                 jnz     loc_582B
.text:000000000000593D                 jmp     loc_5849
.text:000000000000593D ; ---------------------------------------------------------------------------
.text:0000000000005942                 align 8
.text:0000000000005948
.text:0000000000005948 loc_5948:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005948                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005948                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000594D                 mov     ebx, 62h ; 'b'
.text:0000000000005952                 jmp     short loc_5924
.text:0000000000005952 ; ---------------------------------------------------------------------------
.text:0000000000005954                 align 8
.text:0000000000005958
.text:0000000000005958 loc_5958:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005958                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005958                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000595D                 jz      loc_5D30
.text:0000000000005963                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005968                 jz      loc_5B80
.text:000000000000596E
.text:000000000000596E loc_596E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000596E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005973                 jz      loc_5B80
.text:0000000000005979                 cmp     [rsp+0E8h+n], 0
.text:000000000000597F                 jnz     loc_5D3B
.text:0000000000005985                 mov     ebx, 5Ch ; '\'
.text:000000000000598A                 nop     word ptr [rax+rax+00h]
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000005990                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000005990                 xor     r12d, r12d
.text:0000000000005993
.text:0000000000005993 loc_5993:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000005993                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000005993                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005998                 setz    dl
.text:000000000000599B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000059A0                 mov     eax, edx
.text:00000000000059A2                 jnz     loc_61F8
.text:00000000000059A8                 mov     eax, r8d
.text:00000000000059AB                 xor     eax, 1
.text:00000000000059AE                 and     al, dl
.text:00000000000059B0                 jz      short loc_59E1
.text:00000000000059B2                 cmp     r13, r15
.text:00000000000059B5                 jbe     short loc_59BC
.text:00000000000059B7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000059BC
.text:00000000000059BC loc_59BC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000059BC                 lea     rdx, [r15+1]
.text:00000000000059C0                 cmp     r13, rdx
.text:00000000000059C3                 jbe     short loc_59CB
.text:00000000000059C5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000059CB
.text:00000000000059CB loc_59CB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000059CB                 lea     rdx, [r15+2]
.text:00000000000059CF                 cmp     r13, rdx
.text:00000000000059D2                 jbe     short loc_59DA
.text:00000000000059D4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000059DA
.text:00000000000059DA loc_59DA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000059DA                 add     r15, 3
.text:00000000000059DE                 mov     r8d, eax
.text:00000000000059E1
.text:00000000000059E1 loc_59E1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000059E1                 cmp     r13, r15
.text:00000000000059E4                 jbe     short loc_59EB
.text:00000000000059E6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000059EB
.text:00000000000059EB loc_59EB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000059EB                 add     r15, 1
.text:00000000000059EF                 add     rbp, 1
.text:00000000000059F3                 jmp     loc_5880
.text:00000000000059F3 ; ---------------------------------------------------------------------------
.text:00000000000059F8                 align 20h
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A00                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005A00                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000005A05                 jnz     loc_5BD3
.text:0000000000005A0B                 xor     edx, edx
.text:0000000000005A0D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000005A12                 jz      loc_592B
.text:0000000000005A18                 add     rbp, 1
.text:0000000000005A1C                 jmp     loc_56D8
.text:0000000000005A1C ; ---------------------------------------------------------------------------
.text:0000000000005A21                 align 8
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A28                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005A28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000005A2D                 setz    dl
.text:0000000000005A30                 xor     eax, eax
.text:0000000000005A32                 jmp     loc_5818
.text:0000000000005A32 ; ---------------------------------------------------------------------------
.text:0000000000005A37                 align 20h
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A40                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005A40                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000005A45                 mov     ebx, 61h ; 'a'
.text:0000000000005A4A                 jmp     loc_5924
.text:0000000000005A4A ; ---------------------------------------------------------------------------
.text:0000000000005A4F                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A50                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005A50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000005A55                 setz    dl
.text:0000000000005A58
.text:0000000000005A58 loc_5A58:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000005A58                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000005A58                 test    rbp, rbp
.text:0000000000005A5B                 jnz     loc_580C
.text:0000000000005A61
.text:0000000000005A61 loc_5A61:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000005A61                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000005A61                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005A66                 and     al, dl
.text:0000000000005A68                 jz      loc_5818
.text:0000000000005A6E
.text:0000000000005A6E loc_5A6E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000005A6E                 mov     rbp, r11
.text:0000000000005A71                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005A79                 jmp     loc_6179
.text:0000000000005A79 ; ---------------------------------------------------------------------------
.text:0000000000005A7E                 align 20h
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A80                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005A80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000005A85                 setz    dl
.text:0000000000005A88                 xor     r12d, r12d
.text:0000000000005A8B                 jmp     short loc_5A61
.text:0000000000005A8B ; ---------------------------------------------------------------------------
.text:0000000000005A8D                 align 10h
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A90                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005A90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000005A95                 mov     ebx, 20h ; ' '
.text:0000000000005A9A                 setz    dl
.text:0000000000005A9D                 jmp     short loc_5A61
.text:0000000000005A9D ; ---------------------------------------------------------------------------
.text:0000000000005A9F                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 loc_5AA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005AA0                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005AA0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000005AA5                 mov     ebx, 72h ; 'r'
.text:0000000000005AAA                 jmp     loc_5912
.text:0000000000005AAA ; ---------------------------------------------------------------------------
.text:0000000000005AAF                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005AB0                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005AB0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000005AB5                 mov     ebx, 66h ; 'f'
.text:0000000000005ABA                 jmp     loc_5924
.text:0000000000005ABA ; ---------------------------------------------------------------------------
.text:0000000000005ABF                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 loc_5AC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005AC0                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005AC0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000005AC5                 mov     ebx, 76h ; 'v'
.text:0000000000005ACA                 jmp     loc_5924
.text:0000000000005ACA ; ---------------------------------------------------------------------------
.text:0000000000005ACF                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005AD0                                         ; DATA XREF: .rodata:jpt_57DE↓o
.text:0000000000005AD0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000005AD5                 mov     ebx, 6Eh ; 'n'
.text:0000000000005ADA                 jmp     loc_5912
.text:0000000000005ADA ; ---------------------------------------------------------------------------
.text:0000000000005ADF                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 def_5B6A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000005AE0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000005AE0                                         ; DATA XREF: ...
.text:0000000000005AE0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000005AE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000005AE8
.text:0000000000005AE8 def_57DE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000005AE8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000005AE8                                         ; DATA XREF: ...
.text:0000000000005AE8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000005AEE                 jnz     loc_5E98
.text:0000000000005AF4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000005AF9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000005AFE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005B03                 call    ___ctype_b_loc
.text:0000000000005B08                 mov     rcx, [rax]
.text:0000000000005B0B                 movzx   edx, bl
.text:0000000000005B0E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000005B14                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005B1A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000005B1F                 mov     edi, 1
.text:0000000000005B24                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000005B28                 and     ax, 4000h
.text:0000000000005B2C                 setnz   r12b
.text:0000000000005B30                 setz    al
.text:0000000000005B33                 and     al, [rsp+0E8h+var_DB]
.text:0000000000005B37
.text:0000000000005B37 loc_5B37:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000005B37                 test    al, al
.text:0000000000005B39                 jnz     loc_64D1
.text:0000000000005B3F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005B44                 setz    dl
.text:0000000000005B47                 jmp     loc_5818
.text:0000000000005B47 ; ---------------------------------------------------------------------------
.text:0000000000005B4C                 align 10h
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000005B50                 movzx   ebx, byte ptr [r9]
.text:0000000000005B54                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000005B57                 ja      short def_5B6A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000005B59                 lea     rcx, jpt_5B6A
.text:0000000000005B60                 movzx   edx, bl
.text:0000000000005B63                 movsxd  rax, ds:(jpt_5B6A - 0AAE8h)[rcx+rdx*4]
.text:0000000000005B67                 add     rax, rcx
.text:0000000000005B6A                 jmp     rax             ; switch jump
.text:0000000000005B6A ; ---------------------------------------------------------------------------
.text:0000000000005B6C                 align 10h
.text:0000000000005B70
.text:0000000000005B70 loc_5B70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005B70                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005B70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000005B73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005B78                 jnz     loc_596E
.text:0000000000005B7E                 xchg    ax, ax
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000005B80                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000005B80                 mov     edx, 5Ch ; '\'
.text:0000000000005B85                 mov     ebx, 5Ch ; '\'
.text:0000000000005B8A                 jmp     loc_5924
.text:0000000000005B8A ; ---------------------------------------------------------------------------
.text:0000000000005B8F                 align 10h
.text:0000000000005B90
.text:0000000000005B90 loc_5B90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005B90                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005B90                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000005B95                 xor     r10d, r10d
.text:0000000000005B98                 mov     ebx, 66h ; 'f'
.text:0000000000005B9D                 jmp     loc_5924
.text:0000000000005B9D ; ---------------------------------------------------------------------------
.text:0000000000005BA2                 align 8
.text:0000000000005BA8
.text:0000000000005BA8 loc_5BA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005BA8                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005BA8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000005BAD                 xor     r10d, r10d
.text:0000000000005BB0                 mov     ebx, 6Eh ; 'n'
.text:0000000000005BB5                 jmp     loc_5912
.text:0000000000005BB5 ; ---------------------------------------------------------------------------
.text:0000000000005BBA                 align 20h
.text:0000000000005BC0
.text:0000000000005BC0 loc_5BC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005BC0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005BC0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000005BC5                 jmp     loc_5990
.text:0000000000005BC5 ; ---------------------------------------------------------------------------
.text:0000000000005BCA                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 loc_5BD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005BD0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005BD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000005BD3
.text:0000000000005BD3 loc_5BD3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000005BD3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005BD8                 setz    dl
.text:0000000000005BDB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005BE0                 jnz     loc_677A
.text:0000000000005BE6                 mov     eax, r8d
.text:0000000000005BE9                 mov     rcx, r15
.text:0000000000005BEC                 xor     eax, 1
.text:0000000000005BEF                 and     al, dl
.text:0000000000005BF1                 jz      short loc_5C20
.text:0000000000005BF3                 cmp     r13, r15
.text:0000000000005BF6                 jbe     short loc_5BFD
.text:0000000000005BF8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005BFD
.text:0000000000005BFD loc_5BFD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000005BFD                 lea     rcx, [r15+1]
.text:0000000000005C01                 cmp     r13, rcx
.text:0000000000005C04                 jbe     short loc_5C0C
.text:0000000000005C06                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005C0C
.text:0000000000005C0C loc_5C0C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000005C0C                 lea     rcx, [r15+2]
.text:0000000000005C10                 cmp     r13, rcx
.text:0000000000005C13                 ja      loc_6249
.text:0000000000005C19
.text:0000000000005C19 loc_5C19:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000005C19                 lea     rcx, [r15+3]
.text:0000000000005C1D                 mov     r8d, eax
.text:0000000000005C20
.text:0000000000005C20 loc_5C20:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000005C20                 cmp     r13, rcx
.text:0000000000005C23                 jbe     short loc_5C2A
.text:0000000000005C25                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000005C2A
.text:0000000000005C2A loc_5C2A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000005C2A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005C2F                 lea     r15, [rcx+1]
.text:0000000000005C33                 jz      loc_6239
.text:0000000000005C39                 lea     rax, [rbp+1]
.text:0000000000005C3D                 cmp     rax, r11
.text:0000000000005C40                 jnb     short loc_5C5B
.text:0000000000005C42                 mov     rax, [rsp+0E8h+s]
.text:0000000000005C47                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000005C4C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000005C50                 sub     eax, 30h ; '0'
.text:0000000000005C53                 cmp     al, 9
.text:0000000000005C55                 jbe     loc_6489
.text:0000000000005C5B
.text:0000000000005C5B loc_5C5B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000005C5B                 mov     eax, r12d
.text:0000000000005C5E                 mov     ebx, 30h ; '0'
.text:0000000000005C63                 xor     r12d, r12d
.text:0000000000005C66                 jmp     loc_5818
.text:0000000000005C66 ; ---------------------------------------------------------------------------
.text:0000000000005C6B                 align 10h
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005C70                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005C70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000005C75                 mov     r12d, r10d
.text:0000000000005C78                 setz    dl
.text:0000000000005C7B                 xor     r10d, r10d
.text:0000000000005C7E                 xor     eax, eax
.text:0000000000005C80                 jmp     loc_5818
.text:0000000000005C80 ; ---------------------------------------------------------------------------
.text:0000000000005C85                 align 8
.text:0000000000005C88
.text:0000000000005C88 loc_5C88:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005C88                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005C88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000005C8D                 setz    dl
.text:0000000000005C90                 xor     r10d, r10d
.text:0000000000005C93                 jmp     loc_5A58
.text:0000000000005C93 ; ---------------------------------------------------------------------------
.text:0000000000005C98                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 loc_5CA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005CA0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005CA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000005CA5                 setz    dl
.text:0000000000005CA8                 xor     r10d, r10d
.text:0000000000005CAB                 xor     r12d, r12d
.text:0000000000005CAE                 jmp     loc_5A61
.text:0000000000005CAE ; ---------------------------------------------------------------------------
.text:0000000000005CB3                 align 8
.text:0000000000005CB8
.text:0000000000005CB8 loc_5CB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005CB8                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005CB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000005CBD                 mov     r12d, r10d
.text:0000000000005CC0                 mov     ebx, 20h ; ' '
.text:0000000000005CC5                 setz    dl
.text:0000000000005CC8                 xor     r10d, r10d
.text:0000000000005CCB                 jmp     loc_5A61
.text:0000000000005CD0 ; ---------------------------------------------------------------------------
.text:0000000000005CD0
.text:0000000000005CD0 loc_5CD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005CD0                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005CD0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000005CD5                 xor     r10d, r10d
.text:0000000000005CD8                 mov     ebx, 72h ; 'r'
.text:0000000000005CDD                 jmp     loc_5912
.text:0000000000005CDD ; ---------------------------------------------------------------------------
.text:0000000000005CE2                 align 8
.text:0000000000005CE8
.text:0000000000005CE8 loc_5CE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005CE8                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005CE8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000005CED                 jmp     loc_5990
.text:0000000000005CED ; ---------------------------------------------------------------------------
.text:0000000000005CF2                 align 8
.text:0000000000005CF8
.text:0000000000005CF8 loc_5CF8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005CF8                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005CF8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000005CFD                 xor     r10d, r10d
.text:0000000000005D00                 mov     ebx, 74h ; 't'
.text:0000000000005D05                 jmp     loc_5912
.text:0000000000005D05 ; ---------------------------------------------------------------------------
.text:0000000000005D0A                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005D10                                         ; DATA XREF: .rodata:jpt_5B6A↓o
.text:0000000000005D10                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000005D15                 jmp     loc_5990
.text:0000000000005D15 ; ---------------------------------------------------------------------------
.text:0000000000005D1A                 align 20h
.text:0000000000005D20
.text:0000000000005D20 loc_5D20:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000005D20                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000005D20                 xor     r10d, r10d
.text:0000000000005D23                 jmp     loc_57C0
.text:0000000000005D23 ; ---------------------------------------------------------------------------
.text:0000000000005D28                 align 10h
.text:0000000000005D30
.text:0000000000005D30 loc_5D30:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000005D30                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005D35                 jnz     loc_66A0
.text:0000000000005D3B
.text:0000000000005D3B loc_5D3B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000005D3B                 add     rbp, 1
.text:0000000000005D3F                 mov     eax, r8d
.text:0000000000005D42                 xor     r12d, r12d
.text:0000000000005D45                 mov     ebx, 5Ch ; '\'
.text:0000000000005D4A                 jmp     loc_585C
.text:0000000000005D4A ; ---------------------------------------------------------------------------
.text:0000000000005D4F                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000005D50                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005D55                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005D5A                 mov     r12d, r8d
.text:0000000000005D5D                 mov     rbp, r11
.text:0000000000005D60                 setz    dl
.text:0000000000005D63                 mov     eax, ebx
.text:0000000000005D65                 test    r15, r15
.text:0000000000005D68                 setz    cl
.text:0000000000005D6B                 and     eax, edx
.text:0000000000005D6D                 and     al, cl
.text:0000000000005D6F                 jnz     loc_67D6
.text:0000000000005D75                 mov     eax, ebx
.text:0000000000005D77                 xor     eax, 1
.text:0000000000005D7A                 and     dl, al
.text:0000000000005D7C                 jz      loc_66EC
.text:0000000000005D82                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000005D87                 jz      loc_66EA
.text:0000000000005D8D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000005D92                 jnz     loc_678D
.text:0000000000005D98                 test    r13, r13
.text:0000000000005D9B                 setz    al
.text:0000000000005D9E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000005DA4                 setnz   dl
.text:0000000000005DA7                 and     al, dl
.text:0000000000005DA9                 jz      loc_67CC
.text:0000000000005DAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005DB4
.text:0000000000005DB4 loc_5DB4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000005DB4                 lea     rbx, asc_A865   ; "'"
.text:0000000000005DBB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000005DBF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005DC7                 mov     r15d, 1
.text:0000000000005DCD                 mov     [rsp+0E8h+n], 1
.text:0000000000005DD6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005DDB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005DE0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000005DE4                 jmp     loc_56C3
.text:0000000000005DE4 ; ---------------------------------------------------------------------------
.text:0000000000005DE9                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000005DF0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005DF5                 jnz     loc_66A0
.text:0000000000005DFB                 test    r13, r13
.text:0000000000005DFE                 jz      loc_6200
.text:0000000000005E04                 xor     edx, edx
.text:0000000000005E06                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000005E0C                 jnz     loc_6200
.text:0000000000005E12
.text:0000000000005E12 loc_5E12:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000005E12                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000005E12                 mov     [rsp+0E8h+var_98], r13
.text:0000000000005E17                 add     r15, 3
.text:0000000000005E1B                 xor     eax, eax
.text:0000000000005E1D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000005E22                 xor     r8d, r8d
.text:0000000000005E25                 mov     r13, rdx
.text:0000000000005E28                 mov     ebx, 27h ; '''
.text:0000000000005E2D                 jmp     loc_5849
.text:0000000000005E2D ; ---------------------------------------------------------------------------
.text:0000000000005E32                 align 8
.text:0000000000005E38
.text:0000000000005E38 loc_5E38:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000005E38                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000005E3D                 jz      short loc_5E60
.text:0000000000005E3F                 lea     rcx, [rbp+2]
.text:0000000000005E43                 cmp     rcx, r11
.text:0000000000005E46                 jnb     short loc_5E60
.text:0000000000005E48                 mov     rax, [rsp+0E8h+s]
.text:0000000000005E4D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000005E52                 jz      loc_65E2
.text:0000000000005E58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005E60
.text:0000000000005E60 loc_5E60:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000005E60                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000005E60                 xor     edx, edx
.text:0000000000005E62                 xor     r12d, r12d
.text:0000000000005E65                 xor     eax, eax
.text:0000000000005E67                 mov     ebx, 3Fh ; '?'
.text:0000000000005E6C                 jmp     loc_5818
.text:0000000000005E6C ; ---------------------------------------------------------------------------
.text:0000000000005E71                 align 8
.text:0000000000005E78
.text:0000000000005E78 loc_5E78:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000005E78                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005E7D                 jnz     loc_66A0
.text:0000000000005E83                 xor     r12d, r12d
.text:0000000000005E86                 xor     eax, eax
.text:0000000000005E88                 mov     ebx, 3Fh ; '?'
.text:0000000000005E8D                 jmp     loc_5849
.text:0000000000005E8D ; ---------------------------------------------------------------------------
.text:0000000000005E92                 align 8
.text:0000000000005E98
.text:0000000000005E98 loc_5E98:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000005E98                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000005EA0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005EA4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000005EB0                 mov     [rsp+0E8h+ps], rax
.text:0000000000005EB5                 jnz     short loc_5EE4
.text:0000000000005EB7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000005EBC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000005EC1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000005EC6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000005ECB                 call    _strlen
.text:0000000000005ED0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000005ED6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005EDC                 mov     r11, rax
.text:0000000000005EDF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005EE4
.text:0000000000005EE4 loc_5EE4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000005EE4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000005EEC                 xor     ecx, ecx
.text:0000000000005EEE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000005EF2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000005EF7                 mov     rbx, rcx
.text:0000000000005EFA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000005F02                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000005F07                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000005F0C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000005F14                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000005F19                 mov     [rsp+0E8h+var_78], r13
.text:0000000000005F1E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000005F23
.text:0000000000005F23 loc_5F23:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000005F23                 mov     rax, [rsp+0E8h+s]
.text:0000000000005F28                 lea     r14, [rbp+rbx+0]
.text:0000000000005F2D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000005F32                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000005F37                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000005F3C                 lea     r13, [rax+r14]
.text:0000000000005F40                 sub     rdx, r14
.text:0000000000005F43                 mov     rsi, r13
.text:0000000000005F46                 call    rpl_mbrtowc
.text:0000000000005F4B                 test    rax, rax
.text:0000000000005F4E                 mov     r15, rax
.text:0000000000005F51                 jz      short loc_5FA1
.text:0000000000005F53                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F57                 jz      loc_6575
.text:0000000000005F5D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005F61                 jz      loc_6501
.text:0000000000005F67                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005F6C                 setz    al
.text:0000000000005F6F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005F73                 jnz     loc_6110
.text:0000000000005F79
.text:0000000000005F79 loc_5F79:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000005F79                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000005F79                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000005F80                 call    _iswprint
.text:0000000000005F85                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000005F8A                 test    eax, eax
.text:0000000000005F8C                 mov     eax, 0
.text:0000000000005F91                 cmovz   r12d, eax
.text:0000000000005F95                 add     rbx, r15
.text:0000000000005F98                 call    _mbsinit
.text:0000000000005F9D                 test    eax, eax
.text:0000000000005F9F                 jz      short loc_5F23
.text:0000000000005FA1
.text:0000000000005FA1 loc_5FA1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000005FA1                 mov     edx, r12d
.text:0000000000005FA4                 mov     rdi, rbx
.text:0000000000005FA7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000005FAD                 xor     edx, 1
.text:0000000000005FB0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005FB5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005FBB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000005FBF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005FC7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005FCC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005FD1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005FD6
.text:0000000000005FD6 loc_5FD6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000005FD6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000005FD6                 cmp     rdi, 1
.text:0000000000005FDA                 jbe     loc_65DB
.text:0000000000005FE0
.text:0000000000005FE0 loc_5FE0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000005FE0                 mov     rcx, rdi
.text:0000000000005FE3                 xor     esi, esi
.text:0000000000005FE5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000005FEB                 add     rcx, rbp
.text:0000000000005FEE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000005FF3                 jmp     loc_60AE
.text:0000000000005FF3 ; ---------------------------------------------------------------------------
.text:0000000000005FF8                 align 20h
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000006000                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006005                 setz    al
.text:0000000000006008                 test    r9b, r9b
.text:000000000000600B                 jnz     loc_64C0
.text:0000000000006011                 mov     esi, r8d
.text:0000000000006014                 xor     esi, 1
.text:0000000000006017                 and     al, sil
.text:000000000000601A                 jz      short loc_604B
.text:000000000000601C                 cmp     r13, r15
.text:000000000000601F                 jbe     short loc_6026
.text:0000000000006021                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006026
.text:0000000000006026 loc_6026:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000006026                 lea     rsi, [r15+1]
.text:000000000000602A                 cmp     r13, rsi
.text:000000000000602D                 jbe     short loc_6035
.text:000000000000602F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000006035
.text:0000000000006035 loc_6035:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000006035                 lea     rsi, [r15+2]
.text:0000000000006039                 cmp     r13, rsi
.text:000000000000603C                 jbe     short loc_6044
.text:000000000000603E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006044
.text:0000000000006044 loc_6044:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000006044                 add     r15, 3
.text:0000000000006048                 mov     r8d, eax
.text:000000000000604B
.text:000000000000604B loc_604B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000604B                 cmp     r13, r15
.text:000000000000604E                 jbe     short loc_6055
.text:0000000000006050                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006055
.text:0000000000006055 loc_6055:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000006055                 lea     rax, [r15+1]
.text:0000000000006059                 cmp     r13, rax
.text:000000000000605C                 jbe     short loc_606B
.text:000000000000605E                 mov     eax, ebx
.text:0000000000006060                 shr     al, 6
.text:0000000000006063                 add     eax, 30h ; '0'
.text:0000000000006066                 mov     [r14+r15+1], al
.text:000000000000606B
.text:000000000000606B loc_606B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000606B                 lea     rax, [r15+2]
.text:000000000000606F                 cmp     r13, rax
.text:0000000000006072                 jbe     short loc_6084
.text:0000000000006074                 mov     eax, ebx
.text:0000000000006076                 shr     al, 3
.text:0000000000006079                 and     eax, 7
.text:000000000000607C                 add     eax, 30h ; '0'
.text:000000000000607F                 mov     [r14+r15+2], al
.text:0000000000006084
.text:0000000000006084 loc_6084:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000006084                 and     ebx, 7
.text:0000000000006087                 add     rbp, 1
.text:000000000000608B                 add     r15, 3
.text:000000000000608F                 add     ebx, 30h ; '0'
.text:0000000000006092                 cmp     rbp, rcx
.text:0000000000006095                 jnb     loc_5880
.text:000000000000609B                 mov     esi, edx
.text:000000000000609D
.text:000000000000609D loc_609D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000609D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000609D                 cmp     r13, r15
.text:00000000000060A0                 jbe     short loc_60A6
.text:00000000000060A2                 mov     [r14+r15], bl
.text:00000000000060A6
.text:00000000000060A6 loc_60A6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000060A6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000060AA                 add     r15, 1
.text:00000000000060AE
.text:00000000000060AE loc_60AE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000060AE                 test    dl, dl
.text:00000000000060B0                 jnz     loc_6000
.text:00000000000060B6                 mov     eax, esi
.text:00000000000060B8                 xor     eax, 1
.text:00000000000060BB                 and     eax, r8d
.text:00000000000060BE                 test    r10b, r10b
.text:00000000000060C1                 jz      short loc_60D1
.text:00000000000060C3                 cmp     r13, r15
.text:00000000000060C6                 jbe     short loc_60CD
.text:00000000000060C8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000060CD
.text:00000000000060CD loc_60CD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000060CD                 add     r15, 1
.text:00000000000060D1
.text:00000000000060D1 loc_60D1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000060D1                 add     rbp, 1
.text:00000000000060D5                 cmp     rbp, rcx
.text:00000000000060D8                 jnb     loc_585C
.text:00000000000060DE                 test    al, al
.text:00000000000060E0                 jz      loc_64DE
.text:00000000000060E6                 cmp     r13, r15
.text:00000000000060E9                 jbe     short loc_60F0
.text:00000000000060EB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000060F0                 lea     rax, [r15+1]
.text:00000000000060F4                 cmp     r13, rax
.text:00000000000060F7                 jbe     short loc_60FF
.text:00000000000060F9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000060FF
.text:00000000000060FF loc_60FF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000060FF                 add     r15, 2
.text:0000000000006103                 xor     r10d, r10d
.text:0000000000006106                 xor     r8d, r8d
.text:0000000000006109                 jmp     short loc_609D
.text:0000000000006109 ; ---------------------------------------------------------------------------
.text:000000000000610B                 align 10h
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000006110                 cmp     r15, 1
.text:0000000000006114                 jz      loc_5F79
.text:000000000000611A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000611F                 lea     rcx, [rdi+r15]
.text:0000000000006123                 lea     rdx, [rdi+r14+1]
.text:0000000000006128                 lea     r8, [rcx+r14]
.text:000000000000612C                 jmp     short loc_613D
.text:000000000000612C ; ---------------------------------------------------------------------------
.text:000000000000612E                 align 10h
.text:0000000000006130
.text:0000000000006130 loc_6130:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000006130                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000006130                 add     rdx, 1
.text:0000000000006134                 cmp     r8, rdx
.text:0000000000006137                 jz      loc_5F79
.text:000000000000613D
.text:000000000000613D loc_613D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000613D                 movzx   ecx, byte ptr [rdx]
.text:0000000000006140                 sub     ecx, 5Bh ; '['
.text:0000000000006143                 cmp     cl, 21h ; '!'
.text:0000000000006146                 ja      short loc_6130
.text:0000000000006148                 mov     esi, 1
.text:000000000000614D                 shl     rsi, cl
.text:0000000000006150                 mov     rcx, rsi
.text:0000000000006153                 mov     rsi, 20000002Bh
.text:000000000000615D                 test    rcx, rsi
.text:0000000000006160                 jz      short loc_6130
.text:0000000000006162                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006167                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000616C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000006171                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006179
.text:0000000000006179 loc_6179:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000006179                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000006179                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000617E                 jz      short loc_6190
.text:0000000000006180                 test    al, al
.text:0000000000006182                 mov     eax, 4
.text:0000000000006187                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000618C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000006190
.text:0000000000006190 loc_6190:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000006190                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000006190                 sub     rsp, 8
.text:0000000000006194                 mov     rcx, rbp
.text:0000000000006197                 mov     rsi, r13
.text:000000000000619A                 push    [rsp+0F0h+var_88]
.text:000000000000619E                 push    [rsp+0F8h+var_80]
.text:00000000000061A2                 mov     rdi, r14
.text:00000000000061A5                 push    0
.text:00000000000061A7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000061AF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000061B4                 mov     rdx, [rsp+108h+s]
.text:00000000000061B9                 and     r9d, 0FFFFFFFDh
.text:00000000000061BD                 call    quotearg_buffer_restyled
.text:00000000000061C2                 add     rsp, 20h
.text:00000000000061C6                 mov     r15, rax
.text:00000000000061C9
.text:00000000000061C9 loc_61C9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000061C9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000061C9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000061D1                 xor     rbx, fs:28h
.text:00000000000061DA                 mov     rax, r15
.text:00000000000061DD                 jnz     loc_67E3
.text:00000000000061E3                 add     rsp, 0B8h
.text:00000000000061EA                 pop     rbx
.text:00000000000061EB                 pop     rbp
.text:00000000000061EC                 pop     r12
.text:00000000000061EE                 pop     r13
.text:00000000000061F0                 pop     r14
.text:00000000000061F2                 pop     r15
.text:00000000000061F4                 retn
.text:00000000000061F4 ; ---------------------------------------------------------------------------
.text:00000000000061F5                 align 8
.text:00000000000061F8
.text:00000000000061F8 loc_61F8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000061F8                 mov     rbp, r11
.text:00000000000061FB                 jmp     loc_6179
.text:0000000000006200 ; ---------------------------------------------------------------------------
.text:0000000000006200
.text:0000000000006200 loc_6200:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000006200                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000006200                 cmp     r13, r15
.text:0000000000006203                 jbe     short loc_620A
.text:0000000000006205                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000620A
.text:000000000000620A loc_620A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000620A                 lea     rax, [r15+1]
.text:000000000000620E                 cmp     r13, rax
.text:0000000000006211                 jbe     short loc_6219
.text:0000000000006213                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000006219
.text:0000000000006219 loc_6219:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000006219                 lea     rax, [r15+2]
.text:000000000000621D                 cmp     r13, rax
.text:0000000000006220                 jbe     loc_6812
.text:0000000000006226                 mov     rdx, r13
.text:0000000000006229                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000622F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006234                 jmp     loc_5E12
.text:0000000000006239 ; ---------------------------------------------------------------------------
.text:0000000000006239
.text:0000000000006239 loc_6239:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000006239                 mov     eax, r12d
.text:000000000000623C                 mov     ebx, 30h ; '0'
.text:0000000000006241                 xor     r12d, r12d
.text:0000000000006244                 jmp     loc_5849
.text:0000000000006249 ; ---------------------------------------------------------------------------
.text:0000000000006249
.text:0000000000006249 loc_6249:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000006249                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000624F                 jmp     loc_5C19
.text:0000000000006254 ; ---------------------------------------------------------------------------
.text:0000000000006254
.text:0000000000006254 loc_6254:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006254                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:0000000000006254                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000006256                 jnz     loc_5683        ; jumptable 00000000000121F1 case 1
.text:000000000000625C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006261
.text:0000000000006261 loc_6261:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000006261                 test    r13, r13
.text:0000000000006264                 jnz     loc_67FA
.text:000000000000626A                 lea     rax, asc_A865   ; "'"
.text:0000000000006271                 mov     [rsp+0E8h+var_98], 0
.text:000000000000627A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000627F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006284                 xor     r12d, r12d
.text:0000000000006287                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000628C                 mov     [rsp+0E8h+n], 1
.text:0000000000006295                 mov     [rsp+0E8h+s2], rax
.text:000000000000629A                 mov     r15d, 1
.text:00000000000062A0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000062A8                 jmp     loc_56C3
.text:00000000000062A8 ; ---------------------------------------------------------------------------
.text:00000000000062AD                 align 10h
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000062B0                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:00000000000062B0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000062B2                 jnz     loc_66AD
.text:00000000000062B8                 test    r13, r13
.text:00000000000062BB                 jz      loc_64E6
.text:00000000000062C1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000062C5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000062CA                 xor     r12d, r12d
.text:00000000000062CD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000062D2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000062DB
.text:00000000000062DB loc_62DB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000062DB                 lea     rax, unk_A863
.text:00000000000062E2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000062E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000062EC                 mov     [rsp+0E8h+n], 1
.text:00000000000062F5                 mov     r15d, 1
.text:00000000000062FB                 mov     [rsp+0E8h+s2], rax
.text:0000000000006300                 jmp     loc_56C3
.text:0000000000006305 ; ---------------------------------------------------------------------------
.text:0000000000006305
.text:0000000000006305 loc_6305:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006305                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:0000000000006305                 lea     rax, unk_A863   ; jumptable 00000000000121F1 case 6
.text:000000000000630C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006311                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006316                 xor     r12d, r12d
.text:0000000000006319                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006322                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006327                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000632C                 mov     [rsp+0E8h+n], 1
.text:0000000000006335                 xor     r15d, r15d
.text:0000000000006338                 mov     [rsp+0E8h+s2], rax
.text:000000000000633D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000006345                 jmp     loc_56C3
.text:000000000000634A ; ---------------------------------------------------------------------------
.text:000000000000634A
.text:000000000000634A loc_634A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000634A                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:000000000000634A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000634F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006354                 xor     r12d, r12d
.text:0000000000006357                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006360                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006365                 xor     r15d, r15d
.text:0000000000006368                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000636D                 mov     [rsp+0E8h+n], 0
.text:0000000000006376                 mov     [rsp+0E8h+s2], 0
.text:000000000000637F                 jmp     loc_56C3
.text:0000000000006384 ; ---------------------------------------------------------------------------
.text:0000000000006384
.text:0000000000006384 loc_6384:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006384                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:0000000000006384                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000006389                 jz      short loc_63E1
.text:000000000000638B                 lea     rsi, asc_A867   ; "`"
.text:0000000000006392                 xor     edi, edi        ; domainname
.text:0000000000006394                 mov     edx, 5          ; category
.text:0000000000006399                 call    _dcgettext
.text:000000000000639E                 mov     rcx, rax
.text:00000000000063A1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000063A6                 lea     rax, asc_A867   ; "`"
.text:00000000000063AD                 cmp     rcx, rax
.text:00000000000063B0                 jz      loc_674E
.text:00000000000063B6
.text:00000000000063B6 loc_63B6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000063B6                 lea     rsi, asc_A865   ; "'"
.text:00000000000063BD                 xor     edi, edi        ; domainname
.text:00000000000063BF                 mov     edx, 5          ; category
.text:00000000000063C4                 call    _dcgettext
.text:00000000000063C9                 mov     rcx, rax
.text:00000000000063CC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000063D1                 lea     rax, asc_A865   ; "'"
.text:00000000000063D8                 cmp     rcx, rax
.text:00000000000063DB                 jz      loc_6764
.text:00000000000063E1
.text:00000000000063E1 loc_63E1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000063E1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000063E1                 xor     r15d, r15d
.text:00000000000063E4                 test    ebx, ebx
.text:00000000000063E6                 jz      loc_65AD
.text:00000000000063EC
.text:00000000000063EC loc_63EC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000063EC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000063EC                 test    ebx, ebx
.text:00000000000063EE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000063F3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000063F8                 xor     r12d, r12d
.text:00000000000063FB                 mov     rdi, rbx        ; s
.text:00000000000063FE                 call    _strlen
.text:0000000000006403                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006408                 mov     [rsp+0E8h+n], rax
.text:000000000000640D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006412                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006417                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006420                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006425                 jmp     loc_56C3
.text:000000000000642A ; ---------------------------------------------------------------------------
.text:000000000000642A
.text:000000000000642A loc_642A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000642A                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:000000000000642A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000642F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006434                 xor     r12d, r12d
.text:0000000000006437                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006440                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006445                 xor     r15d, r15d
.text:0000000000006448                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000644D                 mov     [rsp+0E8h+n], 0
.text:0000000000006456                 mov     [rsp+0E8h+s2], 0
.text:000000000000645F                 jmp     loc_56C3
.text:0000000000006464 ; ---------------------------------------------------------------------------
.text:0000000000006464
.text:0000000000006464 loc_6464:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006464                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:0000000000006464                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000006469                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000646E                 xor     r12d, r12d
.text:0000000000006471                 mov     [rsp+0E8h+var_98], 0
.text:000000000000647A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000647F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006484                 jmp     loc_56A3
.text:0000000000006489 ; ---------------------------------------------------------------------------
.text:0000000000006489
.text:0000000000006489 loc_6489:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000006489                 cmp     r13, r15
.text:000000000000648C                 jbe     short loc_6493
.text:000000000000648E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000006493
.text:0000000000006493 loc_6493:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000006493                 lea     rax, [rcx+2]
.text:0000000000006497                 cmp     r13, rax
.text:000000000000649A                 jbe     short loc_64A2
.text:000000000000649C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000064A2
.text:00000000000064A2 loc_64A2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000064A2                 mov     eax, r12d
.text:00000000000064A5                 lea     r15, [rcx+3]
.text:00000000000064A9                 xor     r12d, r12d
.text:00000000000064AC                 mov     ebx, 30h ; '0'
.text:00000000000064B1                 jmp     loc_5818
.text:00000000000064B1 ; ---------------------------------------------------------------------------
.text:00000000000064B6                 align 20h
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000064C0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000064C5                 mov     rbp, r11
.text:00000000000064C8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000064CC                 jmp     loc_6179
.text:00000000000064D1 ; ---------------------------------------------------------------------------
.text:00000000000064D1
.text:00000000000064D1 loc_64D1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000064D1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000064D6                 xor     r12d, r12d
.text:00000000000064D9                 jmp     loc_5FE0
.text:00000000000064DE ; ---------------------------------------------------------------------------
.text:00000000000064DE
.text:00000000000064DE loc_64DE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000064DE                 xor     r10d, r10d
.text:00000000000064E1                 jmp     loc_609D
.text:00000000000064E6 ; ---------------------------------------------------------------------------
.text:00000000000064E6
.text:00000000000064E6 loc_64E6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000064E6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000064EF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000064F4                 xor     r12d, r12d
.text:00000000000064F7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000064FC                 jmp     loc_62DB
.text:0000000000006501 ; ---------------------------------------------------------------------------
.text:0000000000006501
.text:0000000000006501 loc_6501:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000006501                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006506                 mov     rsi, r14
.text:0000000000006509                 mov     rcx, r13
.text:000000000000650C                 mov     rax, rbx
.text:000000000000650F                 mov     rdi, rbx
.text:0000000000006512                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006518                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000651D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000006525                 cmp     rsi, r11
.text:0000000000006528                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000652E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006536                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000653B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006540                 jnb     short loc_6568
.text:0000000000006542                 cmp     byte ptr [rcx], 0
.text:0000000000006545                 jnz     short loc_6557
.text:0000000000006547                 jmp     short loc_6568
.text:0000000000006547 ; ---------------------------------------------------------------------------
.text:0000000000006549                 align 10h
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000006550                 cmp     byte ptr [r9+rax], 0
.text:0000000000006555                 jz      short loc_6565
.text:0000000000006557
.text:0000000000006557 loc_6557:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000006557                 add     rax, 1
.text:000000000000655B                 lea     rdx, [rbp+rax+0]
.text:0000000000006560                 cmp     r11, rdx
.text:0000000000006563                 ja      short loc_6550
.text:0000000000006565
.text:0000000000006565 loc_6565:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000006565                 mov     rdi, rax
.text:0000000000006568
.text:0000000000006568 loc_6568:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000006568                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000006568                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000656D                 xor     r12d, r12d
.text:0000000000006570                 jmp     loc_5FD6
.text:0000000000006575 ; ---------------------------------------------------------------------------
.text:0000000000006575
.text:0000000000006575 loc_6575:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000006575                 mov     rdi, rbx
.text:0000000000006578                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000657E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006583                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006589                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006591                 xor     r12d, r12d
.text:0000000000006594                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006599                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000659E                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000065A3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000065A8                 jmp     loc_5FD6
.text:00000000000065AD ; ---------------------------------------------------------------------------
.text:00000000000065AD
.text:00000000000065AD loc_65AD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000065AD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000065B2                 movzx   eax, byte ptr [rdx]
.text:00000000000065B5                 test    al, al
.text:00000000000065B7                 jz      loc_63EC
.text:00000000000065BD                 nop     dword ptr [rax]
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000065C0                 cmp     r13, r15
.text:00000000000065C3                 jbe     short loc_65C9
.text:00000000000065C5                 mov     [r14+r15], al
.text:00000000000065C9
.text:00000000000065C9 loc_65C9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000065C9                 add     r15, 1
.text:00000000000065CD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000065D2                 test    al, al
.text:00000000000065D4                 jnz     short loc_65C0
.text:00000000000065D6                 jmp     loc_63EC
.text:00000000000065DB ; ---------------------------------------------------------------------------
.text:00000000000065DB
.text:00000000000065DB loc_65DB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000065DB                 mov     eax, edx
.text:00000000000065DD                 jmp     loc_5B37
.text:00000000000065E2 ; ---------------------------------------------------------------------------
.text:00000000000065E2
.text:00000000000065E2 loc_65E2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000065E2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000065E6                 cmp     bl, 3Eh ; '>'
.text:00000000000065E9                 ja      loc_5E60
.text:00000000000065EF                 mov     rax, 7000A38200000000h
.text:00000000000065F9                 bt      rax, rbx
.text:00000000000065FD                 jnb     loc_5E60
.text:0000000000006603                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006608                 jnz     loc_67F2
.text:000000000000660E                 cmp     r13, r15
.text:0000000000006611                 jbe     short loc_6618
.text:0000000000006613                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000006618
.text:0000000000006618 loc_6618:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000006618                 lea     rax, [r15+1]
.text:000000000000661C                 cmp     r13, rax
.text:000000000000661F                 jbe     short loc_6627
.text:0000000000006621                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000006627
.text:0000000000006627 loc_6627:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000006627                 lea     rax, [r15+2]
.text:000000000000662B                 cmp     r13, rax
.text:000000000000662E                 jbe     short loc_6636
.text:0000000000006630                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000006636
.text:0000000000006636 loc_6636:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000006636                 lea     rax, [r15+3]
.text:000000000000663A                 cmp     r13, rax
.text:000000000000663D                 jbe     short loc_6645
.text:000000000000663F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000006645
.text:0000000000006645 loc_6645:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000006645                 add     r15, 4
.text:0000000000006649                 xor     edx, edx
.text:000000000000664B                 xor     r12d, r12d
.text:000000000000664E                 xor     eax, eax
.text:0000000000006650                 mov     rbp, rcx
.text:0000000000006653                 jmp     loc_5818
.text:0000000000006658 ; ---------------------------------------------------------------------------
.text:0000000000006658
.text:0000000000006658 loc_6658:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006658                                         ; DATA XREF: .rodata:jpt_5681↓o
.text:0000000000006658                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000665A                 jz      loc_67E8
.text:0000000000006660                 lea     rax, asc_A865   ; "'"
.text:0000000000006667                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000666C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006671                 xor     r12d, r12d
.text:0000000000006674                 mov     [rsp+0E8h+var_98], 0
.text:000000000000667D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006682                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006687                 mov     [rsp+0E8h+n], 1
.text:0000000000006690                 xor     r15d, r15d
.text:0000000000006693                 mov     [rsp+0E8h+s2], rax
.text:0000000000006698                 jmp     loc_56C3
.text:0000000000006698 ; ---------------------------------------------------------------------------
.text:000000000000669D                 align 20h
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000066A0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000066A0                 mov     rbp, r11
.text:00000000000066A3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000066A8                 jmp     loc_6179
.text:00000000000066AD ; ---------------------------------------------------------------------------
.text:00000000000066AD
.text:00000000000066AD loc_66AD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000066AD                 lea     rax, unk_A863
.text:00000000000066B4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000066B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000066BE                 xor     r12d, r12d
.text:00000000000066C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000066CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000066CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000066D4                 mov     [rsp+0E8h+n], 1
.text:00000000000066DD                 xor     r15d, r15d
.text:00000000000066E0                 mov     [rsp+0E8h+s2], rax
.text:00000000000066E5                 jmp     loc_56C3
.text:00000000000066EA ; ---------------------------------------------------------------------------
.text:00000000000066EA
.text:00000000000066EA loc_66EA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000066EA                 mov     eax, edx
.text:00000000000066EC
.text:00000000000066EC loc_66EC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000066EC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000066EC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000066F1                 test    rbx, rbx
.text:00000000000066F4                 jz      short loc_6722
.text:00000000000066F6                 test    al, al
.text:00000000000066F8                 jz      short loc_6722
.text:00000000000066FA                 movzx   ecx, byte ptr [rbx]
.text:00000000000066FD                 mov     rax, rbx
.text:0000000000006700                 test    cl, cl
.text:0000000000006702                 jz      short loc_6722
.text:0000000000006704                 mov     rdx, r15
.text:0000000000006707                 sub     rax, r15
.text:000000000000670A
.text:000000000000670A loc_670A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000670A                 cmp     r13, rdx
.text:000000000000670D                 jbe     short loc_6713
.text:000000000000670F                 mov     [r14+rdx], cl
.text:0000000000006713
.text:0000000000006713 loc_6713:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000006713                 add     rdx, 1
.text:0000000000006717                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000671B                 test    cl, cl
.text:000000000000671D                 jnz     short loc_670A
.text:000000000000671F                 mov     r15, rdx
.text:0000000000006722
.text:0000000000006722 loc_6722:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000006722                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000006722                 cmp     r13, r15
.text:0000000000006725                 jbe     loc_61C9
.text:000000000000672B                 mov     byte ptr [r14+r15], 0
.text:0000000000006730                 jmp     loc_61C9
.text:0000000000006735 ; ---------------------------------------------------------------------------
.text:0000000000006735
.text:0000000000006735 loc_6735:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000006735                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000673A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000673F                 mov     rbp, r11
.text:0000000000006742                 setz    al
.text:0000000000006745                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006749                 jmp     loc_6179
.text:000000000000674E ; ---------------------------------------------------------------------------
.text:000000000000674E
.text:000000000000674E loc_674E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000674E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006752                 mov     rdi, rcx
.text:0000000000006755                 call    gettext_quote
.text:000000000000675A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000675F                 jmp     loc_63B6
.text:0000000000006764 ; ---------------------------------------------------------------------------
.text:0000000000006764
.text:0000000000006764 loc_6764:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000006764                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006768                 mov     rdi, rcx
.text:000000000000676B                 call    gettext_quote
.text:0000000000006770                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006775                 jmp     loc_63E1
.text:000000000000677A ; ---------------------------------------------------------------------------
.text:000000000000677A
.text:000000000000677A loc_677A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000677A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000677F                 mov     rbp, r11
.text:0000000000006782                 mov     eax, edx
.text:0000000000006784                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006788                 jmp     loc_6179
.text:000000000000678D ; ---------------------------------------------------------------------------
.text:000000000000678D
.text:000000000000678D loc_678D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000678D                 sub     rsp, 8
.text:0000000000006791                 mov     r8d, 5
.text:0000000000006797                 mov     rcx, r11
.text:000000000000679A                 push    [rsp+0F0h+var_88]
.text:000000000000679E                 push    [rsp+0F8h+var_80]
.text:00000000000067A2                 mov     rdi, r14
.text:00000000000067A5                 push    [rsp+100h+var_C8]
.text:00000000000067A9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000067B1                 mov     rdx, [rsp+108h+s]
.text:00000000000067B6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000067BB                 call    quotearg_buffer_restyled
.text:00000000000067C0                 add     rsp, 20h
.text:00000000000067C4                 mov     r15, rax
.text:00000000000067C7                 jmp     loc_61C9
.text:00000000000067CC ; ---------------------------------------------------------------------------
.text:00000000000067CC
.text:00000000000067CC loc_67CC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000067CC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000067D1                 jmp     loc_66EC
.text:00000000000067D6 ; ---------------------------------------------------------------------------
.text:00000000000067D6
.text:00000000000067D6 loc_67D6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000067D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000067DE                 jmp     loc_6179
.text:00000000000067E3 ; ---------------------------------------------------------------------------
.text:00000000000067E3
.text:00000000000067E3 loc_67E3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000067E3                 call    ___stack_chk_fail
.text:00000000000067E8 ; ---------------------------------------------------------------------------
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000067E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000067ED                 jmp     loc_6261
.text:00000000000067F2 ; ---------------------------------------------------------------------------
.text:00000000000067F2
.text:00000000000067F2 loc_67F2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000067F2                 mov     rbp, r11
.text:00000000000067F5                 jmp     loc_6190
.text:00000000000067FA ; ---------------------------------------------------------------------------
.text:00000000000067FA
.text:00000000000067FA loc_67FA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000067FA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000067FF                 xor     eax, eax
.text:0000000000006801                 xor     r12d, r12d
.text:0000000000006804                 mov     [rsp+0E8h+var_98], 0
.text:000000000000680D                 jmp     loc_5DB4
.text:0000000000006812 ; ---------------------------------------------------------------------------
.text:0000000000006812
.text:0000000000006812 loc_6812:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000006812                 mov     rdx, r13
.text:0000000000006815                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000681A                 jmp     loc_5E12
.text:000000000000681F ; ---------------------------------------------------------------------------
.text:000000000000681F
.text:000000000000681F def_5681:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000681F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000681F ; } // starts at 55F0
.text:000000000000681F quotearg_buffer_restyled endp
.text:000000000000681F
.text:000000000000681F ; ---------------------------------------------------------------------------
.text:0000000000006824                 align 10h
.text:0000000000006830
.text:0000000000006830 ; =============== S U B R O U T I N E =======================================
.text:0000000000006830
.text:0000000000006830
.text:0000000000006830 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000006830                                         ; quotearg_n_mem+7↓j ...
.text:0000000000006830
.text:0000000000006830 var_50          = qword ptr -50h
.text:0000000000006830 var_48          = qword ptr -48h
.text:0000000000006830 var_40          = dword ptr -40h
.text:0000000000006830 var_3C          = dword ptr -3Ch
.text:0000000000006830
.text:0000000000006830 ; __unwind {
.text:0000000000006830                 push    r15
.text:0000000000006832                 push    r14
.text:0000000000006834                 movsxd  r15, edi
.text:0000000000006837                 push    r13
.text:0000000000006839                 push    r12
.text:000000000000683B                 mov     r14, rdx
.text:000000000000683E                 push    rbp
.text:000000000000683F                 push    rbx
.text:0000000000006840                 mov     rbp, rcx
.text:0000000000006843                 sub     rsp, 28h
.text:0000000000006847                 mov     [rsp+58h+var_50], rsi
.text:000000000000684C                 call    ___errno_location
.text:0000000000006851                 mov     r13, rax
.text:0000000000006854                 mov     eax, [rax]
.text:0000000000006856                 test    r15d, r15d
.text:0000000000006859                 mov     rbx, cs:slotvec
.text:0000000000006860                 mov     [rsp+58h+var_40], eax
.text:0000000000006864                 js      loc_69D1
.text:000000000000686A                 cmp     cs:nslots, r15d
.text:0000000000006871                 jg      short loc_68D5
.text:0000000000006873                 cmp     r15d, 7FFFFFFFh
.text:000000000000687A                 jz      loc_69D6
.text:0000000000006880                 lea     r12d, [r15+1]
.text:0000000000006884                 lea     rax, slotvec0
.text:000000000000688B                 movsxd  rsi, r12d
.text:000000000000688E                 shl     rsi, 4
.text:0000000000006892                 cmp     rbx, rax
.text:0000000000006895                 jz      loc_69B0
.text:000000000000689B                 mov     rdi, rbx
.text:000000000000689E                 call    xrealloc
.text:00000000000068A3                 mov     rbx, rax
.text:00000000000068A6                 mov     cs:slotvec, rax
.text:00000000000068AD
.text:00000000000068AD loc_68AD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000068AD                 movsxd  rdi, cs:nslots
.text:00000000000068B4                 mov     edx, r12d
.text:00000000000068B7                 xor     esi, esi        ; c
.text:00000000000068B9                 sub     edx, edi
.text:00000000000068BB                 shl     rdi, 4
.text:00000000000068BF                 movsxd  rdx, edx
.text:00000000000068C2                 add     rdi, rbx        ; s
.text:00000000000068C5                 shl     rdx, 4          ; n
.text:00000000000068C9                 call    _memset
.text:00000000000068CE                 mov     cs:nslots, r12d
.text:00000000000068D5
.text:00000000000068D5 loc_68D5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000068D5                 mov     eax, [rbp+4]
.text:00000000000068D8                 shl     r15, 4
.text:00000000000068DC                 sub     rsp, 8
.text:00000000000068E0                 add     rbx, r15
.text:00000000000068E3                 lea     r15, [rbp+8]
.text:00000000000068E7                 mov     r8d, [rbp+0]
.text:00000000000068EB                 mov     r11, [rbx]
.text:00000000000068EE                 mov     r12, [rbx+8]
.text:00000000000068F2                 mov     rcx, r14
.text:00000000000068F5                 or      eax, 1
.text:00000000000068F8                 mov     [rsp+60h+var_3C], eax
.text:00000000000068FC                 push    qword ptr [rbp+30h]
.text:00000000000068FF                 mov     r9d, eax
.text:0000000000006902                 push    qword ptr [rbp+28h]
.text:0000000000006905                 push    r15
.text:0000000000006907                 mov     rsi, r11
.text:000000000000690A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000690F                 mov     rdi, r12
.text:0000000000006912                 mov     [rsp+78h+var_48], r11
.text:0000000000006917                 call    quotearg_buffer_restyled
.text:000000000000691C                 add     rsp, 20h
.text:0000000000006920                 mov     r11, [rsp+58h+var_48]
.text:0000000000006925                 cmp     r11, rax
.text:0000000000006928                 ja      short loc_6991
.text:000000000000692A                 lea     rsi, [rax+1]
.text:000000000000692E                 lea     rax, slot0
.text:0000000000006935                 cmp     r12, rax
.text:0000000000006938                 mov     [rbx], rsi
.text:000000000000693B                 jz      short loc_694F
.text:000000000000693D                 mov     rdi, r12        ; ptr
.text:0000000000006940                 mov     [rsp+58h+var_48], rsi
.text:0000000000006945                 call    _free
.text:000000000000694A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000694F
.text:000000000000694F loc_694F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000694F                 mov     rdi, rsi
.text:0000000000006952                 mov     [rsp+58h+var_48], rsi
.text:0000000000006957                 call    xmalloc
.text:000000000000695C                 sub     rsp, 8
.text:0000000000006960                 mov     [rbx+8], rax
.text:0000000000006964                 mov     r8d, [rbp+0]
.text:0000000000006968                 push    qword ptr [rbp+30h]
.text:000000000000696B                 push    qword ptr [rbp+28h]
.text:000000000000696E                 mov     rcx, r14
.text:0000000000006971                 push    r15
.text:0000000000006973
.text:0000000000006973 loc_6973:                               ; DATA XREF: .rodata:off_A7D0↓o
.text:0000000000006973                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000006978                 mov     rdi, rax
.text:000000000000697B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000006980                 mov     rsi, [rsp+78h+var_48]
.text:0000000000006985                 mov     r12, rax
.text:0000000000006988                 call    quotearg_buffer_restyled
.text:000000000000698D                 add     rsp, 20h
.text:0000000000006991
.text:0000000000006991 loc_6991:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000006991                 mov     eax, [rsp+58h+var_40]
.text:0000000000006995                 mov     [r13+0], eax
.text:0000000000006999                 add     rsp, 28h
.text:000000000000699D                 mov     rax, r12
.text:00000000000069A0                 pop     rbx
.text:00000000000069A1                 pop     rbp
.text:00000000000069A2                 pop     r12
.text:00000000000069A4                 pop     r13
.text:00000000000069A6                 pop     r14
.text:00000000000069A8                 pop     r15
.text:00000000000069AA                 retn
.text:00000000000069AA ; ---------------------------------------------------------------------------
.text:00000000000069AB                 align 10h
.text:00000000000069B0
.text:00000000000069B0 loc_69B0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000069B0                 xor     edi, edi
.text:00000000000069B2                 call    xrealloc
.text:00000000000069B7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000069BF                 mov     rbx, rax
.text:00000000000069C2                 mov     cs:slotvec, rax
.text:00000000000069C9                 movups  xmmword ptr [rax], xmm0
.text:00000000000069CC                 jmp     loc_68AD
.text:00000000000069D1 ; ---------------------------------------------------------------------------
.text:00000000000069D1
.text:00000000000069D1 loc_69D1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000069D1                 call    _abort
.text:00000000000069D6 ; ---------------------------------------------------------------------------
.text:00000000000069D6
.text:00000000000069D6 loc_69D6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000069D6                 call    xalloc_die
.text:00000000000069D6 ; } // starts at 6830
.text:00000000000069D6 quotearg_n_options endp
.text:00000000000069D6
.text:00000000000069D6 ; ---------------------------------------------------------------------------
.text:00000000000069DB                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0 ; Attributes: info_from_lumina
.text:00000000000069E0
.text:00000000000069E0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000069E0                 public clone_quoting_options
.text:00000000000069E0 clone_quoting_options proc near
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 push    r12
.text:00000000000069E2                 push    rbp
.text:00000000000069E3                 push    rbx
.text:00000000000069E4                 mov     rbx, rdi
.text:00000000000069E7                 call    ___errno_location
.text:00000000000069EC                 mov     r12d, [rax]
.text:00000000000069EF                 mov     rbp, rax
.text:00000000000069F2                 lea     rax, default_quoting_options
.text:00000000000069F9                 test    rbx, rbx
.text:00000000000069FC                 mov     esi, 38h ; '8'  ; n
.text:0000000000006A01                 cmovz   rbx, rax
.text:0000000000006A05                 mov     rdi, rbx        ; src
.text:0000000000006A08                 call    xmemdup
.text:0000000000006A0D                 mov     [rbp+0], r12d
.text:0000000000006A11                 pop     rbx
.text:0000000000006A12                 pop     rbp
.text:0000000000006A13                 pop     r12
.text:0000000000006A15                 retn
.text:0000000000006A15 ; } // starts at 69E0
.text:0000000000006A15 clone_quoting_options endp
.text:0000000000006A15
.text:0000000000006A15 ; ---------------------------------------------------------------------------
.text:0000000000006A16                 align 20h
.text:0000000000006A20
.text:0000000000006A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A20
.text:0000000000006A20
.text:0000000000006A20                 public get_quoting_style
.text:0000000000006A20 get_quoting_style proc near
.text:0000000000006A20 ; __unwind {
.text:0000000000006A20                 lea     rax, default_quoting_options
.text:0000000000006A27                 test    rdi, rdi
.text:0000000000006A2A                 cmovz   rdi, rax
.text:0000000000006A2E                 mov     eax, [rdi]
.text:0000000000006A30                 retn
.text:0000000000006A30 ; } // starts at 6A20
.text:0000000000006A30 get_quoting_style endp
.text:0000000000006A30
.text:0000000000006A30 ; ---------------------------------------------------------------------------
.text:0000000000006A31                 align 20h
.text:0000000000006A40
.text:0000000000006A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A40
.text:0000000000006A40
.text:0000000000006A40                 public set_quoting_style
.text:0000000000006A40 set_quoting_style proc near
.text:0000000000006A40 ; __unwind {
.text:0000000000006A40                 lea     rax, default_quoting_options
.text:0000000000006A47                 test    rdi, rdi
.text:0000000000006A4A                 cmovz   rdi, rax
.text:0000000000006A4E                 mov     [rdi], esi
.text:0000000000006A50                 retn
.text:0000000000006A50 ; } // starts at 6A40
.text:0000000000006A50 set_quoting_style endp
.text:0000000000006A50
.text:0000000000006A50 ; ---------------------------------------------------------------------------
.text:0000000000006A51                 align 20h
.text:0000000000006A60
.text:0000000000006A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A60
.text:0000000000006A60 ; Attributes: info_from_lumina
.text:0000000000006A60
.text:0000000000006A60 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000006A60                 public set_char_quoting
.text:0000000000006A60 set_char_quoting proc near
.text:0000000000006A60 ; __unwind {
.text:0000000000006A60                 lea     rax, default_quoting_options
.text:0000000000006A67                 test    rdi, rdi
.text:0000000000006A6A                 mov     ecx, esi
.text:0000000000006A6C                 cmovz   rdi, rax
.text:0000000000006A70                 mov     eax, esi
.text:0000000000006A72                 and     ecx, 1Fh
.text:0000000000006A75                 shr     al, 5
.text:0000000000006A78                 movzx   eax, al
.text:0000000000006A7B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000006A80                 mov     esi, [rdi]
.text:0000000000006A82                 mov     eax, esi
.text:0000000000006A84                 shr     eax, cl
.text:0000000000006A86                 xor     edx, eax
.text:0000000000006A88                 and     eax, 1
.text:0000000000006A8B                 and     edx, 1
.text:0000000000006A8E                 shl     edx, cl
.text:0000000000006A90                 xor     edx, esi
.text:0000000000006A92                 mov     [rdi], edx
.text:0000000000006A94                 retn
.text:0000000000006A94 ; } // starts at 6A60
.text:0000000000006A94 set_char_quoting endp
.text:0000000000006A94
.text:0000000000006A94 ; ---------------------------------------------------------------------------
.text:0000000000006A95                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AA0
.text:0000000000006AA0
.text:0000000000006AA0                 public set_quoting_flags
.text:0000000000006AA0 set_quoting_flags proc near
.text:0000000000006AA0 ; __unwind {
.text:0000000000006AA0                 lea     rax, default_quoting_options
.text:0000000000006AA7                 test    rdi, rdi
.text:0000000000006AAA                 cmovz   rdi, rax
.text:0000000000006AAE                 mov     eax, [rdi+4]
.text:0000000000006AB1                 mov     [rdi+4], esi
.text:0000000000006AB4                 retn
.text:0000000000006AB4 ; } // starts at 6AA0
.text:0000000000006AB4 set_quoting_flags endp
.text:0000000000006AB4
.text:0000000000006AB4 ; ---------------------------------------------------------------------------
.text:0000000000006AB5                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AC0
.text:0000000000006AC0 ; Attributes: info_from_lumina
.text:0000000000006AC0
.text:0000000000006AC0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000006AC0                 public set_custom_quoting
.text:0000000000006AC0 set_custom_quoting proc near
.text:0000000000006AC0 ; __unwind {
.text:0000000000006AC0                 lea     rax, default_quoting_options
.text:0000000000006AC7                 test    rdi, rdi
.text:0000000000006ACA                 cmovz   rdi, rax
.text:0000000000006ACE                 test    rsi, rsi
.text:0000000000006AD1                 mov     dword ptr [rdi], 0Ah
.text:0000000000006AD7                 jz      short loc_6AE7
.text:0000000000006AD9                 test    rdx, rdx
.text:0000000000006ADC                 jz      short loc_6AE7
.text:0000000000006ADE                 mov     [rdi+28h], rsi
.text:0000000000006AE2                 mov     [rdi+30h], rdx
.text:0000000000006AE6                 retn
.text:0000000000006AE7 ; ---------------------------------------------------------------------------
.text:0000000000006AE7
.text:0000000000006AE7 loc_6AE7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000006AE7                                         ; set_custom_quoting+1C↑j
.text:0000000000006AE7                 sub     rsp, 8
.text:0000000000006AEB                 call    _abort
.text:0000000000006AEB ; } // starts at 6AC0
.text:0000000000006AEB set_custom_quoting endp
.text:0000000000006AEB
.text:0000000000006AF0
.text:0000000000006AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AF0
.text:0000000000006AF0 ; Attributes: info_from_lumina
.text:0000000000006AF0
.text:0000000000006AF0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000006AF0                 public quotearg_buffer
.text:0000000000006AF0 quotearg_buffer proc near
.text:0000000000006AF0
.text:0000000000006AF0 var_40          = qword ptr -40h
.text:0000000000006AF0
.text:0000000000006AF0 ; __unwind {
.text:0000000000006AF0                 push    r15
.text:0000000000006AF2                 push    r14
.text:0000000000006AF4                 lea     rax, default_quoting_options
.text:0000000000006AFB                 push    r13
.text:0000000000006AFD                 push    r12
.text:0000000000006AFF                 mov     r13, rdi
.text:0000000000006B02                 push    rbp
.text:0000000000006B03                 push    rbx
.text:0000000000006B04                 mov     rbx, r8
.text:0000000000006B07                 mov     r14, rsi
.text:0000000000006B0A                 mov     r15, rdx
.text:0000000000006B0D                 sub     rsp, 18h
.text:0000000000006B11                 test    r8, r8
.text:0000000000006B14                 cmovz   rbx, rax
.text:0000000000006B18                 mov     [rsp+48h+var_40], rcx
.text:0000000000006B1D                 call    ___errno_location
.text:0000000000006B22                 mov     r12d, [rax]
.text:0000000000006B25                 mov     rbp, rax
.text:0000000000006B28                 lea     rax, [rbx+8]
.text:0000000000006B2C                 sub     rsp, 8
.text:0000000000006B30                 mov     r9d, [rbx+4]
.text:0000000000006B34                 push    qword ptr [rbx+30h]
.text:0000000000006B37                 mov     r8d, [rbx]
.text:0000000000006B3A                 push    qword ptr [rbx+28h]
.text:0000000000006B3D                 mov     rdx, r15
.text:0000000000006B40                 push    rax
.text:0000000000006B41                 mov     rcx, [rsp+68h+var_40]
.text:0000000000006B46                 mov     rsi, r14
.text:0000000000006B49                 mov     rdi, r13
.text:0000000000006B4C                 call    quotearg_buffer_restyled
.text:0000000000006B51                 mov     [rbp+0], r12d
.text:0000000000006B55                 add     rsp, 38h
.text:0000000000006B59                 pop     rbx
.text:0000000000006B5A                 pop     rbp
.text:0000000000006B5B                 pop     r12
.text:0000000000006B5D                 pop     r13
.text:0000000000006B5F                 pop     r14
.text:0000000000006B61                 pop     r15
.text:0000000000006B63                 retn
.text:0000000000006B63 ; } // starts at 6AF0
.text:0000000000006B63 quotearg_buffer endp
.text:0000000000006B63
.text:0000000000006B63 ; ---------------------------------------------------------------------------
.text:0000000000006B64                 align 10h
.text:0000000000006B70
.text:0000000000006B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B70
.text:0000000000006B70 ; Attributes: info_from_lumina
.text:0000000000006B70
.text:0000000000006B70 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000006B70                 public quotearg_alloc_mem
.text:0000000000006B70 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000006B70
.text:0000000000006B70 var_5C          = dword ptr -5Ch
.text:0000000000006B70 var_58          = qword ptr -58h
.text:0000000000006B70 var_50          = qword ptr -50h
.text:0000000000006B70 var_48          = qword ptr -48h
.text:0000000000006B70 var_40          = qword ptr -40h
.text:0000000000006B70
.text:0000000000006B70 ; __unwind {
.text:0000000000006B70                 push    r15
.text:0000000000006B72                 push    r14
.text:0000000000006B74                 lea     rax, default_quoting_options
.text:0000000000006B7B                 push    r13
.text:0000000000006B7D                 push    r12
.text:0000000000006B7F                 mov     r12, rdx
.text:0000000000006B82                 push    rbp
.text:0000000000006B83                 push    rbx
.text:0000000000006B84                 mov     rbx, rcx
.text:0000000000006B87                 mov     r14, rdi
.text:0000000000006B8A                 mov     r15, rsi
.text:0000000000006B8D                 sub     rsp, 38h
.text:0000000000006B91                 test    rcx, rcx
.text:0000000000006B94                 cmovz   rbx, rax
.text:0000000000006B98                 xor     ebp, ebp
.text:0000000000006B9A                 call    ___errno_location
.text:0000000000006B9F                 test    r12, r12
.text:0000000000006BA2                 mov     r13, rax
.text:0000000000006BA5                 mov     eax, [rax]
.text:0000000000006BA7                 setz    bpl
.text:0000000000006BAB                 or      ebp, [rbx+4]
.text:0000000000006BAE                 lea     r10, [rbx+8]
.text:0000000000006BB2                 sub     rsp, 8
.text:0000000000006BB6                 mov     r8d, [rbx]
.text:0000000000006BB9                 mov     rcx, r15
.text:0000000000006BBC                 mov     [rsp+70h+var_5C], eax
.text:0000000000006BC0                 push    qword ptr [rbx+30h]
.text:0000000000006BC3                 mov     rdx, r14
.text:0000000000006BC6                 push    qword ptr [rbx+28h]
.text:0000000000006BC9                 push    r10
.text:0000000000006BCB                 xor     esi, esi
.text:0000000000006BCD                 mov     r9d, ebp
.text:0000000000006BD0                 xor     edi, edi
.text:0000000000006BD2                 mov     [rsp+88h+var_48], r10
.text:0000000000006BD7                 call    quotearg_buffer_restyled
.text:0000000000006BDC                 lea     rsi, [rax+1]
.text:0000000000006BE0                 mov     [rsp+88h+var_40], rax
.text:0000000000006BE5                 add     rsp, 20h
.text:0000000000006BE9                 mov     rdi, rsi
.text:0000000000006BEC                 mov     [rsp+68h+var_50], rsi
.text:0000000000006BF1                 call    xmalloc
.text:0000000000006BF6                 mov     [rsp+68h+var_58], rax
.text:0000000000006BFB                 sub     rsp, 8
.text:0000000000006BFF                 push    qword ptr [rbx+30h]
.text:0000000000006C02                 push    qword ptr [rbx+28h]
.text:0000000000006C05                 mov     r10, [rsp+80h+var_48]
.text:0000000000006C0A                 mov     r9d, ebp
.text:0000000000006C0D                 mov     r8d, [rbx]
.text:0000000000006C10                 mov     rcx, r15
.text:0000000000006C13                 mov     rdx, r14
.text:0000000000006C16                 mov     rdi, rax
.text:0000000000006C19                 push    r10
.text:0000000000006C1B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000006C20                 call    quotearg_buffer_restyled
.text:0000000000006C25                 mov     eax, [rsp+88h+var_5C]
.text:0000000000006C29                 add     rsp, 20h
.text:0000000000006C2D                 test    r12, r12
.text:0000000000006C30                 mov     [r13+0], eax
.text:0000000000006C34                 jz      short loc_6C3F
.text:0000000000006C36                 mov     r11, [rsp+68h+var_40]
.text:0000000000006C3B                 mov     [r12], r11
.text:0000000000006C3F
.text:0000000000006C3F loc_6C3F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000006C3F                 mov     rax, [rsp+68h+var_58]
.text:0000000000006C44                 add     rsp, 38h
.text:0000000000006C48                 pop     rbx
.text:0000000000006C49                 pop     rbp
.text:0000000000006C4A                 pop     r12
.text:0000000000006C4C                 pop     r13
.text:0000000000006C4E                 pop     r14
.text:0000000000006C50                 pop     r15
.text:0000000000006C52                 retn
.text:0000000000006C52 ; } // starts at 6B70
.text:0000000000006C52 quotearg_alloc_mem endp
.text:0000000000006C52
.text:0000000000006C52 ; ---------------------------------------------------------------------------
.text:0000000000006C53                 align 20h
.text:0000000000006C60
.text:0000000000006C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C60
.text:0000000000006C60
.text:0000000000006C60                 public quotearg_alloc
.text:0000000000006C60 quotearg_alloc  proc near
.text:0000000000006C60 ; __unwind {
.text:0000000000006C60                 mov     rcx, rdx
.text:0000000000006C63                 xor     edx, edx
.text:0000000000006C65                 jmp     quotearg_alloc_mem
.text:0000000000006C65 ; } // starts at 6C60
.text:0000000000006C65 quotearg_alloc  endp
.text:0000000000006C65
.text:0000000000006C65 ; ---------------------------------------------------------------------------
.text:0000000000006C6A                 align 10h
.text:0000000000006C70
.text:0000000000006C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C70
.text:0000000000006C70 ; Attributes: info_from_lumina
.text:0000000000006C70
.text:0000000000006C70 ; void __cdecl quotearg_free()
.text:0000000000006C70                 public quotearg_free
.text:0000000000006C70 quotearg_free   proc near
.text:0000000000006C70 ; __unwind {
.text:0000000000006C70                 mov     eax, cs:nslots
.text:0000000000006C76                 push    r12
.text:0000000000006C78                 mov     r12, cs:slotvec
.text:0000000000006C7F                 push    rbp
.text:0000000000006C80                 push    rbx
.text:0000000000006C81                 cmp     eax, 1
.text:0000000000006C84                 jle     short loc_6CB1
.text:0000000000006C86                 sub     eax, 2
.text:0000000000006C89                 lea     rbx, [r12+18h]
.text:0000000000006C8E                 shl     rax, 4
.text:0000000000006C92                 lea     rbp, [r12+rax+28h]
.text:0000000000006C97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006CA0
.text:0000000000006CA0 loc_6CA0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000006CA0                 mov     rdi, [rbx]      ; ptr
.text:0000000000006CA3                 add     rbx, 10h
.text:0000000000006CA7                 call    _free
.text:0000000000006CAC                 cmp     rbx, rbp
.text:0000000000006CAF                 jnz     short loc_6CA0
.text:0000000000006CB1
.text:0000000000006CB1 loc_6CB1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000006CB1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000006CB6                 lea     rbx, slot0
.text:0000000000006CBD                 cmp     rdi, rbx
.text:0000000000006CC0                 jz      short loc_6CD9
.text:0000000000006CC2                 call    _free
.text:0000000000006CC7                 mov     cs:slotvec0, 100h
.text:0000000000006CD2                 mov     cs:off_20E098, rbx
.text:0000000000006CD9
.text:0000000000006CD9 loc_6CD9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000006CD9                 lea     rbx, slotvec0
.text:0000000000006CE0                 cmp     r12, rbx
.text:0000000000006CE3                 jz      short loc_6CF4
.text:0000000000006CE5                 mov     rdi, r12        ; ptr
.text:0000000000006CE8                 call    _free
.text:0000000000006CED                 mov     cs:slotvec, rbx
.text:0000000000006CF4
.text:0000000000006CF4 loc_6CF4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000006CF4                 pop     rbx
.text:0000000000006CF5                 mov     cs:nslots, 1
.text:0000000000006CFF                 pop     rbp
.text:0000000000006D00                 pop     r12
.text:0000000000006D02                 retn
.text:0000000000006D02 ; } // starts at 6C70
.text:0000000000006D02 quotearg_free   endp
.text:0000000000006D02
.text:0000000000006D02 ; ---------------------------------------------------------------------------
.text:0000000000006D03                 align 10h
.text:0000000000006D10
.text:0000000000006D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D10
.text:0000000000006D10
.text:0000000000006D10                 public quotearg_n
.text:0000000000006D10 quotearg_n      proc near
.text:0000000000006D10 ; __unwind {
.text:0000000000006D10                 lea     rcx, default_quoting_options
.text:0000000000006D17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D1E                 jmp     quotearg_n_options
.text:0000000000006D1E ; } // starts at 6D10
.text:0000000000006D1E quotearg_n      endp
.text:0000000000006D1E
.text:0000000000006D1E ; ---------------------------------------------------------------------------
.text:0000000000006D23                 align 10h
.text:0000000000006D30
.text:0000000000006D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D30
.text:0000000000006D30
.text:0000000000006D30                 public quotearg_n_mem
.text:0000000000006D30 quotearg_n_mem  proc near
.text:0000000000006D30 ; __unwind {
.text:0000000000006D30                 lea     rcx, default_quoting_options
.text:0000000000006D37                 jmp     quotearg_n_options
.text:0000000000006D37 ; } // starts at 6D30
.text:0000000000006D37 quotearg_n_mem  endp
.text:0000000000006D37
.text:0000000000006D37 ; ---------------------------------------------------------------------------
.text:0000000000006D3C                 align 20h
.text:0000000000006D40
.text:0000000000006D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D40
.text:0000000000006D40
.text:0000000000006D40                 public quotearg
.text:0000000000006D40 quotearg        proc near
.text:0000000000006D40 ; __unwind {
.text:0000000000006D40                 lea     rcx, default_quoting_options
.text:0000000000006D47                 mov     rsi, rdi
.text:0000000000006D4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D51                 xor     edi, edi
.text:0000000000006D53                 jmp     quotearg_n_options
.text:0000000000006D53 ; } // starts at 6D40
.text:0000000000006D53 quotearg        endp
.text:0000000000006D53
.text:0000000000006D53 ; ---------------------------------------------------------------------------
.text:0000000000006D58                 align 20h
.text:0000000000006D60
.text:0000000000006D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D60
.text:0000000000006D60
.text:0000000000006D60                 public quotearg_mem
.text:0000000000006D60 quotearg_mem    proc near
.text:0000000000006D60 ; __unwind {
.text:0000000000006D60                 lea     rcx, default_quoting_options
.text:0000000000006D67                 mov     rdx, rsi
.text:0000000000006D6A                 mov     rsi, rdi
.text:0000000000006D6D                 xor     edi, edi
.text:0000000000006D6F                 jmp     quotearg_n_options
.text:0000000000006D6F ; } // starts at 6D60
.text:0000000000006D6F quotearg_mem    endp
.text:0000000000006D6F
.text:0000000000006D6F ; ---------------------------------------------------------------------------
.text:0000000000006D74                 align 20h
.text:0000000000006D80
.text:0000000000006D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D80
.text:0000000000006D80 ; Attributes: info_from_lumina
.text:0000000000006D80
.text:0000000000006D80 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000006D80                 public quotearg_n_style
.text:0000000000006D80 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000006D80                                         ; quotearg_style+7↓j
.text:0000000000006D80
.text:0000000000006D80 var_48          = dword ptr -48h
.text:0000000000006D80 var_44          = qword ptr -44h
.text:0000000000006D80 var_3C          = qword ptr -3Ch
.text:0000000000006D80 var_34          = qword ptr -34h
.text:0000000000006D80 var_2C          = qword ptr -2Ch
.text:0000000000006D80 var_24          = qword ptr -24h
.text:0000000000006D80 var_1C          = qword ptr -1Ch
.text:0000000000006D80 var_14          = dword ptr -14h
.text:0000000000006D80 var_10          = qword ptr -10h
.text:0000000000006D80
.text:0000000000006D80 ; __unwind {
.text:0000000000006D80                 sub     rsp, 48h
.text:0000000000006D84                 mov     rax, rdx
.text:0000000000006D87                 mov     rdx, fs:28h
.text:0000000000006D90                 mov     [rsp+48h+var_10], rdx
.text:0000000000006D95                 xor     edx, edx
.text:0000000000006D97                 cmp     esi, 0Ah
.text:0000000000006D9A                 jz      short loc_6E04
.text:0000000000006D9C                 mov     [rsp+48h+var_48], esi
.text:0000000000006D9F                 mov     rcx, rsp
.text:0000000000006DA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006DA9                 mov     rsi, rax
.text:0000000000006DAC                 mov     [rsp+48h+var_44], 0
.text:0000000000006DB5                 mov     [rsp+48h+var_3C], 0
.text:0000000000006DBE                 mov     [rsp+48h+var_34], 0
.text:0000000000006DC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000006DD0                 mov     [rsp+48h+var_24], 0
.text:0000000000006DD9                 mov     [rsp+48h+var_1C], 0
.text:0000000000006DE2                 mov     [rsp+48h+var_14], 0
.text:0000000000006DEA                 call    quotearg_n_options
.text:0000000000006DEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006DF4                 xor     rcx, fs:28h
.text:0000000000006DFD                 jnz     short loc_6E09
.text:0000000000006DFF                 add     rsp, 48h
.text:0000000000006E03                 retn
.text:0000000000006E04 ; ---------------------------------------------------------------------------
.text:0000000000006E04
.text:0000000000006E04 loc_6E04:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000006E04                 call    _abort
.text:0000000000006E09 ; ---------------------------------------------------------------------------
.text:0000000000006E09
.text:0000000000006E09 loc_6E09:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000006E09                 call    ___stack_chk_fail
.text:0000000000006E09 ; } // starts at 6D80
.text:0000000000006E09 quotearg_n_style endp
.text:0000000000006E09
.text:0000000000006E09 ; ---------------------------------------------------------------------------
.text:0000000000006E0E                 align 10h
.text:0000000000006E10
.text:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E10
.text:0000000000006E10 ; Attributes: info_from_lumina
.text:0000000000006E10
.text:0000000000006E10 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000006E10                 public quotearg_n_style_mem
.text:0000000000006E10 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000006E10
.text:0000000000006E10 var_48          = dword ptr -48h
.text:0000000000006E10 var_44          = qword ptr -44h
.text:0000000000006E10 var_3C          = qword ptr -3Ch
.text:0000000000006E10 var_34          = qword ptr -34h
.text:0000000000006E10 var_2C          = qword ptr -2Ch
.text:0000000000006E10 var_24          = qword ptr -24h
.text:0000000000006E10 var_1C          = qword ptr -1Ch
.text:0000000000006E10 var_14          = dword ptr -14h
.text:0000000000006E10 var_10          = qword ptr -10h
.text:0000000000006E10
.text:0000000000006E10 ; __unwind {
.text:0000000000006E10                 sub     rsp, 48h
.text:0000000000006E14                 mov     rax, rdx
.text:0000000000006E17                 mov     rdx, rcx
.text:0000000000006E1A                 mov     rcx, fs:28h
.text:0000000000006E23                 mov     [rsp+48h+var_10], rcx
.text:0000000000006E28                 xor     ecx, ecx
.text:0000000000006E2A                 cmp     esi, 0Ah
.text:0000000000006E2D                 jz      short loc_6E90
.text:0000000000006E2F                 mov     [rsp+48h+var_48], esi
.text:0000000000006E32                 mov     rcx, rsp
.text:0000000000006E35                 mov     rsi, rax
.text:0000000000006E38                 mov     [rsp+48h+var_44], 0
.text:0000000000006E41                 mov     [rsp+48h+var_3C], 0
.text:0000000000006E4A                 mov     [rsp+48h+var_34], 0
.text:0000000000006E53                 mov     [rsp+48h+var_2C], 0
.text:0000000000006E5C                 mov     [rsp+48h+var_24], 0
.text:0000000000006E65                 mov     [rsp+48h+var_1C], 0
.text:0000000000006E6E                 mov     [rsp+48h+var_14], 0
.text:0000000000006E76                 call    quotearg_n_options
.text:0000000000006E7B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000006E80                 xor     rdx, fs:28h
.text:0000000000006E89                 jnz     short loc_6E95
.text:0000000000006E8B                 add     rsp, 48h
.text:0000000000006E8F                 retn
.text:0000000000006E90 ; ---------------------------------------------------------------------------
.text:0000000000006E90
.text:0000000000006E90 loc_6E90:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000006E90                 call    _abort
.text:0000000000006E95 ; ---------------------------------------------------------------------------
.text:0000000000006E95
.text:0000000000006E95 loc_6E95:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000006E95                 call    ___stack_chk_fail
.text:0000000000006E95 ; } // starts at 6E10
.text:0000000000006E95 quotearg_n_style_mem endp
.text:0000000000006E95
.text:0000000000006E95 ; ---------------------------------------------------------------------------
.text:0000000000006E9A                 align 20h
.text:0000000000006EA0
.text:0000000000006EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EA0
.text:0000000000006EA0
.text:0000000000006EA0                 public quotearg_style
.text:0000000000006EA0 quotearg_style  proc near
.text:0000000000006EA0 ; __unwind {
.text:0000000000006EA0                 mov     rdx, rsi
.text:0000000000006EA3                 mov     esi, edi
.text:0000000000006EA5                 xor     edi, edi
.text:0000000000006EA7                 jmp     quotearg_n_style
.text:0000000000006EA7 ; } // starts at 6EA0
.text:0000000000006EA7 quotearg_style  endp
.text:0000000000006EA7
.text:0000000000006EA7 ; ---------------------------------------------------------------------------
.text:0000000000006EAC                 align 10h
.text:0000000000006EB0
.text:0000000000006EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EB0
.text:0000000000006EB0
.text:0000000000006EB0                 public quotearg_style_mem
.text:0000000000006EB0 quotearg_style_mem proc near
.text:0000000000006EB0 ; __unwind {
.text:0000000000006EB0                 mov     rcx, rdx
.text:0000000000006EB3                 mov     rdx, rsi
.text:0000000000006EB6                 mov     esi, edi
.text:0000000000006EB8                 xor     edi, edi
.text:0000000000006EBA                 jmp     quotearg_n_style_mem
.text:0000000000006EBA ; } // starts at 6EB0
.text:0000000000006EBA quotearg_style_mem endp
.text:0000000000006EBA
.text:0000000000006EBA ; ---------------------------------------------------------------------------
.text:0000000000006EBF                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EC0
.text:0000000000006EC0 ; Attributes: info_from_lumina
.text:0000000000006EC0
.text:0000000000006EC0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000006EC0                 public quotearg_char_mem
.text:0000000000006EC0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000006EC0                                         ; quotearg_colon+C↓j ...
.text:0000000000006EC0
.text:0000000000006EC0 var_48          = xmmword ptr -48h
.text:0000000000006EC0 var_38          = xmmword ptr -38h
.text:0000000000006EC0 var_28          = xmmword ptr -28h
.text:0000000000006EC0 var_18          = qword ptr -18h
.text:0000000000006EC0 var_10          = qword ptr -10h
.text:0000000000006EC0
.text:0000000000006EC0 ; __unwind {
.text:0000000000006EC0                 sub     rsp, 48h
.text:0000000000006EC4                 mov     ecx, edx
.text:0000000000006EC6                 mov     rax, fs:28h
.text:0000000000006ECF                 mov     [rsp+48h+var_10], rax
.text:0000000000006ED4                 xor     eax, eax
.text:0000000000006ED6                 mov     rax, cs:qword_20E250
.text:0000000000006EDD                 mov     r8, rsp
.text:0000000000006EE0                 and     ecx, 1Fh
.text:0000000000006EE3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000006EEB                 mov     [rsp+48h+var_18], rax
.text:0000000000006EF0                 mov     eax, edx
.text:0000000000006EF2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000006EF6                 shr     al, 5
.text:0000000000006EF9                 movzx   eax, al
.text:0000000000006EFC                 lea     r9, [r8+rax*4+8]
.text:0000000000006F01                 movdqa  xmm0, cs:xmmword_20E230
.text:0000000000006F09                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000006F0E                 movdqa  xmm0, cs:xmmword_20E240
.text:0000000000006F16                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000006F1B                 mov     edx, [r9]
.text:0000000000006F1E                 mov     eax, edx
.text:0000000000006F20                 shr     eax, cl
.text:0000000000006F22                 not     eax
.text:0000000000006F24                 and     eax, 1
.text:0000000000006F27                 shl     eax, cl
.text:0000000000006F29                 mov     rcx, r8
.text:0000000000006F2C                 xor     eax, edx
.text:0000000000006F2E                 mov     rdx, rsi
.text:0000000000006F31                 mov     rsi, rdi
.text:0000000000006F34                 mov     [r9], eax
.text:0000000000006F37                 xor     edi, edi
.text:0000000000006F39                 call    quotearg_n_options
.text:0000000000006F3E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000006F43                 xor     rsi, fs:28h
.text:0000000000006F4C                 jnz     short loc_6F53
.text:0000000000006F4E                 add     rsp, 48h
.text:0000000000006F52                 retn
.text:0000000000006F53 ; ---------------------------------------------------------------------------
.text:0000000000006F53
.text:0000000000006F53 loc_6F53:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000006F53                 call    ___stack_chk_fail
.text:0000000000006F53 ; } // starts at 6EC0
.text:0000000000006F53 quotearg_char_mem endp
.text:0000000000006F53
.text:0000000000006F53 ; ---------------------------------------------------------------------------
.text:0000000000006F58                 align 20h
.text:0000000000006F60
.text:0000000000006F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F60
.text:0000000000006F60
.text:0000000000006F60                 public quotearg_char
.text:0000000000006F60 quotearg_char   proc near
.text:0000000000006F60 ; __unwind {
.text:0000000000006F60                 movsx   edx, sil
.text:0000000000006F64                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F6B                 jmp     quotearg_char_mem
.text:0000000000006F6B ; } // starts at 6F60
.text:0000000000006F6B quotearg_char   endp
.text:0000000000006F6B
.text:0000000000006F70
.text:0000000000006F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F70
.text:0000000000006F70
.text:0000000000006F70                 public quotearg_colon
.text:0000000000006F70 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000006F70 ; __unwind {
.text:0000000000006F70                 mov     edx, 3Ah ; ':'
.text:0000000000006F75                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F7C                 jmp     quotearg_char_mem
.text:0000000000006F7C ; } // starts at 6F70
.text:0000000000006F7C quotearg_colon  endp
.text:0000000000006F7C
.text:0000000000006F7C ; ---------------------------------------------------------------------------
.text:0000000000006F81                 align 10h
.text:0000000000006F90
.text:0000000000006F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F90
.text:0000000000006F90
.text:0000000000006F90                 public quotearg_colon_mem
.text:0000000000006F90 quotearg_colon_mem proc near
.text:0000000000006F90 ; __unwind {
.text:0000000000006F90                 mov     edx, 3Ah ; ':'
.text:0000000000006F95                 jmp     quotearg_char_mem
.text:0000000000006F95 ; } // starts at 6F90
.text:0000000000006F95 quotearg_colon_mem endp
.text:0000000000006F95
.text:0000000000006F95 ; ---------------------------------------------------------------------------
.text:0000000000006F9A                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FA0
.text:0000000000006FA0 ; Attributes: info_from_lumina
.text:0000000000006FA0
.text:0000000000006FA0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000006FA0                 public quotearg_n_style_colon
.text:0000000000006FA0 quotearg_n_style_colon proc near        ; CODE XREF: main+37F↑p
.text:0000000000006FA0                                         ; main+580↑p ...
.text:0000000000006FA0
.text:0000000000006FA0 var_48          = dword ptr -48h
.text:0000000000006FA0 var_44          = qword ptr -44h
.text:0000000000006FA0 var_3C          = qword ptr -3Ch
.text:0000000000006FA0 var_34          = qword ptr -34h
.text:0000000000006FA0 var_2C          = qword ptr -2Ch
.text:0000000000006FA0 var_24          = qword ptr -24h
.text:0000000000006FA0 var_1C          = qword ptr -1Ch
.text:0000000000006FA0 var_14          = dword ptr -14h
.text:0000000000006FA0 var_10          = qword ptr -10h
.text:0000000000006FA0
.text:0000000000006FA0 ; __unwind {
.text:0000000000006FA0                 sub     rsp, 48h
.text:0000000000006FA4                 mov     rax, rdx
.text:0000000000006FA7                 mov     rdx, fs:28h
.text:0000000000006FB0                 mov     [rsp+48h+var_10], rdx
.text:0000000000006FB5                 xor     edx, edx
.text:0000000000006FB7                 cmp     esi, 0Ah
.text:0000000000006FBA                 jz      short loc_7024
.text:0000000000006FBC                 mov     [rsp+48h+var_48], esi
.text:0000000000006FBF                 mov     rcx, rsp
.text:0000000000006FC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FC9                 mov     rsi, rax
.text:0000000000006FCC                 mov     [rsp+48h+var_44], 0
.text:0000000000006FD5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000006FDE                 mov     [rsp+48h+var_34], 0
.text:0000000000006FE7                 mov     [rsp+48h+var_2C], 0
.text:0000000000006FF0                 mov     [rsp+48h+var_24], 0
.text:0000000000006FF9                 mov     [rsp+48h+var_1C], 0
.text:0000000000007002                 mov     [rsp+48h+var_14], 0
.text:000000000000700A                 call    quotearg_n_options
.text:000000000000700F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000007014                 xor     rcx, fs:28h
.text:000000000000701D                 jnz     short loc_7029
.text:000000000000701F                 add     rsp, 48h
.text:0000000000007023                 retn
.text:0000000000007024 ; ---------------------------------------------------------------------------
.text:0000000000007024
.text:0000000000007024 loc_7024:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000007024                 call    _abort
.text:0000000000007029 ; ---------------------------------------------------------------------------
.text:0000000000007029
.text:0000000000007029 loc_7029:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000007029                 call    ___stack_chk_fail
.text:0000000000007029 ; } // starts at 6FA0
.text:0000000000007029 quotearg_n_style_colon endp
.text:0000000000007029
.text:0000000000007029 ; ---------------------------------------------------------------------------
.text:000000000000702E                 align 10h
.text:0000000000007030
.text:0000000000007030 ; =============== S U B R O U T I N E =======================================
.text:0000000000007030
.text:0000000000007030 ; Attributes: info_from_lumina
.text:0000000000007030
.text:0000000000007030 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000007030                 public quotearg_n_custom_mem
.text:0000000000007030 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000007030                                         ; quotearg_custom+12↓j ...
.text:0000000000007030
.text:0000000000007030 var_48          = xmmword ptr -48h
.text:0000000000007030 var_38          = xmmword ptr -38h
.text:0000000000007030 var_28          = xmmword ptr -28h
.text:0000000000007030 var_18          = qword ptr -18h
.text:0000000000007030 var_10          = qword ptr -10h
.text:0000000000007030
.text:0000000000007030 ; __unwind {
.text:0000000000007030                 sub     rsp, 48h
.text:0000000000007034                 mov     r9, rcx
.text:0000000000007037                 mov     rcx, cs:qword_20E250
.text:000000000000703E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000007046                 mov     rax, fs:28h
.text:000000000000704F                 mov     [rsp+48h+var_10], rax
.text:0000000000007054                 xor     eax, eax
.text:0000000000007056                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000705A                 test    rsi, rsi
.text:000000000000705D                 mov     [rsp+48h+var_18], rcx
.text:0000000000007062                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000007069                 movdqa  xmm0, cs:xmmword_20E230
.text:0000000000007071                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000007076                 movdqa  xmm0, cs:xmmword_20E240
.text:000000000000707E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000007083                 jz      short loc_70B7
.text:0000000000007085                 test    rdx, rdx
.text:0000000000007088                 jz      short loc_70B7
.text:000000000000708A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000708F                 mov     [rsp+48h+var_18], rdx
.text:0000000000007094                 mov     rcx, rsp
.text:0000000000007097                 mov     rdx, r8
.text:000000000000709A                 mov     rsi, r9
.text:000000000000709D                 call    quotearg_n_options
.text:00000000000070A2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000070A7                 xor     rdi, fs:28h
.text:00000000000070B0                 jnz     short loc_70BC
.text:00000000000070B2                 add     rsp, 48h
.text:00000000000070B6                 retn
.text:00000000000070B7 ; ---------------------------------------------------------------------------
.text:00000000000070B7
.text:00000000000070B7 loc_70B7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000070B7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000070B7                 call    _abort
.text:00000000000070BC ; ---------------------------------------------------------------------------
.text:00000000000070BC
.text:00000000000070BC loc_70BC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000070BC                 call    ___stack_chk_fail
.text:00000000000070BC ; } // starts at 7030
.text:00000000000070BC quotearg_n_custom_mem endp
.text:00000000000070BC
.text:00000000000070BC ; ---------------------------------------------------------------------------
.text:00000000000070C1                 align 10h
.text:00000000000070D0
.text:00000000000070D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070D0
.text:00000000000070D0
.text:00000000000070D0                 public quotearg_n_custom
.text:00000000000070D0 quotearg_n_custom proc near
.text:00000000000070D0 ; __unwind {
.text:00000000000070D0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000070D7                 jmp     quotearg_n_custom_mem
.text:00000000000070D7 ; } // starts at 70D0
.text:00000000000070D7 quotearg_n_custom endp
.text:00000000000070D7
.text:00000000000070D7 ; ---------------------------------------------------------------------------
.text:00000000000070DC                 align 20h
.text:00000000000070E0
.text:00000000000070E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070E0
.text:00000000000070E0
.text:00000000000070E0                 public quotearg_custom
.text:00000000000070E0 quotearg_custom proc near
.text:00000000000070E0 ; __unwind {
.text:00000000000070E0                 mov     rcx, rdx
.text:00000000000070E3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000070EA                 mov     rdx, rsi
.text:00000000000070ED                 mov     rsi, rdi
.text:00000000000070F0                 xor     edi, edi
.text:00000000000070F2                 jmp     quotearg_n_custom_mem
.text:00000000000070F2 ; } // starts at 70E0
.text:00000000000070F2 quotearg_custom endp
.text:00000000000070F2
.text:00000000000070F2 ; ---------------------------------------------------------------------------
.text:00000000000070F7                 align 20h
.text:0000000000007100
.text:0000000000007100 ; =============== S U B R O U T I N E =======================================
.text:0000000000007100
.text:0000000000007100
.text:0000000000007100                 public quotearg_custom_mem
.text:0000000000007100 quotearg_custom_mem proc near
.text:0000000000007100 ; __unwind {
.text:0000000000007100                 mov     r8, rcx
.text:0000000000007103                 mov     rcx, rdx
.text:0000000000007106                 mov     rdx, rsi
.text:0000000000007109                 mov     rsi, rdi
.text:000000000000710C                 xor     edi, edi
.text:000000000000710E                 jmp     quotearg_n_custom_mem
.text:000000000000710E ; } // starts at 7100
.text:000000000000710E quotearg_custom_mem endp
.text:000000000000710E
.text:000000000000710E ; ---------------------------------------------------------------------------
.text:0000000000007113                 align 20h
.text:0000000000007120
.text:0000000000007120 ; =============== S U B R O U T I N E =======================================
.text:0000000000007120
.text:0000000000007120
.text:0000000000007120                 public quote_n_mem
.text:0000000000007120 quote_n_mem     proc near
.text:0000000000007120 ; __unwind {
.text:0000000000007120                 lea     rcx, quote_quoting_options
.text:0000000000007127                 jmp     quotearg_n_options
.text:0000000000007127 ; } // starts at 7120
.text:0000000000007127 quote_n_mem     endp
.text:0000000000007127
.text:0000000000007127 ; ---------------------------------------------------------------------------
.text:000000000000712C                 align 10h
.text:0000000000007130
.text:0000000000007130 ; =============== S U B R O U T I N E =======================================
.text:0000000000007130
.text:0000000000007130
.text:0000000000007130                 public quote_mem
.text:0000000000007130 quote_mem       proc near
.text:0000000000007130 ; __unwind {
.text:0000000000007130                 lea     rcx, quote_quoting_options
.text:0000000000007137                 mov     rdx, rsi
.text:000000000000713A                 mov     rsi, rdi
.text:000000000000713D                 xor     edi, edi
.text:000000000000713F                 jmp     quotearg_n_options
.text:000000000000713F ; } // starts at 7130
.text:000000000000713F quote_mem       endp
.text:000000000000713F
.text:000000000000713F ; ---------------------------------------------------------------------------
.text:0000000000007144                 align 10h
.text:0000000000007150
.text:0000000000007150 ; =============== S U B R O U T I N E =======================================
.text:0000000000007150
.text:0000000000007150
.text:0000000000007150                 public quote_n
.text:0000000000007150 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000007150 ; __unwind {
.text:0000000000007150                 lea     rcx, quote_quoting_options
.text:0000000000007157                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000715E                 jmp     quotearg_n_options
.text:000000000000715E ; } // starts at 7150
.text:000000000000715E quote_n         endp
.text:000000000000715E
.text:000000000000715E ; ---------------------------------------------------------------------------
.text:0000000000007163                 align 10h
.text:0000000000007170
.text:0000000000007170 ; =============== S U B R O U T I N E =======================================
.text:0000000000007170
.text:0000000000007170
.text:0000000000007170                 public quote
.text:0000000000007170 quote           proc near               ; CODE XREF: argmatch_valid+5A↑p
.text:0000000000007170                                         ; argmatch_valid+A9↑p ...
.text:0000000000007170 ; __unwind {
.text:0000000000007170                 lea     rcx, quote_quoting_options
.text:0000000000007177                 mov     rsi, rdi
.text:000000000000717A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007181                 xor     edi, edi
.text:0000000000007183                 jmp     quotearg_n_options
.text:0000000000007183 ; } // starts at 7170
.text:0000000000007183 quote           endp
.text:0000000000007183
.text:0000000000007183 ; ---------------------------------------------------------------------------
.text:0000000000007188                 align 10h
.text:0000000000007190
.text:0000000000007190 ; =============== S U B R O U T I N E =======================================
.text:0000000000007190
.text:0000000000007190
.text:0000000000007190                 public randint_new
.text:0000000000007190 randint_new     proc near
.text:0000000000007190 ; __unwind {
.text:0000000000007190                 push    rbx
.text:0000000000007191                 mov     rbx, rdi
.text:0000000000007194                 mov     edi, 18h
.text:0000000000007199                 call    xmalloc
.text:000000000000719E                 mov     [rax], rbx
.text:00000000000071A1                 mov     qword ptr [rax+10h], 0
.text:00000000000071A9                 mov     qword ptr [rax+8], 0
.text:00000000000071B1                 pop     rbx
.text:00000000000071B2                 retn
.text:00000000000071B2 ; } // starts at 7190
.text:00000000000071B2 randint_new     endp
.text:00000000000071B2
.text:00000000000071B2 ; ---------------------------------------------------------------------------
.text:00000000000071B3                 align 20h
.text:00000000000071C0
.text:00000000000071C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071C0
.text:00000000000071C0
.text:00000000000071C0                 public randint_all_new
.text:00000000000071C0 randint_all_new proc near               ; CODE XREF: main+2CC↑p
.text:00000000000071C0 ; __unwind {
.text:00000000000071C0                 push    rbx
.text:00000000000071C1                 call    randread_new
.text:00000000000071C6                 test    rax, rax
.text:00000000000071C9                 jz      short loc_71F0
.text:00000000000071CB                 mov     rbx, rax
.text:00000000000071CE                 mov     edi, 18h
.text:00000000000071D3                 call    xmalloc
.text:00000000000071D8                 mov     [rax], rbx
.text:00000000000071DB                 mov     qword ptr [rax+10h], 0
.text:00000000000071E3                 mov     qword ptr [rax+8], 0
.text:00000000000071EB                 pop     rbx
.text:00000000000071EC                 retn
.text:00000000000071EC ; ---------------------------------------------------------------------------
.text:00000000000071ED                 align 10h
.text:00000000000071F0
.text:00000000000071F0 loc_71F0:                               ; CODE XREF: randint_all_new+9↑j
.text:00000000000071F0                 xor     eax, eax
.text:00000000000071F2                 pop     rbx
.text:00000000000071F3                 retn
.text:00000000000071F3 ; } // starts at 71C0
.text:00000000000071F3 randint_all_new endp
.text:00000000000071F3
.text:00000000000071F3 ; ---------------------------------------------------------------------------
.text:00000000000071F4                 align 20h
.text:0000000000007200
.text:0000000000007200 ; =============== S U B R O U T I N E =======================================
.text:0000000000007200
.text:0000000000007200
.text:0000000000007200                 public randint_get_source
.text:0000000000007200 randint_get_source proc near            ; CODE XREF: do_wipefd+315↑p
.text:0000000000007200                                         ; do_wipefd+3AE↑p ...
.text:0000000000007200 ; __unwind {
.text:0000000000007200                 mov     rax, [rdi]
.text:0000000000007203                 retn
.text:0000000000007203 ; } // starts at 7200
.text:0000000000007203 randint_get_source endp
.text:0000000000007203
.text:0000000000007203 ; ---------------------------------------------------------------------------
.text:0000000000007204                 align 10h
.text:0000000000007210
.text:0000000000007210 ; =============== S U B R O U T I N E =======================================
.text:0000000000007210
.text:0000000000007210
.text:0000000000007210                 public randint_genmax
.text:0000000000007210 randint_genmax  proc near               ; CODE XREF: do_wipefd+58E↑p
.text:0000000000007210                                         ; do_wipefd+62F↑p
.text:0000000000007210
.text:0000000000007210 var_50          = qword ptr -50h
.text:0000000000007210 var_48          = byte ptr -48h
.text:0000000000007210 var_40          = qword ptr -40h
.text:0000000000007210
.text:0000000000007210 ; __unwind {
.text:0000000000007210                 push    r15
.text:0000000000007212                 push    r14
.text:0000000000007214                 lea     r15, [rsi+1]
.text:0000000000007218                 push    r13
.text:000000000000721A                 push    r12
.text:000000000000721C                 mov     r13, rdi
.text:000000000000721F                 push    rbp
.text:0000000000007220                 push    rbx
.text:0000000000007221                 mov     r14, rsi
.text:0000000000007224                 sub     rsp, 28h
.text:0000000000007228                 mov     rbp, [rdi+8]
.text:000000000000722C                 mov     rbx, [rdi+10h]
.text:0000000000007230                 mov     rax, fs:28h
.text:0000000000007239                 mov     [rsp+58h+var_40], rax
.text:000000000000723E                 xor     eax, eax
.text:0000000000007240                 mov     rax, [rdi]
.text:0000000000007243                 lea     r12, [rsp+58h+var_48]
.text:0000000000007248                 mov     [rsp+58h+var_50], rax
.text:000000000000724D                 jmp     short loc_7285
.text:000000000000724D ; ---------------------------------------------------------------------------
.text:000000000000724F                 align 10h
.text:0000000000007250
.text:0000000000007250 loc_7250:                               ; CODE XREF: randint_genmax+78↓j
.text:0000000000007250                 cmp     rbx, r14
.text:0000000000007253                 jz      loc_72DF
.text:0000000000007259
.text:0000000000007259 loc_7259:                               ; CODE XREF: randint_genmax+C9↓j
.text:0000000000007259                 mov     rax, rbx
.text:000000000000725C                 xor     edx, edx
.text:000000000000725E                 sub     rax, r14
.text:0000000000007261                 div     r15
.text:0000000000007264                 sub     rbx, rdx
.text:0000000000007267                 mov     rdi, rdx
.text:000000000000726A                 mov     rsi, rax
.text:000000000000726D                 xor     edx, edx
.text:000000000000726F                 mov     rax, rbp
.text:0000000000007272                 div     r15
.text:0000000000007275                 cmp     rbp, rbx
.text:0000000000007278                 jbe     loc_7318
.text:000000000000727E                 lea     rbx, [rdi-1]
.text:0000000000007282                 mov     rbp, rdx
.text:0000000000007285
.text:0000000000007285 loc_7285:                               ; CODE XREF: randint_genmax+3D↑j
.text:0000000000007285                 cmp     rbx, r14
.text:0000000000007288                 jnb     short loc_7250
.text:000000000000728A                 mov     rax, rbx
.text:000000000000728D                 xor     edx, edx
.text:000000000000728F                 nop
.text:0000000000007290
.text:0000000000007290 loc_7290:                               ; CODE XREF: randint_genmax+91↓j
.text:0000000000007290                 shl     rax, 8
.text:0000000000007294                 add     rdx, 1
.text:0000000000007298                 add     rax, 0FFh
.text:000000000000729E                 cmp     r14, rax
.text:00000000000072A1                 ja      short loc_7290
.text:00000000000072A3                 mov     rdi, [rsp+58h+var_50]
.text:00000000000072A8                 mov     rsi, r12
.text:00000000000072AB                 call    randread
.text:00000000000072B0                 mov     rax, r12
.text:00000000000072B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000072B8
.text:00000000000072B8 loc_72B8:                               ; CODE XREF: randint_genmax+C4↓j
.text:00000000000072B8                 movzx   edx, byte ptr [rax]
.text:00000000000072BB                 shl     rbx, 8
.text:00000000000072BF                 shl     rbp, 8
.text:00000000000072C3                 add     rbx, 0FFh
.text:00000000000072CA                 add     rax, 1
.text:00000000000072CE                 add     rbp, rdx
.text:00000000000072D1                 cmp     r14, rbx
.text:00000000000072D4                 ja      short loc_72B8
.text:00000000000072D6                 cmp     rbx, r14
.text:00000000000072D9                 jnz     loc_7259
.text:00000000000072DF
.text:00000000000072DF loc_72DF:                               ; CODE XREF: randint_genmax+43↑j
.text:00000000000072DF                 mov     qword ptr [r13+10h], 0
.text:00000000000072E7                 mov     qword ptr [r13+8], 0
.text:00000000000072EF
.text:00000000000072EF loc_72EF:                               ; CODE XREF: randint_genmax+113↓j
.text:00000000000072EF                 mov     rcx, [rsp+58h+var_40]
.text:00000000000072F4                 xor     rcx, fs:28h
.text:00000000000072FD                 mov     rax, rbp
.text:0000000000007300                 jnz     short loc_7325
.text:0000000000007302                 add     rsp, 28h
.text:0000000000007306                 pop     rbx
.text:0000000000007307                 pop     rbp
.text:0000000000007308                 pop     r12
.text:000000000000730A                 pop     r13
.text:000000000000730C                 pop     r14
.text:000000000000730E                 pop     r15
.text:0000000000007310                 retn
.text:0000000000007310 ; ---------------------------------------------------------------------------
.text:0000000000007311                 align 8
.text:0000000000007318
.text:0000000000007318 loc_7318:                               ; CODE XREF: randint_genmax+68↑j
.text:0000000000007318                 mov     [r13+8], rax
.text:000000000000731C                 mov     [r13+10h], rsi
.text:0000000000007320                 mov     rbp, rdx
.text:0000000000007323                 jmp     short loc_72EF
.text:0000000000007325 ; ---------------------------------------------------------------------------
.text:0000000000007325
.text:0000000000007325 loc_7325:                               ; CODE XREF: randint_genmax+F0↑j
.text:0000000000007325                 call    ___stack_chk_fail
.text:0000000000007325 ; } // starts at 7210
.text:0000000000007325 randint_genmax  endp
.text:0000000000007325
.text:0000000000007325 ; ---------------------------------------------------------------------------
.text:000000000000732A                 align 10h
.text:0000000000007330
.text:0000000000007330 ; =============== S U B R O U T I N E =======================================
.text:0000000000007330
.text:0000000000007330
.text:0000000000007330 ; __int64 __fastcall randint_free(void *ptr)
.text:0000000000007330                 public randint_free
.text:0000000000007330 randint_free    proc near
.text:0000000000007330 ; __unwind {
.text:0000000000007330                 push    rbx
.text:0000000000007331                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007338                 mov     rbx, rdi
.text:000000000000733B                 mov     esi, 18h
.text:0000000000007340                 call    ___explicit_bzero_chk
.text:0000000000007345                 mov     rdi, rbx        ; ptr
.text:0000000000007348                 pop     rbx
.text:0000000000007349                 jmp     _free
.text:0000000000007349 ; } // starts at 7330
.text:0000000000007349 randint_free    endp
.text:0000000000007349
.text:0000000000007349 ; ---------------------------------------------------------------------------
.text:000000000000734E                 align 10h
.text:0000000000007350
.text:0000000000007350 ; =============== S U B R O U T I N E =======================================
.text:0000000000007350
.text:0000000000007350
.text:0000000000007350 ; __int64 __fastcall randint_all_free(void *ptr)
.text:0000000000007350                 public randint_all_free
.text:0000000000007350 randint_all_free proc near              ; CODE XREF: clear_random_data+7↑j
.text:0000000000007350 ; __unwind {
.text:0000000000007350                 push    r13
.text:0000000000007352                 push    r12
.text:0000000000007354                 push    rbp
.text:0000000000007355                 push    rbx
.text:0000000000007356                 mov     rbx, rdi
.text:0000000000007359                 sub     rsp, 8
.text:000000000000735D                 mov     rdi, [rdi]      ; ptr
.text:0000000000007360                 call    randread_free
.text:0000000000007365                 mov     r12d, eax
.text:0000000000007368                 call    ___errno_location
.text:000000000000736D                 mov     r13d, [rax]
.text:0000000000007370                 mov     rdi, rbx
.text:0000000000007373                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000737A                 mov     esi, 18h
.text:000000000000737F                 mov     rbp, rax
.text:0000000000007382                 call    ___explicit_bzero_chk
.text:0000000000007387                 mov     rdi, rbx        ; ptr
.text:000000000000738A                 call    _free
.text:000000000000738F                 mov     [rbp+0], r13d
.text:0000000000007393                 add     rsp, 8
.text:0000000000007397                 mov     eax, r12d
.text:000000000000739A                 pop     rbx
.text:000000000000739B                 pop     rbp
.text:000000000000739C                 pop     r12
.text:000000000000739E                 pop     r13
.text:00000000000073A0                 retn
.text:00000000000073A0 ; } // starts at 7350
.text:00000000000073A0 randint_all_free endp
.text:00000000000073A0
.text:00000000000073A0 ; ---------------------------------------------------------------------------
.text:00000000000073A1                 align 10h
.text:00000000000073B0
.text:00000000000073B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073B0
.text:00000000000073B0 ; Attributes: noreturn
.text:00000000000073B0
.text:00000000000073B0 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:00000000000073B0                                         ; randread_new+C4↓o ...
.text:00000000000073B0 ; __unwind {
.text:00000000000073B0                 push    rbp
.text:00000000000073B1                 push    rbx
.text:00000000000073B2                 sub     rsp, 8
.text:00000000000073B6                 test    rdi, rdi
.text:00000000000073B9                 jz      short loc_73F8
.text:00000000000073BB                 call    quote
.text:00000000000073C0                 mov     rbp, rax
.text:00000000000073C3                 call    ___errno_location
.text:00000000000073C8                 cmp     dword ptr [rax], 0
.text:00000000000073CB                 mov     rbx, rax
.text:00000000000073CE                 mov     edx, 5          ; category
.text:00000000000073D3                 jz      short loc_73FD
.text:00000000000073D5                 lea     rsi, aSReadError ; "%s: read error"
.text:00000000000073DC                 xor     edi, edi        ; domainname
.text:00000000000073DE                 call    _dcgettext
.text:00000000000073E3
.text:00000000000073E3 loc_73E3:                               ; CODE XREF: randread_error+5B↓j
.text:00000000000073E3                 mov     edi, cs:exit_failure ; status
.text:00000000000073E9                 mov     esi, [rbx]      ; errnum
.text:00000000000073EB                 mov     rdx, rax        ; format
.text:00000000000073EE                 mov     rcx, rbp
.text:00000000000073F1                 xor     eax, eax
.text:00000000000073F3                 call    _error
.text:00000000000073F8
.text:00000000000073F8 loc_73F8:                               ; CODE XREF: randread_error+9↑j
.text:00000000000073F8                 call    _abort
.text:00000000000073FD ; ---------------------------------------------------------------------------
.text:00000000000073FD
.text:00000000000073FD loc_73FD:                               ; CODE XREF: randread_error+23↑j
.text:00000000000073FD                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:0000000000007404                 xor     edi, edi        ; domainname
.text:0000000000007406                 call    _dcgettext
.text:000000000000740B                 jmp     short loc_73E3
.text:000000000000740B ; } // starts at 73B0
.text:000000000000740B randread_error  endp
.text:000000000000740B
.text:000000000000740B ; ---------------------------------------------------------------------------
.text:000000000000740D                 align 10h
.text:0000000000007410
.text:0000000000007410 ; =============== S U B R O U T I N E =======================================
.text:0000000000007410
.text:0000000000007410
.text:0000000000007410                 public randread_new
.text:0000000000007410 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:0000000000007410
.text:0000000000007410 var_68          = qword ptr -68h
.text:0000000000007410 var_60          = qword ptr -60h
.text:0000000000007410 tv              = timeval ptr -58h
.text:0000000000007410 var_40          = qword ptr -40h
.text:0000000000007410
.text:0000000000007410 ; __unwind {
.text:0000000000007410                 push    r15
.text:0000000000007412                 push    r14
.text:0000000000007414                 push    r13
.text:0000000000007416                 push    r12
.text:0000000000007418                 push    rbp
.text:0000000000007419                 push    rbx
.text:000000000000741A                 sub     rsp, 38h
.text:000000000000741E                 mov     rax, fs:28h
.text:0000000000007427                 mov     [rsp+68h+var_40], rax
.text:000000000000742C                 xor     eax, eax
.text:000000000000742E                 test    rsi, rsi
.text:0000000000007431                 jz      loc_7558
.text:0000000000007437                 test    rdi, rdi
.text:000000000000743A                 mov     r12, rdi
.text:000000000000743D                 mov     rbp, rsi
.text:0000000000007440                 jz      short loc_74C0
.text:0000000000007442                 lea     rsi, aRb        ; "rb"
.text:0000000000007449                 call    fopen_safer
.text:000000000000744E                 test    rax, rax
.text:0000000000007451                 mov     r13, rax
.text:0000000000007454                 jz      loc_7658
.text:000000000000745A                 mov     edi, 1038h
.text:000000000000745F                 call    xmalloc
.text:0000000000007464                 mov     rbx, rax
.text:0000000000007467                 mov     [rax], r13
.text:000000000000746A                 lea     rax, randread_error
.text:0000000000007471                 cmp     rbp, 1000h
.text:0000000000007478                 mov     ecx, 1000h
.text:000000000000747D                 lea     rsi, [rbx+18h]  ; buf
.text:0000000000007481                 cmovbe  rcx, rbp        ; n
.text:0000000000007485                 mov     [rbx+8], rax
.text:0000000000007489                 mov     [rbx+10h], r12
.text:000000000000748D                 xor     edx, edx        ; modes
.text:000000000000748F                 mov     rdi, r13        ; stream
.text:0000000000007492                 call    _setvbuf
.text:0000000000007497
.text:0000000000007497 loc_7497:                               ; CODE XREF: randread_new+13D↓j
.text:0000000000007497                                         ; randread_new+16F↓j ...
.text:0000000000007497                 mov     rdx, [rsp+68h+var_40]
.text:000000000000749C                 xor     rdx, fs:28h
.text:00000000000074A5                 mov     rax, rbx
.text:00000000000074A8                 jnz     loc_765F
.text:00000000000074AE                 add     rsp, 38h
.text:00000000000074B2                 pop     rbx
.text:00000000000074B3                 pop     rbp
.text:00000000000074B4                 pop     r12
.text:00000000000074B6                 pop     r13
.text:00000000000074B8                 pop     r14
.text:00000000000074BA                 pop     r15
.text:00000000000074BC                 retn
.text:00000000000074BC ; ---------------------------------------------------------------------------
.text:00000000000074BD                 align 20h
.text:00000000000074C0
.text:00000000000074C0 loc_74C0:                               ; CODE XREF: randread_new+30↑j
.text:00000000000074C0                 mov     edi, 1038h
.text:00000000000074C5                 call    xmalloc
.text:00000000000074CA                 mov     rbx, rax
.text:00000000000074CD                 mov     qword ptr [rax], 0
.text:00000000000074D4                 lea     rax, randread_error
.text:00000000000074DB                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:00000000000074E2                 xor     esi, esi        ; oflag
.text:00000000000074E4                 mov     qword ptr [rbx+10h], 0
.text:00000000000074EC                 mov     [rbx+8], rax
.text:00000000000074F0                 mov     qword ptr [rbx+18h], 0
.text:00000000000074F8                 xor     eax, eax
.text:00000000000074FA                 call    _open
.text:00000000000074FF                 test    eax, eax
.text:0000000000007501                 lea     r13, [rbx+20h]
.text:0000000000007505                 mov     r15d, eax
.text:0000000000007508                 js      short loc_7588
.text:000000000000750A                 cmp     rbp, 800h
.text:0000000000007511                 mov     rdx, rbp
.text:0000000000007514                 mov     r14d, 800h
.text:000000000000751A                 cmova   rdx, r14
.text:000000000000751E                 mov     ecx, 1018h
.text:0000000000007523                 mov     rsi, r13
.text:0000000000007526                 mov     edi, eax
.text:0000000000007528                 call    ___read_chk
.text:000000000000752D                 mov     edi, r15d       ; fd
.text:0000000000007530                 mov     rbp, rax
.text:0000000000007533                 call    _close
.text:0000000000007538                 cmp     rbp, 7FFh
.text:000000000000753F                 jle     loc_7664
.text:0000000000007545
.text:0000000000007545 loc_7545:                               ; CODE XREF: randread_new+1F6↓j
.text:0000000000007545                                         ; randread_new+223↓j ...
.text:0000000000007545                 mov     rdi, r13
.text:0000000000007548                 call    isaac_seed
.text:000000000000754D                 jmp     loc_7497
.text:000000000000754D ; ---------------------------------------------------------------------------
.text:0000000000007552                 align 8
.text:0000000000007558
.text:0000000000007558 loc_7558:                               ; CODE XREF: randread_new+21↑j
.text:0000000000007558                 mov     edi, 1038h
.text:000000000000755D                 call    xmalloc
.text:0000000000007562                 mov     rbx, rax
.text:0000000000007565                 mov     qword ptr [rax], 0
.text:000000000000756C                 lea     rax, randread_error
.text:0000000000007573                 mov     qword ptr [rbx+10h], 0
.text:000000000000757B                 mov     [rbx+8], rax
.text:000000000000757F                 jmp     loc_7497
.text:000000000000757F ; ---------------------------------------------------------------------------
.text:0000000000007584                 align 8
.text:0000000000007588
.text:0000000000007588 loc_7588:                               ; CODE XREF: randread_new+F8↑j
.text:0000000000007588                 lea     r12, [rsp+68h+tv]
.text:000000000000758D                 xor     esi, esi        ; tz
.text:000000000000758F                 mov     r14d, 18h
.text:0000000000007595                 mov     rdi, r12        ; tv
.text:0000000000007598                 call    _gettimeofday
.text:000000000000759D                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:00000000000075A3                 movups  xmmword ptr [rbx+20h], xmm0
.text:00000000000075A7                 call    _getpid
.text:00000000000075AC                 mov     [rbx+30h], eax
.text:00000000000075AF                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000075B3                 call    _getppid
.text:00000000000075B8                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000075BC                 mov     [rbx+34h], eax
.text:00000000000075BF
.text:00000000000075BF loc_75BF:                               ; CODE XREF: randread_new+324↓j
.text:00000000000075BF                 mov     ebp, 800h
.text:00000000000075C4                 mov     eax, 4
.text:00000000000075C9                 sub     rbp, r14
.text:00000000000075CC                 cmp     rbp, 4
.text:00000000000075D0                 cmova   rbp, rax
.text:00000000000075D4                 call    _getuid
.text:00000000000075D9                 test    ebp, ebp
.text:00000000000075DB                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000075DF                 lea     rcx, [r13+r14+0]
.text:00000000000075E4                 mov     esi, ebp
.text:00000000000075E6                 jz      short loc_75FC
.text:00000000000075E8                 xor     eax, eax
.text:00000000000075EA
.text:00000000000075EA loc_75EA:                               ; CODE XREF: randread_new+1EA↓j
.text:00000000000075EA                 mov     edx, eax
.text:00000000000075EC                 add     eax, 1
.text:00000000000075EF                 movzx   edi, byte ptr [r12+rdx]
.text:00000000000075F4                 cmp     eax, esi
.text:00000000000075F6                 mov     [rcx+rdx], dil
.text:00000000000075FA                 jb      short loc_75EA
.text:00000000000075FC
.text:00000000000075FC loc_75FC:                               ; CODE XREF: randread_new+1D6↑j
.text:00000000000075FC                 add     rbp, r14
.text:00000000000075FF                 cmp     rbp, 7FFh
.text:0000000000007606                 ja      loc_7545
.text:000000000000760C                 call    _getgid
.text:0000000000007611                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000007615                 mov     eax, 800h
.text:000000000000761A                 mov     edx, 4
.text:000000000000761F                 sub     rax, rbp
.text:0000000000007622                 lea     rcx, [r13+rbp+0]
.text:0000000000007627                 cmp     rax, 4
.text:000000000000762B                 cmova   rax, rdx
.text:000000000000762F                 test    eax, eax
.text:0000000000007631                 mov     esi, eax
.text:0000000000007633                 jz      loc_7545
.text:0000000000007639                 xor     eax, eax
.text:000000000000763B
.text:000000000000763B loc_763B:                               ; CODE XREF: randread_new+23B↓j
.text:000000000000763B                 mov     edx, eax
.text:000000000000763D                 add     eax, 1
.text:0000000000007640                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000007645                 cmp     eax, esi
.text:0000000000007647                 mov     [rcx+rdx], dil
.text:000000000000764B                 jb      short loc_763B
.text:000000000000764D                 jmp     loc_7545
.text:000000000000764D ; ---------------------------------------------------------------------------
.text:0000000000007652                 align 8
.text:0000000000007658
.text:0000000000007658 loc_7658:                               ; CODE XREF: randread_new+44↑j
.text:0000000000007658                 xor     ebx, ebx
.text:000000000000765A                 jmp     loc_7497
.text:000000000000765F ; ---------------------------------------------------------------------------
.text:000000000000765F
.text:000000000000765F loc_765F:                               ; CODE XREF: randread_new+98↑j
.text:000000000000765F                 call    ___stack_chk_fail
.text:0000000000007664 ; ---------------------------------------------------------------------------
.text:0000000000007664
.text:0000000000007664 loc_7664:                               ; CODE XREF: randread_new+12F↑j
.text:0000000000007664                 test    rbp, rbp
.text:0000000000007667                 mov     r15, r14
.text:000000000000766A                 mov     eax, 10h
.text:000000000000766F                 cmovs   rbp, r12
.text:0000000000007673                 lea     r12, [rsp+68h+tv]
.text:0000000000007678                 sub     r15, rbp
.text:000000000000767B                 cmp     r15, 10h
.text:000000000000767F                 mov     rdi, r12        ; tv
.text:0000000000007682                 cmova   r15, rax
.text:0000000000007686                 xor     esi, esi        ; tz
.text:0000000000007688                 call    _gettimeofday
.text:000000000000768D                 lea     rax, [r13+rbp+0]
.text:0000000000007692                 add     rbp, r15
.text:0000000000007695                 mov     ecx, r15d
.text:0000000000007698                 cmp     rbp, 7FFh
.text:000000000000769F                 mov     rsi, r12
.text:00000000000076A2                 mov     rdi, rax
.text:00000000000076A5                 rep movsb
.text:00000000000076A7                 ja      loc_7545
.text:00000000000076AD                 mov     r15, r14
.text:00000000000076B0                 mov     r8d, 4
.text:00000000000076B6                 sub     r15, rbp
.text:00000000000076B9                 mov     [rsp+68h+var_60], r8
.text:00000000000076BE                 cmp     r15, 4
.text:00000000000076C2                 cmova   r15, r8
.text:00000000000076C6                 lea     rdx, [rbp+r15+0]
.text:00000000000076CB                 add     rbp, r13
.text:00000000000076CE                 mov     [rsp+68h+var_68], rdx
.text:00000000000076D2                 call    _getpid
.text:00000000000076D7                 mov     rdx, [rsp+68h+var_68]
.text:00000000000076DB                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:00000000000076DF                 mov     ecx, r15d
.text:00000000000076E2                 mov     rdi, rbp
.text:00000000000076E5                 mov     rsi, r12
.text:00000000000076E8                 mov     r8, [rsp+68h+var_60]
.text:00000000000076ED                 rep movsb
.text:00000000000076EF                 cmp     rdx, 7FFh
.text:00000000000076F6                 jg      loc_7545
.text:00000000000076FC                 sub     r14, rdx
.text:00000000000076FF                 cmp     r14, 4
.text:0000000000007703                 cmova   r14, r8
.text:0000000000007707                 call    _getppid
.text:000000000000770C                 mov     rdx, [rsp+68h+var_68]
.text:0000000000007710                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000007714                 mov     ecx, r14d
.text:0000000000007717                 mov     rsi, r12
.text:000000000000771A                 lea     rax, [r13+rdx+0]
.text:000000000000771F                 add     r14, rdx
.text:0000000000007722                 cmp     r14, 7FFh
.text:0000000000007729                 mov     rdi, rax
.text:000000000000772C                 rep movsb
.text:000000000000772E                 ja      loc_7545
.text:0000000000007734                 jmp     loc_75BF
.text:0000000000007734 ; } // starts at 7410
.text:0000000000007734 randread_new    endp
.text:0000000000007734
.text:0000000000007734 ; ---------------------------------------------------------------------------
.text:0000000000007739                 align 20h
.text:0000000000007740
.text:0000000000007740 ; =============== S U B R O U T I N E =======================================
.text:0000000000007740
.text:0000000000007740
.text:0000000000007740                 public randread_set_handler
.text:0000000000007740 randread_set_handler proc near
.text:0000000000007740 ; __unwind {
.text:0000000000007740                 mov     [rdi+8], rsi
.text:0000000000007744                 retn
.text:0000000000007744 ; } // starts at 7740
.text:0000000000007744 randread_set_handler endp
.text:0000000000007744
.text:0000000000007744 ; ---------------------------------------------------------------------------
.text:0000000000007745                 align 10h
.text:0000000000007750
.text:0000000000007750 ; =============== S U B R O U T I N E =======================================
.text:0000000000007750
.text:0000000000007750
.text:0000000000007750                 public randread_set_handler_arg
.text:0000000000007750 randread_set_handler_arg proc near
.text:0000000000007750 ; __unwind {
.text:0000000000007750                 mov     [rdi+10h], rsi
.text:0000000000007754                 retn
.text:0000000000007754 ; } // starts at 7750
.text:0000000000007754 randread_set_handler_arg endp
.text:0000000000007754
.text:0000000000007754 ; ---------------------------------------------------------------------------
.text:0000000000007755                 align 20h
.text:0000000000007760
.text:0000000000007760 ; =============== S U B R O U T I N E =======================================
.text:0000000000007760
.text:0000000000007760
.text:0000000000007760                 public randread
.text:0000000000007760 randread        proc near               ; CODE XREF: dopass+494↑p
.text:0000000000007760                                         ; randint_genmax+9B↑p
.text:0000000000007760
.text:0000000000007760 src             = qword ptr -40h
.text:0000000000007760
.text:0000000000007760 ; __unwind {
.text:0000000000007760                 push    r15
.text:0000000000007762                 push    r14
.text:0000000000007764                 push    r13
.text:0000000000007766                 push    r12
.text:0000000000007768                 mov     r12, rdi
.text:000000000000776B                 push    rbp
.text:000000000000776C                 push    rbx
.text:000000000000776D                 mov     rbp, rdx
.text:0000000000007770                 mov     rbx, rsi
.text:0000000000007773                 sub     rsp, 18h
.text:0000000000007777                 mov     rcx, [rdi]
.text:000000000000777A                 test    rcx, rcx
.text:000000000000777D                 mov     [rsp+48h+src], rcx
.text:0000000000007782                 jz      short loc_77E8
.text:0000000000007784                 call    ___errno_location
.text:0000000000007789                 mov     rcx, [rsp+48h+src]
.text:000000000000778E                 mov     r13, rax
.text:0000000000007791                 jmp     short loc_77B6
.text:0000000000007791 ; ---------------------------------------------------------------------------
.text:0000000000007793                 align 8
.text:0000000000007798
.text:0000000000007798 loc_7798:                               ; CODE XREF: randread+70↓j
.text:0000000000007798                 mov     rax, [r12]
.text:000000000000779C                 mov     rdi, [r12+10h]
.text:00000000000077A1                 mov     eax, [rax]
.text:00000000000077A3                 and     eax, 20h
.text:00000000000077A6                 cmovnz  eax, edx
.text:00000000000077A9                 mov     [r13+0], eax
.text:00000000000077AD                 call    qword ptr [r12+8]
.text:00000000000077B2                 mov     rcx, [r12]      ; stream
.text:00000000000077B6
.text:00000000000077B6 loc_77B6:                               ; CODE XREF: randread+31↑j
.text:00000000000077B6                 mov     rdx, rbp        ; n
.text:00000000000077B9                 mov     rdi, rbx        ; ptr
.text:00000000000077BC                 mov     esi, 1          ; size
.text:00000000000077C1                 call    _fread_unlocked
.text:00000000000077C6                 add     rbx, rax
.text:00000000000077C9                 sub     rbp, rax
.text:00000000000077CC                 mov     edx, [r13+0]
.text:00000000000077D0                 jnz     short loc_7798
.text:00000000000077D2
.text:00000000000077D2 loc_77D2:                               ; CODE XREF: randread+16E↓j
.text:00000000000077D2                 add     rsp, 18h
.text:00000000000077D6                 pop     rbx
.text:00000000000077D7                 pop     rbp
.text:00000000000077D8                 pop     r12
.text:00000000000077DA                 pop     r13
.text:00000000000077DC                 pop     r14
.text:00000000000077DE                 pop     r15
.text:00000000000077E0                 retn
.text:00000000000077E0 ; ---------------------------------------------------------------------------
.text:00000000000077E1                 align 8
.text:00000000000077E8
.text:00000000000077E8 loc_77E8:                               ; CODE XREF: randread+22↑j
.text:00000000000077E8                 mov     r14, [rdi+18h]
.text:00000000000077EC                 lea     rax, [rdi+838h]
.text:00000000000077F3                 lea     r13, [rdi+20h]
.text:00000000000077F7                 mov     [rsp+48h+src], rax
.text:00000000000077FC                 cmp     rdx, r14
.text:00000000000077FF                 jbe     loc_78E2
.text:0000000000007805
.text:0000000000007805 loc_7805:                               ; CODE XREF: randread+14A↓j
.text:0000000000007805                 mov     esi, 800h
.text:000000000000780A                 mov     rdi, rbx        ; dest
.text:000000000000780D                 mov     rdx, r14        ; n
.text:0000000000007810                 sub     rsi, r14
.text:0000000000007813                 add     rsi, [rsp+48h+src] ; src
.text:0000000000007818                 add     rbx, r14
.text:000000000000781B                 sub     rbp, r14
.text:000000000000781E                 call    _memcpy
.text:0000000000007823                 test    bl, 7
.text:0000000000007826                 jnz     short loc_7890
.text:0000000000007828                 cmp     rbp, 7FFh
.text:000000000000782F                 jbe     loc_78D3
.text:0000000000007835                 lea     r15, [rbp-800h]
.text:000000000000783C                 mov     r14, r15
.text:000000000000783F                 and     r14d, 7FFh
.text:0000000000007846                 jmp     short loc_785C
.text:0000000000007846 ; ---------------------------------------------------------------------------
.text:0000000000007848                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: randread+114↓j
.text:0000000000007850                 cmp     r15, r14
.text:0000000000007853                 jz      short loc_7890
.text:0000000000007855                 sub     r15, 800h
.text:000000000000785C
.text:000000000000785C loc_785C:                               ; CODE XREF: randread+E6↑j
.text:000000000000785C                 mov     rsi, rbx
.text:000000000000785F                 mov     rdi, r13
.text:0000000000007862                 add     rbx, 800h
.text:0000000000007869                 call    isaac_refill
.text:000000000000786E                 test    r15, r15
.text:0000000000007871                 mov     rbp, r15
.text:0000000000007874                 jnz     short loc_7850
.text:0000000000007876                 mov     qword ptr [r12+18h], 0
.text:000000000000787F                 add     rsp, 18h
.text:0000000000007883                 pop     rbx
.text:0000000000007884                 pop     rbp
.text:0000000000007885                 pop     r12
.text:0000000000007887                 pop     r13
.text:0000000000007889                 pop     r14
.text:000000000000788B                 pop     r15
.text:000000000000788D                 retn
.text:000000000000788D ; ---------------------------------------------------------------------------
.text:000000000000788E                 align 10h
.text:0000000000007890
.text:0000000000007890 loc_7890:                               ; CODE XREF: randread+C6↑j
.text:0000000000007890                                         ; randread+F3↑j
.text:0000000000007890                 mov     rsi, [rsp+48h+src]
.text:0000000000007895                 mov     rdi, r13
.text:0000000000007898                 mov     r14d, 800h
.text:000000000000789E                 call    isaac_refill
.text:00000000000078A3                 cmp     rbp, 800h
.text:00000000000078AA                 ja      loc_7805
.text:00000000000078B0
.text:00000000000078B0 loc_78B0:                               ; CODE XREF: randread+180↓j
.text:00000000000078B0                 mov     r14d, 800h
.text:00000000000078B6
.text:00000000000078B6 loc_78B6:                               ; CODE XREF: randread+194↓j
.text:00000000000078B6                 mov     rsi, [rsp+48h+src] ; src
.text:00000000000078BB                 mov     rdx, rbp        ; n
.text:00000000000078BE                 mov     rdi, rbx        ; dest
.text:00000000000078C1                 sub     r14, rbp
.text:00000000000078C4                 call    _memcpy
.text:00000000000078C9                 mov     [r12+18h], r14
.text:00000000000078CE                 jmp     loc_77D2
.text:00000000000078D3 ; ---------------------------------------------------------------------------
.text:00000000000078D3
.text:00000000000078D3 loc_78D3:                               ; CODE XREF: randread+CF↑j
.text:00000000000078D3                 mov     rsi, [rsp+48h+src]
.text:00000000000078D8                 mov     rdi, r13
.text:00000000000078DB                 call    isaac_refill
.text:00000000000078E0                 jmp     short loc_78B0
.text:00000000000078E2 ; ---------------------------------------------------------------------------
.text:00000000000078E2
.text:00000000000078E2 loc_78E2:                               ; CODE XREF: randread+9F↑j
.text:00000000000078E2                 mov     r15, rax
.text:00000000000078E5                 sub     r15, r14
.text:00000000000078E8                 lea     rax, [r15+800h]
.text:00000000000078EF                 mov     [rsp+48h+src], rax
.text:00000000000078F4                 jmp     short loc_78B6
.text:00000000000078F4 ; } // starts at 7760
.text:00000000000078F4 randread        endp
.text:00000000000078F4
.text:00000000000078F4 ; ---------------------------------------------------------------------------
.text:00000000000078F6                 align 20h
.text:0000000000007900
.text:0000000000007900 ; =============== S U B R O U T I N E =======================================
.text:0000000000007900
.text:0000000000007900
.text:0000000000007900 ; __int64 __fastcall randread_free(void *ptr)
.text:0000000000007900                 public randread_free
.text:0000000000007900 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:0000000000007900 ; __unwind {
.text:0000000000007900                 push    rbp
.text:0000000000007901                 push    rbx
.text:0000000000007902                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007909                 mov     rbx, rdi
.text:000000000000790C                 mov     esi, 1038h
.text:0000000000007911                 sub     rsp, 8
.text:0000000000007915                 mov     rbp, [rdi]
.text:0000000000007918                 call    ___explicit_bzero_chk
.text:000000000000791D                 mov     rdi, rbx        ; ptr
.text:0000000000007920                 call    _free
.text:0000000000007925                 test    rbp, rbp
.text:0000000000007928                 jz      short loc_7940
.text:000000000000792A                 add     rsp, 8
.text:000000000000792E                 mov     rdi, rbp        ; stream
.text:0000000000007931                 pop     rbx
.text:0000000000007932                 pop     rbp
.text:0000000000007933                 jmp     rpl_fclose
.text:0000000000007933 ; ---------------------------------------------------------------------------
.text:0000000000007938                 align 20h
.text:0000000000007940
.text:0000000000007940 loc_7940:                               ; CODE XREF: randread_free+28↑j
.text:0000000000007940                 add     rsp, 8
.text:0000000000007944                 xor     eax, eax
.text:0000000000007946                 pop     rbx
.text:0000000000007947                 pop     rbp
.text:0000000000007948                 retn
.text:0000000000007948 ; } // starts at 7900
.text:0000000000007948 randread_free   endp
.text:0000000000007948
.text:0000000000007948 ; ---------------------------------------------------------------------------
.text:0000000000007949                 align 10h
.text:0000000000007950
.text:0000000000007950 ; =============== S U B R O U T I N E =======================================
.text:0000000000007950
.text:0000000000007950
.text:0000000000007950                 public isaac_refill
.text:0000000000007950 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:0000000000007950                                         ; randread+13E↑p ...
.text:0000000000007950 ; __unwind {
.text:0000000000007950                 mov     rax, [rdi+810h]
.text:0000000000007957                 mov     rdx, [rdi+800h]
.text:000000000000795E                 lea     r9, [rdi+400h]
.text:0000000000007965                 lea     rcx, [rax+1]
.text:0000000000007969                 mov     rax, rdi
.text:000000000000796C                 mov     [rdi+810h], rcx
.text:0000000000007973                 add     rcx, [rdi+808h]
.text:000000000000797A                 nop     word ptr [rax+rax+00h]
.text:0000000000007980
.text:0000000000007980 loc_7980:                               ; CODE XREF: isaac_refill+149↓j
.text:0000000000007980                 mov     r8, rdx
.text:0000000000007983                 shl     r8, 15h
.text:0000000000007987                 xor     rdx, r8
.text:000000000000798A                 mov     r8, [rax]
.text:000000000000798D                 not     rdx
.text:0000000000007990                 add     rdx, [rax+400h]
.text:0000000000007997                 mov     r10, r8
.text:000000000000799A                 and     r10d, 7F8h
.text:00000000000079A1                 mov     r11, [rdi+r10]
.text:00000000000079A5                 mov     r10, rdx
.text:00000000000079A8                 shr     r10, 5
.text:00000000000079AC                 add     r11, rdx
.text:00000000000079AF                 xor     rdx, r10
.text:00000000000079B2                 add     rcx, r11
.text:00000000000079B5                 mov     [rax], rcx
.text:00000000000079B8                 shr     rcx, 8
.text:00000000000079BC                 and     ecx, 7F8h
.text:00000000000079C2                 mov     r11, [rdi+rcx]
.text:00000000000079C6                 add     r11, r8
.text:00000000000079C9                 mov     [rsi], r11
.text:00000000000079CC                 add     rdx, [rax+408h]
.text:00000000000079D3                 mov     rcx, [rax+8]
.text:00000000000079D7                 mov     r10, rdx
.text:00000000000079DA                 mov     rdx, rcx
.text:00000000000079DD                 and     edx, 7F8h
.text:00000000000079E3                 mov     r8, [rdi+rdx]
.text:00000000000079E7                 mov     rdx, r10
.text:00000000000079EA                 shl     rdx, 0Ch
.text:00000000000079EE                 xor     rdx, r10
.text:00000000000079F1                 add     r8, r10
.text:00000000000079F4                 add     r8, r11
.text:00000000000079F7                 mov     [rax+8], r8
.text:00000000000079FB                 shr     r8, 8
.text:00000000000079FF                 and     r8d, 7F8h
.text:0000000000007A06                 add     rcx, [rdi+r8]
.text:0000000000007A0A                 mov     [rsi+8], rcx
.text:0000000000007A0E                 mov     r8, [rax+10h]
.text:0000000000007A12                 mov     r11, rcx
.text:0000000000007A15                 add     rdx, [rax+410h]
.text:0000000000007A1C                 mov     rcx, r8
.text:0000000000007A1F                 and     ecx, 7F8h
.text:0000000000007A25                 mov     r10, [rdi+rcx]
.text:0000000000007A29                 add     r10, rdx
.text:0000000000007A2C                 mov     rcx, r10
.text:0000000000007A2F                 add     rcx, r11
.text:0000000000007A32                 mov     [rax+10h], rcx
.text:0000000000007A36                 shr     rcx, 8
.text:0000000000007A3A                 and     ecx, 7F8h
.text:0000000000007A40                 mov     r10, [rdi+rcx]
.text:0000000000007A44                 mov     rcx, rdx
.text:0000000000007A47                 shr     rcx, 21h
.text:0000000000007A4B                 xor     rdx, rcx
.text:0000000000007A4E                 add     r10, r8
.text:0000000000007A51                 mov     [rsi+10h], r10
.text:0000000000007A55                 mov     rcx, [rax+18h]
.text:0000000000007A59                 add     rdx, [rax+418h]
.text:0000000000007A60                 mov     r8, rcx
.text:0000000000007A63                 and     r8d, 7F8h
.text:0000000000007A6A                 mov     r11, [rdi+r8]
.text:0000000000007A6E                 add     r11, rdx
.text:0000000000007A71                 mov     r8, r11
.text:0000000000007A74                 add     r8, r10
.text:0000000000007A77                 add     rax, 20h ; ' '
.text:0000000000007A7B                 add     rsi, 20h ; ' '
.text:0000000000007A7F                 mov     [rax-8], r8
.text:0000000000007A83                 shr     r8, 8
.text:0000000000007A87                 and     r8d, 7F8h
.text:0000000000007A8E                 add     rcx, [rdi+r8]
.text:0000000000007A92                 mov     [rsi-8], rcx
.text:0000000000007A96                 cmp     rax, r9
.text:0000000000007A99                 jb      loc_7980
.text:0000000000007A9F                 lea     r9, [rdi+800h]
.text:0000000000007AA6                 db      2Eh
.text:0000000000007AA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007AB0
.text:0000000000007AB0 loc_7AB0:                               ; CODE XREF: isaac_refill+279↓j
.text:0000000000007AB0                 mov     r8, rdx
.text:0000000000007AB3                 shl     r8, 15h
.text:0000000000007AB7                 xor     rdx, r8
.text:0000000000007ABA                 mov     r8, [rax]
.text:0000000000007ABD                 not     rdx
.text:0000000000007AC0                 add     rdx, [rax-400h]
.text:0000000000007AC7                 mov     r10, r8
.text:0000000000007ACA                 and     r10d, 7F8h
.text:0000000000007AD1                 mov     r11, [rdi+r10]
.text:0000000000007AD5                 mov     r10, rdx
.text:0000000000007AD8                 shr     r10, 5
.text:0000000000007ADC                 add     r11, rdx
.text:0000000000007ADF                 xor     rdx, r10
.text:0000000000007AE2                 add     rcx, r11
.text:0000000000007AE5                 mov     [rax], rcx
.text:0000000000007AE8                 shr     rcx, 8
.text:0000000000007AEC                 and     ecx, 7F8h
.text:0000000000007AF2                 mov     r11, [rdi+rcx]
.text:0000000000007AF6                 add     r11, r8
.text:0000000000007AF9                 mov     [rsi], r11
.text:0000000000007AFC                 add     rdx, [rax-3F8h]
.text:0000000000007B03                 mov     rcx, [rax+8]
.text:0000000000007B07                 mov     r10, rdx
.text:0000000000007B0A                 mov     rdx, rcx
.text:0000000000007B0D                 and     edx, 7F8h
.text:0000000000007B13                 mov     r8, [rdi+rdx]
.text:0000000000007B17                 mov     rdx, r10
.text:0000000000007B1A                 shl     rdx, 0Ch
.text:0000000000007B1E                 xor     rdx, r10
.text:0000000000007B21                 add     r8, r10
.text:0000000000007B24                 add     r8, r11
.text:0000000000007B27                 mov     [rax+8], r8
.text:0000000000007B2B                 shr     r8, 8
.text:0000000000007B2F                 and     r8d, 7F8h
.text:0000000000007B36                 add     rcx, [rdi+r8]
.text:0000000000007B3A                 mov     [rsi+8], rcx
.text:0000000000007B3E                 mov     r8, [rax+10h]
.text:0000000000007B42                 mov     r11, rcx
.text:0000000000007B45                 add     rdx, [rax-3F0h]
.text:0000000000007B4C                 mov     rcx, r8
.text:0000000000007B4F                 and     ecx, 7F8h
.text:0000000000007B55                 mov     r10, [rdi+rcx]
.text:0000000000007B59                 add     r10, rdx
.text:0000000000007B5C                 mov     rcx, r10
.text:0000000000007B5F                 add     rcx, r11
.text:0000000000007B62                 mov     [rax+10h], rcx
.text:0000000000007B66                 shr     rcx, 8
.text:0000000000007B6A                 and     ecx, 7F8h
.text:0000000000007B70                 mov     r10, [rdi+rcx]
.text:0000000000007B74                 mov     rcx, rdx
.text:0000000000007B77                 shr     rcx, 21h
.text:0000000000007B7B                 xor     rdx, rcx
.text:0000000000007B7E                 add     r10, r8
.text:0000000000007B81                 mov     [rsi+10h], r10
.text:0000000000007B85                 mov     rcx, [rax+18h]
.text:0000000000007B89                 add     rdx, [rax-3E8h]
.text:0000000000007B90                 mov     r8, rcx
.text:0000000000007B93                 and     r8d, 7F8h
.text:0000000000007B9A                 mov     r11, [rdi+r8]
.text:0000000000007B9E                 add     r11, rdx
.text:0000000000007BA1                 mov     r8, r11
.text:0000000000007BA4                 add     r8, r10
.text:0000000000007BA7                 add     rax, 20h ; ' '
.text:0000000000007BAB                 add     rsi, 20h ; ' '
.text:0000000000007BAF                 mov     [rax-8], r8
.text:0000000000007BB3                 shr     r8, 8
.text:0000000000007BB7                 and     r8d, 7F8h
.text:0000000000007BBE                 add     rcx, [rdi+r8]
.text:0000000000007BC2                 mov     [rsi-8], rcx
.text:0000000000007BC6                 cmp     rax, r9
.text:0000000000007BC9                 jb      loc_7AB0
.text:0000000000007BCF                 mov     [rdi+800h], rdx
.text:0000000000007BD6                 mov     [rdi+808h], rcx
.text:0000000000007BDD                 retn
.text:0000000000007BDD ; } // starts at 7950
.text:0000000000007BDD isaac_refill    endp
.text:0000000000007BDD
.text:0000000000007BDD ; ---------------------------------------------------------------------------
.text:0000000000007BDE                 align 20h
.text:0000000000007BE0
.text:0000000000007BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BE0
.text:0000000000007BE0
.text:0000000000007BE0                 public isaac_seed
.text:0000000000007BE0 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:0000000000007BE0 ; __unwind {
.text:0000000000007BE0                 push    r13
.text:0000000000007BE2                 push    r12
.text:0000000000007BE4                 lea     r12, [rdi+800h]
.text:0000000000007BEB                 push    rbp
.text:0000000000007BEC                 mov     rdx, rdi
.text:0000000000007BEF                 push    rbx
.text:0000000000007BF0                 mov     rax, rdi
.text:0000000000007BF3                 mov     rcx, 98F5704F6C44C0ABh
.text:0000000000007BFD                 mov     r10, 0AE985BF2CBFC89EDh
.text:0000000000007C07                 mov     rbp, 48FE4A0FA5A09315h
.text:0000000000007C11                 mov     rsi, 82F053DB8355E0CEh
.text:0000000000007C1B                 mov     r8, 0B29B2E824A595524h
.text:0000000000007C25                 mov     rbx, 8C0EA5053D4712A0h
.text:0000000000007C2F                 mov     r11, 0B9F8B322C73AC862h
.text:0000000000007C39                 mov     r9, 647C4677A2884B7Ch
.text:0000000000007C43                 nop     dword ptr [rax+rax+00h]
.text:0000000000007C48
.text:0000000000007C48 loc_7C48:                               ; CODE XREF: isaac_seed+13A↓j
.text:0000000000007C48                 add     rsi, [rax+20h]
.text:0000000000007C4C                 add     rcx, [rax+38h]
.text:0000000000007C50                 mov     r13, [rax]
.text:0000000000007C53                 add     rbp, [rax+28h]
.text:0000000000007C57                 add     r10, [rax+30h]
.text:0000000000007C5B                 sub     r13, rsi
.text:0000000000007C5E                 add     r9, r13
.text:0000000000007C61                 mov     r13, rcx
.text:0000000000007C64                 shr     r13, 9
.text:0000000000007C68                 add     rcx, r9
.text:0000000000007C6B                 xor     rbp, r13
.text:0000000000007C6E                 mov     r13, [rax+8]
.text:0000000000007C72                 sub     r13, rbp
.text:0000000000007C75                 add     r11, r13
.text:0000000000007C78                 mov     r13, r9
.text:0000000000007C7B                 shl     r13, 9
.text:0000000000007C7F                 add     r9, r11
.text:0000000000007C82                 xor     r10, r13
.text:0000000000007C85                 mov     r13, [rax+10h]
.text:0000000000007C89                 sub     r13, r10
.text:0000000000007C8C                 add     rbx, r13
.text:0000000000007C8F                 mov     r13, r11
.text:0000000000007C92                 shr     r13, 17h
.text:0000000000007C96                 add     r11, rbx
.text:0000000000007C99                 xor     rcx, r13
.text:0000000000007C9C                 mov     r13, [rax+18h]
.text:0000000000007CA0                 sub     r13, rcx
.text:0000000000007CA3                 add     r8, r13
.text:0000000000007CA6                 mov     r13, rbx
.text:0000000000007CA9                 shl     r13, 0Fh
.text:0000000000007CAD                 add     rbx, r8
.text:0000000000007CB0                 xor     r9, r13
.text:0000000000007CB3                 mov     r13, r8
.text:0000000000007CB6                 sub     rsi, r9
.text:0000000000007CB9                 shr     r13, 0Eh
.text:0000000000007CBD                 mov     [rax], r9
.text:0000000000007CC0                 xor     r11, r13
.text:0000000000007CC3                 mov     r13, rsi
.text:0000000000007CC6                 add     r8, rsi
.text:0000000000007CC9                 sub     rbp, r11
.text:0000000000007CCC                 shl     r13, 14h
.text:0000000000007CD0                 mov     [rax+8], r11
.text:0000000000007CD4                 xor     rbx, r13
.text:0000000000007CD7                 lea     r13, [rsi+rbp]
.text:0000000000007CDB                 mov     rsi, rbp
.text:0000000000007CDE                 sub     r10, rbx
.text:0000000000007CE1                 shr     rsi, 11h
.text:0000000000007CE5                 mov     [rax+10h], rbx
.text:0000000000007CE9                 xor     r8, rsi
.text:0000000000007CEC                 mov     rsi, r10
.text:0000000000007CEF                 add     rbp, r10
.text:0000000000007CF2                 sub     rcx, r8
.text:0000000000007CF5                 shl     rsi, 0Eh
.text:0000000000007CF9                 mov     [rax+18h], r8
.text:0000000000007CFD                 xor     rsi, r13
.text:0000000000007D00                 add     r10, rcx
.text:0000000000007D03                 mov     [rax+28h], rbp
.text:0000000000007D07                 mov     [rax+20h], rsi
.text:0000000000007D0B                 mov     [rax+30h], r10
.text:0000000000007D0F                 add     rax, 40h ; '@'
.text:0000000000007D13                 mov     [rax-8], rcx
.text:0000000000007D17                 cmp     r12, rax
.text:0000000000007D1A                 jnz     loc_7C48
.text:0000000000007D20
.text:0000000000007D20 loc_7D20:                               ; CODE XREF: isaac_seed+212↓j
.text:0000000000007D20                 add     rsi, [rdx+20h]
.text:0000000000007D24                 add     rcx, [rdx+38h]
.text:0000000000007D28                 mov     r12, [rdx]
.text:0000000000007D2B                 add     rbp, [rdx+28h]
.text:0000000000007D2F                 add     r10, [rdx+30h]
.text:0000000000007D33                 sub     r12, rsi
.text:0000000000007D36                 add     r9, r12
.text:0000000000007D39                 mov     r12, rcx
.text:0000000000007D3C                 shr     r12, 9
.text:0000000000007D40                 add     rcx, r9
.text:0000000000007D43                 xor     rbp, r12
.text:0000000000007D46                 mov     r12, [rdx+8]
.text:0000000000007D4A                 sub     r12, rbp
.text:0000000000007D4D                 add     r11, r12
.text:0000000000007D50                 mov     r12, r9
.text:0000000000007D53                 shl     r12, 9
.text:0000000000007D57                 add     r9, r11
.text:0000000000007D5A                 xor     r10, r12
.text:0000000000007D5D                 mov     r12, [rdx+10h]
.text:0000000000007D61                 sub     r12, r10
.text:0000000000007D64                 add     rbx, r12
.text:0000000000007D67                 mov     r12, r11
.text:0000000000007D6A                 shr     r12, 17h
.text:0000000000007D6E                 add     r11, rbx
.text:0000000000007D71                 xor     rcx, r12
.text:0000000000007D74                 mov     r12, [rdx+18h]
.text:0000000000007D78                 sub     r12, rcx
.text:0000000000007D7B                 add     r8, r12
.text:0000000000007D7E                 mov     r12, rbx
.text:0000000000007D81                 shl     r12, 0Fh
.text:0000000000007D85                 add     rbx, r8
.text:0000000000007D88                 xor     r9, r12
.text:0000000000007D8B                 mov     r12, r8
.text:0000000000007D8E                 sub     rsi, r9
.text:0000000000007D91                 shr     r12, 0Eh
.text:0000000000007D95                 mov     [rdx], r9
.text:0000000000007D98                 xor     r11, r12
.text:0000000000007D9B                 mov     r12, rsi
.text:0000000000007D9E                 add     r8, rsi
.text:0000000000007DA1                 sub     rbp, r11
.text:0000000000007DA4                 shl     r12, 14h
.text:0000000000007DA8                 mov     [rdx+8], r11
.text:0000000000007DAC                 xor     rbx, r12
.text:0000000000007DAF                 lea     r12, [rsi+rbp]
.text:0000000000007DB3                 mov     rsi, rbp
.text:0000000000007DB6                 sub     r10, rbx
.text:0000000000007DB9                 shr     rsi, 11h
.text:0000000000007DBD                 mov     [rdx+10h], rbx
.text:0000000000007DC1                 xor     r8, rsi
.text:0000000000007DC4                 mov     rsi, r10
.text:0000000000007DC7                 add     rbp, r10
.text:0000000000007DCA                 sub     rcx, r8
.text:0000000000007DCD                 shl     rsi, 0Eh
.text:0000000000007DD1                 mov     [rdx+18h], r8
.text:0000000000007DD5                 xor     rsi, r12
.text:0000000000007DD8                 add     r10, rcx
.text:0000000000007DDB                 mov     [rdx+28h], rbp
.text:0000000000007DDF                 mov     [rdx+20h], rsi
.text:0000000000007DE3                 mov     [rdx+30h], r10
.text:0000000000007DE7                 add     rdx, 40h ; '@'
.text:0000000000007DEB                 mov     [rdx-8], rcx
.text:0000000000007DEF                 cmp     rax, rdx
.text:0000000000007DF2                 jnz     loc_7D20
.text:0000000000007DF8                 pop     rbx
.text:0000000000007DF9                 mov     qword ptr [rdi+810h], 0
.text:0000000000007E04                 mov     qword ptr [rdi+808h], 0
.text:0000000000007E0F                 pop     rbp
.text:0000000000007E10                 mov     qword ptr [rdi+800h], 0
.text:0000000000007E1B                 pop     r12
.text:0000000000007E1D                 pop     r13
.text:0000000000007E1F                 retn
.text:0000000000007E1F ; } // starts at 7BE0
.text:0000000000007E1F isaac_seed      endp
.text:0000000000007E1F
.text:0000000000007E20
.text:0000000000007E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E20
.text:0000000000007E20 ; Attributes: info_from_lumina
.text:0000000000007E20
.text:0000000000007E20                 public renameat2
.text:0000000000007E20 renameat2       proc near               ; CODE XREF: main+61F↑p
.text:0000000000007E20
.text:0000000000007E20 oldfd           = dword ptr -174h
.text:0000000000007E20 var_170         = qword ptr -170h
.text:0000000000007E20 stat_buf        = stat ptr -168h
.text:0000000000007E20 var_D8          = stat ptr -0D8h
.text:0000000000007E20 var_40          = qword ptr -40h
.text:0000000000007E20
.text:0000000000007E20 ; __unwind {
.text:0000000000007E20                 push    r15
.text:0000000000007E22                 push    r14
.text:0000000000007E24                 mov     r9d, r8d
.text:0000000000007E27                 push    r13
.text:0000000000007E29                 push    r12
.text:0000000000007E2B                 mov     r14d, edx
.text:0000000000007E2E                 push    rbp
.text:0000000000007E2F                 push    rbx
.text:0000000000007E30                 mov     r12, rsi
.text:0000000000007E33                 mov     r13, rcx
.text:0000000000007E36                 mov     ebp, r8d
.text:0000000000007E39                 mov     r8, rcx
.text:0000000000007E3C                 sub     rsp, 148h
.text:0000000000007E43                 mov     ecx, edx
.text:0000000000007E45                 mov     rdx, rsi
.text:0000000000007E48                 mov     rax, fs:28h
.text:0000000000007E51                 mov     [rsp+178h+var_40], rax
.text:0000000000007E59                 xor     eax, eax
.text:0000000000007E5B                 mov     esi, edi
.text:0000000000007E5D                 mov     [rsp+178h+oldfd], edi
.text:0000000000007E61                 mov     edi, 13Ch       ; sysno
.text:0000000000007E66                 call    _syscall
.text:0000000000007E6B                 mov     rbx, rax
.text:0000000000007E6E                 mov     r15d, eax
.text:0000000000007E71                 call    ___errno_location
.text:0000000000007E76                 test    ebx, ebx
.text:0000000000007E78                 js      short loc_7EB0
.text:0000000000007E7A
.text:0000000000007E7A loc_7E7A:                               ; CODE XREF: renameat2+A6↓j
.text:0000000000007E7A                                         ; renameat2+F8↓j ...
.text:0000000000007E7A                 mov     rdx, [rsp+178h+var_40]
.text:0000000000007E82                 xor     rdx, fs:28h
.text:0000000000007E8B                 mov     eax, r15d
.text:0000000000007E8E                 jnz     loc_8085
.text:0000000000007E94                 add     rsp, 148h
.text:0000000000007E9B                 pop     rbx
.text:0000000000007E9C                 pop     rbp
.text:0000000000007E9D                 pop     r12
.text:0000000000007E9F                 pop     r13
.text:0000000000007EA1                 pop     r14
.text:0000000000007EA3                 pop     r15
.text:0000000000007EA5                 retn
.text:0000000000007EA5 ; ---------------------------------------------------------------------------
.text:0000000000007EA6                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: renameat2+58↑j
.text:0000000000007EB0                 mov     r9, rax
.text:0000000000007EB3                 mov     eax, [rax]
.text:0000000000007EB5                 lea     ecx, [rax-16h]
.text:0000000000007EB8                 and     ecx, 0FFFFFFEFh
.text:0000000000007EBB                 setnz   bl
.text:0000000000007EBE                 cmp     eax, 5Fh ; '_'
.text:0000000000007EC1                 setnz   al
.text:0000000000007EC4                 and     bl, al
.text:0000000000007EC6                 jnz     short loc_7E7A
.text:0000000000007EC8                 test    ebp, ebp
.text:0000000000007ECA                 jnz     short loc_7F20
.text:0000000000007ECC
.text:0000000000007ECC loc_7ECC:                               ; CODE XREF: renameat2+21D↓j
.text:0000000000007ECC                 mov     rdi, r12        ; s
.text:0000000000007ECF                 mov     [rsp+178h+var_170], r9
.text:0000000000007ED4                 call    _strlen
.text:0000000000007ED9                 mov     rdi, r13        ; s
.text:0000000000007EDC                 mov     rbp, rax
.text:0000000000007EDF                 call    _strlen
.text:0000000000007EE4                 test    rbp, rbp
.text:0000000000007EE7                 jz      short loc_7F03
.text:0000000000007EE9                 test    rax, rax
.text:0000000000007EEC                 mov     r9, [rsp+178h+var_170]
.text:0000000000007EF1                 jz      short loc_7F03
.text:0000000000007EF3                 cmp     byte ptr [r12+rbp-1], 2Fh ; '/'
.text:0000000000007EF9                 jz      short loc_7F40
.text:0000000000007EFB                 cmp     byte ptr [r13+rax-1], 2Fh ; '/'
.text:0000000000007F01                 jz      short loc_7F40
.text:0000000000007F03
.text:0000000000007F03 loc_7F03:                               ; CODE XREF: renameat2+C7↑j
.text:0000000000007F03                                         ; renameat2+D1↑j ...
.text:0000000000007F03                 mov     edi, [rsp+178h+oldfd] ; oldfd
.text:0000000000007F07                 mov     rcx, r13        ; new
.text:0000000000007F0A                 mov     edx, r14d       ; newfd
.text:0000000000007F0D                 mov     rsi, r12        ; old
.text:0000000000007F10                 call    _renameat
.text:0000000000007F15                 mov     r15d, eax
.text:0000000000007F18                 jmp     loc_7E7A
.text:0000000000007F18 ; ---------------------------------------------------------------------------
.text:0000000000007F1D                 align 20h
.text:0000000000007F20
.text:0000000000007F20 loc_7F20:                               ; CODE XREF: renameat2+AA↑j
.text:0000000000007F20                 and     ebp, 0FFFFFFFEh
.text:0000000000007F23                 jz      short loc_7F90
.text:0000000000007F25                 mov     dword ptr [r9], 5Fh ; '_'
.text:0000000000007F2C                 mov     r15d, 0FFFFFFFFh
.text:0000000000007F32                 jmp     loc_7E7A
.text:0000000000007F32 ; ---------------------------------------------------------------------------
.text:0000000000007F37                 align 20h
.text:0000000000007F40
.text:0000000000007F40 loc_7F40:                               ; CODE XREF: renameat2+D9↑j
.text:0000000000007F40                                         ; renameat2+E1↑j
.text:0000000000007F40                 mov     esi, [rsp+178h+oldfd] ; fildes
.text:0000000000007F44                 lea     rcx, [rsp+178h+stat_buf] ; stat_buf
.text:0000000000007F49                 mov     r8d, 100h       ; flag
.text:0000000000007F4F                 mov     rdx, r12        ; filename
.text:0000000000007F52                 mov     edi, 1          ; ver
.text:0000000000007F57                 mov     [rsp+178h+var_170], r9
.text:0000000000007F5C                 call    ___fxstatat
.text:0000000000007F61                 test    eax, eax
.text:0000000000007F63                 jnz     short loc_7FC9
.text:0000000000007F65                 test    bl, bl
.text:0000000000007F67                 mov     r9, [rsp+178h+var_170]
.text:0000000000007F6C                 jz      short loc_7FEA
.text:0000000000007F6E                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:0000000000007F72                 and     eax, 0F000h
.text:0000000000007F77                 cmp     eax, 4000h
.text:0000000000007F7C                 jz      short loc_7F03
.text:0000000000007F7E                 mov     dword ptr [r9], 2
.text:0000000000007F85                 mov     r15d, 0FFFFFFFFh
.text:0000000000007F8B                 jmp     loc_7E7A
.text:0000000000007F90 ; ---------------------------------------------------------------------------
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: renameat2+103↑j
.text:0000000000007F90                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:0000000000007F98                 mov     r8d, 100h       ; flag
.text:0000000000007F9E                 mov     rdx, r13        ; filename
.text:0000000000007FA1                 mov     esi, r14d       ; fildes
.text:0000000000007FA4                 mov     edi, 1          ; ver
.text:0000000000007FA9                 mov     [rsp+178h+var_170], r9
.text:0000000000007FAE                 call    ___fxstatat
.text:0000000000007FB3                 test    eax, eax
.text:0000000000007FB5                 mov     r9, [rsp+178h+var_170]
.text:0000000000007FBA                 jz      short loc_7FD8
.text:0000000000007FBC                 mov     eax, [r9]
.text:0000000000007FBF                 cmp     eax, 4Bh ; 'K'
.text:0000000000007FC2                 jz      short loc_7FD8
.text:0000000000007FC4                 cmp     eax, 2
.text:0000000000007FC7                 jz      short loc_8038
.text:0000000000007FC9
.text:0000000000007FC9 loc_7FC9:                               ; CODE XREF: renameat2+143↑j
.text:0000000000007FC9                                         ; renameat2+1FA↓j ...
.text:0000000000007FC9                 mov     r15d, 0FFFFFFFFh
.text:0000000000007FCF                 jmp     loc_7E7A
.text:0000000000007FCF ; ---------------------------------------------------------------------------
.text:0000000000007FD4                 align 8
.text:0000000000007FD8
.text:0000000000007FD8 loc_7FD8:                               ; CODE XREF: renameat2+19A↑j
.text:0000000000007FD8                                         ; renameat2+1A2↑j
.text:0000000000007FD8                 mov     dword ptr [r9], 11h
.text:0000000000007FDF                 mov     r15d, 0FFFFFFFFh
.text:0000000000007FE5                 jmp     loc_7E7A
.text:0000000000007FEA ; ---------------------------------------------------------------------------
.text:0000000000007FEA
.text:0000000000007FEA loc_7FEA:                               ; CODE XREF: renameat2+14C↑j
.text:0000000000007FEA                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:0000000000007FF2                 mov     r8d, 100h       ; flag
.text:0000000000007FF8                 mov     rdx, r13        ; filename
.text:0000000000007FFB                 mov     esi, r14d       ; fildes
.text:0000000000007FFE                 mov     edi, 1          ; ver
.text:0000000000008003                 mov     [rsp+178h+var_170], r9
.text:0000000000008008                 call    ___fxstatat
.text:000000000000800D                 test    eax, eax
.text:000000000000800F                 mov     r9, [rsp+178h+var_170]
.text:0000000000008014                 jz      short loc_8042
.text:0000000000008016                 cmp     dword ptr [r9], 2
.text:000000000000801A                 jnz     short loc_7FC9
.text:000000000000801C                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:0000000000008020                 and     eax, 0F000h
.text:0000000000008025                 cmp     eax, 4000h
.text:000000000000802A                 jnz     short loc_7FC9
.text:000000000000802C                 jmp     loc_7F03
.text:000000000000802C ; ---------------------------------------------------------------------------
.text:0000000000008031                 align 8
.text:0000000000008038
.text:0000000000008038 loc_8038:                               ; CODE XREF: renameat2+1A7↑j
.text:0000000000008038                 mov     ebx, 1
.text:000000000000803D                 jmp     loc_7ECC
.text:0000000000008042 ; ---------------------------------------------------------------------------
.text:0000000000008042
.text:0000000000008042 loc_8042:                               ; CODE XREF: renameat2+1F4↑j
.text:0000000000008042                 mov     eax, [rsp+178h+var_D8.st_mode]
.text:0000000000008049                 and     eax, 0F000h
.text:000000000000804E                 cmp     eax, 4000h
.text:0000000000008053                 jz      short loc_8061
.text:0000000000008055                 mov     dword ptr [r9], 14h
.text:000000000000805C                 jmp     loc_7FC9
.text:0000000000008061 ; ---------------------------------------------------------------------------
.text:0000000000008061
.text:0000000000008061 loc_8061:                               ; CODE XREF: renameat2+233↑j
.text:0000000000008061                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:0000000000008065                 and     eax, 0F000h
.text:000000000000806A                 cmp     eax, 4000h
.text:000000000000806F                 jz      loc_7F03
.text:0000000000008075                 mov     dword ptr [r9], 15h
.text:000000000000807C                 or      r15d, 0FFFFFFFFh
.text:0000000000008080                 jmp     loc_7E7A
.text:0000000000008085 ; ---------------------------------------------------------------------------
.text:0000000000008085
.text:0000000000008085 loc_8085:                               ; CODE XREF: renameat2+6E↑j
.text:0000000000008085                 call    ___stack_chk_fail
.text:0000000000008085 ; } // starts at 7E20
.text:0000000000008085 renameat2       endp
.text:0000000000008085
.text:0000000000008085 ; ---------------------------------------------------------------------------
.text:000000000000808A                 align 10h
.text:0000000000008090
.text:0000000000008090 ; =============== S U B R O U T I N E =======================================
.text:0000000000008090
.text:0000000000008090 ; Attributes: info_from_lumina
.text:0000000000008090
.text:0000000000008090 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000008090                 public fd_safer_flag
.text:0000000000008090 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000008090 ; __unwind {
.text:0000000000008090                 push    r13
.text:0000000000008092                 push    r12
.text:0000000000008094                 push    rbp
.text:0000000000008095                 push    rbx
.text:0000000000008096                 mov     ebx, edi
.text:0000000000008098                 sub     rsp, 8
.text:000000000000809C                 cmp     edi, 2
.text:000000000000809F                 ja      short loc_80C2
.text:00000000000080A1                 call    dup_safer
.text:00000000000080A6                 mov     r12d, eax
.text:00000000000080A9                 call    ___errno_location
.text:00000000000080AE                 mov     r13d, [rax]
.text:00000000000080B1                 mov     rbp, rax
.text:00000000000080B4                 mov     edi, ebx        ; fd
.text:00000000000080B6                 call    _close
.text:00000000000080BB                 mov     ebx, r12d
.text:00000000000080BE                 mov     [rbp+0], r13d
.text:00000000000080C2
.text:00000000000080C2 loc_80C2:                               ; CODE XREF: fd_safer_flag+F↑j
.text:00000000000080C2                 add     rsp, 8
.text:00000000000080C6                 mov     eax, ebx
.text:00000000000080C8                 pop     rbx
.text:00000000000080C9                 pop     rbp
.text:00000000000080CA                 pop     r12
.text:00000000000080CC                 pop     r13
.text:00000000000080CE                 retn
.text:00000000000080CE ; } // starts at 8090
.text:00000000000080CE fd_safer_flag   endp
.text:00000000000080CE
.text:00000000000080CE ; ---------------------------------------------------------------------------
.text:00000000000080CF                 align 10h
.text:00000000000080D0
.text:00000000000080D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080D0
.text:00000000000080D0
.text:00000000000080D0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000080D0                 public version_etc_arn
.text:00000000000080D0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_850B↓j
.text:00000000000080D0                                         ; version_etc_va:loc_855B↓p ...
.text:00000000000080D0
.text:00000000000080D0 var_58          = qword ptr -58h
.text:00000000000080D0 var_50          = qword ptr -50h
.text:00000000000080D0 var_48          = qword ptr -48h
.text:00000000000080D0 var_40          = qword ptr -40h
.text:00000000000080D0
.text:00000000000080D0 ; __unwind {
.text:00000000000080D0                 push    r15
.text:00000000000080D2                 push    r14
.text:00000000000080D4                 push    r13
.text:00000000000080D6                 push    r12
.text:00000000000080D8                 mov     r12, r9
.text:00000000000080DB                 push    rbp
.text:00000000000080DC                 push    rbx
.text:00000000000080DD                 mov     rbp, rdi
.text:00000000000080E0                 mov     rbx, r8
.text:00000000000080E3                 sub     rsp, 28h
.text:00000000000080E7                 test    rsi, rsi
.text:00000000000080EA                 jz      loc_8208
.text:00000000000080F0                 mov     r8, rdx
.text:00000000000080F3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000080FA                 mov     r9, rcx
.text:00000000000080FD                 xor     eax, eax
.text:00000000000080FF                 mov     rcx, rsi
.text:0000000000008102                 mov     esi, 1
.text:0000000000008107                 call    ___fprintf_chk
.text:000000000000810C
.text:000000000000810C loc_810C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000810C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000008113                 xor     edi, edi        ; domainname
.text:0000000000008115                 mov     edx, 5          ; category
.text:000000000000811A                 call    _dcgettext
.text:000000000000811F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000008126                 mov     rcx, rax
.text:0000000000008129                 mov     r8d, 7E3h
.text:000000000000812F                 mov     esi, 1
.text:0000000000008134                 mov     rdi, rbp
.text:0000000000008137                 xor     eax, eax
.text:0000000000008139                 call    ___fprintf_chk
.text:000000000000813E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000008145                 xor     edi, edi        ; domainname
.text:0000000000008147                 mov     edx, 5          ; category
.text:000000000000814C                 call    _dcgettext
.text:0000000000008151                 mov     rsi, rbp        ; stream
.text:0000000000008154                 mov     rdi, rax        ; s
.text:0000000000008157                 call    _fputs_unlocked
.text:000000000000815C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000008160                 ja      def_8174        ; jumptable 0000000000008174 default case
.text:0000000000008166                 lea     rdx, jpt_8174
.text:000000000000816D                 movsxd  rax, ds:(jpt_8174 - 0B04Ch)[rdx+r12*4]
.text:0000000000008171                 add     rax, rdx
.text:0000000000008174                 jmp     rax             ; switch jump
.text:0000000000008174 ; ---------------------------------------------------------------------------
.text:0000000000008176                 align 20h
.text:0000000000008180
.text:0000000000008180 loc_8180:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008180                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:0000000000008180                 mov     r9, [rbx+38h]   ; jumptable 0000000000008174 case 8
.text:0000000000008184                 mov     rax, [rbx+10h]
.text:0000000000008188                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000818F                 mov     r8, [rbx+8]
.text:0000000000008193                 mov     edx, 5          ; category
.text:0000000000008198                 xor     edi, edi        ; domainname
.text:000000000000819A                 mov     r13, [rbx+30h]
.text:000000000000819E                 mov     r12, [rbx+28h]
.text:00000000000081A2                 mov     [rsp+58h+var_48], r9
.text:00000000000081A7                 mov     r15, [rbx+20h]
.text:00000000000081AB                 mov     r14, [rbx+18h]
.text:00000000000081AF                 mov     [rsp+58h+var_58], rax
.text:00000000000081B3                 mov     [rsp+58h+var_50], r8
.text:00000000000081B8                 mov     rbx, [rbx]
.text:00000000000081BB                 call    _dcgettext
.text:00000000000081C0                 sub     rsp, 8
.text:00000000000081C4
.text:00000000000081C4 loc_81C4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000081C4                 mov     r9, [rsp+60h+var_48]
.text:00000000000081C9                 mov     rdx, rax
.text:00000000000081CC                 mov     rcx, rbx
.text:00000000000081CF                 mov     esi, 1
.text:00000000000081D4                 mov     rdi, rbp
.text:00000000000081D7                 xor     eax, eax
.text:00000000000081D9                 push    r9
.text:00000000000081DB                 push    r13
.text:00000000000081DD                 push    r12
.text:00000000000081DF                 push    r15
.text:00000000000081E1                 push    r14
.text:00000000000081E3                 mov     r9, [rsp+88h+var_58]
.text:00000000000081E8                 mov     r8, [rsp+88h+var_50]
.text:00000000000081ED                 call    ___fprintf_chk
.text:00000000000081F2                 add     rsp, 30h
.text:00000000000081F6
.text:00000000000081F6 loc_81F6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000081F6                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:00000000000081F6                 add     rsp, 28h        ; jumptable 0000000000008174 case 0
.text:00000000000081FA                 pop     rbx
.text:00000000000081FB                 pop     rbp
.text:00000000000081FC                 pop     r12
.text:00000000000081FE                 pop     r13
.text:0000000000008200                 pop     r14
.text:0000000000008202                 pop     r15
.text:0000000000008204                 retn
.text:0000000000008204 ; ---------------------------------------------------------------------------
.text:0000000000008205                 align 8
.text:0000000000008208
.text:0000000000008208 loc_8208:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000008208                 mov     r8, rcx
.text:000000000000820B                 mov     rcx, rdx
.text:000000000000820E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000008215                 mov     esi, 1
.text:000000000000821A                 xor     eax, eax
.text:000000000000821C                 call    ___fprintf_chk
.text:0000000000008221                 jmp     loc_810C
.text:0000000000008221 ; ---------------------------------------------------------------------------
.text:0000000000008226                 align 10h
.text:0000000000008230
.text:0000000000008230 loc_8230:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008230                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:0000000000008230                 mov     r10, [rbx+40h]  ; jumptable 0000000000008174 case 9
.text:0000000000008234                 mov     r9, [rbx+38h]
.text:0000000000008238                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000823F                 mov     rax, [rbx+10h]
.text:0000000000008243                 mov     r8, [rbx+8]
.text:0000000000008247                 mov     edx, 5          ; category
.text:000000000000824C                 mov     r13, [rbx+30h]
.text:0000000000008250                 mov     r12, [rbx+28h]
.text:0000000000008254                 mov     r15, [rbx+20h]
.text:0000000000008258                 mov     r14, [rbx+18h]
.text:000000000000825C                 mov     rbx, [rbx]
.text:000000000000825F                 mov     [rsp+58h+var_40], r10
.text:0000000000008264                 mov     [rsp+58h+var_48], r9
.text:0000000000008269                 mov     [rsp+58h+var_58], rax
.text:000000000000826D                 mov     [rsp+58h+var_50], r8
.text:0000000000008272
.text:0000000000008272 loc_8272:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000008272                 xor     edi, edi        ; domainname
.text:0000000000008274                 call    _dcgettext
.text:0000000000008279                 mov     r10, [rsp+58h+var_40]
.text:000000000000827E                 push    r10
.text:0000000000008280                 jmp     loc_81C4
.text:0000000000008280 ; ---------------------------------------------------------------------------
.text:0000000000008285                 align 8
.text:0000000000008288
.text:0000000000008288 loc_8288:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008288                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:0000000000008288                 mov     rbx, [rbx]      ; jumptable 0000000000008174 case 1
.text:000000000000828B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000008292                 mov     edx, 5          ; category
.text:0000000000008297                 xor     edi, edi        ; domainname
.text:0000000000008299                 call    _dcgettext
.text:000000000000829E                 add     rsp, 28h
.text:00000000000082A2                 mov     rcx, rbx
.text:00000000000082A5                 mov     rdi, rbp
.text:00000000000082A8                 pop     rbx
.text:00000000000082A9                 pop     rbp
.text:00000000000082AA                 pop     r12
.text:00000000000082AC                 pop     r13
.text:00000000000082AE                 pop     r14
.text:00000000000082B0                 pop     r15
.text:00000000000082B2                 mov     rdx, rax
.text:00000000000082B5                 mov     esi, 1
.text:00000000000082BA                 xor     eax, eax
.text:00000000000082BC                 jmp     ___fprintf_chk
.text:00000000000082BC ; ---------------------------------------------------------------------------
.text:00000000000082C1                 align 8
.text:00000000000082C8
.text:00000000000082C8 loc_82C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000082C8                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:00000000000082C8                 mov     r12, [rbx+8]    ; jumptable 0000000000008174 case 2
.text:00000000000082CC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000082D3                 mov     rbx, [rbx]
.text:00000000000082D6                 mov     edx, 5          ; category
.text:00000000000082DB                 xor     edi, edi        ; domainname
.text:00000000000082DD                 call    _dcgettext
.text:00000000000082E2                 add     rsp, 28h
.text:00000000000082E6                 mov     r8, r12
.text:00000000000082E9                 mov     rcx, rbx
.text:00000000000082EC                 mov     rdi, rbp
.text:00000000000082EF                 mov     rdx, rax
.text:00000000000082F2                 mov     esi, 1
.text:00000000000082F7                 pop     rbx
.text:00000000000082F8                 pop     rbp
.text:00000000000082F9                 pop     r12
.text:00000000000082FB                 pop     r13
.text:00000000000082FD                 pop     r14
.text:00000000000082FF                 pop     r15
.text:0000000000008301                 xor     eax, eax
.text:0000000000008303                 jmp     ___fprintf_chk
.text:0000000000008303 ; ---------------------------------------------------------------------------
.text:0000000000008308                 align 10h
.text:0000000000008310
.text:0000000000008310 loc_8310:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008310                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:0000000000008310                 mov     r13, [rbx+10h]  ; jumptable 0000000000008174 case 3
.text:0000000000008314                 mov     r12, [rbx+8]
.text:0000000000008318                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000831F                 mov     rbx, [rbx]
.text:0000000000008322                 mov     edx, 5          ; category
.text:0000000000008327                 xor     edi, edi        ; domainname
.text:0000000000008329                 call    _dcgettext
.text:000000000000832E                 add     rsp, 28h
.text:0000000000008332                 mov     r9, r13
.text:0000000000008335                 mov     r8, r12
.text:0000000000008338                 mov     rcx, rbx
.text:000000000000833B                 mov     rdi, rbp
.text:000000000000833E                 mov     rdx, rax
.text:0000000000008341                 pop     rbx
.text:0000000000008342                 pop     rbp
.text:0000000000008343                 pop     r12
.text:0000000000008345                 pop     r13
.text:0000000000008347                 pop     r14
.text:0000000000008349                 pop     r15
.text:000000000000834B                 mov     esi, 1
.text:0000000000008350                 xor     eax, eax
.text:0000000000008352                 jmp     ___fprintf_chk
.text:0000000000008352 ; ---------------------------------------------------------------------------
.text:0000000000008357                 align 20h
.text:0000000000008360
.text:0000000000008360 loc_8360:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008360                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:0000000000008360                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000008174 case 4
.text:0000000000008367                 mov     edx, 5          ; category
.text:000000000000836C                 xor     edi, edi        ; domainname
.text:000000000000836E                 mov     r14, [rbx+18h]
.text:0000000000008372                 mov     r13, [rbx+10h]
.text:0000000000008376                 mov     r12, [rbx+8]
.text:000000000000837A                 mov     rbx, [rbx]
.text:000000000000837D                 call    _dcgettext
.text:0000000000008382                 sub     rsp, 8
.text:0000000000008386
.text:0000000000008386 loc_8386:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000008386                 push    r14
.text:0000000000008388                 mov     rdx, rax
.text:000000000000838B                 mov     r9, r13
.text:000000000000838E                 mov     r8, r12
.text:0000000000008391                 mov     rcx, rbx
.text:0000000000008394                 mov     rdi, rbp
.text:0000000000008397                 mov     esi, 1
.text:000000000000839C                 xor     eax, eax
.text:000000000000839E                 call    ___fprintf_chk
.text:00000000000083A3                 pop     rax
.text:00000000000083A4                 pop     rdx
.text:00000000000083A5                 add     rsp, 28h
.text:00000000000083A9                 pop     rbx
.text:00000000000083AA                 pop     rbp
.text:00000000000083AB                 pop     r12
.text:00000000000083AD                 pop     r13
.text:00000000000083AF                 pop     r14
.text:00000000000083B1                 pop     r15
.text:00000000000083B3                 retn
.text:00000000000083B3 ; ---------------------------------------------------------------------------
.text:00000000000083B4                 align 8
.text:00000000000083B8
.text:00000000000083B8 loc_83B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000083B8                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:00000000000083B8                 mov     r15, [rbx+20h]  ; jumptable 0000000000008174 case 5
.text:00000000000083BC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000083C3                 mov     edx, 5          ; category
.text:00000000000083C8                 xor     edi, edi        ; domainname
.text:00000000000083CA                 mov     r14, [rbx+18h]
.text:00000000000083CE                 mov     r13, [rbx+10h]
.text:00000000000083D2                 mov     r12, [rbx+8]
.text:00000000000083D6                 mov     rbx, [rbx]
.text:00000000000083D9                 call    _dcgettext
.text:00000000000083DE                 push    r15
.text:00000000000083E0                 jmp     short loc_8386
.text:00000000000083E0 ; ---------------------------------------------------------------------------
.text:00000000000083E2                 align 8
.text:00000000000083E8
.text:00000000000083E8 loc_83E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000083E8                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:00000000000083E8                 mov     r8, [rbx+8]     ; jumptable 0000000000008174 case 6
.text:00000000000083EC                 mov     r12, [rbx+28h]
.text:00000000000083F0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000083F7                 mov     r15, [rbx+20h]
.text:00000000000083FB                 mov     r14, [rbx+18h]
.text:00000000000083FF                 mov     edx, 5          ; category
.text:0000000000008404                 mov     r13, [rbx+10h]
.text:0000000000008408                 xor     edi, edi        ; domainname
.text:000000000000840A                 mov     rbx, [rbx]
.text:000000000000840D                 mov     [rsp+58h+var_58], r8
.text:0000000000008411                 call    _dcgettext
.text:0000000000008416                 sub     rsp, 8
.text:000000000000841A                 mov     r9, r13
.text:000000000000841D                 push    r12
.text:000000000000841F                 push    r15
.text:0000000000008421                 push    r14
.text:0000000000008423
.text:0000000000008423 loc_8423:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000008423                 mov     r8, [rsp+78h+var_58]
.text:0000000000008428                 mov     rcx, rbx
.text:000000000000842B                 mov     rdx, rax
.text:000000000000842E                 mov     rdi, rbp
.text:0000000000008431                 mov     esi, 1
.text:0000000000008436                 xor     eax, eax
.text:0000000000008438                 call    ___fprintf_chk
.text:000000000000843D                 add     rsp, 20h
.text:0000000000008441                 add     rsp, 28h
.text:0000000000008445                 pop     rbx
.text:0000000000008446                 pop     rbp
.text:0000000000008447                 pop     r12
.text:0000000000008449                 pop     r13
.text:000000000000844B                 pop     r14
.text:000000000000844D                 pop     r15
.text:000000000000844F                 retn
.text:0000000000008450 ; ---------------------------------------------------------------------------
.text:0000000000008450
.text:0000000000008450 loc_8450:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008450                                         ; DATA XREF: .rodata:jpt_8174↓o
.text:0000000000008450                 mov     r9, [rbx+10h]   ; jumptable 0000000000008174 case 7
.text:0000000000008454                 mov     r13, [rbx+30h]
.text:0000000000008458                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000845F                 mov     r12, [rbx+28h]
.text:0000000000008463                 mov     r15, [rbx+20h]
.text:0000000000008467                 mov     edx, 5          ; category
.text:000000000000846C                 mov     r14, [rbx+18h]
.text:0000000000008470                 mov     r8, [rbx+8]
.text:0000000000008474                 xor     edi, edi        ; domainname
.text:0000000000008476                 mov     [rsp+58h+var_50], r9
.text:000000000000847B                 mov     rbx, [rbx]
.text:000000000000847E                 mov     [rsp+58h+var_58], r8
.text:0000000000008482                 call    _dcgettext
.text:0000000000008487                 push    r13
.text:0000000000008489                 push    r12
.text:000000000000848B                 push    r15
.text:000000000000848D                 push    r14
.text:000000000000848F                 mov     r9, [rsp+78h+var_50]
.text:0000000000008494                 jmp     short loc_8423
.text:0000000000008494 ; ---------------------------------------------------------------------------
.text:0000000000008496                 align 20h
.text:00000000000084A0
.text:00000000000084A0 def_8174:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000084A0                 mov     r10, [rbx+40h]  ; jumptable 0000000000008174 default case
.text:00000000000084A4                 mov     r9, [rbx+38h]
.text:00000000000084A8                 mov     edx, 5
.text:00000000000084AD                 mov     rax, [rbx+10h]
.text:00000000000084B1                 mov     r8, [rbx+8]
.text:00000000000084B5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000084BC                 mov     r13, [rbx+30h]
.text:00000000000084C0                 mov     r12, [rbx+28h]
.text:00000000000084C4                 mov     r15, [rbx+20h]
.text:00000000000084C8                 mov     r14, [rbx+18h]
.text:00000000000084CC                 mov     [rsp+58h+var_40], r10
.text:00000000000084D1                 mov     [rsp+58h+var_48], r9
.text:00000000000084D6                 mov     [rsp+58h+var_58], rax
.text:00000000000084DA                 mov     [rsp+58h+var_50], r8
.text:00000000000084DF                 mov     rbx, [rbx]
.text:00000000000084E2                 jmp     loc_8272
.text:00000000000084E2 ; } // starts at 80D0
.text:00000000000084E2 version_etc_arn endp
.text:00000000000084E2
.text:00000000000084E2 ; ---------------------------------------------------------------------------
.text:00000000000084E7                 align 10h
.text:00000000000084F0
.text:00000000000084F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084F0
.text:00000000000084F0 ; Attributes: info_from_lumina
.text:00000000000084F0
.text:00000000000084F0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000084F0                 public version_etc_ar
.text:00000000000084F0 version_etc_ar  proc near
.text:00000000000084F0 ; __unwind {
.text:00000000000084F0                 xor     r9d, r9d
.text:00000000000084F3                 cmp     qword ptr [r8], 0
.text:00000000000084F7                 jz      short loc_850B
.text:00000000000084F9                 nop     dword ptr [rax+00000000h]
.text:0000000000008500
.text:0000000000008500 loc_8500:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000008500                 add     r9, 1
.text:0000000000008504                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000008509                 jnz     short loc_8500
.text:000000000000850B
.text:000000000000850B loc_850B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000850B                 jmp     version_etc_arn
.text:000000000000850B ; } // starts at 84F0
.text:000000000000850B version_etc_ar  endp
.text:000000000000850B
.text:0000000000008510
.text:0000000000008510 ; =============== S U B R O U T I N E =======================================
.text:0000000000008510
.text:0000000000008510 ; Attributes: info_from_lumina
.text:0000000000008510
.text:0000000000008510 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000008510                 public version_etc_va
.text:0000000000008510 version_etc_va  proc near
.text:0000000000008510
.text:0000000000008510 authtab         = qword ptr -68h
.text:0000000000008510 var_10          = qword ptr -10h
.text:0000000000008510
.text:0000000000008510 ; __unwind {
.text:0000000000008510                 sub     rsp, 68h
.text:0000000000008514                 mov     r10, r8
.text:0000000000008517                 xor     r9d, r9d
.text:000000000000851A                 mov     rax, fs:28h
.text:0000000000008523                 mov     [rsp+68h+var_10], rax
.text:0000000000008528                 xor     eax, eax
.text:000000000000852A                 mov     r8, rsp
.text:000000000000852D                 nop     dword ptr [rax]
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000008530                 mov     eax, [r10]
.text:0000000000008533                 cmp     eax, 2Fh ; '/'
.text:0000000000008536                 ja      short loc_857A
.text:0000000000008538                 mov     r11d, eax
.text:000000000000853B                 add     r11, [r10+10h]
.text:000000000000853F                 add     eax, 8
.text:0000000000008542                 mov     [r10], eax
.text:0000000000008545
.text:0000000000008545 loc_8545:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000008545                 mov     rax, [r11]
.text:0000000000008548                 test    rax, rax
.text:000000000000854B                 mov     [r8+r9*8], rax
.text:000000000000854F                 jz      short loc_855B
.text:0000000000008551                 add     r9, 1
.text:0000000000008555                 cmp     r9, 0Ah
.text:0000000000008559                 jnz     short loc_8530
.text:000000000000855B
.text:000000000000855B loc_855B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000855B                 call    version_etc_arn
.text:0000000000008560                 mov     rax, [rsp+68h+var_10]
.text:0000000000008565                 xor     rax, fs:28h
.text:000000000000856E                 jnz     short loc_8575
.text:0000000000008570                 add     rsp, 68h
.text:0000000000008574                 retn
.text:0000000000008575 ; ---------------------------------------------------------------------------
.text:0000000000008575
.text:0000000000008575 loc_8575:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000008575                 call    ___stack_chk_fail
.text:000000000000857A ; ---------------------------------------------------------------------------
.text:000000000000857A
.text:000000000000857A loc_857A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000857A                 mov     r11, [r10+8]
.text:000000000000857E                 lea     rax, [r11+8]
.text:0000000000008582                 mov     [r10+8], rax
.text:0000000000008586                 jmp     short loc_8545
.text:0000000000008586 ; } // starts at 8510
.text:0000000000008586 version_etc_va  endp
.text:0000000000008586
.text:0000000000008586 ; ---------------------------------------------------------------------------
.text:0000000000008588                 align 10h
.text:0000000000008590
.text:0000000000008590 ; =============== S U B R O U T I N E =======================================
.text:0000000000008590
.text:0000000000008590 ; Attributes: info_from_lumina
.text:0000000000008590
.text:0000000000008590 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000008590                 public version_etc
.text:0000000000008590 version_etc     proc near               ; CODE XREF: main+293↑p
.text:0000000000008590
.text:0000000000008590 var_C0          = dword ptr -0C0h
.text:0000000000008590 var_B8          = qword ptr -0B8h
.text:0000000000008590 var_B0          = qword ptr -0B0h
.text:0000000000008590 var_A8          = byte ptr -0A8h
.text:0000000000008590 var_50          = qword ptr -50h
.text:0000000000008590 var_48          = byte ptr -48h
.text:0000000000008590 var_28          = qword ptr -28h
.text:0000000000008590 var_20          = qword ptr -20h
.text:0000000000008590 arg_0           = byte ptr  8
.text:0000000000008590
.text:0000000000008590 ; __unwind {
.text:0000000000008590                 push    rbp
.text:0000000000008591                 push    rbx
.text:0000000000008592                 mov     r10d, 20h ; ' '
.text:0000000000008598                 xor     r11d, r11d
.text:000000000000859B                 sub     rsp, 0B8h
.text:00000000000085A2                 mov     rax, fs:28h
.text:00000000000085AB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000085B0                 xor     eax, eax
.text:00000000000085B2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000085BA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000085C2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000085CA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000085CF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000085D7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000085DF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000085E4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000085EC                 xor     r9d, r9d
.text:00000000000085EF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000085F4                 mov     rbp, rax
.text:00000000000085F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008600
.text:0000000000008600 loc_8600:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000008600                 cmp     r10d, 2Fh ; '/'
.text:0000000000008604                 ja      short loc_865C
.text:0000000000008606                 mov     eax, r10d
.text:0000000000008609                 mov     r11d, 1
.text:000000000000860F                 add     r10d, 8
.text:0000000000008613                 add     rax, rbp
.text:0000000000008616
.text:0000000000008616 loc_8616:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000008616                 mov     rax, [rax]
.text:0000000000008619                 test    rax, rax
.text:000000000000861C                 mov     [r8+r9*8], rax
.text:0000000000008620                 jz      short loc_862C
.text:0000000000008622                 add     r9, 1
.text:0000000000008626                 cmp     r9, 0Ah
.text:000000000000862A                 jnz     short loc_8600
.text:000000000000862C
.text:000000000000862C loc_862C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000862C                 test    r11b, r11b
.text:000000000000862F                 jnz     short loc_8655
.text:0000000000008631
.text:0000000000008631 loc_8631:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000008631                 call    version_etc_arn
.text:0000000000008636                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000863B                 xor     rax, fs:28h
.text:0000000000008644                 jnz     short loc_8650
.text:0000000000008646                 add     rsp, 0B8h
.text:000000000000864D                 pop     rbx
.text:000000000000864E                 pop     rbp
.text:000000000000864F                 retn
.text:0000000000008650 ; ---------------------------------------------------------------------------
.text:0000000000008650
.text:0000000000008650 loc_8650:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000008650                 call    ___stack_chk_fail
.text:0000000000008655 ; ---------------------------------------------------------------------------
.text:0000000000008655
.text:0000000000008655 loc_8655:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000008655                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000865A                 jmp     short loc_8631
.text:000000000000865C ; ---------------------------------------------------------------------------
.text:000000000000865C
.text:000000000000865C loc_865C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000865C                 mov     rax, rbx
.text:000000000000865F                 add     rbx, 8
.text:0000000000008663                 jmp     short loc_8616
.text:0000000000008663 ; } // starts at 8590
.text:0000000000008663 version_etc     endp
.text:0000000000008663
.text:0000000000008663 ; ---------------------------------------------------------------------------
.text:0000000000008665                 align 10h
.text:0000000000008670
.text:0000000000008670 ; =============== S U B R O U T I N E =======================================
.text:0000000000008670
.text:0000000000008670 ; Attributes: info_from_lumina
.text:0000000000008670
.text:0000000000008670 ; void __cdecl emit_bug_reporting_address()
.text:0000000000008670                 public emit_bug_reporting_address
.text:0000000000008670 emit_bug_reporting_address proc near
.text:0000000000008670 ; __unwind {
.text:0000000000008670                 push    rbx
.text:0000000000008671                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000008678                 mov     edx, 5          ; category
.text:000000000000867D                 xor     edi, edi        ; domainname
.text:000000000000867F                 call    _dcgettext
.text:0000000000008684                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000868B                 mov     rsi, rax
.text:000000000000868E                 mov     edi, 1
.text:0000000000008693                 xor     eax, eax
.text:0000000000008695                 call    ___printf_chk
.text:000000000000869A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000086A1                 mov     edx, 5          ; category
.text:00000000000086A6                 xor     edi, edi        ; domainname
.text:00000000000086A8                 call    _dcgettext
.text:00000000000086AD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000086B4                 lea     rdx, unk_96F4
.text:00000000000086BB                 mov     rsi, rax
.text:00000000000086BE                 mov     edi, 1
.text:00000000000086C3                 xor     eax, eax
.text:00000000000086C5                 call    ___printf_chk
.text:00000000000086CA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000086D1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000086D8                 xor     edi, edi        ; domainname
.text:00000000000086DA                 mov     edx, 5          ; category
.text:00000000000086DF                 call    _dcgettext
.text:00000000000086E4                 mov     rsi, rbx        ; stream
.text:00000000000086E7                 mov     rdi, rax        ; s
.text:00000000000086EA                 pop     rbx
.text:00000000000086EB                 jmp     _fputs_unlocked
.text:00000000000086EB ; } // starts at 8670
.text:00000000000086EB emit_bug_reporting_address endp
.text:00000000000086EB
.text:00000000000086F0
.text:00000000000086F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086F0
.text:00000000000086F0
.text:00000000000086F0                 public xmalloc
.text:00000000000086F0 xmalloc         proc near               ; CODE XREF: dopass+93↑p
.text:00000000000086F0                                         ; do_wipefd+138↑p ...
.text:00000000000086F0 ; __unwind {
.text:00000000000086F0                 push    rbx
.text:00000000000086F1                 mov     rbx, rdi
.text:00000000000086F4                 call    _malloc
.text:00000000000086F9                 test    rax, rax
.text:00000000000086FC                 jnz     short loc_8703
.text:00000000000086FE                 test    rbx, rbx
.text:0000000000008701                 jnz     short loc_8705
.text:0000000000008703
.text:0000000000008703 loc_8703:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000008703                 pop     rbx
.text:0000000000008704                 retn
.text:0000000000008705 ; ---------------------------------------------------------------------------
.text:0000000000008705
.text:0000000000008705 loc_8705:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000008705                 call    xalloc_die
.text:0000000000008705 ; } // starts at 86F0
.text:0000000000008705 xmalloc         endp
.text:0000000000008705
.text:0000000000008705 ; ---------------------------------------------------------------------------
.text:000000000000870A                 align 10h
.text:0000000000008710
.text:0000000000008710 ; =============== S U B R O U T I N E =======================================
.text:0000000000008710
.text:0000000000008710 ; Attributes: info_from_lumina
.text:0000000000008710
.text:0000000000008710 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000008710                 public xnmalloc
.text:0000000000008710 xnmalloc        proc near
.text:0000000000008710 ; __unwind {
.text:0000000000008710                 mov     rax, rdi
.text:0000000000008713                 mul     rsi
.text:0000000000008716                 mov     rdi, rax
.text:0000000000008719                 seto    al
.text:000000000000871C                 test    rdi, rdi
.text:000000000000871F                 js      short loc_872B
.text:0000000000008721                 movzx   eax, al
.text:0000000000008724                 test    rax, rax
.text:0000000000008727                 jnz     short loc_872B
.text:0000000000008729                 jmp     short xmalloc
.text:000000000000872B ; ---------------------------------------------------------------------------
.text:000000000000872B
.text:000000000000872B loc_872B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000872B                                         ; xnmalloc+17↑j
.text:000000000000872B                 sub     rsp, 8
.text:000000000000872F                 call    xalloc_die
.text:000000000000872F ; } // starts at 8710
.text:000000000000872F xnmalloc        endp
.text:000000000000872F
.text:000000000000872F ; ---------------------------------------------------------------------------
.text:0000000000008734                 align 20h
.text:0000000000008740
.text:0000000000008740 ; =============== S U B R O U T I N E =======================================
.text:0000000000008740
.text:0000000000008740
.text:0000000000008740                 public xcharalloc
.text:0000000000008740 xcharalloc      proc near
.text:0000000000008740 ; __unwind {
.text:0000000000008740                 jmp     short xmalloc
.text:0000000000008740 ; } // starts at 8740
.text:0000000000008740 xcharalloc      endp
.text:0000000000008740
.text:0000000000008740 ; ---------------------------------------------------------------------------
.text:0000000000008742                 align 10h
.text:0000000000008750
.text:0000000000008750 ; =============== S U B R O U T I N E =======================================
.text:0000000000008750
.text:0000000000008750 ; Attributes: info_from_lumina
.text:0000000000008750
.text:0000000000008750 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000008750                 public xrealloc
.text:0000000000008750 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000008750                                         ; quotearg_n_options+182↑p ...
.text:0000000000008750 ; __unwind {
.text:0000000000008750                 test    rsi, rsi
.text:0000000000008753                 push    rbx
.text:0000000000008754                 mov     rbx, rsi
.text:0000000000008757                 jnz     short loc_875E
.text:0000000000008759                 test    rdi, rdi
.text:000000000000875C                 jnz     short loc_8778
.text:000000000000875E
.text:000000000000875E loc_875E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000875E                 mov     rsi, rbx        ; size
.text:0000000000008761                 call    _realloc
.text:0000000000008766                 test    rax, rax
.text:0000000000008769                 jnz     short loc_8770
.text:000000000000876B                 test    rbx, rbx
.text:000000000000876E                 jnz     short loc_8781
.text:0000000000008770
.text:0000000000008770 loc_8770:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000008770                 pop     rbx
.text:0000000000008771                 retn
.text:0000000000008771 ; ---------------------------------------------------------------------------
.text:0000000000008772                 align 8
.text:0000000000008778
.text:0000000000008778 loc_8778:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000008778                 call    _free
.text:000000000000877D                 xor     eax, eax
.text:000000000000877F                 pop     rbx
.text:0000000000008780                 retn
.text:0000000000008781 ; ---------------------------------------------------------------------------
.text:0000000000008781
.text:0000000000008781 loc_8781:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000008781                 call    xalloc_die
.text:0000000000008781 ; } // starts at 8750
.text:0000000000008781 xrealloc        endp
.text:0000000000008781
.text:0000000000008781 ; ---------------------------------------------------------------------------
.text:0000000000008786                 align 10h
.text:0000000000008790
.text:0000000000008790 ; =============== S U B R O U T I N E =======================================
.text:0000000000008790
.text:0000000000008790 ; Attributes: info_from_lumina
.text:0000000000008790
.text:0000000000008790 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000008790                 public xnrealloc
.text:0000000000008790 xnrealloc       proc near
.text:0000000000008790 ; __unwind {
.text:0000000000008790                 mov     rax, rsi
.text:0000000000008793                 mul     rdx
.text:0000000000008796                 mov     rsi, rax
.text:0000000000008799                 seto    al
.text:000000000000879C                 test    rsi, rsi
.text:000000000000879F                 js      short loc_87AB
.text:00000000000087A1                 movzx   eax, al
.text:00000000000087A4                 test    rax, rax
.text:00000000000087A7                 jnz     short loc_87AB
.text:00000000000087A9                 jmp     short xrealloc
.text:00000000000087AB ; ---------------------------------------------------------------------------
.text:00000000000087AB
.text:00000000000087AB loc_87AB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000087AB                                         ; xnrealloc+17↑j
.text:00000000000087AB                 sub     rsp, 8
.text:00000000000087AF                 call    xalloc_die
.text:00000000000087AF ; } // starts at 8790
.text:00000000000087AF xnrealloc       endp
.text:00000000000087AF
.text:00000000000087AF ; ---------------------------------------------------------------------------
.text:00000000000087B4                 align 20h
.text:00000000000087C0
.text:00000000000087C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087C0
.text:00000000000087C0 ; Attributes: info_from_lumina
.text:00000000000087C0
.text:00000000000087C0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000087C0                 public x2nrealloc
.text:00000000000087C0 x2nrealloc      proc near
.text:00000000000087C0 ; __unwind {
.text:00000000000087C0                 test    rdi, rdi
.text:00000000000087C3                 mov     r9, rdx
.text:00000000000087C6                 mov     rcx, [rsi]
.text:00000000000087C9                 jz      short loc_8800
.text:00000000000087CB                 xor     edx, edx
.text:00000000000087CD                 mov     rax, 5555555555555554h
.text:00000000000087D7                 div     r9
.text:00000000000087DA                 cmp     rax, rcx
.text:00000000000087DD                 jbe     short loc_881B
.text:00000000000087DF                 mov     rax, rcx
.text:00000000000087E2                 shr     rax, 1
.text:00000000000087E5                 lea     rcx, [rax+rcx+1]
.text:00000000000087EA
.text:00000000000087EA loc_87EA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000087EA                 mov     [rsi], rcx
.text:00000000000087ED                 imul    rcx, r9
.text:00000000000087F1                 mov     rsi, rcx
.text:00000000000087F4                 jmp     xrealloc
.text:00000000000087F4 ; ---------------------------------------------------------------------------
.text:00000000000087F9                 align 20h
.text:0000000000008800
.text:0000000000008800 loc_8800:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000008800                 test    rcx, rcx
.text:0000000000008803                 jz      short loc_8828
.text:0000000000008805
.text:0000000000008805 loc_8805:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000008805                 mov     rax, rcx
.text:0000000000008808                 mul     r9
.text:000000000000880B                 seto    dl
.text:000000000000880E                 test    rax, rax
.text:0000000000008811                 movzx   edx, dl
.text:0000000000008814                 js      short loc_881B
.text:0000000000008816                 test    rdx, rdx
.text:0000000000008819                 jz      short loc_87EA
.text:000000000000881B
.text:000000000000881B loc_881B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000881B                                         ; x2nrealloc+54↑j
.text:000000000000881B                 sub     rsp, 8
.text:000000000000881F                 call    xalloc_die
.text:000000000000881F ; ---------------------------------------------------------------------------
.text:0000000000008824                 align 8
.text:0000000000008828
.text:0000000000008828 loc_8828:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000008828                 xor     edx, edx
.text:000000000000882A                 mov     eax, 80h
.text:000000000000882F                 xor     r8d, r8d
.text:0000000000008832                 div     r9
.text:0000000000008835                 test    rax, rax
.text:0000000000008838                 setz    r8b
.text:000000000000883C                 lea     rcx, [r8+rax]
.text:0000000000008840                 jmp     short loc_8805
.text:0000000000008840 ; } // starts at 87C0
.text:0000000000008840 x2nrealloc      endp
.text:0000000000008840
.text:0000000000008840 ; ---------------------------------------------------------------------------
.text:0000000000008842                 align 10h
.text:0000000000008850
.text:0000000000008850 ; =============== S U B R O U T I N E =======================================
.text:0000000000008850
.text:0000000000008850 ; Attributes: info_from_lumina
.text:0000000000008850
.text:0000000000008850 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000008850                 public x2realloc
.text:0000000000008850 x2realloc       proc near
.text:0000000000008850 ; __unwind {
.text:0000000000008850                 test    rdi, rdi
.text:0000000000008853                 mov     rax, [rsi]
.text:0000000000008856                 jz      short loc_8880
.text:0000000000008858                 mov     rdx, 5555555555555553h
.text:0000000000008862                 cmp     rax, rdx
.text:0000000000008865                 ja      short loc_8891
.text:0000000000008867                 mov     rdx, rax
.text:000000000000886A                 shr     rdx, 1
.text:000000000000886D                 lea     rax, [rdx+rax+1]
.text:0000000000008872
.text:0000000000008872 loc_8872:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000008872                 mov     [rsi], rax
.text:0000000000008875                 mov     rsi, rax
.text:0000000000008878                 jmp     xrealloc
.text:0000000000008878 ; ---------------------------------------------------------------------------
.text:000000000000887D                 align 20h
.text:0000000000008880
.text:0000000000008880 loc_8880:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000008880                 test    rax, rax
.text:0000000000008883                 mov     edx, 80h
.text:0000000000008888                 cmovz   rax, rdx
.text:000000000000888C                 test    rax, rax
.text:000000000000888F                 jns     short loc_8872
.text:0000000000008891
.text:0000000000008891 loc_8891:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000008891                 sub     rsp, 8
.text:0000000000008895                 call    xalloc_die
.text:0000000000008895 ; } // starts at 8850
.text:0000000000008895 x2realloc       endp
.text:0000000000008895
.text:0000000000008895 ; ---------------------------------------------------------------------------
.text:000000000000889A                 align 20h
.text:00000000000088A0
.text:00000000000088A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088A0
.text:00000000000088A0
.text:00000000000088A0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000088A0                 public xzalloc
.text:00000000000088A0 xzalloc         proc near
.text:00000000000088A0 ; __unwind {
.text:00000000000088A0                 push    rbx
.text:00000000000088A1                 mov     rbx, rdi
.text:00000000000088A4                 call    xmalloc
.text:00000000000088A9                 mov     rdx, rbx        ; n
.text:00000000000088AC                 xor     esi, esi        ; c
.text:00000000000088AE                 mov     rdi, rax        ; s
.text:00000000000088B1                 pop     rbx
.text:00000000000088B2                 jmp     _memset
.text:00000000000088B2 ; } // starts at 88A0
.text:00000000000088B2 xzalloc         endp
.text:00000000000088B2
.text:00000000000088B2 ; ---------------------------------------------------------------------------
.text:00000000000088B7                 align 20h
.text:00000000000088C0
.text:00000000000088C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088C0
.text:00000000000088C0 ; Attributes: info_from_lumina
.text:00000000000088C0
.text:00000000000088C0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000088C0                 public xcalloc
.text:00000000000088C0 xcalloc         proc near
.text:00000000000088C0 ; __unwind {
.text:00000000000088C0                 mov     rax, rdi
.text:00000000000088C3                 sub     rsp, 8
.text:00000000000088C7                 mul     rsi
.text:00000000000088CA                 seto    dl
.text:00000000000088CD                 test    rax, rax
.text:00000000000088D0                 js      short loc_88E9
.text:00000000000088D2                 movzx   edx, dl
.text:00000000000088D5                 test    rdx, rdx
.text:00000000000088D8                 jnz     short loc_88E9
.text:00000000000088DA                 call    _calloc
.text:00000000000088DF                 test    rax, rax
.text:00000000000088E2                 jz      short loc_88E9
.text:00000000000088E4                 add     rsp, 8
.text:00000000000088E8                 retn
.text:00000000000088E9 ; ---------------------------------------------------------------------------
.text:00000000000088E9
.text:00000000000088E9 loc_88E9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000088E9                                         ; xcalloc+18↑j ...
.text:00000000000088E9                 call    xalloc_die
.text:00000000000088E9 ; } // starts at 88C0
.text:00000000000088E9 xcalloc         endp
.text:00000000000088E9
.text:00000000000088E9 ; ---------------------------------------------------------------------------
.text:00000000000088EE                 align 10h
.text:00000000000088F0
.text:00000000000088F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088F0
.text:00000000000088F0 ; Attributes: info_from_lumina
.text:00000000000088F0
.text:00000000000088F0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000088F0                 public xmemdup
.text:00000000000088F0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000088F0                                         ; xstrdup+11↓j
.text:00000000000088F0 ; __unwind {
.text:00000000000088F0                 push    rbp
.text:00000000000088F1                 push    rbx
.text:00000000000088F2                 mov     rbp, rdi
.text:00000000000088F5                 mov     rdi, rsi
.text:00000000000088F8                 mov     rbx, rsi
.text:00000000000088FB                 sub     rsp, 8
.text:00000000000088FF                 call    xmalloc
.text:0000000000008904                 add     rsp, 8
.text:0000000000008908                 mov     rdx, rbx        ; n
.text:000000000000890B                 mov     rsi, rbp        ; src
.text:000000000000890E                 pop     rbx
.text:000000000000890F                 pop     rbp
.text:0000000000008910                 mov     rdi, rax        ; dest
.text:0000000000008913                 jmp     _memcpy
.text:0000000000008913 ; } // starts at 88F0
.text:0000000000008913 xmemdup         endp
.text:0000000000008913
.text:0000000000008913 ; ---------------------------------------------------------------------------
.text:0000000000008918                 align 20h
.text:0000000000008920
.text:0000000000008920 ; =============== S U B R O U T I N E =======================================
.text:0000000000008920
.text:0000000000008920
.text:0000000000008920 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000008920                 public xstrdup
.text:0000000000008920 xstrdup         proc near               ; CODE XREF: main+387↑p
.text:0000000000008920                                         ; main+551↑p ...
.text:0000000000008920 ; __unwind {
.text:0000000000008920                 push    rbx
.text:0000000000008921                 mov     rbx, rdi
.text:0000000000008924                 call    _strlen
.text:0000000000008929                 mov     rdi, rbx        ; src
.text:000000000000892C                 lea     rsi, [rax+1]    ; n
.text:0000000000008930                 pop     rbx
.text:0000000000008931                 jmp     short xmemdup
.text:0000000000008931 ; } // starts at 8920
.text:0000000000008931 xstrdup         endp
.text:0000000000008931
.text:0000000000008931 ; ---------------------------------------------------------------------------
.text:0000000000008933                 align 20h
.text:0000000000008940
.text:0000000000008940 ; =============== S U B R O U T I N E =======================================
.text:0000000000008940
.text:0000000000008940 ; Attributes: noreturn info_from_lumina
.text:0000000000008940
.text:0000000000008940 ; void __cdecl xalloc_die()
.text:0000000000008940                 public xalloc_die
.text:0000000000008940 xalloc_die      proc near               ; CODE XREF: do_wipefd:loc_3C16↑p
.text:0000000000008940                                         ; dir_name:loc_4553↑p ...
.text:0000000000008940 ; __unwind {
.text:0000000000008940                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000008947                 sub     rsp, 8
.text:000000000000894B                 mov     edx, 5          ; category
.text:0000000000008950                 xor     edi, edi        ; domainname
.text:0000000000008952                 call    _dcgettext
.text:0000000000008957                 mov     edi, cs:exit_failure ; status
.text:000000000000895D                 lea     rdx, aS_0+2     ; format
.text:0000000000008964                 mov     rcx, rax
.text:0000000000008967                 xor     esi, esi        ; errnum
.text:0000000000008969                 xor     eax, eax
.text:000000000000896B                 call    _error
.text:0000000000008970                 call    _abort
.text:0000000000008970 ; } // starts at 8940
.text:0000000000008970 xalloc_die      endp
.text:0000000000008970
.text:0000000000008970 ; ---------------------------------------------------------------------------
.text:0000000000008975                 align 20h
.text:0000000000008980
.text:0000000000008980 ; =============== S U B R O U T I N E =======================================
.text:0000000000008980
.text:0000000000008980 ; Attributes: info_from_lumina
.text:0000000000008980
.text:0000000000008980 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000008980                 public xnumtoumax
.text:0000000000008980 xnumtoumax      proc near               ; CODE XREF: main+1E8↑p
.text:0000000000008980                                         ; xdectoumax+17↓p
.text:0000000000008980
.text:0000000000008980 var_48          = qword ptr -48h
.text:0000000000008980 var_40          = qword ptr -40h
.text:0000000000008980 arg_0           = dword ptr  8
.text:0000000000008980
.text:0000000000008980 ; __unwind {
.text:0000000000008980                 push    r15
.text:0000000000008982                 push    r14
.text:0000000000008984                 mov     r15, rcx
.text:0000000000008987                 push    r13
.text:0000000000008989                 push    r12
.text:000000000000898B                 mov     r14, rdx
.text:000000000000898E                 push    rbp
.text:000000000000898F                 push    rbx
.text:0000000000008990                 mov     edx, esi
.text:0000000000008992                 xor     esi, esi
.text:0000000000008994                 mov     r12, rdi
.text:0000000000008997                 mov     r13, r9
.text:000000000000899A                 sub     rsp, 18h
.text:000000000000899E                 mov     rcx, rsp
.text:00000000000089A1                 mov     ebx, [rsp+48h+arg_0]
.text:00000000000089A5                 mov     rax, fs:28h
.text:00000000000089AE                 mov     [rsp+48h+var_40], rax
.text:00000000000089B3                 xor     eax, eax
.text:00000000000089B5                 call    xstrtoumax
.text:00000000000089BA                 test    eax, eax
.text:00000000000089BC                 jnz     loc_8A50
.text:00000000000089C2                 mov     rbp, [rsp+48h+var_48]
.text:00000000000089C6                 cmp     rbp, r14
.text:00000000000089C9                 jb      short loc_89D0
.text:00000000000089CB                 cmp     rbp, r15
.text:00000000000089CE                 jbe     short loc_8A24
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: xnumtoumax+49↑j
.text:00000000000089D0                 call    ___errno_location
.text:00000000000089D5                 cmp     rbp, 40000000h
.text:00000000000089DC                 mov     r14, rax
.text:00000000000089DF                 sbb     eax, eax
.text:00000000000089E1                 and     eax, 0FFFFFFD7h
.text:00000000000089E4                 add     eax, 4Bh ; 'K'
.text:00000000000089E7                 mov     [r14], eax
.text:00000000000089EA
.text:00000000000089EA loc_89EA:                               ; CODE XREF: xnumtoumax+E2↓j
.text:00000000000089EA                                         ; xnumtoumax+EA↓j ...
.text:00000000000089EA                 mov     rdi, r12
.text:00000000000089ED                 call    quote
.text:00000000000089F2                 mov     esi, [r14]
.text:00000000000089F5                 mov     r8, rax
.text:00000000000089F8                 mov     eax, 0
.text:00000000000089FD                 lea     rdx, format     ; "%s: %s"
.text:0000000000008A04                 mov     rcx, r13
.text:0000000000008A07                 cmp     esi, 16h
.text:0000000000008A0A                 cmovz   esi, eax        ; errnum
.text:0000000000008A0D                 test    ebx, ebx
.text:0000000000008A0F                 mov     eax, 1
.text:0000000000008A14                 cmovz   ebx, eax
.text:0000000000008A17                 xor     eax, eax
.text:0000000000008A19                 mov     edi, ebx        ; status
.text:0000000000008A1B                 call    _error
.text:0000000000008A20                 mov     rbp, [rsp+48h+var_48]
.text:0000000000008A24
.text:0000000000008A24 loc_8A24:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000008A24                 mov     rdx, [rsp+48h+var_40]
.text:0000000000008A29                 xor     rdx, fs:28h
.text:0000000000008A32                 mov     rax, rbp
.text:0000000000008A35                 jnz     short loc_8A7B
.text:0000000000008A37                 add     rsp, 18h
.text:0000000000008A3B                 pop     rbx
.text:0000000000008A3C                 pop     rbp
.text:0000000000008A3D                 pop     r12
.text:0000000000008A3F                 pop     r13
.text:0000000000008A41                 pop     r14
.text:0000000000008A43                 pop     r15
.text:0000000000008A45                 retn
.text:0000000000008A45 ; ---------------------------------------------------------------------------
.text:0000000000008A46                 align 10h
.text:0000000000008A50
.text:0000000000008A50 loc_8A50:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000008A50                 mov     ebp, eax
.text:0000000000008A52                 call    ___errno_location
.text:0000000000008A57                 cmp     ebp, 1
.text:0000000000008A5A                 mov     r14, rax
.text:0000000000008A5D                 jz      short loc_8A70
.text:0000000000008A5F                 cmp     ebp, 3
.text:0000000000008A62                 jnz     short loc_89EA
.text:0000000000008A64                 mov     dword ptr [rax], 0
.text:0000000000008A6A                 jmp     loc_89EA
.text:0000000000008A6A ; ---------------------------------------------------------------------------
.text:0000000000008A6F                 align 10h
.text:0000000000008A70
.text:0000000000008A70 loc_8A70:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000008A70                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000008A76                 jmp     loc_89EA
.text:0000000000008A7B ; ---------------------------------------------------------------------------
.text:0000000000008A7B
.text:0000000000008A7B loc_8A7B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:0000000000008A7B                 call    ___stack_chk_fail
.text:0000000000008A7B ; } // starts at 8980
.text:0000000000008A7B xnumtoumax      endp
.text:0000000000008A7B
.text:0000000000008A80
.text:0000000000008A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A80
.text:0000000000008A80 ; Attributes: info_from_lumina
.text:0000000000008A80
.text:0000000000008A80 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000008A80                 public xdectoumax
.text:0000000000008A80 xdectoumax      proc near               ; CODE XREF: main+146↑p
.text:0000000000008A80 ; __unwind {
.text:0000000000008A80                 sub     rsp, 10h
.text:0000000000008A84                 push    r9
.text:0000000000008A86                 mov     r9, r8
.text:0000000000008A89                 mov     r8, rcx
.text:0000000000008A8C                 mov     rcx, rdx
.text:0000000000008A8F                 mov     rdx, rsi
.text:0000000000008A92                 mov     esi, 0Ah
.text:0000000000008A97                 call    xnumtoumax
.text:0000000000008A9C                 add     rsp, 18h
.text:0000000000008AA0                 retn
.text:0000000000008AA0 ; } // starts at 8A80
.text:0000000000008AA0 xdectoumax      endp
.text:0000000000008AA0
.text:0000000000008AA0 ; ---------------------------------------------------------------------------
.text:0000000000008AA1                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AB0
.text:0000000000008AB0
.text:0000000000008AB0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000008AB0                 public xstrtoumax
.text:0000000000008AB0 xstrtoumax      proc near               ; CODE XREF: human_options+AA↑p
.text:0000000000008AB0                                         ; xnumtoumax+35↑p
.text:0000000000008AB0
.text:0000000000008AB0 base            = dword ptr -50h
.text:0000000000008AB0 endptr          = qword ptr -48h
.text:0000000000008AB0 var_40          = qword ptr -40h
.text:0000000000008AB0
.text:0000000000008AB0 ; __unwind {
.text:0000000000008AB0                 push    r15
.text:0000000000008AB2                 push    r14
.text:0000000000008AB4                 push    r13
.text:0000000000008AB6                 push    r12
.text:0000000000008AB8                 push    rbp
.text:0000000000008AB9                 push    rbx
.text:0000000000008ABA                 sub     rsp, 28h
.text:0000000000008ABE                 mov     rax, fs:28h
.text:0000000000008AC7                 mov     [rsp+58h+var_40], rax
.text:0000000000008ACC                 xor     eax, eax
.text:0000000000008ACE                 cmp     edx, 24h ; '$'
.text:0000000000008AD1                 ja      loc_8E35
.text:0000000000008AD7                 lea     rax, [rsp+58h+endptr]
.text:0000000000008ADC                 mov     r15, rsi
.text:0000000000008ADF                 test    rsi, rsi
.text:0000000000008AE2                 mov     rbp, rdi
.text:0000000000008AE5                 mov     [rsp+58h+base], edx
.text:0000000000008AE9                 mov     r14, rcx
.text:0000000000008AEC                 mov     r13, r8
.text:0000000000008AEF                 cmovz   r15, rax
.text:0000000000008AF3                 call    ___errno_location
.text:0000000000008AF8                 mov     dword ptr [rax], 0
.text:0000000000008AFE                 mov     r12, rax
.text:0000000000008B01                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008B05                 call    ___ctype_b_loc
.text:0000000000008B0A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000008B0E                 mov     rsi, [rax]
.text:0000000000008B11                 mov     rax, rbp
.text:0000000000008B14                 jmp     short loc_8B27
.text:0000000000008B14 ; ---------------------------------------------------------------------------
.text:0000000000008B16                 align 20h
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000008B20                 add     rax, 1
.text:0000000000008B24                 movzx   ebx, byte ptr [rax]
.text:0000000000008B27
.text:0000000000008B27 loc_8B27:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000008B27                 movzx   ecx, bl
.text:0000000000008B2A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000008B2F                 jnz     short loc_8B20
.text:0000000000008B31                 cmp     bl, 2Dh ; '-'
.text:0000000000008B34                 jz      short loc_8B88
.text:0000000000008B36                 xor     ecx, ecx        ; group
.text:0000000000008B38                 mov     rsi, r15        ; endptr
.text:0000000000008B3B                 mov     rdi, rbp        ; nptr
.text:0000000000008B3E                 call    ___strtoul_internal
.text:0000000000008B43                 mov     rcx, [r15]
.text:0000000000008B46                 mov     rbx, rax
.text:0000000000008B49                 cmp     rcx, rbp
.text:0000000000008B4C                 jz      short loc_8B78
.text:0000000000008B4E                 mov     eax, [r12]
.text:0000000000008B52                 test    eax, eax
.text:0000000000008B54                 jz      short loc_8BB8
.text:0000000000008B56                 cmp     eax, 22h ; '"'
.text:0000000000008B59                 mov     ebp, 1
.text:0000000000008B5E                 jnz     short loc_8B88
.text:0000000000008B60
.text:0000000000008B60 loc_8B60:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000008B60                 test    r13, r13
.text:0000000000008B63                 jz      short loc_8B6E
.text:0000000000008B65                 movzx   r12d, byte ptr [rcx]
.text:0000000000008B69                 test    r12b, r12b
.text:0000000000008B6C                 jnz     short loc_8BE7
.text:0000000000008B6E
.text:0000000000008B6E loc_8B6E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000008B6E                 mov     [r14], rbx
.text:0000000000008B71                 jmp     short loc_8B8D
.text:0000000000008B71 ; ---------------------------------------------------------------------------
.text:0000000000008B73                 align 8
.text:0000000000008B78
.text:0000000000008B78 loc_8B78:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000008B78                 test    r13, r13
.text:0000000000008B7B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008B80                 jnz     short loc_8BC0
.text:0000000000008B82                 nop     word ptr [rax+rax+00h]
.text:0000000000008B88
.text:0000000000008B88 loc_8B88:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000008B88                                         ; xstrtoumax+AE↑j ...
.text:0000000000008B88                 mov     ebp, 4
.text:0000000000008B8D
.text:0000000000008B8D loc_8B8D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000008B8D                                         ; xstrtoumax+217↓j ...
.text:0000000000008B8D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000008B92                 xor     rdi, fs:28h
.text:0000000000008B9B                 mov     eax, ebp
.text:0000000000008B9D                 jnz     loc_8E30
.text:0000000000008BA3                 add     rsp, 28h
.text:0000000000008BA7                 pop     rbx
.text:0000000000008BA8                 pop     rbp
.text:0000000000008BA9                 pop     r12
.text:0000000000008BAB                 pop     r13
.text:0000000000008BAD                 pop     r14
.text:0000000000008BAF                 pop     r15
.text:0000000000008BB1                 retn
.text:0000000000008BB1 ; ---------------------------------------------------------------------------
.text:0000000000008BB2                 align 8
.text:0000000000008BB8
.text:0000000000008BB8 loc_8BB8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000008BB8                 xor     ebp, ebp
.text:0000000000008BBA                 jmp     short loc_8B60
.text:0000000000008BBA ; ---------------------------------------------------------------------------
.text:0000000000008BBC                 align 20h
.text:0000000000008BC0
.text:0000000000008BC0 loc_8BC0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000008BC0                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000008BC5                 test    r12b, r12b
.text:0000000000008BC8                 jz      short loc_8B88
.text:0000000000008BCA                 movsx   esi, r12b       ; c
.text:0000000000008BCE                 mov     rdi, r13        ; s
.text:0000000000008BD1                 xor     ebp, ebp
.text:0000000000008BD3                 call    _strchr
.text:0000000000008BD8                 test    rax, rax
.text:0000000000008BDB                 mov     ebx, 1
.text:0000000000008BE0                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008BE5                 jz      short loc_8B88
.text:0000000000008BE7
.text:0000000000008BE7 loc_8BE7:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000008BE7                 movsx   esi, r12b       ; c
.text:0000000000008BEB                 mov     rdi, r13        ; s
.text:0000000000008BEE                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008BF3                 call    _strchr
.text:0000000000008BF8                 test    rax, rax
.text:0000000000008BFB                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008C00                 jz      def_8C86        ; jumptable 0000000000008C86 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008C06                 lea     eax, [r12-45h]
.text:0000000000008C0B                 cmp     al, 2Fh ; '/'
.text:0000000000008C0D                 ja      short loc_8C60
.text:0000000000008C0F                 mov     rdx, 814400308945h
.text:0000000000008C19                 bt      rdx, rax
.text:0000000000008C1D                 jnb     short loc_8C60
.text:0000000000008C1F                 mov     esi, 30h ; '0'  ; c
.text:0000000000008C24                 mov     rdi, r13        ; s
.text:0000000000008C27                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008C2C                 call    _strchr
.text:0000000000008C31                 test    rax, rax
.text:0000000000008C34                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008C39                 jz      short loc_8C60
.text:0000000000008C3B                 movzx   eax, byte ptr [rcx+1]
.text:0000000000008C3F                 cmp     al, 44h ; 'D'
.text:0000000000008C41                 jz      short loc_8C4F
.text:0000000000008C43                 cmp     al, 69h ; 'i'
.text:0000000000008C45                 jz      loc_8E18
.text:0000000000008C4B                 cmp     al, 42h ; 'B'
.text:0000000000008C4D                 jnz     short loc_8C60
.text:0000000000008C4F
.text:0000000000008C4F loc_8C4F:                               ; CODE XREF: xstrtoumax+191↑j
.text:0000000000008C4F                 mov     edi, 2
.text:0000000000008C54                 mov     esi, 3E8h
.text:0000000000008C59                 jmp     short loc_8C6A
.text:0000000000008C59 ; ---------------------------------------------------------------------------
.text:0000000000008C5B                 align 20h
.text:0000000000008C60
.text:0000000000008C60 loc_8C60:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000008C60                                         ; xstrtoumax+16D↑j ...
.text:0000000000008C60                 mov     edi, 1
.text:0000000000008C65                 mov     esi, 400h
.text:0000000000008C6A
.text:0000000000008C6A loc_8C6A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:0000000000008C6A                                         ; xstrtoumax+37B↓j
.text:0000000000008C6A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000008C6E                 cmp     r12b, 35h
.text:0000000000008C72                 ja      short def_8C86  ; jumptable 0000000000008C86 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008C74                 lea     rdx, jpt_8C86
.text:0000000000008C7B                 movzx   r12d, r12b
.text:0000000000008C7F                 movsxd  rax, ds:(jpt_8C86 - 0B108h)[rdx+r12*4]
.text:0000000000008C83                 add     rax, rdx
.text:0000000000008C86                 jmp     rax             ; switch jump
.text:0000000000008C88 ; ---------------------------------------------------------------------------
.text:0000000000008C88
.text:0000000000008C88 loc_8C88:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008C88                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008C88                 mov     rax, rbx        ; jumptable 0000000000008C86 cases 77,109
.text:0000000000008C8B                 mul     rsi
.text:0000000000008C8E                 jo      loc_8E81
.text:0000000000008C94                 xor     r8d, r8d
.text:0000000000008C97
.text:0000000000008C97 loc_8C97:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000008C97                                         ; xstrtoumax+35E↓j ...
.text:0000000000008C97                 mul     rsi
.text:0000000000008C9A                 jo      loc_8E72
.text:0000000000008CA0                 mov     rbx, rax
.text:0000000000008CA3
.text:0000000000008CA3 loc_8CA3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000008CA3                 or      ebp, r8d
.text:0000000000008CA6                 db      2Eh
.text:0000000000008CA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008CB0
.text:0000000000008CB0 loc_8CB0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008CB0                                         ; xstrtoumax+23B↓j ...
.text:0000000000008CB0                 movsxd  rdi, edi        ; jumptable 0000000000008C86 case 99
.text:0000000000008CB3                 mov     eax, ebp
.text:0000000000008CB5                 add     rcx, rdi
.text:0000000000008CB8                 or      eax, 2
.text:0000000000008CBB                 mov     [r15], rcx
.text:0000000000008CBE                 cmp     byte ptr [rcx], 0
.text:0000000000008CC1                 mov     [r14], rbx
.text:0000000000008CC4                 cmovnz  ebp, eax
.text:0000000000008CC7                 jmp     loc_8B8D
.text:0000000000008CCC ; ---------------------------------------------------------------------------
.text:0000000000008CCC
.text:0000000000008CCC def_8C86:                               ; CODE XREF: xstrtoumax+150↑j
.text:0000000000008CCC                                         ; xstrtoumax+1C2↑j ...
.text:0000000000008CCC                 mov     [r14], rbx      ; jumptable 0000000000008C86 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008CCF                 or      ebp, 2
.text:0000000000008CD2                 jmp     loc_8B8D
.text:0000000000008CD7 ; ---------------------------------------------------------------------------
.text:0000000000008CD7
.text:0000000000008CD7 loc_8CD7:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008CD7                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008CD7                 mov     edx, 2          ; jumptable 0000000000008C86 case 119
.text:0000000000008CDC                 mov     rax, rdx
.text:0000000000008CDF                 mul     rbx
.text:0000000000008CE2                 jo      loc_8D7E
.text:0000000000008CE8                 add     rbx, rbx
.text:0000000000008CEB                 jmp     short loc_8CB0  ; jumptable 0000000000008C86 case 99
.text:0000000000008CED ; ---------------------------------------------------------------------------
.text:0000000000008CED
.text:0000000000008CED loc_8CED:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008CED                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008CED                 mov     edx, 200h       ; jumptable 0000000000008C86 case 98
.text:0000000000008CF2                 mov     rax, rdx
.text:0000000000008CF5                 mul     rbx
.text:0000000000008CF8                 jo      loc_8D7E
.text:0000000000008CFE                 shl     rbx, 9
.text:0000000000008D02                 jmp     short loc_8CB0  ; jumptable 0000000000008C86 case 99
.text:0000000000008D04 ; ---------------------------------------------------------------------------
.text:0000000000008D04
.text:0000000000008D04 loc_8D04:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008D04                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008D04                 mov     r8d, 7          ; jumptable 0000000000008C86 case 90
.text:0000000000008D0A                 xor     r9d, r9d
.text:0000000000008D0D                 nop     dword ptr [rax]
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000008D10                 mov     rax, rbx
.text:0000000000008D13                 mul     rsi
.text:0000000000008D16                 mov     rbx, rax
.text:0000000000008D19                 jo      loc_8EAE
.text:0000000000008D1F
.text:0000000000008D1F loc_8D1F:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000008D1F                 sub     r8d, 1
.text:0000000000008D23                 jnz     short loc_8D10
.text:0000000000008D25
.text:0000000000008D25 loc_8D25:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000008D25                                         ; xstrtoumax+2BD↓j ...
.text:0000000000008D25                 or      ebp, r9d
.text:0000000000008D28                 jmp     short loc_8CB0  ; jumptable 0000000000008C86 case 99
.text:0000000000008D2A ; ---------------------------------------------------------------------------
.text:0000000000008D2A
.text:0000000000008D2A loc_8D2A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008D2A                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008D2A                 mov     r8d, 8          ; jumptable 0000000000008C86 case 89
.text:0000000000008D30                 xor     r9d, r9d
.text:0000000000008D33                 nop     dword ptr [rax+rax+00h]
.text:0000000000008D38
.text:0000000000008D38 loc_8D38:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000008D38                 mov     rax, rbx
.text:0000000000008D3B                 mul     rsi
.text:0000000000008D3E                 mov     rbx, rax
.text:0000000000008D41                 jo      loc_8E90
.text:0000000000008D47
.text:0000000000008D47 loc_8D47:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000008D47                 sub     r8d, 1
.text:0000000000008D4B                 jnz     short loc_8D38
.text:0000000000008D4D                 jmp     short loc_8D25
.text:0000000000008D4F ; ---------------------------------------------------------------------------
.text:0000000000008D4F
.text:0000000000008D4F loc_8D4F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008D4F                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008D4F                 mov     r8d, 4          ; jumptable 0000000000008C86 cases 84,116
.text:0000000000008D55                 xor     r9d, r9d
.text:0000000000008D58
.text:0000000000008D58 loc_8D58:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000008D58                 mov     rax, rbx
.text:0000000000008D5B                 mul     rsi
.text:0000000000008D5E                 mov     rbx, rax
.text:0000000000008D61                 jo      loc_8E63
.text:0000000000008D67
.text:0000000000008D67 loc_8D67:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000008D67                 sub     r8d, 1
.text:0000000000008D6B                 jnz     short loc_8D58
.text:0000000000008D6D                 jmp     short loc_8D25
.text:0000000000008D6F ; ---------------------------------------------------------------------------
.text:0000000000008D6F
.text:0000000000008D6F loc_8D6F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008D6F                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008D6F                 mov     rax, rbx        ; jumptable 0000000000008C86 cases 75,107
.text:0000000000008D72                 mul     rsi
.text:0000000000008D75                 mov     rbx, rax
.text:0000000000008D78                 jno     loc_8CB0        ; jumptable 0000000000008C86 case 99
.text:0000000000008D7E
.text:0000000000008D7E loc_8D7E:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000008D7E                                         ; xstrtoumax+248↑j ...
.text:0000000000008D7E                 mov     ebp, 1
.text:0000000000008D83                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008D87                 jmp     loc_8CB0        ; jumptable 0000000000008C86 case 99
.text:0000000000008D87 ; ---------------------------------------------------------------------------
.text:0000000000008D8C                 align 10h
.text:0000000000008D90
.text:0000000000008D90 loc_8D90:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008D90                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008D90                 mov     r8d, 5          ; jumptable 0000000000008C86 case 80
.text:0000000000008D96                 xor     r9d, r9d
.text:0000000000008D99
.text:0000000000008D99 loc_8D99:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000008D99                 mov     rax, rbx
.text:0000000000008D9C                 mul     rsi
.text:0000000000008D9F                 mov     rbx, rax
.text:0000000000008DA2                 jo      loc_8E9F
.text:0000000000008DA8
.text:0000000000008DA8 loc_8DA8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000008DA8                 sub     r8d, 1
.text:0000000000008DAC                 jnz     short loc_8D99
.text:0000000000008DAE                 jmp     loc_8D25
.text:0000000000008DB3 ; ---------------------------------------------------------------------------
.text:0000000000008DB3
.text:0000000000008DB3 loc_8DB3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008DB3                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008DB3                 mov     r8d, 6          ; jumptable 0000000000008C86 case 69
.text:0000000000008DB9                 xor     r9d, r9d
.text:0000000000008DBC
.text:0000000000008DBC loc_8DBC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000008DBC                 mov     rax, rbx
.text:0000000000008DBF                 mul     rsi
.text:0000000000008DC2                 mov     rbx, rax
.text:0000000000008DC5                 jo      loc_8E54
.text:0000000000008DCB
.text:0000000000008DCB loc_8DCB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000008DCB                 sub     r8d, 1
.text:0000000000008DCF                 jnz     short loc_8DBC
.text:0000000000008DD1                 jmp     loc_8D25
.text:0000000000008DD6 ; ---------------------------------------------------------------------------
.text:0000000000008DD6
.text:0000000000008DD6 loc_8DD6:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008DD6                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008DD6                 mov     edx, 400h       ; jumptable 0000000000008C86 case 66
.text:0000000000008DDB                 mov     rax, rdx
.text:0000000000008DDE                 mul     rbx
.text:0000000000008DE1                 jo      short loc_8D7E
.text:0000000000008DE3                 shl     rbx, 0Ah
.text:0000000000008DE7                 jmp     loc_8CB0        ; jumptable 0000000000008C86 case 99
.text:0000000000008DEC ; ---------------------------------------------------------------------------
.text:0000000000008DEC
.text:0000000000008DEC loc_8DEC:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008DEC                                         ; DATA XREF: .rodata:jpt_8C86↓o
.text:0000000000008DEC                 mov     rax, rbx        ; jumptable 0000000000008C86 cases 71,103
.text:0000000000008DEF                 mul     rsi
.text:0000000000008DF2                 jo      loc_8EBD
.text:0000000000008DF8                 xor     r8d, r8d
.text:0000000000008DFB
.text:0000000000008DFB loc_8DFB:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000008DFB                 mul     rsi
.text:0000000000008DFE                 jno     loc_8C97
.text:0000000000008E04                 mov     r8d, 1
.text:0000000000008E0A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E0E                 jmp     loc_8C97
.text:0000000000008E0E ; ---------------------------------------------------------------------------
.text:0000000000008E13                 align 8
.text:0000000000008E18
.text:0000000000008E18 loc_8E18:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000008E18                 xor     edi, edi
.text:0000000000008E1A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000008E1E                 mov     esi, 400h
.text:0000000000008E23                 setz    dil
.text:0000000000008E27                 lea     edi, [rdi+rdi+1]
.text:0000000000008E2B                 jmp     loc_8C6A
.text:0000000000008E30 ; ---------------------------------------------------------------------------
.text:0000000000008E30
.text:0000000000008E30 loc_8E30:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000008E30                 call    ___stack_chk_fail
.text:0000000000008E35 ; ---------------------------------------------------------------------------
.text:0000000000008E35
.text:0000000000008E35 loc_8E35:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000008E35                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:0000000000008E3C                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000008E43                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000008E4A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000008E4F                 call    ___assert_fail
.text:0000000000008E54 ; ---------------------------------------------------------------------------
.text:0000000000008E54
.text:0000000000008E54 loc_8E54:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000008E54                 mov     r9d, 1
.text:0000000000008E5A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E5E                 jmp     loc_8DCB
.text:0000000000008E63 ; ---------------------------------------------------------------------------
.text:0000000000008E63
.text:0000000000008E63 loc_8E63:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000008E63                 mov     r9d, 1
.text:0000000000008E69                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E6D                 jmp     loc_8D67
.text:0000000000008E72 ; ---------------------------------------------------------------------------
.text:0000000000008E72
.text:0000000000008E72 loc_8E72:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000008E72                 mov     r8d, 1
.text:0000000000008E78                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E7C                 jmp     loc_8CA3
.text:0000000000008E81 ; ---------------------------------------------------------------------------
.text:0000000000008E81
.text:0000000000008E81 loc_8E81:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000008E81                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E85                 mov     r8d, 1
.text:0000000000008E8B                 jmp     loc_8C97
.text:0000000000008E90 ; ---------------------------------------------------------------------------
.text:0000000000008E90
.text:0000000000008E90 loc_8E90:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000008E90                 mov     r9d, 1
.text:0000000000008E96                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E9A                 jmp     loc_8D47
.text:0000000000008E9F ; ---------------------------------------------------------------------------
.text:0000000000008E9F
.text:0000000000008E9F loc_8E9F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000008E9F                 mov     r9d, 1
.text:0000000000008EA5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008EA9                 jmp     loc_8DA8
.text:0000000000008EAE ; ---------------------------------------------------------------------------
.text:0000000000008EAE
.text:0000000000008EAE loc_8EAE:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000008EAE                 mov     r9d, 1
.text:0000000000008EB4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008EB8                 jmp     loc_8D1F
.text:0000000000008EBD ; ---------------------------------------------------------------------------
.text:0000000000008EBD
.text:0000000000008EBD loc_8EBD:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000008EBD                 mov     r8d, 1
.text:0000000000008EC3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008EC7                 jmp     loc_8DFB
.text:0000000000008EC7 ; } // starts at 8AB0
.text:0000000000008EC7 xstrtoumax      endp
.text:0000000000008EC7
.text:0000000000008EC7 ; ---------------------------------------------------------------------------
.text:0000000000008ECC                 align 10h
.text:0000000000008ED0
.text:0000000000008ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008ED0
.text:0000000000008ED0 ; Attributes: info_from_lumina
.text:0000000000008ED0
.text:0000000000008ED0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000008ED0                 public rpl_fclose
.text:0000000000008ED0 rpl_fclose      proc near               ; CODE XREF: randread_free+33↑j
.text:0000000000008ED0                                         ; close_stream+15↓p ...
.text:0000000000008ED0 ; __unwind {
.text:0000000000008ED0                 push    r12
.text:0000000000008ED2                 push    rbp
.text:0000000000008ED3                 push    rbx
.text:0000000000008ED4                 mov     rbx, rdi
.text:0000000000008ED7                 call    _fileno
.text:0000000000008EDC                 test    eax, eax
.text:0000000000008EDE                 mov     rdi, rbx        ; fp
.text:0000000000008EE1                 js      short loc_8F37
.text:0000000000008EE3                 call    ___freading
.text:0000000000008EE8                 test    eax, eax
.text:0000000000008EEA                 jnz     short loc_8F18
.text:0000000000008EEC
.text:0000000000008EEC loc_8EEC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000008EEC                 mov     rdi, rbx        ; stream
.text:0000000000008EEF                 call    rpl_fflush
.text:0000000000008EF4                 test    eax, eax
.text:0000000000008EF6                 jz      short loc_8F34
.text:0000000000008EF8                 call    ___errno_location
.text:0000000000008EFD                 mov     r12d, [rax]
.text:0000000000008F00                 mov     rdi, rbx        ; stream
.text:0000000000008F03                 mov     rbp, rax
.text:0000000000008F06                 call    _fclose
.text:0000000000008F0B                 test    r12d, r12d
.text:0000000000008F0E                 jnz     short loc_8F40
.text:0000000000008F10
.text:0000000000008F10 loc_8F10:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000008F10                 pop     rbx
.text:0000000000008F11                 pop     rbp
.text:0000000000008F12                 pop     r12
.text:0000000000008F14                 retn
.text:0000000000008F14 ; ---------------------------------------------------------------------------
.text:0000000000008F15                 align 8
.text:0000000000008F18
.text:0000000000008F18 loc_8F18:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000008F18                 mov     rdi, rbx        ; stream
.text:0000000000008F1B                 call    _fileno
.text:0000000000008F20                 xor     esi, esi        ; offset
.text:0000000000008F22                 mov     edx, 1          ; whence
.text:0000000000008F27                 mov     edi, eax        ; fd
.text:0000000000008F29                 call    _lseek
.text:0000000000008F2E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008F32                 jnz     short loc_8EEC
.text:0000000000008F34
.text:0000000000008F34 loc_8F34:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000008F34                 mov     rdi, rbx        ; stream
.text:0000000000008F37
.text:0000000000008F37 loc_8F37:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000008F37                 pop     rbx
.text:0000000000008F38                 pop     rbp
.text:0000000000008F39                 pop     r12
.text:0000000000008F3B                 jmp     _fclose
.text:0000000000008F40 ; ---------------------------------------------------------------------------
.text:0000000000008F40
.text:0000000000008F40 loc_8F40:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000008F40                 mov     [rbp+0], r12d
.text:0000000000008F44                 mov     eax, 0FFFFFFFFh
.text:0000000000008F49                 jmp     short loc_8F10
.text:0000000000008F49 ; } // starts at 8ED0
.text:0000000000008F49 rpl_fclose      endp
.text:0000000000008F49
.text:0000000000008F49 ; ---------------------------------------------------------------------------
.text:0000000000008F4B                 align 10h
.text:0000000000008F50
.text:0000000000008F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F50
.text:0000000000008F50
.text:0000000000008F50 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000008F50                 public rpl_fcntl
.text:0000000000008F50 rpl_fcntl       proc near               ; CODE XREF: main+330↑p
.text:0000000000008F50                                         ; direct_mode+11↑p ...
.text:0000000000008F50
.text:0000000000008F50 var_68          = dword ptr -68h
.text:0000000000008F50 var_60          = qword ptr -60h
.text:0000000000008F50 var_58          = qword ptr -58h
.text:0000000000008F50 var_50          = qword ptr -50h
.text:0000000000008F50 var_48          = byte ptr -48h
.text:0000000000008F50 var_38          = qword ptr -38h
.text:0000000000008F50 var_30          = qword ptr -30h
.text:0000000000008F50 var_28          = qword ptr -28h
.text:0000000000008F50 var_20          = qword ptr -20h
.text:0000000000008F50 arg_0           = byte ptr  8
.text:0000000000008F50
.text:0000000000008F50 ; __unwind {
.text:0000000000008F50                 push    r12
.text:0000000000008F52                 push    rbp
.text:0000000000008F53                 mov     ebp, edi
.text:0000000000008F55                 push    rbx
.text:0000000000008F56                 sub     rsp, 50h
.text:0000000000008F5A                 mov     rax, fs:28h
.text:0000000000008F63                 mov     [rsp+68h+var_50], rax
.text:0000000000008F68                 xor     eax, eax
.text:0000000000008F6A                 lea     rax, [rsp+68h+arg_0]
.text:0000000000008F6F                 test    esi, esi
.text:0000000000008F71                 mov     [rsp+68h+var_38], rdx
.text:0000000000008F76                 mov     [rsp+68h+var_30], rcx
.text:0000000000008F7B                 mov     [rsp+68h+var_28], r8
.text:0000000000008F80                 mov     [rsp+68h+var_60], rax
.text:0000000000008F85                 lea     rax, [rsp+68h+var_48]
.text:0000000000008F8A                 mov     [rsp+68h+var_20], r9
.text:0000000000008F8F                 mov     [rsp+68h+var_68], 10h
.text:0000000000008F96                 mov     [rsp+68h+var_58], rax
.text:0000000000008F9B                 jz      loc_91A2
.text:0000000000008FA1                 cmp     esi, 406h
.text:0000000000008FA7                 jnz     short loc_8FF0
.text:0000000000008FA9                 mov     rax, [rsp+68h+var_58]
.text:0000000000008FAE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000008FB5                 mov     [rsp+68h+var_68], 18h
.text:0000000000008FBC                 mov     r12d, [rax+10h]
.text:0000000000008FC0                 mov     edx, r12d
.text:0000000000008FC3                 js      loc_90F3
.text:0000000000008FC9                 xor     eax, eax
.text:0000000000008FCB                 mov     esi, 406h       ; cmd
.text:0000000000008FD0                 call    _fcntl
.text:0000000000008FD5                 test    eax, eax
.text:0000000000008FD7                 mov     ebx, eax
.text:0000000000008FD9                 js      loc_9168
.text:0000000000008FDF
.text:0000000000008FDF loc_8FDF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000008FDF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000008FE9                 jmp     short loc_9030
.text:0000000000008FE9 ; ---------------------------------------------------------------------------
.text:0000000000008FEB                 align 10h
.text:0000000000008FF0
.text:0000000000008FF0 loc_8FF0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000008FF0                 cmp     esi, 0Bh
.text:0000000000008FF3                 jz      short loc_9020
.text:0000000000008FF5                 jg      short loc_9050
.text:0000000000008FF7                 cmp     esi, 4
.text:0000000000008FFA                 jz      loc_90D0
.text:0000000000009000                 jg      loc_90C0
.text:0000000000009006                 cmp     esi, 2
.text:0000000000009009                 jz      loc_90D0
.text:000000000000900F                 jg      short loc_9020
.text:0000000000009011                 cmp     esi, 1
.text:0000000000009014                 jnz     short loc_9078
.text:0000000000009016                 db      2Eh
.text:0000000000009016                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009020
.text:0000000000009020 loc_9020:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000009020                                         ; rpl_fcntl+BF↑j ...
.text:0000000000009020                 mov     edi, ebp        ; fd
.text:0000000000009022                 xor     eax, eax
.text:0000000000009024                 call    _fcntl
.text:0000000000009029                 mov     ebx, eax
.text:000000000000902B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009030
.text:0000000000009030 loc_9030:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000009030                                         ; rpl_fcntl+147↓j ...
.text:0000000000009030                 mov     rcx, [rsp+68h+var_50]
.text:0000000000009035                 xor     rcx, fs:28h
.text:000000000000903E                 mov     eax, ebx
.text:0000000000009040                 jnz     loc_919D
.text:0000000000009046                 add     rsp, 50h
.text:000000000000904A                 pop     rbx
.text:000000000000904B                 pop     rbp
.text:000000000000904C                 pop     r12
.text:000000000000904E                 retn
.text:000000000000904E ; ---------------------------------------------------------------------------
.text:000000000000904F                 align 10h
.text:0000000000009050
.text:0000000000009050 loc_9050:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000009050                 cmp     esi, 407h
.text:0000000000009056                 jg      short loc_90A0
.text:0000000000009058                 cmp     esi, 406h
.text:000000000000905E                 jge     short loc_90D0
.text:0000000000009060                 cmp     esi, 401h
.text:0000000000009066                 jz      short loc_9020
.text:0000000000009068                 cmp     esi, 402h
.text:000000000000906E                 jz      short loc_90D0
.text:0000000000009070                 cmp     esi, 400h
.text:0000000000009076                 jz      short loc_90D0
.text:0000000000009078
.text:0000000000009078 loc_9078:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000009078                                         ; rpl_fcntl+164↓j ...
.text:0000000000009078                 mov     eax, [rsp+68h+var_68]
.text:000000000000907B                 cmp     eax, 2Fh ; '/'
.text:000000000000907E                 ja      loc_91BA
.text:0000000000009084                 add     rax, [rsp+68h+var_58]
.text:0000000000009089
.text:0000000000009089 loc_9089:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000009089                 mov     rdx, [rax]
.text:000000000000908C                 mov     edi, ebp        ; fd
.text:000000000000908E                 xor     eax, eax
.text:0000000000009090                 call    _fcntl
.text:0000000000009095                 mov     ebx, eax
.text:0000000000009097                 jmp     short loc_9030
.text:0000000000009097 ; ---------------------------------------------------------------------------
.text:0000000000009099                 align 20h
.text:00000000000090A0
.text:00000000000090A0 loc_90A0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:00000000000090A0                 cmp     esi, 409h
.text:00000000000090A6                 jz      short loc_90D0
.text:00000000000090A8                 jl      loc_9020
.text:00000000000090AE                 cmp     esi, 40Ah
.text:00000000000090B4                 jnz     short loc_9078
.text:00000000000090B6                 jmp     loc_9020
.text:00000000000090B6 ; ---------------------------------------------------------------------------
.text:00000000000090BB                 align 20h
.text:00000000000090C0
.text:00000000000090C0 loc_90C0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:00000000000090C0                 cmp     esi, 9
.text:00000000000090C3                 jz      loc_9020
.text:00000000000090C9                 jg      short loc_90D0
.text:00000000000090CB                 cmp     esi, 8
.text:00000000000090CE                 jnz     short loc_9078
.text:00000000000090D0
.text:00000000000090D0 loc_90D0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:00000000000090D0                                         ; rpl_fcntl+B9↑j ...
.text:00000000000090D0                 mov     eax, [rsp+68h+var_68]
.text:00000000000090D3                 cmp     eax, 2Fh ; '/'
.text:00000000000090D6                 ja      loc_91C4
.text:00000000000090DC                 add     rax, [rsp+68h+var_58]
.text:00000000000090E1
.text:00000000000090E1 loc_90E1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:00000000000090E1                 mov     edx, [rax]
.text:00000000000090E3                 mov     edi, ebp        ; fd
.text:00000000000090E5                 xor     eax, eax
.text:00000000000090E7                 call    _fcntl
.text:00000000000090EC                 mov     ebx, eax
.text:00000000000090EE                 jmp     loc_9030
.text:00000000000090F3 ; ---------------------------------------------------------------------------
.text:00000000000090F3
.text:00000000000090F3 loc_90F3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000090F3                 xor     esi, esi        ; cmd
.text:00000000000090F5                 xor     eax, eax
.text:00000000000090F7                 call    _fcntl
.text:00000000000090FC                 test    eax, eax
.text:00000000000090FE                 mov     ebx, eax
.text:0000000000009100                 js      loc_9030
.text:0000000000009106                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000910D                 jnz     loc_9030
.text:0000000000009113
.text:0000000000009113 loc_9113:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000009113                 xor     eax, eax
.text:0000000000009115                 mov     esi, 1          ; cmd
.text:000000000000911A                 mov     edi, ebx        ; fd
.text:000000000000911C                 call    _fcntl
.text:0000000000009121                 test    eax, eax
.text:0000000000009123                 js      short loc_9141
.text:0000000000009125                 or      eax, 1
.text:0000000000009128                 mov     esi, 2          ; cmd
.text:000000000000912D                 mov     edi, ebx        ; fd
.text:000000000000912F                 mov     edx, eax
.text:0000000000009131                 xor     eax, eax
.text:0000000000009133                 call    _fcntl
.text:0000000000009138                 cmp     eax, 0FFFFFFFFh
.text:000000000000913B                 jnz     loc_9030
.text:0000000000009141
.text:0000000000009141 loc_9141:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000009141                 call    ___errno_location
.text:0000000000009146                 mov     r12d, [rax]
.text:0000000000009149                 mov     rbp, rax
.text:000000000000914C                 mov     edi, ebx        ; fd
.text:000000000000914E                 call    _close
.text:0000000000009153                 mov     ebx, 0FFFFFFFFh
.text:0000000000009158                 mov     [rbp+0], r12d
.text:000000000000915C                 jmp     loc_9030
.text:000000000000915C ; ---------------------------------------------------------------------------
.text:0000000000009161                 align 8
.text:0000000000009168
.text:0000000000009168 loc_9168:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000009168                 call    ___errno_location
.text:000000000000916D                 cmp     dword ptr [rax], 16h
.text:0000000000009170                 jnz     loc_8FDF
.text:0000000000009176                 xor     esi, esi        ; cmd
.text:0000000000009178                 xor     eax, eax
.text:000000000000917A                 mov     edx, r12d
.text:000000000000917D                 mov     edi, ebp        ; fd
.text:000000000000917F                 call    _fcntl
.text:0000000000009184                 test    eax, eax
.text:0000000000009186                 mov     ebx, eax
.text:0000000000009188                 js      loc_9030
.text:000000000000918E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000009198                 jmp     loc_9113
.text:000000000000919D ; ---------------------------------------------------------------------------
.text:000000000000919D
.text:000000000000919D loc_919D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000919D                 call    ___stack_chk_fail
.text:00000000000091A2 ; ---------------------------------------------------------------------------
.text:00000000000091A2
.text:00000000000091A2 loc_91A2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:00000000000091A2                 mov     rax, [rsp+68h+var_58]
.text:00000000000091A7                 xor     esi, esi        ; cmd
.text:00000000000091A9                 mov     edx, [rax+10h]
.text:00000000000091AC                 xor     eax, eax
.text:00000000000091AE                 call    _fcntl
.text:00000000000091B3                 mov     ebx, eax
.text:00000000000091B5                 jmp     loc_9030
.text:00000000000091BA ; ---------------------------------------------------------------------------
.text:00000000000091BA
.text:00000000000091BA loc_91BA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:00000000000091BA                 mov     rax, [rsp+68h+var_60]
.text:00000000000091BF                 jmp     loc_9089
.text:00000000000091C4 ; ---------------------------------------------------------------------------
.text:00000000000091C4
.text:00000000000091C4 loc_91C4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:00000000000091C4                 mov     rax, [rsp+68h+var_60]
.text:00000000000091C9                 jmp     loc_90E1
.text:00000000000091C9 ; } // starts at 8F50
.text:00000000000091C9 rpl_fcntl       endp
.text:00000000000091C9
.text:00000000000091C9 ; ---------------------------------------------------------------------------
.text:00000000000091CE                 align 10h
.text:00000000000091D0
.text:00000000000091D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091D0
.text:00000000000091D0 ; Attributes: info_from_lumina
.text:00000000000091D0
.text:00000000000091D0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000091D0                 public rpl_fflush
.text:00000000000091D0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000091D0 ; __unwind {
.text:00000000000091D0                 test    rdi, rdi
.text:00000000000091D3                 push    rbx
.text:00000000000091D4                 mov     rbx, rdi
.text:00000000000091D7                 jz      short loc_91EA
.text:00000000000091D9                 call    ___freading
.text:00000000000091DE                 test    eax, eax
.text:00000000000091E0                 jz      short loc_91EA
.text:00000000000091E2                 test    dword ptr [rbx], 100h
.text:00000000000091E8                 jnz     short loc_91F8
.text:00000000000091EA
.text:00000000000091EA loc_91EA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000091EA                                         ; rpl_fflush+10↑j
.text:00000000000091EA                 mov     rdi, rbx        ; stream
.text:00000000000091ED                 pop     rbx
.text:00000000000091EE                 jmp     _fflush
.text:00000000000091EE ; ---------------------------------------------------------------------------
.text:00000000000091F3                 align 8
.text:00000000000091F8
.text:00000000000091F8 loc_91F8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000091F8                 mov     rdi, rbx
.text:00000000000091FB                 mov     edx, 1
.text:0000000000009200                 xor     esi, esi
.text:0000000000009202                 call    rpl_fseeko
.text:0000000000009207                 mov     rdi, rbx        ; stream
.text:000000000000920A                 pop     rbx
.text:000000000000920B                 jmp     _fflush
.text:000000000000920B ; } // starts at 91D0
.text:000000000000920B rpl_fflush      endp
.text:000000000000920B
.text:0000000000009210
.text:0000000000009210 ; =============== S U B R O U T I N E =======================================
.text:0000000000009210
.text:0000000000009210 ; Attributes: info_from_lumina
.text:0000000000009210
.text:0000000000009210 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000009210                 public rpl_fseeko
.text:0000000000009210 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000009210 ; __unwind {
.text:0000000000009210                 mov     rax, [rdi+8]
.text:0000000000009214                 cmp     [rdi+10h], rax
.text:0000000000009218                 jz      short loc_9220
.text:000000000000921A
.text:000000000000921A loc_921A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000921A                                         ; rpl_fseeko+1F↓j
.text:000000000000921A                 jmp     _fseeko
.text:000000000000921A ; ---------------------------------------------------------------------------
.text:000000000000921F                 align 20h
.text:0000000000009220
.text:0000000000009220 loc_9220:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000009220                 mov     rax, [rdi+20h]
.text:0000000000009224                 cmp     [rdi+28h], rax
.text:0000000000009228                 jnz     short loc_921A
.text:000000000000922A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000922F                 jnz     short loc_921A
.text:0000000000009231                 push    r12
.text:0000000000009233                 push    rbp
.text:0000000000009234                 mov     r12d, edx
.text:0000000000009237                 push    rbx
.text:0000000000009238                 mov     rbp, rsi
.text:000000000000923B                 mov     rbx, rdi
.text:000000000000923E                 call    _fileno
.text:0000000000009243                 mov     edx, r12d       ; whence
.text:0000000000009246                 mov     rsi, rbp        ; offset
.text:0000000000009249                 mov     edi, eax        ; fd
.text:000000000000924B                 call    _lseek
.text:0000000000009250                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009254                 jz      short loc_9262
.text:0000000000009256                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000009259                 mov     [rbx+90h], rax
.text:0000000000009260                 xor     eax, eax
.text:0000000000009262
.text:0000000000009262 loc_9262:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000009262                 pop     rbx
.text:0000000000009263                 pop     rbp
.text:0000000000009264                 pop     r12
.text:0000000000009266                 retn
.text:0000000000009266 ; } // starts at 9210
.text:0000000000009266 rpl_fseeko      endp
.text:0000000000009266
.text:0000000000009266 ; ---------------------------------------------------------------------------
.text:0000000000009267                 align 10h
.text:0000000000009270
.text:0000000000009270 ; =============== S U B R O U T I N E =======================================
.text:0000000000009270
.text:0000000000009270 ; Attributes: info_from_lumina
.text:0000000000009270
.text:0000000000009270 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000009270                 public rpl_mbrtowc
.text:0000000000009270 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000009270
.text:0000000000009270 pwc             = dword ptr -34h
.text:0000000000009270 var_30          = qword ptr -30h
.text:0000000000009270
.text:0000000000009270 ; __unwind {
.text:0000000000009270                 push    r13
.text:0000000000009272                 push    r12
.text:0000000000009274                 mov     r13, rsi
.text:0000000000009277                 push    rbp
.text:0000000000009278                 push    rbx
.text:0000000000009279                 mov     rbx, rdi
.text:000000000000927C                 mov     r12, rdx
.text:000000000000927F                 sub     rsp, 18h
.text:0000000000009283                 mov     rax, fs:28h
.text:000000000000928C                 mov     [rsp+38h+var_30], rax
.text:0000000000009291                 xor     eax, eax
.text:0000000000009293                 lea     rax, [rsp+38h+pwc]
.text:0000000000009298                 test    rdi, rdi
.text:000000000000929B                 cmovz   rbx, rax
.text:000000000000929F                 mov     rdi, rbx        ; pwc
.text:00000000000092A2                 call    _mbrtowc
.text:00000000000092A7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000092AB                 mov     rbp, rax
.text:00000000000092AE                 jbe     short loc_92D0
.text:00000000000092B0                 test    r12, r12
.text:00000000000092B3                 jz      short loc_92D0
.text:00000000000092B5                 xor     edi, edi
.text:00000000000092B7                 call    hard_locale
.text:00000000000092BC                 test    al, al
.text:00000000000092BE                 jnz     short loc_92D0
.text:00000000000092C0                 movzx   eax, byte ptr [r13+0]
.text:00000000000092C5                 mov     ebp, 1
.text:00000000000092CA                 mov     [rbx], eax
.text:00000000000092CC                 nop     dword ptr [rax+00h]
.text:00000000000092D0
.text:00000000000092D0 loc_92D0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000092D0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000092D0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000092D5                 xor     rdx, fs:28h
.text:00000000000092DE                 mov     rax, rbp
.text:00000000000092E1                 jnz     short loc_92EE
.text:00000000000092E3                 add     rsp, 18h
.text:00000000000092E7                 pop     rbx
.text:00000000000092E8                 pop     rbp
.text:00000000000092E9                 pop     r12
.text:00000000000092EB                 pop     r13
.text:00000000000092ED                 retn
.text:00000000000092EE ; ---------------------------------------------------------------------------
.text:00000000000092EE
.text:00000000000092EE loc_92EE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000092EE                 call    ___stack_chk_fail
.text:00000000000092EE ; } // starts at 9270
.text:00000000000092EE rpl_mbrtowc     endp
.text:00000000000092EE
.text:00000000000092EE ; ---------------------------------------------------------------------------
.text:00000000000092F3                 align 20h
.text:0000000000009300
.text:0000000000009300 ; =============== S U B R O U T I N E =======================================
.text:0000000000009300
.text:0000000000009300 ; Attributes: info_from_lumina
.text:0000000000009300
.text:0000000000009300 ; int __fastcall close_stream(FILE *stream)
.text:0000000000009300                 public close_stream
.text:0000000000009300 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000009300                                         ; close_stdout+33↑p
.text:0000000000009300 ; __unwind {
.text:0000000000009300                 push    r12
.text:0000000000009302                 push    rbp
.text:0000000000009303                 mov     rbp, rdi
.text:0000000000009306                 push    rbx
.text:0000000000009307                 call    ___fpending
.text:000000000000930C                 mov     ebx, [rbp+0]
.text:000000000000930F                 mov     rdi, rbp        ; stream
.text:0000000000009312                 mov     r12, rax
.text:0000000000009315                 call    rpl_fclose
.text:000000000000931A                 and     ebx, 20h
.text:000000000000931D                 test    ebx, ebx
.text:000000000000931F                 jnz     short loc_9338
.text:0000000000009321                 test    eax, eax
.text:0000000000009323                 jz      short loc_932F
.text:0000000000009325                 test    r12, r12
.text:0000000000009328                 mov     eax, 0FFFFFFFFh
.text:000000000000932D                 jz      short loc_9368
.text:000000000000932F
.text:000000000000932F loc_932F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000932F                 pop     rbx
.text:0000000000009330                 pop     rbp
.text:0000000000009331                 pop     r12
.text:0000000000009333                 retn
.text:0000000000009333 ; ---------------------------------------------------------------------------
.text:0000000000009334                 align 8
.text:0000000000009338
.text:0000000000009338 loc_9338:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000009338                 test    eax, eax
.text:000000000000933A                 jnz     short loc_9358
.text:000000000000933C                 call    ___errno_location
.text:0000000000009341                 mov     dword ptr [rax], 0
.text:0000000000009347                 mov     eax, 0FFFFFFFFh
.text:000000000000934C                 pop     rbx
.text:000000000000934D                 pop     rbp
.text:000000000000934E                 pop     r12
.text:0000000000009350                 retn
.text:0000000000009350 ; ---------------------------------------------------------------------------
.text:0000000000009351                 align 8
.text:0000000000009358
.text:0000000000009358 loc_9358:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000009358                 pop     rbx
.text:0000000000009359                 mov     eax, 0FFFFFFFFh
.text:000000000000935E                 pop     rbp
.text:000000000000935F                 pop     r12
.text:0000000000009361                 retn
.text:0000000000009361 ; ---------------------------------------------------------------------------
.text:0000000000009362                 align 8
.text:0000000000009368
.text:0000000000009368 loc_9368:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000009368                 call    ___errno_location
.text:000000000000936D                 cmp     dword ptr [rax], 9
.text:0000000000009370                 pop     rbx
.text:0000000000009371                 pop     rbp
.text:0000000000009372                 pop     r12
.text:0000000000009374                 setnz   al
.text:0000000000009377                 movzx   eax, al
.text:000000000000937A                 neg     eax
.text:000000000000937C                 retn
.text:000000000000937C ; } // starts at 9300
.text:000000000000937C close_stream    endp
.text:000000000000937C
.text:000000000000937C ; ---------------------------------------------------------------------------
.text:000000000000937D                 align 20h
.text:0000000000009380
.text:0000000000009380 ; =============== S U B R O U T I N E =======================================
.text:0000000000009380
.text:0000000000009380
.text:0000000000009380                 public fopen_safer
.text:0000000000009380 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:0000000000009380 ; __unwind {
.text:0000000000009380                 push    r12
.text:0000000000009382                 push    rbp
.text:0000000000009383                 mov     rbp, rsi
.text:0000000000009386                 push    rbx
.text:0000000000009387                 call    _fopen
.text:000000000000938C                 test    rax, rax
.text:000000000000938F                 mov     rbx, rax
.text:0000000000009392                 jz      short loc_93A1
.text:0000000000009394                 mov     rdi, rax        ; stream
.text:0000000000009397                 call    _fileno
.text:000000000000939C                 cmp     eax, 2
.text:000000000000939F                 jbe     short loc_93B0
.text:00000000000093A1
.text:00000000000093A1 loc_93A1:                               ; CODE XREF: fopen_safer+12↑j
.text:00000000000093A1                                         ; fopen_safer+5B↓j ...
.text:00000000000093A1                 mov     rax, rbx
.text:00000000000093A4                 pop     rbx
.text:00000000000093A5                 pop     rbp
.text:00000000000093A6                 pop     r12
.text:00000000000093A8                 retn
.text:00000000000093A8 ; ---------------------------------------------------------------------------
.text:00000000000093A9                 align 10h
.text:00000000000093B0
.text:00000000000093B0 loc_93B0:                               ; CODE XREF: fopen_safer+1F↑j
.text:00000000000093B0                 mov     edi, eax
.text:00000000000093B2                 call    dup_safer
.text:00000000000093B7                 test    eax, eax
.text:00000000000093B9                 mov     r12d, eax
.text:00000000000093BC                 js      short loc_93F8
.text:00000000000093BE                 mov     rdi, rbx        ; stream
.text:00000000000093C1                 call    rpl_fclose
.text:00000000000093C6                 test    eax, eax
.text:00000000000093C8                 jnz     short loc_93DD
.text:00000000000093CA                 mov     rsi, rbp        ; modes
.text:00000000000093CD                 mov     edi, r12d       ; fd
.text:00000000000093D0                 call    _fdopen
.text:00000000000093D5                 test    rax, rax
.text:00000000000093D8                 mov     rbx, rax
.text:00000000000093DB                 jnz     short loc_93A1
.text:00000000000093DD
.text:00000000000093DD loc_93DD:                               ; CODE XREF: fopen_safer+48↑j
.text:00000000000093DD                 call    ___errno_location
.text:00000000000093E2                 mov     ebp, [rax]
.text:00000000000093E4                 mov     rbx, rax
.text:00000000000093E7                 mov     edi, r12d       ; fd
.text:00000000000093EA                 call    _close
.text:00000000000093EF                 mov     [rbx], ebp
.text:00000000000093F1                 xor     ebx, ebx
.text:00000000000093F3                 jmp     short loc_93A1
.text:00000000000093F3 ; ---------------------------------------------------------------------------
.text:00000000000093F5                 align 8
.text:00000000000093F8
.text:00000000000093F8 loc_93F8:                               ; CODE XREF: fopen_safer+3C↑j
.text:00000000000093F8                 call    ___errno_location
.text:00000000000093FD                 mov     r12d, [rax]
.text:0000000000009400                 mov     rbp, rax
.text:0000000000009403                 mov     rdi, rbx        ; stream
.text:0000000000009406                 call    rpl_fclose
.text:000000000000940B                 xor     ebx, ebx
.text:000000000000940D                 mov     [rbp+0], r12d
.text:0000000000009411                 jmp     short loc_93A1
.text:0000000000009411 ; } // starts at 9380
.text:0000000000009411 fopen_safer     endp
.text:0000000000009411
.text:0000000000009411 ; ---------------------------------------------------------------------------
.text:0000000000009413                 align 20h
.text:0000000000009420
.text:0000000000009420 ; =============== S U B R O U T I N E =======================================
.text:0000000000009420
.text:0000000000009420
.text:0000000000009420                 public hard_locale
.text:0000000000009420 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000009420 ; __unwind {
.text:0000000000009420                 sub     rsp, 8
.text:0000000000009424                 xor     esi, esi        ; locale
.text:0000000000009426                 call    _setlocale
.text:000000000000942B                 mov     rdx, rax
.text:000000000000942E                 mov     eax, 1
.text:0000000000009433                 test    rdx, rdx
.text:0000000000009436                 jz      short loc_9455
.text:0000000000009438                 lea     rdi, aC         ; "C"
.text:000000000000943F                 mov     ecx, 2
.text:0000000000009444                 mov     rsi, rdx
.text:0000000000009447                 repe cmpsb
.text:0000000000009449                 setnbe  cl
.text:000000000000944C                 sbb     cl, 0
.text:000000000000944F                 xor     eax, eax
.text:0000000000009451                 test    cl, cl
.text:0000000000009453                 jnz     short loc_9460
.text:0000000000009455
.text:0000000000009455 loc_9455:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000009455                 add     rsp, 8
.text:0000000000009459                 retn
.text:0000000000009459 ; ---------------------------------------------------------------------------
.text:000000000000945A                 align 20h
.text:0000000000009460
.text:0000000000009460 loc_9460:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000009460                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000009467                 mov     ecx, 6
.text:000000000000946C                 mov     rsi, rdx
.text:000000000000946F                 repe cmpsb
.text:0000000000009471                 setnbe  al
.text:0000000000009474                 sbb     al, 0
.text:0000000000009476                 test    al, al
.text:0000000000009478                 setnz   al
.text:000000000000947B                 add     rsp, 8
.text:000000000000947F                 retn
.text:000000000000947F ; } // starts at 9420
.text:000000000000947F hard_locale     endp
.text:000000000000947F
.text:0000000000009480
.text:0000000000009480 ; =============== S U B R O U T I N E =======================================
.text:0000000000009480
.text:0000000000009480
.text:0000000000009480                 public locale_charset
.text:0000000000009480 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009480 ; __unwind {
.text:0000000000009480                 sub     rsp, 8
.text:0000000000009484                 mov     edi, 0Eh        ; item
.text:0000000000009489                 call    _nl_langinfo
.text:000000000000948E                 test    rax, rax
.text:0000000000009491                 jz      short loc_94B0
.text:0000000000009493                 cmp     byte ptr [rax], 0
.text:0000000000009496                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000949D                 cmovz   rax, rdx
.text:00000000000094A1                 add     rsp, 8
.text:00000000000094A5                 retn
.text:00000000000094A5 ; ---------------------------------------------------------------------------
.text:00000000000094A6                 align 10h
.text:00000000000094B0
.text:00000000000094B0 loc_94B0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000094B0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000094B7                 add     rsp, 8
.text:00000000000094BB                 retn
.text:00000000000094BB ; } // starts at 9480
.text:00000000000094BB locale_charset  endp
.text:00000000000094BB
.text:00000000000094BB ; ---------------------------------------------------------------------------
.text:00000000000094BC                 align 20h
.text:00000000000094C0
.text:00000000000094C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094C0
.text:00000000000094C0
.text:00000000000094C0                 public dup_safer
.text:00000000000094C0 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:00000000000094C0                                         ; fopen_safer+32↑p
.text:00000000000094C0 ; __unwind {
.text:00000000000094C0                 mov     edx, 3
.text:00000000000094C5                 xor     esi, esi
.text:00000000000094C7                 xor     eax, eax
.text:00000000000094C9                 jmp     rpl_fcntl
.text:00000000000094C9 ; } // starts at 94C0
.text:00000000000094C9 dup_safer       endp
.text:00000000000094C9
.text:00000000000094C9 ; ---------------------------------------------------------------------------
.text:00000000000094CE                 align 10h
.text:00000000000094D0
.text:00000000000094D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094D0
.text:00000000000094D0 ; Attributes: info_from_lumina
.text:00000000000094D0
.text:00000000000094D0 ; void _libc_csu_init(void)
.text:00000000000094D0                 public __libc_csu_init
.text:00000000000094D0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000094D0 ; __unwind {
.text:00000000000094D0                 push    r15
.text:00000000000094D2                 push    r14
.text:00000000000094D4                 mov     r15, rdx
.text:00000000000094D7                 push    r13
.text:00000000000094D9                 push    r12
.text:00000000000094DB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000094E2                 push    rbp
.text:00000000000094E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000094EA                 push    rbx
.text:00000000000094EB                 mov     r13d, edi
.text:00000000000094EE                 mov     r14, rsi
.text:00000000000094F1                 sub     rbp, r12
.text:00000000000094F4                 sub     rsp, 8
.text:00000000000094F8                 sar     rbp, 3
.text:00000000000094FC                 call    _init_proc
.text:0000000000009501                 test    rbp, rbp
.text:0000000000009504                 jz      short loc_9526
.text:0000000000009506                 xor     ebx, ebx
.text:0000000000009508                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009510
.text:0000000000009510 loc_9510:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000009510                 mov     rdx, r15
.text:0000000000009513                 mov     rsi, r14
.text:0000000000009516                 mov     edi, r13d
.text:0000000000009519                 call    ds:(__frame_dummy_init_array_entry - 20D950h)[r12+rbx*8]
.text:000000000000951D                 add     rbx, 1
.text:0000000000009521                 cmp     rbp, rbx
.text:0000000000009524                 jnz     short loc_9510
.text:0000000000009526
.text:0000000000009526 loc_9526:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000009526                 add     rsp, 8
.text:000000000000952A                 pop     rbx
.text:000000000000952B                 pop     rbp
.text:000000000000952C                 pop     r12
.text:000000000000952E                 pop     r13
.text:0000000000009530                 pop     r14
.text:0000000000009532                 pop     r15
.text:0000000000009534                 retn
.text:0000000000009534 ; } // starts at 94D0
.text:0000000000009534 __libc_csu_init endp
.text:0000000000009534
.text:0000000000009534 ; ---------------------------------------------------------------------------
.text:0000000000009535                 align 20h
.text:0000000000009540
.text:0000000000009540 ; =============== S U B R O U T I N E =======================================
.text:0000000000009540
.text:0000000000009540
.text:0000000000009540 ; void _libc_csu_fini(void)
.text:0000000000009540                 public __libc_csu_fini
.text:0000000000009540 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000009540 ; __unwind {
.text:0000000000009540                 rep retn
.text:0000000000009540 ; } // starts at 9540
.text:0000000000009540 __libc_csu_fini endp
.text:0000000000009540
.text:0000000000009540 ; ---------------------------------------------------------------------------
.text:0000000000009542                 align 10h
.text:0000000000009550
.text:0000000000009550 ; =============== S U B R O U T I N E =======================================
.text:0000000000009550
.text:0000000000009550
.text:0000000000009550 atexit          proc near               ; CODE XREF: main+7D↑p
.text:0000000000009550                                         ; main+2E8↑p
.text:0000000000009550 ; __unwind {
.text:0000000000009550                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000009557                 xor     esi, esi        ; obj
.text:0000000000009559                 jmp     ___cxa_atexit
.text:0000000000009559 ; } // starts at 9550
.text:0000000000009559 atexit          endp
.text:0000000000009559
.text:0000000000009559 _text           ends
.text:0000000000009559
LOAD:000000000000955E ; ===========================================================================
LOAD:000000000000955E
LOAD:000000000000955E ; Segment type: Pure code
LOAD:000000000000955E ; Segment permissions: Read/Execute
LOAD:000000000000955E LOAD            segment byte public 'CODE' use64
LOAD:000000000000955E                 assume cs:LOAD
LOAD:000000000000955E                 ;org 955Eh
LOAD:000000000000955E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000955E                 align 20h
LOAD:000000000000955E LOAD            ends
LOAD:000000000000955E
.fini:0000000000009560 ; ===========================================================================
.fini:0000000000009560
.fini:0000000000009560 ; Segment type: Pure code
.fini:0000000000009560 ; Segment permissions: Read/Execute
.fini:0000000000009560 _fini           segment dword public 'CODE' use64
.fini:0000000000009560                 assume cs:_fini
.fini:0000000000009560                 ;org 9560h
.fini:0000000000009560                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000009560
.fini:0000000000009560 ; =============== S U B R O U T I N E =======================================
.fini:0000000000009560
.fini:0000000000009560
.fini:0000000000009560                 public _term_proc
.fini:0000000000009560 _term_proc      proc near
.fini:0000000000009560                 sub     rsp, 8          ; _fini
.fini:0000000000009564                 add     rsp, 8
.fini:0000000000009568                 retn
.fini:0000000000009568 _term_proc      endp
.fini:0000000000009568
.fini:0000000000009568 _fini           ends
.fini:0000000000009568
LOAD:0000000000009569 ; ===========================================================================
LOAD:0000000000009569
LOAD:0000000000009569 ; Segment type: Pure code
LOAD:0000000000009569 ; Segment permissions: Read/Execute
LOAD:0000000000009569 LOAD            segment byte public 'CODE' use64
LOAD:0000000000009569                 assume cs:LOAD
LOAD:0000000000009569                 ;org 9569h
LOAD:0000000000009569                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000009569                 align 20h
LOAD:0000000000009569 LOAD            ends
LOAD:0000000000009569
.rodata:0000000000009580 ; ===========================================================================
.rodata:0000000000009580
.rodata:0000000000009580 ; Segment type: Pure data
.rodata:0000000000009580 ; Segment permissions: Read
.rodata:0000000000009580 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000009580                 assume cs:_rodata
.rodata:0000000000009580                 ;org 9580h
.rodata:0000000000009580                 public _IO_stdin_used
.rodata:0000000000009580 _IO_stdin_used  db    1
.rodata:0000000000009581                 db    0
.rodata:0000000000009582                 db    2
.rodata:0000000000009583                 db    0
.rodata:0000000000009584 ; const char aSFdatasyncFail[]
.rodata:0000000000009584 aSFdatasyncFail db '%s: fdatasync failed',0
.rodata:0000000000009584                                         ; DATA XREF: dosync:loc_2C48↑o
.rodata:0000000000009599 ; const char aSFsyncFailed[]
.rodata:0000000000009599 aSFsyncFailed   db '%s: fsync failed',0 ; DATA XREF: dosync+4B↑o
.rodata:00000000000095AA ; const char aSCannotRewind[]
.rodata:00000000000095AA aSCannotRewind  db '%s: cannot rewind',0
.rodata:00000000000095AA                                         ; DATA XREF: dopass:loc_2D72↑o
.rodata:00000000000095BC ; const char aSPassLuLuS[]
.rodata:00000000000095BC aSPassLuLuS     db '%s: pass %lu/%lu (%s)...',0
.rodata:00000000000095BC                                         ; DATA XREF: dopass:loc_3150↑o
.rodata:00000000000095D5 ; const char aSFileTooLarge[]
.rodata:00000000000095D5 aSFileTooLarge  db '%s: file too large',0
.rodata:00000000000095D5                                         ; DATA XREF: dopass:loc_30D1↑o
.rodata:00000000000095E8 ; const char aSLseekFailed[]
.rodata:00000000000095E8 aSLseekFailed   db '%s: lseek failed',0 ; DATA XREF: dopass+3EC↑o
.rodata:00000000000095F9 ; const char aSPassLuLuSS[]
.rodata:00000000000095F9 aSPassLuLuSS    db '%s: pass %lu/%lu (%s)...%s',0
.rodata:00000000000095F9                                         ; DATA XREF: dopass:loc_3471↑o
.rodata:0000000000009614 a02x02x02x      db '%02x%02x%02x',0     ; DATA XREF: dopass+24C↑o
.rodata:0000000000009621 ; const char aSFstatFailed[]
.rodata:0000000000009621 aSFstatFailed   db '%s: fstat failed',0 ; DATA XREF: do_wipefd:loc_3720↑o
.rodata:0000000000009632 ; const char aSInvalidFileTy[]
.rodata:0000000000009632 aSInvalidFileTy db '%s: invalid file type',0
.rodata:0000000000009632                                         ; DATA XREF: do_wipefd:loc_35AE↑o
.rodata:0000000000009648 ; const char aSFileHasNegati[]
.rodata:0000000000009648 aSFileHasNegati db '%s: file has negative size',0
.rodata:0000000000009648                                         ; DATA XREF: do_wipefd+37F↑o
.rodata:0000000000009663 ; const char aSErrorTruncati[]
.rodata:0000000000009663 aSErrorTruncati db '%s: error truncating',0
.rodata:0000000000009663                                         ; DATA XREF: do_wipefd+47E↑o
.rodata:0000000000009678 aShred          db 'shred',0            ; DATA XREF: main+287↑o
.rodata:0000000000009678                                         ; usage+25B↑o ...
.rodata:000000000000967E asc_967E        db '[',0                ; DATA XREF: usage+267↑o
.rodata:0000000000009680 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+28E↑o
.rodata:0000000000009690 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000009690                                         ; DATA XREF: usage+2BE↑o
.rodata:0000000000009690                                         ; usage+3BC↑o ...
.rodata:00000000000096A6 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2CF↑o
.rodata:00000000000096B0 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2DB↑o
.rodata:00000000000096BF aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+26E↑o
.rodata:00000000000096C9 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+29A↑o
.rodata:00000000000096D3 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2B2↑o
.rodata:00000000000096DD ; const char aSOnlineHelpS[]
.rodata:00000000000096DD aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+32A↑o
.rodata:00000000000096DD                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000096F4 unk_96F4        db  47h ; G             ; DATA XREF: main+280↑o
.rodata:00000000000096F4                                         ; usage+346↑o ...
.rodata:00000000000096F5                 db  4Eh ; N
.rodata:00000000000096F6                 db  55h ; U
.rodata:00000000000096F7                 db  20h
.rodata:00000000000096F8 ; const char domainname[]
.rodata:00000000000096F8 domainname      db 'coreutils',0        ; DATA XREF: main+5E↑o
.rodata:00000000000096F8                                         ; main+6A↑o ...
.rodata:0000000000009702 ; const char s2[]
.rodata:0000000000009702 s2              db 'en_',0              ; DATA XREF: usage+36D↑o
.rodata:0000000000009702                                         ; usage+42E↑o
.rodata:0000000000009706 ; const char aFullDocumentat[]
.rodata:0000000000009706 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000009706                                         ; DATA XREF: usage:loc_3FA9↑o
.rodata:0000000000009706                                         ; usage:loc_4066↑o
.rodata:0000000000009721 ; const char dirname[]
.rodata:0000000000009721 dirname         db '/usr/local/share/locale',0
.rodata:0000000000009721                                         ; DATA XREF: main+57↑o
.rodata:0000000000009739 ; const char msgid[]
.rodata:0000000000009739 msgid           db 'invalid number of passes',0
.rodata:0000000000009739                                         ; DATA XREF: main+113↑o
.rodata:0000000000009752 aRemove         db '--remove',0         ; DATA XREF: main+225↑o
.rodata:000000000000975B ; const char aInvalidFileSiz[]
.rodata:000000000000975B aInvalidFileSiz db 'invalid file size',0
.rodata:000000000000975B                                         ; DATA XREF: main:loc_22F0↑o
.rodata:000000000000975B                                         ; .data.rel.ro:000000000020D9C0↓o
.rodata:000000000000976D aCbbkkmgtpezy0  db 'cbBkKMGTPEZY0',0    ; DATA XREF: main+1CE↑o
.rodata:000000000000977B aColinPlumb     db 'Colin Plumb',0      ; DATA XREF: main+279↑o
.rodata:0000000000009787 ; const char shortopts[]
.rodata:0000000000009787 shortopts       db 'fn:s:uvxz',0        ; DATA XREF: main:loc_21D8↑o
.rodata:0000000000009791 ; const char aMissingFileOpe[]
.rodata:0000000000009791 aMissingFileOpe db 'missing file operand',0
.rodata:0000000000009791                                         ; DATA XREF: main:loc_299C↑o
.rodata:00000000000097A6 ; const char aSFcntlFailed[]
.rodata:00000000000097A6 aSFcntlFailed   db '%s: fcntl failed',0 ; DATA XREF: main:loc_261E↑o
.rodata:00000000000097B7 ; const char aSFailedToClose[]
.rodata:00000000000097B7 aSFailedToClose db '%s: failed to close',0
.rodata:00000000000097B7                                         ; DATA XREF: main:loc_25EA↑o
.rodata:00000000000097B7                                         ; main+6D3↑o
.rodata:00000000000097CB ; const char aSRemoving[]
.rodata:00000000000097CB aSRemoving      db '%s: removing',0     ; DATA XREF: main:loc_289B↑o
.rodata:00000000000097D8 ; const char file[]
.rodata:00000000000097D8 file            db '../coreutils-8.31/src/shred.c',0
.rodata:00000000000097D8                                         ; DATA XREF: main+88E↑o
.rodata:00000000000097F6 ; const char aSRenamedToS[]
.rodata:00000000000097F6 aSRenamedToS    db '%s: renamed to %s',0
.rodata:00000000000097F6                                         ; DATA XREF: main+7D7↑o
.rodata:0000000000009808 ; const char aSFailedToRemov[]
.rodata:0000000000009808 aSFailedToRemov db '%s: failed to remove',0
.rodata:0000000000009808                                         ; DATA XREF: main:loc_2867↑o
.rodata:0000000000009808                                         ; .data.rel.ro:000000000020DA00↓o
.rodata:000000000000981D ; const char aSRemoved[]
.rodata:000000000000981D aSRemoved       db '%s: removed',0      ; DATA XREF: main:loc_296C↑o
.rodata:0000000000009829 aExact          db 'exact',0            ; DATA XREF: .data.rel.ro:long_opts↓o
.rodata:000000000000982F aForce          db 'force',0            ; DATA XREF: .data.rel.ro:000000000020D980↓o
.rodata:0000000000009835 aIterations     db 'iterations',0       ; DATA XREF: .data.rel.ro:000000000020D9A0↓o
.rodata:0000000000009840 aRandomSource   db 'random-source',0    ; DATA XREF: .data.rel.ro:000000000020D9E0↓o
.rodata:000000000000984E aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020DA20↓o
.rodata:0000000000009856 aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:000000000020DA40↓o
.rodata:000000000000985B unk_985B        db  68h ; h             ; DATA XREF: .data.rel.ro:000000000020DA60↓o
.rodata:000000000000985C                 db  65h ; e
.rodata:000000000000985D                 db  6Ch ; l
.rodata:000000000000985E ; const char assertion[2]
.rodata:000000000000985E assertion       db 'p',0                ; DATA XREF: main+895↑o
.rodata:0000000000009860 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020DA80↓o
.rodata:0000000000009868 aUnlink_0       db 'unlink',0           ; DATA XREF: .data.rel.ro:remove_args↓o
.rodata:000000000000986F aWipe           db 'wipe',0             ; DATA XREF: .data.rel.ro:000000000020DAC8↓o
.rodata:0000000000009874 aWipesync       db 'wipesync',0         ; DATA XREF: .data.rel.ro:000000000020DAD0↓o
.rodata:000000000000987D                 align 20h
.rodata:0000000000009880 ; const char aSErrorWritingA[]
.rodata:0000000000009880 aSErrorWritingA db '%s: error writing at offset %s',0
.rodata:0000000000009880                                         ; DATA XREF: dopass+373↑o
.rodata:000000000000989F                 align 20h
.rodata:00000000000098A0 ; const char aSPassLuLuSSSD[]
.rodata:00000000000098A0 aSPassLuLuSSSD  db '%s: pass %lu/%lu (%s)...%s/%s %d%%',0
.rodata:00000000000098A0                                         ; DATA XREF: dopass+68D↑o
.rodata:00000000000098C3                 align 8
.rodata:00000000000098C8 ; const char aTrySHelpForMor[]
.rodata:00000000000098C8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000098C8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000098EF                 align 10h
.rodata:00000000000098F0 ; const char aUsageSOptionFi[]
.rodata:00000000000098F0 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE...',0Ah,0
.rodata:00000000000098F0                                         ; DATA XREF: usage:loc_3C7D↑o
.rodata:000000000000990F                 align 10h
.rodata:0000000000009910 ; const char aOverwriteTheSp[]
.rodata:0000000000009910 aOverwriteTheSp db 'Overwrite the specified FILE(s) repeatedly, in order to make it h'
.rodata:0000000000009910                                         ; DATA XREF: usage+84↑o
.rodata:0000000000009910                 db 'arder',0Ah
.rodata:0000000000009910                 db 'for even very expensive hardware probing to recover the data.',0Ah
.rodata:0000000000009910                 db 0
.rodata:0000000000009996                 align 8
.rodata:0000000000009998 ; const char aIfFileIsShredS[]
.rodata:0000000000009998 aIfFileIsShredS db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000009998                 db 'If FILE is -, shred standard output.',0Ah,0
.rodata:00000000000099BF                 align 20h
.rodata:00000000000099C0 ; const char aMandatoryArgum[]
.rodata:00000000000099C0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:00000000000099C0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000099C0                 db 'ns too.',0Ah,0
.rodata:0000000000009A0B                 align 10h
.rodata:0000000000009A10 ; const char aFForceChangePe[]
.rodata:0000000000009A10 aFForceChangePe db '  -f, --force    change permissions to allow writing if necessary'
.rodata:0000000000009A10                                         ; DATA XREF: usage+EC↑o
.rodata:0000000000009A10                 db 0Ah
.rodata:0000000000009A10                 db '  -n, --iterations=N  overwrite N times instead of the default (%'
.rodata:0000000000009A10                 db 'd)',0Ah
.rodata:0000000000009A10                 db '      --random-source=FILE  get random bytes from FILE',0Ah
.rodata:0000000000009A10                 db '  -s, --size=N   shred this many bytes (suffixes like K, M, G acc'
.rodata:0000000000009A10                 db 'epted)',0Ah,0
.rodata:0000000000009B16                 align 8
.rodata:0000000000009B18 ; const char aUDeallocateAnd[]
.rodata:0000000000009B18 aUDeallocateAnd db '  -u             deallocate and remove file after overwriting',0Ah
.rodata:0000000000009B18                                         ; DATA XREF: usage+11A↑o
.rodata:0000000000009B18                 db '      --remove[=HOW]  like -u but give control on HOW to delete; '
.rodata:0000000000009B18                 db ' See below',0Ah
.rodata:0000000000009B18                 db '  -v, --verbose  show progress',0Ah
.rodata:0000000000009B18                 db '  -x, --exact    do not round file sizes up to the next full bloc'
.rodata:0000000000009B18                 db 'k;',0Ah
.rodata:0000000000009B18                 db '                   this is the default for non-regular files',0Ah
.rodata:0000000000009B18                 db '  -z, --zero     add a final overwrite with zeros to hide shreddi'
.rodata:0000000000009B18                 db 'ng',0Ah,0
.rodata:0000000000009C87                 align 8
.rodata:0000000000009C88 ; const char aHelpDisplayThi[]
.rodata:0000000000009C88 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000009C88                                         ; DATA XREF: usage+13F↑o
.rodata:0000000000009CB5                 align 8
.rodata:0000000000009CB8 ; const char aVersionOutputV[]
.rodata:0000000000009CB8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000009CB8                                         ; DATA XREF: usage+164↑o
.rodata:0000000000009CEE                 align 10h
.rodata:0000000000009CF0 ; const char aDeleteFileSIfR[]
.rodata:0000000000009CF0 aDeleteFileSIfR db 0Ah                  ; DATA XREF: usage+189↑o
.rodata:0000000000009CF0                 db 'Delete FILE(s) if --remove (-u) is specified.  The default is not'
.rodata:0000000000009CF0                 db ' to remove',0Ah
.rodata:0000000000009CF0                 db 'the files because it is common to operate on device files like /d'
.rodata:0000000000009CF0                 db 'ev/hda,',0Ah
.rodata:0000000000009CF0                 db 'and those files usually should not be removed.',0Ah
.rodata:0000000000009CF0                 db 'The optional HOW parameter indicates how to remove a directory en'
.rodata:0000000000009CF0                 db 'try:',0Ah
.rodata:0000000000009CF0                 db 27h,'unlink',27h,' => use a standard unlink call.',0Ah
.rodata:0000000000009CF0                 db 27h,'wipe',27h,' => also first obfuscate bytes in the name.',0Ah
.rodata:0000000000009CF0                 db 27h,'wipesync',27h,' => also sync each obfuscated byte to disk.',0Ah
.rodata:0000000000009CF0                 db 'The default mode is ',27h,'wipesync',27h,', but note it can be ex'
.rodata:0000000000009CF0                 db 'pensive.',0Ah
.rodata:0000000000009CF0                 db 0Ah,0
.rodata:0000000000009ECB                 align 10h
.rodata:0000000000009ED0 ; const char aCautionNoteTha[]
.rodata:0000000000009ED0 aCautionNoteTha db 'CAUTION: Note that shred relies on a very important assumption:',0Ah
.rodata:0000000000009ED0                                         ; DATA XREF: usage+1AE↑o
.rodata:0000000000009ED0                 db 'that the file system overwrites data in place.  This is the tradi'
.rodata:0000000000009ED0                 db 'tional',0Ah
.rodata:0000000000009ED0                 db 'way to do things, but many modern file system designs do not sati'
.rodata:0000000000009ED0                 db 'sfy this',0Ah
.rodata:0000000000009ED0                 db 'assumption.  The following are examples of file systems on which '
.rodata:0000000000009ED0                 db 'shred is',0Ah
.rodata:0000000000009ED0                 db 'not effective, or is not guaranteed to be effective in all file s'
.rodata:0000000000009ED0                 db 'ystem modes:',0Ah
.rodata:0000000000009ED0                 db 0Ah,0
.rodata:000000000000A03C                 align 20h
.rodata:000000000000A040 ; const char aLogStructuredO[]
.rodata:000000000000A040 aLogStructuredO db '* log-structured or journaled file systems, such as those supplie'
.rodata:000000000000A040                                         ; DATA XREF: usage+1D3↑o
.rodata:000000000000A040                 db 'd with',0Ah
.rodata:000000000000A040                 db 'AIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)',0Ah
.rodata:000000000000A040                 db 0Ah
.rodata:000000000000A040                 db '* file systems that write redundant data and carry on even if som'
.rodata:000000000000A040                 db 'e writes',0Ah
.rodata:000000000000A040                 db 'fail, such as RAID-based file systems',0Ah
.rodata:000000000000A040                 db 0Ah
.rodata:000000000000A040                 db '* file systems that make snapshots, such as Network Appliance',27h
.rodata:000000000000A040                 db 's NFS server',0Ah
.rodata:000000000000A040                 db 0Ah,0
.rodata:000000000000A17C                 align 20h
.rodata:000000000000A180 ; const char aFileSystemsTha[]
.rodata:000000000000A180 aFileSystemsTha db '* file systems that cache in temporary locations, such as NFS',0Ah
.rodata:000000000000A180                                         ; DATA XREF: usage+1F8↑o
.rodata:000000000000A180                 db 'version 3 clients',0Ah
.rodata:000000000000A180                 db 0Ah
.rodata:000000000000A180                 db '* compressed file systems',0Ah
.rodata:000000000000A180                 db 0Ah,0
.rodata:000000000000A1ED                 align 10h
.rodata:000000000000A1F0 ; const char aInTheCaseOfExt[]
.rodata:000000000000A1F0 aInTheCaseOfExt db 'In the case of ext3 file systems, the above disclaimer applies',0Ah
.rodata:000000000000A1F0                                         ; DATA XREF: usage+21D↑o
.rodata:000000000000A1F0                 db '(and shred is thus of limited effectiveness) only in data=journal'
.rodata:000000000000A1F0                 db ' mode,',0Ah
.rodata:000000000000A1F0                 db 'which journals file data in addition to just metadata.  In both t'
.rodata:000000000000A1F0                 db 'he',0Ah
.rodata:000000000000A1F0                 db 'data=ordered (default) and data=writeback modes, shred works as u'
.rodata:000000000000A1F0                 db 'sual.',0Ah
.rodata:000000000000A1F0                 db 'Ext3 journaling modes can be changed by adding the data=something'
.rodata:000000000000A1F0                 db ' option',0Ah
.rodata:000000000000A1F0                 db 'to the mount options for a particular file system in the /etc/fst'
.rodata:000000000000A1F0                 db 'ab file,',0Ah
.rodata:000000000000A1F0                 db 'as documented in the mount man page (man mount).',0Ah
.rodata:000000000000A1F0                 db 0Ah,0
.rodata:000000000000A3C8 ; const char aInAdditionFile[]
.rodata:000000000000A3C8 aInAdditionFile db 'In addition, file system backups and remote mirrors may contain c'
.rodata:000000000000A3C8                                         ; DATA XREF: usage+242↑o
.rodata:000000000000A3C8                 db 'opies',0Ah
.rodata:000000000000A3C8                 db 'of the file that cannot be removed, and that will allow a shredde'
.rodata:000000000000A3C8                 db 'd file',0Ah
.rodata:000000000000A3C8                 db 'to be recovered later.',0Ah,0
.rodata:000000000000A46F                 align 10h
.rodata:000000000000A470 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000A470                                         ; DATA XREF: usage+33F↑o
.rodata:000000000000A470                                         ; usage+3A3↑o ...
.rodata:000000000000A498 ; const char aReportAnyTrans[]
.rodata:000000000000A498 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000A498                                         ; DATA XREF: usage+497↑o
.rodata:000000000000A498                 db 'am/>',0Ah,0
.rodata:000000000000A4DF                 align 20h
.rodata:000000000000A4E0 ; const char aOrAvailableLoc[]
.rodata:000000000000A4E0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000A4E0                                         ; DATA XREF: usage:loc_3FEE↑o
.rodata:000000000000A513                 align 8
.rodata:000000000000A518 ; const char aMultipleRandom[]
.rodata:000000000000A518 aMultipleRandom db 'multiple random sources specified',0
.rodata:000000000000A518                                         ; DATA XREF: main:loc_2A1A↑o
.rodata:000000000000A53A                 align 20h
.rodata:000000000000A540 ; const char aSCannotShredAp[]
.rodata:000000000000A540 aSCannotShredAp db '%s: cannot shred append-only file descriptor',0
.rodata:000000000000A540                                         ; DATA XREF: main:loc_254D↑o
.rodata:000000000000A56D                 align 10h
.rodata:000000000000A570 ; const char aSFailedToOpenF[]
.rodata:000000000000A570 aSFailedToOpenF db '%s: failed to open for writing',0
.rodata:000000000000A570                                         ; DATA XREF: main:loc_2589↑o
.rodata:000000000000A58F                 align 20h
.rodata:000000000000A5A0 ; const char _PRETTY_FUNCTION___7286[]
.rodata:000000000000A5A0 __PRETTY_FUNCTION___7286 db 'incname',0 ; DATA XREF: main:loc_29C7↑o
.rodata:000000000000A5A8                 align 20h
.rodata:000000000000A5C0 ; const char nameset[]
.rodata:000000000000A5C0 nameset         db '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.',0
.rodata:000000000000A5C0                                         ; DATA XREF: main+657↑o
.rodata:000000000000A601                 align 20h
.rodata:000000000000A620 patterns        db 0FEh                 ; DATA XREF: do_wipefd+19B↑o
.rodata:000000000000A621                 db 0FFh
.rodata:000000000000A622                 db 0FFh
.rodata:000000000000A623                 db 0FFh
.rodata:000000000000A624 unk_A624        db    2                 ; DATA XREF: do_wipefd:loc_36C0↑o
.rodata:000000000000A625                 db    0
.rodata:000000000000A626                 db    0
.rodata:000000000000A627                 db    0
.rodata:000000000000A628                 db    0
.rodata:000000000000A629                 db    0
.rodata:000000000000A62A                 db    0
.rodata:000000000000A62B                 db    0
.rodata:000000000000A62C                 db 0FFh
.rodata:000000000000A62D                 db  0Fh
.rodata:000000000000A62E                 db    0
.rodata:000000000000A62F                 db    0
.rodata:000000000000A630                 db    2
.rodata:000000000000A631                 db    0
.rodata:000000000000A632                 db    0
.rodata:000000000000A633                 db    0
.rodata:000000000000A634                 db  55h ; U
.rodata:000000000000A635                 db    5
.rodata:000000000000A636                 db    0
.rodata:000000000000A637                 db    0
.rodata:000000000000A638                 db 0AAh
.rodata:000000000000A639                 db  0Ah
.rodata:000000000000A63A                 db    0
.rodata:000000000000A63B                 db    0
.rodata:000000000000A63C                 db 0FFh
.rodata:000000000000A63D                 db 0FFh
.rodata:000000000000A63E                 db 0FFh
.rodata:000000000000A63F                 db 0FFh
.rodata:000000000000A640                 db    6
.rodata:000000000000A641                 db    0
.rodata:000000000000A642                 db    0
.rodata:000000000000A643                 db    0
.rodata:000000000000A644                 db  49h ; I
.rodata:000000000000A645                 db    2
.rodata:000000000000A646                 db    0
.rodata:000000000000A647                 db    0
.rodata:000000000000A648                 db  92h
.rodata:000000000000A649                 db    4
.rodata:000000000000A64A                 db    0
.rodata:000000000000A64B                 db    0
.rodata:000000000000A64C                 db 0DBh
.rodata:000000000000A64D                 db    6
.rodata:000000000000A64E                 db    0
.rodata:000000000000A64F                 db    0
.rodata:000000000000A650                 db  24h ; $
.rodata:000000000000A651                 db    9
.rodata:000000000000A652                 db    0
.rodata:000000000000A653                 db    0
.rodata:000000000000A654                 db  6Dh ; m
.rodata:000000000000A655                 db  0Bh
.rodata:000000000000A656                 db    0
.rodata:000000000000A657                 db    0
.rodata:000000000000A658                 db 0B6h
.rodata:000000000000A659                 db  0Dh
.rodata:000000000000A65A                 db    0
.rodata:000000000000A65B                 db    0
.rodata:000000000000A65C                 db  0Ch
.rodata:000000000000A65D                 db    0
.rodata:000000000000A65E                 db    0
.rodata:000000000000A65F                 db    0
.rodata:000000000000A660                 db  11h
.rodata:000000000000A661                 db    1
.rodata:000000000000A662                 db    0
.rodata:000000000000A663                 db    0
.rodata:000000000000A664                 db  22h ; "
.rodata:000000000000A665                 db    2
.rodata:000000000000A666                 db    0
.rodata:000000000000A667                 db    0
.rodata:000000000000A668                 db  33h ; 3
.rodata:000000000000A669                 db    3
.rodata:000000000000A66A                 db    0
.rodata:000000000000A66B                 db    0
.rodata:000000000000A66C                 db  44h ; D
.rodata:000000000000A66D                 db    4
.rodata:000000000000A66E                 db    0
.rodata:000000000000A66F                 db    0
.rodata:000000000000A670                 db  66h ; f
.rodata:000000000000A671                 db    6
.rodata:000000000000A672                 db    0
.rodata:000000000000A673                 db    0
.rodata:000000000000A674                 db  77h ; w
.rodata:000000000000A675                 db    7
.rodata:000000000000A676                 db    0
.rodata:000000000000A677                 db    0
.rodata:000000000000A678                 db  88h
.rodata:000000000000A679                 db    8
.rodata:000000000000A67A                 db    0
.rodata:000000000000A67B                 db    0
.rodata:000000000000A67C                 db  99h
.rodata:000000000000A67D                 db    9
.rodata:000000000000A67E                 db    0
.rodata:000000000000A67F                 db    0
.rodata:000000000000A680                 db 0BBh
.rodata:000000000000A681                 db  0Bh
.rodata:000000000000A682                 db    0
.rodata:000000000000A683                 db    0
.rodata:000000000000A684                 db 0CCh
.rodata:000000000000A685                 db  0Ch
.rodata:000000000000A686                 db    0
.rodata:000000000000A687                 db    0
.rodata:000000000000A688                 db 0DDh
.rodata:000000000000A689                 db  0Dh
.rodata:000000000000A68A                 db    0
.rodata:000000000000A68B                 db    0
.rodata:000000000000A68C                 db 0EEh
.rodata:000000000000A68D                 db  0Eh
.rodata:000000000000A68E                 db    0
.rodata:000000000000A68F                 db    0
.rodata:000000000000A690                 db 0FFh
.rodata:000000000000A691                 db 0FFh
.rodata:000000000000A692                 db 0FFh
.rodata:000000000000A693                 db 0FFh
.rodata:000000000000A694                 db    8
.rodata:000000000000A695                 db    0
.rodata:000000000000A696                 db    0
.rodata:000000000000A697                 db    0
.rodata:000000000000A698                 db    0
.rodata:000000000000A699                 db  10h
.rodata:000000000000A69A                 db    0
.rodata:000000000000A69B                 db    0
.rodata:000000000000A69C                 db  49h ; I
.rodata:000000000000A69D                 db  12h
.rodata:000000000000A69E                 db    0
.rodata:000000000000A69F                 db    0
.rodata:000000000000A6A0                 db  92h
.rodata:000000000000A6A1                 db  14h
.rodata:000000000000A6A2                 db    0
.rodata:000000000000A6A3                 db    0
.rodata:000000000000A6A4                 db 0DBh
.rodata:000000000000A6A5                 db  16h
.rodata:000000000000A6A6                 db    0
.rodata:000000000000A6A7                 db    0
.rodata:000000000000A6A8                 db  24h ; $
.rodata:000000000000A6A9                 db  19h
.rodata:000000000000A6AA                 db    0
.rodata:000000000000A6AB                 db    0
.rodata:000000000000A6AC                 db  6Dh ; m
.rodata:000000000000A6AD                 db  1Bh
.rodata:000000000000A6AE                 db    0
.rodata:000000000000A6AF                 db    0
.rodata:000000000000A6B0                 db 0B6h
.rodata:000000000000A6B1                 db  1Dh
.rodata:000000000000A6B2                 db    0
.rodata:000000000000A6B3                 db    0
.rodata:000000000000A6B4                 db 0FFh
.rodata:000000000000A6B5                 db  1Fh
.rodata:000000000000A6B6                 db    0
.rodata:000000000000A6B7                 db    0
.rodata:000000000000A6B8                 db  0Eh
.rodata:000000000000A6B9                 db    0
.rodata:000000000000A6BA                 db    0
.rodata:000000000000A6BB                 db    0
.rodata:000000000000A6BC                 db  11h
.rodata:000000000000A6BD                 db  11h
.rodata:000000000000A6BE                 db    0
.rodata:000000000000A6BF                 db    0
.rodata:000000000000A6C0                 db  22h ; "
.rodata:000000000000A6C1                 db  12h
.rodata:000000000000A6C2                 db    0
.rodata:000000000000A6C3                 db    0
.rodata:000000000000A6C4                 db  33h ; 3
.rodata:000000000000A6C5                 db  13h
.rodata:000000000000A6C6                 db    0
.rodata:000000000000A6C7                 db    0
.rodata:000000000000A6C8                 db  44h ; D
.rodata:000000000000A6C9                 db  14h
.rodata:000000000000A6CA                 db    0
.rodata:000000000000A6CB                 db    0
.rodata:000000000000A6CC                 db  55h ; U
.rodata:000000000000A6CD                 db  15h
.rodata:000000000000A6CE                 db    0
.rodata:000000000000A6CF                 db    0
.rodata:000000000000A6D0                 db  66h ; f
.rodata:000000000000A6D1                 db  16h
.rodata:000000000000A6D2                 db    0
.rodata:000000000000A6D3                 db    0
.rodata:000000000000A6D4                 db  77h ; w
.rodata:000000000000A6D5                 db  17h
.rodata:000000000000A6D6                 db    0
.rodata:000000000000A6D7                 db    0
.rodata:000000000000A6D8                 db  88h
.rodata:000000000000A6D9                 db  18h
.rodata:000000000000A6DA                 db    0
.rodata:000000000000A6DB                 db    0
.rodata:000000000000A6DC                 db  99h
.rodata:000000000000A6DD                 db  19h
.rodata:000000000000A6DE                 db    0
.rodata:000000000000A6DF                 db    0
.rodata:000000000000A6E0                 db 0AAh
.rodata:000000000000A6E1                 db  1Ah
.rodata:000000000000A6E2                 db    0
.rodata:000000000000A6E3                 db    0
.rodata:000000000000A6E4                 db 0BBh
.rodata:000000000000A6E5                 db  1Bh
.rodata:000000000000A6E6                 db    0
.rodata:000000000000A6E7                 db    0
.rodata:000000000000A6E8                 db 0CCh
.rodata:000000000000A6E9                 db  1Ch
.rodata:000000000000A6EA                 db    0
.rodata:000000000000A6EB                 db    0
.rodata:000000000000A6EC                 db 0DDh
.rodata:000000000000A6ED                 db  1Dh
.rodata:000000000000A6EE                 db    0
.rodata:000000000000A6EF                 db    0
.rodata:000000000000A6F0                 db 0EEh
.rodata:000000000000A6F1                 db  1Eh
.rodata:000000000000A6F2                 db    0
.rodata:000000000000A6F3                 db    0
.rodata:000000000000A6F4                 db 0FFh
.rodata:000000000000A6F5                 db 0FFh
.rodata:000000000000A6F6                 db 0FFh
.rodata:000000000000A6F7                 db 0FFh
.rodata:000000000000A6F8                 db    0
.rodata:000000000000A6F9                 db    0
.rodata:000000000000A6FA                 db    0
.rodata:000000000000A6FB                 db    0
.rodata:000000000000A6FC                 db    0
.rodata:000000000000A6FD                 db    0
.rodata:000000000000A6FE                 db    0
.rodata:000000000000A6FF                 db    0
.rodata:000000000000A700 remove_methods  db    1                 ; DATA XREF: main+21E↑o
.rodata:000000000000A700                                         ; main+237↑o
.rodata:000000000000A701                 db    0
.rodata:000000000000A702                 db    0
.rodata:000000000000A703                 db    0
.rodata:000000000000A704                 db    2
.rodata:000000000000A705                 db    0
.rodata:000000000000A706                 db    0
.rodata:000000000000A707                 db    0
.rodata:000000000000A708                 db    3
.rodata:000000000000A709                 db    0
.rodata:000000000000A70A                 db    0
.rodata:000000000000A70B                 db    0
.rodata:000000000000A70C a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000A711 ; const char aInvalidArgumen[]
.rodata:000000000000A711 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000A711                                         ; DATA XREF: argmatch_invalid:loc_4270↑o
.rodata:000000000000A72C ; const char aAmbiguousArgum[]
.rodata:000000000000A72C aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000A72C                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000A749 ; const char aValidArguments[]
.rodata:000000000000A749 aValidArguments db 'Valid arguments are:',0
.rodata:000000000000A749                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000A75E aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000A75E                 db '  - %s',0
.rodata:000000000000A766 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000A766                                         ; main+8C4↑o ...
.rodata:000000000000A76B ; const char aWriteError[]
.rodata:000000000000A76B aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_44D3↑o
.rodata:000000000000A777 ; const char format[]
.rodata:000000000000A777 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000A777                                         ; xnumtoumax+7D↑o
.rodata:000000000000A77E a0lf            db '%.0Lf',0            ; DATA XREF: human_readable+310↑o
.rodata:000000000000A77E                                         ; human_readable+749↑o
.rodata:000000000000A784 a1lf            db '%.1Lf',0            ; DATA XREF: human_readable+1A1↑o
.rodata:000000000000A784                                         ; human_readable+6F4↑o
.rodata:000000000000A78A ; const char aBlockSize[]
.rodata:000000000000A78A aBlockSize      db 'BLOCK_SIZE',0       ; DATA XREF: human_options:loc_5360↑o
.rodata:000000000000A795 ; const char aBlocksize[]
.rodata:000000000000A795 aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: human_options+158↑o
.rodata:000000000000A79F ; const char name[]
.rodata:000000000000A79F name            db 'POSIXLY_CORRECT',0  ; DATA XREF: human_options+10D↑o
.rodata:000000000000A79F                                         ; human_options+170↑o
.rodata:000000000000A7AF aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.rodata:000000000000A7AF                                         ; DATA XREF: human_options:loc_52B8↑o
.rodata:000000000000A7C1 aHumanReadable  db 'human-readable',0   ; DATA XREF: .data.rel.ro:block_size_args↓o
.rodata:000000000000A7D0 off_A7D0        dq offset loc_6973      ; DATA XREF: .data.rel.ro:000000000020DAE8↓o
.rodata:000000000000A7D8 block_size_opts db 0B0h                 ; DATA XREF: human_options:loc_525C↑o
.rodata:000000000000A7D8                                         ; human_options+5B↑o
.rodata:000000000000A7D9                 db    0
.rodata:000000000000A7DA                 db    0
.rodata:000000000000A7DB                 db    0
.rodata:000000000000A7DC                 db  90h
.rodata:000000000000A7DD                 db    0
.rodata:000000000000A7DE                 db    0
.rodata:000000000000A7DF                 db    0
.rodata:000000000000A7E0 power_letter    db    0                 ; DATA XREF: human_readable:loc_4BDC↑o
.rodata:000000000000A7E1                 db  4Bh ; K
.rodata:000000000000A7E2                 db  4Dh ; M
.rodata:000000000000A7E3                 db  47h ; G
.rodata:000000000000A7E4                 db  54h ; T
.rodata:000000000000A7E5                 db  50h ; P
.rodata:000000000000A7E6                 db  45h ; E
.rodata:000000000000A7E7                 db  5Ah ; Z
.rodata:000000000000A7E8                 db  59h ; Y
.rodata:000000000000A7E9                 db    0
.rodata:000000000000A7EA                 db    0
.rodata:000000000000A7EB                 db    0
.rodata:000000000000A7EC flt_A7EC        dd 9.223372e18          ; DATA XREF: adjust_value↑r
.rodata:000000000000A7F0 flt_A7F0        dd 1.8446744e19         ; DATA XREF: adjust_value+42↑r
.rodata:000000000000A7F0                                         ; adjust_value:loc_4800↑r ...
.rodata:000000000000A7F4 flt_A7F4        dd 10.0                 ; DATA XREF: human_readable+1FC↑r
.rodata:000000000000A7F4                                         ; human_readable+73B↑r ...
.rodata:000000000000A7F8                 align 20h
.rodata:000000000000A800 tbyte_A800      dt 1.8446744073709551615e19
.rodata:000000000000A800                                         ; DATA XREF: human_readable+189↑r
.rodata:000000000000A800                                         ; human_readable+2FE↑r ...
.rodata:000000000000A80A                 align 10h
.rodata:000000000000A810 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000A810                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000A848 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000A850 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000A850                                         ; main+38F↑o
.rodata:000000000000A854 unk_A854        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000A855                 db  80h
.rodata:000000000000A856                 db  98h
.rodata:000000000000A857                 db    0
.rodata:000000000000A858 unk_A858        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000A859                 db  80h
.rodata:000000000000A85A                 db  99h
.rodata:000000000000A85B                 db    0
.rodata:000000000000A85C unk_A85C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000A85D                 db    7
.rodata:000000000000A85E                 db  65h ; e
.rodata:000000000000A85F                 db    0
.rodata:000000000000A860 unk_A860        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000A861                 db 0AFh
.rodata:000000000000A862                 db    0
.rodata:000000000000A863 unk_A863        db  22h ; "             ; DATA XREF: gettext_quote:loc_5520↑o
.rodata:000000000000A863                                         ; quotearg_buffer_restyled:loc_62DB↑o ...
.rodata:000000000000A864                 db    0
.rodata:000000000000A865 ; const char asc_A865[2]
.rodata:000000000000A865 asc_A865        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000A865                                         ; quotearg_buffer_restyled:loc_56A3↑o ...
.rodata:000000000000A867 ; const char asc_A867[2]
.rodata:000000000000A867 asc_A867        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000A867                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000A869 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000A871 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020DB08↓o
.rodata:000000000000A877 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020DB10↓o
.rodata:000000000000A884 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020DB18↓o
.rodata:000000000000A884                                         ; .data.rel.ro:000000000020DB38↓o
.rodata:000000000000A891 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000A891                                         ; DATA XREF: .data.rel.ro:000000000020DB20↓o
.rodata:000000000000A8A5 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020DB30↓o
.rodata:000000000000A8AD aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020DB48↓o
.rodata:000000000000A8B5                 align 20h
.rodata:000000000000A8C0 jpt_5681        dd offset loc_642A - 0A8C0h
.rodata:000000000000A8C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000A8C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000A8C0                 dd offset loc_5683 - 0A8C0h ; jump table for switch statement
.rodata:000000000000A8C0                 dd offset loc_6658 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_6464 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_6254 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_62B0 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_6305 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_634A - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_6384 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_6384 - 0A8C0h
.rodata:000000000000A8C0                 dd offset loc_6384 - 0A8C0h
.rodata:000000000000A8EC jpt_57DE        dd offset loc_5A00 - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000A8EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh ; jump table for switch statement
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset loc_5A40 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5948 - 0A8ECh, offset loc_5908 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5AD0 - 0A8ECh, offset loc_5AC0 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5AB0 - 0A8ECh, offset loc_5AA0 - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset def_57DE - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A90 - 0A8ECh, offset loc_5A80 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A50 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_58E3 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A80 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A80 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A80 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_58B3 - 0A8ECh
.rodata:000000000000A8EC                 dd offset def_57DE - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A80 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5958 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_5A28 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A28 - 0A8ECh, offset loc_57E3 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A80 - 0A8ECh, offset loc_57E3 - 0A8ECh
.rodata:000000000000A8EC                 dd offset loc_5A50 - 0A8ECh
.rodata:000000000000AAE8 jpt_5B6A        dd offset loc_5BD0 - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000AAE8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h ; jump table for switch statement
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset loc_5BC0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5D10 - 0AAE8h, offset loc_5CF8 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5BA8 - 0AAE8h, offset loc_5CE8 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5B90 - 0AAE8h, offset loc_5CD0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset def_5B6A - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CB8 - 0AAE8h, offset loc_5CA0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5C88 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_58E0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5CA0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5CA0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5CA0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_58B0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset def_5B6A - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5CA0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5B70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_5C70 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C70 - 0AAE8h, offset loc_57E0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5CA0 - 0AAE8h, offset loc_57E0 - 0AAE8h
.rodata:000000000000AAE8                 dd offset loc_5C88 - 0AAE8h
.rodata:000000000000ACE4                 align 20h
.rodata:000000000000AD00                 public quoting_style_vals
.rodata:000000000000AD00 quoting_style_vals db    0
.rodata:000000000000AD01                 db    0
.rodata:000000000000AD02                 db    0
.rodata:000000000000AD03                 db    0
.rodata:000000000000AD04                 db    1
.rodata:000000000000AD05                 db    0
.rodata:000000000000AD06                 db    0
.rodata:000000000000AD07                 db    0
.rodata:000000000000AD08                 db    2
.rodata:000000000000AD09                 db    0
.rodata:000000000000AD0A                 db    0
.rodata:000000000000AD0B                 db    0
.rodata:000000000000AD0C                 db    3
.rodata:000000000000AD0D                 db    0
.rodata:000000000000AD0E                 db    0
.rodata:000000000000AD0F                 db    0
.rodata:000000000000AD10                 db    4
.rodata:000000000000AD11                 db    0
.rodata:000000000000AD12                 db    0
.rodata:000000000000AD13                 db    0
.rodata:000000000000AD14                 db    5
.rodata:000000000000AD15                 db    0
.rodata:000000000000AD16                 db    0
.rodata:000000000000AD17                 db    0
.rodata:000000000000AD18                 db    6
.rodata:000000000000AD19                 db    0
.rodata:000000000000AD1A                 db    0
.rodata:000000000000AD1B                 db    0
.rodata:000000000000AD1C                 db    7
.rodata:000000000000AD1D                 db    0
.rodata:000000000000AD1E                 db    0
.rodata:000000000000AD1F                 db    0
.rodata:000000000000AD20                 db    8
.rodata:000000000000AD21                 db    0
.rodata:000000000000AD22                 db    0
.rodata:000000000000AD23                 db    0
.rodata:000000000000AD24                 db    9
.rodata:000000000000AD25                 db    0
.rodata:000000000000AD26                 db    0
.rodata:000000000000AD27                 db    0
.rodata:000000000000AD28 ; const char aSEndOfFile[]
.rodata:000000000000AD28 aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_73FD↑o
.rodata:000000000000AD38 ; const char aSReadError[]
.rodata:000000000000AD38 aSReadError     db '%s: read error',0   ; DATA XREF: randread_error+25↑o
.rodata:000000000000AD47 ; const char aDevUrandom[]
.rodata:000000000000AD47 aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:000000000000AD54 aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:000000000000AD57 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000AD63 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000AD6A ; const char aC_0[]
.rodata:000000000000AD6A aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_810C↑o
.rodata:000000000000AD6E ; const char aWrittenByS[]
.rodata:000000000000AD6E aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000AD6E                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000AD7E ; const char aWrittenBySAndS[]
.rodata:000000000000AD7E aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000AD7E                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000AD95 ; const char aWrittenBySSAnd[]
.rodata:000000000000AD95 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000AD95                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000ADB1 ; const char aReportBugsToS[]
.rodata:000000000000ADB1 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000ADB1                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000ADC6 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000ADC6                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000ADDC ; const char aSHomePageS[]
.rodata:000000000000ADDC aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000ADDC                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000ADF0 ; const char aLicenseGplv3Gn[]
.rodata:000000000000ADF0 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000ADF0                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000ADF0                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000ADF0                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000ADF0                 db '.',0Ah
.rodata:000000000000ADF0                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000ADF0                 db 0Ah,0
.rodata:000000000000AEBC                 align 20h
.rodata:000000000000AEC0 ; const char aWrittenBySSSAn[]
.rodata:000000000000AEC0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AEC0                                         ; DATA XREF: version_etc_arn:loc_8360↑o
.rodata:000000000000AEC0                 db 'and %s.',0Ah,0
.rodata:000000000000AEE0 ; const char aWrittenBySSSSA[]
.rodata:000000000000AEE0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AEE0                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000AEE0                 db '%s, and %s.',0Ah,0
.rodata:000000000000AF04                 align 8
.rodata:000000000000AF08 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000AF08 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF08                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000AF08                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000AF30 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000AF30 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF30                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000AF30                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000AF5C                 align 20h
.rodata:000000000000AF60 ; const char aWrittenBySSSSS[]
.rodata:000000000000AF60 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF60                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000AF60                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000AF60                 db 'and %s.',0Ah,0
.rodata:000000000000AF90 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000AF90 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF90                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000AF90                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000AF90                 db '%s, and %s.',0Ah,0
.rodata:000000000000AFC4                 align 8
.rodata:000000000000AFC8 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AFC8                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000AFC8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000AFC8                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000B004                 align 8
.rodata:000000000000B008 ; const char aGeneralHelpUsi[]
.rodata:000000000000B008 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000B008                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000B008                 db 0
.rodata:000000000000B049                 align 4
.rodata:000000000000B04C jpt_8174        dd offset loc_81F6 - 0B04Ch
.rodata:000000000000B04C                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000B04C                                         ; version_etc_arn+9D↑r
.rodata:000000000000B04C                 dd offset loc_8288 - 0B04Ch ; jump table for switch statement
.rodata:000000000000B04C                 dd offset loc_82C8 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_8310 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_8360 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_83B8 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_83E8 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_8450 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_8180 - 0B04Ch
.rodata:000000000000B04C                 dd offset loc_8230 - 0B04Ch
.rodata:000000000000B074                 align 20h
.rodata:000000000000B080                 public version_etc_copyright
.rodata:000000000000B080 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000B080                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000B0AF ; const char aMemoryExhauste[]
.rodata:000000000000B0AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000B0C0 ; const char aCoreutils831Li[]
.rodata:000000000000B0C0 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000B0C0                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:000000000000B0E0 ; const char a0StrtolBaseStr[]
.rodata:000000000000B0E0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000B0E0                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:000000000000B106                 align 8
.rodata:000000000000B108 jpt_8C86        dd offset loc_8DD6 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000B108                                         ; xstrtoumax+1CF↑r
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8DB3 - 0B108h ; jump table for switch statement
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8DEC - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8D6F - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8C88 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset loc_8D90 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset loc_8D4F - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8D2A - 0B108h
.rodata:000000000000B108                 dd offset loc_8D04 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset loc_8CED - 0B108h, offset loc_8CB0 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8DEC - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8D6F - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8C88 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset loc_8D4F - 0B108h, offset def_8C86 - 0B108h
.rodata:000000000000B108                 dd offset def_8C86 - 0B108h, offset loc_8CD7 - 0B108h
.rodata:000000000000B1E0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000B1E0 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:000000000000B1E0                                         ; DATA XREF: xstrtoumax:loc_8E35↑o
.rodata:000000000000B1EB aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000B1ED aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_9460↑o
.rodata:000000000000B1F3 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000B1F3                                         ; locale_charset:loc_94B0↑o
.rodata:000000000000B1F3 _rodata         ends
.rodata:000000000000B1F3
LOAD:000000000000B1F9 ; ===========================================================================
LOAD:000000000000B1F9
LOAD:000000000000B1F9 ; Segment type: Pure code
LOAD:000000000000B1F9 ; Segment permissions: Read/Execute
LOAD:000000000000B1F9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000B1F9                 assume cs:LOAD
LOAD:000000000000B1F9                 ;org 0B1F9h
LOAD:000000000000B1F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B1F9                 align 4
LOAD:000000000000B1F9 LOAD            ends
LOAD:000000000000B1F9
.eh_frame_hdr:000000000000B1FC ; ===========================================================================
.eh_frame_hdr:000000000000B1FC
.eh_frame_hdr:000000000000B1FC ; Segment type: Pure data
.eh_frame_hdr:000000000000B1FC ; Segment permissions: Read
.eh_frame_hdr:000000000000B1FC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000B1FC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000B1FC                 ;org 0B1FCh
.eh_frame_hdr:000000000000B1FC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000B1FD                 db  1Bh
.eh_frame_hdr:000000000000B1FE                 db    3
.eh_frame_hdr:000000000000B1FF                 db  3Bh ; ;
.eh_frame_hdr:000000000000B200                 db  90h
.eh_frame_hdr:000000000000B201                 db    3
.eh_frame_hdr:000000000000B202                 db    0
.eh_frame_hdr:000000000000B203                 db    0
.eh_frame_hdr:000000000000B204                 db  71h ; q
.eh_frame_hdr:000000000000B205                 db    0
.eh_frame_hdr:000000000000B206                 db    0
.eh_frame_hdr:000000000000B207                 db    0
.eh_frame_hdr:000000000000B208                 db  34h ; 4
.eh_frame_hdr:000000000000B209                 db  6Ah ; j
.eh_frame_hdr:000000000000B20A                 db 0FFh
.eh_frame_hdr:000000000000B20B                 db 0FFh
.eh_frame_hdr:000000000000B20C                 db 0DCh
.eh_frame_hdr:000000000000B20D                 db    3
.eh_frame_hdr:000000000000B20E                 db    0
.eh_frame_hdr:000000000000B20F                 db    0
.eh_frame_hdr:000000000000B210                 db  34h ; 4
.eh_frame_hdr:000000000000B211                 db  6Fh ; o
.eh_frame_hdr:000000000000B212                 db 0FFh
.eh_frame_hdr:000000000000B213                 db 0FFh
.eh_frame_hdr:000000000000B214                 db    4
.eh_frame_hdr:000000000000B215                 db    4
.eh_frame_hdr:000000000000B216                 db    0
.eh_frame_hdr:000000000000B217                 db    0
.eh_frame_hdr:000000000000B218                 db  44h ; D
.eh_frame_hdr:000000000000B219                 db  6Fh ; o
.eh_frame_hdr:000000000000B21A                 db 0FFh
.eh_frame_hdr:000000000000B21B                 db 0FFh
.eh_frame_hdr:000000000000B21C                 db 0D4h
.eh_frame_hdr:000000000000B21D                 db    5
.eh_frame_hdr:000000000000B21E                 db    0
.eh_frame_hdr:000000000000B21F                 db    0
.eh_frame_hdr:000000000000B220                 db  44h ; D
.eh_frame_hdr:000000000000B221                 db  78h ; x
.eh_frame_hdr:000000000000B222                 db 0FFh
.eh_frame_hdr:000000000000B223                 db 0FFh
.eh_frame_hdr:000000000000B224                 db 0ACh
.eh_frame_hdr:000000000000B225                 db    3
.eh_frame_hdr:000000000000B226                 db    0
.eh_frame_hdr:000000000000B227                 db    0
.eh_frame_hdr:000000000000B228                 db  54h ; T
.eh_frame_hdr:000000000000B229                 db  79h ; y
.eh_frame_hdr:000000000000B22A                 db 0FFh
.eh_frame_hdr:000000000000B22B                 db 0FFh
.eh_frame_hdr:000000000000B22C                 db  1Ch
.eh_frame_hdr:000000000000B22D                 db    4
.eh_frame_hdr:000000000000B22E                 db    0
.eh_frame_hdr:000000000000B22F                 db    0
.eh_frame_hdr:000000000000B230                 db  64h ; d
.eh_frame_hdr:000000000000B231                 db  79h ; y
.eh_frame_hdr:000000000000B232                 db 0FFh
.eh_frame_hdr:000000000000B233                 db 0FFh
.eh_frame_hdr:000000000000B234                 db  30h ; 0
.eh_frame_hdr:000000000000B235                 db    4
.eh_frame_hdr:000000000000B236                 db    0
.eh_frame_hdr:000000000000B237                 db    0
.eh_frame_hdr:000000000000B238                 db 0B4h
.eh_frame_hdr:000000000000B239                 db  79h ; y
.eh_frame_hdr:000000000000B23A                 db 0FFh
.eh_frame_hdr:000000000000B23B                 db 0FFh
.eh_frame_hdr:000000000000B23C                 db  64h ; d
.eh_frame_hdr:000000000000B23D                 db    4
.eh_frame_hdr:000000000000B23E                 db    0
.eh_frame_hdr:000000000000B23F                 db    0
.eh_frame_hdr:000000000000B240                 db  84h
.eh_frame_hdr:000000000000B241                 db  7Ah ; z
.eh_frame_hdr:000000000000B242                 db 0FFh
.eh_frame_hdr:000000000000B243                 db 0FFh
.eh_frame_hdr:000000000000B244                 db 0B0h
.eh_frame_hdr:000000000000B245                 db    4
.eh_frame_hdr:000000000000B246                 db    0
.eh_frame_hdr:000000000000B247                 db    0
.eh_frame_hdr:000000000000B248                 db  14h
.eh_frame_hdr:000000000000B249                 db  83h
.eh_frame_hdr:000000000000B24A                 db 0FFh
.eh_frame_hdr:000000000000B24B                 db 0FFh
.eh_frame_hdr:000000000000B24C                 db  48h ; H
.eh_frame_hdr:000000000000B24D                 db    5
.eh_frame_hdr:000000000000B24E                 db    0
.eh_frame_hdr:000000000000B24F                 db    0
.eh_frame_hdr:000000000000B250                 db  24h ; $
.eh_frame_hdr:000000000000B251                 db  8Ah
.eh_frame_hdr:000000000000B252                 db 0FFh
.eh_frame_hdr:000000000000B253                 db 0FFh
.eh_frame_hdr:000000000000B254                 db 0A8h
.eh_frame_hdr:000000000000B255                 db    5
.eh_frame_hdr:000000000000B256                 db    0
.eh_frame_hdr:000000000000B257                 db    0
.eh_frame_hdr:000000000000B258                 db 0E4h
.eh_frame_hdr:000000000000B259                 db  8Eh
.eh_frame_hdr:000000000000B25A                 db 0FFh
.eh_frame_hdr:000000000000B25B                 db 0FFh
.eh_frame_hdr:000000000000B25C                 db  34h ; 4
.eh_frame_hdr:000000000000B25D                 db    6
.eh_frame_hdr:000000000000B25E                 db    0
.eh_frame_hdr:000000000000B25F                 db    0
.eh_frame_hdr:000000000000B260                 db 0F4h
.eh_frame_hdr:000000000000B261                 db  8Eh
.eh_frame_hdr:000000000000B262                 db 0FFh
.eh_frame_hdr:000000000000B263                 db 0FFh
.eh_frame_hdr:000000000000B264                 db  48h ; H
.eh_frame_hdr:000000000000B265                 db    6
.eh_frame_hdr:000000000000B266                 db    0
.eh_frame_hdr:000000000000B267                 db    0
.eh_frame_hdr:000000000000B268                 db  14h
.eh_frame_hdr:000000000000B269                 db  90h
.eh_frame_hdr:000000000000B26A                 db 0FFh
.eh_frame_hdr:000000000000B26B                 db 0FFh
.eh_frame_hdr:000000000000B26C                 db  94h
.eh_frame_hdr:000000000000B26D                 db    6
.eh_frame_hdr:000000000000B26E                 db    0
.eh_frame_hdr:000000000000B26F                 db    0
.eh_frame_hdr:000000000000B270                 db  94h
.eh_frame_hdr:000000000000B271                 db  90h
.eh_frame_hdr:000000000000B272                 db 0FFh
.eh_frame_hdr:000000000000B273                 db 0FFh
.eh_frame_hdr:000000000000B274                 db 0C0h
.eh_frame_hdr:000000000000B275                 db    6
.eh_frame_hdr:000000000000B276                 db    0
.eh_frame_hdr:000000000000B277                 db    0
.eh_frame_hdr:000000000000B278                 db 0B4h
.eh_frame_hdr:000000000000B279                 db  91h
.eh_frame_hdr:000000000000B27A                 db 0FFh
.eh_frame_hdr:000000000000B27B                 db 0FFh
.eh_frame_hdr:000000000000B27C                 db  20h
.eh_frame_hdr:000000000000B27D                 db    7
.eh_frame_hdr:000000000000B27E                 db    0
.eh_frame_hdr:000000000000B27F                 db    0
.eh_frame_hdr:000000000000B280                 db  24h ; $
.eh_frame_hdr:000000000000B281                 db  92h
.eh_frame_hdr:000000000000B282                 db 0FFh
.eh_frame_hdr:000000000000B283                 db 0FFh
.eh_frame_hdr:000000000000B284                 db  6Ch ; l
.eh_frame_hdr:000000000000B285                 db    7
.eh_frame_hdr:000000000000B286                 db    0
.eh_frame_hdr:000000000000B287                 db    0
.eh_frame_hdr:000000000000B288                 db  74h ; t
.eh_frame_hdr:000000000000B289                 db  92h
.eh_frame_hdr:000000000000B28A                 db 0FFh
.eh_frame_hdr:000000000000B28B                 db 0FFh
.eh_frame_hdr:000000000000B28C                 db 0ACh
.eh_frame_hdr:000000000000B28D                 db    7
.eh_frame_hdr:000000000000B28E                 db    0
.eh_frame_hdr:000000000000B28F                 db    0
.eh_frame_hdr:000000000000B290                 db  84h
.eh_frame_hdr:000000000000B291                 db  92h
.eh_frame_hdr:000000000000B292                 db 0FFh
.eh_frame_hdr:000000000000B293                 db 0FFh
.eh_frame_hdr:000000000000B294                 db 0C0h
.eh_frame_hdr:000000000000B295                 db    7
.eh_frame_hdr:000000000000B296                 db    0
.eh_frame_hdr:000000000000B297                 db    0
.eh_frame_hdr:000000000000B298                 db  94h
.eh_frame_hdr:000000000000B299                 db  92h
.eh_frame_hdr:000000000000B29A                 db 0FFh
.eh_frame_hdr:000000000000B29B                 db 0FFh
.eh_frame_hdr:000000000000B29C                 db 0D4h
.eh_frame_hdr:000000000000B29D                 db    7
.eh_frame_hdr:000000000000B29E                 db    0
.eh_frame_hdr:000000000000B29F                 db    0
.eh_frame_hdr:000000000000B2A0                 db  44h ; D
.eh_frame_hdr:000000000000B2A1                 db  93h
.eh_frame_hdr:000000000000B2A2                 db 0FFh
.eh_frame_hdr:000000000000B2A3                 db 0FFh
.eh_frame_hdr:000000000000B2A4                 db    4
.eh_frame_hdr:000000000000B2A5                 db    8
.eh_frame_hdr:000000000000B2A6                 db    0
.eh_frame_hdr:000000000000B2A7                 db    0
.eh_frame_hdr:000000000000B2A8                 db  64h ; d
.eh_frame_hdr:000000000000B2A9                 db  93h
.eh_frame_hdr:000000000000B2AA                 db 0FFh
.eh_frame_hdr:000000000000B2AB                 db 0FFh
.eh_frame_hdr:000000000000B2AC                 db  24h ; $
.eh_frame_hdr:000000000000B2AD                 db    8
.eh_frame_hdr:000000000000B2AE                 db    0
.eh_frame_hdr:000000000000B2AF                 db    0
.eh_frame_hdr:000000000000B2B0                 db 0C4h
.eh_frame_hdr:000000000000B2B1                 db  93h
.eh_frame_hdr:000000000000B2B2                 db 0FFh
.eh_frame_hdr:000000000000B2B3                 db 0FFh
.eh_frame_hdr:000000000000B2B4                 db  58h ; X
.eh_frame_hdr:000000000000B2B5                 db    8
.eh_frame_hdr:000000000000B2B6                 db    0
.eh_frame_hdr:000000000000B2B7                 db    0
.eh_frame_hdr:000000000000B2B8                 db  24h ; $
.eh_frame_hdr:000000000000B2B9                 db  94h
.eh_frame_hdr:000000000000B2BA                 db 0FFh
.eh_frame_hdr:000000000000B2BB                 db 0FFh
.eh_frame_hdr:000000000000B2BC                 db  84h
.eh_frame_hdr:000000000000B2BD                 db    8
.eh_frame_hdr:000000000000B2BE                 db    0
.eh_frame_hdr:000000000000B2BF                 db    0
.eh_frame_hdr:000000000000B2C0                 db  84h
.eh_frame_hdr:000000000000B2C1                 db  94h
.eh_frame_hdr:000000000000B2C2                 db 0FFh
.eh_frame_hdr:000000000000B2C3                 db 0FFh
.eh_frame_hdr:000000000000B2C4                 db  98h
.eh_frame_hdr:000000000000B2C5                 db    8
.eh_frame_hdr:000000000000B2C6                 db    0
.eh_frame_hdr:000000000000B2C7                 db    0
.eh_frame_hdr:000000000000B2C8                 db 0D4h
.eh_frame_hdr:000000000000B2C9                 db  94h
.eh_frame_hdr:000000000000B2CA                 db 0FFh
.eh_frame_hdr:000000000000B2CB                 db 0FFh
.eh_frame_hdr:000000000000B2CC                 db 0C4h
.eh_frame_hdr:000000000000B2CD                 db    8
.eh_frame_hdr:000000000000B2CE                 db    0
.eh_frame_hdr:000000000000B2CF                 db    0
.eh_frame_hdr:000000000000B2D0                 db  44h ; D
.eh_frame_hdr:000000000000B2D1                 db  95h
.eh_frame_hdr:000000000000B2D2                 db 0FFh
.eh_frame_hdr:000000000000B2D3                 db 0FFh
.eh_frame_hdr:000000000000B2D4                 db 0E4h
.eh_frame_hdr:000000000000B2D5                 db    8
.eh_frame_hdr:000000000000B2D6                 db    0
.eh_frame_hdr:000000000000B2D7                 db    0
.eh_frame_hdr:000000000000B2D8                 db  14h
.eh_frame_hdr:000000000000B2D9                 db  96h
.eh_frame_hdr:000000000000B2DA                 db 0FFh
.eh_frame_hdr:000000000000B2DB                 db 0FFh
.eh_frame_hdr:000000000000B2DC                 db 0F8h
.eh_frame_hdr:000000000000B2DD                 db    8
.eh_frame_hdr:000000000000B2DE                 db    0
.eh_frame_hdr:000000000000B2DF                 db    0
.eh_frame_hdr:000000000000B2E0                 db  24h ; $
.eh_frame_hdr:000000000000B2E1                 db 0A0h
.eh_frame_hdr:000000000000B2E2                 db 0FFh
.eh_frame_hdr:000000000000B2E3                 db 0FFh
.eh_frame_hdr:000000000000B2E4                 db 0A0h
.eh_frame_hdr:000000000000B2E5                 db    9
.eh_frame_hdr:000000000000B2E6                 db    0
.eh_frame_hdr:000000000000B2E7                 db    0
.eh_frame_hdr:000000000000B2E8                 db  14h
.eh_frame_hdr:000000000000B2E9                 db 0A2h
.eh_frame_hdr:000000000000B2EA                 db 0FFh
.eh_frame_hdr:000000000000B2EB                 db 0FFh
.eh_frame_hdr:000000000000B2EC                 db 0DCh
.eh_frame_hdr:000000000000B2ED                 db    9
.eh_frame_hdr:000000000000B2EE                 db    0
.eh_frame_hdr:000000000000B2EF                 db    0
.eh_frame_hdr:000000000000B2F0                 db  64h ; d
.eh_frame_hdr:000000000000B2F1                 db 0A2h
.eh_frame_hdr:000000000000B2F2                 db 0FFh
.eh_frame_hdr:000000000000B2F3                 db 0FFh
.eh_frame_hdr:000000000000B2F4                 db 0F4h
.eh_frame_hdr:000000000000B2F5                 db    9
.eh_frame_hdr:000000000000B2F6                 db    0
.eh_frame_hdr:000000000000B2F7                 db    0
.eh_frame_hdr:000000000000B2F8                 db    4
.eh_frame_hdr:000000000000B2F9                 db 0A3h
.eh_frame_hdr:000000000000B2FA                 db 0FFh
.eh_frame_hdr:000000000000B2FB                 db 0FFh
.eh_frame_hdr:000000000000B2FC                 db  14h
.eh_frame_hdr:000000000000B2FD                 db  0Ah
.eh_frame_hdr:000000000000B2FE                 db    0
.eh_frame_hdr:000000000000B2FF                 db    0
.eh_frame_hdr:000000000000B300                 db 0F4h
.eh_frame_hdr:000000000000B301                 db 0A3h
.eh_frame_hdr:000000000000B302                 db 0FFh
.eh_frame_hdr:000000000000B303                 db 0FFh
.eh_frame_hdr:000000000000B304                 db  58h ; X
.eh_frame_hdr:000000000000B305                 db  0Ah
.eh_frame_hdr:000000000000B306                 db    0
.eh_frame_hdr:000000000000B307                 db    0
.eh_frame_hdr:000000000000B308                 db  34h ; 4
.eh_frame_hdr:000000000000B309                 db 0B6h
.eh_frame_hdr:000000000000B30A                 db 0FFh
.eh_frame_hdr:000000000000B30B                 db 0FFh
.eh_frame_hdr:000000000000B30C                 db 0D0h
.eh_frame_hdr:000000000000B30D                 db  0Ah
.eh_frame_hdr:000000000000B30E                 db    0
.eh_frame_hdr:000000000000B30F                 db    0
.eh_frame_hdr:000000000000B310                 db 0E4h
.eh_frame_hdr:000000000000B311                 db 0B7h
.eh_frame_hdr:000000000000B312                 db 0FFh
.eh_frame_hdr:000000000000B313                 db 0FFh
.eh_frame_hdr:000000000000B314                 db  3Ch ; <
.eh_frame_hdr:000000000000B315                 db  0Bh
.eh_frame_hdr:000000000000B316                 db    0
.eh_frame_hdr:000000000000B317                 db    0
.eh_frame_hdr:000000000000B318                 db  24h ; $
.eh_frame_hdr:000000000000B319                 db 0B8h
.eh_frame_hdr:000000000000B31A                 db 0FFh
.eh_frame_hdr:000000000000B31B                 db 0FFh
.eh_frame_hdr:000000000000B31C                 db  68h ; h
.eh_frame_hdr:000000000000B31D                 db  0Bh
.eh_frame_hdr:000000000000B31E                 db    0
.eh_frame_hdr:000000000000B31F                 db    0
.eh_frame_hdr:000000000000B320                 db  44h ; D
.eh_frame_hdr:000000000000B321                 db 0B8h
.eh_frame_hdr:000000000000B322                 db 0FFh
.eh_frame_hdr:000000000000B323                 db 0FFh
.eh_frame_hdr:000000000000B324                 db  7Ch ; |
.eh_frame_hdr:000000000000B325                 db  0Bh
.eh_frame_hdr:000000000000B326                 db    0
.eh_frame_hdr:000000000000B327                 db    0
.eh_frame_hdr:000000000000B328                 db  64h ; d
.eh_frame_hdr:000000000000B329                 db 0B8h
.eh_frame_hdr:000000000000B32A                 db 0FFh
.eh_frame_hdr:000000000000B32B                 db 0FFh
.eh_frame_hdr:000000000000B32C                 db  90h
.eh_frame_hdr:000000000000B32D                 db  0Bh
.eh_frame_hdr:000000000000B32E                 db    0
.eh_frame_hdr:000000000000B32F                 db    0
.eh_frame_hdr:000000000000B330                 db 0A4h
.eh_frame_hdr:000000000000B331                 db 0B8h
.eh_frame_hdr:000000000000B332                 db 0FFh
.eh_frame_hdr:000000000000B333                 db 0FFh
.eh_frame_hdr:000000000000B334                 db 0A4h
.eh_frame_hdr:000000000000B335                 db  0Bh
.eh_frame_hdr:000000000000B336                 db    0
.eh_frame_hdr:000000000000B337                 db    0
.eh_frame_hdr:000000000000B338                 db 0C4h
.eh_frame_hdr:000000000000B339                 db 0B8h
.eh_frame_hdr:000000000000B33A                 db 0FFh
.eh_frame_hdr:000000000000B33B                 db 0FFh
.eh_frame_hdr:000000000000B33C                 db 0B8h
.eh_frame_hdr:000000000000B33D                 db  0Bh
.eh_frame_hdr:000000000000B33E                 db    0
.eh_frame_hdr:000000000000B33F                 db    0
.eh_frame_hdr:000000000000B340                 db 0F4h
.eh_frame_hdr:000000000000B341                 db 0B8h
.eh_frame_hdr:000000000000B342                 db 0FFh
.eh_frame_hdr:000000000000B343                 db 0FFh
.eh_frame_hdr:000000000000B344                 db 0CCh
.eh_frame_hdr:000000000000B345                 db  0Bh
.eh_frame_hdr:000000000000B346                 db    0
.eh_frame_hdr:000000000000B347                 db    0
.eh_frame_hdr:000000000000B348                 db  74h ; t
.eh_frame_hdr:000000000000B349                 db 0B9h
.eh_frame_hdr:000000000000B34A                 db 0FFh
.eh_frame_hdr:000000000000B34B                 db 0FFh
.eh_frame_hdr:000000000000B34C                 db  20h
.eh_frame_hdr:000000000000B34D                 db  0Ch
.eh_frame_hdr:000000000000B34E                 db    0
.eh_frame_hdr:000000000000B34F                 db    0
.eh_frame_hdr:000000000000B350                 db  64h ; d
.eh_frame_hdr:000000000000B351                 db 0BAh
.eh_frame_hdr:000000000000B352                 db 0FFh
.eh_frame_hdr:000000000000B353                 db 0FFh
.eh_frame_hdr:000000000000B354                 db  8Ch
.eh_frame_hdr:000000000000B355                 db  0Ch
.eh_frame_hdr:000000000000B356                 db    0
.eh_frame_hdr:000000000000B357                 db    0
.eh_frame_hdr:000000000000B358                 db  74h ; t
.eh_frame_hdr:000000000000B359                 db 0BAh
.eh_frame_hdr:000000000000B35A                 db 0FFh
.eh_frame_hdr:000000000000B35B                 db 0FFh
.eh_frame_hdr:000000000000B35C                 db 0A0h
.eh_frame_hdr:000000000000B35D                 db  0Ch
.eh_frame_hdr:000000000000B35E                 db    0
.eh_frame_hdr:000000000000B35F                 db    0
.eh_frame_hdr:000000000000B360                 db  14h
.eh_frame_hdr:000000000000B361                 db 0BBh
.eh_frame_hdr:000000000000B362                 db 0FFh
.eh_frame_hdr:000000000000B363                 db 0FFh
.eh_frame_hdr:000000000000B364                 db 0CCh
.eh_frame_hdr:000000000000B365                 db  0Ch
.eh_frame_hdr:000000000000B366                 db    0
.eh_frame_hdr:000000000000B367                 db    0
.eh_frame_hdr:000000000000B368                 db  34h ; 4
.eh_frame_hdr:000000000000B369                 db 0BBh
.eh_frame_hdr:000000000000B36A                 db 0FFh
.eh_frame_hdr:000000000000B36B                 db 0FFh
.eh_frame_hdr:000000000000B36C                 db 0E0h
.eh_frame_hdr:000000000000B36D                 db  0Ch
.eh_frame_hdr:000000000000B36E                 db    0
.eh_frame_hdr:000000000000B36F                 db    0
.eh_frame_hdr:000000000000B370                 db  44h ; D
.eh_frame_hdr:000000000000B371                 db 0BBh
.eh_frame_hdr:000000000000B372                 db 0FFh
.eh_frame_hdr:000000000000B373                 db 0FFh
.eh_frame_hdr:000000000000B374                 db 0F4h
.eh_frame_hdr:000000000000B375                 db  0Ch
.eh_frame_hdr:000000000000B376                 db    0
.eh_frame_hdr:000000000000B377                 db    0
.eh_frame_hdr:000000000000B378                 db  64h ; d
.eh_frame_hdr:000000000000B379                 db 0BBh
.eh_frame_hdr:000000000000B37A                 db 0FFh
.eh_frame_hdr:000000000000B37B                 db 0FFh
.eh_frame_hdr:000000000000B37C                 db    8
.eh_frame_hdr:000000000000B37D                 db  0Dh
.eh_frame_hdr:000000000000B37E                 db    0
.eh_frame_hdr:000000000000B37F                 db    0
.eh_frame_hdr:000000000000B380                 db  84h
.eh_frame_hdr:000000000000B381                 db 0BBh
.eh_frame_hdr:000000000000B382                 db 0FFh
.eh_frame_hdr:000000000000B383                 db 0FFh
.eh_frame_hdr:000000000000B384                 db  1Ch
.eh_frame_hdr:000000000000B385                 db  0Dh
.eh_frame_hdr:000000000000B386                 db    0
.eh_frame_hdr:000000000000B387                 db    0
.eh_frame_hdr:000000000000B388                 db  14h
.eh_frame_hdr:000000000000B389                 db 0BCh
.eh_frame_hdr:000000000000B38A                 db 0FFh
.eh_frame_hdr:000000000000B38B                 db 0FFh
.eh_frame_hdr:000000000000B38C                 db  38h ; 8
.eh_frame_hdr:000000000000B38D                 db  0Dh
.eh_frame_hdr:000000000000B38E                 db    0
.eh_frame_hdr:000000000000B38F                 db    0
.eh_frame_hdr:000000000000B390                 db 0A4h
.eh_frame_hdr:000000000000B391                 db 0BCh
.eh_frame_hdr:000000000000B392                 db 0FFh
.eh_frame_hdr:000000000000B393                 db 0FFh
.eh_frame_hdr:000000000000B394                 db  54h ; T
.eh_frame_hdr:000000000000B395                 db  0Dh
.eh_frame_hdr:000000000000B396                 db    0
.eh_frame_hdr:000000000000B397                 db    0
.eh_frame_hdr:000000000000B398                 db 0B4h
.eh_frame_hdr:000000000000B399                 db 0BCh
.eh_frame_hdr:000000000000B39A                 db 0FFh
.eh_frame_hdr:000000000000B39B                 db 0FFh
.eh_frame_hdr:000000000000B39C                 db  68h ; h
.eh_frame_hdr:000000000000B39D                 db  0Dh
.eh_frame_hdr:000000000000B39E                 db    0
.eh_frame_hdr:000000000000B39F                 db    0
.eh_frame_hdr:000000000000B3A0                 db 0C4h
.eh_frame_hdr:000000000000B3A1                 db 0BCh
.eh_frame_hdr:000000000000B3A2                 db 0FFh
.eh_frame_hdr:000000000000B3A3                 db 0FFh
.eh_frame_hdr:000000000000B3A4                 db  7Ch ; |
.eh_frame_hdr:000000000000B3A5                 db  0Dh
.eh_frame_hdr:000000000000B3A6                 db    0
.eh_frame_hdr:000000000000B3A7                 db    0
.eh_frame_hdr:000000000000B3A8                 db  64h ; d
.eh_frame_hdr:000000000000B3A9                 db 0BDh
.eh_frame_hdr:000000000000B3AA                 db 0FFh
.eh_frame_hdr:000000000000B3AB                 db 0FFh
.eh_frame_hdr:000000000000B3AC                 db  98h
.eh_frame_hdr:000000000000B3AD                 db  0Dh
.eh_frame_hdr:000000000000B3AE                 db    0
.eh_frame_hdr:000000000000B3AF                 db    0
.eh_frame_hdr:000000000000B3B0                 db  74h ; t
.eh_frame_hdr:000000000000B3B1                 db 0BDh
.eh_frame_hdr:000000000000B3B2                 db 0FFh
.eh_frame_hdr:000000000000B3B3                 db 0FFh
.eh_frame_hdr:000000000000B3B4                 db 0ACh
.eh_frame_hdr:000000000000B3B5                 db  0Dh
.eh_frame_hdr:000000000000B3B6                 db    0
.eh_frame_hdr:000000000000B3B7                 db    0
.eh_frame_hdr:000000000000B3B8                 db  94h
.eh_frame_hdr:000000000000B3B9                 db 0BDh
.eh_frame_hdr:000000000000B3BA                 db 0FFh
.eh_frame_hdr:000000000000B3BB                 db 0FFh
.eh_frame_hdr:000000000000B3BC                 db 0C0h
.eh_frame_hdr:000000000000B3BD                 db  0Dh
.eh_frame_hdr:000000000000B3BE                 db    0
.eh_frame_hdr:000000000000B3BF                 db    0
.eh_frame_hdr:000000000000B3C0                 db 0A4h
.eh_frame_hdr:000000000000B3C1                 db 0BDh
.eh_frame_hdr:000000000000B3C2                 db 0FFh
.eh_frame_hdr:000000000000B3C3                 db 0FFh
.eh_frame_hdr:000000000000B3C4                 db 0D4h
.eh_frame_hdr:000000000000B3C5                 db  0Dh
.eh_frame_hdr:000000000000B3C6                 db    0
.eh_frame_hdr:000000000000B3C7                 db    0
.eh_frame_hdr:000000000000B3C8                 db  34h ; 4
.eh_frame_hdr:000000000000B3C9                 db 0BEh
.eh_frame_hdr:000000000000B3CA                 db 0FFh
.eh_frame_hdr:000000000000B3CB                 db 0FFh
.eh_frame_hdr:000000000000B3CC                 db 0F0h
.eh_frame_hdr:000000000000B3CD                 db  0Dh
.eh_frame_hdr:000000000000B3CE                 db    0
.eh_frame_hdr:000000000000B3CF                 db    0
.eh_frame_hdr:000000000000B3D0                 db 0D4h
.eh_frame_hdr:000000000000B3D1                 db 0BEh
.eh_frame_hdr:000000000000B3D2                 db 0FFh
.eh_frame_hdr:000000000000B3D3                 db 0FFh
.eh_frame_hdr:000000000000B3D4                 db  0Ch
.eh_frame_hdr:000000000000B3D5                 db  0Eh
.eh_frame_hdr:000000000000B3D6                 db    0
.eh_frame_hdr:000000000000B3D7                 db    0
.eh_frame_hdr:000000000000B3D8                 db 0E4h
.eh_frame_hdr:000000000000B3D9                 db 0BEh
.eh_frame_hdr:000000000000B3DA                 db 0FFh
.eh_frame_hdr:000000000000B3DB                 db 0FFh
.eh_frame_hdr:000000000000B3DC                 db  20h
.eh_frame_hdr:000000000000B3DD                 db  0Eh
.eh_frame_hdr:000000000000B3DE                 db    0
.eh_frame_hdr:000000000000B3DF                 db    0
.eh_frame_hdr:000000000000B3E0                 db    4
.eh_frame_hdr:000000000000B3E1                 db 0BFh
.eh_frame_hdr:000000000000B3E2                 db 0FFh
.eh_frame_hdr:000000000000B3E3                 db 0FFh
.eh_frame_hdr:000000000000B3E4                 db  34h ; 4
.eh_frame_hdr:000000000000B3E5                 db  0Eh
.eh_frame_hdr:000000000000B3E6                 db    0
.eh_frame_hdr:000000000000B3E7                 db    0
.eh_frame_hdr:000000000000B3E8                 db  24h ; $
.eh_frame_hdr:000000000000B3E9                 db 0BFh
.eh_frame_hdr:000000000000B3EA                 db 0FFh
.eh_frame_hdr:000000000000B3EB                 db 0FFh
.eh_frame_hdr:000000000000B3EC                 db  48h ; H
.eh_frame_hdr:000000000000B3ED                 db  0Eh
.eh_frame_hdr:000000000000B3EE                 db    0
.eh_frame_hdr:000000000000B3EF                 db    0
.eh_frame_hdr:000000000000B3F0                 db  34h ; 4
.eh_frame_hdr:000000000000B3F1                 db 0BFh
.eh_frame_hdr:000000000000B3F2                 db 0FFh
.eh_frame_hdr:000000000000B3F3                 db 0FFh
.eh_frame_hdr:000000000000B3F4                 db  5Ch ; \
.eh_frame_hdr:000000000000B3F5                 db  0Eh
.eh_frame_hdr:000000000000B3F6                 db    0
.eh_frame_hdr:000000000000B3F7                 db    0
.eh_frame_hdr:000000000000B3F8                 db  54h ; T
.eh_frame_hdr:000000000000B3F9                 db 0BFh
.eh_frame_hdr:000000000000B3FA                 db 0FFh
.eh_frame_hdr:000000000000B3FB                 db 0FFh
.eh_frame_hdr:000000000000B3FC                 db  70h ; p
.eh_frame_hdr:000000000000B3FD                 db  0Eh
.eh_frame_hdr:000000000000B3FE                 db    0
.eh_frame_hdr:000000000000B3FF                 db    0
.eh_frame_hdr:000000000000B400                 db  74h ; t
.eh_frame_hdr:000000000000B401                 db 0BFh
.eh_frame_hdr:000000000000B402                 db 0FFh
.eh_frame_hdr:000000000000B403                 db 0FFh
.eh_frame_hdr:000000000000B404                 db  84h
.eh_frame_hdr:000000000000B405                 db  0Eh
.eh_frame_hdr:000000000000B406                 db    0
.eh_frame_hdr:000000000000B407                 db    0
.eh_frame_hdr:000000000000B408                 db  94h
.eh_frame_hdr:000000000000B409                 db 0BFh
.eh_frame_hdr:000000000000B40A                 db 0FFh
.eh_frame_hdr:000000000000B40B                 db 0FFh
.eh_frame_hdr:000000000000B40C                 db  9Ch
.eh_frame_hdr:000000000000B40D                 db  0Eh
.eh_frame_hdr:000000000000B40E                 db    0
.eh_frame_hdr:000000000000B40F                 db    0
.eh_frame_hdr:000000000000B410                 db 0C4h
.eh_frame_hdr:000000000000B411                 db 0BFh
.eh_frame_hdr:000000000000B412                 db 0FFh
.eh_frame_hdr:000000000000B413                 db 0FFh
.eh_frame_hdr:000000000000B414                 db 0B8h
.eh_frame_hdr:000000000000B415                 db  0Eh
.eh_frame_hdr:000000000000B416                 db    0
.eh_frame_hdr:000000000000B417                 db    0
.eh_frame_hdr:000000000000B418                 db    4
.eh_frame_hdr:000000000000B419                 db 0C0h
.eh_frame_hdr:000000000000B41A                 db 0FFh
.eh_frame_hdr:000000000000B41B                 db 0FFh
.eh_frame_hdr:000000000000B41C                 db 0D8h
.eh_frame_hdr:000000000000B41D                 db  0Eh
.eh_frame_hdr:000000000000B41E                 db    0
.eh_frame_hdr:000000000000B41F                 db    0
.eh_frame_hdr:000000000000B420                 db  14h
.eh_frame_hdr:000000000000B421                 db 0C0h
.eh_frame_hdr:000000000000B422                 db 0FFh
.eh_frame_hdr:000000000000B423                 db 0FFh
.eh_frame_hdr:000000000000B424                 db 0ECh
.eh_frame_hdr:000000000000B425                 db  0Eh
.eh_frame_hdr:000000000000B426                 db    0
.eh_frame_hdr:000000000000B427                 db    0
.eh_frame_hdr:000000000000B428                 db  34h ; 4
.eh_frame_hdr:000000000000B429                 db 0C1h
.eh_frame_hdr:000000000000B42A                 db 0FFh
.eh_frame_hdr:000000000000B42B                 db 0FFh
.eh_frame_hdr:000000000000B42C                 db  38h ; 8
.eh_frame_hdr:000000000000B42D                 db  0Fh
.eh_frame_hdr:000000000000B42E                 db    0
.eh_frame_hdr:000000000000B42F                 db    0
.eh_frame_hdr:000000000000B430                 db  54h ; T
.eh_frame_hdr:000000000000B431                 db 0C1h
.eh_frame_hdr:000000000000B432                 db 0FFh
.eh_frame_hdr:000000000000B433                 db 0FFh
.eh_frame_hdr:000000000000B434                 db  54h ; T
.eh_frame_hdr:000000000000B435                 db  0Fh
.eh_frame_hdr:000000000000B436                 db    0
.eh_frame_hdr:000000000000B437                 db    0
.eh_frame_hdr:000000000000B438                 db 0B4h
.eh_frame_hdr:000000000000B439                 db 0C1h
.eh_frame_hdr:000000000000B43A                 db 0FFh
.eh_frame_hdr:000000000000B43B                 db 0FFh
.eh_frame_hdr:000000000000B43C                 db  8Ch
.eh_frame_hdr:000000000000B43D                 db  0Fh
.eh_frame_hdr:000000000000B43E                 db    0
.eh_frame_hdr:000000000000B43F                 db    0
.eh_frame_hdr:000000000000B440                 db  14h
.eh_frame_hdr:000000000000B441                 db 0C2h
.eh_frame_hdr:000000000000B442                 db 0FFh
.eh_frame_hdr:000000000000B443                 db 0FFh
.eh_frame_hdr:000000000000B444                 db 0ACh
.eh_frame_hdr:000000000000B445                 db  0Fh
.eh_frame_hdr:000000000000B446                 db    0
.eh_frame_hdr:000000000000B447                 db    0
.eh_frame_hdr:000000000000B448                 db  44h ; D
.eh_frame_hdr:000000000000B449                 db 0C5h
.eh_frame_hdr:000000000000B44A                 db 0FFh
.eh_frame_hdr:000000000000B44B                 db 0FFh
.eh_frame_hdr:000000000000B44C                 db 0F8h
.eh_frame_hdr:000000000000B44D                 db  0Fh
.eh_frame_hdr:000000000000B44E                 db    0
.eh_frame_hdr:000000000000B44F                 db    0
.eh_frame_hdr:000000000000B450                 db  54h ; T
.eh_frame_hdr:000000000000B451                 db 0C5h
.eh_frame_hdr:000000000000B452                 db 0FFh
.eh_frame_hdr:000000000000B453                 db 0FFh
.eh_frame_hdr:000000000000B454                 db  0Ch
.eh_frame_hdr:000000000000B455                 db  10h
.eh_frame_hdr:000000000000B456                 db    0
.eh_frame_hdr:000000000000B457                 db    0
.eh_frame_hdr:000000000000B458                 db  64h ; d
.eh_frame_hdr:000000000000B459                 db 0C5h
.eh_frame_hdr:000000000000B45A                 db 0FFh
.eh_frame_hdr:000000000000B45B                 db 0FFh
.eh_frame_hdr:000000000000B45C                 db  20h
.eh_frame_hdr:000000000000B45D                 db  10h
.eh_frame_hdr:000000000000B45E                 db    0
.eh_frame_hdr:000000000000B45F                 db    0
.eh_frame_hdr:000000000000B460                 db    4
.eh_frame_hdr:000000000000B461                 db 0C7h
.eh_frame_hdr:000000000000B462                 db 0FFh
.eh_frame_hdr:000000000000B463                 db 0FFh
.eh_frame_hdr:000000000000B464                 db  84h
.eh_frame_hdr:000000000000B465                 db  10h
.eh_frame_hdr:000000000000B466                 db    0
.eh_frame_hdr:000000000000B467                 db    0
.eh_frame_hdr:000000000000B468                 db  54h ; T
.eh_frame_hdr:000000000000B469                 db 0C7h
.eh_frame_hdr:000000000000B46A                 db 0FFh
.eh_frame_hdr:000000000000B46B                 db 0FFh
.eh_frame_hdr:000000000000B46C                 db 0BCh
.eh_frame_hdr:000000000000B46D                 db  10h
.eh_frame_hdr:000000000000B46E                 db    0
.eh_frame_hdr:000000000000B46F                 db    0
.eh_frame_hdr:000000000000B470                 db 0E4h
.eh_frame_hdr:000000000000B471                 db 0C9h
.eh_frame_hdr:000000000000B472                 db 0FFh
.eh_frame_hdr:000000000000B473                 db 0FFh
.eh_frame_hdr:000000000000B474                 db 0D0h
.eh_frame_hdr:000000000000B475                 db  10h
.eh_frame_hdr:000000000000B476                 db    0
.eh_frame_hdr:000000000000B477                 db    0
.eh_frame_hdr:000000000000B478                 db  24h ; $
.eh_frame_hdr:000000000000B479                 db 0CCh
.eh_frame_hdr:000000000000B47A                 db 0FFh
.eh_frame_hdr:000000000000B47B                 db 0FFh
.eh_frame_hdr:000000000000B47C                 db    4
.eh_frame_hdr:000000000000B47D                 db  11h
.eh_frame_hdr:000000000000B47E                 db    0
.eh_frame_hdr:000000000000B47F                 db    0
.eh_frame_hdr:000000000000B480                 db  94h
.eh_frame_hdr:000000000000B481                 db 0CEh
.eh_frame_hdr:000000000000B482                 db 0FFh
.eh_frame_hdr:000000000000B483                 db 0FFh
.eh_frame_hdr:000000000000B484                 db  54h ; T
.eh_frame_hdr:000000000000B485                 db  11h
.eh_frame_hdr:000000000000B486                 db    0
.eh_frame_hdr:000000000000B487                 db    0
.eh_frame_hdr:000000000000B488                 db 0D4h
.eh_frame_hdr:000000000000B489                 db 0CEh
.eh_frame_hdr:000000000000B48A                 db 0FFh
.eh_frame_hdr:000000000000B48B                 db 0FFh
.eh_frame_hdr:000000000000B48C                 db  8Ch
.eh_frame_hdr:000000000000B48D                 db  11h
.eh_frame_hdr:000000000000B48E                 db    0
.eh_frame_hdr:000000000000B48F                 db    0
.eh_frame_hdr:000000000000B490                 db 0F4h
.eh_frame_hdr:000000000000B491                 db 0D2h
.eh_frame_hdr:000000000000B492                 db 0FFh
.eh_frame_hdr:000000000000B493                 db 0FFh
.eh_frame_hdr:000000000000B494                 db 0A0h
.eh_frame_hdr:000000000000B495                 db  12h
.eh_frame_hdr:000000000000B496                 db    0
.eh_frame_hdr:000000000000B497                 db    0
.eh_frame_hdr:000000000000B498                 db  14h
.eh_frame_hdr:000000000000B499                 db 0D3h
.eh_frame_hdr:000000000000B49A                 db 0FFh
.eh_frame_hdr:000000000000B49B                 db 0FFh
.eh_frame_hdr:000000000000B49C                 db 0B4h
.eh_frame_hdr:000000000000B49D                 db  12h
.eh_frame_hdr:000000000000B49E                 db    0
.eh_frame_hdr:000000000000B49F                 db    0
.eh_frame_hdr:000000000000B4A0                 db  94h
.eh_frame_hdr:000000000000B4A1                 db 0D3h
.eh_frame_hdr:000000000000B4A2                 db 0FFh
.eh_frame_hdr:000000000000B4A3                 db 0FFh
.eh_frame_hdr:000000000000B4A4                 db 0D0h
.eh_frame_hdr:000000000000B4A5                 db  12h
.eh_frame_hdr:000000000000B4A6                 db    0
.eh_frame_hdr:000000000000B4A7                 db    0
.eh_frame_hdr:000000000000B4A8                 db  74h ; t
.eh_frame_hdr:000000000000B4A9                 db 0D4h
.eh_frame_hdr:000000000000B4AA                 db 0FFh
.eh_frame_hdr:000000000000B4AB                 db 0FFh
.eh_frame_hdr:000000000000B4AC                 db 0FCh
.eh_frame_hdr:000000000000B4AD                 db  12h
.eh_frame_hdr:000000000000B4AE                 db    0
.eh_frame_hdr:000000000000B4AF                 db    0
.eh_frame_hdr:000000000000B4B0                 db 0F4h
.eh_frame_hdr:000000000000B4B1                 db 0D4h
.eh_frame_hdr:000000000000B4B2                 db 0FFh
.eh_frame_hdr:000000000000B4B3                 db 0FFh
.eh_frame_hdr:000000000000B4B4                 db  1Ch
.eh_frame_hdr:000000000000B4B5                 db  13h
.eh_frame_hdr:000000000000B4B6                 db    0
.eh_frame_hdr:000000000000B4B7                 db    0
.eh_frame_hdr:000000000000B4B8                 db  14h
.eh_frame_hdr:000000000000B4B9                 db 0D5h
.eh_frame_hdr:000000000000B4BA                 db 0FFh
.eh_frame_hdr:000000000000B4BB                 db 0FFh
.eh_frame_hdr:000000000000B4BC                 db  38h ; 8
.eh_frame_hdr:000000000000B4BD                 db  13h
.eh_frame_hdr:000000000000B4BE                 db    0
.eh_frame_hdr:000000000000B4BF                 db    0
.eh_frame_hdr:000000000000B4C0                 db  44h ; D
.eh_frame_hdr:000000000000B4C1                 db 0D5h
.eh_frame_hdr:000000000000B4C2                 db 0FFh
.eh_frame_hdr:000000000000B4C3                 db 0FFh
.eh_frame_hdr:000000000000B4C4                 db  4Ch ; L
.eh_frame_hdr:000000000000B4C5                 db  13h
.eh_frame_hdr:000000000000B4C6                 db    0
.eh_frame_hdr:000000000000B4C7                 db    0
.eh_frame_hdr:000000000000B4C8                 db  54h ; T
.eh_frame_hdr:000000000000B4C9                 db 0D5h
.eh_frame_hdr:000000000000B4CA                 db 0FFh
.eh_frame_hdr:000000000000B4CB                 db 0FFh
.eh_frame_hdr:000000000000B4CC                 db  60h ; `
.eh_frame_hdr:000000000000B4CD                 db  13h
.eh_frame_hdr:000000000000B4CE                 db    0
.eh_frame_hdr:000000000000B4CF                 db    0
.eh_frame_hdr:000000000000B4D0                 db  94h
.eh_frame_hdr:000000000000B4D1                 db 0D5h
.eh_frame_hdr:000000000000B4D2                 db 0FFh
.eh_frame_hdr:000000000000B4D3                 db 0FFh
.eh_frame_hdr:000000000000B4D4                 db  84h
.eh_frame_hdr:000000000000B4D5                 db  13h
.eh_frame_hdr:000000000000B4D6                 db    0
.eh_frame_hdr:000000000000B4D7                 db    0
.eh_frame_hdr:000000000000B4D8                 db 0C4h
.eh_frame_hdr:000000000000B4D9                 db 0D5h
.eh_frame_hdr:000000000000B4DA                 db 0FFh
.eh_frame_hdr:000000000000B4DB                 db 0FFh
.eh_frame_hdr:000000000000B4DC                 db  98h
.eh_frame_hdr:000000000000B4DD                 db  13h
.eh_frame_hdr:000000000000B4DE                 db    0
.eh_frame_hdr:000000000000B4DF                 db    0
.eh_frame_hdr:000000000000B4E0                 db  54h ; T
.eh_frame_hdr:000000000000B4E1                 db 0D6h
.eh_frame_hdr:000000000000B4E2                 db 0FFh
.eh_frame_hdr:000000000000B4E3                 db 0FFh
.eh_frame_hdr:000000000000B4E4                 db 0B0h
.eh_frame_hdr:000000000000B4E5                 db  13h
.eh_frame_hdr:000000000000B4E6                 db    0
.eh_frame_hdr:000000000000B4E7                 db    0
.eh_frame_hdr:000000000000B4E8                 db 0A4h
.eh_frame_hdr:000000000000B4E9                 db 0D6h
.eh_frame_hdr:000000000000B4EA                 db 0FFh
.eh_frame_hdr:000000000000B4EB                 db 0FFh
.eh_frame_hdr:000000000000B4EC                 db 0C8h
.eh_frame_hdr:000000000000B4ED                 db  13h
.eh_frame_hdr:000000000000B4EE                 db    0
.eh_frame_hdr:000000000000B4EF                 db    0
.eh_frame_hdr:000000000000B4F0                 db 0C4h
.eh_frame_hdr:000000000000B4F1                 db 0D6h
.eh_frame_hdr:000000000000B4F2                 db 0FFh
.eh_frame_hdr:000000000000B4F3                 db 0FFh
.eh_frame_hdr:000000000000B4F4                 db 0E4h
.eh_frame_hdr:000000000000B4F5                 db  13h
.eh_frame_hdr:000000000000B4F6                 db    0
.eh_frame_hdr:000000000000B4F7                 db    0
.eh_frame_hdr:000000000000B4F8                 db 0F4h
.eh_frame_hdr:000000000000B4F9                 db 0D6h
.eh_frame_hdr:000000000000B4FA                 db 0FFh
.eh_frame_hdr:000000000000B4FB                 db 0FFh
.eh_frame_hdr:000000000000B4FC                 db    0
.eh_frame_hdr:000000000000B4FD                 db  14h
.eh_frame_hdr:000000000000B4FE                 db    0
.eh_frame_hdr:000000000000B4FF                 db    0
.eh_frame_hdr:000000000000B500                 db  24h ; $
.eh_frame_hdr:000000000000B501                 db 0D7h
.eh_frame_hdr:000000000000B502                 db 0FFh
.eh_frame_hdr:000000000000B503                 db 0FFh
.eh_frame_hdr:000000000000B504                 db  28h ; (
.eh_frame_hdr:000000000000B505                 db  14h
.eh_frame_hdr:000000000000B506                 db    0
.eh_frame_hdr:000000000000B507                 db    0
.eh_frame_hdr:000000000000B508                 db  44h ; D
.eh_frame_hdr:000000000000B509                 db 0D7h
.eh_frame_hdr:000000000000B50A                 db 0FFh
.eh_frame_hdr:000000000000B50B                 db 0FFh
.eh_frame_hdr:000000000000B50C                 db  44h ; D
.eh_frame_hdr:000000000000B50D                 db  14h
.eh_frame_hdr:000000000000B50E                 db    0
.eh_frame_hdr:000000000000B50F                 db    0
.eh_frame_hdr:000000000000B510                 db  84h
.eh_frame_hdr:000000000000B511                 db 0D7h
.eh_frame_hdr:000000000000B512                 db 0FFh
.eh_frame_hdr:000000000000B513                 db 0FFh
.eh_frame_hdr:000000000000B514                 db  5Ch ; \
.eh_frame_hdr:000000000000B515                 db  14h
.eh_frame_hdr:000000000000B516                 db    0
.eh_frame_hdr:000000000000B517                 db    0
.eh_frame_hdr:000000000000B518                 db  84h
.eh_frame_hdr:000000000000B519                 db 0D8h
.eh_frame_hdr:000000000000B51A                 db 0FFh
.eh_frame_hdr:000000000000B51B                 db 0FFh
.eh_frame_hdr:000000000000B51C                 db 0A8h
.eh_frame_hdr:000000000000B51D                 db  14h
.eh_frame_hdr:000000000000B51E                 db    0
.eh_frame_hdr:000000000000B51F                 db    0
.eh_frame_hdr:000000000000B520                 db 0B4h
.eh_frame_hdr:000000000000B521                 db 0D8h
.eh_frame_hdr:000000000000B522                 db 0FFh
.eh_frame_hdr:000000000000B523                 db 0FFh
.eh_frame_hdr:000000000000B524                 db 0C4h
.eh_frame_hdr:000000000000B525                 db  14h
.eh_frame_hdr:000000000000B526                 db    0
.eh_frame_hdr:000000000000B527                 db    0
.eh_frame_hdr:000000000000B528                 db 0D4h
.eh_frame_hdr:000000000000B529                 db 0DCh
.eh_frame_hdr:000000000000B52A                 db 0FFh
.eh_frame_hdr:000000000000B52B                 db 0FFh
.eh_frame_hdr:000000000000B52C                 db  14h
.eh_frame_hdr:000000000000B52D                 db  15h
.eh_frame_hdr:000000000000B52E                 db    0
.eh_frame_hdr:000000000000B52F                 db    0
.eh_frame_hdr:000000000000B530                 db  54h ; T
.eh_frame_hdr:000000000000B531                 db 0DDh
.eh_frame_hdr:000000000000B532                 db 0FFh
.eh_frame_hdr:000000000000B533                 db 0FFh
.eh_frame_hdr:000000000000B534                 db  4Ch ; L
.eh_frame_hdr:000000000000B535                 db  15h
.eh_frame_hdr:000000000000B536                 db    0
.eh_frame_hdr:000000000000B537                 db    0
.eh_frame_hdr:000000000000B538                 db 0D4h
.eh_frame_hdr:000000000000B539                 db 0DFh
.eh_frame_hdr:000000000000B53A                 db 0FFh
.eh_frame_hdr:000000000000B53B                 db 0FFh
.eh_frame_hdr:000000000000B53C                 db  84h
.eh_frame_hdr:000000000000B53D                 db  15h
.eh_frame_hdr:000000000000B53E                 db    0
.eh_frame_hdr:000000000000B53F                 db    0
.eh_frame_hdr:000000000000B540                 db  14h
.eh_frame_hdr:000000000000B541                 db 0E0h
.eh_frame_hdr:000000000000B542                 db 0FFh
.eh_frame_hdr:000000000000B543                 db 0FFh
.eh_frame_hdr:000000000000B544                 db 0A4h
.eh_frame_hdr:000000000000B545                 db  15h
.eh_frame_hdr:000000000000B546                 db    0
.eh_frame_hdr:000000000000B547                 db    0
.eh_frame_hdr:000000000000B548                 db  74h ; t
.eh_frame_hdr:000000000000B549                 db 0E0h
.eh_frame_hdr:000000000000B54A                 db 0FFh
.eh_frame_hdr:000000000000B54B                 db 0FFh
.eh_frame_hdr:000000000000B54C                 db 0D4h
.eh_frame_hdr:000000000000B54D                 db  15h
.eh_frame_hdr:000000000000B54E                 db    0
.eh_frame_hdr:000000000000B54F                 db    0
.eh_frame_hdr:000000000000B550                 db    4
.eh_frame_hdr:000000000000B551                 db 0E1h
.eh_frame_hdr:000000000000B552                 db 0FFh
.eh_frame_hdr:000000000000B553                 db 0FFh
.eh_frame_hdr:000000000000B554                 db  14h
.eh_frame_hdr:000000000000B555                 db  16h
.eh_frame_hdr:000000000000B556                 db    0
.eh_frame_hdr:000000000000B557                 db    0
.eh_frame_hdr:000000000000B558                 db  84h
.eh_frame_hdr:000000000000B559                 db 0E1h
.eh_frame_hdr:000000000000B55A                 db 0FFh
.eh_frame_hdr:000000000000B55B                 db 0FFh
.eh_frame_hdr:000000000000B55C                 db  64h ; d
.eh_frame_hdr:000000000000B55D                 db  16h
.eh_frame_hdr:000000000000B55E                 db    0
.eh_frame_hdr:000000000000B55F                 db    0
.eh_frame_hdr:000000000000B560                 db  24h ; $
.eh_frame_hdr:000000000000B561                 db 0E2h
.eh_frame_hdr:000000000000B562                 db 0FFh
.eh_frame_hdr:000000000000B563                 db 0FFh
.eh_frame_hdr:000000000000B564                 db  94h
.eh_frame_hdr:000000000000B565                 db  16h
.eh_frame_hdr:000000000000B566                 db    0
.eh_frame_hdr:000000000000B567                 db    0
.eh_frame_hdr:000000000000B568                 db  84h
.eh_frame_hdr:000000000000B569                 db 0E2h
.eh_frame_hdr:000000000000B56A                 db 0FFh
.eh_frame_hdr:000000000000B56B                 db 0FFh
.eh_frame_hdr:000000000000B56C                 db 0B4h
.eh_frame_hdr:000000000000B56D                 db  16h
.eh_frame_hdr:000000000000B56E                 db    0
.eh_frame_hdr:000000000000B56F                 db    0
.eh_frame_hdr:000000000000B570                 db 0C4h
.eh_frame_hdr:000000000000B571                 db 0E2h
.eh_frame_hdr:000000000000B572                 db 0FFh
.eh_frame_hdr:000000000000B573                 db 0FFh
.eh_frame_hdr:000000000000B574                 db 0D4h
.eh_frame_hdr:000000000000B575                 db  16h
.eh_frame_hdr:000000000000B576                 db    0
.eh_frame_hdr:000000000000B577                 db    0
.eh_frame_hdr:000000000000B578                 db 0D4h
.eh_frame_hdr:000000000000B579                 db 0E2h
.eh_frame_hdr:000000000000B57A                 db 0FFh
.eh_frame_hdr:000000000000B57B                 db 0FFh
.eh_frame_hdr:000000000000B57C                 db 0ECh
.eh_frame_hdr:000000000000B57D                 db  16h
.eh_frame_hdr:000000000000B57E                 db    0
.eh_frame_hdr:000000000000B57F                 db    0
.eh_frame_hdr:000000000000B580                 db  44h ; D
.eh_frame_hdr:000000000000B581                 db 0E3h
.eh_frame_hdr:000000000000B582                 db 0FFh
.eh_frame_hdr:000000000000B583                 db 0FFh
.eh_frame_hdr:000000000000B584                 db  34h ; 4
.eh_frame_hdr:000000000000B585                 db  17h
.eh_frame_hdr:000000000000B586                 db    0
.eh_frame_hdr:000000000000B587                 db    0
.eh_frame_hdr:000000000000B588                 db  54h ; T
.eh_frame_hdr:000000000000B589                 db 0E3h
.eh_frame_hdr:000000000000B58A                 db 0FFh
.eh_frame_hdr:000000000000B58B                 db 0FFh
.eh_frame_hdr:000000000000B58C                 db  4Ch ; L
.eh_frame_hdr:000000000000B58D                 db  17h
.eh_frame_hdr:000000000000B58E                 db    0
.eh_frame_hdr:000000000000B58F                 db    0
.eh_frame_hdr:000000000000B58F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000B58F
.eh_frame:000000000000B590 ; ===========================================================================
.eh_frame:000000000000B590
.eh_frame:000000000000B590 ; Segment type: Pure data
.eh_frame:000000000000B590 ; Segment permissions: Read
.eh_frame:000000000000B590 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000B590                 assume cs:_eh_frame
.eh_frame:000000000000B590                 ;org 0B590h
.eh_frame:000000000000B590                 db  14h
.eh_frame:000000000000B591                 db    0
.eh_frame:000000000000B592                 db    0
.eh_frame:000000000000B593                 db    0
.eh_frame:000000000000B594                 db    0
.eh_frame:000000000000B595                 db    0
.eh_frame:000000000000B596                 db    0
.eh_frame:000000000000B597                 db    0
.eh_frame:000000000000B598                 db    1
.eh_frame:000000000000B599                 db  7Ah ; z
.eh_frame:000000000000B59A                 db  52h ; R
.eh_frame:000000000000B59B                 db    0
.eh_frame:000000000000B59C                 db    1
.eh_frame:000000000000B59D                 db  78h ; x
.eh_frame:000000000000B59E                 db  10h
.eh_frame:000000000000B59F                 db    1
.eh_frame:000000000000B5A0                 db  1Bh
.eh_frame:000000000000B5A1                 db  0Ch
.eh_frame:000000000000B5A2                 db    7
.eh_frame:000000000000B5A3                 db    8
.eh_frame:000000000000B5A4                 db  90h
.eh_frame:000000000000B5A5                 db    1
.eh_frame:000000000000B5A6                 db    7
.eh_frame:000000000000B5A7                 db  10h
.eh_frame:000000000000B5A8                 db  14h
.eh_frame:000000000000B5A9                 db    0
.eh_frame:000000000000B5AA                 db    0
.eh_frame:000000000000B5AB                 db    0
.eh_frame:000000000000B5AC                 db  1Ch
.eh_frame:000000000000B5AD                 db    0
.eh_frame:000000000000B5AE                 db    0
.eh_frame:000000000000B5AF                 db    0
.eh_frame:000000000000B5B0                 db  90h
.eh_frame:000000000000B5B1                 db  74h ; t
.eh_frame:000000000000B5B2                 db 0FFh
.eh_frame:000000000000B5B3                 db 0FFh
.eh_frame:000000000000B5B4                 db  2Bh ; +
.eh_frame:000000000000B5B5                 db    0
.eh_frame:000000000000B5B6                 db    0
.eh_frame:000000000000B5B7                 db    0
.eh_frame:000000000000B5B8                 db    0
.eh_frame:000000000000B5B9                 db    0
.eh_frame:000000000000B5BA                 db    0
.eh_frame:000000000000B5BB                 db    0
.eh_frame:000000000000B5BC                 db    0
.eh_frame:000000000000B5BD                 db    0
.eh_frame:000000000000B5BE                 db    0
.eh_frame:000000000000B5BF                 db    0
.eh_frame:000000000000B5C0                 db  14h
.eh_frame:000000000000B5C1                 db    0
.eh_frame:000000000000B5C2                 db    0
.eh_frame:000000000000B5C3                 db    0
.eh_frame:000000000000B5C4                 db    0
.eh_frame:000000000000B5C5                 db    0
.eh_frame:000000000000B5C6                 db    0
.eh_frame:000000000000B5C7                 db    0
.eh_frame:000000000000B5C8                 db    1
.eh_frame:000000000000B5C9                 db  7Ah ; z
.eh_frame:000000000000B5CA                 db  52h ; R
.eh_frame:000000000000B5CB                 db    0
.eh_frame:000000000000B5CC                 db    1
.eh_frame:000000000000B5CD                 db  78h ; x
.eh_frame:000000000000B5CE                 db  10h
.eh_frame:000000000000B5CF                 db    1
.eh_frame:000000000000B5D0                 db  1Bh
.eh_frame:000000000000B5D1                 db  0Ch
.eh_frame:000000000000B5D2                 db    7
.eh_frame:000000000000B5D3                 db    8
.eh_frame:000000000000B5D4                 db  90h
.eh_frame:000000000000B5D5                 db    1
.eh_frame:000000000000B5D6                 db    0
.eh_frame:000000000000B5D7                 db    0
.eh_frame:000000000000B5D8                 db  24h ; $
.eh_frame:000000000000B5D9                 db    0
.eh_frame:000000000000B5DA                 db    0
.eh_frame:000000000000B5DB                 db    0
.eh_frame:000000000000B5DC                 db  1Ch
.eh_frame:000000000000B5DD                 db    0
.eh_frame:000000000000B5DE                 db    0
.eh_frame:000000000000B5DF                 db    0
.eh_frame:000000000000B5E0                 db  50h ; P
.eh_frame:000000000000B5E1                 db  66h ; f
.eh_frame:000000000000B5E2                 db 0FFh
.eh_frame:000000000000B5E3                 db 0FFh
.eh_frame:000000000000B5E4                 db    0
.eh_frame:000000000000B5E5                 db    5
.eh_frame:000000000000B5E6                 db    0
.eh_frame:000000000000B5E7                 db    0
.eh_frame:000000000000B5E8                 db    0
.eh_frame:000000000000B5E9                 db  0Eh
.eh_frame:000000000000B5EA                 db  10h
.eh_frame:000000000000B5EB                 db  46h ; F
.eh_frame:000000000000B5EC                 db  0Eh
.eh_frame:000000000000B5ED                 db  18h
.eh_frame:000000000000B5EE                 db  4Ah ; J
.eh_frame:000000000000B5EF                 db  0Fh
.eh_frame:000000000000B5F0                 db  0Bh
.eh_frame:000000000000B5F1                 db  77h ; w
.eh_frame:000000000000B5F2                 db    8
.eh_frame:000000000000B5F3                 db  80h
.eh_frame:000000000000B5F4                 db    0
.eh_frame:000000000000B5F5                 db  3Fh ; ?
.eh_frame:000000000000B5F6                 db  1Ah
.eh_frame:000000000000B5F7                 db  3Bh ; ;
.eh_frame:000000000000B5F8                 db  2Ah ; *
.eh_frame:000000000000B5F9                 db  33h ; 3
.eh_frame:000000000000B5FA                 db  24h ; $
.eh_frame:000000000000B5FB                 db  22h ; "
.eh_frame:000000000000B5FC                 db    0
.eh_frame:000000000000B5FD                 db    0
.eh_frame:000000000000B5FE                 db    0
.eh_frame:000000000000B5FF                 db    0
.eh_frame:000000000000B600                 db  14h
.eh_frame:000000000000B601                 db    0
.eh_frame:000000000000B602                 db    0
.eh_frame:000000000000B603                 db    0
.eh_frame:000000000000B604                 db  44h ; D
.eh_frame:000000000000B605                 db    0
.eh_frame:000000000000B606                 db    0
.eh_frame:000000000000B607                 db    0
.eh_frame:000000000000B608                 db  28h ; (
.eh_frame:000000000000B609                 db  6Bh ; k
.eh_frame:000000000000B60A                 db 0FFh
.eh_frame:000000000000B60B                 db 0FFh
.eh_frame:000000000000B60C                 db    8
.eh_frame:000000000000B60D                 db    0
.eh_frame:000000000000B60E                 db    0
.eh_frame:000000000000B60F                 db    0
.eh_frame:000000000000B610                 db    0
.eh_frame:000000000000B611                 db    0
.eh_frame:000000000000B612                 db    0
.eh_frame:000000000000B613                 db    0
.eh_frame:000000000000B614                 db    0
.eh_frame:000000000000B615                 db    0
.eh_frame:000000000000B616                 db    0
.eh_frame:000000000000B617                 db    0
.eh_frame:000000000000B618                 db  10h
.eh_frame:000000000000B619                 db    0
.eh_frame:000000000000B61A                 db    0
.eh_frame:000000000000B61B                 db    0
.eh_frame:000000000000B61C                 db  5Ch ; \
.eh_frame:000000000000B61D                 db    0
.eh_frame:000000000000B61E                 db    0
.eh_frame:000000000000B61F                 db    0
.eh_frame:000000000000B620                 db  30h ; 0
.eh_frame:000000000000B621                 db  75h ; u
.eh_frame:000000000000B622                 db 0FFh
.eh_frame:000000000000B623                 db 0FFh
.eh_frame:000000000000B624                 db  0Ch
.eh_frame:000000000000B625                 db    0
.eh_frame:000000000000B626                 db    0
.eh_frame:000000000000B627                 db    0
.eh_frame:000000000000B628                 db    0
.eh_frame:000000000000B629                 db    0
.eh_frame:000000000000B62A                 db    0
.eh_frame:000000000000B62B                 db    0
.eh_frame:000000000000B62C                 db  30h ; 0
.eh_frame:000000000000B62D                 db    0
.eh_frame:000000000000B62E                 db    0
.eh_frame:000000000000B62F                 db    0
.eh_frame:000000000000B630                 db  70h ; p
.eh_frame:000000000000B631                 db    0
.eh_frame:000000000000B632                 db    0
.eh_frame:000000000000B633                 db    0
.eh_frame:000000000000B634                 db  2Ch ; ,
.eh_frame:000000000000B635                 db  75h ; u
.eh_frame:000000000000B636                 db 0FFh
.eh_frame:000000000000B637                 db 0FFh
.eh_frame:000000000000B638                 db  4Fh ; O
.eh_frame:000000000000B639                 db    0
.eh_frame:000000000000B63A                 db    0
.eh_frame:000000000000B63B                 db    0
.eh_frame:000000000000B63C                 db    0
.eh_frame:000000000000B63D                 db  41h ; A
.eh_frame:000000000000B63E                 db  0Eh
.eh_frame:000000000000B63F                 db  10h
.eh_frame:000000000000B640                 db  86h
.eh_frame:000000000000B641                 db    2
.eh_frame:000000000000B642                 db  41h ; A
.eh_frame:000000000000B643                 db  0Eh
.eh_frame:000000000000B644                 db  18h
.eh_frame:000000000000B645                 db  83h
.eh_frame:000000000000B646                 db    3
.eh_frame:000000000000B647                 db  4Fh ; O
.eh_frame:000000000000B648                 db  0Eh
.eh_frame:000000000000B649                 db  20h
.eh_frame:000000000000B64A                 db  61h ; a
.eh_frame:000000000000B64B                 db  0Ah
.eh_frame:000000000000B64C                 db  0Eh
.eh_frame:000000000000B64D                 db  18h
.eh_frame:000000000000B64E                 db  48h ; H
.eh_frame:000000000000B64F                 db  0Eh
.eh_frame:000000000000B650                 db  10h
.eh_frame:000000000000B651                 db  41h ; A
.eh_frame:000000000000B652                 db  0Eh
.eh_frame:000000000000B653                 db    8
.eh_frame:000000000000B654                 db  4Dh ; M
.eh_frame:000000000000B655                 db  0Bh
.eh_frame:000000000000B656                 db  44h ; D
.eh_frame:000000000000B657                 db  0Eh
.eh_frame:000000000000B658                 db  18h
.eh_frame:000000000000B659                 db  41h ; A
.eh_frame:000000000000B65A                 db  0Eh
.eh_frame:000000000000B65B                 db  10h
.eh_frame:000000000000B65C                 db  41h ; A
.eh_frame:000000000000B65D                 db  0Eh
.eh_frame:000000000000B65E                 db    8
.eh_frame:000000000000B65F                 db    0
.eh_frame:000000000000B660                 db  48h ; H
.eh_frame:000000000000B661                 db    0
.eh_frame:000000000000B662                 db    0
.eh_frame:000000000000B663                 db    0
.eh_frame:000000000000B664                 db 0A4h
.eh_frame:000000000000B665                 db    0
.eh_frame:000000000000B666                 db    0
.eh_frame:000000000000B667                 db    0
.eh_frame:000000000000B668                 db  48h ; H
.eh_frame:000000000000B669                 db  75h ; u
.eh_frame:000000000000B66A                 db 0FFh
.eh_frame:000000000000B66B                 db 0FFh
.eh_frame:000000000000B66C                 db 0D0h
.eh_frame:000000000000B66D                 db    0
.eh_frame:000000000000B66E                 db    0
.eh_frame:000000000000B66F                 db    0
.eh_frame:000000000000B670                 db    0
.eh_frame:000000000000B671                 db  42h ; B
.eh_frame:000000000000B672                 db  0Eh
.eh_frame:000000000000B673                 db  10h
.eh_frame:000000000000B674                 db  8Dh
.eh_frame:000000000000B675                 db    2
.eh_frame:000000000000B676                 db  42h ; B
.eh_frame:000000000000B677                 db  0Eh
.eh_frame:000000000000B678                 db  18h
.eh_frame:000000000000B679                 db  8Ch
.eh_frame:000000000000B67A                 db    3
.eh_frame:000000000000B67B                 db  44h ; D
.eh_frame:000000000000B67C                 db  0Eh
.eh_frame:000000000000B67D                 db  20h
.eh_frame:000000000000B67E                 db  86h
.eh_frame:000000000000B67F                 db    4
.eh_frame:000000000000B680                 db  41h ; A
.eh_frame:000000000000B681                 db  0Eh
.eh_frame:000000000000B682                 db  28h ; (
.eh_frame:000000000000B683                 db  83h
.eh_frame:000000000000B684                 db    5
.eh_frame:000000000000B685                 db  46h ; F
.eh_frame:000000000000B686                 db  0Eh
.eh_frame:000000000000B687                 db  30h ; 0
.eh_frame:000000000000B688                 db    2
.eh_frame:000000000000B689                 db  7Ch ; |
.eh_frame:000000000000B68A                 db  0Ah
.eh_frame:000000000000B68B                 db  0Eh
.eh_frame:000000000000B68C                 db  28h ; (
.eh_frame:000000000000B68D                 db  41h ; A
.eh_frame:000000000000B68E                 db  0Eh
.eh_frame:000000000000B68F                 db  20h
.eh_frame:000000000000B690                 db  41h ; A
.eh_frame:000000000000B691                 db  0Eh
.eh_frame:000000000000B692                 db  18h
.eh_frame:000000000000B693                 db  42h ; B
.eh_frame:000000000000B694                 db  0Eh
.eh_frame:000000000000B695                 db  10h
.eh_frame:000000000000B696                 db  42h ; B
.eh_frame:000000000000B697                 db  0Eh
.eh_frame:000000000000B698                 db    8
.eh_frame:000000000000B699                 db  47h ; G
.eh_frame:000000000000B69A                 db  0Bh
.eh_frame:000000000000B69B                 db  6Ch ; l
.eh_frame:000000000000B69C                 db  0Eh
.eh_frame:000000000000B69D                 db  28h ; (
.eh_frame:000000000000B69E                 db  46h ; F
.eh_frame:000000000000B69F                 db  0Eh
.eh_frame:000000000000B6A0                 db  20h
.eh_frame:000000000000B6A1                 db  41h ; A
.eh_frame:000000000000B6A2                 db  0Eh
.eh_frame:000000000000B6A3                 db  18h
.eh_frame:000000000000B6A4                 db  42h ; B
.eh_frame:000000000000B6A5                 db  0Eh
.eh_frame:000000000000B6A6                 db  10h
.eh_frame:000000000000B6A7                 db  42h ; B
.eh_frame:000000000000B6A8                 db  0Eh
.eh_frame:000000000000B6A9                 db    8
.eh_frame:000000000000B6AA                 db    0
.eh_frame:000000000000B6AB                 db    0
.eh_frame:000000000000B6AC                 db  94h
.eh_frame:000000000000B6AD                 db    0
.eh_frame:000000000000B6AE                 db    0
.eh_frame:000000000000B6AF                 db    0
.eh_frame:000000000000B6B0                 db 0F0h
.eh_frame:000000000000B6B1                 db    0
.eh_frame:000000000000B6B2                 db    0
.eh_frame:000000000000B6B3                 db    0
.eh_frame:000000000000B6B4                 db 0CCh
.eh_frame:000000000000B6B5                 db  75h ; u
.eh_frame:000000000000B6B6                 db 0FFh
.eh_frame:000000000000B6B7                 db 0FFh
.eh_frame:000000000000B6B8                 db  81h
.eh_frame:000000000000B6B9                 db    8
.eh_frame:000000000000B6BA                 db    0
.eh_frame:000000000000B6BB                 db    0
.eh_frame:000000000000B6BC                 db    0
.eh_frame:000000000000B6BD                 db  42h ; B
.eh_frame:000000000000B6BE                 db  0Eh
.eh_frame:000000000000B6BF                 db  10h
.eh_frame:000000000000B6C0                 db  8Fh
.eh_frame:000000000000B6C1                 db    2
.eh_frame:000000000000B6C2                 db  42h ; B
.eh_frame:000000000000B6C3                 db  0Eh
.eh_frame:000000000000B6C4                 db  18h
.eh_frame:000000000000B6C5                 db  8Eh
.eh_frame:000000000000B6C6                 db    3
.eh_frame:000000000000B6C7                 db  45h ; E
.eh_frame:000000000000B6C8                 db  0Eh
.eh_frame:000000000000B6C9                 db  20h
.eh_frame:000000000000B6CA                 db  8Dh
.eh_frame:000000000000B6CB                 db    4
.eh_frame:000000000000B6CC                 db  42h ; B
.eh_frame:000000000000B6CD                 db  0Eh
.eh_frame:000000000000B6CE                 db  28h ; (
.eh_frame:000000000000B6CF                 db  8Ch
.eh_frame:000000000000B6D0                 db    5
.eh_frame:000000000000B6D1                 db  44h ; D
.eh_frame:000000000000B6D2                 db  0Eh
.eh_frame:000000000000B6D3                 db  30h ; 0
.eh_frame:000000000000B6D4                 db  86h
.eh_frame:000000000000B6D5                 db    6
.eh_frame:000000000000B6D6                 db  41h ; A
.eh_frame:000000000000B6D7                 db  0Eh
.eh_frame:000000000000B6D8                 db  38h ; 8
.eh_frame:000000000000B6D9                 db  83h
.eh_frame:000000000000B6DA                 db    7
.eh_frame:000000000000B6DB                 db  4Ah ; J
.eh_frame:000000000000B6DC                 db  0Eh
.eh_frame:000000000000B6DD                 db  80h
.eh_frame:000000000000B6DE                 db  11h
.eh_frame:000000000000B6DF                 db    3
.eh_frame:000000000000B6E0                 db  2Bh ; +
.eh_frame:000000000000B6E1                 db    1
.eh_frame:000000000000B6E2                 db  0Ah
.eh_frame:000000000000B6E3                 db  0Eh
.eh_frame:000000000000B6E4                 db  38h ; 8
.eh_frame:000000000000B6E5                 db  41h ; A
.eh_frame:000000000000B6E6                 db  0Eh
.eh_frame:000000000000B6E7                 db  30h ; 0
.eh_frame:000000000000B6E8                 db  41h ; A
.eh_frame:000000000000B6E9                 db  0Eh
.eh_frame:000000000000B6EA                 db  28h ; (
.eh_frame:000000000000B6EB                 db  42h ; B
.eh_frame:000000000000B6EC                 db  0Eh
.eh_frame:000000000000B6ED                 db  20h
.eh_frame:000000000000B6EE                 db  42h ; B
.eh_frame:000000000000B6EF                 db  0Eh
.eh_frame:000000000000B6F0                 db  18h
.eh_frame:000000000000B6F1                 db  42h ; B
.eh_frame:000000000000B6F2                 db  0Eh
.eh_frame:000000000000B6F3                 db  10h
.eh_frame:000000000000B6F4                 db  42h ; B
.eh_frame:000000000000B6F5                 db  0Eh
.eh_frame:000000000000B6F6                 db    8
.eh_frame:000000000000B6F7                 db  41h ; A
.eh_frame:000000000000B6F8                 db  0Bh
.eh_frame:000000000000B6F9                 db    2
.eh_frame:000000000000B6FA                 db 0FCh
.eh_frame:000000000000B6FB                 db  0Eh
.eh_frame:000000000000B6FC                 db  88h
.eh_frame:000000000000B6FD                 db  11h
.eh_frame:000000000000B6FE                 db  52h ; R
.eh_frame:000000000000B6FF                 db  0Eh
.eh_frame:000000000000B700                 db  90h
.eh_frame:000000000000B701                 db  11h
.eh_frame:000000000000B702                 db  51h ; Q
.eh_frame:000000000000B703                 db  0Eh
.eh_frame:000000000000B704                 db  88h
.eh_frame:000000000000B705                 db  11h
.eh_frame:000000000000B706                 db  41h ; A
.eh_frame:000000000000B707                 db  0Eh
.eh_frame:000000000000B708                 db  80h
.eh_frame:000000000000B709                 db  11h
.eh_frame:000000000000B70A                 db    3
.eh_frame:000000000000B70B                 db  77h ; w
.eh_frame:000000000000B70C                 db    2
.eh_frame:000000000000B70D                 db  0Eh
.eh_frame:000000000000B70E                 db  88h
.eh_frame:000000000000B70F                 db  11h
.eh_frame:000000000000B710                 db  4Dh ; M
.eh_frame:000000000000B711                 db  0Eh
.eh_frame:000000000000B712                 db  90h
.eh_frame:000000000000B713                 db  11h
.eh_frame:000000000000B714                 db  71h ; q
.eh_frame:000000000000B715                 db  0Eh
.eh_frame:000000000000B716                 db  88h
.eh_frame:000000000000B717                 db  11h
.eh_frame:000000000000B718                 db  42h ; B
.eh_frame:000000000000B719                 db  0Eh
.eh_frame:000000000000B71A                 db  80h
.eh_frame:000000000000B71B                 db  11h
.eh_frame:000000000000B71C                 db    3
.eh_frame:000000000000B71D                 db  84h
.eh_frame:000000000000B71E                 db    1
.eh_frame:000000000000B71F                 db  0Eh
.eh_frame:000000000000B720                 db  88h
.eh_frame:000000000000B721                 db  11h
.eh_frame:000000000000B722                 db  4Ah ; J
.eh_frame:000000000000B723                 db  0Eh
.eh_frame:000000000000B724                 db  90h
.eh_frame:000000000000B725                 db  11h
.eh_frame:000000000000B726                 db  42h ; B
.eh_frame:000000000000B727                 db  0Eh
.eh_frame:000000000000B728                 db  98h
.eh_frame:000000000000B729                 db  11h
.eh_frame:000000000000B72A                 db  49h ; I
.eh_frame:000000000000B72B                 db  0Eh
.eh_frame:000000000000B72C                 db 0A0h
.eh_frame:000000000000B72D                 db  11h
.eh_frame:000000000000B72E                 db  63h ; c
.eh_frame:000000000000B72F                 db  0Eh
.eh_frame:000000000000B730                 db  80h
.eh_frame:000000000000B731                 db  11h
.eh_frame:000000000000B732                 db    3
.eh_frame:000000000000B733                 db  23h ; #
.eh_frame:000000000000B734                 db    1
.eh_frame:000000000000B735                 db  0Eh
.eh_frame:000000000000B736                 db  88h
.eh_frame:000000000000B737                 db  11h
.eh_frame:000000000000B738                 db  4Dh ; M
.eh_frame:000000000000B739                 db  0Eh
.eh_frame:000000000000B73A                 db  90h
.eh_frame:000000000000B73B                 db  11h
.eh_frame:000000000000B73C                 db  60h ; `
.eh_frame:000000000000B73D                 db  0Eh
.eh_frame:000000000000B73E                 db  88h
.eh_frame:000000000000B73F                 db  11h
.eh_frame:000000000000B740                 db  41h ; A
.eh_frame:000000000000B741                 db  0Eh
.eh_frame:000000000000B742                 db  80h
.eh_frame:000000000000B743                 db  11h
.eh_frame:000000000000B744                 db  5Ch ; \
.eh_frame:000000000000B745                 db    0
.eh_frame:000000000000B746                 db    0
.eh_frame:000000000000B747                 db    0
.eh_frame:000000000000B748                 db  88h
.eh_frame:000000000000B749                 db    1
.eh_frame:000000000000B74A                 db    0
.eh_frame:000000000000B74B                 db    0
.eh_frame:000000000000B74C                 db 0C4h
.eh_frame:000000000000B74D                 db  7Dh ; }
.eh_frame:000000000000B74E                 db 0FFh
.eh_frame:000000000000B74F                 db 0FFh
.eh_frame:000000000000B750                 db  0Bh
.eh_frame:000000000000B751                 db    7
.eh_frame:000000000000B752                 db    0
.eh_frame:000000000000B753                 db    0
.eh_frame:000000000000B754                 db    0
.eh_frame:000000000000B755                 db  42h ; B
.eh_frame:000000000000B756                 db  0Eh
.eh_frame:000000000000B757                 db  10h
.eh_frame:000000000000B758                 db  8Fh
.eh_frame:000000000000B759                 db    2
.eh_frame:000000000000B75A                 db  42h ; B
.eh_frame:000000000000B75B                 db  0Eh
.eh_frame:000000000000B75C                 db  18h
.eh_frame:000000000000B75D                 db  8Eh
.eh_frame:000000000000B75E                 db    3
.eh_frame:000000000000B75F                 db  42h ; B
.eh_frame:000000000000B760                 db  0Eh
.eh_frame:000000000000B761                 db  20h
.eh_frame:000000000000B762                 db  8Dh
.eh_frame:000000000000B763                 db    4
.eh_frame:000000000000B764                 db  42h ; B
.eh_frame:000000000000B765                 db  0Eh
.eh_frame:000000000000B766                 db  28h ; (
.eh_frame:000000000000B767                 db  8Ch
.eh_frame:000000000000B768                 db    5
.eh_frame:000000000000B769                 db  41h ; A
.eh_frame:000000000000B76A                 db  0Eh
.eh_frame:000000000000B76B                 db  30h ; 0
.eh_frame:000000000000B76C                 db  86h
.eh_frame:000000000000B76D                 db    6
.eh_frame:000000000000B76E                 db  41h ; A
.eh_frame:000000000000B76F                 db  0Eh
.eh_frame:000000000000B770                 db  38h ; 8
.eh_frame:000000000000B771                 db  83h
.eh_frame:000000000000B772                 db    7
.eh_frame:000000000000B773                 db  4Ch ; L
.eh_frame:000000000000B774                 db  0Eh
.eh_frame:000000000000B775                 db 0D0h
.eh_frame:000000000000B776                 db    2
.eh_frame:000000000000B777                 db    2
.eh_frame:000000000000B778                 db 0D5h
.eh_frame:000000000000B779                 db  0Ah
.eh_frame:000000000000B77A                 db  0Eh
.eh_frame:000000000000B77B                 db  38h ; 8
.eh_frame:000000000000B77C                 db  41h ; A
.eh_frame:000000000000B77D                 db  0Eh
.eh_frame:000000000000B77E                 db  30h ; 0
.eh_frame:000000000000B77F                 db  41h ; A
.eh_frame:000000000000B780                 db  0Eh
.eh_frame:000000000000B781                 db  28h ; (
.eh_frame:000000000000B782                 db  42h ; B
.eh_frame:000000000000B783                 db  0Eh
.eh_frame:000000000000B784                 db  20h
.eh_frame:000000000000B785                 db  42h ; B
.eh_frame:000000000000B786                 db  0Eh
.eh_frame:000000000000B787                 db  18h
.eh_frame:000000000000B788                 db  42h ; B
.eh_frame:000000000000B789                 db  0Eh
.eh_frame:000000000000B78A                 db  10h
.eh_frame:000000000000B78B                 db  42h ; B
.eh_frame:000000000000B78C                 db  0Eh
.eh_frame:000000000000B78D                 db    8
.eh_frame:000000000000B78E                 db  4Bh ; K
.eh_frame:000000000000B78F                 db  0Bh
.eh_frame:000000000000B790                 db    3
.eh_frame:000000000000B791                 db  17h
.eh_frame:000000000000B792                 db    3
.eh_frame:000000000000B793                 db  0Eh
.eh_frame:000000000000B794                 db 0D8h
.eh_frame:000000000000B795                 db    2
.eh_frame:000000000000B796                 db  45h ; E
.eh_frame:000000000000B797                 db  0Eh
.eh_frame:000000000000B798                 db 0E0h
.eh_frame:000000000000B799                 db    2
.eh_frame:000000000000B79A                 db  57h ; W
.eh_frame:000000000000B79B                 db  0Eh
.eh_frame:000000000000B79C                 db 0D8h
.eh_frame:000000000000B79D                 db    2
.eh_frame:000000000000B79E                 db  41h ; A
.eh_frame:000000000000B79F                 db  0Eh
.eh_frame:000000000000B7A0                 db 0D0h
.eh_frame:000000000000B7A1                 db    2
.eh_frame:000000000000B7A2                 db    0
.eh_frame:000000000000B7A3                 db    0
.eh_frame:000000000000B7A4                 db  28h ; (
.eh_frame:000000000000B7A5                 db    0
.eh_frame:000000000000B7A6                 db    0
.eh_frame:000000000000B7A7                 db    0
.eh_frame:000000000000B7A8                 db 0E8h
.eh_frame:000000000000B7A9                 db    1
.eh_frame:000000000000B7AA                 db    0
.eh_frame:000000000000B7AB                 db    0
.eh_frame:000000000000B7AC                 db  74h ; t
.eh_frame:000000000000B7AD                 db  84h
.eh_frame:000000000000B7AE                 db 0FFh
.eh_frame:000000000000B7AF                 db 0FFh
.eh_frame:000000000000B7B0                 db 0BAh
.eh_frame:000000000000B7B1                 db    4
.eh_frame:000000000000B7B2                 db    0
.eh_frame:000000000000B7B3                 db    0
.eh_frame:000000000000B7B4                 db    0
.eh_frame:000000000000B7B5                 db  42h ; B
.eh_frame:000000000000B7B6                 db  0Eh
.eh_frame:000000000000B7B7                 db  10h
.eh_frame:000000000000B7B8                 db  8Dh
.eh_frame:000000000000B7B9                 db    2
.eh_frame:000000000000B7BA                 db  42h ; B
.eh_frame:000000000000B7BB                 db  0Eh
.eh_frame:000000000000B7BC                 db  18h
.eh_frame:000000000000B7BD                 db  8Ch
.eh_frame:000000000000B7BE                 db    3
.eh_frame:000000000000B7BF                 db  46h ; F
.eh_frame:000000000000B7C0                 db  0Eh
.eh_frame:000000000000B7C1                 db  20h
.eh_frame:000000000000B7C2                 db  86h
.eh_frame:000000000000B7C3                 db    4
.eh_frame:000000000000B7C4                 db  41h ; A
.eh_frame:000000000000B7C5                 db  0Eh
.eh_frame:000000000000B7C6                 db  28h ; (
.eh_frame:000000000000B7C7                 db  83h
.eh_frame:000000000000B7C8                 db    5
.eh_frame:000000000000B7C9                 db  49h ; I
.eh_frame:000000000000B7CA                 db  0Eh
.eh_frame:000000000000B7CB                 db 0B0h
.eh_frame:000000000000B7CC                 db    1
.eh_frame:000000000000B7CD                 db    0
.eh_frame:000000000000B7CE                 db    0
.eh_frame:000000000000B7CF                 db    0
.eh_frame:000000000000B7D0                 db  5Ch ; \
.eh_frame:000000000000B7D1                 db    0
.eh_frame:000000000000B7D2                 db    0
.eh_frame:000000000000B7D3                 db    0
.eh_frame:000000000000B7D4                 db  14h
.eh_frame:000000000000B7D5                 db    2
.eh_frame:000000000000B7D6                 db    0
.eh_frame:000000000000B7D7                 db    0
.eh_frame:000000000000B7D8                 db  68h ; h
.eh_frame:000000000000B7D9                 db  69h ; i
.eh_frame:000000000000B7DA                 db 0FFh
.eh_frame:000000000000B7DB                 db 0FFh
.eh_frame:000000000000B7DC                 db 0FEh
.eh_frame:000000000000B7DD                 db    8
.eh_frame:000000000000B7DE                 db    0
.eh_frame:000000000000B7DF                 db    0
.eh_frame:000000000000B7E0                 db    0
.eh_frame:000000000000B7E1                 db  42h ; B
.eh_frame:000000000000B7E2                 db  0Eh
.eh_frame:000000000000B7E3                 db  10h
.eh_frame:000000000000B7E4                 db  8Fh
.eh_frame:000000000000B7E5                 db    2
.eh_frame:000000000000B7E6                 db  42h ; B
.eh_frame:000000000000B7E7                 db  0Eh
.eh_frame:000000000000B7E8                 db  18h
.eh_frame:000000000000B7E9                 db  8Eh
.eh_frame:000000000000B7EA                 db    3
.eh_frame:000000000000B7EB                 db  42h ; B
.eh_frame:000000000000B7EC                 db  0Eh
.eh_frame:000000000000B7ED                 db  20h
.eh_frame:000000000000B7EE                 db  8Dh
.eh_frame:000000000000B7EF                 db    4
.eh_frame:000000000000B7F0                 db  42h ; B
.eh_frame:000000000000B7F1                 db  0Eh
.eh_frame:000000000000B7F2                 db  28h ; (
.eh_frame:000000000000B7F3                 db  8Ch
.eh_frame:000000000000B7F4                 db    5
.eh_frame:000000000000B7F5                 db  48h ; H
.eh_frame:000000000000B7F6                 db  0Eh
.eh_frame:000000000000B7F7                 db  30h ; 0
.eh_frame:000000000000B7F8                 db  86h
.eh_frame:000000000000B7F9                 db    6
.eh_frame:000000000000B7FA                 db  41h ; A
.eh_frame:000000000000B7FB                 db  0Eh
.eh_frame:000000000000B7FC                 db  38h ; 8
.eh_frame:000000000000B7FD                 db  83h
.eh_frame:000000000000B7FE                 db    7
.eh_frame:000000000000B7FF                 db  50h ; P
.eh_frame:000000000000B800                 db  0Eh
.eh_frame:000000000000B801                 db 0C0h
.eh_frame:000000000000B802                 db    1
.eh_frame:000000000000B803                 db    3
.eh_frame:000000000000B804                 db 0A6h
.eh_frame:000000000000B805                 db    1
.eh_frame:000000000000B806                 db  0Eh
.eh_frame:000000000000B807                 db 0C8h
.eh_frame:000000000000B808                 db    1
.eh_frame:000000000000B809                 db  50h ; P
.eh_frame:000000000000B80A                 db  0Eh
.eh_frame:000000000000B80B                 db 0D0h
.eh_frame:000000000000B80C                 db    1
.eh_frame:000000000000B80D                 db  5Ch ; \
.eh_frame:000000000000B80E                 db  0Eh
.eh_frame:000000000000B80F                 db 0C8h
.eh_frame:000000000000B810                 db    1
.eh_frame:000000000000B811                 db  41h ; A
.eh_frame:000000000000B812                 db  0Eh
.eh_frame:000000000000B813                 db 0C0h
.eh_frame:000000000000B814                 db    1
.eh_frame:000000000000B815                 db    3
.eh_frame:000000000000B816                 db 0ABh
.eh_frame:000000000000B817                 db    2
.eh_frame:000000000000B818                 db  0Ah
.eh_frame:000000000000B819                 db  0Eh
.eh_frame:000000000000B81A                 db  38h ; 8
.eh_frame:000000000000B81B                 db  41h ; A
.eh_frame:000000000000B81C                 db  0Eh
.eh_frame:000000000000B81D                 db  30h ; 0
.eh_frame:000000000000B81E                 db  41h ; A
.eh_frame:000000000000B81F                 db  0Eh
.eh_frame:000000000000B820                 db  28h ; (
.eh_frame:000000000000B821                 db  42h ; B
.eh_frame:000000000000B822                 db  0Eh
.eh_frame:000000000000B823                 db  20h
.eh_frame:000000000000B824                 db  42h ; B
.eh_frame:000000000000B825                 db  0Eh
.eh_frame:000000000000B826                 db  18h
.eh_frame:000000000000B827                 db  42h ; B
.eh_frame:000000000000B828                 db  0Eh
.eh_frame:000000000000B829                 db  10h
.eh_frame:000000000000B82A                 db  42h ; B
.eh_frame:000000000000B82B                 db  0Eh
.eh_frame:000000000000B82C                 db    8
.eh_frame:000000000000B82D                 db  41h ; A
.eh_frame:000000000000B82E                 db  0Bh
.eh_frame:000000000000B82F                 db    0
.eh_frame:000000000000B830                 db  10h
.eh_frame:000000000000B831                 db    0
.eh_frame:000000000000B832                 db    0
.eh_frame:000000000000B833                 db    0
.eh_frame:000000000000B834                 db  74h ; t
.eh_frame:000000000000B835                 db    2
.eh_frame:000000000000B836                 db    0
.eh_frame:000000000000B837                 db    0
.eh_frame:000000000000B838                 db 0A8h
.eh_frame:000000000000B839                 db  88h
.eh_frame:000000000000B83A                 db 0FFh
.eh_frame:000000000000B83B                 db 0FFh
.eh_frame:000000000000B83C                 db  0Ah
.eh_frame:000000000000B83D                 db    0
.eh_frame:000000000000B83E                 db    0
.eh_frame:000000000000B83F                 db    0
.eh_frame:000000000000B840                 db    0
.eh_frame:000000000000B841                 db    0
.eh_frame:000000000000B842                 db    0
.eh_frame:000000000000B843                 db    0
.eh_frame:000000000000B844                 db  48h ; H
.eh_frame:000000000000B845                 db    0
.eh_frame:000000000000B846                 db    0
.eh_frame:000000000000B847                 db    0
.eh_frame:000000000000B848                 db  88h
.eh_frame:000000000000B849                 db    2
.eh_frame:000000000000B84A                 db    0
.eh_frame:000000000000B84B                 db    0
.eh_frame:000000000000B84C                 db 0A4h
.eh_frame:000000000000B84D                 db  88h
.eh_frame:000000000000B84E                 db 0FFh
.eh_frame:000000000000B84F                 db 0FFh
.eh_frame:000000000000B850                 db  16h
.eh_frame:000000000000B851                 db    1
.eh_frame:000000000000B852                 db    0
.eh_frame:000000000000B853                 db    0
.eh_frame:000000000000B854                 db    0
.eh_frame:000000000000B855                 db  42h ; B
.eh_frame:000000000000B856                 db  0Eh
.eh_frame:000000000000B857                 db  10h
.eh_frame:000000000000B858                 db  8Fh
.eh_frame:000000000000B859                 db    2
.eh_frame:000000000000B85A                 db  42h ; B
.eh_frame:000000000000B85B                 db  0Eh
.eh_frame:000000000000B85C                 db  18h
.eh_frame:000000000000B85D                 db  8Eh
.eh_frame:000000000000B85E                 db    3
.eh_frame:000000000000B85F                 db  45h ; E
.eh_frame:000000000000B860                 db  0Eh
.eh_frame:000000000000B861                 db  20h
.eh_frame:000000000000B862                 db  8Dh
.eh_frame:000000000000B863                 db    4
.eh_frame:000000000000B864                 db  42h ; B
.eh_frame:000000000000B865                 db  0Eh
.eh_frame:000000000000B866                 db  28h ; (
.eh_frame:000000000000B867                 db  8Ch
.eh_frame:000000000000B868                 db    5
.eh_frame:000000000000B869                 db  44h ; D
.eh_frame:000000000000B86A                 db  0Eh
.eh_frame:000000000000B86B                 db  30h ; 0
.eh_frame:000000000000B86C                 db  86h
.eh_frame:000000000000B86D                 db    6
.eh_frame:000000000000B86E                 db  41h ; A
.eh_frame:000000000000B86F                 db  0Eh
.eh_frame:000000000000B870                 db  38h ; 8
.eh_frame:000000000000B871                 db  83h
.eh_frame:000000000000B872                 db    7
.eh_frame:000000000000B873                 db  47h ; G
.eh_frame:000000000000B874                 db  0Eh
.eh_frame:000000000000B875                 db  60h ; `
.eh_frame:000000000000B876                 db    2
.eh_frame:000000000000B877                 db 0DEh
.eh_frame:000000000000B878                 db  0Ah
.eh_frame:000000000000B879                 db  0Eh
.eh_frame:000000000000B87A                 db  38h ; 8
.eh_frame:000000000000B87B                 db  41h ; A
.eh_frame:000000000000B87C                 db  0Eh
.eh_frame:000000000000B87D                 db  30h ; 0
.eh_frame:000000000000B87E                 db  41h ; A
.eh_frame:000000000000B87F                 db  0Eh
.eh_frame:000000000000B880                 db  28h ; (
.eh_frame:000000000000B881                 db  42h ; B
.eh_frame:000000000000B882                 db  0Eh
.eh_frame:000000000000B883                 db  20h
.eh_frame:000000000000B884                 db  42h ; B
.eh_frame:000000000000B885                 db  0Eh
.eh_frame:000000000000B886                 db  18h
.eh_frame:000000000000B887                 db  42h ; B
.eh_frame:000000000000B888                 db  0Eh
.eh_frame:000000000000B889                 db  10h
.eh_frame:000000000000B88A                 db  42h ; B
.eh_frame:000000000000B88B                 db  0Eh
.eh_frame:000000000000B88C                 db    8
.eh_frame:000000000000B88D                 db  41h ; A
.eh_frame:000000000000B88E                 db  0Bh
.eh_frame:000000000000B88F                 db    0
.eh_frame:000000000000B890                 db  28h ; (
.eh_frame:000000000000B891                 db    0
.eh_frame:000000000000B892                 db    0
.eh_frame:000000000000B893                 db    0
.eh_frame:000000000000B894                 db 0D4h
.eh_frame:000000000000B895                 db    2
.eh_frame:000000000000B896                 db    0
.eh_frame:000000000000B897                 db    0
.eh_frame:000000000000B898                 db  78h ; x
.eh_frame:000000000000B899                 db  89h
.eh_frame:000000000000B89A                 db 0FFh
.eh_frame:000000000000B89B                 db 0FFh
.eh_frame:000000000000B89C                 db  73h ; s
.eh_frame:000000000000B89D                 db    0
.eh_frame:000000000000B89E                 db    0
.eh_frame:000000000000B89F                 db    0
.eh_frame:000000000000B8A0                 db    0
.eh_frame:000000000000B8A1                 db  46h ; F
.eh_frame:000000000000B8A2                 db  0Eh
.eh_frame:000000000000B8A3                 db  10h
.eh_frame:000000000000B8A4                 db  8Ch
.eh_frame:000000000000B8A5                 db    2
.eh_frame:000000000000B8A6                 db  46h ; F
.eh_frame:000000000000B8A7                 db  0Eh
.eh_frame:000000000000B8A8                 db  18h
.eh_frame:000000000000B8A9                 db  86h
.eh_frame:000000000000B8AA                 db    3
.eh_frame:000000000000B8AB                 db  44h ; D
.eh_frame:000000000000B8AC                 db  0Eh
.eh_frame:000000000000B8AD                 db  20h
.eh_frame:000000000000B8AE                 db  83h
.eh_frame:000000000000B8AF                 db    4
.eh_frame:000000000000B8B0                 db  7Fh ; 
.eh_frame:000000000000B8B1                 db  0Ah
.eh_frame:000000000000B8B2                 db  0Eh
.eh_frame:000000000000B8B3                 db  18h
.eh_frame:000000000000B8B4                 db  41h ; A
.eh_frame:000000000000B8B5                 db  0Eh
.eh_frame:000000000000B8B6                 db  10h
.eh_frame:000000000000B8B7                 db  42h ; B
.eh_frame:000000000000B8B8                 db  0Eh
.eh_frame:000000000000B8B9                 db    8
.eh_frame:000000000000B8BA                 db  4Eh ; N
.eh_frame:000000000000B8BB                 db  0Bh
.eh_frame:000000000000B8BC                 db  5Ch ; \
.eh_frame:000000000000B8BD                 db    0
.eh_frame:000000000000B8BE                 db    0
.eh_frame:000000000000B8BF                 db    0
.eh_frame:000000000000B8C0                 db    0
.eh_frame:000000000000B8C1                 db    3
.eh_frame:000000000000B8C2                 db    0
.eh_frame:000000000000B8C3                 db    0
.eh_frame:000000000000B8C4                 db 0CCh
.eh_frame:000000000000B8C5                 db  89h
.eh_frame:000000000000B8C6                 db 0FFh
.eh_frame:000000000000B8C7                 db 0FFh
.eh_frame:000000000000B8C8                 db  20h
.eh_frame:000000000000B8C9                 db    1
.eh_frame:000000000000B8CA                 db    0
.eh_frame:000000000000B8CB                 db    0
.eh_frame:000000000000B8CC                 db    0
.eh_frame:000000000000B8CD                 db  42h ; B
.eh_frame:000000000000B8CE                 db  0Eh
.eh_frame:000000000000B8CF                 db  10h
.eh_frame:000000000000B8D0                 db  8Fh
.eh_frame:000000000000B8D1                 db    2
.eh_frame:000000000000B8D2                 db  42h ; B
.eh_frame:000000000000B8D3                 db  0Eh
.eh_frame:000000000000B8D4                 db  18h
.eh_frame:000000000000B8D5                 db  8Eh
.eh_frame:000000000000B8D6                 db    3
.eh_frame:000000000000B8D7                 db  45h ; E
.eh_frame:000000000000B8D8                 db  0Eh
.eh_frame:000000000000B8D9                 db  20h
.eh_frame:000000000000B8DA                 db  8Dh
.eh_frame:000000000000B8DB                 db    4
.eh_frame:000000000000B8DC                 db  42h ; B
.eh_frame:000000000000B8DD                 db  0Eh
.eh_frame:000000000000B8DE                 db  28h ; (
.eh_frame:000000000000B8DF                 db  8Ch
.eh_frame:000000000000B8E0                 db    5
.eh_frame:000000000000B8E1                 db  43h ; C
.eh_frame:000000000000B8E2                 db  0Eh
.eh_frame:000000000000B8E3                 db  30h ; 0
.eh_frame:000000000000B8E4                 db  86h
.eh_frame:000000000000B8E5                 db    6
.eh_frame:000000000000B8E6                 db  41h ; A
.eh_frame:000000000000B8E7                 db  0Eh
.eh_frame:000000000000B8E8                 db  38h ; 8
.eh_frame:000000000000B8E9                 db  83h
.eh_frame:000000000000B8EA                 db    7
.eh_frame:000000000000B8EB                 db  56h ; V
.eh_frame:000000000000B8EC                 db  0Eh
.eh_frame:000000000000B8ED                 db  40h ; @
.eh_frame:000000000000B8EE                 db    2
.eh_frame:000000000000B8EF                 db 0D3h
.eh_frame:000000000000B8F0                 db  0Ah
.eh_frame:000000000000B8F1                 db  0Eh
.eh_frame:000000000000B8F2                 db  38h ; 8
.eh_frame:000000000000B8F3                 db  41h ; A
.eh_frame:000000000000B8F4                 db  0Eh
.eh_frame:000000000000B8F5                 db  30h ; 0
.eh_frame:000000000000B8F6                 db  41h ; A
.eh_frame:000000000000B8F7                 db  0Eh
.eh_frame:000000000000B8F8                 db  28h ; (
.eh_frame:000000000000B8F9                 db  42h ; B
.eh_frame:000000000000B8FA                 db  0Eh
.eh_frame:000000000000B8FB                 db  20h
.eh_frame:000000000000B8FC                 db  42h ; B
.eh_frame:000000000000B8FD                 db  0Eh
.eh_frame:000000000000B8FE                 db  18h
.eh_frame:000000000000B8FF                 db  42h ; B
.eh_frame:000000000000B900                 db  0Eh
.eh_frame:000000000000B901                 db  10h
.eh_frame:000000000000B902                 db  42h ; B
.eh_frame:000000000000B903                 db  0Eh
.eh_frame:000000000000B904                 db    8
.eh_frame:000000000000B905                 db  46h ; F
.eh_frame:000000000000B906                 db  0Bh
.eh_frame:000000000000B907                 db  44h ; D
.eh_frame:000000000000B908                 db  0Eh
.eh_frame:000000000000B909                 db  38h ; 8
.eh_frame:000000000000B90A                 db  46h ; F
.eh_frame:000000000000B90B                 db  0Eh
.eh_frame:000000000000B90C                 db  30h ; 0
.eh_frame:000000000000B90D                 db  41h ; A
.eh_frame:000000000000B90E                 db  0Eh
.eh_frame:000000000000B90F                 db  28h ; (
.eh_frame:000000000000B910                 db  42h ; B
.eh_frame:000000000000B911                 db  0Eh
.eh_frame:000000000000B912                 db  20h
.eh_frame:000000000000B913                 db  42h ; B
.eh_frame:000000000000B914                 db  0Eh
.eh_frame:000000000000B915                 db  18h
.eh_frame:000000000000B916                 db  42h ; B
.eh_frame:000000000000B917                 db  0Eh
.eh_frame:000000000000B918                 db  10h
.eh_frame:000000000000B919                 db  42h ; B
.eh_frame:000000000000B91A                 db  0Eh
.eh_frame:000000000000B91B                 db    8
.eh_frame:000000000000B91C                 db  48h ; H
.eh_frame:000000000000B91D                 db    0
.eh_frame:000000000000B91E                 db    0
.eh_frame:000000000000B91F                 db    0
.eh_frame:000000000000B920                 db  60h ; `
.eh_frame:000000000000B921                 db    3
.eh_frame:000000000000B922                 db    0
.eh_frame:000000000000B923                 db    0
.eh_frame:000000000000B924                 db  8Ch
.eh_frame:000000000000B925                 db  8Ah
.eh_frame:000000000000B926                 db 0FFh
.eh_frame:000000000000B927                 db 0FFh
.eh_frame:000000000000B928                 db  6Dh ; m
.eh_frame:000000000000B929                 db    0
.eh_frame:000000000000B92A                 db    0
.eh_frame:000000000000B92B                 db    0
.eh_frame:000000000000B92C                 db    0
.eh_frame:000000000000B92D                 db  42h ; B
.eh_frame:000000000000B92E                 db  0Eh
.eh_frame:000000000000B92F                 db  10h
.eh_frame:000000000000B930                 db  8Fh
.eh_frame:000000000000B931                 db    2
.eh_frame:000000000000B932                 db  42h ; B
.eh_frame:000000000000B933                 db  0Eh
.eh_frame:000000000000B934                 db  18h
.eh_frame:000000000000B935                 db  8Eh
.eh_frame:000000000000B936                 db    3
.eh_frame:000000000000B937                 db  45h ; E
.eh_frame:000000000000B938                 db  0Eh
.eh_frame:000000000000B939                 db  20h
.eh_frame:000000000000B93A                 db  8Dh
.eh_frame:000000000000B93B                 db    4
.eh_frame:000000000000B93C                 db  42h ; B
.eh_frame:000000000000B93D                 db  0Eh
.eh_frame:000000000000B93E                 db  28h ; (
.eh_frame:000000000000B93F                 db  8Ch
.eh_frame:000000000000B940                 db    5
.eh_frame:000000000000B941                 db  44h ; D
.eh_frame:000000000000B942                 db  0Eh
.eh_frame:000000000000B943                 db  30h ; 0
.eh_frame:000000000000B944                 db  86h
.eh_frame:000000000000B945                 db    6
.eh_frame:000000000000B946                 db  41h ; A
.eh_frame:000000000000B947                 db  0Eh
.eh_frame:000000000000B948                 db  38h ; 8
.eh_frame:000000000000B949                 db  83h
.eh_frame:000000000000B94A                 db    7
.eh_frame:000000000000B94B                 db  50h ; P
.eh_frame:000000000000B94C                 db  0Eh
.eh_frame:000000000000B94D                 db  40h ; @
.eh_frame:000000000000B94E                 db  5Ah ; Z
.eh_frame:000000000000B94F                 db  0Ah
.eh_frame:000000000000B950                 db  0Eh
.eh_frame:000000000000B951                 db  38h ; 8
.eh_frame:000000000000B952                 db  41h ; A
.eh_frame:000000000000B953                 db  0Eh
.eh_frame:000000000000B954                 db  30h ; 0
.eh_frame:000000000000B955                 db  41h ; A
.eh_frame:000000000000B956                 db  0Eh
.eh_frame:000000000000B957                 db  28h ; (
.eh_frame:000000000000B958                 db  42h ; B
.eh_frame:000000000000B959                 db  0Eh
.eh_frame:000000000000B95A                 db  20h
.eh_frame:000000000000B95B                 db  42h ; B
.eh_frame:000000000000B95C                 db  0Eh
.eh_frame:000000000000B95D                 db  18h
.eh_frame:000000000000B95E                 db  42h ; B
.eh_frame:000000000000B95F                 db  0Eh
.eh_frame:000000000000B960                 db  10h
.eh_frame:000000000000B961                 db  42h ; B
.eh_frame:000000000000B962                 db  0Eh
.eh_frame:000000000000B963                 db    8
.eh_frame:000000000000B964                 db  41h ; A
.eh_frame:000000000000B965                 db  0Bh
.eh_frame:000000000000B966                 db    0
.eh_frame:000000000000B967                 db    0
.eh_frame:000000000000B968                 db  3Ch ; <
.eh_frame:000000000000B969                 db    0
.eh_frame:000000000000B96A                 db    0
.eh_frame:000000000000B96B                 db    0
.eh_frame:000000000000B96C                 db 0ACh
.eh_frame:000000000000B96D                 db    3
.eh_frame:000000000000B96E                 db    0
.eh_frame:000000000000B96F                 db    0
.eh_frame:000000000000B970                 db 0B0h
.eh_frame:000000000000B971                 db  8Ah
.eh_frame:000000000000B972                 db 0FFh
.eh_frame:000000000000B973                 db 0FFh
.eh_frame:000000000000B974                 db  4Dh ; M
.eh_frame:000000000000B975                 db    0
.eh_frame:000000000000B976                 db    0
.eh_frame:000000000000B977                 db    0
.eh_frame:000000000000B978                 db    0
.eh_frame:000000000000B979                 db  42h ; B
.eh_frame:000000000000B97A                 db  0Eh
.eh_frame:000000000000B97B                 db  10h
.eh_frame:000000000000B97C                 db  8Eh
.eh_frame:000000000000B97D                 db    2
.eh_frame:000000000000B97E                 db  42h ; B
.eh_frame:000000000000B97F                 db  0Eh
.eh_frame:000000000000B980                 db  18h
.eh_frame:000000000000B981                 db  8Dh
.eh_frame:000000000000B982                 db    3
.eh_frame:000000000000B983                 db  42h ; B
.eh_frame:000000000000B984                 db  0Eh
.eh_frame:000000000000B985                 db  20h
.eh_frame:000000000000B986                 db  8Ch
.eh_frame:000000000000B987                 db    4
.eh_frame:000000000000B988                 db  41h ; A
.eh_frame:000000000000B989                 db  0Eh
.eh_frame:000000000000B98A                 db  28h ; (
.eh_frame:000000000000B98B                 db  86h
.eh_frame:000000000000B98C                 db    5
.eh_frame:000000000000B98D                 db  41h ; A
.eh_frame:000000000000B98E                 db  0Eh
.eh_frame:000000000000B98F                 db  30h ; 0
.eh_frame:000000000000B990                 db  83h
.eh_frame:000000000000B991                 db    6
.eh_frame:000000000000B992                 db  7Ah ; z
.eh_frame:000000000000B993                 db  0Eh
.eh_frame:000000000000B994                 db  28h ; (
.eh_frame:000000000000B995                 db  44h ; D
.eh_frame:000000000000B996                 db  0Eh
.eh_frame:000000000000B997                 db  20h
.eh_frame:000000000000B998                 db  42h ; B
.eh_frame:000000000000B999                 db  0Eh
.eh_frame:000000000000B99A                 db  18h
.eh_frame:000000000000B99B                 db  42h ; B
.eh_frame:000000000000B99C                 db  0Eh
.eh_frame:000000000000B99D                 db  10h
.eh_frame:000000000000B99E                 db  42h ; B
.eh_frame:000000000000B99F                 db  0Eh
.eh_frame:000000000000B9A0                 db    8
.eh_frame:000000000000B9A1                 db    0
.eh_frame:000000000000B9A2                 db    0
.eh_frame:000000000000B9A3                 db    0
.eh_frame:000000000000B9A4                 db    0
.eh_frame:000000000000B9A5                 db    0
.eh_frame:000000000000B9A6                 db    0
.eh_frame:000000000000B9A7                 db    0
.eh_frame:000000000000B9A8                 db  10h
.eh_frame:000000000000B9A9                 db    0
.eh_frame:000000000000B9AA                 db    0
.eh_frame:000000000000B9AB                 db    0
.eh_frame:000000000000B9AC                 db 0ECh
.eh_frame:000000000000B9AD                 db    3
.eh_frame:000000000000B9AE                 db    0
.eh_frame:000000000000B9AF                 db    0
.eh_frame:000000000000B9B0                 db 0C0h
.eh_frame:000000000000B9B1                 db  8Ah
.eh_frame:000000000000B9B2                 db 0FFh
.eh_frame:000000000000B9B3                 db 0FFh
.eh_frame:000000000000B9B4                 db    8
.eh_frame:000000000000B9B5                 db    0
.eh_frame:000000000000B9B6                 db    0
.eh_frame:000000000000B9B7                 db    0
.eh_frame:000000000000B9B8                 db    0
.eh_frame:000000000000B9B9                 db    0
.eh_frame:000000000000B9BA                 db    0
.eh_frame:000000000000B9BB                 db    0
.eh_frame:000000000000B9BC                 db  10h
.eh_frame:000000000000B9BD                 db    0
.eh_frame:000000000000B9BE                 db    0
.eh_frame:000000000000B9BF                 db    0
.eh_frame:000000000000B9C0                 db    0
.eh_frame:000000000000B9C1                 db    4
.eh_frame:000000000000B9C2                 db    0
.eh_frame:000000000000B9C3                 db    0
.eh_frame:000000000000B9C4                 db 0BCh
.eh_frame:000000000000B9C5                 db  8Ah
.eh_frame:000000000000B9C6                 db 0FFh
.eh_frame:000000000000B9C7                 db 0FFh
.eh_frame:000000000000B9C8                 db    8
.eh_frame:000000000000B9C9                 db    0
.eh_frame:000000000000B9CA                 db    0
.eh_frame:000000000000B9CB                 db    0
.eh_frame:000000000000B9CC                 db    0
.eh_frame:000000000000B9CD                 db    0
.eh_frame:000000000000B9CE                 db    0
.eh_frame:000000000000B9CF                 db    0
.eh_frame:000000000000B9D0                 db  2Ch ; ,
.eh_frame:000000000000B9D1                 db    0
.eh_frame:000000000000B9D2                 db    0
.eh_frame:000000000000B9D3                 db    0
.eh_frame:000000000000B9D4                 db  14h
.eh_frame:000000000000B9D5                 db    4
.eh_frame:000000000000B9D6                 db    0
.eh_frame:000000000000B9D7                 db    0
.eh_frame:000000000000B9D8                 db 0B8h
.eh_frame:000000000000B9D9                 db  8Ah
.eh_frame:000000000000B9DA                 db 0FFh
.eh_frame:000000000000B9DB                 db 0FFh
.eh_frame:000000000000B9DC                 db 0A4h
.eh_frame:000000000000B9DD                 db    0
.eh_frame:000000000000B9DE                 db    0
.eh_frame:000000000000B9DF                 db    0
.eh_frame:000000000000B9E0                 db    0
.eh_frame:000000000000B9E1                 db  41h ; A
.eh_frame:000000000000B9E2                 db  0Eh
.eh_frame:000000000000B9E3                 db  10h
.eh_frame:000000000000B9E4                 db  86h
.eh_frame:000000000000B9E5                 db    2
.eh_frame:000000000000B9E6                 db  41h ; A
.eh_frame:000000000000B9E7                 db  0Eh
.eh_frame:000000000000B9E8                 db  18h
.eh_frame:000000000000B9E9                 db  83h
.eh_frame:000000000000B9EA                 db    3
.eh_frame:000000000000B9EB                 db  44h ; D
.eh_frame:000000000000B9EC                 db  0Eh
.eh_frame:000000000000B9ED                 db  20h
.eh_frame:000000000000B9EE                 db  7Ah ; z
.eh_frame:000000000000B9EF                 db  0Ah
.eh_frame:000000000000B9F0                 db  0Eh
.eh_frame:000000000000B9F1                 db  18h
.eh_frame:000000000000B9F2                 db  41h ; A
.eh_frame:000000000000B9F3                 db  0Eh
.eh_frame:000000000000B9F4                 db  10h
.eh_frame:000000000000B9F5                 db  41h ; A
.eh_frame:000000000000B9F6                 db  0Eh
.eh_frame:000000000000B9F7                 db    8
.eh_frame:000000000000B9F8                 db  41h ; A
.eh_frame:000000000000B9F9                 db  0Bh
.eh_frame:000000000000B9FA                 db    0
.eh_frame:000000000000B9FB                 db    0
.eh_frame:000000000000B9FC                 db    0
.eh_frame:000000000000B9FD                 db    0
.eh_frame:000000000000B9FE                 db    0
.eh_frame:000000000000B9FF                 db    0
.eh_frame:000000000000BA00                 db  1Ch
.eh_frame:000000000000BA01                 db    0
.eh_frame:000000000000BA02                 db    0
.eh_frame:000000000000BA03                 db    0
.eh_frame:000000000000BA04                 db  44h ; D
.eh_frame:000000000000BA05                 db    4
.eh_frame:000000000000BA06                 db    0
.eh_frame:000000000000BA07                 db    0
.eh_frame:000000000000BA08                 db  38h ; 8
.eh_frame:000000000000BA09                 db  8Bh
.eh_frame:000000000000BA0A                 db 0FFh
.eh_frame:000000000000BA0B                 db 0FFh
.eh_frame:000000000000BA0C                 db  18h
.eh_frame:000000000000BA0D                 db    0
.eh_frame:000000000000BA0E                 db    0
.eh_frame:000000000000BA0F                 db    0
.eh_frame:000000000000BA10                 db    0
.eh_frame:000000000000BA11                 db  44h ; D
.eh_frame:000000000000BA12                 db  0Eh
.eh_frame:000000000000BA13                 db  10h
.eh_frame:000000000000BA14                 db  4Eh ; N
.eh_frame:000000000000BA15                 db  0Ah
.eh_frame:000000000000BA16                 db  0Eh
.eh_frame:000000000000BA17                 db    8
.eh_frame:000000000000BA18                 db  41h ; A
.eh_frame:000000000000BA19                 db  0Bh
.eh_frame:000000000000BA1A                 db    0
.eh_frame:000000000000BA1B                 db    0
.eh_frame:000000000000BA1C                 db    0
.eh_frame:000000000000BA1D                 db    0
.eh_frame:000000000000BA1E                 db    0
.eh_frame:000000000000BA1F                 db    0
.eh_frame:000000000000BA20                 db  30h ; 0
.eh_frame:000000000000BA21                 db    0
.eh_frame:000000000000BA22                 db    0
.eh_frame:000000000000BA23                 db    0
.eh_frame:000000000000BA24                 db  64h ; d
.eh_frame:000000000000BA25                 db    4
.eh_frame:000000000000BA26                 db    0
.eh_frame:000000000000BA27                 db    0
.eh_frame:000000000000BA28                 db  38h ; 8
.eh_frame:000000000000BA29                 db  8Bh
.eh_frame:000000000000BA2A                 db 0FFh
.eh_frame:000000000000BA2B                 db 0FFh
.eh_frame:000000000000BA2C                 db  5Dh ; ]
.eh_frame:000000000000BA2D                 db    0
.eh_frame:000000000000BA2E                 db    0
.eh_frame:000000000000BA2F                 db    0
.eh_frame:000000000000BA30                 db    0
.eh_frame:000000000000BA31                 db  41h ; A
.eh_frame:000000000000BA32                 db  0Eh
.eh_frame:000000000000BA33                 db  10h
.eh_frame:000000000000BA34                 db  86h
.eh_frame:000000000000BA35                 db    2
.eh_frame:000000000000BA36                 db  41h ; A
.eh_frame:000000000000BA37                 db  0Eh
.eh_frame:000000000000BA38                 db  18h
.eh_frame:000000000000BA39                 db  83h
.eh_frame:000000000000BA3A                 db    3
.eh_frame:000000000000BA3B                 db  49h ; I
.eh_frame:000000000000BA3C                 db  0Eh
.eh_frame:000000000000BA3D                 db  20h
.eh_frame:000000000000BA3E                 db  7Ch ; |
.eh_frame:000000000000BA3F                 db  0Ah
.eh_frame:000000000000BA40                 db  0Eh
.eh_frame:000000000000BA41                 db  18h
.eh_frame:000000000000BA42                 db  44h ; D
.eh_frame:000000000000BA43                 db  0Eh
.eh_frame:000000000000BA44                 db  10h
.eh_frame:000000000000BA45                 db  41h ; A
.eh_frame:000000000000BA46                 db  0Eh
.eh_frame:000000000000BA47                 db    8
.eh_frame:000000000000BA48                 db  44h ; D
.eh_frame:000000000000BA49                 db  0Bh
.eh_frame:000000000000BA4A                 db  44h ; D
.eh_frame:000000000000BA4B                 db  0Eh
.eh_frame:000000000000BA4C                 db  18h
.eh_frame:000000000000BA4D                 db  47h ; G
.eh_frame:000000000000BA4E                 db  0Eh
.eh_frame:000000000000BA4F                 db  10h
.eh_frame:000000000000BA50                 db  41h ; A
.eh_frame:000000000000BA51                 db  0Eh
.eh_frame:000000000000BA52                 db    8
.eh_frame:000000000000BA53                 db    0
.eh_frame:000000000000BA54                 db  28h ; (
.eh_frame:000000000000BA55                 db    0
.eh_frame:000000000000BA56                 db    0
.eh_frame:000000000000BA57                 db    0
.eh_frame:000000000000BA58                 db  98h
.eh_frame:000000000000BA59                 db    4
.eh_frame:000000000000BA5A                 db    0
.eh_frame:000000000000BA5B                 db    0
.eh_frame:000000000000BA5C                 db  64h ; d
.eh_frame:000000000000BA5D                 db  8Bh
.eh_frame:000000000000BA5E                 db 0FFh
.eh_frame:000000000000BA5F                 db 0FFh
.eh_frame:000000000000BA60                 db  5Ah ; Z
.eh_frame:000000000000BA61                 db    0
.eh_frame:000000000000BA62                 db    0
.eh_frame:000000000000BA63                 db    0
.eh_frame:000000000000BA64                 db    0
.eh_frame:000000000000BA65                 db  41h ; A
.eh_frame:000000000000BA66                 db  0Eh
.eh_frame:000000000000BA67                 db  10h
.eh_frame:000000000000BA68                 db  86h
.eh_frame:000000000000BA69                 db    2
.eh_frame:000000000000BA6A                 db  41h ; A
.eh_frame:000000000000BA6B                 db  0Eh
.eh_frame:000000000000BA6C                 db  18h
.eh_frame:000000000000BA6D                 db  83h
.eh_frame:000000000000BA6E                 db    3
.eh_frame:000000000000BA6F                 db  47h ; G
.eh_frame:000000000000BA70                 db  0Eh
.eh_frame:000000000000BA71                 db  20h
.eh_frame:000000000000BA72                 db    2
.eh_frame:000000000000BA73                 db  41h ; A
.eh_frame:000000000000BA74                 db  0Ah
.eh_frame:000000000000BA75                 db  0Eh
.eh_frame:000000000000BA76                 db  18h
.eh_frame:000000000000BA77                 db  44h ; D
.eh_frame:000000000000BA78                 db  0Eh
.eh_frame:000000000000BA79                 db  10h
.eh_frame:000000000000BA7A                 db  41h ; A
.eh_frame:000000000000BA7B                 db  0Eh
.eh_frame:000000000000BA7C                 db    8
.eh_frame:000000000000BA7D                 db  41h ; A
.eh_frame:000000000000BA7E                 db  0Bh
.eh_frame:000000000000BA7F                 db    0
.eh_frame:000000000000BA80                 db  10h
.eh_frame:000000000000BA81                 db    0
.eh_frame:000000000000BA82                 db    0
.eh_frame:000000000000BA83                 db    0
.eh_frame:000000000000BA84                 db 0C4h
.eh_frame:000000000000BA85                 db    4
.eh_frame:000000000000BA86                 db    0
.eh_frame:000000000000BA87                 db    0
.eh_frame:000000000000BA88                 db  98h
.eh_frame:000000000000BA89                 db  8Bh
.eh_frame:000000000000BA8A                 db 0FFh
.eh_frame:000000000000BA8B                 db 0FFh
.eh_frame:000000000000BA8C                 db  5Ch ; \
.eh_frame:000000000000BA8D                 db    0
.eh_frame:000000000000BA8E                 db    0
.eh_frame:000000000000BA8F                 db    0
.eh_frame:000000000000BA90                 db    0
.eh_frame:000000000000BA91                 db    0
.eh_frame:000000000000BA92                 db    0
.eh_frame:000000000000BA93                 db    0
.eh_frame:000000000000BA94                 db  28h ; (
.eh_frame:000000000000BA95                 db    0
.eh_frame:000000000000BA96                 db    0
.eh_frame:000000000000BA97                 db    0
.eh_frame:000000000000BA98                 db 0D8h
.eh_frame:000000000000BA99                 db    4
.eh_frame:000000000000BA9A                 db    0
.eh_frame:000000000000BA9B                 db    0
.eh_frame:000000000000BA9C                 db 0E4h
.eh_frame:000000000000BA9D                 db  8Bh
.eh_frame:000000000000BA9E                 db 0FFh
.eh_frame:000000000000BA9F                 db 0FFh
.eh_frame:000000000000BAA0                 db  47h ; G
.eh_frame:000000000000BAA1                 db    0
.eh_frame:000000000000BAA2                 db    0
.eh_frame:000000000000BAA3                 db    0
.eh_frame:000000000000BAA4                 db    0
.eh_frame:000000000000BAA5                 db  41h ; A
.eh_frame:000000000000BAA6                 db  0Eh
.eh_frame:000000000000BAA7                 db  10h
.eh_frame:000000000000BAA8                 db  83h
.eh_frame:000000000000BAA9                 db    2
.eh_frame:000000000000BAAA                 db  5Ah ; Z
.eh_frame:000000000000BAAB                 db  0Ah
.eh_frame:000000000000BAAC                 db  0Eh
.eh_frame:000000000000BAAD                 db    8
.eh_frame:000000000000BAAE                 db  45h ; E
.eh_frame:000000000000BAAF                 db  0Bh
.eh_frame:000000000000BAB0                 db  5Dh ; ]
.eh_frame:000000000000BAB1                 db  0Ah
.eh_frame:000000000000BAB2                 db  0Eh
.eh_frame:000000000000BAB3                 db    8
.eh_frame:000000000000BAB4                 db  43h ; C
.eh_frame:000000000000BAB5                 db  0Bh
.eh_frame:000000000000BAB6                 db  46h ; F
.eh_frame:000000000000BAB7                 db  0Eh
.eh_frame:000000000000BAB8                 db    8
.eh_frame:000000000000BAB9                 db    0
.eh_frame:000000000000BABA                 db    0
.eh_frame:000000000000BABB                 db    0
.eh_frame:000000000000BABC                 db    0
.eh_frame:000000000000BABD                 db    0
.eh_frame:000000000000BABE                 db    0
.eh_frame:000000000000BABF                 db    0
.eh_frame:000000000000BAC0                 db  1Ch
.eh_frame:000000000000BAC1                 db    0
.eh_frame:000000000000BAC2                 db    0
.eh_frame:000000000000BAC3                 db    0
.eh_frame:000000000000BAC4                 db    4
.eh_frame:000000000000BAC5                 db    5
.eh_frame:000000000000BAC6                 db    0
.eh_frame:000000000000BAC7                 db    0
.eh_frame:000000000000BAC8                 db    8
.eh_frame:000000000000BAC9                 db  8Ch
.eh_frame:000000000000BACA                 db 0FFh
.eh_frame:000000000000BACB                 db 0FFh
.eh_frame:000000000000BACC                 db  6Eh ; n
.eh_frame:000000000000BACD                 db    0
.eh_frame:000000000000BACE                 db    0
.eh_frame:000000000000BACF                 db    0
.eh_frame:000000000000BAD0                 db    0
.eh_frame:000000000000BAD1                 db  44h ; D
.eh_frame:000000000000BAD2                 db  0Eh
.eh_frame:000000000000BAD3                 db  60h ; `
.eh_frame:000000000000BAD4                 db  7Fh ; 
.eh_frame:000000000000BAD5                 db  0Ah
.eh_frame:000000000000BAD6                 db  0Eh
.eh_frame:000000000000BAD7                 db    8
.eh_frame:000000000000BAD8                 db  45h ; E
.eh_frame:000000000000BAD9                 db  0Bh
.eh_frame:000000000000BADA                 db    0
.eh_frame:000000000000BADB                 db    0
.eh_frame:000000000000BADC                 db    0
.eh_frame:000000000000BADD                 db    0
.eh_frame:000000000000BADE                 db    0
.eh_frame:000000000000BADF                 db    0
.eh_frame:000000000000BAE0                 db  10h
.eh_frame:000000000000BAE1                 db    0
.eh_frame:000000000000BAE2                 db    0
.eh_frame:000000000000BAE3                 db    0
.eh_frame:000000000000BAE4                 db  24h ; $
.eh_frame:000000000000BAE5                 db    5
.eh_frame:000000000000BAE6                 db    0
.eh_frame:000000000000BAE7                 db    0
.eh_frame:000000000000BAE8                 db  58h ; X
.eh_frame:000000000000BAE9                 db  8Ch
.eh_frame:000000000000BAEA                 db 0FFh
.eh_frame:000000000000BAEB                 db 0FFh
.eh_frame:000000000000BAEC                 db 0C7h
.eh_frame:000000000000BAED                 db    0
.eh_frame:000000000000BAEE                 db    0
.eh_frame:000000000000BAEF                 db    0
.eh_frame:000000000000BAF0                 db    0
.eh_frame:000000000000BAF1                 db    0
.eh_frame:000000000000BAF2                 db    0
.eh_frame:000000000000BAF3                 db    0
.eh_frame:000000000000BAF4                 db 0A4h
.eh_frame:000000000000BAF5                 db    0
.eh_frame:000000000000BAF6                 db    0
.eh_frame:000000000000BAF7                 db    0
.eh_frame:000000000000BAF8                 db  38h ; 8
.eh_frame:000000000000BAF9                 db    5
.eh_frame:000000000000BAFA                 db    0
.eh_frame:000000000000BAFB                 db    0
.eh_frame:000000000000BAFC                 db  14h
.eh_frame:000000000000BAFD                 db  8Dh
.eh_frame:000000000000BAFE                 db 0FFh
.eh_frame:000000000000BAFF                 db 0FFh
.eh_frame:000000000000BB00                 db    7
.eh_frame:000000000000BB01                 db  0Ah
.eh_frame:000000000000BB02                 db    0
.eh_frame:000000000000BB03                 db    0
.eh_frame:000000000000BB04                 db    0
.eh_frame:000000000000BB05                 db  42h ; B
.eh_frame:000000000000BB06                 db  0Eh
.eh_frame:000000000000BB07                 db  10h
.eh_frame:000000000000BB08                 db  8Fh
.eh_frame:000000000000BB09                 db    2
.eh_frame:000000000000BB0A                 db  42h ; B
.eh_frame:000000000000BB0B                 db  0Eh
.eh_frame:000000000000BB0C                 db  18h
.eh_frame:000000000000BB0D                 db  8Eh
.eh_frame:000000000000BB0E                 db    3
.eh_frame:000000000000BB0F                 db  44h ; D
.eh_frame:000000000000BB10                 db  0Eh
.eh_frame:000000000000BB11                 db  20h
.eh_frame:000000000000BB12                 db  8Dh
.eh_frame:000000000000BB13                 db    4
.eh_frame:000000000000BB14                 db  42h ; B
.eh_frame:000000000000BB15                 db  0Eh
.eh_frame:000000000000BB16                 db  28h ; (
.eh_frame:000000000000BB17                 db  8Ch
.eh_frame:000000000000BB18                 db    5
.eh_frame:000000000000BB19                 db  44h ; D
.eh_frame:000000000000BB1A                 db  0Eh
.eh_frame:000000000000BB1B                 db  30h ; 0
.eh_frame:000000000000BB1C                 db  86h
.eh_frame:000000000000BB1D                 db    6
.eh_frame:000000000000BB1E                 db  41h ; A
.eh_frame:000000000000BB1F                 db  0Eh
.eh_frame:000000000000BB20                 db  38h ; 8
.eh_frame:000000000000BB21                 db  83h
.eh_frame:000000000000BB22                 db    7
.eh_frame:000000000000BB23                 db  54h ; T
.eh_frame:000000000000BB24                 db  0Eh
.eh_frame:000000000000BB25                 db 0D0h
.eh_frame:000000000000BB26                 db    1
.eh_frame:000000000000BB27                 db    3
.eh_frame:000000000000BB28                 db  7Eh ; ~
.eh_frame:000000000000BB29                 db    1
.eh_frame:000000000000BB2A                 db  0Eh
.eh_frame:000000000000BB2B                 db 0E0h
.eh_frame:000000000000BB2C                 db    1
.eh_frame:000000000000BB2D                 db  6Eh ; n
.eh_frame:000000000000BB2E                 db  0Eh
.eh_frame:000000000000BB2F                 db 0D8h
.eh_frame:000000000000BB30                 db    1
.eh_frame:000000000000BB31                 db  41h ; A
.eh_frame:000000000000BB32                 db  0Eh
.eh_frame:000000000000BB33                 db 0D0h
.eh_frame:000000000000BB34                 db    1
.eh_frame:000000000000BB35                 db    3
.eh_frame:000000000000BB36                 db  40h ; @
.eh_frame:000000000000BB37                 db    1
.eh_frame:000000000000BB38                 db  0Eh
.eh_frame:000000000000BB39                 db 0E0h
.eh_frame:000000000000BB3A                 db    1
.eh_frame:000000000000BB3B                 db  75h ; u
.eh_frame:000000000000BB3C                 db  0Eh
.eh_frame:000000000000BB3D                 db 0D8h
.eh_frame:000000000000BB3E                 db    1
.eh_frame:000000000000BB3F                 db  41h ; A
.eh_frame:000000000000BB40                 db  0Eh
.eh_frame:000000000000BB41                 db 0D0h
.eh_frame:000000000000BB42                 db    1
.eh_frame:000000000000BB43                 db    2
.eh_frame:000000000000BB44                 db 0EAh
.eh_frame:000000000000BB45                 db  0Ah
.eh_frame:000000000000BB46                 db  0Eh
.eh_frame:000000000000BB47                 db  38h ; 8
.eh_frame:000000000000BB48                 db  41h ; A
.eh_frame:000000000000BB49                 db  0Eh
.eh_frame:000000000000BB4A                 db  30h ; 0
.eh_frame:000000000000BB4B                 db  41h ; A
.eh_frame:000000000000BB4C                 db  0Eh
.eh_frame:000000000000BB4D                 db  28h ; (
.eh_frame:000000000000BB4E                 db  42h ; B
.eh_frame:000000000000BB4F                 db  0Eh
.eh_frame:000000000000BB50                 db  20h
.eh_frame:000000000000BB51                 db  42h ; B
.eh_frame:000000000000BB52                 db  0Eh
.eh_frame:000000000000BB53                 db  18h
.eh_frame:000000000000BB54                 db  42h ; B
.eh_frame:000000000000BB55                 db  0Eh
.eh_frame:000000000000BB56                 db  10h
.eh_frame:000000000000BB57                 db  42h ; B
.eh_frame:000000000000BB58                 db  0Eh
.eh_frame:000000000000BB59                 db    8
.eh_frame:000000000000BB5A                 db  46h ; F
.eh_frame:000000000000BB5B                 db  0Bh
.eh_frame:000000000000BB5C                 db    3
.eh_frame:000000000000BB5D                 db  2Ch ; ,
.eh_frame:000000000000BB5E                 db    1
.eh_frame:000000000000BB5F                 db  0Eh
.eh_frame:000000000000BB60                 db 0E0h
.eh_frame:000000000000BB61                 db    1
.eh_frame:000000000000BB62                 db  52h ; R
.eh_frame:000000000000BB63                 db  0Eh
.eh_frame:000000000000BB64                 db 0D8h
.eh_frame:000000000000BB65                 db    1
.eh_frame:000000000000BB66                 db  41h ; A
.eh_frame:000000000000BB67                 db  0Eh
.eh_frame:000000000000BB68                 db 0D0h
.eh_frame:000000000000BB69                 db    1
.eh_frame:000000000000BB6A                 db  55h ; U
.eh_frame:000000000000BB6B                 db  0Eh
.eh_frame:000000000000BB6C                 db 0E0h
.eh_frame:000000000000BB6D                 db    1
.eh_frame:000000000000BB6E                 db  4Dh ; M
.eh_frame:000000000000BB6F                 db  0Eh
.eh_frame:000000000000BB70                 db 0D8h
.eh_frame:000000000000BB71                 db    1
.eh_frame:000000000000BB72                 db  42h ; B
.eh_frame:000000000000BB73                 db  0Eh
.eh_frame:000000000000BB74                 db 0D0h
.eh_frame:000000000000BB75                 db    1
.eh_frame:000000000000BB76                 db    3
.eh_frame:000000000000BB77                 db  51h ; Q
.eh_frame:000000000000BB78                 db    1
.eh_frame:000000000000BB79                 db  0Eh
.eh_frame:000000000000BB7A                 db 0E0h
.eh_frame:000000000000BB7B                 db    1
.eh_frame:000000000000BB7C                 db  77h ; w
.eh_frame:000000000000BB7D                 db  0Eh
.eh_frame:000000000000BB7E                 db 0D8h
.eh_frame:000000000000BB7F                 db    1
.eh_frame:000000000000BB80                 db  41h ; A
.eh_frame:000000000000BB81                 db  0Eh
.eh_frame:000000000000BB82                 db 0D0h
.eh_frame:000000000000BB83                 db    1
.eh_frame:000000000000BB84                 db  5Dh ; ]
.eh_frame:000000000000BB85                 db  0Eh
.eh_frame:000000000000BB86                 db 0E0h
.eh_frame:000000000000BB87                 db    1
.eh_frame:000000000000BB88                 db  71h ; q
.eh_frame:000000000000BB89                 db  0Eh
.eh_frame:000000000000BB8A                 db 0D8h
.eh_frame:000000000000BB8B                 db    1
.eh_frame:000000000000BB8C                 db  45h ; E
.eh_frame:000000000000BB8D                 db  0Eh
.eh_frame:000000000000BB8E                 db 0D0h
.eh_frame:000000000000BB8F                 db    1
.eh_frame:000000000000BB90                 db  63h ; c
.eh_frame:000000000000BB91                 db  0Eh
.eh_frame:000000000000BB92                 db 0E0h
.eh_frame:000000000000BB93                 db    1
.eh_frame:000000000000BB94                 db  4Ch ; L
.eh_frame:000000000000BB95                 db  0Eh
.eh_frame:000000000000BB96                 db 0D8h
.eh_frame:000000000000BB97                 db    1
.eh_frame:000000000000BB98                 db  42h ; B
.eh_frame:000000000000BB99                 db  0Eh
.eh_frame:000000000000BB9A                 db 0D0h
.eh_frame:000000000000BB9B                 db    1
.eh_frame:000000000000BB9C                 db  38h ; 8
.eh_frame:000000000000BB9D                 db    0
.eh_frame:000000000000BB9E                 db    0
.eh_frame:000000000000BB9F                 db    0
.eh_frame:000000000000BBA0                 db 0E0h
.eh_frame:000000000000BBA1                 db    5
.eh_frame:000000000000BBA2                 db    0
.eh_frame:000000000000BBA3                 db    0
.eh_frame:000000000000BBA4                 db  7Ch ; |
.eh_frame:000000000000BBA5                 db  96h
.eh_frame:000000000000BBA6                 db 0FFh
.eh_frame:000000000000BBA7                 db 0FFh
.eh_frame:000000000000BBA8                 db 0E6h
.eh_frame:000000000000BBA9                 db    1
.eh_frame:000000000000BBAA                 db    0
.eh_frame:000000000000BBAB                 db    0
.eh_frame:000000000000BBAC                 db    0
.eh_frame:000000000000BBAD                 db  42h ; B
.eh_frame:000000000000BBAE                 db  0Eh
.eh_frame:000000000000BBAF                 db  10h
.eh_frame:000000000000BBB0                 db  8Dh
.eh_frame:000000000000BBB1                 db    2
.eh_frame:000000000000BBB2                 db  42h ; B
.eh_frame:000000000000BBB3                 db  0Eh
.eh_frame:000000000000BBB4                 db  18h
.eh_frame:000000000000BBB5                 db  8Ch
.eh_frame:000000000000BBB6                 db    3
.eh_frame:000000000000BBB7                 db  44h ; D
.eh_frame:000000000000BBB8                 db  0Eh
.eh_frame:000000000000BBB9                 db  20h
.eh_frame:000000000000BBBA                 db  86h
.eh_frame:000000000000BBBB                 db    4
.eh_frame:000000000000BBBC                 db  41h ; A
.eh_frame:000000000000BBBD                 db  0Eh
.eh_frame:000000000000BBBE                 db  28h ; (
.eh_frame:000000000000BBBF                 db  83h
.eh_frame:000000000000BBC0                 db    5
.eh_frame:000000000000BBC1                 db  4Ah ; J
.eh_frame:000000000000BBC2                 db  0Eh
.eh_frame:000000000000BBC3                 db  40h ; @
.eh_frame:000000000000BBC4                 db    2
.eh_frame:000000000000BBC5                 db  7Ah ; z
.eh_frame:000000000000BBC6                 db  0Ah
.eh_frame:000000000000BBC7                 db  0Eh
.eh_frame:000000000000BBC8                 db  28h ; (
.eh_frame:000000000000BBC9                 db  41h ; A
.eh_frame:000000000000BBCA                 db  0Eh
.eh_frame:000000000000BBCB                 db  20h
.eh_frame:000000000000BBCC                 db  41h ; A
.eh_frame:000000000000BBCD                 db  0Eh
.eh_frame:000000000000BBCE                 db  18h
.eh_frame:000000000000BBCF                 db  42h ; B
.eh_frame:000000000000BBD0                 db  0Eh
.eh_frame:000000000000BBD1                 db  10h
.eh_frame:000000000000BBD2                 db  42h ; B
.eh_frame:000000000000BBD3                 db  0Eh
.eh_frame:000000000000BBD4                 db    8
.eh_frame:000000000000BBD5                 db  45h ; E
.eh_frame:000000000000BBD6                 db  0Bh
.eh_frame:000000000000BBD7                 db    0
.eh_frame:000000000000BBD8                 db  14h
.eh_frame:000000000000BBD9                 db    0
.eh_frame:000000000000BBDA                 db    0
.eh_frame:000000000000BBDB                 db    0
.eh_frame:000000000000BBDC                 db  1Ch
.eh_frame:000000000000BBDD                 db    6
.eh_frame:000000000000BBDE                 db    0
.eh_frame:000000000000BBDF                 db    0
.eh_frame:000000000000BBE0                 db  30h ; 0
.eh_frame:000000000000BBE1                 db  98h
.eh_frame:000000000000BBE2                 db 0FFh
.eh_frame:000000000000BBE3                 db 0FFh
.eh_frame:000000000000BBE4                 db  42h ; B
.eh_frame:000000000000BBE5                 db    0
.eh_frame:000000000000BBE6                 db    0
.eh_frame:000000000000BBE7                 db    0
.eh_frame:000000000000BBE8                 db    0
.eh_frame:000000000000BBE9                 db    0
.eh_frame:000000000000BBEA                 db    0
.eh_frame:000000000000BBEB                 db    0
.eh_frame:000000000000BBEC                 db    0
.eh_frame:000000000000BBED                 db    0
.eh_frame:000000000000BBEE                 db    0
.eh_frame:000000000000BBEF                 db    0
.eh_frame:000000000000BBF0                 db  1Ch
.eh_frame:000000000000BBF1                 db    0
.eh_frame:000000000000BBF2                 db    0
.eh_frame:000000000000BBF3                 db    0
.eh_frame:000000000000BBF4                 db  34h ; 4
.eh_frame:000000000000BBF5                 db    6
.eh_frame:000000000000BBF6                 db    0
.eh_frame:000000000000BBF7                 db    0
.eh_frame:000000000000BBF8                 db  68h ; h
.eh_frame:000000000000BBF9                 db  98h
.eh_frame:000000000000BBFA                 db 0FFh
.eh_frame:000000000000BBFB                 db 0FFh
.eh_frame:000000000000BBFC                 db  9Fh
.eh_frame:000000000000BBFD                 db    0
.eh_frame:000000000000BBFE                 db    0
.eh_frame:000000000000BBFF                 db    0
.eh_frame:000000000000BC00                 db    0
.eh_frame:000000000000BC01                 db  44h ; D
.eh_frame:000000000000BC02                 db  0Eh
.eh_frame:000000000000BC03                 db  10h
.eh_frame:000000000000BC04                 db  83h
.eh_frame:000000000000BC05                 db    2
.eh_frame:000000000000BC06                 db    2
.eh_frame:000000000000BC07                 db  78h ; x
.eh_frame:000000000000BC08                 db  0Ah
.eh_frame:000000000000BC09                 db  0Eh
.eh_frame:000000000000BC0A                 db    8
.eh_frame:000000000000BC0B                 db  41h ; A
.eh_frame:000000000000BC0C                 db  0Bh
.eh_frame:000000000000BC0D                 db    0
.eh_frame:000000000000BC0E                 db    0
.eh_frame:000000000000BC0F                 db    0
.eh_frame:000000000000BC10                 db  40h ; @
.eh_frame:000000000000BC11                 db    0
.eh_frame:000000000000BC12                 db    0
.eh_frame:000000000000BC13                 db    0
.eh_frame:000000000000BC14                 db  54h ; T
.eh_frame:000000000000BC15                 db    6
.eh_frame:000000000000BC16                 db    0
.eh_frame:000000000000BC17                 db    0
.eh_frame:000000000000BC18                 db 0E8h
.eh_frame:000000000000BC19                 db  98h
.eh_frame:000000000000BC1A                 db 0FFh
.eh_frame:000000000000BC1B                 db 0FFh
.eh_frame:000000000000BC1C                 db 0E7h
.eh_frame:000000000000BC1D                 db    0
.eh_frame:000000000000BC1E                 db    0
.eh_frame:000000000000BC1F                 db    0
.eh_frame:000000000000BC20                 db    0
.eh_frame:000000000000BC21                 db  41h ; A
.eh_frame:000000000000BC22                 db  0Eh
.eh_frame:000000000000BC23                 db  10h
.eh_frame:000000000000BC24                 db  86h
.eh_frame:000000000000BC25                 db    2
.eh_frame:000000000000BC26                 db  41h ; A
.eh_frame:000000000000BC27                 db  0Eh
.eh_frame:000000000000BC28                 db  18h
.eh_frame:000000000000BC29                 db  83h
.eh_frame:000000000000BC2A                 db    3
.eh_frame:000000000000BC2B                 db  49h ; I
.eh_frame:000000000000BC2C                 db  0Eh
.eh_frame:000000000000BC2D                 db  20h
.eh_frame:000000000000BC2E                 db  6Eh ; n
.eh_frame:000000000000BC2F                 db  0Ah
.eh_frame:000000000000BC30                 db  0Eh
.eh_frame:000000000000BC31                 db  18h
.eh_frame:000000000000BC32                 db  41h ; A
.eh_frame:000000000000BC33                 db  0Eh
.eh_frame:000000000000BC34                 db  10h
.eh_frame:000000000000BC35                 db  41h ; A
.eh_frame:000000000000BC36                 db  0Eh
.eh_frame:000000000000BC37                 db    8
.eh_frame:000000000000BC38                 db  45h ; E
.eh_frame:000000000000BC39                 db  0Bh
.eh_frame:000000000000BC3A                 db    2
.eh_frame:000000000000BC3B                 db  4Ah ; J
.eh_frame:000000000000BC3C                 db  0Ah
.eh_frame:000000000000BC3D                 db  0Eh
.eh_frame:000000000000BC3E                 db  18h
.eh_frame:000000000000BC3F                 db  41h ; A
.eh_frame:000000000000BC40                 db  0Eh
.eh_frame:000000000000BC41                 db  10h
.eh_frame:000000000000BC42                 db  41h ; A
.eh_frame:000000000000BC43                 db  0Eh
.eh_frame:000000000000BC44                 db    8
.eh_frame:000000000000BC45                 db  44h ; D
.eh_frame:000000000000BC46                 db  0Bh
.eh_frame:000000000000BC47                 db    2
.eh_frame:000000000000BC48                 db  54h ; T
.eh_frame:000000000000BC49                 db  0Eh
.eh_frame:000000000000BC4A                 db  18h
.eh_frame:000000000000BC4B                 db  41h ; A
.eh_frame:000000000000BC4C                 db  0Eh
.eh_frame:000000000000BC4D                 db  10h
.eh_frame:000000000000BC4E                 db  41h ; A
.eh_frame:000000000000BC4F                 db  0Eh
.eh_frame:000000000000BC50                 db    8
.eh_frame:000000000000BC51                 db    0
.eh_frame:000000000000BC52                 db    0
.eh_frame:000000000000BC53                 db    0
.eh_frame:000000000000BC54                 db  74h ; t
.eh_frame:000000000000BC55                 db    0
.eh_frame:000000000000BC56                 db    0
.eh_frame:000000000000BC57                 db    0
.eh_frame:000000000000BC58                 db  98h
.eh_frame:000000000000BC59                 db    6
.eh_frame:000000000000BC5A                 db    0
.eh_frame:000000000000BC5B                 db    0
.eh_frame:000000000000BC5C                 db  94h
.eh_frame:000000000000BC5D                 db  99h
.eh_frame:000000000000BC5E                 db 0FFh
.eh_frame:000000000000BC5F                 db 0FFh
.eh_frame:000000000000BC60                 db  34h ; 4
.eh_frame:000000000000BC61                 db  12h
.eh_frame:000000000000BC62                 db    0
.eh_frame:000000000000BC63                 db    0
.eh_frame:000000000000BC64                 db    0
.eh_frame:000000000000BC65                 db  42h ; B
.eh_frame:000000000000BC66                 db  0Eh
.eh_frame:000000000000BC67                 db  10h
.eh_frame:000000000000BC68                 db  8Fh
.eh_frame:000000000000BC69                 db    2
.eh_frame:000000000000BC6A                 db  42h ; B
.eh_frame:000000000000BC6B                 db  0Eh
.eh_frame:000000000000BC6C                 db  18h
.eh_frame:000000000000BC6D                 db  8Eh
.eh_frame:000000000000BC6E                 db    3
.eh_frame:000000000000BC6F                 db  45h ; E
.eh_frame:000000000000BC70                 db  0Eh
.eh_frame:000000000000BC71                 db  20h
.eh_frame:000000000000BC72                 db  8Dh
.eh_frame:000000000000BC73                 db    4
.eh_frame:000000000000BC74                 db  42h ; B
.eh_frame:000000000000BC75                 db  0Eh
.eh_frame:000000000000BC76                 db  28h ; (
.eh_frame:000000000000BC77                 db  8Ch
.eh_frame:000000000000BC78                 db    5
.eh_frame:000000000000BC79                 db  44h ; D
.eh_frame:000000000000BC7A                 db  0Eh
.eh_frame:000000000000BC7B                 db  30h ; 0
.eh_frame:000000000000BC7C                 db  86h
.eh_frame:000000000000BC7D                 db    6
.eh_frame:000000000000BC7E                 db  41h ; A
.eh_frame:000000000000BC7F                 db  0Eh
.eh_frame:000000000000BC80                 db  38h ; 8
.eh_frame:000000000000BC81                 db  83h
.eh_frame:000000000000BC82                 db    7
.eh_frame:000000000000BC83                 db  53h ; S
.eh_frame:000000000000BC84                 db  0Eh
.eh_frame:000000000000BC85                 db 0F0h
.eh_frame:000000000000BC86                 db    1
.eh_frame:000000000000BC87                 db    3
.eh_frame:000000000000BC88                 db  81h
.eh_frame:000000000000BC89                 db  0Bh
.eh_frame:000000000000BC8A                 db  0Eh
.eh_frame:000000000000BC8B                 db 0F8h
.eh_frame:000000000000BC8C                 db    1
.eh_frame:000000000000BC8D                 db  4Ah ; J
.eh_frame:000000000000BC8E                 db  0Eh
.eh_frame:000000000000BC8F                 db  80h
.eh_frame:000000000000BC90                 db    2
.eh_frame:000000000000BC91                 db  44h ; D
.eh_frame:000000000000BC92                 db  0Eh
.eh_frame:000000000000BC93                 db  88h
.eh_frame:000000000000BC94                 db    2
.eh_frame:000000000000BC95                 db  45h ; E
.eh_frame:000000000000BC96                 db  0Eh
.eh_frame:000000000000BC97                 db  90h
.eh_frame:000000000000BC98                 db    2
.eh_frame:000000000000BC99                 db  5Fh ; _
.eh_frame:000000000000BC9A                 db  0Eh
.eh_frame:000000000000BC9B                 db 0F0h
.eh_frame:000000000000BC9C                 db    1
.eh_frame:000000000000BC9D                 db  64h ; d
.eh_frame:000000000000BC9E                 db  0Ah
.eh_frame:000000000000BC9F                 db  0Eh
.eh_frame:000000000000BCA0                 db  38h ; 8
.eh_frame:000000000000BCA1                 db  41h ; A
.eh_frame:000000000000BCA2                 db  0Eh
.eh_frame:000000000000BCA3                 db  30h ; 0
.eh_frame:000000000000BCA4                 db  41h ; A
.eh_frame:000000000000BCA5                 db  0Eh
.eh_frame:000000000000BCA6                 db  28h ; (
.eh_frame:000000000000BCA7                 db  42h ; B
.eh_frame:000000000000BCA8                 db  0Eh
.eh_frame:000000000000BCA9                 db  20h
.eh_frame:000000000000BCAA                 db  42h ; B
.eh_frame:000000000000BCAB                 db  0Eh
.eh_frame:000000000000BCAC                 db  18h
.eh_frame:000000000000BCAD                 db  42h ; B
.eh_frame:000000000000BCAE                 db  0Eh
.eh_frame:000000000000BCAF                 db  10h
.eh_frame:000000000000BCB0                 db  42h ; B
.eh_frame:000000000000BCB1                 db  0Eh
.eh_frame:000000000000BCB2                 db    8
.eh_frame:000000000000BCB3                 db  44h ; D
.eh_frame:000000000000BCB4                 db  0Bh
.eh_frame:000000000000BCB5                 db    3
.eh_frame:000000000000BCB6                 db  99h
.eh_frame:000000000000BCB7                 db    5
.eh_frame:000000000000BCB8                 db  0Eh
.eh_frame:000000000000BCB9                 db 0F8h
.eh_frame:000000000000BCBA                 db    1
.eh_frame:000000000000BCBB                 db  4Dh ; M
.eh_frame:000000000000BCBC                 db  0Eh
.eh_frame:000000000000BCBD                 db  80h
.eh_frame:000000000000BCBE                 db    2
.eh_frame:000000000000BCBF                 db  44h ; D
.eh_frame:000000000000BCC0                 db  0Eh
.eh_frame:000000000000BCC1                 db  88h
.eh_frame:000000000000BCC2                 db    2
.eh_frame:000000000000BCC3                 db  47h ; G
.eh_frame:000000000000BCC4                 db  0Eh
.eh_frame:000000000000BCC5                 db  90h
.eh_frame:000000000000BCC6                 db    2
.eh_frame:000000000000BCC7                 db  5Bh ; [
.eh_frame:000000000000BCC8                 db  0Eh
.eh_frame:000000000000BCC9                 db 0F0h
.eh_frame:000000000000BCCA                 db    1
.eh_frame:000000000000BCCB                 db    0
.eh_frame:000000000000BCCC                 db  68h ; h
.eh_frame:000000000000BCCD                 db    0
.eh_frame:000000000000BCCE                 db    0
.eh_frame:000000000000BCCF                 db    0
.eh_frame:000000000000BCD0                 db  10h
.eh_frame:000000000000BCD1                 db    7
.eh_frame:000000000000BCD2                 db    0
.eh_frame:000000000000BCD3                 db    0
.eh_frame:000000000000BCD4                 db  5Ch ; \
.eh_frame:000000000000BCD5                 db 0ABh
.eh_frame:000000000000BCD6                 db 0FFh
.eh_frame:000000000000BCD7                 db 0FFh
.eh_frame:000000000000BCD8                 db 0ABh
.eh_frame:000000000000BCD9                 db    1
.eh_frame:000000000000BCDA                 db    0
.eh_frame:000000000000BCDB                 db    0
.eh_frame:000000000000BCDC                 db    0
.eh_frame:000000000000BCDD                 db  42h ; B
.eh_frame:000000000000BCDE                 db  0Eh
.eh_frame:000000000000BCDF                 db  10h
.eh_frame:000000000000BCE0                 db  8Fh
.eh_frame:000000000000BCE1                 db    2
.eh_frame:000000000000BCE2                 db  42h ; B
.eh_frame:000000000000BCE3                 db  0Eh
.eh_frame:000000000000BCE4                 db  18h
.eh_frame:000000000000BCE5                 db  8Eh
.eh_frame:000000000000BCE6                 db    3
.eh_frame:000000000000BCE7                 db  45h ; E
.eh_frame:000000000000BCE8                 db  0Eh
.eh_frame:000000000000BCE9                 db  20h
.eh_frame:000000000000BCEA                 db  8Dh
.eh_frame:000000000000BCEB                 db    4
.eh_frame:000000000000BCEC                 db  42h ; B
.eh_frame:000000000000BCED                 db  0Eh
.eh_frame:000000000000BCEE                 db  28h ; (
.eh_frame:000000000000BCEF                 db  8Ch
.eh_frame:000000000000BCF0                 db    5
.eh_frame:000000000000BCF1                 db  44h ; D
.eh_frame:000000000000BCF2                 db  0Eh
.eh_frame:000000000000BCF3                 db  30h ; 0
.eh_frame:000000000000BCF4                 db  86h
.eh_frame:000000000000BCF5                 db    6
.eh_frame:000000000000BCF6                 db  41h ; A
.eh_frame:000000000000BCF7                 db  0Eh
.eh_frame:000000000000BCF8                 db  38h ; 8
.eh_frame:000000000000BCF9                 db  83h
.eh_frame:000000000000BCFA                 db    7
.eh_frame:000000000000BCFB                 db  47h ; G
.eh_frame:000000000000BCFC                 db  0Eh
.eh_frame:000000000000BCFD                 db  60h ; `
.eh_frame:000000000000BCFE                 db    2
.eh_frame:000000000000BCFF                 db  99h
.eh_frame:000000000000BD00                 db  0Eh
.eh_frame:000000000000BD01                 db  68h ; h
.eh_frame:000000000000BD02                 db  5Fh ; _
.eh_frame:000000000000BD03                 db  0Eh
.eh_frame:000000000000BD04                 db  70h ; p
.eh_frame:000000000000BD05                 db  46h ; F
.eh_frame:000000000000BD06                 db  0Eh
.eh_frame:000000000000BD07                 db  78h ; x
.eh_frame:000000000000BD08                 db  42h ; B
.eh_frame:000000000000BD09                 db  0Eh
.eh_frame:000000000000BD0A                 db  80h
.eh_frame:000000000000BD0B                 db    1
.eh_frame:000000000000BD0C                 db  59h ; Y
.eh_frame:000000000000BD0D                 db  0Eh
.eh_frame:000000000000BD0E                 db  60h ; `
.eh_frame:000000000000BD0F                 db    2
.eh_frame:000000000000BD10                 db  40h ; @
.eh_frame:000000000000BD11                 db  0Eh
.eh_frame:000000000000BD12                 db  68h ; h
.eh_frame:000000000000BD13                 db  4Bh ; K
.eh_frame:000000000000BD14                 db  0Eh
.eh_frame:000000000000BD15                 db  70h ; p
.eh_frame:000000000000BD16                 db  43h ; C
.eh_frame:000000000000BD17                 db  0Eh
.eh_frame:000000000000BD18                 db  78h ; x
.eh_frame:000000000000BD19                 db  45h ; E
.eh_frame:000000000000BD1A                 db  0Eh
.eh_frame:000000000000BD1B                 db  80h
.eh_frame:000000000000BD1C                 db    1
.eh_frame:000000000000BD1D                 db  5Eh ; ^
.eh_frame:000000000000BD1E                 db  0Eh
.eh_frame:000000000000BD1F                 db  60h ; `
.eh_frame:000000000000BD20                 db  4Ch ; L
.eh_frame:000000000000BD21                 db  0Ah
.eh_frame:000000000000BD22                 db  0Eh
.eh_frame:000000000000BD23                 db  38h ; 8
.eh_frame:000000000000BD24                 db  44h ; D
.eh_frame:000000000000BD25                 db  0Eh
.eh_frame:000000000000BD26                 db  30h ; 0
.eh_frame:000000000000BD27                 db  41h ; A
.eh_frame:000000000000BD28                 db  0Eh
.eh_frame:000000000000BD29                 db  28h ; (
.eh_frame:000000000000BD2A                 db  42h ; B
.eh_frame:000000000000BD2B                 db  0Eh
.eh_frame:000000000000BD2C                 db  20h
.eh_frame:000000000000BD2D                 db  42h ; B
.eh_frame:000000000000BD2E                 db  0Eh
.eh_frame:000000000000BD2F                 db  18h
.eh_frame:000000000000BD30                 db  42h ; B
.eh_frame:000000000000BD31                 db  0Eh
.eh_frame:000000000000BD32                 db  10h
.eh_frame:000000000000BD33                 db  42h ; B
.eh_frame:000000000000BD34                 db  0Eh
.eh_frame:000000000000BD35                 db    8
.eh_frame:000000000000BD36                 db  46h ; F
.eh_frame:000000000000BD37                 db  0Bh
.eh_frame:000000000000BD38                 db  28h ; (
.eh_frame:000000000000BD39                 db    0
.eh_frame:000000000000BD3A                 db    0
.eh_frame:000000000000BD3B                 db    0
.eh_frame:000000000000BD3C                 db  7Ch ; |
.eh_frame:000000000000BD3D                 db    7
.eh_frame:000000000000BD3E                 db    0
.eh_frame:000000000000BD3F                 db    0
.eh_frame:000000000000BD40                 db 0A0h
.eh_frame:000000000000BD41                 db 0ACh
.eh_frame:000000000000BD42                 db 0FFh
.eh_frame:000000000000BD43                 db 0FFh
.eh_frame:000000000000BD44                 db  36h ; 6
.eh_frame:000000000000BD45                 db    0
.eh_frame:000000000000BD46                 db    0
.eh_frame:000000000000BD47                 db    0
.eh_frame:000000000000BD48                 db    0
.eh_frame:000000000000BD49                 db  42h ; B
.eh_frame:000000000000BD4A                 db  0Eh
.eh_frame:000000000000BD4B                 db  10h
.eh_frame:000000000000BD4C                 db  8Ch
.eh_frame:000000000000BD4D                 db    2
.eh_frame:000000000000BD4E                 db  41h ; A
.eh_frame:000000000000BD4F                 db  0Eh
.eh_frame:000000000000BD50                 db  18h
.eh_frame:000000000000BD51                 db  86h
.eh_frame:000000000000BD52                 db    3
.eh_frame:000000000000BD53                 db  41h ; A
.eh_frame:000000000000BD54                 db  0Eh
.eh_frame:000000000000BD55                 db  20h
.eh_frame:000000000000BD56                 db  83h
.eh_frame:000000000000BD57                 db    4
.eh_frame:000000000000BD58                 db  6Eh ; n
.eh_frame:000000000000BD59                 db  0Eh
.eh_frame:000000000000BD5A                 db  18h
.eh_frame:000000000000BD5B                 db  41h ; A
.eh_frame:000000000000BD5C                 db  0Eh
.eh_frame:000000000000BD5D                 db  10h
.eh_frame:000000000000BD5E                 db  42h ; B
.eh_frame:000000000000BD5F                 db  0Eh
.eh_frame:000000000000BD60                 db    8
.eh_frame:000000000000BD61                 db    0
.eh_frame:000000000000BD62                 db    0
.eh_frame:000000000000BD63                 db    0
.eh_frame:000000000000BD64                 db  10h
.eh_frame:000000000000BD65                 db    0
.eh_frame:000000000000BD66                 db    0
.eh_frame:000000000000BD67                 db    0
.eh_frame:000000000000BD68                 db 0A8h
.eh_frame:000000000000BD69                 db    7
.eh_frame:000000000000BD6A                 db    0
.eh_frame:000000000000BD6B                 db    0
.eh_frame:000000000000BD6C                 db 0B4h
.eh_frame:000000000000BD6D                 db 0ACh
.eh_frame:000000000000BD6E                 db 0FFh
.eh_frame:000000000000BD6F                 db 0FFh
.eh_frame:000000000000BD70                 db  11h
.eh_frame:000000000000BD71                 db    0
.eh_frame:000000000000BD72                 db    0
.eh_frame:000000000000BD73                 db    0
.eh_frame:000000000000BD74                 db    0
.eh_frame:000000000000BD75                 db    0
.eh_frame:000000000000BD76                 db    0
.eh_frame:000000000000BD77                 db    0
.eh_frame:000000000000BD78                 db  10h
.eh_frame:000000000000BD79                 db    0
.eh_frame:000000000000BD7A                 db    0
.eh_frame:000000000000BD7B                 db    0
.eh_frame:000000000000BD7C                 db 0BCh
.eh_frame:000000000000BD7D                 db    7
.eh_frame:000000000000BD7E                 db    0
.eh_frame:000000000000BD7F                 db    0
.eh_frame:000000000000BD80                 db 0C0h
.eh_frame:000000000000BD81                 db 0ACh
.eh_frame:000000000000BD82                 db 0FFh
.eh_frame:000000000000BD83                 db 0FFh
.eh_frame:000000000000BD84                 db  11h
.eh_frame:000000000000BD85                 db    0
.eh_frame:000000000000BD86                 db    0
.eh_frame:000000000000BD87                 db    0
.eh_frame:000000000000BD88                 db    0
.eh_frame:000000000000BD89                 db    0
.eh_frame:000000000000BD8A                 db    0
.eh_frame:000000000000BD8B                 db    0
.eh_frame:000000000000BD8C                 db  10h
.eh_frame:000000000000BD8D                 db    0
.eh_frame:000000000000BD8E                 db    0
.eh_frame:000000000000BD8F                 db    0
.eh_frame:000000000000BD90                 db 0D0h
.eh_frame:000000000000BD91                 db    7
.eh_frame:000000000000BD92                 db    0
.eh_frame:000000000000BD93                 db    0
.eh_frame:000000000000BD94                 db 0CCh
.eh_frame:000000000000BD95                 db 0ACh
.eh_frame:000000000000BD96                 db 0FFh
.eh_frame:000000000000BD97                 db 0FFh
.eh_frame:000000000000BD98                 db  35h ; 5
.eh_frame:000000000000BD99                 db    0
.eh_frame:000000000000BD9A                 db    0
.eh_frame:000000000000BD9B                 db    0
.eh_frame:000000000000BD9C                 db    0
.eh_frame:000000000000BD9D                 db    0
.eh_frame:000000000000BD9E                 db    0
.eh_frame:000000000000BD9F                 db    0
.eh_frame:000000000000BDA0                 db  10h
.eh_frame:000000000000BDA1                 db    0
.eh_frame:000000000000BDA2                 db    0
.eh_frame:000000000000BDA3                 db    0
.eh_frame:000000000000BDA4                 db 0E4h
.eh_frame:000000000000BDA5                 db    7
.eh_frame:000000000000BDA6                 db    0
.eh_frame:000000000000BDA7                 db    0
.eh_frame:000000000000BDA8                 db 0F8h
.eh_frame:000000000000BDA9                 db 0ACh
.eh_frame:000000000000BDAA                 db 0FFh
.eh_frame:000000000000BDAB                 db 0FFh
.eh_frame:000000000000BDAC                 db  15h
.eh_frame:000000000000BDAD                 db    0
.eh_frame:000000000000BDAE                 db    0
.eh_frame:000000000000BDAF                 db    0
.eh_frame:000000000000BDB0                 db    0
.eh_frame:000000000000BDB1                 db    0
.eh_frame:000000000000BDB2                 db    0
.eh_frame:000000000000BDB3                 db    0
.eh_frame:000000000000BDB4                 db  10h
.eh_frame:000000000000BDB5                 db    0
.eh_frame:000000000000BDB6                 db    0
.eh_frame:000000000000BDB7                 db    0
.eh_frame:000000000000BDB8                 db 0F8h
.eh_frame:000000000000BDB9                 db    7
.eh_frame:000000000000BDBA                 db    0
.eh_frame:000000000000BDBB                 db    0
.eh_frame:000000000000BDBC                 db    4
.eh_frame:000000000000BDBD                 db 0ADh
.eh_frame:000000000000BDBE                 db 0FFh
.eh_frame:000000000000BDBF                 db 0FFh
.eh_frame:000000000000BDC0                 db  30h ; 0
.eh_frame:000000000000BDC1                 db    0
.eh_frame:000000000000BDC2                 db    0
.eh_frame:000000000000BDC3                 db    0
.eh_frame:000000000000BDC4                 db    0
.eh_frame:000000000000BDC5                 db  6Bh ; k
.eh_frame:000000000000BDC6                 db  0Eh
.eh_frame:000000000000BDC7                 db  10h
.eh_frame:000000000000BDC8                 db  50h ; P
.eh_frame:000000000000BDC9                 db    0
.eh_frame:000000000000BDCA                 db    0
.eh_frame:000000000000BDCB                 db    0
.eh_frame:000000000000BDCC                 db  0Ch
.eh_frame:000000000000BDCD                 db    8
.eh_frame:000000000000BDCE                 db    0
.eh_frame:000000000000BDCF                 db    0
.eh_frame:000000000000BDD0                 db  20h
.eh_frame:000000000000BDD1                 db 0ADh
.eh_frame:000000000000BDD2                 db 0FFh
.eh_frame:000000000000BDD3                 db 0FFh
.eh_frame:000000000000BDD4                 db  74h ; t
.eh_frame:000000000000BDD5                 db    0
.eh_frame:000000000000BDD6                 db    0
.eh_frame:000000000000BDD7                 db    0
.eh_frame:000000000000BDD8                 db    0
.eh_frame:000000000000BDD9                 db  42h ; B
.eh_frame:000000000000BDDA                 db  0Eh
.eh_frame:000000000000BDDB                 db  10h
.eh_frame:000000000000BDDC                 db  8Fh
.eh_frame:000000000000BDDD                 db    2
.eh_frame:000000000000BDDE                 db  42h ; B
.eh_frame:000000000000BDDF                 db  0Eh
.eh_frame:000000000000BDE0                 db  18h
.eh_frame:000000000000BDE1                 db  8Eh
.eh_frame:000000000000BDE2                 db    3
.eh_frame:000000000000BDE3                 db  49h ; I
.eh_frame:000000000000BDE4                 db  0Eh
.eh_frame:000000000000BDE5                 db  20h
.eh_frame:000000000000BDE6                 db  8Dh
.eh_frame:000000000000BDE7                 db    4
.eh_frame:000000000000BDE8                 db  42h ; B
.eh_frame:000000000000BDE9                 db  0Eh
.eh_frame:000000000000BDEA                 db  28h ; (
.eh_frame:000000000000BDEB                 db  8Ch
.eh_frame:000000000000BDEC                 db    5
.eh_frame:000000000000BDED                 db  44h ; D
.eh_frame:000000000000BDEE                 db  0Eh
.eh_frame:000000000000BDEF                 db  30h ; 0
.eh_frame:000000000000BDF0                 db  86h
.eh_frame:000000000000BDF1                 db    6
.eh_frame:000000000000BDF2                 db  41h ; A
.eh_frame:000000000000BDF3                 db  0Eh
.eh_frame:000000000000BDF4                 db  38h ; 8
.eh_frame:000000000000BDF5                 db  83h
.eh_frame:000000000000BDF6                 db    7
.eh_frame:000000000000BDF7                 db  4Dh ; M
.eh_frame:000000000000BDF8                 db  0Eh
.eh_frame:000000000000BDF9                 db  50h ; P
.eh_frame:000000000000BDFA                 db  5Fh ; _
.eh_frame:000000000000BDFB                 db  0Eh
.eh_frame:000000000000BDFC                 db  58h ; X
.eh_frame:000000000000BDFD                 db  47h ; G
.eh_frame:000000000000BDFE                 db  0Eh
.eh_frame:000000000000BDFF                 db  60h ; `
.eh_frame:000000000000BE00                 db  46h ; F
.eh_frame:000000000000BE01                 db  0Eh
.eh_frame:000000000000BE02                 db  68h ; h
.eh_frame:000000000000BE03                 db  44h ; D
.eh_frame:000000000000BE04                 db  0Eh
.eh_frame:000000000000BE05                 db  70h ; p
.eh_frame:000000000000BE06                 db  58h ; X
.eh_frame:000000000000BE07                 db  0Eh
.eh_frame:000000000000BE08                 db  38h ; 8
.eh_frame:000000000000BE09                 db  41h ; A
.eh_frame:000000000000BE0A                 db  0Eh
.eh_frame:000000000000BE0B                 db  30h ; 0
.eh_frame:000000000000BE0C                 db  41h ; A
.eh_frame:000000000000BE0D                 db  0Eh
.eh_frame:000000000000BE0E                 db  28h ; (
.eh_frame:000000000000BE0F                 db  42h ; B
.eh_frame:000000000000BE10                 db  0Eh
.eh_frame:000000000000BE11                 db  20h
.eh_frame:000000000000BE12                 db  42h ; B
.eh_frame:000000000000BE13                 db  0Eh
.eh_frame:000000000000BE14                 db  18h
.eh_frame:000000000000BE15                 db  42h ; B
.eh_frame:000000000000BE16                 db  0Eh
.eh_frame:000000000000BE17                 db  10h
.eh_frame:000000000000BE18                 db  42h ; B
.eh_frame:000000000000BE19                 db  0Eh
.eh_frame:000000000000BE1A                 db    8
.eh_frame:000000000000BE1B                 db    0
.eh_frame:000000000000BE1C                 db  68h ; h
.eh_frame:000000000000BE1D                 db    0
.eh_frame:000000000000BE1E                 db    0
.eh_frame:000000000000BE1F                 db    0
.eh_frame:000000000000BE20                 db  60h ; `
.eh_frame:000000000000BE21                 db    8
.eh_frame:000000000000BE22                 db    0
.eh_frame:000000000000BE23                 db    0
.eh_frame:000000000000BE24                 db  4Ch ; L
.eh_frame:000000000000BE25                 db 0ADh
.eh_frame:000000000000BE26                 db 0FFh
.eh_frame:000000000000BE27                 db 0FFh
.eh_frame:000000000000BE28                 db 0E3h
.eh_frame:000000000000BE29                 db    0
.eh_frame:000000000000BE2A                 db    0
.eh_frame:000000000000BE2B                 db    0
.eh_frame:000000000000BE2C                 db    0
.eh_frame:000000000000BE2D                 db  42h ; B
.eh_frame:000000000000BE2E                 db  0Eh
.eh_frame:000000000000BE2F                 db  10h
.eh_frame:000000000000BE30                 db  8Fh
.eh_frame:000000000000BE31                 db    2
.eh_frame:000000000000BE32                 db  42h ; B
.eh_frame:000000000000BE33                 db  0Eh
.eh_frame:000000000000BE34                 db  18h
.eh_frame:000000000000BE35                 db  8Eh
.eh_frame:000000000000BE36                 db    3
.eh_frame:000000000000BE37                 db  49h ; I
.eh_frame:000000000000BE38                 db  0Eh
.eh_frame:000000000000BE39                 db  20h
.eh_frame:000000000000BE3A                 db  8Dh
.eh_frame:000000000000BE3B                 db    4
.eh_frame:000000000000BE3C                 db  42h ; B
.eh_frame:000000000000BE3D                 db  0Eh
.eh_frame:000000000000BE3E                 db  28h ; (
.eh_frame:000000000000BE3F                 db  8Ch
.eh_frame:000000000000BE40                 db    5
.eh_frame:000000000000BE41                 db  44h ; D
.eh_frame:000000000000BE42                 db  0Eh
.eh_frame:000000000000BE43                 db  30h ; 0
.eh_frame:000000000000BE44                 db  86h
.eh_frame:000000000000BE45                 db    6
.eh_frame:000000000000BE46                 db  41h ; A
.eh_frame:000000000000BE47                 db  0Eh
.eh_frame:000000000000BE48                 db  38h ; 8
.eh_frame:000000000000BE49                 db  83h
.eh_frame:000000000000BE4A                 db    7
.eh_frame:000000000000BE4B                 db  4Dh ; M
.eh_frame:000000000000BE4C                 db  0Eh
.eh_frame:000000000000BE4D                 db  70h ; p
.eh_frame:000000000000BE4E                 db  65h ; e
.eh_frame:000000000000BE4F                 db  0Eh
.eh_frame:000000000000BE50                 db  78h ; x
.eh_frame:000000000000BE51                 db  4Dh ; M
.eh_frame:000000000000BE52                 db  0Eh
.eh_frame:000000000000BE53                 db  80h
.eh_frame:000000000000BE54                 db    1
.eh_frame:000000000000BE55                 db  46h ; F
.eh_frame:000000000000BE56                 db  0Eh
.eh_frame:000000000000BE57                 db  88h
.eh_frame:000000000000BE58                 db    1
.eh_frame:000000000000BE59                 db  42h ; B
.eh_frame:000000000000BE5A                 db  0Eh
.eh_frame:000000000000BE5B                 db  90h
.eh_frame:000000000000BE5C                 db    1
.eh_frame:000000000000BE5D                 db  5Eh ; ^
.eh_frame:000000000000BE5E                 db  0Eh
.eh_frame:000000000000BE5F                 db  70h ; p
.eh_frame:000000000000BE60                 db  56h ; V
.eh_frame:000000000000BE61                 db  0Eh
.eh_frame:000000000000BE62                 db  78h ; x
.eh_frame:000000000000BE63                 db  43h ; C
.eh_frame:000000000000BE64                 db  0Eh
.eh_frame:000000000000BE65                 db  80h
.eh_frame:000000000000BE66                 db    1
.eh_frame:000000000000BE67                 db  43h ; C
.eh_frame:000000000000BE68                 db  0Eh
.eh_frame:000000000000BE69                 db  88h
.eh_frame:000000000000BE6A                 db    1
.eh_frame:000000000000BE6B                 db  56h ; V
.eh_frame:000000000000BE6C                 db  0Eh
.eh_frame:000000000000BE6D                 db  90h
.eh_frame:000000000000BE6E                 db    1
.eh_frame:000000000000BE6F                 db  52h ; R
.eh_frame:000000000000BE70                 db  0Eh
.eh_frame:000000000000BE71                 db  70h ; p
.eh_frame:000000000000BE72                 db  5Bh ; [
.eh_frame:000000000000BE73                 db  0Eh
.eh_frame:000000000000BE74                 db  38h ; 8
.eh_frame:000000000000BE75                 db  41h ; A
.eh_frame:000000000000BE76                 db  0Eh
.eh_frame:000000000000BE77                 db  30h ; 0
.eh_frame:000000000000BE78                 db  41h ; A
.eh_frame:000000000000BE79                 db  0Eh
.eh_frame:000000000000BE7A                 db  28h ; (
.eh_frame:000000000000BE7B                 db  42h ; B
.eh_frame:000000000000BE7C                 db  0Eh
.eh_frame:000000000000BE7D                 db  20h
.eh_frame:000000000000BE7E                 db  42h ; B
.eh_frame:000000000000BE7F                 db  0Eh
.eh_frame:000000000000BE80                 db  18h
.eh_frame:000000000000BE81                 db  42h ; B
.eh_frame:000000000000BE82                 db  0Eh
.eh_frame:000000000000BE83                 db  10h
.eh_frame:000000000000BE84                 db  42h ; B
.eh_frame:000000000000BE85                 db  0Eh
.eh_frame:000000000000BE86                 db    8
.eh_frame:000000000000BE87                 db    0
.eh_frame:000000000000BE88                 db  10h
.eh_frame:000000000000BE89                 db    0
.eh_frame:000000000000BE8A                 db    0
.eh_frame:000000000000BE8B                 db    0
.eh_frame:000000000000BE8C                 db 0CCh
.eh_frame:000000000000BE8D                 db    8
.eh_frame:000000000000BE8E                 db    0
.eh_frame:000000000000BE8F                 db    0
.eh_frame:000000000000BE90                 db 0D0h
.eh_frame:000000000000BE91                 db 0ADh
.eh_frame:000000000000BE92                 db 0FFh
.eh_frame:000000000000BE93                 db 0FFh
.eh_frame:000000000000BE94                 db  0Ah
.eh_frame:000000000000BE95                 db    0
.eh_frame:000000000000BE96                 db    0
.eh_frame:000000000000BE97                 db    0
.eh_frame:000000000000BE98                 db    0
.eh_frame:000000000000BE99                 db    0
.eh_frame:000000000000BE9A                 db    0
.eh_frame:000000000000BE9B                 db    0
.eh_frame:000000000000BE9C                 db  28h ; (
.eh_frame:000000000000BE9D                 db    0
.eh_frame:000000000000BE9E                 db    0
.eh_frame:000000000000BE9F                 db    0
.eh_frame:000000000000BEA0                 db 0E0h
.eh_frame:000000000000BEA1                 db    8
.eh_frame:000000000000BEA2                 db    0
.eh_frame:000000000000BEA3                 db    0
.eh_frame:000000000000BEA4                 db 0CCh
.eh_frame:000000000000BEA5                 db 0ADh
.eh_frame:000000000000BEA6                 db 0FFh
.eh_frame:000000000000BEA7                 db 0FFh
.eh_frame:000000000000BEA8                 db  93h
.eh_frame:000000000000BEA9                 db    0
.eh_frame:000000000000BEAA                 db    0
.eh_frame:000000000000BEAB                 db    0
.eh_frame:000000000000BEAC                 db    0
.eh_frame:000000000000BEAD                 db  48h ; H
.eh_frame:000000000000BEAE                 db  0Eh
.eh_frame:000000000000BEAF                 db  10h
.eh_frame:000000000000BEB0                 db  8Ch
.eh_frame:000000000000BEB1                 db    2
.eh_frame:000000000000BEB2                 db  48h ; H
.eh_frame:000000000000BEB3                 db  0Eh
.eh_frame:000000000000BEB4                 db  18h
.eh_frame:000000000000BEB5                 db  86h
.eh_frame:000000000000BEB6                 db    3
.eh_frame:000000000000BEB7                 db  41h ; A
.eh_frame:000000000000BEB8                 db  0Eh
.eh_frame:000000000000BEB9                 db  20h
.eh_frame:000000000000BEBA                 db  83h
.eh_frame:000000000000BEBB                 db    4
.eh_frame:000000000000BEBC                 db    2
.eh_frame:000000000000BEBD                 db  74h ; t
.eh_frame:000000000000BEBE                 db  0Eh
.eh_frame:000000000000BEBF                 db  18h
.eh_frame:000000000000BEC0                 db  4Bh ; K
.eh_frame:000000000000BEC1                 db  0Eh
.eh_frame:000000000000BEC2                 db  10h
.eh_frame:000000000000BEC3                 db  42h ; B
.eh_frame:000000000000BEC4                 db  0Eh
.eh_frame:000000000000BEC5                 db    8
.eh_frame:000000000000BEC6                 db    0
.eh_frame:000000000000BEC7                 db    0
.eh_frame:000000000000BEC8                 db  10h
.eh_frame:000000000000BEC9                 db    0
.eh_frame:000000000000BECA                 db    0
.eh_frame:000000000000BECB                 db    0
.eh_frame:000000000000BECC                 db  0Ch
.eh_frame:000000000000BECD                 db    9
.eh_frame:000000000000BECE                 db    0
.eh_frame:000000000000BECF                 db    0
.eh_frame:000000000000BED0                 db  40h ; @
.eh_frame:000000000000BED1                 db 0AEh
.eh_frame:000000000000BED2                 db 0FFh
.eh_frame:000000000000BED3                 db 0FFh
.eh_frame:000000000000BED4                 db  13h
.eh_frame:000000000000BED5                 db    0
.eh_frame:000000000000BED6                 db    0
.eh_frame:000000000000BED7                 db    0
.eh_frame:000000000000BED8                 db    0
.eh_frame:000000000000BED9                 db    0
.eh_frame:000000000000BEDA                 db    0
.eh_frame:000000000000BEDB                 db    0
.eh_frame:000000000000BEDC                 db  10h
.eh_frame:000000000000BEDD                 db    0
.eh_frame:000000000000BEDE                 db    0
.eh_frame:000000000000BEDF                 db    0
.eh_frame:000000000000BEE0                 db  20h
.eh_frame:000000000000BEE1                 db    9
.eh_frame:000000000000BEE2                 db    0
.eh_frame:000000000000BEE3                 db    0
.eh_frame:000000000000BEE4                 db  4Ch ; L
.eh_frame:000000000000BEE5                 db 0AEh
.eh_frame:000000000000BEE6                 db 0FFh
.eh_frame:000000000000BEE7                 db 0FFh
.eh_frame:000000000000BEE8                 db  0Ch
.eh_frame:000000000000BEE9                 db    0
.eh_frame:000000000000BEEA                 db    0
.eh_frame:000000000000BEEB                 db    0
.eh_frame:000000000000BEEC                 db    0
.eh_frame:000000000000BEED                 db    0
.eh_frame:000000000000BEEE                 db    0
.eh_frame:000000000000BEEF                 db    0
.eh_frame:000000000000BEF0                 db  10h
.eh_frame:000000000000BEF1                 db    0
.eh_frame:000000000000BEF2                 db    0
.eh_frame:000000000000BEF3                 db    0
.eh_frame:000000000000BEF4                 db  34h ; 4
.eh_frame:000000000000BEF5                 db    9
.eh_frame:000000000000BEF6                 db    0
.eh_frame:000000000000BEF7                 db    0
.eh_frame:000000000000BEF8                 db  48h ; H
.eh_frame:000000000000BEF9                 db 0AEh
.eh_frame:000000000000BEFA                 db 0FFh
.eh_frame:000000000000BEFB                 db 0FFh
.eh_frame:000000000000BEFC                 db  18h
.eh_frame:000000000000BEFD                 db    0
.eh_frame:000000000000BEFE                 db    0
.eh_frame:000000000000BEFF                 db    0
.eh_frame:000000000000BF00                 db    0
.eh_frame:000000000000BF01                 db    0
.eh_frame:000000000000BF02                 db    0
.eh_frame:000000000000BF03                 db    0
.eh_frame:000000000000BF04                 db  10h
.eh_frame:000000000000BF05                 db    0
.eh_frame:000000000000BF06                 db    0
.eh_frame:000000000000BF07                 db    0
.eh_frame:000000000000BF08                 db  48h ; H
.eh_frame:000000000000BF09                 db    9
.eh_frame:000000000000BF0A                 db    0
.eh_frame:000000000000BF0B                 db    0
.eh_frame:000000000000BF0C                 db  54h ; T
.eh_frame:000000000000BF0D                 db 0AEh
.eh_frame:000000000000BF0E                 db 0FFh
.eh_frame:000000000000BF0F                 db 0FFh
.eh_frame:000000000000BF10                 db  14h
.eh_frame:000000000000BF11                 db    0
.eh_frame:000000000000BF12                 db    0
.eh_frame:000000000000BF13                 db    0
.eh_frame:000000000000BF14                 db    0
.eh_frame:000000000000BF15                 db    0
.eh_frame:000000000000BF16                 db    0
.eh_frame:000000000000BF17                 db    0
.eh_frame:000000000000BF18                 db  18h
.eh_frame:000000000000BF19                 db    0
.eh_frame:000000000000BF1A                 db    0
.eh_frame:000000000000BF1B                 db    0
.eh_frame:000000000000BF1C                 db  5Ch ; \
.eh_frame:000000000000BF1D                 db    9
.eh_frame:000000000000BF1E                 db    0
.eh_frame:000000000000BF1F                 db    0
.eh_frame:000000000000BF20                 db  60h ; `
.eh_frame:000000000000BF21                 db 0AEh
.eh_frame:000000000000BF22                 db 0FFh
.eh_frame:000000000000BF23                 db 0FFh
.eh_frame:000000000000BF24                 db  8Eh
.eh_frame:000000000000BF25                 db    0
.eh_frame:000000000000BF26                 db    0
.eh_frame:000000000000BF27                 db    0
.eh_frame:000000000000BF28                 db    0
.eh_frame:000000000000BF29                 db  44h ; D
.eh_frame:000000000000BF2A                 db  0Eh
.eh_frame:000000000000BF2B                 db  50h ; P
.eh_frame:000000000000BF2C                 db    2
.eh_frame:000000000000BF2D                 db  7Fh ; 
.eh_frame:000000000000BF2E                 db  0Ah
.eh_frame:000000000000BF2F                 db  0Eh
.eh_frame:000000000000BF30                 db    8
.eh_frame:000000000000BF31                 db  41h ; A
.eh_frame:000000000000BF32                 db  0Bh
.eh_frame:000000000000BF33                 db    0
.eh_frame:000000000000BF34                 db  18h
.eh_frame:000000000000BF35                 db    0
.eh_frame:000000000000BF36                 db    0
.eh_frame:000000000000BF37                 db    0
.eh_frame:000000000000BF38                 db  78h ; x
.eh_frame:000000000000BF39                 db    9
.eh_frame:000000000000BF3A                 db    0
.eh_frame:000000000000BF3B                 db    0
.eh_frame:000000000000BF3C                 db 0D4h
.eh_frame:000000000000BF3D                 db 0AEh
.eh_frame:000000000000BF3E                 db 0FFh
.eh_frame:000000000000BF3F                 db 0FFh
.eh_frame:000000000000BF40                 db  8Ah
.eh_frame:000000000000BF41                 db    0
.eh_frame:000000000000BF42                 db    0
.eh_frame:000000000000BF43                 db    0
.eh_frame:000000000000BF44                 db    0
.eh_frame:000000000000BF45                 db  44h ; D
.eh_frame:000000000000BF46                 db  0Eh
.eh_frame:000000000000BF47                 db  50h ; P
.eh_frame:000000000000BF48                 db    2
.eh_frame:000000000000BF49                 db  7Bh ; {
.eh_frame:000000000000BF4A                 db  0Ah
.eh_frame:000000000000BF4B                 db  0Eh
.eh_frame:000000000000BF4C                 db    8
.eh_frame:000000000000BF4D                 db  41h ; A
.eh_frame:000000000000BF4E                 db  0Bh
.eh_frame:000000000000BF4F                 db    0
.eh_frame:000000000000BF50                 db  10h
.eh_frame:000000000000BF51                 db    0
.eh_frame:000000000000BF52                 db    0
.eh_frame:000000000000BF53                 db    0
.eh_frame:000000000000BF54                 db  94h
.eh_frame:000000000000BF55                 db    9
.eh_frame:000000000000BF56                 db    0
.eh_frame:000000000000BF57                 db    0
.eh_frame:000000000000BF58                 db  48h ; H
.eh_frame:000000000000BF59                 db 0AFh
.eh_frame:000000000000BF5A                 db 0FFh
.eh_frame:000000000000BF5B                 db 0FFh
.eh_frame:000000000000BF5C                 db  0Ch
.eh_frame:000000000000BF5D                 db    0
.eh_frame:000000000000BF5E                 db    0
.eh_frame:000000000000BF5F                 db    0
.eh_frame:000000000000BF60                 db    0
.eh_frame:000000000000BF61                 db    0
.eh_frame:000000000000BF62                 db    0
.eh_frame:000000000000BF63                 db    0
.eh_frame:000000000000BF64                 db  10h
.eh_frame:000000000000BF65                 db    0
.eh_frame:000000000000BF66                 db    0
.eh_frame:000000000000BF67                 db    0
.eh_frame:000000000000BF68                 db 0A8h
.eh_frame:000000000000BF69                 db    9
.eh_frame:000000000000BF6A                 db    0
.eh_frame:000000000000BF6B                 db    0
.eh_frame:000000000000BF6C                 db  44h ; D
.eh_frame:000000000000BF6D                 db 0AFh
.eh_frame:000000000000BF6E                 db 0FFh
.eh_frame:000000000000BF6F                 db 0FFh
.eh_frame:000000000000BF70                 db  0Fh
.eh_frame:000000000000BF71                 db    0
.eh_frame:000000000000BF72                 db    0
.eh_frame:000000000000BF73                 db    0
.eh_frame:000000000000BF74                 db    0
.eh_frame:000000000000BF75                 db    0
.eh_frame:000000000000BF76                 db    0
.eh_frame:000000000000BF77                 db    0
.eh_frame:000000000000BF78                 db  18h
.eh_frame:000000000000BF79                 db    0
.eh_frame:000000000000BF7A                 db    0
.eh_frame:000000000000BF7B                 db    0
.eh_frame:000000000000BF7C                 db 0BCh
.eh_frame:000000000000BF7D                 db    9
.eh_frame:000000000000BF7E                 db    0
.eh_frame:000000000000BF7F                 db    0
.eh_frame:000000000000BF80                 db  40h ; @
.eh_frame:000000000000BF81                 db 0AFh
.eh_frame:000000000000BF82                 db 0FFh
.eh_frame:000000000000BF83                 db 0FFh
.eh_frame:000000000000BF84                 db  98h
.eh_frame:000000000000BF85                 db    0
.eh_frame:000000000000BF86                 db    0
.eh_frame:000000000000BF87                 db    0
.eh_frame:000000000000BF88                 db    0
.eh_frame:000000000000BF89                 db  44h ; D
.eh_frame:000000000000BF8A                 db  0Eh
.eh_frame:000000000000BF8B                 db  50h ; P
.eh_frame:000000000000BF8C                 db    2
.eh_frame:000000000000BF8D                 db  8Eh
.eh_frame:000000000000BF8E                 db  0Ah
.eh_frame:000000000000BF8F                 db  0Eh
.eh_frame:000000000000BF90                 db    8
.eh_frame:000000000000BF91                 db  41h ; A
.eh_frame:000000000000BF92                 db  0Bh
.eh_frame:000000000000BF93                 db    0
.eh_frame:000000000000BF94                 db  10h
.eh_frame:000000000000BF95                 db    0
.eh_frame:000000000000BF96                 db    0
.eh_frame:000000000000BF97                 db    0
.eh_frame:000000000000BF98                 db 0D8h
.eh_frame:000000000000BF99                 db    9
.eh_frame:000000000000BF9A                 db    0
.eh_frame:000000000000BF9B                 db    0
.eh_frame:000000000000BF9C                 db 0C4h
.eh_frame:000000000000BF9D                 db 0AFh
.eh_frame:000000000000BF9E                 db 0FFh
.eh_frame:000000000000BF9F                 db 0FFh
.eh_frame:000000000000BFA0                 db  10h
.eh_frame:000000000000BFA1                 db    0
.eh_frame:000000000000BFA2                 db    0
.eh_frame:000000000000BFA3                 db    0
.eh_frame:000000000000BFA4                 db    0
.eh_frame:000000000000BFA5                 db    0
.eh_frame:000000000000BFA6                 db    0
.eh_frame:000000000000BFA7                 db    0
.eh_frame:000000000000BFA8                 db  10h
.eh_frame:000000000000BFA9                 db    0
.eh_frame:000000000000BFAA                 db    0
.eh_frame:000000000000BFAB                 db    0
.eh_frame:000000000000BFAC                 db 0ECh
.eh_frame:000000000000BFAD                 db    9
.eh_frame:000000000000BFAE                 db    0
.eh_frame:000000000000BFAF                 db    0
.eh_frame:000000000000BFB0                 db 0C0h
.eh_frame:000000000000BFB1                 db 0AFh
.eh_frame:000000000000BFB2                 db 0FFh
.eh_frame:000000000000BFB3                 db 0FFh
.eh_frame:000000000000BFB4                 db  11h
.eh_frame:000000000000BFB5                 db    0
.eh_frame:000000000000BFB6                 db    0
.eh_frame:000000000000BFB7                 db    0
.eh_frame:000000000000BFB8                 db    0
.eh_frame:000000000000BFB9                 db    0
.eh_frame:000000000000BFBA                 db    0
.eh_frame:000000000000BFBB                 db    0
.eh_frame:000000000000BFBC                 db  10h
.eh_frame:000000000000BFBD                 db    0
.eh_frame:000000000000BFBE                 db    0
.eh_frame:000000000000BFBF                 db    0
.eh_frame:000000000000BFC0                 db    0
.eh_frame:000000000000BFC1                 db  0Ah
.eh_frame:000000000000BFC2                 db    0
.eh_frame:000000000000BFC3                 db    0
.eh_frame:000000000000BFC4                 db 0CCh
.eh_frame:000000000000BFC5                 db 0AFh
.eh_frame:000000000000BFC6                 db 0FFh
.eh_frame:000000000000BFC7                 db 0FFh
.eh_frame:000000000000BFC8                 db  0Ah
.eh_frame:000000000000BFC9                 db    0
.eh_frame:000000000000BFCA                 db    0
.eh_frame:000000000000BFCB                 db    0
.eh_frame:000000000000BFCC                 db    0
.eh_frame:000000000000BFCD                 db    0
.eh_frame:000000000000BFCE                 db    0
.eh_frame:000000000000BFCF                 db    0
.eh_frame:000000000000BFD0                 db  18h
.eh_frame:000000000000BFD1                 db    0
.eh_frame:000000000000BFD2                 db    0
.eh_frame:000000000000BFD3                 db    0
.eh_frame:000000000000BFD4                 db  14h
.eh_frame:000000000000BFD5                 db  0Ah
.eh_frame:000000000000BFD6                 db    0
.eh_frame:000000000000BFD7                 db    0
.eh_frame:000000000000BFD8                 db 0C8h
.eh_frame:000000000000BFD9                 db 0AFh
.eh_frame:000000000000BFDA                 db 0FFh
.eh_frame:000000000000BFDB                 db 0FFh
.eh_frame:000000000000BFDC                 db  8Eh
.eh_frame:000000000000BFDD                 db    0
.eh_frame:000000000000BFDE                 db    0
.eh_frame:000000000000BFDF                 db    0
.eh_frame:000000000000BFE0                 db    0
.eh_frame:000000000000BFE1                 db  44h ; D
.eh_frame:000000000000BFE2                 db  0Eh
.eh_frame:000000000000BFE3                 db  50h ; P
.eh_frame:000000000000BFE4                 db    2
.eh_frame:000000000000BFE5                 db  7Fh ; 
.eh_frame:000000000000BFE6                 db  0Ah
.eh_frame:000000000000BFE7                 db  0Eh
.eh_frame:000000000000BFE8                 db    8
.eh_frame:000000000000BFE9                 db  41h ; A
.eh_frame:000000000000BFEA                 db  0Bh
.eh_frame:000000000000BFEB                 db    0
.eh_frame:000000000000BFEC                 db  18h
.eh_frame:000000000000BFED                 db    0
.eh_frame:000000000000BFEE                 db    0
.eh_frame:000000000000BFEF                 db    0
.eh_frame:000000000000BFF0                 db  30h ; 0
.eh_frame:000000000000BFF1                 db  0Ah
.eh_frame:000000000000BFF2                 db    0
.eh_frame:000000000000BFF3                 db    0
.eh_frame:000000000000BFF4                 db  3Ch ; <
.eh_frame:000000000000BFF5                 db 0B0h
.eh_frame:000000000000BFF6                 db 0FFh
.eh_frame:000000000000BFF7                 db 0FFh
.eh_frame:000000000000BFF8                 db  91h
.eh_frame:000000000000BFF9                 db    0
.eh_frame:000000000000BFFA                 db    0
.eh_frame:000000000000BFFB                 db    0
.eh_frame:000000000000BFFC                 db    0
.eh_frame:000000000000BFFD                 db  44h ; D
.eh_frame:000000000000BFFE                 db  0Eh
.eh_frame:000000000000BFFF                 db  50h ; P
.eh_frame:000000000000C000                 db    2
.eh_frame:000000000000C001                 db  82h
.eh_frame:000000000000C002                 db  0Ah
.eh_frame:000000000000C003                 db  0Eh
.eh_frame:000000000000C004                 db    8
.eh_frame:000000000000C005                 db  41h ; A
.eh_frame:000000000000C006                 db  0Bh
.eh_frame:000000000000C007                 db    0
.eh_frame:000000000000C008                 db  10h
.eh_frame:000000000000C009                 db    0
.eh_frame:000000000000C00A                 db    0
.eh_frame:000000000000C00B                 db    0
.eh_frame:000000000000C00C                 db  4Ch ; L
.eh_frame:000000000000C00D                 db  0Ah
.eh_frame:000000000000C00E                 db    0
.eh_frame:000000000000C00F                 db    0
.eh_frame:000000000000C010                 db 0C0h
.eh_frame:000000000000C011                 db 0B0h
.eh_frame:000000000000C012                 db 0FFh
.eh_frame:000000000000C013                 db 0FFh
.eh_frame:000000000000C014                 db  0Ch
.eh_frame:000000000000C015                 db    0
.eh_frame:000000000000C016                 db    0
.eh_frame:000000000000C017                 db    0
.eh_frame:000000000000C018                 db    0
.eh_frame:000000000000C019                 db    0
.eh_frame:000000000000C01A                 db    0
.eh_frame:000000000000C01B                 db    0
.eh_frame:000000000000C01C                 db  10h
.eh_frame:000000000000C01D                 db    0
.eh_frame:000000000000C01E                 db    0
.eh_frame:000000000000C01F                 db    0
.eh_frame:000000000000C020                 db  60h ; `
.eh_frame:000000000000C021                 db  0Ah
.eh_frame:000000000000C022                 db    0
.eh_frame:000000000000C023                 db    0
.eh_frame:000000000000C024                 db 0BCh
.eh_frame:000000000000C025                 db 0B0h
.eh_frame:000000000000C026                 db 0FFh
.eh_frame:000000000000C027                 db 0FFh
.eh_frame:000000000000C028                 db  17h
.eh_frame:000000000000C029                 db    0
.eh_frame:000000000000C02A                 db    0
.eh_frame:000000000000C02B                 db    0
.eh_frame:000000000000C02C                 db    0
.eh_frame:000000000000C02D                 db    0
.eh_frame:000000000000C02E                 db    0
.eh_frame:000000000000C02F                 db    0
.eh_frame:000000000000C030                 db  10h
.eh_frame:000000000000C031                 db    0
.eh_frame:000000000000C032                 db    0
.eh_frame:000000000000C033                 db    0
.eh_frame:000000000000C034                 db  74h ; t
.eh_frame:000000000000C035                 db  0Ah
.eh_frame:000000000000C036                 db    0
.eh_frame:000000000000C037                 db    0
.eh_frame:000000000000C038                 db 0C8h
.eh_frame:000000000000C039                 db 0B0h
.eh_frame:000000000000C03A                 db 0FFh
.eh_frame:000000000000C03B                 db 0FFh
.eh_frame:000000000000C03C                 db  13h
.eh_frame:000000000000C03D                 db    0
.eh_frame:000000000000C03E                 db    0
.eh_frame:000000000000C03F                 db    0
.eh_frame:000000000000C040                 db    0
.eh_frame:000000000000C041                 db    0
.eh_frame:000000000000C042                 db    0
.eh_frame:000000000000C043                 db    0
.eh_frame:000000000000C044                 db  10h
.eh_frame:000000000000C045                 db    0
.eh_frame:000000000000C046                 db    0
.eh_frame:000000000000C047                 db    0
.eh_frame:000000000000C048                 db  88h
.eh_frame:000000000000C049                 db  0Ah
.eh_frame:000000000000C04A                 db    0
.eh_frame:000000000000C04B                 db    0
.eh_frame:000000000000C04C                 db 0D4h
.eh_frame:000000000000C04D                 db 0B0h
.eh_frame:000000000000C04E                 db 0FFh
.eh_frame:000000000000C04F                 db 0FFh
.eh_frame:000000000000C050                 db  0Ch
.eh_frame:000000000000C051                 db    0
.eh_frame:000000000000C052                 db    0
.eh_frame:000000000000C053                 db    0
.eh_frame:000000000000C054                 db    0
.eh_frame:000000000000C055                 db    0
.eh_frame:000000000000C056                 db    0
.eh_frame:000000000000C057                 db    0
.eh_frame:000000000000C058                 db  10h
.eh_frame:000000000000C059                 db    0
.eh_frame:000000000000C05A                 db    0
.eh_frame:000000000000C05B                 db    0
.eh_frame:000000000000C05C                 db  9Ch
.eh_frame:000000000000C05D                 db  0Ah
.eh_frame:000000000000C05E                 db    0
.eh_frame:000000000000C05F                 db    0
.eh_frame:000000000000C060                 db 0D0h
.eh_frame:000000000000C061                 db 0B0h
.eh_frame:000000000000C062                 db 0FFh
.eh_frame:000000000000C063                 db 0FFh
.eh_frame:000000000000C064                 db  14h
.eh_frame:000000000000C065                 db    0
.eh_frame:000000000000C066                 db    0
.eh_frame:000000000000C067                 db    0
.eh_frame:000000000000C068                 db    0
.eh_frame:000000000000C069                 db    0
.eh_frame:000000000000C06A                 db    0
.eh_frame:000000000000C06B                 db    0
.eh_frame:000000000000C06C                 db  10h
.eh_frame:000000000000C06D                 db    0
.eh_frame:000000000000C06E                 db    0
.eh_frame:000000000000C06F                 db    0
.eh_frame:000000000000C070                 db 0B0h
.eh_frame:000000000000C071                 db  0Ah
.eh_frame:000000000000C072                 db    0
.eh_frame:000000000000C073                 db    0
.eh_frame:000000000000C074                 db 0DCh
.eh_frame:000000000000C075                 db 0B0h
.eh_frame:000000000000C076                 db 0FFh
.eh_frame:000000000000C077                 db 0FFh
.eh_frame:000000000000C078                 db  13h
.eh_frame:000000000000C079                 db    0
.eh_frame:000000000000C07A                 db    0
.eh_frame:000000000000C07B                 db    0
.eh_frame:000000000000C07C                 db    0
.eh_frame:000000000000C07D                 db    0
.eh_frame:000000000000C07E                 db    0
.eh_frame:000000000000C07F                 db    0
.eh_frame:000000000000C080                 db  14h
.eh_frame:000000000000C081                 db    0
.eh_frame:000000000000C082                 db    0
.eh_frame:000000000000C083                 db    0
.eh_frame:000000000000C084                 db 0C4h
.eh_frame:000000000000C085                 db  0Ah
.eh_frame:000000000000C086                 db    0
.eh_frame:000000000000C087                 db    0
.eh_frame:000000000000C088                 db 0E8h
.eh_frame:000000000000C089                 db 0B0h
.eh_frame:000000000000C08A                 db 0FFh
.eh_frame:000000000000C08B                 db 0FFh
.eh_frame:000000000000C08C                 db  18h
.eh_frame:000000000000C08D                 db    0
.eh_frame:000000000000C08E                 db    0
.eh_frame:000000000000C08F                 db    0
.eh_frame:000000000000C090                 db    0
.eh_frame:000000000000C091                 db    0
.eh_frame:000000000000C092                 db    0
.eh_frame:000000000000C093                 db    0
.eh_frame:000000000000C094                 db    0
.eh_frame:000000000000C095                 db    0
.eh_frame:000000000000C096                 db    0
.eh_frame:000000000000C097                 db    0
.eh_frame:000000000000C098                 db  18h
.eh_frame:000000000000C099                 db    0
.eh_frame:000000000000C09A                 db    0
.eh_frame:000000000000C09B                 db    0
.eh_frame:000000000000C09C                 db 0DCh
.eh_frame:000000000000C09D                 db  0Ah
.eh_frame:000000000000C09E                 db    0
.eh_frame:000000000000C09F                 db    0
.eh_frame:000000000000C0A0                 db 0F0h
.eh_frame:000000000000C0A1                 db 0B0h
.eh_frame:000000000000C0A2                 db 0FFh
.eh_frame:000000000000C0A3                 db 0FFh
.eh_frame:000000000000C0A4                 db  23h ; #
.eh_frame:000000000000C0A5                 db    0
.eh_frame:000000000000C0A6                 db    0
.eh_frame:000000000000C0A7                 db    0
.eh_frame:000000000000C0A8                 db    0
.eh_frame:000000000000C0A9                 db  41h ; A
.eh_frame:000000000000C0AA                 db  0Eh
.eh_frame:000000000000C0AB                 db  10h
.eh_frame:000000000000C0AC                 db  83h
.eh_frame:000000000000C0AD                 db    2
.eh_frame:000000000000C0AE                 db  61h ; a
.eh_frame:000000000000C0AF                 db  0Eh
.eh_frame:000000000000C0B0                 db    8
.eh_frame:000000000000C0B1                 db    0
.eh_frame:000000000000C0B2                 db    0
.eh_frame:000000000000C0B3                 db    0
.eh_frame:000000000000C0B4                 db  1Ch
.eh_frame:000000000000C0B5                 db    0
.eh_frame:000000000000C0B6                 db    0
.eh_frame:000000000000C0B7                 db    0
.eh_frame:000000000000C0B8                 db 0F8h
.eh_frame:000000000000C0B9                 db  0Ah
.eh_frame:000000000000C0BA                 db    0
.eh_frame:000000000000C0BB                 db    0
.eh_frame:000000000000C0BC                 db    4
.eh_frame:000000000000C0BD                 db 0B1h
.eh_frame:000000000000C0BE                 db 0FFh
.eh_frame:000000000000C0BF                 db 0FFh
.eh_frame:000000000000C0C0                 db  34h ; 4
.eh_frame:000000000000C0C1                 db    0
.eh_frame:000000000000C0C2                 db    0
.eh_frame:000000000000C0C3                 db    0
.eh_frame:000000000000C0C4                 db    0
.eh_frame:000000000000C0C5                 db  41h ; A
.eh_frame:000000000000C0C6                 db  0Eh
.eh_frame:000000000000C0C7                 db  10h
.eh_frame:000000000000C0C8                 db  83h
.eh_frame:000000000000C0C9                 db    2
.eh_frame:000000000000C0CA                 db  6Bh ; k
.eh_frame:000000000000C0CB                 db  0Ah
.eh_frame:000000000000C0CC                 db  0Eh
.eh_frame:000000000000C0CD                 db    8
.eh_frame:000000000000C0CE                 db  44h ; D
.eh_frame:000000000000C0CF                 db  0Bh
.eh_frame:000000000000C0D0                 db  43h ; C
.eh_frame:000000000000C0D1                 db  0Eh
.eh_frame:000000000000C0D2                 db    8
.eh_frame:000000000000C0D3                 db    0
.eh_frame:000000000000C0D4                 db  10h
.eh_frame:000000000000C0D5                 db    0
.eh_frame:000000000000C0D6                 db    0
.eh_frame:000000000000C0D7                 db    0
.eh_frame:000000000000C0D8                 db  18h
.eh_frame:000000000000C0D9                 db  0Bh
.eh_frame:000000000000C0DA                 db    0
.eh_frame:000000000000C0DB                 db    0
.eh_frame:000000000000C0DC                 db  24h ; $
.eh_frame:000000000000C0DD                 db 0B1h
.eh_frame:000000000000C0DE                 db 0FFh
.eh_frame:000000000000C0DF                 db 0FFh
.eh_frame:000000000000C0E0                 db    4
.eh_frame:000000000000C0E1                 db    0
.eh_frame:000000000000C0E2                 db    0
.eh_frame:000000000000C0E3                 db    0
.eh_frame:000000000000C0E4                 db    0
.eh_frame:000000000000C0E5                 db    0
.eh_frame:000000000000C0E6                 db    0
.eh_frame:000000000000C0E7                 db    0
.eh_frame:000000000000C0E8                 db  48h ; H
.eh_frame:000000000000C0E9                 db    0
.eh_frame:000000000000C0EA                 db    0
.eh_frame:000000000000C0EB                 db    0
.eh_frame:000000000000C0EC                 db  2Ch ; ,
.eh_frame:000000000000C0ED                 db  0Bh
.eh_frame:000000000000C0EE                 db    0
.eh_frame:000000000000C0EF                 db    0
.eh_frame:000000000000C0F0                 db  20h
.eh_frame:000000000000C0F1                 db 0B1h
.eh_frame:000000000000C0F2                 db 0FFh
.eh_frame:000000000000C0F3                 db 0FFh
.eh_frame:000000000000C0F4                 db  1Ah
.eh_frame:000000000000C0F5                 db    1
.eh_frame:000000000000C0F6                 db    0
.eh_frame:000000000000C0F7                 db    0
.eh_frame:000000000000C0F8                 db    0
.eh_frame:000000000000C0F9                 db  42h ; B
.eh_frame:000000000000C0FA                 db  0Eh
.eh_frame:000000000000C0FB                 db  10h
.eh_frame:000000000000C0FC                 db  8Fh
.eh_frame:000000000000C0FD                 db    2
.eh_frame:000000000000C0FE                 db  42h ; B
.eh_frame:000000000000C0FF                 db  0Eh
.eh_frame:000000000000C100                 db  18h
.eh_frame:000000000000C101                 db  8Eh
.eh_frame:000000000000C102                 db    3
.eh_frame:000000000000C103                 db  46h ; F
.eh_frame:000000000000C104                 db  0Eh
.eh_frame:000000000000C105                 db  20h
.eh_frame:000000000000C106                 db  8Dh
.eh_frame:000000000000C107                 db    4
.eh_frame:000000000000C108                 db  42h ; B
.eh_frame:000000000000C109                 db  0Eh
.eh_frame:000000000000C10A                 db  28h ; (
.eh_frame:000000000000C10B                 db  8Ch
.eh_frame:000000000000C10C                 db    5
.eh_frame:000000000000C10D                 db  44h ; D
.eh_frame:000000000000C10E                 db  0Eh
.eh_frame:000000000000C10F                 db  30h ; 0
.eh_frame:000000000000C110                 db  86h
.eh_frame:000000000000C111                 db    6
.eh_frame:000000000000C112                 db  41h ; A
.eh_frame:000000000000C113                 db  0Eh
.eh_frame:000000000000C114                 db  38h ; 8
.eh_frame:000000000000C115                 db  83h
.eh_frame:000000000000C116                 db    7
.eh_frame:000000000000C117                 db  47h ; G
.eh_frame:000000000000C118                 db  0Eh
.eh_frame:000000000000C119                 db  60h ; `
.eh_frame:000000000000C11A                 db    2
.eh_frame:000000000000C11B                 db 0DEh
.eh_frame:000000000000C11C                 db  0Ah
.eh_frame:000000000000C11D                 db  0Eh
.eh_frame:000000000000C11E                 db  38h ; 8
.eh_frame:000000000000C11F                 db  41h ; A
.eh_frame:000000000000C120                 db  0Eh
.eh_frame:000000000000C121                 db  30h ; 0
.eh_frame:000000000000C122                 db  41h ; A
.eh_frame:000000000000C123                 db  0Eh
.eh_frame:000000000000C124                 db  28h ; (
.eh_frame:000000000000C125                 db  42h ; B
.eh_frame:000000000000C126                 db  0Eh
.eh_frame:000000000000C127                 db  20h
.eh_frame:000000000000C128                 db  42h ; B
.eh_frame:000000000000C129                 db  0Eh
.eh_frame:000000000000C12A                 db  18h
.eh_frame:000000000000C12B                 db  42h ; B
.eh_frame:000000000000C12C                 db  0Eh
.eh_frame:000000000000C12D                 db  10h
.eh_frame:000000000000C12E                 db  42h ; B
.eh_frame:000000000000C12F                 db  0Eh
.eh_frame:000000000000C130                 db    8
.eh_frame:000000000000C131                 db  48h ; H
.eh_frame:000000000000C132                 db  0Bh
.eh_frame:000000000000C133                 db    0
.eh_frame:000000000000C134                 db  18h
.eh_frame:000000000000C135                 db    0
.eh_frame:000000000000C136                 db    0
.eh_frame:000000000000C137                 db    0
.eh_frame:000000000000C138                 db  78h ; x
.eh_frame:000000000000C139                 db  0Bh
.eh_frame:000000000000C13A                 db    0
.eh_frame:000000000000C13B                 db    0
.eh_frame:000000000000C13C                 db 0F4h
.eh_frame:000000000000C13D                 db 0B1h
.eh_frame:000000000000C13E                 db 0FFh
.eh_frame:000000000000C13F                 db 0FFh
.eh_frame:000000000000C140                 db  1Eh
.eh_frame:000000000000C141                 db    0
.eh_frame:000000000000C142                 db    0
.eh_frame:000000000000C143                 db    0
.eh_frame:000000000000C144                 db    0
.eh_frame:000000000000C145                 db  41h ; A
.eh_frame:000000000000C146                 db  0Eh
.eh_frame:000000000000C147                 db  10h
.eh_frame:000000000000C148                 db  83h
.eh_frame:000000000000C149                 db    2
.eh_frame:000000000000C14A                 db  58h ; X
.eh_frame:000000000000C14B                 db  0Eh
.eh_frame:000000000000C14C                 db    8
.eh_frame:000000000000C14D                 db    0
.eh_frame:000000000000C14E                 db    0
.eh_frame:000000000000C14F                 db    0
.eh_frame:000000000000C150                 db  34h ; 4
.eh_frame:000000000000C151                 db    0
.eh_frame:000000000000C152                 db    0
.eh_frame:000000000000C153                 db    0
.eh_frame:000000000000C154                 db  94h
.eh_frame:000000000000C155                 db  0Bh
.eh_frame:000000000000C156                 db    0
.eh_frame:000000000000C157                 db    0
.eh_frame:000000000000C158                 db 0F8h
.eh_frame:000000000000C159                 db 0B1h
.eh_frame:000000000000C15A                 db 0FFh
.eh_frame:000000000000C15B                 db 0FFh
.eh_frame:000000000000C15C                 db  51h ; Q
.eh_frame:000000000000C15D                 db    0
.eh_frame:000000000000C15E                 db    0
.eh_frame:000000000000C15F                 db    0
.eh_frame:000000000000C160                 db    0
.eh_frame:000000000000C161                 db  42h ; B
.eh_frame:000000000000C162                 db  0Eh
.eh_frame:000000000000C163                 db  10h
.eh_frame:000000000000C164                 db  8Dh
.eh_frame:000000000000C165                 db    2
.eh_frame:000000000000C166                 db  42h ; B
.eh_frame:000000000000C167                 db  0Eh
.eh_frame:000000000000C168                 db  18h
.eh_frame:000000000000C169                 db  8Ch
.eh_frame:000000000000C16A                 db    3
.eh_frame:000000000000C16B                 db  41h ; A
.eh_frame:000000000000C16C                 db  0Eh
.eh_frame:000000000000C16D                 db  20h
.eh_frame:000000000000C16E                 db  86h
.eh_frame:000000000000C16F                 db    4
.eh_frame:000000000000C170                 db  41h ; A
.eh_frame:000000000000C171                 db  0Eh
.eh_frame:000000000000C172                 db  28h ; (
.eh_frame:000000000000C173                 db  83h
.eh_frame:000000000000C174                 db    5
.eh_frame:000000000000C175                 db  47h ; G
.eh_frame:000000000000C176                 db  0Eh
.eh_frame:000000000000C177                 db  30h ; 0
.eh_frame:000000000000C178                 db  7Ah ; z
.eh_frame:000000000000C179                 db  0Eh
.eh_frame:000000000000C17A                 db  28h ; (
.eh_frame:000000000000C17B                 db  44h ; D
.eh_frame:000000000000C17C                 db  0Eh
.eh_frame:000000000000C17D                 db  20h
.eh_frame:000000000000C17E                 db  41h ; A
.eh_frame:000000000000C17F                 db  0Eh
.eh_frame:000000000000C180                 db  18h
.eh_frame:000000000000C181                 db  42h ; B
.eh_frame:000000000000C182                 db  0Eh
.eh_frame:000000000000C183                 db  10h
.eh_frame:000000000000C184                 db  42h ; B
.eh_frame:000000000000C185                 db  0Eh
.eh_frame:000000000000C186                 db    8
.eh_frame:000000000000C187                 db    0
.eh_frame:000000000000C188                 db  1Ch
.eh_frame:000000000000C189                 db    0
.eh_frame:000000000000C18A                 db    0
.eh_frame:000000000000C18B                 db    0
.eh_frame:000000000000C18C                 db 0CCh
.eh_frame:000000000000C18D                 db  0Bh
.eh_frame:000000000000C18E                 db    0
.eh_frame:000000000000C18F                 db    0
.eh_frame:000000000000C190                 db  20h
.eh_frame:000000000000C191                 db 0B2h
.eh_frame:000000000000C192                 db 0FFh
.eh_frame:000000000000C193                 db 0FFh
.eh_frame:000000000000C194                 db  5Dh ; ]
.eh_frame:000000000000C195                 db    0
.eh_frame:000000000000C196                 db    0
.eh_frame:000000000000C197                 db    0
.eh_frame:000000000000C198                 db    0
.eh_frame:000000000000C199                 db  41h ; A
.eh_frame:000000000000C19A                 db  0Eh
.eh_frame:000000000000C19B                 db  10h
.eh_frame:000000000000C19C                 db  86h
.eh_frame:000000000000C19D                 db    2
.eh_frame:000000000000C19E                 db  41h ; A
.eh_frame:000000000000C19F                 db  0Eh
.eh_frame:000000000000C1A0                 db  18h
.eh_frame:000000000000C1A1                 db  83h
.eh_frame:000000000000C1A2                 db    3
.eh_frame:000000000000C1A3                 db  44h ; D
.eh_frame:000000000000C1A4                 db  0Eh
.eh_frame:000000000000C1A5                 db  20h
.eh_frame:000000000000C1A6                 db    0
.eh_frame:000000000000C1A7                 db    0
.eh_frame:000000000000C1A8                 db  48h ; H
.eh_frame:000000000000C1A9                 db    0
.eh_frame:000000000000C1AA                 db    0
.eh_frame:000000000000C1AB                 db    0
.eh_frame:000000000000C1AC                 db 0ECh
.eh_frame:000000000000C1AD                 db  0Bh
.eh_frame:000000000000C1AE                 db    0
.eh_frame:000000000000C1AF                 db    0
.eh_frame:000000000000C1B0                 db  60h ; `
.eh_frame:000000000000C1B1                 db 0B2h
.eh_frame:000000000000C1B2                 db 0FFh
.eh_frame:000000000000C1B3                 db 0FFh
.eh_frame:000000000000C1B4                 db  29h ; )
.eh_frame:000000000000C1B5                 db    3
.eh_frame:000000000000C1B6                 db    0
.eh_frame:000000000000C1B7                 db    0
.eh_frame:000000000000C1B8                 db    0
.eh_frame:000000000000C1B9                 db  42h ; B
.eh_frame:000000000000C1BA                 db  0Eh
.eh_frame:000000000000C1BB                 db  10h
.eh_frame:000000000000C1BC                 db  8Fh
.eh_frame:000000000000C1BD                 db    2
.eh_frame:000000000000C1BE                 db  42h ; B
.eh_frame:000000000000C1BF                 db  0Eh
.eh_frame:000000000000C1C0                 db  18h
.eh_frame:000000000000C1C1                 db  8Eh
.eh_frame:000000000000C1C2                 db    3
.eh_frame:000000000000C1C3                 db  42h ; B
.eh_frame:000000000000C1C4                 db  0Eh
.eh_frame:000000000000C1C5                 db  20h
.eh_frame:000000000000C1C6                 db  8Dh
.eh_frame:000000000000C1C7                 db    4
.eh_frame:000000000000C1C8                 db  42h ; B
.eh_frame:000000000000C1C9                 db  0Eh
.eh_frame:000000000000C1CA                 db  28h ; (
.eh_frame:000000000000C1CB                 db  8Ch
.eh_frame:000000000000C1CC                 db    5
.eh_frame:000000000000C1CD                 db  41h ; A
.eh_frame:000000000000C1CE                 db  0Eh
.eh_frame:000000000000C1CF                 db  30h ; 0
.eh_frame:000000000000C1D0                 db  86h
.eh_frame:000000000000C1D1                 db    6
.eh_frame:000000000000C1D2                 db  41h ; A
.eh_frame:000000000000C1D3                 db  0Eh
.eh_frame:000000000000C1D4                 db  38h ; 8
.eh_frame:000000000000C1D5                 db  83h
.eh_frame:000000000000C1D6                 db    7
.eh_frame:000000000000C1D7                 db  44h ; D
.eh_frame:000000000000C1D8                 db  0Eh
.eh_frame:000000000000C1D9                 db  70h ; p
.eh_frame:000000000000C1DA                 db    2
.eh_frame:000000000000C1DB                 db  94h
.eh_frame:000000000000C1DC                 db  0Ah
.eh_frame:000000000000C1DD                 db  0Eh
.eh_frame:000000000000C1DE                 db  38h ; 8
.eh_frame:000000000000C1DF                 db  41h ; A
.eh_frame:000000000000C1E0                 db  0Eh
.eh_frame:000000000000C1E1                 db  30h ; 0
.eh_frame:000000000000C1E2                 db  41h ; A
.eh_frame:000000000000C1E3                 db  0Eh
.eh_frame:000000000000C1E4                 db  28h ; (
.eh_frame:000000000000C1E5                 db  42h ; B
.eh_frame:000000000000C1E6                 db  0Eh
.eh_frame:000000000000C1E7                 db  20h
.eh_frame:000000000000C1E8                 db  42h ; B
.eh_frame:000000000000C1E9                 db  0Eh
.eh_frame:000000000000C1EA                 db  18h
.eh_frame:000000000000C1EB                 db  42h ; B
.eh_frame:000000000000C1EC                 db  0Eh
.eh_frame:000000000000C1ED                 db  10h
.eh_frame:000000000000C1EE                 db  42h ; B
.eh_frame:000000000000C1EF                 db  0Eh
.eh_frame:000000000000C1F0                 db    8
.eh_frame:000000000000C1F1                 db  44h ; D
.eh_frame:000000000000C1F2                 db  0Bh
.eh_frame:000000000000C1F3                 db    0
.eh_frame:000000000000C1F4                 db  10h
.eh_frame:000000000000C1F5                 db    0
.eh_frame:000000000000C1F6                 db    0
.eh_frame:000000000000C1F7                 db    0
.eh_frame:000000000000C1F8                 db  38h ; 8
.eh_frame:000000000000C1F9                 db  0Ch
.eh_frame:000000000000C1FA                 db    0
.eh_frame:000000000000C1FB                 db    0
.eh_frame:000000000000C1FC                 db  44h ; D
.eh_frame:000000000000C1FD                 db 0B5h
.eh_frame:000000000000C1FE                 db 0FFh
.eh_frame:000000000000C1FF                 db 0FFh
.eh_frame:000000000000C200                 db    5
.eh_frame:000000000000C201                 db    0
.eh_frame:000000000000C202                 db    0
.eh_frame:000000000000C203                 db    0
.eh_frame:000000000000C204                 db    0
.eh_frame:000000000000C205                 db    0
.eh_frame:000000000000C206                 db    0
.eh_frame:000000000000C207                 db    0
.eh_frame:000000000000C208                 db  10h
.eh_frame:000000000000C209                 db    0
.eh_frame:000000000000C20A                 db    0
.eh_frame:000000000000C20B                 db    0
.eh_frame:000000000000C20C                 db  4Ch ; L
.eh_frame:000000000000C20D                 db  0Ch
.eh_frame:000000000000C20E                 db    0
.eh_frame:000000000000C20F                 db    0
.eh_frame:000000000000C210                 db  40h ; @
.eh_frame:000000000000C211                 db 0B5h
.eh_frame:000000000000C212                 db 0FFh
.eh_frame:000000000000C213                 db 0FFh
.eh_frame:000000000000C214                 db    5
.eh_frame:000000000000C215                 db    0
.eh_frame:000000000000C216                 db    0
.eh_frame:000000000000C217                 db    0
.eh_frame:000000000000C218                 db    0
.eh_frame:000000000000C219                 db    0
.eh_frame:000000000000C21A                 db    0
.eh_frame:000000000000C21B                 db    0
.eh_frame:000000000000C21C                 db  60h ; `
.eh_frame:000000000000C21D                 db    0
.eh_frame:000000000000C21E                 db    0
.eh_frame:000000000000C21F                 db    0
.eh_frame:000000000000C220                 db  60h ; `
.eh_frame:000000000000C221                 db  0Ch
.eh_frame:000000000000C222                 db    0
.eh_frame:000000000000C223                 db    0
.eh_frame:000000000000C224                 db  3Ch ; <
.eh_frame:000000000000C225                 db 0B5h
.eh_frame:000000000000C226                 db 0FFh
.eh_frame:000000000000C227                 db 0FFh
.eh_frame:000000000000C228                 db  96h
.eh_frame:000000000000C229                 db    1
.eh_frame:000000000000C22A                 db    0
.eh_frame:000000000000C22B                 db    0
.eh_frame:000000000000C22C                 db    0
.eh_frame:000000000000C22D                 db  42h ; B
.eh_frame:000000000000C22E                 db  0Eh
.eh_frame:000000000000C22F                 db  10h
.eh_frame:000000000000C230                 db  8Fh
.eh_frame:000000000000C231                 db    2
.eh_frame:000000000000C232                 db  42h ; B
.eh_frame:000000000000C233                 db  0Eh
.eh_frame:000000000000C234                 db  18h
.eh_frame:000000000000C235                 db  8Eh
.eh_frame:000000000000C236                 db    3
.eh_frame:000000000000C237                 db  42h ; B
.eh_frame:000000000000C238                 db  0Eh
.eh_frame:000000000000C239                 db  20h
.eh_frame:000000000000C23A                 db  8Dh
.eh_frame:000000000000C23B                 db    4
.eh_frame:000000000000C23C                 db  42h ; B
.eh_frame:000000000000C23D                 db  0Eh
.eh_frame:000000000000C23E                 db  28h ; (
.eh_frame:000000000000C23F                 db  8Ch
.eh_frame:000000000000C240                 db    5
.eh_frame:000000000000C241                 db  44h ; D
.eh_frame:000000000000C242                 db  0Eh
.eh_frame:000000000000C243                 db  30h ; 0
.eh_frame:000000000000C244                 db  86h
.eh_frame:000000000000C245                 db    6
.eh_frame:000000000000C246                 db  41h ; A
.eh_frame:000000000000C247                 db  0Eh
.eh_frame:000000000000C248                 db  38h ; 8
.eh_frame:000000000000C249                 db  83h
.eh_frame:000000000000C24A                 db    7
.eh_frame:000000000000C24B                 db  4Ah ; J
.eh_frame:000000000000C24C                 db  0Eh
.eh_frame:000000000000C24D                 db  50h ; P
.eh_frame:000000000000C24E                 db    2
.eh_frame:000000000000C24F                 db  5Fh ; _
.eh_frame:000000000000C250                 db  0Ah
.eh_frame:000000000000C251                 db  0Eh
.eh_frame:000000000000C252                 db  38h ; 8
.eh_frame:000000000000C253                 db  41h ; A
.eh_frame:000000000000C254                 db  0Eh
.eh_frame:000000000000C255                 db  30h ; 0
.eh_frame:000000000000C256                 db  41h ; A
.eh_frame:000000000000C257                 db  0Eh
.eh_frame:000000000000C258                 db  28h ; (
.eh_frame:000000000000C259                 db  42h ; B
.eh_frame:000000000000C25A                 db  0Eh
.eh_frame:000000000000C25B                 db  20h
.eh_frame:000000000000C25C                 db  42h ; B
.eh_frame:000000000000C25D                 db  0Eh
.eh_frame:000000000000C25E                 db  18h
.eh_frame:000000000000C25F                 db  42h ; B
.eh_frame:000000000000C260                 db  0Eh
.eh_frame:000000000000C261                 db  10h
.eh_frame:000000000000C262                 db  42h ; B
.eh_frame:000000000000C263                 db  0Eh
.eh_frame:000000000000C264                 db    8
.eh_frame:000000000000C265                 db  48h ; H
.eh_frame:000000000000C266                 db  0Bh
.eh_frame:000000000000C267                 db    2
.eh_frame:000000000000C268                 db  9Bh
.eh_frame:000000000000C269                 db  0Ah
.eh_frame:000000000000C26A                 db  0Eh
.eh_frame:000000000000C26B                 db  38h ; 8
.eh_frame:000000000000C26C                 db  41h ; A
.eh_frame:000000000000C26D                 db  0Eh
.eh_frame:000000000000C26E                 db  30h ; 0
.eh_frame:000000000000C26F                 db  41h ; A
.eh_frame:000000000000C270                 db  0Eh
.eh_frame:000000000000C271                 db  28h ; (
.eh_frame:000000000000C272                 db  42h ; B
.eh_frame:000000000000C273                 db  0Eh
.eh_frame:000000000000C274                 db  20h
.eh_frame:000000000000C275                 db  42h ; B
.eh_frame:000000000000C276                 db  0Eh
.eh_frame:000000000000C277                 db  18h
.eh_frame:000000000000C278                 db  42h ; B
.eh_frame:000000000000C279                 db  0Eh
.eh_frame:000000000000C27A                 db  10h
.eh_frame:000000000000C27B                 db  42h ; B
.eh_frame:000000000000C27C                 db  0Eh
.eh_frame:000000000000C27D                 db    8
.eh_frame:000000000000C27E                 db  43h ; C
.eh_frame:000000000000C27F                 db  0Bh
.eh_frame:000000000000C280                 db  34h ; 4
.eh_frame:000000000000C281                 db    0
.eh_frame:000000000000C282                 db    0
.eh_frame:000000000000C283                 db    0
.eh_frame:000000000000C284                 db 0C4h
.eh_frame:000000000000C285                 db  0Ch
.eh_frame:000000000000C286                 db    0
.eh_frame:000000000000C287                 db    0
.eh_frame:000000000000C288                 db  78h ; x
.eh_frame:000000000000C289                 db 0B6h
.eh_frame:000000000000C28A                 db 0FFh
.eh_frame:000000000000C28B                 db 0FFh
.eh_frame:000000000000C28C                 db  49h ; I
.eh_frame:000000000000C28D                 db    0
.eh_frame:000000000000C28E                 db    0
.eh_frame:000000000000C28F                 db    0
.eh_frame:000000000000C290                 db    0
.eh_frame:000000000000C291                 db  41h ; A
.eh_frame:000000000000C292                 db  0Eh
.eh_frame:000000000000C293                 db  10h
.eh_frame:000000000000C294                 db  86h
.eh_frame:000000000000C295                 db    2
.eh_frame:000000000000C296                 db  41h ; A
.eh_frame:000000000000C297                 db  0Eh
.eh_frame:000000000000C298                 db  18h
.eh_frame:000000000000C299                 db  83h
.eh_frame:000000000000C29A                 db    3
.eh_frame:000000000000C29B                 db  53h ; S
.eh_frame:000000000000C29C                 db  0Eh
.eh_frame:000000000000C29D                 db  20h
.eh_frame:000000000000C29E                 db  59h ; Y
.eh_frame:000000000000C29F                 db  0Ah
.eh_frame:000000000000C2A0                 db  0Eh
.eh_frame:000000000000C2A1                 db  18h
.eh_frame:000000000000C2A2                 db  44h ; D
.eh_frame:000000000000C2A3                 db  0Eh
.eh_frame:000000000000C2A4                 db  10h
.eh_frame:000000000000C2A5                 db  41h ; A
.eh_frame:000000000000C2A6                 db  0Eh
.eh_frame:000000000000C2A7                 db    8
.eh_frame:000000000000C2A8                 db  4Dh ; M
.eh_frame:000000000000C2A9                 db  0Bh
.eh_frame:000000000000C2AA                 db  44h ; D
.eh_frame:000000000000C2AB                 db  0Eh
.eh_frame:000000000000C2AC                 db  18h
.eh_frame:000000000000C2AD                 db  43h ; C
.eh_frame:000000000000C2AE                 db  0Eh
.eh_frame:000000000000C2AF                 db  10h
.eh_frame:000000000000C2B0                 db  41h ; A
.eh_frame:000000000000C2B1                 db  0Eh
.eh_frame:000000000000C2B2                 db    8
.eh_frame:000000000000C2B3                 db    0
.eh_frame:000000000000C2B4                 db    0
.eh_frame:000000000000C2B5                 db    0
.eh_frame:000000000000C2B6                 db    0
.eh_frame:000000000000C2B7                 db    0
.eh_frame:000000000000C2B8                 db  10h
.eh_frame:000000000000C2B9                 db    0
.eh_frame:000000000000C2BA                 db    0
.eh_frame:000000000000C2BB                 db    0
.eh_frame:000000000000C2BC                 db 0FCh
.eh_frame:000000000000C2BD                 db  0Ch
.eh_frame:000000000000C2BE                 db    0
.eh_frame:000000000000C2BF                 db    0
.eh_frame:000000000000C2C0                 db  90h
.eh_frame:000000000000C2C1                 db 0B6h
.eh_frame:000000000000C2C2                 db 0FFh
.eh_frame:000000000000C2C3                 db 0FFh
.eh_frame:000000000000C2C4                 db  8Eh
.eh_frame:000000000000C2C5                 db    2
.eh_frame:000000000000C2C6                 db    0
.eh_frame:000000000000C2C7                 db    0
.eh_frame:000000000000C2C8                 db    0
.eh_frame:000000000000C2C9                 db    0
.eh_frame:000000000000C2CA                 db    0
.eh_frame:000000000000C2CB                 db    0
.eh_frame:000000000000C2CC                 db  30h ; 0
.eh_frame:000000000000C2CD                 db    0
.eh_frame:000000000000C2CE                 db    0
.eh_frame:000000000000C2CF                 db    0
.eh_frame:000000000000C2D0                 db  10h
.eh_frame:000000000000C2D1                 db  0Dh
.eh_frame:000000000000C2D2                 db    0
.eh_frame:000000000000C2D3                 db    0
.eh_frame:000000000000C2D4                 db  0Ch
.eh_frame:000000000000C2D5                 db 0B9h
.eh_frame:000000000000C2D6                 db 0FFh
.eh_frame:000000000000C2D7                 db 0FFh
.eh_frame:000000000000C2D8                 db  40h ; @
.eh_frame:000000000000C2D9                 db    2
.eh_frame:000000000000C2DA                 db    0
.eh_frame:000000000000C2DB                 db    0
.eh_frame:000000000000C2DC                 db    0
.eh_frame:000000000000C2DD                 db  42h ; B
.eh_frame:000000000000C2DE                 db  0Eh
.eh_frame:000000000000C2DF                 db  10h
.eh_frame:000000000000C2E0                 db  8Dh
.eh_frame:000000000000C2E1                 db    2
.eh_frame:000000000000C2E2                 db  42h ; B
.eh_frame:000000000000C2E3                 db  0Eh
.eh_frame:000000000000C2E4                 db  18h
.eh_frame:000000000000C2E5                 db  8Ch
.eh_frame:000000000000C2E6                 db    3
.eh_frame:000000000000C2E7                 db  48h ; H
.eh_frame:000000000000C2E8                 db  0Eh
.eh_frame:000000000000C2E9                 db  20h
.eh_frame:000000000000C2EA                 db  86h
.eh_frame:000000000000C2EB                 db    4
.eh_frame:000000000000C2EC                 db  44h ; D
.eh_frame:000000000000C2ED                 db  0Eh
.eh_frame:000000000000C2EE                 db  28h ; (
.eh_frame:000000000000C2EF                 db  83h
.eh_frame:000000000000C2F0                 db    5
.eh_frame:000000000000C2F1                 db    3
.eh_frame:000000000000C2F2                 db    9
.eh_frame:000000000000C2F3                 db    2
.eh_frame:000000000000C2F4                 db  0Eh
.eh_frame:000000000000C2F5                 db  20h
.eh_frame:000000000000C2F6                 db  57h ; W
.eh_frame:000000000000C2F7                 db  0Eh
.eh_frame:000000000000C2F8                 db  18h
.eh_frame:000000000000C2F9                 db  4Dh ; M
.eh_frame:000000000000C2FA                 db  0Eh
.eh_frame:000000000000C2FB                 db  10h
.eh_frame:000000000000C2FC                 db  42h ; B
.eh_frame:000000000000C2FD                 db  0Eh
.eh_frame:000000000000C2FE                 db    8
.eh_frame:000000000000C2FF                 db    0
.eh_frame:000000000000C300                 db  4Ch ; L
.eh_frame:000000000000C301                 db    0
.eh_frame:000000000000C302                 db    0
.eh_frame:000000000000C303                 db    0
.eh_frame:000000000000C304                 db  44h ; D
.eh_frame:000000000000C305                 db  0Dh
.eh_frame:000000000000C306                 db    0
.eh_frame:000000000000C307                 db    0
.eh_frame:000000000000C308                 db  18h
.eh_frame:000000000000C309                 db 0BBh
.eh_frame:000000000000C30A                 db 0FFh
.eh_frame:000000000000C30B                 db 0FFh
.eh_frame:000000000000C30C                 db  6Ah ; j
.eh_frame:000000000000C30D                 db    2
.eh_frame:000000000000C30E                 db    0
.eh_frame:000000000000C30F                 db    0
.eh_frame:000000000000C310                 db    0
.eh_frame:000000000000C311                 db  42h ; B
.eh_frame:000000000000C312                 db  0Eh
.eh_frame:000000000000C313                 db  10h
.eh_frame:000000000000C314                 db  8Fh
.eh_frame:000000000000C315                 db    2
.eh_frame:000000000000C316                 db  42h ; B
.eh_frame:000000000000C317                 db  0Eh
.eh_frame:000000000000C318                 db  18h
.eh_frame:000000000000C319                 db  8Eh
.eh_frame:000000000000C31A                 db    3
.eh_frame:000000000000C31B                 db  45h ; E
.eh_frame:000000000000C31C                 db  0Eh
.eh_frame:000000000000C31D                 db  20h
.eh_frame:000000000000C31E                 db  8Dh
.eh_frame:000000000000C31F                 db    4
.eh_frame:000000000000C320                 db  42h ; B
.eh_frame:000000000000C321                 db  0Eh
.eh_frame:000000000000C322                 db  28h ; (
.eh_frame:000000000000C323                 db  8Ch
.eh_frame:000000000000C324                 db    5
.eh_frame:000000000000C325                 db  44h ; D
.eh_frame:000000000000C326                 db  0Eh
.eh_frame:000000000000C327                 db  30h ; 0
.eh_frame:000000000000C328                 db  86h
.eh_frame:000000000000C329                 db    6
.eh_frame:000000000000C32A                 db  41h ; A
.eh_frame:000000000000C32B                 db  0Eh
.eh_frame:000000000000C32C                 db  38h ; 8
.eh_frame:000000000000C32D                 db  83h
.eh_frame:000000000000C32E                 db    7
.eh_frame:000000000000C32F                 db  53h ; S
.eh_frame:000000000000C330                 db  0Eh
.eh_frame:000000000000C331                 db  80h
.eh_frame:000000000000C332                 db    3
.eh_frame:000000000000C333                 db    2
.eh_frame:000000000000C334                 db  58h ; X
.eh_frame:000000000000C335                 db  0Ah
.eh_frame:000000000000C336                 db  0Eh
.eh_frame:000000000000C337                 db  38h ; 8
.eh_frame:000000000000C338                 db  41h ; A
.eh_frame:000000000000C339                 db  0Eh
.eh_frame:000000000000C33A                 db  30h ; 0
.eh_frame:000000000000C33B                 db  41h ; A
.eh_frame:000000000000C33C                 db  0Eh
.eh_frame:000000000000C33D                 db  28h ; (
.eh_frame:000000000000C33E                 db  42h ; B
.eh_frame:000000000000C33F                 db  0Eh
.eh_frame:000000000000C340                 db  20h
.eh_frame:000000000000C341                 db  42h ; B
.eh_frame:000000000000C342                 db  0Eh
.eh_frame:000000000000C343                 db  18h
.eh_frame:000000000000C344                 db  42h ; B
.eh_frame:000000000000C345                 db  0Eh
.eh_frame:000000000000C346                 db  10h
.eh_frame:000000000000C347                 db  42h ; B
.eh_frame:000000000000C348                 db  0Eh
.eh_frame:000000000000C349                 db    8
.eh_frame:000000000000C34A                 db  4Bh ; K
.eh_frame:000000000000C34B                 db  0Bh
.eh_frame:000000000000C34C                 db    0
.eh_frame:000000000000C34D                 db    0
.eh_frame:000000000000C34E                 db    0
.eh_frame:000000000000C34F                 db    0
.eh_frame:000000000000C350                 db  34h ; 4
.eh_frame:000000000000C351                 db    0
.eh_frame:000000000000C352                 db    0
.eh_frame:000000000000C353                 db    0
.eh_frame:000000000000C354                 db  94h
.eh_frame:000000000000C355                 db  0Dh
.eh_frame:000000000000C356                 db    0
.eh_frame:000000000000C357                 db    0
.eh_frame:000000000000C358                 db  38h ; 8
.eh_frame:000000000000C359                 db 0BDh
.eh_frame:000000000000C35A                 db 0FFh
.eh_frame:000000000000C35B                 db 0FFh
.eh_frame:000000000000C35C                 db  3Fh ; ?
.eh_frame:000000000000C35D                 db    0
.eh_frame:000000000000C35E                 db    0
.eh_frame:000000000000C35F                 db    0
.eh_frame:000000000000C360                 db    0
.eh_frame:000000000000C361                 db  42h ; B
.eh_frame:000000000000C362                 db  0Eh
.eh_frame:000000000000C363                 db  10h
.eh_frame:000000000000C364                 db  8Dh
.eh_frame:000000000000C365                 db    2
.eh_frame:000000000000C366                 db  42h ; B
.eh_frame:000000000000C367                 db  0Eh
.eh_frame:000000000000C368                 db  18h
.eh_frame:000000000000C369                 db  8Ch
.eh_frame:000000000000C36A                 db    3
.eh_frame:000000000000C36B                 db  41h ; A
.eh_frame:000000000000C36C                 db  0Eh
.eh_frame:000000000000C36D                 db  20h
.eh_frame:000000000000C36E                 db  86h
.eh_frame:000000000000C36F                 db    4
.eh_frame:000000000000C370                 db  41h ; A
.eh_frame:000000000000C371                 db  0Eh
.eh_frame:000000000000C372                 db  28h ; (
.eh_frame:000000000000C373                 db  83h
.eh_frame:000000000000C374                 db    5
.eh_frame:000000000000C375                 db  46h ; F
.eh_frame:000000000000C376                 db  0Eh
.eh_frame:000000000000C377                 db  30h ; 0
.eh_frame:000000000000C378                 db  6Ah ; j
.eh_frame:000000000000C379                 db  0Eh
.eh_frame:000000000000C37A                 db  28h ; (
.eh_frame:000000000000C37B                 db  43h ; C
.eh_frame:000000000000C37C                 db  0Eh
.eh_frame:000000000000C37D                 db  20h
.eh_frame:000000000000C37E                 db  41h ; A
.eh_frame:000000000000C37F                 db  0Eh
.eh_frame:000000000000C380                 db  18h
.eh_frame:000000000000C381                 db  42h ; B
.eh_frame:000000000000C382                 db  0Eh
.eh_frame:000000000000C383                 db  10h
.eh_frame:000000000000C384                 db  42h ; B
.eh_frame:000000000000C385                 db  0Eh
.eh_frame:000000000000C386                 db    8
.eh_frame:000000000000C387                 db    0
.eh_frame:000000000000C388                 db  10h
.eh_frame:000000000000C389                 db    1
.eh_frame:000000000000C38A                 db    0
.eh_frame:000000000000C38B                 db    0
.eh_frame:000000000000C38C                 db 0CCh
.eh_frame:000000000000C38D                 db  0Dh
.eh_frame:000000000000C38E                 db    0
.eh_frame:000000000000C38F                 db    0
.eh_frame:000000000000C390                 db  40h ; @
.eh_frame:000000000000C391                 db 0BDh
.eh_frame:000000000000C392                 db 0FFh
.eh_frame:000000000000C393                 db 0FFh
.eh_frame:000000000000C394                 db  17h
.eh_frame:000000000000C395                 db    4
.eh_frame:000000000000C396                 db    0
.eh_frame:000000000000C397                 db    0
.eh_frame:000000000000C398                 db    0
.eh_frame:000000000000C399                 db  42h ; B
.eh_frame:000000000000C39A                 db  0Eh
.eh_frame:000000000000C39B                 db  10h
.eh_frame:000000000000C39C                 db  8Fh
.eh_frame:000000000000C39D                 db    2
.eh_frame:000000000000C39E                 db  42h ; B
.eh_frame:000000000000C39F                 db  0Eh
.eh_frame:000000000000C3A0                 db  18h
.eh_frame:000000000000C3A1                 db  8Eh
.eh_frame:000000000000C3A2                 db    3
.eh_frame:000000000000C3A3                 db  42h ; B
.eh_frame:000000000000C3A4                 db  0Eh
.eh_frame:000000000000C3A5                 db  20h
.eh_frame:000000000000C3A6                 db  8Dh
.eh_frame:000000000000C3A7                 db    4
.eh_frame:000000000000C3A8                 db  42h ; B
.eh_frame:000000000000C3A9                 db  0Eh
.eh_frame:000000000000C3AA                 db  28h ; (
.eh_frame:000000000000C3AB                 db  8Ch
.eh_frame:000000000000C3AC                 db    5
.eh_frame:000000000000C3AD                 db  44h ; D
.eh_frame:000000000000C3AE                 db  0Eh
.eh_frame:000000000000C3AF                 db  30h ; 0
.eh_frame:000000000000C3B0                 db  86h
.eh_frame:000000000000C3B1                 db    6
.eh_frame:000000000000C3B2                 db  41h ; A
.eh_frame:000000000000C3B3                 db  0Eh
.eh_frame:000000000000C3B4                 db  38h ; 8
.eh_frame:000000000000C3B5                 db  83h
.eh_frame:000000000000C3B6                 db    7
.eh_frame:000000000000C3B7                 db  4Ah ; J
.eh_frame:000000000000C3B8                 db  0Eh
.eh_frame:000000000000C3B9                 db  60h ; `
.eh_frame:000000000000C3BA                 db    2
.eh_frame:000000000000C3BB                 db 0DDh
.eh_frame:000000000000C3BC                 db  0Eh
.eh_frame:000000000000C3BD                 db  68h ; h
.eh_frame:000000000000C3BE                 db  57h ; W
.eh_frame:000000000000C3BF                 db  0Eh
.eh_frame:000000000000C3C0                 db  70h ; p
.eh_frame:000000000000C3C1                 db  42h ; B
.eh_frame:000000000000C3C2                 db  0Eh
.eh_frame:000000000000C3C3                 db  78h ; x
.eh_frame:000000000000C3C4                 db  42h ; B
.eh_frame:000000000000C3C5                 db  0Eh
.eh_frame:000000000000C3C6                 db  80h
.eh_frame:000000000000C3C7                 db    1
.eh_frame:000000000000C3C8                 db  42h ; B
.eh_frame:000000000000C3C9                 db  0Eh
.eh_frame:000000000000C3CA                 db  88h
.eh_frame:000000000000C3CB                 db    1
.eh_frame:000000000000C3CC                 db  42h ; B
.eh_frame:000000000000C3CD                 db  0Eh
.eh_frame:000000000000C3CE                 db  90h
.eh_frame:000000000000C3CF                 db    1
.eh_frame:000000000000C3D0                 db  53h ; S
.eh_frame:000000000000C3D1                 db  0Eh
.eh_frame:000000000000C3D2                 db  60h ; `
.eh_frame:000000000000C3D3                 db  44h ; D
.eh_frame:000000000000C3D4                 db  0Ah
.eh_frame:000000000000C3D5                 db  0Eh
.eh_frame:000000000000C3D6                 db  38h ; 8
.eh_frame:000000000000C3D7                 db  41h ; A
.eh_frame:000000000000C3D8                 db  0Eh
.eh_frame:000000000000C3D9                 db  30h ; 0
.eh_frame:000000000000C3DA                 db  41h ; A
.eh_frame:000000000000C3DB                 db  0Eh
.eh_frame:000000000000C3DC                 db  28h ; (
.eh_frame:000000000000C3DD                 db  42h ; B
.eh_frame:000000000000C3DE                 db  0Eh
.eh_frame:000000000000C3DF                 db  20h
.eh_frame:000000000000C3E0                 db  42h ; B
.eh_frame:000000000000C3E1                 db  0Eh
.eh_frame:000000000000C3E2                 db  18h
.eh_frame:000000000000C3E3                 db  42h ; B
.eh_frame:000000000000C3E4                 db  0Eh
.eh_frame:000000000000C3E5                 db  10h
.eh_frame:000000000000C3E6                 db  42h ; B
.eh_frame:000000000000C3E7                 db  0Eh
.eh_frame:000000000000C3E8                 db    8
.eh_frame:000000000000C3E9                 db  44h ; D
.eh_frame:000000000000C3EA                 db  0Bh
.eh_frame:000000000000C3EB                 db    2
.eh_frame:000000000000C3EC                 db  78h ; x
.eh_frame:000000000000C3ED                 db  0Ah
.eh_frame:000000000000C3EE                 db  0Eh
.eh_frame:000000000000C3EF                 db  68h ; h
.eh_frame:000000000000C3F0                 db  48h ; H
.eh_frame:000000000000C3F1                 db  0Bh
.eh_frame:000000000000C3F2                 db  5Ah ; Z
.eh_frame:000000000000C3F3                 db  0Ah
.eh_frame:000000000000C3F4                 db  0Eh
.eh_frame:000000000000C3F5                 db  38h ; 8
.eh_frame:000000000000C3F6                 db  47h ; G
.eh_frame:000000000000C3F7                 db  0Eh
.eh_frame:000000000000C3F8                 db  30h ; 0
.eh_frame:000000000000C3F9                 db  41h ; A
.eh_frame:000000000000C3FA                 db  0Eh
.eh_frame:000000000000C3FB                 db  28h ; (
.eh_frame:000000000000C3FC                 db  42h ; B
.eh_frame:000000000000C3FD                 db  0Eh
.eh_frame:000000000000C3FE                 db  20h
.eh_frame:000000000000C3FF                 db  42h ; B
.eh_frame:000000000000C400                 db  0Eh
.eh_frame:000000000000C401                 db  18h
.eh_frame:000000000000C402                 db  42h ; B
.eh_frame:000000000000C403                 db  0Eh
.eh_frame:000000000000C404                 db  10h
.eh_frame:000000000000C405                 db  42h ; B
.eh_frame:000000000000C406                 db  0Eh
.eh_frame:000000000000C407                 db    8
.eh_frame:000000000000C408                 db  56h ; V
.eh_frame:000000000000C409                 db  0Bh
.eh_frame:000000000000C40A                 db  5Eh ; ^
.eh_frame:000000000000C40B                 db  0Ah
.eh_frame:000000000000C40C                 db  0Eh
.eh_frame:000000000000C40D                 db  38h ; 8
.eh_frame:000000000000C40E                 db  52h ; R
.eh_frame:000000000000C40F                 db  0Eh
.eh_frame:000000000000C410                 db  30h ; 0
.eh_frame:000000000000C411                 db  41h ; A
.eh_frame:000000000000C412                 db  0Eh
.eh_frame:000000000000C413                 db  28h ; (
.eh_frame:000000000000C414                 db  42h ; B
.eh_frame:000000000000C415                 db  0Eh
.eh_frame:000000000000C416                 db  20h
.eh_frame:000000000000C417                 db  42h ; B
.eh_frame:000000000000C418                 db  0Eh
.eh_frame:000000000000C419                 db  18h
.eh_frame:000000000000C41A                 db  42h ; B
.eh_frame:000000000000C41B                 db  0Eh
.eh_frame:000000000000C41C                 db  10h
.eh_frame:000000000000C41D                 db  42h ; B
.eh_frame:000000000000C41E                 db  0Eh
.eh_frame:000000000000C41F                 db    8
.eh_frame:000000000000C420                 db  4Fh ; O
.eh_frame:000000000000C421                 db  0Bh
.eh_frame:000000000000C422                 db  62h ; b
.eh_frame:000000000000C423                 db  0Ah
.eh_frame:000000000000C424                 db  0Eh
.eh_frame:000000000000C425                 db  38h ; 8
.eh_frame:000000000000C426                 db  50h ; P
.eh_frame:000000000000C427                 db  0Eh
.eh_frame:000000000000C428                 db  30h ; 0
.eh_frame:000000000000C429                 db  41h ; A
.eh_frame:000000000000C42A                 db  0Eh
.eh_frame:000000000000C42B                 db  28h ; (
.eh_frame:000000000000C42C                 db  42h ; B
.eh_frame:000000000000C42D                 db  0Eh
.eh_frame:000000000000C42E                 db  20h
.eh_frame:000000000000C42F                 db  42h ; B
.eh_frame:000000000000C430                 db  0Eh
.eh_frame:000000000000C431                 db  18h
.eh_frame:000000000000C432                 db  42h ; B
.eh_frame:000000000000C433                 db  0Eh
.eh_frame:000000000000C434                 db  10h
.eh_frame:000000000000C435                 db  42h ; B
.eh_frame:000000000000C436                 db  0Eh
.eh_frame:000000000000C437                 db    8
.eh_frame:000000000000C438                 db  55h ; U
.eh_frame:000000000000C439                 db  0Bh
.eh_frame:000000000000C43A                 db  66h ; f
.eh_frame:000000000000C43B                 db  0Eh
.eh_frame:000000000000C43C                 db  68h ; h
.eh_frame:000000000000C43D                 db  42h ; B
.eh_frame:000000000000C43E                 db  0Eh
.eh_frame:000000000000C43F                 db  70h ; p
.eh_frame:000000000000C440                 db  5Ch ; \
.eh_frame:000000000000C441                 db  0Eh
.eh_frame:000000000000C442                 db  68h ; h
.eh_frame:000000000000C443                 db  41h ; A
.eh_frame:000000000000C444                 db  0Eh
.eh_frame:000000000000C445                 db  60h ; `
.eh_frame:000000000000C446                 db  44h ; D
.eh_frame:000000000000C447                 db  0Ah
.eh_frame:000000000000C448                 db  0Eh
.eh_frame:000000000000C449                 db  38h ; 8
.eh_frame:000000000000C44A                 db  41h ; A
.eh_frame:000000000000C44B                 db  0Eh
.eh_frame:000000000000C44C                 db  30h ; 0
.eh_frame:000000000000C44D                 db  41h ; A
.eh_frame:000000000000C44E                 db  0Eh
.eh_frame:000000000000C44F                 db  28h ; (
.eh_frame:000000000000C450                 db  42h ; B
.eh_frame:000000000000C451                 db  0Eh
.eh_frame:000000000000C452                 db  20h
.eh_frame:000000000000C453                 db  42h ; B
.eh_frame:000000000000C454                 db  0Eh
.eh_frame:000000000000C455                 db  18h
.eh_frame:000000000000C456                 db  42h ; B
.eh_frame:000000000000C457                 db  0Eh
.eh_frame:000000000000C458                 db  10h
.eh_frame:000000000000C459                 db  42h ; B
.eh_frame:000000000000C45A                 db  0Eh
.eh_frame:000000000000C45B                 db    8
.eh_frame:000000000000C45C                 db  45h ; E
.eh_frame:000000000000C45D                 db  0Bh
.eh_frame:000000000000C45E                 db  68h ; h
.eh_frame:000000000000C45F                 db  0Ah
.eh_frame:000000000000C460                 db  0Eh
.eh_frame:000000000000C461                 db  68h ; h
.eh_frame:000000000000C462                 db  48h ; H
.eh_frame:000000000000C463                 db  0Bh
.eh_frame:000000000000C464                 db  72h ; r
.eh_frame:000000000000C465                 db  0Eh
.eh_frame:000000000000C466                 db  68h ; h
.eh_frame:000000000000C467                 db  45h ; E
.eh_frame:000000000000C468                 db  0Eh
.eh_frame:000000000000C469                 db  70h ; p
.eh_frame:000000000000C46A                 db  42h ; B
.eh_frame:000000000000C46B                 db  0Eh
.eh_frame:000000000000C46C                 db  78h ; x
.eh_frame:000000000000C46D                 db  42h ; B
.eh_frame:000000000000C46E                 db  0Eh
.eh_frame:000000000000C46F                 db  80h
.eh_frame:000000000000C470                 db    1
.eh_frame:000000000000C471                 db  5Eh ; ^
.eh_frame:000000000000C472                 db  0Eh
.eh_frame:000000000000C473                 db  60h ; `
.eh_frame:000000000000C474                 db  44h ; D
.eh_frame:000000000000C475                 db  0Ah
.eh_frame:000000000000C476                 db  0Eh
.eh_frame:000000000000C477                 db  38h ; 8
.eh_frame:000000000000C478                 db  41h ; A
.eh_frame:000000000000C479                 db  0Eh
.eh_frame:000000000000C47A                 db  30h ; 0
.eh_frame:000000000000C47B                 db  41h ; A
.eh_frame:000000000000C47C                 db  0Eh
.eh_frame:000000000000C47D                 db  28h ; (
.eh_frame:000000000000C47E                 db  42h ; B
.eh_frame:000000000000C47F                 db  0Eh
.eh_frame:000000000000C480                 db  20h
.eh_frame:000000000000C481                 db  42h ; B
.eh_frame:000000000000C482                 db  0Eh
.eh_frame:000000000000C483                 db  18h
.eh_frame:000000000000C484                 db  42h ; B
.eh_frame:000000000000C485                 db  0Eh
.eh_frame:000000000000C486                 db  10h
.eh_frame:000000000000C487                 db  42h ; B
.eh_frame:000000000000C488                 db  0Eh
.eh_frame:000000000000C489                 db    8
.eh_frame:000000000000C48A                 db  41h ; A
.eh_frame:000000000000C48B                 db  0Bh
.eh_frame:000000000000C48C                 db  79h ; y
.eh_frame:000000000000C48D                 db  0Ah
.eh_frame:000000000000C48E                 db  0Eh
.eh_frame:000000000000C48F                 db  68h ; h
.eh_frame:000000000000C490                 db  42h ; B
.eh_frame:000000000000C491                 db  0Eh
.eh_frame:000000000000C492                 db  70h ; p
.eh_frame:000000000000C493                 db  42h ; B
.eh_frame:000000000000C494                 db  0Eh
.eh_frame:000000000000C495                 db  78h ; x
.eh_frame:000000000000C496                 db  42h ; B
.eh_frame:000000000000C497                 db  0Eh
.eh_frame:000000000000C498                 db  80h
.eh_frame:000000000000C499                 db    1
.eh_frame:000000000000C49A                 db  51h ; Q
.eh_frame:000000000000C49B                 db  0Bh
.eh_frame:000000000000C49C                 db  10h
.eh_frame:000000000000C49D                 db    0
.eh_frame:000000000000C49E                 db    0
.eh_frame:000000000000C49F                 db    0
.eh_frame:000000000000C4A0                 db 0E0h
.eh_frame:000000000000C4A1                 db  0Eh
.eh_frame:000000000000C4A2                 db    0
.eh_frame:000000000000C4A3                 db    0
.eh_frame:000000000000C4A4                 db  4Ch ; L
.eh_frame:000000000000C4A5                 db 0C0h
.eh_frame:000000000000C4A6                 db 0FFh
.eh_frame:000000000000C4A7                 db 0FFh
.eh_frame:000000000000C4A8                 db  20h
.eh_frame:000000000000C4A9                 db    0
.eh_frame:000000000000C4AA                 db    0
.eh_frame:000000000000C4AB                 db    0
.eh_frame:000000000000C4AC                 db    0
.eh_frame:000000000000C4AD                 db    0
.eh_frame:000000000000C4AE                 db    0
.eh_frame:000000000000C4AF                 db    0
.eh_frame:000000000000C4B0                 db  18h
.eh_frame:000000000000C4B1                 db    0
.eh_frame:000000000000C4B2                 db    0
.eh_frame:000000000000C4B3                 db    0
.eh_frame:000000000000C4B4                 db 0F4h
.eh_frame:000000000000C4B5                 db  0Eh
.eh_frame:000000000000C4B6                 db    0
.eh_frame:000000000000C4B7                 db    0
.eh_frame:000000000000C4B8                 db  58h ; X
.eh_frame:000000000000C4B9                 db 0C0h
.eh_frame:000000000000C4BA                 db 0FFh
.eh_frame:000000000000C4BB                 db 0FFh
.eh_frame:000000000000C4BC                 db  78h ; x
.eh_frame:000000000000C4BD                 db    0
.eh_frame:000000000000C4BE                 db    0
.eh_frame:000000000000C4BF                 db    0
.eh_frame:000000000000C4C0                 db    0
.eh_frame:000000000000C4C1                 db  44h ; D
.eh_frame:000000000000C4C2                 db  0Eh
.eh_frame:000000000000C4C3                 db  70h ; p
.eh_frame:000000000000C4C4                 db    2
.eh_frame:000000000000C4C5                 db  60h ; `
.eh_frame:000000000000C4C6                 db  0Ah
.eh_frame:000000000000C4C7                 db  0Eh
.eh_frame:000000000000C4C8                 db    8
.eh_frame:000000000000C4C9                 db  41h ; A
.eh_frame:000000000000C4CA                 db  0Bh
.eh_frame:000000000000C4CB                 db    0
.eh_frame:000000000000C4CC                 db  28h ; (
.eh_frame:000000000000C4CD                 db    0
.eh_frame:000000000000C4CE                 db    0
.eh_frame:000000000000C4CF                 db    0
.eh_frame:000000000000C4D0                 db  10h
.eh_frame:000000000000C4D1                 db  0Fh
.eh_frame:000000000000C4D2                 db    0
.eh_frame:000000000000C4D3                 db    0
.eh_frame:000000000000C4D4                 db 0BCh
.eh_frame:000000000000C4D5                 db 0C0h
.eh_frame:000000000000C4D6                 db 0FFh
.eh_frame:000000000000C4D7                 db 0FFh
.eh_frame:000000000000C4D8                 db 0D5h
.eh_frame:000000000000C4D9                 db    0
.eh_frame:000000000000C4DA                 db    0
.eh_frame:000000000000C4DB                 db    0
.eh_frame:000000000000C4DC                 db    0
.eh_frame:000000000000C4DD                 db  41h ; A
.eh_frame:000000000000C4DE                 db  0Eh
.eh_frame:000000000000C4DF                 db  10h
.eh_frame:000000000000C4E0                 db  86h
.eh_frame:000000000000C4E1                 db    2
.eh_frame:000000000000C4E2                 db  41h ; A
.eh_frame:000000000000C4E3                 db  0Eh
.eh_frame:000000000000C4E4                 db  18h
.eh_frame:000000000000C4E5                 db  83h
.eh_frame:000000000000C4E6                 db    3
.eh_frame:000000000000C4E7                 db  50h ; P
.eh_frame:000000000000C4E8                 db  0Eh
.eh_frame:000000000000C4E9                 db 0D0h
.eh_frame:000000000000C4EA                 db    1
.eh_frame:000000000000C4EB                 db    2
.eh_frame:000000000000C4EC                 db 0ABh
.eh_frame:000000000000C4ED                 db  0Ah
.eh_frame:000000000000C4EE                 db  0Eh
.eh_frame:000000000000C4EF                 db  18h
.eh_frame:000000000000C4F0                 db  41h ; A
.eh_frame:000000000000C4F1                 db  0Eh
.eh_frame:000000000000C4F2                 db  10h
.eh_frame:000000000000C4F3                 db  41h ; A
.eh_frame:000000000000C4F4                 db  0Eh
.eh_frame:000000000000C4F5                 db    8
.eh_frame:000000000000C4F6                 db  41h ; A
.eh_frame:000000000000C4F7                 db  0Bh
.eh_frame:000000000000C4F8                 db  1Ch
.eh_frame:000000000000C4F9                 db    0
.eh_frame:000000000000C4FA                 db    0
.eh_frame:000000000000C4FB                 db    0
.eh_frame:000000000000C4FC                 db  3Ch ; <
.eh_frame:000000000000C4FD                 db  0Fh
.eh_frame:000000000000C4FE                 db    0
.eh_frame:000000000000C4FF                 db    0
.eh_frame:000000000000C500                 db  70h ; p
.eh_frame:000000000000C501                 db 0C1h
.eh_frame:000000000000C502                 db 0FFh
.eh_frame:000000000000C503                 db 0FFh
.eh_frame:000000000000C504                 db  80h
.eh_frame:000000000000C505                 db    0
.eh_frame:000000000000C506                 db    0
.eh_frame:000000000000C507                 db    0
.eh_frame:000000000000C508                 db    0
.eh_frame:000000000000C509                 db  41h ; A
.eh_frame:000000000000C50A                 db  0Eh
.eh_frame:000000000000C50B                 db  10h
.eh_frame:000000000000C50C                 db  83h
.eh_frame:000000000000C50D                 db    2
.eh_frame:000000000000C50E                 db    2
.eh_frame:000000000000C50F                 db  7Ah ; z
.eh_frame:000000000000C510                 db  0Eh
.eh_frame:000000000000C511                 db    8
.eh_frame:000000000000C512                 db    0
.eh_frame:000000000000C513                 db    0
.eh_frame:000000000000C514                 db    0
.eh_frame:000000000000C515                 db    0
.eh_frame:000000000000C516                 db    0
.eh_frame:000000000000C517                 db    0
.eh_frame:000000000000C518                 db  18h
.eh_frame:000000000000C519                 db    0
.eh_frame:000000000000C51A                 db    0
.eh_frame:000000000000C51B                 db    0
.eh_frame:000000000000C51C                 db  5Ch ; \
.eh_frame:000000000000C51D                 db  0Fh
.eh_frame:000000000000C51E                 db    0
.eh_frame:000000000000C51F                 db    0
.eh_frame:000000000000C520                 db 0D0h
.eh_frame:000000000000C521                 db 0C1h
.eh_frame:000000000000C522                 db 0FFh
.eh_frame:000000000000C523                 db 0FFh
.eh_frame:000000000000C524                 db  1Ah
.eh_frame:000000000000C525                 db    0
.eh_frame:000000000000C526                 db    0
.eh_frame:000000000000C527                 db    0
.eh_frame:000000000000C528                 db    0
.eh_frame:000000000000C529                 db  41h ; A
.eh_frame:000000000000C52A                 db  0Eh
.eh_frame:000000000000C52B                 db  10h
.eh_frame:000000000000C52C                 db  83h
.eh_frame:000000000000C52D                 db    2
.eh_frame:000000000000C52E                 db  53h ; S
.eh_frame:000000000000C52F                 db  0Ah
.eh_frame:000000000000C530                 db  0Eh
.eh_frame:000000000000C531                 db    8
.eh_frame:000000000000C532                 db  41h ; A
.eh_frame:000000000000C533                 db  0Bh
.eh_frame:000000000000C534                 db  10h
.eh_frame:000000000000C535                 db    0
.eh_frame:000000000000C536                 db    0
.eh_frame:000000000000C537                 db    0
.eh_frame:000000000000C538                 db  78h ; x
.eh_frame:000000000000C539                 db  0Fh
.eh_frame:000000000000C53A                 db    0
.eh_frame:000000000000C53B                 db    0
.eh_frame:000000000000C53C                 db 0D4h
.eh_frame:000000000000C53D                 db 0C1h
.eh_frame:000000000000C53E                 db 0FFh
.eh_frame:000000000000C53F                 db 0FFh
.eh_frame:000000000000C540                 db  24h ; $
.eh_frame:000000000000C541                 db    0
.eh_frame:000000000000C542                 db    0
.eh_frame:000000000000C543                 db    0
.eh_frame:000000000000C544                 db    0
.eh_frame:000000000000C545                 db  5Fh ; _
.eh_frame:000000000000C546                 db  0Eh
.eh_frame:000000000000C547                 db  10h
.eh_frame:000000000000C548                 db  10h
.eh_frame:000000000000C549                 db    0
.eh_frame:000000000000C54A                 db    0
.eh_frame:000000000000C54B                 db    0
.eh_frame:000000000000C54C                 db  8Ch
.eh_frame:000000000000C54D                 db  0Fh
.eh_frame:000000000000C54E                 db    0
.eh_frame:000000000000C54F                 db    0
.eh_frame:000000000000C550                 db 0F0h
.eh_frame:000000000000C551                 db 0C1h
.eh_frame:000000000000C552                 db 0FFh
.eh_frame:000000000000C553                 db 0FFh
.eh_frame:000000000000C554                 db    2
.eh_frame:000000000000C555                 db    0
.eh_frame:000000000000C556                 db    0
.eh_frame:000000000000C557                 db    0
.eh_frame:000000000000C558                 db    0
.eh_frame:000000000000C559                 db    0
.eh_frame:000000000000C55A                 db    0
.eh_frame:000000000000C55B                 db    0
.eh_frame:000000000000C55C                 db  20h
.eh_frame:000000000000C55D                 db    0
.eh_frame:000000000000C55E                 db    0
.eh_frame:000000000000C55F                 db    0
.eh_frame:000000000000C560                 db 0A0h
.eh_frame:000000000000C561                 db  0Fh
.eh_frame:000000000000C562                 db    0
.eh_frame:000000000000C563                 db    0
.eh_frame:000000000000C564                 db 0ECh
.eh_frame:000000000000C565                 db 0C1h
.eh_frame:000000000000C566                 db 0FFh
.eh_frame:000000000000C567                 db 0FFh
.eh_frame:000000000000C568                 db  36h ; 6
.eh_frame:000000000000C569                 db    0
.eh_frame:000000000000C56A                 db    0
.eh_frame:000000000000C56B                 db    0
.eh_frame:000000000000C56C                 db    0
.eh_frame:000000000000C56D                 db  44h ; D
.eh_frame:000000000000C56E                 db  0Eh
.eh_frame:000000000000C56F                 db  10h
.eh_frame:000000000000C570                 db  83h
.eh_frame:000000000000C571                 db    2
.eh_frame:000000000000C572                 db  5Dh ; ]
.eh_frame:000000000000C573                 db  0Ah
.eh_frame:000000000000C574                 db  0Eh
.eh_frame:000000000000C575                 db    8
.eh_frame:000000000000C576                 db  47h ; G
.eh_frame:000000000000C577                 db  0Bh
.eh_frame:000000000000C578                 db  48h ; H
.eh_frame:000000000000C579                 db  0Ah
.eh_frame:000000000000C57A                 db  0Eh
.eh_frame:000000000000C57B                 db    8
.eh_frame:000000000000C57C                 db  41h ; A
.eh_frame:000000000000C57D                 db  0Bh
.eh_frame:000000000000C57E                 db    0
.eh_frame:000000000000C57F                 db    0
.eh_frame:000000000000C580                 db  10h
.eh_frame:000000000000C581                 db    0
.eh_frame:000000000000C582                 db    0
.eh_frame:000000000000C583                 db    0
.eh_frame:000000000000C584                 db 0C4h
.eh_frame:000000000000C585                 db  0Fh
.eh_frame:000000000000C586                 db    0
.eh_frame:000000000000C587                 db    0
.eh_frame:000000000000C588                 db    8
.eh_frame:000000000000C589                 db 0C2h
.eh_frame:000000000000C58A                 db 0FFh
.eh_frame:000000000000C58B                 db 0FFh
.eh_frame:000000000000C58C                 db  24h ; $
.eh_frame:000000000000C58D                 db    0
.eh_frame:000000000000C58E                 db    0
.eh_frame:000000000000C58F                 db    0
.eh_frame:000000000000C590                 db    0
.eh_frame:000000000000C591                 db  5Fh ; _
.eh_frame:000000000000C592                 db  0Eh
.eh_frame:000000000000C593                 db  10h
.eh_frame:000000000000C594                 db  14h
.eh_frame:000000000000C595                 db    0
.eh_frame:000000000000C596                 db    0
.eh_frame:000000000000C597                 db    0
.eh_frame:000000000000C598                 db 0D8h
.eh_frame:000000000000C599                 db  0Fh
.eh_frame:000000000000C59A                 db    0
.eh_frame:000000000000C59B                 db    0
.eh_frame:000000000000C59C                 db  24h ; $
.eh_frame:000000000000C59D                 db 0C2h
.eh_frame:000000000000C59E                 db 0FFh
.eh_frame:000000000000C59F                 db 0FFh
.eh_frame:000000000000C5A0                 db  82h
.eh_frame:000000000000C5A1                 db    0
.eh_frame:000000000000C5A2                 db    0
.eh_frame:000000000000C5A3                 db    0
.eh_frame:000000000000C5A4                 db    0
.eh_frame:000000000000C5A5                 db    2
.eh_frame:000000000000C5A6                 db  5Fh ; _
.eh_frame:000000000000C5A7                 db  0Eh
.eh_frame:000000000000C5A8                 db  10h
.eh_frame:000000000000C5A9                 db  49h ; I
.eh_frame:000000000000C5AA                 db  0Eh
.eh_frame:000000000000C5AB                 db    8
.eh_frame:000000000000C5AC                 db  14h
.eh_frame:000000000000C5AD                 db    0
.eh_frame:000000000000C5AE                 db    0
.eh_frame:000000000000C5AF                 db    0
.eh_frame:000000000000C5B0                 db 0F0h
.eh_frame:000000000000C5B1                 db  0Fh
.eh_frame:000000000000C5B2                 db    0
.eh_frame:000000000000C5B3                 db    0
.eh_frame:000000000000C5B4                 db  9Ch
.eh_frame:000000000000C5B5                 db 0C2h
.eh_frame:000000000000C5B6                 db 0FFh
.eh_frame:000000000000C5B7                 db 0FFh
.eh_frame:000000000000C5B8                 db  4Ah ; J
.eh_frame:000000000000C5B9                 db    0
.eh_frame:000000000000C5BA                 db    0
.eh_frame:000000000000C5BB                 db    0
.eh_frame:000000000000C5BC                 db    0
.eh_frame:000000000000C5BD                 db    2
.eh_frame:000000000000C5BE                 db  45h ; E
.eh_frame:000000000000C5BF                 db  0Eh
.eh_frame:000000000000C5C0                 db  10h
.eh_frame:000000000000C5C1                 db    0
.eh_frame:000000000000C5C2                 db    0
.eh_frame:000000000000C5C3                 db    0
.eh_frame:000000000000C5C4                 db  18h
.eh_frame:000000000000C5C5                 db    0
.eh_frame:000000000000C5C6                 db    0
.eh_frame:000000000000C5C7                 db    0
.eh_frame:000000000000C5C8                 db    8
.eh_frame:000000000000C5C9                 db  10h
.eh_frame:000000000000C5CA                 db    0
.eh_frame:000000000000C5CB                 db    0
.eh_frame:000000000000C5CC                 db 0D4h
.eh_frame:000000000000C5CD                 db 0C2h
.eh_frame:000000000000C5CE                 db 0FFh
.eh_frame:000000000000C5CF                 db 0FFh
.eh_frame:000000000000C5D0                 db  17h
.eh_frame:000000000000C5D1                 db    0
.eh_frame:000000000000C5D2                 db    0
.eh_frame:000000000000C5D3                 db    0
.eh_frame:000000000000C5D4                 db    0
.eh_frame:000000000000C5D5                 db  41h ; A
.eh_frame:000000000000C5D6                 db  0Eh
.eh_frame:000000000000C5D7                 db  10h
.eh_frame:000000000000C5D8                 db  83h
.eh_frame:000000000000C5D9                 db    2
.eh_frame:000000000000C5DA                 db  51h ; Q
.eh_frame:000000000000C5DB                 db  0Eh
.eh_frame:000000000000C5DC                 db    8
.eh_frame:000000000000C5DD                 db    0
.eh_frame:000000000000C5DE                 db    0
.eh_frame:000000000000C5DF                 db    0
.eh_frame:000000000000C5E0                 db  18h
.eh_frame:000000000000C5E1                 db    0
.eh_frame:000000000000C5E2                 db    0
.eh_frame:000000000000C5E3                 db    0
.eh_frame:000000000000C5E4                 db  24h ; $
.eh_frame:000000000000C5E5                 db  10h
.eh_frame:000000000000C5E6                 db    0
.eh_frame:000000000000C5E7                 db    0
.eh_frame:000000000000C5E8                 db 0D8h
.eh_frame:000000000000C5E9                 db 0C2h
.eh_frame:000000000000C5EA                 db 0FFh
.eh_frame:000000000000C5EB                 db 0FFh
.eh_frame:000000000000C5EC                 db  2Eh ; .
.eh_frame:000000000000C5ED                 db    0
.eh_frame:000000000000C5EE                 db    0
.eh_frame:000000000000C5EF                 db    0
.eh_frame:000000000000C5F0                 db    0
.eh_frame:000000000000C5F1                 db  47h ; G
.eh_frame:000000000000C5F2                 db  0Eh
.eh_frame:000000000000C5F3                 db  10h
.eh_frame:000000000000C5F4                 db  61h ; a
.eh_frame:000000000000C5F5                 db  0Ah
.eh_frame:000000000000C5F6                 db  0Eh
.eh_frame:000000000000C5F7                 db    8
.eh_frame:000000000000C5F8                 db  41h ; A
.eh_frame:000000000000C5F9                 db  0Bh
.eh_frame:000000000000C5FA                 db    0
.eh_frame:000000000000C5FB                 db    0
.eh_frame:000000000000C5FC                 db  24h ; $
.eh_frame:000000000000C5FD                 db    0
.eh_frame:000000000000C5FE                 db    0
.eh_frame:000000000000C5FF                 db    0
.eh_frame:000000000000C600                 db  40h ; @
.eh_frame:000000000000C601                 db  10h
.eh_frame:000000000000C602                 db    0
.eh_frame:000000000000C603                 db    0
.eh_frame:000000000000C604                 db 0ECh
.eh_frame:000000000000C605                 db 0C2h
.eh_frame:000000000000C606                 db 0FFh
.eh_frame:000000000000C607                 db 0FFh
.eh_frame:000000000000C608                 db  28h ; (
.eh_frame:000000000000C609                 db    0
.eh_frame:000000000000C60A                 db    0
.eh_frame:000000000000C60B                 db    0
.eh_frame:000000000000C60C                 db    0
.eh_frame:000000000000C60D                 db  41h ; A
.eh_frame:000000000000C60E                 db  0Eh
.eh_frame:000000000000C60F                 db  10h
.eh_frame:000000000000C610                 db  86h
.eh_frame:000000000000C611                 db    2
.eh_frame:000000000000C612                 db  41h ; A
.eh_frame:000000000000C613                 db  0Eh
.eh_frame:000000000000C614                 db  18h
.eh_frame:000000000000C615                 db  83h
.eh_frame:000000000000C616                 db    3
.eh_frame:000000000000C617                 db  4Dh ; M
.eh_frame:000000000000C618                 db  0Eh
.eh_frame:000000000000C619                 db  20h
.eh_frame:000000000000C61A                 db  49h ; I
.eh_frame:000000000000C61B                 db  0Eh
.eh_frame:000000000000C61C                 db  18h
.eh_frame:000000000000C61D                 db  47h ; G
.eh_frame:000000000000C61E                 db  0Eh
.eh_frame:000000000000C61F                 db  10h
.eh_frame:000000000000C620                 db  41h ; A
.eh_frame:000000000000C621                 db  0Eh
.eh_frame:000000000000C622                 db    8
.eh_frame:000000000000C623                 db    0
.eh_frame:000000000000C624                 db  18h
.eh_frame:000000000000C625                 db    0
.eh_frame:000000000000C626                 db    0
.eh_frame:000000000000C627                 db    0
.eh_frame:000000000000C628                 db  68h ; h
.eh_frame:000000000000C629                 db  10h
.eh_frame:000000000000C62A                 db    0
.eh_frame:000000000000C62B                 db    0
.eh_frame:000000000000C62C                 db 0F4h
.eh_frame:000000000000C62D                 db 0C2h
.eh_frame:000000000000C62E                 db 0FFh
.eh_frame:000000000000C62F                 db 0FFh
.eh_frame:000000000000C630                 db  13h
.eh_frame:000000000000C631                 db    0
.eh_frame:000000000000C632                 db    0
.eh_frame:000000000000C633                 db    0
.eh_frame:000000000000C634                 db    0
.eh_frame:000000000000C635                 db  41h ; A
.eh_frame:000000000000C636                 db  0Eh
.eh_frame:000000000000C637                 db  10h
.eh_frame:000000000000C638                 db  83h
.eh_frame:000000000000C639                 db    2
.eh_frame:000000000000C63A                 db  50h ; P
.eh_frame:000000000000C63B                 db  0Eh
.eh_frame:000000000000C63C                 db    8
.eh_frame:000000000000C63D                 db    0
.eh_frame:000000000000C63E                 db    0
.eh_frame:000000000000C63F                 db    0
.eh_frame:000000000000C640                 db  14h
.eh_frame:000000000000C641                 db    0
.eh_frame:000000000000C642                 db    0
.eh_frame:000000000000C643                 db    0
.eh_frame:000000000000C644                 db  84h
.eh_frame:000000000000C645                 db  10h
.eh_frame:000000000000C646                 db    0
.eh_frame:000000000000C647                 db    0
.eh_frame:000000000000C648                 db 0F8h
.eh_frame:000000000000C649                 db 0C2h
.eh_frame:000000000000C64A                 db 0FFh
.eh_frame:000000000000C64B                 db 0FFh
.eh_frame:000000000000C64C                 db  35h ; 5
.eh_frame:000000000000C64D                 db    0
.eh_frame:000000000000C64E                 db    0
.eh_frame:000000000000C64F                 db    0
.eh_frame:000000000000C650                 db    0
.eh_frame:000000000000C651                 db  4Bh ; K
.eh_frame:000000000000C652                 db  0Eh
.eh_frame:000000000000C653                 db  10h
.eh_frame:000000000000C654                 db    0
.eh_frame:000000000000C655                 db    0
.eh_frame:000000000000C656                 db    0
.eh_frame:000000000000C657                 db    0
.eh_frame:000000000000C658                 db  48h ; H
.eh_frame:000000000000C659                 db    0
.eh_frame:000000000000C65A                 db    0
.eh_frame:000000000000C65B                 db    0
.eh_frame:000000000000C65C                 db  9Ch
.eh_frame:000000000000C65D                 db  10h
.eh_frame:000000000000C65E                 db    0
.eh_frame:000000000000C65F                 db    0
.eh_frame:000000000000C660                 db  20h
.eh_frame:000000000000C661                 db 0C3h
.eh_frame:000000000000C662                 db 0FFh
.eh_frame:000000000000C663                 db 0FFh
.eh_frame:000000000000C664                 db    0
.eh_frame:000000000000C665                 db    1
.eh_frame:000000000000C666                 db    0
.eh_frame:000000000000C667                 db    0
.eh_frame:000000000000C668                 db    0
.eh_frame:000000000000C669                 db  42h ; B
.eh_frame:000000000000C66A                 db  0Eh
.eh_frame:000000000000C66B                 db  10h
.eh_frame:000000000000C66C                 db  8Fh
.eh_frame:000000000000C66D                 db    2
.eh_frame:000000000000C66E                 db  42h ; B
.eh_frame:000000000000C66F                 db  0Eh
.eh_frame:000000000000C670                 db  18h
.eh_frame:000000000000C671                 db  8Eh
.eh_frame:000000000000C672                 db    3
.eh_frame:000000000000C673                 db  45h ; E
.eh_frame:000000000000C674                 db  0Eh
.eh_frame:000000000000C675                 db  20h
.eh_frame:000000000000C676                 db  8Dh
.eh_frame:000000000000C677                 db    4
.eh_frame:000000000000C678                 db  42h ; B
.eh_frame:000000000000C679                 db  0Eh
.eh_frame:000000000000C67A                 db  28h ; (
.eh_frame:000000000000C67B                 db  8Ch
.eh_frame:000000000000C67C                 db    5
.eh_frame:000000000000C67D                 db  44h ; D
.eh_frame:000000000000C67E                 db  0Eh
.eh_frame:000000000000C67F                 db  30h ; 0
.eh_frame:000000000000C680                 db  86h
.eh_frame:000000000000C681                 db    6
.eh_frame:000000000000C682                 db  41h ; A
.eh_frame:000000000000C683                 db  0Eh
.eh_frame:000000000000C684                 db  38h ; 8
.eh_frame:000000000000C685                 db  83h
.eh_frame:000000000000C686                 db    7
.eh_frame:000000000000C687                 db  4Eh ; N
.eh_frame:000000000000C688                 db  0Eh
.eh_frame:000000000000C689                 db  50h ; P
.eh_frame:000000000000C68A                 db    2
.eh_frame:000000000000C68B                 db  9Dh
.eh_frame:000000000000C68C                 db  0Ah
.eh_frame:000000000000C68D                 db  0Eh
.eh_frame:000000000000C68E                 db  38h ; 8
.eh_frame:000000000000C68F                 db  41h ; A
.eh_frame:000000000000C690                 db  0Eh
.eh_frame:000000000000C691                 db  30h ; 0
.eh_frame:000000000000C692                 db  41h ; A
.eh_frame:000000000000C693                 db  0Eh
.eh_frame:000000000000C694                 db  28h ; (
.eh_frame:000000000000C695                 db  42h ; B
.eh_frame:000000000000C696                 db  0Eh
.eh_frame:000000000000C697                 db  20h
.eh_frame:000000000000C698                 db  42h ; B
.eh_frame:000000000000C699                 db  0Eh
.eh_frame:000000000000C69A                 db  18h
.eh_frame:000000000000C69B                 db  42h ; B
.eh_frame:000000000000C69C                 db  0Eh
.eh_frame:000000000000C69D                 db  10h
.eh_frame:000000000000C69E                 db  42h ; B
.eh_frame:000000000000C69F                 db  0Eh
.eh_frame:000000000000C6A0                 db    8
.eh_frame:000000000000C6A1                 db  4Bh ; K
.eh_frame:000000000000C6A2                 db  0Bh
.eh_frame:000000000000C6A3                 db    0
.eh_frame:000000000000C6A4                 db  18h
.eh_frame:000000000000C6A5                 db    0
.eh_frame:000000000000C6A6                 db    0
.eh_frame:000000000000C6A7                 db    0
.eh_frame:000000000000C6A8                 db 0E8h
.eh_frame:000000000000C6A9                 db  10h
.eh_frame:000000000000C6AA                 db    0
.eh_frame:000000000000C6AB                 db    0
.eh_frame:000000000000C6AC                 db 0D4h
.eh_frame:000000000000C6AD                 db 0C3h
.eh_frame:000000000000C6AE                 db 0FFh
.eh_frame:000000000000C6AF                 db 0FFh
.eh_frame:000000000000C6B0                 db  21h ; !
.eh_frame:000000000000C6B1                 db    0
.eh_frame:000000000000C6B2                 db    0
.eh_frame:000000000000C6B3                 db    0
.eh_frame:000000000000C6B4                 db    0
.eh_frame:000000000000C6B5                 db  44h ; D
.eh_frame:000000000000C6B6                 db  0Eh
.eh_frame:000000000000C6B7                 db  18h
.eh_frame:000000000000C6B8                 db  42h ; B
.eh_frame:000000000000C6B9                 db  0Eh
.eh_frame:000000000000C6BA                 db  20h
.eh_frame:000000000000C6BB                 db  5Ah ; Z
.eh_frame:000000000000C6BC                 db  0Eh
.eh_frame:000000000000C6BD                 db    8
.eh_frame:000000000000C6BE                 db    0
.eh_frame:000000000000C6BF                 db    0
.eh_frame:000000000000C6C0                 db  4Ch ; L
.eh_frame:000000000000C6C1                 db    0
.eh_frame:000000000000C6C2                 db    0
.eh_frame:000000000000C6C3                 db    0
.eh_frame:000000000000C6C4                 db    4
.eh_frame:000000000000C6C5                 db  11h
.eh_frame:000000000000C6C6                 db    0
.eh_frame:000000000000C6C7                 db    0
.eh_frame:000000000000C6C8                 db 0E8h
.eh_frame:000000000000C6C9                 db 0C3h
.eh_frame:000000000000C6CA                 db 0FFh
.eh_frame:000000000000C6CB                 db 0FFh
.eh_frame:000000000000C6CC                 db  1Ch
.eh_frame:000000000000C6CD                 db    4
.eh_frame:000000000000C6CE                 db    0
.eh_frame:000000000000C6CF                 db    0
.eh_frame:000000000000C6D0                 db    0
.eh_frame:000000000000C6D1                 db  42h ; B
.eh_frame:000000000000C6D2                 db  0Eh
.eh_frame:000000000000C6D3                 db  10h
.eh_frame:000000000000C6D4                 db  8Fh
.eh_frame:000000000000C6D5                 db    2
.eh_frame:000000000000C6D6                 db  42h ; B
.eh_frame:000000000000C6D7                 db  0Eh
.eh_frame:000000000000C6D8                 db  18h
.eh_frame:000000000000C6D9                 db  8Eh
.eh_frame:000000000000C6DA                 db    3
.eh_frame:000000000000C6DB                 db  42h ; B
.eh_frame:000000000000C6DC                 db  0Eh
.eh_frame:000000000000C6DD                 db  20h
.eh_frame:000000000000C6DE                 db  8Dh
.eh_frame:000000000000C6DF                 db    4
.eh_frame:000000000000C6E0                 db  42h ; B
.eh_frame:000000000000C6E1                 db  0Eh
.eh_frame:000000000000C6E2                 db  28h ; (
.eh_frame:000000000000C6E3                 db  8Ch
.eh_frame:000000000000C6E4                 db    5
.eh_frame:000000000000C6E5                 db  41h ; A
.eh_frame:000000000000C6E6                 db  0Eh
.eh_frame:000000000000C6E7                 db  30h ; 0
.eh_frame:000000000000C6E8                 db  86h
.eh_frame:000000000000C6E9                 db    6
.eh_frame:000000000000C6EA                 db  41h ; A
.eh_frame:000000000000C6EB                 db  0Eh
.eh_frame:000000000000C6EC                 db  38h ; 8
.eh_frame:000000000000C6ED                 db  83h
.eh_frame:000000000000C6EE                 db    7
.eh_frame:000000000000C6EF                 db  44h ; D
.eh_frame:000000000000C6F0                 db  0Eh
.eh_frame:000000000000C6F1                 db  60h ; `
.eh_frame:000000000000C6F2                 db    2
.eh_frame:000000000000C6F3                 db 0E9h
.eh_frame:000000000000C6F4                 db  0Ah
.eh_frame:000000000000C6F5                 db  0Eh
.eh_frame:000000000000C6F6                 db  38h ; 8
.eh_frame:000000000000C6F7                 db  41h ; A
.eh_frame:000000000000C6F8                 db  0Eh
.eh_frame:000000000000C6F9                 db  30h ; 0
.eh_frame:000000000000C6FA                 db  41h ; A
.eh_frame:000000000000C6FB                 db  0Eh
.eh_frame:000000000000C6FC                 db  28h ; (
.eh_frame:000000000000C6FD                 db  42h ; B
.eh_frame:000000000000C6FE                 db  0Eh
.eh_frame:000000000000C6FF                 db  20h
.eh_frame:000000000000C700                 db  42h ; B
.eh_frame:000000000000C701                 db  0Eh
.eh_frame:000000000000C702                 db  18h
.eh_frame:000000000000C703                 db  42h ; B
.eh_frame:000000000000C704                 db  0Eh
.eh_frame:000000000000C705                 db  10h
.eh_frame:000000000000C706                 db  42h ; B
.eh_frame:000000000000C707                 db  0Eh
.eh_frame:000000000000C708                 db    8
.eh_frame:000000000000C709                 db  47h ; G
.eh_frame:000000000000C70A                 db  0Bh
.eh_frame:000000000000C70B                 db    0
.eh_frame:000000000000C70C                 db    0
.eh_frame:000000000000C70D                 db    0
.eh_frame:000000000000C70E                 db    0
.eh_frame:000000000000C70F                 db    0
.eh_frame:000000000000C710                 db  34h ; 4
.eh_frame:000000000000C711                 db    0
.eh_frame:000000000000C712                 db    0
.eh_frame:000000000000C713                 db    0
.eh_frame:000000000000C714                 db  54h ; T
.eh_frame:000000000000C715                 db  11h
.eh_frame:000000000000C716                 db    0
.eh_frame:000000000000C717                 db    0
.eh_frame:000000000000C718                 db 0B8h
.eh_frame:000000000000C719                 db 0C7h
.eh_frame:000000000000C71A                 db 0FFh
.eh_frame:000000000000C71B                 db 0FFh
.eh_frame:000000000000C71C                 db  7Bh ; {
.eh_frame:000000000000C71D                 db    0
.eh_frame:000000000000C71E                 db    0
.eh_frame:000000000000C71F                 db    0
.eh_frame:000000000000C720                 db    0
.eh_frame:000000000000C721                 db  42h ; B
.eh_frame:000000000000C722                 db  0Eh
.eh_frame:000000000000C723                 db  10h
.eh_frame:000000000000C724                 db  8Ch
.eh_frame:000000000000C725                 db    2
.eh_frame:000000000000C726                 db  41h ; A
.eh_frame:000000000000C727                 db  0Eh
.eh_frame:000000000000C728                 db  18h
.eh_frame:000000000000C729                 db  86h
.eh_frame:000000000000C72A                 db    3
.eh_frame:000000000000C72B                 db  41h ; A
.eh_frame:000000000000C72C                 db  0Eh
.eh_frame:000000000000C72D                 db  20h
.eh_frame:000000000000C72E                 db  83h
.eh_frame:000000000000C72F                 db    4
.eh_frame:000000000000C730                 db  7Dh ; }
.eh_frame:000000000000C731                 db  0Ah
.eh_frame:000000000000C732                 db  0Eh
.eh_frame:000000000000C733                 db  18h
.eh_frame:000000000000C734                 db  41h ; A
.eh_frame:000000000000C735                 db  0Eh
.eh_frame:000000000000C736                 db  10h
.eh_frame:000000000000C737                 db  42h ; B
.eh_frame:000000000000C738                 db  0Eh
.eh_frame:000000000000C739                 db    8
.eh_frame:000000000000C73A                 db  44h ; D
.eh_frame:000000000000C73B                 db  0Bh
.eh_frame:000000000000C73C                 db  60h ; `
.eh_frame:000000000000C73D                 db  0Ah
.eh_frame:000000000000C73E                 db  0Eh
.eh_frame:000000000000C73F                 db  18h
.eh_frame:000000000000C740                 db  41h ; A
.eh_frame:000000000000C741                 db  0Eh
.eh_frame:000000000000C742                 db  10h
.eh_frame:000000000000C743                 db  42h ; B
.eh_frame:000000000000C744                 db  0Eh
.eh_frame:000000000000C745                 db    8
.eh_frame:000000000000C746                 db  45h ; E
.eh_frame:000000000000C747                 db  0Bh
.eh_frame:000000000000C748                 db  34h ; 4
.eh_frame:000000000000C749                 db    0
.eh_frame:000000000000C74A                 db    0
.eh_frame:000000000000C74B                 db    0
.eh_frame:000000000000C74C                 db  8Ch
.eh_frame:000000000000C74D                 db  11h
.eh_frame:000000000000C74E                 db    0
.eh_frame:000000000000C74F                 db    0
.eh_frame:000000000000C750                 db    0
.eh_frame:000000000000C751                 db 0C8h
.eh_frame:000000000000C752                 db 0FFh
.eh_frame:000000000000C753                 db 0FFh
.eh_frame:000000000000C754                 db  7Eh ; ~
.eh_frame:000000000000C755                 db    2
.eh_frame:000000000000C756                 db    0
.eh_frame:000000000000C757                 db    0
.eh_frame:000000000000C758                 db    0
.eh_frame:000000000000C759                 db  42h ; B
.eh_frame:000000000000C75A                 db  0Eh
.eh_frame:000000000000C75B                 db  10h
.eh_frame:000000000000C75C                 db  8Ch
.eh_frame:000000000000C75D                 db    2
.eh_frame:000000000000C75E                 db  41h ; A
.eh_frame:000000000000C75F                 db  0Eh
.eh_frame:000000000000C760                 db  18h
.eh_frame:000000000000C761                 db  86h
.eh_frame:000000000000C762                 db    3
.eh_frame:000000000000C763                 db  43h ; C
.eh_frame:000000000000C764                 db  0Eh
.eh_frame:000000000000C765                 db  20h
.eh_frame:000000000000C766                 db  83h
.eh_frame:000000000000C767                 db    4
.eh_frame:000000000000C768                 db  44h ; D
.eh_frame:000000000000C769                 db  0Eh
.eh_frame:000000000000C76A                 db  70h ; p
.eh_frame:000000000000C76B                 db    2
.eh_frame:000000000000C76C                 db 0F0h
.eh_frame:000000000000C76D                 db  0Ah
.eh_frame:000000000000C76E                 db  0Eh
.eh_frame:000000000000C76F                 db  20h
.eh_frame:000000000000C770                 db  41h ; A
.eh_frame:000000000000C771                 db  0Eh
.eh_frame:000000000000C772                 db  18h
.eh_frame:000000000000C773                 db  41h ; A
.eh_frame:000000000000C774                 db  0Eh
.eh_frame:000000000000C775                 db  10h
.eh_frame:000000000000C776                 db  42h ; B
.eh_frame:000000000000C777                 db  0Eh
.eh_frame:000000000000C778                 db    8
.eh_frame:000000000000C779                 db  42h ; B
.eh_frame:000000000000C77A                 db  0Bh
.eh_frame:000000000000C77B                 db    0
.eh_frame:000000000000C77C                 db    0
.eh_frame:000000000000C77D                 db    0
.eh_frame:000000000000C77E                 db    0
.eh_frame:000000000000C77F                 db    0
.eh_frame:000000000000C780                 db  1Ch
.eh_frame:000000000000C781                 db    0
.eh_frame:000000000000C782                 db    0
.eh_frame:000000000000C783                 db    0
.eh_frame:000000000000C784                 db 0C4h
.eh_frame:000000000000C785                 db  11h
.eh_frame:000000000000C786                 db    0
.eh_frame:000000000000C787                 db    0
.eh_frame:000000000000C788                 db  48h ; H
.eh_frame:000000000000C789                 db 0CAh
.eh_frame:000000000000C78A                 db 0FFh
.eh_frame:000000000000C78B                 db 0FFh
.eh_frame:000000000000C78C                 db  40h ; @
.eh_frame:000000000000C78D                 db    0
.eh_frame:000000000000C78E                 db    0
.eh_frame:000000000000C78F                 db    0
.eh_frame:000000000000C790                 db    0
.eh_frame:000000000000C791                 db  44h ; D
.eh_frame:000000000000C792                 db  0Eh
.eh_frame:000000000000C793                 db  10h
.eh_frame:000000000000C794                 db  83h
.eh_frame:000000000000C795                 db    2
.eh_frame:000000000000C796                 db  5Ah ; Z
.eh_frame:000000000000C797                 db  0Ah
.eh_frame:000000000000C798                 db  0Eh
.eh_frame:000000000000C799                 db    8
.eh_frame:000000000000C79A                 db  4Ah ; J
.eh_frame:000000000000C79B                 db  0Bh
.eh_frame:000000000000C79C                 db  53h ; S
.eh_frame:000000000000C79D                 db  0Eh
.eh_frame:000000000000C79E                 db    8
.eh_frame:000000000000C79F                 db    0
.eh_frame:000000000000C7A0                 db  2Ch ; ,
.eh_frame:000000000000C7A1                 db    0
.eh_frame:000000000000C7A2                 db    0
.eh_frame:000000000000C7A3                 db    0
.eh_frame:000000000000C7A4                 db 0E4h
.eh_frame:000000000000C7A5                 db  11h
.eh_frame:000000000000C7A6                 db    0
.eh_frame:000000000000C7A7                 db    0
.eh_frame:000000000000C7A8                 db  68h ; h
.eh_frame:000000000000C7A9                 db 0CAh
.eh_frame:000000000000C7AA                 db 0FFh
.eh_frame:000000000000C7AB                 db 0FFh
.eh_frame:000000000000C7AC                 db  57h ; W
.eh_frame:000000000000C7AD                 db    0
.eh_frame:000000000000C7AE                 db    0
.eh_frame:000000000000C7AF                 db    0
.eh_frame:000000000000C7B0                 db    0
.eh_frame:000000000000C7B1                 db  63h ; c
.eh_frame:000000000000C7B2                 db  0Eh
.eh_frame:000000000000C7B3                 db  10h
.eh_frame:000000000000C7B4                 db  8Ch
.eh_frame:000000000000C7B5                 db    2
.eh_frame:000000000000C7B6                 db  41h ; A
.eh_frame:000000000000C7B7                 db  0Eh
.eh_frame:000000000000C7B8                 db  18h
.eh_frame:000000000000C7B9                 db  86h
.eh_frame:000000000000C7BA                 db    3
.eh_frame:000000000000C7BB                 db  44h ; D
.eh_frame:000000000000C7BC                 db  0Eh
.eh_frame:000000000000C7BD                 db  20h
.eh_frame:000000000000C7BE                 db  83h
.eh_frame:000000000000C7BF                 db    4
.eh_frame:000000000000C7C0                 db  6Bh ; k
.eh_frame:000000000000C7C1                 db  0Eh
.eh_frame:000000000000C7C2                 db  18h
.eh_frame:000000000000C7C3                 db  41h ; A
.eh_frame:000000000000C7C4                 db  0Eh
.eh_frame:000000000000C7C5                 db  10h
.eh_frame:000000000000C7C6                 db  42h ; B
.eh_frame:000000000000C7C7                 db  0Eh
.eh_frame:000000000000C7C8                 db    8
.eh_frame:000000000000C7C9                 db    0
.eh_frame:000000000000C7CA                 db    0
.eh_frame:000000000000C7CB                 db    0
.eh_frame:000000000000C7CC                 db    0
.eh_frame:000000000000C7CD                 db    0
.eh_frame:000000000000C7CE                 db    0
.eh_frame:000000000000C7CF                 db    0
.eh_frame:000000000000C7D0                 db  3Ch ; <
.eh_frame:000000000000C7D1                 db    0
.eh_frame:000000000000C7D2                 db    0
.eh_frame:000000000000C7D3                 db    0
.eh_frame:000000000000C7D4                 db  14h
.eh_frame:000000000000C7D5                 db  12h
.eh_frame:000000000000C7D6                 db    0
.eh_frame:000000000000C7D7                 db    0
.eh_frame:000000000000C7D8                 db  98h
.eh_frame:000000000000C7D9                 db 0CAh
.eh_frame:000000000000C7DA                 db 0FFh
.eh_frame:000000000000C7DB                 db 0FFh
.eh_frame:000000000000C7DC                 db  83h
.eh_frame:000000000000C7DD                 db    0
.eh_frame:000000000000C7DE                 db    0
.eh_frame:000000000000C7DF                 db    0
.eh_frame:000000000000C7E0                 db    0
.eh_frame:000000000000C7E1                 db  42h ; B
.eh_frame:000000000000C7E2                 db  0Eh
.eh_frame:000000000000C7E3                 db  10h
.eh_frame:000000000000C7E4                 db  8Dh
.eh_frame:000000000000C7E5                 db    2
.eh_frame:000000000000C7E6                 db  42h ; B
.eh_frame:000000000000C7E7                 db  0Eh
.eh_frame:000000000000C7E8                 db  18h
.eh_frame:000000000000C7E9                 db  8Ch
.eh_frame:000000000000C7EA                 db    3
.eh_frame:000000000000C7EB                 db  44h ; D
.eh_frame:000000000000C7EC                 db  0Eh
.eh_frame:000000000000C7ED                 db  20h
.eh_frame:000000000000C7EE                 db  86h
.eh_frame:000000000000C7EF                 db    4
.eh_frame:000000000000C7F0                 db  41h ; A
.eh_frame:000000000000C7F1                 db  0Eh
.eh_frame:000000000000C7F2                 db  28h ; (
.eh_frame:000000000000C7F3                 db  83h
.eh_frame:000000000000C7F4                 db    5
.eh_frame:000000000000C7F5                 db  4Ah ; J
.eh_frame:000000000000C7F6                 db  0Eh
.eh_frame:000000000000C7F7                 db  40h ; @
.eh_frame:000000000000C7F8                 db    2
.eh_frame:000000000000C7F9                 db  64h ; d
.eh_frame:000000000000C7FA                 db  0Ah
.eh_frame:000000000000C7FB                 db  0Eh
.eh_frame:000000000000C7FC                 db  28h ; (
.eh_frame:000000000000C7FD                 db  41h ; A
.eh_frame:000000000000C7FE                 db  0Eh
.eh_frame:000000000000C7FF                 db  20h
.eh_frame:000000000000C800                 db  41h ; A
.eh_frame:000000000000C801                 db  0Eh
.eh_frame:000000000000C802                 db  18h
.eh_frame:000000000000C803                 db  42h ; B
.eh_frame:000000000000C804                 db  0Eh
.eh_frame:000000000000C805                 db  10h
.eh_frame:000000000000C806                 db  42h ; B
.eh_frame:000000000000C807                 db  0Eh
.eh_frame:000000000000C808                 db    8
.eh_frame:000000000000C809                 db  41h ; A
.eh_frame:000000000000C80A                 db  0Bh
.eh_frame:000000000000C80B                 db    0
.eh_frame:000000000000C80C                 db    0
.eh_frame:000000000000C80D                 db    0
.eh_frame:000000000000C80E                 db    0
.eh_frame:000000000000C80F                 db    0
.eh_frame:000000000000C810                 db  4Ch ; L
.eh_frame:000000000000C811                 db    0
.eh_frame:000000000000C812                 db    0
.eh_frame:000000000000C813                 db    0
.eh_frame:000000000000C814                 db  54h ; T
.eh_frame:000000000000C815                 db  12h
.eh_frame:000000000000C816                 db    0
.eh_frame:000000000000C817                 db    0
.eh_frame:000000000000C818                 db 0E8h
.eh_frame:000000000000C819                 db 0CAh
.eh_frame:000000000000C81A                 db 0FFh
.eh_frame:000000000000C81B                 db 0FFh
.eh_frame:000000000000C81C                 db  7Dh ; }
.eh_frame:000000000000C81D                 db    0
.eh_frame:000000000000C81E                 db    0
.eh_frame:000000000000C81F                 db    0
.eh_frame:000000000000C820                 db    0
.eh_frame:000000000000C821                 db  42h ; B
.eh_frame:000000000000C822                 db  0Eh
.eh_frame:000000000000C823                 db  10h
.eh_frame:000000000000C824                 db  8Ch
.eh_frame:000000000000C825                 db    2
.eh_frame:000000000000C826                 db  41h ; A
.eh_frame:000000000000C827                 db  0Eh
.eh_frame:000000000000C828                 db  18h
.eh_frame:000000000000C829                 db  86h
.eh_frame:000000000000C82A                 db    3
.eh_frame:000000000000C82B                 db  44h ; D
.eh_frame:000000000000C82C                 db  0Eh
.eh_frame:000000000000C82D                 db  20h
.eh_frame:000000000000C82E                 db  83h
.eh_frame:000000000000C82F                 db    4
.eh_frame:000000000000C830                 db  69h ; i
.eh_frame:000000000000C831                 db  0Ah
.eh_frame:000000000000C832                 db  0Eh
.eh_frame:000000000000C833                 db  18h
.eh_frame:000000000000C834                 db  41h ; A
.eh_frame:000000000000C835                 db  0Eh
.eh_frame:000000000000C836                 db  10h
.eh_frame:000000000000C837                 db  42h ; B
.eh_frame:000000000000C838                 db  0Eh
.eh_frame:000000000000C839                 db    8
.eh_frame:000000000000C83A                 db  45h ; E
.eh_frame:000000000000C83B                 db  0Bh
.eh_frame:000000000000C83C                 db  55h ; U
.eh_frame:000000000000C83D                 db  0Ah
.eh_frame:000000000000C83E                 db  0Eh
.eh_frame:000000000000C83F                 db  18h
.eh_frame:000000000000C840                 db  41h ; A
.eh_frame:000000000000C841                 db  0Eh
.eh_frame:000000000000C842                 db  10h
.eh_frame:000000000000C843                 db  42h ; B
.eh_frame:000000000000C844                 db  0Eh
.eh_frame:000000000000C845                 db    8
.eh_frame:000000000000C846                 db  48h ; H
.eh_frame:000000000000C847                 db  0Bh
.eh_frame:000000000000C848                 db  41h ; A
.eh_frame:000000000000C849                 db  0Ah
.eh_frame:000000000000C84A                 db  0Eh
.eh_frame:000000000000C84B                 db  18h
.eh_frame:000000000000C84C                 db  46h ; F
.eh_frame:000000000000C84D                 db  0Eh
.eh_frame:000000000000C84E                 db  10h
.eh_frame:000000000000C84F                 db  42h ; B
.eh_frame:000000000000C850                 db  0Eh
.eh_frame:000000000000C851                 db    8
.eh_frame:000000000000C852                 db  47h ; G
.eh_frame:000000000000C853                 db  0Bh
.eh_frame:000000000000C854                 db  49h ; I
.eh_frame:000000000000C855                 db  0Eh
.eh_frame:000000000000C856                 db  18h
.eh_frame:000000000000C857                 db  41h ; A
.eh_frame:000000000000C858                 db  0Eh
.eh_frame:000000000000C859                 db  10h
.eh_frame:000000000000C85A                 db  42h ; B
.eh_frame:000000000000C85B                 db  0Eh
.eh_frame:000000000000C85C                 db    8
.eh_frame:000000000000C85D                 db    0
.eh_frame:000000000000C85E                 db    0
.eh_frame:000000000000C85F                 db    0
.eh_frame:000000000000C860                 db  2Ch ; ,
.eh_frame:000000000000C861                 db    0
.eh_frame:000000000000C862                 db    0
.eh_frame:000000000000C863                 db    0
.eh_frame:000000000000C864                 db 0A4h
.eh_frame:000000000000C865                 db  12h
.eh_frame:000000000000C866                 db    0
.eh_frame:000000000000C867                 db    0
.eh_frame:000000000000C868                 db  18h
.eh_frame:000000000000C869                 db 0CBh
.eh_frame:000000000000C86A                 db 0FFh
.eh_frame:000000000000C86B                 db 0FFh
.eh_frame:000000000000C86C                 db  93h
.eh_frame:000000000000C86D                 db    0
.eh_frame:000000000000C86E                 db    0
.eh_frame:000000000000C86F                 db    0
.eh_frame:000000000000C870                 db    0
.eh_frame:000000000000C871                 db  42h ; B
.eh_frame:000000000000C872                 db  0Eh
.eh_frame:000000000000C873                 db  10h
.eh_frame:000000000000C874                 db  8Ch
.eh_frame:000000000000C875                 db    2
.eh_frame:000000000000C876                 db  41h ; A
.eh_frame:000000000000C877                 db  0Eh
.eh_frame:000000000000C878                 db  18h
.eh_frame:000000000000C879                 db  86h
.eh_frame:000000000000C87A                 db    3
.eh_frame:000000000000C87B                 db  44h ; D
.eh_frame:000000000000C87C                 db  0Eh
.eh_frame:000000000000C87D                 db  20h
.eh_frame:000000000000C87E                 db  83h
.eh_frame:000000000000C87F                 db    4
.eh_frame:000000000000C880                 db  5Eh ; ^
.eh_frame:000000000000C881                 db  0Ah
.eh_frame:000000000000C882                 db  0Eh
.eh_frame:000000000000C883                 db  18h
.eh_frame:000000000000C884                 db  41h ; A
.eh_frame:000000000000C885                 db  0Eh
.eh_frame:000000000000C886                 db  10h
.eh_frame:000000000000C887                 db  42h ; B
.eh_frame:000000000000C888                 db  0Eh
.eh_frame:000000000000C889                 db    8
.eh_frame:000000000000C88A                 db  48h ; H
.eh_frame:000000000000C88B                 db  0Bh
.eh_frame:000000000000C88C                 db    0
.eh_frame:000000000000C88D                 db    0
.eh_frame:000000000000C88E                 db    0
.eh_frame:000000000000C88F                 db    0
.eh_frame:000000000000C890                 db  1Ch
.eh_frame:000000000000C891                 db    0
.eh_frame:000000000000C892                 db    0
.eh_frame:000000000000C893                 db    0
.eh_frame:000000000000C894                 db 0D4h
.eh_frame:000000000000C895                 db  12h
.eh_frame:000000000000C896                 db    0
.eh_frame:000000000000C897                 db    0
.eh_frame:000000000000C898                 db  88h
.eh_frame:000000000000C899                 db 0CBh
.eh_frame:000000000000C89A                 db 0FFh
.eh_frame:000000000000C89B                 db 0FFh
.eh_frame:000000000000C89C                 db  60h ; `
.eh_frame:000000000000C89D                 db    0
.eh_frame:000000000000C89E                 db    0
.eh_frame:000000000000C89F                 db    0
.eh_frame:000000000000C8A0                 db    0
.eh_frame:000000000000C8A1                 db  44h ; D
.eh_frame:000000000000C8A2                 db  0Eh
.eh_frame:000000000000C8A3                 db  10h
.eh_frame:000000000000C8A4                 db  75h ; u
.eh_frame:000000000000C8A5                 db  0Ah
.eh_frame:000000000000C8A6                 db  0Eh
.eh_frame:000000000000C8A7                 db    8
.eh_frame:000000000000C8A8                 db  47h ; G
.eh_frame:000000000000C8A9                 db  0Bh
.eh_frame:000000000000C8AA                 db  5Fh ; _
.eh_frame:000000000000C8AB                 db  0Eh
.eh_frame:000000000000C8AC                 db    8
.eh_frame:000000000000C8AD                 db    0
.eh_frame:000000000000C8AE                 db    0
.eh_frame:000000000000C8AF                 db    0
.eh_frame:000000000000C8B0                 db  1Ch
.eh_frame:000000000000C8B1                 db    0
.eh_frame:000000000000C8B2                 db    0
.eh_frame:000000000000C8B3                 db    0
.eh_frame:000000000000C8B4                 db 0F4h
.eh_frame:000000000000C8B5                 db  12h
.eh_frame:000000000000C8B6                 db    0
.eh_frame:000000000000C8B7                 db    0
.eh_frame:000000000000C8B8                 db 0C8h
.eh_frame:000000000000C8B9                 db 0CBh
.eh_frame:000000000000C8BA                 db 0FFh
.eh_frame:000000000000C8BB                 db 0FFh
.eh_frame:000000000000C8BC                 db  3Ch ; <
.eh_frame:000000000000C8BD                 db    0
.eh_frame:000000000000C8BE                 db    0
.eh_frame:000000000000C8BF                 db    0
.eh_frame:000000000000C8C0                 db    0
.eh_frame:000000000000C8C1                 db  44h ; D
.eh_frame:000000000000C8C2                 db  0Eh
.eh_frame:000000000000C8C3                 db  10h
.eh_frame:000000000000C8C4                 db  61h ; a
.eh_frame:000000000000C8C5                 db  0Ah
.eh_frame:000000000000C8C6                 db  0Eh
.eh_frame:000000000000C8C7                 db    8
.eh_frame:000000000000C8C8                 db  4Bh ; K
.eh_frame:000000000000C8C9                 db  0Bh
.eh_frame:000000000000C8CA                 db  4Bh ; K
.eh_frame:000000000000C8CB                 db  0Eh
.eh_frame:000000000000C8CC                 db    8
.eh_frame:000000000000C8CD                 db    0
.eh_frame:000000000000C8CE                 db    0
.eh_frame:000000000000C8CF                 db    0
.eh_frame:000000000000C8D0                 db  14h
.eh_frame:000000000000C8D1                 db    0
.eh_frame:000000000000C8D2                 db    0
.eh_frame:000000000000C8D3                 db    0
.eh_frame:000000000000C8D4                 db  14h
.eh_frame:000000000000C8D5                 db  13h
.eh_frame:000000000000C8D6                 db    0
.eh_frame:000000000000C8D7                 db    0
.eh_frame:000000000000C8D8                 db 0E8h
.eh_frame:000000000000C8D9                 db 0CBh
.eh_frame:000000000000C8DA                 db 0FFh
.eh_frame:000000000000C8DB                 db 0FFh
.eh_frame:000000000000C8DC                 db  0Eh
.eh_frame:000000000000C8DD                 db    0
.eh_frame:000000000000C8DE                 db    0
.eh_frame:000000000000C8DF                 db    0
.eh_frame:000000000000C8E0                 db    0
.eh_frame:000000000000C8E1                 db    0
.eh_frame:000000000000C8E2                 db    0
.eh_frame:000000000000C8E3                 db    0
.eh_frame:000000000000C8E4                 db    0
.eh_frame:000000000000C8E5                 db    0
.eh_frame:000000000000C8E6                 db    0
.eh_frame:000000000000C8E7                 db    0
.eh_frame:000000000000C8E8                 db  44h ; D
.eh_frame:000000000000C8E9                 db    0
.eh_frame:000000000000C8EA                 db    0
.eh_frame:000000000000C8EB                 db    0
.eh_frame:000000000000C8EC                 db  2Ch ; ,
.eh_frame:000000000000C8ED                 db  13h
.eh_frame:000000000000C8EE                 db    0
.eh_frame:000000000000C8EF                 db    0
.eh_frame:000000000000C8F0                 db 0E0h
.eh_frame:000000000000C8F1                 db 0CBh
.eh_frame:000000000000C8F2                 db 0FFh
.eh_frame:000000000000C8F3                 db 0FFh
.eh_frame:000000000000C8F4                 db  65h ; e
.eh_frame:000000000000C8F5                 db    0
.eh_frame:000000000000C8F6                 db    0
.eh_frame:000000000000C8F7                 db    0
.eh_frame:000000000000C8F8                 db    0
.eh_frame:000000000000C8F9                 db  42h ; B
.eh_frame:000000000000C8FA                 db  0Eh
.eh_frame:000000000000C8FB                 db  10h
.eh_frame:000000000000C8FC                 db  8Fh
.eh_frame:000000000000C8FD                 db    2
.eh_frame:000000000000C8FE                 db  42h ; B
.eh_frame:000000000000C8FF                 db  0Eh
.eh_frame:000000000000C900                 db  18h
.eh_frame:000000000000C901                 db  8Eh
.eh_frame:000000000000C902                 db    3
.eh_frame:000000000000C903                 db  45h ; E
.eh_frame:000000000000C904                 db  0Eh
.eh_frame:000000000000C905                 db  20h
.eh_frame:000000000000C906                 db  8Dh
.eh_frame:000000000000C907                 db    4
.eh_frame:000000000000C908                 db  42h ; B
.eh_frame:000000000000C909                 db  0Eh
.eh_frame:000000000000C90A                 db  28h ; (
.eh_frame:000000000000C90B                 db  8Ch
.eh_frame:000000000000C90C                 db    5
.eh_frame:000000000000C90D                 db  48h ; H
.eh_frame:000000000000C90E                 db  0Eh
.eh_frame:000000000000C90F                 db  30h ; 0
.eh_frame:000000000000C910                 db  86h
.eh_frame:000000000000C911                 db    6
.eh_frame:000000000000C912                 db  48h ; H
.eh_frame:000000000000C913                 db  0Eh
.eh_frame:000000000000C914                 db  38h ; 8
.eh_frame:000000000000C915                 db  83h
.eh_frame:000000000000C916                 db    7
.eh_frame:000000000000C917                 db  4Dh ; M
.eh_frame:000000000000C918                 db  0Eh
.eh_frame:000000000000C919                 db  40h ; @
.eh_frame:000000000000C91A                 db  72h ; r
.eh_frame:000000000000C91B                 db  0Eh
.eh_frame:000000000000C91C                 db  38h ; 8
.eh_frame:000000000000C91D                 db  41h ; A
.eh_frame:000000000000C91E                 db  0Eh
.eh_frame:000000000000C91F                 db  30h ; 0
.eh_frame:000000000000C920                 db  41h ; A
.eh_frame:000000000000C921                 db  0Eh
.eh_frame:000000000000C922                 db  28h ; (
.eh_frame:000000000000C923                 db  42h ; B
.eh_frame:000000000000C924                 db  0Eh
.eh_frame:000000000000C925                 db  20h
.eh_frame:000000000000C926                 db  42h ; B
.eh_frame:000000000000C927                 db  0Eh
.eh_frame:000000000000C928                 db  18h
.eh_frame:000000000000C929                 db  42h ; B
.eh_frame:000000000000C92A                 db  0Eh
.eh_frame:000000000000C92B                 db  10h
.eh_frame:000000000000C92C                 db  42h ; B
.eh_frame:000000000000C92D                 db  0Eh
.eh_frame:000000000000C92E                 db    8
.eh_frame:000000000000C92F                 db    0
.eh_frame:000000000000C930                 db  14h
.eh_frame:000000000000C931                 db    0
.eh_frame:000000000000C932                 db    0
.eh_frame:000000000000C933                 db    0
.eh_frame:000000000000C934                 db  74h ; t
.eh_frame:000000000000C935                 db  13h
.eh_frame:000000000000C936                 db    0
.eh_frame:000000000000C937                 db    0
.eh_frame:000000000000C938                 db    8
.eh_frame:000000000000C939                 db 0CCh
.eh_frame:000000000000C93A                 db 0FFh
.eh_frame:000000000000C93B                 db 0FFh
.eh_frame:000000000000C93C                 db    2
.eh_frame:000000000000C93D                 db    0
.eh_frame:000000000000C93E                 db    0
.eh_frame:000000000000C93F                 db    0
.eh_frame:000000000000C940                 db    0
.eh_frame:000000000000C941                 db    0
.eh_frame:000000000000C942                 db    0
.eh_frame:000000000000C943                 db    0
.eh_frame:000000000000C944                 db    0
.eh_frame:000000000000C945                 db    0
.eh_frame:000000000000C946                 db    0
.eh_frame:000000000000C947                 db    0
.eh_frame:000000000000C948                 db  10h
.eh_frame:000000000000C949                 db    0
.eh_frame:000000000000C94A                 db    0
.eh_frame:000000000000C94B                 db    0
.eh_frame:000000000000C94C                 db  8Ch
.eh_frame:000000000000C94D                 db  13h
.eh_frame:000000000000C94E                 db    0
.eh_frame:000000000000C94F                 db    0
.eh_frame:000000000000C950                 db    0
.eh_frame:000000000000C951                 db 0CCh
.eh_frame:000000000000C952                 db 0FFh
.eh_frame:000000000000C953                 db 0FFh
.eh_frame:000000000000C954                 db  0Eh
.eh_frame:000000000000C955                 db    0
.eh_frame:000000000000C956                 db    0
.eh_frame:000000000000C957                 db    0
.eh_frame:000000000000C958                 db    0
.eh_frame:000000000000C959                 db    0
.eh_frame:000000000000C95A                 db    0
.eh_frame:000000000000C95B                 db    0
.eh_frame:000000000000C95C __FRAME_END__   db    0
.eh_frame:000000000000C95D                 db    0
.eh_frame:000000000000C95E                 db    0
.eh_frame:000000000000C95F                 db    0
.eh_frame:000000000000C95F _eh_frame       ends
.eh_frame:000000000000C95F
.init_array:000000000020D950 ; ELF Initialization Function Table
.init_array:000000000020D950 ; ===========================================================================
.init_array:000000000020D950
.init_array:000000000020D950 ; Segment type: Pure data
.init_array:000000000020D950 ; Segment permissions: Read/Write
.init_array:000000000020D950 _init_array     segment qword public 'DATA' use64
.init_array:000000000020D950                 assume cs:_init_array
.init_array:000000000020D950                 ;org 20D950h
.init_array:000000000020D950 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020D950                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020D950                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020D950 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020D950
.fini_array:000000000020D958 ; ELF Termination Function Table
.fini_array:000000000020D958 ; ===========================================================================
.fini_array:000000000020D958
.fini_array:000000000020D958 ; Segment type: Pure data
.fini_array:000000000020D958 ; Segment permissions: Read/Write
.fini_array:000000000020D958 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020D958                 assume cs:_fini_array
.fini_array:000000000020D958                 ;org 20D958h
.fini_array:000000000020D958 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020D958                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020D958 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020D958
.data.rel.ro:000000000020D960 ; ===========================================================================
.data.rel.ro:000000000020D960
.data.rel.ro:000000000020D960 ; Segment type: Pure data
.data.rel.ro:000000000020D960 ; Segment permissions: Read/Write
.data.rel.ro:000000000020D960 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020D960                 assume cs:_data_rel_ro
.data.rel.ro:000000000020D960                 ;org 20D960h
.data.rel.ro:000000000020D960 ; struct option long_opts
.data.rel.ro:000000000020D960 long_opts       dq offset aExact        ; name
.data.rel.ro:000000000020D960                                         ; DATA XREF: main+8↑o
.data.rel.ro:000000000020D960                 dd 0                    ; has_arg ; "exact"
.data.rel.ro:000000000020D960                 db 4 dup(0)
.data.rel.ro:000000000020D960                 dq 0                    ; flag
.data.rel.ro:000000000020D960                 dd 78h                  ; val
.data.rel.ro:000000000020D960                 db 4 dup(0)
.data.rel.ro:000000000020D980                 dq offset aForce        ; "force"
.data.rel.ro:000000000020D988                 db    0
.data.rel.ro:000000000020D989                 db    0
.data.rel.ro:000000000020D98A                 db    0
.data.rel.ro:000000000020D98B                 db    0
.data.rel.ro:000000000020D98C                 db    0
.data.rel.ro:000000000020D98D                 db    0
.data.rel.ro:000000000020D98E                 db    0
.data.rel.ro:000000000020D98F                 db    0
.data.rel.ro:000000000020D990                 db    0
.data.rel.ro:000000000020D991                 db    0
.data.rel.ro:000000000020D992                 db    0
.data.rel.ro:000000000020D993                 db    0
.data.rel.ro:000000000020D994                 db    0
.data.rel.ro:000000000020D995                 db    0
.data.rel.ro:000000000020D996                 db    0
.data.rel.ro:000000000020D997                 db    0
.data.rel.ro:000000000020D998                 db  66h ; f
.data.rel.ro:000000000020D999                 db    0
.data.rel.ro:000000000020D99A                 db    0
.data.rel.ro:000000000020D99B                 db    0
.data.rel.ro:000000000020D99C                 db    0
.data.rel.ro:000000000020D99D                 db    0
.data.rel.ro:000000000020D99E                 db    0
.data.rel.ro:000000000020D99F                 db    0
.data.rel.ro:000000000020D9A0                 dq offset aIterations   ; "iterations"
.data.rel.ro:000000000020D9A8                 db    1
.data.rel.ro:000000000020D9A9                 db    0
.data.rel.ro:000000000020D9AA                 db    0
.data.rel.ro:000000000020D9AB                 db    0
.data.rel.ro:000000000020D9AC                 db    0
.data.rel.ro:000000000020D9AD                 db    0
.data.rel.ro:000000000020D9AE                 db    0
.data.rel.ro:000000000020D9AF                 db    0
.data.rel.ro:000000000020D9B0                 db    0
.data.rel.ro:000000000020D9B1                 db    0
.data.rel.ro:000000000020D9B2                 db    0
.data.rel.ro:000000000020D9B3                 db    0
.data.rel.ro:000000000020D9B4                 db    0
.data.rel.ro:000000000020D9B5                 db    0
.data.rel.ro:000000000020D9B6                 db    0
.data.rel.ro:000000000020D9B7                 db    0
.data.rel.ro:000000000020D9B8                 db  6Eh ; n
.data.rel.ro:000000000020D9B9                 db    0
.data.rel.ro:000000000020D9BA                 db    0
.data.rel.ro:000000000020D9BB                 db    0
.data.rel.ro:000000000020D9BC                 db    0
.data.rel.ro:000000000020D9BD                 db    0
.data.rel.ro:000000000020D9BE                 db    0
.data.rel.ro:000000000020D9BF                 db    0
.data.rel.ro:000000000020D9C0                 dq offset aInvalidFileSiz+0Dh ; "size"
.data.rel.ro:000000000020D9C8                 db    1
.data.rel.ro:000000000020D9C9                 db    0
.data.rel.ro:000000000020D9CA                 db    0
.data.rel.ro:000000000020D9CB                 db    0
.data.rel.ro:000000000020D9CC                 db    0
.data.rel.ro:000000000020D9CD                 db    0
.data.rel.ro:000000000020D9CE                 db    0
.data.rel.ro:000000000020D9CF                 db    0
.data.rel.ro:000000000020D9D0                 db    0
.data.rel.ro:000000000020D9D1                 db    0
.data.rel.ro:000000000020D9D2                 db    0
.data.rel.ro:000000000020D9D3                 db    0
.data.rel.ro:000000000020D9D4                 db    0
.data.rel.ro:000000000020D9D5                 db    0
.data.rel.ro:000000000020D9D6                 db    0
.data.rel.ro:000000000020D9D7                 db    0
.data.rel.ro:000000000020D9D8                 db  73h ; s
.data.rel.ro:000000000020D9D9                 db    0
.data.rel.ro:000000000020D9DA                 db    0
.data.rel.ro:000000000020D9DB                 db    0
.data.rel.ro:000000000020D9DC                 db    0
.data.rel.ro:000000000020D9DD                 db    0
.data.rel.ro:000000000020D9DE                 db    0
.data.rel.ro:000000000020D9DF                 db    0
.data.rel.ro:000000000020D9E0                 dq offset aRandomSource ; "random-source"
.data.rel.ro:000000000020D9E8                 db    1
.data.rel.ro:000000000020D9E9                 db    0
.data.rel.ro:000000000020D9EA                 db    0
.data.rel.ro:000000000020D9EB                 db    0
.data.rel.ro:000000000020D9EC                 db    0
.data.rel.ro:000000000020D9ED                 db    0
.data.rel.ro:000000000020D9EE                 db    0
.data.rel.ro:000000000020D9EF                 db    0
.data.rel.ro:000000000020D9F0                 db    0
.data.rel.ro:000000000020D9F1                 db    0
.data.rel.ro:000000000020D9F2                 db    0
.data.rel.ro:000000000020D9F3                 db    0
.data.rel.ro:000000000020D9F4                 db    0
.data.rel.ro:000000000020D9F5                 db    0
.data.rel.ro:000000000020D9F6                 db    0
.data.rel.ro:000000000020D9F7                 db    0
.data.rel.ro:000000000020D9F8                 db  80h
.data.rel.ro:000000000020D9F9                 db    0
.data.rel.ro:000000000020D9FA                 db    0
.data.rel.ro:000000000020D9FB                 db    0
.data.rel.ro:000000000020D9FC                 db    0
.data.rel.ro:000000000020D9FD                 db    0
.data.rel.ro:000000000020D9FE                 db    0
.data.rel.ro:000000000020D9FF                 db    0
.data.rel.ro:000000000020DA00                 dq offset aSFailedToRemov+0Eh ; "remove"
.data.rel.ro:000000000020DA08                 db    2
.data.rel.ro:000000000020DA09                 db    0
.data.rel.ro:000000000020DA0A                 db    0
.data.rel.ro:000000000020DA0B                 db    0
.data.rel.ro:000000000020DA0C                 db    0
.data.rel.ro:000000000020DA0D                 db    0
.data.rel.ro:000000000020DA0E                 db    0
.data.rel.ro:000000000020DA0F                 db    0
.data.rel.ro:000000000020DA10                 db    0
.data.rel.ro:000000000020DA11                 db    0
.data.rel.ro:000000000020DA12                 db    0
.data.rel.ro:000000000020DA13                 db    0
.data.rel.ro:000000000020DA14                 db    0
.data.rel.ro:000000000020DA15                 db    0
.data.rel.ro:000000000020DA16                 db    0
.data.rel.ro:000000000020DA17                 db    0
.data.rel.ro:000000000020DA18                 db  75h ; u
.data.rel.ro:000000000020DA19                 db    0
.data.rel.ro:000000000020DA1A                 db    0
.data.rel.ro:000000000020DA1B                 db    0
.data.rel.ro:000000000020DA1C                 db    0
.data.rel.ro:000000000020DA1D                 db    0
.data.rel.ro:000000000020DA1E                 db    0
.data.rel.ro:000000000020DA1F                 db    0
.data.rel.ro:000000000020DA20                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020DA28                 db    0
.data.rel.ro:000000000020DA29                 db    0
.data.rel.ro:000000000020DA2A                 db    0
.data.rel.ro:000000000020DA2B                 db    0
.data.rel.ro:000000000020DA2C                 db    0
.data.rel.ro:000000000020DA2D                 db    0
.data.rel.ro:000000000020DA2E                 db    0
.data.rel.ro:000000000020DA2F                 db    0
.data.rel.ro:000000000020DA30                 db    0
.data.rel.ro:000000000020DA31                 db    0
.data.rel.ro:000000000020DA32                 db    0
.data.rel.ro:000000000020DA33                 db    0
.data.rel.ro:000000000020DA34                 db    0
.data.rel.ro:000000000020DA35                 db    0
.data.rel.ro:000000000020DA36                 db    0
.data.rel.ro:000000000020DA37                 db    0
.data.rel.ro:000000000020DA38                 db  76h ; v
.data.rel.ro:000000000020DA39                 db    0
.data.rel.ro:000000000020DA3A                 db    0
.data.rel.ro:000000000020DA3B                 db    0
.data.rel.ro:000000000020DA3C                 db    0
.data.rel.ro:000000000020DA3D                 db    0
.data.rel.ro:000000000020DA3E                 db    0
.data.rel.ro:000000000020DA3F                 db    0
.data.rel.ro:000000000020DA40                 dq offset aZero         ; "zero"
.data.rel.ro:000000000020DA48                 db    0
.data.rel.ro:000000000020DA49                 db    0
.data.rel.ro:000000000020DA4A                 db    0
.data.rel.ro:000000000020DA4B                 db    0
.data.rel.ro:000000000020DA4C                 db    0
.data.rel.ro:000000000020DA4D                 db    0
.data.rel.ro:000000000020DA4E                 db    0
.data.rel.ro:000000000020DA4F                 db    0
.data.rel.ro:000000000020DA50                 db    0
.data.rel.ro:000000000020DA51                 db    0
.data.rel.ro:000000000020DA52                 db    0
.data.rel.ro:000000000020DA53                 db    0
.data.rel.ro:000000000020DA54                 db    0
.data.rel.ro:000000000020DA55                 db    0
.data.rel.ro:000000000020DA56                 db    0
.data.rel.ro:000000000020DA57                 db    0
.data.rel.ro:000000000020DA58                 db  7Ah ; z
.data.rel.ro:000000000020DA59                 db    0
.data.rel.ro:000000000020DA5A                 db    0
.data.rel.ro:000000000020DA5B                 db    0
.data.rel.ro:000000000020DA5C                 db    0
.data.rel.ro:000000000020DA5D                 db    0
.data.rel.ro:000000000020DA5E                 db    0
.data.rel.ro:000000000020DA5F                 db    0
.data.rel.ro:000000000020DA60                 dq offset unk_985B
.data.rel.ro:000000000020DA68                 db    0
.data.rel.ro:000000000020DA69                 db    0
.data.rel.ro:000000000020DA6A                 db    0
.data.rel.ro:000000000020DA6B                 db    0
.data.rel.ro:000000000020DA6C                 db    0
.data.rel.ro:000000000020DA6D                 db    0
.data.rel.ro:000000000020DA6E                 db    0
.data.rel.ro:000000000020DA6F                 db    0
.data.rel.ro:000000000020DA70                 db    0
.data.rel.ro:000000000020DA71                 db    0
.data.rel.ro:000000000020DA72                 db    0
.data.rel.ro:000000000020DA73                 db    0
.data.rel.ro:000000000020DA74                 db    0
.data.rel.ro:000000000020DA75                 db    0
.data.rel.ro:000000000020DA76                 db    0
.data.rel.ro:000000000020DA77                 db    0
.data.rel.ro:000000000020DA78                 db  7Eh ; ~
.data.rel.ro:000000000020DA79                 db 0FFh
.data.rel.ro:000000000020DA7A                 db 0FFh
.data.rel.ro:000000000020DA7B                 db 0FFh
.data.rel.ro:000000000020DA7C                 db    0
.data.rel.ro:000000000020DA7D                 db    0
.data.rel.ro:000000000020DA7E                 db    0
.data.rel.ro:000000000020DA7F                 db    0
.data.rel.ro:000000000020DA80                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020DA88                 db    0
.data.rel.ro:000000000020DA89                 db    0
.data.rel.ro:000000000020DA8A                 db    0
.data.rel.ro:000000000020DA8B                 db    0
.data.rel.ro:000000000020DA8C                 db    0
.data.rel.ro:000000000020DA8D                 db    0
.data.rel.ro:000000000020DA8E                 db    0
.data.rel.ro:000000000020DA8F                 db    0
.data.rel.ro:000000000020DA90                 db    0
.data.rel.ro:000000000020DA91                 db    0
.data.rel.ro:000000000020DA92                 db    0
.data.rel.ro:000000000020DA93                 db    0
.data.rel.ro:000000000020DA94                 db    0
.data.rel.ro:000000000020DA95                 db    0
.data.rel.ro:000000000020DA96                 db    0
.data.rel.ro:000000000020DA97                 db    0
.data.rel.ro:000000000020DA98                 db  7Dh ; }
.data.rel.ro:000000000020DA99                 db 0FFh
.data.rel.ro:000000000020DA9A                 db 0FFh
.data.rel.ro:000000000020DA9B                 db 0FFh
.data.rel.ro:000000000020DA9C                 db    0
.data.rel.ro:000000000020DA9D                 db    0
.data.rel.ro:000000000020DA9E                 db    0
.data.rel.ro:000000000020DA9F                 db    0
.data.rel.ro:000000000020DAA0                 db    0
.data.rel.ro:000000000020DAA1                 db    0
.data.rel.ro:000000000020DAA2                 db    0
.data.rel.ro:000000000020DAA3                 db    0
.data.rel.ro:000000000020DAA4                 db    0
.data.rel.ro:000000000020DAA5                 db    0
.data.rel.ro:000000000020DAA6                 db    0
.data.rel.ro:000000000020DAA7                 db    0
.data.rel.ro:000000000020DAA8                 db    0
.data.rel.ro:000000000020DAA9                 db    0
.data.rel.ro:000000000020DAAA                 db    0
.data.rel.ro:000000000020DAAB                 db    0
.data.rel.ro:000000000020DAAC                 db    0
.data.rel.ro:000000000020DAAD                 db    0
.data.rel.ro:000000000020DAAE                 db    0
.data.rel.ro:000000000020DAAF                 db    0
.data.rel.ro:000000000020DAB0                 db    0
.data.rel.ro:000000000020DAB1                 db    0
.data.rel.ro:000000000020DAB2                 db    0
.data.rel.ro:000000000020DAB3                 db    0
.data.rel.ro:000000000020DAB4                 db    0
.data.rel.ro:000000000020DAB5                 db    0
.data.rel.ro:000000000020DAB6                 db    0
.data.rel.ro:000000000020DAB7                 db    0
.data.rel.ro:000000000020DAB8                 db    0
.data.rel.ro:000000000020DAB9                 db    0
.data.rel.ro:000000000020DABA                 db    0
.data.rel.ro:000000000020DABB                 db    0
.data.rel.ro:000000000020DABC                 db    0
.data.rel.ro:000000000020DABD                 db    0
.data.rel.ro:000000000020DABE                 db    0
.data.rel.ro:000000000020DABF                 db    0
.data.rel.ro:000000000020DAC0 remove_args     dq offset aUnlink_0     ; DATA XREF: main+217↑o
.data.rel.ro:000000000020DAC0                                         ; "unlink"
.data.rel.ro:000000000020DAC8                 dq offset aWipe         ; "wipe"
.data.rel.ro:000000000020DAD0                 dq offset aWipesync     ; "wipesync"
.data.rel.ro:000000000020DAD8                 align 20h
.data.rel.ro:000000000020DAE0 block_size_args dq offset aHumanReadable
.data.rel.ro:000000000020DAE0                                         ; DATA XREF: human_options+43↑o
.data.rel.ro:000000000020DAE0                                         ; "human-readable"
.data.rel.ro:000000000020DAE8                 dq offset off_A7D0
.data.rel.ro:000000000020DAF0                 align 20h
.data.rel.ro:000000000020DB00                 public quoting_style_args
.data.rel.ro:000000000020DB00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020DB08                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020DB10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020DB18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020DB20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020DB28                 dq offset file+1Ch      ; "c"
.data.rel.ro:000000000020DB30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020DB38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020DB40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020DB48                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020DB50                 db    0
.data.rel.ro:000000000020DB51                 db    0
.data.rel.ro:000000000020DB52                 db    0
.data.rel.ro:000000000020DB53                 db    0
.data.rel.ro:000000000020DB54                 db    0
.data.rel.ro:000000000020DB55                 db    0
.data.rel.ro:000000000020DB56                 db    0
.data.rel.ro:000000000020DB57                 db    0
.data.rel.ro:000000000020DB57 _data_rel_ro    ends
.data.rel.ro:000000000020DB57
LOAD:000000000020DB58 ; ELF Dynamic Information
LOAD:000000000020DB58 ; ===========================================================================
LOAD:000000000020DB58
LOAD:000000000020DB58 ; Segment type: Pure data
LOAD:000000000020DB58 ; Segment permissions: Read/Write
LOAD:000000000020DB58 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DB58                 assume cs:LOAD
LOAD:000000000020DB58                 ;org 20DB58h
LOAD:000000000020DB58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020DB58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020DB58                                         ; DT_NEEDED libc.so.6
LOAD:000000000020DB68                 Elf64_Dyn <0Ch, 1C18h>  ; DT_INIT
LOAD:000000000020DB78                 Elf64_Dyn <0Dh, 9560h>  ; DT_FINI
LOAD:000000000020DB88                 Elf64_Dyn <19h, 20D950h> ; DT_INIT_ARRAY
LOAD:000000000020DB98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020DBA8                 Elf64_Dyn <1Ah, 20D958h> ; DT_FINI_ARRAY
LOAD:000000000020DBB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020DBC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020DBD8                 Elf64_Dyn <5, 0B98h>    ; DT_STRTAB
LOAD:000000000020DBE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020DBF8                 Elf64_Dyn <0Ah, 3E4h>   ; DT_STRSZ
LOAD:000000000020DC08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020DC18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020DC28                 Elf64_Dyn <3, 20DD48h>  ; DT_PLTGOT
LOAD:000000000020DC38                 Elf64_Dyn <2, 768h>     ; DT_PLTRELSZ
LOAD:000000000020DC48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020DC58                 Elf64_Dyn <17h, 14B0h>  ; DT_JMPREL
LOAD:000000000020DC68                 Elf64_Dyn <7, 10A8h>    ; DT_RELA
LOAD:000000000020DC78                 Elf64_Dyn <8, 408h>     ; DT_RELASZ
LOAD:000000000020DC88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020DC98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020DCA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020DCB8                 Elf64_Dyn <6FFFFFFEh, 1038h> ; DT_VERNEED
LOAD:000000000020DCC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020DCD8                 Elf64_Dyn <6FFFFFF0h, 0F7Ch> ; DT_VERSYM
LOAD:000000000020DCE8                 Elf64_Dyn <6FFFFFF9h, 20h> ; DT_RELACOUNT
LOAD:000000000020DCF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020DD08                 db    0
LOAD:000000000020DD09                 db    0
LOAD:000000000020DD0A                 db    0
LOAD:000000000020DD0B                 db    0
LOAD:000000000020DD0C                 db    0
LOAD:000000000020DD0D                 db    0
LOAD:000000000020DD0E                 db    0
LOAD:000000000020DD0F                 db    0
LOAD:000000000020DD10                 db    0
LOAD:000000000020DD11                 db    0
LOAD:000000000020DD12                 db    0
LOAD:000000000020DD13                 db    0
LOAD:000000000020DD14                 db    0
LOAD:000000000020DD15                 db    0
LOAD:000000000020DD16                 db    0
LOAD:000000000020DD17                 db    0
LOAD:000000000020DD18                 db    0
LOAD:000000000020DD19                 db    0
LOAD:000000000020DD1A                 db    0
LOAD:000000000020DD1B                 db    0
LOAD:000000000020DD1C                 db    0
LOAD:000000000020DD1D                 db    0
LOAD:000000000020DD1E                 db    0
LOAD:000000000020DD1F                 db    0
LOAD:000000000020DD20                 db    0
LOAD:000000000020DD21                 db    0
LOAD:000000000020DD22                 db    0
LOAD:000000000020DD23                 db    0
LOAD:000000000020DD24                 db    0
LOAD:000000000020DD25                 db    0
LOAD:000000000020DD26                 db    0
LOAD:000000000020DD27                 db    0
LOAD:000000000020DD28                 db    0
LOAD:000000000020DD29                 db    0
LOAD:000000000020DD2A                 db    0
LOAD:000000000020DD2B                 db    0
LOAD:000000000020DD2C                 db    0
LOAD:000000000020DD2D                 db    0
LOAD:000000000020DD2E                 db    0
LOAD:000000000020DD2F                 db    0
LOAD:000000000020DD30                 db    0
LOAD:000000000020DD31                 db    0
LOAD:000000000020DD32                 db    0
LOAD:000000000020DD33                 db    0
LOAD:000000000020DD34                 db    0
LOAD:000000000020DD35                 db    0
LOAD:000000000020DD36                 db    0
LOAD:000000000020DD37                 db    0
LOAD:000000000020DD38                 db    0
LOAD:000000000020DD39                 db    0
LOAD:000000000020DD3A                 db    0
LOAD:000000000020DD3B                 db    0
LOAD:000000000020DD3C                 db    0
LOAD:000000000020DD3D                 db    0
LOAD:000000000020DD3E                 db    0
LOAD:000000000020DD3F                 db    0
LOAD:000000000020DD40                 db    0
LOAD:000000000020DD41                 db    0
LOAD:000000000020DD42                 db    0
LOAD:000000000020DD43                 db    0
LOAD:000000000020DD44                 db    0
LOAD:000000000020DD45                 db    0
LOAD:000000000020DD46                 db    0
LOAD:000000000020DD47                 db    0
LOAD:000000000020DD47 LOAD            ends
LOAD:000000000020DD47
.got:000000000020DD48 ; ===========================================================================
.got:000000000020DD48
.got:000000000020DD48 ; Segment type: Pure data
.got:000000000020DD48 ; Segment permissions: Read/Write
.got:000000000020DD48 _got            segment qword public 'DATA' use64
.got:000000000020DD48                 assume cs:_got
.got:000000000020DD48                 ;org 20DD48h
.got:000000000020DD48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020DD50 qword_20DD50    dq 0                    ; DATA XREF: sub_1C30↑r
.got:000000000020DD58 qword_20DD58    dq 0                    ; DATA XREF: sub_1C30+6↑r
.got:000000000020DD60 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000020DD68 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020DD70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020DD78 __errno_location_ptr dq offset __errno_location
.got:000000000020DD78                                         ; DATA XREF: ___errno_location↑r
.got:000000000020DD80 fdatasync_ptr   dq offset fdatasync     ; DATA XREF: _fdatasync↑r
.got:000000000020DD88 unlink_ptr      dq offset unlink        ; DATA XREF: _unlink↑r
.got:000000000020DD90 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020DD98 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020DDA0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020DDA8 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:000000000020DDB0 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000020DDB8 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:000000000020DDC0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020DDC8 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:000000000020DDD0 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:000000000020DDD8 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000020DDD8                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000020DDE0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020DDE8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020DDF0 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020DDF0                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020DDF8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020DE00 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020DE00                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020DE08 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020DE10 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020DE10                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020DE18 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:000000000020DE20 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020DE28 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020DE30 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020DE38 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020DE40 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020DE48 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020DE50 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:000000000020DE58 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020DE60 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:000000000020DE68 __assert_fail_ptr dq offset __assert_fail
.got:000000000020DE68                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020DE70 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020DE70                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020DE78 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020DE80 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:000000000020DE88 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020DE90 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020DE98 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020DE98                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020DEA0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020DEA8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020DEB0 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:000000000020DEB8 syscall_ptr     dq offset syscall       ; DATA XREF: _syscall↑r
.got:000000000020DEC0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020DEC8 time_ptr        dq offset time          ; DATA XREF: _time↑r
.got:000000000020DED0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020DED8 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:000000000020DEE0 sync_ptr        dq offset sync          ; DATA XREF: _sync↑r
.got:000000000020DEE8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020DEF0 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020DEF8 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020DF00 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020DF08 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020DF10 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020DF18 __strcpy_chk_ptr dq offset __strcpy_chk ; DATA XREF: ___strcpy_chk↑r
.got:000000000020DF20 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000020DF28 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020DF30 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020DF38 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000020DF40 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:000000000020DF48 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020DF50 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020DF58 fsync_ptr       dq offset fsync         ; DATA XREF: _fsync↑r
.got:000000000020DF60 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:000000000020DF60                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:000000000020DF68 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020DF70 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020DF78 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020DF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020DF88 renameat_ptr    dq offset renameat      ; DATA XREF: _renameat↑r
.got:000000000020DF90 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:000000000020DF98 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:000000000020DFA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020DFA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020DFB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020DFB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020DFB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020DFC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020DFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020DFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020DFD0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000020DFD0                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000020DFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020DFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020DFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020DFE0                                         ; DATA XREF: start+24↑r
.got:000000000020DFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020DFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020DFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020DFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020DFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020DFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020DFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020DFF8 _got            ends
.got:000000000020DFF8
.data:000000000020E000 ; ===========================================================================
.data:000000000020E000
.data:000000000020E000 ; Segment type: Pure data
.data:000000000020E000 ; Segment permissions: Read/Write
.data:000000000020E000 _data           segment align_32 public 'DATA' use64
.data:000000000020E000                 assume cs:_data
.data:000000000020E000                 ;org 20E000h
.data:000000000020E000                 public __data_start ; weak
.data:000000000020E000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020E000                                         ; data_start
.data:000000000020E001                 db    0
.data:000000000020E002                 db    0
.data:000000000020E003                 db    0
.data:000000000020E004                 db    0
.data:000000000020E005                 db    0
.data:000000000020E006                 db    0
.data:000000000020E007                 db    0
.data:000000000020E008                 public __dso_handle
.data:000000000020E008 ; void *_dso_handle
.data:000000000020E008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020E008                                         ; atexit↑r ...
.data:000000000020E010                 public Version
.data:000000000020E010 Version         dq offset a831          ; DATA XREF: main+272↑r
.data:000000000020E010                                         ; "8.31"
.data:000000000020E018                 public argmatch_die
.data:000000000020E018 argmatch_die    dq offset __argmatch_die
.data:000000000020E018                                         ; DATA XREF: main+210↑r
.data:000000000020E020                 public exit_failure
.data:000000000020E020 ; int exit_failure
.data:000000000020E020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_4512↑r
.data:000000000020E020                                         ; randread_error:loc_73E3↑r ...
.data:000000000020E024                 align 20h
.data:000000000020E040                 public quote_quoting_options
.data:000000000020E040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020E040                                         ; quote_mem↑o ...
.data:000000000020E041                 db    0
.data:000000000020E042                 db    0
.data:000000000020E043                 db    0
.data:000000000020E044                 db    0
.data:000000000020E045                 db    0
.data:000000000020E046                 db    0
.data:000000000020E047                 db    0
.data:000000000020E048                 db    0
.data:000000000020E049                 db    0
.data:000000000020E04A                 db    0
.data:000000000020E04B                 db    0
.data:000000000020E04C                 db    0
.data:000000000020E04D                 db    0
.data:000000000020E04E                 db    0
.data:000000000020E04F                 db    0
.data:000000000020E050                 db    0
.data:000000000020E051                 db    0
.data:000000000020E052                 db    0
.data:000000000020E053                 db    0
.data:000000000020E054                 db    0
.data:000000000020E055                 db    0
.data:000000000020E056                 db    0
.data:000000000020E057                 db    0
.data:000000000020E058                 db    0
.data:000000000020E059                 db    0
.data:000000000020E05A                 db    0
.data:000000000020E05B                 db    0
.data:000000000020E05C                 db    0
.data:000000000020E05D                 db    0
.data:000000000020E05E                 db    0
.data:000000000020E05F                 db    0
.data:000000000020E060                 db    0
.data:000000000020E061                 db    0
.data:000000000020E062                 db    0
.data:000000000020E063                 db    0
.data:000000000020E064                 db    0
.data:000000000020E065                 db    0
.data:000000000020E066                 db    0
.data:000000000020E067                 db    0
.data:000000000020E068                 db    0
.data:000000000020E069                 db    0
.data:000000000020E06A                 db    0
.data:000000000020E06B                 db    0
.data:000000000020E06C                 db    0
.data:000000000020E06D                 db    0
.data:000000000020E06E                 db    0
.data:000000000020E06F                 db    0
.data:000000000020E070                 db    0
.data:000000000020E071                 db    0
.data:000000000020E072                 db    0
.data:000000000020E073                 db    0
.data:000000000020E074                 db    0
.data:000000000020E075                 db    0
.data:000000000020E076                 db    0
.data:000000000020E077                 db    0
.data:000000000020E078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020E078                                         ; quotearg_n_options:loc_68AD↑r ...
.data:000000000020E07C                 align 20h
.data:000000000020E080 ; void *slotvec
.data:000000000020E080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020E080                                         ; quotearg_n_options+76↑w ...
.data:000000000020E088                 align 10h
.data:000000000020E090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020E090                                         ; quotearg_n_options+187↑r ...
.data:000000000020E098 off_20E098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020E098 _data           ends
.data:000000000020E098
.bss:000000000020E0A0 ; ===========================================================================
.bss:000000000020E0A0
.bss:000000000020E0A0 ; Segment type: Uninitialized
.bss:000000000020E0A0 ; Segment permissions: Read/Write
.bss:000000000020E0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020E0A0                 assume cs:_bss
.bss:000000000020E0A0                 ;org 20E0A0h
.bss:000000000020E0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020E0A0                 public __bss_start ; weak
.bss:000000000020E0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000AF0↑o
.bss:000000000020E0A0                                         ; LOAD:0000000000000B38↑o ...
.bss:000000000020E0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020E0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020E0A0                                         ; _edata
.bss:000000000020E0A0                                         ; Copy of shared data
.bss:000000000020E0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020E0A8 ; FILE *stdout
.bss:000000000020E0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AD8↑o
.bss:000000000020E0A8                                         ; main+26B↑r ...
.bss:000000000020E0A8                                         ; Alternative name is 'stdout'
.bss:000000000020E0A8                                         ; Copy of shared data
.bss:000000000020E0B0                 public optind@@GLIBC_2_2_5
.bss:000000000020E0B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000B68↑o
.bss:000000000020E0B0                                         ; main:loc_23EC↑r
.bss:000000000020E0B0                                         ; Alternative name is 'optind'
.bss:000000000020E0B0                                         ; Copy of shared data
.bss:000000000020E0B4                 align 8
.bss:000000000020E0B8                 public optarg@@GLIBC_2_2_5
.bss:000000000020E0B8 ; char *optarg
.bss:000000000020E0B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B80↑o
.bss:000000000020E0B8                                         ; main+126↑r ...
.bss:000000000020E0B8                                         ; Alternative name is 'optarg'
.bss:000000000020E0B8                                         ; Copy of shared data
.bss:000000000020E0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020E0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020E0C0                                         ; DATA XREF: LOAD:0000000000000B08↑o
.bss:000000000020E0C0                                         ; LOAD:0000000000000B20↑o ...
.bss:000000000020E0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020E0C0                                         ; Copy of shared data
.bss:000000000020E0C8                 align 20h
.bss:000000000020E0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020E0E0 ; FILE *stderr
.bss:000000000020E0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B50↑o
.bss:000000000020E0E0                                         ; usage+3D↑r ...
.bss:000000000020E0E0                                         ; Alternative name is 'stderr'
.bss:000000000020E0E0                                         ; Copy of shared data
.bss:000000000020E0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020E0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020E0E9                 align 10h
.bss:000000000020E0F0 ; void *randint_source
.bss:000000000020E0F0 randint_source  dq ?                    ; DATA XREF: main+2D4↑w
.bss:000000000020E0F0                                         ; main+329↑r ...
.bss:000000000020E0F8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020E0F8                                         ; close_stdout+1B↑r
.bss:000000000020E0F9                 align 20h
.bss:000000000020E100 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020E100                                         ; close_stdout+56↑r
.bss:000000000020E108                 public program_name
.bss:000000000020E108 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020E108                                         ; set_program_name:loc_54CD↑w
.bss:000000000020E110                 align 20h
.bss:000000000020E120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020E120                                         ; quotearg_free+46↑o ...
.bss:000000000020E121                 db    ? ;
.bss:000000000020E122                 db    ? ;
.bss:000000000020E123                 db    ? ;
.bss:000000000020E124                 db    ? ;
.bss:000000000020E125                 db    ? ;
.bss:000000000020E126                 db    ? ;
.bss:000000000020E127                 db    ? ;
.bss:000000000020E128                 db    ? ;
.bss:000000000020E129                 db    ? ;
.bss:000000000020E12A                 db    ? ;
.bss:000000000020E12B                 db    ? ;
.bss:000000000020E12C                 db    ? ;
.bss:000000000020E12D                 db    ? ;
.bss:000000000020E12E                 db    ? ;
.bss:000000000020E12F                 db    ? ;
.bss:000000000020E130                 db    ? ;
.bss:000000000020E131                 db    ? ;
.bss:000000000020E132                 db    ? ;
.bss:000000000020E133                 db    ? ;
.bss:000000000020E134                 db    ? ;
.bss:000000000020E135                 db    ? ;
.bss:000000000020E136                 db    ? ;
.bss:000000000020E137                 db    ? ;
.bss:000000000020E138                 db    ? ;
.bss:000000000020E139                 db    ? ;
.bss:000000000020E13A                 db    ? ;
.bss:000000000020E13B                 db    ? ;
.bss:000000000020E13C                 db    ? ;
.bss:000000000020E13D                 db    ? ;
.bss:000000000020E13E                 db    ? ;
.bss:000000000020E13F                 db    ? ;
.bss:000000000020E140                 db    ? ;
.bss:000000000020E141                 db    ? ;
.bss:000000000020E142                 db    ? ;
.bss:000000000020E143                 db    ? ;
.bss:000000000020E144                 db    ? ;
.bss:000000000020E145                 db    ? ;
.bss:000000000020E146                 db    ? ;
.bss:000000000020E147                 db    ? ;
.bss:000000000020E148                 db    ? ;
.bss:000000000020E149                 db    ? ;
.bss:000000000020E14A                 db    ? ;
.bss:000000000020E14B                 db    ? ;
.bss:000000000020E14C                 db    ? ;
.bss:000000000020E14D                 db    ? ;
.bss:000000000020E14E                 db    ? ;
.bss:000000000020E14F                 db    ? ;
.bss:000000000020E150                 db    ? ;
.bss:000000000020E151                 db    ? ;
.bss:000000000020E152                 db    ? ;
.bss:000000000020E153                 db    ? ;
.bss:000000000020E154                 db    ? ;
.bss:000000000020E155                 db    ? ;
.bss:000000000020E156                 db    ? ;
.bss:000000000020E157                 db    ? ;
.bss:000000000020E158                 db    ? ;
.bss:000000000020E159                 db    ? ;
.bss:000000000020E15A                 db    ? ;
.bss:000000000020E15B                 db    ? ;
.bss:000000000020E15C                 db    ? ;
.bss:000000000020E15D                 db    ? ;
.bss:000000000020E15E                 db    ? ;
.bss:000000000020E15F                 db    ? ;
.bss:000000000020E160                 db    ? ;
.bss:000000000020E161                 db    ? ;
.bss:000000000020E162                 db    ? ;
.bss:000000000020E163                 db    ? ;
.bss:000000000020E164                 db    ? ;
.bss:000000000020E165                 db    ? ;
.bss:000000000020E166                 db    ? ;
.bss:000000000020E167                 db    ? ;
.bss:000000000020E168                 db    ? ;
.bss:000000000020E169                 db    ? ;
.bss:000000000020E16A                 db    ? ;
.bss:000000000020E16B                 db    ? ;
.bss:000000000020E16C                 db    ? ;
.bss:000000000020E16D                 db    ? ;
.bss:000000000020E16E                 db    ? ;
.bss:000000000020E16F                 db    ? ;
.bss:000000000020E170                 db    ? ;
.bss:000000000020E171                 db    ? ;
.bss:000000000020E172                 db    ? ;
.bss:000000000020E173                 db    ? ;
.bss:000000000020E174                 db    ? ;
.bss:000000000020E175                 db    ? ;
.bss:000000000020E176                 db    ? ;
.bss:000000000020E177                 db    ? ;
.bss:000000000020E178                 db    ? ;
.bss:000000000020E179                 db    ? ;
.bss:000000000020E17A                 db    ? ;
.bss:000000000020E17B                 db    ? ;
.bss:000000000020E17C                 db    ? ;
.bss:000000000020E17D                 db    ? ;
.bss:000000000020E17E                 db    ? ;
.bss:000000000020E17F                 db    ? ;
.bss:000000000020E180                 db    ? ;
.bss:000000000020E181                 db    ? ;
.bss:000000000020E182                 db    ? ;
.bss:000000000020E183                 db    ? ;
.bss:000000000020E184                 db    ? ;
.bss:000000000020E185                 db    ? ;
.bss:000000000020E186                 db    ? ;
.bss:000000000020E187                 db    ? ;
.bss:000000000020E188                 db    ? ;
.bss:000000000020E189                 db    ? ;
.bss:000000000020E18A                 db    ? ;
.bss:000000000020E18B                 db    ? ;
.bss:000000000020E18C                 db    ? ;
.bss:000000000020E18D                 db    ? ;
.bss:000000000020E18E                 db    ? ;
.bss:000000000020E18F                 db    ? ;
.bss:000000000020E190                 db    ? ;
.bss:000000000020E191                 db    ? ;
.bss:000000000020E192                 db    ? ;
.bss:000000000020E193                 db    ? ;
.bss:000000000020E194                 db    ? ;
.bss:000000000020E195                 db    ? ;
.bss:000000000020E196                 db    ? ;
.bss:000000000020E197                 db    ? ;
.bss:000000000020E198                 db    ? ;
.bss:000000000020E199                 db    ? ;
.bss:000000000020E19A                 db    ? ;
.bss:000000000020E19B                 db    ? ;
.bss:000000000020E19C                 db    ? ;
.bss:000000000020E19D                 db    ? ;
.bss:000000000020E19E                 db    ? ;
.bss:000000000020E19F                 db    ? ;
.bss:000000000020E1A0                 db    ? ;
.bss:000000000020E1A1                 db    ? ;
.bss:000000000020E1A2                 db    ? ;
.bss:000000000020E1A3                 db    ? ;
.bss:000000000020E1A4                 db    ? ;
.bss:000000000020E1A5                 db    ? ;
.bss:000000000020E1A6                 db    ? ;
.bss:000000000020E1A7                 db    ? ;
.bss:000000000020E1A8                 db    ? ;
.bss:000000000020E1A9                 db    ? ;
.bss:000000000020E1AA                 db    ? ;
.bss:000000000020E1AB                 db    ? ;
.bss:000000000020E1AC                 db    ? ;
.bss:000000000020E1AD                 db    ? ;
.bss:000000000020E1AE                 db    ? ;
.bss:000000000020E1AF                 db    ? ;
.bss:000000000020E1B0                 db    ? ;
.bss:000000000020E1B1                 db    ? ;
.bss:000000000020E1B2                 db    ? ;
.bss:000000000020E1B3                 db    ? ;
.bss:000000000020E1B4                 db    ? ;
.bss:000000000020E1B5                 db    ? ;
.bss:000000000020E1B6                 db    ? ;
.bss:000000000020E1B7                 db    ? ;
.bss:000000000020E1B8                 db    ? ;
.bss:000000000020E1B9                 db    ? ;
.bss:000000000020E1BA                 db    ? ;
.bss:000000000020E1BB                 db    ? ;
.bss:000000000020E1BC                 db    ? ;
.bss:000000000020E1BD                 db    ? ;
.bss:000000000020E1BE                 db    ? ;
.bss:000000000020E1BF                 db    ? ;
.bss:000000000020E1C0                 db    ? ;
.bss:000000000020E1C1                 db    ? ;
.bss:000000000020E1C2                 db    ? ;
.bss:000000000020E1C3                 db    ? ;
.bss:000000000020E1C4                 db    ? ;
.bss:000000000020E1C5                 db    ? ;
.bss:000000000020E1C6                 db    ? ;
.bss:000000000020E1C7                 db    ? ;
.bss:000000000020E1C8                 db    ? ;
.bss:000000000020E1C9                 db    ? ;
.bss:000000000020E1CA                 db    ? ;
.bss:000000000020E1CB                 db    ? ;
.bss:000000000020E1CC                 db    ? ;
.bss:000000000020E1CD                 db    ? ;
.bss:000000000020E1CE                 db    ? ;
.bss:000000000020E1CF                 db    ? ;
.bss:000000000020E1D0                 db    ? ;
.bss:000000000020E1D1                 db    ? ;
.bss:000000000020E1D2                 db    ? ;
.bss:000000000020E1D3                 db    ? ;
.bss:000000000020E1D4                 db    ? ;
.bss:000000000020E1D5                 db    ? ;
.bss:000000000020E1D6                 db    ? ;
.bss:000000000020E1D7                 db    ? ;
.bss:000000000020E1D8                 db    ? ;
.bss:000000000020E1D9                 db    ? ;
.bss:000000000020E1DA                 db    ? ;
.bss:000000000020E1DB                 db    ? ;
.bss:000000000020E1DC                 db    ? ;
.bss:000000000020E1DD                 db    ? ;
.bss:000000000020E1DE                 db    ? ;
.bss:000000000020E1DF                 db    ? ;
.bss:000000000020E1E0                 db    ? ;
.bss:000000000020E1E1                 db    ? ;
.bss:000000000020E1E2                 db    ? ;
.bss:000000000020E1E3                 db    ? ;
.bss:000000000020E1E4                 db    ? ;
.bss:000000000020E1E5                 db    ? ;
.bss:000000000020E1E6                 db    ? ;
.bss:000000000020E1E7                 db    ? ;
.bss:000000000020E1E8                 db    ? ;
.bss:000000000020E1E9                 db    ? ;
.bss:000000000020E1EA                 db    ? ;
.bss:000000000020E1EB                 db    ? ;
.bss:000000000020E1EC                 db    ? ;
.bss:000000000020E1ED                 db    ? ;
.bss:000000000020E1EE                 db    ? ;
.bss:000000000020E1EF                 db    ? ;
.bss:000000000020E1F0                 db    ? ;
.bss:000000000020E1F1                 db    ? ;
.bss:000000000020E1F2                 db    ? ;
.bss:000000000020E1F3                 db    ? ;
.bss:000000000020E1F4                 db    ? ;
.bss:000000000020E1F5                 db    ? ;
.bss:000000000020E1F6                 db    ? ;
.bss:000000000020E1F7                 db    ? ;
.bss:000000000020E1F8                 db    ? ;
.bss:000000000020E1F9                 db    ? ;
.bss:000000000020E1FA                 db    ? ;
.bss:000000000020E1FB                 db    ? ;
.bss:000000000020E1FC                 db    ? ;
.bss:000000000020E1FD                 db    ? ;
.bss:000000000020E1FE                 db    ? ;
.bss:000000000020E1FF                 db    ? ;
.bss:000000000020E200                 db    ? ;
.bss:000000000020E201                 db    ? ;
.bss:000000000020E202                 db    ? ;
.bss:000000000020E203                 db    ? ;
.bss:000000000020E204                 db    ? ;
.bss:000000000020E205                 db    ? ;
.bss:000000000020E206                 db    ? ;
.bss:000000000020E207                 db    ? ;
.bss:000000000020E208                 db    ? ;
.bss:000000000020E209                 db    ? ;
.bss:000000000020E20A                 db    ? ;
.bss:000000000020E20B                 db    ? ;
.bss:000000000020E20C                 db    ? ;
.bss:000000000020E20D                 db    ? ;
.bss:000000000020E20E                 db    ? ;
.bss:000000000020E20F                 db    ? ;
.bss:000000000020E210                 db    ? ;
.bss:000000000020E211                 db    ? ;
.bss:000000000020E212                 db    ? ;
.bss:000000000020E213                 db    ? ;
.bss:000000000020E214                 db    ? ;
.bss:000000000020E215                 db    ? ;
.bss:000000000020E216                 db    ? ;
.bss:000000000020E217                 db    ? ;
.bss:000000000020E218                 db    ? ;
.bss:000000000020E219                 db    ? ;
.bss:000000000020E21A                 db    ? ;
.bss:000000000020E21B                 db    ? ;
.bss:000000000020E21C                 db    ? ;
.bss:000000000020E21D                 db    ? ;
.bss:000000000020E21E                 db    ? ;
.bss:000000000020E21F                 db    ? ;
.bss:000000000020E220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020E220                                         ; get_quoting_style↑o ...
.bss:000000000020E230 xmmword_20E230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020E230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020E240 xmmword_20E240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020E240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020E250 qword_20E250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020E250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020E258 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020E258                                         ; rpl_fcntl:loc_8FDF↑w ...
.bss:000000000020E25C                 align 20h
.bss:000000000020E25C _bss            ends
.bss:000000000020E25C
.prgend:000000000020E260 ; ===========================================================================
.prgend:000000000020E260
.prgend:000000000020E260 ; Segment type: Zero-length
.prgend:000000000020E260 _prgend         segment byte public '' use64
.prgend:000000000020E260 _end            label byte
.prgend:000000000020E260 _prgend         ends
.prgend:000000000020E260
extern:000000000020E268 ; ===========================================================================
extern:000000000020E268
extern:000000000020E268 ; Segment type: Externs
extern:000000000020E268 ; extern
extern:000000000020E268 ; char *getenv(const char *name)
extern:000000000020E268                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020E268                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020E270 ; void free(void *ptr)
extern:000000000020E270                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020E270                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020E278 ; void __noreturn abort(void)
extern:000000000020E278                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020E278                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020E280 ; int *_errno_location(void)
extern:000000000020E280                 extrn __errno_location:near
extern:000000000020E280                                         ; CODE XREF: ___errno_location↑j
extern:000000000020E280                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020E288 ; int fdatasync(int fildes)
extern:000000000020E288                 extrn fdatasync:near    ; CODE XREF: _fdatasync↑j
extern:000000000020E288                                         ; DATA XREF: .got:fdatasync_ptr↑o
extern:000000000020E290 ; int unlink(const char *name)
extern:000000000020E290                 extrn unlink:near       ; CODE XREF: _unlink↑j
extern:000000000020E290                                         ; DATA XREF: .got:unlink_ptr↑o
extern:000000000020E298 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020E298                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020E298                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020E2A0 ; void __noreturn exit(int status)
extern:000000000020E2A0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020E2A0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020E2A8 ; size_t _fpending(FILE *fp)
extern:000000000020E2A8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020E2A8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020E2B0                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:000000000020E2B0                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:000000000020E2B8 ; int isatty(int fd)
extern:000000000020E2B8                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:000000000020E2B8                                         ; DATA XREF: .got:isatty_ptr↑o
extern:000000000020E2C0 ; struct lconv *localeconv(void)
extern:000000000020E2C0                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:000000000020E2C0                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:000000000020E2C8 ; int fcntl(int fd, int cmd, ...)
extern:000000000020E2C8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020E2C8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020E2D0 ; ssize_t write(int fd, const void *buf, size_t n)
extern:000000000020E2D0                 extrn write:near        ; CODE XREF: _write↑j
extern:000000000020E2D0                                         ; DATA XREF: .got:write_ptr↑o
extern:000000000020E2D8 ; __pid_t getpid(void)
extern:000000000020E2D8                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:000000000020E2D8                                         ; DATA XREF: .got:getpid_ptr↑o
extern:000000000020E2E0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020E2E0                 extrn fread_unlocked:near
extern:000000000020E2E0                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000020E2E0                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000020E2E8 ; char *textdomain(const char *domainname)
extern:000000000020E2E8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020E2E8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020E2F0 ; int fclose(FILE *stream)
extern:000000000020E2F0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020E2F0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020E2F8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020E2F8                 extrn bindtextdomain:near
extern:000000000020E2F8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020E2F8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020E300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020E300                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020E300                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020E308 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020E308                 extrn __ctype_get_mb_cur_max:near
extern:000000000020E308                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020E308                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020E310 ; size_t strlen(const char *s)
extern:000000000020E310                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020E310                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020E318                 extrn __stack_chk_fail:near
extern:000000000020E318                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020E318                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020E320 ; __uid_t getuid(void)
extern:000000000020E320                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:000000000020E320                                         ; DATA XREF: .got:getuid_ptr↑o
extern:000000000020E328 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020E328                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020E328                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020E330 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020E330                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020E330                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020E338 ; char *strchr(const char *s, int c)
extern:000000000020E338                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020E338                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020E340 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020E340                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020E340                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020E348 ; int _overflow(_IO_FILE *, int)
extern:000000000020E348                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020E348                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020E350 ; char *strrchr(const char *s, int c)
extern:000000000020E350                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020E350                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020E358 ; int ftruncate(int fd, __off_t length)
extern:000000000020E358                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:000000000020E358                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:000000000020E360 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020E360                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020E360                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020E368 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:000000000020E368                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:000000000020E368                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:000000000020E370 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020E370                 extrn __assert_fail:near
extern:000000000020E370                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020E370                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020E378 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020E378                 extrn __strtoul_internal:near
extern:000000000020E378                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020E378                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020E380 ; void *memset(void *s, int c, size_t n)
extern:000000000020E380                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020E380                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020E388 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:000000000020E388                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:000000000020E388                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:000000000020E390 ; int close(int fd)
extern:000000000020E390                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020E390                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020E398 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020E398                 extrn __libc_start_main:near
extern:000000000020E398                                         ; CODE XREF: start+24↑p
extern:000000000020E398                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020E3A0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020E3A0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020E3A0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020E3A8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020E3A8                 extrn fputs_unlocked:near
extern:000000000020E3A8                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020E3A8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020E3B0 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020E3B0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020E3B0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020E3B8 ; int strcmp(const char *s1, const char *s2)
extern:000000000020E3B8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020E3B8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020E3C0                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:000000000020E3C0                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:000000000020E3C8 ; __int64 syscall(__int64 sysno, ...)
extern:000000000020E3C8                 extrn syscall:near      ; CODE XREF: _syscall↑j
extern:000000000020E3C8                                         ; DATA XREF: .got:syscall_ptr↑o
extern:000000000020E3D0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020E3D0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020E3D0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020E3D8 ; time_t time(time_t *timer)
extern:000000000020E3D8                 extrn time:near         ; CODE XREF: _time↑j
extern:000000000020E3D8                                         ; DATA XREF: .got:time_ptr↑o
extern:000000000020E3E0 ; int fileno(FILE *stream)
extern:000000000020E3E0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020E3E0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020E3E8 ; __gid_t getgid(void)
extern:000000000020E3E8                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:000000000020E3E8                                         ; DATA XREF: .got:getgid_ptr↑o
extern:000000000020E3F0 ; void sync(void)
extern:000000000020E3F0                 extrn sync:near         ; CODE XREF: _sync↑j
extern:000000000020E3F0                                         ; DATA XREF: .got:sync_ptr↑o
extern:000000000020E3F8 ; void *malloc(size_t size)
extern:000000000020E3F8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020E3F8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020E400 ; int fflush(FILE *stream)
extern:000000000020E400                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020E400                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020E408 ; char *nl_langinfo(nl_item item)
extern:000000000020E408                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020E408                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020E410 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020E410                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020E410                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020E418 ; int _freading(FILE *fp)
extern:000000000020E418                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020E418                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020E420 ; void *realloc(void *ptr, size_t size)
extern:000000000020E420                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020E420                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020E428                 extrn __strcpy_chk:near ; CODE XREF: ___strcpy_chk↑j
extern:000000000020E428                                         ; DATA XREF: .got:__strcpy_chk_ptr↑o
extern:000000000020E430 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020E430                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020E430                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020E438 ; char *setlocale(int category, const char *locale)
extern:000000000020E438                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020E438                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020E440                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020E440                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020E448 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000020E448                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000020E448                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000020E450 ; int chmod(const char *file, __mode_t mode)
extern:000000000020E450                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:000000000020E450                                         ; DATA XREF: .got:chmod_ptr↑o
extern:000000000020E458 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020E458                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020E458                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020E460 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020E460                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020E460                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020E468 ; int fsync(int fd)
extern:000000000020E468                 extrn fsync:near        ; CODE XREF: _fsync↑j
extern:000000000020E468                                         ; DATA XREF: .got:fsync_ptr↑o
extern:000000000020E470                 extrn __explicit_bzero_chk:near
extern:000000000020E470                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:000000000020E470                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:000000000020E478 ; int open(const char *file, int oflag, ...)
extern:000000000020E478                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020E478                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020E480 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020E480                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020E480                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020E488 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020E488                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020E488                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020E490 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020E490                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020E490                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020E498 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
extern:000000000020E498                 extrn renameat:near     ; CODE XREF: _renameat↑j
extern:000000000020E498                                         ; DATA XREF: .got:renameat_ptr↑o
extern:000000000020E4A0 ; int getpagesize(void)
extern:000000000020E4A0                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:000000000020E4A0                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:000000000020E4A8 ; __pid_t getppid(void)
extern:000000000020E4A8                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:000000000020E4A8                                         ; DATA XREF: .got:getppid_ptr↑o
extern:000000000020E4B0 ; void __noreturn exit(int status)
extern:000000000020E4B0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020E4B0                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020E4B8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020E4B8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020E4B8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020E4C0                 extrn __fprintf_chk:near
extern:000000000020E4C0                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020E4C0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020E4C8 ; int mbsinit(const mbstate_t *ps)
extern:000000000020E4C8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020E4C8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020E4D0 ; int iswprint(wint_t wc)
extern:000000000020E4D0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020E4D0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020E4D8 ; int __fastcall __cxa_finalize(void *)
extern:000000000020E4D8                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020E4D8                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020E4D8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020E4E0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020E4E0                 extrn __ctype_b_loc:near
extern:000000000020E4E0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020E4E0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020E4E8                 extrn __sprintf_chk:near
extern:000000000020E4E8                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000020E4E8                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000020E4F0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020E4F0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020E4F8                 extrn __gmon_start__:near ; weak
extern:000000000020E4F8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020E4F8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020E500                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020E500                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020E500
extern:000000000020E500
extern:000000000020E500                 end start
