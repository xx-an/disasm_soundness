LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 1E40A43ED0B107804A552FE486551C8B1EB4564A807D4257163250DB661A181A
LOAD:0000000000000000 ; Input MD5    : 0288EFBF5381F97BB47F06C08A71067F
LOAD:0000000000000000 ; Input CRC32  : 5607209E
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/echo
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'echo.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 22450h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6698h                ; Size in file image
LOAD:00000000000000D8                 dq 6698h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6C10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206C10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 470h                 ; Size in file image
LOAD:0000000000000110                 dq 608h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5990h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5990h                ; Physical address
LOAD:00000000000001B0                 dq 244h                 ; Size in file image
LOAD:00000000000001B8                 dq 244h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6C10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206C10h              ; Physical address
LOAD:0000000000000220                 dq 3F0h                 ; Size in file image
LOAD:0000000000000228                 dq 3F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 4Ah, 3, 0FFh, 18h, 8, 1Ch, 0C9h, 33h, 0FDh, 0CBh, 7Fh ; Desc
LOAD:0000000000000284                 db 82h, 0ABh, 0AAh, 67h, 75h, 3Dh, 0EAh, 0AEh, 0BFh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 30h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000404904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 30h, 31h, 0
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 0
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aGetenv - offset byte_7E8, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aFree - offset byte_7E8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aAbort - offset byte_7E8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aErrnoLocation - offset byte_7E8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aStrncmp - offset byte_7E8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aItmDeregistert - offset byte_7E8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aExit - offset byte_7E8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000380                            0>
LOAD:0000000000000398                 Elf64_Sym <offset aFpending - offset byte_7E8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7E8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aFclose - offset byte_7E8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain - offset byte_7E8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aDcgettext - offset byte_7E8, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7E8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStrlen - offset byte_7E8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aStackChkFail - offset byte_7E8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aMbrtowc - offset byte_7E8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aOverflow - offset byte_7E8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStrrchr - offset byte_7E8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aLseek - offset byte_7E8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A0                            0>
LOAD:00000000000004B8                 Elf64_Sym <offset aAssertFail - offset byte_7E8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aMemset - offset byte_7E8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aLibcStartMain - offset byte_7E8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aMemcmp - offset byte_7E8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aFputsUnlocked - offset byte_7E8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aCalloc - offset byte_7E8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aStrcmp - offset byte_7E8, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aGmonStart - offset byte_7E8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aMemcpy - offset byte_7E8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aFileno - offset byte_7E8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aMalloc - offset byte_7E8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aFflush - offset byte_7E8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aNlLanginfo - offset byte_7E8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aFreading - offset byte_7E8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aRealloc - offset byte_7E8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aSetlocale - offset byte_7E8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aPrintfChk - offset byte_7E8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aError - offset byte_7E8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000650                            0>
LOAD:0000000000000668                 Elf64_Sym <offset aFseeko - offset byte_7E8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aCxaAtexit - offset byte_7E8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aExit+1 - offset byte_7E8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aFwrite - offset byte_7E8, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFprintfChk - offset byte_7E8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aItmRegistertmc - offset byte_7E8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aMbsinit - offset byte_7E8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aIswprint - offset byte_7E8, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aCxaFinalize - offset byte_7E8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aCtypeBLoc - offset byte_7E8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aStdout - offset byte_7E8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000758                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000770                 Elf64_Sym <offset aProgname - offset byte_7E8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000770                            offset __bss_start, 8>
LOAD:0000000000000788                 Elf64_Sym <offset aProgramInvocat - offset byte_7E8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000788                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A0                 Elf64_Sym <offset aPrognameFull - offset byte_7E8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007A0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007B8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7E8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007B8                            offset __bss_start, 8>
LOAD:00000000000007D0                 Elf64_Sym <offset aStderr - offset byte_7E8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007D0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007E8 ; ELF String Table
LOAD:00000000000007E8 byte_7E8        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000007E8                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000007E9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000AE0↓o
LOAD:00000000000007F3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:00000000000007FA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000807 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000811 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000819 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000821 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000829 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000833 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000839 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000440↑o
LOAD:000000000000084A aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000853 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000608↑o
LOAD:000000000000085B aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000861 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000861                                         ; LOAD:0000000000000698↑o
LOAD:0000000000000867 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000867                                         ; DATA XREF: LOAD:0000000000000788↑o
LOAD:000000000000087F aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:000000000000088D aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000088D                                         ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008A4 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:00000000000008AB aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000008B2 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000008B9 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000008CA aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:00000000000008D1 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:00000000000008DF aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000758↑o
LOAD:00000000000008E6 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008EC aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:00000000000008F3 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:00000000000008FA aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000901 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000909 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000915 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000923 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:000000000000092A aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000935 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:000000000000093C aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000943 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:000000000000094A aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000955 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000955                                         ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000973 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000982 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000982                                         ; LOAD:00000000000003B0↑o
LOAD:0000000000000991 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000998 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000998                                         ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009AA aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009B1 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000009BC aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000009CB aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000308↑o
LOAD:00000000000009D0 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009DB aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000009EB aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000680↑o
LOAD:00000000000009F8 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000AF0↓o
LOAD:0000000000000A02 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B00↓o
LOAD:0000000000000A0E aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B10↓o
LOAD:0000000000000A19 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B20↓o
LOAD:0000000000000A23 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B30↓o
LOAD:0000000000000A2F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A2F                                         ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000A4B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000A5A aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A5A                                         ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A74 ; ELF GNU Symbol Version Table
LOAD:0000000000000A74                 dw 0
LOAD:0000000000000A76                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000A78                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A7A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A7C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A7E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A80                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A82                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A84                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A86                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A88                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A8A                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A8C                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A8E                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A90                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A92                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A94                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AAC                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AAE                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000ABE                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000ACA                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000ACC                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AD4                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000AE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000AE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7E8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000AF0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7E8, \ ; "GLIBC_2.3"
LOAD:0000000000000AF0                                10h>
LOAD:0000000000000B00                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7E8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B00                                10h>
LOAD:0000000000000B10                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7E8, \ ; "GLIBC_2.14"
LOAD:0000000000000B10                                10h>
LOAD:0000000000000B20                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7E8, \ ; "GLIBC_2.4"
LOAD:0000000000000B20                                10h>
LOAD:0000000000000B30                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7E8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B40 ; ELF RELA Relocation Table
LOAD:0000000000000B40                 Elf64_Rela <206C10h, 8, 1A90h> ; R_X86_64_RELATIVE +1A90h
LOAD:0000000000000B58                 Elf64_Rela <206C18h, 8, 1A50h> ; R_X86_64_RELATIVE +1A50h
LOAD:0000000000000B70                 Elf64_Rela <206C20h, 8, 5139h> ; R_X86_64_RELATIVE +5139h
LOAD:0000000000000B88                 Elf64_Rela <206C28h, 8, 5141h> ; R_X86_64_RELATIVE +5141h
LOAD:0000000000000BA0                 Elf64_Rela <206C30h, 8, 5147h> ; R_X86_64_RELATIVE +5147h
LOAD:0000000000000BB8                 Elf64_Rela <206C38h, 8, 5154h> ; R_X86_64_RELATIVE +5154h
LOAD:0000000000000BD0                 Elf64_Rela <206C40h, 8, 5161h> ; R_X86_64_RELATIVE +5161h
LOAD:0000000000000BE8                 Elf64_Rela <206C48h, 8, 4B26h> ; R_X86_64_RELATIVE +4B26h
LOAD:0000000000000C00                 Elf64_Rela <206C50h, 8, 5175h> ; R_X86_64_RELATIVE +5175h
LOAD:0000000000000C18                 Elf64_Rela <206C58h, 8, 515Ah> ; R_X86_64_RELATIVE +515Ah
LOAD:0000000000000C30                 Elf64_Rela <206C60h, 8, 4C06h> ; R_X86_64_RELATIVE +4C06h
LOAD:0000000000000C48                 Elf64_Rela <206C68h, 8, 517Dh> ; R_X86_64_RELATIVE +517Dh
LOAD:0000000000000C60                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000C78                 Elf64_Rela <207010h, 8, 50C3h> ; R_X86_64_RELATIVE +50C3h
LOAD:0000000000000C90                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000CA8                 Elf64_Rela <207078h, 8, 2070E0h> ; R_X86_64_RELATIVE +2070E0h
LOAD:0000000000000CC0                 Elf64_Rela <206FD0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000CD8                 Elf64_Rela <206FD8h, 1600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000CF0                 Elf64_Rela <206FE0h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D08                 Elf64_Rela <206FE8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D20                 Elf64_Rela <206FF0h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000D38                 Elf64_Rela <207080h, 3100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000D50                 Elf64_Rela <207088h, 3000000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000D68                 Elf64_Rela <207090h, 3300000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000D80                 Elf64_Rela <2070A0h, 3500000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000D98 ; ELF JMPREL Relocation Table
LOAD:0000000000000D98                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000000DB0                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000DC8                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000DE0                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000DF8                 Elf64_Rela <206EA0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E10                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000E28                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000E40                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000E58                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000E70                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000E88                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000EA0                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000EB8                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000ED0                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000EE8                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000F00                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000000F18                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000F30                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000F48                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000000F60                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000F78                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000000F90                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000000FA8                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000000FC0                 Elf64_Rela <206F38h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000000FD8                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000000FF0                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001008                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001020                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001038                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001050                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001068                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001080                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001098                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000010B0                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000010C8                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000010E0                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000010F8                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001110                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001128                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001140                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001158                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001170                 Elf64_Rela <206FC8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001170 LOAD            ends
LOAD:0000000000001170
.init:0000000000001188 ; ===========================================================================
.init:0000000000001188
.init:0000000000001188 ; Segment type: Pure code
.init:0000000000001188 ; Segment permissions: Read/Execute
.init:0000000000001188 _init           segment dword public 'CODE' use64
.init:0000000000001188                 assume cs:_init
.init:0000000000001188                 ;org 1188h
.init:0000000000001188                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001188
.init:0000000000001188 ; =============== S U B R O U T I N E =======================================
.init:0000000000001188
.init:0000000000001188
.init:0000000000001188                 public _init_proc
.init:0000000000001188 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001188                 sub     rsp, 8          ; _init
.init:000000000000118C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001193                 test    rax, rax
.init:0000000000001196                 jz      short loc_119A
.init:0000000000001198                 call    rax ; __gmon_start__
.init:000000000000119A
.init:000000000000119A loc_119A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000119A                 add     rsp, 8
.init:000000000000119E                 retn
.init:000000000000119E _init_proc      endp
.init:000000000000119E
.init:000000000000119E _init           ends
.init:000000000000119E
LOAD:000000000000119F ; ===========================================================================
LOAD:000000000000119F
LOAD:000000000000119F ; Segment type: Pure code
LOAD:000000000000119F ; Segment permissions: Read/Execute
LOAD:000000000000119F LOAD            segment byte public 'CODE' use64
LOAD:000000000000119F                 assume cs:LOAD
LOAD:000000000000119F                 ;org 119Fh
LOAD:000000000000119F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000119F                 align 20h
LOAD:000000000000119F LOAD            ends
LOAD:000000000000119F
.plt:00000000000011A0 ; ===========================================================================
.plt:00000000000011A0
.plt:00000000000011A0 ; Segment type: Pure code
.plt:00000000000011A0 ; Segment permissions: Read/Execute
.plt:00000000000011A0 _plt            segment para public 'CODE' use64
.plt:00000000000011A0                 assume cs:_plt
.plt:00000000000011A0                 ;org 11A0h
.plt:00000000000011A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000011A0
.plt:00000000000011A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011A0
.plt:00000000000011A0
.plt:00000000000011A0 sub_11A0        proc near               ; CODE XREF: .plt:00000000000011BB↓j
.plt:00000000000011A0                                         ; .plt:00000000000011CB↓j ...
.plt:00000000000011A0 ; __unwind {
.plt:00000000000011A0                 push    cs:qword_206E70
.plt:00000000000011A6                 jmp     cs:qword_206E78
.plt:00000000000011A6 sub_11A0        endp
.plt:00000000000011A6
.plt:00000000000011A6 ; ---------------------------------------------------------------------------
.plt:00000000000011AC                 align 10h
.plt:00000000000011B0
.plt:00000000000011B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011B0
.plt:00000000000011B0 ; Attributes: thunk
.plt:00000000000011B0
.plt:00000000000011B0 ; char *getenv(const char *name)
.plt:00000000000011B0 _getenv         proc near               ; CODE XREF: main+1A↓p
.plt:00000000000011B0                 jmp     cs:getenv_ptr
.plt:00000000000011B0 _getenv         endp
.plt:00000000000011B0
.plt:00000000000011B6 ; ---------------------------------------------------------------------------
.plt:00000000000011B6                 push    0
.plt:00000000000011BB                 jmp     sub_11A0
.plt:00000000000011C0
.plt:00000000000011C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011C0
.plt:00000000000011C0 ; Attributes: thunk
.plt:00000000000011C0
.plt:00000000000011C0 ; void free(void *ptr)
.plt:00000000000011C0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000011C0                                         ; quotearg_free+37↓p ...
.plt:00000000000011C0                 jmp     cs:free_ptr
.plt:00000000000011C0 _free           endp
.plt:00000000000011C0
.plt:00000000000011C6 ; ---------------------------------------------------------------------------
.plt:00000000000011C6                 push    1
.plt:00000000000011CB                 jmp     sub_11A0
.plt:00000000000011D0
.plt:00000000000011D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011D0
.plt:00000000000011D0 ; Attributes: noreturn thunk
.plt:00000000000011D0
.plt:00000000000011D0 ; void __noreturn abort(void)
.plt:00000000000011D0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000011D0                                         ; quotearg_buffer_restyled:def_2211↓p ...
.plt:00000000000011D0                 jmp     cs:abort_ptr
.plt:00000000000011D0 _abort          endp
.plt:00000000000011D0
.plt:00000000000011D6 ; ---------------------------------------------------------------------------
.plt:00000000000011D6                 push    2
.plt:00000000000011DB                 jmp     sub_11A0
.plt:00000000000011E0
.plt:00000000000011E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011E0
.plt:00000000000011E0 ; Attributes: thunk
.plt:00000000000011E0
.plt:00000000000011E0 ; int *__errno_location(void)
.plt:00000000000011E0 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:00000000000011E0                                         ; quotearg_n_options+1C↓p ...
.plt:00000000000011E0                 jmp     cs:__errno_location_ptr
.plt:00000000000011E0 ___errno_location endp
.plt:00000000000011E0
.plt:00000000000011E6 ; ---------------------------------------------------------------------------
.plt:00000000000011E6                 push    3
.plt:00000000000011EB                 jmp     sub_11A0
.plt:00000000000011F0
.plt:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011F0
.plt:00000000000011F0 ; Attributes: thunk
.plt:00000000000011F0
.plt:00000000000011F0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000011F0 _strncmp        proc near               ; CODE XREF: usage+2AC↓p
.plt:00000000000011F0                                         ; usage+36F↓p
.plt:00000000000011F0                 jmp     cs:strncmp_ptr
.plt:00000000000011F0 _strncmp        endp
.plt:00000000000011F0
.plt:00000000000011F6 ; ---------------------------------------------------------------------------
.plt:00000000000011F6                 push    4
.plt:00000000000011FB                 jmp     sub_11A0
.plt:0000000000001200
.plt:0000000000001200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001200
.plt:0000000000001200 ; Attributes: noreturn thunk
.plt:0000000000001200
.plt:0000000000001200 ; void __noreturn _exit(int status)
.plt:0000000000001200 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001200                 jmp     cs:_exit_ptr
.plt:0000000000001200 __exit          endp
.plt:0000000000001200
.plt:0000000000001206 ; ---------------------------------------------------------------------------
.plt:0000000000001206                 push    5
.plt:000000000000120B                 jmp     sub_11A0
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210 ; Attributes: thunk
.plt:0000000000001210
.plt:0000000000001210 ; size_t __fpending(FILE *fp)
.plt:0000000000001210 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001210                 jmp     cs:__fpending_ptr
.plt:0000000000001210 ___fpending     endp
.plt:0000000000001210
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:0000000000001216                 push    6
.plt:000000000000121B                 jmp     sub_11A0
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: thunk
.plt:0000000000001220
.plt:0000000000001220 ; char *textdomain(const char *domainname)
.plt:0000000000001220 _textdomain     proc near               ; CODE XREF: main+82↓p
.plt:0000000000001220                                         ; main+151↓p
.plt:0000000000001220                 jmp     cs:textdomain_ptr
.plt:0000000000001220 _textdomain     endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    7
.plt:000000000000122B                 jmp     sub_11A0
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; int fclose(FILE *stream)
.plt:0000000000001230 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001230                                         ; rpl_fclose+6B↓j
.plt:0000000000001230                 jmp     cs:fclose_ptr
.plt:0000000000001230 _fclose         endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    8
.plt:000000000000123B                 jmp     sub_11A0
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: thunk
.plt:0000000000001240
.plt:0000000000001240 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001240 _bindtextdomain proc near               ; CODE XREF: main+76↓p
.plt:0000000000001240                                         ; main+145↓p
.plt:0000000000001240                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001240 _bindtextdomain endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    9
.plt:000000000000124B                 jmp     sub_11A0
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001250 _dcgettext      proc near               ; CODE XREF: usage+50↓p
.plt:0000000000001250                                         ; usage+7F↓p ...
.plt:0000000000001250                 jmp     cs:dcgettext_ptr
.plt:0000000000001250 _dcgettext      endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    0Ah
.plt:000000000000125B                 jmp     sub_11A0
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001260 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001260                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001260 ___ctype_get_mb_cur_max endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    0Bh
.plt:000000000000126B                 jmp     sub_11A0
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; size_t strlen(const char *s)
.plt:0000000000001270 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001270                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001270                 jmp     cs:strlen_ptr
.plt:0000000000001270 _strlen         endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    0Ch
.plt:000000000000127B                 jmp     sub_11A0
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: noreturn thunk
.plt:0000000000001280
.plt:0000000000001280 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_3373↓p
.plt:0000000000001280                                         ; quotearg_n_style:loc_3999↓p ...
.plt:0000000000001280                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001280 ___stack_chk_fail endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    0Dh
.plt:000000000000128B                 jmp     sub_11A0
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001290 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001290                 jmp     cs:mbrtowc_ptr
.plt:0000000000001290 _mbrtowc        endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    0Eh
.plt:000000000000129B                 jmp     sub_11A0
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000012A0 ___overflow     proc near               ; CODE XREF: main+3C2↓p
.plt:00000000000012A0                                         ; main+455↓p ...
.plt:00000000000012A0                 jmp     cs:__overflow_ptr
.plt:00000000000012A0 ___overflow     endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    0Fh
.plt:00000000000012AB                 jmp     sub_11A0
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; char *strrchr(const char *s, int c)
.plt:00000000000012B0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000012B0                 jmp     cs:strrchr_ptr
.plt:00000000000012B0 _strrchr        endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    10h
.plt:00000000000012BB                 jmp     sub_11A0
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000012C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000012C0                                         ; rpl_fseeko+3B↓p
.plt:00000000000012C0                 jmp     cs:lseek_ptr
.plt:00000000000012C0 _lseek          endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    11h
.plt:00000000000012CB                 jmp     sub_11A0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: noreturn thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000012D0 ___assert_fail  proc near               ; CODE XREF: usage+36↓p
.plt:00000000000012D0                 jmp     cs:__assert_fail_ptr
.plt:00000000000012D0 ___assert_fail  endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    12h
.plt:00000000000012DB                 jmp     sub_11A0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000012E0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000012E0                                         ; xzalloc+12↓j
.plt:00000000000012E0                 jmp     cs:memset_ptr
.plt:00000000000012E0 _memset         endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    13h
.plt:00000000000012EB                 jmp     sub_11A0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000012F0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000012F0                 jmp     cs:memcmp_ptr
.plt:00000000000012F0 _memcmp         endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    14h
.plt:00000000000012FB                 jmp     sub_11A0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001300 _fputs_unlocked proc near               ; CODE XREF: main+431↓p
.plt:0000000000001300                                         ; usage+8A↓p ...
.plt:0000000000001300                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001300 _fputs_unlocked endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    15h
.plt:000000000000130B                 jmp     sub_11A0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001310 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001310                 jmp     cs:calloc_ptr
.plt:0000000000001310 _calloc         endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    16h
.plt:000000000000131B                 jmp     sub_11A0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001320 _strcmp         proc near               ; CODE XREF: main+3B↓p
.plt:0000000000001320                                         ; main+175↓p ...
.plt:0000000000001320                 jmp     cs:strcmp_ptr
.plt:0000000000001320 _strcmp         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    17h
.plt:000000000000132B                 jmp     sub_11A0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001330 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001330                 jmp     cs:memcpy_ptr
.plt:0000000000001330 _memcpy         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    18h
.plt:000000000000133B                 jmp     sub_11A0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int fileno(FILE *stream)
.plt:0000000000001340 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001340                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001340                 jmp     cs:fileno_ptr
.plt:0000000000001340 _fileno         endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    19h
.plt:000000000000134B                 jmp     sub_11A0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; void *malloc(size_t size)
.plt:0000000000001350 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001350                 jmp     cs:malloc_ptr
.plt:0000000000001350 _malloc         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    1Ah
.plt:000000000000135B                 jmp     sub_11A0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int fflush(FILE *stream)
.plt:0000000000001360 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001360                                         ; rpl_fflush+3B↓j
.plt:0000000000001360                 jmp     cs:fflush_ptr
.plt:0000000000001360 _fflush         endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    1Bh
.plt:000000000000136B                 jmp     sub_11A0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; char *nl_langinfo(nl_item item)
.plt:0000000000001370 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001370                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001370 _nl_langinfo    endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    1Ch
.plt:000000000000137B                 jmp     sub_11A0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; int __freading(FILE *fp)
.plt:0000000000001380 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001380                                         ; rpl_fflush+9↓p
.plt:0000000000001380                 jmp     cs:__freading_ptr
.plt:0000000000001380 ___freading     endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    1Dh
.plt:000000000000138B                 jmp     sub_11A0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001390 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001390                 jmp     cs:realloc_ptr
.plt:0000000000001390 _realloc        endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    1Eh
.plt:000000000000139B                 jmp     sub_11A0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; char *setlocale(int category, const char *locale)
.plt:00000000000013A0 _setlocale      proc near               ; CODE XREF: main+63↓p
.plt:00000000000013A0                                         ; main+132↓p ...
.plt:00000000000013A0                 jmp     cs:setlocale_ptr
.plt:00000000000013A0 _setlocale      endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    1Fh
.plt:00000000000013AB                 jmp     sub_11A0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ___printf_chk   proc near               ; CODE XREF: usage+65↓p
.plt:00000000000013B0                                         ; usage+198↓p ...
.plt:00000000000013B0                 jmp     cs:__printf_chk_ptr
.plt:00000000000013B0 ___printf_chk   endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    20h ; ' '
.plt:00000000000013BB                 jmp     sub_11A0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000013C0 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:00000000000013C0                                         ; close_stdout+9D↓p ...
.plt:00000000000013C0                 jmp     cs:error_ptr
.plt:00000000000013C0 _error          endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    21h ; '!'
.plt:00000000000013CB                 jmp     sub_11A0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000013D0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_484A↓j
.plt:00000000000013D0                 jmp     cs:fseeko_ptr
.plt:00000000000013D0 _fseeko         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    22h ; '"'
.plt:00000000000013DB                 jmp     sub_11A0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000013E0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000013E0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000013E0 ___cxa_atexit   endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    23h ; '#'
.plt:00000000000013EB                 jmp     sub_11A0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: noreturn thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void __noreturn exit(int status)
.plt:00000000000013F0 _exit           proc near               ; CODE XREF: usage+328↓p
.plt:00000000000013F0                 jmp     cs:exit_ptr
.plt:00000000000013F0 _exit           endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    24h ; '$'
.plt:00000000000013FB                 jmp     sub_11A0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001400 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001400                 jmp     cs:fwrite_ptr
.plt:0000000000001400 _fwrite         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    25h ; '%'
.plt:000000000000140B                 jmp     sub_11A0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ___fprintf_chk  proc near               ; CODE XREF: version_etc_arn+37↓p
.plt:0000000000001410                                         ; version_etc_arn+69↓p ...
.plt:0000000000001410                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001410 ___fprintf_chk  endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    26h ; '&'
.plt:000000000000141B                 jmp     sub_11A0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001420 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001420                 jmp     cs:mbsinit_ptr
.plt:0000000000001420 _mbsinit        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    27h ; '''
.plt:000000000000142B                 jmp     sub_11A0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int iswprint(wint_t wc)
.plt:0000000000001430 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001430                 jmp     cs:iswprint_ptr
.plt:0000000000001430 _iswprint       endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    28h ; '('
.plt:000000000000143B                 jmp     sub_11A0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001440 ___ctype_b_loc  proc near               ; CODE XREF: main+32B↓p
.plt:0000000000001440                                         ; quotearg_buffer_restyled+513↓p
.plt:0000000000001440                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001440 ___ctype_b_loc  endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    29h ; ')'
.plt:000000000000144B                 jmp     sub_11A0
.plt:000000000000144B ; } // starts at 11A0
.plt:000000000000144B _plt            ends
.plt:000000000000144B
.plt.got:0000000000001450 ; ===========================================================================
.plt.got:0000000000001450
.plt.got:0000000000001450 ; Segment type: Pure code
.plt.got:0000000000001450 ; Segment permissions: Read/Execute
.plt.got:0000000000001450 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001450                 assume cs:_plt_got
.plt.got:0000000000001450                 ;org 1450h
.plt.got:0000000000001450                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001450
.plt.got:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001450
.plt.got:0000000000001450 ; Attributes: thunk
.plt.got:0000000000001450
.plt.got:0000000000001450 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001450 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001450 ; __unwind {
.plt.got:0000000000001450                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001450 __cxa_finalize  endp
.plt.got:0000000000001450
.plt.got:0000000000001450 ; ---------------------------------------------------------------------------
.plt.got:0000000000001456                 align 8
.plt.got:0000000000001456 ; } // starts at 1450
.plt.got:0000000000001456 _plt_got        ends
.plt.got:0000000000001456
LOAD:0000000000001458 ; ===========================================================================
LOAD:0000000000001458
LOAD:0000000000001458 ; Segment type: Pure code
LOAD:0000000000001458 ; Segment permissions: Read/Execute
LOAD:0000000000001458 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001458                 assume cs:LOAD
LOAD:0000000000001458                 ;org 1458h
LOAD:0000000000001458                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001458                 align 20h
LOAD:0000000000001458 LOAD            ends
LOAD:0000000000001458
.text:0000000000001460 ; ===========================================================================
.text:0000000000001460
.text:0000000000001460 ; Segment type: Pure code
.text:0000000000001460 ; Segment permissions: Read/Execute
.text:0000000000001460 _text           segment para public 'CODE' use64
.text:0000000000001460                 assume cs:_text
.text:0000000000001460                 ;org 1460h
.text:0000000000001460                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001460
.text:0000000000001460 ; =============== S U B R O U T I N E =======================================
.text:0000000000001460
.text:0000000000001460
.text:0000000000001460 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001460                 public main
.text:0000000000001460 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001460
.text:0000000000001460 var_3A          = byte ptr -3Ah
.text:0000000000001460 var_39          = byte ptr -39h
.text:0000000000001460
.text:0000000000001460 ; __unwind {
.text:0000000000001460                 push    r15
.text:0000000000001462                 push    r14
.text:0000000000001464                 mov     r15, rsi
.text:0000000000001467                 push    r13
.text:0000000000001469                 push    r12
.text:000000000000146B                 push    rbp
.text:000000000000146C                 push    rbx
.text:000000000000146D                 mov     ebp, edi
.text:000000000000146F                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000001476                 sub     rsp, 18h
.text:000000000000147A                 call    _getenv
.text:000000000000147F                 test    rax, rax
.text:0000000000001482                 mov     rbx, rax
.text:0000000000001485                 jz      loc_157E
.text:000000000000148B                 cmp     ebp, 1
.text:000000000000148E                 jle     short loc_14A8
.text:0000000000001490                 mov     rdi, [r15+8]    ; s1
.text:0000000000001494                 lea     rsi, s2         ; "-n"
.text:000000000000149B                 call    _strcmp
.text:00000000000014A0                 test    eax, eax
.text:00000000000014A2                 jz      loc_157E
.text:00000000000014A8
.text:00000000000014A8 loc_14A8:                               ; CODE XREF: main+2E↑j
.text:00000000000014A8                 mov     rdi, [r15]
.text:00000000000014AB                 sub     ebp, 1
.text:00000000000014AE                 add     r15, 8
.text:00000000000014B2                 call    set_program_name
.text:00000000000014B7                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000014BE                 mov     edi, 6          ; category
.text:00000000000014C3                 call    _setlocale
.text:00000000000014C8                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000014CF                 lea     rdi, domainname ; "coreutils"
.text:00000000000014D6                 call    _bindtextdomain
.text:00000000000014DB                 lea     rdi, domainname ; "coreutils"
.text:00000000000014E2                 call    _textdomain
.text:00000000000014E7                 lea     rdi, close_stdout
.text:00000000000014EE                 call    atexit
.text:00000000000014F3                 test    ebp, ebp
.text:00000000000014F5                 mov     [rsp+48h+var_3A], 1
.text:00000000000014FA                 jle     loc_16D9
.text:0000000000001500
.text:0000000000001500 loc_1500:                               ; CODE XREF: main+405↓j
.text:0000000000001500                                         ; main+40F↓j
.text:0000000000001500                 lea     r12, jpt_157C
.text:0000000000001507                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001510
.text:0000000000001510 loc_1510:                               ; CODE XREF: main+3FD↓j
.text:0000000000001510                                         ; main+4E3↓j
.text:0000000000001510                 mov     rbx, [r15]
.text:0000000000001513                 jmp     short loc_153D
.text:0000000000001513 ; ---------------------------------------------------------------------------
.text:0000000000001515                 align 8
.text:0000000000001518
.text:0000000000001518 loc_1518:                               ; CODE XREF: main+EF↓j
.text:0000000000001518                                         ; main+2F7↓j ...
.text:0000000000001518                 movzx   ebx, dl
.text:000000000000151B
.text:000000000000151B loc_151B:                               ; CODE XREF: main+26D↓j
.text:000000000000151B                                         ; main+2B4↓j ...
.text:000000000000151B                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001522                 mov     rax, [rdi+28h]
.text:0000000000001526                 cmp     rax, [rdi+30h]
.text:000000000000152A                 jnb     loc_1820
.text:0000000000001530                 lea     rcx, [rax+1]
.text:0000000000001534                 mov     [rdi+28h], rcx
.text:0000000000001538                 mov     [rax], dl
.text:000000000000153A
.text:000000000000153A loc_153A:                               ; CODE XREF: main+3C7↓j
.text:000000000000153A                 mov     rbx, r13
.text:000000000000153D
.text:000000000000153D loc_153D:                               ; CODE XREF: main+B3↑j
.text:000000000000153D                 movzx   edx, byte ptr [rbx]
.text:0000000000001540                 lea     r13, [rbx+1]
.text:0000000000001544                 test    dl, dl
.text:0000000000001546                 jz      loc_1830
.text:000000000000154C                 cmp     dl, 5Ch ; '\'
.text:000000000000154F                 jnz     short loc_1518
.text:0000000000001551                 movzx   r14d, byte ptr [rbx+1]
.text:0000000000001556                 test    r14b, r14b
.text:0000000000001559                 jz      loc_16C8        ; jumptable 000000000000157C case 92
.text:000000000000155F                 lea     eax, [r14-30h]  ; switch 73 cases
.text:0000000000001563                 lea     r13, [rbx+2]
.text:0000000000001567                 mov     ecx, r14d
.text:000000000000156A                 cmp     al, 48h
.text:000000000000156C                 ja      def_157C        ; jumptable 000000000000157C default case, cases 56-91,93-96,100,103-109,111-113,115,117,119
.text:0000000000001572                 movzx   eax, al
.text:0000000000001575                 movsxd  rax, ds:(jpt_157C - 49DCh)[r12+rax*4]
.text:0000000000001579                 add     rax, r12
.text:000000000000157C                 jmp     rax             ; switch jump
.text:000000000000157E ; ---------------------------------------------------------------------------
.text:000000000000157E
.text:000000000000157E loc_157E:                               ; CODE XREF: main+25↑j
.text:000000000000157E                                         ; main+42↑j
.text:000000000000157E                 mov     rdi, [r15]
.text:0000000000001581                 call    set_program_name
.text:0000000000001586                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000158D                 mov     edi, 6          ; category
.text:0000000000001592                 call    _setlocale
.text:0000000000001597                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000159E                 lea     rdi, domainname ; "coreutils"
.text:00000000000015A5                 call    _bindtextdomain
.text:00000000000015AA                 lea     rdi, domainname ; "coreutils"
.text:00000000000015B1                 call    _textdomain
.text:00000000000015B6                 lea     rdi, close_stdout
.text:00000000000015BD                 call    atexit
.text:00000000000015C2                 cmp     ebp, 2
.text:00000000000015C5                 jnz     short loc_15F9
.text:00000000000015C7                 mov     r12, [r15+8]
.text:00000000000015CB                 lea     rsi, aHelp      ; "--help"
.text:00000000000015D2                 mov     rdi, r12        ; s1
.text:00000000000015D5                 call    _strcmp
.text:00000000000015DA                 test    eax, eax
.text:00000000000015DC                 jz      loc_1983
.text:00000000000015E2                 lea     rsi, aVersion   ; "--version"
.text:00000000000015E9                 mov     rdi, r12        ; s1
.text:00000000000015EC                 call    _strcmp
.text:00000000000015F1                 test    eax, eax
.text:00000000000015F3                 jz      loc_18D2
.text:00000000000015F9
.text:00000000000015F9 loc_15F9:                               ; CODE XREF: main+165↑j
.text:00000000000015F9                 test    rbx, rbx
.text:00000000000015FC                 mov     [rsp+48h+var_3A], 1
.text:0000000000001601                 mov     r8d, 1
.text:0000000000001607                 setnz   bl
.text:000000000000160A                 mov     rdi, 20100000001h
.text:0000000000001614                 sub     ebp, 1
.text:0000000000001617                 add     r15, 8
.text:000000000000161B                 xor     r10d, r10d
.text:000000000000161E                 xor     r11d, r11d
.text:0000000000001621
.text:0000000000001621 loc_1621:                               ; CODE XREF: main+46D↓j
.text:0000000000001621                 test    ebp, ebp
.text:0000000000001623                 jle     loc_16D2
.text:0000000000001629                 mov     rsi, [r15]
.text:000000000000162C                 cmp     byte ptr [rsi], 2Dh ; '-'
.text:000000000000162F                 jnz     loc_1862
.text:0000000000001635                 movzx   edx, byte ptr [rsi+1]
.text:0000000000001639                 lea     r9, [rsi+1]
.text:000000000000163D                 test    dl, dl
.text:000000000000163F                 jz      loc_1862
.text:0000000000001645                 lea     ecx, [rdx-45h]
.text:0000000000001648                 cmp     cl, 29h ; ')'
.text:000000000000164B                 ja      loc_1862
.text:0000000000001651                 mov     rax, r8
.text:0000000000001654                 shl     rax, cl
.text:0000000000001657                 test    rax, rdi
.text:000000000000165A                 jz      loc_1862
.text:0000000000001660                 xor     eax, eax
.text:0000000000001662                 jmp     short loc_1683
.text:0000000000001662 ; ---------------------------------------------------------------------------
.text:0000000000001664                 align 8
.text:0000000000001668
.text:0000000000001668 loc_1668:                               ; CODE XREF: main+22E↓j
.text:0000000000001668                 sub     ecx, 45h ; 'E'
.text:000000000000166B                 cmp     cl, 29h ; ')'
.text:000000000000166E                 ja      loc_1862
.text:0000000000001674                 mov     r14, r8
.text:0000000000001677                 shl     r14, cl
.text:000000000000167A                 test    r14, rdi
.text:000000000000167D                 jz      loc_1862
.text:0000000000001683
.text:0000000000001683 loc_1683:                               ; CODE XREF: main+202↑j
.text:0000000000001683                 add     rax, 1
.text:0000000000001687                 movzx   ecx, byte ptr [rsi+rax+1]
.text:000000000000168C                 test    cl, cl
.text:000000000000168E                 jnz     short loc_1668
.text:0000000000001690                 jmp     short loc_16B4
.text:0000000000001690 ; ---------------------------------------------------------------------------
.text:0000000000001692                 align 8
.text:0000000000001698
.text:0000000000001698 loc_1698:                               ; CODE XREF: main+25B↓j
.text:0000000000001698                 cmp     dl, 6Eh ; 'n'
.text:000000000000169B                 jz      loc_18BC
.text:00000000000016A1                 cmp     dl, 45h ; 'E'
.text:00000000000016A4                 cmovz   r10d, r11d
.text:00000000000016A8
.text:00000000000016A8 loc_16A8:                               ; CODE XREF: main+263↓j
.text:00000000000016A8                                         ; main+461↓j
.text:00000000000016A8                 movzx   edx, byte ptr [r9]
.text:00000000000016AC                 test    dl, dl
.text:00000000000016AE                 jz      loc_18C6
.text:00000000000016B4
.text:00000000000016B4 loc_16B4:                               ; CODE XREF: main+230↑j
.text:00000000000016B4                 add     r9, 1
.text:00000000000016B8                 cmp     dl, 65h ; 'e'
.text:00000000000016BB                 jnz     short loc_1698
.text:00000000000016BD                 mov     r10d, 1
.text:00000000000016C3                 jmp     short loc_16A8
.text:00000000000016C3 ; ---------------------------------------------------------------------------
.text:00000000000016C5                 align 8
.text:00000000000016C8
.text:00000000000016C8 loc_16C8:                               ; CODE XREF: main+F9↑j
.text:00000000000016C8                                         ; main+11C↑j
.text:00000000000016C8                                         ; DATA XREF: ...
.text:00000000000016C8                 mov     ebx, 5Ch ; '\'  ; jumptable 000000000000157C case 92
.text:00000000000016CD                 jmp     loc_151B
.text:00000000000016D2 ; ---------------------------------------------------------------------------
.text:00000000000016D2
.text:00000000000016D2 loc_16D2:                               ; CODE XREF: main+1C3↑j
.text:00000000000016D2                                         ; main+3D7↓j ...
.text:00000000000016D2                 cmp     [rsp+48h+var_3A], 0
.text:00000000000016D7                 jz      short loc_16F9  ; jumptable 000000000000157C case 99
.text:00000000000016D9
.text:00000000000016D9 loc_16D9:                               ; CODE XREF: main+9A↑j
.text:00000000000016D9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000016E0                 mov     rax, [rdi+28h]
.text:00000000000016E4                 cmp     rax, [rdi+30h]
.text:00000000000016E8                 jnb     loc_1974
.text:00000000000016EE                 lea     rdx, [rax+1]
.text:00000000000016F2                 mov     [rdi+28h], rdx
.text:00000000000016F6                 mov     byte ptr [rax], 0Ah
.text:00000000000016F9
.text:00000000000016F9 loc_16F9:                               ; CODE XREF: main+11C↑j
.text:00000000000016F9                                         ; main+277↑j ...
.text:00000000000016F9                 add     rsp, 18h        ; jumptable 000000000000157C case 99
.text:00000000000016FD                 xor     eax, eax
.text:00000000000016FF                 pop     rbx
.text:0000000000001700                 pop     rbp
.text:0000000000001701                 pop     r12
.text:0000000000001703                 pop     r13
.text:0000000000001705                 pop     r14
.text:0000000000001707                 pop     r15
.text:0000000000001709                 retn
.text:000000000000170A ; ---------------------------------------------------------------------------
.text:000000000000170A
.text:000000000000170A loc_170A:                               ; CODE XREF: main+11C↑j
.text:000000000000170A                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:000000000000170A                 mov     ebx, 7          ; jumptable 000000000000157C case 97
.text:000000000000170F                 mov     edx, 7
.text:0000000000001714                 jmp     loc_151B
.text:0000000000001719 ; ---------------------------------------------------------------------------
.text:0000000000001719
.text:0000000000001719 loc_1719:                               ; CODE XREF: main+11C↑j
.text:0000000000001719                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:0000000000001719                 mov     ebx, 1Bh        ; jumptable 000000000000157C case 101
.text:000000000000171E                 mov     edx, 1Bh
.text:0000000000001723                 jmp     loc_151B
.text:0000000000001728 ; ---------------------------------------------------------------------------
.text:0000000000001728
.text:0000000000001728 loc_1728:                               ; CODE XREF: main+11C↑j
.text:0000000000001728                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:0000000000001728                 mov     ebx, 8          ; jumptable 000000000000157C case 98
.text:000000000000172D                 mov     edx, 8
.text:0000000000001732                 jmp     loc_151B
.text:0000000000001737 ; ---------------------------------------------------------------------------
.text:0000000000001737
.text:0000000000001737 loc_1737:                               ; CODE XREF: main+11C↑j
.text:0000000000001737                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:0000000000001737                 movzx   eax, byte ptr [rbx+2] ; jumptable 000000000000157C cases 49-55
.text:000000000000173B
.text:000000000000173B loc_173B:                               ; CODE XREF: main+4D4↓j
.text:000000000000173B                 sub     eax, 30h ; '0'
.text:000000000000173E                 lea     edx, [rcx-30h]
.text:0000000000001741                 cmp     al, 7
.text:0000000000001743                 ja      short loc_174C
.text:0000000000001745                 lea     edx, [rax+rdx*8]
.text:0000000000001748                 add     r13, 1
.text:000000000000174C
.text:000000000000174C loc_174C:                               ; CODE XREF: main+2E3↑j
.text:000000000000174C                 movzx   eax, byte ptr [r13+0]
.text:0000000000001751                 lea     ecx, [rax-30h]
.text:0000000000001754                 cmp     cl, 7
.text:0000000000001757                 ja      loc_1518
.text:000000000000175D                 add     r13, 1
.text:0000000000001761                 lea     edx, [rax+rdx*8-30h]
.text:0000000000001765                 jmp     loc_1518
.text:000000000000176A ; ---------------------------------------------------------------------------
.text:000000000000176A
.text:000000000000176A loc_176A:                               ; CODE XREF: main+11C↑j
.text:000000000000176A                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:000000000000176A                 movzx   ecx, byte ptr [rbx+2] ; jumptable 000000000000157C case 48
.text:000000000000176E                 lea     eax, [rcx-30h]
.text:0000000000001771                 cmp     al, 7
.text:0000000000001773                 jbe     loc_192C
.text:0000000000001779                 xor     ebx, ebx
.text:000000000000177B                 xor     edx, edx
.text:000000000000177D                 jmp     loc_151B
.text:0000000000001782 ; ---------------------------------------------------------------------------
.text:0000000000001782
.text:0000000000001782 loc_1782:                               ; CODE XREF: main+11C↑j
.text:0000000000001782                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:0000000000001782                 movzx   edi, byte ptr [rbx+2] ; jumptable 000000000000157C case 120
.text:0000000000001786                 mov     [rsp+48h+var_39], dil
.text:000000000000178B                 call    ___ctype_b_loc
.text:0000000000001790                 mov     rcx, [rax]
.text:0000000000001793                 movzx   eax, [rsp+48h+var_39]
.text:0000000000001798                 test    byte ptr [rcx+rax*2+1], 10h
.text:000000000000179D                 mov     rdi, rax
.text:00000000000017A0                 jnz     loc_190E
.text:00000000000017A6
.text:00000000000017A6 def_157C:                               ; CODE XREF: main+10C↑j
.text:00000000000017A6                                         ; main+11C↑j
.text:00000000000017A6                                         ; DATA XREF: ...
.text:00000000000017A6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 000000000000157C default case, cases 56-91,93-96,100,103-109,111-113,115,117,119
.text:00000000000017AD                 movzx   ebx, r14b
.text:00000000000017B1                 mov     rax, [rdi+28h]
.text:00000000000017B5                 cmp     [rdi+30h], rax
.text:00000000000017B9                 jbe     loc_1962
.text:00000000000017BF                 lea     rdx, [rax+1]
.text:00000000000017C3                 mov     [rdi+28h], rdx
.text:00000000000017C7                 mov     byte ptr [rax], 5Ch ; '\'
.text:00000000000017CA                 mov     edx, r14d
.text:00000000000017CD                 jmp     loc_151B
.text:00000000000017D2 ; ---------------------------------------------------------------------------
.text:00000000000017D2
.text:00000000000017D2 loc_17D2:                               ; CODE XREF: main+11C↑j
.text:00000000000017D2                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:00000000000017D2                 mov     ebx, 0Bh        ; jumptable 000000000000157C case 118
.text:00000000000017D7                 mov     edx, 0Bh
.text:00000000000017DC                 jmp     loc_151B
.text:00000000000017E1 ; ---------------------------------------------------------------------------
.text:00000000000017E1
.text:00000000000017E1 loc_17E1:                               ; CODE XREF: main+11C↑j
.text:00000000000017E1                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:00000000000017E1                 mov     ebx, 9          ; jumptable 000000000000157C case 116
.text:00000000000017E6                 mov     edx, 9
.text:00000000000017EB                 jmp     loc_151B
.text:00000000000017F0 ; ---------------------------------------------------------------------------
.text:00000000000017F0
.text:00000000000017F0 loc_17F0:                               ; CODE XREF: main+11C↑j
.text:00000000000017F0                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:00000000000017F0                 mov     ebx, 0Dh        ; jumptable 000000000000157C case 114
.text:00000000000017F5                 mov     edx, 0Dh
.text:00000000000017FA                 jmp     loc_151B
.text:00000000000017FF ; ---------------------------------------------------------------------------
.text:00000000000017FF
.text:00000000000017FF loc_17FF:                               ; CODE XREF: main+11C↑j
.text:00000000000017FF                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:00000000000017FF                 mov     ebx, 0Ah        ; jumptable 000000000000157C case 110
.text:0000000000001804                 mov     edx, 0Ah
.text:0000000000001809                 jmp     loc_151B
.text:000000000000180E ; ---------------------------------------------------------------------------
.text:000000000000180E
.text:000000000000180E loc_180E:                               ; CODE XREF: main+11C↑j
.text:000000000000180E                                         ; DATA XREF: .rodata:jpt_157C↓o
.text:000000000000180E                 mov     ebx, 0Ch        ; jumptable 000000000000157C case 102
.text:0000000000001813                 mov     edx, 0Ch
.text:0000000000001818                 jmp     loc_151B
.text:0000000000001818 ; ---------------------------------------------------------------------------
.text:000000000000181D                 align 20h
.text:0000000000001820
.text:0000000000001820 loc_1820:                               ; CODE XREF: main+CA↑j
.text:0000000000001820                 mov     esi, ebx        ; int
.text:0000000000001822                 call    ___overflow
.text:0000000000001827                 jmp     loc_153A
.text:0000000000001827 ; ---------------------------------------------------------------------------
.text:000000000000182C                 align 10h
.text:0000000000001830
.text:0000000000001830 loc_1830:                               ; CODE XREF: main+E6↑j
.text:0000000000001830                 add     r15, 8
.text:0000000000001834                 sub     ebp, 1
.text:0000000000001837                 jz      loc_16D2
.text:000000000000183D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001844                 mov     rax, [rdi+28h]
.text:0000000000001848                 cmp     rax, [rdi+30h]
.text:000000000000184C                 jnb     loc_1939
.text:0000000000001852                 lea     rdx, [rax+1]
.text:0000000000001856                 mov     [rdi+28h], rdx
.text:000000000000185A                 mov     byte ptr [rax], 20h ; ' '
.text:000000000000185D                 jmp     loc_1510
.text:0000000000001862 ; ---------------------------------------------------------------------------
.text:0000000000001862
.text:0000000000001862 loc_1862:                               ; CODE XREF: main+1CF↑j
.text:0000000000001862                                         ; main+1DF↑j ...
.text:0000000000001862                 test    r10b, r10b
.text:0000000000001865                 jnz     loc_1500
.text:000000000000186B                 test    bl, bl
.text:000000000000186D                 jz      short loc_1883
.text:000000000000186F                 jmp     loc_1500
.text:000000000000186F ; ---------------------------------------------------------------------------
.text:0000000000001874                 align 8
.text:0000000000001878
.text:0000000000001878 loc_1878:                               ; CODE XREF: main+44E↓j
.text:0000000000001878                 lea     rdx, [rax+1]
.text:000000000000187C                 mov     [rdi+28h], rdx
.text:0000000000001880                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000001883
.text:0000000000001883 loc_1883:                               ; CODE XREF: main+40D↑j
.text:0000000000001883                                         ; main+45A↓j
.text:0000000000001883                 mov     rdi, [r15]      ; s
.text:0000000000001886                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000188D                 add     r15, 8
.text:0000000000001891                 call    _fputs_unlocked
.text:0000000000001896                 sub     ebp, 1
.text:0000000000001899                 jz      loc_16D2
.text:000000000000189F                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000018A6                 mov     rax, [rdi+28h]
.text:00000000000018AA                 cmp     rax, [rdi+30h]
.text:00000000000018AE                 jb      short loc_1878
.text:00000000000018B0                 mov     esi, 20h ; ' '  ; int
.text:00000000000018B5                 call    ___overflow
.text:00000000000018BA                 jmp     short loc_1883
.text:00000000000018BC ; ---------------------------------------------------------------------------
.text:00000000000018BC
.text:00000000000018BC loc_18BC:                               ; CODE XREF: main+23B↑j
.text:00000000000018BC                 mov     [rsp+48h+var_3A], 0
.text:00000000000018C1                 jmp     loc_16A8
.text:00000000000018C6 ; ---------------------------------------------------------------------------
.text:00000000000018C6
.text:00000000000018C6 loc_18C6:                               ; CODE XREF: main+24E↑j
.text:00000000000018C6                 sub     ebp, 1
.text:00000000000018C9                 add     r15, 8
.text:00000000000018CD                 jmp     loc_1621
.text:00000000000018D2 ; ---------------------------------------------------------------------------
.text:00000000000018D2
.text:00000000000018D2 loc_18D2:                               ; CODE XREF: main+193↑j
.text:00000000000018D2                 sub     rsp, 8
.text:00000000000018D6                 mov     rcx, cs:Version
.text:00000000000018DD                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000018E4                 push    0
.text:00000000000018E6                 lea     rdx, unk_4BB5
.text:00000000000018ED                 lea     r9, aChetRamey  ; "Chet Ramey"
.text:00000000000018F4                 lea     r8, aBrianFox   ; "Brian Fox"
.text:00000000000018FB                 lea     rsi, aEcho      ; "echo"
.text:0000000000001902                 call    version_etc
.text:0000000000001907                 pop     rax
.text:0000000000001908                 pop     rdx
.text:0000000000001909                 jmp     loc_16F9        ; jumptable 000000000000157C case 99
.text:000000000000190E ; ---------------------------------------------------------------------------
.text:000000000000190E
.text:000000000000190E loc_190E:                               ; CODE XREF: main+340↑j
.text:000000000000190E                 call    hextobin
.text:0000000000001913                 movzx   edi, byte ptr [rbx+3]
.text:0000000000001917                 mov     edx, eax
.text:0000000000001919                 test    byte ptr [rcx+rdi*2+1], 10h
.text:000000000000191E                 jnz     short loc_1948
.text:0000000000001920                 lea     r13, [rbx+3]
.text:0000000000001924                 movzx   ebx, al
.text:0000000000001927                 jmp     loc_151B
.text:000000000000192C ; ---------------------------------------------------------------------------
.text:000000000000192C
.text:000000000000192C loc_192C:                               ; CODE XREF: main+313↑j
.text:000000000000192C                 lea     r13, [rbx+3]
.text:0000000000001930                 movzx   eax, byte ptr [rbx+3]
.text:0000000000001934                 jmp     loc_173B
.text:0000000000001939 ; ---------------------------------------------------------------------------
.text:0000000000001939
.text:0000000000001939 loc_1939:                               ; CODE XREF: main+3EC↑j
.text:0000000000001939                 mov     esi, 20h ; ' '  ; int
.text:000000000000193E                 call    ___overflow
.text:0000000000001943                 jmp     loc_1510
.text:0000000000001948 ; ---------------------------------------------------------------------------
.text:0000000000001948
.text:0000000000001948 loc_1948:                               ; CODE XREF: main+4BE↑j
.text:0000000000001948                 lea     r13, [rbx+4]
.text:000000000000194C                 mov     ebx, eax
.text:000000000000194E                 movzx   edi, dil
.text:0000000000001952                 shl     ebx, 4
.text:0000000000001955                 call    hextobin
.text:000000000000195A                 lea     edx, [rbx+rax]
.text:000000000000195D                 jmp     loc_1518
.text:0000000000001962 ; ---------------------------------------------------------------------------
.text:0000000000001962
.text:0000000000001962 loc_1962:                               ; CODE XREF: main+359↑j
.text:0000000000001962                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000001967                 call    ___overflow
.text:000000000000196C                 mov     edx, r14d
.text:000000000000196F                 jmp     loc_151B
.text:0000000000001974 ; ---------------------------------------------------------------------------
.text:0000000000001974
.text:0000000000001974 loc_1974:                               ; CODE XREF: main+288↑j
.text:0000000000001974                 mov     esi, 0Ah        ; int
.text:0000000000001979                 call    ___overflow
.text:000000000000197E                 jmp     loc_16F9        ; jumptable 000000000000157C case 99
.text:0000000000001983 ; ---------------------------------------------------------------------------
.text:0000000000001983
.text:0000000000001983 loc_1983:                               ; CODE XREF: main+17C↑j
.text:0000000000001983                 xor     edi, edi
.text:0000000000001985                 call    usage
.text:0000000000001985 ; } // starts at 1460
.text:0000000000001985 main            endp
.text:0000000000001985
.text:0000000000001985 ; ---------------------------------------------------------------------------
.text:000000000000198A                 align 10h
.text:0000000000001990
.text:0000000000001990 ; =============== S U B R O U T I N E =======================================
.text:0000000000001990
.text:0000000000001990 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001990
.text:0000000000001990 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001990                 public start
.text:0000000000001990 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001990 ; __unwind {
.text:0000000000001990                 xor     ebp, ebp
.text:0000000000001992                 mov     r9, rdx         ; rtld_fini
.text:0000000000001995                 pop     rsi             ; argc
.text:0000000000001996                 mov     rdx, rsp        ; ubp_av
.text:0000000000001999                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000199D                 push    rax
.text:000000000000199E                 push    rsp             ; stack_end
.text:000000000000199F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019AD                 lea     rdi, main       ; main
.text:00000000000019B4                 call    cs:__libc_start_main_ptr
.text:00000000000019BA                 hlt
.text:00000000000019BA ; } // starts at 1990
.text:00000000000019BA start           endp
.text:00000000000019BA
.text:00000000000019BA ; ---------------------------------------------------------------------------
.text:00000000000019BB                 align 20h
.text:00000000000019C0
.text:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019C0
.text:00000000000019C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000019C0
.text:00000000000019C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1A73↓p
.text:00000000000019C0                 lea     rdi, __bss_start
.text:00000000000019C7                 push    rbp
.text:00000000000019C8                 lea     rax, __bss_start
.text:00000000000019CF                 cmp     rax, rdi
.text:00000000000019D2                 mov     rbp, rsp
.text:00000000000019D5                 jz      short loc_19F0
.text:00000000000019D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000019DE                 test    rax, rax
.text:00000000000019E1                 jz      short loc_19F0
.text:00000000000019E3                 pop     rbp
.text:00000000000019E4                 jmp     rax
.text:00000000000019E4 ; ---------------------------------------------------------------------------
.text:00000000000019E6                 align 10h
.text:00000000000019F0
.text:00000000000019F0 loc_19F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000019F0                                         ; deregister_tm_clones+21↑j
.text:00000000000019F0                 pop     rbp
.text:00000000000019F1                 retn
.text:00000000000019F1 deregister_tm_clones endp
.text:00000000000019F1
.text:00000000000019F1 ; ---------------------------------------------------------------------------
.text:00000000000019F2                 align 20h
.text:0000000000001A00
.text:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A00
.text:0000000000001A00 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A00
.text:0000000000001A00 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A00                 lea     rdi, __bss_start
.text:0000000000001A07                 lea     rsi, __bss_start
.text:0000000000001A0E                 push    rbp
.text:0000000000001A0F                 sub     rsi, rdi
.text:0000000000001A12                 mov     rbp, rsp
.text:0000000000001A15                 sar     rsi, 3
.text:0000000000001A19                 mov     rax, rsi
.text:0000000000001A1C                 shr     rax, 3Fh
.text:0000000000001A20                 add     rsi, rax
.text:0000000000001A23                 sar     rsi, 1
.text:0000000000001A26                 jz      short loc_1A40
.text:0000000000001A28                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A2F                 test    rax, rax
.text:0000000000001A32                 jz      short loc_1A40
.text:0000000000001A34                 pop     rbp
.text:0000000000001A35                 jmp     rax
.text:0000000000001A35 ; ---------------------------------------------------------------------------
.text:0000000000001A37                 align 20h
.text:0000000000001A40
.text:0000000000001A40 loc_1A40:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A40                                         ; register_tm_clones+32↑j
.text:0000000000001A40                 pop     rbp
.text:0000000000001A41                 retn
.text:0000000000001A41 register_tm_clones endp
.text:0000000000001A41
.text:0000000000001A41 ; ---------------------------------------------------------------------------
.text:0000000000001A42                 align 10h
.text:0000000000001A50
.text:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A50
.text:0000000000001A50 ; Attributes: info_from_lumina
.text:0000000000001A50
.text:0000000000001A50 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001A50                 cmp     cs:completed_7697, 0
.text:0000000000001A57                 jnz     short locret_1A88
.text:0000000000001A59                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001A61                 push    rbp
.text:0000000000001A62                 mov     rbp, rsp
.text:0000000000001A65                 jz      short loc_1A73
.text:0000000000001A67                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001A6E                 call    __cxa_finalize
.text:0000000000001A73
.text:0000000000001A73 loc_1A73:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001A73                 call    deregister_tm_clones
.text:0000000000001A78                 mov     cs:completed_7697, 1
.text:0000000000001A7F                 pop     rbp
.text:0000000000001A80                 retn
.text:0000000000001A80 ; ---------------------------------------------------------------------------
.text:0000000000001A81                 align 8
.text:0000000000001A88
.text:0000000000001A88 locret_1A88:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001A88                 rep retn
.text:0000000000001A88 __do_global_dtors_aux endp
.text:0000000000001A88
.text:0000000000001A88 ; ---------------------------------------------------------------------------
.text:0000000000001A8A                 align 10h
.text:0000000000001A90
.text:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A90
.text:0000000000001A90 ; Attributes: bp-based frame
.text:0000000000001A90
.text:0000000000001A90 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001A90                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001A90                 push    rbp
.text:0000000000001A91                 mov     rbp, rsp
.text:0000000000001A94                 pop     rbp
.text:0000000000001A95                 jmp     register_tm_clones
.text:0000000000001A95 frame_dummy     endp
.text:0000000000001A95
.text:0000000000001A95 ; ---------------------------------------------------------------------------
.text:0000000000001A9A                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AA0
.text:0000000000001AA0
.text:0000000000001AA0 hextobin        proc near               ; CODE XREF: main:loc_190E↑p
.text:0000000000001AA0                                         ; main+4F5↑p
.text:0000000000001AA0 ; __unwind {
.text:0000000000001AA0                 lea     eax, [rdi-41h]  ; switch 38 cases
.text:0000000000001AA3                 cmp     al, 25h
.text:0000000000001AA5                 ja      short def_1AB8  ; jumptable 0000000000001AB8 default case, cases 71-96
.text:0000000000001AA7                 lea     rdx, jpt_1AB8
.text:0000000000001AAE                 movzx   eax, al
.text:0000000000001AB1                 movsxd  rax, ds:(jpt_1AB8 - 4944h)[rdx+rax*4]
.text:0000000000001AB5                 add     rax, rdx
.text:0000000000001AB8                 jmp     rax             ; switch jump
.text:0000000000001AB8 ; ---------------------------------------------------------------------------
.text:0000000000001ABA                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: hextobin+18↑j
.text:0000000000001AC0                                         ; DATA XREF: .rodata:jpt_1AB8↓o
.text:0000000000001AC0                 mov     eax, 0Ah        ; jumptable 0000000000001AB8 cases 65,97
.text:0000000000001AC5                 retn
.text:0000000000001AC5 ; ---------------------------------------------------------------------------
.text:0000000000001AC6                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 loc_1AD0:                               ; CODE XREF: hextobin+18↑j
.text:0000000000001AD0                                         ; DATA XREF: .rodata:jpt_1AB8↓o
.text:0000000000001AD0                 mov     eax, 0Bh        ; jumptable 0000000000001AB8 cases 66,98
.text:0000000000001AD5                 retn
.text:0000000000001AD5 ; ---------------------------------------------------------------------------
.text:0000000000001AD6                 align 20h
.text:0000000000001AE0
.text:0000000000001AE0 loc_1AE0:                               ; CODE XREF: hextobin+18↑j
.text:0000000000001AE0                                         ; DATA XREF: .rodata:jpt_1AB8↓o
.text:0000000000001AE0                 mov     eax, 0Ch        ; jumptable 0000000000001AB8 cases 67,99
.text:0000000000001AE5                 retn
.text:0000000000001AE5 ; ---------------------------------------------------------------------------
.text:0000000000001AE6                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: hextobin+18↑j
.text:0000000000001AF0                                         ; DATA XREF: .rodata:jpt_1AB8↓o
.text:0000000000001AF0                 mov     eax, 0Dh        ; jumptable 0000000000001AB8 cases 68,100
.text:0000000000001AF5                 retn
.text:0000000000001AF5 ; ---------------------------------------------------------------------------
.text:0000000000001AF6                 align 20h
.text:0000000000001B00
.text:0000000000001B00 loc_1B00:                               ; CODE XREF: hextobin+18↑j
.text:0000000000001B00                                         ; DATA XREF: .rodata:jpt_1AB8↓o
.text:0000000000001B00                 mov     eax, 0Eh        ; jumptable 0000000000001AB8 cases 69,101
.text:0000000000001B05                 retn
.text:0000000000001B05 ; ---------------------------------------------------------------------------
.text:0000000000001B06                 align 10h
.text:0000000000001B10
.text:0000000000001B10 loc_1B10:                               ; CODE XREF: hextobin+18↑j
.text:0000000000001B10                                         ; DATA XREF: .rodata:jpt_1AB8↓o
.text:0000000000001B10                 mov     eax, 0Fh        ; jumptable 0000000000001AB8 cases 70,102
.text:0000000000001B15                 retn
.text:0000000000001B15 ; ---------------------------------------------------------------------------
.text:0000000000001B16                 align 20h
.text:0000000000001B20
.text:0000000000001B20 def_1AB8:                               ; CODE XREF: hextobin+5↑j
.text:0000000000001B20                                         ; hextobin+18↑j
.text:0000000000001B20                                         ; DATA XREF: ...
.text:0000000000001B20                 movzx   edi, dil        ; jumptable 0000000000001AB8 default case, cases 71-96
.text:0000000000001B24                 lea     eax, [rdi-30h]
.text:0000000000001B27                 retn
.text:0000000000001B27 ; } // starts at 1AA0
.text:0000000000001B27 hextobin        endp
.text:0000000000001B27
.text:0000000000001B27 ; ---------------------------------------------------------------------------
.text:0000000000001B28                 align 10h
.text:0000000000001B30
.text:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B30
.text:0000000000001B30 ; Attributes: noreturn
.text:0000000000001B30
.text:0000000000001B30                 public usage
.text:0000000000001B30 usage           proc near               ; CODE XREF: main+525↑p
.text:0000000000001B30
.text:0000000000001B30 var_98          = qword ptr -98h
.text:0000000000001B30 var_90          = qword ptr -90h
.text:0000000000001B30 var_88          = qword ptr -88h
.text:0000000000001B30 var_80          = qword ptr -80h
.text:0000000000001B30 var_78          = qword ptr -78h
.text:0000000000001B30 var_70          = qword ptr -70h
.text:0000000000001B30 var_68          = qword ptr -68h
.text:0000000000001B30 var_60          = qword ptr -60h
.text:0000000000001B30 var_58          = qword ptr -58h
.text:0000000000001B30 var_50          = qword ptr -50h
.text:0000000000001B30 var_48          = qword ptr -48h
.text:0000000000001B30 var_40          = qword ptr -40h
.text:0000000000001B30 var_38          = qword ptr -38h
.text:0000000000001B30 var_30          = qword ptr -30h
.text:0000000000001B30 var_20          = qword ptr -20h
.text:0000000000001B30
.text:0000000000001B30 ; __unwind {
.text:0000000000001B30                 push    r12
.text:0000000000001B32                 push    rbp
.text:0000000000001B33                 push    rbx
.text:0000000000001B34                 add     rsp, 0FFFFFFFFFFFFFF80h
.text:0000000000001B38                 mov     rax, fs:28h
.text:0000000000001B41                 mov     [rsp+98h+var_20], rax
.text:0000000000001B46                 xor     eax, eax
.text:0000000000001B48                 test    edi, edi
.text:0000000000001B4A                 jz      short loc_1B6B
.text:0000000000001B4C                 lea     rcx, __PRETTY_FUNCTION___6816 ; "usage"
.text:0000000000001B53                 lea     rsi, file       ; "../coreutils-8.31/src/echo.c"
.text:0000000000001B5A                 lea     rdi, assertion  ; "status == EXIT_SUCCESS"
.text:0000000000001B61                 mov     edx, 28h ; '('  ; line
.text:0000000000001B66                 call    ___assert_fail
.text:0000000000001B6B ; ---------------------------------------------------------------------------
.text:0000000000001B6B
.text:0000000000001B6B loc_1B6B:                               ; CODE XREF: usage+1A↑j
.text:0000000000001B6B                 mov     rbx, cs:program_name
.text:0000000000001B72                 lea     rsi, msgid      ; "Usage: %s [SHORT-OPTION]... [STRING]..."...
.text:0000000000001B79                 mov     edx, 5          ; category
.text:0000000000001B7E                 xor     edi, edi        ; domainname
.text:0000000000001B80                 call    _dcgettext
.text:0000000000001B85                 mov     rcx, rbx
.text:0000000000001B88                 mov     rdx, rbx
.text:0000000000001B8B                 mov     rsi, rax
.text:0000000000001B8E                 mov     edi, 1
.text:0000000000001B93                 xor     eax, eax
.text:0000000000001B95                 call    ___printf_chk
.text:0000000000001B9A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BA1                 lea     rsi, aEchoTheStringS ; "Echo the STRING(s) to standard output."...
.text:0000000000001BA8                 mov     edx, 5          ; category
.text:0000000000001BAD                 xor     edi, edi        ; domainname
.text:0000000000001BAF                 call    _dcgettext
.text:0000000000001BB4                 mov     rsi, rbx        ; stream
.text:0000000000001BB7                 mov     rdi, rax        ; s
.text:0000000000001BBA                 call    _fputs_unlocked
.text:0000000000001BBF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BC6                 lea     rsi, aEEnableInterpr ; "  -e             enable interpretation "...
.text:0000000000001BCD                 mov     edx, 5          ; category
.text:0000000000001BD2                 xor     edi, edi        ; domainname
.text:0000000000001BD4                 call    _dcgettext
.text:0000000000001BD9                 mov     rsi, rbx        ; stream
.text:0000000000001BDC                 mov     rdi, rax        ; s
.text:0000000000001BDF                 call    _fputs_unlocked
.text:0000000000001BE4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BEB                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001BF2                 mov     edx, 5          ; category
.text:0000000000001BF7                 xor     edi, edi        ; domainname
.text:0000000000001BF9                 call    _dcgettext
.text:0000000000001BFE                 mov     rsi, rbx        ; stream
.text:0000000000001C01                 mov     rdi, rax        ; s
.text:0000000000001C04                 call    _fputs_unlocked
.text:0000000000001C09                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C10                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001C17                 mov     edx, 5          ; category
.text:0000000000001C1C                 xor     edi, edi        ; domainname
.text:0000000000001C1E                 call    _dcgettext
.text:0000000000001C23                 mov     rsi, rbx        ; stream
.text:0000000000001C26                 mov     rdi, rax        ; s
.text:0000000000001C29                 call    _fputs_unlocked
.text:0000000000001C2E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C35                 lea     rsi, aIfEIsInEffectT ; "\nIf -e is in effect, the following seq"...
.text:0000000000001C3C                 mov     edx, 5          ; category
.text:0000000000001C41                 xor     edi, edi        ; domainname
.text:0000000000001C43                 call    _dcgettext
.text:0000000000001C48                 mov     rsi, rbx        ; stream
.text:0000000000001C4B                 mov     rdi, rax        ; s
.text:0000000000001C4E                 call    _fputs_unlocked
.text:0000000000001C53                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C5A                 lea     rsi, aBackslashAAler ; "  \\\\      backslash\n  \\a      alert"...
.text:0000000000001C61                 mov     edx, 5          ; category
.text:0000000000001C66                 xor     edi, edi        ; domainname
.text:0000000000001C68                 call    _dcgettext
.text:0000000000001C6D                 mov     rsi, rbx        ; stream
.text:0000000000001C70                 mov     rdi, rax        ; s
.text:0000000000001C73                 call    _fputs_unlocked
.text:0000000000001C78                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C7F                 lea     rsi, a0nnnByteWithOc ; "  \\0NNN   byte with octal value NNN (1"...
.text:0000000000001C86                 mov     edx, 5          ; category
.text:0000000000001C8B                 xor     edi, edi        ; domainname
.text:0000000000001C8D                 call    _dcgettext
.text:0000000000001C92                 mov     rsi, rbx        ; stream
.text:0000000000001C95                 mov     rdi, rax        ; s
.text:0000000000001C98                 lea     rbx, aEcho      ; "echo"
.text:0000000000001C9F                 call    _fputs_unlocked
.text:0000000000001CA4                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000001CAB                 mov     edx, 5          ; category
.text:0000000000001CB0                 xor     edi, edi        ; domainname
.text:0000000000001CB2                 call    _dcgettext
.text:0000000000001CB7                 lea     rdx, aEcho      ; "echo"
.text:0000000000001CBE                 mov     rsi, rax
.text:0000000000001CC1                 mov     edi, 1
.text:0000000000001CC6                 xor     eax, eax
.text:0000000000001CC8                 call    ___printf_chk
.text:0000000000001CCD                 lea     rax, asc_4B3F   ; "["
.text:0000000000001CD4                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001CDB                 mov     [rsp+98h+var_38], 0
.text:0000000000001CE4                 mov     [rsp+98h+var_30], 0
.text:0000000000001CED                 mov     rdx, rsp
.text:0000000000001CF0                 mov     [rsp+98h+var_98], rax
.text:0000000000001CF4                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001CFB                 mov     [rsp+98h+var_68], rcx
.text:0000000000001D00                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001D07                 mov     [rsp+98h+var_90], rax
.text:0000000000001D0C                 lea     rax, domainname ; "coreutils"
.text:0000000000001D13                 mov     [rsp+98h+var_58], rcx
.text:0000000000001D18                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001D1F                 mov     [rsp+98h+var_88], rax
.text:0000000000001D24                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001D2B                 mov     [rsp+98h+var_48], rcx
.text:0000000000001D30                 mov     [rsp+98h+var_80], rax
.text:0000000000001D35                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001D3C                 mov     [rsp+98h+var_78], rax
.text:0000000000001D41                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001D48                 mov     [rsp+98h+var_70], rax
.text:0000000000001D4D                 mov     [rsp+98h+var_60], rax
.text:0000000000001D52                 mov     [rsp+98h+var_50], rax
.text:0000000000001D57                 mov     [rsp+98h+var_40], rax
.text:0000000000001D5C                 nop     dword ptr [rax+00h]
.text:0000000000001D60
.text:0000000000001D60 loc_1D60:                               ; CODE XREF: usage+24D↓j
.text:0000000000001D60                 add     rdx, 10h
.text:0000000000001D64                 mov     rdi, [rdx]
.text:0000000000001D67                 test    rdi, rdi
.text:0000000000001D6A                 jz      short loc_1D7F
.text:0000000000001D6C                 mov     ecx, 5
.text:0000000000001D71                 mov     rsi, rbx
.text:0000000000001D74                 repe cmpsb
.text:0000000000001D76                 setnbe  al
.text:0000000000001D79                 sbb     al, 0
.text:0000000000001D7B                 test    al, al
.text:0000000000001D7D                 jnz     short loc_1D60
.text:0000000000001D7F
.text:0000000000001D7F loc_1D7F:                               ; CODE XREF: usage+23A↑j
.text:0000000000001D7F                 mov     rbp, [rdx+8]
.text:0000000000001D83                 xor     edi, edi        ; domainname
.text:0000000000001D85                 mov     edx, 5          ; category
.text:0000000000001D8A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001D91                 test    rbp, rbp
.text:0000000000001D94                 jz      loc_1E5D
.text:0000000000001D9A                 call    _dcgettext
.text:0000000000001D9F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DA6                 lea     rdx, unk_4BB5
.text:0000000000001DAD                 mov     rsi, rax
.text:0000000000001DB0                 mov     edi, 1
.text:0000000000001DB5                 xor     eax, eax
.text:0000000000001DB7                 call    ___printf_chk
.text:0000000000001DBC                 xor     esi, esi        ; locale
.text:0000000000001DBE                 mov     edi, 5          ; category
.text:0000000000001DC3                 call    _setlocale
.text:0000000000001DC8                 test    rax, rax
.text:0000000000001DCB                 jz      short loc_1DE9
.text:0000000000001DCD                 lea     rsi, aEn        ; "en_"
.text:0000000000001DD4                 mov     edx, 3          ; n
.text:0000000000001DD9                 mov     rdi, rax        ; s1
.text:0000000000001DDC                 call    _strncmp
.text:0000000000001DE1                 test    eax, eax
.text:0000000000001DE3                 jnz     loc_1EF2
.text:0000000000001DE9
.text:0000000000001DE9 loc_1DE9:                               ; CODE XREF: usage+29B↑j
.text:0000000000001DE9                                         ; usage+3E7↓j
.text:0000000000001DE9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001DF0                 xor     edi, edi        ; domainname
.text:0000000000001DF2                 mov     edx, 5          ; category
.text:0000000000001DF7                 call    _dcgettext
.text:0000000000001DFC                 lea     rcx, aEcho      ; "echo"
.text:0000000000001E03                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E0A                 mov     rsi, rax
.text:0000000000001E0D                 mov     edi, 1
.text:0000000000001E12                 xor     eax, eax
.text:0000000000001E14                 call    ___printf_chk
.text:0000000000001E19                 cmp     rbp, rbx
.text:0000000000001E1C                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001E23                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001E2A                 cmovnz  rbx, rcx
.text:0000000000001E2E
.text:0000000000001E2E loc_1E2E:                               ; CODE XREF: usage+3B6↓j
.text:0000000000001E2E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001E35                 mov     edx, 5          ; category
.text:0000000000001E3A                 xor     edi, edi        ; domainname
.text:0000000000001E3C                 call    _dcgettext
.text:0000000000001E41                 mov     edi, 1
.text:0000000000001E46                 mov     rsi, rax
.text:0000000000001E49                 mov     rcx, rbx
.text:0000000000001E4C                 mov     rdx, rbp
.text:0000000000001E4F                 xor     eax, eax
.text:0000000000001E51                 call    ___printf_chk
.text:0000000000001E56                 xor     edi, edi        ; status
.text:0000000000001E58                 call    _exit
.text:0000000000001E5D ; ---------------------------------------------------------------------------
.text:0000000000001E5D
.text:0000000000001E5D loc_1E5D:                               ; CODE XREF: usage+264↑j
.text:0000000000001E5D                 call    _dcgettext
.text:0000000000001E62                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E69                 lea     rdx, unk_4BB5
.text:0000000000001E70                 mov     rsi, rax
.text:0000000000001E73                 mov     edi, 1
.text:0000000000001E78                 xor     eax, eax
.text:0000000000001E7A                 call    ___printf_chk
.text:0000000000001E7F                 xor     esi, esi        ; locale
.text:0000000000001E81                 mov     edi, 5          ; category
.text:0000000000001E86                 call    _setlocale
.text:0000000000001E8B                 test    rax, rax
.text:0000000000001E8E                 jz      short loc_1EA8
.text:0000000000001E90                 lea     rsi, aEn        ; "en_"
.text:0000000000001E97                 mov     edx, 3          ; n
.text:0000000000001E9C                 mov     rdi, rax        ; s1
.text:0000000000001E9F                 call    _strncmp
.text:0000000000001EA4                 test    eax, eax
.text:0000000000001EA6                 jnz     short loc_1EEB
.text:0000000000001EA8
.text:0000000000001EA8 loc_1EA8:                               ; CODE XREF: usage+35E↑j
.text:0000000000001EA8                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001EAF                 mov     edx, 5          ; category
.text:0000000000001EB4                 xor     edi, edi        ; domainname
.text:0000000000001EB6                 lea     rbp, aEcho      ; "echo"
.text:0000000000001EBD                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001EC4                 call    _dcgettext
.text:0000000000001EC9                 lea     rcx, aEcho      ; "echo"
.text:0000000000001ED0                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001ED7                 mov     rsi, rax
.text:0000000000001EDA                 mov     edi, 1
.text:0000000000001EDF                 xor     eax, eax
.text:0000000000001EE1                 call    ___printf_chk
.text:0000000000001EE6                 jmp     loc_1E2E
.text:0000000000001EEB ; ---------------------------------------------------------------------------
.text:0000000000001EEB
.text:0000000000001EEB loc_1EEB:                               ; CODE XREF: usage+376↑j
.text:0000000000001EEB                 lea     rbp, aEcho      ; "echo"
.text:0000000000001EF2
.text:0000000000001EF2 loc_1EF2:                               ; CODE XREF: usage+2B3↑j
.text:0000000000001EF2                 mov     r12, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EF9                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001F00                 xor     edi, edi        ; domainname
.text:0000000000001F02                 mov     edx, 5          ; category
.text:0000000000001F07                 call    _dcgettext
.text:0000000000001F0C                 mov     rsi, r12        ; stream
.text:0000000000001F0F                 mov     rdi, rax        ; s
.text:0000000000001F12                 call    _fputs_unlocked
.text:0000000000001F17                 jmp     loc_1DE9
.text:0000000000001F17 ; } // starts at 1B30
.text:0000000000001F17 usage           endp
.text:0000000000001F17
.text:0000000000001F17 ; ---------------------------------------------------------------------------
.text:0000000000001F1C                 align 20h
.text:0000000000001F20
.text:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F20
.text:0000000000001F20
.text:0000000000001F20                 public close_stdout_set_file_name
.text:0000000000001F20 close_stdout_set_file_name proc near
.text:0000000000001F20 ; __unwind {
.text:0000000000001F20                 mov     cs:file_name, rdi
.text:0000000000001F27                 retn
.text:0000000000001F27 ; } // starts at 1F20
.text:0000000000001F27 close_stdout_set_file_name endp
.text:0000000000001F27
.text:0000000000001F27 ; ---------------------------------------------------------------------------
.text:0000000000001F28                 align 10h
.text:0000000000001F30
.text:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F30
.text:0000000000001F30
.text:0000000000001F30                 public close_stdout_set_ignore_EPIPE
.text:0000000000001F30 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001F30 ; __unwind {
.text:0000000000001F30                 mov     cs:ignore_EPIPE, dil
.text:0000000000001F37                 retn
.text:0000000000001F37 ; } // starts at 1F30
.text:0000000000001F37 close_stdout_set_ignore_EPIPE endp
.text:0000000000001F37
.text:0000000000001F37 ; ---------------------------------------------------------------------------
.text:0000000000001F38                 align 20h
.text:0000000000001F40
.text:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F40
.text:0000000000001F40 ; Attributes: info_from_lumina
.text:0000000000001F40
.text:0000000000001F40 ; void __cdecl close_stdout()
.text:0000000000001F40                 public close_stdout
.text:0000000000001F40 close_stdout    proc near               ; DATA XREF: main+87↑o
.text:0000000000001F40                                         ; main+156↑o
.text:0000000000001F40 ; __unwind {
.text:0000000000001F40                 push    rbp
.text:0000000000001F41                 push    rbx
.text:0000000000001F42                 sub     rsp, 8
.text:0000000000001F46                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001F4D                 call    close_stream
.text:0000000000001F52                 test    eax, eax
.text:0000000000001F54                 jz      short loc_1F6C
.text:0000000000001F56                 call    ___errno_location
.text:0000000000001F5B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001F62                 mov     rbx, rax
.text:0000000000001F65                 jz      short loc_1F83
.text:0000000000001F67                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001F6A                 jnz     short loc_1F83
.text:0000000000001F6C
.text:0000000000001F6C loc_1F6C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001F6C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001F73                 call    close_stream
.text:0000000000001F78                 test    eax, eax
.text:0000000000001F7A                 jnz     short loc_1FC2
.text:0000000000001F7C                 add     rsp, 8
.text:0000000000001F80                 pop     rbx
.text:0000000000001F81                 pop     rbp
.text:0000000000001F82                 retn
.text:0000000000001F83 ; ---------------------------------------------------------------------------
.text:0000000000001F83
.text:0000000000001F83 loc_1F83:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001F83                                         ; close_stdout+2A↑j
.text:0000000000001F83                 lea     rsi, aWriteError ; "write error"
.text:0000000000001F8A                 xor     edi, edi        ; domainname
.text:0000000000001F8C                 mov     edx, 5          ; category
.text:0000000000001F91                 call    _dcgettext
.text:0000000000001F96                 mov     rdi, cs:file_name
.text:0000000000001F9D                 mov     rbp, rax
.text:0000000000001FA0                 test    rdi, rdi
.text:0000000000001FA3                 jz      short loc_1FCD
.text:0000000000001FA5                 call    quotearg_colon
.text:0000000000001FAA                 mov     esi, [rbx]      ; errnum
.text:0000000000001FAC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001FB3                 mov     rcx, rax
.text:0000000000001FB6                 mov     r8, rbp
.text:0000000000001FB9                 xor     edi, edi        ; status
.text:0000000000001FBB                 xor     eax, eax
.text:0000000000001FBD                 call    _error
.text:0000000000001FC2
.text:0000000000001FC2 loc_1FC2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001FC2                                         ; close_stdout+A2↓j
.text:0000000000001FC2                 mov     edi, cs:exit_failure ; status
.text:0000000000001FC8                 call    __exit
.text:0000000000001FCD ; ---------------------------------------------------------------------------
.text:0000000000001FCD
.text:0000000000001FCD loc_1FCD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001FCD                 mov     esi, [rbx]      ; errnum
.text:0000000000001FCF                 lea     rdx, format+4   ; format
.text:0000000000001FD6                 mov     rcx, rax
.text:0000000000001FD9                 xor     edi, edi        ; status
.text:0000000000001FDB                 xor     eax, eax
.text:0000000000001FDD                 call    _error
.text:0000000000001FE2                 jmp     short loc_1FC2
.text:0000000000001FE2 ; } // starts at 1F40
.text:0000000000001FE2 close_stdout    endp
.text:0000000000001FE2
.text:0000000000001FE2 ; ---------------------------------------------------------------------------
.text:0000000000001FE4                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FF0
.text:0000000000001FF0
.text:0000000000001FF0                 public set_program_name
.text:0000000000001FF0 set_program_name proc near              ; CODE XREF: main+52↑p
.text:0000000000001FF0                                         ; main+121↑p
.text:0000000000001FF0 ; __unwind {
.text:0000000000001FF0                 test    rdi, rdi
.text:0000000000001FF3                 push    rbx
.text:0000000000001FF4                 jz      short loc_206D
.text:0000000000001FF6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001FFB                 mov     rbx, rdi
.text:0000000000001FFE                 call    _strrchr
.text:0000000000002003                 test    rax, rax
.text:0000000000002006                 jz      short loc_205D
.text:0000000000002008                 lea     r8, [rax+1]
.text:000000000000200C                 mov     rdx, r8
.text:000000000000200F                 sub     rdx, rbx
.text:0000000000002012                 cmp     rdx, 6
.text:0000000000002016                 jle     short loc_205D
.text:0000000000002018                 lea     rsi, [rax-6]
.text:000000000000201C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002023                 mov     ecx, 7
.text:0000000000002028                 repe cmpsb
.text:000000000000202A                 setnbe  dl
.text:000000000000202D                 sbb     dl, 0
.text:0000000000002030                 test    dl, dl
.text:0000000000002032                 jnz     short loc_205D
.text:0000000000002034                 lea     rdi, aLt        ; "lt-"
.text:000000000000203B                 mov     ecx, 3
.text:0000000000002040                 mov     rsi, r8
.text:0000000000002043                 mov     rbx, r8
.text:0000000000002046                 repe cmpsb
.text:0000000000002048                 setnbe  dl
.text:000000000000204B                 sbb     dl, 0
.text:000000000000204E                 test    dl, dl
.text:0000000000002050                 jnz     short loc_205D
.text:0000000000002052                 lea     rbx, [rax+4]
.text:0000000000002056                 mov     cs:__bss_start, rbx
.text:000000000000205D
.text:000000000000205D loc_205D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000205D                                         ; set_program_name+26↑j ...
.text:000000000000205D                 mov     cs:program_name, rbx
.text:0000000000002064                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000206B                 pop     rbx
.text:000000000000206C                 retn
.text:000000000000206D ; ---------------------------------------------------------------------------
.text:000000000000206D
.text:000000000000206D loc_206D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000206D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002074                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000207B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002080                 mov     esi, 1          ; size
.text:0000000000002085                 call    _fwrite
.text:000000000000208A                 call    _abort
.text:000000000000208A ; } // starts at 1FF0
.text:000000000000208A set_program_name endp
.text:000000000000208A
.text:000000000000208A ; ---------------------------------------------------------------------------
.text:000000000000208F                 align 10h
.text:0000000000002090
.text:0000000000002090 ; =============== S U B R O U T I N E =======================================
.text:0000000000002090
.text:0000000000002090 ; Attributes: info_from_lumina
.text:0000000000002090
.text:0000000000002090 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002090 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002090                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002090 ; __unwind {
.text:0000000000002090                 push    rbp
.text:0000000000002091                 push    rbx
.text:0000000000002092                 mov     rbp, rdi
.text:0000000000002095                 mov     ebx, esi
.text:0000000000002097                 sub     rsp, 8
.text:000000000000209B                 call    locale_charset
.text:00000000000020A0                 movzx   edx, byte ptr [rax]
.text:00000000000020A3                 and     edx, 0FFFFFFDFh
.text:00000000000020A6                 cmp     dl, 55h ; 'U'
.text:00000000000020A9                 jz      short loc_2120
.text:00000000000020AB                 cmp     dl, 47h ; 'G'
.text:00000000000020AE                 jz      short loc_20D0
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000020B0                                         ; gettext_quote+50↓j ...
.text:00000000000020B0                 lea     rax, unk_5133
.text:00000000000020B7                 lea     rdx, asc_5135   ; "'"
.text:00000000000020BE                 cmp     ebx, 9
.text:00000000000020C1                 cmovnz  rax, rdx
.text:00000000000020C5                 add     rsp, 8
.text:00000000000020C9                 pop     rbx
.text:00000000000020CA                 pop     rbp
.text:00000000000020CB                 retn
.text:00000000000020CB ; ---------------------------------------------------------------------------
.text:00000000000020CC                 align 10h
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000020D0                 movzx   edx, byte ptr [rax+1]
.text:00000000000020D4                 and     edx, 0FFFFFFDFh
.text:00000000000020D7                 cmp     dl, 42h ; 'B'
.text:00000000000020DA                 jnz     short loc_20B0
.text:00000000000020DC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000020E0                 jnz     short loc_20B0
.text:00000000000020E2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000020E6                 jnz     short loc_20B0
.text:00000000000020E8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000020EC                 jnz     short loc_20B0
.text:00000000000020EE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000020F2                 jnz     short loc_20B0
.text:00000000000020F4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000020F8                 jnz     short loc_20B0
.text:00000000000020FA                 cmp     byte ptr [rax+7], 0
.text:00000000000020FE                 jnz     short loc_20B0
.text:0000000000002100                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002104                 lea     rax, unk_512C
.text:000000000000210B                 lea     rdx, unk_5130
.text:0000000000002112                 cmovnz  rax, rdx
.text:0000000000002116                 add     rsp, 8
.text:000000000000211A                 pop     rbx
.text:000000000000211B                 pop     rbp
.text:000000000000211C                 retn
.text:000000000000211C ; ---------------------------------------------------------------------------
.text:000000000000211D                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002120                 movzx   edx, byte ptr [rax+1]
.text:0000000000002124                 and     edx, 0FFFFFFDFh
.text:0000000000002127                 cmp     dl, 54h ; 'T'
.text:000000000000212A                 jnz     short loc_20B0
.text:000000000000212C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002130                 and     edx, 0FFFFFFDFh
.text:0000000000002133                 cmp     dl, 46h ; 'F'
.text:0000000000002136                 jnz     loc_20B0
.text:000000000000213C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002140                 jnz     loc_20B0
.text:0000000000002146                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000214A                 jnz     loc_20B0
.text:0000000000002150                 cmp     byte ptr [rax+5], 0
.text:0000000000002154                 jnz     loc_20B0
.text:000000000000215A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000215E                 lea     rax, unk_5124
.text:0000000000002165                 lea     rdx, unk_5128
.text:000000000000216C                 cmovnz  rax, rdx
.text:0000000000002170                 add     rsp, 8
.text:0000000000002174                 pop     rbx
.text:0000000000002175                 pop     rbp
.text:0000000000002176                 retn
.text:0000000000002176 ; } // starts at 2090
.text:0000000000002176 gettext_quote   endp
.text:0000000000002176
.text:0000000000002176 ; ---------------------------------------------------------------------------
.text:0000000000002177                 align 20h
.text:0000000000002180
.text:0000000000002180 ; =============== S U B R O U T I N E =======================================
.text:0000000000002180
.text:0000000000002180 ; Attributes: info_from_lumina
.text:0000000000002180
.text:0000000000002180 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002180 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002180                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002180
.text:0000000000002180 var_E0          = dword ptr -0E0h
.text:0000000000002180 var_DB          = byte ptr -0DBh
.text:0000000000002180 var_DA          = byte ptr -0DAh
.text:0000000000002180 var_D9          = byte ptr -0D9h
.text:0000000000002180 s               = qword ptr -0D8h
.text:0000000000002180 n               = qword ptr -0D0h
.text:0000000000002180 var_C8          = qword ptr -0C8h
.text:0000000000002180 ps              = qword ptr -0C0h
.text:0000000000002180 var_B8          = qword ptr -0B8h
.text:0000000000002180 var_B0          = qword ptr -0B0h
.text:0000000000002180 var_A8          = qword ptr -0A8h
.text:0000000000002180 s2              = qword ptr -0A0h
.text:0000000000002180 var_98          = qword ptr -98h
.text:0000000000002180 var_90          = qword ptr -90h
.text:0000000000002180 var_88          = qword ptr -88h
.text:0000000000002180 var_80          = qword ptr -80h
.text:0000000000002180 var_78          = qword ptr -78h
.text:0000000000002180 var_70          = dword ptr -70h
.text:0000000000002180 var_6C          = byte ptr -6Ch
.text:0000000000002180 var_6B          = byte ptr -6Bh
.text:0000000000002180 var_6A          = byte ptr -6Ah
.text:0000000000002180 var_69          = byte ptr -69h
.text:0000000000002180 var_68          = qword ptr -68h
.text:0000000000002180 var_60          = qword ptr -60h
.text:0000000000002180 wc              = dword ptr -4Ch
.text:0000000000002180 var_48          = qword ptr -48h
.text:0000000000002180 var_40          = qword ptr -40h
.text:0000000000002180 arg_0           = qword ptr  8
.text:0000000000002180 arg_8           = qword ptr  10h
.text:0000000000002180 arg_10          = qword ptr  18h
.text:0000000000002180
.text:0000000000002180 ; __unwind {
.text:0000000000002180                 push    r15
.text:0000000000002182                 push    r14
.text:0000000000002184                 mov     r15d, r8d
.text:0000000000002187                 push    r13
.text:0000000000002189                 push    r12
.text:000000000000218B                 mov     r14, rdi
.text:000000000000218E                 push    rbp
.text:000000000000218F                 push    rbx
.text:0000000000002190                 mov     ebx, r9d
.text:0000000000002193                 mov     r13, rsi
.text:0000000000002196                 mov     rbp, rcx
.text:0000000000002199                 and     ebx, 2
.text:000000000000219C                 sub     rsp, 0B8h
.text:00000000000021A3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000021AB                 mov     [rsp+0E8h+s], rdx
.text:00000000000021B0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000021B5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000021BA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000021BF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000021C7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000021CC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000021D4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000021D9                 mov     rax, fs:28h
.text:00000000000021E2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000021EA                 xor     eax, eax
.text:00000000000021EC                 call    ___ctype_get_mb_cur_max
.text:00000000000021F1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000021F5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000021FA                 ja      def_2211        ; jumptable 00000000000121F1 default case
.text:0000000000002200                 lea     rcx, jpt_2211
.text:0000000000002207                 mov     edx, r15d
.text:000000000000220A                 movsxd  rax, ds:(jpt_2211 - 51A0h)[rcx+rdx*4]
.text:000000000000220E                 add     rax, rcx
.text:0000000000002211                 jmp     rax             ; switch jump
.text:0000000000002213 ; ---------------------------------------------------------------------------
.text:0000000000002213
.text:0000000000002213 loc_2213:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002213                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002213                                         ; DATA XREF: ...
.text:0000000000002213                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002218                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000221D                 xor     r12d, r12d
.text:0000000000002220                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002229                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000222E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002233
.text:0000000000002233 loc_2233:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002233                 lea     rax, asc_5135   ; "'"
.text:000000000000223A                 mov     [rsp+0E8h+n], 1
.text:0000000000002243                 xor     r15d, r15d
.text:0000000000002246                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000224E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002253
.text:0000000000002253 loc_2253:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002253                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002253                 xor     r11d, r11d
.text:0000000000002256                 mov     rax, rbp
.text:0000000000002259                 mov     r8d, r12d
.text:000000000000225C                 mov     rbp, r11
.text:000000000000225F                 mov     r11, rax
.text:0000000000002262                 nop     word ptr [rax+rax+00h]
.text:0000000000002268
.text:0000000000002268 loc_2268:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002268                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002268                 cmp     r11, rbp
.text:000000000000226B                 setnz   r12b
.text:000000000000226F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002273                 jnz     short loc_2282
.text:0000000000002275                 mov     rax, [rsp+0E8h+s]
.text:000000000000227A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000227E                 setnz   r12b
.text:0000000000002282
.text:0000000000002282 loc_2282:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002282                 test    r12b, r12b
.text:0000000000002285                 jz      loc_28E0
.text:000000000000228B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002290                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002295                 lea     r9, [rdi+rbp]
.text:0000000000002299                 setnz   al
.text:000000000000229C                 and     al, [rsp+0E8h+var_DB]
.text:00000000000022A0                 mov     r10d, eax
.text:00000000000022A3                 jz      loc_2350
.text:00000000000022A9                 mov     rax, [rsp+0E8h+n]
.text:00000000000022AE                 test    rax, rax
.text:00000000000022B1                 jz      loc_26E0
.text:00000000000022B7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000022BB                 lea     rbx, [rbp+rax+0]
.text:00000000000022C0                 jnz     short loc_22F0
.text:00000000000022C2                 cmp     rax, 1
.text:00000000000022C6                 jbe     short loc_22F0
.text:00000000000022C8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000022CD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000022D2                 mov     [rsp+0E8h+ps], r9
.text:00000000000022D7                 call    _strlen
.text:00000000000022DC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000022E2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000022E8                 mov     r11, rax
.text:00000000000022EB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000022F0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000022F0                 cmp     rbx, r11
.text:00000000000022F3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000022F8                 ja      loc_28B0
.text:00000000000022FE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002303                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002308                 mov     rdi, r9         ; s1
.text:000000000000230B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002310                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002315                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000231A                 call    _memcmp
.text:000000000000231F                 test    eax, eax
.text:0000000000002321                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002326                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000232C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002331                 jnz     loc_28B0
.text:0000000000002337                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000233C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002342                 jnz     loc_32C5
.text:0000000000002348                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002350                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002350                 movzx   ebx, byte ptr [r9]
.text:0000000000002354                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002357                 ja      def_236E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000235D                 lea     rcx, jpt_236E
.text:0000000000002364                 movzx   edx, bl
.text:0000000000002367                 movsxd  rax, ds:(jpt_236E - 51CCh)[rcx+rdx*4]
.text:000000000000236B                 add     rax, rcx
.text:000000000000236E                 jmp     rax             ; switch jump
.text:0000000000002370 ; ---------------------------------------------------------------------------
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002370                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002370                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002373
.text:0000000000002373 loc_2373:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002373                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002373                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002377                 setnz   al
.text:000000000000237A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000237E                 jnz     short loc_238C
.text:0000000000002380                 mov     rax, [rsp+0E8h+s]
.text:0000000000002385                 cmp     byte ptr [rax+1], 0
.text:0000000000002389                 setnz   al
.text:000000000000238C
.text:000000000000238C loc_238C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000238C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002391                 setz    dl
.text:0000000000002394                 test    al, al
.text:0000000000002396                 jz      loc_25E8
.text:000000000000239C
.text:000000000000239C loc_239C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000239C                 xor     r12d, r12d
.text:000000000000239F                 xor     eax, eax
.text:00000000000023A1                 nop     dword ptr [rax+00000000h]
.text:00000000000023A8
.text:00000000000023A8 loc_23A8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000023A8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000023A8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000023AD                 jnz     loc_24C2
.text:00000000000023B3                 test    dl, dl
.text:00000000000023B5                 jnz     loc_24C2
.text:00000000000023BB
.text:00000000000023BB loc_23BB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000023BB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000023C0                 test    rsi, rsi
.text:00000000000023C3                 jz      short loc_23D9
.text:00000000000023C5                 mov     edx, ebx
.text:00000000000023C7                 shr     dl, 5
.text:00000000000023CA                 movzx   edx, dl
.text:00000000000023CD                 mov     edx, [rsi+rdx*4]
.text:00000000000023D0                 bt      edx, ebx
.text:00000000000023D3                 jb      loc_2523
.text:00000000000023D9
.text:00000000000023D9 loc_23D9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000023D9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000023D9                 test    r10b, r10b
.text:00000000000023DC                 jnz     loc_2523
.text:00000000000023E2                 xor     eax, 1
.text:00000000000023E5                 add     rbp, 1
.text:00000000000023E9                 and     eax, r8d
.text:00000000000023EC
.text:00000000000023EC loc_23EC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000023EC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000023EC                 test    al, al
.text:00000000000023EE                 jz      short loc_2410
.text:00000000000023F0                 cmp     r13, r15
.text:00000000000023F3                 jbe     short loc_23FA
.text:00000000000023F5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000023FA
.text:00000000000023FA loc_23FA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000023FA                 lea     rax, [r15+1]
.text:00000000000023FE                 cmp     r13, rax
.text:0000000000002401                 jbe     short loc_2409
.text:0000000000002403                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002409
.text:0000000000002409 loc_2409:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002409                 add     r15, 2
.text:000000000000240D                 xor     r8d, r8d
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002410                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002410                 cmp     r15, r13
.text:0000000000002413                 jnb     short loc_2419
.text:0000000000002415                 mov     [r14+r15], bl
.text:0000000000002419
.text:0000000000002419 loc_2419:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002419                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000241E                 add     r15, 1
.text:0000000000002422                 mov     eax, 0
.text:0000000000002427                 test    r12b, r12b
.text:000000000000242A                 cmovz   edi, eax
.text:000000000000242D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002432                 jmp     loc_2268
.text:0000000000002432 ; ---------------------------------------------------------------------------
.text:0000000000002437                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002440                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002440                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002443
.text:0000000000002443 loc_2443:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002443                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002443                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002447                 cmp     eax, 2
.text:000000000000244A                 jz      loc_2A08
.text:0000000000002450                 cmp     eax, 5
.text:0000000000002453                 jz      loc_29C8
.text:0000000000002459                 cmp     eax, 2
.text:000000000000245C                 mov     ebx, 3Fh ; '?'
.text:0000000000002461                 setz    dl
.text:0000000000002464                 xor     r12d, r12d
.text:0000000000002467                 xor     eax, eax
.text:0000000000002469                 jmp     loc_23A8
.text:0000000000002469 ; ---------------------------------------------------------------------------
.text:000000000000246E                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002470                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002470                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002473
.text:0000000000002473 loc_2473:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002473                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002473                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002478                 jz      loc_2980
.text:000000000000247E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002483                 xor     edx, edx
.text:0000000000002485                 xor     eax, eax
.text:0000000000002487                 mov     ebx, 27h ; '''
.text:000000000000248C                 jmp     loc_23A8
.text:000000000000248C ; ---------------------------------------------------------------------------
.text:0000000000002491                 align 8
.text:0000000000002498
.text:0000000000002498 loc_2498:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002498                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002498                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000249D                 mov     ebx, 74h ; 't'
.text:00000000000024A2
.text:00000000000024A2 loc_24A2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000024A2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000024A2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024A7                 setz    al
.text:00000000000024AA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000024AE                 jnz     loc_25FE
.text:00000000000024B4
.text:00000000000024B4 loc_24B4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000024B4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000024B4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000024B9                 jnz     short loc_2520
.text:00000000000024BB
.text:00000000000024BB loc_24BB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000024BB                 mov     ebx, edx
.text:00000000000024BD                 xor     r12d, r12d
.text:00000000000024C0                 xor     eax, eax
.text:00000000000024C2
.text:00000000000024C2 loc_24C2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000024C2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000024C2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024C7                 jnz     loc_23BB
.text:00000000000024CD                 jmp     loc_23D9
.text:00000000000024CD ; ---------------------------------------------------------------------------
.text:00000000000024D2                 align 8
.text:00000000000024D8
.text:00000000000024D8 loc_24D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024D8                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:00000000000024D8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000024DD                 mov     ebx, 62h ; 'b'
.text:00000000000024E2                 jmp     short loc_24B4
.text:00000000000024E2 ; ---------------------------------------------------------------------------
.text:00000000000024E4                 align 8
.text:00000000000024E8
.text:00000000000024E8 loc_24E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024E8                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:00000000000024E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000024ED                 jz      loc_28C0
.text:00000000000024F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000024F8                 jz      loc_2710
.text:00000000000024FE
.text:00000000000024FE loc_24FE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000024FE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002503                 jz      loc_2710
.text:0000000000002509                 cmp     [rsp+0E8h+n], 0
.text:000000000000250F                 jnz     loc_28CB
.text:0000000000002515                 mov     ebx, 5Ch ; '\'
.text:000000000000251A                 nop     word ptr [rax+rax+00h]
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002520                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002520                 xor     r12d, r12d
.text:0000000000002523
.text:0000000000002523 loc_2523:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002523                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002523                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002528                 setz    dl
.text:000000000000252B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002530                 mov     eax, edx
.text:0000000000002532                 jnz     loc_2D88
.text:0000000000002538                 mov     eax, r8d
.text:000000000000253B                 xor     eax, 1
.text:000000000000253E                 and     al, dl
.text:0000000000002540                 jz      short loc_2571
.text:0000000000002542                 cmp     r13, r15
.text:0000000000002545                 jbe     short loc_254C
.text:0000000000002547                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000254C
.text:000000000000254C loc_254C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000254C                 lea     rdx, [r15+1]
.text:0000000000002550                 cmp     r13, rdx
.text:0000000000002553                 jbe     short loc_255B
.text:0000000000002555                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000255B
.text:000000000000255B loc_255B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000255B                 lea     rdx, [r15+2]
.text:000000000000255F                 cmp     r13, rdx
.text:0000000000002562                 jbe     short loc_256A
.text:0000000000002564                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000256A
.text:000000000000256A loc_256A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000256A                 add     r15, 3
.text:000000000000256E                 mov     r8d, eax
.text:0000000000002571
.text:0000000000002571 loc_2571:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002571                 cmp     r13, r15
.text:0000000000002574                 jbe     short loc_257B
.text:0000000000002576                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000257B
.text:000000000000257B loc_257B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000257B                 add     r15, 1
.text:000000000000257F                 add     rbp, 1
.text:0000000000002583                 jmp     loc_2410
.text:0000000000002583 ; ---------------------------------------------------------------------------
.text:0000000000002588                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002590                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002590                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002595                 jnz     loc_2763
.text:000000000000259B                 xor     edx, edx
.text:000000000000259D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000025A2                 jz      loc_24BB
.text:00000000000025A8                 add     rbp, 1
.text:00000000000025AC                 jmp     loc_2268
.text:00000000000025AC ; ---------------------------------------------------------------------------
.text:00000000000025B1                 align 8
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025B8                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:00000000000025B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000025BD                 setz    dl
.text:00000000000025C0                 xor     eax, eax
.text:00000000000025C2                 jmp     loc_23A8
.text:00000000000025C2 ; ---------------------------------------------------------------------------
.text:00000000000025C7                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:00000000000025D0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000025D5                 mov     ebx, 61h ; 'a'
.text:00000000000025DA                 jmp     loc_24B4
.text:00000000000025DA ; ---------------------------------------------------------------------------
.text:00000000000025DF                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025E0                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:00000000000025E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000025E5                 setz    dl
.text:00000000000025E8
.text:00000000000025E8 loc_25E8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000025E8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000025E8                 test    rbp, rbp
.text:00000000000025EB                 jnz     loc_239C
.text:00000000000025F1
.text:00000000000025F1 loc_25F1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000025F1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000025F1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000025F6                 and     al, dl
.text:00000000000025F8                 jz      loc_23A8
.text:00000000000025FE
.text:00000000000025FE loc_25FE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000025FE                 mov     rbp, r11
.text:0000000000002601                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002609                 jmp     loc_2D09
.text:0000000000002609 ; ---------------------------------------------------------------------------
.text:000000000000260E                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002610                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002610                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002615                 setz    dl
.text:0000000000002618                 xor     r12d, r12d
.text:000000000000261B                 jmp     short loc_25F1
.text:000000000000261B ; ---------------------------------------------------------------------------
.text:000000000000261D                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002620                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002620                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002625                 mov     ebx, 20h ; ' '
.text:000000000000262A                 setz    dl
.text:000000000000262D                 jmp     short loc_25F1
.text:000000000000262D ; ---------------------------------------------------------------------------
.text:000000000000262F                 align 10h
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002630                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002630                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002635                 mov     ebx, 72h ; 'r'
.text:000000000000263A                 jmp     loc_24A2
.text:000000000000263A ; ---------------------------------------------------------------------------
.text:000000000000263F                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002640                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002640                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002645                 mov     ebx, 66h ; 'f'
.text:000000000000264A                 jmp     loc_24B4
.text:000000000000264A ; ---------------------------------------------------------------------------
.text:000000000000264F                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002650                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002650                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002655                 mov     ebx, 76h ; 'v'
.text:000000000000265A                 jmp     loc_24B4
.text:000000000000265A ; ---------------------------------------------------------------------------
.text:000000000000265F                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002660                                         ; DATA XREF: .rodata:jpt_236E↓o
.text:0000000000002660                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002665                 mov     ebx, 6Eh ; 'n'
.text:000000000000266A                 jmp     loc_24A2
.text:000000000000266A ; ---------------------------------------------------------------------------
.text:000000000000266F                 align 10h
.text:0000000000002670
.text:0000000000002670 def_26FA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002670                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002670                                         ; DATA XREF: ...
.text:0000000000002670                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002673                 nop     dword ptr [rax+rax+00h]
.text:0000000000002678
.text:0000000000002678 def_236E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002678                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002678                                         ; DATA XREF: ...
.text:0000000000002678                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000267E                 jnz     loc_2A28
.text:0000000000002684                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002689                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000268E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002693                 call    ___ctype_b_loc
.text:0000000000002698                 mov     rcx, [rax]
.text:000000000000269B                 movzx   edx, bl
.text:000000000000269E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000026A4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000026AA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000026AF                 mov     edi, 1
.text:00000000000026B4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000026B8                 and     ax, 4000h
.text:00000000000026BC                 setnz   r12b
.text:00000000000026C0                 setz    al
.text:00000000000026C3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000026C7
.text:00000000000026C7 loc_26C7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000026C7                 test    al, al
.text:00000000000026C9                 jnz     loc_3061
.text:00000000000026CF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026D4                 setz    dl
.text:00000000000026D7                 jmp     loc_23A8
.text:00000000000026D7 ; ---------------------------------------------------------------------------
.text:00000000000026DC                 align 20h
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000026E0                 movzx   ebx, byte ptr [r9]
.text:00000000000026E4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000026E7                 ja      short def_26FA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000026E9                 lea     rcx, jpt_26FA
.text:00000000000026F0                 movzx   edx, bl
.text:00000000000026F3                 movsxd  rax, ds:(jpt_26FA - 53C8h)[rcx+rdx*4]
.text:00000000000026F7                 add     rax, rcx
.text:00000000000026FA                 jmp     rax             ; switch jump
.text:00000000000026FA ; ---------------------------------------------------------------------------
.text:00000000000026FC                 align 20h
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002700                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002700                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002703                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002708                 jnz     loc_24FE
.text:000000000000270E                 xchg    ax, ax
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002710                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002710                 mov     edx, 5Ch ; '\'
.text:0000000000002715                 mov     ebx, 5Ch ; '\'
.text:000000000000271A                 jmp     loc_24B4
.text:000000000000271A ; ---------------------------------------------------------------------------
.text:000000000000271F                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002720                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002720                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002725                 xor     r10d, r10d
.text:0000000000002728                 mov     ebx, 66h ; 'f'
.text:000000000000272D                 jmp     loc_24B4
.text:000000000000272D ; ---------------------------------------------------------------------------
.text:0000000000002732                 align 8
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002738                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002738                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000273D                 xor     r10d, r10d
.text:0000000000002740                 mov     ebx, 6Eh ; 'n'
.text:0000000000002745                 jmp     loc_24A2
.text:0000000000002745 ; ---------------------------------------------------------------------------
.text:000000000000274A                 align 10h
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002750                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002750                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002755                 jmp     loc_2520
.text:0000000000002755 ; ---------------------------------------------------------------------------
.text:000000000000275A                 align 20h
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002760                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002760                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002763
.text:0000000000002763 loc_2763:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002763                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002768                 setz    dl
.text:000000000000276B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002770                 jnz     loc_330A
.text:0000000000002776                 mov     eax, r8d
.text:0000000000002779                 mov     rcx, r15
.text:000000000000277C                 xor     eax, 1
.text:000000000000277F                 and     al, dl
.text:0000000000002781                 jz      short loc_27B0
.text:0000000000002783                 cmp     r13, r15
.text:0000000000002786                 jbe     short loc_278D
.text:0000000000002788                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000278D
.text:000000000000278D loc_278D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000278D                 lea     rcx, [r15+1]
.text:0000000000002791                 cmp     r13, rcx
.text:0000000000002794                 jbe     short loc_279C
.text:0000000000002796                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000279C
.text:000000000000279C loc_279C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000279C                 lea     rcx, [r15+2]
.text:00000000000027A0                 cmp     r13, rcx
.text:00000000000027A3                 ja      loc_2DD9
.text:00000000000027A9
.text:00000000000027A9 loc_27A9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000027A9                 lea     rcx, [r15+3]
.text:00000000000027AD                 mov     r8d, eax
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000027B0                 cmp     r13, rcx
.text:00000000000027B3                 jbe     short loc_27BA
.text:00000000000027B5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000027BA
.text:00000000000027BA loc_27BA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000027BA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027BF                 lea     r15, [rcx+1]
.text:00000000000027C3                 jz      loc_2DC9
.text:00000000000027C9                 lea     rax, [rbp+1]
.text:00000000000027CD                 cmp     rax, r11
.text:00000000000027D0                 jnb     short loc_27EB
.text:00000000000027D2                 mov     rax, [rsp+0E8h+s]
.text:00000000000027D7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000027DC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000027E0                 sub     eax, 30h ; '0'
.text:00000000000027E3                 cmp     al, 9
.text:00000000000027E5                 jbe     loc_3019
.text:00000000000027EB
.text:00000000000027EB loc_27EB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000027EB                 mov     eax, r12d
.text:00000000000027EE                 mov     ebx, 30h ; '0'
.text:00000000000027F3                 xor     r12d, r12d
.text:00000000000027F6                 jmp     loc_23A8
.text:00000000000027F6 ; ---------------------------------------------------------------------------
.text:00000000000027FB                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002800                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002800                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002805                 mov     r12d, r10d
.text:0000000000002808                 setz    dl
.text:000000000000280B                 xor     r10d, r10d
.text:000000000000280E                 xor     eax, eax
.text:0000000000002810                 jmp     loc_23A8
.text:0000000000002810 ; ---------------------------------------------------------------------------
.text:0000000000002815                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002818                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002818                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000281D                 setz    dl
.text:0000000000002820                 xor     r10d, r10d
.text:0000000000002823                 jmp     loc_25E8
.text:0000000000002823 ; ---------------------------------------------------------------------------
.text:0000000000002828                 align 10h
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002830                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002830                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002835                 setz    dl
.text:0000000000002838                 xor     r10d, r10d
.text:000000000000283B                 xor     r12d, r12d
.text:000000000000283E                 jmp     loc_25F1
.text:000000000000283E ; ---------------------------------------------------------------------------
.text:0000000000002843                 align 8
.text:0000000000002848
.text:0000000000002848 loc_2848:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002848                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002848                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000284D                 mov     r12d, r10d
.text:0000000000002850                 mov     ebx, 20h ; ' '
.text:0000000000002855                 setz    dl
.text:0000000000002858                 xor     r10d, r10d
.text:000000000000285B                 jmp     loc_25F1
.text:0000000000002860 ; ---------------------------------------------------------------------------
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002860                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002860                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002865                 xor     r10d, r10d
.text:0000000000002868                 mov     ebx, 72h ; 'r'
.text:000000000000286D                 jmp     loc_24A2
.text:000000000000286D ; ---------------------------------------------------------------------------
.text:0000000000002872                 align 8
.text:0000000000002878
.text:0000000000002878 loc_2878:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002878                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002878                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000287D                 jmp     loc_2520
.text:000000000000287D ; ---------------------------------------------------------------------------
.text:0000000000002882                 align 8
.text:0000000000002888
.text:0000000000002888 loc_2888:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002888                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:0000000000002888                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000288D                 xor     r10d, r10d
.text:0000000000002890                 mov     ebx, 74h ; 't'
.text:0000000000002895                 jmp     loc_24A2
.text:0000000000002895 ; ---------------------------------------------------------------------------
.text:000000000000289A                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028A0                                         ; DATA XREF: .rodata:jpt_26FA↓o
.text:00000000000028A0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000028A5                 jmp     loc_2520
.text:00000000000028A5 ; ---------------------------------------------------------------------------
.text:00000000000028AA                 align 10h
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000028B0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000028B0                 xor     r10d, r10d
.text:00000000000028B3                 jmp     loc_2350
.text:00000000000028B3 ; ---------------------------------------------------------------------------
.text:00000000000028B8                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000028C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028C5                 jnz     loc_3230
.text:00000000000028CB
.text:00000000000028CB loc_28CB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000028CB                 add     rbp, 1
.text:00000000000028CF                 mov     eax, r8d
.text:00000000000028D2                 xor     r12d, r12d
.text:00000000000028D5                 mov     ebx, 5Ch ; '\'
.text:00000000000028DA                 jmp     loc_23EC
.text:00000000000028DA ; ---------------------------------------------------------------------------
.text:00000000000028DF                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000028E0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028E5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000028EA                 mov     r12d, r8d
.text:00000000000028ED                 mov     rbp, r11
.text:00000000000028F0                 setz    dl
.text:00000000000028F3                 mov     eax, ebx
.text:00000000000028F5                 test    r15, r15
.text:00000000000028F8                 setz    cl
.text:00000000000028FB                 and     eax, edx
.text:00000000000028FD                 and     al, cl
.text:00000000000028FF                 jnz     loc_3366
.text:0000000000002905                 mov     eax, ebx
.text:0000000000002907                 xor     eax, 1
.text:000000000000290A                 and     dl, al
.text:000000000000290C                 jz      loc_327C
.text:0000000000002912                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002917                 jz      loc_327A
.text:000000000000291D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002922                 jnz     loc_331D
.text:0000000000002928                 test    r13, r13
.text:000000000000292B                 setz    al
.text:000000000000292E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002934                 setnz   dl
.text:0000000000002937                 and     al, dl
.text:0000000000002939                 jz      loc_335C
.text:000000000000293F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002944
.text:0000000000002944 loc_2944:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002944                 lea     rbx, asc_5135   ; "'"
.text:000000000000294B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000294F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002957                 mov     r15d, 1
.text:000000000000295D                 mov     [rsp+0E8h+n], 1
.text:0000000000002966                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000296B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002970                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002974                 jmp     loc_2253
.text:0000000000002974 ; ---------------------------------------------------------------------------
.text:0000000000002979                 align 20h
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002980                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002985                 jnz     loc_3230
.text:000000000000298B                 test    r13, r13
.text:000000000000298E                 jz      loc_2D90
.text:0000000000002994                 xor     edx, edx
.text:0000000000002996                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000299C                 jnz     loc_2D90
.text:00000000000029A2
.text:00000000000029A2 loc_29A2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000029A2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000029A2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000029A7                 add     r15, 3
.text:00000000000029AB                 xor     eax, eax
.text:00000000000029AD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000029B2                 xor     r8d, r8d
.text:00000000000029B5                 mov     r13, rdx
.text:00000000000029B8                 mov     ebx, 27h ; '''
.text:00000000000029BD                 jmp     loc_23D9
.text:00000000000029BD ; ---------------------------------------------------------------------------
.text:00000000000029C2                 align 8
.text:00000000000029C8
.text:00000000000029C8 loc_29C8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000029C8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000029CD                 jz      short loc_29F0
.text:00000000000029CF                 lea     rcx, [rbp+2]
.text:00000000000029D3                 cmp     rcx, r11
.text:00000000000029D6                 jnb     short loc_29F0
.text:00000000000029D8                 mov     rax, [rsp+0E8h+s]
.text:00000000000029DD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000029E2                 jz      loc_3172
.text:00000000000029E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000029F0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000029F0                 xor     edx, edx
.text:00000000000029F2                 xor     r12d, r12d
.text:00000000000029F5                 xor     eax, eax
.text:00000000000029F7                 mov     ebx, 3Fh ; '?'
.text:00000000000029FC                 jmp     loc_23A8
.text:00000000000029FC ; ---------------------------------------------------------------------------
.text:0000000000002A01                 align 8
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002A08                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A0D                 jnz     loc_3230
.text:0000000000002A13                 xor     r12d, r12d
.text:0000000000002A16                 xor     eax, eax
.text:0000000000002A18                 mov     ebx, 3Fh ; '?'
.text:0000000000002A1D                 jmp     loc_23D9
.text:0000000000002A1D ; ---------------------------------------------------------------------------
.text:0000000000002A22                 align 8
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002A28                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002A30                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A34                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002A40                 mov     [rsp+0E8h+ps], rax
.text:0000000000002A45                 jnz     short loc_2A74
.text:0000000000002A47                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002A4C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002A51                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002A56                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002A5B                 call    _strlen
.text:0000000000002A60                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002A66                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002A6C                 mov     r11, rax
.text:0000000000002A6F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002A74
.text:0000000000002A74 loc_2A74:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002A74                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002A7C                 xor     ecx, ecx
.text:0000000000002A7E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002A82                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002A87                 mov     rbx, rcx
.text:0000000000002A8A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002A92                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002A97                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002A9C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002AA4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002AA9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002AAE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002AB3
.text:0000000000002AB3 loc_2AB3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002AB3                 mov     rax, [rsp+0E8h+s]
.text:0000000000002AB8                 lea     r14, [rbp+rbx+0]
.text:0000000000002ABD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002AC2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002AC7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002ACC                 lea     r13, [rax+r14]
.text:0000000000002AD0                 sub     rdx, r14
.text:0000000000002AD3                 mov     rsi, r13
.text:0000000000002AD6                 call    rpl_mbrtowc
.text:0000000000002ADB                 test    rax, rax
.text:0000000000002ADE                 mov     r15, rax
.text:0000000000002AE1                 jz      short loc_2B31
.text:0000000000002AE3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AE7                 jz      loc_3105
.text:0000000000002AED                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002AF1                 jz      loc_3091
.text:0000000000002AF7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002AFC                 setz    al
.text:0000000000002AFF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002B03                 jnz     loc_2CA0
.text:0000000000002B09
.text:0000000000002B09 loc_2B09:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002B09                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002B09                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002B10                 call    _iswprint
.text:0000000000002B15                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002B1A                 test    eax, eax
.text:0000000000002B1C                 mov     eax, 0
.text:0000000000002B21                 cmovz   r12d, eax
.text:0000000000002B25                 add     rbx, r15
.text:0000000000002B28                 call    _mbsinit
.text:0000000000002B2D                 test    eax, eax
.text:0000000000002B2F                 jz      short loc_2AB3
.text:0000000000002B31
.text:0000000000002B31 loc_2B31:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002B31                 mov     edx, r12d
.text:0000000000002B34                 mov     rdi, rbx
.text:0000000000002B37                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002B3D                 xor     edx, 1
.text:0000000000002B40                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002B45                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002B4B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002B4F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002B57                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002B5C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002B61                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002B66
.text:0000000000002B66 loc_2B66:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002B66                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002B66                 cmp     rdi, 1
.text:0000000000002B6A                 jbe     loc_316B
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002B70                 mov     rcx, rdi
.text:0000000000002B73                 xor     esi, esi
.text:0000000000002B75                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002B7B                 add     rcx, rbp
.text:0000000000002B7E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002B83                 jmp     loc_2C3E
.text:0000000000002B83 ; ---------------------------------------------------------------------------
.text:0000000000002B88                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002B90                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B95                 setz    al
.text:0000000000002B98                 test    r9b, r9b
.text:0000000000002B9B                 jnz     loc_3050
.text:0000000000002BA1                 mov     esi, r8d
.text:0000000000002BA4                 xor     esi, 1
.text:0000000000002BA7                 and     al, sil
.text:0000000000002BAA                 jz      short loc_2BDB
.text:0000000000002BAC                 cmp     r13, r15
.text:0000000000002BAF                 jbe     short loc_2BB6
.text:0000000000002BB1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002BB6
.text:0000000000002BB6 loc_2BB6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002BB6                 lea     rsi, [r15+1]
.text:0000000000002BBA                 cmp     r13, rsi
.text:0000000000002BBD                 jbe     short loc_2BC5
.text:0000000000002BBF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002BC5
.text:0000000000002BC5 loc_2BC5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002BC5                 lea     rsi, [r15+2]
.text:0000000000002BC9                 cmp     r13, rsi
.text:0000000000002BCC                 jbe     short loc_2BD4
.text:0000000000002BCE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002BD4
.text:0000000000002BD4 loc_2BD4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002BD4                 add     r15, 3
.text:0000000000002BD8                 mov     r8d, eax
.text:0000000000002BDB
.text:0000000000002BDB loc_2BDB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002BDB                 cmp     r13, r15
.text:0000000000002BDE                 jbe     short loc_2BE5
.text:0000000000002BE0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002BE5
.text:0000000000002BE5 loc_2BE5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002BE5                 lea     rax, [r15+1]
.text:0000000000002BE9                 cmp     r13, rax
.text:0000000000002BEC                 jbe     short loc_2BFB
.text:0000000000002BEE                 mov     eax, ebx
.text:0000000000002BF0                 shr     al, 6
.text:0000000000002BF3                 add     eax, 30h ; '0'
.text:0000000000002BF6                 mov     [r14+r15+1], al
.text:0000000000002BFB
.text:0000000000002BFB loc_2BFB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002BFB                 lea     rax, [r15+2]
.text:0000000000002BFF                 cmp     r13, rax
.text:0000000000002C02                 jbe     short loc_2C14
.text:0000000000002C04                 mov     eax, ebx
.text:0000000000002C06                 shr     al, 3
.text:0000000000002C09                 and     eax, 7
.text:0000000000002C0C                 add     eax, 30h ; '0'
.text:0000000000002C0F                 mov     [r14+r15+2], al
.text:0000000000002C14
.text:0000000000002C14 loc_2C14:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002C14                 and     ebx, 7
.text:0000000000002C17                 add     rbp, 1
.text:0000000000002C1B                 add     r15, 3
.text:0000000000002C1F                 add     ebx, 30h ; '0'
.text:0000000000002C22                 cmp     rbp, rcx
.text:0000000000002C25                 jnb     loc_2410
.text:0000000000002C2B                 mov     esi, edx
.text:0000000000002C2D
.text:0000000000002C2D loc_2C2D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002C2D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002C2D                 cmp     r13, r15
.text:0000000000002C30                 jbe     short loc_2C36
.text:0000000000002C32                 mov     [r14+r15], bl
.text:0000000000002C36
.text:0000000000002C36 loc_2C36:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002C36                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002C3A                 add     r15, 1
.text:0000000000002C3E
.text:0000000000002C3E loc_2C3E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002C3E                 test    dl, dl
.text:0000000000002C40                 jnz     loc_2B90
.text:0000000000002C46                 mov     eax, esi
.text:0000000000002C48                 xor     eax, 1
.text:0000000000002C4B                 and     eax, r8d
.text:0000000000002C4E                 test    r10b, r10b
.text:0000000000002C51                 jz      short loc_2C61
.text:0000000000002C53                 cmp     r13, r15
.text:0000000000002C56                 jbe     short loc_2C5D
.text:0000000000002C58                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C5D
.text:0000000000002C5D loc_2C5D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002C5D                 add     r15, 1
.text:0000000000002C61
.text:0000000000002C61 loc_2C61:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002C61                 add     rbp, 1
.text:0000000000002C65                 cmp     rbp, rcx
.text:0000000000002C68                 jnb     loc_23EC
.text:0000000000002C6E                 test    al, al
.text:0000000000002C70                 jz      loc_306E
.text:0000000000002C76                 cmp     r13, r15
.text:0000000000002C79                 jbe     short loc_2C80
.text:0000000000002C7B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002C80                 lea     rax, [r15+1]
.text:0000000000002C84                 cmp     r13, rax
.text:0000000000002C87                 jbe     short loc_2C8F
.text:0000000000002C89                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002C8F
.text:0000000000002C8F loc_2C8F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002C8F                 add     r15, 2
.text:0000000000002C93                 xor     r10d, r10d
.text:0000000000002C96                 xor     r8d, r8d
.text:0000000000002C99                 jmp     short loc_2C2D
.text:0000000000002C99 ; ---------------------------------------------------------------------------
.text:0000000000002C9B                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002CA0                 cmp     r15, 1
.text:0000000000002CA4                 jz      loc_2B09
.text:0000000000002CAA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002CAF                 lea     rcx, [rdi+r15]
.text:0000000000002CB3                 lea     rdx, [rdi+r14+1]
.text:0000000000002CB8                 lea     r8, [rcx+r14]
.text:0000000000002CBC                 jmp     short loc_2CCD
.text:0000000000002CBC ; ---------------------------------------------------------------------------
.text:0000000000002CBE                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002CC0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002CC0                 add     rdx, 1
.text:0000000000002CC4                 cmp     r8, rdx
.text:0000000000002CC7                 jz      loc_2B09
.text:0000000000002CCD
.text:0000000000002CCD loc_2CCD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002CCD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002CD0                 sub     ecx, 5Bh ; '['
.text:0000000000002CD3                 cmp     cl, 21h ; '!'
.text:0000000000002CD6                 ja      short loc_2CC0
.text:0000000000002CD8                 mov     esi, 1
.text:0000000000002CDD                 shl     rsi, cl
.text:0000000000002CE0                 mov     rcx, rsi
.text:0000000000002CE3                 mov     rsi, 20000002Bh
.text:0000000000002CED                 test    rcx, rsi
.text:0000000000002CF0                 jz      short loc_2CC0
.text:0000000000002CF2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002CF7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002CFC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002D01                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D09
.text:0000000000002D09 loc_2D09:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002D09                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002D09                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D0E                 jz      short loc_2D20
.text:0000000000002D10                 test    al, al
.text:0000000000002D12                 mov     eax, 4
.text:0000000000002D17                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002D1C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002D20                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002D20                 sub     rsp, 8
.text:0000000000002D24                 mov     rcx, rbp
.text:0000000000002D27                 mov     rsi, r13
.text:0000000000002D2A                 push    [rsp+0F0h+var_88]
.text:0000000000002D2E                 push    [rsp+0F8h+var_80]
.text:0000000000002D32                 mov     rdi, r14
.text:0000000000002D35                 push    0
.text:0000000000002D37                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002D3F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002D44                 mov     rdx, [rsp+108h+s]
.text:0000000000002D49                 and     r9d, 0FFFFFFFDh
.text:0000000000002D4D                 call    quotearg_buffer_restyled
.text:0000000000002D52                 add     rsp, 20h
.text:0000000000002D56                 mov     r15, rax
.text:0000000000002D59
.text:0000000000002D59 loc_2D59:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002D59                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002D59                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002D61                 xor     rbx, fs:28h
.text:0000000000002D6A                 mov     rax, r15
.text:0000000000002D6D                 jnz     loc_3373
.text:0000000000002D73                 add     rsp, 0B8h
.text:0000000000002D7A                 pop     rbx
.text:0000000000002D7B                 pop     rbp
.text:0000000000002D7C                 pop     r12
.text:0000000000002D7E                 pop     r13
.text:0000000000002D80                 pop     r14
.text:0000000000002D82                 pop     r15
.text:0000000000002D84                 retn
.text:0000000000002D84 ; ---------------------------------------------------------------------------
.text:0000000000002D85                 align 8
.text:0000000000002D88
.text:0000000000002D88 loc_2D88:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002D88                 mov     rbp, r11
.text:0000000000002D8B                 jmp     loc_2D09
.text:0000000000002D90 ; ---------------------------------------------------------------------------
.text:0000000000002D90
.text:0000000000002D90 loc_2D90:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002D90                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002D90                 cmp     r13, r15
.text:0000000000002D93                 jbe     short loc_2D9A
.text:0000000000002D95                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D9A
.text:0000000000002D9A loc_2D9A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002D9A                 lea     rax, [r15+1]
.text:0000000000002D9E                 cmp     r13, rax
.text:0000000000002DA1                 jbe     short loc_2DA9
.text:0000000000002DA3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002DA9
.text:0000000000002DA9 loc_2DA9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002DA9                 lea     rax, [r15+2]
.text:0000000000002DAD                 cmp     r13, rax
.text:0000000000002DB0                 jbe     loc_33A2
.text:0000000000002DB6                 mov     rdx, r13
.text:0000000000002DB9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DBF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002DC4                 jmp     loc_29A2
.text:0000000000002DC9 ; ---------------------------------------------------------------------------
.text:0000000000002DC9
.text:0000000000002DC9 loc_2DC9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002DC9                 mov     eax, r12d
.text:0000000000002DCC                 mov     ebx, 30h ; '0'
.text:0000000000002DD1                 xor     r12d, r12d
.text:0000000000002DD4                 jmp     loc_23D9
.text:0000000000002DD9 ; ---------------------------------------------------------------------------
.text:0000000000002DD9
.text:0000000000002DD9 loc_2DD9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002DD9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DDF                 jmp     loc_27A9
.text:0000000000002DE4 ; ---------------------------------------------------------------------------
.text:0000000000002DE4
.text:0000000000002DE4 loc_2DE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DE4                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002DE4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002DE6                 jnz     loc_2213        ; jumptable 00000000000121F1 case 1
.text:0000000000002DEC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DF1
.text:0000000000002DF1 loc_2DF1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002DF1                 test    r13, r13
.text:0000000000002DF4                 jnz     loc_338A
.text:0000000000002DFA                 lea     rax, asc_5135   ; "'"
.text:0000000000002E01                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E0A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E0F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E14                 xor     r12d, r12d
.text:0000000000002E17                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002E1C                 mov     [rsp+0E8h+n], 1
.text:0000000000002E25                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E2A                 mov     r15d, 1
.text:0000000000002E30                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E38                 jmp     loc_2253
.text:0000000000002E38 ; ---------------------------------------------------------------------------
.text:0000000000002E3D                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E40                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002E40                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002E42                 jnz     loc_323D
.text:0000000000002E48                 test    r13, r13
.text:0000000000002E4B                 jz      loc_3076
.text:0000000000002E51                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002E55                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E5A                 xor     r12d, r12d
.text:0000000000002E5D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E62                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E6B
.text:0000000000002E6B loc_2E6B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002E6B                 lea     rax, unk_5133
.text:0000000000002E72                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002E77                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E7C                 mov     [rsp+0E8h+n], 1
.text:0000000000002E85                 mov     r15d, 1
.text:0000000000002E8B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E90                 jmp     loc_2253
.text:0000000000002E95 ; ---------------------------------------------------------------------------
.text:0000000000002E95
.text:0000000000002E95 loc_2E95:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E95                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002E95                 lea     rax, unk_5133   ; jumptable 00000000000121F1 case 6
.text:0000000000002E9C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002EA1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EA6                 xor     r12d, r12d
.text:0000000000002EA9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EB2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002EB7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EBC                 mov     [rsp+0E8h+n], 1
.text:0000000000002EC5                 xor     r15d, r15d
.text:0000000000002EC8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002ECD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002ED5                 jmp     loc_2253
.text:0000000000002EDA ; ---------------------------------------------------------------------------
.text:0000000000002EDA
.text:0000000000002EDA loc_2EDA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EDA                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002EDA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002EDF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EE4                 xor     r12d, r12d
.text:0000000000002EE7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EF0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EF5                 xor     r15d, r15d
.text:0000000000002EF8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EFD                 mov     [rsp+0E8h+n], 0
.text:0000000000002F06                 mov     [rsp+0E8h+s2], 0
.text:0000000000002F0F                 jmp     loc_2253
.text:0000000000002F14 ; ---------------------------------------------------------------------------
.text:0000000000002F14
.text:0000000000002F14 loc_2F14:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F14                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002F14                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002F19                 jz      short loc_2F71
.text:0000000000002F1B                 lea     rsi, asc_5137   ; "`"
.text:0000000000002F22                 xor     edi, edi        ; domainname
.text:0000000000002F24                 mov     edx, 5          ; category
.text:0000000000002F29                 call    _dcgettext
.text:0000000000002F2E                 mov     rcx, rax
.text:0000000000002F31                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002F36                 lea     rax, asc_5137   ; "`"
.text:0000000000002F3D                 cmp     rcx, rax
.text:0000000000002F40                 jz      loc_32DE
.text:0000000000002F46
.text:0000000000002F46 loc_2F46:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002F46                 lea     rsi, asc_5135   ; "'"
.text:0000000000002F4D                 xor     edi, edi        ; domainname
.text:0000000000002F4F                 mov     edx, 5          ; category
.text:0000000000002F54                 call    _dcgettext
.text:0000000000002F59                 mov     rcx, rax
.text:0000000000002F5C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002F61                 lea     rax, asc_5135   ; "'"
.text:0000000000002F68                 cmp     rcx, rax
.text:0000000000002F6B                 jz      loc_32F4
.text:0000000000002F71
.text:0000000000002F71 loc_2F71:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002F71                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002F71                 xor     r15d, r15d
.text:0000000000002F74                 test    ebx, ebx
.text:0000000000002F76                 jz      loc_313D
.text:0000000000002F7C
.text:0000000000002F7C loc_2F7C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002F7C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002F7C                 test    ebx, ebx
.text:0000000000002F7E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002F83                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002F88                 xor     r12d, r12d
.text:0000000000002F8B                 mov     rdi, rbx        ; s
.text:0000000000002F8E                 call    _strlen
.text:0000000000002F93                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002F98                 mov     [rsp+0E8h+n], rax
.text:0000000000002F9D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FA2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FA7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FB0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FB5                 jmp     loc_2253
.text:0000000000002FBA ; ---------------------------------------------------------------------------
.text:0000000000002FBA
.text:0000000000002FBA loc_2FBA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FBA                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002FBA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002FBF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FC4                 xor     r12d, r12d
.text:0000000000002FC7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FD0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002FD5                 xor     r15d, r15d
.text:0000000000002FD8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002FDD                 mov     [rsp+0E8h+n], 0
.text:0000000000002FE6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002FEF                 jmp     loc_2253
.text:0000000000002FF4 ; ---------------------------------------------------------------------------
.text:0000000000002FF4
.text:0000000000002FF4 loc_2FF4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FF4                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:0000000000002FF4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002FF9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FFE                 xor     r12d, r12d
.text:0000000000003001                 mov     [rsp+0E8h+var_98], 0
.text:000000000000300A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000300F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003014                 jmp     loc_2233
.text:0000000000003019 ; ---------------------------------------------------------------------------
.text:0000000000003019
.text:0000000000003019 loc_3019:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003019                 cmp     r13, r15
.text:000000000000301C                 jbe     short loc_3023
.text:000000000000301E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003023
.text:0000000000003023 loc_3023:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003023                 lea     rax, [rcx+2]
.text:0000000000003027                 cmp     r13, rax
.text:000000000000302A                 jbe     short loc_3032
.text:000000000000302C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003032
.text:0000000000003032 loc_3032:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003032                 mov     eax, r12d
.text:0000000000003035                 lea     r15, [rcx+3]
.text:0000000000003039                 xor     r12d, r12d
.text:000000000000303C                 mov     ebx, 30h ; '0'
.text:0000000000003041                 jmp     loc_23A8
.text:0000000000003041 ; ---------------------------------------------------------------------------
.text:0000000000003046                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003050                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003055                 mov     rbp, r11
.text:0000000000003058                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000305C                 jmp     loc_2D09
.text:0000000000003061 ; ---------------------------------------------------------------------------
.text:0000000000003061
.text:0000000000003061 loc_3061:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003061                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003066                 xor     r12d, r12d
.text:0000000000003069                 jmp     loc_2B70
.text:000000000000306E ; ---------------------------------------------------------------------------
.text:000000000000306E
.text:000000000000306E loc_306E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000306E                 xor     r10d, r10d
.text:0000000000003071                 jmp     loc_2C2D
.text:0000000000003076 ; ---------------------------------------------------------------------------
.text:0000000000003076
.text:0000000000003076 loc_3076:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003076                 mov     [rsp+0E8h+var_98], 0
.text:000000000000307F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003084                 xor     r12d, r12d
.text:0000000000003087                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000308C                 jmp     loc_2E6B
.text:0000000000003091 ; ---------------------------------------------------------------------------
.text:0000000000003091
.text:0000000000003091 loc_3091:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003091                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003096                 mov     rsi, r14
.text:0000000000003099                 mov     rcx, r13
.text:000000000000309C                 mov     rax, rbx
.text:000000000000309F                 mov     rdi, rbx
.text:00000000000030A2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000030A8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000030AD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000030B5                 cmp     rsi, r11
.text:00000000000030B8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000030BE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000030C6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000030CB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030D0                 jnb     short loc_30F8
.text:00000000000030D2                 cmp     byte ptr [rcx], 0
.text:00000000000030D5                 jnz     short loc_30E7
.text:00000000000030D7                 jmp     short loc_30F8
.text:00000000000030D7 ; ---------------------------------------------------------------------------
.text:00000000000030D9                 align 20h
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000030E0                 cmp     byte ptr [r9+rax], 0
.text:00000000000030E5                 jz      short loc_30F5
.text:00000000000030E7
.text:00000000000030E7 loc_30E7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000030E7                 add     rax, 1
.text:00000000000030EB                 lea     rdx, [rbp+rax+0]
.text:00000000000030F0                 cmp     r11, rdx
.text:00000000000030F3                 ja      short loc_30E0
.text:00000000000030F5
.text:00000000000030F5 loc_30F5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000030F5                 mov     rdi, rax
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000030F8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000030F8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000030FD                 xor     r12d, r12d
.text:0000000000003100                 jmp     loc_2B66
.text:0000000000003105 ; ---------------------------------------------------------------------------
.text:0000000000003105
.text:0000000000003105 loc_3105:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003105                 mov     rdi, rbx
.text:0000000000003108                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000310E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003113                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003119                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003121                 xor     r12d, r12d
.text:0000000000003124                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003129                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000312E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003133                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003138                 jmp     loc_2B66
.text:000000000000313D ; ---------------------------------------------------------------------------
.text:000000000000313D
.text:000000000000313D loc_313D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000313D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003142                 movzx   eax, byte ptr [rdx]
.text:0000000000003145                 test    al, al
.text:0000000000003147                 jz      loc_2F7C
.text:000000000000314D                 nop     dword ptr [rax]
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003150                 cmp     r13, r15
.text:0000000000003153                 jbe     short loc_3159
.text:0000000000003155                 mov     [r14+r15], al
.text:0000000000003159
.text:0000000000003159 loc_3159:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003159                 add     r15, 1
.text:000000000000315D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003162                 test    al, al
.text:0000000000003164                 jnz     short loc_3150
.text:0000000000003166                 jmp     loc_2F7C
.text:000000000000316B ; ---------------------------------------------------------------------------
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000316B                 mov     eax, edx
.text:000000000000316D                 jmp     loc_26C7
.text:0000000000003172 ; ---------------------------------------------------------------------------
.text:0000000000003172
.text:0000000000003172 loc_3172:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003172                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003176                 cmp     bl, 3Eh ; '>'
.text:0000000000003179                 ja      loc_29F0
.text:000000000000317F                 mov     rax, 7000A38200000000h
.text:0000000000003189                 bt      rax, rbx
.text:000000000000318D                 jnb     loc_29F0
.text:0000000000003193                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003198                 jnz     loc_3382
.text:000000000000319E                 cmp     r13, r15
.text:00000000000031A1                 jbe     short loc_31A8
.text:00000000000031A3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000031A8
.text:00000000000031A8 loc_31A8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000031A8                 lea     rax, [r15+1]
.text:00000000000031AC                 cmp     r13, rax
.text:00000000000031AF                 jbe     short loc_31B7
.text:00000000000031B1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000031B7
.text:00000000000031B7 loc_31B7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000031B7                 lea     rax, [r15+2]
.text:00000000000031BB                 cmp     r13, rax
.text:00000000000031BE                 jbe     short loc_31C6
.text:00000000000031C0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000031C6
.text:00000000000031C6 loc_31C6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000031C6                 lea     rax, [r15+3]
.text:00000000000031CA                 cmp     r13, rax
.text:00000000000031CD                 jbe     short loc_31D5
.text:00000000000031CF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000031D5
.text:00000000000031D5 loc_31D5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000031D5                 add     r15, 4
.text:00000000000031D9                 xor     edx, edx
.text:00000000000031DB                 xor     r12d, r12d
.text:00000000000031DE                 xor     eax, eax
.text:00000000000031E0                 mov     rbp, rcx
.text:00000000000031E3                 jmp     loc_23A8
.text:00000000000031E8 ; ---------------------------------------------------------------------------
.text:00000000000031E8
.text:00000000000031E8 loc_31E8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031E8                                         ; DATA XREF: .rodata:jpt_2211↓o
.text:00000000000031E8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000031EA                 jz      loc_3378
.text:00000000000031F0                 lea     rax, asc_5135   ; "'"
.text:00000000000031F7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000031FC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003201                 xor     r12d, r12d
.text:0000000000003204                 mov     [rsp+0E8h+var_98], 0
.text:000000000000320D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003212                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003217                 mov     [rsp+0E8h+n], 1
.text:0000000000003220                 xor     r15d, r15d
.text:0000000000003223                 mov     [rsp+0E8h+s2], rax
.text:0000000000003228                 jmp     loc_2253
.text:0000000000003228 ; ---------------------------------------------------------------------------
.text:000000000000322D                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003230                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003230                 mov     rbp, r11
.text:0000000000003233                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003238                 jmp     loc_2D09
.text:000000000000323D ; ---------------------------------------------------------------------------
.text:000000000000323D
.text:000000000000323D loc_323D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000323D                 lea     rax, unk_5133
.text:0000000000003244                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003249                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000324E                 xor     r12d, r12d
.text:0000000000003251                 mov     [rsp+0E8h+var_98], 0
.text:000000000000325A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000325F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003264                 mov     [rsp+0E8h+n], 1
.text:000000000000326D                 xor     r15d, r15d
.text:0000000000003270                 mov     [rsp+0E8h+s2], rax
.text:0000000000003275                 jmp     loc_2253
.text:000000000000327A ; ---------------------------------------------------------------------------
.text:000000000000327A
.text:000000000000327A loc_327A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000327A                 mov     eax, edx
.text:000000000000327C
.text:000000000000327C loc_327C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000327C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000327C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003281                 test    rbx, rbx
.text:0000000000003284                 jz      short loc_32B2
.text:0000000000003286                 test    al, al
.text:0000000000003288                 jz      short loc_32B2
.text:000000000000328A                 movzx   ecx, byte ptr [rbx]
.text:000000000000328D                 mov     rax, rbx
.text:0000000000003290                 test    cl, cl
.text:0000000000003292                 jz      short loc_32B2
.text:0000000000003294                 mov     rdx, r15
.text:0000000000003297                 sub     rax, r15
.text:000000000000329A
.text:000000000000329A loc_329A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000329A                 cmp     r13, rdx
.text:000000000000329D                 jbe     short loc_32A3
.text:000000000000329F                 mov     [r14+rdx], cl
.text:00000000000032A3
.text:00000000000032A3 loc_32A3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000032A3                 add     rdx, 1
.text:00000000000032A7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000032AB                 test    cl, cl
.text:00000000000032AD                 jnz     short loc_329A
.text:00000000000032AF                 mov     r15, rdx
.text:00000000000032B2
.text:00000000000032B2 loc_32B2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000032B2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000032B2                 cmp     r13, r15
.text:00000000000032B5                 jbe     loc_2D59
.text:00000000000032BB                 mov     byte ptr [r14+r15], 0
.text:00000000000032C0                 jmp     loc_2D59
.text:00000000000032C5 ; ---------------------------------------------------------------------------
.text:00000000000032C5
.text:00000000000032C5 loc_32C5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000032C5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000032CA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000032CF                 mov     rbp, r11
.text:00000000000032D2                 setz    al
.text:00000000000032D5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000032D9                 jmp     loc_2D09
.text:00000000000032DE ; ---------------------------------------------------------------------------
.text:00000000000032DE
.text:00000000000032DE loc_32DE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000032DE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000032E2                 mov     rdi, rcx
.text:00000000000032E5                 call    gettext_quote
.text:00000000000032EA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000032EF                 jmp     loc_2F46
.text:00000000000032F4 ; ---------------------------------------------------------------------------
.text:00000000000032F4
.text:00000000000032F4 loc_32F4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000032F4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000032F8                 mov     rdi, rcx
.text:00000000000032FB                 call    gettext_quote
.text:0000000000003300                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003305                 jmp     loc_2F71
.text:000000000000330A ; ---------------------------------------------------------------------------
.text:000000000000330A
.text:000000000000330A loc_330A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000330A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000330F                 mov     rbp, r11
.text:0000000000003312                 mov     eax, edx
.text:0000000000003314                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003318                 jmp     loc_2D09
.text:000000000000331D ; ---------------------------------------------------------------------------
.text:000000000000331D
.text:000000000000331D loc_331D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000331D                 sub     rsp, 8
.text:0000000000003321                 mov     r8d, 5
.text:0000000000003327                 mov     rcx, r11
.text:000000000000332A                 push    [rsp+0F0h+var_88]
.text:000000000000332E                 push    [rsp+0F8h+var_80]
.text:0000000000003332                 mov     rdi, r14
.text:0000000000003335                 push    [rsp+100h+var_C8]
.text:0000000000003339                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003341                 mov     rdx, [rsp+108h+s]
.text:0000000000003346                 mov     rsi, [rsp+108h+var_98]
.text:000000000000334B                 call    quotearg_buffer_restyled
.text:0000000000003350                 add     rsp, 20h
.text:0000000000003354                 mov     r15, rax
.text:0000000000003357                 jmp     loc_2D59
.text:000000000000335C ; ---------------------------------------------------------------------------
.text:000000000000335C
.text:000000000000335C loc_335C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000335C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003361                 jmp     loc_327C
.text:0000000000003366 ; ---------------------------------------------------------------------------
.text:0000000000003366
.text:0000000000003366 loc_3366:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003366                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000336E                 jmp     loc_2D09
.text:0000000000003373 ; ---------------------------------------------------------------------------
.text:0000000000003373
.text:0000000000003373 loc_3373:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003373                 call    ___stack_chk_fail
.text:0000000000003378 ; ---------------------------------------------------------------------------
.text:0000000000003378
.text:0000000000003378 loc_3378:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003378                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000337D                 jmp     loc_2DF1
.text:0000000000003382 ; ---------------------------------------------------------------------------
.text:0000000000003382
.text:0000000000003382 loc_3382:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003382                 mov     rbp, r11
.text:0000000000003385                 jmp     loc_2D20
.text:000000000000338A ; ---------------------------------------------------------------------------
.text:000000000000338A
.text:000000000000338A loc_338A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000338A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000338F                 xor     eax, eax
.text:0000000000003391                 xor     r12d, r12d
.text:0000000000003394                 mov     [rsp+0E8h+var_98], 0
.text:000000000000339D                 jmp     loc_2944
.text:00000000000033A2 ; ---------------------------------------------------------------------------
.text:00000000000033A2
.text:00000000000033A2 loc_33A2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000033A2                 mov     rdx, r13
.text:00000000000033A5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000033AA                 jmp     loc_29A2
.text:00000000000033AF ; ---------------------------------------------------------------------------
.text:00000000000033AF
.text:00000000000033AF def_2211:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000033AF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000033AF ; } // starts at 2180
.text:00000000000033AF quotearg_buffer_restyled endp
.text:00000000000033AF
.text:00000000000033AF ; ---------------------------------------------------------------------------
.text:00000000000033B4                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0
.text:00000000000033C0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000033C0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000033C0
.text:00000000000033C0 var_50          = qword ptr -50h
.text:00000000000033C0 var_48          = qword ptr -48h
.text:00000000000033C0 var_40          = dword ptr -40h
.text:00000000000033C0 var_3C          = dword ptr -3Ch
.text:00000000000033C0
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 push    r15
.text:00000000000033C2                 push    r14
.text:00000000000033C4                 movsxd  r15, edi
.text:00000000000033C7                 push    r13
.text:00000000000033C9                 push    r12
.text:00000000000033CB                 mov     r14, rdx
.text:00000000000033CE                 push    rbp
.text:00000000000033CF                 push    rbx
.text:00000000000033D0                 mov     rbp, rcx
.text:00000000000033D3                 sub     rsp, 28h
.text:00000000000033D7                 mov     [rsp+58h+var_50], rsi
.text:00000000000033DC                 call    ___errno_location
.text:00000000000033E1                 mov     r13, rax
.text:00000000000033E4                 mov     eax, [rax]
.text:00000000000033E6                 test    r15d, r15d
.text:00000000000033E9                 mov     rbx, cs:slotvec
.text:00000000000033F0                 mov     [rsp+58h+var_40], eax
.text:00000000000033F4                 js      loc_3561
.text:00000000000033FA                 cmp     cs:nslots, r15d
.text:0000000000003401                 jg      short loc_3465
.text:0000000000003403                 cmp     r15d, 7FFFFFFFh
.text:000000000000340A                 jz      loc_3566
.text:0000000000003410                 lea     r12d, [r15+1]
.text:0000000000003414                 lea     rax, slotvec0
.text:000000000000341B                 movsxd  rsi, r12d
.text:000000000000341E                 shl     rsi, 4
.text:0000000000003422                 cmp     rbx, rax
.text:0000000000003425                 jz      loc_3540
.text:000000000000342B                 mov     rdi, rbx
.text:000000000000342E                 call    xrealloc
.text:0000000000003433                 mov     rbx, rax
.text:0000000000003436                 mov     cs:slotvec, rax
.text:000000000000343D
.text:000000000000343D loc_343D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000343D                 movsxd  rdi, cs:nslots
.text:0000000000003444                 mov     edx, r12d
.text:0000000000003447                 xor     esi, esi        ; c
.text:0000000000003449                 sub     edx, edi
.text:000000000000344B                 shl     rdi, 4
.text:000000000000344F                 movsxd  rdx, edx
.text:0000000000003452                 add     rdi, rbx        ; s
.text:0000000000003455                 shl     rdx, 4          ; n
.text:0000000000003459                 call    _memset
.text:000000000000345E                 mov     cs:nslots, r12d
.text:0000000000003465
.text:0000000000003465 loc_3465:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003465                 mov     eax, [rbp+4]
.text:0000000000003468                 shl     r15, 4
.text:000000000000346C                 sub     rsp, 8
.text:0000000000003470                 add     rbx, r15
.text:0000000000003473                 lea     r15, [rbp+8]
.text:0000000000003477                 mov     r8d, [rbp+0]
.text:000000000000347B                 mov     r11, [rbx]
.text:000000000000347E                 mov     r12, [rbx+8]
.text:0000000000003482                 mov     rcx, r14
.text:0000000000003485                 or      eax, 1
.text:0000000000003488                 mov     [rsp+60h+var_3C], eax
.text:000000000000348C                 push    qword ptr [rbp+30h]
.text:000000000000348F                 mov     r9d, eax
.text:0000000000003492                 push    qword ptr [rbp+28h]
.text:0000000000003495                 push    r15
.text:0000000000003497                 mov     rsi, r11
.text:000000000000349A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000349F                 mov     rdi, r12
.text:00000000000034A2                 mov     [rsp+78h+var_48], r11
.text:00000000000034A7                 call    quotearg_buffer_restyled
.text:00000000000034AC                 add     rsp, 20h
.text:00000000000034B0                 mov     r11, [rsp+58h+var_48]
.text:00000000000034B5                 cmp     r11, rax
.text:00000000000034B8                 ja      short loc_3521
.text:00000000000034BA                 lea     rsi, [rax+1]
.text:00000000000034BE                 lea     rax, slot0
.text:00000000000034C5                 cmp     r12, rax
.text:00000000000034C8                 mov     [rbx], rsi
.text:00000000000034CB                 jz      short loc_34DF
.text:00000000000034CD                 mov     rdi, r12        ; ptr
.text:00000000000034D0                 mov     [rsp+58h+var_48], rsi
.text:00000000000034D5                 call    _free
.text:00000000000034DA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000034DF
.text:00000000000034DF loc_34DF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000034DF                 mov     rdi, rsi
.text:00000000000034E2                 mov     [rsp+58h+var_48], rsi
.text:00000000000034E7                 call    xmalloc
.text:00000000000034EC                 sub     rsp, 8
.text:00000000000034F0                 mov     [rbx+8], rax
.text:00000000000034F4                 mov     r8d, [rbp+0]
.text:00000000000034F8                 push    qword ptr [rbp+30h]
.text:00000000000034FB                 push    qword ptr [rbp+28h]
.text:00000000000034FE                 mov     rcx, r14
.text:0000000000003501                 push    r15
.text:0000000000003503                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003508                 mov     rdi, rax
.text:000000000000350B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003510                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003515                 mov     r12, rax
.text:0000000000003518                 call    quotearg_buffer_restyled
.text:000000000000351D                 add     rsp, 20h
.text:0000000000003521
.text:0000000000003521 loc_3521:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003521                 mov     eax, [rsp+58h+var_40]
.text:0000000000003525                 mov     [r13+0], eax
.text:0000000000003529                 add     rsp, 28h
.text:000000000000352D                 mov     rax, r12
.text:0000000000003530                 pop     rbx
.text:0000000000003531                 pop     rbp
.text:0000000000003532                 pop     r12
.text:0000000000003534                 pop     r13
.text:0000000000003536                 pop     r14
.text:0000000000003538                 pop     r15
.text:000000000000353A                 retn
.text:000000000000353A ; ---------------------------------------------------------------------------
.text:000000000000353B                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003540                 xor     edi, edi
.text:0000000000003542                 call    xrealloc
.text:0000000000003547                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000354F                 mov     rbx, rax
.text:0000000000003552                 mov     cs:slotvec, rax
.text:0000000000003559                 movups  xmmword ptr [rax], xmm0
.text:000000000000355C                 jmp     loc_343D
.text:0000000000003561 ; ---------------------------------------------------------------------------
.text:0000000000003561
.text:0000000000003561 loc_3561:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003561                 call    _abort
.text:0000000000003566 ; ---------------------------------------------------------------------------
.text:0000000000003566
.text:0000000000003566 loc_3566:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003566                 call    xalloc_die
.text:0000000000003566 ; } // starts at 33C0
.text:0000000000003566 quotearg_n_options endp
.text:0000000000003566
.text:0000000000003566 ; ---------------------------------------------------------------------------
.text:000000000000356B                 align 10h
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570 ; Attributes: info_from_lumina
.text:0000000000003570
.text:0000000000003570 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003570                 public clone_quoting_options
.text:0000000000003570 clone_quoting_options proc near
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 push    r12
.text:0000000000003572                 push    rbp
.text:0000000000003573                 push    rbx
.text:0000000000003574                 mov     rbx, rdi
.text:0000000000003577                 call    ___errno_location
.text:000000000000357C                 mov     r12d, [rax]
.text:000000000000357F                 mov     rbp, rax
.text:0000000000003582                 lea     rax, default_quoting_options
.text:0000000000003589                 test    rbx, rbx
.text:000000000000358C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003591                 cmovz   rbx, rax
.text:0000000000003595                 mov     rdi, rbx        ; src
.text:0000000000003598                 call    xmemdup
.text:000000000000359D                 mov     [rbp+0], r12d
.text:00000000000035A1                 pop     rbx
.text:00000000000035A2                 pop     rbp
.text:00000000000035A3                 pop     r12
.text:00000000000035A5                 retn
.text:00000000000035A5 ; } // starts at 3570
.text:00000000000035A5 clone_quoting_options endp
.text:00000000000035A5
.text:00000000000035A5 ; ---------------------------------------------------------------------------
.text:00000000000035A6                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0
.text:00000000000035B0                 public get_quoting_style
.text:00000000000035B0 get_quoting_style proc near
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 lea     rax, default_quoting_options
.text:00000000000035B7                 test    rdi, rdi
.text:00000000000035BA                 cmovz   rdi, rax
.text:00000000000035BE                 mov     eax, [rdi]
.text:00000000000035C0                 retn
.text:00000000000035C0 ; } // starts at 35B0
.text:00000000000035C0 get_quoting_style endp
.text:00000000000035C0
.text:00000000000035C0 ; ---------------------------------------------------------------------------
.text:00000000000035C1                 align 10h
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0
.text:00000000000035D0                 public set_quoting_style
.text:00000000000035D0 set_quoting_style proc near
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 lea     rax, default_quoting_options
.text:00000000000035D7                 test    rdi, rdi
.text:00000000000035DA                 cmovz   rdi, rax
.text:00000000000035DE                 mov     [rdi], esi
.text:00000000000035E0                 retn
.text:00000000000035E0 ; } // starts at 35D0
.text:00000000000035E0 set_quoting_style endp
.text:00000000000035E0
.text:00000000000035E0 ; ---------------------------------------------------------------------------
.text:00000000000035E1                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0 ; Attributes: info_from_lumina
.text:00000000000035F0
.text:00000000000035F0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000035F0                 public set_char_quoting
.text:00000000000035F0 set_char_quoting proc near
.text:00000000000035F0 ; __unwind {
.text:00000000000035F0                 lea     rax, default_quoting_options
.text:00000000000035F7                 test    rdi, rdi
.text:00000000000035FA                 mov     ecx, esi
.text:00000000000035FC                 cmovz   rdi, rax
.text:0000000000003600                 mov     eax, esi
.text:0000000000003602                 and     ecx, 1Fh
.text:0000000000003605                 shr     al, 5
.text:0000000000003608                 movzx   eax, al
.text:000000000000360B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003610                 mov     esi, [rdi]
.text:0000000000003612                 mov     eax, esi
.text:0000000000003614                 shr     eax, cl
.text:0000000000003616                 xor     edx, eax
.text:0000000000003618                 and     eax, 1
.text:000000000000361B                 and     edx, 1
.text:000000000000361E                 shl     edx, cl
.text:0000000000003620                 xor     edx, esi
.text:0000000000003622                 mov     [rdi], edx
.text:0000000000003624                 retn
.text:0000000000003624 ; } // starts at 35F0
.text:0000000000003624 set_char_quoting endp
.text:0000000000003624
.text:0000000000003624 ; ---------------------------------------------------------------------------
.text:0000000000003625                 align 10h
.text:0000000000003630
.text:0000000000003630 ; =============== S U B R O U T I N E =======================================
.text:0000000000003630
.text:0000000000003630
.text:0000000000003630                 public set_quoting_flags
.text:0000000000003630 set_quoting_flags proc near
.text:0000000000003630 ; __unwind {
.text:0000000000003630                 lea     rax, default_quoting_options
.text:0000000000003637                 test    rdi, rdi
.text:000000000000363A                 cmovz   rdi, rax
.text:000000000000363E                 mov     eax, [rdi+4]
.text:0000000000003641                 mov     [rdi+4], esi
.text:0000000000003644                 retn
.text:0000000000003644 ; } // starts at 3630
.text:0000000000003644 set_quoting_flags endp
.text:0000000000003644
.text:0000000000003644 ; ---------------------------------------------------------------------------
.text:0000000000003645                 align 10h
.text:0000000000003650
.text:0000000000003650 ; =============== S U B R O U T I N E =======================================
.text:0000000000003650
.text:0000000000003650 ; Attributes: info_from_lumina
.text:0000000000003650
.text:0000000000003650 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003650                 public set_custom_quoting
.text:0000000000003650 set_custom_quoting proc near
.text:0000000000003650 ; __unwind {
.text:0000000000003650                 lea     rax, default_quoting_options
.text:0000000000003657                 test    rdi, rdi
.text:000000000000365A                 cmovz   rdi, rax
.text:000000000000365E                 test    rsi, rsi
.text:0000000000003661                 mov     dword ptr [rdi], 0Ah
.text:0000000000003667                 jz      short loc_3677
.text:0000000000003669                 test    rdx, rdx
.text:000000000000366C                 jz      short loc_3677
.text:000000000000366E                 mov     [rdi+28h], rsi
.text:0000000000003672                 mov     [rdi+30h], rdx
.text:0000000000003676                 retn
.text:0000000000003677 ; ---------------------------------------------------------------------------
.text:0000000000003677
.text:0000000000003677 loc_3677:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003677                                         ; set_custom_quoting+1C↑j
.text:0000000000003677                 sub     rsp, 8
.text:000000000000367B                 call    _abort
.text:000000000000367B ; } // starts at 3650
.text:000000000000367B set_custom_quoting endp
.text:000000000000367B
.text:0000000000003680
.text:0000000000003680 ; =============== S U B R O U T I N E =======================================
.text:0000000000003680
.text:0000000000003680 ; Attributes: info_from_lumina
.text:0000000000003680
.text:0000000000003680 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003680                 public quotearg_buffer
.text:0000000000003680 quotearg_buffer proc near
.text:0000000000003680
.text:0000000000003680 var_40          = qword ptr -40h
.text:0000000000003680
.text:0000000000003680 ; __unwind {
.text:0000000000003680                 push    r15
.text:0000000000003682                 push    r14
.text:0000000000003684                 lea     rax, default_quoting_options
.text:000000000000368B                 push    r13
.text:000000000000368D                 push    r12
.text:000000000000368F                 mov     r13, rdi
.text:0000000000003692                 push    rbp
.text:0000000000003693                 push    rbx
.text:0000000000003694                 mov     rbx, r8
.text:0000000000003697                 mov     r14, rsi
.text:000000000000369A                 mov     r15, rdx
.text:000000000000369D                 sub     rsp, 18h
.text:00000000000036A1                 test    r8, r8
.text:00000000000036A4                 cmovz   rbx, rax
.text:00000000000036A8                 mov     [rsp+48h+var_40], rcx
.text:00000000000036AD                 call    ___errno_location
.text:00000000000036B2                 mov     r12d, [rax]
.text:00000000000036B5                 mov     rbp, rax
.text:00000000000036B8                 lea     rax, [rbx+8]
.text:00000000000036BC                 sub     rsp, 8
.text:00000000000036C0                 mov     r9d, [rbx+4]
.text:00000000000036C4                 push    qword ptr [rbx+30h]
.text:00000000000036C7                 mov     r8d, [rbx]
.text:00000000000036CA                 push    qword ptr [rbx+28h]
.text:00000000000036CD                 mov     rdx, r15
.text:00000000000036D0                 push    rax
.text:00000000000036D1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000036D6                 mov     rsi, r14
.text:00000000000036D9                 mov     rdi, r13
.text:00000000000036DC                 call    quotearg_buffer_restyled
.text:00000000000036E1                 mov     [rbp+0], r12d
.text:00000000000036E5                 add     rsp, 38h
.text:00000000000036E9                 pop     rbx
.text:00000000000036EA                 pop     rbp
.text:00000000000036EB                 pop     r12
.text:00000000000036ED                 pop     r13
.text:00000000000036EF                 pop     r14
.text:00000000000036F1                 pop     r15
.text:00000000000036F3                 retn
.text:00000000000036F3 ; } // starts at 3680
.text:00000000000036F3 quotearg_buffer endp
.text:00000000000036F3
.text:00000000000036F3 ; ---------------------------------------------------------------------------
.text:00000000000036F4                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700 ; Attributes: info_from_lumina
.text:0000000000003700
.text:0000000000003700 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003700                 public quotearg_alloc_mem
.text:0000000000003700 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003700
.text:0000000000003700 var_5C          = dword ptr -5Ch
.text:0000000000003700 var_58          = qword ptr -58h
.text:0000000000003700 var_50          = qword ptr -50h
.text:0000000000003700 var_48          = qword ptr -48h
.text:0000000000003700 var_40          = qword ptr -40h
.text:0000000000003700
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 push    r15
.text:0000000000003702                 push    r14
.text:0000000000003704                 lea     rax, default_quoting_options
.text:000000000000370B                 push    r13
.text:000000000000370D                 push    r12
.text:000000000000370F                 mov     r12, rdx
.text:0000000000003712                 push    rbp
.text:0000000000003713                 push    rbx
.text:0000000000003714                 mov     rbx, rcx
.text:0000000000003717                 mov     r14, rdi
.text:000000000000371A                 mov     r15, rsi
.text:000000000000371D                 sub     rsp, 38h
.text:0000000000003721                 test    rcx, rcx
.text:0000000000003724                 cmovz   rbx, rax
.text:0000000000003728                 xor     ebp, ebp
.text:000000000000372A                 call    ___errno_location
.text:000000000000372F                 test    r12, r12
.text:0000000000003732                 mov     r13, rax
.text:0000000000003735                 mov     eax, [rax]
.text:0000000000003737                 setz    bpl
.text:000000000000373B                 or      ebp, [rbx+4]
.text:000000000000373E                 lea     r10, [rbx+8]
.text:0000000000003742                 sub     rsp, 8
.text:0000000000003746                 mov     r8d, [rbx]
.text:0000000000003749                 mov     rcx, r15
.text:000000000000374C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003750                 push    qword ptr [rbx+30h]
.text:0000000000003753                 mov     rdx, r14
.text:0000000000003756                 push    qword ptr [rbx+28h]
.text:0000000000003759                 push    r10
.text:000000000000375B                 xor     esi, esi
.text:000000000000375D                 mov     r9d, ebp
.text:0000000000003760                 xor     edi, edi
.text:0000000000003762                 mov     [rsp+88h+var_48], r10
.text:0000000000003767                 call    quotearg_buffer_restyled
.text:000000000000376C                 lea     rsi, [rax+1]
.text:0000000000003770                 mov     [rsp+88h+var_40], rax
.text:0000000000003775                 add     rsp, 20h
.text:0000000000003779                 mov     rdi, rsi
.text:000000000000377C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003781                 call    xmalloc
.text:0000000000003786                 mov     [rsp+68h+var_58], rax
.text:000000000000378B                 sub     rsp, 8
.text:000000000000378F                 push    qword ptr [rbx+30h]
.text:0000000000003792                 push    qword ptr [rbx+28h]
.text:0000000000003795                 mov     r10, [rsp+80h+var_48]
.text:000000000000379A                 mov     r9d, ebp
.text:000000000000379D                 mov     r8d, [rbx]
.text:00000000000037A0                 mov     rcx, r15
.text:00000000000037A3                 mov     rdx, r14
.text:00000000000037A6                 mov     rdi, rax
.text:00000000000037A9                 push    r10
.text:00000000000037AB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000037B0                 call    quotearg_buffer_restyled
.text:00000000000037B5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000037B9                 add     rsp, 20h
.text:00000000000037BD                 test    r12, r12
.text:00000000000037C0                 mov     [r13+0], eax
.text:00000000000037C4                 jz      short loc_37CF
.text:00000000000037C6                 mov     r11, [rsp+68h+var_40]
.text:00000000000037CB                 mov     [r12], r11
.text:00000000000037CF
.text:00000000000037CF loc_37CF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000037CF                 mov     rax, [rsp+68h+var_58]
.text:00000000000037D4                 add     rsp, 38h
.text:00000000000037D8                 pop     rbx
.text:00000000000037D9                 pop     rbp
.text:00000000000037DA                 pop     r12
.text:00000000000037DC                 pop     r13
.text:00000000000037DE                 pop     r14
.text:00000000000037E0                 pop     r15
.text:00000000000037E2                 retn
.text:00000000000037E2 ; } // starts at 3700
.text:00000000000037E2 quotearg_alloc_mem endp
.text:00000000000037E2
.text:00000000000037E2 ; ---------------------------------------------------------------------------
.text:00000000000037E3                 align 10h
.text:00000000000037F0
.text:00000000000037F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037F0
.text:00000000000037F0
.text:00000000000037F0                 public quotearg_alloc
.text:00000000000037F0 quotearg_alloc  proc near
.text:00000000000037F0 ; __unwind {
.text:00000000000037F0                 mov     rcx, rdx
.text:00000000000037F3                 xor     edx, edx
.text:00000000000037F5                 jmp     quotearg_alloc_mem
.text:00000000000037F5 ; } // starts at 37F0
.text:00000000000037F5 quotearg_alloc  endp
.text:00000000000037F5
.text:00000000000037F5 ; ---------------------------------------------------------------------------
.text:00000000000037FA                 align 20h
.text:0000000000003800
.text:0000000000003800 ; =============== S U B R O U T I N E =======================================
.text:0000000000003800
.text:0000000000003800 ; Attributes: info_from_lumina
.text:0000000000003800
.text:0000000000003800 ; void __cdecl quotearg_free()
.text:0000000000003800                 public quotearg_free
.text:0000000000003800 quotearg_free   proc near
.text:0000000000003800 ; __unwind {
.text:0000000000003800                 mov     eax, cs:nslots
.text:0000000000003806                 push    r12
.text:0000000000003808                 mov     r12, cs:slotvec
.text:000000000000380F                 push    rbp
.text:0000000000003810                 push    rbx
.text:0000000000003811                 cmp     eax, 1
.text:0000000000003814                 jle     short loc_3841
.text:0000000000003816                 sub     eax, 2
.text:0000000000003819                 lea     rbx, [r12+18h]
.text:000000000000381E                 shl     rax, 4
.text:0000000000003822                 lea     rbp, [r12+rax+28h]
.text:0000000000003827                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003830                 mov     rdi, [rbx]      ; ptr
.text:0000000000003833                 add     rbx, 10h
.text:0000000000003837                 call    _free
.text:000000000000383C                 cmp     rbx, rbp
.text:000000000000383F                 jnz     short loc_3830
.text:0000000000003841
.text:0000000000003841 loc_3841:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003841                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003846                 lea     rbx, slot0
.text:000000000000384D                 cmp     rdi, rbx
.text:0000000000003850                 jz      short loc_3869
.text:0000000000003852                 call    _free
.text:0000000000003857                 mov     cs:slotvec0, 100h
.text:0000000000003862                 mov     cs:off_207078, rbx
.text:0000000000003869
.text:0000000000003869 loc_3869:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003869                 lea     rbx, slotvec0
.text:0000000000003870                 cmp     r12, rbx
.text:0000000000003873                 jz      short loc_3884
.text:0000000000003875                 mov     rdi, r12        ; ptr
.text:0000000000003878                 call    _free
.text:000000000000387D                 mov     cs:slotvec, rbx
.text:0000000000003884
.text:0000000000003884 loc_3884:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003884                 pop     rbx
.text:0000000000003885                 mov     cs:nslots, 1
.text:000000000000388F                 pop     rbp
.text:0000000000003890                 pop     r12
.text:0000000000003892                 retn
.text:0000000000003892 ; } // starts at 3800
.text:0000000000003892 quotearg_free   endp
.text:0000000000003892
.text:0000000000003892 ; ---------------------------------------------------------------------------
.text:0000000000003893                 align 20h
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0
.text:00000000000038A0                 public quotearg_n
.text:00000000000038A0 quotearg_n      proc near
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 lea     rcx, default_quoting_options
.text:00000000000038A7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038AE                 jmp     quotearg_n_options
.text:00000000000038AE ; } // starts at 38A0
.text:00000000000038AE quotearg_n      endp
.text:00000000000038AE
.text:00000000000038AE ; ---------------------------------------------------------------------------
.text:00000000000038B3                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0
.text:00000000000038C0                 public quotearg_n_mem
.text:00000000000038C0 quotearg_n_mem  proc near
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 lea     rcx, default_quoting_options
.text:00000000000038C7                 jmp     quotearg_n_options
.text:00000000000038C7 ; } // starts at 38C0
.text:00000000000038C7 quotearg_n_mem  endp
.text:00000000000038C7
.text:00000000000038C7 ; ---------------------------------------------------------------------------
.text:00000000000038CC                 align 10h
.text:00000000000038D0
.text:00000000000038D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038D0
.text:00000000000038D0
.text:00000000000038D0                 public quotearg
.text:00000000000038D0 quotearg        proc near
.text:00000000000038D0 ; __unwind {
.text:00000000000038D0                 lea     rcx, default_quoting_options
.text:00000000000038D7                 mov     rsi, rdi
.text:00000000000038DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038E1                 xor     edi, edi
.text:00000000000038E3                 jmp     quotearg_n_options
.text:00000000000038E3 ; } // starts at 38D0
.text:00000000000038E3 quotearg        endp
.text:00000000000038E3
.text:00000000000038E3 ; ---------------------------------------------------------------------------
.text:00000000000038E8                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0
.text:00000000000038F0                 public quotearg_mem
.text:00000000000038F0 quotearg_mem    proc near
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 lea     rcx, default_quoting_options
.text:00000000000038F7                 mov     rdx, rsi
.text:00000000000038FA                 mov     rsi, rdi
.text:00000000000038FD                 xor     edi, edi
.text:00000000000038FF                 jmp     quotearg_n_options
.text:00000000000038FF ; } // starts at 38F0
.text:00000000000038FF quotearg_mem    endp
.text:00000000000038FF
.text:00000000000038FF ; ---------------------------------------------------------------------------
.text:0000000000003904                 align 10h
.text:0000000000003910
.text:0000000000003910 ; =============== S U B R O U T I N E =======================================
.text:0000000000003910
.text:0000000000003910 ; Attributes: info_from_lumina
.text:0000000000003910
.text:0000000000003910 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003910                 public quotearg_n_style
.text:0000000000003910 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003910
.text:0000000000003910 var_48          = dword ptr -48h
.text:0000000000003910 var_44          = qword ptr -44h
.text:0000000000003910 var_3C          = qword ptr -3Ch
.text:0000000000003910 var_34          = qword ptr -34h
.text:0000000000003910 var_2C          = qword ptr -2Ch
.text:0000000000003910 var_24          = qword ptr -24h
.text:0000000000003910 var_1C          = qword ptr -1Ch
.text:0000000000003910 var_14          = dword ptr -14h
.text:0000000000003910 var_10          = qword ptr -10h
.text:0000000000003910
.text:0000000000003910 ; __unwind {
.text:0000000000003910                 sub     rsp, 48h
.text:0000000000003914                 mov     rax, rdx
.text:0000000000003917                 mov     rdx, fs:28h
.text:0000000000003920                 mov     [rsp+48h+var_10], rdx
.text:0000000000003925                 xor     edx, edx
.text:0000000000003927                 cmp     esi, 0Ah
.text:000000000000392A                 jz      short loc_3994
.text:000000000000392C                 mov     [rsp+48h+var_48], esi
.text:000000000000392F                 mov     rcx, rsp
.text:0000000000003932                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003939                 mov     rsi, rax
.text:000000000000393C                 mov     [rsp+48h+var_44], 0
.text:0000000000003945                 mov     [rsp+48h+var_3C], 0
.text:000000000000394E                 mov     [rsp+48h+var_34], 0
.text:0000000000003957                 mov     [rsp+48h+var_2C], 0
.text:0000000000003960                 mov     [rsp+48h+var_24], 0
.text:0000000000003969                 mov     [rsp+48h+var_1C], 0
.text:0000000000003972                 mov     [rsp+48h+var_14], 0
.text:000000000000397A                 call    quotearg_n_options
.text:000000000000397F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003984                 xor     rcx, fs:28h
.text:000000000000398D                 jnz     short loc_3999
.text:000000000000398F                 add     rsp, 48h
.text:0000000000003993                 retn
.text:0000000000003994 ; ---------------------------------------------------------------------------
.text:0000000000003994
.text:0000000000003994 loc_3994:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003994                 call    _abort
.text:0000000000003999 ; ---------------------------------------------------------------------------
.text:0000000000003999
.text:0000000000003999 loc_3999:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003999                 call    ___stack_chk_fail
.text:0000000000003999 ; } // starts at 3910
.text:0000000000003999 quotearg_n_style endp
.text:0000000000003999
.text:0000000000003999 ; ---------------------------------------------------------------------------
.text:000000000000399E                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0 ; Attributes: info_from_lumina
.text:00000000000039A0
.text:00000000000039A0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000039A0                 public quotearg_n_style_mem
.text:00000000000039A0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000039A0
.text:00000000000039A0 var_48          = dword ptr -48h
.text:00000000000039A0 var_44          = qword ptr -44h
.text:00000000000039A0 var_3C          = qword ptr -3Ch
.text:00000000000039A0 var_34          = qword ptr -34h
.text:00000000000039A0 var_2C          = qword ptr -2Ch
.text:00000000000039A0 var_24          = qword ptr -24h
.text:00000000000039A0 var_1C          = qword ptr -1Ch
.text:00000000000039A0 var_14          = dword ptr -14h
.text:00000000000039A0 var_10          = qword ptr -10h
.text:00000000000039A0
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 sub     rsp, 48h
.text:00000000000039A4                 mov     rax, rdx
.text:00000000000039A7                 mov     rdx, rcx
.text:00000000000039AA                 mov     rcx, fs:28h
.text:00000000000039B3                 mov     [rsp+48h+var_10], rcx
.text:00000000000039B8                 xor     ecx, ecx
.text:00000000000039BA                 cmp     esi, 0Ah
.text:00000000000039BD                 jz      short loc_3A20
.text:00000000000039BF                 mov     [rsp+48h+var_48], esi
.text:00000000000039C2                 mov     rcx, rsp
.text:00000000000039C5                 mov     rsi, rax
.text:00000000000039C8                 mov     [rsp+48h+var_44], 0
.text:00000000000039D1                 mov     [rsp+48h+var_3C], 0
.text:00000000000039DA                 mov     [rsp+48h+var_34], 0
.text:00000000000039E3                 mov     [rsp+48h+var_2C], 0
.text:00000000000039EC                 mov     [rsp+48h+var_24], 0
.text:00000000000039F5                 mov     [rsp+48h+var_1C], 0
.text:00000000000039FE                 mov     [rsp+48h+var_14], 0
.text:0000000000003A06                 call    quotearg_n_options
.text:0000000000003A0B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003A10                 xor     rdx, fs:28h
.text:0000000000003A19                 jnz     short loc_3A25
.text:0000000000003A1B                 add     rsp, 48h
.text:0000000000003A1F                 retn
.text:0000000000003A20 ; ---------------------------------------------------------------------------
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003A20                 call    _abort
.text:0000000000003A25 ; ---------------------------------------------------------------------------
.text:0000000000003A25
.text:0000000000003A25 loc_3A25:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003A25                 call    ___stack_chk_fail
.text:0000000000003A25 ; } // starts at 39A0
.text:0000000000003A25 quotearg_n_style_mem endp
.text:0000000000003A25
.text:0000000000003A25 ; ---------------------------------------------------------------------------
.text:0000000000003A2A                 align 10h
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30                 public quotearg_style
.text:0000000000003A30 quotearg_style  proc near
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 mov     rdx, rsi
.text:0000000000003A33                 mov     esi, edi
.text:0000000000003A35                 xor     edi, edi
.text:0000000000003A37                 jmp     quotearg_n_style
.text:0000000000003A37 ; } // starts at 3A30
.text:0000000000003A37 quotearg_style  endp
.text:0000000000003A37
.text:0000000000003A37 ; ---------------------------------------------------------------------------
.text:0000000000003A3C                 align 20h
.text:0000000000003A40
.text:0000000000003A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A40
.text:0000000000003A40
.text:0000000000003A40                 public quotearg_style_mem
.text:0000000000003A40 quotearg_style_mem proc near
.text:0000000000003A40 ; __unwind {
.text:0000000000003A40                 mov     rcx, rdx
.text:0000000000003A43                 mov     rdx, rsi
.text:0000000000003A46                 mov     esi, edi
.text:0000000000003A48                 xor     edi, edi
.text:0000000000003A4A                 jmp     quotearg_n_style_mem
.text:0000000000003A4A ; } // starts at 3A40
.text:0000000000003A4A quotearg_style_mem endp
.text:0000000000003A4A
.text:0000000000003A4A ; ---------------------------------------------------------------------------
.text:0000000000003A4F                 align 10h
.text:0000000000003A50
.text:0000000000003A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A50
.text:0000000000003A50 ; Attributes: info_from_lumina
.text:0000000000003A50
.text:0000000000003A50 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003A50                 public quotearg_char_mem
.text:0000000000003A50 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003A50                                         ; quotearg_colon+C↓j ...
.text:0000000000003A50
.text:0000000000003A50 var_48          = xmmword ptr -48h
.text:0000000000003A50 var_38          = xmmword ptr -38h
.text:0000000000003A50 var_28          = xmmword ptr -28h
.text:0000000000003A50 var_18          = qword ptr -18h
.text:0000000000003A50 var_10          = qword ptr -10h
.text:0000000000003A50
.text:0000000000003A50 ; __unwind {
.text:0000000000003A50                 sub     rsp, 48h
.text:0000000000003A54                 mov     ecx, edx
.text:0000000000003A56                 mov     rax, fs:28h
.text:0000000000003A5F                 mov     [rsp+48h+var_10], rax
.text:0000000000003A64                 xor     eax, eax
.text:0000000000003A66                 mov     rax, cs:qword_207210
.text:0000000000003A6D                 mov     r8, rsp
.text:0000000000003A70                 and     ecx, 1Fh
.text:0000000000003A73                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003A7B                 mov     [rsp+48h+var_18], rax
.text:0000000000003A80                 mov     eax, edx
.text:0000000000003A82                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003A86                 shr     al, 5
.text:0000000000003A89                 movzx   eax, al
.text:0000000000003A8C                 lea     r9, [r8+rax*4+8]
.text:0000000000003A91                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003A99                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003A9E                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003AA6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003AAB                 mov     edx, [r9]
.text:0000000000003AAE                 mov     eax, edx
.text:0000000000003AB0                 shr     eax, cl
.text:0000000000003AB2                 not     eax
.text:0000000000003AB4                 and     eax, 1
.text:0000000000003AB7                 shl     eax, cl
.text:0000000000003AB9                 mov     rcx, r8
.text:0000000000003ABC                 xor     eax, edx
.text:0000000000003ABE                 mov     rdx, rsi
.text:0000000000003AC1                 mov     rsi, rdi
.text:0000000000003AC4                 mov     [r9], eax
.text:0000000000003AC7                 xor     edi, edi
.text:0000000000003AC9                 call    quotearg_n_options
.text:0000000000003ACE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003AD3                 xor     rsi, fs:28h
.text:0000000000003ADC                 jnz     short loc_3AE3
.text:0000000000003ADE                 add     rsp, 48h
.text:0000000000003AE2                 retn
.text:0000000000003AE3 ; ---------------------------------------------------------------------------
.text:0000000000003AE3
.text:0000000000003AE3 loc_3AE3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003AE3                 call    ___stack_chk_fail
.text:0000000000003AE3 ; } // starts at 3A50
.text:0000000000003AE3 quotearg_char_mem endp
.text:0000000000003AE3
.text:0000000000003AE3 ; ---------------------------------------------------------------------------
.text:0000000000003AE8                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AF0
.text:0000000000003AF0
.text:0000000000003AF0                 public quotearg_char
.text:0000000000003AF0 quotearg_char   proc near
.text:0000000000003AF0 ; __unwind {
.text:0000000000003AF0                 movsx   edx, sil
.text:0000000000003AF4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AFB                 jmp     quotearg_char_mem
.text:0000000000003AFB ; } // starts at 3AF0
.text:0000000000003AFB quotearg_char   endp
.text:0000000000003AFB
.text:0000000000003B00
.text:0000000000003B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B00
.text:0000000000003B00
.text:0000000000003B00                 public quotearg_colon
.text:0000000000003B00 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003B00 ; __unwind {
.text:0000000000003B00                 mov     edx, 3Ah ; ':'
.text:0000000000003B05                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B0C                 jmp     quotearg_char_mem
.text:0000000000003B0C ; } // starts at 3B00
.text:0000000000003B0C quotearg_colon  endp
.text:0000000000003B0C
.text:0000000000003B0C ; ---------------------------------------------------------------------------
.text:0000000000003B11                 align 20h
.text:0000000000003B20
.text:0000000000003B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B20
.text:0000000000003B20
.text:0000000000003B20                 public quotearg_colon_mem
.text:0000000000003B20 quotearg_colon_mem proc near
.text:0000000000003B20 ; __unwind {
.text:0000000000003B20                 mov     edx, 3Ah ; ':'
.text:0000000000003B25                 jmp     quotearg_char_mem
.text:0000000000003B25 ; } // starts at 3B20
.text:0000000000003B25 quotearg_colon_mem endp
.text:0000000000003B25
.text:0000000000003B25 ; ---------------------------------------------------------------------------
.text:0000000000003B2A                 align 10h
.text:0000000000003B30
.text:0000000000003B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B30
.text:0000000000003B30 ; Attributes: info_from_lumina
.text:0000000000003B30
.text:0000000000003B30 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003B30                 public quotearg_n_style_colon
.text:0000000000003B30 quotearg_n_style_colon proc near
.text:0000000000003B30
.text:0000000000003B30 var_48          = dword ptr -48h
.text:0000000000003B30 var_44          = qword ptr -44h
.text:0000000000003B30 var_3C          = qword ptr -3Ch
.text:0000000000003B30 var_34          = qword ptr -34h
.text:0000000000003B30 var_2C          = qword ptr -2Ch
.text:0000000000003B30 var_24          = qword ptr -24h
.text:0000000000003B30 var_1C          = qword ptr -1Ch
.text:0000000000003B30 var_14          = dword ptr -14h
.text:0000000000003B30 var_10          = qword ptr -10h
.text:0000000000003B30
.text:0000000000003B30 ; __unwind {
.text:0000000000003B30                 sub     rsp, 48h
.text:0000000000003B34                 mov     rax, rdx
.text:0000000000003B37                 mov     rdx, fs:28h
.text:0000000000003B40                 mov     [rsp+48h+var_10], rdx
.text:0000000000003B45                 xor     edx, edx
.text:0000000000003B47                 cmp     esi, 0Ah
.text:0000000000003B4A                 jz      short loc_3BB4
.text:0000000000003B4C                 mov     [rsp+48h+var_48], esi
.text:0000000000003B4F                 mov     rcx, rsp
.text:0000000000003B52                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B59                 mov     rsi, rax
.text:0000000000003B5C                 mov     [rsp+48h+var_44], 0
.text:0000000000003B65                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003B6E                 mov     [rsp+48h+var_34], 0
.text:0000000000003B77                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B80                 mov     [rsp+48h+var_24], 0
.text:0000000000003B89                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B92                 mov     [rsp+48h+var_14], 0
.text:0000000000003B9A                 call    quotearg_n_options
.text:0000000000003B9F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003BA4                 xor     rcx, fs:28h
.text:0000000000003BAD                 jnz     short loc_3BB9
.text:0000000000003BAF                 add     rsp, 48h
.text:0000000000003BB3                 retn
.text:0000000000003BB4 ; ---------------------------------------------------------------------------
.text:0000000000003BB4
.text:0000000000003BB4 loc_3BB4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003BB4                 call    _abort
.text:0000000000003BB9 ; ---------------------------------------------------------------------------
.text:0000000000003BB9
.text:0000000000003BB9 loc_3BB9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003BB9                 call    ___stack_chk_fail
.text:0000000000003BB9 ; } // starts at 3B30
.text:0000000000003BB9 quotearg_n_style_colon endp
.text:0000000000003BB9
.text:0000000000003BB9 ; ---------------------------------------------------------------------------
.text:0000000000003BBE                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0 ; Attributes: info_from_lumina
.text:0000000000003BC0
.text:0000000000003BC0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003BC0                 public quotearg_n_custom_mem
.text:0000000000003BC0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003BC0                                         ; quotearg_custom+12↓j ...
.text:0000000000003BC0
.text:0000000000003BC0 var_48          = xmmword ptr -48h
.text:0000000000003BC0 var_38          = xmmword ptr -38h
.text:0000000000003BC0 var_28          = xmmword ptr -28h
.text:0000000000003BC0 var_18          = qword ptr -18h
.text:0000000000003BC0 var_10          = qword ptr -10h
.text:0000000000003BC0
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 sub     rsp, 48h
.text:0000000000003BC4                 mov     r9, rcx
.text:0000000000003BC7                 mov     rcx, cs:qword_207210
.text:0000000000003BCE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003BD6                 mov     rax, fs:28h
.text:0000000000003BDF                 mov     [rsp+48h+var_10], rax
.text:0000000000003BE4                 xor     eax, eax
.text:0000000000003BE6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003BEA                 test    rsi, rsi
.text:0000000000003BED                 mov     [rsp+48h+var_18], rcx
.text:0000000000003BF2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003BF9                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003C01                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003C06                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003C0E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003C13                 jz      short loc_3C47
.text:0000000000003C15                 test    rdx, rdx
.text:0000000000003C18                 jz      short loc_3C47
.text:0000000000003C1A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003C1F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003C24                 mov     rcx, rsp
.text:0000000000003C27                 mov     rdx, r8
.text:0000000000003C2A                 mov     rsi, r9
.text:0000000000003C2D                 call    quotearg_n_options
.text:0000000000003C32                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003C37                 xor     rdi, fs:28h
.text:0000000000003C40                 jnz     short loc_3C4C
.text:0000000000003C42                 add     rsp, 48h
.text:0000000000003C46                 retn
.text:0000000000003C47 ; ---------------------------------------------------------------------------
.text:0000000000003C47
.text:0000000000003C47 loc_3C47:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003C47                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003C47                 call    _abort
.text:0000000000003C4C ; ---------------------------------------------------------------------------
.text:0000000000003C4C
.text:0000000000003C4C loc_3C4C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003C4C                 call    ___stack_chk_fail
.text:0000000000003C4C ; } // starts at 3BC0
.text:0000000000003C4C quotearg_n_custom_mem endp
.text:0000000000003C4C
.text:0000000000003C4C ; ---------------------------------------------------------------------------
.text:0000000000003C51                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60                 public quotearg_n_custom
.text:0000000000003C60 quotearg_n_custom proc near
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C67                 jmp     quotearg_n_custom_mem
.text:0000000000003C67 ; } // starts at 3C60
.text:0000000000003C67 quotearg_n_custom endp
.text:0000000000003C67
.text:0000000000003C67 ; ---------------------------------------------------------------------------
.text:0000000000003C6C                 align 10h
.text:0000000000003C70
.text:0000000000003C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C70
.text:0000000000003C70
.text:0000000000003C70                 public quotearg_custom
.text:0000000000003C70 quotearg_custom proc near
.text:0000000000003C70 ; __unwind {
.text:0000000000003C70                 mov     rcx, rdx
.text:0000000000003C73                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C7A                 mov     rdx, rsi
.text:0000000000003C7D                 mov     rsi, rdi
.text:0000000000003C80                 xor     edi, edi
.text:0000000000003C82                 jmp     quotearg_n_custom_mem
.text:0000000000003C82 ; } // starts at 3C70
.text:0000000000003C82 quotearg_custom endp
.text:0000000000003C82
.text:0000000000003C82 ; ---------------------------------------------------------------------------
.text:0000000000003C87                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90                 public quotearg_custom_mem
.text:0000000000003C90 quotearg_custom_mem proc near
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 mov     r8, rcx
.text:0000000000003C93                 mov     rcx, rdx
.text:0000000000003C96                 mov     rdx, rsi
.text:0000000000003C99                 mov     rsi, rdi
.text:0000000000003C9C                 xor     edi, edi
.text:0000000000003C9E                 jmp     quotearg_n_custom_mem
.text:0000000000003C9E ; } // starts at 3C90
.text:0000000000003C9E quotearg_custom_mem endp
.text:0000000000003C9E
.text:0000000000003C9E ; ---------------------------------------------------------------------------
.text:0000000000003CA3                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0
.text:0000000000003CB0                 public quote_n_mem
.text:0000000000003CB0 quote_n_mem     proc near
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 lea     rcx, quote_quoting_options
.text:0000000000003CB7                 jmp     quotearg_n_options
.text:0000000000003CB7 ; } // starts at 3CB0
.text:0000000000003CB7 quote_n_mem     endp
.text:0000000000003CB7
.text:0000000000003CB7 ; ---------------------------------------------------------------------------
.text:0000000000003CBC                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0                 public quote_mem
.text:0000000000003CC0 quote_mem       proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 lea     rcx, quote_quoting_options
.text:0000000000003CC7                 mov     rdx, rsi
.text:0000000000003CCA                 mov     rsi, rdi
.text:0000000000003CCD                 xor     edi, edi
.text:0000000000003CCF                 jmp     quotearg_n_options
.text:0000000000003CCF ; } // starts at 3CC0
.text:0000000000003CCF quote_mem       endp
.text:0000000000003CCF
.text:0000000000003CCF ; ---------------------------------------------------------------------------
.text:0000000000003CD4                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0
.text:0000000000003CE0                 public quote_n
.text:0000000000003CE0 quote_n         proc near
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 lea     rcx, quote_quoting_options
.text:0000000000003CE7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CEE                 jmp     quotearg_n_options
.text:0000000000003CEE ; } // starts at 3CE0
.text:0000000000003CEE quote_n         endp
.text:0000000000003CEE
.text:0000000000003CEE ; ---------------------------------------------------------------------------
.text:0000000000003CF3                 align 20h
.text:0000000000003D00
.text:0000000000003D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D00
.text:0000000000003D00
.text:0000000000003D00                 public quote
.text:0000000000003D00 quote           proc near
.text:0000000000003D00 ; __unwind {
.text:0000000000003D00                 lea     rcx, quote_quoting_options
.text:0000000000003D07                 mov     rsi, rdi
.text:0000000000003D0A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D11                 xor     edi, edi
.text:0000000000003D13                 jmp     quotearg_n_options
.text:0000000000003D13 ; } // starts at 3D00
.text:0000000000003D13 quote           endp
.text:0000000000003D13
.text:0000000000003D13 ; ---------------------------------------------------------------------------
.text:0000000000003D18                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20
.text:0000000000003D20 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003D20                 public version_etc_arn
.text:0000000000003D20 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_415B↓j
.text:0000000000003D20                                         ; version_etc_va:loc_41AB↓p ...
.text:0000000000003D20
.text:0000000000003D20 var_58          = qword ptr -58h
.text:0000000000003D20 var_50          = qword ptr -50h
.text:0000000000003D20 var_48          = qword ptr -48h
.text:0000000000003D20 var_40          = qword ptr -40h
.text:0000000000003D20
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 push    r15
.text:0000000000003D22                 push    r14
.text:0000000000003D24                 push    r13
.text:0000000000003D26                 push    r12
.text:0000000000003D28                 mov     r12, r9
.text:0000000000003D2B                 push    rbp
.text:0000000000003D2C                 push    rbx
.text:0000000000003D2D                 mov     rbp, rdi
.text:0000000000003D30                 mov     rbx, r8
.text:0000000000003D33                 sub     rsp, 28h
.text:0000000000003D37                 test    rsi, rsi
.text:0000000000003D3A                 jz      loc_3E58
.text:0000000000003D40                 mov     r8, rdx
.text:0000000000003D43                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003D4A                 mov     r9, rcx
.text:0000000000003D4D                 xor     eax, eax
.text:0000000000003D4F                 mov     rcx, rsi
.text:0000000000003D52                 mov     esi, 1
.text:0000000000003D57                 call    ___fprintf_chk
.text:0000000000003D5C
.text:0000000000003D5C loc_3D5C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003D5C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003D63                 xor     edi, edi        ; domainname
.text:0000000000003D65                 mov     edx, 5          ; category
.text:0000000000003D6A                 call    _dcgettext
.text:0000000000003D6F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003D76                 mov     rcx, rax
.text:0000000000003D79                 mov     r8d, 7E3h
.text:0000000000003D7F                 mov     esi, 1
.text:0000000000003D84                 mov     rdi, rbp
.text:0000000000003D87                 xor     eax, eax
.text:0000000000003D89                 call    ___fprintf_chk
.text:0000000000003D8E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003D95                 xor     edi, edi        ; domainname
.text:0000000000003D97                 mov     edx, 5          ; category
.text:0000000000003D9C                 call    _dcgettext
.text:0000000000003DA1                 mov     rsi, rbp        ; stream
.text:0000000000003DA4                 mov     rdi, rax        ; s
.text:0000000000003DA7                 call    _fputs_unlocked
.text:0000000000003DAC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003DB0                 ja      def_3DC4        ; jumptable 0000000000003DC4 default case
.text:0000000000003DB6                 lea     rdx, jpt_3DC4
.text:0000000000003DBD                 movsxd  rax, ds:(jpt_3DC4 - 5908h)[rdx+r12*4]
.text:0000000000003DC1                 add     rax, rdx
.text:0000000000003DC4                 jmp     rax             ; switch jump
.text:0000000000003DC4 ; ---------------------------------------------------------------------------
.text:0000000000003DC6                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DD0                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003DD0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003DC4 case 8
.text:0000000000003DD4                 mov     rax, [rbx+10h]
.text:0000000000003DD8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003DDF                 mov     r8, [rbx+8]
.text:0000000000003DE3                 mov     edx, 5          ; category
.text:0000000000003DE8                 xor     edi, edi        ; domainname
.text:0000000000003DEA                 mov     r13, [rbx+30h]
.text:0000000000003DEE                 mov     r12, [rbx+28h]
.text:0000000000003DF2                 mov     [rsp+58h+var_48], r9
.text:0000000000003DF7                 mov     r15, [rbx+20h]
.text:0000000000003DFB                 mov     r14, [rbx+18h]
.text:0000000000003DFF                 mov     [rsp+58h+var_58], rax
.text:0000000000003E03                 mov     [rsp+58h+var_50], r8
.text:0000000000003E08                 mov     rbx, [rbx]
.text:0000000000003E0B                 call    _dcgettext
.text:0000000000003E10                 sub     rsp, 8
.text:0000000000003E14
.text:0000000000003E14 loc_3E14:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003E14                 mov     r9, [rsp+60h+var_48]
.text:0000000000003E19                 mov     rdx, rax
.text:0000000000003E1C                 mov     rcx, rbx
.text:0000000000003E1F                 mov     esi, 1
.text:0000000000003E24                 mov     rdi, rbp
.text:0000000000003E27                 xor     eax, eax
.text:0000000000003E29                 push    r9
.text:0000000000003E2B                 push    r13
.text:0000000000003E2D                 push    r12
.text:0000000000003E2F                 push    r15
.text:0000000000003E31                 push    r14
.text:0000000000003E33                 mov     r9, [rsp+88h+var_58]
.text:0000000000003E38                 mov     r8, [rsp+88h+var_50]
.text:0000000000003E3D                 call    ___fprintf_chk
.text:0000000000003E42                 add     rsp, 30h
.text:0000000000003E46
.text:0000000000003E46 loc_3E46:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E46                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003E46                 add     rsp, 28h        ; jumptable 0000000000003DC4 case 0
.text:0000000000003E4A                 pop     rbx
.text:0000000000003E4B                 pop     rbp
.text:0000000000003E4C                 pop     r12
.text:0000000000003E4E                 pop     r13
.text:0000000000003E50                 pop     r14
.text:0000000000003E52                 pop     r15
.text:0000000000003E54                 retn
.text:0000000000003E54 ; ---------------------------------------------------------------------------
.text:0000000000003E55                 align 8
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003E58                 mov     r8, rcx
.text:0000000000003E5B                 mov     rcx, rdx
.text:0000000000003E5E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003E65                 mov     esi, 1
.text:0000000000003E6A                 xor     eax, eax
.text:0000000000003E6C                 call    ___fprintf_chk
.text:0000000000003E71                 jmp     loc_3D5C
.text:0000000000003E71 ; ---------------------------------------------------------------------------
.text:0000000000003E76                 align 20h
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E80                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003E80                 mov     r10, [rbx+40h]  ; jumptable 0000000000003DC4 case 9
.text:0000000000003E84                 mov     r9, [rbx+38h]
.text:0000000000003E88                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E8F                 mov     rax, [rbx+10h]
.text:0000000000003E93                 mov     r8, [rbx+8]
.text:0000000000003E97                 mov     edx, 5          ; category
.text:0000000000003E9C                 mov     r13, [rbx+30h]
.text:0000000000003EA0                 mov     r12, [rbx+28h]
.text:0000000000003EA4                 mov     r15, [rbx+20h]
.text:0000000000003EA8                 mov     r14, [rbx+18h]
.text:0000000000003EAC                 mov     rbx, [rbx]
.text:0000000000003EAF                 mov     [rsp+58h+var_40], r10
.text:0000000000003EB4                 mov     [rsp+58h+var_48], r9
.text:0000000000003EB9                 mov     [rsp+58h+var_58], rax
.text:0000000000003EBD                 mov     [rsp+58h+var_50], r8
.text:0000000000003EC2
.text:0000000000003EC2 loc_3EC2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003EC2                 xor     edi, edi        ; domainname
.text:0000000000003EC4                 call    _dcgettext
.text:0000000000003EC9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003ECE                 push    r10
.text:0000000000003ED0                 jmp     loc_3E14
.text:0000000000003ED0 ; ---------------------------------------------------------------------------
.text:0000000000003ED5                 align 8
.text:0000000000003ED8
.text:0000000000003ED8 loc_3ED8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003ED8                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003ED8                 mov     rbx, [rbx]      ; jumptable 0000000000003DC4 case 1
.text:0000000000003EDB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003EE2                 mov     edx, 5          ; category
.text:0000000000003EE7                 xor     edi, edi        ; domainname
.text:0000000000003EE9                 call    _dcgettext
.text:0000000000003EEE                 add     rsp, 28h
.text:0000000000003EF2                 mov     rcx, rbx
.text:0000000000003EF5                 mov     rdi, rbp
.text:0000000000003EF8                 pop     rbx
.text:0000000000003EF9                 pop     rbp
.text:0000000000003EFA                 pop     r12
.text:0000000000003EFC                 pop     r13
.text:0000000000003EFE                 pop     r14
.text:0000000000003F00                 pop     r15
.text:0000000000003F02                 mov     rdx, rax
.text:0000000000003F05                 mov     esi, 1
.text:0000000000003F0A                 xor     eax, eax
.text:0000000000003F0C                 jmp     ___fprintf_chk
.text:0000000000003F0C ; ---------------------------------------------------------------------------
.text:0000000000003F11                 align 8
.text:0000000000003F18
.text:0000000000003F18 loc_3F18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F18                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003F18                 mov     r12, [rbx+8]    ; jumptable 0000000000003DC4 case 2
.text:0000000000003F1C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003F23                 mov     rbx, [rbx]
.text:0000000000003F26                 mov     edx, 5          ; category
.text:0000000000003F2B                 xor     edi, edi        ; domainname
.text:0000000000003F2D                 call    _dcgettext
.text:0000000000003F32                 add     rsp, 28h
.text:0000000000003F36                 mov     r8, r12
.text:0000000000003F39                 mov     rcx, rbx
.text:0000000000003F3C                 mov     rdi, rbp
.text:0000000000003F3F                 mov     rdx, rax
.text:0000000000003F42                 mov     esi, 1
.text:0000000000003F47                 pop     rbx
.text:0000000000003F48                 pop     rbp
.text:0000000000003F49                 pop     r12
.text:0000000000003F4B                 pop     r13
.text:0000000000003F4D                 pop     r14
.text:0000000000003F4F                 pop     r15
.text:0000000000003F51                 xor     eax, eax
.text:0000000000003F53                 jmp     ___fprintf_chk
.text:0000000000003F53 ; ---------------------------------------------------------------------------
.text:0000000000003F58                 align 20h
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F60                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003F60                 mov     r13, [rbx+10h]  ; jumptable 0000000000003DC4 case 3
.text:0000000000003F64                 mov     r12, [rbx+8]
.text:0000000000003F68                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003F6F                 mov     rbx, [rbx]
.text:0000000000003F72                 mov     edx, 5          ; category
.text:0000000000003F77                 xor     edi, edi        ; domainname
.text:0000000000003F79                 call    _dcgettext
.text:0000000000003F7E                 add     rsp, 28h
.text:0000000000003F82                 mov     r9, r13
.text:0000000000003F85                 mov     r8, r12
.text:0000000000003F88                 mov     rcx, rbx
.text:0000000000003F8B                 mov     rdi, rbp
.text:0000000000003F8E                 mov     rdx, rax
.text:0000000000003F91                 pop     rbx
.text:0000000000003F92                 pop     rbp
.text:0000000000003F93                 pop     r12
.text:0000000000003F95                 pop     r13
.text:0000000000003F97                 pop     r14
.text:0000000000003F99                 pop     r15
.text:0000000000003F9B                 mov     esi, 1
.text:0000000000003FA0                 xor     eax, eax
.text:0000000000003FA2                 jmp     ___fprintf_chk
.text:0000000000003FA2 ; ---------------------------------------------------------------------------
.text:0000000000003FA7                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FB0                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000003FB0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003DC4 case 4
.text:0000000000003FB7                 mov     edx, 5          ; category
.text:0000000000003FBC                 xor     edi, edi        ; domainname
.text:0000000000003FBE                 mov     r14, [rbx+18h]
.text:0000000000003FC2                 mov     r13, [rbx+10h]
.text:0000000000003FC6                 mov     r12, [rbx+8]
.text:0000000000003FCA                 mov     rbx, [rbx]
.text:0000000000003FCD                 call    _dcgettext
.text:0000000000003FD2                 sub     rsp, 8
.text:0000000000003FD6
.text:0000000000003FD6 loc_3FD6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003FD6                 push    r14
.text:0000000000003FD8                 mov     rdx, rax
.text:0000000000003FDB                 mov     r9, r13
.text:0000000000003FDE                 mov     r8, r12
.text:0000000000003FE1                 mov     rcx, rbx
.text:0000000000003FE4                 mov     rdi, rbp
.text:0000000000003FE7                 mov     esi, 1
.text:0000000000003FEC                 xor     eax, eax
.text:0000000000003FEE                 call    ___fprintf_chk
.text:0000000000003FF3                 pop     rax
.text:0000000000003FF4                 pop     rdx
.text:0000000000003FF5                 add     rsp, 28h
.text:0000000000003FF9                 pop     rbx
.text:0000000000003FFA                 pop     rbp
.text:0000000000003FFB                 pop     r12
.text:0000000000003FFD                 pop     r13
.text:0000000000003FFF                 pop     r14
.text:0000000000004001                 pop     r15
.text:0000000000004003                 retn
.text:0000000000004003 ; ---------------------------------------------------------------------------
.text:0000000000004004                 align 8
.text:0000000000004008
.text:0000000000004008 loc_4008:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004008                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000004008                 mov     r15, [rbx+20h]  ; jumptable 0000000000003DC4 case 5
.text:000000000000400C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004013                 mov     edx, 5          ; category
.text:0000000000004018                 xor     edi, edi        ; domainname
.text:000000000000401A                 mov     r14, [rbx+18h]
.text:000000000000401E                 mov     r13, [rbx+10h]
.text:0000000000004022                 mov     r12, [rbx+8]
.text:0000000000004026                 mov     rbx, [rbx]
.text:0000000000004029                 call    _dcgettext
.text:000000000000402E                 push    r15
.text:0000000000004030                 jmp     short loc_3FD6
.text:0000000000004030 ; ---------------------------------------------------------------------------
.text:0000000000004032                 align 8
.text:0000000000004038
.text:0000000000004038 loc_4038:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004038                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:0000000000004038                 mov     r8, [rbx+8]     ; jumptable 0000000000003DC4 case 6
.text:000000000000403C                 mov     r12, [rbx+28h]
.text:0000000000004040                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004047                 mov     r15, [rbx+20h]
.text:000000000000404B                 mov     r14, [rbx+18h]
.text:000000000000404F                 mov     edx, 5          ; category
.text:0000000000004054                 mov     r13, [rbx+10h]
.text:0000000000004058                 xor     edi, edi        ; domainname
.text:000000000000405A                 mov     rbx, [rbx]
.text:000000000000405D                 mov     [rsp+58h+var_58], r8
.text:0000000000004061                 call    _dcgettext
.text:0000000000004066                 sub     rsp, 8
.text:000000000000406A                 mov     r9, r13
.text:000000000000406D                 push    r12
.text:000000000000406F                 push    r15
.text:0000000000004071                 push    r14
.text:0000000000004073
.text:0000000000004073 loc_4073:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004073                 mov     r8, [rsp+78h+var_58]
.text:0000000000004078                 mov     rcx, rbx
.text:000000000000407B                 mov     rdx, rax
.text:000000000000407E                 mov     rdi, rbp
.text:0000000000004081                 mov     esi, 1
.text:0000000000004086                 xor     eax, eax
.text:0000000000004088                 call    ___fprintf_chk
.text:000000000000408D                 add     rsp, 20h
.text:0000000000004091                 add     rsp, 28h
.text:0000000000004095                 pop     rbx
.text:0000000000004096                 pop     rbp
.text:0000000000004097                 pop     r12
.text:0000000000004099                 pop     r13
.text:000000000000409B                 pop     r14
.text:000000000000409D                 pop     r15
.text:000000000000409F                 retn
.text:00000000000040A0 ; ---------------------------------------------------------------------------
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040A0                                         ; DATA XREF: .rodata:jpt_3DC4↓o
.text:00000000000040A0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003DC4 case 7
.text:00000000000040A4                 mov     r13, [rbx+30h]
.text:00000000000040A8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000040AF                 mov     r12, [rbx+28h]
.text:00000000000040B3                 mov     r15, [rbx+20h]
.text:00000000000040B7                 mov     edx, 5          ; category
.text:00000000000040BC                 mov     r14, [rbx+18h]
.text:00000000000040C0                 mov     r8, [rbx+8]
.text:00000000000040C4                 xor     edi, edi        ; domainname
.text:00000000000040C6                 mov     [rsp+58h+var_50], r9
.text:00000000000040CB                 mov     rbx, [rbx]
.text:00000000000040CE                 mov     [rsp+58h+var_58], r8
.text:00000000000040D2                 call    _dcgettext
.text:00000000000040D7                 push    r13
.text:00000000000040D9                 push    r12
.text:00000000000040DB                 push    r15
.text:00000000000040DD                 push    r14
.text:00000000000040DF                 mov     r9, [rsp+78h+var_50]
.text:00000000000040E4                 jmp     short loc_4073
.text:00000000000040E4 ; ---------------------------------------------------------------------------
.text:00000000000040E6                 align 10h
.text:00000000000040F0
.text:00000000000040F0 def_3DC4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000040F0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003DC4 default case
.text:00000000000040F4                 mov     r9, [rbx+38h]
.text:00000000000040F8                 mov     edx, 5
.text:00000000000040FD                 mov     rax, [rbx+10h]
.text:0000000000004101                 mov     r8, [rbx+8]
.text:0000000000004105                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000410C                 mov     r13, [rbx+30h]
.text:0000000000004110                 mov     r12, [rbx+28h]
.text:0000000000004114                 mov     r15, [rbx+20h]
.text:0000000000004118                 mov     r14, [rbx+18h]
.text:000000000000411C                 mov     [rsp+58h+var_40], r10
.text:0000000000004121                 mov     [rsp+58h+var_48], r9
.text:0000000000004126                 mov     [rsp+58h+var_58], rax
.text:000000000000412A                 mov     [rsp+58h+var_50], r8
.text:000000000000412F                 mov     rbx, [rbx]
.text:0000000000004132                 jmp     loc_3EC2
.text:0000000000004132 ; } // starts at 3D20
.text:0000000000004132 version_etc_arn endp
.text:0000000000004132
.text:0000000000004132 ; ---------------------------------------------------------------------------
.text:0000000000004137                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004140                 public version_etc_ar
.text:0000000000004140 version_etc_ar  proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 xor     r9d, r9d
.text:0000000000004143                 cmp     qword ptr [r8], 0
.text:0000000000004147                 jz      short loc_415B
.text:0000000000004149                 nop     dword ptr [rax+00000000h]
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004150                 add     r9, 1
.text:0000000000004154                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004159                 jnz     short loc_4150
.text:000000000000415B
.text:000000000000415B loc_415B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000415B                 jmp     version_etc_arn
.text:000000000000415B ; } // starts at 4140
.text:000000000000415B version_etc_ar  endp
.text:000000000000415B
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160 ; Attributes: info_from_lumina
.text:0000000000004160
.text:0000000000004160 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004160                 public version_etc_va
.text:0000000000004160 version_etc_va  proc near
.text:0000000000004160
.text:0000000000004160 authtab         = qword ptr -68h
.text:0000000000004160 var_10          = qword ptr -10h
.text:0000000000004160
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 sub     rsp, 68h
.text:0000000000004164                 mov     r10, r8
.text:0000000000004167                 xor     r9d, r9d
.text:000000000000416A                 mov     rax, fs:28h
.text:0000000000004173                 mov     [rsp+68h+var_10], rax
.text:0000000000004178                 xor     eax, eax
.text:000000000000417A                 mov     r8, rsp
.text:000000000000417D                 nop     dword ptr [rax]
.text:0000000000004180
.text:0000000000004180 loc_4180:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004180                 mov     eax, [r10]
.text:0000000000004183                 cmp     eax, 2Fh ; '/'
.text:0000000000004186                 ja      short loc_41CA
.text:0000000000004188                 mov     r11d, eax
.text:000000000000418B                 add     r11, [r10+10h]
.text:000000000000418F                 add     eax, 8
.text:0000000000004192                 mov     [r10], eax
.text:0000000000004195
.text:0000000000004195 loc_4195:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004195                 mov     rax, [r11]
.text:0000000000004198                 test    rax, rax
.text:000000000000419B                 mov     [r8+r9*8], rax
.text:000000000000419F                 jz      short loc_41AB
.text:00000000000041A1                 add     r9, 1
.text:00000000000041A5                 cmp     r9, 0Ah
.text:00000000000041A9                 jnz     short loc_4180
.text:00000000000041AB
.text:00000000000041AB loc_41AB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000041AB                 call    version_etc_arn
.text:00000000000041B0                 mov     rax, [rsp+68h+var_10]
.text:00000000000041B5                 xor     rax, fs:28h
.text:00000000000041BE                 jnz     short loc_41C5
.text:00000000000041C0                 add     rsp, 68h
.text:00000000000041C4                 retn
.text:00000000000041C5 ; ---------------------------------------------------------------------------
.text:00000000000041C5
.text:00000000000041C5 loc_41C5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000041C5                 call    ___stack_chk_fail
.text:00000000000041CA ; ---------------------------------------------------------------------------
.text:00000000000041CA
.text:00000000000041CA loc_41CA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000041CA                 mov     r11, [r10+8]
.text:00000000000041CE                 lea     rax, [r11+8]
.text:00000000000041D2                 mov     [r10+8], rax
.text:00000000000041D6                 jmp     short loc_4195
.text:00000000000041D6 ; } // starts at 4160
.text:00000000000041D6 version_etc_va  endp
.text:00000000000041D6
.text:00000000000041D6 ; ---------------------------------------------------------------------------
.text:00000000000041D8                 align 20h
.text:00000000000041E0
.text:00000000000041E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041E0
.text:00000000000041E0 ; Attributes: info_from_lumina
.text:00000000000041E0
.text:00000000000041E0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000041E0                 public version_etc
.text:00000000000041E0 version_etc     proc near               ; CODE XREF: main+4A2↑p
.text:00000000000041E0
.text:00000000000041E0 var_C0          = dword ptr -0C0h
.text:00000000000041E0 var_B8          = qword ptr -0B8h
.text:00000000000041E0 var_B0          = qword ptr -0B0h
.text:00000000000041E0 var_A8          = byte ptr -0A8h
.text:00000000000041E0 var_50          = qword ptr -50h
.text:00000000000041E0 var_48          = byte ptr -48h
.text:00000000000041E0 var_28          = qword ptr -28h
.text:00000000000041E0 var_20          = qword ptr -20h
.text:00000000000041E0 arg_0           = byte ptr  8
.text:00000000000041E0
.text:00000000000041E0 ; __unwind {
.text:00000000000041E0                 push    rbp
.text:00000000000041E1                 push    rbx
.text:00000000000041E2                 mov     r10d, 20h ; ' '
.text:00000000000041E8                 xor     r11d, r11d
.text:00000000000041EB                 sub     rsp, 0B8h
.text:00000000000041F2                 mov     rax, fs:28h
.text:00000000000041FB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004200                 xor     eax, eax
.text:0000000000004202                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000420A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004212                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000421A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000421F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004227                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000422F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004234                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000423C                 xor     r9d, r9d
.text:000000000000423F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004244                 mov     rbp, rax
.text:0000000000004247                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004250                 cmp     r10d, 2Fh ; '/'
.text:0000000000004254                 ja      short loc_42AC
.text:0000000000004256                 mov     eax, r10d
.text:0000000000004259                 mov     r11d, 1
.text:000000000000425F                 add     r10d, 8
.text:0000000000004263                 add     rax, rbp
.text:0000000000004266
.text:0000000000004266 loc_4266:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004266                 mov     rax, [rax]
.text:0000000000004269                 test    rax, rax
.text:000000000000426C                 mov     [r8+r9*8], rax
.text:0000000000004270                 jz      short loc_427C
.text:0000000000004272                 add     r9, 1
.text:0000000000004276                 cmp     r9, 0Ah
.text:000000000000427A                 jnz     short loc_4250
.text:000000000000427C
.text:000000000000427C loc_427C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000427C                 test    r11b, r11b
.text:000000000000427F                 jnz     short loc_42A5
.text:0000000000004281
.text:0000000000004281 loc_4281:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004281                 call    version_etc_arn
.text:0000000000004286                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000428B                 xor     rax, fs:28h
.text:0000000000004294                 jnz     short loc_42A0
.text:0000000000004296                 add     rsp, 0B8h
.text:000000000000429D                 pop     rbx
.text:000000000000429E                 pop     rbp
.text:000000000000429F                 retn
.text:00000000000042A0 ; ---------------------------------------------------------------------------
.text:00000000000042A0
.text:00000000000042A0 loc_42A0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000042A0                 call    ___stack_chk_fail
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042A5
.text:00000000000042A5 loc_42A5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000042A5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000042AA                 jmp     short loc_4281
.text:00000000000042AC ; ---------------------------------------------------------------------------
.text:00000000000042AC
.text:00000000000042AC loc_42AC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000042AC                 mov     rax, rbx
.text:00000000000042AF                 add     rbx, 8
.text:00000000000042B3                 jmp     short loc_4266
.text:00000000000042B3 ; } // starts at 41E0
.text:00000000000042B3 version_etc     endp
.text:00000000000042B3
.text:00000000000042B3 ; ---------------------------------------------------------------------------
.text:00000000000042B5                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0 ; Attributes: info_from_lumina
.text:00000000000042C0
.text:00000000000042C0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000042C0                 public emit_bug_reporting_address
.text:00000000000042C0 emit_bug_reporting_address proc near
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 push    rbx
.text:00000000000042C1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000042C8                 mov     edx, 5          ; category
.text:00000000000042CD                 xor     edi, edi        ; domainname
.text:00000000000042CF                 call    _dcgettext
.text:00000000000042D4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000042DB                 mov     rsi, rax
.text:00000000000042DE                 mov     edi, 1
.text:00000000000042E3                 xor     eax, eax
.text:00000000000042E5                 call    ___printf_chk
.text:00000000000042EA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000042F1                 mov     edx, 5          ; category
.text:00000000000042F6                 xor     edi, edi        ; domainname
.text:00000000000042F8                 call    _dcgettext
.text:00000000000042FD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004304                 lea     rdx, unk_4BB5
.text:000000000000430B                 mov     rsi, rax
.text:000000000000430E                 mov     edi, 1
.text:0000000000004313                 xor     eax, eax
.text:0000000000004315                 call    ___printf_chk
.text:000000000000431A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004321                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004328                 xor     edi, edi        ; domainname
.text:000000000000432A                 mov     edx, 5          ; category
.text:000000000000432F                 call    _dcgettext
.text:0000000000004334                 mov     rsi, rbx        ; stream
.text:0000000000004337                 mov     rdi, rax        ; s
.text:000000000000433A                 pop     rbx
.text:000000000000433B                 jmp     _fputs_unlocked
.text:000000000000433B ; } // starts at 42C0
.text:000000000000433B emit_bug_reporting_address endp
.text:000000000000433B
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public xmalloc
.text:0000000000004340 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004340                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 push    rbx
.text:0000000000004341                 mov     rbx, rdi
.text:0000000000004344                 call    _malloc
.text:0000000000004349                 test    rax, rax
.text:000000000000434C                 jnz     short loc_4353
.text:000000000000434E                 test    rbx, rbx
.text:0000000000004351                 jnz     short loc_4355
.text:0000000000004353
.text:0000000000004353 loc_4353:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004353                 pop     rbx
.text:0000000000004354                 retn
.text:0000000000004355 ; ---------------------------------------------------------------------------
.text:0000000000004355
.text:0000000000004355 loc_4355:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004355                 call    xalloc_die
.text:0000000000004355 ; } // starts at 4340
.text:0000000000004355 xmalloc         endp
.text:0000000000004355
.text:0000000000004355 ; ---------------------------------------------------------------------------
.text:000000000000435A                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004360                 public xnmalloc
.text:0000000000004360 xnmalloc        proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 mov     rax, rdi
.text:0000000000004363                 mul     rsi
.text:0000000000004366                 mov     rdi, rax
.text:0000000000004369                 seto    al
.text:000000000000436C                 test    rdi, rdi
.text:000000000000436F                 js      short loc_437B
.text:0000000000004371                 movzx   eax, al
.text:0000000000004374                 test    rax, rax
.text:0000000000004377                 jnz     short loc_437B
.text:0000000000004379                 jmp     short xmalloc
.text:000000000000437B ; ---------------------------------------------------------------------------
.text:000000000000437B
.text:000000000000437B loc_437B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000437B                                         ; xnmalloc+17↑j
.text:000000000000437B                 sub     rsp, 8
.text:000000000000437F                 call    xalloc_die
.text:000000000000437F ; } // starts at 4360
.text:000000000000437F xnmalloc        endp
.text:000000000000437F
.text:000000000000437F ; ---------------------------------------------------------------------------
.text:0000000000004384                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public xcharalloc
.text:0000000000004390 xcharalloc      proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 jmp     short xmalloc
.text:0000000000004390 ; } // starts at 4390
.text:0000000000004390 xcharalloc      endp
.text:0000000000004390
.text:0000000000004390 ; ---------------------------------------------------------------------------
.text:0000000000004392                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0 ; Attributes: info_from_lumina
.text:00000000000043A0
.text:00000000000043A0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000043A0                 public xrealloc
.text:00000000000043A0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000043A0                                         ; quotearg_n_options+182↑p ...
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 test    rsi, rsi
.text:00000000000043A3                 push    rbx
.text:00000000000043A4                 mov     rbx, rsi
.text:00000000000043A7                 jnz     short loc_43AE
.text:00000000000043A9                 test    rdi, rdi
.text:00000000000043AC                 jnz     short loc_43C8
.text:00000000000043AE
.text:00000000000043AE loc_43AE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000043AE                 mov     rsi, rbx        ; size
.text:00000000000043B1                 call    _realloc
.text:00000000000043B6                 test    rax, rax
.text:00000000000043B9                 jnz     short loc_43C0
.text:00000000000043BB                 test    rbx, rbx
.text:00000000000043BE                 jnz     short loc_43D1
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000043C0                 pop     rbx
.text:00000000000043C1                 retn
.text:00000000000043C1 ; ---------------------------------------------------------------------------
.text:00000000000043C2                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000043C8                 call    _free
.text:00000000000043CD                 xor     eax, eax
.text:00000000000043CF                 pop     rbx
.text:00000000000043D0                 retn
.text:00000000000043D1 ; ---------------------------------------------------------------------------
.text:00000000000043D1
.text:00000000000043D1 loc_43D1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000043D1                 call    xalloc_die
.text:00000000000043D1 ; } // starts at 43A0
.text:00000000000043D1 xrealloc        endp
.text:00000000000043D1
.text:00000000000043D1 ; ---------------------------------------------------------------------------
.text:00000000000043D6                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000043E0                 public xnrealloc
.text:00000000000043E0 xnrealloc       proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 mov     rax, rsi
.text:00000000000043E3                 mul     rdx
.text:00000000000043E6                 mov     rsi, rax
.text:00000000000043E9                 seto    al
.text:00000000000043EC                 test    rsi, rsi
.text:00000000000043EF                 js      short loc_43FB
.text:00000000000043F1                 movzx   eax, al
.text:00000000000043F4                 test    rax, rax
.text:00000000000043F7                 jnz     short loc_43FB
.text:00000000000043F9                 jmp     short xrealloc
.text:00000000000043FB ; ---------------------------------------------------------------------------
.text:00000000000043FB
.text:00000000000043FB loc_43FB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000043FB                                         ; xnrealloc+17↑j
.text:00000000000043FB                 sub     rsp, 8
.text:00000000000043FF                 call    xalloc_die
.text:00000000000043FF ; } // starts at 43E0
.text:00000000000043FF xnrealloc       endp
.text:00000000000043FF
.text:00000000000043FF ; ---------------------------------------------------------------------------
.text:0000000000004404                 align 10h
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410 ; Attributes: info_from_lumina
.text:0000000000004410
.text:0000000000004410 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004410                 public x2nrealloc
.text:0000000000004410 x2nrealloc      proc near
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 test    rdi, rdi
.text:0000000000004413                 mov     r9, rdx
.text:0000000000004416                 mov     rcx, [rsi]
.text:0000000000004419                 jz      short loc_4450
.text:000000000000441B                 xor     edx, edx
.text:000000000000441D                 mov     rax, 5555555555555554h
.text:0000000000004427                 div     r9
.text:000000000000442A                 cmp     rax, rcx
.text:000000000000442D                 jbe     short loc_446B
.text:000000000000442F                 mov     rax, rcx
.text:0000000000004432                 shr     rax, 1
.text:0000000000004435                 lea     rcx, [rax+rcx+1]
.text:000000000000443A
.text:000000000000443A loc_443A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000443A                 mov     [rsi], rcx
.text:000000000000443D                 imul    rcx, r9
.text:0000000000004441                 mov     rsi, rcx
.text:0000000000004444                 jmp     xrealloc
.text:0000000000004444 ; ---------------------------------------------------------------------------
.text:0000000000004449                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004450                 test    rcx, rcx
.text:0000000000004453                 jz      short loc_4478
.text:0000000000004455
.text:0000000000004455 loc_4455:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004455                 mov     rax, rcx
.text:0000000000004458                 mul     r9
.text:000000000000445B                 seto    dl
.text:000000000000445E                 test    rax, rax
.text:0000000000004461                 movzx   edx, dl
.text:0000000000004464                 js      short loc_446B
.text:0000000000004466                 test    rdx, rdx
.text:0000000000004469                 jz      short loc_443A
.text:000000000000446B
.text:000000000000446B loc_446B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000446B                                         ; x2nrealloc+54↑j
.text:000000000000446B                 sub     rsp, 8
.text:000000000000446F                 call    xalloc_die
.text:000000000000446F ; ---------------------------------------------------------------------------
.text:0000000000004474                 align 8
.text:0000000000004478
.text:0000000000004478 loc_4478:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004478                 xor     edx, edx
.text:000000000000447A                 mov     eax, 80h
.text:000000000000447F                 xor     r8d, r8d
.text:0000000000004482                 div     r9
.text:0000000000004485                 test    rax, rax
.text:0000000000004488                 setz    r8b
.text:000000000000448C                 lea     rcx, [r8+rax]
.text:0000000000004490                 jmp     short loc_4455
.text:0000000000004490 ; } // starts at 4410
.text:0000000000004490 x2nrealloc      endp
.text:0000000000004490
.text:0000000000004490 ; ---------------------------------------------------------------------------
.text:0000000000004492                 align 20h
.text:00000000000044A0
.text:00000000000044A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044A0
.text:00000000000044A0 ; Attributes: info_from_lumina
.text:00000000000044A0
.text:00000000000044A0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000044A0                 public x2realloc
.text:00000000000044A0 x2realloc       proc near
.text:00000000000044A0 ; __unwind {
.text:00000000000044A0                 test    rdi, rdi
.text:00000000000044A3                 mov     rax, [rsi]
.text:00000000000044A6                 jz      short loc_44D0
.text:00000000000044A8                 mov     rdx, 5555555555555553h
.text:00000000000044B2                 cmp     rax, rdx
.text:00000000000044B5                 ja      short loc_44E1
.text:00000000000044B7                 mov     rdx, rax
.text:00000000000044BA                 shr     rdx, 1
.text:00000000000044BD                 lea     rax, [rdx+rax+1]
.text:00000000000044C2
.text:00000000000044C2 loc_44C2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000044C2                 mov     [rsi], rax
.text:00000000000044C5                 mov     rsi, rax
.text:00000000000044C8                 jmp     xrealloc
.text:00000000000044C8 ; ---------------------------------------------------------------------------
.text:00000000000044CD                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000044D0                 test    rax, rax
.text:00000000000044D3                 mov     edx, 80h
.text:00000000000044D8                 cmovz   rax, rdx
.text:00000000000044DC                 test    rax, rax
.text:00000000000044DF                 jns     short loc_44C2
.text:00000000000044E1
.text:00000000000044E1 loc_44E1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000044E1                 sub     rsp, 8
.text:00000000000044E5                 call    xalloc_die
.text:00000000000044E5 ; } // starts at 44A0
.text:00000000000044E5 x2realloc       endp
.text:00000000000044E5
.text:00000000000044E5 ; ---------------------------------------------------------------------------
.text:00000000000044EA                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0
.text:00000000000044F0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000044F0                 public xzalloc
.text:00000000000044F0 xzalloc         proc near
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 push    rbx
.text:00000000000044F1                 mov     rbx, rdi
.text:00000000000044F4                 call    xmalloc
.text:00000000000044F9                 mov     rdx, rbx        ; n
.text:00000000000044FC                 xor     esi, esi        ; c
.text:00000000000044FE                 mov     rdi, rax        ; s
.text:0000000000004501                 pop     rbx
.text:0000000000004502                 jmp     _memset
.text:0000000000004502 ; } // starts at 44F0
.text:0000000000004502 xzalloc         endp
.text:0000000000004502
.text:0000000000004502 ; ---------------------------------------------------------------------------
.text:0000000000004507                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004510                 public xcalloc
.text:0000000000004510 xcalloc         proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 mov     rax, rdi
.text:0000000000004513                 sub     rsp, 8
.text:0000000000004517                 mul     rsi
.text:000000000000451A                 seto    dl
.text:000000000000451D                 test    rax, rax
.text:0000000000004520                 js      short loc_4539
.text:0000000000004522                 movzx   edx, dl
.text:0000000000004525                 test    rdx, rdx
.text:0000000000004528                 jnz     short loc_4539
.text:000000000000452A                 call    _calloc
.text:000000000000452F                 test    rax, rax
.text:0000000000004532                 jz      short loc_4539
.text:0000000000004534                 add     rsp, 8
.text:0000000000004538                 retn
.text:0000000000004539 ; ---------------------------------------------------------------------------
.text:0000000000004539
.text:0000000000004539 loc_4539:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004539                                         ; xcalloc+18↑j ...
.text:0000000000004539                 call    xalloc_die
.text:0000000000004539 ; } // starts at 4510
.text:0000000000004539 xcalloc         endp
.text:0000000000004539
.text:0000000000004539 ; ---------------------------------------------------------------------------
.text:000000000000453E                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540 ; Attributes: info_from_lumina
.text:0000000000004540
.text:0000000000004540 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004540                 public xmemdup
.text:0000000000004540 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004540                                         ; xstrdup+11↓j
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 push    rbp
.text:0000000000004541                 push    rbx
.text:0000000000004542                 mov     rbp, rdi
.text:0000000000004545                 mov     rdi, rsi
.text:0000000000004548                 mov     rbx, rsi
.text:000000000000454B                 sub     rsp, 8
.text:000000000000454F                 call    xmalloc
.text:0000000000004554                 add     rsp, 8
.text:0000000000004558                 mov     rdx, rbx        ; n
.text:000000000000455B                 mov     rsi, rbp        ; src
.text:000000000000455E                 pop     rbx
.text:000000000000455F                 pop     rbp
.text:0000000000004560                 mov     rdi, rax        ; dest
.text:0000000000004563                 jmp     _memcpy
.text:0000000000004563 ; } // starts at 4540
.text:0000000000004563 xmemdup         endp
.text:0000000000004563
.text:0000000000004563 ; ---------------------------------------------------------------------------
.text:0000000000004568                 align 10h
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570
.text:0000000000004570 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004570                 public xstrdup
.text:0000000000004570 xstrdup         proc near
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 push    rbx
.text:0000000000004571                 mov     rbx, rdi
.text:0000000000004574                 call    _strlen
.text:0000000000004579                 mov     rdi, rbx        ; src
.text:000000000000457C                 lea     rsi, [rax+1]    ; n
.text:0000000000004580                 pop     rbx
.text:0000000000004581                 jmp     short xmemdup
.text:0000000000004581 ; } // starts at 4570
.text:0000000000004581 xstrdup         endp
.text:0000000000004581
.text:0000000000004581 ; ---------------------------------------------------------------------------
.text:0000000000004583                 align 10h
.text:0000000000004590
.text:0000000000004590 ; =============== S U B R O U T I N E =======================================
.text:0000000000004590
.text:0000000000004590 ; Attributes: noreturn info_from_lumina
.text:0000000000004590
.text:0000000000004590 ; void __cdecl xalloc_die()
.text:0000000000004590                 public xalloc_die
.text:0000000000004590 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3566↑p
.text:0000000000004590                                         ; xmalloc:loc_4355↑p ...
.text:0000000000004590 ; __unwind {
.text:0000000000004590                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004597                 sub     rsp, 8
.text:000000000000459B                 mov     edx, 5          ; category
.text:00000000000045A0                 xor     edi, edi        ; domainname
.text:00000000000045A2                 call    _dcgettext
.text:00000000000045A7                 mov     edi, cs:exit_failure ; status
.text:00000000000045AD                 lea     rdx, format+4   ; format
.text:00000000000045B4                 mov     rcx, rax
.text:00000000000045B7                 xor     esi, esi        ; errnum
.text:00000000000045B9                 xor     eax, eax
.text:00000000000045BB                 call    _error
.text:00000000000045C0                 call    _abort
.text:00000000000045C0 ; } // starts at 4590
.text:00000000000045C0 xalloc_die      endp
.text:00000000000045C0
.text:00000000000045C0 ; ---------------------------------------------------------------------------
.text:00000000000045C5                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000045D0                 public rpl_mbrtowc
.text:00000000000045D0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000045D0
.text:00000000000045D0 pwc             = dword ptr -34h
.text:00000000000045D0 var_30          = qword ptr -30h
.text:00000000000045D0
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 push    r13
.text:00000000000045D2                 push    r12
.text:00000000000045D4                 mov     r13, rsi
.text:00000000000045D7                 push    rbp
.text:00000000000045D8                 push    rbx
.text:00000000000045D9                 mov     rbx, rdi
.text:00000000000045DC                 mov     r12, rdx
.text:00000000000045DF                 sub     rsp, 18h
.text:00000000000045E3                 mov     rax, fs:28h
.text:00000000000045EC                 mov     [rsp+38h+var_30], rax
.text:00000000000045F1                 xor     eax, eax
.text:00000000000045F3                 lea     rax, [rsp+38h+pwc]
.text:00000000000045F8                 test    rdi, rdi
.text:00000000000045FB                 cmovz   rbx, rax
.text:00000000000045FF                 mov     rdi, rbx        ; pwc
.text:0000000000004602                 call    _mbrtowc
.text:0000000000004607                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000460B                 mov     rbp, rax
.text:000000000000460E                 jbe     short loc_4630
.text:0000000000004610                 test    r12, r12
.text:0000000000004613                 jz      short loc_4630
.text:0000000000004615                 xor     edi, edi
.text:0000000000004617                 call    hard_locale
.text:000000000000461C                 test    al, al
.text:000000000000461E                 jnz     short loc_4630
.text:0000000000004620                 movzx   eax, byte ptr [r13+0]
.text:0000000000004625                 mov     ebp, 1
.text:000000000000462A                 mov     [rbx], eax
.text:000000000000462C                 nop     dword ptr [rax+00h]
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004630                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004630                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004635                 xor     rdx, fs:28h
.text:000000000000463E                 mov     rax, rbp
.text:0000000000004641                 jnz     short loc_464E
.text:0000000000004643                 add     rsp, 18h
.text:0000000000004647                 pop     rbx
.text:0000000000004648                 pop     rbp
.text:0000000000004649                 pop     r12
.text:000000000000464B                 pop     r13
.text:000000000000464D                 retn
.text:000000000000464E ; ---------------------------------------------------------------------------
.text:000000000000464E
.text:000000000000464E loc_464E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000464E                 call    ___stack_chk_fail
.text:000000000000464E ; } // starts at 45D0
.text:000000000000464E rpl_mbrtowc     endp
.text:000000000000464E
.text:000000000000464E ; ---------------------------------------------------------------------------
.text:0000000000004653                 align 20h
.text:0000000000004660
.text:0000000000004660 ; =============== S U B R O U T I N E =======================================
.text:0000000000004660
.text:0000000000004660 ; Attributes: info_from_lumina
.text:0000000000004660
.text:0000000000004660 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004660                 public close_stream
.text:0000000000004660 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004660                                         ; close_stdout+33↑p
.text:0000000000004660 ; __unwind {
.text:0000000000004660                 push    r12
.text:0000000000004662                 push    rbp
.text:0000000000004663                 mov     rbp, rdi
.text:0000000000004666                 push    rbx
.text:0000000000004667                 call    ___fpending
.text:000000000000466C                 mov     ebx, [rbp+0]
.text:000000000000466F                 mov     rdi, rbp        ; stream
.text:0000000000004672                 mov     r12, rax
.text:0000000000004675                 call    rpl_fclose
.text:000000000000467A                 and     ebx, 20h
.text:000000000000467D                 test    ebx, ebx
.text:000000000000467F                 jnz     short loc_4698
.text:0000000000004681                 test    eax, eax
.text:0000000000004683                 jz      short loc_468F
.text:0000000000004685                 test    r12, r12
.text:0000000000004688                 mov     eax, 0FFFFFFFFh
.text:000000000000468D                 jz      short loc_46C8
.text:000000000000468F
.text:000000000000468F loc_468F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000468F                 pop     rbx
.text:0000000000004690                 pop     rbp
.text:0000000000004691                 pop     r12
.text:0000000000004693                 retn
.text:0000000000004693 ; ---------------------------------------------------------------------------
.text:0000000000004694                 align 8
.text:0000000000004698
.text:0000000000004698 loc_4698:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004698                 test    eax, eax
.text:000000000000469A                 jnz     short loc_46B8
.text:000000000000469C                 call    ___errno_location
.text:00000000000046A1                 mov     dword ptr [rax], 0
.text:00000000000046A7                 mov     eax, 0FFFFFFFFh
.text:00000000000046AC                 pop     rbx
.text:00000000000046AD                 pop     rbp
.text:00000000000046AE                 pop     r12
.text:00000000000046B0                 retn
.text:00000000000046B0 ; ---------------------------------------------------------------------------
.text:00000000000046B1                 align 8
.text:00000000000046B8
.text:00000000000046B8 loc_46B8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000046B8                 pop     rbx
.text:00000000000046B9                 mov     eax, 0FFFFFFFFh
.text:00000000000046BE                 pop     rbp
.text:00000000000046BF                 pop     r12
.text:00000000000046C1                 retn
.text:00000000000046C1 ; ---------------------------------------------------------------------------
.text:00000000000046C2                 align 8
.text:00000000000046C8
.text:00000000000046C8 loc_46C8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000046C8                 call    ___errno_location
.text:00000000000046CD                 cmp     dword ptr [rax], 9
.text:00000000000046D0                 pop     rbx
.text:00000000000046D1                 pop     rbp
.text:00000000000046D2                 pop     r12
.text:00000000000046D4                 setnz   al
.text:00000000000046D7                 movzx   eax, al
.text:00000000000046DA                 neg     eax
.text:00000000000046DC                 retn
.text:00000000000046DC ; } // starts at 4660
.text:00000000000046DC close_stream    endp
.text:00000000000046DC
.text:00000000000046DC ; ---------------------------------------------------------------------------
.text:00000000000046DD                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0
.text:00000000000046E0                 public hard_locale
.text:00000000000046E0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 sub     rsp, 8
.text:00000000000046E4                 xor     esi, esi        ; locale
.text:00000000000046E6                 call    _setlocale
.text:00000000000046EB                 mov     rdx, rax
.text:00000000000046EE                 mov     eax, 1
.text:00000000000046F3                 test    rdx, rdx
.text:00000000000046F6                 jz      short loc_4715
.text:00000000000046F8                 lea     rdi, aC         ; "C"
.text:00000000000046FF                 mov     ecx, 2
.text:0000000000004704                 mov     rsi, rdx
.text:0000000000004707                 repe cmpsb
.text:0000000000004709                 setnbe  cl
.text:000000000000470C                 sbb     cl, 0
.text:000000000000470F                 xor     eax, eax
.text:0000000000004711                 test    cl, cl
.text:0000000000004713                 jnz     short loc_4720
.text:0000000000004715
.text:0000000000004715 loc_4715:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004715                 add     rsp, 8
.text:0000000000004719                 retn
.text:0000000000004719 ; ---------------------------------------------------------------------------
.text:000000000000471A                 align 20h
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004720                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004727                 mov     ecx, 6
.text:000000000000472C                 mov     rsi, rdx
.text:000000000000472F                 repe cmpsb
.text:0000000000004731                 setnbe  al
.text:0000000000004734                 sbb     al, 0
.text:0000000000004736                 test    al, al
.text:0000000000004738                 setnz   al
.text:000000000000473B                 add     rsp, 8
.text:000000000000473F                 retn
.text:000000000000473F ; } // starts at 46E0
.text:000000000000473F hard_locale     endp
.text:000000000000473F
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740
.text:0000000000004740                 public locale_charset
.text:0000000000004740 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 sub     rsp, 8
.text:0000000000004744                 mov     edi, 0Eh        ; item
.text:0000000000004749                 call    _nl_langinfo
.text:000000000000474E                 test    rax, rax
.text:0000000000004751                 jz      short loc_4770
.text:0000000000004753                 cmp     byte ptr [rax], 0
.text:0000000000004756                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000475D                 cmovz   rax, rdx
.text:0000000000004761                 add     rsp, 8
.text:0000000000004765                 retn
.text:0000000000004765 ; ---------------------------------------------------------------------------
.text:0000000000004766                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004770                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004777                 add     rsp, 8
.text:000000000000477B                 retn
.text:000000000000477B ; } // starts at 4740
.text:000000000000477B locale_charset  endp
.text:000000000000477B
.text:000000000000477B ; ---------------------------------------------------------------------------
.text:000000000000477C                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780 ; Attributes: info_from_lumina
.text:0000000000004780
.text:0000000000004780 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004780                 public rpl_fclose
.text:0000000000004780 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 push    r12
.text:0000000000004782                 push    rbp
.text:0000000000004783                 push    rbx
.text:0000000000004784                 mov     rbx, rdi
.text:0000000000004787                 call    _fileno
.text:000000000000478C                 test    eax, eax
.text:000000000000478E                 mov     rdi, rbx        ; fp
.text:0000000000004791                 js      short loc_47E7
.text:0000000000004793                 call    ___freading
.text:0000000000004798                 test    eax, eax
.text:000000000000479A                 jnz     short loc_47C8
.text:000000000000479C
.text:000000000000479C loc_479C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000479C                 mov     rdi, rbx        ; stream
.text:000000000000479F                 call    rpl_fflush
.text:00000000000047A4                 test    eax, eax
.text:00000000000047A6                 jz      short loc_47E4
.text:00000000000047A8                 call    ___errno_location
.text:00000000000047AD                 mov     r12d, [rax]
.text:00000000000047B0                 mov     rdi, rbx        ; stream
.text:00000000000047B3                 mov     rbp, rax
.text:00000000000047B6                 call    _fclose
.text:00000000000047BB                 test    r12d, r12d
.text:00000000000047BE                 jnz     short loc_47F0
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000047C0                 pop     rbx
.text:00000000000047C1                 pop     rbp
.text:00000000000047C2                 pop     r12
.text:00000000000047C4                 retn
.text:00000000000047C4 ; ---------------------------------------------------------------------------
.text:00000000000047C5                 align 8
.text:00000000000047C8
.text:00000000000047C8 loc_47C8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000047C8                 mov     rdi, rbx        ; stream
.text:00000000000047CB                 call    _fileno
.text:00000000000047D0                 xor     esi, esi        ; offset
.text:00000000000047D2                 mov     edx, 1          ; whence
.text:00000000000047D7                 mov     edi, eax        ; fd
.text:00000000000047D9                 call    _lseek
.text:00000000000047DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000047E2                 jnz     short loc_479C
.text:00000000000047E4
.text:00000000000047E4 loc_47E4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000047E4                 mov     rdi, rbx        ; stream
.text:00000000000047E7
.text:00000000000047E7 loc_47E7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000047E7                 pop     rbx
.text:00000000000047E8                 pop     rbp
.text:00000000000047E9                 pop     r12
.text:00000000000047EB                 jmp     _fclose
.text:00000000000047F0 ; ---------------------------------------------------------------------------
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000047F0                 mov     [rbp+0], r12d
.text:00000000000047F4                 mov     eax, 0FFFFFFFFh
.text:00000000000047F9                 jmp     short loc_47C0
.text:00000000000047F9 ; } // starts at 4780
.text:00000000000047F9 rpl_fclose      endp
.text:00000000000047F9
.text:00000000000047F9 ; ---------------------------------------------------------------------------
.text:00000000000047FB                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800 ; Attributes: info_from_lumina
.text:0000000000004800
.text:0000000000004800 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004800                 public rpl_fflush
.text:0000000000004800 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 test    rdi, rdi
.text:0000000000004803                 push    rbx
.text:0000000000004804                 mov     rbx, rdi
.text:0000000000004807                 jz      short loc_481A
.text:0000000000004809                 call    ___freading
.text:000000000000480E                 test    eax, eax
.text:0000000000004810                 jz      short loc_481A
.text:0000000000004812                 test    dword ptr [rbx], 100h
.text:0000000000004818                 jnz     short loc_4828
.text:000000000000481A
.text:000000000000481A loc_481A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000481A                                         ; rpl_fflush+10↑j
.text:000000000000481A                 mov     rdi, rbx        ; stream
.text:000000000000481D                 pop     rbx
.text:000000000000481E                 jmp     _fflush
.text:000000000000481E ; ---------------------------------------------------------------------------
.text:0000000000004823                 align 8
.text:0000000000004828
.text:0000000000004828 loc_4828:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004828                 mov     rdi, rbx
.text:000000000000482B                 mov     edx, 1
.text:0000000000004830                 xor     esi, esi
.text:0000000000004832                 call    rpl_fseeko
.text:0000000000004837                 mov     rdi, rbx        ; stream
.text:000000000000483A                 pop     rbx
.text:000000000000483B                 jmp     _fflush
.text:000000000000483B ; } // starts at 4800
.text:000000000000483B rpl_fflush      endp
.text:000000000000483B
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840 ; Attributes: info_from_lumina
.text:0000000000004840
.text:0000000000004840 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004840                 public rpl_fseeko
.text:0000000000004840 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 mov     rax, [rdi+8]
.text:0000000000004844                 cmp     [rdi+10h], rax
.text:0000000000004848                 jz      short loc_4850
.text:000000000000484A
.text:000000000000484A loc_484A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000484A                                         ; rpl_fseeko+1F↓j
.text:000000000000484A                 jmp     _fseeko
.text:000000000000484A ; ---------------------------------------------------------------------------
.text:000000000000484F                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004850                 mov     rax, [rdi+20h]
.text:0000000000004854                 cmp     [rdi+28h], rax
.text:0000000000004858                 jnz     short loc_484A
.text:000000000000485A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000485F                 jnz     short loc_484A
.text:0000000000004861                 push    r12
.text:0000000000004863                 push    rbp
.text:0000000000004864                 mov     r12d, edx
.text:0000000000004867                 push    rbx
.text:0000000000004868                 mov     rbp, rsi
.text:000000000000486B                 mov     rbx, rdi
.text:000000000000486E                 call    _fileno
.text:0000000000004873                 mov     edx, r12d       ; whence
.text:0000000000004876                 mov     rsi, rbp        ; offset
.text:0000000000004879                 mov     edi, eax        ; fd
.text:000000000000487B                 call    _lseek
.text:0000000000004880                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004884                 jz      short loc_4892
.text:0000000000004886                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004889                 mov     [rbx+90h], rax
.text:0000000000004890                 xor     eax, eax
.text:0000000000004892
.text:0000000000004892 loc_4892:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004892                 pop     rbx
.text:0000000000004893                 pop     rbp
.text:0000000000004894                 pop     r12
.text:0000000000004896                 retn
.text:0000000000004896 ; } // starts at 4840
.text:0000000000004896 rpl_fseeko      endp
.text:0000000000004896
.text:0000000000004896 ; ---------------------------------------------------------------------------
.text:0000000000004897                 align 20h
.text:00000000000048A0
.text:00000000000048A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048A0
.text:00000000000048A0 ; Attributes: info_from_lumina
.text:00000000000048A0
.text:00000000000048A0 ; void _libc_csu_init(void)
.text:00000000000048A0                 public __libc_csu_init
.text:00000000000048A0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000048A0 ; __unwind {
.text:00000000000048A0                 push    r15
.text:00000000000048A2                 push    r14
.text:00000000000048A4                 mov     r15, rdx
.text:00000000000048A7                 push    r13
.text:00000000000048A9                 push    r12
.text:00000000000048AB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000048B2                 push    rbp
.text:00000000000048B3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000048BA                 push    rbx
.text:00000000000048BB                 mov     r13d, edi
.text:00000000000048BE                 mov     r14, rsi
.text:00000000000048C1                 sub     rbp, r12
.text:00000000000048C4                 sub     rsp, 8
.text:00000000000048C8                 sar     rbp, 3
.text:00000000000048CC                 call    _init_proc
.text:00000000000048D1                 test    rbp, rbp
.text:00000000000048D4                 jz      short loc_48F6
.text:00000000000048D6                 xor     ebx, ebx
.text:00000000000048D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000048E0
.text:00000000000048E0 loc_48E0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000048E0                 mov     rdx, r15
.text:00000000000048E3                 mov     rsi, r14
.text:00000000000048E6                 mov     edi, r13d
.text:00000000000048E9                 call    ds:(__frame_dummy_init_array_entry - 206C10h)[r12+rbx*8]
.text:00000000000048ED                 add     rbx, 1
.text:00000000000048F1                 cmp     rbp, rbx
.text:00000000000048F4                 jnz     short loc_48E0
.text:00000000000048F6
.text:00000000000048F6 loc_48F6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000048F6                 add     rsp, 8
.text:00000000000048FA                 pop     rbx
.text:00000000000048FB                 pop     rbp
.text:00000000000048FC                 pop     r12
.text:00000000000048FE                 pop     r13
.text:0000000000004900                 pop     r14
.text:0000000000004902                 pop     r15
.text:0000000000004904                 retn
.text:0000000000004904 ; } // starts at 48A0
.text:0000000000004904 __libc_csu_init endp
.text:0000000000004904
.text:0000000000004904 ; ---------------------------------------------------------------------------
.text:0000000000004905                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910
.text:0000000000004910 ; void _libc_csu_fini(void)
.text:0000000000004910                 public __libc_csu_fini
.text:0000000000004910 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 rep retn
.text:0000000000004910 ; } // starts at 4910
.text:0000000000004910 __libc_csu_fini endp
.text:0000000000004910
.text:0000000000004910 ; ---------------------------------------------------------------------------
.text:0000000000004912                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920
.text:0000000000004920 atexit          proc near               ; CODE XREF: main+8E↑p
.text:0000000000004920                                         ; main+15D↑p
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004927                 xor     esi, esi        ; obj
.text:0000000000004929                 jmp     ___cxa_atexit
.text:0000000000004929 ; } // starts at 4920
.text:0000000000004929 atexit          endp
.text:0000000000004929
.text:0000000000004929 _text           ends
.text:0000000000004929
LOAD:000000000000492E ; ===========================================================================
LOAD:000000000000492E
LOAD:000000000000492E ; Segment type: Pure code
LOAD:000000000000492E ; Segment permissions: Read/Execute
LOAD:000000000000492E LOAD            segment byte public 'CODE' use64
LOAD:000000000000492E                 assume cs:LOAD
LOAD:000000000000492E                 ;org 492Eh
LOAD:000000000000492E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000492E                 align 10h
LOAD:000000000000492E LOAD            ends
LOAD:000000000000492E
.fini:0000000000004930 ; ===========================================================================
.fini:0000000000004930
.fini:0000000000004930 ; Segment type: Pure code
.fini:0000000000004930 ; Segment permissions: Read/Execute
.fini:0000000000004930 _fini           segment dword public 'CODE' use64
.fini:0000000000004930                 assume cs:_fini
.fini:0000000000004930                 ;org 4930h
.fini:0000000000004930                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004930
.fini:0000000000004930 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004930
.fini:0000000000004930
.fini:0000000000004930                 public _term_proc
.fini:0000000000004930 _term_proc      proc near
.fini:0000000000004930                 sub     rsp, 8          ; _fini
.fini:0000000000004934                 add     rsp, 8
.fini:0000000000004938                 retn
.fini:0000000000004938 _term_proc      endp
.fini:0000000000004938
.fini:0000000000004938 _fini           ends
.fini:0000000000004938
LOAD:0000000000004939 ; ===========================================================================
LOAD:0000000000004939
LOAD:0000000000004939 ; Segment type: Pure code
LOAD:0000000000004939 ; Segment permissions: Read/Execute
LOAD:0000000000004939 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004939                 assume cs:LOAD
LOAD:0000000000004939                 ;org 4939h
LOAD:0000000000004939                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004939                 align 20h
LOAD:0000000000004939 LOAD            ends
LOAD:0000000000004939
.rodata:0000000000004940 ; ===========================================================================
.rodata:0000000000004940
.rodata:0000000000004940 ; Segment type: Pure data
.rodata:0000000000004940 ; Segment permissions: Read
.rodata:0000000000004940 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004940                 assume cs:_rodata
.rodata:0000000000004940                 ;org 4940h
.rodata:0000000000004940                 public _IO_stdin_used
.rodata:0000000000004940 _IO_stdin_used  db    1
.rodata:0000000000004941                 db    0
.rodata:0000000000004942                 db    2
.rodata:0000000000004943                 db    0
.rodata:0000000000004944 jpt_1AB8        dd offset loc_1AC0 - 4944h
.rodata:0000000000004944                                         ; DATA XREF: hextobin+7↑o
.rodata:0000000000004944                                         ; hextobin+11↑r
.rodata:0000000000004944                 dd offset loc_1AD0 - 4944h ; jump table for switch statement
.rodata:0000000000004944                 dd offset loc_1AE0 - 4944h
.rodata:0000000000004944                 dd offset loc_1AF0 - 4944h
.rodata:0000000000004944                 dd offset loc_1B00 - 4944h
.rodata:0000000000004944                 dd offset loc_1B10 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset def_1AB8 - 4944h
.rodata:0000000000004944                 dd offset loc_1AC0 - 4944h
.rodata:0000000000004944                 dd offset loc_1AD0 - 4944h
.rodata:0000000000004944                 dd offset loc_1AE0 - 4944h
.rodata:0000000000004944                 dd offset loc_1AF0 - 4944h
.rodata:0000000000004944                 dd offset loc_1B00 - 4944h
.rodata:0000000000004944                 dd offset loc_1B10 - 4944h
.rodata:00000000000049DC jpt_157C        dd offset loc_176A - 49DCh, offset loc_1737 - 49DCh, offset loc_1737 - 49DCh
.rodata:00000000000049DC                                         ; DATA XREF: main:loc_1500↑o
.rodata:00000000000049DC                                         ; main+115↑r
.rodata:00000000000049DC                 dd offset loc_1737 - 49DCh, offset loc_1737 - 49DCh, offset loc_1737 - 49DCh ; jump table for switch statement
.rodata:00000000000049DC                 dd offset loc_1737 - 49DCh, offset loc_1737 - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset loc_16C8 - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset loc_170A - 49DCh, offset loc_1728 - 49DCh
.rodata:00000000000049DC                 dd offset loc_16F9 - 49DCh, offset def_157C - 49DCh, offset loc_1719 - 49DCh
.rodata:00000000000049DC                 dd offset loc_180E - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset loc_17FF - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset def_157C - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset loc_17F0 - 49DCh, offset def_157C - 49DCh, offset loc_17E1 - 49DCh
.rodata:00000000000049DC                 dd offset def_157C - 49DCh, offset loc_17D2 - 49DCh, offset def_157C - 49DCh
.rodata:00000000000049DC                 dd offset loc_1782 - 49DCh
.rodata:0000000000004B00 ; const char _PRETTY_FUNCTION___6816[]
.rodata:0000000000004B00 __PRETTY_FUNCTION___6816 db 'usage',0   ; DATA XREF: usage+1C↑o
.rodata:0000000000004B06 aEcho           db 'echo',0             ; DATA XREF: main+49B↑o
.rodata:0000000000004B06                                         ; usage+168↑o ...
.rodata:0000000000004B0B ; const char file[]
.rodata:0000000000004B0B file            db '../coreutils-8.31/src/echo.c',0
.rodata:0000000000004B0B                                         ; DATA XREF: usage+23↑o
.rodata:0000000000004B28 ; const char assertion[]
.rodata:0000000000004B28 assertion       db 'status == EXIT_SUCCESS',0
.rodata:0000000000004B28                                         ; DATA XREF: usage+2A↑o
.rodata:0000000000004B3F asc_4B3F        db '[',0                ; DATA XREF: usage+19D↑o
.rodata:0000000000004B41 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1C4↑o
.rodata:0000000000004B51 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004B51                                         ; DATA XREF: usage+1F4↑o
.rodata:0000000000004B51                                         ; usage+2F3↑o ...
.rodata:0000000000004B67 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+205↑o
.rodata:0000000000004B71 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+211↑o
.rodata:0000000000004B80 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1A4↑o
.rodata:0000000000004B8A aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1D0↑o
.rodata:0000000000004B94 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1E8↑o
.rodata:0000000000004B9E ; const char aSOnlineHelpS[]
.rodata:0000000000004B9E aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+25A↑o
.rodata:0000000000004B9E                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004BB5 unk_4BB5        db  47h ; G             ; DATA XREF: main+486↑o
.rodata:0000000000004BB5                                         ; usage+276↑o ...
.rodata:0000000000004BB6                 db  4Eh ; N
.rodata:0000000000004BB7                 db  55h ; U
.rodata:0000000000004BB8                 db  20h
.rodata:0000000000004BB9 ; const char domainname[]
.rodata:0000000000004BB9 domainname      db 'coreutils',0        ; DATA XREF: main+6F↑o
.rodata:0000000000004BB9                                         ; main+7B↑o ...
.rodata:0000000000004BC3 ; const char aEn[]
.rodata:0000000000004BC3 aEn             db 'en_',0              ; DATA XREF: usage+29D↑o
.rodata:0000000000004BC3                                         ; usage+360↑o
.rodata:0000000000004BC7 ; const char aFullDocumentat[]
.rodata:0000000000004BC7 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004BC7                                         ; DATA XREF: usage:loc_1DE9↑o
.rodata:0000000000004BC7                                         ; usage:loc_1EA8↑o
.rodata:0000000000004BE2 ; const char name[]
.rodata:0000000000004BE2 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+F↑o
.rodata:0000000000004BF2 ; const char s2[]
.rodata:0000000000004BF2 s2              db '-n',0               ; DATA XREF: main+34↑o
.rodata:0000000000004BF5 ; const char dirname[]
.rodata:0000000000004BF5 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004BF5                                         ; DATA XREF: main+68↑o
.rodata:0000000000004BF5                                         ; main+137↑o
.rodata:0000000000004C0D ; const char aHelp[]
.rodata:0000000000004C0D aHelp           db '--help',0           ; DATA XREF: main+16B↑o
.rodata:0000000000004C14 ; const char aVersion[]
.rodata:0000000000004C14 aVersion        db '--version',0        ; DATA XREF: main+182↑o
.rodata:0000000000004C1E aChetRamey      db 'Chet Ramey',0       ; DATA XREF: main+48D↑o
.rodata:0000000000004C29 aBrianFox       db 'Brian Fox',0        ; DATA XREF: main+494↑o
.rodata:0000000000004C33                 align 8
.rodata:0000000000004C38 ; const char msgid[]
.rodata:0000000000004C38 msgid           db 'Usage: %s [SHORT-OPTION]... [STRING]...',0Ah
.rodata:0000000000004C38                                         ; DATA XREF: usage+42↑o
.rodata:0000000000004C38                 db '  or:  %s LONG-OPTION',0Ah,0
.rodata:0000000000004C77                 align 8
.rodata:0000000000004C78 ; const char aEchoTheStringS[]
.rodata:0000000000004C78 aEchoTheStringS db 'Echo the STRING(s) to standard output.',0Ah
.rodata:0000000000004C78                                         ; DATA XREF: usage+71↑o
.rodata:0000000000004C78                 db 0Ah
.rodata:0000000000004C78                 db '  -n             do not output the trailing newline',0Ah,0
.rodata:0000000000004CD5                 align 8
.rodata:0000000000004CD8 ; const char aEEnableInterpr[]
.rodata:0000000000004CD8 aEEnableInterpr db '  -e             enable interpretation of backslash escapes',0Ah
.rodata:0000000000004CD8                                         ; DATA XREF: usage+96↑o
.rodata:0000000000004CD8                 db '  -E             disable interpretation of backslash escapes (def'
.rodata:0000000000004CD8                 db 'ault)',0Ah,0
.rodata:0000000000004D5C                 align 20h
.rodata:0000000000004D60 ; const char aHelpDisplayThi[]
.rodata:0000000000004D60 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004D60                                         ; DATA XREF: usage+BB↑o
.rodata:0000000000004D8D                 align 10h
.rodata:0000000000004D90 ; const char aVersionOutputV[]
.rodata:0000000000004D90 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004D90                                         ; DATA XREF: usage+E0↑o
.rodata:0000000000004DC6                 align 8
.rodata:0000000000004DC8 ; const char aIfEIsInEffectT[]
.rodata:0000000000004DC8 aIfEIsInEffectT db 0Ah                  ; DATA XREF: usage+105↑o
.rodata:0000000000004DC8                 db 'If -e is in effect, the following sequences are recognized:',0Ah
.rodata:0000000000004DC8                 db 0Ah,0
.rodata:0000000000004E07                 align 8
.rodata:0000000000004E08 ; const char aBackslashAAler[]
.rodata:0000000000004E08 aBackslashAAler db '  \\      backslash',0Ah
.rodata:0000000000004E08                                         ; DATA XREF: usage+12A↑o
.rodata:0000000000004E08                 db '  \a      alert (BEL)',0Ah
.rodata:0000000000004E08                 db '  \b      backspace',0Ah
.rodata:0000000000004E08                 db '  \c      produce no further output',0Ah
.rodata:0000000000004E08                 db '  \e      escape',0Ah
.rodata:0000000000004E08                 db '  \f      form feed',0Ah
.rodata:0000000000004E08                 db '  \n      new line',0Ah
.rodata:0000000000004E08                 db '  \r      carriage return',0Ah
.rodata:0000000000004E08                 db '  \t      horizontal tab',0Ah
.rodata:0000000000004E08                 db '  \v      vertical tab',0Ah,0
.rodata:0000000000004EED                 align 10h
.rodata:0000000000004EF0 ; const char a0nnnByteWithOc[]
.rodata:0000000000004EF0 a0nnnByteWithOc db '  \0NNN   byte with octal value NNN (1 to 3 digits)',0Ah
.rodata:0000000000004EF0                                         ; DATA XREF: usage+14F↑o
.rodata:0000000000004EF0                 db '  \xHH    byte with hexadecimal value HH (1 to 2 digits)',0Ah,0
.rodata:0000000000004F5E                 align 20h
.rodata:0000000000004F60 ; const char aNoteYourShellM[]
.rodata:0000000000004F60 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+174↑o
.rodata:0000000000004F60                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000004F60                 db 'persedes',0Ah
.rodata:0000000000004F60                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000004F60                 db 'ocumentation',0Ah
.rodata:0000000000004F60                 db 'for details about the options it supports.',0Ah,0
.rodata:000000000000501F                 align 20h
.rodata:0000000000005020 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005020                                         ; DATA XREF: usage+26F↑o
.rodata:0000000000005020                                         ; usage+2D3↑o ...
.rodata:0000000000005048 ; const char aReportAnyTrans[]
.rodata:0000000000005048 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005048                                         ; DATA XREF: usage+3C9↑o
.rodata:0000000000005048                 db 'am/>',0Ah,0
.rodata:000000000000508F                 align 10h
.rodata:0000000000005090 ; const char aOrAvailableLoc[]
.rodata:0000000000005090 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005090                                         ; DATA XREF: usage:loc_1E2E↑o
.rodata:00000000000050C3 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000050C8 ; const char aWriteError[]
.rodata:00000000000050C8 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1F83↑o
.rodata:00000000000050D4 ; const char format[]
.rodata:00000000000050D4 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000050D4                                         ; close_stdout+8F↑o ...
.rodata:00000000000050DB                 align 20h
.rodata:00000000000050E0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000050E0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005118 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005120 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005124 unk_5124        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005125                 db  80h
.rodata:0000000000005126                 db  98h
.rodata:0000000000005127                 db    0
.rodata:0000000000005128 unk_5128        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005129                 db  80h
.rodata:000000000000512A                 db  99h
.rodata:000000000000512B                 db    0
.rodata:000000000000512C unk_512C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000512D                 db    7
.rodata:000000000000512E                 db  65h ; e
.rodata:000000000000512F                 db    0
.rodata:0000000000005130 unk_5130        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005131                 db 0AFh
.rodata:0000000000005132                 db    0
.rodata:0000000000005133 unk_5133        db  22h ; "             ; DATA XREF: gettext_quote:loc_20B0↑o
.rodata:0000000000005133                                         ; quotearg_buffer_restyled:loc_2E6B↑o ...
.rodata:0000000000005134                 db    0
.rodata:0000000000005135 ; const char asc_5135[2]
.rodata:0000000000005135 asc_5135        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005135                                         ; quotearg_buffer_restyled:loc_2233↑o ...
.rodata:0000000000005137 ; const char asc_5137[2]
.rodata:0000000000005137 asc_5137        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005137                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005139 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005141 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000005147 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000005154 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000005154                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000005161 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005161                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000005175 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:000000000000517D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000005185                 align 20h
.rodata:00000000000051A0 jpt_2211        dd offset loc_2FBA - 51A0h
.rodata:00000000000051A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000051A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000051A0                 dd offset loc_2213 - 51A0h ; jump table for switch statement
.rodata:00000000000051A0                 dd offset loc_31E8 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2FF4 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2DE4 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2E40 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2E95 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2EDA - 51A0h
.rodata:00000000000051A0                 dd offset loc_2F14 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2F14 - 51A0h
.rodata:00000000000051A0                 dd offset loc_2F14 - 51A0h
.rodata:00000000000051CC jpt_236E        dd offset loc_2590 - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000051CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh ; jump table for switch statement
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset loc_25D0 - 51CCh, offset loc_24D8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2498 - 51CCh, offset loc_2660 - 51CCh, offset loc_2650 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2640 - 51CCh, offset loc_2630 - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset def_236E - 51CCh
.rodata:00000000000051CC                 dd offset def_236E - 51CCh, offset def_236E - 51CCh, offset loc_2620 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2610 - 51CCh, offset loc_2610 - 51CCh, offset loc_25E0 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2610 - 51CCh, offset loc_25B8 - 51CCh, offset loc_2610 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2473 - 51CCh, offset loc_2610 - 51CCh, offset loc_2610 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2610 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_2610 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2610 - 51CCh, offset loc_2610 - 51CCh, offset loc_2610 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2443 - 51CCh, offset def_236E - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_2610 - 51CCh, offset loc_24E8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_2610 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2610 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh, offset loc_25B8 - 51CCh
.rodata:00000000000051CC                 dd offset loc_2373 - 51CCh, offset loc_2610 - 51CCh, offset loc_2373 - 51CCh
.rodata:00000000000051CC                 dd offset loc_25E0 - 51CCh
.rodata:00000000000053C8 jpt_26FA        dd offset loc_2760 - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000053C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h ; jump table for switch statement
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset loc_2750 - 53C8h, offset loc_28A0 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2888 - 53C8h, offset loc_2738 - 53C8h, offset loc_2878 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2720 - 53C8h, offset loc_2860 - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset def_26FA - 53C8h
.rodata:00000000000053C8                 dd offset def_26FA - 53C8h, offset def_26FA - 53C8h, offset loc_2848 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2830 - 53C8h, offset loc_2830 - 53C8h, offset loc_2818 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2830 - 53C8h, offset loc_2800 - 53C8h, offset loc_2830 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2470 - 53C8h, offset loc_2830 - 53C8h, offset loc_2830 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2830 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2830 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2830 - 53C8h, offset loc_2830 - 53C8h, offset loc_2830 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2440 - 53C8h, offset def_26FA - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2830 - 53C8h, offset loc_2700 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2830 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2830 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2800 - 53C8h, offset loc_2800 - 53C8h, offset loc_2800 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2370 - 53C8h, offset loc_2830 - 53C8h, offset loc_2370 - 53C8h
.rodata:00000000000053C8                 dd offset loc_2818 - 53C8h
.rodata:00000000000055C4                 align 20h
.rodata:00000000000055E0                 public quoting_style_vals
.rodata:00000000000055E0 quoting_style_vals db    0
.rodata:00000000000055E1                 db    0
.rodata:00000000000055E2                 db    0
.rodata:00000000000055E3                 db    0
.rodata:00000000000055E4                 db    1
.rodata:00000000000055E5                 db    0
.rodata:00000000000055E6                 db    0
.rodata:00000000000055E7                 db    0
.rodata:00000000000055E8                 db    2
.rodata:00000000000055E9                 db    0
.rodata:00000000000055EA                 db    0
.rodata:00000000000055EB                 db    0
.rodata:00000000000055EC                 db    3
.rodata:00000000000055ED                 db    0
.rodata:00000000000055EE                 db    0
.rodata:00000000000055EF                 db    0
.rodata:00000000000055F0                 db    4
.rodata:00000000000055F1                 db    0
.rodata:00000000000055F2                 db    0
.rodata:00000000000055F3                 db    0
.rodata:00000000000055F4                 db    5
.rodata:00000000000055F5                 db    0
.rodata:00000000000055F6                 db    0
.rodata:00000000000055F7                 db    0
.rodata:00000000000055F8                 db    6
.rodata:00000000000055F9                 db    0
.rodata:00000000000055FA                 db    0
.rodata:00000000000055FB                 db    0
.rodata:00000000000055FC                 db    7
.rodata:00000000000055FD                 db    0
.rodata:00000000000055FE                 db    0
.rodata:00000000000055FF                 db    0
.rodata:0000000000005600                 db    8
.rodata:0000000000005601                 db    0
.rodata:0000000000005602                 db    0
.rodata:0000000000005603                 db    0
.rodata:0000000000005604                 db    9
.rodata:0000000000005605                 db    0
.rodata:0000000000005606                 db    0
.rodata:0000000000005607                 db    0
.rodata:0000000000005608 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005614 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000561B ; const char aC_0[]
.rodata:000000000000561B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3D5C↑o
.rodata:000000000000561F ; const char aWrittenByS[]
.rodata:000000000000561F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000561F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000562F ; const char aWrittenBySAndS[]
.rodata:000000000000562F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000562F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005646 ; const char aWrittenBySSAnd[]
.rodata:0000000000005646 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005646                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005662 ; const char aReportBugsToS[]
.rodata:0000000000005662 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005662                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005677 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005677                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000568D ; const char aSHomePageS[]
.rodata:000000000000568D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000568D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000056A1                 align 8
.rodata:00000000000056A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000056A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000056A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000056A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000056A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000056A8                 db '.',0Ah
.rodata:00000000000056A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000056A8                 db 0Ah,0
.rodata:0000000000005774                 align 8
.rodata:0000000000005778 ; const char aWrittenBySSSAn[]
.rodata:0000000000005778 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005778                                         ; DATA XREF: version_etc_arn:loc_3FB0↑o
.rodata:0000000000005778                 db 'and %s.',0Ah,0
.rodata:0000000000005798 ; const char aWrittenBySSSSA[]
.rodata:0000000000005798 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005798                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005798                 db '%s, and %s.',0Ah,0
.rodata:00000000000057BC                 align 20h
.rodata:00000000000057C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000057C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000057C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000057C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000057E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000057E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000057E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000057E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005814                 align 8
.rodata:0000000000005818 ; const char aWrittenBySSSSS[]
.rodata:0000000000005818 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005818                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005818                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005818                 db 'and %s.',0Ah,0
.rodata:0000000000005848 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005848 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005848                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005848                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005848                 db '%s, and %s.',0Ah,0
.rodata:000000000000587C                 align 20h
.rodata:0000000000005880 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005880                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005880                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005880                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000058BC                 align 20h
.rodata:00000000000058C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000058C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000058C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000058C0                 db 0
.rodata:0000000000005901                 align 8
.rodata:0000000000005908 jpt_3DC4        dd offset loc_3E46 - 5908h
.rodata:0000000000005908                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005908                                         ; version_etc_arn+9D↑r
.rodata:0000000000005908                 dd offset loc_3ED8 - 5908h ; jump table for switch statement
.rodata:0000000000005908                 dd offset loc_3F18 - 5908h
.rodata:0000000000005908                 dd offset loc_3F60 - 5908h
.rodata:0000000000005908                 dd offset loc_3FB0 - 5908h
.rodata:0000000000005908                 dd offset loc_4008 - 5908h
.rodata:0000000000005908                 dd offset loc_4038 - 5908h
.rodata:0000000000005908                 dd offset loc_40A0 - 5908h
.rodata:0000000000005908                 dd offset loc_3DD0 - 5908h
.rodata:0000000000005908                 dd offset loc_3E80 - 5908h
.rodata:0000000000005930                 align 20h
.rodata:0000000000005940                 public version_etc_copyright
.rodata:0000000000005940 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005940                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000596F ; const char aMemoryExhauste[]
.rodata:000000000000596F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005980 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005982 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4720↑o
.rodata:0000000000005988 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005988                                         ; locale_charset:loc_4770↑o
.rodata:0000000000005988 _rodata         ends
.rodata:0000000000005988
LOAD:000000000000598E ; ===========================================================================
LOAD:000000000000598E
LOAD:000000000000598E ; Segment type: Pure code
LOAD:000000000000598E ; Segment permissions: Read/Execute
LOAD:000000000000598E LOAD            segment byte public 'CODE' use64
LOAD:000000000000598E                 assume cs:LOAD
LOAD:000000000000598E                 ;org 598Eh
LOAD:000000000000598E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000598E                 align 10h
LOAD:000000000000598E LOAD            ends
LOAD:000000000000598E
.eh_frame_hdr:0000000000005990 ; ===========================================================================
.eh_frame_hdr:0000000000005990
.eh_frame_hdr:0000000000005990 ; Segment type: Pure data
.eh_frame_hdr:0000000000005990 ; Segment permissions: Read
.eh_frame_hdr:0000000000005990 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005990                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005990                 ;org 5990h
.eh_frame_hdr:0000000000005990 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005991                 db  1Bh
.eh_frame_hdr:0000000000005992                 db    3
.eh_frame_hdr:0000000000005993                 db  3Bh ; ;
.eh_frame_hdr:0000000000005994                 db  44h ; D
.eh_frame_hdr:0000000000005995                 db    2
.eh_frame_hdr:0000000000005996                 db    0
.eh_frame_hdr:0000000000005997                 db    0
.eh_frame_hdr:0000000000005998                 db  47h ; G
.eh_frame_hdr:0000000000005999                 db    0
.eh_frame_hdr:000000000000599A                 db    0
.eh_frame_hdr:000000000000599B                 db    0
.eh_frame_hdr:000000000000599C                 db  10h
.eh_frame_hdr:000000000000599D                 db 0B8h
.eh_frame_hdr:000000000000599E                 db 0FFh
.eh_frame_hdr:000000000000599F                 db 0FFh
.eh_frame_hdr:00000000000059A0                 db  90h
.eh_frame_hdr:00000000000059A1                 db    2
.eh_frame_hdr:00000000000059A2                 db    0
.eh_frame_hdr:00000000000059A3                 db    0
.eh_frame_hdr:00000000000059A4                 db 0C0h
.eh_frame_hdr:00000000000059A5                 db 0BAh
.eh_frame_hdr:00000000000059A6                 db 0FFh
.eh_frame_hdr:00000000000059A7                 db 0FFh
.eh_frame_hdr:00000000000059A8                 db 0B8h
.eh_frame_hdr:00000000000059A9                 db    2
.eh_frame_hdr:00000000000059AA                 db    0
.eh_frame_hdr:00000000000059AB                 db    0
.eh_frame_hdr:00000000000059AC                 db 0D0h
.eh_frame_hdr:00000000000059AD                 db 0BAh
.eh_frame_hdr:00000000000059AE                 db 0FFh
.eh_frame_hdr:00000000000059AF                 db 0FFh
.eh_frame_hdr:00000000000059B0                 db    8
.eh_frame_hdr:00000000000059B1                 db    3
.eh_frame_hdr:00000000000059B2                 db    0
.eh_frame_hdr:00000000000059B3                 db    0
.eh_frame_hdr:00000000000059B4                 db    0
.eh_frame_hdr:00000000000059B5                 db 0C0h
.eh_frame_hdr:00000000000059B6                 db 0FFh
.eh_frame_hdr:00000000000059B7                 db 0FFh
.eh_frame_hdr:00000000000059B8                 db  60h ; `
.eh_frame_hdr:00000000000059B9                 db    2
.eh_frame_hdr:00000000000059BA                 db    0
.eh_frame_hdr:00000000000059BB                 db    0
.eh_frame_hdr:00000000000059BC                 db  10h
.eh_frame_hdr:00000000000059BD                 db 0C1h
.eh_frame_hdr:00000000000059BE                 db 0FFh
.eh_frame_hdr:00000000000059BF                 db 0FFh
.eh_frame_hdr:00000000000059C0                 db 0D0h
.eh_frame_hdr:00000000000059C1                 db    2
.eh_frame_hdr:00000000000059C2                 db    0
.eh_frame_hdr:00000000000059C3                 db    0
.eh_frame_hdr:00000000000059C4                 db 0A0h
.eh_frame_hdr:00000000000059C5                 db 0C1h
.eh_frame_hdr:00000000000059C6                 db 0FFh
.eh_frame_hdr:00000000000059C7                 db 0FFh
.eh_frame_hdr:00000000000059C8                 db 0E4h
.eh_frame_hdr:00000000000059C9                 db    2
.eh_frame_hdr:00000000000059CA                 db    0
.eh_frame_hdr:00000000000059CB                 db    0
.eh_frame_hdr:00000000000059CC                 db  90h
.eh_frame_hdr:00000000000059CD                 db 0C5h
.eh_frame_hdr:00000000000059CE                 db 0FFh
.eh_frame_hdr:00000000000059CF                 db 0FFh
.eh_frame_hdr:00000000000059D0                 db  68h ; h
.eh_frame_hdr:00000000000059D1                 db    3
.eh_frame_hdr:00000000000059D2                 db    0
.eh_frame_hdr:00000000000059D3                 db    0
.eh_frame_hdr:00000000000059D4                 db 0A0h
.eh_frame_hdr:00000000000059D5                 db 0C5h
.eh_frame_hdr:00000000000059D6                 db 0FFh
.eh_frame_hdr:00000000000059D7                 db 0FFh
.eh_frame_hdr:00000000000059D8                 db  7Ch ; |
.eh_frame_hdr:00000000000059D9                 db    3
.eh_frame_hdr:00000000000059DA                 db    0
.eh_frame_hdr:00000000000059DB                 db    0
.eh_frame_hdr:00000000000059DC                 db 0B0h
.eh_frame_hdr:00000000000059DD                 db 0C5h
.eh_frame_hdr:00000000000059DE                 db 0FFh
.eh_frame_hdr:00000000000059DF                 db 0FFh
.eh_frame_hdr:00000000000059E0                 db  90h
.eh_frame_hdr:00000000000059E1                 db    3
.eh_frame_hdr:00000000000059E2                 db    0
.eh_frame_hdr:00000000000059E3                 db    0
.eh_frame_hdr:00000000000059E4                 db  60h ; `
.eh_frame_hdr:00000000000059E5                 db 0C6h
.eh_frame_hdr:00000000000059E6                 db 0FFh
.eh_frame_hdr:00000000000059E7                 db 0FFh
.eh_frame_hdr:00000000000059E8                 db 0C0h
.eh_frame_hdr:00000000000059E9                 db    3
.eh_frame_hdr:00000000000059EA                 db    0
.eh_frame_hdr:00000000000059EB                 db    0
.eh_frame_hdr:00000000000059EC                 db    0
.eh_frame_hdr:00000000000059ED                 db 0C7h
.eh_frame_hdr:00000000000059EE                 db 0FFh
.eh_frame_hdr:00000000000059EF                 db 0FFh
.eh_frame_hdr:00000000000059F0                 db 0E0h
.eh_frame_hdr:00000000000059F1                 db    3
.eh_frame_hdr:00000000000059F2                 db    0
.eh_frame_hdr:00000000000059F3                 db    0
.eh_frame_hdr:00000000000059F4                 db 0F0h
.eh_frame_hdr:00000000000059F5                 db 0C7h
.eh_frame_hdr:00000000000059F6                 db 0FFh
.eh_frame_hdr:00000000000059F7                 db 0FFh
.eh_frame_hdr:00000000000059F8                 db  24h ; $
.eh_frame_hdr:00000000000059F9                 db    4
.eh_frame_hdr:00000000000059FA                 db    0
.eh_frame_hdr:00000000000059FB                 db    0
.eh_frame_hdr:00000000000059FC                 db  30h ; 0
.eh_frame_hdr:00000000000059FD                 db 0DAh
.eh_frame_hdr:00000000000059FE                 db 0FFh
.eh_frame_hdr:00000000000059FF                 db 0FFh
.eh_frame_hdr:0000000000005A00                 db  9Ch
.eh_frame_hdr:0000000000005A01                 db    4
.eh_frame_hdr:0000000000005A02                 db    0
.eh_frame_hdr:0000000000005A03                 db    0
.eh_frame_hdr:0000000000005A04                 db 0E0h
.eh_frame_hdr:0000000000005A05                 db 0DBh
.eh_frame_hdr:0000000000005A06                 db 0FFh
.eh_frame_hdr:0000000000005A07                 db 0FFh
.eh_frame_hdr:0000000000005A08                 db    8
.eh_frame_hdr:0000000000005A09                 db    5
.eh_frame_hdr:0000000000005A0A                 db    0
.eh_frame_hdr:0000000000005A0B                 db    0
.eh_frame_hdr:0000000000005A0C                 db  20h
.eh_frame_hdr:0000000000005A0D                 db 0DCh
.eh_frame_hdr:0000000000005A0E                 db 0FFh
.eh_frame_hdr:0000000000005A0F                 db 0FFh
.eh_frame_hdr:0000000000005A10                 db  34h ; 4
.eh_frame_hdr:0000000000005A11                 db    5
.eh_frame_hdr:0000000000005A12                 db    0
.eh_frame_hdr:0000000000005A13                 db    0
.eh_frame_hdr:0000000000005A14                 db  40h ; @
.eh_frame_hdr:0000000000005A15                 db 0DCh
.eh_frame_hdr:0000000000005A16                 db 0FFh
.eh_frame_hdr:0000000000005A17                 db 0FFh
.eh_frame_hdr:0000000000005A18                 db  48h ; H
.eh_frame_hdr:0000000000005A19                 db    5
.eh_frame_hdr:0000000000005A1A                 db    0
.eh_frame_hdr:0000000000005A1B                 db    0
.eh_frame_hdr:0000000000005A1C                 db  60h ; `
.eh_frame_hdr:0000000000005A1D                 db 0DCh
.eh_frame_hdr:0000000000005A1E                 db 0FFh
.eh_frame_hdr:0000000000005A1F                 db 0FFh
.eh_frame_hdr:0000000000005A20                 db  5Ch ; \
.eh_frame_hdr:0000000000005A21                 db    5
.eh_frame_hdr:0000000000005A22                 db    0
.eh_frame_hdr:0000000000005A23                 db    0
.eh_frame_hdr:0000000000005A24                 db 0A0h
.eh_frame_hdr:0000000000005A25                 db 0DCh
.eh_frame_hdr:0000000000005A26                 db 0FFh
.eh_frame_hdr:0000000000005A27                 db 0FFh
.eh_frame_hdr:0000000000005A28                 db  70h ; p
.eh_frame_hdr:0000000000005A29                 db    5
.eh_frame_hdr:0000000000005A2A                 db    0
.eh_frame_hdr:0000000000005A2B                 db    0
.eh_frame_hdr:0000000000005A2C                 db 0C0h
.eh_frame_hdr:0000000000005A2D                 db 0DCh
.eh_frame_hdr:0000000000005A2E                 db 0FFh
.eh_frame_hdr:0000000000005A2F                 db 0FFh
.eh_frame_hdr:0000000000005A30                 db  84h
.eh_frame_hdr:0000000000005A31                 db    5
.eh_frame_hdr:0000000000005A32                 db    0
.eh_frame_hdr:0000000000005A33                 db    0
.eh_frame_hdr:0000000000005A34                 db 0F0h
.eh_frame_hdr:0000000000005A35                 db 0DCh
.eh_frame_hdr:0000000000005A36                 db 0FFh
.eh_frame_hdr:0000000000005A37                 db 0FFh
.eh_frame_hdr:0000000000005A38                 db  98h
.eh_frame_hdr:0000000000005A39                 db    5
.eh_frame_hdr:0000000000005A3A                 db    0
.eh_frame_hdr:0000000000005A3B                 db    0
.eh_frame_hdr:0000000000005A3C                 db  70h ; p
.eh_frame_hdr:0000000000005A3D                 db 0DDh
.eh_frame_hdr:0000000000005A3E                 db 0FFh
.eh_frame_hdr:0000000000005A3F                 db 0FFh
.eh_frame_hdr:0000000000005A40                 db 0ECh
.eh_frame_hdr:0000000000005A41                 db    5
.eh_frame_hdr:0000000000005A42                 db    0
.eh_frame_hdr:0000000000005A43                 db    0
.eh_frame_hdr:0000000000005A44                 db  60h ; `
.eh_frame_hdr:0000000000005A45                 db 0DEh
.eh_frame_hdr:0000000000005A46                 db 0FFh
.eh_frame_hdr:0000000000005A47                 db 0FFh
.eh_frame_hdr:0000000000005A48                 db  58h ; X
.eh_frame_hdr:0000000000005A49                 db    6
.eh_frame_hdr:0000000000005A4A                 db    0
.eh_frame_hdr:0000000000005A4B                 db    0
.eh_frame_hdr:0000000000005A4C                 db  70h ; p
.eh_frame_hdr:0000000000005A4D                 db 0DEh
.eh_frame_hdr:0000000000005A4E                 db 0FFh
.eh_frame_hdr:0000000000005A4F                 db 0FFh
.eh_frame_hdr:0000000000005A50                 db  6Ch ; l
.eh_frame_hdr:0000000000005A51                 db    6
.eh_frame_hdr:0000000000005A52                 db    0
.eh_frame_hdr:0000000000005A53                 db    0
.eh_frame_hdr:0000000000005A54                 db  10h
.eh_frame_hdr:0000000000005A55                 db 0DFh
.eh_frame_hdr:0000000000005A56                 db 0FFh
.eh_frame_hdr:0000000000005A57                 db 0FFh
.eh_frame_hdr:0000000000005A58                 db  98h
.eh_frame_hdr:0000000000005A59                 db    6
.eh_frame_hdr:0000000000005A5A                 db    0
.eh_frame_hdr:0000000000005A5B                 db    0
.eh_frame_hdr:0000000000005A5C                 db  30h ; 0
.eh_frame_hdr:0000000000005A5D                 db 0DFh
.eh_frame_hdr:0000000000005A5E                 db 0FFh
.eh_frame_hdr:0000000000005A5F                 db 0FFh
.eh_frame_hdr:0000000000005A60                 db 0ACh
.eh_frame_hdr:0000000000005A61                 db    6
.eh_frame_hdr:0000000000005A62                 db    0
.eh_frame_hdr:0000000000005A63                 db    0
.eh_frame_hdr:0000000000005A64                 db  40h ; @
.eh_frame_hdr:0000000000005A65                 db 0DFh
.eh_frame_hdr:0000000000005A66                 db 0FFh
.eh_frame_hdr:0000000000005A67                 db 0FFh
.eh_frame_hdr:0000000000005A68                 db 0C0h
.eh_frame_hdr:0000000000005A69                 db    6
.eh_frame_hdr:0000000000005A6A                 db    0
.eh_frame_hdr:0000000000005A6B                 db    0
.eh_frame_hdr:0000000000005A6C                 db  60h ; `
.eh_frame_hdr:0000000000005A6D                 db 0DFh
.eh_frame_hdr:0000000000005A6E                 db 0FFh
.eh_frame_hdr:0000000000005A6F                 db 0FFh
.eh_frame_hdr:0000000000005A70                 db 0D4h
.eh_frame_hdr:0000000000005A71                 db    6
.eh_frame_hdr:0000000000005A72                 db    0
.eh_frame_hdr:0000000000005A73                 db    0
.eh_frame_hdr:0000000000005A74                 db  80h
.eh_frame_hdr:0000000000005A75                 db 0DFh
.eh_frame_hdr:0000000000005A76                 db 0FFh
.eh_frame_hdr:0000000000005A77                 db 0FFh
.eh_frame_hdr:0000000000005A78                 db 0E8h
.eh_frame_hdr:0000000000005A79                 db    6
.eh_frame_hdr:0000000000005A7A                 db    0
.eh_frame_hdr:0000000000005A7B                 db    0
.eh_frame_hdr:0000000000005A7C                 db  10h
.eh_frame_hdr:0000000000005A7D                 db 0E0h
.eh_frame_hdr:0000000000005A7E                 db 0FFh
.eh_frame_hdr:0000000000005A7F                 db 0FFh
.eh_frame_hdr:0000000000005A80                 db    4
.eh_frame_hdr:0000000000005A81                 db    7
.eh_frame_hdr:0000000000005A82                 db    0
.eh_frame_hdr:0000000000005A83                 db    0
.eh_frame_hdr:0000000000005A84                 db 0A0h
.eh_frame_hdr:0000000000005A85                 db 0E0h
.eh_frame_hdr:0000000000005A86                 db 0FFh
.eh_frame_hdr:0000000000005A87                 db 0FFh
.eh_frame_hdr:0000000000005A88                 db  20h
.eh_frame_hdr:0000000000005A89                 db    7
.eh_frame_hdr:0000000000005A8A                 db    0
.eh_frame_hdr:0000000000005A8B                 db    0
.eh_frame_hdr:0000000000005A8C                 db 0B0h
.eh_frame_hdr:0000000000005A8D                 db 0E0h
.eh_frame_hdr:0000000000005A8E                 db 0FFh
.eh_frame_hdr:0000000000005A8F                 db 0FFh
.eh_frame_hdr:0000000000005A90                 db  34h ; 4
.eh_frame_hdr:0000000000005A91                 db    7
.eh_frame_hdr:0000000000005A92                 db    0
.eh_frame_hdr:0000000000005A93                 db    0
.eh_frame_hdr:0000000000005A94                 db 0C0h
.eh_frame_hdr:0000000000005A95                 db 0E0h
.eh_frame_hdr:0000000000005A96                 db 0FFh
.eh_frame_hdr:0000000000005A97                 db 0FFh
.eh_frame_hdr:0000000000005A98                 db  48h ; H
.eh_frame_hdr:0000000000005A99                 db    7
.eh_frame_hdr:0000000000005A9A                 db    0
.eh_frame_hdr:0000000000005A9B                 db    0
.eh_frame_hdr:0000000000005A9C                 db  60h ; `
.eh_frame_hdr:0000000000005A9D                 db 0E1h
.eh_frame_hdr:0000000000005A9E                 db 0FFh
.eh_frame_hdr:0000000000005A9F                 db 0FFh
.eh_frame_hdr:0000000000005AA0                 db  64h ; d
.eh_frame_hdr:0000000000005AA1                 db    7
.eh_frame_hdr:0000000000005AA2                 db    0
.eh_frame_hdr:0000000000005AA3                 db    0
.eh_frame_hdr:0000000000005AA4                 db  70h ; p
.eh_frame_hdr:0000000000005AA5                 db 0E1h
.eh_frame_hdr:0000000000005AA6                 db 0FFh
.eh_frame_hdr:0000000000005AA7                 db 0FFh
.eh_frame_hdr:0000000000005AA8                 db  78h ; x
.eh_frame_hdr:0000000000005AA9                 db    7
.eh_frame_hdr:0000000000005AAA                 db    0
.eh_frame_hdr:0000000000005AAB                 db    0
.eh_frame_hdr:0000000000005AAC                 db  90h
.eh_frame_hdr:0000000000005AAD                 db 0E1h
.eh_frame_hdr:0000000000005AAE                 db 0FFh
.eh_frame_hdr:0000000000005AAF                 db 0FFh
.eh_frame_hdr:0000000000005AB0                 db  8Ch
.eh_frame_hdr:0000000000005AB1                 db    7
.eh_frame_hdr:0000000000005AB2                 db    0
.eh_frame_hdr:0000000000005AB3                 db    0
.eh_frame_hdr:0000000000005AB4                 db 0A0h
.eh_frame_hdr:0000000000005AB5                 db 0E1h
.eh_frame_hdr:0000000000005AB6                 db 0FFh
.eh_frame_hdr:0000000000005AB7                 db 0FFh
.eh_frame_hdr:0000000000005AB8                 db 0A0h
.eh_frame_hdr:0000000000005AB9                 db    7
.eh_frame_hdr:0000000000005ABA                 db    0
.eh_frame_hdr:0000000000005ABB                 db    0
.eh_frame_hdr:0000000000005ABC                 db  30h ; 0
.eh_frame_hdr:0000000000005ABD                 db 0E2h
.eh_frame_hdr:0000000000005ABE                 db 0FFh
.eh_frame_hdr:0000000000005ABF                 db 0FFh
.eh_frame_hdr:0000000000005AC0                 db 0BCh
.eh_frame_hdr:0000000000005AC1                 db    7
.eh_frame_hdr:0000000000005AC2                 db    0
.eh_frame_hdr:0000000000005AC3                 db    0
.eh_frame_hdr:0000000000005AC4                 db 0D0h
.eh_frame_hdr:0000000000005AC5                 db 0E2h
.eh_frame_hdr:0000000000005AC6                 db 0FFh
.eh_frame_hdr:0000000000005AC7                 db 0FFh
.eh_frame_hdr:0000000000005AC8                 db 0D8h
.eh_frame_hdr:0000000000005AC9                 db    7
.eh_frame_hdr:0000000000005ACA                 db    0
.eh_frame_hdr:0000000000005ACB                 db    0
.eh_frame_hdr:0000000000005ACC                 db 0E0h
.eh_frame_hdr:0000000000005ACD                 db 0E2h
.eh_frame_hdr:0000000000005ACE                 db 0FFh
.eh_frame_hdr:0000000000005ACF                 db 0FFh
.eh_frame_hdr:0000000000005AD0                 db 0ECh
.eh_frame_hdr:0000000000005AD1                 db    7
.eh_frame_hdr:0000000000005AD2                 db    0
.eh_frame_hdr:0000000000005AD3                 db    0
.eh_frame_hdr:0000000000005AD4                 db    0
.eh_frame_hdr:0000000000005AD5                 db 0E3h
.eh_frame_hdr:0000000000005AD6                 db 0FFh
.eh_frame_hdr:0000000000005AD7                 db 0FFh
.eh_frame_hdr:0000000000005AD8                 db    0
.eh_frame_hdr:0000000000005AD9                 db    8
.eh_frame_hdr:0000000000005ADA                 db    0
.eh_frame_hdr:0000000000005ADB                 db    0
.eh_frame_hdr:0000000000005ADC                 db  20h
.eh_frame_hdr:0000000000005ADD                 db 0E3h
.eh_frame_hdr:0000000000005ADE                 db 0FFh
.eh_frame_hdr:0000000000005ADF                 db 0FFh
.eh_frame_hdr:0000000000005AE0                 db  14h
.eh_frame_hdr:0000000000005AE1                 db    8
.eh_frame_hdr:0000000000005AE2                 db    0
.eh_frame_hdr:0000000000005AE3                 db    0
.eh_frame_hdr:0000000000005AE4                 db  30h ; 0
.eh_frame_hdr:0000000000005AE5                 db 0E3h
.eh_frame_hdr:0000000000005AE6                 db 0FFh
.eh_frame_hdr:0000000000005AE7                 db 0FFh
.eh_frame_hdr:0000000000005AE8                 db  28h ; (
.eh_frame_hdr:0000000000005AE9                 db    8
.eh_frame_hdr:0000000000005AEA                 db    0
.eh_frame_hdr:0000000000005AEB                 db    0
.eh_frame_hdr:0000000000005AEC                 db  50h ; P
.eh_frame_hdr:0000000000005AED                 db 0E3h
.eh_frame_hdr:0000000000005AEE                 db 0FFh
.eh_frame_hdr:0000000000005AEF                 db 0FFh
.eh_frame_hdr:0000000000005AF0                 db  3Ch ; <
.eh_frame_hdr:0000000000005AF1                 db    8
.eh_frame_hdr:0000000000005AF2                 db    0
.eh_frame_hdr:0000000000005AF3                 db    0
.eh_frame_hdr:0000000000005AF4                 db  70h ; p
.eh_frame_hdr:0000000000005AF5                 db 0E3h
.eh_frame_hdr:0000000000005AF6                 db 0FFh
.eh_frame_hdr:0000000000005AF7                 db 0FFh
.eh_frame_hdr:0000000000005AF8                 db  50h ; P
.eh_frame_hdr:0000000000005AF9                 db    8
.eh_frame_hdr:0000000000005AFA                 db    0
.eh_frame_hdr:0000000000005AFB                 db    0
.eh_frame_hdr:0000000000005AFC                 db  90h
.eh_frame_hdr:0000000000005AFD                 db 0E3h
.eh_frame_hdr:0000000000005AFE                 db 0FFh
.eh_frame_hdr:0000000000005AFF                 db 0FFh
.eh_frame_hdr:0000000000005B00                 db  68h ; h
.eh_frame_hdr:0000000000005B01                 db    8
.eh_frame_hdr:0000000000005B02                 db    0
.eh_frame_hdr:0000000000005B03                 db    0
.eh_frame_hdr:0000000000005B04                 db 0B0h
.eh_frame_hdr:0000000000005B05                 db 0E7h
.eh_frame_hdr:0000000000005B06                 db 0FFh
.eh_frame_hdr:0000000000005B07                 db 0FFh
.eh_frame_hdr:0000000000005B08                 db  7Ch ; |
.eh_frame_hdr:0000000000005B09                 db    9
.eh_frame_hdr:0000000000005B0A                 db    0
.eh_frame_hdr:0000000000005B0B                 db    0
.eh_frame_hdr:0000000000005B0C                 db 0D0h
.eh_frame_hdr:0000000000005B0D                 db 0E7h
.eh_frame_hdr:0000000000005B0E                 db 0FFh
.eh_frame_hdr:0000000000005B0F                 db 0FFh
.eh_frame_hdr:0000000000005B10                 db  90h
.eh_frame_hdr:0000000000005B11                 db    9
.eh_frame_hdr:0000000000005B12                 db    0
.eh_frame_hdr:0000000000005B13                 db    0
.eh_frame_hdr:0000000000005B14                 db  50h ; P
.eh_frame_hdr:0000000000005B15                 db 0E8h
.eh_frame_hdr:0000000000005B16                 db 0FFh
.eh_frame_hdr:0000000000005B17                 db 0FFh
.eh_frame_hdr:0000000000005B18                 db 0ACh
.eh_frame_hdr:0000000000005B19                 db    9
.eh_frame_hdr:0000000000005B1A                 db    0
.eh_frame_hdr:0000000000005B1B                 db    0
.eh_frame_hdr:0000000000005B1C                 db  30h ; 0
.eh_frame_hdr:0000000000005B1D                 db 0E9h
.eh_frame_hdr:0000000000005B1E                 db 0FFh
.eh_frame_hdr:0000000000005B1F                 db 0FFh
.eh_frame_hdr:0000000000005B20                 db 0D8h
.eh_frame_hdr:0000000000005B21                 db    9
.eh_frame_hdr:0000000000005B22                 db    0
.eh_frame_hdr:0000000000005B23                 db    0
.eh_frame_hdr:0000000000005B24                 db 0B0h
.eh_frame_hdr:0000000000005B25                 db 0E9h
.eh_frame_hdr:0000000000005B26                 db 0FFh
.eh_frame_hdr:0000000000005B27                 db 0FFh
.eh_frame_hdr:0000000000005B28                 db 0F8h
.eh_frame_hdr:0000000000005B29                 db    9
.eh_frame_hdr:0000000000005B2A                 db    0
.eh_frame_hdr:0000000000005B2B                 db    0
.eh_frame_hdr:0000000000005B2C                 db 0D0h
.eh_frame_hdr:0000000000005B2D                 db 0E9h
.eh_frame_hdr:0000000000005B2E                 db 0FFh
.eh_frame_hdr:0000000000005B2F                 db 0FFh
.eh_frame_hdr:0000000000005B30                 db  14h
.eh_frame_hdr:0000000000005B31                 db  0Ah
.eh_frame_hdr:0000000000005B32                 db    0
.eh_frame_hdr:0000000000005B33                 db    0
.eh_frame_hdr:0000000000005B34                 db    0
.eh_frame_hdr:0000000000005B35                 db 0EAh
.eh_frame_hdr:0000000000005B36                 db 0FFh
.eh_frame_hdr:0000000000005B37                 db 0FFh
.eh_frame_hdr:0000000000005B38                 db  28h ; (
.eh_frame_hdr:0000000000005B39                 db  0Ah
.eh_frame_hdr:0000000000005B3A                 db    0
.eh_frame_hdr:0000000000005B3B                 db    0
.eh_frame_hdr:0000000000005B3C                 db  10h
.eh_frame_hdr:0000000000005B3D                 db 0EAh
.eh_frame_hdr:0000000000005B3E                 db 0FFh
.eh_frame_hdr:0000000000005B3F                 db 0FFh
.eh_frame_hdr:0000000000005B40                 db  3Ch ; <
.eh_frame_hdr:0000000000005B41                 db  0Ah
.eh_frame_hdr:0000000000005B42                 db    0
.eh_frame_hdr:0000000000005B43                 db    0
.eh_frame_hdr:0000000000005B44                 db  50h ; P
.eh_frame_hdr:0000000000005B45                 db 0EAh
.eh_frame_hdr:0000000000005B46                 db 0FFh
.eh_frame_hdr:0000000000005B47                 db 0FFh
.eh_frame_hdr:0000000000005B48                 db  60h ; `
.eh_frame_hdr:0000000000005B49                 db  0Ah
.eh_frame_hdr:0000000000005B4A                 db    0
.eh_frame_hdr:0000000000005B4B                 db    0
.eh_frame_hdr:0000000000005B4C                 db  80h
.eh_frame_hdr:0000000000005B4D                 db 0EAh
.eh_frame_hdr:0000000000005B4E                 db 0FFh
.eh_frame_hdr:0000000000005B4F                 db 0FFh
.eh_frame_hdr:0000000000005B50                 db  74h ; t
.eh_frame_hdr:0000000000005B51                 db  0Ah
.eh_frame_hdr:0000000000005B52                 db    0
.eh_frame_hdr:0000000000005B53                 db    0
.eh_frame_hdr:0000000000005B54                 db  10h
.eh_frame_hdr:0000000000005B55                 db 0EBh
.eh_frame_hdr:0000000000005B56                 db 0FFh
.eh_frame_hdr:0000000000005B57                 db 0FFh
.eh_frame_hdr:0000000000005B58                 db  8Ch
.eh_frame_hdr:0000000000005B59                 db  0Ah
.eh_frame_hdr:0000000000005B5A                 db    0
.eh_frame_hdr:0000000000005B5B                 db    0
.eh_frame_hdr:0000000000005B5C                 db  60h ; `
.eh_frame_hdr:0000000000005B5D                 db 0EBh
.eh_frame_hdr:0000000000005B5E                 db 0FFh
.eh_frame_hdr:0000000000005B5F                 db 0FFh
.eh_frame_hdr:0000000000005B60                 db 0A4h
.eh_frame_hdr:0000000000005B61                 db  0Ah
.eh_frame_hdr:0000000000005B62                 db    0
.eh_frame_hdr:0000000000005B63                 db    0
.eh_frame_hdr:0000000000005B64                 db  80h
.eh_frame_hdr:0000000000005B65                 db 0EBh
.eh_frame_hdr:0000000000005B66                 db 0FFh
.eh_frame_hdr:0000000000005B67                 db 0FFh
.eh_frame_hdr:0000000000005B68                 db 0C0h
.eh_frame_hdr:0000000000005B69                 db  0Ah
.eh_frame_hdr:0000000000005B6A                 db    0
.eh_frame_hdr:0000000000005B6B                 db    0
.eh_frame_hdr:0000000000005B6C                 db 0B0h
.eh_frame_hdr:0000000000005B6D                 db 0EBh
.eh_frame_hdr:0000000000005B6E                 db 0FFh
.eh_frame_hdr:0000000000005B6F                 db 0FFh
.eh_frame_hdr:0000000000005B70                 db 0DCh
.eh_frame_hdr:0000000000005B71                 db  0Ah
.eh_frame_hdr:0000000000005B72                 db    0
.eh_frame_hdr:0000000000005B73                 db    0
.eh_frame_hdr:0000000000005B74                 db 0E0h
.eh_frame_hdr:0000000000005B75                 db 0EBh
.eh_frame_hdr:0000000000005B76                 db 0FFh
.eh_frame_hdr:0000000000005B77                 db 0FFh
.eh_frame_hdr:0000000000005B78                 db    4
.eh_frame_hdr:0000000000005B79                 db  0Bh
.eh_frame_hdr:0000000000005B7A                 db    0
.eh_frame_hdr:0000000000005B7B                 db    0
.eh_frame_hdr:0000000000005B7C                 db    0
.eh_frame_hdr:0000000000005B7D                 db 0ECh
.eh_frame_hdr:0000000000005B7E                 db 0FFh
.eh_frame_hdr:0000000000005B7F                 db 0FFh
.eh_frame_hdr:0000000000005B80                 db  20h
.eh_frame_hdr:0000000000005B81                 db  0Bh
.eh_frame_hdr:0000000000005B82                 db    0
.eh_frame_hdr:0000000000005B83                 db    0
.eh_frame_hdr:0000000000005B84                 db  40h ; @
.eh_frame_hdr:0000000000005B85                 db 0ECh
.eh_frame_hdr:0000000000005B86                 db 0FFh
.eh_frame_hdr:0000000000005B87                 db 0FFh
.eh_frame_hdr:0000000000005B88                 db  38h ; 8
.eh_frame_hdr:0000000000005B89                 db  0Bh
.eh_frame_hdr:0000000000005B8A                 db    0
.eh_frame_hdr:0000000000005B8B                 db    0
.eh_frame_hdr:0000000000005B8C                 db 0D0h
.eh_frame_hdr:0000000000005B8D                 db 0ECh
.eh_frame_hdr:0000000000005B8E                 db 0FFh
.eh_frame_hdr:0000000000005B8F                 db 0FFh
.eh_frame_hdr:0000000000005B90                 db  78h ; x
.eh_frame_hdr:0000000000005B91                 db  0Bh
.eh_frame_hdr:0000000000005B92                 db    0
.eh_frame_hdr:0000000000005B93                 db    0
.eh_frame_hdr:0000000000005B94                 db  50h ; P
.eh_frame_hdr:0000000000005B95                 db 0EDh
.eh_frame_hdr:0000000000005B96                 db 0FFh
.eh_frame_hdr:0000000000005B97                 db 0FFh
.eh_frame_hdr:0000000000005B98                 db 0C8h
.eh_frame_hdr:0000000000005B99                 db  0Bh
.eh_frame_hdr:0000000000005B9A                 db    0
.eh_frame_hdr:0000000000005B9B                 db    0
.eh_frame_hdr:0000000000005B9C                 db 0B0h
.eh_frame_hdr:0000000000005B9D                 db 0EDh
.eh_frame_hdr:0000000000005B9E                 db 0FFh
.eh_frame_hdr:0000000000005B9F                 db 0FFh
.eh_frame_hdr:0000000000005BA0                 db 0E8h
.eh_frame_hdr:0000000000005BA1                 db  0Bh
.eh_frame_hdr:0000000000005BA2                 db    0
.eh_frame_hdr:0000000000005BA3                 db    0
.eh_frame_hdr:0000000000005BA4                 db 0F0h
.eh_frame_hdr:0000000000005BA5                 db 0EDh
.eh_frame_hdr:0000000000005BA6                 db 0FFh
.eh_frame_hdr:0000000000005BA7                 db 0FFh
.eh_frame_hdr:0000000000005BA8                 db    8
.eh_frame_hdr:0000000000005BA9                 db  0Ch
.eh_frame_hdr:0000000000005BAA                 db    0
.eh_frame_hdr:0000000000005BAB                 db    0
.eh_frame_hdr:0000000000005BAC                 db  70h ; p
.eh_frame_hdr:0000000000005BAD                 db 0EEh
.eh_frame_hdr:0000000000005BAE                 db 0FFh
.eh_frame_hdr:0000000000005BAF                 db 0FFh
.eh_frame_hdr:0000000000005BB0                 db  40h ; @
.eh_frame_hdr:0000000000005BB1                 db  0Ch
.eh_frame_hdr:0000000000005BB2                 db    0
.eh_frame_hdr:0000000000005BB3                 db    0
.eh_frame_hdr:0000000000005BB4                 db 0B0h
.eh_frame_hdr:0000000000005BB5                 db 0EEh
.eh_frame_hdr:0000000000005BB6                 db 0FFh
.eh_frame_hdr:0000000000005BB7                 db 0FFh
.eh_frame_hdr:0000000000005BB8                 db  60h ; `
.eh_frame_hdr:0000000000005BB9                 db  0Ch
.eh_frame_hdr:0000000000005BBA                 db    0
.eh_frame_hdr:0000000000005BBB                 db    0
.eh_frame_hdr:0000000000005BBC                 db  10h
.eh_frame_hdr:0000000000005BBD                 db 0EFh
.eh_frame_hdr:0000000000005BBE                 db 0FFh
.eh_frame_hdr:0000000000005BBF                 db 0FFh
.eh_frame_hdr:0000000000005BC0                 db  90h
.eh_frame_hdr:0000000000005BC1                 db  0Ch
.eh_frame_hdr:0000000000005BC2                 db    0
.eh_frame_hdr:0000000000005BC3                 db    0
.eh_frame_hdr:0000000000005BC4                 db  80h
.eh_frame_hdr:0000000000005BC5                 db 0EFh
.eh_frame_hdr:0000000000005BC6                 db 0FFh
.eh_frame_hdr:0000000000005BC7                 db 0FFh
.eh_frame_hdr:0000000000005BC8                 db 0D8h
.eh_frame_hdr:0000000000005BC9                 db  0Ch
.eh_frame_hdr:0000000000005BCA                 db    0
.eh_frame_hdr:0000000000005BCB                 db    0
.eh_frame_hdr:0000000000005BCC                 db  90h
.eh_frame_hdr:0000000000005BCD                 db 0EFh
.eh_frame_hdr:0000000000005BCE                 db 0FFh
.eh_frame_hdr:0000000000005BCF                 db 0FFh
.eh_frame_hdr:0000000000005BD0                 db 0F0h
.eh_frame_hdr:0000000000005BD1                 db  0Ch
.eh_frame_hdr:0000000000005BD2                 db    0
.eh_frame_hdr:0000000000005BD3                 db    0
.eh_frame_hdr:0000000000005BD3 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005BD3
LOAD:0000000000005BD4 ; ===========================================================================
LOAD:0000000000005BD4
LOAD:0000000000005BD4 ; Segment type: Pure code
LOAD:0000000000005BD4 ; Segment permissions: Read/Execute
LOAD:0000000000005BD4 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005BD4                 assume cs:LOAD
LOAD:0000000000005BD4                 ;org 5BD4h
LOAD:0000000000005BD4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005BD4                 align 8
LOAD:0000000000005BD4 LOAD            ends
LOAD:0000000000005BD4
.eh_frame:0000000000005BD8 ; ===========================================================================
.eh_frame:0000000000005BD8
.eh_frame:0000000000005BD8 ; Segment type: Pure data
.eh_frame:0000000000005BD8 ; Segment permissions: Read
.eh_frame:0000000000005BD8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005BD8                 assume cs:_eh_frame
.eh_frame:0000000000005BD8                 ;org 5BD8h
.eh_frame:0000000000005BD8                 db  14h
.eh_frame:0000000000005BD9                 db    0
.eh_frame:0000000000005BDA                 db    0
.eh_frame:0000000000005BDB                 db    0
.eh_frame:0000000000005BDC                 db    0
.eh_frame:0000000000005BDD                 db    0
.eh_frame:0000000000005BDE                 db    0
.eh_frame:0000000000005BDF                 db    0
.eh_frame:0000000000005BE0                 db    1
.eh_frame:0000000000005BE1                 db  7Ah ; z
.eh_frame:0000000000005BE2                 db  52h ; R
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db    1
.eh_frame:0000000000005BE5                 db  78h ; x
.eh_frame:0000000000005BE6                 db  10h
.eh_frame:0000000000005BE7                 db    1
.eh_frame:0000000000005BE8                 db  1Bh
.eh_frame:0000000000005BE9                 db  0Ch
.eh_frame:0000000000005BEA                 db    7
.eh_frame:0000000000005BEB                 db    8
.eh_frame:0000000000005BEC                 db  90h
.eh_frame:0000000000005BED                 db    1
.eh_frame:0000000000005BEE                 db    7
.eh_frame:0000000000005BEF                 db  10h
.eh_frame:0000000000005BF0                 db  14h
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db  1Ch
.eh_frame:0000000000005BF5                 db    0
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db  98h
.eh_frame:0000000000005BF9                 db 0BDh
.eh_frame:0000000000005BFA                 db 0FFh
.eh_frame:0000000000005BFB                 db 0FFh
.eh_frame:0000000000005BFC                 db  2Bh ; +
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db    0
.eh_frame:0000000000005C01                 db    0
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db    0
.eh_frame:0000000000005C05                 db    0
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db  14h
.eh_frame:0000000000005C09                 db    0
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db    0
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db    1
.eh_frame:0000000000005C11                 db  7Ah ; z
.eh_frame:0000000000005C12                 db  52h ; R
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db    1
.eh_frame:0000000000005C15                 db  78h ; x
.eh_frame:0000000000005C16                 db  10h
.eh_frame:0000000000005C17                 db    1
.eh_frame:0000000000005C18                 db  1Bh
.eh_frame:0000000000005C19                 db  0Ch
.eh_frame:0000000000005C1A                 db    7
.eh_frame:0000000000005C1B                 db    8
.eh_frame:0000000000005C1C                 db  90h
.eh_frame:0000000000005C1D                 db    1
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db  24h ; $
.eh_frame:0000000000005C21                 db    0
.eh_frame:0000000000005C22                 db    0
.eh_frame:0000000000005C23                 db    0
.eh_frame:0000000000005C24                 db  1Ch
.eh_frame:0000000000005C25                 db    0
.eh_frame:0000000000005C26                 db    0
.eh_frame:0000000000005C27                 db    0
.eh_frame:0000000000005C28                 db  78h ; x
.eh_frame:0000000000005C29                 db 0B5h
.eh_frame:0000000000005C2A                 db 0FFh
.eh_frame:0000000000005C2B                 db 0FFh
.eh_frame:0000000000005C2C                 db 0B0h
.eh_frame:0000000000005C2D                 db    2
.eh_frame:0000000000005C2E                 db    0
.eh_frame:0000000000005C2F                 db    0
.eh_frame:0000000000005C30                 db    0
.eh_frame:0000000000005C31                 db  0Eh
.eh_frame:0000000000005C32                 db  10h
.eh_frame:0000000000005C33                 db  46h ; F
.eh_frame:0000000000005C34                 db  0Eh
.eh_frame:0000000000005C35                 db  18h
.eh_frame:0000000000005C36                 db  4Ah ; J
.eh_frame:0000000000005C37                 db  0Fh
.eh_frame:0000000000005C38                 db  0Bh
.eh_frame:0000000000005C39                 db  77h ; w
.eh_frame:0000000000005C3A                 db    8
.eh_frame:0000000000005C3B                 db  80h
.eh_frame:0000000000005C3C                 db    0
.eh_frame:0000000000005C3D                 db  3Fh ; ?
.eh_frame:0000000000005C3E                 db  1Ah
.eh_frame:0000000000005C3F                 db  3Bh ; ;
.eh_frame:0000000000005C40                 db  2Ah ; *
.eh_frame:0000000000005C41                 db  33h ; 3
.eh_frame:0000000000005C42                 db  24h ; $
.eh_frame:0000000000005C43                 db  22h ; "
.eh_frame:0000000000005C44                 db    0
.eh_frame:0000000000005C45                 db    0
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db  14h
.eh_frame:0000000000005C49                 db    0
.eh_frame:0000000000005C4A                 db    0
.eh_frame:0000000000005C4B                 db    0
.eh_frame:0000000000005C4C                 db  44h ; D
.eh_frame:0000000000005C4D                 db    0
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db    0
.eh_frame:0000000000005C51                 db 0B8h
.eh_frame:0000000000005C52                 db 0FFh
.eh_frame:0000000000005C53                 db 0FFh
.eh_frame:0000000000005C54                 db    8
.eh_frame:0000000000005C55                 db    0
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db    0
.eh_frame:0000000000005C59                 db    0
.eh_frame:0000000000005C5A                 db    0
.eh_frame:0000000000005C5B                 db    0
.eh_frame:0000000000005C5C                 db    0
.eh_frame:0000000000005C5D                 db    0
.eh_frame:0000000000005C5E                 db    0
.eh_frame:0000000000005C5F                 db    0
.eh_frame:0000000000005C60                 db  10h
.eh_frame:0000000000005C61                 db    0
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db  5Ch ; \
.eh_frame:0000000000005C65                 db    0
.eh_frame:0000000000005C66                 db    0
.eh_frame:0000000000005C67                 db    0
.eh_frame:0000000000005C68                 db  38h ; 8
.eh_frame:0000000000005C69                 db 0BEh
.eh_frame:0000000000005C6A                 db 0FFh
.eh_frame:0000000000005C6B                 db 0FFh
.eh_frame:0000000000005C6C                 db  88h
.eh_frame:0000000000005C6D                 db    0
.eh_frame:0000000000005C6E                 db    0
.eh_frame:0000000000005C6F                 db    0
.eh_frame:0000000000005C70                 db    0
.eh_frame:0000000000005C71                 db    0
.eh_frame:0000000000005C72                 db    0
.eh_frame:0000000000005C73                 db    0
.eh_frame:0000000000005C74                 db  20h
.eh_frame:0000000000005C75                 db    0
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  70h ; p
.eh_frame:0000000000005C79                 db    0
.eh_frame:0000000000005C7A                 db    0
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db 0B4h
.eh_frame:0000000000005C7D                 db 0BEh
.eh_frame:0000000000005C7E                 db 0FFh
.eh_frame:0000000000005C7F                 db 0FFh
.eh_frame:0000000000005C80                 db 0ECh
.eh_frame:0000000000005C81                 db    3
.eh_frame:0000000000005C82                 db    0
.eh_frame:0000000000005C83                 db    0
.eh_frame:0000000000005C84                 db    0
.eh_frame:0000000000005C85                 db  42h ; B
.eh_frame:0000000000005C86                 db  0Eh
.eh_frame:0000000000005C87                 db  10h
.eh_frame:0000000000005C88                 db  8Ch
.eh_frame:0000000000005C89                 db    2
.eh_frame:0000000000005C8A                 db  41h ; A
.eh_frame:0000000000005C8B                 db  0Eh
.eh_frame:0000000000005C8C                 db  18h
.eh_frame:0000000000005C8D                 db  86h
.eh_frame:0000000000005C8E                 db    3
.eh_frame:0000000000005C8F                 db  41h ; A
.eh_frame:0000000000005C90                 db  0Eh
.eh_frame:0000000000005C91                 db  20h
.eh_frame:0000000000005C92                 db  83h
.eh_frame:0000000000005C93                 db    4
.eh_frame:0000000000005C94                 db  44h ; D
.eh_frame:0000000000005C95                 db  0Eh
.eh_frame:0000000000005C96                 db 0A0h
.eh_frame:0000000000005C97                 db    1
.eh_frame:0000000000005C98                 db  5Ch ; \
.eh_frame:0000000000005C99                 db    0
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db  94h
.eh_frame:0000000000005C9D                 db    0
.eh_frame:0000000000005C9E                 db    0
.eh_frame:0000000000005C9F                 db    0
.eh_frame:0000000000005CA0                 db 0C0h
.eh_frame:0000000000005CA1                 db 0B7h
.eh_frame:0000000000005CA2                 db 0FFh
.eh_frame:0000000000005CA3                 db 0FFh
.eh_frame:0000000000005CA4                 db  2Ah ; *
.eh_frame:0000000000005CA5                 db    5
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db    0
.eh_frame:0000000000005CA9                 db  42h ; B
.eh_frame:0000000000005CAA                 db  0Eh
.eh_frame:0000000000005CAB                 db  10h
.eh_frame:0000000000005CAC                 db  8Fh
.eh_frame:0000000000005CAD                 db    2
.eh_frame:0000000000005CAE                 db  42h ; B
.eh_frame:0000000000005CAF                 db  0Eh
.eh_frame:0000000000005CB0                 db  18h
.eh_frame:0000000000005CB1                 db  8Eh
.eh_frame:0000000000005CB2                 db    3
.eh_frame:0000000000005CB3                 db  45h ; E
.eh_frame:0000000000005CB4                 db  0Eh
.eh_frame:0000000000005CB5                 db  20h
.eh_frame:0000000000005CB6                 db  8Dh
.eh_frame:0000000000005CB7                 db    4
.eh_frame:0000000000005CB8                 db  42h ; B
.eh_frame:0000000000005CB9                 db  0Eh
.eh_frame:0000000000005CBA                 db  28h ; (
.eh_frame:0000000000005CBB                 db  8Ch
.eh_frame:0000000000005CBC                 db    5
.eh_frame:0000000000005CBD                 db  41h ; A
.eh_frame:0000000000005CBE                 db  0Eh
.eh_frame:0000000000005CBF                 db  30h ; 0
.eh_frame:0000000000005CC0                 db  86h
.eh_frame:0000000000005CC1                 db    6
.eh_frame:0000000000005CC2                 db  41h ; A
.eh_frame:0000000000005CC3                 db  0Eh
.eh_frame:0000000000005CC4                 db  38h ; 8
.eh_frame:0000000000005CC5                 db  83h
.eh_frame:0000000000005CC6                 db    7
.eh_frame:0000000000005CC7                 db  4Dh ; M
.eh_frame:0000000000005CC8                 db  0Eh
.eh_frame:0000000000005CC9                 db  50h ; P
.eh_frame:0000000000005CCA                 db    3
.eh_frame:0000000000005CCB                 db  83h
.eh_frame:0000000000005CCC                 db    2
.eh_frame:0000000000005CCD                 db  0Ah
.eh_frame:0000000000005CCE                 db  0Eh
.eh_frame:0000000000005CCF                 db  38h ; 8
.eh_frame:0000000000005CD0                 db  43h ; C
.eh_frame:0000000000005CD1                 db  0Eh
.eh_frame:0000000000005CD2                 db  30h ; 0
.eh_frame:0000000000005CD3                 db  41h ; A
.eh_frame:0000000000005CD4                 db  0Eh
.eh_frame:0000000000005CD5                 db  28h ; (
.eh_frame:0000000000005CD6                 db  42h ; B
.eh_frame:0000000000005CD7                 db  0Eh
.eh_frame:0000000000005CD8                 db  20h
.eh_frame:0000000000005CD9                 db  42h ; B
.eh_frame:0000000000005CDA                 db  0Eh
.eh_frame:0000000000005CDB                 db  18h
.eh_frame:0000000000005CDC                 db  42h ; B
.eh_frame:0000000000005CDD                 db  0Eh
.eh_frame:0000000000005CDE                 db  10h
.eh_frame:0000000000005CDF                 db  42h ; B
.eh_frame:0000000000005CE0                 db  0Eh
.eh_frame:0000000000005CE1                 db    8
.eh_frame:0000000000005CE2                 db  41h ; A
.eh_frame:0000000000005CE3                 db  0Bh
.eh_frame:0000000000005CE4                 db    3
.eh_frame:0000000000005CE5                 db 0CCh
.eh_frame:0000000000005CE6                 db    1
.eh_frame:0000000000005CE7                 db  0Eh
.eh_frame:0000000000005CE8                 db  58h ; X
.eh_frame:0000000000005CE9                 db  50h ; P
.eh_frame:0000000000005CEA                 db  0Eh
.eh_frame:0000000000005CEB                 db  60h ; `
.eh_frame:0000000000005CEC                 db  62h ; b
.eh_frame:0000000000005CED                 db  0Eh
.eh_frame:0000000000005CEE                 db  58h ; X
.eh_frame:0000000000005CEF                 db  41h ; A
.eh_frame:0000000000005CF0                 db  0Eh
.eh_frame:0000000000005CF1                 db  50h ; P
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db    0
.eh_frame:0000000000005CF5                 db    0
.eh_frame:0000000000005CF6                 db    0
.eh_frame:0000000000005CF7                 db    0
.eh_frame:0000000000005CF8                 db  10h
.eh_frame:0000000000005CF9                 db    0
.eh_frame:0000000000005CFA                 db    0
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db 0F4h
.eh_frame:0000000000005CFD                 db    0
.eh_frame:0000000000005CFE                 db    0
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db  20h
.eh_frame:0000000000005D01                 db 0C2h
.eh_frame:0000000000005D02                 db 0FFh
.eh_frame:0000000000005D03                 db 0FFh
.eh_frame:0000000000005D04                 db    8
.eh_frame:0000000000005D05                 db    0
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db    0
.eh_frame:0000000000005D09                 db    0
.eh_frame:0000000000005D0A                 db    0
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db  10h
.eh_frame:0000000000005D0D                 db    0
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db    8
.eh_frame:0000000000005D11                 db    1
.eh_frame:0000000000005D12                 db    0
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db  1Ch
.eh_frame:0000000000005D15                 db 0C2h
.eh_frame:0000000000005D16                 db 0FFh
.eh_frame:0000000000005D17                 db 0FFh
.eh_frame:0000000000005D18                 db    8
.eh_frame:0000000000005D19                 db    0
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db    0
.eh_frame:0000000000005D1D                 db    0
.eh_frame:0000000000005D1E                 db    0
.eh_frame:0000000000005D1F                 db    0
.eh_frame:0000000000005D20                 db  2Ch ; ,
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db  1Ch
.eh_frame:0000000000005D25                 db    1
.eh_frame:0000000000005D26                 db    0
.eh_frame:0000000000005D27                 db    0
.eh_frame:0000000000005D28                 db  18h
.eh_frame:0000000000005D29                 db 0C2h
.eh_frame:0000000000005D2A                 db 0FFh
.eh_frame:0000000000005D2B                 db 0FFh
.eh_frame:0000000000005D2C                 db 0A4h
.eh_frame:0000000000005D2D                 db    0
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db    0
.eh_frame:0000000000005D31                 db  41h ; A
.eh_frame:0000000000005D32                 db  0Eh
.eh_frame:0000000000005D33                 db  10h
.eh_frame:0000000000005D34                 db  86h
.eh_frame:0000000000005D35                 db    2
.eh_frame:0000000000005D36                 db  41h ; A
.eh_frame:0000000000005D37                 db  0Eh
.eh_frame:0000000000005D38                 db  18h
.eh_frame:0000000000005D39                 db  83h
.eh_frame:0000000000005D3A                 db    3
.eh_frame:0000000000005D3B                 db  44h ; D
.eh_frame:0000000000005D3C                 db  0Eh
.eh_frame:0000000000005D3D                 db  20h
.eh_frame:0000000000005D3E                 db  7Ah ; z
.eh_frame:0000000000005D3F                 db  0Ah
.eh_frame:0000000000005D40                 db  0Eh
.eh_frame:0000000000005D41                 db  18h
.eh_frame:0000000000005D42                 db  41h ; A
.eh_frame:0000000000005D43                 db  0Eh
.eh_frame:0000000000005D44                 db  10h
.eh_frame:0000000000005D45                 db  41h ; A
.eh_frame:0000000000005D46                 db  0Eh
.eh_frame:0000000000005D47                 db    8
.eh_frame:0000000000005D48                 db  41h ; A
.eh_frame:0000000000005D49                 db  0Bh
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db    0
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  1Ch
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db  4Ch ; L
.eh_frame:0000000000005D55                 db    1
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db  98h
.eh_frame:0000000000005D59                 db 0C2h
.eh_frame:0000000000005D5A                 db 0FFh
.eh_frame:0000000000005D5B                 db 0FFh
.eh_frame:0000000000005D5C                 db  9Fh
.eh_frame:0000000000005D5D                 db    0
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db    0
.eh_frame:0000000000005D61                 db  44h ; D
.eh_frame:0000000000005D62                 db  0Eh
.eh_frame:0000000000005D63                 db  10h
.eh_frame:0000000000005D64                 db  83h
.eh_frame:0000000000005D65                 db    2
.eh_frame:0000000000005D66                 db    2
.eh_frame:0000000000005D67                 db  78h ; x
.eh_frame:0000000000005D68                 db  0Ah
.eh_frame:0000000000005D69                 db  0Eh
.eh_frame:0000000000005D6A                 db    8
.eh_frame:0000000000005D6B                 db  41h ; A
.eh_frame:0000000000005D6C                 db  0Bh
.eh_frame:0000000000005D6D                 db    0
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db  40h ; @
.eh_frame:0000000000005D71                 db    0
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db  6Ch ; l
.eh_frame:0000000000005D75                 db    1
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db  18h
.eh_frame:0000000000005D79                 db 0C3h
.eh_frame:0000000000005D7A                 db 0FFh
.eh_frame:0000000000005D7B                 db 0FFh
.eh_frame:0000000000005D7C                 db 0E7h
.eh_frame:0000000000005D7D                 db    0
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db    0
.eh_frame:0000000000005D81                 db  41h ; A
.eh_frame:0000000000005D82                 db  0Eh
.eh_frame:0000000000005D83                 db  10h
.eh_frame:0000000000005D84                 db  86h
.eh_frame:0000000000005D85                 db    2
.eh_frame:0000000000005D86                 db  41h ; A
.eh_frame:0000000000005D87                 db  0Eh
.eh_frame:0000000000005D88                 db  18h
.eh_frame:0000000000005D89                 db  83h
.eh_frame:0000000000005D8A                 db    3
.eh_frame:0000000000005D8B                 db  49h ; I
.eh_frame:0000000000005D8C                 db  0Eh
.eh_frame:0000000000005D8D                 db  20h
.eh_frame:0000000000005D8E                 db  6Eh ; n
.eh_frame:0000000000005D8F                 db  0Ah
.eh_frame:0000000000005D90                 db  0Eh
.eh_frame:0000000000005D91                 db  18h
.eh_frame:0000000000005D92                 db  41h ; A
.eh_frame:0000000000005D93                 db  0Eh
.eh_frame:0000000000005D94                 db  10h
.eh_frame:0000000000005D95                 db  41h ; A
.eh_frame:0000000000005D96                 db  0Eh
.eh_frame:0000000000005D97                 db    8
.eh_frame:0000000000005D98                 db  45h ; E
.eh_frame:0000000000005D99                 db  0Bh
.eh_frame:0000000000005D9A                 db    2
.eh_frame:0000000000005D9B                 db  4Ah ; J
.eh_frame:0000000000005D9C                 db  0Ah
.eh_frame:0000000000005D9D                 db  0Eh
.eh_frame:0000000000005D9E                 db  18h
.eh_frame:0000000000005D9F                 db  41h ; A
.eh_frame:0000000000005DA0                 db  0Eh
.eh_frame:0000000000005DA1                 db  10h
.eh_frame:0000000000005DA2                 db  41h ; A
.eh_frame:0000000000005DA3                 db  0Eh
.eh_frame:0000000000005DA4                 db    8
.eh_frame:0000000000005DA5                 db  44h ; D
.eh_frame:0000000000005DA6                 db  0Bh
.eh_frame:0000000000005DA7                 db    2
.eh_frame:0000000000005DA8                 db  54h ; T
.eh_frame:0000000000005DA9                 db  0Eh
.eh_frame:0000000000005DAA                 db  18h
.eh_frame:0000000000005DAB                 db  41h ; A
.eh_frame:0000000000005DAC                 db  0Eh
.eh_frame:0000000000005DAD                 db  10h
.eh_frame:0000000000005DAE                 db  41h ; A
.eh_frame:0000000000005DAF                 db  0Eh
.eh_frame:0000000000005DB0                 db    8
.eh_frame:0000000000005DB1                 db    0
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db  74h ; t
.eh_frame:0000000000005DB5                 db    0
.eh_frame:0000000000005DB6                 db    0
.eh_frame:0000000000005DB7                 db    0
.eh_frame:0000000000005DB8                 db 0B0h
.eh_frame:0000000000005DB9                 db    1
.eh_frame:0000000000005DBA                 db    0
.eh_frame:0000000000005DBB                 db    0
.eh_frame:0000000000005DBC                 db 0C4h
.eh_frame:0000000000005DBD                 db 0C3h
.eh_frame:0000000000005DBE                 db 0FFh
.eh_frame:0000000000005DBF                 db 0FFh
.eh_frame:0000000000005DC0                 db  34h ; 4
.eh_frame:0000000000005DC1                 db  12h
.eh_frame:0000000000005DC2                 db    0
.eh_frame:0000000000005DC3                 db    0
.eh_frame:0000000000005DC4                 db    0
.eh_frame:0000000000005DC5                 db  42h ; B
.eh_frame:0000000000005DC6                 db  0Eh
.eh_frame:0000000000005DC7                 db  10h
.eh_frame:0000000000005DC8                 db  8Fh
.eh_frame:0000000000005DC9                 db    2
.eh_frame:0000000000005DCA                 db  42h ; B
.eh_frame:0000000000005DCB                 db  0Eh
.eh_frame:0000000000005DCC                 db  18h
.eh_frame:0000000000005DCD                 db  8Eh
.eh_frame:0000000000005DCE                 db    3
.eh_frame:0000000000005DCF                 db  45h ; E
.eh_frame:0000000000005DD0                 db  0Eh
.eh_frame:0000000000005DD1                 db  20h
.eh_frame:0000000000005DD2                 db  8Dh
.eh_frame:0000000000005DD3                 db    4
.eh_frame:0000000000005DD4                 db  42h ; B
.eh_frame:0000000000005DD5                 db  0Eh
.eh_frame:0000000000005DD6                 db  28h ; (
.eh_frame:0000000000005DD7                 db  8Ch
.eh_frame:0000000000005DD8                 db    5
.eh_frame:0000000000005DD9                 db  44h ; D
.eh_frame:0000000000005DDA                 db  0Eh
.eh_frame:0000000000005DDB                 db  30h ; 0
.eh_frame:0000000000005DDC                 db  86h
.eh_frame:0000000000005DDD                 db    6
.eh_frame:0000000000005DDE                 db  41h ; A
.eh_frame:0000000000005DDF                 db  0Eh
.eh_frame:0000000000005DE0                 db  38h ; 8
.eh_frame:0000000000005DE1                 db  83h
.eh_frame:0000000000005DE2                 db    7
.eh_frame:0000000000005DE3                 db  53h ; S
.eh_frame:0000000000005DE4                 db  0Eh
.eh_frame:0000000000005DE5                 db 0F0h
.eh_frame:0000000000005DE6                 db    1
.eh_frame:0000000000005DE7                 db    3
.eh_frame:0000000000005DE8                 db  81h
.eh_frame:0000000000005DE9                 db  0Bh
.eh_frame:0000000000005DEA                 db  0Eh
.eh_frame:0000000000005DEB                 db 0F8h
.eh_frame:0000000000005DEC                 db    1
.eh_frame:0000000000005DED                 db  4Ah ; J
.eh_frame:0000000000005DEE                 db  0Eh
.eh_frame:0000000000005DEF                 db  80h
.eh_frame:0000000000005DF0                 db    2
.eh_frame:0000000000005DF1                 db  44h ; D
.eh_frame:0000000000005DF2                 db  0Eh
.eh_frame:0000000000005DF3                 db  88h
.eh_frame:0000000000005DF4                 db    2
.eh_frame:0000000000005DF5                 db  45h ; E
.eh_frame:0000000000005DF6                 db  0Eh
.eh_frame:0000000000005DF7                 db  90h
.eh_frame:0000000000005DF8                 db    2
.eh_frame:0000000000005DF9                 db  5Fh ; _
.eh_frame:0000000000005DFA                 db  0Eh
.eh_frame:0000000000005DFB                 db 0F0h
.eh_frame:0000000000005DFC                 db    1
.eh_frame:0000000000005DFD                 db  64h ; d
.eh_frame:0000000000005DFE                 db  0Ah
.eh_frame:0000000000005DFF                 db  0Eh
.eh_frame:0000000000005E00                 db  38h ; 8
.eh_frame:0000000000005E01                 db  41h ; A
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db  30h ; 0
.eh_frame:0000000000005E04                 db  41h ; A
.eh_frame:0000000000005E05                 db  0Eh
.eh_frame:0000000000005E06                 db  28h ; (
.eh_frame:0000000000005E07                 db  42h ; B
.eh_frame:0000000000005E08                 db  0Eh
.eh_frame:0000000000005E09                 db  20h
.eh_frame:0000000000005E0A                 db  42h ; B
.eh_frame:0000000000005E0B                 db  0Eh
.eh_frame:0000000000005E0C                 db  18h
.eh_frame:0000000000005E0D                 db  42h ; B
.eh_frame:0000000000005E0E                 db  0Eh
.eh_frame:0000000000005E0F                 db  10h
.eh_frame:0000000000005E10                 db  42h ; B
.eh_frame:0000000000005E11                 db  0Eh
.eh_frame:0000000000005E12                 db    8
.eh_frame:0000000000005E13                 db  44h ; D
.eh_frame:0000000000005E14                 db  0Bh
.eh_frame:0000000000005E15                 db    3
.eh_frame:0000000000005E16                 db  99h
.eh_frame:0000000000005E17                 db    5
.eh_frame:0000000000005E18                 db  0Eh
.eh_frame:0000000000005E19                 db 0F8h
.eh_frame:0000000000005E1A                 db    1
.eh_frame:0000000000005E1B                 db  4Dh ; M
.eh_frame:0000000000005E1C                 db  0Eh
.eh_frame:0000000000005E1D                 db  80h
.eh_frame:0000000000005E1E                 db    2
.eh_frame:0000000000005E1F                 db  44h ; D
.eh_frame:0000000000005E20                 db  0Eh
.eh_frame:0000000000005E21                 db  88h
.eh_frame:0000000000005E22                 db    2
.eh_frame:0000000000005E23                 db  47h ; G
.eh_frame:0000000000005E24                 db  0Eh
.eh_frame:0000000000005E25                 db  90h
.eh_frame:0000000000005E26                 db    2
.eh_frame:0000000000005E27                 db  5Bh ; [
.eh_frame:0000000000005E28                 db  0Eh
.eh_frame:0000000000005E29                 db 0F0h
.eh_frame:0000000000005E2A                 db    1
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db  68h ; h
.eh_frame:0000000000005E2D                 db    0
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db  28h ; (
.eh_frame:0000000000005E31                 db    2
.eh_frame:0000000000005E32                 db    0
.eh_frame:0000000000005E33                 db    0
.eh_frame:0000000000005E34                 db  8Ch
.eh_frame:0000000000005E35                 db 0D5h
.eh_frame:0000000000005E36                 db 0FFh
.eh_frame:0000000000005E37                 db 0FFh
.eh_frame:0000000000005E38                 db 0ABh
.eh_frame:0000000000005E39                 db    1
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db    0
.eh_frame:0000000000005E3D                 db  42h ; B
.eh_frame:0000000000005E3E                 db  0Eh
.eh_frame:0000000000005E3F                 db  10h
.eh_frame:0000000000005E40                 db  8Fh
.eh_frame:0000000000005E41                 db    2
.eh_frame:0000000000005E42                 db  42h ; B
.eh_frame:0000000000005E43                 db  0Eh
.eh_frame:0000000000005E44                 db  18h
.eh_frame:0000000000005E45                 db  8Eh
.eh_frame:0000000000005E46                 db    3
.eh_frame:0000000000005E47                 db  45h ; E
.eh_frame:0000000000005E48                 db  0Eh
.eh_frame:0000000000005E49                 db  20h
.eh_frame:0000000000005E4A                 db  8Dh
.eh_frame:0000000000005E4B                 db    4
.eh_frame:0000000000005E4C                 db  42h ; B
.eh_frame:0000000000005E4D                 db  0Eh
.eh_frame:0000000000005E4E                 db  28h ; (
.eh_frame:0000000000005E4F                 db  8Ch
.eh_frame:0000000000005E50                 db    5
.eh_frame:0000000000005E51                 db  44h ; D
.eh_frame:0000000000005E52                 db  0Eh
.eh_frame:0000000000005E53                 db  30h ; 0
.eh_frame:0000000000005E54                 db  86h
.eh_frame:0000000000005E55                 db    6
.eh_frame:0000000000005E56                 db  41h ; A
.eh_frame:0000000000005E57                 db  0Eh
.eh_frame:0000000000005E58                 db  38h ; 8
.eh_frame:0000000000005E59                 db  83h
.eh_frame:0000000000005E5A                 db    7
.eh_frame:0000000000005E5B                 db  47h ; G
.eh_frame:0000000000005E5C                 db  0Eh
.eh_frame:0000000000005E5D                 db  60h ; `
.eh_frame:0000000000005E5E                 db    2
.eh_frame:0000000000005E5F                 db  99h
.eh_frame:0000000000005E60                 db  0Eh
.eh_frame:0000000000005E61                 db  68h ; h
.eh_frame:0000000000005E62                 db  5Fh ; _
.eh_frame:0000000000005E63                 db  0Eh
.eh_frame:0000000000005E64                 db  70h ; p
.eh_frame:0000000000005E65                 db  46h ; F
.eh_frame:0000000000005E66                 db  0Eh
.eh_frame:0000000000005E67                 db  78h ; x
.eh_frame:0000000000005E68                 db  42h ; B
.eh_frame:0000000000005E69                 db  0Eh
.eh_frame:0000000000005E6A                 db  80h
.eh_frame:0000000000005E6B                 db    1
.eh_frame:0000000000005E6C                 db  59h ; Y
.eh_frame:0000000000005E6D                 db  0Eh
.eh_frame:0000000000005E6E                 db  60h ; `
.eh_frame:0000000000005E6F                 db    2
.eh_frame:0000000000005E70                 db  40h ; @
.eh_frame:0000000000005E71                 db  0Eh
.eh_frame:0000000000005E72                 db  68h ; h
.eh_frame:0000000000005E73                 db  4Bh ; K
.eh_frame:0000000000005E74                 db  0Eh
.eh_frame:0000000000005E75                 db  70h ; p
.eh_frame:0000000000005E76                 db  43h ; C
.eh_frame:0000000000005E77                 db  0Eh
.eh_frame:0000000000005E78                 db  78h ; x
.eh_frame:0000000000005E79                 db  45h ; E
.eh_frame:0000000000005E7A                 db  0Eh
.eh_frame:0000000000005E7B                 db  80h
.eh_frame:0000000000005E7C                 db    1
.eh_frame:0000000000005E7D                 db  5Eh ; ^
.eh_frame:0000000000005E7E                 db  0Eh
.eh_frame:0000000000005E7F                 db  60h ; `
.eh_frame:0000000000005E80                 db  4Ch ; L
.eh_frame:0000000000005E81                 db  0Ah
.eh_frame:0000000000005E82                 db  0Eh
.eh_frame:0000000000005E83                 db  38h ; 8
.eh_frame:0000000000005E84                 db  44h ; D
.eh_frame:0000000000005E85                 db  0Eh
.eh_frame:0000000000005E86                 db  30h ; 0
.eh_frame:0000000000005E87                 db  41h ; A
.eh_frame:0000000000005E88                 db  0Eh
.eh_frame:0000000000005E89                 db  28h ; (
.eh_frame:0000000000005E8A                 db  42h ; B
.eh_frame:0000000000005E8B                 db  0Eh
.eh_frame:0000000000005E8C                 db  20h
.eh_frame:0000000000005E8D                 db  42h ; B
.eh_frame:0000000000005E8E                 db  0Eh
.eh_frame:0000000000005E8F                 db  18h
.eh_frame:0000000000005E90                 db  42h ; B
.eh_frame:0000000000005E91                 db  0Eh
.eh_frame:0000000000005E92                 db  10h
.eh_frame:0000000000005E93                 db  42h ; B
.eh_frame:0000000000005E94                 db  0Eh
.eh_frame:0000000000005E95                 db    8
.eh_frame:0000000000005E96                 db  46h ; F
.eh_frame:0000000000005E97                 db  0Bh
.eh_frame:0000000000005E98                 db  28h ; (
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db  94h
.eh_frame:0000000000005E9D                 db    2
.eh_frame:0000000000005E9E                 db    0
.eh_frame:0000000000005E9F                 db    0
.eh_frame:0000000000005EA0                 db 0D0h
.eh_frame:0000000000005EA1                 db 0D6h
.eh_frame:0000000000005EA2                 db 0FFh
.eh_frame:0000000000005EA3                 db 0FFh
.eh_frame:0000000000005EA4                 db  36h ; 6
.eh_frame:0000000000005EA5                 db    0
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db    0
.eh_frame:0000000000005EA9                 db  42h ; B
.eh_frame:0000000000005EAA                 db  0Eh
.eh_frame:0000000000005EAB                 db  10h
.eh_frame:0000000000005EAC                 db  8Ch
.eh_frame:0000000000005EAD                 db    2
.eh_frame:0000000000005EAE                 db  41h ; A
.eh_frame:0000000000005EAF                 db  0Eh
.eh_frame:0000000000005EB0                 db  18h
.eh_frame:0000000000005EB1                 db  86h
.eh_frame:0000000000005EB2                 db    3
.eh_frame:0000000000005EB3                 db  41h ; A
.eh_frame:0000000000005EB4                 db  0Eh
.eh_frame:0000000000005EB5                 db  20h
.eh_frame:0000000000005EB6                 db  83h
.eh_frame:0000000000005EB7                 db    4
.eh_frame:0000000000005EB8                 db  6Eh ; n
.eh_frame:0000000000005EB9                 db  0Eh
.eh_frame:0000000000005EBA                 db  18h
.eh_frame:0000000000005EBB                 db  41h ; A
.eh_frame:0000000000005EBC                 db  0Eh
.eh_frame:0000000000005EBD                 db  10h
.eh_frame:0000000000005EBE                 db  42h ; B
.eh_frame:0000000000005EBF                 db  0Eh
.eh_frame:0000000000005EC0                 db    8
.eh_frame:0000000000005EC1                 db    0
.eh_frame:0000000000005EC2                 db    0
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db  10h
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db 0C0h
.eh_frame:0000000000005EC9                 db    2
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db 0E4h
.eh_frame:0000000000005ECD                 db 0D6h
.eh_frame:0000000000005ECE                 db 0FFh
.eh_frame:0000000000005ECF                 db 0FFh
.eh_frame:0000000000005ED0                 db  11h
.eh_frame:0000000000005ED1                 db    0
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db    0
.eh_frame:0000000000005ED5                 db    0
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db  10h
.eh_frame:0000000000005ED9                 db    0
.eh_frame:0000000000005EDA                 db    0
.eh_frame:0000000000005EDB                 db    0
.eh_frame:0000000000005EDC                 db 0D4h
.eh_frame:0000000000005EDD                 db    2
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db 0F0h
.eh_frame:0000000000005EE1                 db 0D6h
.eh_frame:0000000000005EE2                 db 0FFh
.eh_frame:0000000000005EE3                 db 0FFh
.eh_frame:0000000000005EE4                 db  11h
.eh_frame:0000000000005EE5                 db    0
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db    0
.eh_frame:0000000000005EE9                 db    0
.eh_frame:0000000000005EEA                 db    0
.eh_frame:0000000000005EEB                 db    0
.eh_frame:0000000000005EEC                 db  10h
.eh_frame:0000000000005EED                 db    0
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db 0E8h
.eh_frame:0000000000005EF1                 db    2
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db 0FCh
.eh_frame:0000000000005EF5                 db 0D6h
.eh_frame:0000000000005EF6                 db 0FFh
.eh_frame:0000000000005EF7                 db 0FFh
.eh_frame:0000000000005EF8                 db  35h ; 5
.eh_frame:0000000000005EF9                 db    0
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db    0
.eh_frame:0000000000005EFD                 db    0
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db  10h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db 0FCh
.eh_frame:0000000000005F05                 db    2
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  28h ; (
.eh_frame:0000000000005F09                 db 0D7h
.eh_frame:0000000000005F0A                 db 0FFh
.eh_frame:0000000000005F0B                 db 0FFh
.eh_frame:0000000000005F0C                 db  15h
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db    0
.eh_frame:0000000000005F11                 db    0
.eh_frame:0000000000005F12                 db    0
.eh_frame:0000000000005F13                 db    0
.eh_frame:0000000000005F14                 db  10h
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db  10h
.eh_frame:0000000000005F19                 db    3
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db  34h ; 4
.eh_frame:0000000000005F1D                 db 0D7h
.eh_frame:0000000000005F1E                 db 0FFh
.eh_frame:0000000000005F1F                 db 0FFh
.eh_frame:0000000000005F20                 db  30h ; 0
.eh_frame:0000000000005F21                 db    0
.eh_frame:0000000000005F22                 db    0
.eh_frame:0000000000005F23                 db    0
.eh_frame:0000000000005F24                 db    0
.eh_frame:0000000000005F25                 db  6Bh ; k
.eh_frame:0000000000005F26                 db  0Eh
.eh_frame:0000000000005F27                 db  10h
.eh_frame:0000000000005F28                 db  50h ; P
.eh_frame:0000000000005F29                 db    0
.eh_frame:0000000000005F2A                 db    0
.eh_frame:0000000000005F2B                 db    0
.eh_frame:0000000000005F2C                 db  24h ; $
.eh_frame:0000000000005F2D                 db    3
.eh_frame:0000000000005F2E                 db    0
.eh_frame:0000000000005F2F                 db    0
.eh_frame:0000000000005F30                 db  50h ; P
.eh_frame:0000000000005F31                 db 0D7h
.eh_frame:0000000000005F32                 db 0FFh
.eh_frame:0000000000005F33                 db 0FFh
.eh_frame:0000000000005F34                 db  74h ; t
.eh_frame:0000000000005F35                 db    0
.eh_frame:0000000000005F36                 db    0
.eh_frame:0000000000005F37                 db    0
.eh_frame:0000000000005F38                 db    0
.eh_frame:0000000000005F39                 db  42h ; B
.eh_frame:0000000000005F3A                 db  0Eh
.eh_frame:0000000000005F3B                 db  10h
.eh_frame:0000000000005F3C                 db  8Fh
.eh_frame:0000000000005F3D                 db    2
.eh_frame:0000000000005F3E                 db  42h ; B
.eh_frame:0000000000005F3F                 db  0Eh
.eh_frame:0000000000005F40                 db  18h
.eh_frame:0000000000005F41                 db  8Eh
.eh_frame:0000000000005F42                 db    3
.eh_frame:0000000000005F43                 db  49h ; I
.eh_frame:0000000000005F44                 db  0Eh
.eh_frame:0000000000005F45                 db  20h
.eh_frame:0000000000005F46                 db  8Dh
.eh_frame:0000000000005F47                 db    4
.eh_frame:0000000000005F48                 db  42h ; B
.eh_frame:0000000000005F49                 db  0Eh
.eh_frame:0000000000005F4A                 db  28h ; (
.eh_frame:0000000000005F4B                 db  8Ch
.eh_frame:0000000000005F4C                 db    5
.eh_frame:0000000000005F4D                 db  44h ; D
.eh_frame:0000000000005F4E                 db  0Eh
.eh_frame:0000000000005F4F                 db  30h ; 0
.eh_frame:0000000000005F50                 db  86h
.eh_frame:0000000000005F51                 db    6
.eh_frame:0000000000005F52                 db  41h ; A
.eh_frame:0000000000005F53                 db  0Eh
.eh_frame:0000000000005F54                 db  38h ; 8
.eh_frame:0000000000005F55                 db  83h
.eh_frame:0000000000005F56                 db    7
.eh_frame:0000000000005F57                 db  4Dh ; M
.eh_frame:0000000000005F58                 db  0Eh
.eh_frame:0000000000005F59                 db  50h ; P
.eh_frame:0000000000005F5A                 db  5Fh ; _
.eh_frame:0000000000005F5B                 db  0Eh
.eh_frame:0000000000005F5C                 db  58h ; X
.eh_frame:0000000000005F5D                 db  47h ; G
.eh_frame:0000000000005F5E                 db  0Eh
.eh_frame:0000000000005F5F                 db  60h ; `
.eh_frame:0000000000005F60                 db  46h ; F
.eh_frame:0000000000005F61                 db  0Eh
.eh_frame:0000000000005F62                 db  68h ; h
.eh_frame:0000000000005F63                 db  44h ; D
.eh_frame:0000000000005F64                 db  0Eh
.eh_frame:0000000000005F65                 db  70h ; p
.eh_frame:0000000000005F66                 db  58h ; X
.eh_frame:0000000000005F67                 db  0Eh
.eh_frame:0000000000005F68                 db  38h ; 8
.eh_frame:0000000000005F69                 db  41h ; A
.eh_frame:0000000000005F6A                 db  0Eh
.eh_frame:0000000000005F6B                 db  30h ; 0
.eh_frame:0000000000005F6C                 db  41h ; A
.eh_frame:0000000000005F6D                 db  0Eh
.eh_frame:0000000000005F6E                 db  28h ; (
.eh_frame:0000000000005F6F                 db  42h ; B
.eh_frame:0000000000005F70                 db  0Eh
.eh_frame:0000000000005F71                 db  20h
.eh_frame:0000000000005F72                 db  42h ; B
.eh_frame:0000000000005F73                 db  0Eh
.eh_frame:0000000000005F74                 db  18h
.eh_frame:0000000000005F75                 db  42h ; B
.eh_frame:0000000000005F76                 db  0Eh
.eh_frame:0000000000005F77                 db  10h
.eh_frame:0000000000005F78                 db  42h ; B
.eh_frame:0000000000005F79                 db  0Eh
.eh_frame:0000000000005F7A                 db    8
.eh_frame:0000000000005F7B                 db    0
.eh_frame:0000000000005F7C                 db  68h ; h
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db  78h ; x
.eh_frame:0000000000005F81                 db    3
.eh_frame:0000000000005F82                 db    0
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db  7Ch ; |
.eh_frame:0000000000005F85                 db 0D7h
.eh_frame:0000000000005F86                 db 0FFh
.eh_frame:0000000000005F87                 db 0FFh
.eh_frame:0000000000005F88                 db 0E3h
.eh_frame:0000000000005F89                 db    0
.eh_frame:0000000000005F8A                 db    0
.eh_frame:0000000000005F8B                 db    0
.eh_frame:0000000000005F8C                 db    0
.eh_frame:0000000000005F8D                 db  42h ; B
.eh_frame:0000000000005F8E                 db  0Eh
.eh_frame:0000000000005F8F                 db  10h
.eh_frame:0000000000005F90                 db  8Fh
.eh_frame:0000000000005F91                 db    2
.eh_frame:0000000000005F92                 db  42h ; B
.eh_frame:0000000000005F93                 db  0Eh
.eh_frame:0000000000005F94                 db  18h
.eh_frame:0000000000005F95                 db  8Eh
.eh_frame:0000000000005F96                 db    3
.eh_frame:0000000000005F97                 db  49h ; I
.eh_frame:0000000000005F98                 db  0Eh
.eh_frame:0000000000005F99                 db  20h
.eh_frame:0000000000005F9A                 db  8Dh
.eh_frame:0000000000005F9B                 db    4
.eh_frame:0000000000005F9C                 db  42h ; B
.eh_frame:0000000000005F9D                 db  0Eh
.eh_frame:0000000000005F9E                 db  28h ; (
.eh_frame:0000000000005F9F                 db  8Ch
.eh_frame:0000000000005FA0                 db    5
.eh_frame:0000000000005FA1                 db  44h ; D
.eh_frame:0000000000005FA2                 db  0Eh
.eh_frame:0000000000005FA3                 db  30h ; 0
.eh_frame:0000000000005FA4                 db  86h
.eh_frame:0000000000005FA5                 db    6
.eh_frame:0000000000005FA6                 db  41h ; A
.eh_frame:0000000000005FA7                 db  0Eh
.eh_frame:0000000000005FA8                 db  38h ; 8
.eh_frame:0000000000005FA9                 db  83h
.eh_frame:0000000000005FAA                 db    7
.eh_frame:0000000000005FAB                 db  4Dh ; M
.eh_frame:0000000000005FAC                 db  0Eh
.eh_frame:0000000000005FAD                 db  70h ; p
.eh_frame:0000000000005FAE                 db  65h ; e
.eh_frame:0000000000005FAF                 db  0Eh
.eh_frame:0000000000005FB0                 db  78h ; x
.eh_frame:0000000000005FB1                 db  4Dh ; M
.eh_frame:0000000000005FB2                 db  0Eh
.eh_frame:0000000000005FB3                 db  80h
.eh_frame:0000000000005FB4                 db    1
.eh_frame:0000000000005FB5                 db  46h ; F
.eh_frame:0000000000005FB6                 db  0Eh
.eh_frame:0000000000005FB7                 db  88h
.eh_frame:0000000000005FB8                 db    1
.eh_frame:0000000000005FB9                 db  42h ; B
.eh_frame:0000000000005FBA                 db  0Eh
.eh_frame:0000000000005FBB                 db  90h
.eh_frame:0000000000005FBC                 db    1
.eh_frame:0000000000005FBD                 db  5Eh ; ^
.eh_frame:0000000000005FBE                 db  0Eh
.eh_frame:0000000000005FBF                 db  70h ; p
.eh_frame:0000000000005FC0                 db  56h ; V
.eh_frame:0000000000005FC1                 db  0Eh
.eh_frame:0000000000005FC2                 db  78h ; x
.eh_frame:0000000000005FC3                 db  43h ; C
.eh_frame:0000000000005FC4                 db  0Eh
.eh_frame:0000000000005FC5                 db  80h
.eh_frame:0000000000005FC6                 db    1
.eh_frame:0000000000005FC7                 db  43h ; C
.eh_frame:0000000000005FC8                 db  0Eh
.eh_frame:0000000000005FC9                 db  88h
.eh_frame:0000000000005FCA                 db    1
.eh_frame:0000000000005FCB                 db  56h ; V
.eh_frame:0000000000005FCC                 db  0Eh
.eh_frame:0000000000005FCD                 db  90h
.eh_frame:0000000000005FCE                 db    1
.eh_frame:0000000000005FCF                 db  52h ; R
.eh_frame:0000000000005FD0                 db  0Eh
.eh_frame:0000000000005FD1                 db  70h ; p
.eh_frame:0000000000005FD2                 db  5Bh ; [
.eh_frame:0000000000005FD3                 db  0Eh
.eh_frame:0000000000005FD4                 db  38h ; 8
.eh_frame:0000000000005FD5                 db  41h ; A
.eh_frame:0000000000005FD6                 db  0Eh
.eh_frame:0000000000005FD7                 db  30h ; 0
.eh_frame:0000000000005FD8                 db  41h ; A
.eh_frame:0000000000005FD9                 db  0Eh
.eh_frame:0000000000005FDA                 db  28h ; (
.eh_frame:0000000000005FDB                 db  42h ; B
.eh_frame:0000000000005FDC                 db  0Eh
.eh_frame:0000000000005FDD                 db  20h
.eh_frame:0000000000005FDE                 db  42h ; B
.eh_frame:0000000000005FDF                 db  0Eh
.eh_frame:0000000000005FE0                 db  18h
.eh_frame:0000000000005FE1                 db  42h ; B
.eh_frame:0000000000005FE2                 db  0Eh
.eh_frame:0000000000005FE3                 db  10h
.eh_frame:0000000000005FE4                 db  42h ; B
.eh_frame:0000000000005FE5                 db  0Eh
.eh_frame:0000000000005FE6                 db    8
.eh_frame:0000000000005FE7                 db    0
.eh_frame:0000000000005FE8                 db  10h
.eh_frame:0000000000005FE9                 db    0
.eh_frame:0000000000005FEA                 db    0
.eh_frame:0000000000005FEB                 db    0
.eh_frame:0000000000005FEC                 db 0E4h
.eh_frame:0000000000005FED                 db    3
.eh_frame:0000000000005FEE                 db    0
.eh_frame:0000000000005FEF                 db    0
.eh_frame:0000000000005FF0                 db    0
.eh_frame:0000000000005FF1                 db 0D8h
.eh_frame:0000000000005FF2                 db 0FFh
.eh_frame:0000000000005FF3                 db 0FFh
.eh_frame:0000000000005FF4                 db  0Ah
.eh_frame:0000000000005FF5                 db    0
.eh_frame:0000000000005FF6                 db    0
.eh_frame:0000000000005FF7                 db    0
.eh_frame:0000000000005FF8                 db    0
.eh_frame:0000000000005FF9                 db    0
.eh_frame:0000000000005FFA                 db    0
.eh_frame:0000000000005FFB                 db    0
.eh_frame:0000000000005FFC                 db  28h ; (
.eh_frame:0000000000005FFD                 db    0
.eh_frame:0000000000005FFE                 db    0
.eh_frame:0000000000005FFF                 db    0
.eh_frame:0000000000006000                 db 0F8h
.eh_frame:0000000000006001                 db    3
.eh_frame:0000000000006002                 db    0
.eh_frame:0000000000006003                 db    0
.eh_frame:0000000000006004                 db 0FCh
.eh_frame:0000000000006005                 db 0D7h
.eh_frame:0000000000006006                 db 0FFh
.eh_frame:0000000000006007                 db 0FFh
.eh_frame:0000000000006008                 db  93h
.eh_frame:0000000000006009                 db    0
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db    0
.eh_frame:000000000000600D                 db  48h ; H
.eh_frame:000000000000600E                 db  0Eh
.eh_frame:000000000000600F                 db  10h
.eh_frame:0000000000006010                 db  8Ch
.eh_frame:0000000000006011                 db    2
.eh_frame:0000000000006012                 db  48h ; H
.eh_frame:0000000000006013                 db  0Eh
.eh_frame:0000000000006014                 db  18h
.eh_frame:0000000000006015                 db  86h
.eh_frame:0000000000006016                 db    3
.eh_frame:0000000000006017                 db  41h ; A
.eh_frame:0000000000006018                 db  0Eh
.eh_frame:0000000000006019                 db  20h
.eh_frame:000000000000601A                 db  83h
.eh_frame:000000000000601B                 db    4
.eh_frame:000000000000601C                 db    2
.eh_frame:000000000000601D                 db  74h ; t
.eh_frame:000000000000601E                 db  0Eh
.eh_frame:000000000000601F                 db  18h
.eh_frame:0000000000006020                 db  4Bh ; K
.eh_frame:0000000000006021                 db  0Eh
.eh_frame:0000000000006022                 db  10h
.eh_frame:0000000000006023                 db  42h ; B
.eh_frame:0000000000006024                 db  0Eh
.eh_frame:0000000000006025                 db    8
.eh_frame:0000000000006026                 db    0
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db  10h
.eh_frame:0000000000006029                 db    0
.eh_frame:000000000000602A                 db    0
.eh_frame:000000000000602B                 db    0
.eh_frame:000000000000602C                 db  24h ; $
.eh_frame:000000000000602D                 db    4
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db  70h ; p
.eh_frame:0000000000006031                 db 0D8h
.eh_frame:0000000000006032                 db 0FFh
.eh_frame:0000000000006033                 db 0FFh
.eh_frame:0000000000006034                 db  13h
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db    0
.eh_frame:0000000000006039                 db    0
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db  10h
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db  38h ; 8
.eh_frame:0000000000006041                 db    4
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db  7Ch ; |
.eh_frame:0000000000006045                 db 0D8h
.eh_frame:0000000000006046                 db 0FFh
.eh_frame:0000000000006047                 db 0FFh
.eh_frame:0000000000006048                 db  0Ch
.eh_frame:0000000000006049                 db    0
.eh_frame:000000000000604A                 db    0
.eh_frame:000000000000604B                 db    0
.eh_frame:000000000000604C                 db    0
.eh_frame:000000000000604D                 db    0
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db  10h
.eh_frame:0000000000006051                 db    0
.eh_frame:0000000000006052                 db    0
.eh_frame:0000000000006053                 db    0
.eh_frame:0000000000006054                 db  4Ch ; L
.eh_frame:0000000000006055                 db    4
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db  78h ; x
.eh_frame:0000000000006059                 db 0D8h
.eh_frame:000000000000605A                 db 0FFh
.eh_frame:000000000000605B                 db 0FFh
.eh_frame:000000000000605C                 db  18h
.eh_frame:000000000000605D                 db    0
.eh_frame:000000000000605E                 db    0
.eh_frame:000000000000605F                 db    0
.eh_frame:0000000000006060                 db    0
.eh_frame:0000000000006061                 db    0
.eh_frame:0000000000006062                 db    0
.eh_frame:0000000000006063                 db    0
.eh_frame:0000000000006064                 db  10h
.eh_frame:0000000000006065                 db    0
.eh_frame:0000000000006066                 db    0
.eh_frame:0000000000006067                 db    0
.eh_frame:0000000000006068                 db  60h ; `
.eh_frame:0000000000006069                 db    4
.eh_frame:000000000000606A                 db    0
.eh_frame:000000000000606B                 db    0
.eh_frame:000000000000606C                 db  84h
.eh_frame:000000000000606D                 db 0D8h
.eh_frame:000000000000606E                 db 0FFh
.eh_frame:000000000000606F                 db 0FFh
.eh_frame:0000000000006070                 db  14h
.eh_frame:0000000000006071                 db    0
.eh_frame:0000000000006072                 db    0
.eh_frame:0000000000006073                 db    0
.eh_frame:0000000000006074                 db    0
.eh_frame:0000000000006075                 db    0
.eh_frame:0000000000006076                 db    0
.eh_frame:0000000000006077                 db    0
.eh_frame:0000000000006078                 db  18h
.eh_frame:0000000000006079                 db    0
.eh_frame:000000000000607A                 db    0
.eh_frame:000000000000607B                 db    0
.eh_frame:000000000000607C                 db  74h ; t
.eh_frame:000000000000607D                 db    4
.eh_frame:000000000000607E                 db    0
.eh_frame:000000000000607F                 db    0
.eh_frame:0000000000006080                 db  90h
.eh_frame:0000000000006081                 db 0D8h
.eh_frame:0000000000006082                 db 0FFh
.eh_frame:0000000000006083                 db 0FFh
.eh_frame:0000000000006084                 db  8Eh
.eh_frame:0000000000006085                 db    0
.eh_frame:0000000000006086                 db    0
.eh_frame:0000000000006087                 db    0
.eh_frame:0000000000006088                 db    0
.eh_frame:0000000000006089                 db  44h ; D
.eh_frame:000000000000608A                 db  0Eh
.eh_frame:000000000000608B                 db  50h ; P
.eh_frame:000000000000608C                 db    2
.eh_frame:000000000000608D                 db  7Fh ; 
.eh_frame:000000000000608E                 db  0Ah
.eh_frame:000000000000608F                 db  0Eh
.eh_frame:0000000000006090                 db    8
.eh_frame:0000000000006091                 db  41h ; A
.eh_frame:0000000000006092                 db  0Bh
.eh_frame:0000000000006093                 db    0
.eh_frame:0000000000006094                 db  18h
.eh_frame:0000000000006095                 db    0
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db  90h
.eh_frame:0000000000006099                 db    4
.eh_frame:000000000000609A                 db    0
.eh_frame:000000000000609B                 db    0
.eh_frame:000000000000609C                 db    4
.eh_frame:000000000000609D                 db 0D9h
.eh_frame:000000000000609E                 db 0FFh
.eh_frame:000000000000609F                 db 0FFh
.eh_frame:00000000000060A0                 db  8Ah
.eh_frame:00000000000060A1                 db    0
.eh_frame:00000000000060A2                 db    0
.eh_frame:00000000000060A3                 db    0
.eh_frame:00000000000060A4                 db    0
.eh_frame:00000000000060A5                 db  44h ; D
.eh_frame:00000000000060A6                 db  0Eh
.eh_frame:00000000000060A7                 db  50h ; P
.eh_frame:00000000000060A8                 db    2
.eh_frame:00000000000060A9                 db  7Bh ; {
.eh_frame:00000000000060AA                 db  0Ah
.eh_frame:00000000000060AB                 db  0Eh
.eh_frame:00000000000060AC                 db    8
.eh_frame:00000000000060AD                 db  41h ; A
.eh_frame:00000000000060AE                 db  0Bh
.eh_frame:00000000000060AF                 db    0
.eh_frame:00000000000060B0                 db  10h
.eh_frame:00000000000060B1                 db    0
.eh_frame:00000000000060B2                 db    0
.eh_frame:00000000000060B3                 db    0
.eh_frame:00000000000060B4                 db 0ACh
.eh_frame:00000000000060B5                 db    4
.eh_frame:00000000000060B6                 db    0
.eh_frame:00000000000060B7                 db    0
.eh_frame:00000000000060B8                 db  78h ; x
.eh_frame:00000000000060B9                 db 0D9h
.eh_frame:00000000000060BA                 db 0FFh
.eh_frame:00000000000060BB                 db 0FFh
.eh_frame:00000000000060BC                 db  0Ch
.eh_frame:00000000000060BD                 db    0
.eh_frame:00000000000060BE                 db    0
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db    0
.eh_frame:00000000000060C1                 db    0
.eh_frame:00000000000060C2                 db    0
.eh_frame:00000000000060C3                 db    0
.eh_frame:00000000000060C4                 db  10h
.eh_frame:00000000000060C5                 db    0
.eh_frame:00000000000060C6                 db    0
.eh_frame:00000000000060C7                 db    0
.eh_frame:00000000000060C8                 db 0C0h
.eh_frame:00000000000060C9                 db    4
.eh_frame:00000000000060CA                 db    0
.eh_frame:00000000000060CB                 db    0
.eh_frame:00000000000060CC                 db  74h ; t
.eh_frame:00000000000060CD                 db 0D9h
.eh_frame:00000000000060CE                 db 0FFh
.eh_frame:00000000000060CF                 db 0FFh
.eh_frame:00000000000060D0                 db  0Fh
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db    0
.eh_frame:00000000000060D5                 db    0
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db  18h
.eh_frame:00000000000060D9                 db    0
.eh_frame:00000000000060DA                 db    0
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db 0D4h
.eh_frame:00000000000060DD                 db    4
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db  70h ; p
.eh_frame:00000000000060E1                 db 0D9h
.eh_frame:00000000000060E2                 db 0FFh
.eh_frame:00000000000060E3                 db 0FFh
.eh_frame:00000000000060E4                 db  98h
.eh_frame:00000000000060E5                 db    0
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db    0
.eh_frame:00000000000060E9                 db  44h ; D
.eh_frame:00000000000060EA                 db  0Eh
.eh_frame:00000000000060EB                 db  50h ; P
.eh_frame:00000000000060EC                 db    2
.eh_frame:00000000000060ED                 db  8Eh
.eh_frame:00000000000060EE                 db  0Ah
.eh_frame:00000000000060EF                 db  0Eh
.eh_frame:00000000000060F0                 db    8
.eh_frame:00000000000060F1                 db  41h ; A
.eh_frame:00000000000060F2                 db  0Bh
.eh_frame:00000000000060F3                 db    0
.eh_frame:00000000000060F4                 db  10h
.eh_frame:00000000000060F5                 db    0
.eh_frame:00000000000060F6                 db    0
.eh_frame:00000000000060F7                 db    0
.eh_frame:00000000000060F8                 db 0F0h
.eh_frame:00000000000060F9                 db    4
.eh_frame:00000000000060FA                 db    0
.eh_frame:00000000000060FB                 db    0
.eh_frame:00000000000060FC                 db 0F4h
.eh_frame:00000000000060FD                 db 0D9h
.eh_frame:00000000000060FE                 db 0FFh
.eh_frame:00000000000060FF                 db 0FFh
.eh_frame:0000000000006100                 db  10h
.eh_frame:0000000000006101                 db    0
.eh_frame:0000000000006102                 db    0
.eh_frame:0000000000006103                 db    0
.eh_frame:0000000000006104                 db    0
.eh_frame:0000000000006105                 db    0
.eh_frame:0000000000006106                 db    0
.eh_frame:0000000000006107                 db    0
.eh_frame:0000000000006108                 db  10h
.eh_frame:0000000000006109                 db    0
.eh_frame:000000000000610A                 db    0
.eh_frame:000000000000610B                 db    0
.eh_frame:000000000000610C                 db    4
.eh_frame:000000000000610D                 db    5
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db 0F0h
.eh_frame:0000000000006111                 db 0D9h
.eh_frame:0000000000006112                 db 0FFh
.eh_frame:0000000000006113                 db 0FFh
.eh_frame:0000000000006114                 db  11h
.eh_frame:0000000000006115                 db    0
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db    0
.eh_frame:0000000000006119                 db    0
.eh_frame:000000000000611A                 db    0
.eh_frame:000000000000611B                 db    0
.eh_frame:000000000000611C                 db  10h
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db  18h
.eh_frame:0000000000006121                 db    5
.eh_frame:0000000000006122                 db    0
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db 0FCh
.eh_frame:0000000000006125                 db 0D9h
.eh_frame:0000000000006126                 db 0FFh
.eh_frame:0000000000006127                 db 0FFh
.eh_frame:0000000000006128                 db  0Ah
.eh_frame:0000000000006129                 db    0
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db    0
.eh_frame:000000000000612D                 db    0
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db  18h
.eh_frame:0000000000006131                 db    0
.eh_frame:0000000000006132                 db    0
.eh_frame:0000000000006133                 db    0
.eh_frame:0000000000006134                 db  2Ch ; ,
.eh_frame:0000000000006135                 db    5
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db 0F8h
.eh_frame:0000000000006139                 db 0D9h
.eh_frame:000000000000613A                 db 0FFh
.eh_frame:000000000000613B                 db 0FFh
.eh_frame:000000000000613C                 db  8Eh
.eh_frame:000000000000613D                 db    0
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db    0
.eh_frame:0000000000006141                 db  44h ; D
.eh_frame:0000000000006142                 db  0Eh
.eh_frame:0000000000006143                 db  50h ; P
.eh_frame:0000000000006144                 db    2
.eh_frame:0000000000006145                 db  7Fh ; 
.eh_frame:0000000000006146                 db  0Ah
.eh_frame:0000000000006147                 db  0Eh
.eh_frame:0000000000006148                 db    8
.eh_frame:0000000000006149                 db  41h ; A
.eh_frame:000000000000614A                 db  0Bh
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db  18h
.eh_frame:000000000000614D                 db    0
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db  48h ; H
.eh_frame:0000000000006151                 db    5
.eh_frame:0000000000006152                 db    0
.eh_frame:0000000000006153                 db    0
.eh_frame:0000000000006154                 db  6Ch ; l
.eh_frame:0000000000006155                 db 0DAh
.eh_frame:0000000000006156                 db 0FFh
.eh_frame:0000000000006157                 db 0FFh
.eh_frame:0000000000006158                 db  91h
.eh_frame:0000000000006159                 db    0
.eh_frame:000000000000615A                 db    0
.eh_frame:000000000000615B                 db    0
.eh_frame:000000000000615C                 db    0
.eh_frame:000000000000615D                 db  44h ; D
.eh_frame:000000000000615E                 db  0Eh
.eh_frame:000000000000615F                 db  50h ; P
.eh_frame:0000000000006160                 db    2
.eh_frame:0000000000006161                 db  82h
.eh_frame:0000000000006162                 db  0Ah
.eh_frame:0000000000006163                 db  0Eh
.eh_frame:0000000000006164                 db    8
.eh_frame:0000000000006165                 db  41h ; A
.eh_frame:0000000000006166                 db  0Bh
.eh_frame:0000000000006167                 db    0
.eh_frame:0000000000006168                 db  10h
.eh_frame:0000000000006169                 db    0
.eh_frame:000000000000616A                 db    0
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db  64h ; d
.eh_frame:000000000000616D                 db    5
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db 0F0h
.eh_frame:0000000000006171                 db 0DAh
.eh_frame:0000000000006172                 db 0FFh
.eh_frame:0000000000006173                 db 0FFh
.eh_frame:0000000000006174                 db  0Ch
.eh_frame:0000000000006175                 db    0
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db    0
.eh_frame:0000000000006179                 db    0
.eh_frame:000000000000617A                 db    0
.eh_frame:000000000000617B                 db    0
.eh_frame:000000000000617C                 db  10h
.eh_frame:000000000000617D                 db    0
.eh_frame:000000000000617E                 db    0
.eh_frame:000000000000617F                 db    0
.eh_frame:0000000000006180                 db  78h ; x
.eh_frame:0000000000006181                 db    5
.eh_frame:0000000000006182                 db    0
.eh_frame:0000000000006183                 db    0
.eh_frame:0000000000006184                 db 0ECh
.eh_frame:0000000000006185                 db 0DAh
.eh_frame:0000000000006186                 db 0FFh
.eh_frame:0000000000006187                 db 0FFh
.eh_frame:0000000000006188                 db  17h
.eh_frame:0000000000006189                 db    0
.eh_frame:000000000000618A                 db    0
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db    0
.eh_frame:000000000000618D                 db    0
.eh_frame:000000000000618E                 db    0
.eh_frame:000000000000618F                 db    0
.eh_frame:0000000000006190                 db  10h
.eh_frame:0000000000006191                 db    0
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db  8Ch
.eh_frame:0000000000006195                 db    5
.eh_frame:0000000000006196                 db    0
.eh_frame:0000000000006197                 db    0
.eh_frame:0000000000006198                 db 0F8h
.eh_frame:0000000000006199                 db 0DAh
.eh_frame:000000000000619A                 db 0FFh
.eh_frame:000000000000619B                 db 0FFh
.eh_frame:000000000000619C                 db  13h
.eh_frame:000000000000619D                 db    0
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db    0
.eh_frame:00000000000061A1                 db    0
.eh_frame:00000000000061A2                 db    0
.eh_frame:00000000000061A3                 db    0
.eh_frame:00000000000061A4                 db  10h
.eh_frame:00000000000061A5                 db    0
.eh_frame:00000000000061A6                 db    0
.eh_frame:00000000000061A7                 db    0
.eh_frame:00000000000061A8                 db 0A0h
.eh_frame:00000000000061A9                 db    5
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db    4
.eh_frame:00000000000061AD                 db 0DBh
.eh_frame:00000000000061AE                 db 0FFh
.eh_frame:00000000000061AF                 db 0FFh
.eh_frame:00000000000061B0                 db  0Ch
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db    0
.eh_frame:00000000000061B5                 db    0
.eh_frame:00000000000061B6                 db    0
.eh_frame:00000000000061B7                 db    0
.eh_frame:00000000000061B8                 db  10h
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db 0B4h
.eh_frame:00000000000061BD                 db    5
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db    0
.eh_frame:00000000000061C1                 db 0DBh
.eh_frame:00000000000061C2                 db 0FFh
.eh_frame:00000000000061C3                 db 0FFh
.eh_frame:00000000000061C4                 db  14h
.eh_frame:00000000000061C5                 db    0
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db    0
.eh_frame:00000000000061C9                 db    0
.eh_frame:00000000000061CA                 db    0
.eh_frame:00000000000061CB                 db    0
.eh_frame:00000000000061CC                 db  10h
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db 0C8h
.eh_frame:00000000000061D1                 db    5
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db  0Ch
.eh_frame:00000000000061D5                 db 0DBh
.eh_frame:00000000000061D6                 db 0FFh
.eh_frame:00000000000061D7                 db 0FFh
.eh_frame:00000000000061D8                 db  13h
.eh_frame:00000000000061D9                 db    0
.eh_frame:00000000000061DA                 db    0
.eh_frame:00000000000061DB                 db    0
.eh_frame:00000000000061DC                 db    0
.eh_frame:00000000000061DD                 db    0
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db  14h
.eh_frame:00000000000061E1                 db    0
.eh_frame:00000000000061E2                 db    0
.eh_frame:00000000000061E3                 db    0
.eh_frame:00000000000061E4                 db 0DCh
.eh_frame:00000000000061E5                 db    5
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db  18h
.eh_frame:00000000000061E9                 db 0DBh
.eh_frame:00000000000061EA                 db 0FFh
.eh_frame:00000000000061EB                 db 0FFh
.eh_frame:00000000000061EC                 db  18h
.eh_frame:00000000000061ED                 db    0
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db    0
.eh_frame:00000000000061F1                 db    0
.eh_frame:00000000000061F2                 db    0
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db    0
.eh_frame:00000000000061F5                 db    0
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  10h
.eh_frame:00000000000061F9                 db    1
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db 0F4h
.eh_frame:00000000000061FD                 db    5
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db  20h
.eh_frame:0000000000006201                 db 0DBh
.eh_frame:0000000000006202                 db 0FFh
.eh_frame:0000000000006203                 db 0FFh
.eh_frame:0000000000006204                 db  17h
.eh_frame:0000000000006205                 db    4
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db  42h ; B
.eh_frame:000000000000620A                 db  0Eh
.eh_frame:000000000000620B                 db  10h
.eh_frame:000000000000620C                 db  8Fh
.eh_frame:000000000000620D                 db    2
.eh_frame:000000000000620E                 db  42h ; B
.eh_frame:000000000000620F                 db  0Eh
.eh_frame:0000000000006210                 db  18h
.eh_frame:0000000000006211                 db  8Eh
.eh_frame:0000000000006212                 db    3
.eh_frame:0000000000006213                 db  42h ; B
.eh_frame:0000000000006214                 db  0Eh
.eh_frame:0000000000006215                 db  20h
.eh_frame:0000000000006216                 db  8Dh
.eh_frame:0000000000006217                 db    4
.eh_frame:0000000000006218                 db  42h ; B
.eh_frame:0000000000006219                 db  0Eh
.eh_frame:000000000000621A                 db  28h ; (
.eh_frame:000000000000621B                 db  8Ch
.eh_frame:000000000000621C                 db    5
.eh_frame:000000000000621D                 db  44h ; D
.eh_frame:000000000000621E                 db  0Eh
.eh_frame:000000000000621F                 db  30h ; 0
.eh_frame:0000000000006220                 db  86h
.eh_frame:0000000000006221                 db    6
.eh_frame:0000000000006222                 db  41h ; A
.eh_frame:0000000000006223                 db  0Eh
.eh_frame:0000000000006224                 db  38h ; 8
.eh_frame:0000000000006225                 db  83h
.eh_frame:0000000000006226                 db    7
.eh_frame:0000000000006227                 db  4Ah ; J
.eh_frame:0000000000006228                 db  0Eh
.eh_frame:0000000000006229                 db  60h ; `
.eh_frame:000000000000622A                 db    2
.eh_frame:000000000000622B                 db 0DDh
.eh_frame:000000000000622C                 db  0Eh
.eh_frame:000000000000622D                 db  68h ; h
.eh_frame:000000000000622E                 db  57h ; W
.eh_frame:000000000000622F                 db  0Eh
.eh_frame:0000000000006230                 db  70h ; p
.eh_frame:0000000000006231                 db  42h ; B
.eh_frame:0000000000006232                 db  0Eh
.eh_frame:0000000000006233                 db  78h ; x
.eh_frame:0000000000006234                 db  42h ; B
.eh_frame:0000000000006235                 db  0Eh
.eh_frame:0000000000006236                 db  80h
.eh_frame:0000000000006237                 db    1
.eh_frame:0000000000006238                 db  42h ; B
.eh_frame:0000000000006239                 db  0Eh
.eh_frame:000000000000623A                 db  88h
.eh_frame:000000000000623B                 db    1
.eh_frame:000000000000623C                 db  42h ; B
.eh_frame:000000000000623D                 db  0Eh
.eh_frame:000000000000623E                 db  90h
.eh_frame:000000000000623F                 db    1
.eh_frame:0000000000006240                 db  53h ; S
.eh_frame:0000000000006241                 db  0Eh
.eh_frame:0000000000006242                 db  60h ; `
.eh_frame:0000000000006243                 db  44h ; D
.eh_frame:0000000000006244                 db  0Ah
.eh_frame:0000000000006245                 db  0Eh
.eh_frame:0000000000006246                 db  38h ; 8
.eh_frame:0000000000006247                 db  41h ; A
.eh_frame:0000000000006248                 db  0Eh
.eh_frame:0000000000006249                 db  30h ; 0
.eh_frame:000000000000624A                 db  41h ; A
.eh_frame:000000000000624B                 db  0Eh
.eh_frame:000000000000624C                 db  28h ; (
.eh_frame:000000000000624D                 db  42h ; B
.eh_frame:000000000000624E                 db  0Eh
.eh_frame:000000000000624F                 db  20h
.eh_frame:0000000000006250                 db  42h ; B
.eh_frame:0000000000006251                 db  0Eh
.eh_frame:0000000000006252                 db  18h
.eh_frame:0000000000006253                 db  42h ; B
.eh_frame:0000000000006254                 db  0Eh
.eh_frame:0000000000006255                 db  10h
.eh_frame:0000000000006256                 db  42h ; B
.eh_frame:0000000000006257                 db  0Eh
.eh_frame:0000000000006258                 db    8
.eh_frame:0000000000006259                 db  44h ; D
.eh_frame:000000000000625A                 db  0Bh
.eh_frame:000000000000625B                 db    2
.eh_frame:000000000000625C                 db  78h ; x
.eh_frame:000000000000625D                 db  0Ah
.eh_frame:000000000000625E                 db  0Eh
.eh_frame:000000000000625F                 db  68h ; h
.eh_frame:0000000000006260                 db  48h ; H
.eh_frame:0000000000006261                 db  0Bh
.eh_frame:0000000000006262                 db  5Ah ; Z
.eh_frame:0000000000006263                 db  0Ah
.eh_frame:0000000000006264                 db  0Eh
.eh_frame:0000000000006265                 db  38h ; 8
.eh_frame:0000000000006266                 db  47h ; G
.eh_frame:0000000000006267                 db  0Eh
.eh_frame:0000000000006268                 db  30h ; 0
.eh_frame:0000000000006269                 db  41h ; A
.eh_frame:000000000000626A                 db  0Eh
.eh_frame:000000000000626B                 db  28h ; (
.eh_frame:000000000000626C                 db  42h ; B
.eh_frame:000000000000626D                 db  0Eh
.eh_frame:000000000000626E                 db  20h
.eh_frame:000000000000626F                 db  42h ; B
.eh_frame:0000000000006270                 db  0Eh
.eh_frame:0000000000006271                 db  18h
.eh_frame:0000000000006272                 db  42h ; B
.eh_frame:0000000000006273                 db  0Eh
.eh_frame:0000000000006274                 db  10h
.eh_frame:0000000000006275                 db  42h ; B
.eh_frame:0000000000006276                 db  0Eh
.eh_frame:0000000000006277                 db    8
.eh_frame:0000000000006278                 db  56h ; V
.eh_frame:0000000000006279                 db  0Bh
.eh_frame:000000000000627A                 db  5Eh ; ^
.eh_frame:000000000000627B                 db  0Ah
.eh_frame:000000000000627C                 db  0Eh
.eh_frame:000000000000627D                 db  38h ; 8
.eh_frame:000000000000627E                 db  52h ; R
.eh_frame:000000000000627F                 db  0Eh
.eh_frame:0000000000006280                 db  30h ; 0
.eh_frame:0000000000006281                 db  41h ; A
.eh_frame:0000000000006282                 db  0Eh
.eh_frame:0000000000006283                 db  28h ; (
.eh_frame:0000000000006284                 db  42h ; B
.eh_frame:0000000000006285                 db  0Eh
.eh_frame:0000000000006286                 db  20h
.eh_frame:0000000000006287                 db  42h ; B
.eh_frame:0000000000006288                 db  0Eh
.eh_frame:0000000000006289                 db  18h
.eh_frame:000000000000628A                 db  42h ; B
.eh_frame:000000000000628B                 db  0Eh
.eh_frame:000000000000628C                 db  10h
.eh_frame:000000000000628D                 db  42h ; B
.eh_frame:000000000000628E                 db  0Eh
.eh_frame:000000000000628F                 db    8
.eh_frame:0000000000006290                 db  4Fh ; O
.eh_frame:0000000000006291                 db  0Bh
.eh_frame:0000000000006292                 db  62h ; b
.eh_frame:0000000000006293                 db  0Ah
.eh_frame:0000000000006294                 db  0Eh
.eh_frame:0000000000006295                 db  38h ; 8
.eh_frame:0000000000006296                 db  50h ; P
.eh_frame:0000000000006297                 db  0Eh
.eh_frame:0000000000006298                 db  30h ; 0
.eh_frame:0000000000006299                 db  41h ; A
.eh_frame:000000000000629A                 db  0Eh
.eh_frame:000000000000629B                 db  28h ; (
.eh_frame:000000000000629C                 db  42h ; B
.eh_frame:000000000000629D                 db  0Eh
.eh_frame:000000000000629E                 db  20h
.eh_frame:000000000000629F                 db  42h ; B
.eh_frame:00000000000062A0                 db  0Eh
.eh_frame:00000000000062A1                 db  18h
.eh_frame:00000000000062A2                 db  42h ; B
.eh_frame:00000000000062A3                 db  0Eh
.eh_frame:00000000000062A4                 db  10h
.eh_frame:00000000000062A5                 db  42h ; B
.eh_frame:00000000000062A6                 db  0Eh
.eh_frame:00000000000062A7                 db    8
.eh_frame:00000000000062A8                 db  55h ; U
.eh_frame:00000000000062A9                 db  0Bh
.eh_frame:00000000000062AA                 db  66h ; f
.eh_frame:00000000000062AB                 db  0Eh
.eh_frame:00000000000062AC                 db  68h ; h
.eh_frame:00000000000062AD                 db  42h ; B
.eh_frame:00000000000062AE                 db  0Eh
.eh_frame:00000000000062AF                 db  70h ; p
.eh_frame:00000000000062B0                 db  5Ch ; \
.eh_frame:00000000000062B1                 db  0Eh
.eh_frame:00000000000062B2                 db  68h ; h
.eh_frame:00000000000062B3                 db  41h ; A
.eh_frame:00000000000062B4                 db  0Eh
.eh_frame:00000000000062B5                 db  60h ; `
.eh_frame:00000000000062B6                 db  44h ; D
.eh_frame:00000000000062B7                 db  0Ah
.eh_frame:00000000000062B8                 db  0Eh
.eh_frame:00000000000062B9                 db  38h ; 8
.eh_frame:00000000000062BA                 db  41h ; A
.eh_frame:00000000000062BB                 db  0Eh
.eh_frame:00000000000062BC                 db  30h ; 0
.eh_frame:00000000000062BD                 db  41h ; A
.eh_frame:00000000000062BE                 db  0Eh
.eh_frame:00000000000062BF                 db  28h ; (
.eh_frame:00000000000062C0                 db  42h ; B
.eh_frame:00000000000062C1                 db  0Eh
.eh_frame:00000000000062C2                 db  20h
.eh_frame:00000000000062C3                 db  42h ; B
.eh_frame:00000000000062C4                 db  0Eh
.eh_frame:00000000000062C5                 db  18h
.eh_frame:00000000000062C6                 db  42h ; B
.eh_frame:00000000000062C7                 db  0Eh
.eh_frame:00000000000062C8                 db  10h
.eh_frame:00000000000062C9                 db  42h ; B
.eh_frame:00000000000062CA                 db  0Eh
.eh_frame:00000000000062CB                 db    8
.eh_frame:00000000000062CC                 db  45h ; E
.eh_frame:00000000000062CD                 db  0Bh
.eh_frame:00000000000062CE                 db  68h ; h
.eh_frame:00000000000062CF                 db  0Ah
.eh_frame:00000000000062D0                 db  0Eh
.eh_frame:00000000000062D1                 db  68h ; h
.eh_frame:00000000000062D2                 db  48h ; H
.eh_frame:00000000000062D3                 db  0Bh
.eh_frame:00000000000062D4                 db  72h ; r
.eh_frame:00000000000062D5                 db  0Eh
.eh_frame:00000000000062D6                 db  68h ; h
.eh_frame:00000000000062D7                 db  45h ; E
.eh_frame:00000000000062D8                 db  0Eh
.eh_frame:00000000000062D9                 db  70h ; p
.eh_frame:00000000000062DA                 db  42h ; B
.eh_frame:00000000000062DB                 db  0Eh
.eh_frame:00000000000062DC                 db  78h ; x
.eh_frame:00000000000062DD                 db  42h ; B
.eh_frame:00000000000062DE                 db  0Eh
.eh_frame:00000000000062DF                 db  80h
.eh_frame:00000000000062E0                 db    1
.eh_frame:00000000000062E1                 db  5Eh ; ^
.eh_frame:00000000000062E2                 db  0Eh
.eh_frame:00000000000062E3                 db  60h ; `
.eh_frame:00000000000062E4                 db  44h ; D
.eh_frame:00000000000062E5                 db  0Ah
.eh_frame:00000000000062E6                 db  0Eh
.eh_frame:00000000000062E7                 db  38h ; 8
.eh_frame:00000000000062E8                 db  41h ; A
.eh_frame:00000000000062E9                 db  0Eh
.eh_frame:00000000000062EA                 db  30h ; 0
.eh_frame:00000000000062EB                 db  41h ; A
.eh_frame:00000000000062EC                 db  0Eh
.eh_frame:00000000000062ED                 db  28h ; (
.eh_frame:00000000000062EE                 db  42h ; B
.eh_frame:00000000000062EF                 db  0Eh
.eh_frame:00000000000062F0                 db  20h
.eh_frame:00000000000062F1                 db  42h ; B
.eh_frame:00000000000062F2                 db  0Eh
.eh_frame:00000000000062F3                 db  18h
.eh_frame:00000000000062F4                 db  42h ; B
.eh_frame:00000000000062F5                 db  0Eh
.eh_frame:00000000000062F6                 db  10h
.eh_frame:00000000000062F7                 db  42h ; B
.eh_frame:00000000000062F8                 db  0Eh
.eh_frame:00000000000062F9                 db    8
.eh_frame:00000000000062FA                 db  41h ; A
.eh_frame:00000000000062FB                 db  0Bh
.eh_frame:00000000000062FC                 db  79h ; y
.eh_frame:00000000000062FD                 db  0Ah
.eh_frame:00000000000062FE                 db  0Eh
.eh_frame:00000000000062FF                 db  68h ; h
.eh_frame:0000000000006300                 db  42h ; B
.eh_frame:0000000000006301                 db  0Eh
.eh_frame:0000000000006302                 db  70h ; p
.eh_frame:0000000000006303                 db  42h ; B
.eh_frame:0000000000006304                 db  0Eh
.eh_frame:0000000000006305                 db  78h ; x
.eh_frame:0000000000006306                 db  42h ; B
.eh_frame:0000000000006307                 db  0Eh
.eh_frame:0000000000006308                 db  80h
.eh_frame:0000000000006309                 db    1
.eh_frame:000000000000630A                 db  51h ; Q
.eh_frame:000000000000630B                 db  0Bh
.eh_frame:000000000000630C                 db  10h
.eh_frame:000000000000630D                 db    0
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db    8
.eh_frame:0000000000006311                 db    7
.eh_frame:0000000000006312                 db    0
.eh_frame:0000000000006313                 db    0
.eh_frame:0000000000006314                 db  2Ch ; ,
.eh_frame:0000000000006315                 db 0DEh
.eh_frame:0000000000006316                 db 0FFh
.eh_frame:0000000000006317                 db 0FFh
.eh_frame:0000000000006318                 db  20h
.eh_frame:0000000000006319                 db    0
.eh_frame:000000000000631A                 db    0
.eh_frame:000000000000631B                 db    0
.eh_frame:000000000000631C                 db    0
.eh_frame:000000000000631D                 db    0
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db  18h
.eh_frame:0000000000006321                 db    0
.eh_frame:0000000000006322                 db    0
.eh_frame:0000000000006323                 db    0
.eh_frame:0000000000006324                 db  1Ch
.eh_frame:0000000000006325                 db    7
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db  38h ; 8
.eh_frame:0000000000006329                 db 0DEh
.eh_frame:000000000000632A                 db 0FFh
.eh_frame:000000000000632B                 db 0FFh
.eh_frame:000000000000632C                 db  78h ; x
.eh_frame:000000000000632D                 db    0
.eh_frame:000000000000632E                 db    0
.eh_frame:000000000000632F                 db    0
.eh_frame:0000000000006330                 db    0
.eh_frame:0000000000006331                 db  44h ; D
.eh_frame:0000000000006332                 db  0Eh
.eh_frame:0000000000006333                 db  70h ; p
.eh_frame:0000000000006334                 db    2
.eh_frame:0000000000006335                 db  60h ; `
.eh_frame:0000000000006336                 db  0Ah
.eh_frame:0000000000006337                 db  0Eh
.eh_frame:0000000000006338                 db    8
.eh_frame:0000000000006339                 db  41h ; A
.eh_frame:000000000000633A                 db  0Bh
.eh_frame:000000000000633B                 db    0
.eh_frame:000000000000633C                 db  28h ; (
.eh_frame:000000000000633D                 db    0
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db  38h ; 8
.eh_frame:0000000000006341                 db    7
.eh_frame:0000000000006342                 db    0
.eh_frame:0000000000006343                 db    0
.eh_frame:0000000000006344                 db  9Ch
.eh_frame:0000000000006345                 db 0DEh
.eh_frame:0000000000006346                 db 0FFh
.eh_frame:0000000000006347                 db 0FFh
.eh_frame:0000000000006348                 db 0D5h
.eh_frame:0000000000006349                 db    0
.eh_frame:000000000000634A                 db    0
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db    0
.eh_frame:000000000000634D                 db  41h ; A
.eh_frame:000000000000634E                 db  0Eh
.eh_frame:000000000000634F                 db  10h
.eh_frame:0000000000006350                 db  86h
.eh_frame:0000000000006351                 db    2
.eh_frame:0000000000006352                 db  41h ; A
.eh_frame:0000000000006353                 db  0Eh
.eh_frame:0000000000006354                 db  18h
.eh_frame:0000000000006355                 db  83h
.eh_frame:0000000000006356                 db    3
.eh_frame:0000000000006357                 db  50h ; P
.eh_frame:0000000000006358                 db  0Eh
.eh_frame:0000000000006359                 db 0D0h
.eh_frame:000000000000635A                 db    1
.eh_frame:000000000000635B                 db    2
.eh_frame:000000000000635C                 db 0ABh
.eh_frame:000000000000635D                 db  0Ah
.eh_frame:000000000000635E                 db  0Eh
.eh_frame:000000000000635F                 db  18h
.eh_frame:0000000000006360                 db  41h ; A
.eh_frame:0000000000006361                 db  0Eh
.eh_frame:0000000000006362                 db  10h
.eh_frame:0000000000006363                 db  41h ; A
.eh_frame:0000000000006364                 db  0Eh
.eh_frame:0000000000006365                 db    8
.eh_frame:0000000000006366                 db  41h ; A
.eh_frame:0000000000006367                 db  0Bh
.eh_frame:0000000000006368                 db  1Ch
.eh_frame:0000000000006369                 db    0
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db  64h ; d
.eh_frame:000000000000636D                 db    7
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db  50h ; P
.eh_frame:0000000000006371                 db 0DFh
.eh_frame:0000000000006372                 db 0FFh
.eh_frame:0000000000006373                 db 0FFh
.eh_frame:0000000000006374                 db  80h
.eh_frame:0000000000006375                 db    0
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db    0
.eh_frame:0000000000006379                 db  41h ; A
.eh_frame:000000000000637A                 db  0Eh
.eh_frame:000000000000637B                 db  10h
.eh_frame:000000000000637C                 db  83h
.eh_frame:000000000000637D                 db    2
.eh_frame:000000000000637E                 db    2
.eh_frame:000000000000637F                 db  7Ah ; z
.eh_frame:0000000000006380                 db  0Eh
.eh_frame:0000000000006381                 db    8
.eh_frame:0000000000006382                 db    0
.eh_frame:0000000000006383                 db    0
.eh_frame:0000000000006384                 db    0
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db  18h
.eh_frame:0000000000006389                 db    0
.eh_frame:000000000000638A                 db    0
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db  84h
.eh_frame:000000000000638D                 db    7
.eh_frame:000000000000638E                 db    0
.eh_frame:000000000000638F                 db    0
.eh_frame:0000000000006390                 db 0B0h
.eh_frame:0000000000006391                 db 0DFh
.eh_frame:0000000000006392                 db 0FFh
.eh_frame:0000000000006393                 db 0FFh
.eh_frame:0000000000006394                 db  1Ah
.eh_frame:0000000000006395                 db    0
.eh_frame:0000000000006396                 db    0
.eh_frame:0000000000006397                 db    0
.eh_frame:0000000000006398                 db    0
.eh_frame:0000000000006399                 db  41h ; A
.eh_frame:000000000000639A                 db  0Eh
.eh_frame:000000000000639B                 db  10h
.eh_frame:000000000000639C                 db  83h
.eh_frame:000000000000639D                 db    2
.eh_frame:000000000000639E                 db  53h ; S
.eh_frame:000000000000639F                 db  0Ah
.eh_frame:00000000000063A0                 db  0Eh
.eh_frame:00000000000063A1                 db    8
.eh_frame:00000000000063A2                 db  41h ; A
.eh_frame:00000000000063A3                 db  0Bh
.eh_frame:00000000000063A4                 db  10h
.eh_frame:00000000000063A5                 db    0
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db 0A0h
.eh_frame:00000000000063A9                 db    7
.eh_frame:00000000000063AA                 db    0
.eh_frame:00000000000063AB                 db    0
.eh_frame:00000000000063AC                 db 0B4h
.eh_frame:00000000000063AD                 db 0DFh
.eh_frame:00000000000063AE                 db 0FFh
.eh_frame:00000000000063AF                 db 0FFh
.eh_frame:00000000000063B0                 db  24h ; $
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db    0
.eh_frame:00000000000063B5                 db  5Fh ; _
.eh_frame:00000000000063B6                 db  0Eh
.eh_frame:00000000000063B7                 db  10h
.eh_frame:00000000000063B8                 db  10h
.eh_frame:00000000000063B9                 db    0
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db 0B4h
.eh_frame:00000000000063BD                 db    7
.eh_frame:00000000000063BE                 db    0
.eh_frame:00000000000063BF                 db    0
.eh_frame:00000000000063C0                 db 0D0h
.eh_frame:00000000000063C1                 db 0DFh
.eh_frame:00000000000063C2                 db 0FFh
.eh_frame:00000000000063C3                 db 0FFh
.eh_frame:00000000000063C4                 db    2
.eh_frame:00000000000063C5                 db    0
.eh_frame:00000000000063C6                 db    0
.eh_frame:00000000000063C7                 db    0
.eh_frame:00000000000063C8                 db    0
.eh_frame:00000000000063C9                 db    0
.eh_frame:00000000000063CA                 db    0
.eh_frame:00000000000063CB                 db    0
.eh_frame:00000000000063CC                 db  20h
.eh_frame:00000000000063CD                 db    0
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063D0                 db 0C8h
.eh_frame:00000000000063D1                 db    7
.eh_frame:00000000000063D2                 db    0
.eh_frame:00000000000063D3                 db    0
.eh_frame:00000000000063D4                 db 0CCh
.eh_frame:00000000000063D5                 db 0DFh
.eh_frame:00000000000063D6                 db 0FFh
.eh_frame:00000000000063D7                 db 0FFh
.eh_frame:00000000000063D8                 db  36h ; 6
.eh_frame:00000000000063D9                 db    0
.eh_frame:00000000000063DA                 db    0
.eh_frame:00000000000063DB                 db    0
.eh_frame:00000000000063DC                 db    0
.eh_frame:00000000000063DD                 db  44h ; D
.eh_frame:00000000000063DE                 db  0Eh
.eh_frame:00000000000063DF                 db  10h
.eh_frame:00000000000063E0                 db  83h
.eh_frame:00000000000063E1                 db    2
.eh_frame:00000000000063E2                 db  5Dh ; ]
.eh_frame:00000000000063E3                 db  0Ah
.eh_frame:00000000000063E4                 db  0Eh
.eh_frame:00000000000063E5                 db    8
.eh_frame:00000000000063E6                 db  47h ; G
.eh_frame:00000000000063E7                 db  0Bh
.eh_frame:00000000000063E8                 db  48h ; H
.eh_frame:00000000000063E9                 db  0Ah
.eh_frame:00000000000063EA                 db  0Eh
.eh_frame:00000000000063EB                 db    8
.eh_frame:00000000000063EC                 db  41h ; A
.eh_frame:00000000000063ED                 db  0Bh
.eh_frame:00000000000063EE                 db    0
.eh_frame:00000000000063EF                 db    0
.eh_frame:00000000000063F0                 db  10h
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db 0ECh
.eh_frame:00000000000063F5                 db    7
.eh_frame:00000000000063F6                 db    0
.eh_frame:00000000000063F7                 db    0
.eh_frame:00000000000063F8                 db 0E8h
.eh_frame:00000000000063F9                 db 0DFh
.eh_frame:00000000000063FA                 db 0FFh
.eh_frame:00000000000063FB                 db 0FFh
.eh_frame:00000000000063FC                 db  24h ; $
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db    0
.eh_frame:0000000000006401                 db  5Fh ; _
.eh_frame:0000000000006402                 db  0Eh
.eh_frame:0000000000006403                 db  10h
.eh_frame:0000000000006404                 db  14h
.eh_frame:0000000000006405                 db    0
.eh_frame:0000000000006406                 db    0
.eh_frame:0000000000006407                 db    0
.eh_frame:0000000000006408                 db    0
.eh_frame:0000000000006409                 db    8
.eh_frame:000000000000640A                 db    0
.eh_frame:000000000000640B                 db    0
.eh_frame:000000000000640C                 db    4
.eh_frame:000000000000640D                 db 0E0h
.eh_frame:000000000000640E                 db 0FFh
.eh_frame:000000000000640F                 db 0FFh
.eh_frame:0000000000006410                 db  82h
.eh_frame:0000000000006411                 db    0
.eh_frame:0000000000006412                 db    0
.eh_frame:0000000000006413                 db    0
.eh_frame:0000000000006414                 db    0
.eh_frame:0000000000006415                 db    2
.eh_frame:0000000000006416                 db  5Fh ; _
.eh_frame:0000000000006417                 db  0Eh
.eh_frame:0000000000006418                 db  10h
.eh_frame:0000000000006419                 db  49h ; I
.eh_frame:000000000000641A                 db  0Eh
.eh_frame:000000000000641B                 db    8
.eh_frame:000000000000641C                 db  14h
.eh_frame:000000000000641D                 db    0
.eh_frame:000000000000641E                 db    0
.eh_frame:000000000000641F                 db    0
.eh_frame:0000000000006420                 db  18h
.eh_frame:0000000000006421                 db    8
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db  7Ch ; |
.eh_frame:0000000000006425                 db 0E0h
.eh_frame:0000000000006426                 db 0FFh
.eh_frame:0000000000006427                 db 0FFh
.eh_frame:0000000000006428                 db  4Ah ; J
.eh_frame:0000000000006429                 db    0
.eh_frame:000000000000642A                 db    0
.eh_frame:000000000000642B                 db    0
.eh_frame:000000000000642C                 db    0
.eh_frame:000000000000642D                 db    2
.eh_frame:000000000000642E                 db  45h ; E
.eh_frame:000000000000642F                 db  0Eh
.eh_frame:0000000000006430                 db  10h
.eh_frame:0000000000006431                 db    0
.eh_frame:0000000000006432                 db    0
.eh_frame:0000000000006433                 db    0
.eh_frame:0000000000006434                 db  18h
.eh_frame:0000000000006435                 db    0
.eh_frame:0000000000006436                 db    0
.eh_frame:0000000000006437                 db    0
.eh_frame:0000000000006438                 db  30h ; 0
.eh_frame:0000000000006439                 db    8
.eh_frame:000000000000643A                 db    0
.eh_frame:000000000000643B                 db    0
.eh_frame:000000000000643C                 db 0B4h
.eh_frame:000000000000643D                 db 0E0h
.eh_frame:000000000000643E                 db 0FFh
.eh_frame:000000000000643F                 db 0FFh
.eh_frame:0000000000006440                 db  17h
.eh_frame:0000000000006441                 db    0
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db    0
.eh_frame:0000000000006445                 db  41h ; A
.eh_frame:0000000000006446                 db  0Eh
.eh_frame:0000000000006447                 db  10h
.eh_frame:0000000000006448                 db  83h
.eh_frame:0000000000006449                 db    2
.eh_frame:000000000000644A                 db  51h ; Q
.eh_frame:000000000000644B                 db  0Eh
.eh_frame:000000000000644C                 db    8
.eh_frame:000000000000644D                 db    0
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db  18h
.eh_frame:0000000000006451                 db    0
.eh_frame:0000000000006452                 db    0
.eh_frame:0000000000006453                 db    0
.eh_frame:0000000000006454                 db  4Ch ; L
.eh_frame:0000000000006455                 db    8
.eh_frame:0000000000006456                 db    0
.eh_frame:0000000000006457                 db    0
.eh_frame:0000000000006458                 db 0B8h
.eh_frame:0000000000006459                 db 0E0h
.eh_frame:000000000000645A                 db 0FFh
.eh_frame:000000000000645B                 db 0FFh
.eh_frame:000000000000645C                 db  2Eh ; .
.eh_frame:000000000000645D                 db    0
.eh_frame:000000000000645E                 db    0
.eh_frame:000000000000645F                 db    0
.eh_frame:0000000000006460                 db    0
.eh_frame:0000000000006461                 db  47h ; G
.eh_frame:0000000000006462                 db  0Eh
.eh_frame:0000000000006463                 db  10h
.eh_frame:0000000000006464                 db  61h ; a
.eh_frame:0000000000006465                 db  0Ah
.eh_frame:0000000000006466                 db  0Eh
.eh_frame:0000000000006467                 db    8
.eh_frame:0000000000006468                 db  41h ; A
.eh_frame:0000000000006469                 db  0Bh
.eh_frame:000000000000646A                 db    0
.eh_frame:000000000000646B                 db    0
.eh_frame:000000000000646C                 db  24h ; $
.eh_frame:000000000000646D                 db    0
.eh_frame:000000000000646E                 db    0
.eh_frame:000000000000646F                 db    0
.eh_frame:0000000000006470                 db  68h ; h
.eh_frame:0000000000006471                 db    8
.eh_frame:0000000000006472                 db    0
.eh_frame:0000000000006473                 db    0
.eh_frame:0000000000006474                 db 0CCh
.eh_frame:0000000000006475                 db 0E0h
.eh_frame:0000000000006476                 db 0FFh
.eh_frame:0000000000006477                 db 0FFh
.eh_frame:0000000000006478                 db  28h ; (
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db    0
.eh_frame:000000000000647D                 db  41h ; A
.eh_frame:000000000000647E                 db  0Eh
.eh_frame:000000000000647F                 db  10h
.eh_frame:0000000000006480                 db  86h
.eh_frame:0000000000006481                 db    2
.eh_frame:0000000000006482                 db  41h ; A
.eh_frame:0000000000006483                 db  0Eh
.eh_frame:0000000000006484                 db  18h
.eh_frame:0000000000006485                 db  83h
.eh_frame:0000000000006486                 db    3
.eh_frame:0000000000006487                 db  4Dh ; M
.eh_frame:0000000000006488                 db  0Eh
.eh_frame:0000000000006489                 db  20h
.eh_frame:000000000000648A                 db  49h ; I
.eh_frame:000000000000648B                 db  0Eh
.eh_frame:000000000000648C                 db  18h
.eh_frame:000000000000648D                 db  47h ; G
.eh_frame:000000000000648E                 db  0Eh
.eh_frame:000000000000648F                 db  10h
.eh_frame:0000000000006490                 db  41h ; A
.eh_frame:0000000000006491                 db  0Eh
.eh_frame:0000000000006492                 db    8
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494                 db  18h
.eh_frame:0000000000006495                 db    0
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db  90h
.eh_frame:0000000000006499                 db    8
.eh_frame:000000000000649A                 db    0
.eh_frame:000000000000649B                 db    0
.eh_frame:000000000000649C                 db 0D4h
.eh_frame:000000000000649D                 db 0E0h
.eh_frame:000000000000649E                 db 0FFh
.eh_frame:000000000000649F                 db 0FFh
.eh_frame:00000000000064A0                 db  13h
.eh_frame:00000000000064A1                 db    0
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db    0
.eh_frame:00000000000064A5                 db  41h ; A
.eh_frame:00000000000064A6                 db  0Eh
.eh_frame:00000000000064A7                 db  10h
.eh_frame:00000000000064A8                 db  83h
.eh_frame:00000000000064A9                 db    2
.eh_frame:00000000000064AA                 db  50h ; P
.eh_frame:00000000000064AB                 db  0Eh
.eh_frame:00000000000064AC                 db    8
.eh_frame:00000000000064AD                 db    0
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db  14h
.eh_frame:00000000000064B1                 db    0
.eh_frame:00000000000064B2                 db    0
.eh_frame:00000000000064B3                 db    0
.eh_frame:00000000000064B4                 db 0ACh
.eh_frame:00000000000064B5                 db    8
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db 0D8h
.eh_frame:00000000000064B9                 db 0E0h
.eh_frame:00000000000064BA                 db 0FFh
.eh_frame:00000000000064BB                 db 0FFh
.eh_frame:00000000000064BC                 db  35h ; 5
.eh_frame:00000000000064BD                 db    0
.eh_frame:00000000000064BE                 db    0
.eh_frame:00000000000064BF                 db    0
.eh_frame:00000000000064C0                 db    0
.eh_frame:00000000000064C1                 db  4Bh ; K
.eh_frame:00000000000064C2                 db  0Eh
.eh_frame:00000000000064C3                 db  10h
.eh_frame:00000000000064C4                 db    0
.eh_frame:00000000000064C5                 db    0
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db  3Ch ; <
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db 0C4h
.eh_frame:00000000000064CD                 db    8
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db    0
.eh_frame:00000000000064D1                 db 0E1h
.eh_frame:00000000000064D2                 db 0FFh
.eh_frame:00000000000064D3                 db 0FFh
.eh_frame:00000000000064D4                 db  83h
.eh_frame:00000000000064D5                 db    0
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    0
.eh_frame:00000000000064D9                 db  42h ; B
.eh_frame:00000000000064DA                 db  0Eh
.eh_frame:00000000000064DB                 db  10h
.eh_frame:00000000000064DC                 db  8Dh
.eh_frame:00000000000064DD                 db    2
.eh_frame:00000000000064DE                 db  42h ; B
.eh_frame:00000000000064DF                 db  0Eh
.eh_frame:00000000000064E0                 db  18h
.eh_frame:00000000000064E1                 db  8Ch
.eh_frame:00000000000064E2                 db    3
.eh_frame:00000000000064E3                 db  44h ; D
.eh_frame:00000000000064E4                 db  0Eh
.eh_frame:00000000000064E5                 db  20h
.eh_frame:00000000000064E6                 db  86h
.eh_frame:00000000000064E7                 db    4
.eh_frame:00000000000064E8                 db  41h ; A
.eh_frame:00000000000064E9                 db  0Eh
.eh_frame:00000000000064EA                 db  28h ; (
.eh_frame:00000000000064EB                 db  83h
.eh_frame:00000000000064EC                 db    5
.eh_frame:00000000000064ED                 db  4Ah ; J
.eh_frame:00000000000064EE                 db  0Eh
.eh_frame:00000000000064EF                 db  40h ; @
.eh_frame:00000000000064F0                 db    2
.eh_frame:00000000000064F1                 db  64h ; d
.eh_frame:00000000000064F2                 db  0Ah
.eh_frame:00000000000064F3                 db  0Eh
.eh_frame:00000000000064F4                 db  28h ; (
.eh_frame:00000000000064F5                 db  41h ; A
.eh_frame:00000000000064F6                 db  0Eh
.eh_frame:00000000000064F7                 db  20h
.eh_frame:00000000000064F8                 db  41h ; A
.eh_frame:00000000000064F9                 db  0Eh
.eh_frame:00000000000064FA                 db  18h
.eh_frame:00000000000064FB                 db  42h ; B
.eh_frame:00000000000064FC                 db  0Eh
.eh_frame:00000000000064FD                 db  10h
.eh_frame:00000000000064FE                 db  42h ; B
.eh_frame:00000000000064FF                 db  0Eh
.eh_frame:0000000000006500                 db    8
.eh_frame:0000000000006501                 db  41h ; A
.eh_frame:0000000000006502                 db  0Bh
.eh_frame:0000000000006503                 db    0
.eh_frame:0000000000006504                 db    0
.eh_frame:0000000000006505                 db    0
.eh_frame:0000000000006506                 db    0
.eh_frame:0000000000006507                 db    0
.eh_frame:0000000000006508                 db  4Ch ; L
.eh_frame:0000000000006509                 db    0
.eh_frame:000000000000650A                 db    0
.eh_frame:000000000000650B                 db    0
.eh_frame:000000000000650C                 db    4
.eh_frame:000000000000650D                 db    9
.eh_frame:000000000000650E                 db    0
.eh_frame:000000000000650F                 db    0
.eh_frame:0000000000006510                 db  50h ; P
.eh_frame:0000000000006511                 db 0E1h
.eh_frame:0000000000006512                 db 0FFh
.eh_frame:0000000000006513                 db 0FFh
.eh_frame:0000000000006514                 db  7Dh ; }
.eh_frame:0000000000006515                 db    0
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db    0
.eh_frame:0000000000006519                 db  42h ; B
.eh_frame:000000000000651A                 db  0Eh
.eh_frame:000000000000651B                 db  10h
.eh_frame:000000000000651C                 db  8Ch
.eh_frame:000000000000651D                 db    2
.eh_frame:000000000000651E                 db  41h ; A
.eh_frame:000000000000651F                 db  0Eh
.eh_frame:0000000000006520                 db  18h
.eh_frame:0000000000006521                 db  86h
.eh_frame:0000000000006522                 db    3
.eh_frame:0000000000006523                 db  44h ; D
.eh_frame:0000000000006524                 db  0Eh
.eh_frame:0000000000006525                 db  20h
.eh_frame:0000000000006526                 db  83h
.eh_frame:0000000000006527                 db    4
.eh_frame:0000000000006528                 db  69h ; i
.eh_frame:0000000000006529                 db  0Ah
.eh_frame:000000000000652A                 db  0Eh
.eh_frame:000000000000652B                 db  18h
.eh_frame:000000000000652C                 db  41h ; A
.eh_frame:000000000000652D                 db  0Eh
.eh_frame:000000000000652E                 db  10h
.eh_frame:000000000000652F                 db  42h ; B
.eh_frame:0000000000006530                 db  0Eh
.eh_frame:0000000000006531                 db    8
.eh_frame:0000000000006532                 db  45h ; E
.eh_frame:0000000000006533                 db  0Bh
.eh_frame:0000000000006534                 db  55h ; U
.eh_frame:0000000000006535                 db  0Ah
.eh_frame:0000000000006536                 db  0Eh
.eh_frame:0000000000006537                 db  18h
.eh_frame:0000000000006538                 db  41h ; A
.eh_frame:0000000000006539                 db  0Eh
.eh_frame:000000000000653A                 db  10h
.eh_frame:000000000000653B                 db  42h ; B
.eh_frame:000000000000653C                 db  0Eh
.eh_frame:000000000000653D                 db    8
.eh_frame:000000000000653E                 db  48h ; H
.eh_frame:000000000000653F                 db  0Bh
.eh_frame:0000000000006540                 db  41h ; A
.eh_frame:0000000000006541                 db  0Ah
.eh_frame:0000000000006542                 db  0Eh
.eh_frame:0000000000006543                 db  18h
.eh_frame:0000000000006544                 db  46h ; F
.eh_frame:0000000000006545                 db  0Eh
.eh_frame:0000000000006546                 db  10h
.eh_frame:0000000000006547                 db  42h ; B
.eh_frame:0000000000006548                 db  0Eh
.eh_frame:0000000000006549                 db    8
.eh_frame:000000000000654A                 db  47h ; G
.eh_frame:000000000000654B                 db  0Bh
.eh_frame:000000000000654C                 db  49h ; I
.eh_frame:000000000000654D                 db  0Eh
.eh_frame:000000000000654E                 db  18h
.eh_frame:000000000000654F                 db  41h ; A
.eh_frame:0000000000006550                 db  0Eh
.eh_frame:0000000000006551                 db  10h
.eh_frame:0000000000006552                 db  42h ; B
.eh_frame:0000000000006553                 db  0Eh
.eh_frame:0000000000006554                 db    8
.eh_frame:0000000000006555                 db    0
.eh_frame:0000000000006556                 db    0
.eh_frame:0000000000006557                 db    0
.eh_frame:0000000000006558                 db  1Ch
.eh_frame:0000000000006559                 db    0
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db  54h ; T
.eh_frame:000000000000655D                 db    9
.eh_frame:000000000000655E                 db    0
.eh_frame:000000000000655F                 db    0
.eh_frame:0000000000006560                 db  80h
.eh_frame:0000000000006561                 db 0E1h
.eh_frame:0000000000006562                 db 0FFh
.eh_frame:0000000000006563                 db 0FFh
.eh_frame:0000000000006564                 db  60h ; `
.eh_frame:0000000000006565                 db    0
.eh_frame:0000000000006566                 db    0
.eh_frame:0000000000006567                 db    0
.eh_frame:0000000000006568                 db    0
.eh_frame:0000000000006569                 db  44h ; D
.eh_frame:000000000000656A                 db  0Eh
.eh_frame:000000000000656B                 db  10h
.eh_frame:000000000000656C                 db  75h ; u
.eh_frame:000000000000656D                 db  0Ah
.eh_frame:000000000000656E                 db  0Eh
.eh_frame:000000000000656F                 db    8
.eh_frame:0000000000006570                 db  47h ; G
.eh_frame:0000000000006571                 db  0Bh
.eh_frame:0000000000006572                 db  5Fh ; _
.eh_frame:0000000000006573                 db  0Eh
.eh_frame:0000000000006574                 db    8
.eh_frame:0000000000006575                 db    0
.eh_frame:0000000000006576                 db    0
.eh_frame:0000000000006577                 db    0
.eh_frame:0000000000006578                 db  1Ch
.eh_frame:0000000000006579                 db    0
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db  74h ; t
.eh_frame:000000000000657D                 db    9
.eh_frame:000000000000657E                 db    0
.eh_frame:000000000000657F                 db    0
.eh_frame:0000000000006580                 db 0C0h
.eh_frame:0000000000006581                 db 0E1h
.eh_frame:0000000000006582                 db 0FFh
.eh_frame:0000000000006583                 db 0FFh
.eh_frame:0000000000006584                 db  3Ch ; <
.eh_frame:0000000000006585                 db    0
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db    0
.eh_frame:0000000000006589                 db  44h ; D
.eh_frame:000000000000658A                 db  0Eh
.eh_frame:000000000000658B                 db  10h
.eh_frame:000000000000658C                 db  61h ; a
.eh_frame:000000000000658D                 db  0Ah
.eh_frame:000000000000658E                 db  0Eh
.eh_frame:000000000000658F                 db    8
.eh_frame:0000000000006590                 db  4Bh ; K
.eh_frame:0000000000006591                 db  0Bh
.eh_frame:0000000000006592                 db  4Bh ; K
.eh_frame:0000000000006593                 db  0Eh
.eh_frame:0000000000006594                 db    8
.eh_frame:0000000000006595                 db    0
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db  34h ; 4
.eh_frame:0000000000006599                 db    0
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db  94h
.eh_frame:000000000000659D                 db    9
.eh_frame:000000000000659E                 db    0
.eh_frame:000000000000659F                 db    0
.eh_frame:00000000000065A0                 db 0E0h
.eh_frame:00000000000065A1                 db 0E1h
.eh_frame:00000000000065A2                 db 0FFh
.eh_frame:00000000000065A3                 db 0FFh
.eh_frame:00000000000065A4                 db  7Bh ; {
.eh_frame:00000000000065A5                 db    0
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db    0
.eh_frame:00000000000065A9                 db  42h ; B
.eh_frame:00000000000065AA                 db  0Eh
.eh_frame:00000000000065AB                 db  10h
.eh_frame:00000000000065AC                 db  8Ch
.eh_frame:00000000000065AD                 db    2
.eh_frame:00000000000065AE                 db  41h ; A
.eh_frame:00000000000065AF                 db  0Eh
.eh_frame:00000000000065B0                 db  18h
.eh_frame:00000000000065B1                 db  86h
.eh_frame:00000000000065B2                 db    3
.eh_frame:00000000000065B3                 db  41h ; A
.eh_frame:00000000000065B4                 db  0Eh
.eh_frame:00000000000065B5                 db  20h
.eh_frame:00000000000065B6                 db  83h
.eh_frame:00000000000065B7                 db    4
.eh_frame:00000000000065B8                 db  7Dh ; }
.eh_frame:00000000000065B9                 db  0Ah
.eh_frame:00000000000065BA                 db  0Eh
.eh_frame:00000000000065BB                 db  18h
.eh_frame:00000000000065BC                 db  41h ; A
.eh_frame:00000000000065BD                 db  0Eh
.eh_frame:00000000000065BE                 db  10h
.eh_frame:00000000000065BF                 db  42h ; B
.eh_frame:00000000000065C0                 db  0Eh
.eh_frame:00000000000065C1                 db    8
.eh_frame:00000000000065C2                 db  44h ; D
.eh_frame:00000000000065C3                 db  0Bh
.eh_frame:00000000000065C4                 db  60h ; `
.eh_frame:00000000000065C5                 db  0Ah
.eh_frame:00000000000065C6                 db  0Eh
.eh_frame:00000000000065C7                 db  18h
.eh_frame:00000000000065C8                 db  41h ; A
.eh_frame:00000000000065C9                 db  0Eh
.eh_frame:00000000000065CA                 db  10h
.eh_frame:00000000000065CB                 db  42h ; B
.eh_frame:00000000000065CC                 db  0Eh
.eh_frame:00000000000065CD                 db    8
.eh_frame:00000000000065CE                 db  45h ; E
.eh_frame:00000000000065CF                 db  0Bh
.eh_frame:00000000000065D0                 db  1Ch
.eh_frame:00000000000065D1                 db    0
.eh_frame:00000000000065D2                 db    0
.eh_frame:00000000000065D3                 db    0
.eh_frame:00000000000065D4                 db 0CCh
.eh_frame:00000000000065D5                 db    9
.eh_frame:00000000000065D6                 db    0
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db  28h ; (
.eh_frame:00000000000065D9                 db 0E2h
.eh_frame:00000000000065DA                 db 0FFh
.eh_frame:00000000000065DB                 db 0FFh
.eh_frame:00000000000065DC                 db  40h ; @
.eh_frame:00000000000065DD                 db    0
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db    0
.eh_frame:00000000000065E1                 db  44h ; D
.eh_frame:00000000000065E2                 db  0Eh
.eh_frame:00000000000065E3                 db  10h
.eh_frame:00000000000065E4                 db  83h
.eh_frame:00000000000065E5                 db    2
.eh_frame:00000000000065E6                 db  5Ah ; Z
.eh_frame:00000000000065E7                 db  0Ah
.eh_frame:00000000000065E8                 db  0Eh
.eh_frame:00000000000065E9                 db    8
.eh_frame:00000000000065EA                 db  4Ah ; J
.eh_frame:00000000000065EB                 db  0Bh
.eh_frame:00000000000065EC                 db  53h ; S
.eh_frame:00000000000065ED                 db  0Eh
.eh_frame:00000000000065EE                 db    8
.eh_frame:00000000000065EF                 db    0
.eh_frame:00000000000065F0                 db  2Ch ; ,
.eh_frame:00000000000065F1                 db    0
.eh_frame:00000000000065F2                 db    0
.eh_frame:00000000000065F3                 db    0
.eh_frame:00000000000065F4                 db 0ECh
.eh_frame:00000000000065F5                 db    9
.eh_frame:00000000000065F6                 db    0
.eh_frame:00000000000065F7                 db    0
.eh_frame:00000000000065F8                 db  48h ; H
.eh_frame:00000000000065F9                 db 0E2h
.eh_frame:00000000000065FA                 db 0FFh
.eh_frame:00000000000065FB                 db 0FFh
.eh_frame:00000000000065FC                 db  57h ; W
.eh_frame:00000000000065FD                 db    0
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db    0
.eh_frame:0000000000006601                 db  63h ; c
.eh_frame:0000000000006602                 db  0Eh
.eh_frame:0000000000006603                 db  10h
.eh_frame:0000000000006604                 db  8Ch
.eh_frame:0000000000006605                 db    2
.eh_frame:0000000000006606                 db  41h ; A
.eh_frame:0000000000006607                 db  0Eh
.eh_frame:0000000000006608                 db  18h
.eh_frame:0000000000006609                 db  86h
.eh_frame:000000000000660A                 db    3
.eh_frame:000000000000660B                 db  44h ; D
.eh_frame:000000000000660C                 db  0Eh
.eh_frame:000000000000660D                 db  20h
.eh_frame:000000000000660E                 db  83h
.eh_frame:000000000000660F                 db    4
.eh_frame:0000000000006610                 db  6Bh ; k
.eh_frame:0000000000006611                 db  0Eh
.eh_frame:0000000000006612                 db  18h
.eh_frame:0000000000006613                 db  41h ; A
.eh_frame:0000000000006614                 db  0Eh
.eh_frame:0000000000006615                 db  10h
.eh_frame:0000000000006616                 db  42h ; B
.eh_frame:0000000000006617                 db  0Eh
.eh_frame:0000000000006618                 db    8
.eh_frame:0000000000006619                 db    0
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db    0
.eh_frame:000000000000661D                 db    0
.eh_frame:000000000000661E                 db    0
.eh_frame:000000000000661F                 db    0
.eh_frame:0000000000006620                 db  44h ; D
.eh_frame:0000000000006621                 db    0
.eh_frame:0000000000006622                 db    0
.eh_frame:0000000000006623                 db    0
.eh_frame:0000000000006624                 db  1Ch
.eh_frame:0000000000006625                 db  0Ah
.eh_frame:0000000000006626                 db    0
.eh_frame:0000000000006627                 db    0
.eh_frame:0000000000006628                 db  78h ; x
.eh_frame:0000000000006629                 db 0E2h
.eh_frame:000000000000662A                 db 0FFh
.eh_frame:000000000000662B                 db 0FFh
.eh_frame:000000000000662C                 db  65h ; e
.eh_frame:000000000000662D                 db    0
.eh_frame:000000000000662E                 db    0
.eh_frame:000000000000662F                 db    0
.eh_frame:0000000000006630                 db    0
.eh_frame:0000000000006631                 db  42h ; B
.eh_frame:0000000000006632                 db  0Eh
.eh_frame:0000000000006633                 db  10h
.eh_frame:0000000000006634                 db  8Fh
.eh_frame:0000000000006635                 db    2
.eh_frame:0000000000006636                 db  42h ; B
.eh_frame:0000000000006637                 db  0Eh
.eh_frame:0000000000006638                 db  18h
.eh_frame:0000000000006639                 db  8Eh
.eh_frame:000000000000663A                 db    3
.eh_frame:000000000000663B                 db  45h ; E
.eh_frame:000000000000663C                 db  0Eh
.eh_frame:000000000000663D                 db  20h
.eh_frame:000000000000663E                 db  8Dh
.eh_frame:000000000000663F                 db    4
.eh_frame:0000000000006640                 db  42h ; B
.eh_frame:0000000000006641                 db  0Eh
.eh_frame:0000000000006642                 db  28h ; (
.eh_frame:0000000000006643                 db  8Ch
.eh_frame:0000000000006644                 db    5
.eh_frame:0000000000006645                 db  48h ; H
.eh_frame:0000000000006646                 db  0Eh
.eh_frame:0000000000006647                 db  30h ; 0
.eh_frame:0000000000006648                 db  86h
.eh_frame:0000000000006649                 db    6
.eh_frame:000000000000664A                 db  48h ; H
.eh_frame:000000000000664B                 db  0Eh
.eh_frame:000000000000664C                 db  38h ; 8
.eh_frame:000000000000664D                 db  83h
.eh_frame:000000000000664E                 db    7
.eh_frame:000000000000664F                 db  4Dh ; M
.eh_frame:0000000000006650                 db  0Eh
.eh_frame:0000000000006651                 db  40h ; @
.eh_frame:0000000000006652                 db  72h ; r
.eh_frame:0000000000006653                 db  0Eh
.eh_frame:0000000000006654                 db  38h ; 8
.eh_frame:0000000000006655                 db  41h ; A
.eh_frame:0000000000006656                 db  0Eh
.eh_frame:0000000000006657                 db  30h ; 0
.eh_frame:0000000000006658                 db  41h ; A
.eh_frame:0000000000006659                 db  0Eh
.eh_frame:000000000000665A                 db  28h ; (
.eh_frame:000000000000665B                 db  42h ; B
.eh_frame:000000000000665C                 db  0Eh
.eh_frame:000000000000665D                 db  20h
.eh_frame:000000000000665E                 db  42h ; B
.eh_frame:000000000000665F                 db  0Eh
.eh_frame:0000000000006660                 db  18h
.eh_frame:0000000000006661                 db  42h ; B
.eh_frame:0000000000006662                 db  0Eh
.eh_frame:0000000000006663                 db  10h
.eh_frame:0000000000006664                 db  42h ; B
.eh_frame:0000000000006665                 db  0Eh
.eh_frame:0000000000006666                 db    8
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db  14h
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db  64h ; d
.eh_frame:000000000000666D                 db  0Ah
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db 0A0h
.eh_frame:0000000000006671                 db 0E2h
.eh_frame:0000000000006672                 db 0FFh
.eh_frame:0000000000006673                 db 0FFh
.eh_frame:0000000000006674                 db    2
.eh_frame:0000000000006675                 db    0
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db    0
.eh_frame:0000000000006679                 db    0
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db    0
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db  10h
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db  7Ch ; |
.eh_frame:0000000000006685                 db  0Ah
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db  98h
.eh_frame:0000000000006689                 db 0E2h
.eh_frame:000000000000668A                 db 0FFh
.eh_frame:000000000000668B                 db 0FFh
.eh_frame:000000000000668C                 db  0Eh
.eh_frame:000000000000668D                 db    0
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db    0
.eh_frame:0000000000006691                 db    0
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694 __FRAME_END__   db    0
.eh_frame:0000000000006695                 db    0
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006697 _eh_frame       ends
.eh_frame:0000000000006697
.init_array:0000000000206C10 ; ELF Initialization Function Table
.init_array:0000000000206C10 ; ===========================================================================
.init_array:0000000000206C10
.init_array:0000000000206C10 ; Segment type: Pure data
.init_array:0000000000206C10 ; Segment permissions: Read/Write
.init_array:0000000000206C10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206C10                 assume cs:_init_array
.init_array:0000000000206C10                 ;org 206C10h
.init_array:0000000000206C10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206C10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206C10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206C10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206C10
.fini_array:0000000000206C18 ; ELF Termination Function Table
.fini_array:0000000000206C18 ; ===========================================================================
.fini_array:0000000000206C18
.fini_array:0000000000206C18 ; Segment type: Pure data
.fini_array:0000000000206C18 ; Segment permissions: Read/Write
.fini_array:0000000000206C18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206C18                 assume cs:_fini_array
.fini_array:0000000000206C18                 ;org 206C18h
.fini_array:0000000000206C18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206C18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206C18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206C18
.data.rel.ro:0000000000206C20 ; ===========================================================================
.data.rel.ro:0000000000206C20
.data.rel.ro:0000000000206C20 ; Segment type: Pure data
.data.rel.ro:0000000000206C20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206C20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206C20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206C20                 ;org 206C20h
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset file+1Bh      ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1188h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4930h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206C10h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206C18h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 7E8h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 28Ch>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3F0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0D98h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B40h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 258h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0AE0h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A74h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 10h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_11A0↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_11A0+6↑r
.got:0000000000206E80 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000206E88 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E90 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E98 __errno_location_ptr dq offset __errno_location
.got:0000000000206E98                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206EA0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EB0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 __assert_fail_ptr dq offset __assert_fail
.got:0000000000206F10                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000206F18 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F20 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F28 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F28                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F30 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F38 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000206F40 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F48 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F50 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F58 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F60 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD8                                         ; DATA XREF: start+24↑r
.got:0000000000206FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF0 _got            ends
.got:0000000000206FF0
LOAD:0000000000206FF8 ; ===========================================================================
LOAD:0000000000206FF8
LOAD:0000000000206FF8 ; Segment type: Pure data
LOAD:0000000000206FF8 ; Segment permissions: Read/Write
LOAD:0000000000206FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF8                 assume cs:LOAD
LOAD:0000000000206FF8                 ;org 206FF8h
LOAD:0000000000206FF8                 align 20h
LOAD:0000000000206FF8 LOAD            ends
LOAD:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+476↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1FC2↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_343D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000770↑o
.bss:0000000000207080                                         ; LOAD:00000000000007B8↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; _IO_FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000758↑o
.bss:0000000000207088                                         ; main:loc_151B↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207090 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207090                                         ; DATA XREF: LOAD:0000000000000788↑o
.bss:0000000000207090                                         ; LOAD:00000000000007A0↑o ...
.bss:0000000000207090                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207098                 align 20h
.bss:00000000002070A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070A0 ; FILE *stderr
.bss:00000000002070A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D0↑o
.bss:00000000002070A0                                         ; close_stdout:loc_1F6C↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'stderr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070A9                 align 10h
.bss:00000000002070B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070B0                                         ; close_stdout+1B↑r
.bss:00000000002070B1                 align 8
.bss:00000000002070B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070B8                                         ; close_stdout+56↑r
.bss:00000000002070C0                 public program_name
.bss:00000000002070C0 program_name    dq ?                    ; DATA XREF: usage:loc_1B6B↑r
.bss:00000000002070C0                                         ; set_program_name:loc_205D↑w
.bss:00000000002070C8                 align 20h
.bss:00000000002070E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002070E0                                         ; quotearg_free+46↑o ...
.bss:00000000002070E1                 db    ? ;
.bss:00000000002070E2                 db    ? ;
.bss:00000000002070E3                 db    ? ;
.bss:00000000002070E4                 db    ? ;
.bss:00000000002070E5                 db    ? ;
.bss:00000000002070E6                 db    ? ;
.bss:00000000002070E7                 db    ? ;
.bss:00000000002070E8                 db    ? ;
.bss:00000000002070E9                 db    ? ;
.bss:00000000002070EA                 db    ? ;
.bss:00000000002070EB                 db    ? ;
.bss:00000000002070EC                 db    ? ;
.bss:00000000002070ED                 db    ? ;
.bss:00000000002070EE                 db    ? ;
.bss:00000000002070EF                 db    ? ;
.bss:00000000002070F0                 db    ? ;
.bss:00000000002070F1                 db    ? ;
.bss:00000000002070F2                 db    ? ;
.bss:00000000002070F3                 db    ? ;
.bss:00000000002070F4                 db    ? ;
.bss:00000000002070F5                 db    ? ;
.bss:00000000002070F6                 db    ? ;
.bss:00000000002070F7                 db    ? ;
.bss:00000000002070F8                 db    ? ;
.bss:00000000002070F9                 db    ? ;
.bss:00000000002070FA                 db    ? ;
.bss:00000000002070FB                 db    ? ;
.bss:00000000002070FC                 db    ? ;
.bss:00000000002070FD                 db    ? ;
.bss:00000000002070FE                 db    ? ;
.bss:00000000002070FF                 db    ? ;
.bss:0000000000207100                 db    ? ;
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002071E0                                         ; get_quoting_style↑o ...
.bss:00000000002071F0 xmmword_2071F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002071F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207200 xmmword_207200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207210 qword_207210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207210 _bss            ends
.bss:0000000000207210
.prgend:0000000000207218 ; ===========================================================================
.prgend:0000000000207218
.prgend:0000000000207218 ; Segment type: Zero-length
.prgend:0000000000207218 _prgend         segment byte public '' use64
.prgend:0000000000207218 _end            label byte
.prgend:0000000000207218 _prgend         ends
.prgend:0000000000207218
extern:0000000000207220 ; ===========================================================================
extern:0000000000207220
extern:0000000000207220 ; Segment type: Externs
extern:0000000000207220 ; extern
extern:0000000000207220 ; char *getenv(const char *name)
extern:0000000000207220                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000207220                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000207228 ; void free(void *ptr)
extern:0000000000207228                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207228                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207230 ; void __noreturn abort(void)
extern:0000000000207230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207230                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207238 ; int *_errno_location(void)
extern:0000000000207238                 extrn __errno_location:near
extern:0000000000207238                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207240 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207240                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207240                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207248 ; void __noreturn exit(int status)
extern:0000000000207248                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207248                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207250 ; size_t _fpending(FILE *fp)
extern:0000000000207250                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207250                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207258 ; char *textdomain(const char *domainname)
extern:0000000000207258                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207258                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207260 ; int fclose(FILE *stream)
extern:0000000000207260                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207260                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207268 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207268                 extrn bindtextdomain:near
extern:0000000000207268                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207268                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207270 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207270                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207270                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207278 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207278                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207278                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207278                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207280 ; size_t strlen(const char *s)
extern:0000000000207280                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207280                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000207288                 extrn __stack_chk_fail:near
extern:0000000000207288                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000207288                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000207290 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000207290                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000207290                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000207298 ; int _overflow(_IO_FILE *, int)
extern:0000000000207298                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000207298                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002072A0 ; char *strrchr(const char *s, int c)
extern:00000000002072A0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072A0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072A8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072A8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072A8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072B0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002072B0                 extrn __assert_fail:near
extern:00000000002072B0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002072B0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002072B8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072B8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072B8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072C0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072C0                 extrn __libc_start_main:near
extern:00000000002072C0                                         ; CODE XREF: start+24↑p
extern:00000000002072C0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072C8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072C8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072D0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072D0                 extrn fputs_unlocked:near
extern:00000000002072D0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072D0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072D8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072D8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072D8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072E0 ; int strcmp(const char *s1, const char *s2)
extern:00000000002072E0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002072E8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072E8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072E8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002072F0 ; int fileno(FILE *stream)
extern:00000000002072F0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002072F0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002072F8 ; void *malloc(size_t size)
extern:00000000002072F8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002072F8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207300 ; int fflush(FILE *stream)
extern:0000000000207300                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207300                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207308 ; char *nl_langinfo(nl_item item)
extern:0000000000207308                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207308                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207310 ; int _freading(FILE *fp)
extern:0000000000207310                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207310                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207318 ; void *realloc(void *ptr, size_t size)
extern:0000000000207318                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207318                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207320 ; char *setlocale(int category, const char *locale)
extern:0000000000207320                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207320                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207328                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207328                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207330 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207330                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207330                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207338 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207338                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207338                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207340 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207340                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207340                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207348 ; void __noreturn exit(int status)
extern:0000000000207348                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207348                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207350 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207350                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207350                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207358                 extrn __fprintf_chk:near
extern:0000000000207358                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207358                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207360 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207360                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207360                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207368 ; int iswprint(wint_t wc)
extern:0000000000207368                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207368                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207370 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207370                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207370                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207370                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207378 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207378                 extrn __ctype_b_loc:near
extern:0000000000207378                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207378                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207380                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207380                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207388                 extrn __gmon_start__:near ; weak
extern:0000000000207388                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207388                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000207390                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000207390
extern:0000000000207390
extern:0000000000207390                 end start
