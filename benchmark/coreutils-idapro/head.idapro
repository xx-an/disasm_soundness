LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : E6D6F429C893417D34780ACB2C135044DA05403CFFAFDB1288ECA75F3B4B2327
LOAD:0000000000000000 ; Input MD5    : B3627D4E99CF6E4639C9EDE10BD44323
LOAD:0000000000000000 ; Input CRC32  : B1EBF7EF
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/head
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'head.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'full-read.c'
LOAD:0000000000000000 ; Source File : 'offtostr.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 32198h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8B28h                ; Size in file image
LOAD:00000000000000D8                 dq 8B28h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9A70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209A70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 630h                 ; Size in file image
LOAD:0000000000000110                 dq 7E8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7A7Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7A7Ch                ; Physical address
LOAD:00000000000001B0                 dq 2B4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2B4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9A70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209A70h              ; Physical address
LOAD:0000000000000220                 dq 590h                 ; Size in file image
LOAD:0000000000000228                 dq 590h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0F1h, 0AFh, 98h, 87h, 0F3h, 76h, 8Dh, 0DBh, 2Ch, 76h ; Desc
LOAD:0000000000000284                 db 57h, 69h, 28h, 63h, 0ADh, 3Dh, 0A8h, 19h, 0A4h, 3Fh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 38h, 39h, 3Eh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8E0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8E0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8E0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8E0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_8E0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aClearerrUnlock - offset byte_8E0, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8E0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_8E0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_8E0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_8E0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8E0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_8E0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_8E0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_8E0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_8E0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_8E0, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrrchr - offset byte_8E0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLseek - offset byte_8E0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004C0                            0>
LOAD:00000000000004D8                 Elf64_Sym <offset aAssertFail - offset byte_8E0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrtoulInterna - offset byte_8E0, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8E0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFclose+1 - offset byte_8E0, 12h, 0, 0, \ ; "close"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemchr - offset byte_8E0, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aRead - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000550                            0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8E0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8E0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8E0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8E0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_8E0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8E0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8E0, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_8E0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_8E0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_8E0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFxstat - offset byte_8E0, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8E0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8E0, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aRealloc - offset byte_8E0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_8E0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_8E0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aError - offset byte_8E0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aMemrchr - offset byte_8E0, 12h, 0, 0, \ ; "memrchr"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aOpen - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:0000000000000718                            0>
LOAD:0000000000000730                 Elf64_Sym <offset aFseeko - offset byte_8E0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaAtexit - offset byte_8E0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aExit+1 - offset byte_8E0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFwrite - offset byte_8E0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFprintfChk - offset byte_8E0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8E0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMbsinit - offset byte_8E0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aIswprint - offset byte_8E0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCxaFinalize - offset byte_8E0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCtypeBLoc - offset byte_8E0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStdout - offset byte_8E0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000820                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgname - offset byte_8E0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aProgramInvocat - offset byte_8E0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aPrognameFull - offset byte_8E0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000868                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8E0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000880                            offset __bss_start, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aStderr - offset byte_8E0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000898                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptind - offset byte_8E0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008B0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008C8                 Elf64_Sym <offset aOptarg - offset byte_8E0, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008C8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0 ; ELF String Table
LOAD:00000000000008E0 byte_8E0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008E0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008E1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C50↓o
LOAD:00000000000008EB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008F2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000008FF aClearerrUnlock db 'clearerr_unlocked',0
LOAD:00000000000008FF                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000911 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:000000000000091B aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000923 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:000000000000092B aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000932 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:000000000000093A aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000944 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:000000000000094A aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:000000000000095B aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000964 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:000000000000096C aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000972 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000972                                         ; LOAD:0000000000000760↑o
LOAD:0000000000000978 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:000000000000097F aMemrchr        db 'memrchr',0          ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000987 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000987                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:000000000000099F aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009AD aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009AD                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000009C4 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009CB aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009D2 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009D9 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000009EA aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009EF aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000009F6 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A04 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A0B aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000A11 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A18 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A18                                         ; LOAD:0000000000000520↑o
LOAD:0000000000000A1F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A26 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A2E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A3A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A48 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000A4F aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A5A aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A61 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A6D aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A76 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A7D aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A84 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A8F aOpen           db 'open',0             ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A94 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A9B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A9B                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AB9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AC8 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AC8                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000AD7 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000AE7 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AE7                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AF9 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B00 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000B00                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000B13 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B22 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B27 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B32 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B42 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B4F aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C60↓o
LOAD:0000000000000B59 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C70↓o
LOAD:0000000000000B65 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C80↓o
LOAD:0000000000000B70 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C90↓o
LOAD:0000000000000B7A aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CA0↓o
LOAD:0000000000000B86 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B86                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BA2 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BB1 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BB1                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BCB                 align 4
LOAD:0000000000000BCC ; ELF GNU Symbol Version Table
LOAD:0000000000000BCC                 dw 0
LOAD:0000000000000BCE                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BD8                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BEC                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C0C                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C0E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C20                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C22                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; memrchr@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C32                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C34                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C3C                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 0
LOAD:0000000000000C4E                 dw 0
LOAD:0000000000000C50 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C50                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8E0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C60                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8E0, \ ; "GLIBC_2.3"
LOAD:0000000000000C60                                10h>
LOAD:0000000000000C70                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8E0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C70                                10h>
LOAD:0000000000000C80                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8E0, \ ; "GLIBC_2.14"
LOAD:0000000000000C80                                10h>
LOAD:0000000000000C90                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8E0, \ ; "GLIBC_2.4"
LOAD:0000000000000C90                                10h>
LOAD:0000000000000CA0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8E0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CB0 ; ELF RELA Relocation Table
LOAD:0000000000000CB0                 Elf64_Rela <209A70h, 8, 2A60h> ; R_X86_64_RELATIVE +2A60h
LOAD:0000000000000CC8                 Elf64_Rela <209A78h, 8, 2A20h> ; R_X86_64_RELATIVE +2A20h
LOAD:0000000000000CE0                 Elf64_Rela <209A80h, 8, 70EAh> ; R_X86_64_RELATIVE +70EAh
LOAD:0000000000000CF8                 Elf64_Rela <209AA0h, 8, 682Eh> ; R_X86_64_RELATIVE +682Eh
LOAD:0000000000000D10                 Elf64_Rela <209AC0h, 8, 6816h> ; R_X86_64_RELATIVE +6816h
LOAD:0000000000000D28                 Elf64_Rela <209AE0h, 8, 6A1Ch> ; R_X86_64_RELATIVE +6A1Ch
LOAD:0000000000000D40                 Elf64_Rela <209B00h, 8, 6A30h> ; R_X86_64_RELATIVE +6A30h
LOAD:0000000000000D58                 Elf64_Rela <209B20h, 8, 6A36h> ; R_X86_64_RELATIVE +6A36h
LOAD:0000000000000D70                 Elf64_Rela <209B40h, 8, 6A3Dh> ; R_X86_64_RELATIVE +6A3Dh
LOAD:0000000000000D88                 Elf64_Rela <209B60h, 8, 6A45h> ; R_X86_64_RELATIVE +6A45h
LOAD:0000000000000DA0                 Elf64_Rela <209B80h, 8, 6A55h> ; R_X86_64_RELATIVE +6A55h
LOAD:0000000000000DB8                 Elf64_Rela <209BA0h, 8, 6A5Ah> ; R_X86_64_RELATIVE +6A5Ah
LOAD:0000000000000DD0                 Elf64_Rela <209BE0h, 8, 7101h> ; R_X86_64_RELATIVE +7101h
LOAD:0000000000000DE8                 Elf64_Rela <209BE8h, 8, 7109h> ; R_X86_64_RELATIVE +7109h
LOAD:0000000000000E00                 Elf64_Rela <209BF0h, 8, 710Fh> ; R_X86_64_RELATIVE +710Fh
LOAD:0000000000000E18                 Elf64_Rela <209BF8h, 8, 711Ch> ; R_X86_64_RELATIVE +711Ch
LOAD:0000000000000E30                 Elf64_Rela <209C00h, 8, 7129h> ; R_X86_64_RELATIVE +7129h
LOAD:0000000000000E48                 Elf64_Rela <209C08h, 8, 6989h> ; R_X86_64_RELATIVE +6989h
LOAD:0000000000000E60                 Elf64_Rela <209C10h, 8, 713Dh> ; R_X86_64_RELATIVE +713Dh
LOAD:0000000000000E78                 Elf64_Rela <209C18h, 8, 7122h> ; R_X86_64_RELATIVE +7122h
LOAD:0000000000000E90                 Elf64_Rela <209C20h, 8, 6966h> ; R_X86_64_RELATIVE +6966h
LOAD:0000000000000EA8                 Elf64_Rela <209C28h, 8, 7145h> ; R_X86_64_RELATIVE +7145h
LOAD:0000000000000EC0                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000000ED8                 Elf64_Rela <20A018h, 8, 7090h> ; R_X86_64_RELATIVE +7090h
LOAD:0000000000000EF0                 Elf64_Rela <20A080h, 8, 20A090h> ; R_X86_64_RELATIVE +20A090h
LOAD:0000000000000F08                 Elf64_Rela <20A098h, 8, 20A120h> ; R_X86_64_RELATIVE +20A120h
LOAD:0000000000000F20                 Elf64_Rela <209FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000F38                 Elf64_Rela <209FD8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F50                 Elf64_Rela <209FE0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F68                 Elf64_Rela <209FE8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F80                 Elf64_Rela <209FF0h, 3600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F98                 Elf64_Rela <20A0A0h, 3900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000FB0                 Elf64_Rela <20A0A8h, 3800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000FC8                 Elf64_Rela <20A0B0h, 3E00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000FE0                 Elf64_Rela <20A0B8h, 3F00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000FF8                 Elf64_Rela <20A0C0h, 3B00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001010                 Elf64_Rela <20A0E0h, 3D00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001028 ; ELF JMPREL Relocation Table
LOAD:0000000000001028                 Elf64_Rela <209E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001040                 Elf64_Rela <209E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001058                 Elf64_Rela <209E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001070                 Elf64_Rela <209E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001088                 Elf64_Rela <209E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000010A0                 Elf64_Rela <209E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000010B8                 Elf64_Rela <209E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:00000000000010D0                 Elf64_Rela <209E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000010E8                 Elf64_Rela <209E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001100                 Elf64_Rela <209E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001118                 Elf64_Rela <209E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001130                 Elf64_Rela <209E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001148                 Elf64_Rela <209EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001160                 Elf64_Rela <209EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001178                 Elf64_Rela <209EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001190                 Elf64_Rela <209EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000011A8                 Elf64_Rela <209EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000011C0                 Elf64_Rela <209EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000011D8                 Elf64_Rela <209ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011F0                 Elf64_Rela <209ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001208                 Elf64_Rela <209EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001220                 Elf64_Rela <209EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001238                 Elf64_Rela <209EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001250                 Elf64_Rela <209EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001268                 Elf64_Rela <209F00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001280                 Elf64_Rela <209F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001298                 Elf64_Rela <209F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000012B0                 Elf64_Rela <209F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000012C8                 Elf64_Rela <209F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000012E0                 Elf64_Rela <209F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000012F8                 Elf64_Rela <209F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001310                 Elf64_Rela <209F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001328                 Elf64_Rela <209F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001340                 Elf64_Rela <209F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001358                 Elf64_Rela <209F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001370                 Elf64_Rela <209F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001388                 Elf64_Rela <209F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000013A0                 Elf64_Rela <209F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000013B8                 Elf64_Rela <209F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000013D0                 Elf64_Rela <209F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000013E8                 Elf64_Rela <209F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT memrchr
LOAD:0000000000001400                 Elf64_Rela <209F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001418                 Elf64_Rela <209F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001430                 Elf64_Rela <209F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001448                 Elf64_Rela <209FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001460                 Elf64_Rela <209FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001478                 Elf64_Rela <209FB0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001490                 Elf64_Rela <209FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000014A8                 Elf64_Rela <209FC0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000014C0                 Elf64_Rela <209FC8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000014C0 LOAD            ends
LOAD:00000000000014C0
.init:00000000000014D8 ; ===========================================================================
.init:00000000000014D8
.init:00000000000014D8 ; Segment type: Pure code
.init:00000000000014D8 ; Segment permissions: Read/Execute
.init:00000000000014D8 _init           segment dword public 'CODE' use64
.init:00000000000014D8                 assume cs:_init
.init:00000000000014D8                 ;org 14D8h
.init:00000000000014D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000014D8
.init:00000000000014D8 ; =============== S U B R O U T I N E =======================================
.init:00000000000014D8
.init:00000000000014D8
.init:00000000000014D8                 public _init_proc
.init:00000000000014D8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000014D8                 sub     rsp, 8          ; _init
.init:00000000000014DC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000014E3                 test    rax, rax
.init:00000000000014E6                 jz      short loc_14EA
.init:00000000000014E8                 call    rax ; __gmon_start__
.init:00000000000014EA
.init:00000000000014EA loc_14EA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000014EA                 add     rsp, 8
.init:00000000000014EE                 retn
.init:00000000000014EE _init_proc      endp
.init:00000000000014EE
.init:00000000000014EE _init           ends
.init:00000000000014EE
LOAD:00000000000014EF ; ===========================================================================
LOAD:00000000000014EF
LOAD:00000000000014EF ; Segment type: Pure code
LOAD:00000000000014EF ; Segment permissions: Read/Execute
LOAD:00000000000014EF LOAD            segment byte public 'CODE' use64
LOAD:00000000000014EF                 assume cs:LOAD
LOAD:00000000000014EF                 ;org 14EFh
LOAD:00000000000014EF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014EF                 align 10h
LOAD:00000000000014EF LOAD            ends
LOAD:00000000000014EF
.plt:00000000000014F0 ; ===========================================================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Segment type: Pure code
.plt:00000000000014F0 ; Segment permissions: Read/Execute
.plt:00000000000014F0 _plt            segment para public 'CODE' use64
.plt:00000000000014F0                 assume cs:_plt
.plt:00000000000014F0                 ;org 14F0h
.plt:00000000000014F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0
.plt:00000000000014F0 sub_14F0        proc near               ; CODE XREF: .plt:000000000000150B↓j
.plt:00000000000014F0                                         ; .plt:000000000000151B↓j ...
.plt:00000000000014F0 ; __unwind {
.plt:00000000000014F0                 push    cs:qword_209E30
.plt:00000000000014F6                 jmp     cs:qword_209E38
.plt:00000000000014F6 sub_14F0        endp
.plt:00000000000014F6
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014FC                 align 20h
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; void free(void *ptr)
.plt:0000000000001500 _free           proc near               ; CODE XREF: main+99A↓p
.plt:0000000000001500                                         ; main+B3B↓p ...
.plt:0000000000001500                 jmp     cs:free_ptr
.plt:0000000000001500 _free           endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    0
.plt:000000000000150B                 jmp     sub_14F0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: noreturn thunk
.plt:0000000000001510
.plt:0000000000001510 ; void __noreturn abort(void)
.plt:0000000000001510 _abort          proc near               ; CODE XREF: diagnose_copy_fd_failure:loc_2FD3↓p
.plt:0000000000001510                                         ; set_program_name+9A↓p ...
.plt:0000000000001510                 jmp     cs:abort_ptr
.plt:0000000000001510 _abort          endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    1
.plt:000000000000151B                 jmp     sub_14F0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int *__errno_location(void)
.plt:0000000000001520 ___errno_location proc near             ; CODE XREF: main+4AE↓p
.plt:0000000000001520                                         ; main:loc_1F0C↓p ...
.plt:0000000000001520                 jmp     cs:__errno_location_ptr
.plt:0000000000001520 ___errno_location endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    2
.plt:000000000000152B                 jmp     sub_14F0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001530 _strncmp        proc near               ; CODE XREF: usage+2E4↓p
.plt:0000000000001530                                         ; usage+3A5↓p
.plt:0000000000001530                 jmp     cs:strncmp_ptr
.plt:0000000000001530 _strncmp        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    3
.plt:000000000000153B                 jmp     sub_14F0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: noreturn thunk
.plt:0000000000001540
.plt:0000000000001540 ; void __noreturn _exit(int status)
.plt:0000000000001540 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001540                 jmp     cs:_exit_ptr
.plt:0000000000001540 __exit          endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    4
.plt:000000000000154B                 jmp     sub_14F0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; size_t __fpending(FILE *fp)
.plt:0000000000001550 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001550                 jmp     cs:__fpending_ptr
.plt:0000000000001550 ___fpending     endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    5
.plt:000000000000155B                 jmp     sub_14F0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001560 _clearerr_unlocked proc near            ; CODE XREF: xwrite_stdout_part_6+30↓p
.plt:0000000000001560                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001560 _clearerr_unlocked endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    6
.plt:000000000000156B                 jmp     sub_14F0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; char *textdomain(const char *domainname)
.plt:0000000000001570 _textdomain     proc near               ; CODE XREF: main+5C↓p
.plt:0000000000001570                 jmp     cs:textdomain_ptr
.plt:0000000000001570 _textdomain     endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    7
.plt:000000000000157B                 jmp     sub_14F0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int fclose(FILE *stream)
.plt:0000000000001580 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001580                                         ; rpl_fclose+6B↓j
.plt:0000000000001580                 jmp     cs:fclose_ptr
.plt:0000000000001580 _fclose         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    8
.plt:000000000000158B                 jmp     sub_14F0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001590 _bindtextdomain proc near               ; CODE XREF: main+50↓p
.plt:0000000000001590                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001590 _bindtextdomain endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    9
.plt:000000000000159B                 jmp     sub_14F0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000015A0 _dcgettext      proc near               ; CODE XREF: main+3A4↓p
.plt:00000000000015A0                                         ; main+4A6↓p ...
.plt:00000000000015A0                 jmp     cs:dcgettext_ptr
.plt:00000000000015A0 _dcgettext      endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    0Ah
.plt:00000000000015AB                 jmp     sub_14F0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000015B0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000015B0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000015B0 ___ctype_get_mb_cur_max endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    0Bh
.plt:00000000000015BB                 jmp     sub_14F0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; size_t strlen(const char *s)
.plt:00000000000015C0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000015C0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000015C0                 jmp     cs:strlen_ptr
.plt:00000000000015C0 _strlen         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    0Ch
.plt:00000000000015CB                 jmp     sub_14F0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: noreturn thunk
.plt:00000000000015D0
.plt:00000000000015D0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2826↓p
.plt:00000000000015D0                                         ; elseek:loc_2B7E↓p ...
.plt:00000000000015D0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000015D0 ___stack_chk_fail endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    0Dh
.plt:00000000000015DB                 jmp     sub_14F0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000015E0 _getopt_long    proc near               ; CODE XREF: main+CE↓p
.plt:00000000000015E0                 jmp     cs:getopt_long_ptr
.plt:00000000000015E0 _getopt_long    endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    0Eh
.plt:00000000000015EB                 jmp     sub_14F0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000015F0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000015F0                 jmp     cs:mbrtowc_ptr
.plt:00000000000015F0 _mbrtowc        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    0Fh
.plt:00000000000015FB                 jmp     sub_14F0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; char *strchr(const char *s, int c)
.plt:0000000000001600 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:0000000000001600                                         ; xstrtoumax+143↓p ...
.plt:0000000000001600                 jmp     cs:strchr_ptr
.plt:0000000000001600 _strchr         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    10h
.plt:000000000000160B                 jmp     sub_14F0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *strrchr(const char *s, int c)
.plt:0000000000001610 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001610                 jmp     cs:strrchr_ptr
.plt:0000000000001610 _strrchr        endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    11h
.plt:000000000000161B                 jmp     sub_14F0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001620 _lseek          proc near               ; CODE XREF: elseek+22↓p
.plt:0000000000001620                                         ; head_lines+9E↓p ...
.plt:0000000000001620                 jmp     cs:lseek_ptr
.plt:0000000000001620 _lseek          endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    12h
.plt:000000000000162B                 jmp     sub_14F0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: noreturn thunk
.plt:0000000000001630
.plt:0000000000001630 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001630 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:0000000000001630                 jmp     cs:__assert_fail_ptr
.plt:0000000000001630 ___assert_fail  endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    13h
.plt:000000000000163B                 jmp     sub_14F0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001640 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001640                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001640 ___strtoul_internal endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    14h
.plt:000000000000164B                 jmp     sub_14F0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001650 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001650                                         ; xzalloc+12↓j
.plt:0000000000001650                 jmp     cs:memset_ptr
.plt:0000000000001650 _memset         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    15h
.plt:000000000000165B                 jmp     sub_14F0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int close(int fd)
.plt:0000000000001660 _close          proc near               ; CODE XREF: main+555↓p
.plt:0000000000001660                                         ; main+A5F↓p
.plt:0000000000001660                 jmp     cs:close_ptr
.plt:0000000000001660 _close          endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    16h
.plt:000000000000166B                 jmp     sub_14F0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001670 _memchr         proc near               ; CODE XREF: main+8FF↓p
.plt:0000000000001670                                         ; main+AD9↓p
.plt:0000000000001670                 jmp     cs:memchr_ptr
.plt:0000000000001670 _memchr         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    17h
.plt:000000000000167B                 jmp     sub_14F0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001680 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001680                 jmp     cs:read_ptr
.plt:0000000000001680 _read           endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    18h
.plt:000000000000168B                 jmp     sub_14F0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001690 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001690                 jmp     cs:memcmp_ptr
.plt:0000000000001690 _memcmp         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    19h
.plt:000000000000169B                 jmp     sub_14F0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000016A0 _fputs_unlocked proc near               ; CODE XREF: usage+C4↓p
.plt:00000000000016A0                                         ; usage+E9↓p ...
.plt:00000000000016A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000016A0 _fputs_unlocked endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    1Ah
.plt:00000000000016AB                 jmp     sub_14F0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000016B0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000016B0                 jmp     cs:calloc_ptr
.plt:00000000000016B0 _calloc         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    1Bh
.plt:00000000000016BB                 jmp     sub_14F0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000016C0 _memcpy         proc near               ; CODE XREF: main+A20↓p
.plt:00000000000016C0                                         ; xmemdup+23↓j
.plt:00000000000016C0                 jmp     cs:memcpy_ptr
.plt:00000000000016C0 _memcpy         endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    1Ch
.plt:00000000000016CB                 jmp     sub_14F0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int fileno(FILE *stream)
.plt:00000000000016D0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000016D0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000016D0                 jmp     cs:fileno_ptr
.plt:00000000000016D0 _fileno         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    1Dh
.plt:00000000000016DB                 jmp     sub_14F0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void *malloc(size_t size)
.plt:00000000000016E0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000016E0                 jmp     cs:malloc_ptr
.plt:00000000000016E0 _malloc         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    1Eh
.plt:00000000000016EB                 jmp     sub_14F0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int fflush(FILE *stream)
.plt:00000000000016F0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000016F0                                         ; rpl_fflush+3B↓j
.plt:00000000000016F0                 jmp     cs:fflush_ptr
.plt:00000000000016F0 _fflush         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    1Fh
.plt:00000000000016FB                 jmp     sub_14F0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; char *nl_langinfo(nl_item item)
.plt:0000000000001700 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001700                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001700 _nl_langinfo    endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    20h ; ' '
.plt:000000000000170B                 jmp     sub_14F0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001710 ___fxstat       proc near               ; CODE XREF: main+591↓p
.plt:0000000000001710                                         ; head_lines+14D↓p
.plt:0000000000001710                 jmp     cs:__fxstat_ptr
.plt:0000000000001710 ___fxstat       endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    21h ; '!'
.plt:000000000000171B                 jmp     sub_14F0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int __freading(FILE *fp)
.plt:0000000000001720 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001720                                         ; rpl_fflush+9↓p
.plt:0000000000001720                 jmp     cs:__freading_ptr
.plt:0000000000001720 ___freading     endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    22h ; '"'
.plt:000000000000172B                 jmp     sub_14F0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001730 _fwrite_unlocked proc near              ; CODE XREF: xwrite_stdout_part_6+18↓p
.plt:0000000000001730                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001730 _fwrite_unlocked endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    23h ; '#'
.plt:000000000000173B                 jmp     sub_14F0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001740 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001740                 jmp     cs:realloc_ptr
.plt:0000000000001740 _realloc        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    24h ; '$'
.plt:000000000000174B                 jmp     sub_14F0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; char *setlocale(int category, const char *locale)
.plt:0000000000001750 _setlocale      proc near               ; CODE XREF: main+3D↓p
.plt:0000000000001750                                         ; usage+2CB↓p ...
.plt:0000000000001750                 jmp     cs:setlocale_ptr
.plt:0000000000001750 _setlocale      endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    25h ; '%'
.plt:000000000000175B                 jmp     sub_14F0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ___printf_chk   proc near               ; CODE XREF: main+3E7↓p
.plt:0000000000001760                                         ; usage+78↓p ...
.plt:0000000000001760                 jmp     cs:__printf_chk_ptr
.plt:0000000000001760 ___printf_chk   endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    26h ; '&'
.plt:000000000000176B                 jmp     sub_14F0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001770 _error          proc near               ; CODE XREF: main+4BF↓p
.plt:0000000000001770                                         ; main+7E2↓p ...
.plt:0000000000001770                 jmp     cs:error_ptr
.plt:0000000000001770 _error          endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    27h ; '''
.plt:000000000000177B                 jmp     sub_14F0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; void *memrchr(const void *s, int c, size_t n)
.plt:0000000000001780 _memrchr        proc near               ; CODE XREF: elide_tail_lines_seekable+107↓p
.plt:0000000000001780                 jmp     cs:memrchr_ptr
.plt:0000000000001780 _memrchr        endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    28h ; '('
.plt:000000000000178B                 jmp     sub_14F0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int open(const char *file, int oflag, ...)
.plt:0000000000001790 _open           proc near               ; CODE XREF: main+474↓p
.plt:0000000000001790                 jmp     cs:open_ptr
.plt:0000000000001790 _open           endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    29h ; ')'
.plt:000000000000179B                 jmp     sub_14F0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000017A0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_66FA↓j
.plt:00000000000017A0                 jmp     cs:fseeko_ptr
.plt:00000000000017A0 _fseeko         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    2Ah ; '*'
.plt:00000000000017AB                 jmp     sub_14F0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000017B0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000017B0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000017B0 ___cxa_atexit   endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    2Bh ; '+'
.plt:00000000000017BB                 jmp     sub_14F0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: noreturn thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; void __noreturn exit(int status)
.plt:00000000000017C0 _exit           proc near               ; CODE XREF: main+189↓p
.plt:00000000000017C0                                         ; usage+58↓p
.plt:00000000000017C0                 jmp     cs:exit_ptr
.plt:00000000000017C0 _exit           endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    2Ch ; ','
.plt:00000000000017CB                 jmp     sub_14F0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000017D0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000017D0                 jmp     cs:fwrite_ptr
.plt:00000000000017D0 _fwrite         endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    2Dh ; '-'
.plt:00000000000017DB                 jmp     sub_14F0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000017E0                                         ; version_etc_arn+37↓p ...
.plt:00000000000017E0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000017E0 ___fprintf_chk  endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    2Eh ; '.'
.plt:00000000000017EB                 jmp     sub_14F0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000017F0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000017F0                 jmp     cs:mbsinit_ptr
.plt:00000000000017F0 _mbsinit        endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    2Fh ; '/'
.plt:00000000000017FB                 jmp     sub_14F0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; int iswprint(wint_t wc)
.plt:0000000000001800 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001800                 jmp     cs:iswprint_ptr
.plt:0000000000001800 _iswprint       endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    30h ; '0'
.plt:000000000000180B                 jmp     sub_14F0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001810 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001810                                         ; xstrtoumax+55↓p
.plt:0000000000001810                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001810 ___ctype_b_loc  endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    31h ; '1'
.plt:000000000000181B                 jmp     sub_14F0
.plt:000000000000181B ; } // starts at 14F0
.plt:000000000000181B _plt            ends
.plt:000000000000181B
.plt.got:0000000000001820 ; ===========================================================================
.plt.got:0000000000001820
.plt.got:0000000000001820 ; Segment type: Pure code
.plt.got:0000000000001820 ; Segment permissions: Read/Execute
.plt.got:0000000000001820 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001820                 assume cs:_plt_got
.plt.got:0000000000001820                 ;org 1820h
.plt.got:0000000000001820                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001820
.plt.got:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001820
.plt.got:0000000000001820 ; Attributes: thunk
.plt.got:0000000000001820
.plt.got:0000000000001820 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001820 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001820 ; __unwind {
.plt.got:0000000000001820                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001820 __cxa_finalize  endp
.plt.got:0000000000001820
.plt.got:0000000000001820 ; ---------------------------------------------------------------------------
.plt.got:0000000000001826                 align 8
.plt.got:0000000000001826 ; } // starts at 1820
.plt.got:0000000000001826 _plt_got        ends
.plt.got:0000000000001826
LOAD:0000000000001828 ; ===========================================================================
LOAD:0000000000001828
LOAD:0000000000001828 ; Segment type: Pure code
LOAD:0000000000001828 ; Segment permissions: Read/Execute
LOAD:0000000000001828 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001828                 assume cs:LOAD
LOAD:0000000000001828                 ;org 1828h
LOAD:0000000000001828                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001828                 align 10h
LOAD:0000000000001828 LOAD            ends
LOAD:0000000000001828
.text:0000000000001830 ; ===========================================================================
.text:0000000000001830
.text:0000000000001830 ; Segment type: Pure code
.text:0000000000001830 ; Segment permissions: Read/Execute
.text:0000000000001830 _text           segment para public 'CODE' use64
.text:0000000000001830                 assume cs:_text
.text:0000000000001830                 ;org 1830h
.text:0000000000001830                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001830
.text:0000000000001830 ; =============== S U B R O U T I N E =======================================
.text:0000000000001830
.text:0000000000001830
.text:0000000000001830 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001830                 public main
.text:0000000000001830 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001830
.text:0000000000001830 fd              = dword ptr -17Ch
.text:0000000000001830 var_178         = qword ptr -178h
.text:0000000000001830 var_170         = qword ptr -170h
.text:0000000000001830 var_168         = qword ptr -168h
.text:0000000000001830 var_160         = qword ptr -160h
.text:0000000000001830 var_158         = qword ptr -158h
.text:0000000000001830 var_150         = qword ptr -150h
.text:0000000000001830 var_148         = qword ptr -148h
.text:0000000000001830 var_140         = qword ptr -140h
.text:0000000000001830 stat_buf        = qword ptr -138h
.text:0000000000001830 var_130         = qword ptr -130h
.text:0000000000001830 var_128         = qword ptr -128h
.text:0000000000001830 nbytes          = qword ptr -120h
.text:0000000000001830 var_118         = qword ptr -118h
.text:0000000000001830 var_110         = qword ptr -110h
.text:0000000000001830 ptr             = qword ptr -108h
.text:0000000000001830 var_FF          = byte ptr -0FFh
.text:0000000000001830 var_FE          = byte ptr -0FEh
.text:0000000000001830 var_FD          = byte ptr -0FDh
.text:0000000000001830 var_FC          = dword ptr -0FCh
.text:0000000000001830 buf             = qword ptr -0F8h
.text:0000000000001830 var_F0          = qword ptr -0F0h
.text:0000000000001830 var_E8          = byte ptr -0E8h
.text:0000000000001830 var_D0          = dword ptr -0D0h
.text:0000000000001830 var_B8          = qword ptr -0B8h
.text:0000000000001830 var_B0          = qword ptr -0B0h
.text:0000000000001830 var_58          = byte ptr -58h
.text:0000000000001830 var_40          = qword ptr -40h
.text:0000000000001830
.text:0000000000001830 ; __unwind {
.text:0000000000001830                 push    r15
.text:0000000000001832                 push    r14
.text:0000000000001834                 push    r13
.text:0000000000001836                 push    r12
.text:0000000000001838                 push    rbp
.text:0000000000001839                 push    rbx
.text:000000000000183A                 mov     ebp, edi
.text:000000000000183C                 mov     rbx, rsi
.text:000000000000183F                 sub     rsp, 158h
.text:0000000000001846                 mov     rdi, [rsi]
.text:0000000000001849                 mov     rax, fs:28h
.text:0000000000001852                 mov     [rsp+188h+var_40], rax
.text:000000000000185A                 xor     eax, eax
.text:000000000000185C                 call    set_program_name
.text:0000000000001861                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001868                 mov     edi, 6          ; category
.text:000000000000186D                 call    _setlocale
.text:0000000000001872                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001879                 lea     rdi, domainname ; "coreutils"
.text:0000000000001880                 call    _bindtextdomain
.text:0000000000001885                 lea     rdi, domainname ; "coreutils"
.text:000000000000188C                 call    _textdomain
.text:0000000000001891                 lea     rdi, close_stdout
.text:0000000000001898                 call    atexit
.text:000000000000189D                 cmp     ebp, 1
.text:00000000000018A0                 mov     cs:have_read_stdin, 0
.text:00000000000018A7                 mov     cs:print_headers, 0
.text:00000000000018AE                 mov     cs:line_end, 0Ah
.text:00000000000018B5                 jle     short loc_18C4
.text:00000000000018B7                 mov     rsi, [rbx+8]
.text:00000000000018BB                 cmp     byte ptr [rsi], 2Dh ; '-'
.text:00000000000018BE                 jz      loc_1A73
.text:00000000000018C4
.text:00000000000018C4 loc_18C4:                               ; CODE XREF: main+85↑j
.text:00000000000018C4                                         ; main+24D↓j
.text:00000000000018C4                 mov     [rsp+188h+var_FE], 1
.text:00000000000018CC                 mov     r15d, 0Ah
.text:00000000000018D2                 xor     r12d, r12d
.text:00000000000018D5
.text:00000000000018D5 loc_18D5:                               ; CODE XREF: main+524↓j
.text:00000000000018D5                 mov     [rsp+188h+var_FF], 0
.text:00000000000018DD                 mov     r13d, 1
.text:00000000000018E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000018E8
.text:00000000000018E8 loc_18E8:                               ; CODE XREF: main+111↓j
.text:00000000000018E8                                         ; main+1C3↓j ...
.text:00000000000018E8                 lea     rcx, long_options ; longopts
.text:00000000000018EF                 lea     rdx, shortopts  ; "c:n:qvz0123456789"
.text:00000000000018F6                 xor     r8d, r8d        ; longind
.text:00000000000018F9                 mov     rsi, rbx        ; argv
.text:00000000000018FC                 mov     edi, ebp        ; argc
.text:00000000000018FE                 call    _getopt_long
.text:0000000000001903                 cmp     eax, 0FFFFFFFFh
.text:0000000000001906                 jz      loc_1AE8
.text:000000000000190C                 cmp     eax, 6Eh ; 'n'
.text:000000000000190F                 jz      loc_1A00
.text:0000000000001915                 jle     short loc_1948
.text:0000000000001917                 cmp     eax, 76h ; 'v'
.text:000000000000191A                 jz      loc_1A68
.text:0000000000001920                 jle     loc_1A50
.text:0000000000001926                 cmp     eax, 7Ah ; 'z'
.text:0000000000001929                 jz      loc_1A40
.text:000000000000192F                 cmp     eax, 80h
.text:0000000000001934                 jnz     loc_281E
.text:000000000000193A                 mov     cs:presume_input_pipe, r13b
.text:0000000000001941                 jmp     short loc_18E8
.text:0000000000001941 ; ---------------------------------------------------------------------------
.text:0000000000001943                 align 8
.text:0000000000001948
.text:0000000000001948 loc_1948:                               ; CODE XREF: main+E5↑j
.text:0000000000001948                 cmp     eax, 0FFFFFF7Eh
.text:000000000000194D                 jz      loc_2817
.text:0000000000001953                 cmp     eax, 63h ; 'c'
.text:0000000000001956                 jz      short loc_19C0
.text:0000000000001958                 cmp     eax, 0FFFFFF7Dh
.text:000000000000195D                 mov     r14d, eax
.text:0000000000001960                 jz      short loc_1980
.text:0000000000001962
.text:0000000000001962 loc_1962:                               ; CODE XREF: main+FF1↓j
.text:0000000000001962                 lea     eax, [r14-30h]
.text:0000000000001966                 cmp     eax, 9
.text:0000000000001969                 jbe     loc_282B
.text:000000000000196F
.text:000000000000196F loc_196F:                               ; CODE XREF: main+101F↓j
.text:000000000000196F                 mov     edi, 1          ; status
.text:0000000000001974                 call    usage
.text:0000000000001974 ; ---------------------------------------------------------------------------
.text:0000000000001979                 align 20h
.text:0000000000001980
.text:0000000000001980 loc_1980:                               ; CODE XREF: main+130↑j
.text:0000000000001980                 sub     rsp, 8
.text:0000000000001984                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000198B                 mov     rcx, cs:Version
.text:0000000000001992                 push    0
.text:0000000000001994                 lea     r9, aJimMeyering ; "Jim Meyering"
.text:000000000000199B                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000019A2                 lea     rdx, unk_6928
.text:00000000000019A9                 lea     rsi, aHead      ; "head"
.text:00000000000019B0                 xor     eax, eax
.text:00000000000019B2                 call    version_etc
.text:00000000000019B7                 xor     edi, edi        ; status
.text:00000000000019B9                 call    _exit
.text:00000000000019B9 ; ---------------------------------------------------------------------------
.text:00000000000019BE                 align 20h
.text:00000000000019C0
.text:00000000000019C0 loc_19C0:                               ; CODE XREF: main+126↑j
.text:00000000000019C0                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:00000000000019C7                 movzx   eax, byte ptr [rsi]
.text:00000000000019CA                 cmp     al, 2Dh ; '-'
.text:00000000000019CC                 setz    [rsp+188h+var_FF]
.text:00000000000019D4                 jnz     short loc_19E1
.text:00000000000019D6                 add     rsi, 1
.text:00000000000019DA                 mov     cs:optarg@@GLIBC_2_2_5, rsi
.text:00000000000019E1
.text:00000000000019E1 loc_19E1:                               ; CODE XREF: main+1A4↑j
.text:00000000000019E1                 xor     edi, edi
.text:00000000000019E3                 call    string_to_integer
.text:00000000000019E8                 mov     [rsp+188h+var_FE], 0
.text:00000000000019F0                 mov     r15, rax
.text:00000000000019F3                 jmp     loc_18E8
.text:00000000000019F3 ; ---------------------------------------------------------------------------
.text:00000000000019F8                 align 20h
.text:0000000000001A00
.text:0000000000001A00 loc_1A00:                               ; CODE XREF: main+DF↑j
.text:0000000000001A00                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001A07                 movzx   eax, byte ptr [rsi]
.text:0000000000001A0A                 cmp     al, 2Dh ; '-'
.text:0000000000001A0C                 setz    [rsp+188h+var_FF]
.text:0000000000001A14                 jnz     short loc_1A21
.text:0000000000001A16                 add     rsi, 1
.text:0000000000001A1A                 mov     cs:optarg@@GLIBC_2_2_5, rsi
.text:0000000000001A21
.text:0000000000001A21 loc_1A21:                               ; CODE XREF: main+1E4↑j
.text:0000000000001A21                 mov     edi, 1
.text:0000000000001A26                 call    string_to_integer
.text:0000000000001A2B                 mov     [rsp+188h+var_FE], 1
.text:0000000000001A33                 mov     r15, rax
.text:0000000000001A36                 jmp     loc_18E8
.text:0000000000001A36 ; ---------------------------------------------------------------------------
.text:0000000000001A3B                 align 20h
.text:0000000000001A40
.text:0000000000001A40 loc_1A40:                               ; CODE XREF: main+F9↑j
.text:0000000000001A40                 mov     cs:line_end, 0
.text:0000000000001A47                 jmp     loc_18E8
.text:0000000000001A47 ; ---------------------------------------------------------------------------
.text:0000000000001A4C                 align 10h
.text:0000000000001A50
.text:0000000000001A50 loc_1A50:                               ; CODE XREF: main+F0↑j
.text:0000000000001A50                 cmp     eax, 71h ; 'q'
.text:0000000000001A53                 jnz     loc_281E
.text:0000000000001A59                 mov     r12d, 2
.text:0000000000001A5F                 jmp     loc_18E8
.text:0000000000001A5F ; ---------------------------------------------------------------------------
.text:0000000000001A64                 align 8
.text:0000000000001A68
.text:0000000000001A68 loc_1A68:                               ; CODE XREF: main+EA↑j
.text:0000000000001A68                 mov     r12d, 1
.text:0000000000001A6E                 jmp     loc_18E8
.text:0000000000001A73 ; ---------------------------------------------------------------------------
.text:0000000000001A73
.text:0000000000001A73 loc_1A73:                               ; CODE XREF: main+8E↑j
.text:0000000000001A73                 movsx   eax, byte ptr [rsi+1]
.text:0000000000001A77                 sub     eax, 30h ; '0'
.text:0000000000001A7A                 cmp     eax, 9
.text:0000000000001A7D                 ja      loc_18C4
.text:0000000000001A83                 add     rsi, 1
.text:0000000000001A87                 mov     rdi, rsi
.text:0000000000001A8A                 nop     word ptr [rax+rax+00h]
.text:0000000000001A90
.text:0000000000001A90 loc_1A90:                               ; CODE XREF: main+270↓j
.text:0000000000001A90                 add     rdi, 1
.text:0000000000001A94                 movsx   eax, byte ptr [rdi]
.text:0000000000001A97                 mov     r13d, eax
.text:0000000000001A9A                 sub     eax, 30h ; '0'
.text:0000000000001A9D                 cmp     eax, 9
.text:0000000000001AA0                 jbe     short loc_1A90
.text:0000000000001AA2                 test    r13b, r13b
.text:0000000000001AA5                 jz      loc_27F4
.text:0000000000001AAB                 lea     rcx, jpt_1AE6
.text:0000000000001AB2                 mov     rdx, rdi
.text:0000000000001AB5                 xor     r9d, r9d
.text:0000000000001AB8                 mov     r10d, 0Ah
.text:0000000000001ABE                 xor     r8d, r8d
.text:0000000000001AC1                 mov     r11d, 1
.text:0000000000001AC7                 xor     r12d, r12d
.text:0000000000001ACA                 nop     word ptr [rax+rax+00h]
.text:0000000000001AD0
.text:0000000000001AD0 loc_1AD0:                               ; CODE XREF: main+4E3↓j
.text:0000000000001AD0                 lea     eax, [r13-62h]  ; switch 25 cases
.text:0000000000001AD4                 cmp     al, 18h
.text:0000000000001AD6                 ja      def_1AE6        ; jumptable 0000000000001AE6 default case, cases 100-106,110-112,114-117,119-121
.text:0000000000001ADC                 movzx   eax, al
.text:0000000000001ADF                 movsxd  rax, ds:(jpt_1AE6 - 702Ch)[rcx+rax*4]
.text:0000000000001AE3                 add     rax, rcx
.text:0000000000001AE6                 jmp     rax             ; switch jump
.text:0000000000001AE8 ; ---------------------------------------------------------------------------
.text:0000000000001AE8
.text:0000000000001AE8 loc_1AE8:                               ; CODE XREF: main+D6↑j
.text:0000000000001AE8                 cmp     r12d, 1
.text:0000000000001AEC                 jz      short loc_1AFE
.text:0000000000001AEE                 test    r12d, r12d
.text:0000000000001AF1                 jnz     short loc_1B05
.text:0000000000001AF3                 lea     eax, [rbp-1]
.text:0000000000001AF6                 cmp     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001AFC                 jle     short loc_1B05
.text:0000000000001AFE
.text:0000000000001AFE loc_1AFE:                               ; CODE XREF: main+2BC↑j
.text:0000000000001AFE                 mov     cs:print_headers, 1
.text:0000000000001B05
.text:0000000000001B05 loc_1B05:                               ; CODE XREF: main+2C1↑j
.text:0000000000001B05                                         ; main+2CC↑j
.text:0000000000001B05                 cmp     [rsp+188h+var_FE], 0
.text:0000000000001B0D                 jnz     short loc_1B22
.text:0000000000001B0F                 cmp     [rsp+188h+var_FF], 0
.text:0000000000001B17                 jz      short loc_1B22
.text:0000000000001B19                 test    r15, r15
.text:0000000000001B1C                 js      loc_2876
.text:0000000000001B22
.text:0000000000001B22 loc_1B22:                               ; CODE XREF: main+2DD↑j
.text:0000000000001B22                                         ; main+2E7↑j
.text:0000000000001B22                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001B29                 cmp     eax, ebp
.text:0000000000001B2B                 jge     loc_201C
.text:0000000000001B31                 lea     rdx, [rbx+rax*8]
.text:0000000000001B35                 mov     rbp, [rdx]
.text:0000000000001B38                 test    rbp, rbp
.text:0000000000001B3B                 jz      loc_1F43
.text:0000000000001B41                 lea     rax, aLt+2      ; "-"
.text:0000000000001B48                 mov     [rsp+188h+var_168], rax
.text:0000000000001B4D
.text:0000000000001B4D loc_1B4D:                               ; CODE XREF: main+802↓j
.text:0000000000001B4D                 mov     rcx, r15
.text:0000000000001B50                 mov     eax, 2000h
.text:0000000000001B55                 mov     [rsp+188h+var_170], r15
.text:0000000000001B5A                 and     ecx, 1FFFh
.text:0000000000001B60                 mov     [rsp+188h+var_FD], 1
.text:0000000000001B68                 sub     rax, rcx
.text:0000000000001B6B                 mov     [rsp+188h+var_110], rcx
.text:0000000000001B70                 mov     [rsp+188h+var_128], rax
.text:0000000000001B75                 add     rax, r15
.text:0000000000001B78                 shr     rax, 0Dh
.text:0000000000001B7C                 add     rax, 1
.text:0000000000001B80                 mov     [rsp+188h+var_160], rax
.text:0000000000001B85                 shr     rax, 1
.text:0000000000001B88                 mov     [rsp+188h+var_130], rax
.text:0000000000001B8D                 lea     rax, [r15+2000h]
.text:0000000000001B94                 mov     r15, rbp
.text:0000000000001B97                 mov     [rsp+188h+nbytes], rax
.text:0000000000001B9C                 add     rax, rax
.text:0000000000001B9F                 mov     [rsp+188h+var_118], rax
.text:0000000000001BA4                 lea     rax, [rdx+8]
.text:0000000000001BA8                 mov     [rsp+188h+var_178], rax
.text:0000000000001BAD                 lea     rax, [rsp+188h+var_E8]
.text:0000000000001BB5                 mov     [rsp+188h+stat_buf], rax
.text:0000000000001BBA                 jmp     loc_1C7C
.text:0000000000001BBF ; ---------------------------------------------------------------------------
.text:0000000000001BBF
.text:0000000000001BBF loc_1BBF:                               ; CODE XREF: main+467↓j
.text:0000000000001BBF                 lea     rsi, msgid      ; "standard input"
.text:0000000000001BC6                 mov     edx, 5          ; category
.text:0000000000001BCB                 xor     edi, edi        ; domainname
.text:0000000000001BCD                 mov     cs:have_read_stdin, 1
.text:0000000000001BD4                 call    _dcgettext
.text:0000000000001BD9                 mov     [rsp+188h+fd], 0
.text:0000000000001BE1                 mov     r15, rax
.text:0000000000001BE4
.text:0000000000001BE4 loc_1BE4:                               ; CODE XREF: main+47F↓j
.text:0000000000001BE4                 cmp     cs:print_headers, 0
.text:0000000000001BEB                 jz      short loc_1C23
.text:0000000000001BED                 cmp     cs:first_file_6927, 0
.text:0000000000001BF4                 lea     rax, aWrittenBySSAnd+1Ah ; "\n"
.text:0000000000001BFB                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001C02                 lea     rsi, aSS        ; "%s==> %s <==\n"
.text:0000000000001C09                 mov     rcx, r15
.text:0000000000001C0C                 mov     edi, 1
.text:0000000000001C11                 cmovz   rdx, rax
.text:0000000000001C15                 xor     eax, eax
.text:0000000000001C17                 call    ___printf_chk
.text:0000000000001C1C                 mov     cs:first_file_6927, 0
.text:0000000000001C23
.text:0000000000001C23 loc_1C23:                               ; CODE XREF: main+3BB↑j
.text:0000000000001C23                 cmp     [rsp+188h+var_FF], 0
.text:0000000000001C2B                 jnz     loc_1DB3
.text:0000000000001C31                 cmp     [rsp+188h+var_FE], 0
.text:0000000000001C39                 mov     rdx, [rsp+188h+var_170]
.text:0000000000001C3E                 mov     rdi, r15
.text:0000000000001C41                 mov     esi, [rsp+188h+fd]
.text:0000000000001C45                 jnz     loc_1EFF
.text:0000000000001C4B                 call    head_bytes
.text:0000000000001C50                 mov     r12d, eax
.text:0000000000001C53
.text:0000000000001C53 loc_1C53:                               ; CODE XREF: main+6D7↓j
.text:0000000000001C53                                         ; main+7E7↓j ...
.text:0000000000001C53                 test    r13d, r13d
.text:0000000000001C56                 jnz     loc_1D81
.text:0000000000001C5C
.text:0000000000001C5C loc_1C5C:                               ; CODE XREF: main+4C4↓j
.text:0000000000001C5C                                         ; main+55C↓j
.text:0000000000001C5C                 add     [rsp+188h+var_178], 8
.text:0000000000001C62                 and     [rsp+188h+var_FD], r12b
.text:0000000000001C6A                 mov     rax, [rsp+188h+var_178]
.text:0000000000001C6F                 mov     r15, [rax-8]
.text:0000000000001C73                 test    r15, r15
.text:0000000000001C76                 jz      loc_1F4B
.text:0000000000001C7C
.text:0000000000001C7C loc_1C7C:                               ; CODE XREF: main+38A↑j
.text:0000000000001C7C                 mov     rdi, [rsp+188h+var_168]
.text:0000000000001C81                 mov     ecx, 2
.text:0000000000001C86                 mov     rsi, r15
.text:0000000000001C89                 repe cmpsb
.text:0000000000001C8B                 setnbe  al
.text:0000000000001C8E                 sbb     al, 0
.text:0000000000001C90                 movsx   r13d, al
.text:0000000000001C94                 test    r13d, r13d
.text:0000000000001C97                 jz      loc_1BBF
.text:0000000000001C9D                 xor     esi, esi        ; oflag
.text:0000000000001C9F                 xor     eax, eax
.text:0000000000001CA1                 mov     rdi, r15        ; file
.text:0000000000001CA4                 call    _open
.text:0000000000001CA9                 test    eax, eax
.text:0000000000001CAB                 mov     [rsp+188h+fd], eax
.text:0000000000001CAF                 jns     loc_1BE4
.text:0000000000001CB5                 mov     rsi, r15
.text:0000000000001CB8                 mov     edi, 4
.text:0000000000001CBD                 call    quotearg_style
.text:0000000000001CC2                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:0000000000001CC9                 mov     rbx, rax
.text:0000000000001CCC                 mov     edx, 5          ; category
.text:0000000000001CD1
.text:0000000000001CD1 loc_1CD1:                               ; CODE XREF: main+57E↓j
.text:0000000000001CD1                 xor     edi, edi        ; domainname
.text:0000000000001CD3                 xor     r12d, r12d
.text:0000000000001CD6                 call    _dcgettext
.text:0000000000001CDB                 mov     rbp, rax
.text:0000000000001CDE                 call    ___errno_location
.text:0000000000001CE3                 mov     esi, [rax]      ; errnum
.text:0000000000001CE5                 mov     rcx, rbx
.text:0000000000001CE8                 mov     rdx, rbp        ; format
.text:0000000000001CEB                 xor     edi, edi        ; status
.text:0000000000001CED                 xor     eax, eax
.text:0000000000001CEF                 call    _error
.text:0000000000001CF4                 jmp     loc_1C5C
.text:0000000000001CF9 ; ---------------------------------------------------------------------------
.text:0000000000001CF9
.text:0000000000001CF9 loc_1CF9:                               ; CODE XREF: main+2B6↑j
.text:0000000000001CF9                                         ; DATA XREF: .rodata:jpt_1AE6↓o
.text:0000000000001CF9                 mov     r9d, 1          ; jumptable 0000000000001AE6 case 122
.text:0000000000001CFF                 xor     r10d, r10d
.text:0000000000001D02                 nop     word ptr [rax+rax+00h]
.text:0000000000001D08
.text:0000000000001D08 loc_1D08:                               ; CODE XREF: main+52F↓j
.text:0000000000001D08                                         ; main+537↓j ...
.text:0000000000001D08                 add     rdx, 1
.text:0000000000001D0C                 movzx   r13d, byte ptr [rdx]
.text:0000000000001D10                 test    r13b, r13b
.text:0000000000001D13                 jnz     loc_1AD0
.text:0000000000001D19                 test    r9b, r9b
.text:0000000000001D1C                 mov     [rsp+188h+var_FE], r11b
.text:0000000000001D24                 jnz     loc_28C2
.text:0000000000001D2A
.text:0000000000001D2A loc_1D2A:                               ; CODE XREF: main+1099↓j
.text:0000000000001D2A                 test    r8b, r8b
.text:0000000000001D2D                 mov     [rdi], r8b
.text:0000000000001D30                 jz      short loc_1D36
.text:0000000000001D32                 mov     byte ptr [rdi+1], 0
.text:0000000000001D36
.text:0000000000001D36 loc_1D36:                               ; CODE XREF: main+500↑j
.text:0000000000001D36                                         ; main+FCF↓j
.text:0000000000001D36                 movzx   edi, [rsp+188h+var_FE]
.text:0000000000001D3E                 add     rbx, 8
.text:0000000000001D42                 sub     ebp, 1
.text:0000000000001D45                 call    string_to_integer
.text:0000000000001D4A                 mov     r15, rax
.text:0000000000001D4D                 mov     rax, [rbx-8]
.text:0000000000001D51                 mov     [rbx], rax
.text:0000000000001D54                 jmp     loc_18D5
.text:0000000000001D59 ; ---------------------------------------------------------------------------
.text:0000000000001D59
.text:0000000000001D59 loc_1D59:                               ; CODE XREF: main+2B6↑j
.text:0000000000001D59                                         ; DATA XREF: .rodata:jpt_1AE6↓o
.text:0000000000001D59                 mov     r12d, 1         ; jumptable 0000000000001AE6 case 118
.text:0000000000001D5F                 jmp     short loc_1D08
.text:0000000000001D61 ; ---------------------------------------------------------------------------
.text:0000000000001D61
.text:0000000000001D61 loc_1D61:                               ; CODE XREF: main+2B6↑j
.text:0000000000001D61                                         ; DATA XREF: .rodata:jpt_1AE6↓o
.text:0000000000001D61                 mov     r12d, 2         ; jumptable 0000000000001AE6 case 113
.text:0000000000001D67                 jmp     short loc_1D08
.text:0000000000001D69 ; ---------------------------------------------------------------------------
.text:0000000000001D69
.text:0000000000001D69 loc_1D69:                               ; CODE XREF: main+2B6↑j
.text:0000000000001D69                                         ; DATA XREF: .rodata:jpt_1AE6↓o
.text:0000000000001D69                 mov     r11d, 1         ; jumptable 0000000000001AE6 case 108
.text:0000000000001D6F                 jmp     short loc_1D08
.text:0000000000001D71 ; ---------------------------------------------------------------------------
.text:0000000000001D71
.text:0000000000001D71 loc_1D71:                               ; CODE XREF: main+2B6↑j
.text:0000000000001D71                                         ; DATA XREF: .rodata:jpt_1AE6↓o
.text:0000000000001D71                 xor     r8d, r8d        ; jumptable 0000000000001AE6 case 99
.text:0000000000001D74                 xor     r11d, r11d
.text:0000000000001D77                 jmp     short loc_1D08
.text:0000000000001D79 ; ---------------------------------------------------------------------------
.text:0000000000001D79
.text:0000000000001D79 loc_1D79:                               ; CODE XREF: main+2B6↑j
.text:0000000000001D79                                         ; DATA XREF: .rodata:jpt_1AE6↓o
.text:0000000000001D79                 mov     r8d, r13d       ; jumptable 0000000000001AE6 cases 98,107,109
.text:0000000000001D7C                 xor     r11d, r11d
.text:0000000000001D7F                 jmp     short loc_1D08
.text:0000000000001D81 ; ---------------------------------------------------------------------------
.text:0000000000001D81
.text:0000000000001D81 loc_1D81:                               ; CODE XREF: main+426↑j
.text:0000000000001D81                 mov     edi, [rsp+188h+fd] ; fd
.text:0000000000001D85                 call    _close
.text:0000000000001D8A                 test    eax, eax
.text:0000000000001D8C                 jz      loc_1C5C
.text:0000000000001D92                 mov     rsi, r15
.text:0000000000001D95                 mov     edi, 4
.text:0000000000001D9A                 call    quotearg_style
.text:0000000000001D9F                 mov     edx, 5
.text:0000000000001DA4                 mov     rbx, rax
.text:0000000000001DA7                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:0000000000001DAE                 jmp     loc_1CD1
.text:0000000000001DB3 ; ---------------------------------------------------------------------------
.text:0000000000001DB3
.text:0000000000001DB3 loc_1DB3:                               ; CODE XREF: main+3FB↑j
.text:0000000000001DB3                 mov     rdx, [rsp+188h+stat_buf] ; stat_buf
.text:0000000000001DB8                 mov     esi, [rsp+188h+fd] ; fildes
.text:0000000000001DBC                 mov     edi, 1          ; ver
.text:0000000000001DC1                 call    ___fxstat
.text:0000000000001DC6                 test    eax, eax
.text:0000000000001DC8                 jnz     loc_1FD8
.text:0000000000001DCE                 cmp     cs:presume_input_pipe, 0
.text:0000000000001DD5                 jnz     short loc_1DEE
.text:0000000000001DD7                 mov     eax, [rsp+188h+var_D0]
.text:0000000000001DDE                 and     eax, 0D000h
.text:0000000000001DE3                 cmp     eax, 8000h
.text:0000000000001DE8                 jz      loc_23E3
.text:0000000000001DEE
.text:0000000000001DEE loc_1DEE:                               ; CODE XREF: main+5A5↑j
.text:0000000000001DEE                 cmp     [rsp+188h+var_FE], 0
.text:0000000000001DF6                 mov     [rsp+188h+var_148], 0FFFFFFFFFFFFFFFFh
.text:0000000000001DFF                 jnz     loc_2045
.text:0000000000001E05
.text:0000000000001E05 loc_1E05:                               ; CODE XREF: main+10A4↓j
.text:0000000000001E05                                         ; main+10CF↓j
.text:0000000000001E05                 cmp     [rsp+188h+var_170], 100000h
.text:0000000000001E0E                 mov     rax, [rsp+188h+var_148]
.text:0000000000001E13                 mov     [rsp+188h+var_158], rax
.text:0000000000001E18                 jbe     loc_2546
.text:0000000000001E1E                 mov     r10d, 1
.text:0000000000001E24                 mov     [rsp+188h+var_FC], r13d
.text:0000000000001E2C                 mov     [rsp+188h+var_140], 0
.text:0000000000001E35                 xor     ebp, ebp
.text:0000000000001E37                 xor     r14d, r14d
.text:0000000000001E3A                 xor     r12d, r12d
.text:0000000000001E3D                 xor     ebx, ebx
.text:0000000000001E3F                 mov     [rsp+188h+ptr], r15
.text:0000000000001E47                 mov     r13, r10
.text:0000000000001E4A
.text:0000000000001E4A loc_1E4A:                               ; CODE XREF: main+810↓j
.text:0000000000001E4A                 test    r12, r12
.text:0000000000001E4D                 jnz     loc_2276
.text:0000000000001E53                 mov     rax, [rsp+188h+var_160]
.text:0000000000001E58                 mov     r12d, 10h
.text:0000000000001E5E                 cmp     rax, 10h
.text:0000000000001E62                 cmovbe  r12, rax
.text:0000000000001E66
.text:0000000000001E66 loc_1E66:                               ; CODE XREF: main+A58↓j
.text:0000000000001E66                 lea     rsi, ds:0[r12*8]
.text:0000000000001E6E                 mov     rdi, r14
.text:0000000000001E71                 mov     r15, rbx
.text:0000000000001E74                 mov     rbx, r12
.text:0000000000001E77                 mov     r12, r13
.text:0000000000001E7A                 call    xrealloc
.text:0000000000001E7F                 mov     r14, rax
.text:0000000000001E82
.text:0000000000001E82 loc_1E82:                               ; CODE XREF: main+6CD↓j
.text:0000000000001E82                 test    bpl, bpl
.text:0000000000001E85                 lea     r13, [r14+r15*8]
.text:0000000000001E89                 jz      loc_1F8F
.text:0000000000001E8F                 mov     rsi, [r13+0]    ; buf
.text:0000000000001E93                 mov     edi, [rsp+188h+fd] ; fd
.text:0000000000001E97                 mov     edx, 2000h      ; nbytes
.text:0000000000001E9C                 call    full_read
.text:0000000000001EA1                 cmp     rax, 1FFFh
.text:0000000000001EA7                 mov     r13, rax
.text:0000000000001EAA                 jbe     short loc_1F0C
.text:0000000000001EAC                 add     [rsp+188h+var_158], rax
.text:0000000000001EB1                 xor     r9d, r9d
.text:0000000000001EB4
.text:0000000000001EB4 loc_1EB4:                               ; CODE XREF: main+70E↓j
.text:0000000000001EB4                 mov     rdi, [r14+r12*8]
.text:0000000000001EB8                 mov     rsi, r13
.text:0000000000001EBB                 mov     byte ptr [rsp+188h+var_150], r9b
.text:0000000000001EC0                 call    xwrite_stdout_part_6
.text:0000000000001EC5                 movzx   ebp, [rsp+188h+var_FF]
.text:0000000000001ECD                 movzx   r9d, byte ptr [rsp+188h+var_150]
.text:0000000000001ED3
.text:0000000000001ED3 loc_1ED3:                               ; CODE XREF: main+702↓j
.text:0000000000001ED3                                         ; main+70C↓j
.text:0000000000001ED3                 lea     rsi, [r12+1]
.text:0000000000001ED8                 xor     edx, edx
.text:0000000000001EDA                 mov     rax, rsi
.text:0000000000001EDD                 div     [rsp+188h+var_160]
.text:0000000000001EE2                 test    r9b, r9b
.text:0000000000001EE5                 mov     r10, rdx
.text:0000000000001EE8                 jnz     loc_246F
.text:0000000000001EEE                 cmp     rbx, r12
.text:0000000000001EF1                 mov     r15, r12
.text:0000000000001EF4                 jz      loc_2037
.text:0000000000001EFA                 mov     r12, rdx
.text:0000000000001EFD                 jmp     short loc_1E82
.text:0000000000001EFF ; ---------------------------------------------------------------------------
.text:0000000000001EFF
.text:0000000000001EFF loc_1EFF:                               ; CODE XREF: main+415↑j
.text:0000000000001EFF                 call    head_lines
.text:0000000000001F04                 mov     r12d, eax
.text:0000000000001F07                 jmp     loc_1C53
.text:0000000000001F0C ; ---------------------------------------------------------------------------
.text:0000000000001F0C
.text:0000000000001F0C loc_1F0C:                               ; CODE XREF: main+67A↑j
.text:0000000000001F0C                                         ; main+79A↓j
.text:0000000000001F0C                 call    ___errno_location
.text:0000000000001F11                 cmp     dword ptr [rax], 0
.text:0000000000001F14                 jnz     loc_26D4
.text:0000000000001F1A                 movzx   r9d, [rsp+188h+var_FF]
.text:0000000000001F23                 lea     r10, [r15+1]
.text:0000000000001F27
.text:0000000000001F27 loc_1F27:                               ; CODE XREF: main+7A3↓j
.text:0000000000001F27                 cmp     r10, [rsp+188h+var_160]
.text:0000000000001F2C                 setz    al
.text:0000000000001F2F                 or      bpl, al
.text:0000000000001F32                 jz      short loc_1ED3
.text:0000000000001F34                 add     [rsp+188h+var_158], r13
.text:0000000000001F39                 test    r13, r13
.text:0000000000001F3C                 jz      short loc_1ED3
.text:0000000000001F3E                 jmp     loc_1EB4
.text:0000000000001F43 ; ---------------------------------------------------------------------------
.text:0000000000001F43
.text:0000000000001F43 loc_1F43:                               ; CODE XREF: main+30B↑j
.text:0000000000001F43                 mov     [rsp+188h+var_FD], 1
.text:0000000000001F4B
.text:0000000000001F4B loc_1F4B:                               ; CODE XREF: main+446↑j
.text:0000000000001F4B                 cmp     cs:have_read_stdin, 0
.text:0000000000001F52                 jnz     loc_228D
.text:0000000000001F58
.text:0000000000001F58 loc_1F58:                               ; CODE XREF: main+A66↓j
.text:0000000000001F58                 movzx   eax, [rsp+188h+var_FD]
.text:0000000000001F60                 xor     eax, 1
.text:0000000000001F63                 mov     rcx, [rsp+188h+var_40]
.text:0000000000001F6B                 xor     rcx, fs:28h
.text:0000000000001F74                 movzx   eax, al
.text:0000000000001F77                 jnz     loc_2826
.text:0000000000001F7D                 add     rsp, 158h
.text:0000000000001F84                 pop     rbx
.text:0000000000001F85                 pop     rbp
.text:0000000000001F86                 pop     r12
.text:0000000000001F88                 pop     r13
.text:0000000000001F8A                 pop     r14
.text:0000000000001F8C                 pop     r15
.text:0000000000001F8E                 retn
.text:0000000000001F8F ; ---------------------------------------------------------------------------
.text:0000000000001F8F
.text:0000000000001F8F loc_1F8F:                               ; CODE XREF: main+659↑j
.text:0000000000001F8F                 mov     edi, 2000h
.text:0000000000001F94                 call    xmalloc
.text:0000000000001F99                 mov     edi, [rsp+188h+fd] ; fd
.text:0000000000001F9D                 lea     r10, [r15+1]
.text:0000000000001FA1                 mov     [r13+0], rax
.text:0000000000001FA5                 mov     edx, 2000h      ; nbytes
.text:0000000000001FAA                 mov     rsi, rax        ; buf
.text:0000000000001FAD                 mov     [rsp+188h+var_140], r10
.text:0000000000001FB2                 mov     [rsp+188h+var_150], r10
.text:0000000000001FB7                 call    full_read
.text:0000000000001FBC                 cmp     rax, 1FFFh
.text:0000000000001FC2                 mov     r13, rax
.text:0000000000001FC5                 mov     r10, [rsp+188h+var_150]
.text:0000000000001FCA                 jbe     loc_1F0C
.text:0000000000001FD0                 xor     r9d, r9d
.text:0000000000001FD3                 jmp     loc_1F27
.text:0000000000001FD8 ; ---------------------------------------------------------------------------
.text:0000000000001FD8
.text:0000000000001FD8 loc_1FD8:                               ; CODE XREF: main+598↑j
.text:0000000000001FD8                 mov     rsi, r15
.text:0000000000001FDB                 mov     edi, 4
.text:0000000000001FE0                 xor     r12d, r12d
.text:0000000000001FE3                 call    quotearg_style
.text:0000000000001FE8                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:0000000000001FEF                 mov     edx, 5          ; category
.text:0000000000001FF4                 xor     edi, edi        ; domainname
.text:0000000000001FF6                 mov     rbx, rax
.text:0000000000001FF9                 call    _dcgettext
.text:0000000000001FFE                 mov     rbp, rax
.text:0000000000002001                 call    ___errno_location
.text:0000000000002006                 mov     esi, [rax]      ; errnum
.text:0000000000002008                 mov     rcx, rbx
.text:000000000000200B                 mov     rdx, rbp        ; format
.text:000000000000200E                 xor     edi, edi        ; status
.text:0000000000002010                 xor     eax, eax
.text:0000000000002012                 call    _error
.text:0000000000002017                 jmp     loc_1C53
.text:000000000000201C ; ---------------------------------------------------------------------------
.text:000000000000201C
.text:000000000000201C loc_201C:                               ; CODE XREF: main+2FB↑j
.text:000000000000201C                 lea     rax, aLt+2      ; "-"
.text:0000000000002023                 lea     rdx, default_file_list_7140
.text:000000000000202A                 mov     [rsp+188h+var_168], rax
.text:000000000000202F                 mov     rbp, rax
.text:0000000000002032                 jmp     loc_1B4D
.text:0000000000002037 ; ---------------------------------------------------------------------------
.text:0000000000002037
.text:0000000000002037 loc_2037:                               ; CODE XREF: main+6C4↑j
.text:0000000000002037                 mov     r12, rbx
.text:000000000000203A                 mov     r13, r10
.text:000000000000203D                 mov     rbx, r15
.text:0000000000002040                 jmp     loc_1E4A
.text:0000000000002045 ; ---------------------------------------------------------------------------
.text:0000000000002045
.text:0000000000002045 loc_2045:                               ; CODE XREF: main+5CF↑j
.text:0000000000002045                                         ; main+BF1↓j ...
.text:0000000000002045                 mov     rax, [rsp+188h+var_148]
.text:000000000000204A                 mov     edi, 2018h
.text:000000000000204F                 mov     [rsp+188h+var_140], rax
.text:0000000000002054                 call    xmalloc
.text:0000000000002059                 mov     edi, 2018h
.text:000000000000205E                 mov     qword ptr [rax+2008h], 0
.text:0000000000002069                 mov     qword ptr [rax+2000h], 0
.text:0000000000002074                 mov     qword ptr [rax+2010h], 0
.text:000000000000207F                 mov     rbp, rax
.text:0000000000002082                 mov     [rsp+188h+var_158], rax
.text:0000000000002087                 call    xmalloc
.text:000000000000208C                 mov     [rsp+188h+var_150], 0
.text:0000000000002095                 mov     rbx, rax
.text:0000000000002098                 mov     [rsp+188h+ptr], r15
.text:00000000000020A0                 mov     [rsp+188h+var_FC], r13d
.text:00000000000020A8
.text:00000000000020A8 loc_20A8:                               ; CODE XREF: main+8B2↓j
.text:00000000000020A8                                         ; main+982↓j ...
.text:00000000000020A8                 mov     edi, [rsp+188h+fd] ; fd
.text:00000000000020AC                 mov     edx, 2000h      ; nbytes
.text:00000000000020B1                 mov     rsi, rbx        ; buf
.text:00000000000020B4                 call    safe_read
.text:00000000000020B9                 mov     r12, rax
.text:00000000000020BC                 lea     rax, [rax-1]
.text:00000000000020C0                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000020C4                 ja      loc_21B7
.text:00000000000020CA                 cmp     [rsp+188h+var_170], 0
.text:00000000000020D0                 jnz     short loc_20E4
.text:00000000000020D2                 mov     rsi, r12
.text:00000000000020D5                 mov     rdi, rbx
.text:00000000000020D8                 add     [rsp+188h+var_140], r12
.text:00000000000020DD                 call    xwrite_stdout_part_6
.text:00000000000020E2                 jmp     short loc_20A8
.text:00000000000020E4 ; ---------------------------------------------------------------------------
.text:00000000000020E4
.text:00000000000020E4 loc_20E4:                               ; CODE XREF: main+8A0↑j
.text:00000000000020E4                 mov     [rbx+2000h], r12
.text:00000000000020EB                 mov     qword ptr [rbx+2008h], 0
.text:00000000000020F6                 lea     r14, [rbx+r12]
.text:00000000000020FA                 mov     qword ptr [rbx+2010h], 0
.text:0000000000002105                 movsx   r15d, cs:line_end
.text:000000000000210D                 mov     rdi, rbx
.text:0000000000002110                 xor     r13d, r13d
.text:0000000000002113                 jmp     short loc_2126
.text:0000000000002113 ; ---------------------------------------------------------------------------
.text:0000000000002115                 align 8
.text:0000000000002118
.text:0000000000002118 loc_2118:                               ; CODE XREF: main+90B↓j
.text:0000000000002118                 lea     rdi, [rax+1]    ; s
.text:000000000000211C                 mov     [rbx+2008h], rdx
.text:0000000000002123                 mov     r13, rdx
.text:0000000000002126
.text:0000000000002126 loc_2126:                               ; CODE XREF: main+8E3↑j
.text:0000000000002126                 mov     rdx, r14
.text:0000000000002129                 mov     esi, r15d       ; c
.text:000000000000212C                 sub     rdx, rdi        ; n
.text:000000000000212F                 call    _memchr
.text:0000000000002134                 test    rax, rax
.text:0000000000002137                 lea     rdx, [r13+1]
.text:000000000000213B                 jnz     short loc_2118
.text:000000000000213D                 mov     rax, [rsp+188h+var_158]
.text:0000000000002142                 add     [rsp+188h+var_150], r13
.text:0000000000002147                 mov     rax, [rax+2000h]
.text:000000000000214E                 lea     rdx, [r12+rax]
.text:0000000000002152                 cmp     rdx, 1FFFh
.text:0000000000002159                 jbe     loc_2241
.text:000000000000215F                 mov     rax, [rsp+188h+var_158]
.text:0000000000002164                 mov     [rax+2010h], rbx
.text:000000000000216B                 mov     rax, [rsp+188h+var_150]
.text:0000000000002170                 sub     rax, [rbp+2008h]
.text:0000000000002177                 cmp     [rsp+188h+var_170], rax
.text:000000000000217C                 jnb     loc_23A8
.text:0000000000002182                 mov     rsi, [rbp+2000h]
.text:0000000000002189                 add     [rsp+188h+var_140], rsi
.text:000000000000218E                 test    rsi, rsi
.text:0000000000002191                 jnz     loc_2539
.text:0000000000002197
.text:0000000000002197 loc_2197:                               ; CODE XREF: main+D11↓j
.text:0000000000002197                 mov     rcx, [rbp+2008h]
.text:000000000000219E                 mov     [rsp+188h+var_158], rbx
.text:00000000000021A3                 mov     rbx, rbp
.text:00000000000021A6                 sub     [rsp+188h+var_150], rcx
.text:00000000000021AB                 mov     rbp, [rbp+2010h]
.text:00000000000021B2                 jmp     loc_20A8
.text:00000000000021B7 ; ---------------------------------------------------------------------------
.text:00000000000021B7
.text:00000000000021B7 loc_21B7:                               ; CODE XREF: main+894↑j
.text:00000000000021B7                 mov     rdi, rbx        ; ptr
.text:00000000000021BA                 mov     r15, [rsp+188h+ptr]
.text:00000000000021C2                 mov     r13d, [rsp+188h+var_FC]
.text:00000000000021CA                 call    _free
.text:00000000000021CF                 add     r12, 1
.text:00000000000021D3                 jz      loc_2725
.text:00000000000021D9                 mov     rcx, [rsp+188h+var_158]
.text:00000000000021DE                 mov     rax, [rcx+2000h]
.text:00000000000021E5                 test    rax, rax
.text:00000000000021E8                 jnz     loc_23BF
.text:00000000000021EE
.text:00000000000021EE loc_21EE:                               ; CODE XREF: main+B9A↓j
.text:00000000000021EE                                         ; main+BAE↓j
.text:00000000000021EE                 mov     r14, rbp
.text:00000000000021F1                 mov     [rsp+188h+var_158], rbp
.text:00000000000021F6                 mov     rbx, [rsp+188h+var_170]
.text:00000000000021FB                 mov     r12, [rsp+188h+var_150]
.text:0000000000002200                 mov     rbp, [rsp+188h+var_140]
.text:0000000000002205                 jmp     short loc_2215
.text:0000000000002207 ; ---------------------------------------------------------------------------
.text:0000000000002207
.text:0000000000002207 loc_2207:                               ; CODE XREF: main+A05↓j
.text:0000000000002207                                         ; main+A0F↓j
.text:0000000000002207                 sub     r12, [r14+2008h]
.text:000000000000220E                 mov     r14, [r14+2010h]
.text:0000000000002215
.text:0000000000002215 loc_2215:                               ; CODE XREF: main+9D5↑j
.text:0000000000002215                 mov     rax, r12
.text:0000000000002218                 sub     rax, [r14+2008h]
.text:000000000000221F                 cmp     rbx, rax
.text:0000000000002222                 jnb     loc_22B6
.text:0000000000002228                 mov     rsi, [r14+2000h]
.text:000000000000222F                 add     rbp, rsi
.text:0000000000002232                 test    rsi, rsi
.text:0000000000002235                 jz      short loc_2207
.text:0000000000002237                 mov     rdi, r14
.text:000000000000223A                 call    xwrite_stdout_part_6
.text:000000000000223F                 jmp     short loc_2207
.text:0000000000002241 ; ---------------------------------------------------------------------------
.text:0000000000002241
.text:0000000000002241 loc_2241:                               ; CODE XREF: main+929↑j
.text:0000000000002241                 mov     r14, [rsp+188h+var_158]
.text:0000000000002246                 mov     rdx, r12        ; n
.text:0000000000002249                 mov     rsi, rbx        ; src
.text:000000000000224C                 lea     rdi, [r14+rax]  ; dest
.text:0000000000002250                 call    _memcpy
.text:0000000000002255                 mov     rax, [rbx+2000h]
.text:000000000000225C                 add     [r14+2000h], rax
.text:0000000000002263                 mov     rax, [rbx+2008h]
.text:000000000000226A                 add     [r14+2008h], rax
.text:0000000000002271                 jmp     loc_20A8
.text:0000000000002276 ; ---------------------------------------------------------------------------
.text:0000000000002276
.text:0000000000002276 loc_2276:                               ; CODE XREF: main+61D↑j
.text:0000000000002276                 cmp     [rsp+188h+var_130], r12
.text:000000000000227B                 lea     rax, [r12+r12]
.text:000000000000227F                 cmovb   rax, [rsp+188h+var_160]
.text:0000000000002285                 mov     r12, rax
.text:0000000000002288                 jmp     loc_1E66
.text:000000000000228D ; ---------------------------------------------------------------------------
.text:000000000000228D
.text:000000000000228D loc_228D:                               ; CODE XREF: main+722↑j
.text:000000000000228D                 xor     edi, edi        ; fd
.text:000000000000228F                 call    _close
.text:0000000000002294                 test    eax, eax
.text:0000000000002296                 jns     loc_1F58
.text:000000000000229C                 call    ___errno_location
.text:00000000000022A1                 mov     esi, [rax]      ; errnum
.text:00000000000022A3                 lea     rdx, aLt+2      ; format
.text:00000000000022AA                 mov     edi, 1          ; status
.text:00000000000022AF                 xor     eax, eax
.text:00000000000022B1                 call    _error
.text:00000000000022B6
.text:00000000000022B6 loc_22B6:                               ; CODE XREF: main+9F2↑j
.text:00000000000022B6                 mov     rcx, [rsp+188h+var_170]
.text:00000000000022BB                 mov     rax, r12
.text:00000000000022BE                 mov     [rsp+188h+var_140], rbp
.text:00000000000022C3                 movzx   r12d, [rsp+188h+var_FF]
.text:00000000000022CC                 mov     rbp, [rsp+188h+var_158]
.text:00000000000022D1                 cmp     rcx, rax
.text:00000000000022D4                 jnb     loc_235F
.text:00000000000022DA                 mov     rbx, rax
.text:00000000000022DD                 mov     r12, [r14+2000h]
.text:00000000000022E4                 mov     rax, r14
.text:00000000000022E7                 sub     rbx, rcx
.text:00000000000022EA                 movsx   ecx, cs:line_end
.text:00000000000022F1                 mov     rbp, r14
.text:00000000000022F4                 add     r12, r14
.text:00000000000022F7                 mov     r14, rbx
.text:00000000000022FA                 mov     ebx, ecx
.text:00000000000022FC                 jmp     short loc_2323
.text:00000000000022FE ; ---------------------------------------------------------------------------
.text:00000000000022FE
.text:00000000000022FE loc_22FE:                               ; CODE XREF: main+AF6↓j
.text:00000000000022FE                 mov     rdx, r12
.text:0000000000002301                 mov     esi, ebx        ; c
.text:0000000000002303                 mov     rdi, rax        ; s
.text:0000000000002306                 sub     rdx, rax        ; n
.text:0000000000002309                 call    _memchr
.text:000000000000230E                 test    rax, rax
.text:0000000000002311                 jz      short loc_2328
.text:0000000000002313                 add     qword ptr [rbp+2008h], 1
.text:000000000000231B                 add     rax, 1
.text:000000000000231F                 sub     r14, 1
.text:0000000000002323
.text:0000000000002323 loc_2323:                               ; CODE XREF: main+ACC↑j
.text:0000000000002323                 test    r14, r14
.text:0000000000002326                 jnz     short loc_22FE
.text:0000000000002328
.text:0000000000002328 loc_2328:                               ; CODE XREF: main+AE1↑j
.text:0000000000002328                 mov     r14, rbp
.text:000000000000232B                 movzx   r12d, [rsp+188h+var_FF]
.text:0000000000002334                 mov     rbp, [rsp+188h+var_158]
.text:0000000000002339                 sub     rax, r14
.text:000000000000233C                 add     [rsp+188h+var_140], rax
.text:0000000000002341                 test    rax, rax
.text:0000000000002344                 jz      short loc_235F
.text:0000000000002346                 mov     rdi, r14
.text:0000000000002349                 mov     rsi, rax
.text:000000000000234C                 call    xwrite_stdout_part_6
.text:0000000000002351                 movzx   r12d, [rsp+188h+var_FF]
.text:000000000000235A                 mov     rdi, rbp
.text:000000000000235D                 jmp     short loc_2373
.text:000000000000235F ; ---------------------------------------------------------------------------
.text:000000000000235F
.text:000000000000235F loc_235F:                               ; CODE XREF: main+AA4↑j
.text:000000000000235F                                         ; main+B14↑j
.text:000000000000235F                 mov     rdi, rbp
.text:0000000000002362                 jmp     short loc_2373
.text:0000000000002364 ; ---------------------------------------------------------------------------
.text:0000000000002364
.text:0000000000002364 loc_2364:                               ; CODE XREF: main+B46↓j
.text:0000000000002364                 mov     rbx, [rdi+2010h]
.text:000000000000236B                 call    _free
.text:0000000000002370                 mov     rdi, rbx        ; ptr
.text:0000000000002373
.text:0000000000002373 loc_2373:                               ; CODE XREF: main+B2D↑j
.text:0000000000002373                                         ; main+B32↑j ...
.text:0000000000002373                 test    rdi, rdi
.text:0000000000002376                 jnz     short loc_2364
.text:0000000000002378                 cmp     [rsp+188h+var_148], 0FFFFFFFFFFFFFFFFh
.text:000000000000237E                 jz      loc_1C53
.text:0000000000002384                 mov     rsi, [rsp+188h+var_140]
.text:0000000000002389                 mov     edi, [rsp+188h+fd]
.text:000000000000238D                 xor     edx, edx
.text:000000000000238F                 mov     rcx, r15
.text:0000000000002392                 call    elseek
.text:0000000000002397                 test    rax, rax
.text:000000000000239A                 jns     loc_1C53
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: main+BCE↓j
.text:00000000000023A0                                         ; main+D04↓j
.text:00000000000023A0                 xor     r12d, r12d
.text:00000000000023A3                 jmp     loc_1C53
.text:00000000000023A8 ; ---------------------------------------------------------------------------
.text:00000000000023A8
.text:00000000000023A8 loc_23A8:                               ; CODE XREF: main+94C↑j
.text:00000000000023A8                 mov     edi, 2018h
.text:00000000000023AD                 call    xmalloc
.text:00000000000023B2                 mov     [rsp+188h+var_158], rbx
.text:00000000000023B7                 mov     rbx, rax
.text:00000000000023BA                 jmp     loc_20A8
.text:00000000000023BF ; ---------------------------------------------------------------------------
.text:00000000000023BF
.text:00000000000023BF loc_23BF:                               ; CODE XREF: main+9B8↑j
.text:00000000000023BF                 movzx   ebx, cs:line_end
.text:00000000000023C6                 cmp     [rcx+rax-1], bl
.text:00000000000023CA                 jz      loc_21EE
.text:00000000000023D0                 add     qword ptr [rcx+2008h], 1
.text:00000000000023D8                 add     [rsp+188h+var_150], 1
.text:00000000000023DE                 jmp     loc_21EE
.text:00000000000023E3 ; ---------------------------------------------------------------------------
.text:00000000000023E3
.text:00000000000023E3 loc_23E3:                               ; CODE XREF: main+5B8↑j
.text:00000000000023E3                 mov     edi, [rsp+188h+fd]
.text:00000000000023E7                 xor     esi, esi
.text:00000000000023E9                 mov     rcx, r15
.text:00000000000023EC                 mov     edx, 1
.text:00000000000023F1                 call    elseek
.text:00000000000023F6                 test    rax, rax
.text:00000000000023F9                 mov     [rsp+188h+var_148], rax
.text:00000000000023FE                 js      short loc_23A0
.text:0000000000002400                 cmp     [rsp+188h+var_FE], 0
.text:0000000000002408                 mov     r8, [rsp+188h+var_B8]
.text:0000000000002410                 movzx   r9d, cs:presume_input_pipe
.text:0000000000002418                 jz      loc_28CE
.text:000000000000241E                 test    r9b, r9b
.text:0000000000002421                 jnz     loc_2045
.text:0000000000002427                 mov     rax, [rsp+188h+var_B0]
.text:000000000000242F                 mov     rcx, 1FFFFFFFFFFFFFFFh
.text:0000000000002439                 lea     rdx, [rax-1]
.text:000000000000243D                 cmp     rdx, rcx
.text:0000000000002440                 mov     edx, 200h
.text:0000000000002445                 cmova   rax, rdx
.text:0000000000002449                 cmp     rax, r8
.text:000000000000244C                 jge     loc_2045
.text:0000000000002452                 cmp     [rsp+188h+var_148], r8
.text:0000000000002457                 mov     r9d, 1
.text:000000000000245D                 jl      loc_276C
.text:0000000000002463
.text:0000000000002463 loc_2463:                               ; CODE XREF: main+F56↓j
.text:0000000000002463                 mov     r12d, r9d
.text:0000000000002466                 and     r12d, 1
.text:000000000000246A                 jmp     loc_1C53
.text:000000000000246F ; ---------------------------------------------------------------------------
.text:000000000000246F
.text:000000000000246F loc_246F:                               ; CODE XREF: main+6B8↑j
.text:000000000000246F                 test    bpl, bpl
.text:0000000000002472                 mov     r8, r13
.text:0000000000002475                 mov     rbx, r12
.text:0000000000002478                 mov     r15, [rsp+188h+ptr]
.text:0000000000002480                 mov     byte ptr [rsp+188h+var_150], bpl
.text:0000000000002485                 mov     r12d, r9d
.text:0000000000002488                 mov     r13d, [rsp+188h+var_FC]
.text:0000000000002490                 jz      loc_26A5
.text:0000000000002496                 mov     rcx, [rsp+188h+var_128]
.text:000000000000249B                 mov     rdi, [r14+rbx*8]
.text:000000000000249F                 mov     ebp, 2000h
.text:00000000000024A4                 sub     rbp, r8
.text:00000000000024A7                 add     [rsp+188h+var_158], rcx
.text:00000000000024AC                 add     rdi, r8
.text:00000000000024AF                 cmp     rcx, rbp
.text:00000000000024B2                 jb      loc_2804
.text:00000000000024B8                 test    rbp, rbp
.text:00000000000024BB                 jz      short loc_24D5
.text:00000000000024BD                 mov     rsi, rbp
.text:00000000000024C0                 mov     [rsp+188h+ptr], rdx
.text:00000000000024C8                 call    xwrite_stdout_part_6
.text:00000000000024CD                 mov     rdx, [rsp+188h+ptr]
.text:00000000000024D5
.text:00000000000024D5 loc_24D5:                               ; CODE XREF: main+C8B↑j
.text:00000000000024D5                 mov     rsi, [rsp+188h+var_128]
.text:00000000000024DA                 movzx   r12d, byte ptr [rsp+188h+var_150]
.text:00000000000024E0                 sub     rsi, rbp
.text:00000000000024E3                 jnz     loc_26C6
.text:00000000000024E9
.text:00000000000024E9 loc_24E9:                               ; CODE XREF: main+E7A↓j
.text:00000000000024E9                                         ; main+E90↓j ...
.text:00000000000024E9                 xor     ebx, ebx
.text:00000000000024EB                 mov     rbp, [rsp+188h+var_140]
.text:00000000000024F0                 jmp     short loc_24FF
.text:00000000000024F2 ; ---------------------------------------------------------------------------
.text:00000000000024F2
.text:00000000000024F2 loc_24F2:                               ; CODE XREF: main+CD2↓j
.text:00000000000024F2                 mov     rdi, [r14+rbx*8] ; ptr
.text:00000000000024F6                 add     rbx, 1
.text:00000000000024FA                 call    _free
.text:00000000000024FF
.text:00000000000024FF loc_24FF:                               ; CODE XREF: main+CC0↑j
.text:00000000000024FF                 cmp     rbx, rbp
.text:0000000000002502                 jnz     short loc_24F2
.text:0000000000002504                 mov     rdi, r14        ; ptr
.text:0000000000002507                 call    _free
.text:000000000000250C
.text:000000000000250C loc_250C:                               ; CODE XREF: main+DD5↓j
.text:000000000000250C                 cmp     [rsp+188h+var_148], 0FFFFFFFFFFFFFFFFh
.text:0000000000002512                 jz      loc_1C53
.text:0000000000002518                 mov     rsi, [rsp+188h+var_158]
.text:000000000000251D                 mov     edi, [rsp+188h+fd]
.text:0000000000002521                 xor     edx, edx
.text:0000000000002523                 mov     rcx, r15
.text:0000000000002526                 call    elseek
.text:000000000000252B                 test    rax, rax
.text:000000000000252E                 jns     loc_1C53
.text:0000000000002534                 jmp     loc_23A0
.text:0000000000002539 ; ---------------------------------------------------------------------------
.text:0000000000002539
.text:0000000000002539 loc_2539:                               ; CODE XREF: main+961↑j
.text:0000000000002539                 mov     rdi, rbp
.text:000000000000253C                 call    xwrite_stdout_part_6
.text:0000000000002541                 jmp     loc_2197
.text:0000000000002546 ; ---------------------------------------------------------------------------
.text:0000000000002546
.text:0000000000002546 loc_2546:                               ; CODE XREF: main+5E8↑j
.text:0000000000002546                 mov     rdi, [rsp+188h+var_118]
.text:000000000000254B                 xor     ebx, ebx
.text:000000000000254D                 call    xmalloc
.text:0000000000002552                 mov     rcx, [rsp+188h+nbytes]
.text:0000000000002557                 movzx   r12d, [rsp+188h+var_FF]
.text:0000000000002560                 mov     rbp, [rsp+188h+var_170]
.text:0000000000002565                 mov     [rsp+188h+ptr], rax
.text:000000000000256D                 mov     [rsp+188h+buf], rax
.text:0000000000002575                 mov     dword ptr [rsp+188h+var_140], r13d
.text:000000000000257A                 add     rax, rcx
.text:000000000000257D                 mov     [rsp+188h+var_150], r15
.text:0000000000002582                 mov     r13, rcx
.text:0000000000002585                 mov     [rsp+188h+var_F0], rax
.text:000000000000258D
.text:000000000000258D loc_258D:                               ; CODE XREF: main+E0C↓j
.text:000000000000258D                 movzx   eax, bl
.text:0000000000002590                 mov     edi, [rsp+188h+fd] ; fd
.text:0000000000002594                 mov     rdx, r13        ; nbytes
.text:0000000000002597                 mov     r14, [rsp+rax*8+188h+buf]
.text:000000000000259F                 mov     rsi, r14        ; buf
.text:00000000000025A2                 call    full_read
.text:00000000000025A7                 cmp     r13, rax
.text:00000000000025AA                 mov     r15, rax
.text:00000000000025AD                 jbe     short loc_260A
.text:00000000000025AF                 call    ___errno_location
.text:00000000000025B4                 cmp     dword ptr [rax], 0
.text:00000000000025B7                 jnz     loc_27A3
.text:00000000000025BD                 cmp     rbp, r15
.text:00000000000025C0                 jb      short loc_2641
.text:00000000000025C2                 test    r12b, r12b
.text:00000000000025C5                 jnz     short loc_25E5
.text:00000000000025C7                 mov     eax, ebx
.text:00000000000025C9                 add     [rsp+188h+var_158], r15
.text:00000000000025CE                 xor     eax, 1
.text:00000000000025D1                 test    r15, r15
.text:00000000000025D4                 movzx   eax, al
.text:00000000000025D7                 mov     rax, [rsp+rax*8+188h+buf]
.text:00000000000025DF                 jnz     loc_278B
.text:00000000000025E5
.text:00000000000025E5 loc_25E5:                               ; CODE XREF: main+D95↑j
.text:00000000000025E5                 movzx   r12d, [rsp+188h+var_FF]
.text:00000000000025EE                 mov     r15, [rsp+188h+var_150]
.text:00000000000025F3                 mov     r13d, dword ptr [rsp+188h+var_140]
.text:00000000000025F8
.text:00000000000025F8 loc_25F8:                               ; CODE XREF: main+E6B↓j
.text:00000000000025F8                                         ; main+FBF↓j
.text:00000000000025F8                 mov     rdi, [rsp+188h+ptr] ; ptr
.text:0000000000002600                 call    _free
.text:0000000000002605                 jmp     loc_250C
.text:000000000000260A ; ---------------------------------------------------------------------------
.text:000000000000260A
.text:000000000000260A loc_260A:                               ; CODE XREF: main+D7D↑j
.text:000000000000260A                 test    r12b, r12b
.text:000000000000260D                 jz      short loc_264F
.text:000000000000260F                 xor     r12d, r12d
.text:0000000000002612                 cmp     rbp, rax
.text:0000000000002615                 jnb     loc_26A0
.text:000000000000261B
.text:000000000000261B loc_261B:                               ; CODE XREF: main+E3C↓j
.text:000000000000261B                 mov     rdx, r15
.text:000000000000261E                 sub     rdx, rbp
.text:0000000000002621                 add     [rsp+188h+var_158], rdx
.text:0000000000002626
.text:0000000000002626 loc_2626:                               ; CODE XREF: main+E5F↓j
.text:0000000000002626                 mov     rsi, rdx
.text:0000000000002629                 mov     rdi, r14
.text:000000000000262C                 call    xwrite_stdout_part_6
.text:0000000000002631
.text:0000000000002631 loc_2631:                               ; CODE XREF: main+E3E↓j
.text:0000000000002631                 xor     ebx, 1
.text:0000000000002634                 test    r12b, r12b
.text:0000000000002637                 jnz     short loc_2691
.text:0000000000002639
.text:0000000000002639 loc_2639:                               ; CODE XREF: main+E73↓j
.text:0000000000002639                 xor     r12d, r12d
.text:000000000000263C                 jmp     loc_258D
.text:0000000000002641 ; ---------------------------------------------------------------------------
.text:0000000000002641
.text:0000000000002641 loc_2641:                               ; CODE XREF: main+D90↑j
.text:0000000000002641                 test    r12b, r12b
.text:0000000000002644                 jnz     short loc_2681
.text:0000000000002646                 movzx   r12d, [rsp+188h+var_FF]
.text:000000000000264F
.text:000000000000264F loc_264F:                               ; CODE XREF: main+DDD↑j
.text:000000000000264F                 mov     eax, ebx
.text:0000000000002651                 add     [rsp+188h+var_158], rbp
.text:0000000000002656                 xor     eax, 1
.text:0000000000002659                 test    rbp, rbp
.text:000000000000265C                 movzx   eax, al
.text:000000000000265F                 mov     rax, [rsp+rax*8+188h+buf]
.text:0000000000002667                 jnz     short loc_2670
.text:0000000000002669
.text:0000000000002669 loc_2669:                               ; CODE XREF: main+E4F↓j
.text:0000000000002669                 cmp     rbp, r15
.text:000000000000266C                 jb      short loc_261B
.text:000000000000266E                 jmp     short loc_2631
.text:0000000000002670 ; ---------------------------------------------------------------------------
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: main+E37↑j
.text:0000000000002670                 lea     rdi, [rax+2000h]
.text:0000000000002677                 mov     rsi, rbp
.text:000000000000267A
.text:000000000000267A loc_267A:                               ; CODE XREF: main+F6E↓j
.text:000000000000267A                 call    xwrite_stdout_part_6
.text:000000000000267F                 jmp     short loc_2669
.text:0000000000002681 ; ---------------------------------------------------------------------------
.text:0000000000002681
.text:0000000000002681 loc_2681:                               ; CODE XREF: main+E14↑j
.text:0000000000002681                 mov     rdx, r15
.text:0000000000002684                 sub     rdx, rbp
.text:0000000000002687                 add     [rsp+188h+var_158], rdx
.text:000000000000268C                 test    rdx, rdx
.text:000000000000268F                 jnz     short loc_2626
.text:0000000000002691
.text:0000000000002691 loc_2691:                               ; CODE XREF: main+E07↑j
.text:0000000000002691                 mov     r15, [rsp+188h+var_150]
.text:0000000000002696                 mov     r13d, dword ptr [rsp+188h+var_140]
.text:000000000000269B                 jmp     loc_25F8
.text:00000000000026A0 ; ---------------------------------------------------------------------------
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: main+DE5↑j
.text:00000000000026A0                 xor     ebx, 1
.text:00000000000026A3                 jmp     short loc_2639
.text:00000000000026A5 ; ---------------------------------------------------------------------------
.text:00000000000026A5
.text:00000000000026A5 loc_26A5:                               ; CODE XREF: main+C60↑j
.text:00000000000026A5                 cmp     [rsp+188h+var_160], rsi
.text:00000000000026AA                 jnz     loc_24E9
.text:00000000000026B0                 mov     rsi, r8
.text:00000000000026B3                 sub     rsi, [rsp+188h+var_110]
.text:00000000000026B8                 add     [rsp+188h+var_158], rsi
.text:00000000000026BD                 test    rsi, rsi
.text:00000000000026C0                 jz      loc_24E9
.text:00000000000026C6
.text:00000000000026C6 loc_26C6:                               ; CODE XREF: main+CB3↑j
.text:00000000000026C6                 mov     rdi, [r14+rdx*8]
.text:00000000000026CA                 call    xwrite_stdout_part_6
.text:00000000000026CF                 jmp     loc_24E9
.text:00000000000026D4 ; ---------------------------------------------------------------------------
.text:00000000000026D4
.text:00000000000026D4 loc_26D4:                               ; CODE XREF: main+6E4↑j
.text:00000000000026D4                 mov     r15, [rsp+188h+ptr]
.text:00000000000026DC                 mov     edi, 4
.text:00000000000026E1                 mov     r12, rax
.text:00000000000026E4                 mov     r13d, [rsp+188h+var_FC]
.text:00000000000026EC                 mov     rsi, r15
.text:00000000000026EF                 call    quotearg_style
.text:00000000000026F4                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000026FB                 mov     edx, 5          ; category
.text:0000000000002700                 xor     edi, edi        ; domainname
.text:0000000000002702                 mov     rbx, rax
.text:0000000000002705                 call    _dcgettext
.text:000000000000270A                 mov     esi, [r12]      ; errnum
.text:000000000000270E                 mov     rdx, rax        ; format
.text:0000000000002711                 mov     rcx, rbx
.text:0000000000002714                 xor     edi, edi        ; status
.text:0000000000002716                 xor     eax, eax
.text:0000000000002718                 xor     r12d, r12d
.text:000000000000271B                 call    _error
.text:0000000000002720                 jmp     loc_24E9
.text:0000000000002725 ; ---------------------------------------------------------------------------
.text:0000000000002725
.text:0000000000002725 loc_2725:                               ; CODE XREF: main+9A3↑j
.text:0000000000002725                 mov     rsi, r15
.text:0000000000002728                 mov     edi, 4
.text:000000000000272D                 call    quotearg_style
.text:0000000000002732                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000002739                 mov     edx, 5          ; category
.text:000000000000273E                 xor     edi, edi        ; domainname
.text:0000000000002740                 mov     rbx, rax
.text:0000000000002743                 call    _dcgettext
.text:0000000000002748                 mov     r12, rax
.text:000000000000274B                 call    ___errno_location
.text:0000000000002750                 mov     esi, [rax]      ; errnum
.text:0000000000002752                 mov     rdx, r12        ; format
.text:0000000000002755                 xor     edi, edi        ; status
.text:0000000000002757                 mov     rcx, rbx
.text:000000000000275A                 xor     eax, eax
.text:000000000000275C                 xor     r12d, r12d
.text:000000000000275F                 call    _error
.text:0000000000002764                 mov     rdi, rbp
.text:0000000000002767                 jmp     loc_2373
.text:000000000000276C ; ---------------------------------------------------------------------------
.text:000000000000276C
.text:000000000000276C loc_276C:                               ; CODE XREF: main+C2D↑j
.text:000000000000276C                 mov     rcx, [rsp+188h+var_148]
.text:0000000000002771                 mov     rdx, [rsp+188h+var_170]
.text:0000000000002776                 mov     rdi, r15
.text:0000000000002779                 mov     esi, [rsp+188h+fd]
.text:000000000000277D                 call    elide_tail_lines_seekable
.text:0000000000002782                 movzx   r9d, al
.text:0000000000002786                 jmp     loc_2463
.text:000000000000278B ; ---------------------------------------------------------------------------
.text:000000000000278B
.text:000000000000278B loc_278B:                               ; CODE XREF: main+DAF↑j
.text:000000000000278B                 lea     rdi, [rax+2000h]
.text:0000000000002792                 movzx   r12d, [rsp+188h+var_FF]
.text:000000000000279B                 mov     rsi, r15
.text:000000000000279E                 jmp     loc_267A
.text:00000000000027A3 ; ---------------------------------------------------------------------------
.text:00000000000027A3
.text:00000000000027A3 loc_27A3:                               ; CODE XREF: main+D87↑j
.text:00000000000027A3                 mov     r15, [rsp+188h+var_150]
.text:00000000000027A8                 mov     edi, 4
.text:00000000000027AD                 mov     r13d, dword ptr [rsp+188h+var_140]
.text:00000000000027B2                 mov     [rsp+188h+var_150], rax
.text:00000000000027B7                 xor     r12d, r12d
.text:00000000000027BA                 mov     rsi, r15
.text:00000000000027BD                 call    quotearg_style
.text:00000000000027C2                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000027C9                 mov     edx, 5          ; category
.text:00000000000027CE                 xor     edi, edi        ; domainname
.text:00000000000027D0                 mov     rbx, rax
.text:00000000000027D3                 call    _dcgettext
.text:00000000000027D8                 mov     r8, [rsp+188h+var_150]
.text:00000000000027DD                 mov     rdx, rax        ; format
.text:00000000000027E0                 mov     rcx, rbx
.text:00000000000027E3                 xor     edi, edi        ; status
.text:00000000000027E5                 xor     eax, eax
.text:00000000000027E7                 mov     esi, [r8]       ; errnum
.text:00000000000027EA                 call    _error
.text:00000000000027EF                 jmp     loc_25F8
.text:00000000000027F4 ; ---------------------------------------------------------------------------
.text:00000000000027F4
.text:00000000000027F4 loc_27F4:                               ; CODE XREF: main+275↑j
.text:00000000000027F4                 xor     r12d, r12d
.text:00000000000027F7                 mov     [rsp+188h+var_FE], 1
.text:00000000000027FF                 jmp     loc_1D36
.text:0000000000002804 ; ---------------------------------------------------------------------------
.text:0000000000002804
.text:0000000000002804 loc_2804:                               ; CODE XREF: main+C82↑j
.text:0000000000002804                 mov     rsi, rcx
.text:0000000000002807                 call    xwrite_stdout_part_6
.text:000000000000280C                 movzx   r12d, byte ptr [rsp+188h+var_150]
.text:0000000000002812                 jmp     loc_24E9
.text:0000000000002817 ; ---------------------------------------------------------------------------
.text:0000000000002817
.text:0000000000002817 loc_2817:                               ; CODE XREF: main+11D↑j
.text:0000000000002817                 xor     edi, edi        ; status
.text:0000000000002819                 call    usage
.text:000000000000281E ; ---------------------------------------------------------------------------
.text:000000000000281E
.text:000000000000281E loc_281E:                               ; CODE XREF: main+104↑j
.text:000000000000281E                                         ; main+223↑j
.text:000000000000281E                 mov     r14d, eax
.text:0000000000002821                 jmp     loc_1962
.text:0000000000002826 ; ---------------------------------------------------------------------------
.text:0000000000002826
.text:0000000000002826 loc_2826:                               ; CODE XREF: main+747↑j
.text:0000000000002826                 call    ___stack_chk_fail
.text:000000000000282B ; ---------------------------------------------------------------------------
.text:000000000000282B
.text:000000000000282B loc_282B:                               ; CODE XREF: main+139↑j
.text:000000000000282B                 lea     rsi, aInvalidTrailin ; "invalid trailing option -- %c"
.text:0000000000002832                 mov     edx, 5          ; category
.text:0000000000002837                 xor     edi, edi        ; domainname
.text:0000000000002839                 call    _dcgettext
.text:000000000000283E                 mov     ecx, r14d
.text:0000000000002841
.text:0000000000002841 loc_2841:                               ; CODE XREF: main+1044↓j
.text:0000000000002841                 mov     rdx, rax        ; format
.text:0000000000002844                 xor     esi, esi        ; errnum
.text:0000000000002846                 xor     edi, edi        ; status
.text:0000000000002848                 xor     eax, eax
.text:000000000000284A                 call    _error
.text:000000000000284F                 jmp     loc_196F
.text:0000000000002854 ; ---------------------------------------------------------------------------
.text:0000000000002854
.text:0000000000002854 def_1AE6:                               ; CODE XREF: main+2A6↑j
.text:0000000000002854                                         ; main+2B6↑j
.text:0000000000002854                                         ; DATA XREF: ...
.text:0000000000002854                 test    r9b, r9b        ; jumptable 0000000000001AE6 default case, cases 100-106,110-112,114-117,119-121
.text:0000000000002857                 jnz     loc_294C
.text:000000000000285D
.text:000000000000285D loc_285D:                               ; CODE XREF: main+1123↓j
.text:000000000000285D                 lea     rsi, aInvalidTrailin ; "invalid trailing option -- %c"
.text:0000000000002864                 mov     edx, 5          ; category
.text:0000000000002869                 xor     edi, edi        ; domainname
.text:000000000000286B                 call    _dcgettext
.text:0000000000002870                 movsx   ecx, r13b
.text:0000000000002874                 jmp     short loc_2841
.text:0000000000002876 ; ---------------------------------------------------------------------------
.text:0000000000002876
.text:0000000000002876 loc_2876:                               ; CODE XREF: main+2EC↑j
.text:0000000000002876                 lea     rsi, [rsp+188h+var_58]
.text:000000000000287E                 mov     rdi, r15
.text:0000000000002881                 call    umaxtostr
.text:0000000000002886                 mov     rdi, rax
.text:0000000000002889                 call    quote
.text:000000000000288E                 lea     rsi, aInvalidNumberO ; "invalid number of bytes"
.text:0000000000002895                 mov     edx, 5          ; category
.text:000000000000289A                 xor     edi, edi        ; domainname
.text:000000000000289C                 mov     rbx, rax
.text:000000000000289F                 call    _dcgettext
.text:00000000000028A4                 lea     rdx, format     ; "%s: %s"
.text:00000000000028AB                 mov     rcx, rax
.text:00000000000028AE                 mov     r8, rbx
.text:00000000000028B1                 mov     esi, 4Bh ; 'K'  ; errnum
.text:00000000000028B6                 mov     edi, 1          ; status
.text:00000000000028BB                 xor     eax, eax
.text:00000000000028BD                 call    _error
.text:00000000000028C2
.text:00000000000028C2 loc_28C2:                               ; CODE XREF: main+4F4↑j
.text:00000000000028C2                 mov     cs:line_end, r10b
.text:00000000000028C9                 jmp     loc_1D2A
.text:00000000000028CE ; ---------------------------------------------------------------------------
.text:00000000000028CE
.text:00000000000028CE loc_28CE:                               ; CODE XREF: main+BE8↑j
.text:00000000000028CE                 test    r9b, r9b
.text:00000000000028D1                 mov     r12d, r9d
.text:00000000000028D4                 jnz     loc_1E05
.text:00000000000028DA                 mov     rax, [rsp+188h+var_B0]
.text:00000000000028E2                 mov     rcx, 1FFFFFFFFFFFFFFFh
.text:00000000000028EC                 lea     rdx, [rax-1]
.text:00000000000028F0                 cmp     rdx, rcx
.text:00000000000028F3                 mov     edx, 200h
.text:00000000000028F8                 cmova   rax, rdx
.text:00000000000028FC                 cmp     r8, rax
.text:00000000000028FF                 jle     loc_1E05
.text:0000000000002905                 sub     r8, [rsp+188h+var_148]
.text:000000000000290A                 mov     eax, 0
.text:000000000000290F                 cmovs   r8, rax
.text:0000000000002913                 cmp     [rsp+188h+var_170], r8
.text:0000000000002918                 jb      short loc_2928
.text:000000000000291A
.text:000000000000291A loc_291A:                               ; CODE XREF: main+110B↓j
.text:000000000000291A                 movzx   r12d, [rsp+188h+var_FF]
.text:0000000000002923                 jmp     loc_1C53
.text:0000000000002928 ; ---------------------------------------------------------------------------
.text:0000000000002928
.text:0000000000002928 loc_2928:                               ; CODE XREF: main+10E8↑j
.text:0000000000002928                 mov     rsi, r8
.text:000000000000292B                 sub     rsi, [rsp+188h+var_170] ; nbytes
.text:0000000000002930                 mov     edi, [rsp+188h+fd] ; fd
.text:0000000000002934                 call    copy_fd
.text:0000000000002939                 test    eax, eax
.text:000000000000293B                 jz      short loc_291A
.text:000000000000293D                 mov     rsi, r15
.text:0000000000002940                 mov     edi, eax
.text:0000000000002942                 call    diagnose_copy_fd_failure
.text:0000000000002947                 jmp     loc_1C53
.text:000000000000294C ; ---------------------------------------------------------------------------
.text:000000000000294C
.text:000000000000294C loc_294C:                               ; CODE XREF: main+1027↑j
.text:000000000000294C                 mov     cs:line_end, r10b
.text:0000000000002953                 jmp     loc_285D
.text:0000000000002953 ; } // starts at 1830
.text:0000000000002953 main            endp
.text:0000000000002953
.text:0000000000002953 ; ---------------------------------------------------------------------------
.text:0000000000002958                 align 20h
.text:0000000000002960
.text:0000000000002960 ; =============== S U B R O U T I N E =======================================
.text:0000000000002960
.text:0000000000002960 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002960
.text:0000000000002960 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002960                 public start
.text:0000000000002960 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002960 ; __unwind {
.text:0000000000002960                 xor     ebp, ebp
.text:0000000000002962                 mov     r9, rdx         ; rtld_fini
.text:0000000000002965                 pop     rsi             ; argc
.text:0000000000002966                 mov     rdx, rsp        ; ubp_av
.text:0000000000002969                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000296D                 push    rax
.text:000000000000296E                 push    rsp             ; stack_end
.text:000000000000296F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002976                 lea     rcx, __libc_csu_init ; init
.text:000000000000297D                 lea     rdi, main       ; main
.text:0000000000002984                 call    cs:__libc_start_main_ptr
.text:000000000000298A                 hlt
.text:000000000000298A ; } // starts at 2960
.text:000000000000298A start           endp
.text:000000000000298A
.text:000000000000298A ; ---------------------------------------------------------------------------
.text:000000000000298B                 align 10h
.text:0000000000002990
.text:0000000000002990 ; =============== S U B R O U T I N E =======================================
.text:0000000000002990
.text:0000000000002990 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002990
.text:0000000000002990 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2A43↓p
.text:0000000000002990                 lea     rdi, __bss_start
.text:0000000000002997                 push    rbp
.text:0000000000002998                 lea     rax, __bss_start
.text:000000000000299F                 cmp     rax, rdi
.text:00000000000029A2                 mov     rbp, rsp
.text:00000000000029A5                 jz      short loc_29C0
.text:00000000000029A7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000029AE                 test    rax, rax
.text:00000000000029B1                 jz      short loc_29C0
.text:00000000000029B3                 pop     rbp
.text:00000000000029B4                 jmp     rax
.text:00000000000029B4 ; ---------------------------------------------------------------------------
.text:00000000000029B6                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000029C0                                         ; deregister_tm_clones+21↑j
.text:00000000000029C0                 pop     rbp
.text:00000000000029C1                 retn
.text:00000000000029C1 deregister_tm_clones endp
.text:00000000000029C1
.text:00000000000029C1 ; ---------------------------------------------------------------------------
.text:00000000000029C2                 align 10h
.text:00000000000029D0
.text:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029D0
.text:00000000000029D0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000029D0
.text:00000000000029D0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000029D0                 lea     rdi, __bss_start
.text:00000000000029D7                 lea     rsi, __bss_start
.text:00000000000029DE                 push    rbp
.text:00000000000029DF                 sub     rsi, rdi
.text:00000000000029E2                 mov     rbp, rsp
.text:00000000000029E5                 sar     rsi, 3
.text:00000000000029E9                 mov     rax, rsi
.text:00000000000029EC                 shr     rax, 3Fh
.text:00000000000029F0                 add     rsi, rax
.text:00000000000029F3                 sar     rsi, 1
.text:00000000000029F6                 jz      short loc_2A10
.text:00000000000029F8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000029FF                 test    rax, rax
.text:0000000000002A02                 jz      short loc_2A10
.text:0000000000002A04                 pop     rbp
.text:0000000000002A05                 jmp     rax
.text:0000000000002A05 ; ---------------------------------------------------------------------------
.text:0000000000002A07                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002A10                                         ; register_tm_clones+32↑j
.text:0000000000002A10                 pop     rbp
.text:0000000000002A11                 retn
.text:0000000000002A11 register_tm_clones endp
.text:0000000000002A11
.text:0000000000002A11 ; ---------------------------------------------------------------------------
.text:0000000000002A12                 align 20h
.text:0000000000002A20
.text:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A20
.text:0000000000002A20 ; Attributes: info_from_lumina
.text:0000000000002A20
.text:0000000000002A20 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002A20                 cmp     cs:completed_7697, 0
.text:0000000000002A27                 jnz     short locret_2A58
.text:0000000000002A29                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002A31                 push    rbp
.text:0000000000002A32                 mov     rbp, rsp
.text:0000000000002A35                 jz      short loc_2A43
.text:0000000000002A37                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002A3E                 call    __cxa_finalize
.text:0000000000002A43
.text:0000000000002A43 loc_2A43:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002A43                 call    deregister_tm_clones
.text:0000000000002A48                 mov     cs:completed_7697, 1
.text:0000000000002A4F                 pop     rbp
.text:0000000000002A50                 retn
.text:0000000000002A50 ; ---------------------------------------------------------------------------
.text:0000000000002A51                 align 8
.text:0000000000002A58
.text:0000000000002A58 locret_2A58:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002A58                 rep retn
.text:0000000000002A58 __do_global_dtors_aux endp
.text:0000000000002A58
.text:0000000000002A58 ; ---------------------------------------------------------------------------
.text:0000000000002A5A                 align 20h
.text:0000000000002A60
.text:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A60
.text:0000000000002A60 ; Attributes: bp-based frame
.text:0000000000002A60
.text:0000000000002A60 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002A60                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002A60                 push    rbp
.text:0000000000002A61                 mov     rbp, rsp
.text:0000000000002A64                 pop     rbp
.text:0000000000002A65                 jmp     register_tm_clones
.text:0000000000002A65 frame_dummy     endp
.text:0000000000002A65
.text:0000000000002A65 ; ---------------------------------------------------------------------------
.text:0000000000002A6A                 align 10h
.text:0000000000002A70
.text:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A70
.text:0000000000002A70
.text:0000000000002A70 string_to_integer proc near             ; CODE XREF: main+1B3↑p
.text:0000000000002A70                                         ; main+1F6↑p ...
.text:0000000000002A70 ; __unwind {
.text:0000000000002A70                 test    dil, dil
.text:0000000000002A73                 push    rbx
.text:0000000000002A74                 mov     edx, 5          ; category
.text:0000000000002A79                 mov     rbx, rsi
.text:0000000000002A7C                 jnz     short loc_2AB0
.text:0000000000002A7E                 lea     rsi, aInvalidNumberO ; "invalid number of bytes"
.text:0000000000002A85                 xor     edi, edi        ; domainname
.text:0000000000002A87                 call    _dcgettext
.text:0000000000002A8C                 mov     r8, rax
.text:0000000000002A8F
.text:0000000000002A8F loc_2A8F:                               ; CODE XREF: string_to_integer+51↓j
.text:0000000000002A8F                 mov     rdi, rbx
.text:0000000000002A92                 lea     rcx, aBkkmmgtpezy0 ; "bkKmMGTPEZY0"
.text:0000000000002A99                 xor     r9d, r9d
.text:0000000000002A9C                 pop     rbx
.text:0000000000002A9D                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AA4                 xor     esi, esi
.text:0000000000002AA6                 jmp     xdectoumax
.text:0000000000002AA6 ; ---------------------------------------------------------------------------
.text:0000000000002AAB                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: string_to_integer+C↑j
.text:0000000000002AB0                 lea     rsi, aInvalidNumberO_0 ; "invalid number of lines"
.text:0000000000002AB7                 xor     edi, edi        ; domainname
.text:0000000000002AB9                 call    _dcgettext
.text:0000000000002ABE                 mov     r8, rax
.text:0000000000002AC1                 jmp     short loc_2A8F
.text:0000000000002AC1 ; } // starts at 2A70
.text:0000000000002AC1 string_to_integer endp
.text:0000000000002AC1
.text:0000000000002AC1 ; ---------------------------------------------------------------------------
.text:0000000000002AC3                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AD0
.text:0000000000002AD0
.text:0000000000002AD0 elseek          proc near               ; CODE XREF: main+B62↑p
.text:0000000000002AD0                                         ; main+BC1↑p ...
.text:0000000000002AD0
.text:0000000000002AD0 var_30          = qword ptr -30h
.text:0000000000002AD0
.text:0000000000002AD0 ; __unwind {
.text:0000000000002AD0                 push    r13
.text:0000000000002AD2                 push    r12
.text:0000000000002AD4                 mov     r13, rcx
.text:0000000000002AD7                 push    rbp
.text:0000000000002AD8                 push    rbx
.text:0000000000002AD9                 mov     r12, rsi
.text:0000000000002ADC                 mov     ebp, edx
.text:0000000000002ADE                 sub     rsp, 28h
.text:0000000000002AE2                 mov     rax, fs:28h
.text:0000000000002AEB                 mov     [rsp+48h+var_30], rax
.text:0000000000002AF0                 xor     eax, eax
.text:0000000000002AF2                 call    _lseek
.text:0000000000002AF7                 test    rax, rax
.text:0000000000002AFA                 mov     rbx, rax
.text:0000000000002AFD                 js      short loc_2B20
.text:0000000000002AFF
.text:0000000000002AFF loc_2AFF:                               ; CODE XREF: elseek+AC↓j
.text:0000000000002AFF                 mov     rcx, [rsp+48h+var_30]
.text:0000000000002B04                 xor     rcx, fs:28h
.text:0000000000002B0D                 mov     rax, rbx
.text:0000000000002B10                 jnz     short loc_2B7E
.text:0000000000002B12                 add     rsp, 28h
.text:0000000000002B16                 pop     rbx
.text:0000000000002B17                 pop     rbp
.text:0000000000002B18                 pop     r12
.text:0000000000002B1A                 pop     r13
.text:0000000000002B1C                 retn
.text:0000000000002B1C ; ---------------------------------------------------------------------------
.text:0000000000002B1D                 align 20h
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: elseek+2D↑j
.text:0000000000002B20                 mov     rsi, rsp
.text:0000000000002B23                 mov     rdi, r12
.text:0000000000002B26                 call    imaxtostr
.text:0000000000002B2B                 mov     rdx, r13
.text:0000000000002B2E                 xor     edi, edi
.text:0000000000002B30                 mov     esi, 3
.text:0000000000002B35                 mov     r12, rax
.text:0000000000002B38                 call    quotearg_n_style_colon
.text:0000000000002B3D                 lea     rsi, aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:0000000000002B44                 mov     r13, rax
.text:0000000000002B47                 lea     rax, aSCannotSeekToR ; "%s: cannot seek to relative offset %s"
.text:0000000000002B4E                 test    ebp, ebp
.text:0000000000002B50                 mov     edx, 5          ; category
.text:0000000000002B55                 cmovnz  rsi, rax        ; msgid
.text:0000000000002B59                 xor     edi, edi        ; domainname
.text:0000000000002B5B                 call    _dcgettext
.text:0000000000002B60                 mov     rbp, rax
.text:0000000000002B63                 call    ___errno_location
.text:0000000000002B68                 mov     esi, [rax]      ; errnum
.text:0000000000002B6A                 mov     r8, r12
.text:0000000000002B6D                 mov     rcx, r13
.text:0000000000002B70                 mov     rdx, rbp        ; format
.text:0000000000002B73                 xor     edi, edi        ; status
.text:0000000000002B75                 xor     eax, eax
.text:0000000000002B77                 call    _error
.text:0000000000002B7C                 jmp     short loc_2AFF
.text:0000000000002B7E ; ---------------------------------------------------------------------------
.text:0000000000002B7E
.text:0000000000002B7E loc_2B7E:                               ; CODE XREF: elseek+40↑j
.text:0000000000002B7E                 call    ___stack_chk_fail
.text:0000000000002B7E ; } // starts at 2AD0
.text:0000000000002B7E elseek          endp
.text:0000000000002B7E
.text:0000000000002B7E ; ---------------------------------------------------------------------------
.text:0000000000002B83                 align 10h
.text:0000000000002B90
.text:0000000000002B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B90
.text:0000000000002B90
.text:0000000000002B90 xwrite_stdout_part_6 proc near          ; CODE XREF: main+690↑p
.text:0000000000002B90                                         ; main+8AD↑p ...
.text:0000000000002B90 ; __unwind {
.text:0000000000002B90                 push    rbp
.text:0000000000002B91                 push    rbx
.text:0000000000002B92                 mov     rdx, rsi        ; n
.text:0000000000002B95                 mov     rbx, rsi
.text:0000000000002B98                 mov     esi, 1          ; size
.text:0000000000002B9D                 sub     rsp, 8
.text:0000000000002BA1                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002BA8                 call    _fwrite_unlocked
.text:0000000000002BAD                 cmp     rbx, rax
.text:0000000000002BB0                 ja      short loc_2BB9
.text:0000000000002BB2                 add     rsp, 8
.text:0000000000002BB6                 pop     rbx
.text:0000000000002BB7                 pop     rbp
.text:0000000000002BB8                 retn
.text:0000000000002BB9 ; ---------------------------------------------------------------------------
.text:0000000000002BB9
.text:0000000000002BB9 loc_2BB9:                               ; CODE XREF: xwrite_stdout_part_6+20↑j
.text:0000000000002BB9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002BC0                 call    _clearerr_unlocked
.text:0000000000002BC5                 lea     rsi, aStandardOutput ; "standard output"
.text:0000000000002BCC                 mov     edi, 4
.text:0000000000002BD1                 call    quotearg_style
.text:0000000000002BD6                 lea     rsi, aErrorWritingS ; "error writing %s"
.text:0000000000002BDD                 mov     edx, 5          ; category
.text:0000000000002BE2                 xor     edi, edi        ; domainname
.text:0000000000002BE4                 mov     rbp, rax
.text:0000000000002BE7                 call    _dcgettext
.text:0000000000002BEC                 mov     rbx, rax
.text:0000000000002BEF                 call    ___errno_location
.text:0000000000002BF4                 mov     esi, [rax]      ; errnum
.text:0000000000002BF6                 mov     rcx, rbp
.text:0000000000002BF9                 mov     rdx, rbx        ; format
.text:0000000000002BFC                 mov     edi, 1          ; status
.text:0000000000002C01                 xor     eax, eax
.text:0000000000002C03                 call    _error
.text:0000000000002C03 ; } // starts at 2B90
.text:0000000000002C08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002C08 xwrite_stdout_part_6 endp ; sp-analysis failed
.text:0000000000002C08
.text:0000000000002C10
.text:0000000000002C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C10
.text:0000000000002C10
.text:0000000000002C10 ; __int64 __fastcall copy_fd(int fd, size_t nbytes)
.text:0000000000002C10 copy_fd         proc near               ; CODE XREF: main+1104↑p
.text:0000000000002C10                                         ; elide_tail_lines_seekable+276↓p
.text:0000000000002C10
.text:0000000000002C10 var_30          = qword ptr -30h
.text:0000000000002C10
.text:0000000000002C10 ; __unwind {
.text:0000000000002C10                 push    r13
.text:0000000000002C12                 push    r12
.text:0000000000002C14                 push    rbp
.text:0000000000002C15                 push    rbx
.text:0000000000002C16                 sub     rsp, 2018h
.text:0000000000002C1D                 mov     rax, fs:28h
.text:0000000000002C26                 mov     [rsp+2038h+var_30], rax
.text:0000000000002C2E                 xor     eax, eax
.text:0000000000002C30                 test    rsi, rsi
.text:0000000000002C33                 jz      short loc_2C96
.text:0000000000002C35                 mov     r12d, edi
.text:0000000000002C38                 mov     rbx, rsi
.text:0000000000002C3B                 mov     rbp, rsp
.text:0000000000002C3E                 mov     r13d, 2000h
.text:0000000000002C44                 jmp     short loc_2C55
.text:0000000000002C44 ; ---------------------------------------------------------------------------
.text:0000000000002C46                 align 10h
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: copy_fd+74↓j
.text:0000000000002C50                 test    rbx, rbx
.text:0000000000002C53                 jz      short loc_2C96
.text:0000000000002C55
.text:0000000000002C55 loc_2C55:                               ; CODE XREF: copy_fd+34↑j
.text:0000000000002C55                                         ; copy_fd+84↓j
.text:0000000000002C55                 cmp     rbx, 2000h
.text:0000000000002C5C                 mov     rdx, r13
.text:0000000000002C5F                 mov     rsi, rbp        ; buf
.text:0000000000002C62                 cmovbe  rdx, rbx        ; nbytes
.text:0000000000002C66                 mov     edi, r12d       ; fd
.text:0000000000002C69                 call    safe_read
.text:0000000000002C6E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C72                 jz      short loc_2CC0
.text:0000000000002C74                 sub     rbx, rax
.text:0000000000002C77                 test    rax, rax
.text:0000000000002C7A                 jnz     short loc_2C81
.text:0000000000002C7C                 test    rbx, rbx
.text:0000000000002C7F                 jnz     short loc_2CD0
.text:0000000000002C81
.text:0000000000002C81 loc_2C81:                               ; CODE XREF: copy_fd+6A↑j
.text:0000000000002C81                 test    rax, rax
.text:0000000000002C84                 jz      short loc_2C50
.text:0000000000002C86                 mov     rsi, rax
.text:0000000000002C89                 mov     rdi, rbp
.text:0000000000002C8C                 call    xwrite_stdout_part_6
.text:0000000000002C91                 test    rbx, rbx
.text:0000000000002C94                 jnz     short loc_2C55
.text:0000000000002C96
.text:0000000000002C96 loc_2C96:                               ; CODE XREF: copy_fd+23↑j
.text:0000000000002C96                                         ; copy_fd+43↑j
.text:0000000000002C96                 xor     eax, eax
.text:0000000000002C98
.text:0000000000002C98 loc_2C98:                               ; CODE XREF: copy_fd+B5↓j
.text:0000000000002C98                                         ; copy_fd+C5↓j
.text:0000000000002C98                 mov     rcx, [rsp+2038h+var_30]
.text:0000000000002CA0                 xor     rcx, fs:28h
.text:0000000000002CA9                 jnz     short loc_2CD7
.text:0000000000002CAB                 add     rsp, 2018h
.text:0000000000002CB2                 pop     rbx
.text:0000000000002CB3                 pop     rbp
.text:0000000000002CB4                 pop     r12
.text:0000000000002CB6                 pop     r13
.text:0000000000002CB8                 retn
.text:0000000000002CB8 ; ---------------------------------------------------------------------------
.text:0000000000002CB9                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: copy_fd+62↑j
.text:0000000000002CC0                 mov     eax, 1
.text:0000000000002CC5                 jmp     short loc_2C98
.text:0000000000002CC5 ; ---------------------------------------------------------------------------
.text:0000000000002CC7                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: copy_fd+6F↑j
.text:0000000000002CD0                 mov     eax, 2
.text:0000000000002CD5                 jmp     short loc_2C98
.text:0000000000002CD7 ; ---------------------------------------------------------------------------
.text:0000000000002CD7
.text:0000000000002CD7 loc_2CD7:                               ; CODE XREF: copy_fd+99↑j
.text:0000000000002CD7                 call    ___stack_chk_fail
.text:0000000000002CD7 ; } // starts at 2C10
.text:0000000000002CD7 copy_fd         endp
.text:0000000000002CD7
.text:0000000000002CD7 ; ---------------------------------------------------------------------------
.text:0000000000002CDC                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CE0
.text:0000000000002CE0
.text:0000000000002CE0 head_lines      proc near               ; CODE XREF: main:loc_1EFF↑p
.text:0000000000002CE0
.text:0000000000002CE0 var_20C0        = dword ptr -20C0h
.text:0000000000002CE0 var_2049        = byte ptr -2049h
.text:0000000000002CE0 buf             = byte ptr -2048h
.text:0000000000002CE0 var_40          = qword ptr -40h
.text:0000000000002CE0
.text:0000000000002CE0 ; __unwind {
.text:0000000000002CE0                 push    r15
.text:0000000000002CE2                 push    r14
.text:0000000000002CE4                 push    r13
.text:0000000000002CE6                 push    r12
.text:0000000000002CE8                 push    rbp
.text:0000000000002CE9                 push    rbx
.text:0000000000002CEA                 sub     rsp, 20A8h
.text:0000000000002CF1                 mov     rax, fs:28h
.text:0000000000002CFA                 mov     [rsp+20D8h+var_40], rax
.text:0000000000002D02                 xor     eax, eax
.text:0000000000002D04                 test    rdx, rdx
.text:0000000000002D07                 jz      loc_2E18
.text:0000000000002D0D                 lea     rbp, [rsp+20D8h+buf]
.text:0000000000002D15                 lea     r15, [rsp+20D8h+var_2049]
.text:0000000000002D1D                 mov     r13, rdi
.text:0000000000002D20                 mov     r12d, esi
.text:0000000000002D23                 mov     r14, rdx
.text:0000000000002D26
.text:0000000000002D26 loc_2D26:                               ; CODE XREF: head_lines+F3↓j
.text:0000000000002D26                 mov     edx, 2000h      ; nbytes
.text:0000000000002D2B                 mov     rsi, rbp        ; buf
.text:0000000000002D2E                 mov     edi, r12d       ; fd
.text:0000000000002D31                 call    safe_read
.text:0000000000002D36                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D3A                 jz      loc_2DD8
.text:0000000000002D40                 test    rax, rax
.text:0000000000002D43                 jz      loc_2E18
.text:0000000000002D49                 movzx   edx, cs:line_end
.text:0000000000002D50                 xor     ebx, ebx
.text:0000000000002D52                 jmp     short loc_2D5D
.text:0000000000002D52 ; ---------------------------------------------------------------------------
.text:0000000000002D54                 align 8
.text:0000000000002D58
.text:0000000000002D58 loc_2D58:                               ; CODE XREF: head_lines+85↓j
.text:0000000000002D58                                         ; head_lines+8B↓j
.text:0000000000002D58                 cmp     rax, rbx
.text:0000000000002D5B                 jz      short loc_2DC8
.text:0000000000002D5D
.text:0000000000002D5D loc_2D5D:                               ; CODE XREF: head_lines+72↑j
.text:0000000000002D5D                 add     rbx, 1
.text:0000000000002D61                 cmp     [r15+rbx], dl
.text:0000000000002D65                 jnz     short loc_2D58
.text:0000000000002D67                 sub     r14, 1
.text:0000000000002D6B                 jnz     short loc_2D58
.text:0000000000002D6D                 mov     r14, rbx
.text:0000000000002D70                 mov     edx, 1          ; whence
.text:0000000000002D75                 mov     edi, r12d       ; fd
.text:0000000000002D78                 sub     r14, rax
.text:0000000000002D7B                 mov     rsi, r14        ; offset
.text:0000000000002D7E                 call    _lseek
.text:0000000000002D83                 test    rax, rax
.text:0000000000002D86                 js      loc_2E22
.text:0000000000002D8C
.text:0000000000002D8C loc_2D8C:                               ; CODE XREF: head_lines+164↓j
.text:0000000000002D8C                                         ; head_lines+17D↓j
.text:0000000000002D8C                 mov     rsi, rbx
.text:0000000000002D8F                 mov     rdi, rbp
.text:0000000000002D92                 call    xwrite_stdout_part_6
.text:0000000000002D97                 mov     eax, 1
.text:0000000000002D9C
.text:0000000000002D9C loc_2D9C:                               ; CODE XREF: head_lines+136↓j
.text:0000000000002D9C                                         ; head_lines+13D↓j
.text:0000000000002D9C                 mov     rcx, [rsp+20D8h+var_40]
.text:0000000000002DA4                 xor     rcx, fs:28h
.text:0000000000002DAD                 jnz     loc_2E62
.text:0000000000002DB3                 add     rsp, 20A8h
.text:0000000000002DBA                 pop     rbx
.text:0000000000002DBB                 pop     rbp
.text:0000000000002DBC                 pop     r12
.text:0000000000002DBE                 pop     r13
.text:0000000000002DC0                 pop     r14
.text:0000000000002DC2                 pop     r15
.text:0000000000002DC4                 retn
.text:0000000000002DC4 ; ---------------------------------------------------------------------------
.text:0000000000002DC5                 align 8
.text:0000000000002DC8
.text:0000000000002DC8 loc_2DC8:                               ; CODE XREF: head_lines+7B↑j
.text:0000000000002DC8                 mov     rsi, rax
.text:0000000000002DCB                 mov     rdi, rbp
.text:0000000000002DCE                 call    xwrite_stdout_part_6
.text:0000000000002DD3                 jmp     loc_2D26
.text:0000000000002DD8 ; ---------------------------------------------------------------------------
.text:0000000000002DD8
.text:0000000000002DD8 loc_2DD8:                               ; CODE XREF: head_lines+5A↑j
.text:0000000000002DD8                 mov     rsi, r13
.text:0000000000002DDB                 mov     edi, 4
.text:0000000000002DE0                 call    quotearg_style
.text:0000000000002DE5                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000002DEC                 mov     edx, 5          ; category
.text:0000000000002DF1                 xor     edi, edi        ; domainname
.text:0000000000002DF3                 mov     rbp, rax
.text:0000000000002DF6                 call    _dcgettext
.text:0000000000002DFB                 mov     rbx, rax
.text:0000000000002DFE                 call    ___errno_location
.text:0000000000002E03                 mov     esi, [rax]      ; errnum
.text:0000000000002E05                 mov     rcx, rbp
.text:0000000000002E08                 xor     eax, eax
.text:0000000000002E0A                 mov     rdx, rbx        ; format
.text:0000000000002E0D                 xor     edi, edi        ; status
.text:0000000000002E0F                 call    _error
.text:0000000000002E14                 xor     eax, eax
.text:0000000000002E16                 jmp     short loc_2D9C
.text:0000000000002E18 ; ---------------------------------------------------------------------------
.text:0000000000002E18
.text:0000000000002E18 loc_2E18:                               ; CODE XREF: head_lines+27↑j
.text:0000000000002E18                                         ; head_lines+63↑j
.text:0000000000002E18                 mov     eax, 1
.text:0000000000002E1D                 jmp     loc_2D9C
.text:0000000000002E22 ; ---------------------------------------------------------------------------
.text:0000000000002E22
.text:0000000000002E22 loc_2E22:                               ; CODE XREF: head_lines+A6↑j
.text:0000000000002E22                 mov     rdx, rsp        ; stat_buf
.text:0000000000002E25                 mov     esi, r12d       ; fildes
.text:0000000000002E28                 mov     edi, 1          ; ver
.text:0000000000002E2D                 call    ___fxstat
.text:0000000000002E32                 test    eax, eax
.text:0000000000002E34                 jnz     short loc_2E4A
.text:0000000000002E36                 mov     eax, [rsp+20D8h+var_20C0]
.text:0000000000002E3A                 and     eax, 0F000h
.text:0000000000002E3F                 cmp     eax, 8000h
.text:0000000000002E44                 jnz     loc_2D8C
.text:0000000000002E4A
.text:0000000000002E4A loc_2E4A:                               ; CODE XREF: head_lines+154↑j
.text:0000000000002E4A                 mov     rcx, r13
.text:0000000000002E4D                 mov     edx, 1
.text:0000000000002E52                 mov     rsi, r14
.text:0000000000002E55                 mov     edi, r12d
.text:0000000000002E58                 call    elseek
.text:0000000000002E5D                 jmp     loc_2D8C
.text:0000000000002E62 ; ---------------------------------------------------------------------------
.text:0000000000002E62
.text:0000000000002E62 loc_2E62:                               ; CODE XREF: head_lines+CD↑j
.text:0000000000002E62                 call    ___stack_chk_fail
.text:0000000000002E62 ; } // starts at 2CE0
.text:0000000000002E62 head_lines      endp
.text:0000000000002E62
.text:0000000000002E62 ; ---------------------------------------------------------------------------
.text:0000000000002E67                 align 10h
.text:0000000000002E70
.text:0000000000002E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E70
.text:0000000000002E70
.text:0000000000002E70 head_bytes      proc near               ; CODE XREF: main+41B↑p
.text:0000000000002E70
.text:0000000000002E70 var_40          = qword ptr -40h
.text:0000000000002E70
.text:0000000000002E70 ; __unwind {
.text:0000000000002E70                 push    r15
.text:0000000000002E72                 push    r14
.text:0000000000002E74                 push    r13
.text:0000000000002E76                 push    r12
.text:0000000000002E78                 push    rbp
.text:0000000000002E79                 push    rbx
.text:0000000000002E7A                 sub     rsp, 2018h
.text:0000000000002E81                 mov     rax, fs:28h
.text:0000000000002E8A                 mov     [rsp+2048h+var_40], rax
.text:0000000000002E92                 xor     eax, eax
.text:0000000000002E94                 test    rdx, rdx
.text:0000000000002E97                 jz      loc_2F30
.text:0000000000002E9D                 mov     r15, rdi
.text:0000000000002EA0                 mov     r14d, esi
.text:0000000000002EA3                 mov     rbp, rdx
.text:0000000000002EA6                 mov     r12d, 2000h
.text:0000000000002EAC                 mov     r13, rsp
.text:0000000000002EAF                 jmp     short loc_2ECD
.text:0000000000002EAF ; ---------------------------------------------------------------------------
.text:0000000000002EB1                 align 8
.text:0000000000002EB8
.text:0000000000002EB8 loc_2EB8:                               ; CODE XREF: head_bytes+79↓j
.text:0000000000002EB8                 test    rax, rax
.text:0000000000002EBB                 jz      short loc_2F30
.text:0000000000002EBD                 mov     rsi, rax
.text:0000000000002EC0                 mov     rdi, r13
.text:0000000000002EC3                 call    xwrite_stdout_part_6
.text:0000000000002EC8                 sub     rbp, rbx
.text:0000000000002ECB                 jz      short loc_2F30
.text:0000000000002ECD
.text:0000000000002ECD loc_2ECD:                               ; CODE XREF: head_bytes+3F↑j
.text:0000000000002ECD                 cmp     r12, rbp
.text:0000000000002ED0                 mov     rsi, r13        ; buf
.text:0000000000002ED3                 mov     edi, r14d       ; fd
.text:0000000000002ED6                 cmova   r12, rbp
.text:0000000000002EDA                 mov     rdx, r12        ; nbytes
.text:0000000000002EDD                 call    safe_read
.text:0000000000002EE2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002EE6                 mov     rbx, rax
.text:0000000000002EE9                 jnz     short loc_2EB8
.text:0000000000002EEB                 mov     rsi, r15
.text:0000000000002EEE                 mov     edi, 4
.text:0000000000002EF3                 call    quotearg_style
.text:0000000000002EF8                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000002EFF                 mov     edx, 5          ; category
.text:0000000000002F04                 xor     edi, edi        ; domainname
.text:0000000000002F06                 mov     rbp, rax
.text:0000000000002F09                 call    _dcgettext
.text:0000000000002F0E                 mov     rbx, rax
.text:0000000000002F11                 call    ___errno_location
.text:0000000000002F16                 mov     esi, [rax]      ; errnum
.text:0000000000002F18                 mov     rcx, rbp
.text:0000000000002F1B                 xor     eax, eax
.text:0000000000002F1D                 mov     rdx, rbx        ; format
.text:0000000000002F20                 xor     edi, edi        ; status
.text:0000000000002F22                 call    _error
.text:0000000000002F27                 xor     eax, eax
.text:0000000000002F29                 jmp     short loc_2F35
.text:0000000000002F29 ; ---------------------------------------------------------------------------
.text:0000000000002F2B                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: head_bytes+27↑j
.text:0000000000002F30                                         ; head_bytes+4B↑j ...
.text:0000000000002F30                 mov     eax, 1
.text:0000000000002F35
.text:0000000000002F35 loc_2F35:                               ; CODE XREF: head_bytes+B9↑j
.text:0000000000002F35                 mov     rcx, [rsp+2048h+var_40]
.text:0000000000002F3D                 xor     rcx, fs:28h
.text:0000000000002F46                 jnz     short loc_2F5A
.text:0000000000002F48                 add     rsp, 2018h
.text:0000000000002F4F                 pop     rbx
.text:0000000000002F50                 pop     rbp
.text:0000000000002F51                 pop     r12
.text:0000000000002F53                 pop     r13
.text:0000000000002F55                 pop     r14
.text:0000000000002F57                 pop     r15
.text:0000000000002F59                 retn
.text:0000000000002F5A ; ---------------------------------------------------------------------------
.text:0000000000002F5A
.text:0000000000002F5A loc_2F5A:                               ; CODE XREF: head_bytes+D6↑j
.text:0000000000002F5A                 call    ___stack_chk_fail
.text:0000000000002F5A ; } // starts at 2E70
.text:0000000000002F5A head_bytes      endp
.text:0000000000002F5A
.text:0000000000002F5A ; ---------------------------------------------------------------------------
.text:0000000000002F5F                 align 20h
.text:0000000000002F60
.text:0000000000002F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F60
.text:0000000000002F60
.text:0000000000002F60 diagnose_copy_fd_failure proc near      ; CODE XREF: main+1112↑p
.text:0000000000002F60                                         ; elide_tail_lines_seekable+28F↓p
.text:0000000000002F60 ; __unwind {
.text:0000000000002F60                 push    rbp
.text:0000000000002F61                 push    rbx
.text:0000000000002F62                 sub     rsp, 8
.text:0000000000002F66                 cmp     edi, 1
.text:0000000000002F69                 jz      short loc_2FB8
.text:0000000000002F6B                 cmp     edi, 2
.text:0000000000002F6E                 jnz     short loc_2FD3
.text:0000000000002F70                 mov     rdx, rsi
.text:0000000000002F73                 xor     edi, edi
.text:0000000000002F75                 mov     esi, 3
.text:0000000000002F7A                 call    quotearg_n_style_colon
.text:0000000000002F7F                 lea     rsi, aSFileHasShrunk ; "%s: file has shrunk too much"
.text:0000000000002F86                 mov     rbp, rax
.text:0000000000002F89                 mov     edx, 5          ; category
.text:0000000000002F8E
.text:0000000000002F8E loc_2F8E:                               ; CODE XREF: diagnose_copy_fd_failure+71↓j
.text:0000000000002F8E                 xor     edi, edi        ; domainname
.text:0000000000002F90                 call    _dcgettext
.text:0000000000002F95                 mov     rbx, rax
.text:0000000000002F98                 call    ___errno_location
.text:0000000000002F9D                 mov     esi, [rax]      ; errnum
.text:0000000000002F9F                 add     rsp, 8
.text:0000000000002FA3                 mov     rcx, rbp
.text:0000000000002FA6                 mov     rdx, rbx        ; format
.text:0000000000002FA9                 xor     edi, edi        ; status
.text:0000000000002FAB                 xor     eax, eax
.text:0000000000002FAD                 pop     rbx
.text:0000000000002FAE                 pop     rbp
.text:0000000000002FAF                 jmp     _error
.text:0000000000002FAF ; ---------------------------------------------------------------------------
.text:0000000000002FB4                 align 8
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: diagnose_copy_fd_failure+9↑j
.text:0000000000002FB8                 mov     edi, 4
.text:0000000000002FBD                 call    quotearg_style
.text:0000000000002FC2                 mov     edx, 5
.text:0000000000002FC7                 mov     rbp, rax
.text:0000000000002FCA                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000002FD1                 jmp     short loc_2F8E
.text:0000000000002FD3 ; ---------------------------------------------------------------------------
.text:0000000000002FD3
.text:0000000000002FD3 loc_2FD3:                               ; CODE XREF: diagnose_copy_fd_failure+E↑j
.text:0000000000002FD3                 call    _abort
.text:0000000000002FD3 ; } // starts at 2F60
.text:0000000000002FD3 diagnose_copy_fd_failure endp
.text:0000000000002FD3
.text:0000000000002FD3 ; ---------------------------------------------------------------------------
.text:0000000000002FD8                 align 20h
.text:0000000000002FE0
.text:0000000000002FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FE0
.text:0000000000002FE0
.text:0000000000002FE0 elide_tail_lines_seekable proc near     ; CODE XREF: main+F4D↑p
.text:0000000000002FE0
.text:0000000000002FE0 var_2060        = qword ptr -2060h
.text:0000000000002FE0 var_2058        = qword ptr -2058h
.text:0000000000002FE0 var_2049        = byte ptr -2049h
.text:0000000000002FE0 s               = byte ptr -2048h
.text:0000000000002FE0 var_40          = qword ptr -40h
.text:0000000000002FE0
.text:0000000000002FE0 ; __unwind {
.text:0000000000002FE0                 push    r15
.text:0000000000002FE2                 mov     rax, rcx
.text:0000000000002FE5                 push    r14
.text:0000000000002FE7                 push    r13
.text:0000000000002FE9                 push    r12
.text:0000000000002FEB                 mov     r13d, 2000h
.text:0000000000002FF1                 push    rbp
.text:0000000000002FF2                 push    rbx
.text:0000000000002FF3                 mov     rbx, rdx
.text:0000000000002FF6                 mov     rdx, r8
.text:0000000000002FF9                 mov     r14d, esi
.text:0000000000002FFC                 sub     rdx, rax
.text:0000000000002FFF                 sub     rsp, 2038h
.text:0000000000003006                 mov     rax, rdx
.text:0000000000003009                 mov     [rsp+2068h+var_2058], rcx
.text:000000000000300E                 mov     [rsp+2068h+var_2060], rdi
.text:0000000000003013                 sar     rax, 3Fh
.text:0000000000003017                 shr     rax, 33h
.text:000000000000301B                 add     rdx, rax
.text:000000000000301E                 and     edx, 1FFFh
.text:0000000000003024                 mov     rcx, fs:28h
.text:000000000000302D                 mov     [rsp+2068h+var_40], rcx
.text:0000000000003035                 xor     ecx, ecx
.text:0000000000003037                 sub     rdx, rax
.text:000000000000303A                 mov     rcx, rdi
.text:000000000000303D                 mov     edi, r14d
.text:0000000000003040                 cmovnz  r13, rdx
.text:0000000000003044                 xor     edx, edx
.text:0000000000003046                 sub     r8, r13
.text:0000000000003049                 mov     rsi, r8
.text:000000000000304C                 mov     r12, r8
.text:000000000000304F                 call    elseek
.text:0000000000003054                 test    rax, rax
.text:0000000000003057                 js      loc_3138
.text:000000000000305D                 lea     rbp, [rsp+2068h+s]
.text:0000000000003062                 mov     rdx, r13        ; nbytes
.text:0000000000003065                 mov     edi, r14d       ; fd
.text:0000000000003068                 mov     rsi, rbp        ; buf
.text:000000000000306B                 call    safe_read
.text:0000000000003070                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003074                 mov     r8, rax
.text:0000000000003077                 jz      loc_31E0
.text:000000000000307D                 test    rbx, rbx
.text:0000000000003080                 jz      loc_31C0
.text:0000000000003086                 test    rax, rax
.text:0000000000003089                 jz      loc_31C0
.text:000000000000308F                 movzx   eax, cs:line_end
.text:0000000000003096                 mov     r15, rbx
.text:0000000000003099                 cmp     [rsp+r8+2068h+var_2049], al
.text:000000000000309E                 setnz   al
.text:00000000000030A1                 movzx   eax, al
.text:00000000000030A4                 sub     r15, rax
.text:00000000000030A7
.text:00000000000030A7 loc_30A7:                               ; CODE XREF: elide_tail_lines_seekable+1C9↓j
.text:00000000000030A7                                         ; elide_tail_lines_seekable+1E3↓j
.text:00000000000030A7                 test    r8, r8
.text:00000000000030AA                 jz      loc_3168
.text:00000000000030B0                 movsx   r13d, cs:line_end
.text:00000000000030B8                 jmp     short loc_30D9
.text:00000000000030B8 ; ---------------------------------------------------------------------------
.text:00000000000030BA                 align 20h
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: elide_tail_lines_seekable+FC↓j
.text:00000000000030C0                 sub     r8, 1
.text:00000000000030C4                 test    r15, r15
.text:00000000000030C7                 lea     rax, [r15-1]
.text:00000000000030CB                 jz      short loc_3100
.text:00000000000030CD
.text:00000000000030CD loc_30CD:                               ; CODE XREF: elide_tail_lines_seekable+11E↓j
.text:00000000000030CD                 test    r8, r8
.text:00000000000030D0                 mov     r15, rax
.text:00000000000030D3                 jz      loc_3168
.text:00000000000030D9
.text:00000000000030D9 loc_30D9:                               ; CODE XREF: elide_tail_lines_seekable+D8↑j
.text:00000000000030D9                 test    rbx, rbx
.text:00000000000030DC                 jz      short loc_30C0
.text:00000000000030DE                 mov     rdx, r8         ; n
.text:00000000000030E1                 mov     esi, r13d       ; c
.text:00000000000030E4                 mov     rdi, rbp        ; s
.text:00000000000030E7                 call    _memrchr
.text:00000000000030EC                 test    rax, rax
.text:00000000000030EF                 jz      short loc_3168
.text:00000000000030F1                 sub     rax, rbp
.text:00000000000030F4                 test    r15, r15
.text:00000000000030F7                 mov     r8, rax
.text:00000000000030FA                 lea     rax, [r15-1]
.text:00000000000030FE                 jnz     short loc_30CD
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: elide_tail_lines_seekable+EB↑j
.text:0000000000003100                 cmp     r12, [rsp+2068h+var_2058]
.text:0000000000003105                 jg      loc_3228
.text:000000000000310B
.text:000000000000310B loc_310B:                               ; CODE XREF: elide_tail_lines_seekable+282↓j
.text:000000000000310B                 mov     rbx, r8
.text:000000000000310E                 add     rbx, 1
.text:0000000000003112                 jnz     loc_31D0
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: elide_tail_lines_seekable+1FB↓j
.text:0000000000003118                 mov     rcx, [rsp+2068h+var_2060]
.text:000000000000311D                 lea     rsi, [r12+rbx]
.text:0000000000003121                 xor     edx, edx
.text:0000000000003123                 mov     edi, r14d
.text:0000000000003126                 call    elseek
.text:000000000000312B                 not     rax
.text:000000000000312E                 shr     rax, 3Fh
.text:0000000000003132                 jmp     short loc_313A
.text:0000000000003132 ; ---------------------------------------------------------------------------
.text:0000000000003134                 align 8
.text:0000000000003138
.text:0000000000003138 loc_3138:                               ; CODE XREF: elide_tail_lines_seekable+77↑j
.text:0000000000003138                                         ; elide_tail_lines_seekable+1AB↓j ...
.text:0000000000003138                 xor     eax, eax
.text:000000000000313A
.text:000000000000313A loc_313A:                               ; CODE XREF: elide_tail_lines_seekable+152↑j
.text:000000000000313A                                         ; elide_tail_lines_seekable+1D4↓j ...
.text:000000000000313A                 mov     rcx, [rsp+2068h+var_40]
.text:0000000000003142                 xor     rcx, fs:28h
.text:000000000000314B                 jnz     loc_327B
.text:0000000000003151                 add     rsp, 2038h
.text:0000000000003158                 pop     rbx
.text:0000000000003159                 pop     rbp
.text:000000000000315A                 pop     r12
.text:000000000000315C                 pop     r13
.text:000000000000315E                 pop     r14
.text:0000000000003160                 pop     r15
.text:0000000000003162                 retn
.text:0000000000003162 ; ---------------------------------------------------------------------------
.text:0000000000003163                 align 8
.text:0000000000003168
.text:0000000000003168 loc_3168:                               ; CODE XREF: elide_tail_lines_seekable+CA↑j
.text:0000000000003168                                         ; elide_tail_lines_seekable+F3↑j ...
.text:0000000000003168                 cmp     r12, [rsp+2068h+var_2058]
.text:000000000000316D                 jz      short loc_31AF
.text:000000000000316F                 mov     rcx, [rsp+2068h+var_2060]
.text:0000000000003174                 sub     r12, 2000h
.text:000000000000317B                 xor     edx, edx
.text:000000000000317D                 mov     rsi, r12
.text:0000000000003180                 mov     edi, r14d
.text:0000000000003183                 call    elseek
.text:0000000000003188                 test    rax, rax
.text:000000000000318B                 js      short loc_3138
.text:000000000000318D                 mov     edx, 2000h      ; nbytes
.text:0000000000003192                 mov     rsi, rbp        ; buf
.text:0000000000003195                 mov     edi, r14d       ; fd
.text:0000000000003198                 call    safe_read
.text:000000000000319D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000031A1                 mov     r8, rax
.text:00000000000031A4                 jz      short loc_31E0
.text:00000000000031A6                 test    rax, rax
.text:00000000000031A9                 jnz     loc_30A7
.text:00000000000031AF
.text:00000000000031AF loc_31AF:                               ; CODE XREF: elide_tail_lines_seekable+18D↑j
.text:00000000000031AF                 mov     eax, 1
.text:00000000000031B4                 jmp     short loc_313A
.text:00000000000031B4 ; ---------------------------------------------------------------------------
.text:00000000000031B6                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: elide_tail_lines_seekable+A0↑j
.text:00000000000031C0                                         ; elide_tail_lines_seekable+A9↑j
.text:00000000000031C0                 mov     r15, rbx
.text:00000000000031C3                 jmp     loc_30A7
.text:00000000000031C3 ; ---------------------------------------------------------------------------
.text:00000000000031C8                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: elide_tail_lines_seekable+132↑j
.text:00000000000031D0                 mov     rsi, rbx
.text:00000000000031D3                 mov     rdi, rbp
.text:00000000000031D6                 call    xwrite_stdout_part_6
.text:00000000000031DB                 jmp     loc_3118
.text:00000000000031E0 ; ---------------------------------------------------------------------------
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: elide_tail_lines_seekable+97↑j
.text:00000000000031E0                                         ; elide_tail_lines_seekable+1C4↑j
.text:00000000000031E0                 mov     rsi, [rsp+2068h+var_2060]
.text:00000000000031E5                 mov     edi, 4
.text:00000000000031EA                 call    quotearg_style
.text:00000000000031EF                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000031F6                 mov     edx, 5          ; category
.text:00000000000031FB                 xor     edi, edi        ; domainname
.text:00000000000031FD                 mov     rbp, rax
.text:0000000000003200                 call    _dcgettext
.text:0000000000003205                 mov     rbx, rax
.text:0000000000003208                 call    ___errno_location
.text:000000000000320D                 mov     esi, [rax]      ; errnum
.text:000000000000320F                 mov     rcx, rbp
.text:0000000000003212                 xor     eax, eax
.text:0000000000003214                 mov     rdx, rbx        ; format
.text:0000000000003217                 xor     edi, edi        ; status
.text:0000000000003219                 call    _error
.text:000000000000321E                 xor     eax, eax
.text:0000000000003220                 jmp     loc_313A
.text:0000000000003220 ; ---------------------------------------------------------------------------
.text:0000000000003225                 align 8
.text:0000000000003228
.text:0000000000003228 loc_3228:                               ; CODE XREF: elide_tail_lines_seekable+125↑j
.text:0000000000003228                 mov     rbx, [rsp+2068h+var_2058]
.text:000000000000322D                 mov     rcx, [rsp+2068h+var_2060]
.text:0000000000003232                 xor     edx, edx
.text:0000000000003234                 mov     edi, r14d
.text:0000000000003237                 mov     [rsp+18h], r8
.text:000000000000323C                 mov     rsi, rbx
.text:000000000000323F                 call    elseek
.text:0000000000003244                 test    rax, rax
.text:0000000000003247                 js      loc_3138
.text:000000000000324D                 mov     rsi, r12
.text:0000000000003250                 mov     edi, r14d       ; fd
.text:0000000000003253                 sub     rsi, rbx        ; nbytes
.text:0000000000003256                 call    copy_fd
.text:000000000000325B                 test    eax, eax
.text:000000000000325D                 mov     r8, [rsp+18h]
.text:0000000000003262                 jz      loc_310B
.text:0000000000003268                 mov     rsi, [rsp+2068h+var_2060]
.text:000000000000326D                 mov     edi, eax
.text:000000000000326F                 call    diagnose_copy_fd_failure
.text:0000000000003274                 xor     eax, eax
.text:0000000000003276                 jmp     loc_313A
.text:000000000000327B ; ---------------------------------------------------------------------------
.text:000000000000327B
.text:000000000000327B loc_327B:                               ; CODE XREF: elide_tail_lines_seekable+16B↑j
.text:000000000000327B                 call    ___stack_chk_fail
.text:000000000000327B ; } // starts at 2FE0
.text:000000000000327B elide_tail_lines_seekable endp
.text:000000000000327B
.text:0000000000003280
.text:0000000000003280 ; =============== S U B R O U T I N E =======================================
.text:0000000000003280
.text:0000000000003280 ; Attributes: noreturn
.text:0000000000003280
.text:0000000000003280 ; void __fastcall __noreturn usage(int status)
.text:0000000000003280                 public usage
.text:0000000000003280 usage           proc near               ; CODE XREF: main+144↑p
.text:0000000000003280                                         ; main+FE9↑p
.text:0000000000003280
.text:0000000000003280 var_A8          = qword ptr -0A8h
.text:0000000000003280 var_A0          = qword ptr -0A0h
.text:0000000000003280 var_98          = qword ptr -98h
.text:0000000000003280 var_90          = qword ptr -90h
.text:0000000000003280 var_88          = qword ptr -88h
.text:0000000000003280 var_80          = qword ptr -80h
.text:0000000000003280 var_78          = qword ptr -78h
.text:0000000000003280 var_70          = qword ptr -70h
.text:0000000000003280 var_68          = qword ptr -68h
.text:0000000000003280 var_60          = qword ptr -60h
.text:0000000000003280 var_58          = qword ptr -58h
.text:0000000000003280 var_50          = qword ptr -50h
.text:0000000000003280 var_48          = qword ptr -48h
.text:0000000000003280 var_40          = qword ptr -40h
.text:0000000000003280 var_30          = qword ptr -30h
.text:0000000000003280
.text:0000000000003280 ; __unwind {
.text:0000000000003280                 push    r13
.text:0000000000003282                 push    r12
.text:0000000000003284                 mov     edx, 5          ; category
.text:0000000000003289                 push    rbp
.text:000000000000328A                 push    rbx
.text:000000000000328B                 mov     ebp, edi
.text:000000000000328D                 sub     rsp, 88h
.text:0000000000003294                 mov     rbx, cs:program_name
.text:000000000000329B                 mov     rax, fs:28h
.text:00000000000032A4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000032A9                 xor     eax, eax
.text:00000000000032AB                 test    edi, edi
.text:00000000000032AD                 jz      short loc_32DD
.text:00000000000032AF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000032B6                 xor     edi, edi        ; domainname
.text:00000000000032B8                 call    _dcgettext
.text:00000000000032BD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000032C4                 mov     rdx, rax
.text:00000000000032C7                 mov     rcx, rbx
.text:00000000000032CA                 mov     esi, 1
.text:00000000000032CF                 xor     eax, eax
.text:00000000000032D1                 call    ___fprintf_chk
.text:00000000000032D6
.text:00000000000032D6 loc_32D6:                               ; CODE XREF: usage+35E↓j
.text:00000000000032D6                 mov     edi, ebp        ; status
.text:00000000000032D8                 call    _exit
.text:00000000000032DD ; ---------------------------------------------------------------------------
.text:00000000000032DD
.text:00000000000032DD loc_32DD:                               ; CODE XREF: usage+2D↑j
.text:00000000000032DD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00000000000032E4                 xor     edi, edi        ; domainname
.text:00000000000032E6                 call    _dcgettext
.text:00000000000032EB                 mov     rdx, rbx
.text:00000000000032EE                 mov     rsi, rax
.text:00000000000032F1                 mov     edi, 1
.text:00000000000032F6                 xor     eax, eax
.text:00000000000032F8                 call    ___printf_chk
.text:00000000000032FD                 lea     rsi, aPrintTheFirstD ; "Print the first %d lines of each FILE t"...
.text:0000000000003304                 xor     edi, edi        ; domainname
.text:0000000000003306                 mov     edx, 5          ; category
.text:000000000000330B                 call    _dcgettext
.text:0000000000003310                 mov     edx, 0Ah
.text:0000000000003315                 mov     rsi, rax
.text:0000000000003318                 mov     edi, 1
.text:000000000000331D                 xor     eax, eax
.text:000000000000331F                 call    ___printf_chk
.text:0000000000003324                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000332B                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000003332                 mov     edx, 5          ; category
.text:0000000000003337                 xor     edi, edi        ; domainname
.text:0000000000003339                 call    _dcgettext
.text:000000000000333E                 mov     rsi, rbx        ; stream
.text:0000000000003341                 mov     rdi, rax        ; s
.text:0000000000003344                 call    _fputs_unlocked
.text:0000000000003349                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003350                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003357                 mov     edx, 5          ; category
.text:000000000000335C                 xor     edi, edi        ; domainname
.text:000000000000335E                 call    _dcgettext
.text:0000000000003363                 mov     rsi, rbx        ; stream
.text:0000000000003366                 mov     rdi, rax        ; s
.text:0000000000003369                 call    _fputs_unlocked
.text:000000000000336E                 lea     rsi, aCBytesNumPrint ; "  -c, --bytes=[-]NUM       print the fi"...
.text:0000000000003375                 xor     edi, edi        ; domainname
.text:0000000000003377                 mov     edx, 5          ; category
.text:000000000000337C                 call    _dcgettext
.text:0000000000003381                 mov     edx, 0Ah
.text:0000000000003386                 mov     rsi, rax
.text:0000000000003389                 mov     edi, 1
.text:000000000000338E                 xor     eax, eax
.text:0000000000003390                 call    ___printf_chk
.text:0000000000003395                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000339C                 lea     rsi, aQQuietSilentNe ; "  -q, --quiet, --silent    never print "...
.text:00000000000033A3                 mov     edx, 5          ; category
.text:00000000000033A8                 xor     edi, edi        ; domainname
.text:00000000000033AA                 call    _dcgettext
.text:00000000000033AF                 mov     rsi, rbx        ; stream
.text:00000000000033B2                 mov     rdi, rax        ; s
.text:00000000000033B5                 call    _fputs_unlocked
.text:00000000000033BA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000033C1                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated    line delimit"...
.text:00000000000033C8                 mov     edx, 5          ; category
.text:00000000000033CD                 xor     edi, edi        ; domainname
.text:00000000000033CF                 call    _dcgettext
.text:00000000000033D4                 mov     rsi, rbx        ; stream
.text:00000000000033D7                 mov     rdi, rax        ; s
.text:00000000000033DA                 call    _fputs_unlocked
.text:00000000000033DF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000033E6                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000033ED                 mov     edx, 5          ; category
.text:00000000000033F2                 xor     edi, edi        ; domainname
.text:00000000000033F4                 call    _dcgettext
.text:00000000000033F9                 mov     rsi, rbx        ; stream
.text:00000000000033FC                 mov     rdi, rax        ; s
.text:00000000000033FF                 call    _fputs_unlocked
.text:0000000000003404                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000340B                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003412                 mov     edx, 5          ; category
.text:0000000000003417                 xor     edi, edi        ; domainname
.text:0000000000003419                 call    _dcgettext
.text:000000000000341E                 mov     rsi, rbx        ; stream
.text:0000000000003421                 mov     rdi, rax        ; s
.text:0000000000003424                 call    _fputs_unlocked
.text:0000000000003429                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003430                 lea     rsi, aNumMayHaveAMul ; "\nNUM may have a multiplier suffix:\nb "...
.text:0000000000003437                 mov     edx, 5          ; category
.text:000000000000343C                 xor     edi, edi        ; domainname
.text:000000000000343E                 call    _dcgettext
.text:0000000000003443                 mov     rsi, rbx        ; stream
.text:0000000000003446                 mov     rdi, rax        ; s
.text:0000000000003449                 lea     rbx, aHead      ; "head"
.text:0000000000003450                 call    _fputs_unlocked
.text:0000000000003455                 lea     rax, asc_68B2   ; "["
.text:000000000000345C                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000003463                 mov     [rsp+0A8h+var_48], 0
.text:000000000000346C                 mov     [rsp+0A8h+var_40], 0
.text:0000000000003475                 mov     rdx, rsp
.text:0000000000003478                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000347C                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000003483                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000003488                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000348F                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000003494                 lea     rax, domainname ; "coreutils"
.text:000000000000349B                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000034A0                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000034A7                 mov     [rsp+0A8h+var_98], rax
.text:00000000000034AC                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000034B3                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000034B8                 mov     [rsp+0A8h+var_90], rax
.text:00000000000034BD                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000034C4                 mov     [rsp+0A8h+var_88], rax
.text:00000000000034C9                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000034D0                 mov     [rsp+0A8h+var_80], rax
.text:00000000000034D5                 mov     [rsp+0A8h+var_70], rax
.text:00000000000034DA                 mov     [rsp+0A8h+var_60], rax
.text:00000000000034DF                 mov     [rsp+0A8h+var_50], rax
.text:00000000000034E4                 nop     dword ptr [rax+00h]
.text:00000000000034E8
.text:00000000000034E8 loc_34E8:                               ; CODE XREF: usage+285↓j
.text:00000000000034E8                 add     rdx, 10h
.text:00000000000034EC                 mov     rdi, [rdx]
.text:00000000000034EF                 test    rdi, rdi
.text:00000000000034F2                 jz      short loc_3507
.text:00000000000034F4                 mov     ecx, 5
.text:00000000000034F9                 mov     rsi, rbx
.text:00000000000034FC                 repe cmpsb
.text:00000000000034FE                 setnbe  al
.text:0000000000003501                 sbb     al, 0
.text:0000000000003503                 test    al, al
.text:0000000000003505                 jnz     short loc_34E8
.text:0000000000003507
.text:0000000000003507 loc_3507:                               ; CODE XREF: usage+272↑j
.text:0000000000003507                 mov     r12, [rdx+8]
.text:000000000000350B                 xor     edi, edi        ; domainname
.text:000000000000350D                 mov     edx, 5          ; category
.text:0000000000003512                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003519                 test    r12, r12
.text:000000000000351C                 jz      loc_35E3
.text:0000000000003522                 call    _dcgettext
.text:0000000000003527                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000352E                 lea     rdx, unk_6928
.text:0000000000003535                 mov     rsi, rax
.text:0000000000003538                 mov     edi, 1
.text:000000000000353D                 xor     eax, eax
.text:000000000000353F                 call    ___printf_chk
.text:0000000000003544                 xor     esi, esi        ; locale
.text:0000000000003546                 mov     edi, 5          ; category
.text:000000000000354B                 call    _setlocale
.text:0000000000003550                 test    rax, rax
.text:0000000000003553                 jz      short loc_3571
.text:0000000000003555                 lea     rsi, s2         ; "en_"
.text:000000000000355C                 mov     edx, 3          ; n
.text:0000000000003561                 mov     rdi, rax        ; s1
.text:0000000000003564                 call    _strncmp
.text:0000000000003569                 test    eax, eax
.text:000000000000356B                 jnz     loc_3678
.text:0000000000003571
.text:0000000000003571 loc_3571:                               ; CODE XREF: usage+2D3↑j
.text:0000000000003571                                         ; usage+41D↓j
.text:0000000000003571                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003578                 xor     edi, edi        ; domainname
.text:000000000000357A                 mov     edx, 5          ; category
.text:000000000000357F                 call    _dcgettext
.text:0000000000003584                 lea     rcx, aHead      ; "head"
.text:000000000000358B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003592                 mov     rsi, rax
.text:0000000000003595                 mov     edi, 1
.text:000000000000359A                 xor     eax, eax
.text:000000000000359C                 call    ___printf_chk
.text:00000000000035A1                 cmp     r12, rbx
.text:00000000000035A4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000035AB                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000035B2                 cmovz   rbx, rcx
.text:00000000000035B6
.text:00000000000035B6 loc_35B6:                               ; CODE XREF: usage+3EC↓j
.text:00000000000035B6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000035BD                 xor     edi, edi        ; domainname
.text:00000000000035BF                 mov     edx, 5          ; category
.text:00000000000035C4                 call    _dcgettext
.text:00000000000035C9                 mov     rcx, rbx
.text:00000000000035CC                 mov     rsi, rax
.text:00000000000035CF                 mov     rdx, r12
.text:00000000000035D2                 mov     edi, 1
.text:00000000000035D7                 xor     eax, eax
.text:00000000000035D9                 call    ___printf_chk
.text:00000000000035DE                 jmp     loc_32D6
.text:00000000000035E3 ; ---------------------------------------------------------------------------
.text:00000000000035E3
.text:00000000000035E3 loc_35E3:                               ; CODE XREF: usage+29C↑j
.text:00000000000035E3                 call    _dcgettext
.text:00000000000035E8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000035EF                 lea     rdx, unk_6928
.text:00000000000035F6                 mov     rsi, rax
.text:00000000000035F9                 mov     edi, 1
.text:00000000000035FE                 xor     eax, eax
.text:0000000000003600                 call    ___printf_chk
.text:0000000000003605                 xor     esi, esi        ; locale
.text:0000000000003607                 mov     edi, 5          ; category
.text:000000000000360C                 call    _setlocale
.text:0000000000003611                 test    rax, rax
.text:0000000000003614                 jz      short loc_362E
.text:0000000000003616                 lea     rsi, s2         ; "en_"
.text:000000000000361D                 mov     edx, 3          ; n
.text:0000000000003622                 mov     rdi, rax        ; s1
.text:0000000000003625                 call    _strncmp
.text:000000000000362A                 test    eax, eax
.text:000000000000362C                 jnz     short loc_3671
.text:000000000000362E
.text:000000000000362E loc_362E:                               ; CODE XREF: usage+394↑j
.text:000000000000362E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003635                 mov     edx, 5          ; category
.text:000000000000363A                 xor     edi, edi        ; domainname
.text:000000000000363C                 lea     r12, aHead      ; "head"
.text:0000000000003643                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000364A                 call    _dcgettext
.text:000000000000364F                 lea     rcx, aHead      ; "head"
.text:0000000000003656                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000365D                 mov     rsi, rax
.text:0000000000003660                 mov     edi, 1
.text:0000000000003665                 xor     eax, eax
.text:0000000000003667                 call    ___printf_chk
.text:000000000000366C                 jmp     loc_35B6
.text:0000000000003671 ; ---------------------------------------------------------------------------
.text:0000000000003671
.text:0000000000003671 loc_3671:                               ; CODE XREF: usage+3AC↑j
.text:0000000000003671                 lea     r12, aHead      ; "head"
.text:0000000000003678
.text:0000000000003678 loc_3678:                               ; CODE XREF: usage+2EB↑j
.text:0000000000003678                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000367F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003686                 xor     edi, edi        ; domainname
.text:0000000000003688                 mov     edx, 5          ; category
.text:000000000000368D                 call    _dcgettext
.text:0000000000003692                 mov     rsi, r13        ; stream
.text:0000000000003695                 mov     rdi, rax        ; s
.text:0000000000003698                 call    _fputs_unlocked
.text:000000000000369D                 jmp     loc_3571
.text:000000000000369D ; } // starts at 3280
.text:000000000000369D usage           endp
.text:000000000000369D
.text:000000000000369D ; ---------------------------------------------------------------------------
.text:00000000000036A2                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0
.text:00000000000036B0                 public close_stdout_set_file_name
.text:00000000000036B0 close_stdout_set_file_name proc near
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 mov     cs:file_name, rdi
.text:00000000000036B7                 retn
.text:00000000000036B7 ; } // starts at 36B0
.text:00000000000036B7 close_stdout_set_file_name endp
.text:00000000000036B7
.text:00000000000036B7 ; ---------------------------------------------------------------------------
.text:00000000000036B8                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0
.text:00000000000036C0                 public close_stdout_set_ignore_EPIPE
.text:00000000000036C0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 mov     cs:ignore_EPIPE, dil
.text:00000000000036C7                 retn
.text:00000000000036C7 ; } // starts at 36C0
.text:00000000000036C7 close_stdout_set_ignore_EPIPE endp
.text:00000000000036C7
.text:00000000000036C7 ; ---------------------------------------------------------------------------
.text:00000000000036C8                 align 10h
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0 ; Attributes: info_from_lumina
.text:00000000000036D0
.text:00000000000036D0 ; void __cdecl close_stdout()
.text:00000000000036D0                 public close_stdout
.text:00000000000036D0 close_stdout    proc near               ; DATA XREF: main+61↑o
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 push    rbp
.text:00000000000036D1                 push    rbx
.text:00000000000036D2                 sub     rsp, 8
.text:00000000000036D6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000036DD                 call    close_stream
.text:00000000000036E2                 test    eax, eax
.text:00000000000036E4                 jz      short loc_36FC
.text:00000000000036E6                 call    ___errno_location
.text:00000000000036EB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000036F2                 mov     rbx, rax
.text:00000000000036F5                 jz      short loc_3713
.text:00000000000036F7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000036FA                 jnz     short loc_3713
.text:00000000000036FC
.text:00000000000036FC loc_36FC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000036FC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003703                 call    close_stream
.text:0000000000003708                 test    eax, eax
.text:000000000000370A                 jnz     short loc_3752
.text:000000000000370C                 add     rsp, 8
.text:0000000000003710                 pop     rbx
.text:0000000000003711                 pop     rbp
.text:0000000000003712                 retn
.text:0000000000003713 ; ---------------------------------------------------------------------------
.text:0000000000003713
.text:0000000000003713 loc_3713:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003713                                         ; close_stdout+2A↑j
.text:0000000000003713                 lea     rsi, aWriteError ; "write error"
.text:000000000000371A                 xor     edi, edi        ; domainname
.text:000000000000371C                 mov     edx, 5          ; category
.text:0000000000003721                 call    _dcgettext
.text:0000000000003726                 mov     rdi, cs:file_name
.text:000000000000372D                 mov     rbp, rax
.text:0000000000003730                 test    rdi, rdi
.text:0000000000003733                 jz      short loc_375D
.text:0000000000003735                 call    quotearg_colon
.text:000000000000373A                 mov     esi, [rbx]      ; errnum
.text:000000000000373C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003743                 mov     rcx, rax
.text:0000000000003746                 mov     r8, rbp
.text:0000000000003749                 xor     edi, edi        ; status
.text:000000000000374B                 xor     eax, eax
.text:000000000000374D                 call    _error
.text:0000000000003752
.text:0000000000003752 loc_3752:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003752                                         ; close_stdout+A2↓j
.text:0000000000003752                 mov     edi, cs:exit_failure ; status
.text:0000000000003758                 call    __exit
.text:000000000000375D ; ---------------------------------------------------------------------------
.text:000000000000375D
.text:000000000000375D loc_375D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000375D                 mov     esi, [rbx]      ; errnum
.text:000000000000375F                 lea     rdx, format+4   ; format
.text:0000000000003766                 mov     rcx, rax
.text:0000000000003769                 xor     edi, edi        ; status
.text:000000000000376B                 xor     eax, eax
.text:000000000000376D                 call    _error
.text:0000000000003772                 jmp     short loc_3752
.text:0000000000003772 ; } // starts at 36D0
.text:0000000000003772 close_stdout    endp
.text:0000000000003772
.text:0000000000003772 ; ---------------------------------------------------------------------------
.text:0000000000003774                 align 20h
.text:0000000000003780
.text:0000000000003780 ; =============== S U B R O U T I N E =======================================
.text:0000000000003780
.text:0000000000003780
.text:0000000000003780 ; __int64 __fastcall full_read(int fd, void *buf, size_t nbytes)
.text:0000000000003780                 public full_read
.text:0000000000003780 full_read       proc near               ; CODE XREF: main+66C↑p
.text:0000000000003780                                         ; main+787↑p ...
.text:0000000000003780 ; __unwind {
.text:0000000000003780                 push    r13
.text:0000000000003782                 push    r12
.text:0000000000003784                 push    rbp
.text:0000000000003785                 push    rbx
.text:0000000000003786                 sub     rsp, 8
.text:000000000000378A                 test    rdx, rdx
.text:000000000000378D                 jz      short loc_37F1
.text:000000000000378F                 mov     r13d, edi
.text:0000000000003792                 mov     rbp, rsi
.text:0000000000003795                 mov     rbx, rdx
.text:0000000000003798                 xor     r12d, r12d
.text:000000000000379B                 jmp     short loc_37B0
.text:000000000000379B ; ---------------------------------------------------------------------------
.text:000000000000379D                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: full_read+42↓j
.text:00000000000037A0                 test    rax, rax
.text:00000000000037A3                 jz      short loc_37D8
.text:00000000000037A5                 add     r12, rax
.text:00000000000037A8                 add     rbp, rax
.text:00000000000037AB                 sub     rbx, rax
.text:00000000000037AE                 jz      short loc_37C4
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: full_read+1B↑j
.text:00000000000037B0                 mov     rdx, rbx        ; nbytes
.text:00000000000037B3                 mov     rsi, rbp        ; buf
.text:00000000000037B6                 mov     edi, r13d       ; fd
.text:00000000000037B9                 call    safe_read
.text:00000000000037BE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000037C2                 jnz     short loc_37A0
.text:00000000000037C4
.text:00000000000037C4 loc_37C4:                               ; CODE XREF: full_read+2E↑j
.text:00000000000037C4                                         ; full_read+74↓j
.text:00000000000037C4                 add     rsp, 8
.text:00000000000037C8                 mov     rax, r12
.text:00000000000037CB                 pop     rbx
.text:00000000000037CC                 pop     rbp
.text:00000000000037CD                 pop     r12
.text:00000000000037CF                 pop     r13
.text:00000000000037D1                 retn
.text:00000000000037D1 ; ---------------------------------------------------------------------------
.text:00000000000037D2                 align 8
.text:00000000000037D8
.text:00000000000037D8 loc_37D8:                               ; CODE XREF: full_read+23↑j
.text:00000000000037D8                 call    ___errno_location
.text:00000000000037DD                 mov     dword ptr [rax], 0
.text:00000000000037E3                 add     rsp, 8
.text:00000000000037E7                 mov     rax, r12
.text:00000000000037EA                 pop     rbx
.text:00000000000037EB                 pop     rbp
.text:00000000000037EC                 pop     r12
.text:00000000000037EE                 pop     r13
.text:00000000000037F0                 retn
.text:00000000000037F1 ; ---------------------------------------------------------------------------
.text:00000000000037F1
.text:00000000000037F1 loc_37F1:                               ; CODE XREF: full_read+D↑j
.text:00000000000037F1                 xor     r12d, r12d
.text:00000000000037F4                 jmp     short loc_37C4
.text:00000000000037F4 ; } // starts at 3780
.text:00000000000037F4 full_read       endp
.text:00000000000037F4
.text:00000000000037F4 ; ---------------------------------------------------------------------------
.text:00000000000037F6                 align 20h
.text:0000000000003800
.text:0000000000003800 ; =============== S U B R O U T I N E =======================================
.text:0000000000003800
.text:0000000000003800 ; Attributes: info_from_lumina
.text:0000000000003800
.text:0000000000003800 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000003800                 public imaxtostr
.text:0000000000003800 imaxtostr       proc near               ; CODE XREF: elseek+56↑p
.text:0000000000003800 ; __unwind {
.text:0000000000003800                 test    rdi, rdi
.text:0000000000003803                 lea     rcx, [rsi+14h]
.text:0000000000003807                 mov     byte ptr [rsi+14h], 0
.text:000000000000380B                 mov     r9, 6666666666666667h
.text:0000000000003815                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:000000000000381F                 mov     r8d, 30h ; '0'
.text:0000000000003825                 js      short loc_3863
.text:0000000000003827                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000003830                 mov     rax, rdi
.text:0000000000003833                 sub     rcx, 1
.text:0000000000003837                 mul     rsi
.text:000000000000383A                 shr     rdx, 3
.text:000000000000383E                 lea     rax, [rdx+rdx*4]
.text:0000000000003842                 add     rax, rax
.text:0000000000003845                 sub     rdi, rax
.text:0000000000003848                 add     edi, 30h ; '0'
.text:000000000000384B                 test    rdx, rdx
.text:000000000000384E                 mov     [rcx], dil
.text:0000000000003851                 mov     rdi, rdx
.text:0000000000003854                 jnz     short loc_3830
.text:0000000000003856                 mov     rax, rcx
.text:0000000000003859                 retn
.text:0000000000003859 ; ---------------------------------------------------------------------------
.text:000000000000385A                 align 20h
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000003860                 mov     rcx, rsi
.text:0000000000003863
.text:0000000000003863 loc_3863:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000003863                 mov     rax, rdi
.text:0000000000003866                 lea     rsi, [rcx-1]
.text:000000000000386A                 imul    r9
.text:000000000000386D                 mov     rax, rdi
.text:0000000000003870                 sar     rax, 3Fh
.text:0000000000003874                 sar     rdx, 2
.text:0000000000003878                 sub     rdx, rax
.text:000000000000387B                 lea     rax, [rdx+rdx*4]
.text:000000000000387F                 lea     eax, [r8+rax*2]
.text:0000000000003883                 sub     eax, edi
.text:0000000000003885                 test    rdx, rdx
.text:0000000000003888                 mov     rdi, rdx
.text:000000000000388B                 mov     [rcx-1], al
.text:000000000000388E                 jnz     short loc_3860
.text:0000000000003890                 sub     rcx, 2
.text:0000000000003894                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000003898                 mov     rax, rcx
.text:000000000000389B                 retn
.text:000000000000389B ; } // starts at 3800
.text:000000000000389B imaxtostr       endp
.text:000000000000389B
.text:000000000000389B ; ---------------------------------------------------------------------------
.text:000000000000389C                 align 20h
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0 ; Attributes: info_from_lumina
.text:00000000000038A0
.text:00000000000038A0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:00000000000038A0                 public umaxtostr
.text:00000000000038A0 umaxtostr       proc near               ; CODE XREF: main+1051↑p
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 lea     rcx, [rsi+14h]
.text:00000000000038A4                 mov     byte ptr [rsi+14h], 0
.text:00000000000038A8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:00000000000038B2                 nop     word ptr [rax+rax+00h]
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: umaxtostr+3C↓j
.text:00000000000038B8                 mov     rax, rdi
.text:00000000000038BB                 sub     rcx, 1
.text:00000000000038BF                 mul     rsi
.text:00000000000038C2                 shr     rdx, 3
.text:00000000000038C6                 lea     rax, [rdx+rdx*4]
.text:00000000000038CA                 add     rax, rax
.text:00000000000038CD                 sub     rdi, rax
.text:00000000000038D0                 add     edi, 30h ; '0'
.text:00000000000038D3                 test    rdx, rdx
.text:00000000000038D6                 mov     [rcx], dil
.text:00000000000038D9                 mov     rdi, rdx
.text:00000000000038DC                 jnz     short loc_38B8
.text:00000000000038DE                 mov     rax, rcx
.text:00000000000038E1                 retn
.text:00000000000038E1 ; } // starts at 38A0
.text:00000000000038E1 umaxtostr       endp
.text:00000000000038E1
.text:00000000000038E1 ; ---------------------------------------------------------------------------
.text:00000000000038E2                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0
.text:00000000000038F0                 public set_program_name
.text:00000000000038F0 set_program_name proc near              ; CODE XREF: main+2C↑p
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 test    rdi, rdi
.text:00000000000038F3                 push    rbx
.text:00000000000038F4                 jz      short loc_396D
.text:00000000000038F6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000038FB                 mov     rbx, rdi
.text:00000000000038FE                 call    _strrchr
.text:0000000000003903                 test    rax, rax
.text:0000000000003906                 jz      short loc_395D
.text:0000000000003908                 lea     r8, [rax+1]
.text:000000000000390C                 mov     rdx, r8
.text:000000000000390F                 sub     rdx, rbx
.text:0000000000003912                 cmp     rdx, 6
.text:0000000000003916                 jle     short loc_395D
.text:0000000000003918                 lea     rsi, [rax-6]
.text:000000000000391C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003923                 mov     ecx, 7
.text:0000000000003928                 repe cmpsb
.text:000000000000392A                 setnbe  dl
.text:000000000000392D                 sbb     dl, 0
.text:0000000000003930                 test    dl, dl
.text:0000000000003932                 jnz     short loc_395D
.text:0000000000003934                 lea     rdi, aLt        ; "lt-"
.text:000000000000393B                 mov     ecx, 3
.text:0000000000003940                 mov     rsi, r8
.text:0000000000003943                 mov     rbx, r8
.text:0000000000003946                 repe cmpsb
.text:0000000000003948                 setnbe  dl
.text:000000000000394B                 sbb     dl, 0
.text:000000000000394E                 test    dl, dl
.text:0000000000003950                 jnz     short loc_395D
.text:0000000000003952                 lea     rbx, [rax+4]
.text:0000000000003956                 mov     cs:__bss_start, rbx
.text:000000000000395D
.text:000000000000395D loc_395D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000395D                                         ; set_program_name+26↑j ...
.text:000000000000395D                 mov     cs:program_name, rbx
.text:0000000000003964                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000396B                 pop     rbx
.text:000000000000396C                 retn
.text:000000000000396D ; ---------------------------------------------------------------------------
.text:000000000000396D
.text:000000000000396D loc_396D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000396D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003974                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000397B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003980                 mov     esi, 1          ; size
.text:0000000000003985                 call    _fwrite
.text:000000000000398A                 call    _abort
.text:000000000000398A ; } // starts at 38F0
.text:000000000000398A set_program_name endp
.text:000000000000398A
.text:000000000000398A ; ---------------------------------------------------------------------------
.text:000000000000398F                 align 10h
.text:0000000000003990
.text:0000000000003990 ; =============== S U B R O U T I N E =======================================
.text:0000000000003990
.text:0000000000003990 ; Attributes: info_from_lumina
.text:0000000000003990
.text:0000000000003990 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003990 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003990                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003990 ; __unwind {
.text:0000000000003990                 push    rbp
.text:0000000000003991                 push    rbx
.text:0000000000003992                 mov     rbp, rdi
.text:0000000000003995                 mov     ebx, esi
.text:0000000000003997                 sub     rsp, 8
.text:000000000000399B                 call    locale_charset
.text:00000000000039A0                 movzx   edx, byte ptr [rax]
.text:00000000000039A3                 and     edx, 0FFFFFFDFh
.text:00000000000039A6                 cmp     dl, 55h ; 'U'
.text:00000000000039A9                 jz      short loc_3A20
.text:00000000000039AB                 cmp     dl, 47h ; 'G'
.text:00000000000039AE                 jz      short loc_39D0
.text:00000000000039B0
.text:00000000000039B0 loc_39B0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000039B0                                         ; gettext_quote+50↓j ...
.text:00000000000039B0                 lea     rax, unk_70FB
.text:00000000000039B7                 lea     rdx, asc_70FD   ; "'"
.text:00000000000039BE                 cmp     ebx, 9
.text:00000000000039C1                 cmovnz  rax, rdx
.text:00000000000039C5                 add     rsp, 8
.text:00000000000039C9                 pop     rbx
.text:00000000000039CA                 pop     rbp
.text:00000000000039CB                 retn
.text:00000000000039CB ; ---------------------------------------------------------------------------
.text:00000000000039CC                 align 10h
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000039D0                 movzx   edx, byte ptr [rax+1]
.text:00000000000039D4                 and     edx, 0FFFFFFDFh
.text:00000000000039D7                 cmp     dl, 42h ; 'B'
.text:00000000000039DA                 jnz     short loc_39B0
.text:00000000000039DC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000039E0                 jnz     short loc_39B0
.text:00000000000039E2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000039E6                 jnz     short loc_39B0
.text:00000000000039E8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000039EC                 jnz     short loc_39B0
.text:00000000000039EE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000039F2                 jnz     short loc_39B0
.text:00000000000039F4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000039F8                 jnz     short loc_39B0
.text:00000000000039FA                 cmp     byte ptr [rax+7], 0
.text:00000000000039FE                 jnz     short loc_39B0
.text:0000000000003A00                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003A04                 lea     rax, unk_70F4
.text:0000000000003A0B                 lea     rdx, unk_70F8
.text:0000000000003A12                 cmovnz  rax, rdx
.text:0000000000003A16                 add     rsp, 8
.text:0000000000003A1A                 pop     rbx
.text:0000000000003A1B                 pop     rbp
.text:0000000000003A1C                 retn
.text:0000000000003A1C ; ---------------------------------------------------------------------------
.text:0000000000003A1D                 align 20h
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003A20                 movzx   edx, byte ptr [rax+1]
.text:0000000000003A24                 and     edx, 0FFFFFFDFh
.text:0000000000003A27                 cmp     dl, 54h ; 'T'
.text:0000000000003A2A                 jnz     short loc_39B0
.text:0000000000003A2C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003A30                 and     edx, 0FFFFFFDFh
.text:0000000000003A33                 cmp     dl, 46h ; 'F'
.text:0000000000003A36                 jnz     loc_39B0
.text:0000000000003A3C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003A40                 jnz     loc_39B0
.text:0000000000003A46                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000003A4A                 jnz     loc_39B0
.text:0000000000003A50                 cmp     byte ptr [rax+5], 0
.text:0000000000003A54                 jnz     loc_39B0
.text:0000000000003A5A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003A5E                 lea     rax, unk_70EC
.text:0000000000003A65                 lea     rdx, unk_70F0
.text:0000000000003A6C                 cmovnz  rax, rdx
.text:0000000000003A70                 add     rsp, 8
.text:0000000000003A74                 pop     rbx
.text:0000000000003A75                 pop     rbp
.text:0000000000003A76                 retn
.text:0000000000003A76 ; } // starts at 3990
.text:0000000000003A76 gettext_quote   endp
.text:0000000000003A76
.text:0000000000003A76 ; ---------------------------------------------------------------------------
.text:0000000000003A77                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80 ; Attributes: info_from_lumina
.text:0000000000003A80
.text:0000000000003A80 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003A80 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003A80                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003A80
.text:0000000000003A80 var_E0          = dword ptr -0E0h
.text:0000000000003A80 var_DB          = byte ptr -0DBh
.text:0000000000003A80 var_DA          = byte ptr -0DAh
.text:0000000000003A80 var_D9          = byte ptr -0D9h
.text:0000000000003A80 s               = qword ptr -0D8h
.text:0000000000003A80 n               = qword ptr -0D0h
.text:0000000000003A80 var_C8          = qword ptr -0C8h
.text:0000000000003A80 ps              = qword ptr -0C0h
.text:0000000000003A80 var_B8          = qword ptr -0B8h
.text:0000000000003A80 var_B0          = qword ptr -0B0h
.text:0000000000003A80 var_A8          = qword ptr -0A8h
.text:0000000000003A80 s2              = qword ptr -0A0h
.text:0000000000003A80 var_98          = qword ptr -98h
.text:0000000000003A80 var_90          = qword ptr -90h
.text:0000000000003A80 var_88          = qword ptr -88h
.text:0000000000003A80 var_80          = qword ptr -80h
.text:0000000000003A80 var_78          = qword ptr -78h
.text:0000000000003A80 var_70          = dword ptr -70h
.text:0000000000003A80 var_6C          = byte ptr -6Ch
.text:0000000000003A80 var_6B          = byte ptr -6Bh
.text:0000000000003A80 var_6A          = byte ptr -6Ah
.text:0000000000003A80 var_69          = byte ptr -69h
.text:0000000000003A80 var_68          = qword ptr -68h
.text:0000000000003A80 var_60          = qword ptr -60h
.text:0000000000003A80 wc              = dword ptr -4Ch
.text:0000000000003A80 var_48          = qword ptr -48h
.text:0000000000003A80 var_40          = qword ptr -40h
.text:0000000000003A80 arg_0           = qword ptr  8
.text:0000000000003A80 arg_8           = qword ptr  10h
.text:0000000000003A80 arg_10          = qword ptr  18h
.text:0000000000003A80
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 push    r15
.text:0000000000003A82                 push    r14
.text:0000000000003A84                 mov     r15d, r8d
.text:0000000000003A87                 push    r13
.text:0000000000003A89                 push    r12
.text:0000000000003A8B                 mov     r14, rdi
.text:0000000000003A8E                 push    rbp
.text:0000000000003A8F                 push    rbx
.text:0000000000003A90                 mov     ebx, r9d
.text:0000000000003A93                 mov     r13, rsi
.text:0000000000003A96                 mov     rbp, rcx
.text:0000000000003A99                 and     ebx, 2
.text:0000000000003A9C                 sub     rsp, 0B8h
.text:0000000000003AA3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000003AAB                 mov     [rsp+0E8h+s], rdx
.text:0000000000003AB0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003AB5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000003ABA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000003ABF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003AC7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003ACC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003AD4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003AD9                 mov     rax, fs:28h
.text:0000000000003AE2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000003AEA                 xor     eax, eax
.text:0000000000003AEC                 call    ___ctype_get_mb_cur_max
.text:0000000000003AF1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003AF5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000003AFA                 ja      def_3B11        ; jumptable 00000000000121F1 default case
.text:0000000000003B00                 lea     rcx, jpt_3B11
.text:0000000000003B07                 mov     edx, r15d
.text:0000000000003B0A                 movsxd  rax, ds:(jpt_3B11 - 7160h)[rcx+rdx*4]
.text:0000000000003B0E                 add     rax, rcx
.text:0000000000003B11                 jmp     rax             ; switch jump
.text:0000000000003B13 ; ---------------------------------------------------------------------------
.text:0000000000003B13
.text:0000000000003B13 loc_3B13:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B13                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003B13                                         ; DATA XREF: ...
.text:0000000000003B13                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003B18                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B1D                 xor     r12d, r12d
.text:0000000000003B20                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B29                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003B2E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003B33
.text:0000000000003B33 loc_3B33:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003B33                 lea     rax, asc_70FD   ; "'"
.text:0000000000003B3A                 mov     [rsp+0E8h+n], 1
.text:0000000000003B43                 xor     r15d, r15d
.text:0000000000003B46                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B4E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B53
.text:0000000000003B53 loc_3B53:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003B53                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003B53                 xor     r11d, r11d
.text:0000000000003B56                 mov     rax, rbp
.text:0000000000003B59                 mov     r8d, r12d
.text:0000000000003B5C                 mov     rbp, r11
.text:0000000000003B5F                 mov     r11, rax
.text:0000000000003B62                 nop     word ptr [rax+rax+00h]
.text:0000000000003B68
.text:0000000000003B68 loc_3B68:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003B68                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003B68                 cmp     r11, rbp
.text:0000000000003B6B                 setnz   r12b
.text:0000000000003B6F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B73                 jnz     short loc_3B82
.text:0000000000003B75                 mov     rax, [rsp+0E8h+s]
.text:0000000000003B7A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000003B7E                 setnz   r12b
.text:0000000000003B82
.text:0000000000003B82 loc_3B82:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003B82                 test    r12b, r12b
.text:0000000000003B85                 jz      loc_41E0
.text:0000000000003B8B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B90                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003B95                 lea     r9, [rdi+rbp]
.text:0000000000003B99                 setnz   al
.text:0000000000003B9C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003BA0                 mov     r10d, eax
.text:0000000000003BA3                 jz      loc_3C50
.text:0000000000003BA9                 mov     rax, [rsp+0E8h+n]
.text:0000000000003BAE                 test    rax, rax
.text:0000000000003BB1                 jz      loc_3FE0
.text:0000000000003BB7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BBB                 lea     rbx, [rbp+rax+0]
.text:0000000000003BC0                 jnz     short loc_3BF0
.text:0000000000003BC2                 cmp     rax, 1
.text:0000000000003BC6                 jbe     short loc_3BF0
.text:0000000000003BC8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003BCD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003BD2                 mov     [rsp+0E8h+ps], r9
.text:0000000000003BD7                 call    _strlen
.text:0000000000003BDC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003BE2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003BE8                 mov     r11, rax
.text:0000000000003BEB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003BF0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003BF0                 cmp     rbx, r11
.text:0000000000003BF3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003BF8                 ja      loc_41B0
.text:0000000000003BFE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003C03                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003C08                 mov     rdi, r9         ; s1
.text:0000000000003C0B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003C10                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003C15                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003C1A                 call    _memcmp
.text:0000000000003C1F                 test    eax, eax
.text:0000000000003C21                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003C26                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003C2C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003C31                 jnz     loc_41B0
.text:0000000000003C37                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C3C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003C42                 jnz     loc_4BC5
.text:0000000000003C48                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003C50                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003C50                 movzx   ebx, byte ptr [r9]
.text:0000000000003C54                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003C57                 ja      def_3C6E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003C5D                 lea     rcx, jpt_3C6E
.text:0000000000003C64                 movzx   edx, bl
.text:0000000000003C67                 movsxd  rax, ds:(jpt_3C6E - 718Ch)[rcx+rdx*4]
.text:0000000000003C6B                 add     rax, rcx
.text:0000000000003C6E                 jmp     rax             ; switch jump
.text:0000000000003C70 ; ---------------------------------------------------------------------------
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000003C70                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003C73
.text:0000000000003C73 loc_3C73:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003C73                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003C73                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003C77                 setnz   al
.text:0000000000003C7A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C7E                 jnz     short loc_3C8C
.text:0000000000003C80                 mov     rax, [rsp+0E8h+s]
.text:0000000000003C85                 cmp     byte ptr [rax+1], 0
.text:0000000000003C89                 setnz   al
.text:0000000000003C8C
.text:0000000000003C8C loc_3C8C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003C8C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C91                 setz    dl
.text:0000000000003C94                 test    al, al
.text:0000000000003C96                 jz      loc_3EE8
.text:0000000000003C9C
.text:0000000000003C9C loc_3C9C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003C9C                 xor     r12d, r12d
.text:0000000000003C9F                 xor     eax, eax
.text:0000000000003CA1                 nop     dword ptr [rax+00000000h]
.text:0000000000003CA8
.text:0000000000003CA8 loc_3CA8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003CA8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003CA8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003CAD                 jnz     loc_3DC2
.text:0000000000003CB3                 test    dl, dl
.text:0000000000003CB5                 jnz     loc_3DC2
.text:0000000000003CBB
.text:0000000000003CBB loc_3CBB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003CBB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003CC0                 test    rsi, rsi
.text:0000000000003CC3                 jz      short loc_3CD9
.text:0000000000003CC5                 mov     edx, ebx
.text:0000000000003CC7                 shr     dl, 5
.text:0000000000003CCA                 movzx   edx, dl
.text:0000000000003CCD                 mov     edx, [rsi+rdx*4]
.text:0000000000003CD0                 bt      edx, ebx
.text:0000000000003CD3                 jb      loc_3E23
.text:0000000000003CD9
.text:0000000000003CD9 loc_3CD9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003CD9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003CD9                 test    r10b, r10b
.text:0000000000003CDC                 jnz     loc_3E23
.text:0000000000003CE2                 xor     eax, 1
.text:0000000000003CE5                 add     rbp, 1
.text:0000000000003CE9                 and     eax, r8d
.text:0000000000003CEC
.text:0000000000003CEC loc_3CEC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003CEC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003CEC                 test    al, al
.text:0000000000003CEE                 jz      short loc_3D10
.text:0000000000003CF0                 cmp     r13, r15
.text:0000000000003CF3                 jbe     short loc_3CFA
.text:0000000000003CF5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003CFA
.text:0000000000003CFA loc_3CFA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003CFA                 lea     rax, [r15+1]
.text:0000000000003CFE                 cmp     r13, rax
.text:0000000000003D01                 jbe     short loc_3D09
.text:0000000000003D03                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003D09
.text:0000000000003D09 loc_3D09:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003D09                 add     r15, 2
.text:0000000000003D0D                 xor     r8d, r8d
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003D10                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003D10                 cmp     r15, r13
.text:0000000000003D13                 jnb     short loc_3D19
.text:0000000000003D15                 mov     [r14+r15], bl
.text:0000000000003D19
.text:0000000000003D19 loc_3D19:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003D19                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003D1E                 add     r15, 1
.text:0000000000003D22                 mov     eax, 0
.text:0000000000003D27                 test    r12b, r12b
.text:0000000000003D2A                 cmovz   edi, eax
.text:0000000000003D2D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003D32                 jmp     loc_3B68
.text:0000000000003D32 ; ---------------------------------------------------------------------------
.text:0000000000003D37                 align 20h
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003D40                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000003D40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003D43
.text:0000000000003D43 loc_3D43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D43                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003D43                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003D47                 cmp     eax, 2
.text:0000000000003D4A                 jz      loc_4308
.text:0000000000003D50                 cmp     eax, 5
.text:0000000000003D53                 jz      loc_42C8
.text:0000000000003D59                 cmp     eax, 2
.text:0000000000003D5C                 mov     ebx, 3Fh ; '?'
.text:0000000000003D61                 setz    dl
.text:0000000000003D64                 xor     r12d, r12d
.text:0000000000003D67                 xor     eax, eax
.text:0000000000003D69                 jmp     loc_3CA8
.text:0000000000003D69 ; ---------------------------------------------------------------------------
.text:0000000000003D6E                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003D70                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000003D70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003D73
.text:0000000000003D73 loc_3D73:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D73                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003D73                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003D78                 jz      loc_4280
.text:0000000000003D7E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003D83                 xor     edx, edx
.text:0000000000003D85                 xor     eax, eax
.text:0000000000003D87                 mov     ebx, 27h ; '''
.text:0000000000003D8C                 jmp     loc_3CA8
.text:0000000000003D8C ; ---------------------------------------------------------------------------
.text:0000000000003D91                 align 8
.text:0000000000003D98
.text:0000000000003D98 loc_3D98:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D98                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003D98                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003D9D                 mov     ebx, 74h ; 't'
.text:0000000000003DA2
.text:0000000000003DA2 loc_3DA2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003DA2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003DA2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DA7                 setz    al
.text:0000000000003DAA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003DAE                 jnz     loc_3EFE
.text:0000000000003DB4
.text:0000000000003DB4 loc_3DB4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003DB4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003DB4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003DB9                 jnz     short loc_3E20
.text:0000000000003DBB
.text:0000000000003DBB loc_3DBB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003DBB                 mov     ebx, edx
.text:0000000000003DBD                 xor     r12d, r12d
.text:0000000000003DC0                 xor     eax, eax
.text:0000000000003DC2
.text:0000000000003DC2 loc_3DC2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003DC2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003DC2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003DC7                 jnz     loc_3CBB
.text:0000000000003DCD                 jmp     loc_3CD9
.text:0000000000003DCD ; ---------------------------------------------------------------------------
.text:0000000000003DD2                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DD8                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003DD8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003DDD                 mov     ebx, 62h ; 'b'
.text:0000000000003DE2                 jmp     short loc_3DB4
.text:0000000000003DE2 ; ---------------------------------------------------------------------------
.text:0000000000003DE4                 align 8
.text:0000000000003DE8
.text:0000000000003DE8 loc_3DE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DE8                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003DE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003DED                 jz      loc_41C0
.text:0000000000003DF3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003DF8                 jz      loc_4010
.text:0000000000003DFE
.text:0000000000003DFE loc_3DFE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003DFE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E03                 jz      loc_4010
.text:0000000000003E09                 cmp     [rsp+0E8h+n], 0
.text:0000000000003E0F                 jnz     loc_41CB
.text:0000000000003E15                 mov     ebx, 5Ch ; '\'
.text:0000000000003E1A                 nop     word ptr [rax+rax+00h]
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003E20                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003E20                 xor     r12d, r12d
.text:0000000000003E23
.text:0000000000003E23 loc_3E23:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003E23                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003E23                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E28                 setz    dl
.text:0000000000003E2B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E30                 mov     eax, edx
.text:0000000000003E32                 jnz     loc_4688
.text:0000000000003E38                 mov     eax, r8d
.text:0000000000003E3B                 xor     eax, 1
.text:0000000000003E3E                 and     al, dl
.text:0000000000003E40                 jz      short loc_3E71
.text:0000000000003E42                 cmp     r13, r15
.text:0000000000003E45                 jbe     short loc_3E4C
.text:0000000000003E47                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003E4C
.text:0000000000003E4C loc_3E4C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003E4C                 lea     rdx, [r15+1]
.text:0000000000003E50                 cmp     r13, rdx
.text:0000000000003E53                 jbe     short loc_3E5B
.text:0000000000003E55                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003E5B
.text:0000000000003E5B loc_3E5B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003E5B                 lea     rdx, [r15+2]
.text:0000000000003E5F                 cmp     r13, rdx
.text:0000000000003E62                 jbe     short loc_3E6A
.text:0000000000003E64                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003E6A
.text:0000000000003E6A loc_3E6A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003E6A                 add     r15, 3
.text:0000000000003E6E                 mov     r8d, eax
.text:0000000000003E71
.text:0000000000003E71 loc_3E71:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003E71                 cmp     r13, r15
.text:0000000000003E74                 jbe     short loc_3E7B
.text:0000000000003E76                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003E7B
.text:0000000000003E7B loc_3E7B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003E7B                 add     r15, 1
.text:0000000000003E7F                 add     rbp, 1
.text:0000000000003E83                 jmp     loc_3D10
.text:0000000000003E83 ; ---------------------------------------------------------------------------
.text:0000000000003E88                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E90                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003E90                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003E95                 jnz     loc_4063
.text:0000000000003E9B                 xor     edx, edx
.text:0000000000003E9D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003EA2                 jz      loc_3DBB
.text:0000000000003EA8                 add     rbp, 1
.text:0000000000003EAC                 jmp     loc_3B68
.text:0000000000003EAC ; ---------------------------------------------------------------------------
.text:0000000000003EB1                 align 8
.text:0000000000003EB8
.text:0000000000003EB8 loc_3EB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003EB8                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003EB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003EBD                 setz    dl
.text:0000000000003EC0                 xor     eax, eax
.text:0000000000003EC2                 jmp     loc_3CA8
.text:0000000000003EC2 ; ---------------------------------------------------------------------------
.text:0000000000003EC7                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003ED0                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003ED0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003ED5                 mov     ebx, 61h ; 'a'
.text:0000000000003EDA                 jmp     loc_3DB4
.text:0000000000003EDA ; ---------------------------------------------------------------------------
.text:0000000000003EDF                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003EE0                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003EE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003EE5                 setz    dl
.text:0000000000003EE8
.text:0000000000003EE8 loc_3EE8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003EE8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003EE8                 test    rbp, rbp
.text:0000000000003EEB                 jnz     loc_3C9C
.text:0000000000003EF1
.text:0000000000003EF1 loc_3EF1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003EF1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003EF1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003EF6                 and     al, dl
.text:0000000000003EF8                 jz      loc_3CA8
.text:0000000000003EFE
.text:0000000000003EFE loc_3EFE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003EFE                 mov     rbp, r11
.text:0000000000003F01                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003F09                 jmp     loc_4609
.text:0000000000003F09 ; ---------------------------------------------------------------------------
.text:0000000000003F0E                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F10                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003F10                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003F15                 setz    dl
.text:0000000000003F18                 xor     r12d, r12d
.text:0000000000003F1B                 jmp     short loc_3EF1
.text:0000000000003F1B ; ---------------------------------------------------------------------------
.text:0000000000003F1D                 align 20h
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F20                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003F20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003F25                 mov     ebx, 20h ; ' '
.text:0000000000003F2A                 setz    dl
.text:0000000000003F2D                 jmp     short loc_3EF1
.text:0000000000003F2D ; ---------------------------------------------------------------------------
.text:0000000000003F2F                 align 10h
.text:0000000000003F30
.text:0000000000003F30 loc_3F30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F30                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003F30                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003F35                 mov     ebx, 72h ; 'r'
.text:0000000000003F3A                 jmp     loc_3DA2
.text:0000000000003F3A ; ---------------------------------------------------------------------------
.text:0000000000003F3F                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F40                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003F40                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003F45                 mov     ebx, 66h ; 'f'
.text:0000000000003F4A                 jmp     loc_3DB4
.text:0000000000003F4A ; ---------------------------------------------------------------------------
.text:0000000000003F4F                 align 10h
.text:0000000000003F50
.text:0000000000003F50 loc_3F50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F50                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003F50                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003F55                 mov     ebx, 76h ; 'v'
.text:0000000000003F5A                 jmp     loc_3DB4
.text:0000000000003F5A ; ---------------------------------------------------------------------------
.text:0000000000003F5F                 align 20h
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F60                                         ; DATA XREF: .rodata:jpt_3C6E↓o
.text:0000000000003F60                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003F65                 mov     ebx, 6Eh ; 'n'
.text:0000000000003F6A                 jmp     loc_3DA2
.text:0000000000003F6A ; ---------------------------------------------------------------------------
.text:0000000000003F6F                 align 10h
.text:0000000000003F70
.text:0000000000003F70 def_3FFA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003F70                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003F70                                         ; DATA XREF: ...
.text:0000000000003F70                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003F73                 nop     dword ptr [rax+rax+00h]
.text:0000000000003F78
.text:0000000000003F78 def_3C6E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003F78                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003F78                                         ; DATA XREF: ...
.text:0000000000003F78                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003F7E                 jnz     loc_4328
.text:0000000000003F84                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003F89                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003F8E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003F93                 call    ___ctype_b_loc
.text:0000000000003F98                 mov     rcx, [rax]
.text:0000000000003F9B                 movzx   edx, bl
.text:0000000000003F9E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003FA4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003FAA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003FAF                 mov     edi, 1
.text:0000000000003FB4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003FB8                 and     ax, 4000h
.text:0000000000003FBC                 setnz   r12b
.text:0000000000003FC0                 setz    al
.text:0000000000003FC3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003FC7
.text:0000000000003FC7 loc_3FC7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003FC7                 test    al, al
.text:0000000000003FC9                 jnz     loc_4961
.text:0000000000003FCF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003FD4                 setz    dl
.text:0000000000003FD7                 jmp     loc_3CA8
.text:0000000000003FD7 ; ---------------------------------------------------------------------------
.text:0000000000003FDC                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003FE0                 movzx   ebx, byte ptr [r9]
.text:0000000000003FE4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003FE7                 ja      short def_3FFA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003FE9                 lea     rcx, jpt_3FFA
.text:0000000000003FF0                 movzx   edx, bl
.text:0000000000003FF3                 movsxd  rax, ds:(jpt_3FFA - 7388h)[rcx+rdx*4]
.text:0000000000003FF7                 add     rax, rcx
.text:0000000000003FFA                 jmp     rax             ; switch jump
.text:0000000000003FFA ; ---------------------------------------------------------------------------
.text:0000000000003FFC                 align 20h
.text:0000000000004000
.text:0000000000004000 loc_4000:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004000                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004000                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004003                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004008                 jnz     loc_3DFE
.text:000000000000400E                 xchg    ax, ax
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004010                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004010                 mov     edx, 5Ch ; '\'
.text:0000000000004015                 mov     ebx, 5Ch ; '\'
.text:000000000000401A                 jmp     loc_3DB4
.text:000000000000401A ; ---------------------------------------------------------------------------
.text:000000000000401F                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004020                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004020                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004025                 xor     r10d, r10d
.text:0000000000004028                 mov     ebx, 66h ; 'f'
.text:000000000000402D                 jmp     loc_3DB4
.text:000000000000402D ; ---------------------------------------------------------------------------
.text:0000000000004032                 align 8
.text:0000000000004038
.text:0000000000004038 loc_4038:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004038                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004038                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000403D                 xor     r10d, r10d
.text:0000000000004040                 mov     ebx, 6Eh ; 'n'
.text:0000000000004045                 jmp     loc_3DA2
.text:0000000000004045 ; ---------------------------------------------------------------------------
.text:000000000000404A                 align 10h
.text:0000000000004050
.text:0000000000004050 loc_4050:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004050                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004050                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004055                 jmp     loc_3E20
.text:0000000000004055 ; ---------------------------------------------------------------------------
.text:000000000000405A                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004060                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004060                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004063
.text:0000000000004063 loc_4063:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004063                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004068                 setz    dl
.text:000000000000406B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004070                 jnz     loc_4C0A
.text:0000000000004076                 mov     eax, r8d
.text:0000000000004079                 mov     rcx, r15
.text:000000000000407C                 xor     eax, 1
.text:000000000000407F                 and     al, dl
.text:0000000000004081                 jz      short loc_40B0
.text:0000000000004083                 cmp     r13, r15
.text:0000000000004086                 jbe     short loc_408D
.text:0000000000004088                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000408D
.text:000000000000408D loc_408D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000408D                 lea     rcx, [r15+1]
.text:0000000000004091                 cmp     r13, rcx
.text:0000000000004094                 jbe     short loc_409C
.text:0000000000004096                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000409C
.text:000000000000409C loc_409C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000409C                 lea     rcx, [r15+2]
.text:00000000000040A0                 cmp     r13, rcx
.text:00000000000040A3                 ja      loc_46D9
.text:00000000000040A9
.text:00000000000040A9 loc_40A9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000040A9                 lea     rcx, [r15+3]
.text:00000000000040AD                 mov     r8d, eax
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000040B0                 cmp     r13, rcx
.text:00000000000040B3                 jbe     short loc_40BA
.text:00000000000040B5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000040BA
.text:00000000000040BA loc_40BA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000040BA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040BF                 lea     r15, [rcx+1]
.text:00000000000040C3                 jz      loc_46C9
.text:00000000000040C9                 lea     rax, [rbp+1]
.text:00000000000040CD                 cmp     rax, r11
.text:00000000000040D0                 jnb     short loc_40EB
.text:00000000000040D2                 mov     rax, [rsp+0E8h+s]
.text:00000000000040D7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000040DC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000040E0                 sub     eax, 30h ; '0'
.text:00000000000040E3                 cmp     al, 9
.text:00000000000040E5                 jbe     loc_4919
.text:00000000000040EB
.text:00000000000040EB loc_40EB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000040EB                 mov     eax, r12d
.text:00000000000040EE                 mov     ebx, 30h ; '0'
.text:00000000000040F3                 xor     r12d, r12d
.text:00000000000040F6                 jmp     loc_3CA8
.text:00000000000040F6 ; ---------------------------------------------------------------------------
.text:00000000000040FB                 align 20h
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004100                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004100                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004105                 mov     r12d, r10d
.text:0000000000004108                 setz    dl
.text:000000000000410B                 xor     r10d, r10d
.text:000000000000410E                 xor     eax, eax
.text:0000000000004110                 jmp     loc_3CA8
.text:0000000000004110 ; ---------------------------------------------------------------------------
.text:0000000000004115                 align 8
.text:0000000000004118
.text:0000000000004118 loc_4118:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004118                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004118                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000411D                 setz    dl
.text:0000000000004120                 xor     r10d, r10d
.text:0000000000004123                 jmp     loc_3EE8
.text:0000000000004123 ; ---------------------------------------------------------------------------
.text:0000000000004128                 align 10h
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004130                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004130                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004135                 setz    dl
.text:0000000000004138                 xor     r10d, r10d
.text:000000000000413B                 xor     r12d, r12d
.text:000000000000413E                 jmp     loc_3EF1
.text:000000000000413E ; ---------------------------------------------------------------------------
.text:0000000000004143                 align 8
.text:0000000000004148
.text:0000000000004148 loc_4148:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004148                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004148                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000414D                 mov     r12d, r10d
.text:0000000000004150                 mov     ebx, 20h ; ' '
.text:0000000000004155                 setz    dl
.text:0000000000004158                 xor     r10d, r10d
.text:000000000000415B                 jmp     loc_3EF1
.text:0000000000004160 ; ---------------------------------------------------------------------------
.text:0000000000004160
.text:0000000000004160 loc_4160:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004160                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004160                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004165                 xor     r10d, r10d
.text:0000000000004168                 mov     ebx, 72h ; 'r'
.text:000000000000416D                 jmp     loc_3DA2
.text:000000000000416D ; ---------------------------------------------------------------------------
.text:0000000000004172                 align 8
.text:0000000000004178
.text:0000000000004178 loc_4178:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004178                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004178                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000417D                 jmp     loc_3E20
.text:000000000000417D ; ---------------------------------------------------------------------------
.text:0000000000004182                 align 8
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004188                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:0000000000004188                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000418D                 xor     r10d, r10d
.text:0000000000004190                 mov     ebx, 74h ; 't'
.text:0000000000004195                 jmp     loc_3DA2
.text:0000000000004195 ; ---------------------------------------------------------------------------
.text:000000000000419A                 align 20h
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041A0                                         ; DATA XREF: .rodata:jpt_3FFA↓o
.text:00000000000041A0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000041A5                 jmp     loc_3E20
.text:00000000000041A5 ; ---------------------------------------------------------------------------
.text:00000000000041AA                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000041B0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000041B0                 xor     r10d, r10d
.text:00000000000041B3                 jmp     loc_3C50
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B8                 align 20h
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000041C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000041C5                 jnz     loc_4B30
.text:00000000000041CB
.text:00000000000041CB loc_41CB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000041CB                 add     rbp, 1
.text:00000000000041CF                 mov     eax, r8d
.text:00000000000041D2                 xor     r12d, r12d
.text:00000000000041D5                 mov     ebx, 5Ch ; '\'
.text:00000000000041DA                 jmp     loc_3CEC
.text:00000000000041DA ; ---------------------------------------------------------------------------
.text:00000000000041DF                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000041E0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000041E5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000041EA                 mov     r12d, r8d
.text:00000000000041ED                 mov     rbp, r11
.text:00000000000041F0                 setz    dl
.text:00000000000041F3                 mov     eax, ebx
.text:00000000000041F5                 test    r15, r15
.text:00000000000041F8                 setz    cl
.text:00000000000041FB                 and     eax, edx
.text:00000000000041FD                 and     al, cl
.text:00000000000041FF                 jnz     loc_4C66
.text:0000000000004205                 mov     eax, ebx
.text:0000000000004207                 xor     eax, 1
.text:000000000000420A                 and     dl, al
.text:000000000000420C                 jz      loc_4B7C
.text:0000000000004212                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004217                 jz      loc_4B7A
.text:000000000000421D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004222                 jnz     loc_4C1D
.text:0000000000004228                 test    r13, r13
.text:000000000000422B                 setz    al
.text:000000000000422E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004234                 setnz   dl
.text:0000000000004237                 and     al, dl
.text:0000000000004239                 jz      loc_4C5C
.text:000000000000423F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004244
.text:0000000000004244 loc_4244:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004244                 lea     rbx, asc_70FD   ; "'"
.text:000000000000424B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000424F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004257                 mov     r15d, 1
.text:000000000000425D                 mov     [rsp+0E8h+n], 1
.text:0000000000004266                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000426B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004270                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004274                 jmp     loc_3B53
.text:0000000000004274 ; ---------------------------------------------------------------------------
.text:0000000000004279                 align 20h
.text:0000000000004280
.text:0000000000004280 loc_4280:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004280                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004285                 jnz     loc_4B30
.text:000000000000428B                 test    r13, r13
.text:000000000000428E                 jz      loc_4690
.text:0000000000004294                 xor     edx, edx
.text:0000000000004296                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000429C                 jnz     loc_4690
.text:00000000000042A2
.text:00000000000042A2 loc_42A2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000042A2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000042A2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000042A7                 add     r15, 3
.text:00000000000042AB                 xor     eax, eax
.text:00000000000042AD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000042B2                 xor     r8d, r8d
.text:00000000000042B5                 mov     r13, rdx
.text:00000000000042B8                 mov     ebx, 27h ; '''
.text:00000000000042BD                 jmp     loc_3CD9
.text:00000000000042BD ; ---------------------------------------------------------------------------
.text:00000000000042C2                 align 8
.text:00000000000042C8
.text:00000000000042C8 loc_42C8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000042C8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000042CD                 jz      short loc_42F0
.text:00000000000042CF                 lea     rcx, [rbp+2]
.text:00000000000042D3                 cmp     rcx, r11
.text:00000000000042D6                 jnb     short loc_42F0
.text:00000000000042D8                 mov     rax, [rsp+0E8h+s]
.text:00000000000042DD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000042E2                 jz      loc_4A72
.text:00000000000042E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000042F0
.text:00000000000042F0 loc_42F0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000042F0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000042F0                 xor     edx, edx
.text:00000000000042F2                 xor     r12d, r12d
.text:00000000000042F5                 xor     eax, eax
.text:00000000000042F7                 mov     ebx, 3Fh ; '?'
.text:00000000000042FC                 jmp     loc_3CA8
.text:00000000000042FC ; ---------------------------------------------------------------------------
.text:0000000000004301                 align 8
.text:0000000000004308
.text:0000000000004308 loc_4308:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004308                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000430D                 jnz     loc_4B30
.text:0000000000004313                 xor     r12d, r12d
.text:0000000000004316                 xor     eax, eax
.text:0000000000004318                 mov     ebx, 3Fh ; '?'
.text:000000000000431D                 jmp     loc_3CD9
.text:000000000000431D ; ---------------------------------------------------------------------------
.text:0000000000004322                 align 8
.text:0000000000004328
.text:0000000000004328 loc_4328:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004328                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004330                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004334                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004340                 mov     [rsp+0E8h+ps], rax
.text:0000000000004345                 jnz     short loc_4374
.text:0000000000004347                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000434C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004351                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004356                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000435B                 call    _strlen
.text:0000000000004360                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004366                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000436C                 mov     r11, rax
.text:000000000000436F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004374
.text:0000000000004374 loc_4374:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004374                 lea     rax, [rsp+0E8h+wc]
.text:000000000000437C                 xor     ecx, ecx
.text:000000000000437E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004382                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004387                 mov     rbx, rcx
.text:000000000000438A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004392                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004397                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000439C                 mov     [rsp+0E8h+var_68], r15
.text:00000000000043A4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000043A9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000043AE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000043B3
.text:00000000000043B3 loc_43B3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000043B3                 mov     rax, [rsp+0E8h+s]
.text:00000000000043B8                 lea     r14, [rbp+rbx+0]
.text:00000000000043BD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000043C2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000043C7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000043CC                 lea     r13, [rax+r14]
.text:00000000000043D0                 sub     rdx, r14
.text:00000000000043D3                 mov     rsi, r13
.text:00000000000043D6                 call    rpl_mbrtowc
.text:00000000000043DB                 test    rax, rax
.text:00000000000043DE                 mov     r15, rax
.text:00000000000043E1                 jz      short loc_4431
.text:00000000000043E3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000043E7                 jz      loc_4A05
.text:00000000000043ED                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000043F1                 jz      loc_4991
.text:00000000000043F7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000043FC                 setz    al
.text:00000000000043FF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004403                 jnz     loc_45A0
.text:0000000000004409
.text:0000000000004409 loc_4409:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004409                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004409                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004410                 call    _iswprint
.text:0000000000004415                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000441A                 test    eax, eax
.text:000000000000441C                 mov     eax, 0
.text:0000000000004421                 cmovz   r12d, eax
.text:0000000000004425                 add     rbx, r15
.text:0000000000004428                 call    _mbsinit
.text:000000000000442D                 test    eax, eax
.text:000000000000442F                 jz      short loc_43B3
.text:0000000000004431
.text:0000000000004431 loc_4431:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004431                 mov     edx, r12d
.text:0000000000004434                 mov     rdi, rbx
.text:0000000000004437                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000443D                 xor     edx, 1
.text:0000000000004440                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004445                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000444B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000444F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004457                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000445C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004461                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004466
.text:0000000000004466 loc_4466:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004466                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004466                 cmp     rdi, 1
.text:000000000000446A                 jbe     loc_4A6B
.text:0000000000004470
.text:0000000000004470 loc_4470:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004470                 mov     rcx, rdi
.text:0000000000004473                 xor     esi, esi
.text:0000000000004475                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000447B                 add     rcx, rbp
.text:000000000000447E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004483                 jmp     loc_453E
.text:0000000000004483 ; ---------------------------------------------------------------------------
.text:0000000000004488                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004490                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004495                 setz    al
.text:0000000000004498                 test    r9b, r9b
.text:000000000000449B                 jnz     loc_4950
.text:00000000000044A1                 mov     esi, r8d
.text:00000000000044A4                 xor     esi, 1
.text:00000000000044A7                 and     al, sil
.text:00000000000044AA                 jz      short loc_44DB
.text:00000000000044AC                 cmp     r13, r15
.text:00000000000044AF                 jbe     short loc_44B6
.text:00000000000044B1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044B6
.text:00000000000044B6 loc_44B6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000044B6                 lea     rsi, [r15+1]
.text:00000000000044BA                 cmp     r13, rsi
.text:00000000000044BD                 jbe     short loc_44C5
.text:00000000000044BF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000044C5
.text:00000000000044C5 loc_44C5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000044C5                 lea     rsi, [r15+2]
.text:00000000000044C9                 cmp     r13, rsi
.text:00000000000044CC                 jbe     short loc_44D4
.text:00000000000044CE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000044D4
.text:00000000000044D4 loc_44D4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000044D4                 add     r15, 3
.text:00000000000044D8                 mov     r8d, eax
.text:00000000000044DB
.text:00000000000044DB loc_44DB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000044DB                 cmp     r13, r15
.text:00000000000044DE                 jbe     short loc_44E5
.text:00000000000044E0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000044E5
.text:00000000000044E5 loc_44E5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000044E5                 lea     rax, [r15+1]
.text:00000000000044E9                 cmp     r13, rax
.text:00000000000044EC                 jbe     short loc_44FB
.text:00000000000044EE                 mov     eax, ebx
.text:00000000000044F0                 shr     al, 6
.text:00000000000044F3                 add     eax, 30h ; '0'
.text:00000000000044F6                 mov     [r14+r15+1], al
.text:00000000000044FB
.text:00000000000044FB loc_44FB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000044FB                 lea     rax, [r15+2]
.text:00000000000044FF                 cmp     r13, rax
.text:0000000000004502                 jbe     short loc_4514
.text:0000000000004504                 mov     eax, ebx
.text:0000000000004506                 shr     al, 3
.text:0000000000004509                 and     eax, 7
.text:000000000000450C                 add     eax, 30h ; '0'
.text:000000000000450F                 mov     [r14+r15+2], al
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004514                 and     ebx, 7
.text:0000000000004517                 add     rbp, 1
.text:000000000000451B                 add     r15, 3
.text:000000000000451F                 add     ebx, 30h ; '0'
.text:0000000000004522                 cmp     rbp, rcx
.text:0000000000004525                 jnb     loc_3D10
.text:000000000000452B                 mov     esi, edx
.text:000000000000452D
.text:000000000000452D loc_452D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000452D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000452D                 cmp     r13, r15
.text:0000000000004530                 jbe     short loc_4536
.text:0000000000004532                 mov     [r14+r15], bl
.text:0000000000004536
.text:0000000000004536 loc_4536:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004536                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000453A                 add     r15, 1
.text:000000000000453E
.text:000000000000453E loc_453E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000453E                 test    dl, dl
.text:0000000000004540                 jnz     loc_4490
.text:0000000000004546                 mov     eax, esi
.text:0000000000004548                 xor     eax, 1
.text:000000000000454B                 and     eax, r8d
.text:000000000000454E                 test    r10b, r10b
.text:0000000000004551                 jz      short loc_4561
.text:0000000000004553                 cmp     r13, r15
.text:0000000000004556                 jbe     short loc_455D
.text:0000000000004558                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000455D
.text:000000000000455D loc_455D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000455D                 add     r15, 1
.text:0000000000004561
.text:0000000000004561 loc_4561:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004561                 add     rbp, 1
.text:0000000000004565                 cmp     rbp, rcx
.text:0000000000004568                 jnb     loc_3CEC
.text:000000000000456E                 test    al, al
.text:0000000000004570                 jz      loc_496E
.text:0000000000004576                 cmp     r13, r15
.text:0000000000004579                 jbe     short loc_4580
.text:000000000000457B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004580                 lea     rax, [r15+1]
.text:0000000000004584                 cmp     r13, rax
.text:0000000000004587                 jbe     short loc_458F
.text:0000000000004589                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000458F
.text:000000000000458F loc_458F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000458F                 add     r15, 2
.text:0000000000004593                 xor     r10d, r10d
.text:0000000000004596                 xor     r8d, r8d
.text:0000000000004599                 jmp     short loc_452D
.text:0000000000004599 ; ---------------------------------------------------------------------------
.text:000000000000459B                 align 20h
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000045A0                 cmp     r15, 1
.text:00000000000045A4                 jz      loc_4409
.text:00000000000045AA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000045AF                 lea     rcx, [rdi+r15]
.text:00000000000045B3                 lea     rdx, [rdi+r14+1]
.text:00000000000045B8                 lea     r8, [rcx+r14]
.text:00000000000045BC                 jmp     short loc_45CD
.text:00000000000045BC ; ---------------------------------------------------------------------------
.text:00000000000045BE                 align 20h
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000045C0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000045C0                 add     rdx, 1
.text:00000000000045C4                 cmp     r8, rdx
.text:00000000000045C7                 jz      loc_4409
.text:00000000000045CD
.text:00000000000045CD loc_45CD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000045CD                 movzx   ecx, byte ptr [rdx]
.text:00000000000045D0                 sub     ecx, 5Bh ; '['
.text:00000000000045D3                 cmp     cl, 21h ; '!'
.text:00000000000045D6                 ja      short loc_45C0
.text:00000000000045D8                 mov     esi, 1
.text:00000000000045DD                 shl     rsi, cl
.text:00000000000045E0                 mov     rcx, rsi
.text:00000000000045E3                 mov     rsi, 20000002Bh
.text:00000000000045ED                 test    rcx, rsi
.text:00000000000045F0                 jz      short loc_45C0
.text:00000000000045F2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000045F7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000045FC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004601                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004609
.text:0000000000004609 loc_4609:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004609                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004609                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000460E                 jz      short loc_4620
.text:0000000000004610                 test    al, al
.text:0000000000004612                 mov     eax, 4
.text:0000000000004617                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000461C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004620                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004620                 sub     rsp, 8
.text:0000000000004624                 mov     rcx, rbp
.text:0000000000004627                 mov     rsi, r13
.text:000000000000462A                 push    [rsp+0F0h+var_88]
.text:000000000000462E                 push    [rsp+0F8h+var_80]
.text:0000000000004632                 mov     rdi, r14
.text:0000000000004635                 push    0
.text:0000000000004637                 mov     r9d, [rsp+108h+var_70]
.text:000000000000463F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004644                 mov     rdx, [rsp+108h+s]
.text:0000000000004649                 and     r9d, 0FFFFFFFDh
.text:000000000000464D                 call    quotearg_buffer_restyled
.text:0000000000004652                 add     rsp, 20h
.text:0000000000004656                 mov     r15, rax
.text:0000000000004659
.text:0000000000004659 loc_4659:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004659                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004659                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004661                 xor     rbx, fs:28h
.text:000000000000466A                 mov     rax, r15
.text:000000000000466D                 jnz     loc_4C73
.text:0000000000004673                 add     rsp, 0B8h
.text:000000000000467A                 pop     rbx
.text:000000000000467B                 pop     rbp
.text:000000000000467C                 pop     r12
.text:000000000000467E                 pop     r13
.text:0000000000004680                 pop     r14
.text:0000000000004682                 pop     r15
.text:0000000000004684                 retn
.text:0000000000004684 ; ---------------------------------------------------------------------------
.text:0000000000004685                 align 8
.text:0000000000004688
.text:0000000000004688 loc_4688:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004688                 mov     rbp, r11
.text:000000000000468B                 jmp     loc_4609
.text:0000000000004690 ; ---------------------------------------------------------------------------
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004690                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004690                 cmp     r13, r15
.text:0000000000004693                 jbe     short loc_469A
.text:0000000000004695                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000469A
.text:000000000000469A loc_469A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000469A                 lea     rax, [r15+1]
.text:000000000000469E                 cmp     r13, rax
.text:00000000000046A1                 jbe     short loc_46A9
.text:00000000000046A3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000046A9
.text:00000000000046A9 loc_46A9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000046A9                 lea     rax, [r15+2]
.text:00000000000046AD                 cmp     r13, rax
.text:00000000000046B0                 jbe     loc_4CA2
.text:00000000000046B6                 mov     rdx, r13
.text:00000000000046B9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000046BF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000046C4                 jmp     loc_42A2
.text:00000000000046C9 ; ---------------------------------------------------------------------------
.text:00000000000046C9
.text:00000000000046C9 loc_46C9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000046C9                 mov     eax, r12d
.text:00000000000046CC                 mov     ebx, 30h ; '0'
.text:00000000000046D1                 xor     r12d, r12d
.text:00000000000046D4                 jmp     loc_3CD9
.text:00000000000046D9 ; ---------------------------------------------------------------------------
.text:00000000000046D9
.text:00000000000046D9 loc_46D9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000046D9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000046DF                 jmp     loc_40A9
.text:00000000000046E4 ; ---------------------------------------------------------------------------
.text:00000000000046E4
.text:00000000000046E4 loc_46E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000046E4                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:00000000000046E4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000046E6                 jnz     loc_3B13        ; jumptable 00000000000121F1 case 1
.text:00000000000046EC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000046F1
.text:00000000000046F1 loc_46F1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000046F1                 test    r13, r13
.text:00000000000046F4                 jnz     loc_4C8A
.text:00000000000046FA                 lea     rax, asc_70FD   ; "'"
.text:0000000000004701                 mov     [rsp+0E8h+var_98], 0
.text:000000000000470A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000470F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004714                 xor     r12d, r12d
.text:0000000000004717                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000471C                 mov     [rsp+0E8h+n], 1
.text:0000000000004725                 mov     [rsp+0E8h+s2], rax
.text:000000000000472A                 mov     r15d, 1
.text:0000000000004730                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004738                 jmp     loc_3B53
.text:0000000000004738 ; ---------------------------------------------------------------------------
.text:000000000000473D                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004740                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:0000000000004740                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004742                 jnz     loc_4B3D
.text:0000000000004748                 test    r13, r13
.text:000000000000474B                 jz      loc_4976
.text:0000000000004751                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004755                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000475A                 xor     r12d, r12d
.text:000000000000475D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004762                 mov     [rsp+0E8h+var_98], 0
.text:000000000000476B
.text:000000000000476B loc_476B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000476B                 lea     rax, unk_70FB
.text:0000000000004772                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004777                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000477C                 mov     [rsp+0E8h+n], 1
.text:0000000000004785                 mov     r15d, 1
.text:000000000000478B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004790                 jmp     loc_3B53
.text:0000000000004795 ; ---------------------------------------------------------------------------
.text:0000000000004795
.text:0000000000004795 loc_4795:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004795                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:0000000000004795                 lea     rax, unk_70FB   ; jumptable 00000000000121F1 case 6
.text:000000000000479C                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000047A1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047A6                 xor     r12d, r12d
.text:00000000000047A9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047B2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000047B7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047BC                 mov     [rsp+0E8h+n], 1
.text:00000000000047C5                 xor     r15d, r15d
.text:00000000000047C8                 mov     [rsp+0E8h+s2], rax
.text:00000000000047CD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000047D5                 jmp     loc_3B53
.text:00000000000047DA ; ---------------------------------------------------------------------------
.text:00000000000047DA
.text:00000000000047DA loc_47DA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000047DA                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:00000000000047DA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000047DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047E4                 xor     r12d, r12d
.text:00000000000047E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047F0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000047F5                 xor     r15d, r15d
.text:00000000000047F8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047FD                 mov     [rsp+0E8h+n], 0
.text:0000000000004806                 mov     [rsp+0E8h+s2], 0
.text:000000000000480F                 jmp     loc_3B53
.text:0000000000004814 ; ---------------------------------------------------------------------------
.text:0000000000004814
.text:0000000000004814 loc_4814:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004814                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:0000000000004814                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004819                 jz      short loc_4871
.text:000000000000481B                 lea     rsi, asc_70FF   ; "`"
.text:0000000000004822                 xor     edi, edi        ; domainname
.text:0000000000004824                 mov     edx, 5          ; category
.text:0000000000004829                 call    _dcgettext
.text:000000000000482E                 mov     rcx, rax
.text:0000000000004831                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004836                 lea     rax, asc_70FF   ; "`"
.text:000000000000483D                 cmp     rcx, rax
.text:0000000000004840                 jz      loc_4BDE
.text:0000000000004846
.text:0000000000004846 loc_4846:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004846                 lea     rsi, asc_70FD   ; "'"
.text:000000000000484D                 xor     edi, edi        ; domainname
.text:000000000000484F                 mov     edx, 5          ; category
.text:0000000000004854                 call    _dcgettext
.text:0000000000004859                 mov     rcx, rax
.text:000000000000485C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004861                 lea     rax, asc_70FD   ; "'"
.text:0000000000004868                 cmp     rcx, rax
.text:000000000000486B                 jz      loc_4BF4
.text:0000000000004871
.text:0000000000004871 loc_4871:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004871                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004871                 xor     r15d, r15d
.text:0000000000004874                 test    ebx, ebx
.text:0000000000004876                 jz      loc_4A3D
.text:000000000000487C
.text:000000000000487C loc_487C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000487C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000487C                 test    ebx, ebx
.text:000000000000487E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004883                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004888                 xor     r12d, r12d
.text:000000000000488B                 mov     rdi, rbx        ; s
.text:000000000000488E                 call    _strlen
.text:0000000000004893                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004898                 mov     [rsp+0E8h+n], rax
.text:000000000000489D                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048A2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048A7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048B0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000048B5                 jmp     loc_3B53
.text:00000000000048BA ; ---------------------------------------------------------------------------
.text:00000000000048BA
.text:00000000000048BA loc_48BA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000048BA                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:00000000000048BA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000048BF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048C4                 xor     r12d, r12d
.text:00000000000048C7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048D0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000048D5                 xor     r15d, r15d
.text:00000000000048D8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000048DD                 mov     [rsp+0E8h+n], 0
.text:00000000000048E6                 mov     [rsp+0E8h+s2], 0
.text:00000000000048EF                 jmp     loc_3B53
.text:00000000000048F4 ; ---------------------------------------------------------------------------
.text:00000000000048F4
.text:00000000000048F4 loc_48F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000048F4                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:00000000000048F4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000048F9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048FE                 xor     r12d, r12d
.text:0000000000004901                 mov     [rsp+0E8h+var_98], 0
.text:000000000000490A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000490F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004914                 jmp     loc_3B33
.text:0000000000004919 ; ---------------------------------------------------------------------------
.text:0000000000004919
.text:0000000000004919 loc_4919:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004919                 cmp     r13, r15
.text:000000000000491C                 jbe     short loc_4923
.text:000000000000491E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004923
.text:0000000000004923 loc_4923:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004923                 lea     rax, [rcx+2]
.text:0000000000004927                 cmp     r13, rax
.text:000000000000492A                 jbe     short loc_4932
.text:000000000000492C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004932
.text:0000000000004932 loc_4932:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004932                 mov     eax, r12d
.text:0000000000004935                 lea     r15, [rcx+3]
.text:0000000000004939                 xor     r12d, r12d
.text:000000000000493C                 mov     ebx, 30h ; '0'
.text:0000000000004941                 jmp     loc_3CA8
.text:0000000000004941 ; ---------------------------------------------------------------------------
.text:0000000000004946                 align 10h
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004950                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004955                 mov     rbp, r11
.text:0000000000004958                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000495C                 jmp     loc_4609
.text:0000000000004961 ; ---------------------------------------------------------------------------
.text:0000000000004961
.text:0000000000004961 loc_4961:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004961                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004966                 xor     r12d, r12d
.text:0000000000004969                 jmp     loc_4470
.text:000000000000496E ; ---------------------------------------------------------------------------
.text:000000000000496E
.text:000000000000496E loc_496E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000496E                 xor     r10d, r10d
.text:0000000000004971                 jmp     loc_452D
.text:0000000000004976 ; ---------------------------------------------------------------------------
.text:0000000000004976
.text:0000000000004976 loc_4976:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004976                 mov     [rsp+0E8h+var_98], 0
.text:000000000000497F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004984                 xor     r12d, r12d
.text:0000000000004987                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000498C                 jmp     loc_476B
.text:0000000000004991 ; ---------------------------------------------------------------------------
.text:0000000000004991
.text:0000000000004991 loc_4991:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004991                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004996                 mov     rsi, r14
.text:0000000000004999                 mov     rcx, r13
.text:000000000000499C                 mov     rax, rbx
.text:000000000000499F                 mov     rdi, rbx
.text:00000000000049A2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000049A8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000049AD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000049B5                 cmp     rsi, r11
.text:00000000000049B8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000049BE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000049C6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000049CB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000049D0                 jnb     short loc_49F8
.text:00000000000049D2                 cmp     byte ptr [rcx], 0
.text:00000000000049D5                 jnz     short loc_49E7
.text:00000000000049D7                 jmp     short loc_49F8
.text:00000000000049D7 ; ---------------------------------------------------------------------------
.text:00000000000049D9                 align 20h
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000049E0                 cmp     byte ptr [r9+rax], 0
.text:00000000000049E5                 jz      short loc_49F5
.text:00000000000049E7
.text:00000000000049E7 loc_49E7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000049E7                 add     rax, 1
.text:00000000000049EB                 lea     rdx, [rbp+rax+0]
.text:00000000000049F0                 cmp     r11, rdx
.text:00000000000049F3                 ja      short loc_49E0
.text:00000000000049F5
.text:00000000000049F5 loc_49F5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000049F5                 mov     rdi, rax
.text:00000000000049F8
.text:00000000000049F8 loc_49F8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000049F8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000049F8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000049FD                 xor     r12d, r12d
.text:0000000000004A00                 jmp     loc_4466
.text:0000000000004A05 ; ---------------------------------------------------------------------------
.text:0000000000004A05
.text:0000000000004A05 loc_4A05:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004A05                 mov     rdi, rbx
.text:0000000000004A08                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004A0E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004A13                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004A19                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004A21                 xor     r12d, r12d
.text:0000000000004A24                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004A29                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004A2E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004A33                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004A38                 jmp     loc_4466
.text:0000000000004A3D ; ---------------------------------------------------------------------------
.text:0000000000004A3D
.text:0000000000004A3D loc_4A3D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000004A3D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004A42                 movzx   eax, byte ptr [rdx]
.text:0000000000004A45                 test    al, al
.text:0000000000004A47                 jz      loc_487C
.text:0000000000004A4D                 nop     dword ptr [rax]
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004A50                 cmp     r13, r15
.text:0000000000004A53                 jbe     short loc_4A59
.text:0000000000004A55                 mov     [r14+r15], al
.text:0000000000004A59
.text:0000000000004A59 loc_4A59:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004A59                 add     r15, 1
.text:0000000000004A5D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004A62                 test    al, al
.text:0000000000004A64                 jnz     short loc_4A50
.text:0000000000004A66                 jmp     loc_487C
.text:0000000000004A6B ; ---------------------------------------------------------------------------
.text:0000000000004A6B
.text:0000000000004A6B loc_4A6B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000004A6B                 mov     eax, edx
.text:0000000000004A6D                 jmp     loc_3FC7
.text:0000000000004A72 ; ---------------------------------------------------------------------------
.text:0000000000004A72
.text:0000000000004A72 loc_4A72:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004A72                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004A76                 cmp     bl, 3Eh ; '>'
.text:0000000000004A79                 ja      loc_42F0
.text:0000000000004A7F                 mov     rax, 7000A38200000000h
.text:0000000000004A89                 bt      rax, rbx
.text:0000000000004A8D                 jnb     loc_42F0
.text:0000000000004A93                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004A98                 jnz     loc_4C82
.text:0000000000004A9E                 cmp     r13, r15
.text:0000000000004AA1                 jbe     short loc_4AA8
.text:0000000000004AA3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004AA8
.text:0000000000004AA8 loc_4AA8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004AA8                 lea     rax, [r15+1]
.text:0000000000004AAC                 cmp     r13, rax
.text:0000000000004AAF                 jbe     short loc_4AB7
.text:0000000000004AB1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004AB7
.text:0000000000004AB7 loc_4AB7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004AB7                 lea     rax, [r15+2]
.text:0000000000004ABB                 cmp     r13, rax
.text:0000000000004ABE                 jbe     short loc_4AC6
.text:0000000000004AC0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004AC6
.text:0000000000004AC6 loc_4AC6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004AC6                 lea     rax, [r15+3]
.text:0000000000004ACA                 cmp     r13, rax
.text:0000000000004ACD                 jbe     short loc_4AD5
.text:0000000000004ACF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004AD5
.text:0000000000004AD5 loc_4AD5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004AD5                 add     r15, 4
.text:0000000000004AD9                 xor     edx, edx
.text:0000000000004ADB                 xor     r12d, r12d
.text:0000000000004ADE                 xor     eax, eax
.text:0000000000004AE0                 mov     rbp, rcx
.text:0000000000004AE3                 jmp     loc_3CA8
.text:0000000000004AE8 ; ---------------------------------------------------------------------------
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004AE8                                         ; DATA XREF: .rodata:jpt_3B11↓o
.text:0000000000004AE8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000004AEA                 jz      loc_4C78
.text:0000000000004AF0                 lea     rax, asc_70FD   ; "'"
.text:0000000000004AF7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004AFC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B01                 xor     r12d, r12d
.text:0000000000004B04                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B0D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004B12                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004B17                 mov     [rsp+0E8h+n], 1
.text:0000000000004B20                 xor     r15d, r15d
.text:0000000000004B23                 mov     [rsp+0E8h+s2], rax
.text:0000000000004B28                 jmp     loc_3B53
.text:0000000000004B28 ; ---------------------------------------------------------------------------
.text:0000000000004B2D                 align 10h
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004B30                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004B30                 mov     rbp, r11
.text:0000000000004B33                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004B38                 jmp     loc_4609
.text:0000000000004B3D ; ---------------------------------------------------------------------------
.text:0000000000004B3D
.text:0000000000004B3D loc_4B3D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000004B3D                 lea     rax, unk_70FB
.text:0000000000004B44                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B49                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B4E                 xor     r12d, r12d
.text:0000000000004B51                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B5A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004B5F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004B64                 mov     [rsp+0E8h+n], 1
.text:0000000000004B6D                 xor     r15d, r15d
.text:0000000000004B70                 mov     [rsp+0E8h+s2], rax
.text:0000000000004B75                 jmp     loc_3B53
.text:0000000000004B7A ; ---------------------------------------------------------------------------
.text:0000000000004B7A
.text:0000000000004B7A loc_4B7A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000004B7A                 mov     eax, edx
.text:0000000000004B7C
.text:0000000000004B7C loc_4B7C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000004B7C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000004B7C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004B81                 test    rbx, rbx
.text:0000000000004B84                 jz      short loc_4BB2
.text:0000000000004B86                 test    al, al
.text:0000000000004B88                 jz      short loc_4BB2
.text:0000000000004B8A                 movzx   ecx, byte ptr [rbx]
.text:0000000000004B8D                 mov     rax, rbx
.text:0000000000004B90                 test    cl, cl
.text:0000000000004B92                 jz      short loc_4BB2
.text:0000000000004B94                 mov     rdx, r15
.text:0000000000004B97                 sub     rax, r15
.text:0000000000004B9A
.text:0000000000004B9A loc_4B9A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000004B9A                 cmp     r13, rdx
.text:0000000000004B9D                 jbe     short loc_4BA3
.text:0000000000004B9F                 mov     [r14+rdx], cl
.text:0000000000004BA3
.text:0000000000004BA3 loc_4BA3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004BA3                 add     rdx, 1
.text:0000000000004BA7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000004BAB                 test    cl, cl
.text:0000000000004BAD                 jnz     short loc_4B9A
.text:0000000000004BAF                 mov     r15, rdx
.text:0000000000004BB2
.text:0000000000004BB2 loc_4BB2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004BB2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004BB2                 cmp     r13, r15
.text:0000000000004BB5                 jbe     loc_4659
.text:0000000000004BBB                 mov     byte ptr [r14+r15], 0
.text:0000000000004BC0                 jmp     loc_4659
.text:0000000000004BC5 ; ---------------------------------------------------------------------------
.text:0000000000004BC5
.text:0000000000004BC5 loc_4BC5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004BC5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004BCA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004BCF                 mov     rbp, r11
.text:0000000000004BD2                 setz    al
.text:0000000000004BD5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004BD9                 jmp     loc_4609
.text:0000000000004BDE ; ---------------------------------------------------------------------------
.text:0000000000004BDE
.text:0000000000004BDE loc_4BDE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000004BDE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004BE2                 mov     rdi, rcx
.text:0000000000004BE5                 call    gettext_quote
.text:0000000000004BEA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004BEF                 jmp     loc_4846
.text:0000000000004BF4 ; ---------------------------------------------------------------------------
.text:0000000000004BF4
.text:0000000000004BF4 loc_4BF4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004BF4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004BF8                 mov     rdi, rcx
.text:0000000000004BFB                 call    gettext_quote
.text:0000000000004C00                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004C05                 jmp     loc_4871
.text:0000000000004C0A ; ---------------------------------------------------------------------------
.text:0000000000004C0A
.text:0000000000004C0A loc_4C0A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004C0A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004C0F                 mov     rbp, r11
.text:0000000000004C12                 mov     eax, edx
.text:0000000000004C14                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004C18                 jmp     loc_4609
.text:0000000000004C1D ; ---------------------------------------------------------------------------
.text:0000000000004C1D
.text:0000000000004C1D loc_4C1D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004C1D                 sub     rsp, 8
.text:0000000000004C21                 mov     r8d, 5
.text:0000000000004C27                 mov     rcx, r11
.text:0000000000004C2A                 push    [rsp+0F0h+var_88]
.text:0000000000004C2E                 push    [rsp+0F8h+var_80]
.text:0000000000004C32                 mov     rdi, r14
.text:0000000000004C35                 push    [rsp+100h+var_C8]
.text:0000000000004C39                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004C41                 mov     rdx, [rsp+108h+s]
.text:0000000000004C46                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004C4B                 call    quotearg_buffer_restyled
.text:0000000000004C50                 add     rsp, 20h
.text:0000000000004C54                 mov     r15, rax
.text:0000000000004C57                 jmp     loc_4659
.text:0000000000004C5C ; ---------------------------------------------------------------------------
.text:0000000000004C5C
.text:0000000000004C5C loc_4C5C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004C5C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004C61                 jmp     loc_4B7C
.text:0000000000004C66 ; ---------------------------------------------------------------------------
.text:0000000000004C66
.text:0000000000004C66 loc_4C66:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004C66                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004C6E                 jmp     loc_4609
.text:0000000000004C73 ; ---------------------------------------------------------------------------
.text:0000000000004C73
.text:0000000000004C73 loc_4C73:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004C73                 call    ___stack_chk_fail
.text:0000000000004C78 ; ---------------------------------------------------------------------------
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004C78                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004C7D                 jmp     loc_46F1
.text:0000000000004C82 ; ---------------------------------------------------------------------------
.text:0000000000004C82
.text:0000000000004C82 loc_4C82:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004C82                 mov     rbp, r11
.text:0000000000004C85                 jmp     loc_4620
.text:0000000000004C8A ; ---------------------------------------------------------------------------
.text:0000000000004C8A
.text:0000000000004C8A loc_4C8A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004C8A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004C8F                 xor     eax, eax
.text:0000000000004C91                 xor     r12d, r12d
.text:0000000000004C94                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004C9D                 jmp     loc_4244
.text:0000000000004CA2 ; ---------------------------------------------------------------------------
.text:0000000000004CA2
.text:0000000000004CA2 loc_4CA2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004CA2                 mov     rdx, r13
.text:0000000000004CA5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004CAA                 jmp     loc_42A2
.text:0000000000004CAF ; ---------------------------------------------------------------------------
.text:0000000000004CAF
.text:0000000000004CAF def_3B11:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004CAF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004CAF ; } // starts at 3A80
.text:0000000000004CAF quotearg_buffer_restyled endp
.text:0000000000004CAF
.text:0000000000004CAF ; ---------------------------------------------------------------------------
.text:0000000000004CB4                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC0
.text:0000000000004CC0
.text:0000000000004CC0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004CC0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004CC0
.text:0000000000004CC0 var_50          = qword ptr -50h
.text:0000000000004CC0 var_48          = qword ptr -48h
.text:0000000000004CC0 var_40          = dword ptr -40h
.text:0000000000004CC0 var_3C          = dword ptr -3Ch
.text:0000000000004CC0
.text:0000000000004CC0 ; __unwind {
.text:0000000000004CC0                 push    r15
.text:0000000000004CC2                 push    r14
.text:0000000000004CC4                 movsxd  r15, edi
.text:0000000000004CC7                 push    r13
.text:0000000000004CC9                 push    r12
.text:0000000000004CCB                 mov     r14, rdx
.text:0000000000004CCE                 push    rbp
.text:0000000000004CCF                 push    rbx
.text:0000000000004CD0                 mov     rbp, rcx
.text:0000000000004CD3                 sub     rsp, 28h
.text:0000000000004CD7                 mov     [rsp+58h+var_50], rsi
.text:0000000000004CDC                 call    ___errno_location
.text:0000000000004CE1                 mov     r13, rax
.text:0000000000004CE4                 mov     eax, [rax]
.text:0000000000004CE6                 test    r15d, r15d
.text:0000000000004CE9                 mov     rbx, cs:slotvec
.text:0000000000004CF0                 mov     [rsp+58h+var_40], eax
.text:0000000000004CF4                 js      loc_4E61
.text:0000000000004CFA                 cmp     cs:nslots, r15d
.text:0000000000004D01                 jg      short loc_4D65
.text:0000000000004D03                 cmp     r15d, 7FFFFFFFh
.text:0000000000004D0A                 jz      loc_4E66
.text:0000000000004D10                 lea     r12d, [r15+1]
.text:0000000000004D14                 lea     rax, slotvec0
.text:0000000000004D1B                 movsxd  rsi, r12d
.text:0000000000004D1E                 shl     rsi, 4
.text:0000000000004D22                 cmp     rbx, rax
.text:0000000000004D25                 jz      loc_4E40
.text:0000000000004D2B                 mov     rdi, rbx
.text:0000000000004D2E                 call    xrealloc
.text:0000000000004D33                 mov     rbx, rax
.text:0000000000004D36                 mov     cs:slotvec, rax
.text:0000000000004D3D
.text:0000000000004D3D loc_4D3D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004D3D                 movsxd  rdi, cs:nslots
.text:0000000000004D44                 mov     edx, r12d
.text:0000000000004D47                 xor     esi, esi        ; c
.text:0000000000004D49                 sub     edx, edi
.text:0000000000004D4B                 shl     rdi, 4
.text:0000000000004D4F                 movsxd  rdx, edx
.text:0000000000004D52                 add     rdi, rbx        ; s
.text:0000000000004D55                 shl     rdx, 4          ; n
.text:0000000000004D59                 call    _memset
.text:0000000000004D5E                 mov     cs:nslots, r12d
.text:0000000000004D65
.text:0000000000004D65 loc_4D65:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004D65                 mov     eax, [rbp+4]
.text:0000000000004D68                 shl     r15, 4
.text:0000000000004D6C                 sub     rsp, 8
.text:0000000000004D70                 add     rbx, r15
.text:0000000000004D73                 lea     r15, [rbp+8]
.text:0000000000004D77                 mov     r8d, [rbp+0]
.text:0000000000004D7B                 mov     r11, [rbx]
.text:0000000000004D7E                 mov     r12, [rbx+8]
.text:0000000000004D82                 mov     rcx, r14
.text:0000000000004D85                 or      eax, 1
.text:0000000000004D88                 mov     [rsp+60h+var_3C], eax
.text:0000000000004D8C                 push    qword ptr [rbp+30h]
.text:0000000000004D8F                 mov     r9d, eax
.text:0000000000004D92                 push    qword ptr [rbp+28h]
.text:0000000000004D95                 push    r15
.text:0000000000004D97                 mov     rsi, r11
.text:0000000000004D9A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004D9F                 mov     rdi, r12
.text:0000000000004DA2                 mov     [rsp+78h+var_48], r11
.text:0000000000004DA7                 call    quotearg_buffer_restyled
.text:0000000000004DAC                 add     rsp, 20h
.text:0000000000004DB0                 mov     r11, [rsp+58h+var_48]
.text:0000000000004DB5                 cmp     r11, rax
.text:0000000000004DB8                 ja      short loc_4E21
.text:0000000000004DBA                 lea     rsi, [rax+1]
.text:0000000000004DBE                 lea     rax, slot0
.text:0000000000004DC5                 cmp     r12, rax
.text:0000000000004DC8                 mov     [rbx], rsi
.text:0000000000004DCB                 jz      short loc_4DDF
.text:0000000000004DCD                 mov     rdi, r12        ; ptr
.text:0000000000004DD0                 mov     [rsp+58h+var_48], rsi
.text:0000000000004DD5                 call    _free
.text:0000000000004DDA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004DDF
.text:0000000000004DDF loc_4DDF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004DDF                 mov     rdi, rsi
.text:0000000000004DE2                 mov     [rsp+58h+var_48], rsi
.text:0000000000004DE7                 call    xmalloc
.text:0000000000004DEC                 sub     rsp, 8
.text:0000000000004DF0                 mov     [rbx+8], rax
.text:0000000000004DF4                 mov     r8d, [rbp+0]
.text:0000000000004DF8                 push    qword ptr [rbp+30h]
.text:0000000000004DFB                 push    qword ptr [rbp+28h]
.text:0000000000004DFE                 mov     rcx, r14
.text:0000000000004E01                 push    r15
.text:0000000000004E03                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004E08                 mov     rdi, rax
.text:0000000000004E0B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004E10                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004E15                 mov     r12, rax
.text:0000000000004E18                 call    quotearg_buffer_restyled
.text:0000000000004E1D                 add     rsp, 20h
.text:0000000000004E21
.text:0000000000004E21 loc_4E21:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004E21                 mov     eax, [rsp+58h+var_40]
.text:0000000000004E25                 mov     [r13+0], eax
.text:0000000000004E29                 add     rsp, 28h
.text:0000000000004E2D                 mov     rax, r12
.text:0000000000004E30                 pop     rbx
.text:0000000000004E31                 pop     rbp
.text:0000000000004E32                 pop     r12
.text:0000000000004E34                 pop     r13
.text:0000000000004E36                 pop     r14
.text:0000000000004E38                 pop     r15
.text:0000000000004E3A                 retn
.text:0000000000004E3A ; ---------------------------------------------------------------------------
.text:0000000000004E3B                 align 20h
.text:0000000000004E40
.text:0000000000004E40 loc_4E40:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004E40                 xor     edi, edi
.text:0000000000004E42                 call    xrealloc
.text:0000000000004E47                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004E4F                 mov     rbx, rax
.text:0000000000004E52                 mov     cs:slotvec, rax
.text:0000000000004E59                 movups  xmmword ptr [rax], xmm0
.text:0000000000004E5C                 jmp     loc_4D3D
.text:0000000000004E61 ; ---------------------------------------------------------------------------
.text:0000000000004E61
.text:0000000000004E61 loc_4E61:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004E61                 call    _abort
.text:0000000000004E66 ; ---------------------------------------------------------------------------
.text:0000000000004E66
.text:0000000000004E66 loc_4E66:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004E66                 call    xalloc_die
.text:0000000000004E66 ; } // starts at 4CC0
.text:0000000000004E66 quotearg_n_options endp
.text:0000000000004E66
.text:0000000000004E66 ; ---------------------------------------------------------------------------
.text:0000000000004E6B                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70 ; Attributes: info_from_lumina
.text:0000000000004E70
.text:0000000000004E70 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004E70                 public clone_quoting_options
.text:0000000000004E70 clone_quoting_options proc near
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 push    r12
.text:0000000000004E72                 push    rbp
.text:0000000000004E73                 push    rbx
.text:0000000000004E74                 mov     rbx, rdi
.text:0000000000004E77                 call    ___errno_location
.text:0000000000004E7C                 mov     r12d, [rax]
.text:0000000000004E7F                 mov     rbp, rax
.text:0000000000004E82                 lea     rax, default_quoting_options
.text:0000000000004E89                 test    rbx, rbx
.text:0000000000004E8C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004E91                 cmovz   rbx, rax
.text:0000000000004E95                 mov     rdi, rbx        ; src
.text:0000000000004E98                 call    xmemdup
.text:0000000000004E9D                 mov     [rbp+0], r12d
.text:0000000000004EA1                 pop     rbx
.text:0000000000004EA2                 pop     rbp
.text:0000000000004EA3                 pop     r12
.text:0000000000004EA5                 retn
.text:0000000000004EA5 ; } // starts at 4E70
.text:0000000000004EA5 clone_quoting_options endp
.text:0000000000004EA5
.text:0000000000004EA5 ; ---------------------------------------------------------------------------
.text:0000000000004EA6                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0
.text:0000000000004EB0                 public get_quoting_style
.text:0000000000004EB0 get_quoting_style proc near
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 lea     rax, default_quoting_options
.text:0000000000004EB7                 test    rdi, rdi
.text:0000000000004EBA                 cmovz   rdi, rax
.text:0000000000004EBE                 mov     eax, [rdi]
.text:0000000000004EC0                 retn
.text:0000000000004EC0 ; } // starts at 4EB0
.text:0000000000004EC0 get_quoting_style endp
.text:0000000000004EC0
.text:0000000000004EC0 ; ---------------------------------------------------------------------------
.text:0000000000004EC1                 align 10h
.text:0000000000004ED0
.text:0000000000004ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004ED0
.text:0000000000004ED0
.text:0000000000004ED0                 public set_quoting_style
.text:0000000000004ED0 set_quoting_style proc near
.text:0000000000004ED0 ; __unwind {
.text:0000000000004ED0                 lea     rax, default_quoting_options
.text:0000000000004ED7                 test    rdi, rdi
.text:0000000000004EDA                 cmovz   rdi, rax
.text:0000000000004EDE                 mov     [rdi], esi
.text:0000000000004EE0                 retn
.text:0000000000004EE0 ; } // starts at 4ED0
.text:0000000000004EE0 set_quoting_style endp
.text:0000000000004EE0
.text:0000000000004EE0 ; ---------------------------------------------------------------------------
.text:0000000000004EE1                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0 ; Attributes: info_from_lumina
.text:0000000000004EF0
.text:0000000000004EF0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004EF0                 public set_char_quoting
.text:0000000000004EF0 set_char_quoting proc near
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 lea     rax, default_quoting_options
.text:0000000000004EF7                 test    rdi, rdi
.text:0000000000004EFA                 mov     ecx, esi
.text:0000000000004EFC                 cmovz   rdi, rax
.text:0000000000004F00                 mov     eax, esi
.text:0000000000004F02                 and     ecx, 1Fh
.text:0000000000004F05                 shr     al, 5
.text:0000000000004F08                 movzx   eax, al
.text:0000000000004F0B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004F10                 mov     esi, [rdi]
.text:0000000000004F12                 mov     eax, esi
.text:0000000000004F14                 shr     eax, cl
.text:0000000000004F16                 xor     edx, eax
.text:0000000000004F18                 and     eax, 1
.text:0000000000004F1B                 and     edx, 1
.text:0000000000004F1E                 shl     edx, cl
.text:0000000000004F20                 xor     edx, esi
.text:0000000000004F22                 mov     [rdi], edx
.text:0000000000004F24                 retn
.text:0000000000004F24 ; } // starts at 4EF0
.text:0000000000004F24 set_char_quoting endp
.text:0000000000004F24
.text:0000000000004F24 ; ---------------------------------------------------------------------------
.text:0000000000004F25                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30
.text:0000000000004F30                 public set_quoting_flags
.text:0000000000004F30 set_quoting_flags proc near
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 lea     rax, default_quoting_options
.text:0000000000004F37                 test    rdi, rdi
.text:0000000000004F3A                 cmovz   rdi, rax
.text:0000000000004F3E                 mov     eax, [rdi+4]
.text:0000000000004F41                 mov     [rdi+4], esi
.text:0000000000004F44                 retn
.text:0000000000004F44 ; } // starts at 4F30
.text:0000000000004F44 set_quoting_flags endp
.text:0000000000004F44
.text:0000000000004F44 ; ---------------------------------------------------------------------------
.text:0000000000004F45                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50 ; Attributes: info_from_lumina
.text:0000000000004F50
.text:0000000000004F50 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004F50                 public set_custom_quoting
.text:0000000000004F50 set_custom_quoting proc near
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 lea     rax, default_quoting_options
.text:0000000000004F57                 test    rdi, rdi
.text:0000000000004F5A                 cmovz   rdi, rax
.text:0000000000004F5E                 test    rsi, rsi
.text:0000000000004F61                 mov     dword ptr [rdi], 0Ah
.text:0000000000004F67                 jz      short loc_4F77
.text:0000000000004F69                 test    rdx, rdx
.text:0000000000004F6C                 jz      short loc_4F77
.text:0000000000004F6E                 mov     [rdi+28h], rsi
.text:0000000000004F72                 mov     [rdi+30h], rdx
.text:0000000000004F76                 retn
.text:0000000000004F77 ; ---------------------------------------------------------------------------
.text:0000000000004F77
.text:0000000000004F77 loc_4F77:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004F77                                         ; set_custom_quoting+1C↑j
.text:0000000000004F77                 sub     rsp, 8
.text:0000000000004F7B                 call    _abort
.text:0000000000004F7B ; } // starts at 4F50
.text:0000000000004F7B set_custom_quoting endp
.text:0000000000004F7B
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80 ; Attributes: info_from_lumina
.text:0000000000004F80
.text:0000000000004F80 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004F80                 public quotearg_buffer
.text:0000000000004F80 quotearg_buffer proc near
.text:0000000000004F80
.text:0000000000004F80 var_40          = qword ptr -40h
.text:0000000000004F80
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 push    r15
.text:0000000000004F82                 push    r14
.text:0000000000004F84                 lea     rax, default_quoting_options
.text:0000000000004F8B                 push    r13
.text:0000000000004F8D                 push    r12
.text:0000000000004F8F                 mov     r13, rdi
.text:0000000000004F92                 push    rbp
.text:0000000000004F93                 push    rbx
.text:0000000000004F94                 mov     rbx, r8
.text:0000000000004F97                 mov     r14, rsi
.text:0000000000004F9A                 mov     r15, rdx
.text:0000000000004F9D                 sub     rsp, 18h
.text:0000000000004FA1                 test    r8, r8
.text:0000000000004FA4                 cmovz   rbx, rax
.text:0000000000004FA8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004FAD                 call    ___errno_location
.text:0000000000004FB2                 mov     r12d, [rax]
.text:0000000000004FB5                 mov     rbp, rax
.text:0000000000004FB8                 lea     rax, [rbx+8]
.text:0000000000004FBC                 sub     rsp, 8
.text:0000000000004FC0                 mov     r9d, [rbx+4]
.text:0000000000004FC4                 push    qword ptr [rbx+30h]
.text:0000000000004FC7                 mov     r8d, [rbx]
.text:0000000000004FCA                 push    qword ptr [rbx+28h]
.text:0000000000004FCD                 mov     rdx, r15
.text:0000000000004FD0                 push    rax
.text:0000000000004FD1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004FD6                 mov     rsi, r14
.text:0000000000004FD9                 mov     rdi, r13
.text:0000000000004FDC                 call    quotearg_buffer_restyled
.text:0000000000004FE1                 mov     [rbp+0], r12d
.text:0000000000004FE5                 add     rsp, 38h
.text:0000000000004FE9                 pop     rbx
.text:0000000000004FEA                 pop     rbp
.text:0000000000004FEB                 pop     r12
.text:0000000000004FED                 pop     r13
.text:0000000000004FEF                 pop     r14
.text:0000000000004FF1                 pop     r15
.text:0000000000004FF3                 retn
.text:0000000000004FF3 ; } // starts at 4F80
.text:0000000000004FF3 quotearg_buffer endp
.text:0000000000004FF3
.text:0000000000004FF3 ; ---------------------------------------------------------------------------
.text:0000000000004FF4                 align 20h
.text:0000000000005000
.text:0000000000005000 ; =============== S U B R O U T I N E =======================================
.text:0000000000005000
.text:0000000000005000 ; Attributes: info_from_lumina
.text:0000000000005000
.text:0000000000005000 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005000                 public quotearg_alloc_mem
.text:0000000000005000 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005000
.text:0000000000005000 var_5C          = dword ptr -5Ch
.text:0000000000005000 var_58          = qword ptr -58h
.text:0000000000005000 var_50          = qword ptr -50h
.text:0000000000005000 var_48          = qword ptr -48h
.text:0000000000005000 var_40          = qword ptr -40h
.text:0000000000005000
.text:0000000000005000 ; __unwind {
.text:0000000000005000                 push    r15
.text:0000000000005002                 push    r14
.text:0000000000005004                 lea     rax, default_quoting_options
.text:000000000000500B                 push    r13
.text:000000000000500D                 push    r12
.text:000000000000500F                 mov     r12, rdx
.text:0000000000005012                 push    rbp
.text:0000000000005013                 push    rbx
.text:0000000000005014                 mov     rbx, rcx
.text:0000000000005017                 mov     r14, rdi
.text:000000000000501A                 mov     r15, rsi
.text:000000000000501D                 sub     rsp, 38h
.text:0000000000005021                 test    rcx, rcx
.text:0000000000005024                 cmovz   rbx, rax
.text:0000000000005028                 xor     ebp, ebp
.text:000000000000502A                 call    ___errno_location
.text:000000000000502F                 test    r12, r12
.text:0000000000005032                 mov     r13, rax
.text:0000000000005035                 mov     eax, [rax]
.text:0000000000005037                 setz    bpl
.text:000000000000503B                 or      ebp, [rbx+4]
.text:000000000000503E                 lea     r10, [rbx+8]
.text:0000000000005042                 sub     rsp, 8
.text:0000000000005046                 mov     r8d, [rbx]
.text:0000000000005049                 mov     rcx, r15
.text:000000000000504C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005050                 push    qword ptr [rbx+30h]
.text:0000000000005053                 mov     rdx, r14
.text:0000000000005056                 push    qword ptr [rbx+28h]
.text:0000000000005059                 push    r10
.text:000000000000505B                 xor     esi, esi
.text:000000000000505D                 mov     r9d, ebp
.text:0000000000005060                 xor     edi, edi
.text:0000000000005062                 mov     [rsp+88h+var_48], r10
.text:0000000000005067                 call    quotearg_buffer_restyled
.text:000000000000506C                 lea     rsi, [rax+1]
.text:0000000000005070                 mov     [rsp+88h+var_40], rax
.text:0000000000005075                 add     rsp, 20h
.text:0000000000005079                 mov     rdi, rsi
.text:000000000000507C                 mov     [rsp+68h+var_50], rsi
.text:0000000000005081                 call    xmalloc
.text:0000000000005086                 mov     [rsp+68h+var_58], rax
.text:000000000000508B                 sub     rsp, 8
.text:000000000000508F                 push    qword ptr [rbx+30h]
.text:0000000000005092                 push    qword ptr [rbx+28h]
.text:0000000000005095                 mov     r10, [rsp+80h+var_48]
.text:000000000000509A                 mov     r9d, ebp
.text:000000000000509D                 mov     r8d, [rbx]
.text:00000000000050A0                 mov     rcx, r15
.text:00000000000050A3                 mov     rdx, r14
.text:00000000000050A6                 mov     rdi, rax
.text:00000000000050A9                 push    r10
.text:00000000000050AB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000050B0                 call    quotearg_buffer_restyled
.text:00000000000050B5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000050B9                 add     rsp, 20h
.text:00000000000050BD                 test    r12, r12
.text:00000000000050C0                 mov     [r13+0], eax
.text:00000000000050C4                 jz      short loc_50CF
.text:00000000000050C6                 mov     r11, [rsp+68h+var_40]
.text:00000000000050CB                 mov     [r12], r11
.text:00000000000050CF
.text:00000000000050CF loc_50CF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000050CF                 mov     rax, [rsp+68h+var_58]
.text:00000000000050D4                 add     rsp, 38h
.text:00000000000050D8                 pop     rbx
.text:00000000000050D9                 pop     rbp
.text:00000000000050DA                 pop     r12
.text:00000000000050DC                 pop     r13
.text:00000000000050DE                 pop     r14
.text:00000000000050E0                 pop     r15
.text:00000000000050E2                 retn
.text:00000000000050E2 ; } // starts at 5000
.text:00000000000050E2 quotearg_alloc_mem endp
.text:00000000000050E2
.text:00000000000050E2 ; ---------------------------------------------------------------------------
.text:00000000000050E3                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0
.text:00000000000050F0                 public quotearg_alloc
.text:00000000000050F0 quotearg_alloc  proc near
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 mov     rcx, rdx
.text:00000000000050F3                 xor     edx, edx
.text:00000000000050F5                 jmp     quotearg_alloc_mem
.text:00000000000050F5 ; } // starts at 50F0
.text:00000000000050F5 quotearg_alloc  endp
.text:00000000000050F5
.text:00000000000050F5 ; ---------------------------------------------------------------------------
.text:00000000000050FA                 align 20h
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100 ; Attributes: info_from_lumina
.text:0000000000005100
.text:0000000000005100 ; void __cdecl quotearg_free()
.text:0000000000005100                 public quotearg_free
.text:0000000000005100 quotearg_free   proc near
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 mov     eax, cs:nslots
.text:0000000000005106                 push    r12
.text:0000000000005108                 mov     r12, cs:slotvec
.text:000000000000510F                 push    rbp
.text:0000000000005110                 push    rbx
.text:0000000000005111                 cmp     eax, 1
.text:0000000000005114                 jle     short loc_5141
.text:0000000000005116                 sub     eax, 2
.text:0000000000005119                 lea     rbx, [r12+18h]
.text:000000000000511E                 shl     rax, 4
.text:0000000000005122                 lea     rbp, [r12+rax+28h]
.text:0000000000005127                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005130                 mov     rdi, [rbx]      ; ptr
.text:0000000000005133                 add     rbx, 10h
.text:0000000000005137                 call    _free
.text:000000000000513C                 cmp     rbx, rbp
.text:000000000000513F                 jnz     short loc_5130
.text:0000000000005141
.text:0000000000005141 loc_5141:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005141                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005146                 lea     rbx, slot0
.text:000000000000514D                 cmp     rdi, rbx
.text:0000000000005150                 jz      short loc_5169
.text:0000000000005152                 call    _free
.text:0000000000005157                 mov     cs:slotvec0, 100h
.text:0000000000005162                 mov     cs:off_20A098, rbx
.text:0000000000005169
.text:0000000000005169 loc_5169:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005169                 lea     rbx, slotvec0
.text:0000000000005170                 cmp     r12, rbx
.text:0000000000005173                 jz      short loc_5184
.text:0000000000005175                 mov     rdi, r12        ; ptr
.text:0000000000005178                 call    _free
.text:000000000000517D                 mov     cs:slotvec, rbx
.text:0000000000005184
.text:0000000000005184 loc_5184:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005184                 pop     rbx
.text:0000000000005185                 mov     cs:nslots, 1
.text:000000000000518F                 pop     rbp
.text:0000000000005190                 pop     r12
.text:0000000000005192                 retn
.text:0000000000005192 ; } // starts at 5100
.text:0000000000005192 quotearg_free   endp
.text:0000000000005192
.text:0000000000005192 ; ---------------------------------------------------------------------------
.text:0000000000005193                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0
.text:00000000000051A0                 public quotearg_n
.text:00000000000051A0 quotearg_n      proc near
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 lea     rcx, default_quoting_options
.text:00000000000051A7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000051AE                 jmp     quotearg_n_options
.text:00000000000051AE ; } // starts at 51A0
.text:00000000000051AE quotearg_n      endp
.text:00000000000051AE
.text:00000000000051AE ; ---------------------------------------------------------------------------
.text:00000000000051B3                 align 20h
.text:00000000000051C0
.text:00000000000051C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051C0
.text:00000000000051C0
.text:00000000000051C0                 public quotearg_n_mem
.text:00000000000051C0 quotearg_n_mem  proc near
.text:00000000000051C0 ; __unwind {
.text:00000000000051C0                 lea     rcx, default_quoting_options
.text:00000000000051C7                 jmp     quotearg_n_options
.text:00000000000051C7 ; } // starts at 51C0
.text:00000000000051C7 quotearg_n_mem  endp
.text:00000000000051C7
.text:00000000000051C7 ; ---------------------------------------------------------------------------
.text:00000000000051CC                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0
.text:00000000000051D0                 public quotearg
.text:00000000000051D0 quotearg        proc near
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 lea     rcx, default_quoting_options
.text:00000000000051D7                 mov     rsi, rdi
.text:00000000000051DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000051E1                 xor     edi, edi
.text:00000000000051E3                 jmp     quotearg_n_options
.text:00000000000051E3 ; } // starts at 51D0
.text:00000000000051E3 quotearg        endp
.text:00000000000051E3
.text:00000000000051E3 ; ---------------------------------------------------------------------------
.text:00000000000051E8                 align 10h
.text:00000000000051F0
.text:00000000000051F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051F0
.text:00000000000051F0
.text:00000000000051F0                 public quotearg_mem
.text:00000000000051F0 quotearg_mem    proc near
.text:00000000000051F0 ; __unwind {
.text:00000000000051F0                 lea     rcx, default_quoting_options
.text:00000000000051F7                 mov     rdx, rsi
.text:00000000000051FA                 mov     rsi, rdi
.text:00000000000051FD                 xor     edi, edi
.text:00000000000051FF                 jmp     quotearg_n_options
.text:00000000000051FF ; } // starts at 51F0
.text:00000000000051FF quotearg_mem    endp
.text:00000000000051FF
.text:00000000000051FF ; ---------------------------------------------------------------------------
.text:0000000000005204                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210 ; Attributes: info_from_lumina
.text:0000000000005210
.text:0000000000005210 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005210                 public quotearg_n_style
.text:0000000000005210 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005210
.text:0000000000005210 var_48          = dword ptr -48h
.text:0000000000005210 var_44          = qword ptr -44h
.text:0000000000005210 var_3C          = qword ptr -3Ch
.text:0000000000005210 var_34          = qword ptr -34h
.text:0000000000005210 var_2C          = qword ptr -2Ch
.text:0000000000005210 var_24          = qword ptr -24h
.text:0000000000005210 var_1C          = qword ptr -1Ch
.text:0000000000005210 var_14          = dword ptr -14h
.text:0000000000005210 var_10          = qword ptr -10h
.text:0000000000005210
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 sub     rsp, 48h
.text:0000000000005214                 mov     rax, rdx
.text:0000000000005217                 mov     rdx, fs:28h
.text:0000000000005220                 mov     [rsp+48h+var_10], rdx
.text:0000000000005225                 xor     edx, edx
.text:0000000000005227                 cmp     esi, 0Ah
.text:000000000000522A                 jz      short loc_5294
.text:000000000000522C                 mov     [rsp+48h+var_48], esi
.text:000000000000522F                 mov     rcx, rsp
.text:0000000000005232                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005239                 mov     rsi, rax
.text:000000000000523C                 mov     [rsp+48h+var_44], 0
.text:0000000000005245                 mov     [rsp+48h+var_3C], 0
.text:000000000000524E                 mov     [rsp+48h+var_34], 0
.text:0000000000005257                 mov     [rsp+48h+var_2C], 0
.text:0000000000005260                 mov     [rsp+48h+var_24], 0
.text:0000000000005269                 mov     [rsp+48h+var_1C], 0
.text:0000000000005272                 mov     [rsp+48h+var_14], 0
.text:000000000000527A                 call    quotearg_n_options
.text:000000000000527F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005284                 xor     rcx, fs:28h
.text:000000000000528D                 jnz     short loc_5299
.text:000000000000528F                 add     rsp, 48h
.text:0000000000005293                 retn
.text:0000000000005294 ; ---------------------------------------------------------------------------
.text:0000000000005294
.text:0000000000005294 loc_5294:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005294                 call    _abort
.text:0000000000005299 ; ---------------------------------------------------------------------------
.text:0000000000005299
.text:0000000000005299 loc_5299:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005299                 call    ___stack_chk_fail
.text:0000000000005299 ; } // starts at 5210
.text:0000000000005299 quotearg_n_style endp
.text:0000000000005299
.text:0000000000005299 ; ---------------------------------------------------------------------------
.text:000000000000529E                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0 ; Attributes: info_from_lumina
.text:00000000000052A0
.text:00000000000052A0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000052A0                 public quotearg_n_style_mem
.text:00000000000052A0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000052A0
.text:00000000000052A0 var_48          = dword ptr -48h
.text:00000000000052A0 var_44          = qword ptr -44h
.text:00000000000052A0 var_3C          = qword ptr -3Ch
.text:00000000000052A0 var_34          = qword ptr -34h
.text:00000000000052A0 var_2C          = qword ptr -2Ch
.text:00000000000052A0 var_24          = qword ptr -24h
.text:00000000000052A0 var_1C          = qword ptr -1Ch
.text:00000000000052A0 var_14          = dword ptr -14h
.text:00000000000052A0 var_10          = qword ptr -10h
.text:00000000000052A0
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 sub     rsp, 48h
.text:00000000000052A4                 mov     rax, rdx
.text:00000000000052A7                 mov     rdx, rcx
.text:00000000000052AA                 mov     rcx, fs:28h
.text:00000000000052B3                 mov     [rsp+48h+var_10], rcx
.text:00000000000052B8                 xor     ecx, ecx
.text:00000000000052BA                 cmp     esi, 0Ah
.text:00000000000052BD                 jz      short loc_5320
.text:00000000000052BF                 mov     [rsp+48h+var_48], esi
.text:00000000000052C2                 mov     rcx, rsp
.text:00000000000052C5                 mov     rsi, rax
.text:00000000000052C8                 mov     [rsp+48h+var_44], 0
.text:00000000000052D1                 mov     [rsp+48h+var_3C], 0
.text:00000000000052DA                 mov     [rsp+48h+var_34], 0
.text:00000000000052E3                 mov     [rsp+48h+var_2C], 0
.text:00000000000052EC                 mov     [rsp+48h+var_24], 0
.text:00000000000052F5                 mov     [rsp+48h+var_1C], 0
.text:00000000000052FE                 mov     [rsp+48h+var_14], 0
.text:0000000000005306                 call    quotearg_n_options
.text:000000000000530B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005310                 xor     rdx, fs:28h
.text:0000000000005319                 jnz     short loc_5325
.text:000000000000531B                 add     rsp, 48h
.text:000000000000531F                 retn
.text:0000000000005320 ; ---------------------------------------------------------------------------
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005320                 call    _abort
.text:0000000000005325 ; ---------------------------------------------------------------------------
.text:0000000000005325
.text:0000000000005325 loc_5325:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005325                 call    ___stack_chk_fail
.text:0000000000005325 ; } // starts at 52A0
.text:0000000000005325 quotearg_n_style_mem endp
.text:0000000000005325
.text:0000000000005325 ; ---------------------------------------------------------------------------
.text:000000000000532A                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330
.text:0000000000005330                 public quotearg_style
.text:0000000000005330 quotearg_style  proc near               ; CODE XREF: main+48D↑p
.text:0000000000005330                                         ; main+56A↑p ...
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 mov     rdx, rsi
.text:0000000000005333                 mov     esi, edi
.text:0000000000005335                 xor     edi, edi
.text:0000000000005337                 jmp     quotearg_n_style
.text:0000000000005337 ; } // starts at 5330
.text:0000000000005337 quotearg_style  endp
.text:0000000000005337
.text:0000000000005337 ; ---------------------------------------------------------------------------
.text:000000000000533C                 align 20h
.text:0000000000005340
.text:0000000000005340 ; =============== S U B R O U T I N E =======================================
.text:0000000000005340
.text:0000000000005340
.text:0000000000005340                 public quotearg_style_mem
.text:0000000000005340 quotearg_style_mem proc near
.text:0000000000005340 ; __unwind {
.text:0000000000005340                 mov     rcx, rdx
.text:0000000000005343                 mov     rdx, rsi
.text:0000000000005346                 mov     esi, edi
.text:0000000000005348                 xor     edi, edi
.text:000000000000534A                 jmp     quotearg_n_style_mem
.text:000000000000534A ; } // starts at 5340
.text:000000000000534A quotearg_style_mem endp
.text:000000000000534A
.text:000000000000534A ; ---------------------------------------------------------------------------
.text:000000000000534F                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350 ; Attributes: info_from_lumina
.text:0000000000005350
.text:0000000000005350 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005350                 public quotearg_char_mem
.text:0000000000005350 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005350                                         ; quotearg_colon+C↓j ...
.text:0000000000005350
.text:0000000000005350 var_48          = xmmword ptr -48h
.text:0000000000005350 var_38          = xmmword ptr -38h
.text:0000000000005350 var_28          = xmmword ptr -28h
.text:0000000000005350 var_18          = qword ptr -18h
.text:0000000000005350 var_10          = qword ptr -10h
.text:0000000000005350
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 sub     rsp, 48h
.text:0000000000005354                 mov     ecx, edx
.text:0000000000005356                 mov     rax, fs:28h
.text:000000000000535F                 mov     [rsp+48h+var_10], rax
.text:0000000000005364                 xor     eax, eax
.text:0000000000005366                 mov     rax, cs:qword_20A250
.text:000000000000536D                 mov     r8, rsp
.text:0000000000005370                 and     ecx, 1Fh
.text:0000000000005373                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000537B                 mov     [rsp+48h+var_18], rax
.text:0000000000005380                 mov     eax, edx
.text:0000000000005382                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005386                 shr     al, 5
.text:0000000000005389                 movzx   eax, al
.text:000000000000538C                 lea     r9, [r8+rax*4+8]
.text:0000000000005391                 movdqa  xmm0, cs:xmmword_20A230
.text:0000000000005399                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000539E                 movdqa  xmm0, cs:xmmword_20A240
.text:00000000000053A6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000053AB                 mov     edx, [r9]
.text:00000000000053AE                 mov     eax, edx
.text:00000000000053B0                 shr     eax, cl
.text:00000000000053B2                 not     eax
.text:00000000000053B4                 and     eax, 1
.text:00000000000053B7                 shl     eax, cl
.text:00000000000053B9                 mov     rcx, r8
.text:00000000000053BC                 xor     eax, edx
.text:00000000000053BE                 mov     rdx, rsi
.text:00000000000053C1                 mov     rsi, rdi
.text:00000000000053C4                 mov     [r9], eax
.text:00000000000053C7                 xor     edi, edi
.text:00000000000053C9                 call    quotearg_n_options
.text:00000000000053CE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000053D3                 xor     rsi, fs:28h
.text:00000000000053DC                 jnz     short loc_53E3
.text:00000000000053DE                 add     rsp, 48h
.text:00000000000053E2                 retn
.text:00000000000053E3 ; ---------------------------------------------------------------------------
.text:00000000000053E3
.text:00000000000053E3 loc_53E3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000053E3                 call    ___stack_chk_fail
.text:00000000000053E3 ; } // starts at 5350
.text:00000000000053E3 quotearg_char_mem endp
.text:00000000000053E3
.text:00000000000053E3 ; ---------------------------------------------------------------------------
.text:00000000000053E8                 align 10h
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0
.text:00000000000053F0                 public quotearg_char
.text:00000000000053F0 quotearg_char   proc near
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 movsx   edx, sil
.text:00000000000053F4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000053FB                 jmp     quotearg_char_mem
.text:00000000000053FB ; } // starts at 53F0
.text:00000000000053FB quotearg_char   endp
.text:00000000000053FB
.text:0000000000005400
.text:0000000000005400 ; =============== S U B R O U T I N E =======================================
.text:0000000000005400
.text:0000000000005400
.text:0000000000005400                 public quotearg_colon
.text:0000000000005400 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005400 ; __unwind {
.text:0000000000005400                 mov     edx, 3Ah ; ':'
.text:0000000000005405                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000540C                 jmp     quotearg_char_mem
.text:000000000000540C ; } // starts at 5400
.text:000000000000540C quotearg_colon  endp
.text:000000000000540C
.text:000000000000540C ; ---------------------------------------------------------------------------
.text:0000000000005411                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420
.text:0000000000005420                 public quotearg_colon_mem
.text:0000000000005420 quotearg_colon_mem proc near
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 mov     edx, 3Ah ; ':'
.text:0000000000005425                 jmp     quotearg_char_mem
.text:0000000000005425 ; } // starts at 5420
.text:0000000000005425 quotearg_colon_mem endp
.text:0000000000005425
.text:0000000000005425 ; ---------------------------------------------------------------------------
.text:000000000000542A                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430 ; Attributes: info_from_lumina
.text:0000000000005430
.text:0000000000005430 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005430                 public quotearg_n_style_colon
.text:0000000000005430 quotearg_n_style_colon proc near        ; CODE XREF: elseek+68↑p
.text:0000000000005430                                         ; diagnose_copy_fd_failure+1A↑p
.text:0000000000005430
.text:0000000000005430 var_48          = dword ptr -48h
.text:0000000000005430 var_44          = qword ptr -44h
.text:0000000000005430 var_3C          = qword ptr -3Ch
.text:0000000000005430 var_34          = qword ptr -34h
.text:0000000000005430 var_2C          = qword ptr -2Ch
.text:0000000000005430 var_24          = qword ptr -24h
.text:0000000000005430 var_1C          = qword ptr -1Ch
.text:0000000000005430 var_14          = dword ptr -14h
.text:0000000000005430 var_10          = qword ptr -10h
.text:0000000000005430
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 sub     rsp, 48h
.text:0000000000005434                 mov     rax, rdx
.text:0000000000005437                 mov     rdx, fs:28h
.text:0000000000005440                 mov     [rsp+48h+var_10], rdx
.text:0000000000005445                 xor     edx, edx
.text:0000000000005447                 cmp     esi, 0Ah
.text:000000000000544A                 jz      short loc_54B4
.text:000000000000544C                 mov     [rsp+48h+var_48], esi
.text:000000000000544F                 mov     rcx, rsp
.text:0000000000005452                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005459                 mov     rsi, rax
.text:000000000000545C                 mov     [rsp+48h+var_44], 0
.text:0000000000005465                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000546E                 mov     [rsp+48h+var_34], 0
.text:0000000000005477                 mov     [rsp+48h+var_2C], 0
.text:0000000000005480                 mov     [rsp+48h+var_24], 0
.text:0000000000005489                 mov     [rsp+48h+var_1C], 0
.text:0000000000005492                 mov     [rsp+48h+var_14], 0
.text:000000000000549A                 call    quotearg_n_options
.text:000000000000549F                 mov     rcx, [rsp+48h+var_10]
.text:00000000000054A4                 xor     rcx, fs:28h
.text:00000000000054AD                 jnz     short loc_54B9
.text:00000000000054AF                 add     rsp, 48h
.text:00000000000054B3                 retn
.text:00000000000054B4 ; ---------------------------------------------------------------------------
.text:00000000000054B4
.text:00000000000054B4 loc_54B4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000054B4                 call    _abort
.text:00000000000054B9 ; ---------------------------------------------------------------------------
.text:00000000000054B9
.text:00000000000054B9 loc_54B9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000054B9                 call    ___stack_chk_fail
.text:00000000000054B9 ; } // starts at 5430
.text:00000000000054B9 quotearg_n_style_colon endp
.text:00000000000054B9
.text:00000000000054B9 ; ---------------------------------------------------------------------------
.text:00000000000054BE                 align 20h
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0 ; Attributes: info_from_lumina
.text:00000000000054C0
.text:00000000000054C0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000054C0                 public quotearg_n_custom_mem
.text:00000000000054C0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000054C0                                         ; quotearg_custom+12↓j ...
.text:00000000000054C0
.text:00000000000054C0 var_48          = xmmword ptr -48h
.text:00000000000054C0 var_38          = xmmword ptr -38h
.text:00000000000054C0 var_28          = xmmword ptr -28h
.text:00000000000054C0 var_18          = qword ptr -18h
.text:00000000000054C0 var_10          = qword ptr -10h
.text:00000000000054C0
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 sub     rsp, 48h
.text:00000000000054C4                 mov     r9, rcx
.text:00000000000054C7                 mov     rcx, cs:qword_20A250
.text:00000000000054CE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000054D6                 mov     rax, fs:28h
.text:00000000000054DF                 mov     [rsp+48h+var_10], rax
.text:00000000000054E4                 xor     eax, eax
.text:00000000000054E6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000054EA                 test    rsi, rsi
.text:00000000000054ED                 mov     [rsp+48h+var_18], rcx
.text:00000000000054F2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000054F9                 movdqa  xmm0, cs:xmmword_20A230
.text:0000000000005501                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005506                 movdqa  xmm0, cs:xmmword_20A240
.text:000000000000550E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005513                 jz      short loc_5547
.text:0000000000005515                 test    rdx, rdx
.text:0000000000005518                 jz      short loc_5547
.text:000000000000551A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000551F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005524                 mov     rcx, rsp
.text:0000000000005527                 mov     rdx, r8
.text:000000000000552A                 mov     rsi, r9
.text:000000000000552D                 call    quotearg_n_options
.text:0000000000005532                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005537                 xor     rdi, fs:28h
.text:0000000000005540                 jnz     short loc_554C
.text:0000000000005542                 add     rsp, 48h
.text:0000000000005546                 retn
.text:0000000000005547 ; ---------------------------------------------------------------------------
.text:0000000000005547
.text:0000000000005547 loc_5547:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005547                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005547                 call    _abort
.text:000000000000554C ; ---------------------------------------------------------------------------
.text:000000000000554C
.text:000000000000554C loc_554C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000554C                 call    ___stack_chk_fail
.text:000000000000554C ; } // starts at 54C0
.text:000000000000554C quotearg_n_custom_mem endp
.text:000000000000554C
.text:000000000000554C ; ---------------------------------------------------------------------------
.text:0000000000005551                 align 20h
.text:0000000000005560
.text:0000000000005560 ; =============== S U B R O U T I N E =======================================
.text:0000000000005560
.text:0000000000005560
.text:0000000000005560                 public quotearg_n_custom
.text:0000000000005560 quotearg_n_custom proc near
.text:0000000000005560 ; __unwind {
.text:0000000000005560                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005567                 jmp     quotearg_n_custom_mem
.text:0000000000005567 ; } // starts at 5560
.text:0000000000005567 quotearg_n_custom endp
.text:0000000000005567
.text:0000000000005567 ; ---------------------------------------------------------------------------
.text:000000000000556C                 align 10h
.text:0000000000005570
.text:0000000000005570 ; =============== S U B R O U T I N E =======================================
.text:0000000000005570
.text:0000000000005570
.text:0000000000005570                 public quotearg_custom
.text:0000000000005570 quotearg_custom proc near
.text:0000000000005570 ; __unwind {
.text:0000000000005570                 mov     rcx, rdx
.text:0000000000005573                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000557A                 mov     rdx, rsi
.text:000000000000557D                 mov     rsi, rdi
.text:0000000000005580                 xor     edi, edi
.text:0000000000005582                 jmp     quotearg_n_custom_mem
.text:0000000000005582 ; } // starts at 5570
.text:0000000000005582 quotearg_custom endp
.text:0000000000005582
.text:0000000000005582 ; ---------------------------------------------------------------------------
.text:0000000000005587                 align 10h
.text:0000000000005590
.text:0000000000005590 ; =============== S U B R O U T I N E =======================================
.text:0000000000005590
.text:0000000000005590
.text:0000000000005590                 public quotearg_custom_mem
.text:0000000000005590 quotearg_custom_mem proc near
.text:0000000000005590 ; __unwind {
.text:0000000000005590                 mov     r8, rcx
.text:0000000000005593                 mov     rcx, rdx
.text:0000000000005596                 mov     rdx, rsi
.text:0000000000005599                 mov     rsi, rdi
.text:000000000000559C                 xor     edi, edi
.text:000000000000559E                 jmp     quotearg_n_custom_mem
.text:000000000000559E ; } // starts at 5590
.text:000000000000559E quotearg_custom_mem endp
.text:000000000000559E
.text:000000000000559E ; ---------------------------------------------------------------------------
.text:00000000000055A3                 align 10h
.text:00000000000055B0
.text:00000000000055B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055B0
.text:00000000000055B0
.text:00000000000055B0                 public quote_n_mem
.text:00000000000055B0 quote_n_mem     proc near
.text:00000000000055B0 ; __unwind {
.text:00000000000055B0                 lea     rcx, quote_quoting_options
.text:00000000000055B7                 jmp     quotearg_n_options
.text:00000000000055B7 ; } // starts at 55B0
.text:00000000000055B7 quote_n_mem     endp
.text:00000000000055B7
.text:00000000000055B7 ; ---------------------------------------------------------------------------
.text:00000000000055BC                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0
.text:00000000000055C0                 public quote_mem
.text:00000000000055C0 quote_mem       proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 lea     rcx, quote_quoting_options
.text:00000000000055C7                 mov     rdx, rsi
.text:00000000000055CA                 mov     rsi, rdi
.text:00000000000055CD                 xor     edi, edi
.text:00000000000055CF                 jmp     quotearg_n_options
.text:00000000000055CF ; } // starts at 55C0
.text:00000000000055CF quote_mem       endp
.text:00000000000055CF
.text:00000000000055CF ; ---------------------------------------------------------------------------
.text:00000000000055D4                 align 20h
.text:00000000000055E0
.text:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055E0
.text:00000000000055E0
.text:00000000000055E0                 public quote_n
.text:00000000000055E0 quote_n         proc near
.text:00000000000055E0 ; __unwind {
.text:00000000000055E0                 lea     rcx, quote_quoting_options
.text:00000000000055E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000055EE                 jmp     quotearg_n_options
.text:00000000000055EE ; } // starts at 55E0
.text:00000000000055EE quote_n         endp
.text:00000000000055EE
.text:00000000000055EE ; ---------------------------------------------------------------------------
.text:00000000000055F3                 align 20h
.text:0000000000005600
.text:0000000000005600 ; =============== S U B R O U T I N E =======================================
.text:0000000000005600
.text:0000000000005600
.text:0000000000005600                 public quote
.text:0000000000005600 quote           proc near               ; CODE XREF: main+1059↑p
.text:0000000000005600                                         ; xnumtoumax+6D↓p
.text:0000000000005600 ; __unwind {
.text:0000000000005600                 lea     rcx, quote_quoting_options
.text:0000000000005607                 mov     rsi, rdi
.text:000000000000560A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005611                 xor     edi, edi
.text:0000000000005613                 jmp     quotearg_n_options
.text:0000000000005613 ; } // starts at 5600
.text:0000000000005613 quote           endp
.text:0000000000005613
.text:0000000000005613 ; ---------------------------------------------------------------------------
.text:0000000000005618                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000005620                 public safe_read
.text:0000000000005620 safe_read       proc near               ; CODE XREF: main+884↑p
.text:0000000000005620                                         ; copy_fd+59↑p ...
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 push    r13
.text:0000000000005622                 push    r12
.text:0000000000005624                 mov     r13d, edi
.text:0000000000005627                 push    rbp
.text:0000000000005628                 push    rbx
.text:0000000000005629                 mov     r12, rsi
.text:000000000000562C                 mov     rbx, rdx
.text:000000000000562F                 sub     rsp, 8
.text:0000000000005633                 nop     dword ptr [rax+rax+00h]
.text:0000000000005638
.text:0000000000005638 loc_5638:                               ; CODE XREF: safe_read+38↓j
.text:0000000000005638                                         ; safe_read+4D↓j
.text:0000000000005638                 mov     rdx, rbx        ; nbytes
.text:000000000000563B                 mov     rsi, r12        ; buf
.text:000000000000563E                 mov     edi, r13d       ; fd
.text:0000000000005641                 call    _read
.text:0000000000005646                 test    rax, rax
.text:0000000000005649                 mov     rbp, rax
.text:000000000000564C                 jns     short loc_5670
.text:000000000000564E                 call    ___errno_location
.text:0000000000005653                 mov     eax, [rax]
.text:0000000000005655                 cmp     eax, 4
.text:0000000000005658                 jz      short loc_5638
.text:000000000000565A                 cmp     rbx, 7FF00000h
.text:0000000000005661                 jbe     short loc_5670
.text:0000000000005663                 cmp     eax, 16h
.text:0000000000005666                 jnz     short loc_5670
.text:0000000000005668                 mov     ebx, 7FF00000h
.text:000000000000566D                 jmp     short loc_5638
.text:000000000000566D ; ---------------------------------------------------------------------------
.text:000000000000566F                 align 10h
.text:0000000000005670
.text:0000000000005670 loc_5670:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000005670                                         ; safe_read+41↑j ...
.text:0000000000005670                 add     rsp, 8
.text:0000000000005674                 mov     rax, rbp
.text:0000000000005677                 pop     rbx
.text:0000000000005678                 pop     rbp
.text:0000000000005679                 pop     r12
.text:000000000000567B                 pop     r13
.text:000000000000567D                 retn
.text:000000000000567D ; } // starts at 5620
.text:000000000000567D safe_read       endp
.text:000000000000567D
.text:000000000000567D ; ---------------------------------------------------------------------------
.text:000000000000567E                 align 20h
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680
.text:0000000000005680 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005680                 public version_etc_arn
.text:0000000000005680 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_5ABB↓j
.text:0000000000005680                                         ; version_etc_va:loc_5B0B↓p ...
.text:0000000000005680
.text:0000000000005680 var_58          = qword ptr -58h
.text:0000000000005680 var_50          = qword ptr -50h
.text:0000000000005680 var_48          = qword ptr -48h
.text:0000000000005680 var_40          = qword ptr -40h
.text:0000000000005680
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 push    r15
.text:0000000000005682                 push    r14
.text:0000000000005684                 push    r13
.text:0000000000005686                 push    r12
.text:0000000000005688                 mov     r12, r9
.text:000000000000568B                 push    rbp
.text:000000000000568C                 push    rbx
.text:000000000000568D                 mov     rbp, rdi
.text:0000000000005690                 mov     rbx, r8
.text:0000000000005693                 sub     rsp, 28h
.text:0000000000005697                 test    rsi, rsi
.text:000000000000569A                 jz      loc_57B8
.text:00000000000056A0                 mov     r8, rdx
.text:00000000000056A3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000056AA                 mov     r9, rcx
.text:00000000000056AD                 xor     eax, eax
.text:00000000000056AF                 mov     rcx, rsi
.text:00000000000056B2                 mov     esi, 1
.text:00000000000056B7                 call    ___fprintf_chk
.text:00000000000056BC
.text:00000000000056BC loc_56BC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000056BC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000056C3                 xor     edi, edi        ; domainname
.text:00000000000056C5                 mov     edx, 5          ; category
.text:00000000000056CA                 call    _dcgettext
.text:00000000000056CF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000056D6                 mov     rcx, rax
.text:00000000000056D9                 mov     r8d, 7E3h
.text:00000000000056DF                 mov     esi, 1
.text:00000000000056E4                 mov     rdi, rbp
.text:00000000000056E7                 xor     eax, eax
.text:00000000000056E9                 call    ___fprintf_chk
.text:00000000000056EE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000056F5                 xor     edi, edi        ; domainname
.text:00000000000056F7                 mov     edx, 5          ; category
.text:00000000000056FC                 call    _dcgettext
.text:0000000000005701                 mov     rsi, rbp        ; stream
.text:0000000000005704                 mov     rdi, rax        ; s
.text:0000000000005707                 call    _fputs_unlocked
.text:000000000000570C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005710                 ja      def_5724        ; jumptable 0000000000005724 default case
.text:0000000000005716                 lea     rdx, jpt_5724
.text:000000000000571D                 movsxd  rax, ds:(jpt_5724 - 78C4h)[rdx+r12*4]
.text:0000000000005721                 add     rax, rdx
.text:0000000000005724                 jmp     rax             ; switch jump
.text:0000000000005724 ; ---------------------------------------------------------------------------
.text:0000000000005726                 align 10h
.text:0000000000005730
.text:0000000000005730 loc_5730:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005730                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005730                 mov     r9, [rbx+38h]   ; jumptable 0000000000005724 case 8
.text:0000000000005734                 mov     rax, [rbx+10h]
.text:0000000000005738                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000573F                 mov     r8, [rbx+8]
.text:0000000000005743                 mov     edx, 5          ; category
.text:0000000000005748                 xor     edi, edi        ; domainname
.text:000000000000574A                 mov     r13, [rbx+30h]
.text:000000000000574E                 mov     r12, [rbx+28h]
.text:0000000000005752                 mov     [rsp+58h+var_48], r9
.text:0000000000005757                 mov     r15, [rbx+20h]
.text:000000000000575B                 mov     r14, [rbx+18h]
.text:000000000000575F                 mov     [rsp+58h+var_58], rax
.text:0000000000005763                 mov     [rsp+58h+var_50], r8
.text:0000000000005768                 mov     rbx, [rbx]
.text:000000000000576B                 call    _dcgettext
.text:0000000000005770                 sub     rsp, 8
.text:0000000000005774
.text:0000000000005774 loc_5774:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005774                 mov     r9, [rsp+60h+var_48]
.text:0000000000005779                 mov     rdx, rax
.text:000000000000577C                 mov     rcx, rbx
.text:000000000000577F                 mov     esi, 1
.text:0000000000005784                 mov     rdi, rbp
.text:0000000000005787                 xor     eax, eax
.text:0000000000005789                 push    r9
.text:000000000000578B                 push    r13
.text:000000000000578D                 push    r12
.text:000000000000578F                 push    r15
.text:0000000000005791                 push    r14
.text:0000000000005793                 mov     r9, [rsp+88h+var_58]
.text:0000000000005798                 mov     r8, [rsp+88h+var_50]
.text:000000000000579D                 call    ___fprintf_chk
.text:00000000000057A2                 add     rsp, 30h
.text:00000000000057A6
.text:00000000000057A6 loc_57A6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000057A6                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:00000000000057A6                 add     rsp, 28h        ; jumptable 0000000000005724 case 0
.text:00000000000057AA                 pop     rbx
.text:00000000000057AB                 pop     rbp
.text:00000000000057AC                 pop     r12
.text:00000000000057AE                 pop     r13
.text:00000000000057B0                 pop     r14
.text:00000000000057B2                 pop     r15
.text:00000000000057B4                 retn
.text:00000000000057B4 ; ---------------------------------------------------------------------------
.text:00000000000057B5                 align 8
.text:00000000000057B8
.text:00000000000057B8 loc_57B8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000057B8                 mov     r8, rcx
.text:00000000000057BB                 mov     rcx, rdx
.text:00000000000057BE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:00000000000057C5                 mov     esi, 1
.text:00000000000057CA                 xor     eax, eax
.text:00000000000057CC                 call    ___fprintf_chk
.text:00000000000057D1                 jmp     loc_56BC
.text:00000000000057D1 ; ---------------------------------------------------------------------------
.text:00000000000057D6                 align 20h
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000057E0                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:00000000000057E0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005724 case 9
.text:00000000000057E4                 mov     r9, [rbx+38h]
.text:00000000000057E8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000057EF                 mov     rax, [rbx+10h]
.text:00000000000057F3                 mov     r8, [rbx+8]
.text:00000000000057F7                 mov     edx, 5          ; category
.text:00000000000057FC                 mov     r13, [rbx+30h]
.text:0000000000005800                 mov     r12, [rbx+28h]
.text:0000000000005804                 mov     r15, [rbx+20h]
.text:0000000000005808                 mov     r14, [rbx+18h]
.text:000000000000580C                 mov     rbx, [rbx]
.text:000000000000580F                 mov     [rsp+58h+var_40], r10
.text:0000000000005814                 mov     [rsp+58h+var_48], r9
.text:0000000000005819                 mov     [rsp+58h+var_58], rax
.text:000000000000581D                 mov     [rsp+58h+var_50], r8
.text:0000000000005822
.text:0000000000005822 loc_5822:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005822                 xor     edi, edi        ; domainname
.text:0000000000005824                 call    _dcgettext
.text:0000000000005829                 mov     r10, [rsp+58h+var_40]
.text:000000000000582E                 push    r10
.text:0000000000005830                 jmp     loc_5774
.text:0000000000005830 ; ---------------------------------------------------------------------------
.text:0000000000005835                 align 8
.text:0000000000005838
.text:0000000000005838 loc_5838:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005838                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005838                 mov     rbx, [rbx]      ; jumptable 0000000000005724 case 1
.text:000000000000583B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005842                 mov     edx, 5          ; category
.text:0000000000005847                 xor     edi, edi        ; domainname
.text:0000000000005849                 call    _dcgettext
.text:000000000000584E                 add     rsp, 28h
.text:0000000000005852                 mov     rcx, rbx
.text:0000000000005855                 mov     rdi, rbp
.text:0000000000005858                 pop     rbx
.text:0000000000005859                 pop     rbp
.text:000000000000585A                 pop     r12
.text:000000000000585C                 pop     r13
.text:000000000000585E                 pop     r14
.text:0000000000005860                 pop     r15
.text:0000000000005862                 mov     rdx, rax
.text:0000000000005865                 mov     esi, 1
.text:000000000000586A                 xor     eax, eax
.text:000000000000586C                 jmp     ___fprintf_chk
.text:000000000000586C ; ---------------------------------------------------------------------------
.text:0000000000005871                 align 8
.text:0000000000005878
.text:0000000000005878 loc_5878:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005878                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005878                 mov     r12, [rbx+8]    ; jumptable 0000000000005724 case 2
.text:000000000000587C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005883                 mov     rbx, [rbx]
.text:0000000000005886                 mov     edx, 5          ; category
.text:000000000000588B                 xor     edi, edi        ; domainname
.text:000000000000588D                 call    _dcgettext
.text:0000000000005892                 add     rsp, 28h
.text:0000000000005896                 mov     r8, r12
.text:0000000000005899                 mov     rcx, rbx
.text:000000000000589C                 mov     rdi, rbp
.text:000000000000589F                 mov     rdx, rax
.text:00000000000058A2                 mov     esi, 1
.text:00000000000058A7                 pop     rbx
.text:00000000000058A8                 pop     rbp
.text:00000000000058A9                 pop     r12
.text:00000000000058AB                 pop     r13
.text:00000000000058AD                 pop     r14
.text:00000000000058AF                 pop     r15
.text:00000000000058B1                 xor     eax, eax
.text:00000000000058B3                 jmp     ___fprintf_chk
.text:00000000000058B3 ; ---------------------------------------------------------------------------
.text:00000000000058B8                 align 20h
.text:00000000000058C0
.text:00000000000058C0 loc_58C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000058C0                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:00000000000058C0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005724 case 3
.text:00000000000058C4                 mov     r12, [rbx+8]
.text:00000000000058C8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000058CF                 mov     rbx, [rbx]
.text:00000000000058D2                 mov     edx, 5          ; category
.text:00000000000058D7                 xor     edi, edi        ; domainname
.text:00000000000058D9                 call    _dcgettext
.text:00000000000058DE                 add     rsp, 28h
.text:00000000000058E2                 mov     r9, r13
.text:00000000000058E5                 mov     r8, r12
.text:00000000000058E8                 mov     rcx, rbx
.text:00000000000058EB                 mov     rdi, rbp
.text:00000000000058EE                 mov     rdx, rax
.text:00000000000058F1                 pop     rbx
.text:00000000000058F2                 pop     rbp
.text:00000000000058F3                 pop     r12
.text:00000000000058F5                 pop     r13
.text:00000000000058F7                 pop     r14
.text:00000000000058F9                 pop     r15
.text:00000000000058FB                 mov     esi, 1
.text:0000000000005900                 xor     eax, eax
.text:0000000000005902                 jmp     ___fprintf_chk
.text:0000000000005902 ; ---------------------------------------------------------------------------
.text:0000000000005907                 align 10h
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005910                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005910                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005724 case 4
.text:0000000000005917                 mov     edx, 5          ; category
.text:000000000000591C                 xor     edi, edi        ; domainname
.text:000000000000591E                 mov     r14, [rbx+18h]
.text:0000000000005922                 mov     r13, [rbx+10h]
.text:0000000000005926                 mov     r12, [rbx+8]
.text:000000000000592A                 mov     rbx, [rbx]
.text:000000000000592D                 call    _dcgettext
.text:0000000000005932                 sub     rsp, 8
.text:0000000000005936
.text:0000000000005936 loc_5936:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005936                 push    r14
.text:0000000000005938                 mov     rdx, rax
.text:000000000000593B                 mov     r9, r13
.text:000000000000593E                 mov     r8, r12
.text:0000000000005941                 mov     rcx, rbx
.text:0000000000005944                 mov     rdi, rbp
.text:0000000000005947                 mov     esi, 1
.text:000000000000594C                 xor     eax, eax
.text:000000000000594E                 call    ___fprintf_chk
.text:0000000000005953                 pop     rax
.text:0000000000005954                 pop     rdx
.text:0000000000005955                 add     rsp, 28h
.text:0000000000005959                 pop     rbx
.text:000000000000595A                 pop     rbp
.text:000000000000595B                 pop     r12
.text:000000000000595D                 pop     r13
.text:000000000000595F                 pop     r14
.text:0000000000005961                 pop     r15
.text:0000000000005963                 retn
.text:0000000000005963 ; ---------------------------------------------------------------------------
.text:0000000000005964                 align 8
.text:0000000000005968
.text:0000000000005968 loc_5968:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005968                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005968                 mov     r15, [rbx+20h]  ; jumptable 0000000000005724 case 5
.text:000000000000596C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005973                 mov     edx, 5          ; category
.text:0000000000005978                 xor     edi, edi        ; domainname
.text:000000000000597A                 mov     r14, [rbx+18h]
.text:000000000000597E                 mov     r13, [rbx+10h]
.text:0000000000005982                 mov     r12, [rbx+8]
.text:0000000000005986                 mov     rbx, [rbx]
.text:0000000000005989                 call    _dcgettext
.text:000000000000598E                 push    r15
.text:0000000000005990                 jmp     short loc_5936
.text:0000000000005990 ; ---------------------------------------------------------------------------
.text:0000000000005992                 align 8
.text:0000000000005998
.text:0000000000005998 loc_5998:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005998                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005998                 mov     r8, [rbx+8]     ; jumptable 0000000000005724 case 6
.text:000000000000599C                 mov     r12, [rbx+28h]
.text:00000000000059A0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000059A7                 mov     r15, [rbx+20h]
.text:00000000000059AB                 mov     r14, [rbx+18h]
.text:00000000000059AF                 mov     edx, 5          ; category
.text:00000000000059B4                 mov     r13, [rbx+10h]
.text:00000000000059B8                 xor     edi, edi        ; domainname
.text:00000000000059BA                 mov     rbx, [rbx]
.text:00000000000059BD                 mov     [rsp+58h+var_58], r8
.text:00000000000059C1                 call    _dcgettext
.text:00000000000059C6                 sub     rsp, 8
.text:00000000000059CA                 mov     r9, r13
.text:00000000000059CD                 push    r12
.text:00000000000059CF                 push    r15
.text:00000000000059D1                 push    r14
.text:00000000000059D3
.text:00000000000059D3 loc_59D3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000059D3                 mov     r8, [rsp+78h+var_58]
.text:00000000000059D8                 mov     rcx, rbx
.text:00000000000059DB                 mov     rdx, rax
.text:00000000000059DE                 mov     rdi, rbp
.text:00000000000059E1                 mov     esi, 1
.text:00000000000059E6                 xor     eax, eax
.text:00000000000059E8                 call    ___fprintf_chk
.text:00000000000059ED                 add     rsp, 20h
.text:00000000000059F1                 add     rsp, 28h
.text:00000000000059F5                 pop     rbx
.text:00000000000059F6                 pop     rbp
.text:00000000000059F7                 pop     r12
.text:00000000000059F9                 pop     r13
.text:00000000000059FB                 pop     r14
.text:00000000000059FD                 pop     r15
.text:00000000000059FF                 retn
.text:0000000000005A00 ; ---------------------------------------------------------------------------
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005A00                                         ; DATA XREF: .rodata:jpt_5724↓o
.text:0000000000005A00                 mov     r9, [rbx+10h]   ; jumptable 0000000000005724 case 7
.text:0000000000005A04                 mov     r13, [rbx+30h]
.text:0000000000005A08                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000005A0F                 mov     r12, [rbx+28h]
.text:0000000000005A13                 mov     r15, [rbx+20h]
.text:0000000000005A17                 mov     edx, 5          ; category
.text:0000000000005A1C                 mov     r14, [rbx+18h]
.text:0000000000005A20                 mov     r8, [rbx+8]
.text:0000000000005A24                 xor     edi, edi        ; domainname
.text:0000000000005A26                 mov     [rsp+58h+var_50], r9
.text:0000000000005A2B                 mov     rbx, [rbx]
.text:0000000000005A2E                 mov     [rsp+58h+var_58], r8
.text:0000000000005A32                 call    _dcgettext
.text:0000000000005A37                 push    r13
.text:0000000000005A39                 push    r12
.text:0000000000005A3B                 push    r15
.text:0000000000005A3D                 push    r14
.text:0000000000005A3F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005A44                 jmp     short loc_59D3
.text:0000000000005A44 ; ---------------------------------------------------------------------------
.text:0000000000005A46                 align 10h
.text:0000000000005A50
.text:0000000000005A50 def_5724:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005A50                 mov     r10, [rbx+40h]  ; jumptable 0000000000005724 default case
.text:0000000000005A54                 mov     r9, [rbx+38h]
.text:0000000000005A58                 mov     edx, 5
.text:0000000000005A5D                 mov     rax, [rbx+10h]
.text:0000000000005A61                 mov     r8, [rbx+8]
.text:0000000000005A65                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005A6C                 mov     r13, [rbx+30h]
.text:0000000000005A70                 mov     r12, [rbx+28h]
.text:0000000000005A74                 mov     r15, [rbx+20h]
.text:0000000000005A78                 mov     r14, [rbx+18h]
.text:0000000000005A7C                 mov     [rsp+58h+var_40], r10
.text:0000000000005A81                 mov     [rsp+58h+var_48], r9
.text:0000000000005A86                 mov     [rsp+58h+var_58], rax
.text:0000000000005A8A                 mov     [rsp+58h+var_50], r8
.text:0000000000005A8F                 mov     rbx, [rbx]
.text:0000000000005A92                 jmp     loc_5822
.text:0000000000005A92 ; } // starts at 5680
.text:0000000000005A92 version_etc_arn endp
.text:0000000000005A92
.text:0000000000005A92 ; ---------------------------------------------------------------------------
.text:0000000000005A97                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005AA0                 public version_etc_ar
.text:0000000000005AA0 version_etc_ar  proc near
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 xor     r9d, r9d
.text:0000000000005AA3                 cmp     qword ptr [r8], 0
.text:0000000000005AA7                 jz      short loc_5ABB
.text:0000000000005AA9                 nop     dword ptr [rax+00000000h]
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005AB0                 add     r9, 1
.text:0000000000005AB4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005AB9                 jnz     short loc_5AB0
.text:0000000000005ABB
.text:0000000000005ABB loc_5ABB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000005ABB                 jmp     version_etc_arn
.text:0000000000005ABB ; } // starts at 5AA0
.text:0000000000005ABB version_etc_ar  endp
.text:0000000000005ABB
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0 ; Attributes: info_from_lumina
.text:0000000000005AC0
.text:0000000000005AC0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005AC0                 public version_etc_va
.text:0000000000005AC0 version_etc_va  proc near
.text:0000000000005AC0
.text:0000000000005AC0 authtab         = qword ptr -68h
.text:0000000000005AC0 var_10          = qword ptr -10h
.text:0000000000005AC0
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 sub     rsp, 68h
.text:0000000000005AC4                 mov     r10, r8
.text:0000000000005AC7                 xor     r9d, r9d
.text:0000000000005ACA                 mov     rax, fs:28h
.text:0000000000005AD3                 mov     [rsp+68h+var_10], rax
.text:0000000000005AD8                 xor     eax, eax
.text:0000000000005ADA                 mov     r8, rsp
.text:0000000000005ADD                 nop     dword ptr [rax]
.text:0000000000005AE0
.text:0000000000005AE0 loc_5AE0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005AE0                 mov     eax, [r10]
.text:0000000000005AE3                 cmp     eax, 2Fh ; '/'
.text:0000000000005AE6                 ja      short loc_5B2A
.text:0000000000005AE8                 mov     r11d, eax
.text:0000000000005AEB                 add     r11, [r10+10h]
.text:0000000000005AEF                 add     eax, 8
.text:0000000000005AF2                 mov     [r10], eax
.text:0000000000005AF5
.text:0000000000005AF5 loc_5AF5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005AF5                 mov     rax, [r11]
.text:0000000000005AF8                 test    rax, rax
.text:0000000000005AFB                 mov     [r8+r9*8], rax
.text:0000000000005AFF                 jz      short loc_5B0B
.text:0000000000005B01                 add     r9, 1
.text:0000000000005B05                 cmp     r9, 0Ah
.text:0000000000005B09                 jnz     short loc_5AE0
.text:0000000000005B0B
.text:0000000000005B0B loc_5B0B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000005B0B                 call    version_etc_arn
.text:0000000000005B10                 mov     rax, [rsp+68h+var_10]
.text:0000000000005B15                 xor     rax, fs:28h
.text:0000000000005B1E                 jnz     short loc_5B25
.text:0000000000005B20                 add     rsp, 68h
.text:0000000000005B24                 retn
.text:0000000000005B25 ; ---------------------------------------------------------------------------
.text:0000000000005B25
.text:0000000000005B25 loc_5B25:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005B25                 call    ___stack_chk_fail
.text:0000000000005B2A ; ---------------------------------------------------------------------------
.text:0000000000005B2A
.text:0000000000005B2A loc_5B2A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000005B2A                 mov     r11, [r10+8]
.text:0000000000005B2E                 lea     rax, [r11+8]
.text:0000000000005B32                 mov     [r10+8], rax
.text:0000000000005B36                 jmp     short loc_5AF5
.text:0000000000005B36 ; } // starts at 5AC0
.text:0000000000005B36 version_etc_va  endp
.text:0000000000005B36
.text:0000000000005B36 ; ---------------------------------------------------------------------------
.text:0000000000005B38                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40 ; Attributes: info_from_lumina
.text:0000000000005B40
.text:0000000000005B40 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005B40                 public version_etc
.text:0000000000005B40 version_etc     proc near               ; CODE XREF: main+182↑p
.text:0000000000005B40
.text:0000000000005B40 var_C0          = dword ptr -0C0h
.text:0000000000005B40 var_B8          = qword ptr -0B8h
.text:0000000000005B40 var_B0          = qword ptr -0B0h
.text:0000000000005B40 var_A8          = byte ptr -0A8h
.text:0000000000005B40 var_50          = qword ptr -50h
.text:0000000000005B40 var_48          = byte ptr -48h
.text:0000000000005B40 var_28          = qword ptr -28h
.text:0000000000005B40 var_20          = qword ptr -20h
.text:0000000000005B40 arg_0           = byte ptr  8
.text:0000000000005B40
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 push    rbp
.text:0000000000005B41                 push    rbx
.text:0000000000005B42                 mov     r10d, 20h ; ' '
.text:0000000000005B48                 xor     r11d, r11d
.text:0000000000005B4B                 sub     rsp, 0B8h
.text:0000000000005B52                 mov     rax, fs:28h
.text:0000000000005B5B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005B60                 xor     eax, eax
.text:0000000000005B62                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000005B6A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005B72                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000005B7A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000005B7F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005B87                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000005B8F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005B94                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000005B9C                 xor     r9d, r9d
.text:0000000000005B9F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005BA4                 mov     rbp, rax
.text:0000000000005BA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005BB0
.text:0000000000005BB0 loc_5BB0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005BB0                 cmp     r10d, 2Fh ; '/'
.text:0000000000005BB4                 ja      short loc_5C0C
.text:0000000000005BB6                 mov     eax, r10d
.text:0000000000005BB9                 mov     r11d, 1
.text:0000000000005BBF                 add     r10d, 8
.text:0000000000005BC3                 add     rax, rbp
.text:0000000000005BC6
.text:0000000000005BC6 loc_5BC6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005BC6                 mov     rax, [rax]
.text:0000000000005BC9                 test    rax, rax
.text:0000000000005BCC                 mov     [r8+r9*8], rax
.text:0000000000005BD0                 jz      short loc_5BDC
.text:0000000000005BD2                 add     r9, 1
.text:0000000000005BD6                 cmp     r9, 0Ah
.text:0000000000005BDA                 jnz     short loc_5BB0
.text:0000000000005BDC
.text:0000000000005BDC loc_5BDC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000005BDC                 test    r11b, r11b
.text:0000000000005BDF                 jnz     short loc_5C05
.text:0000000000005BE1
.text:0000000000005BE1 loc_5BE1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005BE1                 call    version_etc_arn
.text:0000000000005BE6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000005BEB                 xor     rax, fs:28h
.text:0000000000005BF4                 jnz     short loc_5C00
.text:0000000000005BF6                 add     rsp, 0B8h
.text:0000000000005BFD                 pop     rbx
.text:0000000000005BFE                 pop     rbp
.text:0000000000005BFF                 retn
.text:0000000000005C00 ; ---------------------------------------------------------------------------
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005C00                 call    ___stack_chk_fail
.text:0000000000005C05 ; ---------------------------------------------------------------------------
.text:0000000000005C05
.text:0000000000005C05 loc_5C05:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005C05                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000005C0A                 jmp     short loc_5BE1
.text:0000000000005C0C ; ---------------------------------------------------------------------------
.text:0000000000005C0C
.text:0000000000005C0C loc_5C0C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000005C0C                 mov     rax, rbx
.text:0000000000005C0F                 add     rbx, 8
.text:0000000000005C13                 jmp     short loc_5BC6
.text:0000000000005C13 ; } // starts at 5B40
.text:0000000000005C13 version_etc     endp
.text:0000000000005C13
.text:0000000000005C13 ; ---------------------------------------------------------------------------
.text:0000000000005C15                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20 ; Attributes: info_from_lumina
.text:0000000000005C20
.text:0000000000005C20 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005C20                 public emit_bug_reporting_address
.text:0000000000005C20 emit_bug_reporting_address proc near
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 push    rbx
.text:0000000000005C21                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005C28                 mov     edx, 5          ; category
.text:0000000000005C2D                 xor     edi, edi        ; domainname
.text:0000000000005C2F                 call    _dcgettext
.text:0000000000005C34                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000005C3B                 mov     rsi, rax
.text:0000000000005C3E                 mov     edi, 1
.text:0000000000005C43                 xor     eax, eax
.text:0000000000005C45                 call    ___printf_chk
.text:0000000000005C4A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005C51                 mov     edx, 5          ; category
.text:0000000000005C56                 xor     edi, edi        ; domainname
.text:0000000000005C58                 call    _dcgettext
.text:0000000000005C5D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005C64                 lea     rdx, unk_6928
.text:0000000000005C6B                 mov     rsi, rax
.text:0000000000005C6E                 mov     edi, 1
.text:0000000000005C73                 xor     eax, eax
.text:0000000000005C75                 call    ___printf_chk
.text:0000000000005C7A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005C81                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005C88                 xor     edi, edi        ; domainname
.text:0000000000005C8A                 mov     edx, 5          ; category
.text:0000000000005C8F                 call    _dcgettext
.text:0000000000005C94                 mov     rsi, rbx        ; stream
.text:0000000000005C97                 mov     rdi, rax        ; s
.text:0000000000005C9A                 pop     rbx
.text:0000000000005C9B                 jmp     _fputs_unlocked
.text:0000000000005C9B ; } // starts at 5C20
.text:0000000000005C9B emit_bug_reporting_address endp
.text:0000000000005C9B
.text:0000000000005CA0
.text:0000000000005CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA0
.text:0000000000005CA0
.text:0000000000005CA0                 public xmalloc
.text:0000000000005CA0 xmalloc         proc near               ; CODE XREF: main+764↑p
.text:0000000000005CA0                                         ; main+824↑p ...
.text:0000000000005CA0 ; __unwind {
.text:0000000000005CA0                 push    rbx
.text:0000000000005CA1                 mov     rbx, rdi
.text:0000000000005CA4                 call    _malloc
.text:0000000000005CA9                 test    rax, rax
.text:0000000000005CAC                 jnz     short loc_5CB3
.text:0000000000005CAE                 test    rbx, rbx
.text:0000000000005CB1                 jnz     short loc_5CB5
.text:0000000000005CB3
.text:0000000000005CB3 loc_5CB3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005CB3                 pop     rbx
.text:0000000000005CB4                 retn
.text:0000000000005CB5 ; ---------------------------------------------------------------------------
.text:0000000000005CB5
.text:0000000000005CB5 loc_5CB5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005CB5                 call    xalloc_die
.text:0000000000005CB5 ; } // starts at 5CA0
.text:0000000000005CB5 xmalloc         endp
.text:0000000000005CB5
.text:0000000000005CB5 ; ---------------------------------------------------------------------------
.text:0000000000005CBA                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CC0
.text:0000000000005CC0 ; Attributes: info_from_lumina
.text:0000000000005CC0
.text:0000000000005CC0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005CC0                 public xnmalloc
.text:0000000000005CC0 xnmalloc        proc near
.text:0000000000005CC0 ; __unwind {
.text:0000000000005CC0                 mov     rax, rdi
.text:0000000000005CC3                 mul     rsi
.text:0000000000005CC6                 mov     rdi, rax
.text:0000000000005CC9                 seto    al
.text:0000000000005CCC                 test    rdi, rdi
.text:0000000000005CCF                 js      short loc_5CDB
.text:0000000000005CD1                 movzx   eax, al
.text:0000000000005CD4                 test    rax, rax
.text:0000000000005CD7                 jnz     short loc_5CDB
.text:0000000000005CD9                 jmp     short xmalloc
.text:0000000000005CDB ; ---------------------------------------------------------------------------
.text:0000000000005CDB
.text:0000000000005CDB loc_5CDB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000005CDB                                         ; xnmalloc+17↑j
.text:0000000000005CDB                 sub     rsp, 8
.text:0000000000005CDF                 call    xalloc_die
.text:0000000000005CDF ; } // starts at 5CC0
.text:0000000000005CDF xnmalloc        endp
.text:0000000000005CDF
.text:0000000000005CDF ; ---------------------------------------------------------------------------
.text:0000000000005CE4                 align 10h
.text:0000000000005CF0
.text:0000000000005CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CF0
.text:0000000000005CF0
.text:0000000000005CF0                 public xcharalloc
.text:0000000000005CF0 xcharalloc      proc near
.text:0000000000005CF0 ; __unwind {
.text:0000000000005CF0                 jmp     short xmalloc
.text:0000000000005CF0 ; } // starts at 5CF0
.text:0000000000005CF0 xcharalloc      endp
.text:0000000000005CF0
.text:0000000000005CF0 ; ---------------------------------------------------------------------------
.text:0000000000005CF2                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00 ; Attributes: info_from_lumina
.text:0000000000005D00
.text:0000000000005D00 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005D00                 public xrealloc
.text:0000000000005D00 xrealloc        proc near               ; CODE XREF: main+64A↑p
.text:0000000000005D00                                         ; quotearg_n_options+6E↑p ...
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 test    rsi, rsi
.text:0000000000005D03                 push    rbx
.text:0000000000005D04                 mov     rbx, rsi
.text:0000000000005D07                 jnz     short loc_5D0E
.text:0000000000005D09                 test    rdi, rdi
.text:0000000000005D0C                 jnz     short loc_5D28
.text:0000000000005D0E
.text:0000000000005D0E loc_5D0E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000005D0E                 mov     rsi, rbx        ; size
.text:0000000000005D11                 call    _realloc
.text:0000000000005D16                 test    rax, rax
.text:0000000000005D19                 jnz     short loc_5D20
.text:0000000000005D1B                 test    rbx, rbx
.text:0000000000005D1E                 jnz     short loc_5D31
.text:0000000000005D20
.text:0000000000005D20 loc_5D20:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005D20                 pop     rbx
.text:0000000000005D21                 retn
.text:0000000000005D21 ; ---------------------------------------------------------------------------
.text:0000000000005D22                 align 8
.text:0000000000005D28
.text:0000000000005D28 loc_5D28:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005D28                 call    _free
.text:0000000000005D2D                 xor     eax, eax
.text:0000000000005D2F                 pop     rbx
.text:0000000000005D30                 retn
.text:0000000000005D31 ; ---------------------------------------------------------------------------
.text:0000000000005D31
.text:0000000000005D31 loc_5D31:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005D31                 call    xalloc_die
.text:0000000000005D31 ; } // starts at 5D00
.text:0000000000005D31 xrealloc        endp
.text:0000000000005D31
.text:0000000000005D31 ; ---------------------------------------------------------------------------
.text:0000000000005D36                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40 ; Attributes: info_from_lumina
.text:0000000000005D40
.text:0000000000005D40 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005D40                 public xnrealloc
.text:0000000000005D40 xnrealloc       proc near
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 mov     rax, rsi
.text:0000000000005D43                 mul     rdx
.text:0000000000005D46                 mov     rsi, rax
.text:0000000000005D49                 seto    al
.text:0000000000005D4C                 test    rsi, rsi
.text:0000000000005D4F                 js      short loc_5D5B
.text:0000000000005D51                 movzx   eax, al
.text:0000000000005D54                 test    rax, rax
.text:0000000000005D57                 jnz     short loc_5D5B
.text:0000000000005D59                 jmp     short xrealloc
.text:0000000000005D5B ; ---------------------------------------------------------------------------
.text:0000000000005D5B
.text:0000000000005D5B loc_5D5B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005D5B                                         ; xnrealloc+17↑j
.text:0000000000005D5B                 sub     rsp, 8
.text:0000000000005D5F                 call    xalloc_die
.text:0000000000005D5F ; } // starts at 5D40
.text:0000000000005D5F xnrealloc       endp
.text:0000000000005D5F
.text:0000000000005D5F ; ---------------------------------------------------------------------------
.text:0000000000005D64                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70 ; Attributes: info_from_lumina
.text:0000000000005D70
.text:0000000000005D70 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005D70                 public x2nrealloc
.text:0000000000005D70 x2nrealloc      proc near
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 test    rdi, rdi
.text:0000000000005D73                 mov     r9, rdx
.text:0000000000005D76                 mov     rcx, [rsi]
.text:0000000000005D79                 jz      short loc_5DB0
.text:0000000000005D7B                 xor     edx, edx
.text:0000000000005D7D                 mov     rax, 5555555555555554h
.text:0000000000005D87                 div     r9
.text:0000000000005D8A                 cmp     rax, rcx
.text:0000000000005D8D                 jbe     short loc_5DCB
.text:0000000000005D8F                 mov     rax, rcx
.text:0000000000005D92                 shr     rax, 1
.text:0000000000005D95                 lea     rcx, [rax+rcx+1]
.text:0000000000005D9A
.text:0000000000005D9A loc_5D9A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005D9A                 mov     [rsi], rcx
.text:0000000000005D9D                 imul    rcx, r9
.text:0000000000005DA1                 mov     rsi, rcx
.text:0000000000005DA4                 jmp     xrealloc
.text:0000000000005DA4 ; ---------------------------------------------------------------------------
.text:0000000000005DA9                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 loc_5DB0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005DB0                 test    rcx, rcx
.text:0000000000005DB3                 jz      short loc_5DD8
.text:0000000000005DB5
.text:0000000000005DB5 loc_5DB5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005DB5                 mov     rax, rcx
.text:0000000000005DB8                 mul     r9
.text:0000000000005DBB                 seto    dl
.text:0000000000005DBE                 test    rax, rax
.text:0000000000005DC1                 movzx   edx, dl
.text:0000000000005DC4                 js      short loc_5DCB
.text:0000000000005DC6                 test    rdx, rdx
.text:0000000000005DC9                 jz      short loc_5D9A
.text:0000000000005DCB
.text:0000000000005DCB loc_5DCB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005DCB                                         ; x2nrealloc+54↑j
.text:0000000000005DCB                 sub     rsp, 8
.text:0000000000005DCF                 call    xalloc_die
.text:0000000000005DCF ; ---------------------------------------------------------------------------
.text:0000000000005DD4                 align 8
.text:0000000000005DD8
.text:0000000000005DD8 loc_5DD8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005DD8                 xor     edx, edx
.text:0000000000005DDA                 mov     eax, 80h
.text:0000000000005DDF                 xor     r8d, r8d
.text:0000000000005DE2                 div     r9
.text:0000000000005DE5                 test    rax, rax
.text:0000000000005DE8                 setz    r8b
.text:0000000000005DEC                 lea     rcx, [r8+rax]
.text:0000000000005DF0                 jmp     short loc_5DB5
.text:0000000000005DF0 ; } // starts at 5D70
.text:0000000000005DF0 x2nrealloc      endp
.text:0000000000005DF0
.text:0000000000005DF0 ; ---------------------------------------------------------------------------
.text:0000000000005DF2                 align 20h
.text:0000000000005E00
.text:0000000000005E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E00
.text:0000000000005E00 ; Attributes: info_from_lumina
.text:0000000000005E00
.text:0000000000005E00 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005E00                 public x2realloc
.text:0000000000005E00 x2realloc       proc near
.text:0000000000005E00 ; __unwind {
.text:0000000000005E00                 test    rdi, rdi
.text:0000000000005E03                 mov     rax, [rsi]
.text:0000000000005E06                 jz      short loc_5E30
.text:0000000000005E08                 mov     rdx, 5555555555555553h
.text:0000000000005E12                 cmp     rax, rdx
.text:0000000000005E15                 ja      short loc_5E41
.text:0000000000005E17                 mov     rdx, rax
.text:0000000000005E1A                 shr     rdx, 1
.text:0000000000005E1D                 lea     rax, [rdx+rax+1]
.text:0000000000005E22
.text:0000000000005E22 loc_5E22:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005E22                 mov     [rsi], rax
.text:0000000000005E25                 mov     rsi, rax
.text:0000000000005E28                 jmp     xrealloc
.text:0000000000005E28 ; ---------------------------------------------------------------------------
.text:0000000000005E2D                 align 10h
.text:0000000000005E30
.text:0000000000005E30 loc_5E30:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005E30                 test    rax, rax
.text:0000000000005E33                 mov     edx, 80h
.text:0000000000005E38                 cmovz   rax, rdx
.text:0000000000005E3C                 test    rax, rax
.text:0000000000005E3F                 jns     short loc_5E22
.text:0000000000005E41
.text:0000000000005E41 loc_5E41:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005E41                 sub     rsp, 8
.text:0000000000005E45                 call    xalloc_die
.text:0000000000005E45 ; } // starts at 5E00
.text:0000000000005E45 x2realloc       endp
.text:0000000000005E45
.text:0000000000005E45 ; ---------------------------------------------------------------------------
.text:0000000000005E4A                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005E50                 public xzalloc
.text:0000000000005E50 xzalloc         proc near
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 push    rbx
.text:0000000000005E51                 mov     rbx, rdi
.text:0000000000005E54                 call    xmalloc
.text:0000000000005E59                 mov     rdx, rbx        ; n
.text:0000000000005E5C                 xor     esi, esi        ; c
.text:0000000000005E5E                 mov     rdi, rax        ; s
.text:0000000000005E61                 pop     rbx
.text:0000000000005E62                 jmp     _memset
.text:0000000000005E62 ; } // starts at 5E50
.text:0000000000005E62 xzalloc         endp
.text:0000000000005E62
.text:0000000000005E62 ; ---------------------------------------------------------------------------
.text:0000000000005E67                 align 10h
.text:0000000000005E70
.text:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E70
.text:0000000000005E70 ; Attributes: info_from_lumina
.text:0000000000005E70
.text:0000000000005E70 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005E70                 public xcalloc
.text:0000000000005E70 xcalloc         proc near
.text:0000000000005E70 ; __unwind {
.text:0000000000005E70                 mov     rax, rdi
.text:0000000000005E73                 sub     rsp, 8
.text:0000000000005E77                 mul     rsi
.text:0000000000005E7A                 seto    dl
.text:0000000000005E7D                 test    rax, rax
.text:0000000000005E80                 js      short loc_5E99
.text:0000000000005E82                 movzx   edx, dl
.text:0000000000005E85                 test    rdx, rdx
.text:0000000000005E88                 jnz     short loc_5E99
.text:0000000000005E8A                 call    _calloc
.text:0000000000005E8F                 test    rax, rax
.text:0000000000005E92                 jz      short loc_5E99
.text:0000000000005E94                 add     rsp, 8
.text:0000000000005E98                 retn
.text:0000000000005E99 ; ---------------------------------------------------------------------------
.text:0000000000005E99
.text:0000000000005E99 loc_5E99:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005E99                                         ; xcalloc+18↑j ...
.text:0000000000005E99                 call    xalloc_die
.text:0000000000005E99 ; } // starts at 5E70
.text:0000000000005E99 xcalloc         endp
.text:0000000000005E99
.text:0000000000005E99 ; ---------------------------------------------------------------------------
.text:0000000000005E9E                 align 20h
.text:0000000000005EA0
.text:0000000000005EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EA0
.text:0000000000005EA0 ; Attributes: info_from_lumina
.text:0000000000005EA0
.text:0000000000005EA0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005EA0                 public xmemdup
.text:0000000000005EA0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005EA0                                         ; xstrdup+11↓j
.text:0000000000005EA0 ; __unwind {
.text:0000000000005EA0                 push    rbp
.text:0000000000005EA1                 push    rbx
.text:0000000000005EA2                 mov     rbp, rdi
.text:0000000000005EA5                 mov     rdi, rsi
.text:0000000000005EA8                 mov     rbx, rsi
.text:0000000000005EAB                 sub     rsp, 8
.text:0000000000005EAF                 call    xmalloc
.text:0000000000005EB4                 add     rsp, 8
.text:0000000000005EB8                 mov     rdx, rbx        ; n
.text:0000000000005EBB                 mov     rsi, rbp        ; src
.text:0000000000005EBE                 pop     rbx
.text:0000000000005EBF                 pop     rbp
.text:0000000000005EC0                 mov     rdi, rax        ; dest
.text:0000000000005EC3                 jmp     _memcpy
.text:0000000000005EC3 ; } // starts at 5EA0
.text:0000000000005EC3 xmemdup         endp
.text:0000000000005EC3
.text:0000000000005EC3 ; ---------------------------------------------------------------------------
.text:0000000000005EC8                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0
.text:0000000000005ED0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005ED0                 public xstrdup
.text:0000000000005ED0 xstrdup         proc near
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 push    rbx
.text:0000000000005ED1                 mov     rbx, rdi
.text:0000000000005ED4                 call    _strlen
.text:0000000000005ED9                 mov     rdi, rbx        ; src
.text:0000000000005EDC                 lea     rsi, [rax+1]    ; n
.text:0000000000005EE0                 pop     rbx
.text:0000000000005EE1                 jmp     short xmemdup
.text:0000000000005EE1 ; } // starts at 5ED0
.text:0000000000005EE1 xstrdup         endp
.text:0000000000005EE1
.text:0000000000005EE1 ; ---------------------------------------------------------------------------
.text:0000000000005EE3                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EF0
.text:0000000000005EF0 ; Attributes: noreturn info_from_lumina
.text:0000000000005EF0
.text:0000000000005EF0 ; void __cdecl xalloc_die()
.text:0000000000005EF0                 public xalloc_die
.text:0000000000005EF0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4E66↑p
.text:0000000000005EF0                                         ; xmalloc:loc_5CB5↑p ...
.text:0000000000005EF0 ; __unwind {
.text:0000000000005EF0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005EF7                 sub     rsp, 8
.text:0000000000005EFB                 mov     edx, 5          ; category
.text:0000000000005F00                 xor     edi, edi        ; domainname
.text:0000000000005F02                 call    _dcgettext
.text:0000000000005F07                 mov     edi, cs:exit_failure ; status
.text:0000000000005F0D                 lea     rdx, format+4   ; format
.text:0000000000005F14                 mov     rcx, rax
.text:0000000000005F17                 xor     esi, esi        ; errnum
.text:0000000000005F19                 xor     eax, eax
.text:0000000000005F1B                 call    _error
.text:0000000000005F20                 call    _abort
.text:0000000000005F20 ; } // starts at 5EF0
.text:0000000000005F20 xalloc_die      endp
.text:0000000000005F20
.text:0000000000005F20 ; ---------------------------------------------------------------------------
.text:0000000000005F25                 align 10h
.text:0000000000005F30
.text:0000000000005F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F30
.text:0000000000005F30 ; Attributes: info_from_lumina
.text:0000000000005F30
.text:0000000000005F30 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000005F30                 public xnumtoumax
.text:0000000000005F30 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000005F30
.text:0000000000005F30 var_48          = qword ptr -48h
.text:0000000000005F30 var_40          = qword ptr -40h
.text:0000000000005F30 arg_0           = dword ptr  8
.text:0000000000005F30
.text:0000000000005F30 ; __unwind {
.text:0000000000005F30                 push    r15
.text:0000000000005F32                 push    r14
.text:0000000000005F34                 mov     r15, rcx
.text:0000000000005F37                 push    r13
.text:0000000000005F39                 push    r12
.text:0000000000005F3B                 mov     r14, rdx
.text:0000000000005F3E                 push    rbp
.text:0000000000005F3F                 push    rbx
.text:0000000000005F40                 mov     edx, esi
.text:0000000000005F42                 xor     esi, esi
.text:0000000000005F44                 mov     r12, rdi
.text:0000000000005F47                 mov     r13, r9
.text:0000000000005F4A                 sub     rsp, 18h
.text:0000000000005F4E                 mov     rcx, rsp
.text:0000000000005F51                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000005F55                 mov     rax, fs:28h
.text:0000000000005F5E                 mov     [rsp+48h+var_40], rax
.text:0000000000005F63                 xor     eax, eax
.text:0000000000005F65                 call    xstrtoumax
.text:0000000000005F6A                 test    eax, eax
.text:0000000000005F6C                 jnz     loc_6000
.text:0000000000005F72                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005F76                 cmp     rbp, r14
.text:0000000000005F79                 jb      short loc_5F80
.text:0000000000005F7B                 cmp     rbp, r15
.text:0000000000005F7E                 jbe     short loc_5FD4
.text:0000000000005F80
.text:0000000000005F80 loc_5F80:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000005F80                 call    ___errno_location
.text:0000000000005F85                 cmp     rbp, 40000000h
.text:0000000000005F8C                 mov     r14, rax
.text:0000000000005F8F                 sbb     eax, eax
.text:0000000000005F91                 and     eax, 0FFFFFFD7h
.text:0000000000005F94                 add     eax, 4Bh ; 'K'
.text:0000000000005F97                 mov     [r14], eax
.text:0000000000005F9A
.text:0000000000005F9A loc_5F9A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:0000000000005F9A                                         ; xnumtoumax+EA↓j ...
.text:0000000000005F9A                 mov     rdi, r12
.text:0000000000005F9D                 call    quote
.text:0000000000005FA2                 mov     esi, [r14]
.text:0000000000005FA5                 mov     r8, rax
.text:0000000000005FA8                 mov     eax, 0
.text:0000000000005FAD                 lea     rdx, format     ; "%s: %s"
.text:0000000000005FB4                 mov     rcx, r13
.text:0000000000005FB7                 cmp     esi, 16h
.text:0000000000005FBA                 cmovz   esi, eax        ; errnum
.text:0000000000005FBD                 test    ebx, ebx
.text:0000000000005FBF                 mov     eax, 1
.text:0000000000005FC4                 cmovz   ebx, eax
.text:0000000000005FC7                 xor     eax, eax
.text:0000000000005FC9                 mov     edi, ebx        ; status
.text:0000000000005FCB                 call    _error
.text:0000000000005FD0                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005FD4
.text:0000000000005FD4 loc_5FD4:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000005FD4                 mov     rdx, [rsp+48h+var_40]
.text:0000000000005FD9                 xor     rdx, fs:28h
.text:0000000000005FE2                 mov     rax, rbp
.text:0000000000005FE5                 jnz     short loc_602B
.text:0000000000005FE7                 add     rsp, 18h
.text:0000000000005FEB                 pop     rbx
.text:0000000000005FEC                 pop     rbp
.text:0000000000005FED                 pop     r12
.text:0000000000005FEF                 pop     r13
.text:0000000000005FF1                 pop     r14
.text:0000000000005FF3                 pop     r15
.text:0000000000005FF5                 retn
.text:0000000000005FF5 ; ---------------------------------------------------------------------------
.text:0000000000005FF6                 align 20h
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000006000                 mov     ebp, eax
.text:0000000000006002                 call    ___errno_location
.text:0000000000006007                 cmp     ebp, 1
.text:000000000000600A                 mov     r14, rax
.text:000000000000600D                 jz      short loc_6020
.text:000000000000600F                 cmp     ebp, 3
.text:0000000000006012                 jnz     short loc_5F9A
.text:0000000000006014                 mov     dword ptr [rax], 0
.text:000000000000601A                 jmp     loc_5F9A
.text:000000000000601A ; ---------------------------------------------------------------------------
.text:000000000000601F                 align 20h
.text:0000000000006020
.text:0000000000006020 loc_6020:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000006020                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000006026                 jmp     loc_5F9A
.text:000000000000602B ; ---------------------------------------------------------------------------
.text:000000000000602B
.text:000000000000602B loc_602B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:000000000000602B                 call    ___stack_chk_fail
.text:000000000000602B ; } // starts at 5F30
.text:000000000000602B xnumtoumax      endp
.text:000000000000602B
.text:0000000000006030
.text:0000000000006030 ; =============== S U B R O U T I N E =======================================
.text:0000000000006030
.text:0000000000006030 ; Attributes: info_from_lumina
.text:0000000000006030
.text:0000000000006030 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000006030                 public xdectoumax
.text:0000000000006030 xdectoumax      proc near               ; CODE XREF: string_to_integer+36↑j
.text:0000000000006030 ; __unwind {
.text:0000000000006030                 sub     rsp, 10h
.text:0000000000006034                 push    r9
.text:0000000000006036                 mov     r9, r8
.text:0000000000006039                 mov     r8, rcx
.text:000000000000603C                 mov     rcx, rdx
.text:000000000000603F                 mov     rdx, rsi
.text:0000000000006042                 mov     esi, 0Ah
.text:0000000000006047                 call    xnumtoumax
.text:000000000000604C                 add     rsp, 18h
.text:0000000000006050                 retn
.text:0000000000006050 ; } // starts at 6030
.text:0000000000006050 xdectoumax      endp
.text:0000000000006050
.text:0000000000006050 ; ---------------------------------------------------------------------------
.text:0000000000006051                 align 20h
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060
.text:0000000000006060 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000006060                 public xstrtoumax
.text:0000000000006060 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000006060
.text:0000000000006060 base            = dword ptr -50h
.text:0000000000006060 endptr          = qword ptr -48h
.text:0000000000006060 var_40          = qword ptr -40h
.text:0000000000006060
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 push    r15
.text:0000000000006062                 push    r14
.text:0000000000006064                 push    r13
.text:0000000000006066                 push    r12
.text:0000000000006068                 push    rbp
.text:0000000000006069                 push    rbx
.text:000000000000606A                 sub     rsp, 28h
.text:000000000000606E                 mov     rax, fs:28h
.text:0000000000006077                 mov     [rsp+58h+var_40], rax
.text:000000000000607C                 xor     eax, eax
.text:000000000000607E                 cmp     edx, 24h ; '$'
.text:0000000000006081                 ja      loc_63E5
.text:0000000000006087                 lea     rax, [rsp+58h+endptr]
.text:000000000000608C                 mov     r15, rsi
.text:000000000000608F                 test    rsi, rsi
.text:0000000000006092                 mov     rbp, rdi
.text:0000000000006095                 mov     [rsp+58h+base], edx
.text:0000000000006099                 mov     r14, rcx
.text:000000000000609C                 mov     r13, r8
.text:000000000000609F                 cmovz   r15, rax
.text:00000000000060A3                 call    ___errno_location
.text:00000000000060A8                 mov     dword ptr [rax], 0
.text:00000000000060AE                 mov     r12, rax
.text:00000000000060B1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000060B5                 call    ___ctype_b_loc
.text:00000000000060BA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000060BE                 mov     rsi, [rax]
.text:00000000000060C1                 mov     rax, rbp
.text:00000000000060C4                 jmp     short loc_60D7
.text:00000000000060C4 ; ---------------------------------------------------------------------------
.text:00000000000060C6                 align 10h
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:00000000000060D0                 add     rax, 1
.text:00000000000060D4                 movzx   ebx, byte ptr [rax]
.text:00000000000060D7
.text:00000000000060D7 loc_60D7:                               ; CODE XREF: xstrtoumax+64↑j
.text:00000000000060D7                 movzx   ecx, bl
.text:00000000000060DA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000060DF                 jnz     short loc_60D0
.text:00000000000060E1                 cmp     bl, 2Dh ; '-'
.text:00000000000060E4                 jz      short loc_6138
.text:00000000000060E6                 xor     ecx, ecx        ; group
.text:00000000000060E8                 mov     rsi, r15        ; endptr
.text:00000000000060EB                 mov     rdi, rbp        ; nptr
.text:00000000000060EE                 call    ___strtoul_internal
.text:00000000000060F3                 mov     rcx, [r15]
.text:00000000000060F6                 mov     rbx, rax
.text:00000000000060F9                 cmp     rcx, rbp
.text:00000000000060FC                 jz      short loc_6128
.text:00000000000060FE                 mov     eax, [r12]
.text:0000000000006102                 test    eax, eax
.text:0000000000006104                 jz      short loc_6168
.text:0000000000006106                 cmp     eax, 22h ; '"'
.text:0000000000006109                 mov     ebp, 1
.text:000000000000610E                 jnz     short loc_6138
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000006110                 test    r13, r13
.text:0000000000006113                 jz      short loc_611E
.text:0000000000006115                 movzx   r12d, byte ptr [rcx]
.text:0000000000006119                 test    r12b, r12b
.text:000000000000611C                 jnz     short loc_6197
.text:000000000000611E
.text:000000000000611E loc_611E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000611E                 mov     [r14], rbx
.text:0000000000006121                 jmp     short loc_613D
.text:0000000000006121 ; ---------------------------------------------------------------------------
.text:0000000000006123                 align 8
.text:0000000000006128
.text:0000000000006128 loc_6128:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000006128                 test    r13, r13
.text:000000000000612B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006130                 jnz     short loc_6170
.text:0000000000006132                 nop     word ptr [rax+rax+00h]
.text:0000000000006138
.text:0000000000006138 loc_6138:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000006138                                         ; xstrtoumax+AE↑j ...
.text:0000000000006138                 mov     ebp, 4
.text:000000000000613D
.text:000000000000613D loc_613D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000613D                                         ; xstrtoumax+217↓j ...
.text:000000000000613D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000006142                 xor     rdi, fs:28h
.text:000000000000614B                 mov     eax, ebp
.text:000000000000614D                 jnz     loc_63E0
.text:0000000000006153                 add     rsp, 28h
.text:0000000000006157                 pop     rbx
.text:0000000000006158                 pop     rbp
.text:0000000000006159                 pop     r12
.text:000000000000615B                 pop     r13
.text:000000000000615D                 pop     r14
.text:000000000000615F                 pop     r15
.text:0000000000006161                 retn
.text:0000000000006161 ; ---------------------------------------------------------------------------
.text:0000000000006162                 align 8
.text:0000000000006168
.text:0000000000006168 loc_6168:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000006168                 xor     ebp, ebp
.text:000000000000616A                 jmp     short loc_6110
.text:000000000000616A ; ---------------------------------------------------------------------------
.text:000000000000616C                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000006170                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000006175                 test    r12b, r12b
.text:0000000000006178                 jz      short loc_6138
.text:000000000000617A                 movsx   esi, r12b       ; c
.text:000000000000617E                 mov     rdi, r13        ; s
.text:0000000000006181                 xor     ebp, ebp
.text:0000000000006183                 call    _strchr
.text:0000000000006188                 test    rax, rax
.text:000000000000618B                 mov     ebx, 1
.text:0000000000006190                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006195                 jz      short loc_6138
.text:0000000000006197
.text:0000000000006197 loc_6197:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000006197                 movsx   esi, r12b       ; c
.text:000000000000619B                 mov     rdi, r13        ; s
.text:000000000000619E                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000061A3                 call    _strchr
.text:00000000000061A8                 test    rax, rax
.text:00000000000061AB                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000061B0                 jz      def_6236        ; jumptable 0000000000006236 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000061B6                 lea     eax, [r12-45h]
.text:00000000000061BB                 cmp     al, 2Fh ; '/'
.text:00000000000061BD                 ja      short loc_6210
.text:00000000000061BF                 mov     rdx, 814400308945h
.text:00000000000061C9                 bt      rdx, rax
.text:00000000000061CD                 jnb     short loc_6210
.text:00000000000061CF                 mov     esi, 30h ; '0'  ; c
.text:00000000000061D4                 mov     rdi, r13        ; s
.text:00000000000061D7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000061DC                 call    _strchr
.text:00000000000061E1                 test    rax, rax
.text:00000000000061E4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000061E9                 jz      short loc_6210
.text:00000000000061EB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000061EF                 cmp     al, 44h ; 'D'
.text:00000000000061F1                 jz      short loc_61FF
.text:00000000000061F3                 cmp     al, 69h ; 'i'
.text:00000000000061F5                 jz      loc_63C8
.text:00000000000061FB                 cmp     al, 42h ; 'B'
.text:00000000000061FD                 jnz     short loc_6210
.text:00000000000061FF
.text:00000000000061FF loc_61FF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000061FF                 mov     edi, 2
.text:0000000000006204                 mov     esi, 3E8h
.text:0000000000006209                 jmp     short loc_621A
.text:0000000000006209 ; ---------------------------------------------------------------------------
.text:000000000000620B                 align 10h
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000006210                                         ; xstrtoumax+16D↑j ...
.text:0000000000006210                 mov     edi, 1
.text:0000000000006215                 mov     esi, 400h
.text:000000000000621A
.text:000000000000621A loc_621A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000621A                                         ; xstrtoumax+37B↓j
.text:000000000000621A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000621E                 cmp     r12b, 35h
.text:0000000000006222                 ja      short def_6236  ; jumptable 0000000000006236 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006224                 lea     rdx, jpt_6236
.text:000000000000622B                 movzx   r12d, r12b
.text:000000000000622F                 movsxd  rax, ds:(jpt_6236 - 7988h)[rdx+r12*4]
.text:0000000000006233                 add     rax, rdx
.text:0000000000006236                 jmp     rax             ; switch jump
.text:0000000000006238 ; ---------------------------------------------------------------------------
.text:0000000000006238
.text:0000000000006238 loc_6238:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006238                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:0000000000006238                 mov     rax, rbx        ; jumptable 0000000000006236 cases 77,109
.text:000000000000623B                 mul     rsi
.text:000000000000623E                 jo      loc_6431
.text:0000000000006244                 xor     r8d, r8d
.text:0000000000006247
.text:0000000000006247 loc_6247:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000006247                                         ; xstrtoumax+35E↓j ...
.text:0000000000006247                 mul     rsi
.text:000000000000624A                 jo      loc_6422
.text:0000000000006250                 mov     rbx, rax
.text:0000000000006253
.text:0000000000006253 loc_6253:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000006253                 or      ebp, r8d
.text:0000000000006256                 db      2Eh
.text:0000000000006256                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006260
.text:0000000000006260 loc_6260:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006260                                         ; xstrtoumax+23B↓j ...
.text:0000000000006260                 movsxd  rdi, edi        ; jumptable 0000000000006236 case 99
.text:0000000000006263                 mov     eax, ebp
.text:0000000000006265                 add     rcx, rdi
.text:0000000000006268                 or      eax, 2
.text:000000000000626B                 mov     [r15], rcx
.text:000000000000626E                 cmp     byte ptr [rcx], 0
.text:0000000000006271                 mov     [r14], rbx
.text:0000000000006274                 cmovnz  ebp, eax
.text:0000000000006277                 jmp     loc_613D
.text:000000000000627C ; ---------------------------------------------------------------------------
.text:000000000000627C
.text:000000000000627C def_6236:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000627C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000627C                 mov     [r14], rbx      ; jumptable 0000000000006236 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000627F                 or      ebp, 2
.text:0000000000006282                 jmp     loc_613D
.text:0000000000006287 ; ---------------------------------------------------------------------------
.text:0000000000006287
.text:0000000000006287 loc_6287:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006287                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:0000000000006287                 mov     edx, 2          ; jumptable 0000000000006236 case 119
.text:000000000000628C                 mov     rax, rdx
.text:000000000000628F                 mul     rbx
.text:0000000000006292                 jo      loc_632E
.text:0000000000006298                 add     rbx, rbx
.text:000000000000629B                 jmp     short loc_6260  ; jumptable 0000000000006236 case 99
.text:000000000000629D ; ---------------------------------------------------------------------------
.text:000000000000629D
.text:000000000000629D loc_629D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000629D                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:000000000000629D                 mov     edx, 200h       ; jumptable 0000000000006236 case 98
.text:00000000000062A2                 mov     rax, rdx
.text:00000000000062A5                 mul     rbx
.text:00000000000062A8                 jo      loc_632E
.text:00000000000062AE                 shl     rbx, 9
.text:00000000000062B2                 jmp     short loc_6260  ; jumptable 0000000000006236 case 99
.text:00000000000062B4 ; ---------------------------------------------------------------------------
.text:00000000000062B4
.text:00000000000062B4 loc_62B4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000062B4                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:00000000000062B4                 mov     r8d, 7          ; jumptable 0000000000006236 case 90
.text:00000000000062BA                 xor     r9d, r9d
.text:00000000000062BD                 nop     dword ptr [rax]
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: xstrtoumax+273↓j
.text:00000000000062C0                 mov     rax, rbx
.text:00000000000062C3                 mul     rsi
.text:00000000000062C6                 mov     rbx, rax
.text:00000000000062C9                 jo      loc_645E
.text:00000000000062CF
.text:00000000000062CF loc_62CF:                               ; CODE XREF: xstrtoumax+408↓j
.text:00000000000062CF                 sub     r8d, 1
.text:00000000000062D3                 jnz     short loc_62C0
.text:00000000000062D5
.text:00000000000062D5 loc_62D5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:00000000000062D5                                         ; xstrtoumax+2BD↓j ...
.text:00000000000062D5                 or      ebp, r9d
.text:00000000000062D8                 jmp     short loc_6260  ; jumptable 0000000000006236 case 99
.text:00000000000062DA ; ---------------------------------------------------------------------------
.text:00000000000062DA
.text:00000000000062DA loc_62DA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000062DA                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:00000000000062DA                 mov     r8d, 8          ; jumptable 0000000000006236 case 89
.text:00000000000062E0                 xor     r9d, r9d
.text:00000000000062E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000062E8
.text:00000000000062E8 loc_62E8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000062E8                 mov     rax, rbx
.text:00000000000062EB                 mul     rsi
.text:00000000000062EE                 mov     rbx, rax
.text:00000000000062F1                 jo      loc_6440
.text:00000000000062F7
.text:00000000000062F7 loc_62F7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000062F7                 sub     r8d, 1
.text:00000000000062FB                 jnz     short loc_62E8
.text:00000000000062FD                 jmp     short loc_62D5
.text:00000000000062FF ; ---------------------------------------------------------------------------
.text:00000000000062FF
.text:00000000000062FF loc_62FF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000062FF                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:00000000000062FF                 mov     r8d, 4          ; jumptable 0000000000006236 cases 84,116
.text:0000000000006305                 xor     r9d, r9d
.text:0000000000006308
.text:0000000000006308 loc_6308:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000006308                 mov     rax, rbx
.text:000000000000630B                 mul     rsi
.text:000000000000630E                 mov     rbx, rax
.text:0000000000006311                 jo      loc_6413
.text:0000000000006317
.text:0000000000006317 loc_6317:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000006317                 sub     r8d, 1
.text:000000000000631B                 jnz     short loc_6308
.text:000000000000631D                 jmp     short loc_62D5
.text:000000000000631F ; ---------------------------------------------------------------------------
.text:000000000000631F
.text:000000000000631F loc_631F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000631F                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:000000000000631F                 mov     rax, rbx        ; jumptable 0000000000006236 cases 75,107
.text:0000000000006322                 mul     rsi
.text:0000000000006325                 mov     rbx, rax
.text:0000000000006328                 jno     loc_6260        ; jumptable 0000000000006236 case 99
.text:000000000000632E
.text:000000000000632E loc_632E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000632E                                         ; xstrtoumax+248↑j ...
.text:000000000000632E                 mov     ebp, 1
.text:0000000000006333                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006337                 jmp     loc_6260        ; jumptable 0000000000006236 case 99
.text:0000000000006337 ; ---------------------------------------------------------------------------
.text:000000000000633C                 align 20h
.text:0000000000006340
.text:0000000000006340 loc_6340:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006340                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:0000000000006340                 mov     r8d, 5          ; jumptable 0000000000006236 case 80
.text:0000000000006346                 xor     r9d, r9d
.text:0000000000006349
.text:0000000000006349 loc_6349:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000006349                 mov     rax, rbx
.text:000000000000634C                 mul     rsi
.text:000000000000634F                 mov     rbx, rax
.text:0000000000006352                 jo      loc_644F
.text:0000000000006358
.text:0000000000006358 loc_6358:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000006358                 sub     r8d, 1
.text:000000000000635C                 jnz     short loc_6349
.text:000000000000635E                 jmp     loc_62D5
.text:0000000000006363 ; ---------------------------------------------------------------------------
.text:0000000000006363
.text:0000000000006363 loc_6363:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006363                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:0000000000006363                 mov     r8d, 6          ; jumptable 0000000000006236 case 69
.text:0000000000006369                 xor     r9d, r9d
.text:000000000000636C
.text:000000000000636C loc_636C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000636C                 mov     rax, rbx
.text:000000000000636F                 mul     rsi
.text:0000000000006372                 mov     rbx, rax
.text:0000000000006375                 jo      loc_6404
.text:000000000000637B
.text:000000000000637B loc_637B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000637B                 sub     r8d, 1
.text:000000000000637F                 jnz     short loc_636C
.text:0000000000006381                 jmp     loc_62D5
.text:0000000000006386 ; ---------------------------------------------------------------------------
.text:0000000000006386
.text:0000000000006386 loc_6386:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000006386                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:0000000000006386                 mov     edx, 400h       ; jumptable 0000000000006236 case 66
.text:000000000000638B                 mov     rax, rdx
.text:000000000000638E                 mul     rbx
.text:0000000000006391                 jo      short loc_632E
.text:0000000000006393                 shl     rbx, 0Ah
.text:0000000000006397                 jmp     loc_6260        ; jumptable 0000000000006236 case 99
.text:000000000000639C ; ---------------------------------------------------------------------------
.text:000000000000639C
.text:000000000000639C loc_639C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000639C                                         ; DATA XREF: .rodata:jpt_6236↓o
.text:000000000000639C                 mov     rax, rbx        ; jumptable 0000000000006236 cases 71,103
.text:000000000000639F                 mul     rsi
.text:00000000000063A2                 jo      loc_646D
.text:00000000000063A8                 xor     r8d, r8d
.text:00000000000063AB
.text:00000000000063AB loc_63AB:                               ; CODE XREF: xstrtoumax+417↓j
.text:00000000000063AB                 mul     rsi
.text:00000000000063AE                 jno     loc_6247
.text:00000000000063B4                 mov     r8d, 1
.text:00000000000063BA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000063BE                 jmp     loc_6247
.text:00000000000063BE ; ---------------------------------------------------------------------------
.text:00000000000063C3                 align 8
.text:00000000000063C8
.text:00000000000063C8 loc_63C8:                               ; CODE XREF: xstrtoumax+195↑j
.text:00000000000063C8                 xor     edi, edi
.text:00000000000063CA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000063CE                 mov     esi, 400h
.text:00000000000063D3                 setz    dil
.text:00000000000063D7                 lea     edi, [rdi+rdi+1]
.text:00000000000063DB                 jmp     loc_621A
.text:00000000000063E0 ; ---------------------------------------------------------------------------
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000063E0                 call    ___stack_chk_fail
.text:00000000000063E5 ; ---------------------------------------------------------------------------
.text:00000000000063E5
.text:00000000000063E5 loc_63E5:                               ; CODE XREF: xstrtoumax+21↑j
.text:00000000000063E5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:00000000000063EC                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000063F3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000063FA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000063FF                 call    ___assert_fail
.text:0000000000006404 ; ---------------------------------------------------------------------------
.text:0000000000006404
.text:0000000000006404 loc_6404:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000006404                 mov     r9d, 1
.text:000000000000640A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000640E                 jmp     loc_637B
.text:0000000000006413 ; ---------------------------------------------------------------------------
.text:0000000000006413
.text:0000000000006413 loc_6413:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000006413                 mov     r9d, 1
.text:0000000000006419                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000641D                 jmp     loc_6317
.text:0000000000006422 ; ---------------------------------------------------------------------------
.text:0000000000006422
.text:0000000000006422 loc_6422:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000006422                 mov     r8d, 1
.text:0000000000006428                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000642C                 jmp     loc_6253
.text:0000000000006431 ; ---------------------------------------------------------------------------
.text:0000000000006431
.text:0000000000006431 loc_6431:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000006431                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006435                 mov     r8d, 1
.text:000000000000643B                 jmp     loc_6247
.text:0000000000006440 ; ---------------------------------------------------------------------------
.text:0000000000006440
.text:0000000000006440 loc_6440:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000006440                 mov     r9d, 1
.text:0000000000006446                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000644A                 jmp     loc_62F7
.text:000000000000644F ; ---------------------------------------------------------------------------
.text:000000000000644F
.text:000000000000644F loc_644F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000644F                 mov     r9d, 1
.text:0000000000006455                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006459                 jmp     loc_6358
.text:000000000000645E ; ---------------------------------------------------------------------------
.text:000000000000645E
.text:000000000000645E loc_645E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000645E                 mov     r9d, 1
.text:0000000000006464                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006468                 jmp     loc_62CF
.text:000000000000646D ; ---------------------------------------------------------------------------
.text:000000000000646D
.text:000000000000646D loc_646D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000646D                 mov     r8d, 1
.text:0000000000006473                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006477                 jmp     loc_63AB
.text:0000000000006477 ; } // starts at 6060
.text:0000000000006477 xstrtoumax      endp
.text:0000000000006477
.text:0000000000006477 ; ---------------------------------------------------------------------------
.text:000000000000647C                 align 20h
.text:0000000000006480
.text:0000000000006480 ; =============== S U B R O U T I N E =======================================
.text:0000000000006480
.text:0000000000006480 ; Attributes: info_from_lumina
.text:0000000000006480
.text:0000000000006480 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006480                 public rpl_mbrtowc
.text:0000000000006480 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006480
.text:0000000000006480 pwc             = dword ptr -34h
.text:0000000000006480 var_30          = qword ptr -30h
.text:0000000000006480
.text:0000000000006480 ; __unwind {
.text:0000000000006480                 push    r13
.text:0000000000006482                 push    r12
.text:0000000000006484                 mov     r13, rsi
.text:0000000000006487                 push    rbp
.text:0000000000006488                 push    rbx
.text:0000000000006489                 mov     rbx, rdi
.text:000000000000648C                 mov     r12, rdx
.text:000000000000648F                 sub     rsp, 18h
.text:0000000000006493                 mov     rax, fs:28h
.text:000000000000649C                 mov     [rsp+38h+var_30], rax
.text:00000000000064A1                 xor     eax, eax
.text:00000000000064A3                 lea     rax, [rsp+38h+pwc]
.text:00000000000064A8                 test    rdi, rdi
.text:00000000000064AB                 cmovz   rbx, rax
.text:00000000000064AF                 mov     rdi, rbx        ; pwc
.text:00000000000064B2                 call    _mbrtowc
.text:00000000000064B7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000064BB                 mov     rbp, rax
.text:00000000000064BE                 jbe     short loc_64E0
.text:00000000000064C0                 test    r12, r12
.text:00000000000064C3                 jz      short loc_64E0
.text:00000000000064C5                 xor     edi, edi
.text:00000000000064C7                 call    hard_locale
.text:00000000000064CC                 test    al, al
.text:00000000000064CE                 jnz     short loc_64E0
.text:00000000000064D0                 movzx   eax, byte ptr [r13+0]
.text:00000000000064D5                 mov     ebp, 1
.text:00000000000064DA                 mov     [rbx], eax
.text:00000000000064DC                 nop     dword ptr [rax+00h]
.text:00000000000064E0
.text:00000000000064E0 loc_64E0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000064E0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000064E0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000064E5                 xor     rdx, fs:28h
.text:00000000000064EE                 mov     rax, rbp
.text:00000000000064F1                 jnz     short loc_64FE
.text:00000000000064F3                 add     rsp, 18h
.text:00000000000064F7                 pop     rbx
.text:00000000000064F8                 pop     rbp
.text:00000000000064F9                 pop     r12
.text:00000000000064FB                 pop     r13
.text:00000000000064FD                 retn
.text:00000000000064FE ; ---------------------------------------------------------------------------
.text:00000000000064FE
.text:00000000000064FE loc_64FE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000064FE                 call    ___stack_chk_fail
.text:00000000000064FE ; } // starts at 6480
.text:00000000000064FE rpl_mbrtowc     endp
.text:00000000000064FE
.text:00000000000064FE ; ---------------------------------------------------------------------------
.text:0000000000006503                 align 10h
.text:0000000000006510
.text:0000000000006510 ; =============== S U B R O U T I N E =======================================
.text:0000000000006510
.text:0000000000006510 ; Attributes: info_from_lumina
.text:0000000000006510
.text:0000000000006510 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006510                 public close_stream
.text:0000000000006510 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006510                                         ; close_stdout+33↑p
.text:0000000000006510 ; __unwind {
.text:0000000000006510                 push    r12
.text:0000000000006512                 push    rbp
.text:0000000000006513                 mov     rbp, rdi
.text:0000000000006516                 push    rbx
.text:0000000000006517                 call    ___fpending
.text:000000000000651C                 mov     ebx, [rbp+0]
.text:000000000000651F                 mov     rdi, rbp        ; stream
.text:0000000000006522                 mov     r12, rax
.text:0000000000006525                 call    rpl_fclose
.text:000000000000652A                 and     ebx, 20h
.text:000000000000652D                 test    ebx, ebx
.text:000000000000652F                 jnz     short loc_6548
.text:0000000000006531                 test    eax, eax
.text:0000000000006533                 jz      short loc_653F
.text:0000000000006535                 test    r12, r12
.text:0000000000006538                 mov     eax, 0FFFFFFFFh
.text:000000000000653D                 jz      short loc_6578
.text:000000000000653F
.text:000000000000653F loc_653F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000653F                 pop     rbx
.text:0000000000006540                 pop     rbp
.text:0000000000006541                 pop     r12
.text:0000000000006543                 retn
.text:0000000000006543 ; ---------------------------------------------------------------------------
.text:0000000000006544                 align 8
.text:0000000000006548
.text:0000000000006548 loc_6548:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006548                 test    eax, eax
.text:000000000000654A                 jnz     short loc_6568
.text:000000000000654C                 call    ___errno_location
.text:0000000000006551                 mov     dword ptr [rax], 0
.text:0000000000006557                 mov     eax, 0FFFFFFFFh
.text:000000000000655C                 pop     rbx
.text:000000000000655D                 pop     rbp
.text:000000000000655E                 pop     r12
.text:0000000000006560                 retn
.text:0000000000006560 ; ---------------------------------------------------------------------------
.text:0000000000006561                 align 8
.text:0000000000006568
.text:0000000000006568 loc_6568:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006568                 pop     rbx
.text:0000000000006569                 mov     eax, 0FFFFFFFFh
.text:000000000000656E                 pop     rbp
.text:000000000000656F                 pop     r12
.text:0000000000006571                 retn
.text:0000000000006571 ; ---------------------------------------------------------------------------
.text:0000000000006572                 align 8
.text:0000000000006578
.text:0000000000006578 loc_6578:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006578                 call    ___errno_location
.text:000000000000657D                 cmp     dword ptr [rax], 9
.text:0000000000006580                 pop     rbx
.text:0000000000006581                 pop     rbp
.text:0000000000006582                 pop     r12
.text:0000000000006584                 setnz   al
.text:0000000000006587                 movzx   eax, al
.text:000000000000658A                 neg     eax
.text:000000000000658C                 retn
.text:000000000000658C ; } // starts at 6510
.text:000000000000658C close_stream    endp
.text:000000000000658C
.text:000000000000658C ; ---------------------------------------------------------------------------
.text:000000000000658D                 align 10h
.text:0000000000006590
.text:0000000000006590 ; =============== S U B R O U T I N E =======================================
.text:0000000000006590
.text:0000000000006590
.text:0000000000006590                 public hard_locale
.text:0000000000006590 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006590 ; __unwind {
.text:0000000000006590                 sub     rsp, 8
.text:0000000000006594                 xor     esi, esi        ; locale
.text:0000000000006596                 call    _setlocale
.text:000000000000659B                 mov     rdx, rax
.text:000000000000659E                 mov     eax, 1
.text:00000000000065A3                 test    rdx, rdx
.text:00000000000065A6                 jz      short loc_65C5
.text:00000000000065A8                 lea     rdi, aC         ; "C"
.text:00000000000065AF                 mov     ecx, 2
.text:00000000000065B4                 mov     rsi, rdx
.text:00000000000065B7                 repe cmpsb
.text:00000000000065B9                 setnbe  cl
.text:00000000000065BC                 sbb     cl, 0
.text:00000000000065BF                 xor     eax, eax
.text:00000000000065C1                 test    cl, cl
.text:00000000000065C3                 jnz     short loc_65D0
.text:00000000000065C5
.text:00000000000065C5 loc_65C5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000065C5                 add     rsp, 8
.text:00000000000065C9                 retn
.text:00000000000065C9 ; ---------------------------------------------------------------------------
.text:00000000000065CA                 align 10h
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000065D0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000065D7                 mov     ecx, 6
.text:00000000000065DC                 mov     rsi, rdx
.text:00000000000065DF                 repe cmpsb
.text:00000000000065E1                 setnbe  al
.text:00000000000065E4                 sbb     al, 0
.text:00000000000065E6                 test    al, al
.text:00000000000065E8                 setnz   al
.text:00000000000065EB                 add     rsp, 8
.text:00000000000065EF                 retn
.text:00000000000065EF ; } // starts at 6590
.text:00000000000065EF hard_locale     endp
.text:00000000000065EF
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0
.text:00000000000065F0                 public locale_charset
.text:00000000000065F0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 sub     rsp, 8
.text:00000000000065F4                 mov     edi, 0Eh        ; item
.text:00000000000065F9                 call    _nl_langinfo
.text:00000000000065FE                 test    rax, rax
.text:0000000000006601                 jz      short loc_6620
.text:0000000000006603                 cmp     byte ptr [rax], 0
.text:0000000000006606                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000660D                 cmovz   rax, rdx
.text:0000000000006611                 add     rsp, 8
.text:0000000000006615                 retn
.text:0000000000006615 ; ---------------------------------------------------------------------------
.text:0000000000006616                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006620                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006627                 add     rsp, 8
.text:000000000000662B                 retn
.text:000000000000662B ; } // starts at 65F0
.text:000000000000662B locale_charset  endp
.text:000000000000662B
.text:000000000000662B ; ---------------------------------------------------------------------------
.text:000000000000662C                 align 10h
.text:0000000000006630
.text:0000000000006630 ; =============== S U B R O U T I N E =======================================
.text:0000000000006630
.text:0000000000006630 ; Attributes: info_from_lumina
.text:0000000000006630
.text:0000000000006630 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006630                 public rpl_fclose
.text:0000000000006630 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006630 ; __unwind {
.text:0000000000006630                 push    r12
.text:0000000000006632                 push    rbp
.text:0000000000006633                 push    rbx
.text:0000000000006634                 mov     rbx, rdi
.text:0000000000006637                 call    _fileno
.text:000000000000663C                 test    eax, eax
.text:000000000000663E                 mov     rdi, rbx        ; fp
.text:0000000000006641                 js      short loc_6697
.text:0000000000006643                 call    ___freading
.text:0000000000006648                 test    eax, eax
.text:000000000000664A                 jnz     short loc_6678
.text:000000000000664C
.text:000000000000664C loc_664C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000664C                 mov     rdi, rbx        ; stream
.text:000000000000664F                 call    rpl_fflush
.text:0000000000006654                 test    eax, eax
.text:0000000000006656                 jz      short loc_6694
.text:0000000000006658                 call    ___errno_location
.text:000000000000665D                 mov     r12d, [rax]
.text:0000000000006660                 mov     rdi, rbx        ; stream
.text:0000000000006663                 mov     rbp, rax
.text:0000000000006666                 call    _fclose
.text:000000000000666B                 test    r12d, r12d
.text:000000000000666E                 jnz     short loc_66A0
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006670                 pop     rbx
.text:0000000000006671                 pop     rbp
.text:0000000000006672                 pop     r12
.text:0000000000006674                 retn
.text:0000000000006674 ; ---------------------------------------------------------------------------
.text:0000000000006675                 align 8
.text:0000000000006678
.text:0000000000006678 loc_6678:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006678                 mov     rdi, rbx        ; stream
.text:000000000000667B                 call    _fileno
.text:0000000000006680                 xor     esi, esi        ; offset
.text:0000000000006682                 mov     edx, 1          ; whence
.text:0000000000006687                 mov     edi, eax        ; fd
.text:0000000000006689                 call    _lseek
.text:000000000000668E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006692                 jnz     short loc_664C
.text:0000000000006694
.text:0000000000006694 loc_6694:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006694                 mov     rdi, rbx        ; stream
.text:0000000000006697
.text:0000000000006697 loc_6697:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006697                 pop     rbx
.text:0000000000006698                 pop     rbp
.text:0000000000006699                 pop     r12
.text:000000000000669B                 jmp     _fclose
.text:00000000000066A0 ; ---------------------------------------------------------------------------
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000066A0                 mov     [rbp+0], r12d
.text:00000000000066A4                 mov     eax, 0FFFFFFFFh
.text:00000000000066A9                 jmp     short loc_6670
.text:00000000000066A9 ; } // starts at 6630
.text:00000000000066A9 rpl_fclose      endp
.text:00000000000066A9
.text:00000000000066A9 ; ---------------------------------------------------------------------------
.text:00000000000066AB                 align 10h
.text:00000000000066B0
.text:00000000000066B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066B0
.text:00000000000066B0 ; Attributes: info_from_lumina
.text:00000000000066B0
.text:00000000000066B0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000066B0                 public rpl_fflush
.text:00000000000066B0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000066B0 ; __unwind {
.text:00000000000066B0                 test    rdi, rdi
.text:00000000000066B3                 push    rbx
.text:00000000000066B4                 mov     rbx, rdi
.text:00000000000066B7                 jz      short loc_66CA
.text:00000000000066B9                 call    ___freading
.text:00000000000066BE                 test    eax, eax
.text:00000000000066C0                 jz      short loc_66CA
.text:00000000000066C2                 test    dword ptr [rbx], 100h
.text:00000000000066C8                 jnz     short loc_66D8
.text:00000000000066CA
.text:00000000000066CA loc_66CA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000066CA                                         ; rpl_fflush+10↑j
.text:00000000000066CA                 mov     rdi, rbx        ; stream
.text:00000000000066CD                 pop     rbx
.text:00000000000066CE                 jmp     _fflush
.text:00000000000066CE ; ---------------------------------------------------------------------------
.text:00000000000066D3                 align 8
.text:00000000000066D8
.text:00000000000066D8 loc_66D8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000066D8                 mov     rdi, rbx
.text:00000000000066DB                 mov     edx, 1
.text:00000000000066E0                 xor     esi, esi
.text:00000000000066E2                 call    rpl_fseeko
.text:00000000000066E7                 mov     rdi, rbx        ; stream
.text:00000000000066EA                 pop     rbx
.text:00000000000066EB                 jmp     _fflush
.text:00000000000066EB ; } // starts at 66B0
.text:00000000000066EB rpl_fflush      endp
.text:00000000000066EB
.text:00000000000066F0
.text:00000000000066F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066F0
.text:00000000000066F0 ; Attributes: info_from_lumina
.text:00000000000066F0
.text:00000000000066F0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000066F0                 public rpl_fseeko
.text:00000000000066F0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000066F0 ; __unwind {
.text:00000000000066F0                 mov     rax, [rdi+8]
.text:00000000000066F4                 cmp     [rdi+10h], rax
.text:00000000000066F8                 jz      short loc_6700
.text:00000000000066FA
.text:00000000000066FA loc_66FA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000066FA                                         ; rpl_fseeko+1F↓j
.text:00000000000066FA                 jmp     _fseeko
.text:00000000000066FA ; ---------------------------------------------------------------------------
.text:00000000000066FF                 align 20h
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006700                 mov     rax, [rdi+20h]
.text:0000000000006704                 cmp     [rdi+28h], rax
.text:0000000000006708                 jnz     short loc_66FA
.text:000000000000670A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000670F                 jnz     short loc_66FA
.text:0000000000006711                 push    r12
.text:0000000000006713                 push    rbp
.text:0000000000006714                 mov     r12d, edx
.text:0000000000006717                 push    rbx
.text:0000000000006718                 mov     rbp, rsi
.text:000000000000671B                 mov     rbx, rdi
.text:000000000000671E                 call    _fileno
.text:0000000000006723                 mov     edx, r12d       ; whence
.text:0000000000006726                 mov     rsi, rbp        ; offset
.text:0000000000006729                 mov     edi, eax        ; fd
.text:000000000000672B                 call    _lseek
.text:0000000000006730                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006734                 jz      short loc_6742
.text:0000000000006736                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006739                 mov     [rbx+90h], rax
.text:0000000000006740                 xor     eax, eax
.text:0000000000006742
.text:0000000000006742 loc_6742:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006742                 pop     rbx
.text:0000000000006743                 pop     rbp
.text:0000000000006744                 pop     r12
.text:0000000000006746                 retn
.text:0000000000006746 ; } // starts at 66F0
.text:0000000000006746 rpl_fseeko      endp
.text:0000000000006746
.text:0000000000006746 ; ---------------------------------------------------------------------------
.text:0000000000006747                 align 10h
.text:0000000000006750
.text:0000000000006750 ; =============== S U B R O U T I N E =======================================
.text:0000000000006750
.text:0000000000006750 ; Attributes: info_from_lumina
.text:0000000000006750
.text:0000000000006750 ; void _libc_csu_init(void)
.text:0000000000006750                 public __libc_csu_init
.text:0000000000006750 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006750 ; __unwind {
.text:0000000000006750                 push    r15
.text:0000000000006752                 push    r14
.text:0000000000006754                 mov     r15, rdx
.text:0000000000006757                 push    r13
.text:0000000000006759                 push    r12
.text:000000000000675B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006762                 push    rbp
.text:0000000000006763                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000676A                 push    rbx
.text:000000000000676B                 mov     r13d, edi
.text:000000000000676E                 mov     r14, rsi
.text:0000000000006771                 sub     rbp, r12
.text:0000000000006774                 sub     rsp, 8
.text:0000000000006778                 sar     rbp, 3
.text:000000000000677C                 call    _init_proc
.text:0000000000006781                 test    rbp, rbp
.text:0000000000006784                 jz      short loc_67A6
.text:0000000000006786                 xor     ebx, ebx
.text:0000000000006788                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006790
.text:0000000000006790 loc_6790:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006790                 mov     rdx, r15
.text:0000000000006793                 mov     rsi, r14
.text:0000000000006796                 mov     edi, r13d
.text:0000000000006799                 call    ds:(__frame_dummy_init_array_entry - 209A70h)[r12+rbx*8]
.text:000000000000679D                 add     rbx, 1
.text:00000000000067A1                 cmp     rbp, rbx
.text:00000000000067A4                 jnz     short loc_6790
.text:00000000000067A6
.text:00000000000067A6 loc_67A6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000067A6                 add     rsp, 8
.text:00000000000067AA                 pop     rbx
.text:00000000000067AB                 pop     rbp
.text:00000000000067AC                 pop     r12
.text:00000000000067AE                 pop     r13
.text:00000000000067B0                 pop     r14
.text:00000000000067B2                 pop     r15
.text:00000000000067B4                 retn
.text:00000000000067B4 ; } // starts at 6750
.text:00000000000067B4 __libc_csu_init endp
.text:00000000000067B4
.text:00000000000067B4 ; ---------------------------------------------------------------------------
.text:00000000000067B5                 align 20h
.text:00000000000067C0
.text:00000000000067C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067C0
.text:00000000000067C0
.text:00000000000067C0 ; void _libc_csu_fini(void)
.text:00000000000067C0                 public __libc_csu_fini
.text:00000000000067C0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000067C0 ; __unwind {
.text:00000000000067C0                 rep retn
.text:00000000000067C0 ; } // starts at 67C0
.text:00000000000067C0 __libc_csu_fini endp
.text:00000000000067C0
.text:00000000000067C0 ; ---------------------------------------------------------------------------
.text:00000000000067C2                 align 10h
.text:00000000000067D0
.text:00000000000067D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067D0
.text:00000000000067D0
.text:00000000000067D0 atexit          proc near               ; CODE XREF: main+68↑p
.text:00000000000067D0 ; __unwind {
.text:00000000000067D0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000067D7                 xor     esi, esi        ; obj
.text:00000000000067D9                 jmp     ___cxa_atexit
.text:00000000000067D9 ; } // starts at 67D0
.text:00000000000067D9 atexit          endp
.text:00000000000067D9
.text:00000000000067D9 _text           ends
.text:00000000000067D9
LOAD:00000000000067DE ; ===========================================================================
LOAD:00000000000067DE
LOAD:00000000000067DE ; Segment type: Pure code
LOAD:00000000000067DE ; Segment permissions: Read/Execute
LOAD:00000000000067DE LOAD            segment byte public 'CODE' use64
LOAD:00000000000067DE                 assume cs:LOAD
LOAD:00000000000067DE                 ;org 67DEh
LOAD:00000000000067DE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000067DE                 align 20h
LOAD:00000000000067DE LOAD            ends
LOAD:00000000000067DE
.fini:00000000000067E0 ; ===========================================================================
.fini:00000000000067E0
.fini:00000000000067E0 ; Segment type: Pure code
.fini:00000000000067E0 ; Segment permissions: Read/Execute
.fini:00000000000067E0 _fini           segment dword public 'CODE' use64
.fini:00000000000067E0                 assume cs:_fini
.fini:00000000000067E0                 ;org 67E0h
.fini:00000000000067E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000067E0
.fini:00000000000067E0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000067E0
.fini:00000000000067E0
.fini:00000000000067E0                 public _term_proc
.fini:00000000000067E0 _term_proc      proc near
.fini:00000000000067E0                 sub     rsp, 8          ; _fini
.fini:00000000000067E4                 add     rsp, 8
.fini:00000000000067E8                 retn
.fini:00000000000067E8 _term_proc      endp
.fini:00000000000067E8
.fini:00000000000067E8 _fini           ends
.fini:00000000000067E8
LOAD:00000000000067E9 ; ===========================================================================
LOAD:00000000000067E9
LOAD:00000000000067E9 ; Segment type: Pure code
LOAD:00000000000067E9 ; Segment permissions: Read/Execute
LOAD:00000000000067E9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000067E9                 assume cs:LOAD
LOAD:00000000000067E9                 ;org 67E9h
LOAD:00000000000067E9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000067E9                 align 20h
LOAD:00000000000067E9 LOAD            ends
LOAD:00000000000067E9
.rodata:0000000000006800 ; ===========================================================================
.rodata:0000000000006800
.rodata:0000000000006800 ; Segment type: Pure data
.rodata:0000000000006800 ; Segment permissions: Read
.rodata:0000000000006800 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006800                 assume cs:_rodata
.rodata:0000000000006800                 ;org 6800h
.rodata:0000000000006800                 public _IO_stdin_used
.rodata:0000000000006800 _IO_stdin_used  db    1
.rodata:0000000000006801                 db    0
.rodata:0000000000006802                 db    2
.rodata:0000000000006803                 db    0
.rodata:0000000000006804 ; const char aInvalidNumberO_0[]
.rodata:0000000000006804 aInvalidNumberO_0 db 'invalid number of lines',0
.rodata:0000000000006804                                         ; DATA XREF: string_to_integer:loc_2AB0↑o
.rodata:000000000000681C ; const char aInvalidNumberO[]
.rodata:000000000000681C aInvalidNumberO db 'invalid number of bytes',0
.rodata:000000000000681C                                         ; DATA XREF: main+105E↑o
.rodata:000000000000681C                                         ; string_to_integer+E↑o
.rodata:0000000000006834 aBkkmmgtpezy0   db 'bkKmMGTPEZY0',0     ; DATA XREF: string_to_integer+22↑o
.rodata:0000000000006841 aSCannotSeekToO db '%s: cannot seek to offset %s',0
.rodata:0000000000006841                                         ; DATA XREF: elseek+6D↑o
.rodata:000000000000685E aStandardOutput db 'standard output',0  ; DATA XREF: xwrite_stdout_part_6+35↑o
.rodata:000000000000686E ; const char aErrorWritingS[]
.rodata:000000000000686E aErrorWritingS  db 'error writing %s',0 ; DATA XREF: xwrite_stdout_part_6+46↑o
.rodata:000000000000687F ; const char aErrorReadingS[]
.rodata:000000000000687F aErrorReadingS  db 'error reading %s',0 ; DATA XREF: main+EC4↑o
.rodata:000000000000687F                                         ; main+F02↑o ...
.rodata:0000000000006890 ; const char aSFileHasShrunk[]
.rodata:0000000000006890 aSFileHasShrunk db '%s: file has shrunk too much',0
.rodata:0000000000006890                                         ; DATA XREF: diagnose_copy_fd_failure+1F↑o
.rodata:00000000000068AD aHead           db 'head',0             ; DATA XREF: main+179↑o
.rodata:00000000000068AD                                         ; usage+1C9↑o ...
.rodata:00000000000068B2 asc_68B2        db '[',0                ; DATA XREF: usage+1D5↑o
.rodata:00000000000068B4 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1FC↑o
.rodata:00000000000068C4 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000068C4                                         ; DATA XREF: usage+22C↑o
.rodata:00000000000068C4                                         ; usage+324↑o ...
.rodata:00000000000068DA aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+23D↑o
.rodata:00000000000068E4 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+249↑o
.rodata:00000000000068F3 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1DC↑o
.rodata:00000000000068FD aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+208↑o
.rodata:0000000000006907 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+220↑o
.rodata:0000000000006911 ; const char aSOnlineHelpS[]
.rodata:0000000000006911 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+292↑o
.rodata:0000000000006911                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006928 unk_6928        db  47h ; G             ; DATA XREF: main+172↑o
.rodata:0000000000006928                                         ; usage+2AE↑o ...
.rodata:0000000000006929                 db  4Eh ; N
.rodata:000000000000692A                 db  55h ; U
.rodata:000000000000692B                 db  20h
.rodata:000000000000692C ; const char domainname[]
.rodata:000000000000692C domainname      db 'coreutils',0        ; DATA XREF: main+49↑o
.rodata:000000000000692C                                         ; main+55↑o ...
.rodata:0000000000006936 ; const char s2[]
.rodata:0000000000006936 s2              db 'en_',0              ; DATA XREF: usage+2D5↑o
.rodata:0000000000006936                                         ; usage+396↑o
.rodata:000000000000693A ; const char aFullDocumentat[]
.rodata:000000000000693A aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000693A                                         ; DATA XREF: usage:loc_3571↑o
.rodata:000000000000693A                                         ; usage:loc_362E↑o
.rodata:0000000000006955 ; const char dirname[]
.rodata:0000000000006955 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006955                                         ; DATA XREF: main+42↑o
.rodata:000000000000696D ; const char aInvalidTrailin[]
.rodata:000000000000696D aInvalidTrailin db 'invalid trailing option -- %c',0
.rodata:000000000000696D                                         ; DATA XREF: main:loc_282B↑o
.rodata:000000000000696D                                         ; main:loc_285D↑o
.rodata:000000000000698B aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+164↑o
.rodata:0000000000006998 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+16B↑o
.rodata:00000000000069A8 ; const char shortopts[]
.rodata:00000000000069A8 shortopts       db 'c:n:qvz0123456789',0
.rodata:00000000000069A8                                         ; DATA XREF: main+BF↑o
.rodata:00000000000069BA ; const char format[]
.rodata:00000000000069BA format          db '%s: %s',0           ; DATA XREF: main+1074↑o
.rodata:00000000000069BA                                         ; close_stdout+6C↑o ...
.rodata:00000000000069C1 ; const char msgid[]
.rodata:00000000000069C1 msgid           db 'standard input',0   ; DATA XREF: main:loc_1BBF↑o
.rodata:00000000000069D0 ; const char aCannotOpenSFor[]
.rodata:00000000000069D0 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:00000000000069D0                                         ; DATA XREF: main+492↑o
.rodata:00000000000069EB aSS             db '%s==> %s <==',0Ah,0 ; DATA XREF: main+3D2↑o
.rodata:00000000000069F9 ; const char aCannotFstatS[]
.rodata:00000000000069F9 aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: main+7B8↑o
.rodata:0000000000006A09 aFailedToCloseS db 'failed to close %s',0
.rodata:0000000000006A09                                         ; DATA XREF: main+577↑o
.rodata:0000000000006A1C aPresumeInputPi db '-presume-input-pipe',0
.rodata:0000000000006A1C                                         ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:0000000000006A30 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:0000000000006A36 aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000006A3D aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:0000000000006A45 aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:0000000000209B60↓o
.rodata:0000000000006A55 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000006A5A aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:0000000000006A62                 align 8
.rodata:0000000000006A68 ; const char aSCannotSeekToR[]
.rodata:0000000000006A68 aSCannotSeekToR db '%s: cannot seek to relative offset %s',0
.rodata:0000000000006A68                                         ; DATA XREF: elseek+77↑o
.rodata:0000000000006A8E                 align 10h
.rodata:0000000000006A90 ; const char aTrySHelpForMor[]
.rodata:0000000000006A90 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006A90                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006AB7                 align 8
.rodata:0000000000006AB8 ; const char aUsageSOptionFi[]
.rodata:0000000000006AB8 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000006AB8                                         ; DATA XREF: usage:loc_32DD↑o
.rodata:0000000000006AD9                 align 20h
.rodata:0000000000006AE0 ; const char aPrintTheFirstD[]
.rodata:0000000000006AE0 aPrintTheFirstD db 'Print the first %d lines of each FILE to standard output.',0Ah
.rodata:0000000000006AE0                                         ; DATA XREF: usage+7D↑o
.rodata:0000000000006AE0                 db 'With more than one FILE, precede each with a header giving the fi'
.rodata:0000000000006AE0                 db 'le name.',0Ah,0
.rodata:0000000000006B65                 align 8
.rodata:0000000000006B68 ; const char aWithNoFileOrWh[]
.rodata:0000000000006B68 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AB↑o
.rodata:0000000000006B68                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000006BA0 ; const char aMandatoryArgum[]
.rodata:0000000000006BA0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+D0↑o
.rodata:0000000000006BA0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000006BA0                 db 'ns too.',0Ah,0
.rodata:0000000000006BEB                 align 10h
.rodata:0000000000006BF0 ; const char aCBytesNumPrint[]
.rodata:0000000000006BF0 aCBytesNumPrint db '  -c, --bytes=[-]NUM       print the first NUM bytes of each file'
.rodata:0000000000006BF0                                         ; DATA XREF: usage+EE↑o
.rodata:0000000000006BF0                 db ';',0Ah
.rodata:0000000000006BF0                 db '                             with the leading ',27h,'-',27h,', pr'
.rodata:0000000000006BF0                 db 'int all but the last',0Ah
.rodata:0000000000006BF0                 db '                             NUM bytes of each file',0Ah
.rodata:0000000000006BF0                 db '  -n, --lines=[-]NUM       print the first NUM lines instead of t'
.rodata:0000000000006BF0                 db 'he first %d;',0Ah
.rodata:0000000000006BF0                 db '                             with the leading ',27h,'-',27h,', pr'
.rodata:0000000000006BF0                 db 'int all but the last',0Ah
.rodata:0000000000006BF0                 db '                             NUM lines of each file',0Ah,0
.rodata:0000000000006D7E                 align 20h
.rodata:0000000000006D80 ; const char aQQuietSilentNe[]
.rodata:0000000000006D80 aQQuietSilentNe db '  -q, --quiet, --silent    never print headers giving file names',0Ah
.rodata:0000000000006D80                                         ; DATA XREF: usage+11C↑o
.rodata:0000000000006D80                 db '  -v, --verbose            always print headers giving file names'
.rodata:0000000000006D80                 db 0Ah,0
.rodata:0000000000006E04                 align 8
.rodata:0000000000006E08 ; const char aZZeroTerminate[]
.rodata:0000000000006E08 aZZeroTerminate db '  -z, --zero-terminated    line delimiter is NUL, not newline',0Ah
.rodata:0000000000006E08                                         ; DATA XREF: usage+141↑o
.rodata:0000000000006E08                 db 0
.rodata:0000000000006E47                 align 8
.rodata:0000000000006E48 ; const char aHelpDisplayThi[]
.rodata:0000000000006E48 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006E48                                         ; DATA XREF: usage+166↑o
.rodata:0000000000006E75                 align 8
.rodata:0000000000006E78 ; const char aVersionOutputV[]
.rodata:0000000000006E78 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006E78                                         ; DATA XREF: usage+18B↑o
.rodata:0000000000006EAE                 align 10h
.rodata:0000000000006EB0 ; const char aNumMayHaveAMul[]
.rodata:0000000000006EB0 aNumMayHaveAMul db 0Ah                  ; DATA XREF: usage+1B0↑o
.rodata:0000000000006EB0                 db 'NUM may have a multiplier suffix:',0Ah
.rodata:0000000000006EB0                 db 'b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,',0Ah
.rodata:0000000000006EB0                 db 'GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.'
.rodata:0000000000006EB0                 db 0Ah
.rodata:0000000000006EB0                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:0000000000006F84                 align 8
.rodata:0000000000006F88 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006F88                                         ; DATA XREF: usage+2A7↑o
.rodata:0000000000006F88                                         ; usage+30B↑o ...
.rodata:0000000000006FB0 ; const char aReportAnyTrans[]
.rodata:0000000000006FB0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006FB0                                         ; DATA XREF: usage+3FF↑o
.rodata:0000000000006FB0                 db 'am/>',0Ah,0
.rodata:0000000000006FF7                 align 8
.rodata:0000000000006FF8 ; const char aOrAvailableLoc[]
.rodata:0000000000006FF8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006FF8                                         ; DATA XREF: usage:loc_35B6↑o
.rodata:000000000000702B                 align 4
.rodata:000000000000702C jpt_1AE6        dd offset loc_1D79 - 702Ch
.rodata:000000000000702C                                         ; DATA XREF: main+27B↑o
.rodata:000000000000702C                                         ; main+2AF↑r
.rodata:000000000000702C                 dd offset loc_1D71 - 702Ch ; jump table for switch statement
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset loc_1D79 - 702Ch
.rodata:000000000000702C                 dd offset loc_1D69 - 702Ch
.rodata:000000000000702C                 dd offset loc_1D79 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset loc_1D61 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset loc_1D59 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset def_1AE6 - 702Ch
.rodata:000000000000702C                 dd offset loc_1CF9 - 702Ch
.rodata:0000000000007090 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000007095 ; const char aWriteError[]
.rodata:0000000000007095 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3713↑o
.rodata:00000000000070A1                 align 8
.rodata:00000000000070A8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000070A8                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000070E0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000070E8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000070E8                                         ; main+311↑o ...
.rodata:00000000000070EC unk_70EC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000070ED                 db  80h
.rodata:00000000000070EE                 db  98h
.rodata:00000000000070EF                 db    0
.rodata:00000000000070F0 unk_70F0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000070F1                 db  80h
.rodata:00000000000070F2                 db  99h
.rodata:00000000000070F3                 db    0
.rodata:00000000000070F4 unk_70F4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000070F5                 db    7
.rodata:00000000000070F6                 db  65h ; e
.rodata:00000000000070F7                 db    0
.rodata:00000000000070F8 unk_70F8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000070F9                 db 0AFh
.rodata:00000000000070FA                 db    0
.rodata:00000000000070FB unk_70FB        db  22h ; "             ; DATA XREF: gettext_quote:loc_39B0↑o
.rodata:00000000000070FB                                         ; quotearg_buffer_restyled:loc_476B↑o ...
.rodata:00000000000070FC                 db    0
.rodata:00000000000070FD ; const char asc_70FD[2]
.rodata:00000000000070FD asc_70FD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000070FD                                         ; quotearg_buffer_restyled:loc_3B33↑o ...
.rodata:00000000000070FF ; const char asc_70FF[2]
.rodata:00000000000070FF asc_70FF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000070FF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007101 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007109 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209BE8↓o
.rodata:000000000000710F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:000000000000711C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BF8↓o
.rodata:000000000000711C                                         ; .data.rel.ro:0000000000209C18↓o
.rodata:0000000000007129 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007129                                         ; DATA XREF: .data.rel.ro:0000000000209C00↓o
.rodata:000000000000713D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209C10↓o
.rodata:0000000000007145 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C28↓o
.rodata:000000000000714D                 align 20h
.rodata:0000000000007160 jpt_3B11        dd offset loc_48BA - 7160h
.rodata:0000000000007160                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007160                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007160                 dd offset loc_3B13 - 7160h ; jump table for switch statement
.rodata:0000000000007160                 dd offset loc_4AE8 - 7160h
.rodata:0000000000007160                 dd offset loc_48F4 - 7160h
.rodata:0000000000007160                 dd offset loc_46E4 - 7160h
.rodata:0000000000007160                 dd offset loc_4740 - 7160h
.rodata:0000000000007160                 dd offset loc_4795 - 7160h
.rodata:0000000000007160                 dd offset loc_47DA - 7160h
.rodata:0000000000007160                 dd offset loc_4814 - 7160h
.rodata:0000000000007160                 dd offset loc_4814 - 7160h
.rodata:0000000000007160                 dd offset loc_4814 - 7160h
.rodata:000000000000718C jpt_3C6E        dd offset loc_3E90 - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000718C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch ; jump table for switch statement
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset loc_3ED0 - 718Ch, offset loc_3DD8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3D98 - 718Ch, offset loc_3F60 - 718Ch, offset loc_3F50 - 718Ch
.rodata:000000000000718C                 dd offset loc_3F40 - 718Ch, offset loc_3F30 - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset def_3C6E - 718Ch
.rodata:000000000000718C                 dd offset def_3C6E - 718Ch, offset def_3C6E - 718Ch, offset loc_3F20 - 718Ch
.rodata:000000000000718C                 dd offset loc_3F10 - 718Ch, offset loc_3F10 - 718Ch, offset loc_3EE0 - 718Ch
.rodata:000000000000718C                 dd offset loc_3F10 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3F10 - 718Ch
.rodata:000000000000718C                 dd offset loc_3D73 - 718Ch, offset loc_3F10 - 718Ch, offset loc_3F10 - 718Ch
.rodata:000000000000718C                 dd offset loc_3F10 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3F10 - 718Ch
.rodata:000000000000718C                 dd offset loc_3F10 - 718Ch, offset loc_3F10 - 718Ch, offset loc_3F10 - 718Ch
.rodata:000000000000718C                 dd offset loc_3D43 - 718Ch, offset def_3C6E - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3F10 - 718Ch, offset loc_3DE8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3F10 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3F10 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch, offset loc_3EB8 - 718Ch
.rodata:000000000000718C                 dd offset loc_3C73 - 718Ch, offset loc_3F10 - 718Ch, offset loc_3C73 - 718Ch
.rodata:000000000000718C                 dd offset loc_3EE0 - 718Ch
.rodata:0000000000007388 jpt_3FFA        dd offset loc_4060 - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007388                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h ; jump table for switch statement
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset loc_4050 - 7388h, offset loc_41A0 - 7388h
.rodata:0000000000007388                 dd offset loc_4188 - 7388h, offset loc_4038 - 7388h, offset loc_4178 - 7388h
.rodata:0000000000007388                 dd offset loc_4020 - 7388h, offset loc_4160 - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset def_3FFA - 7388h
.rodata:0000000000007388                 dd offset def_3FFA - 7388h, offset def_3FFA - 7388h, offset loc_4148 - 7388h
.rodata:0000000000007388                 dd offset loc_4130 - 7388h, offset loc_4130 - 7388h, offset loc_4118 - 7388h
.rodata:0000000000007388                 dd offset loc_4130 - 7388h, offset loc_4100 - 7388h, offset loc_4130 - 7388h
.rodata:0000000000007388                 dd offset loc_3D70 - 7388h, offset loc_4130 - 7388h, offset loc_4130 - 7388h
.rodata:0000000000007388                 dd offset loc_4130 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4130 - 7388h
.rodata:0000000000007388                 dd offset loc_4130 - 7388h, offset loc_4130 - 7388h, offset loc_4130 - 7388h
.rodata:0000000000007388                 dd offset loc_3D40 - 7388h, offset def_3FFA - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4130 - 7388h, offset loc_4000 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4130 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4130 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_4100 - 7388h, offset loc_4100 - 7388h, offset loc_4100 - 7388h
.rodata:0000000000007388                 dd offset loc_3C70 - 7388h, offset loc_4130 - 7388h, offset loc_3C70 - 7388h
.rodata:0000000000007388                 dd offset loc_4118 - 7388h
.rodata:0000000000007584                 align 20h
.rodata:00000000000075A0                 public quoting_style_vals
.rodata:00000000000075A0 quoting_style_vals db    0
.rodata:00000000000075A1                 db    0
.rodata:00000000000075A2                 db    0
.rodata:00000000000075A3                 db    0
.rodata:00000000000075A4                 db    1
.rodata:00000000000075A5                 db    0
.rodata:00000000000075A6                 db    0
.rodata:00000000000075A7                 db    0
.rodata:00000000000075A8                 db    2
.rodata:00000000000075A9                 db    0
.rodata:00000000000075AA                 db    0
.rodata:00000000000075AB                 db    0
.rodata:00000000000075AC                 db    3
.rodata:00000000000075AD                 db    0
.rodata:00000000000075AE                 db    0
.rodata:00000000000075AF                 db    0
.rodata:00000000000075B0                 db    4
.rodata:00000000000075B1                 db    0
.rodata:00000000000075B2                 db    0
.rodata:00000000000075B3                 db    0
.rodata:00000000000075B4                 db    5
.rodata:00000000000075B5                 db    0
.rodata:00000000000075B6                 db    0
.rodata:00000000000075B7                 db    0
.rodata:00000000000075B8                 db    6
.rodata:00000000000075B9                 db    0
.rodata:00000000000075BA                 db    0
.rodata:00000000000075BB                 db    0
.rodata:00000000000075BC                 db    7
.rodata:00000000000075BD                 db    0
.rodata:00000000000075BE                 db    0
.rodata:00000000000075BF                 db    0
.rodata:00000000000075C0                 db    8
.rodata:00000000000075C1                 db    0
.rodata:00000000000075C2                 db    0
.rodata:00000000000075C3                 db    0
.rodata:00000000000075C4                 db    9
.rodata:00000000000075C5                 db    0
.rodata:00000000000075C6                 db    0
.rodata:00000000000075C7                 db    0
.rodata:00000000000075C8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000075D4 aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000075DB ; const char aC_0[]
.rodata:00000000000075DB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_56BC↑o
.rodata:00000000000075DF ; const char aWrittenByS[]
.rodata:00000000000075DF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000075DF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000075EF ; const char aWrittenBySAndS[]
.rodata:00000000000075EF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000075EF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007606 ; const char aWrittenBySSAnd[]
.rodata:0000000000007606 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007606                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007622 ; const char aReportBugsToS[]
.rodata:0000000000007622 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007622                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000007637 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007637                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000764D ; const char aSHomePageS[]
.rodata:000000000000764D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000764D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007661                 align 8
.rodata:0000000000007668 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007668 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007668                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007668                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007668                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007668                 db '.',0Ah
.rodata:0000000000007668                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007668                 db 0Ah,0
.rodata:0000000000007734                 align 8
.rodata:0000000000007738 ; const char aWrittenBySSSAn[]
.rodata:0000000000007738 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007738                                         ; DATA XREF: version_etc_arn:loc_5910↑o
.rodata:0000000000007738                 db 'and %s.',0Ah,0
.rodata:0000000000007758 ; const char aWrittenBySSSSA[]
.rodata:0000000000007758 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007758                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007758                 db '%s, and %s.',0Ah,0
.rodata:000000000000777C                 align 20h
.rodata:0000000000007780 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007780 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007780                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007780                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000077A8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000077A8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077A8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000077A8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000077D4                 align 8
.rodata:00000000000077D8 ; const char aWrittenBySSSSS[]
.rodata:00000000000077D8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077D8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000077D8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000077D8                 db 'and %s.',0Ah,0
.rodata:0000000000007808 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007808 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007808                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007808                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007808                 db '%s, and %s.',0Ah,0
.rodata:000000000000783C                 align 20h
.rodata:0000000000007840 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007840                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007840                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007840                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000787C                 align 20h
.rodata:0000000000007880 ; const char aGeneralHelpUsi[]
.rodata:0000000000007880 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007880                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007880                 db 0
.rodata:00000000000078C1                 align 4
.rodata:00000000000078C4 jpt_5724        dd offset loc_57A6 - 78C4h
.rodata:00000000000078C4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000078C4                                         ; version_etc_arn+9D↑r
.rodata:00000000000078C4                 dd offset loc_5838 - 78C4h ; jump table for switch statement
.rodata:00000000000078C4                 dd offset loc_5878 - 78C4h
.rodata:00000000000078C4                 dd offset loc_58C0 - 78C4h
.rodata:00000000000078C4                 dd offset loc_5910 - 78C4h
.rodata:00000000000078C4                 dd offset loc_5968 - 78C4h
.rodata:00000000000078C4                 dd offset loc_5998 - 78C4h
.rodata:00000000000078C4                 dd offset loc_5A00 - 78C4h
.rodata:00000000000078C4                 dd offset loc_5730 - 78C4h
.rodata:00000000000078C4                 dd offset loc_57E0 - 78C4h
.rodata:00000000000078EC                 align 20h
.rodata:0000000000007900                 public version_etc_copyright
.rodata:0000000000007900 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007900                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000792F ; const char aMemoryExhauste[]
.rodata:000000000000792F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007940 ; const char file[]
.rodata:0000000000007940 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000007940                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000007960 ; const char assertion[]
.rodata:0000000000007960 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000007960                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000007986                 align 8
.rodata:0000000000007988 jpt_6236        dd offset loc_6386 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000007988                                         ; xstrtoumax+1CF↑r
.rodata:0000000000007988                 dd offset loc_6363 - 7988h, offset def_6236 - 7988h, offset loc_639C - 7988h ; jump table for switch statement
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset loc_631F - 7988h, offset def_6236 - 7988h, offset loc_6238 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset loc_6340 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset loc_62FF - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset loc_62DA - 7988h
.rodata:0000000000007988                 dd offset loc_62B4 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset loc_629D - 7988h
.rodata:0000000000007988                 dd offset loc_6260 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset loc_639C - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset loc_631F - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset loc_6238 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset def_6236 - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset loc_62FF - 7988h
.rodata:0000000000007988                 dd offset def_6236 - 7988h, offset def_6236 - 7988h, offset loc_6287 - 7988h
.rodata:0000000000007A60 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000007A60 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000007A60                                         ; DATA XREF: xstrtoumax:loc_63E5↑o
.rodata:0000000000007A6B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007A6D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_65D0↑o
.rodata:0000000000007A73 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007A73                                         ; locale_charset:loc_6620↑o
.rodata:0000000000007A73 _rodata         ends
.rodata:0000000000007A73
LOAD:0000000000007A79 ; ===========================================================================
LOAD:0000000000007A79
LOAD:0000000000007A79 ; Segment type: Pure code
LOAD:0000000000007A79 ; Segment permissions: Read/Execute
LOAD:0000000000007A79 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007A79                 assume cs:LOAD
LOAD:0000000000007A79                 ;org 7A79h
LOAD:0000000000007A79                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007A79                 align 4
LOAD:0000000000007A79 LOAD            ends
LOAD:0000000000007A79
.eh_frame_hdr:0000000000007A7C ; ===========================================================================
.eh_frame_hdr:0000000000007A7C
.eh_frame_hdr:0000000000007A7C ; Segment type: Pure data
.eh_frame_hdr:0000000000007A7C ; Segment permissions: Read
.eh_frame_hdr:0000000000007A7C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007A7C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007A7C                 ;org 7A7Ch
.eh_frame_hdr:0000000000007A7C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007A7D                 db  1Bh
.eh_frame_hdr:0000000000007A7E                 db    3
.eh_frame_hdr:0000000000007A7F                 db  3Bh ; ;
.eh_frame_hdr:0000000000007A80                 db 0B0h
.eh_frame_hdr:0000000000007A81                 db    2
.eh_frame_hdr:0000000000007A82                 db    0
.eh_frame_hdr:0000000000007A83                 db    0
.eh_frame_hdr:0000000000007A84                 db  55h ; U
.eh_frame_hdr:0000000000007A85                 db    0
.eh_frame_hdr:0000000000007A86                 db    0
.eh_frame_hdr:0000000000007A87                 db    0
.eh_frame_hdr:0000000000007A88                 db  74h ; t
.eh_frame_hdr:0000000000007A89                 db  9Ah
.eh_frame_hdr:0000000000007A8A                 db 0FFh
.eh_frame_hdr:0000000000007A8B                 db 0FFh
.eh_frame_hdr:0000000000007A8C                 db 0FCh
.eh_frame_hdr:0000000000007A8D                 db    2
.eh_frame_hdr:0000000000007A8E                 db    0
.eh_frame_hdr:0000000000007A8F                 db    0
.eh_frame_hdr:0000000000007A90                 db 0A4h
.eh_frame_hdr:0000000000007A91                 db  9Dh
.eh_frame_hdr:0000000000007A92                 db 0FFh
.eh_frame_hdr:0000000000007A93                 db 0FFh
.eh_frame_hdr:0000000000007A94                 db  24h ; $
.eh_frame_hdr:0000000000007A95                 db    3
.eh_frame_hdr:0000000000007A96                 db    0
.eh_frame_hdr:0000000000007A97                 db    0
.eh_frame_hdr:0000000000007A98                 db 0B4h
.eh_frame_hdr:0000000000007A99                 db  9Dh
.eh_frame_hdr:0000000000007A9A                 db 0FFh
.eh_frame_hdr:0000000000007A9B                 db 0FFh
.eh_frame_hdr:0000000000007A9C                 db  3Ch ; <
.eh_frame_hdr:0000000000007A9D                 db    5
.eh_frame_hdr:0000000000007A9E                 db    0
.eh_frame_hdr:0000000000007A9F                 db    0
.eh_frame_hdr:0000000000007AA0                 db 0E4h
.eh_frame_hdr:0000000000007AA1                 db 0AEh
.eh_frame_hdr:0000000000007AA2                 db 0FFh
.eh_frame_hdr:0000000000007AA3                 db 0FFh
.eh_frame_hdr:0000000000007AA4                 db 0CCh
.eh_frame_hdr:0000000000007AA5                 db    2
.eh_frame_hdr:0000000000007AA6                 db    0
.eh_frame_hdr:0000000000007AA7                 db    0
.eh_frame_hdr:0000000000007AA8                 db 0F4h
.eh_frame_hdr:0000000000007AA9                 db 0AFh
.eh_frame_hdr:0000000000007AAA                 db 0FFh
.eh_frame_hdr:0000000000007AAB                 db 0FFh
.eh_frame_hdr:0000000000007AAC                 db  3Ch ; <
.eh_frame_hdr:0000000000007AAD                 db    3
.eh_frame_hdr:0000000000007AAE                 db    0
.eh_frame_hdr:0000000000007AAF                 db    0
.eh_frame_hdr:0000000000007AB0                 db  54h ; T
.eh_frame_hdr:0000000000007AB1                 db 0B0h
.eh_frame_hdr:0000000000007AB2                 db 0FFh
.eh_frame_hdr:0000000000007AB3                 db 0FFh
.eh_frame_hdr:0000000000007AB4                 db  58h ; X
.eh_frame_hdr:0000000000007AB5                 db    3
.eh_frame_hdr:0000000000007AB6                 db    0
.eh_frame_hdr:0000000000007AB7                 db    0
.eh_frame_hdr:0000000000007AB8                 db  14h
.eh_frame_hdr:0000000000007AB9                 db 0B1h
.eh_frame_hdr:0000000000007ABA                 db 0FFh
.eh_frame_hdr:0000000000007ABB                 db 0FFh
.eh_frame_hdr:0000000000007ABC                 db  94h
.eh_frame_hdr:0000000000007ABD                 db    3
.eh_frame_hdr:0000000000007ABE                 db    0
.eh_frame_hdr:0000000000007ABF                 db    0
.eh_frame_hdr:0000000000007AC0                 db  94h
.eh_frame_hdr:0000000000007AC1                 db 0B1h
.eh_frame_hdr:0000000000007AC2                 db 0FFh
.eh_frame_hdr:0000000000007AC3                 db 0FFh
.eh_frame_hdr:0000000000007AC4                 db 0C0h
.eh_frame_hdr:0000000000007AC5                 db    3
.eh_frame_hdr:0000000000007AC6                 db    0
.eh_frame_hdr:0000000000007AC7                 db    0
.eh_frame_hdr:0000000000007AC8                 db  64h ; d
.eh_frame_hdr:0000000000007AC9                 db 0B2h
.eh_frame_hdr:0000000000007ACA                 db 0FFh
.eh_frame_hdr:0000000000007ACB                 db 0FFh
.eh_frame_hdr:0000000000007ACC                 db 0FCh
.eh_frame_hdr:0000000000007ACD                 db    3
.eh_frame_hdr:0000000000007ACE                 db    0
.eh_frame_hdr:0000000000007ACF                 db    0
.eh_frame_hdr:0000000000007AD0                 db 0F4h
.eh_frame_hdr:0000000000007AD1                 db 0B3h
.eh_frame_hdr:0000000000007AD2                 db 0FFh
.eh_frame_hdr:0000000000007AD3                 db 0FFh
.eh_frame_hdr:0000000000007AD4                 db  48h ; H
.eh_frame_hdr:0000000000007AD5                 db    4
.eh_frame_hdr:0000000000007AD6                 db    0
.eh_frame_hdr:0000000000007AD7                 db    0
.eh_frame_hdr:0000000000007AD8                 db 0E4h
.eh_frame_hdr:0000000000007AD9                 db 0B4h
.eh_frame_hdr:0000000000007ADA                 db 0FFh
.eh_frame_hdr:0000000000007ADB                 db 0FFh
.eh_frame_hdr:0000000000007ADC                 db  94h
.eh_frame_hdr:0000000000007ADD                 db    4
.eh_frame_hdr:0000000000007ADE                 db    0
.eh_frame_hdr:0000000000007ADF                 db    0
.eh_frame_hdr:0000000000007AE0                 db  64h ; d
.eh_frame_hdr:0000000000007AE1                 db 0B5h
.eh_frame_hdr:0000000000007AE2                 db 0FFh
.eh_frame_hdr:0000000000007AE3                 db 0FFh
.eh_frame_hdr:0000000000007AE4                 db 0C0h
.eh_frame_hdr:0000000000007AE5                 db    4
.eh_frame_hdr:0000000000007AE6                 db    0
.eh_frame_hdr:0000000000007AE7                 db    0
.eh_frame_hdr:0000000000007AE8                 db    4
.eh_frame_hdr:0000000000007AE9                 db 0B8h
.eh_frame_hdr:0000000000007AEA                 db 0FFh
.eh_frame_hdr:0000000000007AEB                 db 0FFh
.eh_frame_hdr:0000000000007AEC                 db  10h
.eh_frame_hdr:0000000000007AED                 db    5
.eh_frame_hdr:0000000000007AEE                 db    0
.eh_frame_hdr:0000000000007AEF                 db    0
.eh_frame_hdr:0000000000007AF0                 db  34h ; 4
.eh_frame_hdr:0000000000007AF1                 db 0BCh
.eh_frame_hdr:0000000000007AF2                 db 0FFh
.eh_frame_hdr:0000000000007AF3                 db 0FFh
.eh_frame_hdr:0000000000007AF4                 db  9Ch
.eh_frame_hdr:0000000000007AF5                 db    5
.eh_frame_hdr:0000000000007AF6                 db    0
.eh_frame_hdr:0000000000007AF7                 db    0
.eh_frame_hdr:0000000000007AF8                 db  44h ; D
.eh_frame_hdr:0000000000007AF9                 db 0BCh
.eh_frame_hdr:0000000000007AFA                 db 0FFh
.eh_frame_hdr:0000000000007AFB                 db 0FFh
.eh_frame_hdr:0000000000007AFC                 db 0B0h
.eh_frame_hdr:0000000000007AFD                 db    5
.eh_frame_hdr:0000000000007AFE                 db    0
.eh_frame_hdr:0000000000007AFF                 db    0
.eh_frame_hdr:0000000000007B00                 db  54h ; T
.eh_frame_hdr:0000000000007B01                 db 0BCh
.eh_frame_hdr:0000000000007B02                 db 0FFh
.eh_frame_hdr:0000000000007B03                 db 0FFh
.eh_frame_hdr:0000000000007B04                 db 0C4h
.eh_frame_hdr:0000000000007B05                 db    5
.eh_frame_hdr:0000000000007B06                 db    0
.eh_frame_hdr:0000000000007B07                 db    0
.eh_frame_hdr:0000000000007B08                 db    4
.eh_frame_hdr:0000000000007B09                 db 0BDh
.eh_frame_hdr:0000000000007B0A                 db 0FFh
.eh_frame_hdr:0000000000007B0B                 db 0FFh
.eh_frame_hdr:0000000000007B0C                 db 0F4h
.eh_frame_hdr:0000000000007B0D                 db    5
.eh_frame_hdr:0000000000007B0E                 db    0
.eh_frame_hdr:0000000000007B0F                 db    0
.eh_frame_hdr:0000000000007B10                 db  84h
.eh_frame_hdr:0000000000007B11                 db 0BDh
.eh_frame_hdr:0000000000007B12                 db 0FFh
.eh_frame_hdr:0000000000007B13                 db 0FFh
.eh_frame_hdr:0000000000007B14                 db  44h ; D
.eh_frame_hdr:0000000000007B15                 db    6
.eh_frame_hdr:0000000000007B16                 db    0
.eh_frame_hdr:0000000000007B17                 db    0
.eh_frame_hdr:0000000000007B18                 db  24h ; $
.eh_frame_hdr:0000000000007B19                 db 0BEh
.eh_frame_hdr:0000000000007B1A                 db 0FFh
.eh_frame_hdr:0000000000007B1B                 db 0FFh
.eh_frame_hdr:0000000000007B1C                 db  5Ch ; \
.eh_frame_hdr:0000000000007B1D                 db    6
.eh_frame_hdr:0000000000007B1E                 db    0
.eh_frame_hdr:0000000000007B1F                 db    0
.eh_frame_hdr:0000000000007B20                 db  74h ; t
.eh_frame_hdr:0000000000007B21                 db 0BEh
.eh_frame_hdr:0000000000007B22                 db 0FFh
.eh_frame_hdr:0000000000007B23                 db 0FFh
.eh_frame_hdr:0000000000007B24                 db  74h ; t
.eh_frame_hdr:0000000000007B25                 db    6
.eh_frame_hdr:0000000000007B26                 db    0
.eh_frame_hdr:0000000000007B27                 db    0
.eh_frame_hdr:0000000000007B28                 db  14h
.eh_frame_hdr:0000000000007B29                 db 0BFh
.eh_frame_hdr:0000000000007B2A                 db 0FFh
.eh_frame_hdr:0000000000007B2B                 db 0FFh
.eh_frame_hdr:0000000000007B2C                 db  94h
.eh_frame_hdr:0000000000007B2D                 db    6
.eh_frame_hdr:0000000000007B2E                 db    0
.eh_frame_hdr:0000000000007B2F                 db    0
.eh_frame_hdr:0000000000007B30                 db    4
.eh_frame_hdr:0000000000007B31                 db 0C0h
.eh_frame_hdr:0000000000007B32                 db 0FFh
.eh_frame_hdr:0000000000007B33                 db 0FFh
.eh_frame_hdr:0000000000007B34                 db 0D8h
.eh_frame_hdr:0000000000007B35                 db    6
.eh_frame_hdr:0000000000007B36                 db    0
.eh_frame_hdr:0000000000007B37                 db    0
.eh_frame_hdr:0000000000007B38                 db  44h ; D
.eh_frame_hdr:0000000000007B39                 db 0D2h
.eh_frame_hdr:0000000000007B3A                 db 0FFh
.eh_frame_hdr:0000000000007B3B                 db 0FFh
.eh_frame_hdr:0000000000007B3C                 db  50h ; P
.eh_frame_hdr:0000000000007B3D                 db    7
.eh_frame_hdr:0000000000007B3E                 db    0
.eh_frame_hdr:0000000000007B3F                 db    0
.eh_frame_hdr:0000000000007B40                 db 0F4h
.eh_frame_hdr:0000000000007B41                 db 0D3h
.eh_frame_hdr:0000000000007B42                 db 0FFh
.eh_frame_hdr:0000000000007B43                 db 0FFh
.eh_frame_hdr:0000000000007B44                 db 0BCh
.eh_frame_hdr:0000000000007B45                 db    7
.eh_frame_hdr:0000000000007B46                 db    0
.eh_frame_hdr:0000000000007B47                 db    0
.eh_frame_hdr:0000000000007B48                 db  34h ; 4
.eh_frame_hdr:0000000000007B49                 db 0D4h
.eh_frame_hdr:0000000000007B4A                 db 0FFh
.eh_frame_hdr:0000000000007B4B                 db 0FFh
.eh_frame_hdr:0000000000007B4C                 db 0E8h
.eh_frame_hdr:0000000000007B4D                 db    7
.eh_frame_hdr:0000000000007B4E                 db    0
.eh_frame_hdr:0000000000007B4F                 db    0
.eh_frame_hdr:0000000000007B50                 db  54h ; T
.eh_frame_hdr:0000000000007B51                 db 0D4h
.eh_frame_hdr:0000000000007B52                 db 0FFh
.eh_frame_hdr:0000000000007B53                 db 0FFh
.eh_frame_hdr:0000000000007B54                 db 0FCh
.eh_frame_hdr:0000000000007B55                 db    7
.eh_frame_hdr:0000000000007B56                 db    0
.eh_frame_hdr:0000000000007B57                 db    0
.eh_frame_hdr:0000000000007B58                 db  74h ; t
.eh_frame_hdr:0000000000007B59                 db 0D4h
.eh_frame_hdr:0000000000007B5A                 db 0FFh
.eh_frame_hdr:0000000000007B5B                 db 0FFh
.eh_frame_hdr:0000000000007B5C                 db  10h
.eh_frame_hdr:0000000000007B5D                 db    8
.eh_frame_hdr:0000000000007B5E                 db    0
.eh_frame_hdr:0000000000007B5F                 db    0
.eh_frame_hdr:0000000000007B60                 db 0B4h
.eh_frame_hdr:0000000000007B61                 db 0D4h
.eh_frame_hdr:0000000000007B62                 db 0FFh
.eh_frame_hdr:0000000000007B63                 db 0FFh
.eh_frame_hdr:0000000000007B64                 db  24h ; $
.eh_frame_hdr:0000000000007B65                 db    8
.eh_frame_hdr:0000000000007B66                 db    0
.eh_frame_hdr:0000000000007B67                 db    0
.eh_frame_hdr:0000000000007B68                 db 0D4h
.eh_frame_hdr:0000000000007B69                 db 0D4h
.eh_frame_hdr:0000000000007B6A                 db 0FFh
.eh_frame_hdr:0000000000007B6B                 db 0FFh
.eh_frame_hdr:0000000000007B6C                 db  38h ; 8
.eh_frame_hdr:0000000000007B6D                 db    8
.eh_frame_hdr:0000000000007B6E                 db    0
.eh_frame_hdr:0000000000007B6F                 db    0
.eh_frame_hdr:0000000000007B70                 db    4
.eh_frame_hdr:0000000000007B71                 db 0D5h
.eh_frame_hdr:0000000000007B72                 db 0FFh
.eh_frame_hdr:0000000000007B73                 db 0FFh
.eh_frame_hdr:0000000000007B74                 db  4Ch ; L
.eh_frame_hdr:0000000000007B75                 db    8
.eh_frame_hdr:0000000000007B76                 db    0
.eh_frame_hdr:0000000000007B77                 db    0
.eh_frame_hdr:0000000000007B78                 db  84h
.eh_frame_hdr:0000000000007B79                 db 0D5h
.eh_frame_hdr:0000000000007B7A                 db 0FFh
.eh_frame_hdr:0000000000007B7B                 db 0FFh
.eh_frame_hdr:0000000000007B7C                 db 0A0h
.eh_frame_hdr:0000000000007B7D                 db    8
.eh_frame_hdr:0000000000007B7E                 db    0
.eh_frame_hdr:0000000000007B7F                 db    0
.eh_frame_hdr:0000000000007B80                 db  74h ; t
.eh_frame_hdr:0000000000007B81                 db 0D6h
.eh_frame_hdr:0000000000007B82                 db 0FFh
.eh_frame_hdr:0000000000007B83                 db 0FFh
.eh_frame_hdr:0000000000007B84                 db  0Ch
.eh_frame_hdr:0000000000007B85                 db    9
.eh_frame_hdr:0000000000007B86                 db    0
.eh_frame_hdr:0000000000007B87                 db    0
.eh_frame_hdr:0000000000007B88                 db  84h
.eh_frame_hdr:0000000000007B89                 db 0D6h
.eh_frame_hdr:0000000000007B8A                 db 0FFh
.eh_frame_hdr:0000000000007B8B                 db 0FFh
.eh_frame_hdr:0000000000007B8C                 db  20h
.eh_frame_hdr:0000000000007B8D                 db    9
.eh_frame_hdr:0000000000007B8E                 db    0
.eh_frame_hdr:0000000000007B8F                 db    0
.eh_frame_hdr:0000000000007B90                 db  24h ; $
.eh_frame_hdr:0000000000007B91                 db 0D7h
.eh_frame_hdr:0000000000007B92                 db 0FFh
.eh_frame_hdr:0000000000007B93                 db 0FFh
.eh_frame_hdr:0000000000007B94                 db  4Ch ; L
.eh_frame_hdr:0000000000007B95                 db    9
.eh_frame_hdr:0000000000007B96                 db    0
.eh_frame_hdr:0000000000007B97                 db    0
.eh_frame_hdr:0000000000007B98                 db  44h ; D
.eh_frame_hdr:0000000000007B99                 db 0D7h
.eh_frame_hdr:0000000000007B9A                 db 0FFh
.eh_frame_hdr:0000000000007B9B                 db 0FFh
.eh_frame_hdr:0000000000007B9C                 db  60h ; `
.eh_frame_hdr:0000000000007B9D                 db    9
.eh_frame_hdr:0000000000007B9E                 db    0
.eh_frame_hdr:0000000000007B9F                 db    0
.eh_frame_hdr:0000000000007BA0                 db  54h ; T
.eh_frame_hdr:0000000000007BA1                 db 0D7h
.eh_frame_hdr:0000000000007BA2                 db 0FFh
.eh_frame_hdr:0000000000007BA3                 db 0FFh
.eh_frame_hdr:0000000000007BA4                 db  74h ; t
.eh_frame_hdr:0000000000007BA5                 db    9
.eh_frame_hdr:0000000000007BA6                 db    0
.eh_frame_hdr:0000000000007BA7                 db    0
.eh_frame_hdr:0000000000007BA8                 db  74h ; t
.eh_frame_hdr:0000000000007BA9                 db 0D7h
.eh_frame_hdr:0000000000007BAA                 db 0FFh
.eh_frame_hdr:0000000000007BAB                 db 0FFh
.eh_frame_hdr:0000000000007BAC                 db  88h
.eh_frame_hdr:0000000000007BAD                 db    9
.eh_frame_hdr:0000000000007BAE                 db    0
.eh_frame_hdr:0000000000007BAF                 db    0
.eh_frame_hdr:0000000000007BB0                 db  94h
.eh_frame_hdr:0000000000007BB1                 db 0D7h
.eh_frame_hdr:0000000000007BB2                 db 0FFh
.eh_frame_hdr:0000000000007BB3                 db 0FFh
.eh_frame_hdr:0000000000007BB4                 db  9Ch
.eh_frame_hdr:0000000000007BB5                 db    9
.eh_frame_hdr:0000000000007BB6                 db    0
.eh_frame_hdr:0000000000007BB7                 db    0
.eh_frame_hdr:0000000000007BB8                 db  24h ; $
.eh_frame_hdr:0000000000007BB9                 db 0D8h
.eh_frame_hdr:0000000000007BBA                 db 0FFh
.eh_frame_hdr:0000000000007BBB                 db 0FFh
.eh_frame_hdr:0000000000007BBC                 db 0B8h
.eh_frame_hdr:0000000000007BBD                 db    9
.eh_frame_hdr:0000000000007BBE                 db    0
.eh_frame_hdr:0000000000007BBF                 db    0
.eh_frame_hdr:0000000000007BC0                 db 0B4h
.eh_frame_hdr:0000000000007BC1                 db 0D8h
.eh_frame_hdr:0000000000007BC2                 db 0FFh
.eh_frame_hdr:0000000000007BC3                 db 0FFh
.eh_frame_hdr:0000000000007BC4                 db 0D4h
.eh_frame_hdr:0000000000007BC5                 db    9
.eh_frame_hdr:0000000000007BC6                 db    0
.eh_frame_hdr:0000000000007BC7                 db    0
.eh_frame_hdr:0000000000007BC8                 db 0C4h
.eh_frame_hdr:0000000000007BC9                 db 0D8h
.eh_frame_hdr:0000000000007BCA                 db 0FFh
.eh_frame_hdr:0000000000007BCB                 db 0FFh
.eh_frame_hdr:0000000000007BCC                 db 0E8h
.eh_frame_hdr:0000000000007BCD                 db    9
.eh_frame_hdr:0000000000007BCE                 db    0
.eh_frame_hdr:0000000000007BCF                 db    0
.eh_frame_hdr:0000000000007BD0                 db 0D4h
.eh_frame_hdr:0000000000007BD1                 db 0D8h
.eh_frame_hdr:0000000000007BD2                 db 0FFh
.eh_frame_hdr:0000000000007BD3                 db 0FFh
.eh_frame_hdr:0000000000007BD4                 db 0FCh
.eh_frame_hdr:0000000000007BD5                 db    9
.eh_frame_hdr:0000000000007BD6                 db    0
.eh_frame_hdr:0000000000007BD7                 db    0
.eh_frame_hdr:0000000000007BD8                 db  74h ; t
.eh_frame_hdr:0000000000007BD9                 db 0D9h
.eh_frame_hdr:0000000000007BDA                 db 0FFh
.eh_frame_hdr:0000000000007BDB                 db 0FFh
.eh_frame_hdr:0000000000007BDC                 db  18h
.eh_frame_hdr:0000000000007BDD                 db  0Ah
.eh_frame_hdr:0000000000007BDE                 db    0
.eh_frame_hdr:0000000000007BDF                 db    0
.eh_frame_hdr:0000000000007BE0                 db  84h
.eh_frame_hdr:0000000000007BE1                 db 0D9h
.eh_frame_hdr:0000000000007BE2                 db 0FFh
.eh_frame_hdr:0000000000007BE3                 db 0FFh
.eh_frame_hdr:0000000000007BE4                 db  2Ch ; ,
.eh_frame_hdr:0000000000007BE5                 db  0Ah
.eh_frame_hdr:0000000000007BE6                 db    0
.eh_frame_hdr:0000000000007BE7                 db    0
.eh_frame_hdr:0000000000007BE8                 db 0A4h
.eh_frame_hdr:0000000000007BE9                 db 0D9h
.eh_frame_hdr:0000000000007BEA                 db 0FFh
.eh_frame_hdr:0000000000007BEB                 db 0FFh
.eh_frame_hdr:0000000000007BEC                 db  40h ; @
.eh_frame_hdr:0000000000007BED                 db  0Ah
.eh_frame_hdr:0000000000007BEE                 db    0
.eh_frame_hdr:0000000000007BEF                 db    0
.eh_frame_hdr:0000000000007BF0                 db 0B4h
.eh_frame_hdr:0000000000007BF1                 db 0D9h
.eh_frame_hdr:0000000000007BF2                 db 0FFh
.eh_frame_hdr:0000000000007BF3                 db 0FFh
.eh_frame_hdr:0000000000007BF4                 db  54h ; T
.eh_frame_hdr:0000000000007BF5                 db  0Ah
.eh_frame_hdr:0000000000007BF6                 db    0
.eh_frame_hdr:0000000000007BF7                 db    0
.eh_frame_hdr:0000000000007BF8                 db  44h ; D
.eh_frame_hdr:0000000000007BF9                 db 0DAh
.eh_frame_hdr:0000000000007BFA                 db 0FFh
.eh_frame_hdr:0000000000007BFB                 db 0FFh
.eh_frame_hdr:0000000000007BFC                 db  70h ; p
.eh_frame_hdr:0000000000007BFD                 db  0Ah
.eh_frame_hdr:0000000000007BFE                 db    0
.eh_frame_hdr:0000000000007BFF                 db    0
.eh_frame_hdr:0000000000007C00                 db 0E4h
.eh_frame_hdr:0000000000007C01                 db 0DAh
.eh_frame_hdr:0000000000007C02                 db 0FFh
.eh_frame_hdr:0000000000007C03                 db 0FFh
.eh_frame_hdr:0000000000007C04                 db  8Ch
.eh_frame_hdr:0000000000007C05                 db  0Ah
.eh_frame_hdr:0000000000007C06                 db    0
.eh_frame_hdr:0000000000007C07                 db    0
.eh_frame_hdr:0000000000007C08                 db 0F4h
.eh_frame_hdr:0000000000007C09                 db 0DAh
.eh_frame_hdr:0000000000007C0A                 db 0FFh
.eh_frame_hdr:0000000000007C0B                 db 0FFh
.eh_frame_hdr:0000000000007C0C                 db 0A0h
.eh_frame_hdr:0000000000007C0D                 db  0Ah
.eh_frame_hdr:0000000000007C0E                 db    0
.eh_frame_hdr:0000000000007C0F                 db    0
.eh_frame_hdr:0000000000007C10                 db  14h
.eh_frame_hdr:0000000000007C11                 db 0DBh
.eh_frame_hdr:0000000000007C12                 db 0FFh
.eh_frame_hdr:0000000000007C13                 db 0FFh
.eh_frame_hdr:0000000000007C14                 db 0B4h
.eh_frame_hdr:0000000000007C15                 db  0Ah
.eh_frame_hdr:0000000000007C16                 db    0
.eh_frame_hdr:0000000000007C17                 db    0
.eh_frame_hdr:0000000000007C18                 db  34h ; 4
.eh_frame_hdr:0000000000007C19                 db 0DBh
.eh_frame_hdr:0000000000007C1A                 db 0FFh
.eh_frame_hdr:0000000000007C1B                 db 0FFh
.eh_frame_hdr:0000000000007C1C                 db 0C8h
.eh_frame_hdr:0000000000007C1D                 db  0Ah
.eh_frame_hdr:0000000000007C1E                 db    0
.eh_frame_hdr:0000000000007C1F                 db    0
.eh_frame_hdr:0000000000007C20                 db  44h ; D
.eh_frame_hdr:0000000000007C21                 db 0DBh
.eh_frame_hdr:0000000000007C22                 db 0FFh
.eh_frame_hdr:0000000000007C23                 db 0FFh
.eh_frame_hdr:0000000000007C24                 db 0DCh
.eh_frame_hdr:0000000000007C25                 db  0Ah
.eh_frame_hdr:0000000000007C26                 db    0
.eh_frame_hdr:0000000000007C27                 db    0
.eh_frame_hdr:0000000000007C28                 db  64h ; d
.eh_frame_hdr:0000000000007C29                 db 0DBh
.eh_frame_hdr:0000000000007C2A                 db 0FFh
.eh_frame_hdr:0000000000007C2B                 db 0FFh
.eh_frame_hdr:0000000000007C2C                 db 0F0h
.eh_frame_hdr:0000000000007C2D                 db  0Ah
.eh_frame_hdr:0000000000007C2E                 db    0
.eh_frame_hdr:0000000000007C2F                 db    0
.eh_frame_hdr:0000000000007C30                 db  84h
.eh_frame_hdr:0000000000007C31                 db 0DBh
.eh_frame_hdr:0000000000007C32                 db 0FFh
.eh_frame_hdr:0000000000007C33                 db 0FFh
.eh_frame_hdr:0000000000007C34                 db    4
.eh_frame_hdr:0000000000007C35                 db  0Bh
.eh_frame_hdr:0000000000007C36                 db    0
.eh_frame_hdr:0000000000007C37                 db    0
.eh_frame_hdr:0000000000007C38                 db 0A4h
.eh_frame_hdr:0000000000007C39                 db 0DBh
.eh_frame_hdr:0000000000007C3A                 db 0FFh
.eh_frame_hdr:0000000000007C3B                 db 0FFh
.eh_frame_hdr:0000000000007C3C                 db  1Ch
.eh_frame_hdr:0000000000007C3D                 db  0Bh
.eh_frame_hdr:0000000000007C3E                 db    0
.eh_frame_hdr:0000000000007C3F                 db    0
.eh_frame_hdr:0000000000007C40                 db    4
.eh_frame_hdr:0000000000007C41                 db 0DCh
.eh_frame_hdr:0000000000007C42                 db 0FFh
.eh_frame_hdr:0000000000007C43                 db 0FFh
.eh_frame_hdr:0000000000007C44                 db  54h ; T
.eh_frame_hdr:0000000000007C45                 db  0Bh
.eh_frame_hdr:0000000000007C46                 db    0
.eh_frame_hdr:0000000000007C47                 db    0
.eh_frame_hdr:0000000000007C48                 db  24h ; $
.eh_frame_hdr:0000000000007C49                 db 0E0h
.eh_frame_hdr:0000000000007C4A                 db 0FFh
.eh_frame_hdr:0000000000007C4B                 db 0FFh
.eh_frame_hdr:0000000000007C4C                 db  68h ; h
.eh_frame_hdr:0000000000007C4D                 db  0Ch
.eh_frame_hdr:0000000000007C4E                 db    0
.eh_frame_hdr:0000000000007C4F                 db    0
.eh_frame_hdr:0000000000007C50                 db  44h ; D
.eh_frame_hdr:0000000000007C51                 db 0E0h
.eh_frame_hdr:0000000000007C52                 db 0FFh
.eh_frame_hdr:0000000000007C53                 db 0FFh
.eh_frame_hdr:0000000000007C54                 db  7Ch ; |
.eh_frame_hdr:0000000000007C55                 db  0Ch
.eh_frame_hdr:0000000000007C56                 db    0
.eh_frame_hdr:0000000000007C57                 db    0
.eh_frame_hdr:0000000000007C58                 db 0C4h
.eh_frame_hdr:0000000000007C59                 db 0E0h
.eh_frame_hdr:0000000000007C5A                 db 0FFh
.eh_frame_hdr:0000000000007C5B                 db 0FFh
.eh_frame_hdr:0000000000007C5C                 db  98h
.eh_frame_hdr:0000000000007C5D                 db  0Ch
.eh_frame_hdr:0000000000007C5E                 db    0
.eh_frame_hdr:0000000000007C5F                 db    0
.eh_frame_hdr:0000000000007C60                 db 0A4h
.eh_frame_hdr:0000000000007C61                 db 0E1h
.eh_frame_hdr:0000000000007C62                 db 0FFh
.eh_frame_hdr:0000000000007C63                 db 0FFh
.eh_frame_hdr:0000000000007C64                 db 0C4h
.eh_frame_hdr:0000000000007C65                 db  0Ch
.eh_frame_hdr:0000000000007C66                 db    0
.eh_frame_hdr:0000000000007C67                 db    0
.eh_frame_hdr:0000000000007C68                 db  24h ; $
.eh_frame_hdr:0000000000007C69                 db 0E2h
.eh_frame_hdr:0000000000007C6A                 db 0FFh
.eh_frame_hdr:0000000000007C6B                 db 0FFh
.eh_frame_hdr:0000000000007C6C                 db 0E4h
.eh_frame_hdr:0000000000007C6D                 db  0Ch
.eh_frame_hdr:0000000000007C6E                 db    0
.eh_frame_hdr:0000000000007C6F                 db    0
.eh_frame_hdr:0000000000007C70                 db  44h ; D
.eh_frame_hdr:0000000000007C71                 db 0E2h
.eh_frame_hdr:0000000000007C72                 db 0FFh
.eh_frame_hdr:0000000000007C73                 db 0FFh
.eh_frame_hdr:0000000000007C74                 db    0
.eh_frame_hdr:0000000000007C75                 db  0Dh
.eh_frame_hdr:0000000000007C76                 db    0
.eh_frame_hdr:0000000000007C77                 db    0
.eh_frame_hdr:0000000000007C78                 db  74h ; t
.eh_frame_hdr:0000000000007C79                 db 0E2h
.eh_frame_hdr:0000000000007C7A                 db 0FFh
.eh_frame_hdr:0000000000007C7B                 db 0FFh
.eh_frame_hdr:0000000000007C7C                 db  14h
.eh_frame_hdr:0000000000007C7D                 db  0Dh
.eh_frame_hdr:0000000000007C7E                 db    0
.eh_frame_hdr:0000000000007C7F                 db    0
.eh_frame_hdr:0000000000007C80                 db  84h
.eh_frame_hdr:0000000000007C81                 db 0E2h
.eh_frame_hdr:0000000000007C82                 db 0FFh
.eh_frame_hdr:0000000000007C83                 db 0FFh
.eh_frame_hdr:0000000000007C84                 db  28h ; (
.eh_frame_hdr:0000000000007C85                 db  0Dh
.eh_frame_hdr:0000000000007C86                 db    0
.eh_frame_hdr:0000000000007C87                 db    0
.eh_frame_hdr:0000000000007C88                 db 0C4h
.eh_frame_hdr:0000000000007C89                 db 0E2h
.eh_frame_hdr:0000000000007C8A                 db 0FFh
.eh_frame_hdr:0000000000007C8B                 db 0FFh
.eh_frame_hdr:0000000000007C8C                 db  4Ch ; L
.eh_frame_hdr:0000000000007C8D                 db  0Dh
.eh_frame_hdr:0000000000007C8E                 db    0
.eh_frame_hdr:0000000000007C8F                 db    0
.eh_frame_hdr:0000000000007C90                 db 0F4h
.eh_frame_hdr:0000000000007C91                 db 0E2h
.eh_frame_hdr:0000000000007C92                 db 0FFh
.eh_frame_hdr:0000000000007C93                 db 0FFh
.eh_frame_hdr:0000000000007C94                 db  60h ; `
.eh_frame_hdr:0000000000007C95                 db  0Dh
.eh_frame_hdr:0000000000007C96                 db    0
.eh_frame_hdr:0000000000007C97                 db    0
.eh_frame_hdr:0000000000007C98                 db  84h
.eh_frame_hdr:0000000000007C99                 db 0E3h
.eh_frame_hdr:0000000000007C9A                 db 0FFh
.eh_frame_hdr:0000000000007C9B                 db 0FFh
.eh_frame_hdr:0000000000007C9C                 db  78h ; x
.eh_frame_hdr:0000000000007C9D                 db  0Dh
.eh_frame_hdr:0000000000007C9E                 db    0
.eh_frame_hdr:0000000000007C9F                 db    0
.eh_frame_hdr:0000000000007CA0                 db 0D4h
.eh_frame_hdr:0000000000007CA1                 db 0E3h
.eh_frame_hdr:0000000000007CA2                 db 0FFh
.eh_frame_hdr:0000000000007CA3                 db 0FFh
.eh_frame_hdr:0000000000007CA4                 db  90h
.eh_frame_hdr:0000000000007CA5                 db  0Dh
.eh_frame_hdr:0000000000007CA6                 db    0
.eh_frame_hdr:0000000000007CA7                 db    0
.eh_frame_hdr:0000000000007CA8                 db 0F4h
.eh_frame_hdr:0000000000007CA9                 db 0E3h
.eh_frame_hdr:0000000000007CAA                 db 0FFh
.eh_frame_hdr:0000000000007CAB                 db 0FFh
.eh_frame_hdr:0000000000007CAC                 db 0ACh
.eh_frame_hdr:0000000000007CAD                 db  0Dh
.eh_frame_hdr:0000000000007CAE                 db    0
.eh_frame_hdr:0000000000007CAF                 db    0
.eh_frame_hdr:0000000000007CB0                 db  24h ; $
.eh_frame_hdr:0000000000007CB1                 db 0E4h
.eh_frame_hdr:0000000000007CB2                 db 0FFh
.eh_frame_hdr:0000000000007CB3                 db 0FFh
.eh_frame_hdr:0000000000007CB4                 db 0C8h
.eh_frame_hdr:0000000000007CB5                 db  0Dh
.eh_frame_hdr:0000000000007CB6                 db    0
.eh_frame_hdr:0000000000007CB7                 db    0
.eh_frame_hdr:0000000000007CB8                 db  54h ; T
.eh_frame_hdr:0000000000007CB9                 db 0E4h
.eh_frame_hdr:0000000000007CBA                 db 0FFh
.eh_frame_hdr:0000000000007CBB                 db 0FFh
.eh_frame_hdr:0000000000007CBC                 db 0F0h
.eh_frame_hdr:0000000000007CBD                 db  0Dh
.eh_frame_hdr:0000000000007CBE                 db    0
.eh_frame_hdr:0000000000007CBF                 db    0
.eh_frame_hdr:0000000000007CC0                 db  74h ; t
.eh_frame_hdr:0000000000007CC1                 db 0E4h
.eh_frame_hdr:0000000000007CC2                 db 0FFh
.eh_frame_hdr:0000000000007CC3                 db 0FFh
.eh_frame_hdr:0000000000007CC4                 db  0Ch
.eh_frame_hdr:0000000000007CC5                 db  0Eh
.eh_frame_hdr:0000000000007CC6                 db    0
.eh_frame_hdr:0000000000007CC7                 db    0
.eh_frame_hdr:0000000000007CC8                 db 0B4h
.eh_frame_hdr:0000000000007CC9                 db 0E4h
.eh_frame_hdr:0000000000007CCA                 db 0FFh
.eh_frame_hdr:0000000000007CCB                 db 0FFh
.eh_frame_hdr:0000000000007CCC                 db  24h ; $
.eh_frame_hdr:0000000000007CCD                 db  0Eh
.eh_frame_hdr:0000000000007CCE                 db    0
.eh_frame_hdr:0000000000007CCF                 db    0
.eh_frame_hdr:0000000000007CD0                 db 0B4h
.eh_frame_hdr:0000000000007CD1                 db 0E5h
.eh_frame_hdr:0000000000007CD2                 db 0FFh
.eh_frame_hdr:0000000000007CD3                 db 0FFh
.eh_frame_hdr:0000000000007CD4                 db  70h ; p
.eh_frame_hdr:0000000000007CD5                 db  0Eh
.eh_frame_hdr:0000000000007CD6                 db    0
.eh_frame_hdr:0000000000007CD7                 db    0
.eh_frame_hdr:0000000000007CD8                 db 0E4h
.eh_frame_hdr:0000000000007CD9                 db 0E5h
.eh_frame_hdr:0000000000007CDA                 db 0FFh
.eh_frame_hdr:0000000000007CDB                 db 0FFh
.eh_frame_hdr:0000000000007CDC                 db  8Ch
.eh_frame_hdr:0000000000007CDD                 db  0Eh
.eh_frame_hdr:0000000000007CDE                 db    0
.eh_frame_hdr:0000000000007CDF                 db    0
.eh_frame_hdr:0000000000007CE0                 db    4
.eh_frame_hdr:0000000000007CE1                 db 0EAh
.eh_frame_hdr:0000000000007CE2                 db 0FFh
.eh_frame_hdr:0000000000007CE3                 db 0FFh
.eh_frame_hdr:0000000000007CE4                 db 0DCh
.eh_frame_hdr:0000000000007CE5                 db  0Eh
.eh_frame_hdr:0000000000007CE6                 db    0
.eh_frame_hdr:0000000000007CE7                 db    0
.eh_frame_hdr:0000000000007CE8                 db  94h
.eh_frame_hdr:0000000000007CE9                 db 0EAh
.eh_frame_hdr:0000000000007CEA                 db 0FFh
.eh_frame_hdr:0000000000007CEB                 db 0FFh
.eh_frame_hdr:0000000000007CEC                 db  1Ch
.eh_frame_hdr:0000000000007CED                 db  0Fh
.eh_frame_hdr:0000000000007CEE                 db    0
.eh_frame_hdr:0000000000007CEF                 db    0
.eh_frame_hdr:0000000000007CF0                 db  14h
.eh_frame_hdr:0000000000007CF1                 db 0EBh
.eh_frame_hdr:0000000000007CF2                 db 0FFh
.eh_frame_hdr:0000000000007CF3                 db 0FFh
.eh_frame_hdr:0000000000007CF4                 db  6Ch ; l
.eh_frame_hdr:0000000000007CF5                 db  0Fh
.eh_frame_hdr:0000000000007CF6                 db    0
.eh_frame_hdr:0000000000007CF7                 db    0
.eh_frame_hdr:0000000000007CF8                 db  74h ; t
.eh_frame_hdr:0000000000007CF9                 db 0EBh
.eh_frame_hdr:0000000000007CFA                 db 0FFh
.eh_frame_hdr:0000000000007CFB                 db 0FFh
.eh_frame_hdr:0000000000007CFC                 db  8Ch
.eh_frame_hdr:0000000000007CFD                 db  0Fh
.eh_frame_hdr:0000000000007CFE                 db    0
.eh_frame_hdr:0000000000007CFF                 db    0
.eh_frame_hdr:0000000000007D00                 db 0B4h
.eh_frame_hdr:0000000000007D01                 db 0EBh
.eh_frame_hdr:0000000000007D02                 db 0FFh
.eh_frame_hdr:0000000000007D03                 db 0FFh
.eh_frame_hdr:0000000000007D04                 db 0ACh
.eh_frame_hdr:0000000000007D05                 db  0Fh
.eh_frame_hdr:0000000000007D06                 db    0
.eh_frame_hdr:0000000000007D07                 db    0
.eh_frame_hdr:0000000000007D08                 db  34h ; 4
.eh_frame_hdr:0000000000007D09                 db 0ECh
.eh_frame_hdr:0000000000007D0A                 db 0FFh
.eh_frame_hdr:0000000000007D0B                 db 0FFh
.eh_frame_hdr:0000000000007D0C                 db 0E4h
.eh_frame_hdr:0000000000007D0D                 db  0Fh
.eh_frame_hdr:0000000000007D0E                 db    0
.eh_frame_hdr:0000000000007D0F                 db    0
.eh_frame_hdr:0000000000007D10                 db  74h ; t
.eh_frame_hdr:0000000000007D11                 db 0ECh
.eh_frame_hdr:0000000000007D12                 db 0FFh
.eh_frame_hdr:0000000000007D13                 db 0FFh
.eh_frame_hdr:0000000000007D14                 db    4
.eh_frame_hdr:0000000000007D15                 db  10h
.eh_frame_hdr:0000000000007D16                 db    0
.eh_frame_hdr:0000000000007D17                 db    0
.eh_frame_hdr:0000000000007D18                 db 0D4h
.eh_frame_hdr:0000000000007D19                 db 0ECh
.eh_frame_hdr:0000000000007D1A                 db 0FFh
.eh_frame_hdr:0000000000007D1B                 db 0FFh
.eh_frame_hdr:0000000000007D1C                 db  34h ; 4
.eh_frame_hdr:0000000000007D1D                 db  10h
.eh_frame_hdr:0000000000007D1E                 db    0
.eh_frame_hdr:0000000000007D1F                 db    0
.eh_frame_hdr:0000000000007D20                 db  44h ; D
.eh_frame_hdr:0000000000007D21                 db 0EDh
.eh_frame_hdr:0000000000007D22                 db 0FFh
.eh_frame_hdr:0000000000007D23                 db 0FFh
.eh_frame_hdr:0000000000007D24                 db  7Ch ; |
.eh_frame_hdr:0000000000007D25                 db  10h
.eh_frame_hdr:0000000000007D26                 db    0
.eh_frame_hdr:0000000000007D27                 db    0
.eh_frame_hdr:0000000000007D28                 db  54h ; T
.eh_frame_hdr:0000000000007D29                 db 0EDh
.eh_frame_hdr:0000000000007D2A                 db 0FFh
.eh_frame_hdr:0000000000007D2B                 db 0FFh
.eh_frame_hdr:0000000000007D2C                 db  94h
.eh_frame_hdr:0000000000007D2D                 db  10h
.eh_frame_hdr:0000000000007D2E                 db    0
.eh_frame_hdr:0000000000007D2F                 db    0
.eh_frame_hdr:0000000000007D2F _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007D2F
.eh_frame:0000000000007D30 ; ===========================================================================
.eh_frame:0000000000007D30
.eh_frame:0000000000007D30 ; Segment type: Pure data
.eh_frame:0000000000007D30 ; Segment permissions: Read
.eh_frame:0000000000007D30 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007D30                 assume cs:_eh_frame
.eh_frame:0000000000007D30                 ;org 7D30h
.eh_frame:0000000000007D30                 db  14h
.eh_frame:0000000000007D31                 db    0
.eh_frame:0000000000007D32                 db    0
.eh_frame:0000000000007D33                 db    0
.eh_frame:0000000000007D34                 db    0
.eh_frame:0000000000007D35                 db    0
.eh_frame:0000000000007D36                 db    0
.eh_frame:0000000000007D37                 db    0
.eh_frame:0000000000007D38                 db    1
.eh_frame:0000000000007D39                 db  7Ah ; z
.eh_frame:0000000000007D3A                 db  52h ; R
.eh_frame:0000000000007D3B                 db    0
.eh_frame:0000000000007D3C                 db    1
.eh_frame:0000000000007D3D                 db  78h ; x
.eh_frame:0000000000007D3E                 db  10h
.eh_frame:0000000000007D3F                 db    1
.eh_frame:0000000000007D40                 db  1Bh
.eh_frame:0000000000007D41                 db  0Ch
.eh_frame:0000000000007D42                 db    7
.eh_frame:0000000000007D43                 db    8
.eh_frame:0000000000007D44                 db  90h
.eh_frame:0000000000007D45                 db    1
.eh_frame:0000000000007D46                 db    7
.eh_frame:0000000000007D47                 db  10h
.eh_frame:0000000000007D48                 db  14h
.eh_frame:0000000000007D49                 db    0
.eh_frame:0000000000007D4A                 db    0
.eh_frame:0000000000007D4B                 db    0
.eh_frame:0000000000007D4C                 db  1Ch
.eh_frame:0000000000007D4D                 db    0
.eh_frame:0000000000007D4E                 db    0
.eh_frame:0000000000007D4F                 db    0
.eh_frame:0000000000007D50                 db  10h
.eh_frame:0000000000007D51                 db 0ACh
.eh_frame:0000000000007D52                 db 0FFh
.eh_frame:0000000000007D53                 db 0FFh
.eh_frame:0000000000007D54                 db  2Bh ; +
.eh_frame:0000000000007D55                 db    0
.eh_frame:0000000000007D56                 db    0
.eh_frame:0000000000007D57                 db    0
.eh_frame:0000000000007D58                 db    0
.eh_frame:0000000000007D59                 db    0
.eh_frame:0000000000007D5A                 db    0
.eh_frame:0000000000007D5B                 db    0
.eh_frame:0000000000007D5C                 db    0
.eh_frame:0000000000007D5D                 db    0
.eh_frame:0000000000007D5E                 db    0
.eh_frame:0000000000007D5F                 db    0
.eh_frame:0000000000007D60                 db  14h
.eh_frame:0000000000007D61                 db    0
.eh_frame:0000000000007D62                 db    0
.eh_frame:0000000000007D63                 db    0
.eh_frame:0000000000007D64                 db    0
.eh_frame:0000000000007D65                 db    0
.eh_frame:0000000000007D66                 db    0
.eh_frame:0000000000007D67                 db    0
.eh_frame:0000000000007D68                 db    1
.eh_frame:0000000000007D69                 db  7Ah ; z
.eh_frame:0000000000007D6A                 db  52h ; R
.eh_frame:0000000000007D6B                 db    0
.eh_frame:0000000000007D6C                 db    1
.eh_frame:0000000000007D6D                 db  78h ; x
.eh_frame:0000000000007D6E                 db  10h
.eh_frame:0000000000007D6F                 db    1
.eh_frame:0000000000007D70                 db  1Bh
.eh_frame:0000000000007D71                 db  0Ch
.eh_frame:0000000000007D72                 db    7
.eh_frame:0000000000007D73                 db    8
.eh_frame:0000000000007D74                 db  90h
.eh_frame:0000000000007D75                 db    1
.eh_frame:0000000000007D76                 db    0
.eh_frame:0000000000007D77                 db    0
.eh_frame:0000000000007D78                 db  24h ; $
.eh_frame:0000000000007D79                 db    0
.eh_frame:0000000000007D7A                 db    0
.eh_frame:0000000000007D7B                 db    0
.eh_frame:0000000000007D7C                 db  1Ch
.eh_frame:0000000000007D7D                 db    0
.eh_frame:0000000000007D7E                 db    0
.eh_frame:0000000000007D7F                 db    0
.eh_frame:0000000000007D80                 db  70h ; p
.eh_frame:0000000000007D81                 db  97h
.eh_frame:0000000000007D82                 db 0FFh
.eh_frame:0000000000007D83                 db 0FFh
.eh_frame:0000000000007D84                 db  30h ; 0
.eh_frame:0000000000007D85                 db    3
.eh_frame:0000000000007D86                 db    0
.eh_frame:0000000000007D87                 db    0
.eh_frame:0000000000007D88                 db    0
.eh_frame:0000000000007D89                 db  0Eh
.eh_frame:0000000000007D8A                 db  10h
.eh_frame:0000000000007D8B                 db  46h ; F
.eh_frame:0000000000007D8C                 db  0Eh
.eh_frame:0000000000007D8D                 db  18h
.eh_frame:0000000000007D8E                 db  4Ah ; J
.eh_frame:0000000000007D8F                 db  0Fh
.eh_frame:0000000000007D90                 db  0Bh
.eh_frame:0000000000007D91                 db  77h ; w
.eh_frame:0000000000007D92                 db    8
.eh_frame:0000000000007D93                 db  80h
.eh_frame:0000000000007D94                 db    0
.eh_frame:0000000000007D95                 db  3Fh ; ?
.eh_frame:0000000000007D96                 db  1Ah
.eh_frame:0000000000007D97                 db  3Bh ; ;
.eh_frame:0000000000007D98                 db  2Ah ; *
.eh_frame:0000000000007D99                 db  33h ; 3
.eh_frame:0000000000007D9A                 db  24h ; $
.eh_frame:0000000000007D9B                 db  22h ; "
.eh_frame:0000000000007D9C                 db    0
.eh_frame:0000000000007D9D                 db    0
.eh_frame:0000000000007D9E                 db    0
.eh_frame:0000000000007D9F                 db    0
.eh_frame:0000000000007DA0                 db  14h
.eh_frame:0000000000007DA1                 db    0
.eh_frame:0000000000007DA2                 db    0
.eh_frame:0000000000007DA3                 db    0
.eh_frame:0000000000007DA4                 db  44h ; D
.eh_frame:0000000000007DA5                 db    0
.eh_frame:0000000000007DA6                 db    0
.eh_frame:0000000000007DA7                 db    0
.eh_frame:0000000000007DA8                 db  78h ; x
.eh_frame:0000000000007DA9                 db  9Ah
.eh_frame:0000000000007DAA                 db 0FFh
.eh_frame:0000000000007DAB                 db 0FFh
.eh_frame:0000000000007DAC                 db    8
.eh_frame:0000000000007DAD                 db    0
.eh_frame:0000000000007DAE                 db    0
.eh_frame:0000000000007DAF                 db    0
.eh_frame:0000000000007DB0                 db    0
.eh_frame:0000000000007DB1                 db    0
.eh_frame:0000000000007DB2                 db    0
.eh_frame:0000000000007DB3                 db    0
.eh_frame:0000000000007DB4                 db    0
.eh_frame:0000000000007DB5                 db    0
.eh_frame:0000000000007DB6                 db    0
.eh_frame:0000000000007DB7                 db    0
.eh_frame:0000000000007DB8                 db  18h
.eh_frame:0000000000007DB9                 db    0
.eh_frame:0000000000007DBA                 db    0
.eh_frame:0000000000007DBB                 db    0
.eh_frame:0000000000007DBC                 db  5Ch ; \
.eh_frame:0000000000007DBD                 db    0
.eh_frame:0000000000007DBE                 db    0
.eh_frame:0000000000007DBF                 db    0
.eh_frame:0000000000007DC0                 db 0B0h
.eh_frame:0000000000007DC1                 db 0ACh
.eh_frame:0000000000007DC2                 db 0FFh
.eh_frame:0000000000007DC3                 db 0FFh
.eh_frame:0000000000007DC4                 db  53h ; S
.eh_frame:0000000000007DC5                 db    0
.eh_frame:0000000000007DC6                 db    0
.eh_frame:0000000000007DC7                 db    0
.eh_frame:0000000000007DC8                 db    0
.eh_frame:0000000000007DC9                 db  44h ; D
.eh_frame:0000000000007DCA                 db  0Eh
.eh_frame:0000000000007DCB                 db  10h
.eh_frame:0000000000007DCC                 db  83h
.eh_frame:0000000000007DCD                 db    2
.eh_frame:0000000000007DCE                 db  69h ; i
.eh_frame:0000000000007DCF                 db  0Ah
.eh_frame:0000000000007DD0                 db  0Eh
.eh_frame:0000000000007DD1                 db    8
.eh_frame:0000000000007DD2                 db  53h ; S
.eh_frame:0000000000007DD3                 db  0Bh
.eh_frame:0000000000007DD4                 db  38h ; 8
.eh_frame:0000000000007DD5                 db    0
.eh_frame:0000000000007DD6                 db    0
.eh_frame:0000000000007DD7                 db    0
.eh_frame:0000000000007DD8                 db  78h ; x
.eh_frame:0000000000007DD9                 db    0
.eh_frame:0000000000007DDA                 db    0
.eh_frame:0000000000007DDB                 db    0
.eh_frame:0000000000007DDC                 db 0F4h
.eh_frame:0000000000007DDD                 db 0ACh
.eh_frame:0000000000007DDE                 db 0FFh
.eh_frame:0000000000007DDF                 db 0FFh
.eh_frame:0000000000007DE0                 db 0B3h
.eh_frame:0000000000007DE1                 db    0
.eh_frame:0000000000007DE2                 db    0
.eh_frame:0000000000007DE3                 db    0
.eh_frame:0000000000007DE4                 db    0
.eh_frame:0000000000007DE5                 db  42h ; B
.eh_frame:0000000000007DE6                 db  0Eh
.eh_frame:0000000000007DE7                 db  10h
.eh_frame:0000000000007DE8                 db  8Dh
.eh_frame:0000000000007DE9                 db    2
.eh_frame:0000000000007DEA                 db  42h ; B
.eh_frame:0000000000007DEB                 db  0Eh
.eh_frame:0000000000007DEC                 db  18h
.eh_frame:0000000000007DED                 db  8Ch
.eh_frame:0000000000007DEE                 db    3
.eh_frame:0000000000007DEF                 db  44h ; D
.eh_frame:0000000000007DF0                 db  0Eh
.eh_frame:0000000000007DF1                 db  20h
.eh_frame:0000000000007DF2                 db  86h
.eh_frame:0000000000007DF3                 db    4
.eh_frame:0000000000007DF4                 db  41h ; A
.eh_frame:0000000000007DF5                 db  0Eh
.eh_frame:0000000000007DF6                 db  28h ; (
.eh_frame:0000000000007DF7                 db  83h
.eh_frame:0000000000007DF8                 db    5
.eh_frame:0000000000007DF9                 db  49h ; I
.eh_frame:0000000000007DFA                 db  0Eh
.eh_frame:0000000000007DFB                 db  50h ; P
.eh_frame:0000000000007DFC                 db  74h ; t
.eh_frame:0000000000007DFD                 db  0Ah
.eh_frame:0000000000007DFE                 db  0Eh
.eh_frame:0000000000007DFF                 db  28h ; (
.eh_frame:0000000000007E00                 db  41h ; A
.eh_frame:0000000000007E01                 db  0Eh
.eh_frame:0000000000007E02                 db  20h
.eh_frame:0000000000007E03                 db  41h ; A
.eh_frame:0000000000007E04                 db  0Eh
.eh_frame:0000000000007E05                 db  18h
.eh_frame:0000000000007E06                 db  42h ; B
.eh_frame:0000000000007E07                 db  0Eh
.eh_frame:0000000000007E08                 db  10h
.eh_frame:0000000000007E09                 db  42h ; B
.eh_frame:0000000000007E0A                 db  0Eh
.eh_frame:0000000000007E0B                 db    8
.eh_frame:0000000000007E0C                 db  44h ; D
.eh_frame:0000000000007E0D                 db  0Bh
.eh_frame:0000000000007E0E                 db    0
.eh_frame:0000000000007E0F                 db    0
.eh_frame:0000000000007E10                 db  28h ; (
.eh_frame:0000000000007E11                 db    0
.eh_frame:0000000000007E12                 db    0
.eh_frame:0000000000007E13                 db    0
.eh_frame:0000000000007E14                 db 0B4h
.eh_frame:0000000000007E15                 db    0
.eh_frame:0000000000007E16                 db    0
.eh_frame:0000000000007E17                 db    0
.eh_frame:0000000000007E18                 db  78h ; x
.eh_frame:0000000000007E19                 db 0ADh
.eh_frame:0000000000007E1A                 db 0FFh
.eh_frame:0000000000007E1B                 db 0FFh
.eh_frame:0000000000007E1C                 db  78h ; x
.eh_frame:0000000000007E1D                 db    0
.eh_frame:0000000000007E1E                 db    0
.eh_frame:0000000000007E1F                 db    0
.eh_frame:0000000000007E20                 db    0
.eh_frame:0000000000007E21                 db  41h ; A
.eh_frame:0000000000007E22                 db  0Eh
.eh_frame:0000000000007E23                 db  10h
.eh_frame:0000000000007E24                 db  86h
.eh_frame:0000000000007E25                 db    2
.eh_frame:0000000000007E26                 db  41h ; A
.eh_frame:0000000000007E27                 db  0Eh
.eh_frame:0000000000007E28                 db  18h
.eh_frame:0000000000007E29                 db  83h
.eh_frame:0000000000007E2A                 db    3
.eh_frame:0000000000007E2B                 db  4Fh ; O
.eh_frame:0000000000007E2C                 db  0Eh
.eh_frame:0000000000007E2D                 db  20h
.eh_frame:0000000000007E2E                 db  55h ; U
.eh_frame:0000000000007E2F                 db  0Ah
.eh_frame:0000000000007E30                 db  0Eh
.eh_frame:0000000000007E31                 db  18h
.eh_frame:0000000000007E32                 db  41h ; A
.eh_frame:0000000000007E33                 db  0Eh
.eh_frame:0000000000007E34                 db  10h
.eh_frame:0000000000007E35                 db  41h ; A
.eh_frame:0000000000007E36                 db  0Eh
.eh_frame:0000000000007E37                 db    8
.eh_frame:0000000000007E38                 db  41h ; A
.eh_frame:0000000000007E39                 db  0Bh
.eh_frame:0000000000007E3A                 db    0
.eh_frame:0000000000007E3B                 db    0
.eh_frame:0000000000007E3C                 db  38h ; 8
.eh_frame:0000000000007E3D                 db    0
.eh_frame:0000000000007E3E                 db    0
.eh_frame:0000000000007E3F                 db    0
.eh_frame:0000000000007E40                 db 0E0h
.eh_frame:0000000000007E41                 db    0
.eh_frame:0000000000007E42                 db    0
.eh_frame:0000000000007E43                 db    0
.eh_frame:0000000000007E44                 db 0CCh
.eh_frame:0000000000007E45                 db 0ADh
.eh_frame:0000000000007E46                 db 0FFh
.eh_frame:0000000000007E47                 db 0FFh
.eh_frame:0000000000007E48                 db 0CCh
.eh_frame:0000000000007E49                 db    0
.eh_frame:0000000000007E4A                 db    0
.eh_frame:0000000000007E4B                 db    0
.eh_frame:0000000000007E4C                 db    0
.eh_frame:0000000000007E4D                 db  42h ; B
.eh_frame:0000000000007E4E                 db  0Eh
.eh_frame:0000000000007E4F                 db  10h
.eh_frame:0000000000007E50                 db  8Dh
.eh_frame:0000000000007E51                 db    2
.eh_frame:0000000000007E52                 db  42h ; B
.eh_frame:0000000000007E53                 db  0Eh
.eh_frame:0000000000007E54                 db  18h
.eh_frame:0000000000007E55                 db  8Ch
.eh_frame:0000000000007E56                 db    3
.eh_frame:0000000000007E57                 db  41h ; A
.eh_frame:0000000000007E58                 db  0Eh
.eh_frame:0000000000007E59                 db  20h
.eh_frame:0000000000007E5A                 db  86h
.eh_frame:0000000000007E5B                 db    4
.eh_frame:0000000000007E5C                 db  41h ; A
.eh_frame:0000000000007E5D                 db  0Eh
.eh_frame:0000000000007E5E                 db  28h ; (
.eh_frame:0000000000007E5F                 db  83h
.eh_frame:0000000000007E60                 db    5
.eh_frame:0000000000007E61                 db  47h ; G
.eh_frame:0000000000007E62                 db  0Eh
.eh_frame:0000000000007E63                 db 0C0h
.eh_frame:0000000000007E64                 db  40h ; @
.eh_frame:0000000000007E65                 db    2
.eh_frame:0000000000007E66                 db  95h
.eh_frame:0000000000007E67                 db  0Ah
.eh_frame:0000000000007E68                 db  0Eh
.eh_frame:0000000000007E69                 db  28h ; (
.eh_frame:0000000000007E6A                 db  41h ; A
.eh_frame:0000000000007E6B                 db  0Eh
.eh_frame:0000000000007E6C                 db  20h
.eh_frame:0000000000007E6D                 db  41h ; A
.eh_frame:0000000000007E6E                 db  0Eh
.eh_frame:0000000000007E6F                 db  18h
.eh_frame:0000000000007E70                 db  42h ; B
.eh_frame:0000000000007E71                 db  0Eh
.eh_frame:0000000000007E72                 db  10h
.eh_frame:0000000000007E73                 db  42h ; B
.eh_frame:0000000000007E74                 db  0Eh
.eh_frame:0000000000007E75                 db    8
.eh_frame:0000000000007E76                 db  48h ; H
.eh_frame:0000000000007E77                 db  0Bh
.eh_frame:0000000000007E78                 db  48h ; H
.eh_frame:0000000000007E79                 db    0
.eh_frame:0000000000007E7A                 db    0
.eh_frame:0000000000007E7B                 db    0
.eh_frame:0000000000007E7C                 db  1Ch
.eh_frame:0000000000007E7D                 db    1
.eh_frame:0000000000007E7E                 db    0
.eh_frame:0000000000007E7F                 db    0
.eh_frame:0000000000007E80                 db  60h ; `
.eh_frame:0000000000007E81                 db 0AEh
.eh_frame:0000000000007E82                 db 0FFh
.eh_frame:0000000000007E83                 db 0FFh
.eh_frame:0000000000007E84                 db  87h
.eh_frame:0000000000007E85                 db    1
.eh_frame:0000000000007E86                 db    0
.eh_frame:0000000000007E87                 db    0
.eh_frame:0000000000007E88                 db    0
.eh_frame:0000000000007E89                 db  42h ; B
.eh_frame:0000000000007E8A                 db  0Eh
.eh_frame:0000000000007E8B                 db  10h
.eh_frame:0000000000007E8C                 db  8Fh
.eh_frame:0000000000007E8D                 db    2
.eh_frame:0000000000007E8E                 db  42h ; B
.eh_frame:0000000000007E8F                 db  0Eh
.eh_frame:0000000000007E90                 db  18h
.eh_frame:0000000000007E91                 db  8Eh
.eh_frame:0000000000007E92                 db    3
.eh_frame:0000000000007E93                 db  42h ; B
.eh_frame:0000000000007E94                 db  0Eh
.eh_frame:0000000000007E95                 db  20h
.eh_frame:0000000000007E96                 db  8Dh
.eh_frame:0000000000007E97                 db    4
.eh_frame:0000000000007E98                 db  42h ; B
.eh_frame:0000000000007E99                 db  0Eh
.eh_frame:0000000000007E9A                 db  28h ; (
.eh_frame:0000000000007E9B                 db  8Ch
.eh_frame:0000000000007E9C                 db    5
.eh_frame:0000000000007E9D                 db  41h ; A
.eh_frame:0000000000007E9E                 db  0Eh
.eh_frame:0000000000007E9F                 db  30h ; 0
.eh_frame:0000000000007EA0                 db  86h
.eh_frame:0000000000007EA1                 db    6
.eh_frame:0000000000007EA2                 db  41h ; A
.eh_frame:0000000000007EA3                 db  0Eh
.eh_frame:0000000000007EA4                 db  38h ; 8
.eh_frame:0000000000007EA5                 db  83h
.eh_frame:0000000000007EA6                 db    7
.eh_frame:0000000000007EA7                 db  47h ; G
.eh_frame:0000000000007EA8                 db  0Eh
.eh_frame:0000000000007EA9                 db 0E0h
.eh_frame:0000000000007EAA                 db  41h ; A
.eh_frame:0000000000007EAB                 db    2
.eh_frame:0000000000007EAC                 db 0C9h
.eh_frame:0000000000007EAD                 db  0Ah
.eh_frame:0000000000007EAE                 db  0Eh
.eh_frame:0000000000007EAF                 db  38h ; 8
.eh_frame:0000000000007EB0                 db  41h ; A
.eh_frame:0000000000007EB1                 db  0Eh
.eh_frame:0000000000007EB2                 db  30h ; 0
.eh_frame:0000000000007EB3                 db  41h ; A
.eh_frame:0000000000007EB4                 db  0Eh
.eh_frame:0000000000007EB5                 db  28h ; (
.eh_frame:0000000000007EB6                 db  42h ; B
.eh_frame:0000000000007EB7                 db  0Eh
.eh_frame:0000000000007EB8                 db  20h
.eh_frame:0000000000007EB9                 db  42h ; B
.eh_frame:0000000000007EBA                 db  0Eh
.eh_frame:0000000000007EBB                 db  18h
.eh_frame:0000000000007EBC                 db  42h ; B
.eh_frame:0000000000007EBD                 db  0Eh
.eh_frame:0000000000007EBE                 db  10h
.eh_frame:0000000000007EBF                 db  42h ; B
.eh_frame:0000000000007EC0                 db  0Eh
.eh_frame:0000000000007EC1                 db    8
.eh_frame:0000000000007EC2                 db  44h ; D
.eh_frame:0000000000007EC3                 db  0Bh
.eh_frame:0000000000007EC4                 db  48h ; H
.eh_frame:0000000000007EC5                 db    0
.eh_frame:0000000000007EC6                 db    0
.eh_frame:0000000000007EC7                 db    0
.eh_frame:0000000000007EC8                 db  68h ; h
.eh_frame:0000000000007EC9                 db    1
.eh_frame:0000000000007ECA                 db    0
.eh_frame:0000000000007ECB                 db    0
.eh_frame:0000000000007ECC                 db 0A4h
.eh_frame:0000000000007ECD                 db 0AFh
.eh_frame:0000000000007ECE                 db 0FFh
.eh_frame:0000000000007ECF                 db 0FFh
.eh_frame:0000000000007ED0                 db 0EFh
.eh_frame:0000000000007ED1                 db    0
.eh_frame:0000000000007ED2                 db    0
.eh_frame:0000000000007ED3                 db    0
.eh_frame:0000000000007ED4                 db    0
.eh_frame:0000000000007ED5                 db  42h ; B
.eh_frame:0000000000007ED6                 db  0Eh
.eh_frame:0000000000007ED7                 db  10h
.eh_frame:0000000000007ED8                 db  8Fh
.eh_frame:0000000000007ED9                 db    2
.eh_frame:0000000000007EDA                 db  42h ; B
.eh_frame:0000000000007EDB                 db  0Eh
.eh_frame:0000000000007EDC                 db  18h
.eh_frame:0000000000007EDD                 db  8Eh
.eh_frame:0000000000007EDE                 db    3
.eh_frame:0000000000007EDF                 db  42h ; B
.eh_frame:0000000000007EE0                 db  0Eh
.eh_frame:0000000000007EE1                 db  20h
.eh_frame:0000000000007EE2                 db  8Dh
.eh_frame:0000000000007EE3                 db    4
.eh_frame:0000000000007EE4                 db  42h ; B
.eh_frame:0000000000007EE5                 db  0Eh
.eh_frame:0000000000007EE6                 db  28h ; (
.eh_frame:0000000000007EE7                 db  8Ch
.eh_frame:0000000000007EE8                 db    5
.eh_frame:0000000000007EE9                 db  41h ; A
.eh_frame:0000000000007EEA                 db  0Eh
.eh_frame:0000000000007EEB                 db  30h ; 0
.eh_frame:0000000000007EEC                 db  86h
.eh_frame:0000000000007EED                 db    6
.eh_frame:0000000000007EEE                 db  41h ; A
.eh_frame:0000000000007EEF                 db  0Eh
.eh_frame:0000000000007EF0                 db  38h ; 8
.eh_frame:0000000000007EF1                 db  83h
.eh_frame:0000000000007EF2                 db    7
.eh_frame:0000000000007EF3                 db  47h ; G
.eh_frame:0000000000007EF4                 db  0Eh
.eh_frame:0000000000007EF5                 db 0D0h
.eh_frame:0000000000007EF6                 db  40h ; @
.eh_frame:0000000000007EF7                 db    2
.eh_frame:0000000000007EF8                 db 0CEh
.eh_frame:0000000000007EF9                 db  0Ah
.eh_frame:0000000000007EFA                 db  0Eh
.eh_frame:0000000000007EFB                 db  38h ; 8
.eh_frame:0000000000007EFC                 db  41h ; A
.eh_frame:0000000000007EFD                 db  0Eh
.eh_frame:0000000000007EFE                 db  30h ; 0
.eh_frame:0000000000007EFF                 db  41h ; A
.eh_frame:0000000000007F00                 db  0Eh
.eh_frame:0000000000007F01                 db  28h ; (
.eh_frame:0000000000007F02                 db  42h ; B
.eh_frame:0000000000007F03                 db  0Eh
.eh_frame:0000000000007F04                 db  20h
.eh_frame:0000000000007F05                 db  42h ; B
.eh_frame:0000000000007F06                 db  0Eh
.eh_frame:0000000000007F07                 db  18h
.eh_frame:0000000000007F08                 db  42h ; B
.eh_frame:0000000000007F09                 db  0Eh
.eh_frame:0000000000007F0A                 db  10h
.eh_frame:0000000000007F0B                 db  42h ; B
.eh_frame:0000000000007F0C                 db  0Eh
.eh_frame:0000000000007F0D                 db    8
.eh_frame:0000000000007F0E                 db  41h ; A
.eh_frame:0000000000007F0F                 db  0Bh
.eh_frame:0000000000007F10                 db  28h ; (
.eh_frame:0000000000007F11                 db    0
.eh_frame:0000000000007F12                 db    0
.eh_frame:0000000000007F13                 db    0
.eh_frame:0000000000007F14                 db 0B4h
.eh_frame:0000000000007F15                 db    1
.eh_frame:0000000000007F16                 db    0
.eh_frame:0000000000007F17                 db    0
.eh_frame:0000000000007F18                 db  48h ; H
.eh_frame:0000000000007F19                 db 0B0h
.eh_frame:0000000000007F1A                 db 0FFh
.eh_frame:0000000000007F1B                 db 0FFh
.eh_frame:0000000000007F1C                 db  78h ; x
.eh_frame:0000000000007F1D                 db    0
.eh_frame:0000000000007F1E                 db    0
.eh_frame:0000000000007F1F                 db    0
.eh_frame:0000000000007F20                 db    0
.eh_frame:0000000000007F21                 db  41h ; A
.eh_frame:0000000000007F22                 db  0Eh
.eh_frame:0000000000007F23                 db  10h
.eh_frame:0000000000007F24                 db  86h
.eh_frame:0000000000007F25                 db    2
.eh_frame:0000000000007F26                 db  41h ; A
.eh_frame:0000000000007F27                 db  0Eh
.eh_frame:0000000000007F28                 db  18h
.eh_frame:0000000000007F29                 db  83h
.eh_frame:0000000000007F2A                 db    3
.eh_frame:0000000000007F2B                 db  44h ; D
.eh_frame:0000000000007F2C                 db  0Eh
.eh_frame:0000000000007F2D                 db  20h
.eh_frame:0000000000007F2E                 db  7Dh ; }
.eh_frame:0000000000007F2F                 db  0Ah
.eh_frame:0000000000007F30                 db  0Eh
.eh_frame:0000000000007F31                 db  18h
.eh_frame:0000000000007F32                 db  4Bh ; K
.eh_frame:0000000000007F33                 db  0Eh
.eh_frame:0000000000007F34                 db  10h
.eh_frame:0000000000007F35                 db  41h ; A
.eh_frame:0000000000007F36                 db  0Eh
.eh_frame:0000000000007F37                 db    8
.eh_frame:0000000000007F38                 db  49h ; I
.eh_frame:0000000000007F39                 db  0Bh
.eh_frame:0000000000007F3A                 db    0
.eh_frame:0000000000007F3B                 db    0
.eh_frame:0000000000007F3C                 db  4Ch ; L
.eh_frame:0000000000007F3D                 db    0
.eh_frame:0000000000007F3E                 db    0
.eh_frame:0000000000007F3F                 db    0
.eh_frame:0000000000007F40                 db 0E0h
.eh_frame:0000000000007F41                 db    1
.eh_frame:0000000000007F42                 db    0
.eh_frame:0000000000007F43                 db    0
.eh_frame:0000000000007F44                 db  9Ch
.eh_frame:0000000000007F45                 db 0B0h
.eh_frame:0000000000007F46                 db 0FFh
.eh_frame:0000000000007F47                 db 0FFh
.eh_frame:0000000000007F48                 db 0A0h
.eh_frame:0000000000007F49                 db    2
.eh_frame:0000000000007F4A                 db    0
.eh_frame:0000000000007F4B                 db    0
.eh_frame:0000000000007F4C                 db    0
.eh_frame:0000000000007F4D                 db  42h ; B
.eh_frame:0000000000007F4E                 db  0Eh
.eh_frame:0000000000007F4F                 db  10h
.eh_frame:0000000000007F50                 db  8Fh
.eh_frame:0000000000007F51                 db    2
.eh_frame:0000000000007F52                 db  45h ; E
.eh_frame:0000000000007F53                 db  0Eh
.eh_frame:0000000000007F54                 db  18h
.eh_frame:0000000000007F55                 db  8Eh
.eh_frame:0000000000007F56                 db    3
.eh_frame:0000000000007F57                 db  42h ; B
.eh_frame:0000000000007F58                 db  0Eh
.eh_frame:0000000000007F59                 db  20h
.eh_frame:0000000000007F5A                 db  8Dh
.eh_frame:0000000000007F5B                 db    4
.eh_frame:0000000000007F5C                 db  42h ; B
.eh_frame:0000000000007F5D                 db  0Eh
.eh_frame:0000000000007F5E                 db  28h ; (
.eh_frame:0000000000007F5F                 db  8Ch
.eh_frame:0000000000007F60                 db    5
.eh_frame:0000000000007F61                 db  47h ; G
.eh_frame:0000000000007F62                 db  0Eh
.eh_frame:0000000000007F63                 db  30h ; 0
.eh_frame:0000000000007F64                 db  86h
.eh_frame:0000000000007F65                 db    6
.eh_frame:0000000000007F66                 db  41h ; A
.eh_frame:0000000000007F67                 db  0Eh
.eh_frame:0000000000007F68                 db  38h ; 8
.eh_frame:0000000000007F69                 db  83h
.eh_frame:0000000000007F6A                 db    7
.eh_frame:0000000000007F6B                 db  53h ; S
.eh_frame:0000000000007F6C                 db  0Eh
.eh_frame:0000000000007F6D                 db 0F0h
.eh_frame:0000000000007F6E                 db  40h ; @
.eh_frame:0000000000007F6F                 db    3
.eh_frame:0000000000007F70                 db  52h ; R
.eh_frame:0000000000007F71                 db    1
.eh_frame:0000000000007F72                 db  0Ah
.eh_frame:0000000000007F73                 db  0Eh
.eh_frame:0000000000007F74                 db  38h ; 8
.eh_frame:0000000000007F75                 db  41h ; A
.eh_frame:0000000000007F76                 db  0Eh
.eh_frame:0000000000007F77                 db  30h ; 0
.eh_frame:0000000000007F78                 db  41h ; A
.eh_frame:0000000000007F79                 db  0Eh
.eh_frame:0000000000007F7A                 db  28h ; (
.eh_frame:0000000000007F7B                 db  42h ; B
.eh_frame:0000000000007F7C                 db  0Eh
.eh_frame:0000000000007F7D                 db  20h
.eh_frame:0000000000007F7E                 db  42h ; B
.eh_frame:0000000000007F7F                 db  0Eh
.eh_frame:0000000000007F80                 db  18h
.eh_frame:0000000000007F81                 db  42h ; B
.eh_frame:0000000000007F82                 db  0Eh
.eh_frame:0000000000007F83                 db  10h
.eh_frame:0000000000007F84                 db  42h ; B
.eh_frame:0000000000007F85                 db  0Eh
.eh_frame:0000000000007F86                 db    8
.eh_frame:0000000000007F87                 db  46h ; F
.eh_frame:0000000000007F88                 db  0Bh
.eh_frame:0000000000007F89                 db    0
.eh_frame:0000000000007F8A                 db    0
.eh_frame:0000000000007F8B                 db    0
.eh_frame:0000000000007F8C                 db  28h ; (
.eh_frame:0000000000007F8D                 db    0
.eh_frame:0000000000007F8E                 db    0
.eh_frame:0000000000007F8F                 db    0
.eh_frame:0000000000007F90                 db  30h ; 0
.eh_frame:0000000000007F91                 db    2
.eh_frame:0000000000007F92                 db    0
.eh_frame:0000000000007F93                 db    0
.eh_frame:0000000000007F94                 db 0ECh
.eh_frame:0000000000007F95                 db 0B2h
.eh_frame:0000000000007F96                 db 0FFh
.eh_frame:0000000000007F97                 db 0FFh
.eh_frame:0000000000007F98                 db  22h ; "
.eh_frame:0000000000007F99                 db    4
.eh_frame:0000000000007F9A                 db    0
.eh_frame:0000000000007F9B                 db    0
.eh_frame:0000000000007F9C                 db    0
.eh_frame:0000000000007F9D                 db  42h ; B
.eh_frame:0000000000007F9E                 db  0Eh
.eh_frame:0000000000007F9F                 db  10h
.eh_frame:0000000000007FA0                 db  8Dh
.eh_frame:0000000000007FA1                 db    2
.eh_frame:0000000000007FA2                 db  42h ; B
.eh_frame:0000000000007FA3                 db  0Eh
.eh_frame:0000000000007FA4                 db  18h
.eh_frame:0000000000007FA5                 db  8Ch
.eh_frame:0000000000007FA6                 db    3
.eh_frame:0000000000007FA7                 db  46h ; F
.eh_frame:0000000000007FA8                 db  0Eh
.eh_frame:0000000000007FA9                 db  20h
.eh_frame:0000000000007FAA                 db  86h
.eh_frame:0000000000007FAB                 db    4
.eh_frame:0000000000007FAC                 db  41h ; A
.eh_frame:0000000000007FAD                 db  0Eh
.eh_frame:0000000000007FAE                 db  28h ; (
.eh_frame:0000000000007FAF                 db  83h
.eh_frame:0000000000007FB0                 db    5
.eh_frame:0000000000007FB1                 db  49h ; I
.eh_frame:0000000000007FB2                 db  0Eh
.eh_frame:0000000000007FB3                 db 0B0h
.eh_frame:0000000000007FB4                 db    1
.eh_frame:0000000000007FB5                 db    0
.eh_frame:0000000000007FB6                 db    0
.eh_frame:0000000000007FB7                 db    0
.eh_frame:0000000000007FB8                 db  5Ch ; \
.eh_frame:0000000000007FB9                 db    0
.eh_frame:0000000000007FBA                 db    0
.eh_frame:0000000000007FBB                 db    0
.eh_frame:0000000000007FBC                 db  5Ch ; \
.eh_frame:0000000000007FBD                 db    2
.eh_frame:0000000000007FBE                 db    0
.eh_frame:0000000000007FBF                 db    0
.eh_frame:0000000000007FC0                 db  70h ; p
.eh_frame:0000000000007FC1                 db  98h
.eh_frame:0000000000007FC2                 db 0FFh
.eh_frame:0000000000007FC3                 db 0FFh
.eh_frame:0000000000007FC4                 db  28h ; (
.eh_frame:0000000000007FC5                 db  11h
.eh_frame:0000000000007FC6                 db    0
.eh_frame:0000000000007FC7                 db    0
.eh_frame:0000000000007FC8                 db    0
.eh_frame:0000000000007FC9                 db  42h ; B
.eh_frame:0000000000007FCA                 db  0Eh
.eh_frame:0000000000007FCB                 db  10h
.eh_frame:0000000000007FCC                 db  8Fh
.eh_frame:0000000000007FCD                 db    2
.eh_frame:0000000000007FCE                 db  42h ; B
.eh_frame:0000000000007FCF                 db  0Eh
.eh_frame:0000000000007FD0                 db  18h
.eh_frame:0000000000007FD1                 db  8Eh
.eh_frame:0000000000007FD2                 db    3
.eh_frame:0000000000007FD3                 db  42h ; B
.eh_frame:0000000000007FD4                 db  0Eh
.eh_frame:0000000000007FD5                 db  20h
.eh_frame:0000000000007FD6                 db  8Dh
.eh_frame:0000000000007FD7                 db    4
.eh_frame:0000000000007FD8                 db  42h ; B
.eh_frame:0000000000007FD9                 db  0Eh
.eh_frame:0000000000007FDA                 db  28h ; (
.eh_frame:0000000000007FDB                 db  8Ch
.eh_frame:0000000000007FDC                 db    5
.eh_frame:0000000000007FDD                 db  41h ; A
.eh_frame:0000000000007FDE                 db  0Eh
.eh_frame:0000000000007FDF                 db  30h ; 0
.eh_frame:0000000000007FE0                 db  86h
.eh_frame:0000000000007FE1                 db    6
.eh_frame:0000000000007FE2                 db  41h ; A
.eh_frame:0000000000007FE3                 db  0Eh
.eh_frame:0000000000007FE4                 db  38h ; 8
.eh_frame:0000000000007FE5                 db  83h
.eh_frame:0000000000007FE6                 db    7
.eh_frame:0000000000007FE7                 db  4Ch ; L
.eh_frame:0000000000007FE8                 db  0Eh
.eh_frame:0000000000007FE9                 db  90h
.eh_frame:0000000000007FEA                 db    3
.eh_frame:0000000000007FEB                 db    3
.eh_frame:0000000000007FEC                 db  3Eh ; >
.eh_frame:0000000000007FED                 db    1
.eh_frame:0000000000007FEE                 db  0Ah
.eh_frame:0000000000007FEF                 db  0Eh
.eh_frame:0000000000007FF0                 db  98h
.eh_frame:0000000000007FF1                 db    3
.eh_frame:0000000000007FF2                 db  50h ; P
.eh_frame:0000000000007FF3                 db  0Eh
.eh_frame:0000000000007FF4                 db 0A0h
.eh_frame:0000000000007FF5                 db    3
.eh_frame:0000000000007FF6                 db  6Ch ; l
.eh_frame:0000000000007FF7                 db  0Bh
.eh_frame:0000000000007FF8                 db    3
.eh_frame:0000000000007FF9                 db 0C4h
.eh_frame:0000000000007FFA                 db    5
.eh_frame:0000000000007FFB                 db  0Ah
.eh_frame:0000000000007FFC                 db  0Eh
.eh_frame:0000000000007FFD                 db  38h ; 8
.eh_frame:0000000000007FFE                 db  41h ; A
.eh_frame:0000000000007FFF                 db  0Eh
.eh_frame:0000000000008000                 db  30h ; 0
.eh_frame:0000000000008001                 db  41h ; A
.eh_frame:0000000000008002                 db  0Eh
.eh_frame:0000000000008003                 db  28h ; (
.eh_frame:0000000000008004                 db  42h ; B
.eh_frame:0000000000008005                 db  0Eh
.eh_frame:0000000000008006                 db  20h
.eh_frame:0000000000008007                 db  42h ; B
.eh_frame:0000000000008008                 db  0Eh
.eh_frame:0000000000008009                 db  18h
.eh_frame:000000000000800A                 db  42h ; B
.eh_frame:000000000000800B                 db  0Eh
.eh_frame:000000000000800C                 db  10h
.eh_frame:000000000000800D                 db  42h ; B
.eh_frame:000000000000800E                 db  0Eh
.eh_frame:000000000000800F                 db    8
.eh_frame:0000000000008010                 db  41h ; A
.eh_frame:0000000000008011                 db  0Bh
.eh_frame:0000000000008012                 db    0
.eh_frame:0000000000008013                 db    0
.eh_frame:0000000000008014                 db    0
.eh_frame:0000000000008015                 db    0
.eh_frame:0000000000008016                 db    0
.eh_frame:0000000000008017                 db    0
.eh_frame:0000000000008018                 db  10h
.eh_frame:0000000000008019                 db    0
.eh_frame:000000000000801A                 db    0
.eh_frame:000000000000801B                 db    0
.eh_frame:000000000000801C                 db 0BCh
.eh_frame:000000000000801D                 db    2
.eh_frame:000000000000801E                 db    0
.eh_frame:000000000000801F                 db    0
.eh_frame:0000000000008020                 db  90h
.eh_frame:0000000000008021                 db 0B6h
.eh_frame:0000000000008022                 db 0FFh
.eh_frame:0000000000008023                 db 0FFh
.eh_frame:0000000000008024                 db    8
.eh_frame:0000000000008025                 db    0
.eh_frame:0000000000008026                 db    0
.eh_frame:0000000000008027                 db    0
.eh_frame:0000000000008028                 db    0
.eh_frame:0000000000008029                 db    0
.eh_frame:000000000000802A                 db    0
.eh_frame:000000000000802B                 db    0
.eh_frame:000000000000802C                 db  10h
.eh_frame:000000000000802D                 db    0
.eh_frame:000000000000802E                 db    0
.eh_frame:000000000000802F                 db    0
.eh_frame:0000000000008030                 db 0D0h
.eh_frame:0000000000008031                 db    2
.eh_frame:0000000000008032                 db    0
.eh_frame:0000000000008033                 db    0
.eh_frame:0000000000008034                 db  8Ch
.eh_frame:0000000000008035                 db 0B6h
.eh_frame:0000000000008036                 db 0FFh
.eh_frame:0000000000008037                 db 0FFh
.eh_frame:0000000000008038                 db    8
.eh_frame:0000000000008039                 db    0
.eh_frame:000000000000803A                 db    0
.eh_frame:000000000000803B                 db    0
.eh_frame:000000000000803C                 db    0
.eh_frame:000000000000803D                 db    0
.eh_frame:000000000000803E                 db    0
.eh_frame:000000000000803F                 db    0
.eh_frame:0000000000008040                 db  2Ch ; ,
.eh_frame:0000000000008041                 db    0
.eh_frame:0000000000008042                 db    0
.eh_frame:0000000000008043                 db    0
.eh_frame:0000000000008044                 db 0E4h
.eh_frame:0000000000008045                 db    2
.eh_frame:0000000000008046                 db    0
.eh_frame:0000000000008047                 db    0
.eh_frame:0000000000008048                 db  88h
.eh_frame:0000000000008049                 db 0B6h
.eh_frame:000000000000804A                 db 0FFh
.eh_frame:000000000000804B                 db 0FFh
.eh_frame:000000000000804C                 db 0A4h
.eh_frame:000000000000804D                 db    0
.eh_frame:000000000000804E                 db    0
.eh_frame:000000000000804F                 db    0
.eh_frame:0000000000008050                 db    0
.eh_frame:0000000000008051                 db  41h ; A
.eh_frame:0000000000008052                 db  0Eh
.eh_frame:0000000000008053                 db  10h
.eh_frame:0000000000008054                 db  86h
.eh_frame:0000000000008055                 db    2
.eh_frame:0000000000008056                 db  41h ; A
.eh_frame:0000000000008057                 db  0Eh
.eh_frame:0000000000008058                 db  18h
.eh_frame:0000000000008059                 db  83h
.eh_frame:000000000000805A                 db    3
.eh_frame:000000000000805B                 db  44h ; D
.eh_frame:000000000000805C                 db  0Eh
.eh_frame:000000000000805D                 db  20h
.eh_frame:000000000000805E                 db  7Ah ; z
.eh_frame:000000000000805F                 db  0Ah
.eh_frame:0000000000008060                 db  0Eh
.eh_frame:0000000000008061                 db  18h
.eh_frame:0000000000008062                 db  41h ; A
.eh_frame:0000000000008063                 db  0Eh
.eh_frame:0000000000008064                 db  10h
.eh_frame:0000000000008065                 db  41h ; A
.eh_frame:0000000000008066                 db  0Eh
.eh_frame:0000000000008067                 db    8
.eh_frame:0000000000008068                 db  41h ; A
.eh_frame:0000000000008069                 db  0Bh
.eh_frame:000000000000806A                 db    0
.eh_frame:000000000000806B                 db    0
.eh_frame:000000000000806C                 db    0
.eh_frame:000000000000806D                 db    0
.eh_frame:000000000000806E                 db    0
.eh_frame:000000000000806F                 db    0
.eh_frame:0000000000008070                 db  4Ch ; L
.eh_frame:0000000000008071                 db    0
.eh_frame:0000000000008072                 db    0
.eh_frame:0000000000008073                 db    0
.eh_frame:0000000000008074                 db  14h
.eh_frame:0000000000008075                 db    3
.eh_frame:0000000000008076                 db    0
.eh_frame:0000000000008077                 db    0
.eh_frame:0000000000008078                 db    8
.eh_frame:0000000000008079                 db 0B7h
.eh_frame:000000000000807A                 db 0FFh
.eh_frame:000000000000807B                 db 0FFh
.eh_frame:000000000000807C                 db  76h ; v
.eh_frame:000000000000807D                 db    0
.eh_frame:000000000000807E                 db    0
.eh_frame:000000000000807F                 db    0
.eh_frame:0000000000008080                 db    0
.eh_frame:0000000000008081                 db  42h ; B
.eh_frame:0000000000008082                 db  0Eh
.eh_frame:0000000000008083                 db  10h
.eh_frame:0000000000008084                 db  8Dh
.eh_frame:0000000000008085                 db    2
.eh_frame:0000000000008086                 db  42h ; B
.eh_frame:0000000000008087                 db  0Eh
.eh_frame:0000000000008088                 db  18h
.eh_frame:0000000000008089                 db  8Ch
.eh_frame:000000000000808A                 db    3
.eh_frame:000000000000808B                 db  41h ; A
.eh_frame:000000000000808C                 db  0Eh
.eh_frame:000000000000808D                 db  20h
.eh_frame:000000000000808E                 db  86h
.eh_frame:000000000000808F                 db    4
.eh_frame:0000000000008090                 db  41h ; A
.eh_frame:0000000000008091                 db  0Eh
.eh_frame:0000000000008092                 db  28h ; (
.eh_frame:0000000000008093                 db  83h
.eh_frame:0000000000008094                 db    5
.eh_frame:0000000000008095                 db  44h ; D
.eh_frame:0000000000008096                 db  0Eh
.eh_frame:0000000000008097                 db  30h ; 0
.eh_frame:0000000000008098                 db  7Eh ; ~
.eh_frame:0000000000008099                 db  0Ah
.eh_frame:000000000000809A                 db  0Eh
.eh_frame:000000000000809B                 db  28h ; (
.eh_frame:000000000000809C                 db  44h ; D
.eh_frame:000000000000809D                 db  0Eh
.eh_frame:000000000000809E                 db  20h
.eh_frame:000000000000809F                 db  41h ; A
.eh_frame:00000000000080A0                 db  0Eh
.eh_frame:00000000000080A1                 db  18h
.eh_frame:00000000000080A2                 db  42h ; B
.eh_frame:00000000000080A3                 db  0Eh
.eh_frame:00000000000080A4                 db  10h
.eh_frame:00000000000080A5                 db  42h ; B
.eh_frame:00000000000080A6                 db  0Eh
.eh_frame:00000000000080A7                 db    8
.eh_frame:00000000000080A8                 db  47h ; G
.eh_frame:00000000000080A9                 db  0Bh
.eh_frame:00000000000080AA                 db  4Fh ; O
.eh_frame:00000000000080AB                 db  0Ah
.eh_frame:00000000000080AC                 db  0Eh
.eh_frame:00000000000080AD                 db  28h ; (
.eh_frame:00000000000080AE                 db  44h ; D
.eh_frame:00000000000080AF                 db  0Eh
.eh_frame:00000000000080B0                 db  20h
.eh_frame:00000000000080B1                 db  41h ; A
.eh_frame:00000000000080B2                 db  0Eh
.eh_frame:00000000000080B3                 db  18h
.eh_frame:00000000000080B4                 db  42h ; B
.eh_frame:00000000000080B5                 db  0Eh
.eh_frame:00000000000080B6                 db  10h
.eh_frame:00000000000080B7                 db  42h ; B
.eh_frame:00000000000080B8                 db  0Eh
.eh_frame:00000000000080B9                 db    8
.eh_frame:00000000000080BA                 db  41h ; A
.eh_frame:00000000000080BB                 db  0Bh
.eh_frame:00000000000080BC                 db    0
.eh_frame:00000000000080BD                 db    0
.eh_frame:00000000000080BE                 db    0
.eh_frame:00000000000080BF                 db    0
.eh_frame:00000000000080C0                 db  14h
.eh_frame:00000000000080C1                 db    0
.eh_frame:00000000000080C2                 db    0
.eh_frame:00000000000080C3                 db    0
.eh_frame:00000000000080C4                 db  64h ; d
.eh_frame:00000000000080C5                 db    3
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  38h ; 8
.eh_frame:00000000000080C9                 db 0B7h
.eh_frame:00000000000080CA                 db 0FFh
.eh_frame:00000000000080CB                 db 0FFh
.eh_frame:00000000000080CC                 db  9Ch
.eh_frame:00000000000080CD                 db    0
.eh_frame:00000000000080CE                 db    0
.eh_frame:00000000000080CF                 db    0
.eh_frame:00000000000080D0                 db    0
.eh_frame:00000000000080D1                 db    0
.eh_frame:00000000000080D2                 db    0
.eh_frame:00000000000080D3                 db    0
.eh_frame:00000000000080D4                 db    0
.eh_frame:00000000000080D5                 db    0
.eh_frame:00000000000080D6                 db    0
.eh_frame:00000000000080D7                 db    0
.eh_frame:00000000000080D8                 db  14h
.eh_frame:00000000000080D9                 db    0
.eh_frame:00000000000080DA                 db    0
.eh_frame:00000000000080DB                 db    0
.eh_frame:00000000000080DC                 db  7Ch ; |
.eh_frame:00000000000080DD                 db    3
.eh_frame:00000000000080DE                 db    0
.eh_frame:00000000000080DF                 db    0
.eh_frame:00000000000080E0                 db 0C0h
.eh_frame:00000000000080E1                 db 0B7h
.eh_frame:00000000000080E2                 db 0FFh
.eh_frame:00000000000080E3                 db 0FFh
.eh_frame:00000000000080E4                 db  42h ; B
.eh_frame:00000000000080E5                 db    0
.eh_frame:00000000000080E6                 db    0
.eh_frame:00000000000080E7                 db    0
.eh_frame:00000000000080E8                 db    0
.eh_frame:00000000000080E9                 db    0
.eh_frame:00000000000080EA                 db    0
.eh_frame:00000000000080EB                 db    0
.eh_frame:00000000000080EC                 db    0
.eh_frame:00000000000080ED                 db    0
.eh_frame:00000000000080EE                 db    0
.eh_frame:00000000000080EF                 db    0
.eh_frame:00000000000080F0                 db  1Ch
.eh_frame:00000000000080F1                 db    0
.eh_frame:00000000000080F2                 db    0
.eh_frame:00000000000080F3                 db    0
.eh_frame:00000000000080F4                 db  94h
.eh_frame:00000000000080F5                 db    3
.eh_frame:00000000000080F6                 db    0
.eh_frame:00000000000080F7                 db    0
.eh_frame:00000000000080F8                 db 0F8h
.eh_frame:00000000000080F9                 db 0B7h
.eh_frame:00000000000080FA                 db 0FFh
.eh_frame:00000000000080FB                 db 0FFh
.eh_frame:00000000000080FC                 db  9Fh
.eh_frame:00000000000080FD                 db    0
.eh_frame:00000000000080FE                 db    0
.eh_frame:00000000000080FF                 db    0
.eh_frame:0000000000008100                 db    0
.eh_frame:0000000000008101                 db  44h ; D
.eh_frame:0000000000008102                 db  0Eh
.eh_frame:0000000000008103                 db  10h
.eh_frame:0000000000008104                 db  83h
.eh_frame:0000000000008105                 db    2
.eh_frame:0000000000008106                 db    2
.eh_frame:0000000000008107                 db  78h ; x
.eh_frame:0000000000008108                 db  0Ah
.eh_frame:0000000000008109                 db  0Eh
.eh_frame:000000000000810A                 db    8
.eh_frame:000000000000810B                 db  41h ; A
.eh_frame:000000000000810C                 db  0Bh
.eh_frame:000000000000810D                 db    0
.eh_frame:000000000000810E                 db    0
.eh_frame:000000000000810F                 db    0
.eh_frame:0000000000008110                 db  40h ; @
.eh_frame:0000000000008111                 db    0
.eh_frame:0000000000008112                 db    0
.eh_frame:0000000000008113                 db    0
.eh_frame:0000000000008114                 db 0B4h
.eh_frame:0000000000008115                 db    3
.eh_frame:0000000000008116                 db    0
.eh_frame:0000000000008117                 db    0
.eh_frame:0000000000008118                 db  78h ; x
.eh_frame:0000000000008119                 db 0B8h
.eh_frame:000000000000811A                 db 0FFh
.eh_frame:000000000000811B                 db 0FFh
.eh_frame:000000000000811C                 db 0E7h
.eh_frame:000000000000811D                 db    0
.eh_frame:000000000000811E                 db    0
.eh_frame:000000000000811F                 db    0
.eh_frame:0000000000008120                 db    0
.eh_frame:0000000000008121                 db  41h ; A
.eh_frame:0000000000008122                 db  0Eh
.eh_frame:0000000000008123                 db  10h
.eh_frame:0000000000008124                 db  86h
.eh_frame:0000000000008125                 db    2
.eh_frame:0000000000008126                 db  41h ; A
.eh_frame:0000000000008127                 db  0Eh
.eh_frame:0000000000008128                 db  18h
.eh_frame:0000000000008129                 db  83h
.eh_frame:000000000000812A                 db    3
.eh_frame:000000000000812B                 db  49h ; I
.eh_frame:000000000000812C                 db  0Eh
.eh_frame:000000000000812D                 db  20h
.eh_frame:000000000000812E                 db  6Eh ; n
.eh_frame:000000000000812F                 db  0Ah
.eh_frame:0000000000008130                 db  0Eh
.eh_frame:0000000000008131                 db  18h
.eh_frame:0000000000008132                 db  41h ; A
.eh_frame:0000000000008133                 db  0Eh
.eh_frame:0000000000008134                 db  10h
.eh_frame:0000000000008135                 db  41h ; A
.eh_frame:0000000000008136                 db  0Eh
.eh_frame:0000000000008137                 db    8
.eh_frame:0000000000008138                 db  45h ; E
.eh_frame:0000000000008139                 db  0Bh
.eh_frame:000000000000813A                 db    2
.eh_frame:000000000000813B                 db  4Ah ; J
.eh_frame:000000000000813C                 db  0Ah
.eh_frame:000000000000813D                 db  0Eh
.eh_frame:000000000000813E                 db  18h
.eh_frame:000000000000813F                 db  41h ; A
.eh_frame:0000000000008140                 db  0Eh
.eh_frame:0000000000008141                 db  10h
.eh_frame:0000000000008142                 db  41h ; A
.eh_frame:0000000000008143                 db  0Eh
.eh_frame:0000000000008144                 db    8
.eh_frame:0000000000008145                 db  44h ; D
.eh_frame:0000000000008146                 db  0Bh
.eh_frame:0000000000008147                 db    2
.eh_frame:0000000000008148                 db  54h ; T
.eh_frame:0000000000008149                 db  0Eh
.eh_frame:000000000000814A                 db  18h
.eh_frame:000000000000814B                 db  41h ; A
.eh_frame:000000000000814C                 db  0Eh
.eh_frame:000000000000814D                 db  10h
.eh_frame:000000000000814E                 db  41h ; A
.eh_frame:000000000000814F                 db  0Eh
.eh_frame:0000000000008150                 db    8
.eh_frame:0000000000008151                 db    0
.eh_frame:0000000000008152                 db    0
.eh_frame:0000000000008153                 db    0
.eh_frame:0000000000008154                 db  74h ; t
.eh_frame:0000000000008155                 db    0
.eh_frame:0000000000008156                 db    0
.eh_frame:0000000000008157                 db    0
.eh_frame:0000000000008158                 db 0F8h
.eh_frame:0000000000008159                 db    3
.eh_frame:000000000000815A                 db    0
.eh_frame:000000000000815B                 db    0
.eh_frame:000000000000815C                 db  24h ; $
.eh_frame:000000000000815D                 db 0B9h
.eh_frame:000000000000815E                 db 0FFh
.eh_frame:000000000000815F                 db 0FFh
.eh_frame:0000000000008160                 db  34h ; 4
.eh_frame:0000000000008161                 db  12h
.eh_frame:0000000000008162                 db    0
.eh_frame:0000000000008163                 db    0
.eh_frame:0000000000008164                 db    0
.eh_frame:0000000000008165                 db  42h ; B
.eh_frame:0000000000008166                 db  0Eh
.eh_frame:0000000000008167                 db  10h
.eh_frame:0000000000008168                 db  8Fh
.eh_frame:0000000000008169                 db    2
.eh_frame:000000000000816A                 db  42h ; B
.eh_frame:000000000000816B                 db  0Eh
.eh_frame:000000000000816C                 db  18h
.eh_frame:000000000000816D                 db  8Eh
.eh_frame:000000000000816E                 db    3
.eh_frame:000000000000816F                 db  45h ; E
.eh_frame:0000000000008170                 db  0Eh
.eh_frame:0000000000008171                 db  20h
.eh_frame:0000000000008172                 db  8Dh
.eh_frame:0000000000008173                 db    4
.eh_frame:0000000000008174                 db  42h ; B
.eh_frame:0000000000008175                 db  0Eh
.eh_frame:0000000000008176                 db  28h ; (
.eh_frame:0000000000008177                 db  8Ch
.eh_frame:0000000000008178                 db    5
.eh_frame:0000000000008179                 db  44h ; D
.eh_frame:000000000000817A                 db  0Eh
.eh_frame:000000000000817B                 db  30h ; 0
.eh_frame:000000000000817C                 db  86h
.eh_frame:000000000000817D                 db    6
.eh_frame:000000000000817E                 db  41h ; A
.eh_frame:000000000000817F                 db  0Eh
.eh_frame:0000000000008180                 db  38h ; 8
.eh_frame:0000000000008181                 db  83h
.eh_frame:0000000000008182                 db    7
.eh_frame:0000000000008183                 db  53h ; S
.eh_frame:0000000000008184                 db  0Eh
.eh_frame:0000000000008185                 db 0F0h
.eh_frame:0000000000008186                 db    1
.eh_frame:0000000000008187                 db    3
.eh_frame:0000000000008188                 db  81h
.eh_frame:0000000000008189                 db  0Bh
.eh_frame:000000000000818A                 db  0Eh
.eh_frame:000000000000818B                 db 0F8h
.eh_frame:000000000000818C                 db    1
.eh_frame:000000000000818D                 db  4Ah ; J
.eh_frame:000000000000818E                 db  0Eh
.eh_frame:000000000000818F                 db  80h
.eh_frame:0000000000008190                 db    2
.eh_frame:0000000000008191                 db  44h ; D
.eh_frame:0000000000008192                 db  0Eh
.eh_frame:0000000000008193                 db  88h
.eh_frame:0000000000008194                 db    2
.eh_frame:0000000000008195                 db  45h ; E
.eh_frame:0000000000008196                 db  0Eh
.eh_frame:0000000000008197                 db  90h
.eh_frame:0000000000008198                 db    2
.eh_frame:0000000000008199                 db  5Fh ; _
.eh_frame:000000000000819A                 db  0Eh
.eh_frame:000000000000819B                 db 0F0h
.eh_frame:000000000000819C                 db    1
.eh_frame:000000000000819D                 db  64h ; d
.eh_frame:000000000000819E                 db  0Ah
.eh_frame:000000000000819F                 db  0Eh
.eh_frame:00000000000081A0                 db  38h ; 8
.eh_frame:00000000000081A1                 db  41h ; A
.eh_frame:00000000000081A2                 db  0Eh
.eh_frame:00000000000081A3                 db  30h ; 0
.eh_frame:00000000000081A4                 db  41h ; A
.eh_frame:00000000000081A5                 db  0Eh
.eh_frame:00000000000081A6                 db  28h ; (
.eh_frame:00000000000081A7                 db  42h ; B
.eh_frame:00000000000081A8                 db  0Eh
.eh_frame:00000000000081A9                 db  20h
.eh_frame:00000000000081AA                 db  42h ; B
.eh_frame:00000000000081AB                 db  0Eh
.eh_frame:00000000000081AC                 db  18h
.eh_frame:00000000000081AD                 db  42h ; B
.eh_frame:00000000000081AE                 db  0Eh
.eh_frame:00000000000081AF                 db  10h
.eh_frame:00000000000081B0                 db  42h ; B
.eh_frame:00000000000081B1                 db  0Eh
.eh_frame:00000000000081B2                 db    8
.eh_frame:00000000000081B3                 db  44h ; D
.eh_frame:00000000000081B4                 db  0Bh
.eh_frame:00000000000081B5                 db    3
.eh_frame:00000000000081B6                 db  99h
.eh_frame:00000000000081B7                 db    5
.eh_frame:00000000000081B8                 db  0Eh
.eh_frame:00000000000081B9                 db 0F8h
.eh_frame:00000000000081BA                 db    1
.eh_frame:00000000000081BB                 db  4Dh ; M
.eh_frame:00000000000081BC                 db  0Eh
.eh_frame:00000000000081BD                 db  80h
.eh_frame:00000000000081BE                 db    2
.eh_frame:00000000000081BF                 db  44h ; D
.eh_frame:00000000000081C0                 db  0Eh
.eh_frame:00000000000081C1                 db  88h
.eh_frame:00000000000081C2                 db    2
.eh_frame:00000000000081C3                 db  47h ; G
.eh_frame:00000000000081C4                 db  0Eh
.eh_frame:00000000000081C5                 db  90h
.eh_frame:00000000000081C6                 db    2
.eh_frame:00000000000081C7                 db  5Bh ; [
.eh_frame:00000000000081C8                 db  0Eh
.eh_frame:00000000000081C9                 db 0F0h
.eh_frame:00000000000081CA                 db    1
.eh_frame:00000000000081CB                 db    0
.eh_frame:00000000000081CC                 db  68h ; h
.eh_frame:00000000000081CD                 db    0
.eh_frame:00000000000081CE                 db    0
.eh_frame:00000000000081CF                 db    0
.eh_frame:00000000000081D0                 db  70h ; p
.eh_frame:00000000000081D1                 db    4
.eh_frame:00000000000081D2                 db    0
.eh_frame:00000000000081D3                 db    0
.eh_frame:00000000000081D4                 db 0ECh
.eh_frame:00000000000081D5                 db 0CAh
.eh_frame:00000000000081D6                 db 0FFh
.eh_frame:00000000000081D7                 db 0FFh
.eh_frame:00000000000081D8                 db 0ABh
.eh_frame:00000000000081D9                 db    1
.eh_frame:00000000000081DA                 db    0
.eh_frame:00000000000081DB                 db    0
.eh_frame:00000000000081DC                 db    0
.eh_frame:00000000000081DD                 db  42h ; B
.eh_frame:00000000000081DE                 db  0Eh
.eh_frame:00000000000081DF                 db  10h
.eh_frame:00000000000081E0                 db  8Fh
.eh_frame:00000000000081E1                 db    2
.eh_frame:00000000000081E2                 db  42h ; B
.eh_frame:00000000000081E3                 db  0Eh
.eh_frame:00000000000081E4                 db  18h
.eh_frame:00000000000081E5                 db  8Eh
.eh_frame:00000000000081E6                 db    3
.eh_frame:00000000000081E7                 db  45h ; E
.eh_frame:00000000000081E8                 db  0Eh
.eh_frame:00000000000081E9                 db  20h
.eh_frame:00000000000081EA                 db  8Dh
.eh_frame:00000000000081EB                 db    4
.eh_frame:00000000000081EC                 db  42h ; B
.eh_frame:00000000000081ED                 db  0Eh
.eh_frame:00000000000081EE                 db  28h ; (
.eh_frame:00000000000081EF                 db  8Ch
.eh_frame:00000000000081F0                 db    5
.eh_frame:00000000000081F1                 db  44h ; D
.eh_frame:00000000000081F2                 db  0Eh
.eh_frame:00000000000081F3                 db  30h ; 0
.eh_frame:00000000000081F4                 db  86h
.eh_frame:00000000000081F5                 db    6
.eh_frame:00000000000081F6                 db  41h ; A
.eh_frame:00000000000081F7                 db  0Eh
.eh_frame:00000000000081F8                 db  38h ; 8
.eh_frame:00000000000081F9                 db  83h
.eh_frame:00000000000081FA                 db    7
.eh_frame:00000000000081FB                 db  47h ; G
.eh_frame:00000000000081FC                 db  0Eh
.eh_frame:00000000000081FD                 db  60h ; `
.eh_frame:00000000000081FE                 db    2
.eh_frame:00000000000081FF                 db  99h
.eh_frame:0000000000008200                 db  0Eh
.eh_frame:0000000000008201                 db  68h ; h
.eh_frame:0000000000008202                 db  5Fh ; _
.eh_frame:0000000000008203                 db  0Eh
.eh_frame:0000000000008204                 db  70h ; p
.eh_frame:0000000000008205                 db  46h ; F
.eh_frame:0000000000008206                 db  0Eh
.eh_frame:0000000000008207                 db  78h ; x
.eh_frame:0000000000008208                 db  42h ; B
.eh_frame:0000000000008209                 db  0Eh
.eh_frame:000000000000820A                 db  80h
.eh_frame:000000000000820B                 db    1
.eh_frame:000000000000820C                 db  59h ; Y
.eh_frame:000000000000820D                 db  0Eh
.eh_frame:000000000000820E                 db  60h ; `
.eh_frame:000000000000820F                 db    2
.eh_frame:0000000000008210                 db  40h ; @
.eh_frame:0000000000008211                 db  0Eh
.eh_frame:0000000000008212                 db  68h ; h
.eh_frame:0000000000008213                 db  4Bh ; K
.eh_frame:0000000000008214                 db  0Eh
.eh_frame:0000000000008215                 db  70h ; p
.eh_frame:0000000000008216                 db  43h ; C
.eh_frame:0000000000008217                 db  0Eh
.eh_frame:0000000000008218                 db  78h ; x
.eh_frame:0000000000008219                 db  45h ; E
.eh_frame:000000000000821A                 db  0Eh
.eh_frame:000000000000821B                 db  80h
.eh_frame:000000000000821C                 db    1
.eh_frame:000000000000821D                 db  5Eh ; ^
.eh_frame:000000000000821E                 db  0Eh
.eh_frame:000000000000821F                 db  60h ; `
.eh_frame:0000000000008220                 db  4Ch ; L
.eh_frame:0000000000008221                 db  0Ah
.eh_frame:0000000000008222                 db  0Eh
.eh_frame:0000000000008223                 db  38h ; 8
.eh_frame:0000000000008224                 db  44h ; D
.eh_frame:0000000000008225                 db  0Eh
.eh_frame:0000000000008226                 db  30h ; 0
.eh_frame:0000000000008227                 db  41h ; A
.eh_frame:0000000000008228                 db  0Eh
.eh_frame:0000000000008229                 db  28h ; (
.eh_frame:000000000000822A                 db  42h ; B
.eh_frame:000000000000822B                 db  0Eh
.eh_frame:000000000000822C                 db  20h
.eh_frame:000000000000822D                 db  42h ; B
.eh_frame:000000000000822E                 db  0Eh
.eh_frame:000000000000822F                 db  18h
.eh_frame:0000000000008230                 db  42h ; B
.eh_frame:0000000000008231                 db  0Eh
.eh_frame:0000000000008232                 db  10h
.eh_frame:0000000000008233                 db  42h ; B
.eh_frame:0000000000008234                 db  0Eh
.eh_frame:0000000000008235                 db    8
.eh_frame:0000000000008236                 db  46h ; F
.eh_frame:0000000000008237                 db  0Bh
.eh_frame:0000000000008238                 db  28h ; (
.eh_frame:0000000000008239                 db    0
.eh_frame:000000000000823A                 db    0
.eh_frame:000000000000823B                 db    0
.eh_frame:000000000000823C                 db 0DCh
.eh_frame:000000000000823D                 db    4
.eh_frame:000000000000823E                 db    0
.eh_frame:000000000000823F                 db    0
.eh_frame:0000000000008240                 db  30h ; 0
.eh_frame:0000000000008241                 db 0CCh
.eh_frame:0000000000008242                 db 0FFh
.eh_frame:0000000000008243                 db 0FFh
.eh_frame:0000000000008244                 db  36h ; 6
.eh_frame:0000000000008245                 db    0
.eh_frame:0000000000008246                 db    0
.eh_frame:0000000000008247                 db    0
.eh_frame:0000000000008248                 db    0
.eh_frame:0000000000008249                 db  42h ; B
.eh_frame:000000000000824A                 db  0Eh
.eh_frame:000000000000824B                 db  10h
.eh_frame:000000000000824C                 db  8Ch
.eh_frame:000000000000824D                 db    2
.eh_frame:000000000000824E                 db  41h ; A
.eh_frame:000000000000824F                 db  0Eh
.eh_frame:0000000000008250                 db  18h
.eh_frame:0000000000008251                 db  86h
.eh_frame:0000000000008252                 db    3
.eh_frame:0000000000008253                 db  41h ; A
.eh_frame:0000000000008254                 db  0Eh
.eh_frame:0000000000008255                 db  20h
.eh_frame:0000000000008256                 db  83h
.eh_frame:0000000000008257                 db    4
.eh_frame:0000000000008258                 db  6Eh ; n
.eh_frame:0000000000008259                 db  0Eh
.eh_frame:000000000000825A                 db  18h
.eh_frame:000000000000825B                 db  41h ; A
.eh_frame:000000000000825C                 db  0Eh
.eh_frame:000000000000825D                 db  10h
.eh_frame:000000000000825E                 db  42h ; B
.eh_frame:000000000000825F                 db  0Eh
.eh_frame:0000000000008260                 db    8
.eh_frame:0000000000008261                 db    0
.eh_frame:0000000000008262                 db    0
.eh_frame:0000000000008263                 db    0
.eh_frame:0000000000008264                 db  10h
.eh_frame:0000000000008265                 db    0
.eh_frame:0000000000008266                 db    0
.eh_frame:0000000000008267                 db    0
.eh_frame:0000000000008268                 db    8
.eh_frame:0000000000008269                 db    5
.eh_frame:000000000000826A                 db    0
.eh_frame:000000000000826B                 db    0
.eh_frame:000000000000826C                 db  44h ; D
.eh_frame:000000000000826D                 db 0CCh
.eh_frame:000000000000826E                 db 0FFh
.eh_frame:000000000000826F                 db 0FFh
.eh_frame:0000000000008270                 db  11h
.eh_frame:0000000000008271                 db    0
.eh_frame:0000000000008272                 db    0
.eh_frame:0000000000008273                 db    0
.eh_frame:0000000000008274                 db    0
.eh_frame:0000000000008275                 db    0
.eh_frame:0000000000008276                 db    0
.eh_frame:0000000000008277                 db    0
.eh_frame:0000000000008278                 db  10h
.eh_frame:0000000000008279                 db    0
.eh_frame:000000000000827A                 db    0
.eh_frame:000000000000827B                 db    0
.eh_frame:000000000000827C                 db  1Ch
.eh_frame:000000000000827D                 db    5
.eh_frame:000000000000827E                 db    0
.eh_frame:000000000000827F                 db    0
.eh_frame:0000000000008280                 db  50h ; P
.eh_frame:0000000000008281                 db 0CCh
.eh_frame:0000000000008282                 db 0FFh
.eh_frame:0000000000008283                 db 0FFh
.eh_frame:0000000000008284                 db  11h
.eh_frame:0000000000008285                 db    0
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db    0
.eh_frame:0000000000008289                 db    0
.eh_frame:000000000000828A                 db    0
.eh_frame:000000000000828B                 db    0
.eh_frame:000000000000828C                 db  10h
.eh_frame:000000000000828D                 db    0
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db  30h ; 0
.eh_frame:0000000000008291                 db    5
.eh_frame:0000000000008292                 db    0
.eh_frame:0000000000008293                 db    0
.eh_frame:0000000000008294                 db  5Ch ; \
.eh_frame:0000000000008295                 db 0CCh
.eh_frame:0000000000008296                 db 0FFh
.eh_frame:0000000000008297                 db 0FFh
.eh_frame:0000000000008298                 db  35h ; 5
.eh_frame:0000000000008299                 db    0
.eh_frame:000000000000829A                 db    0
.eh_frame:000000000000829B                 db    0
.eh_frame:000000000000829C                 db    0
.eh_frame:000000000000829D                 db    0
.eh_frame:000000000000829E                 db    0
.eh_frame:000000000000829F                 db    0
.eh_frame:00000000000082A0                 db  10h
.eh_frame:00000000000082A1                 db    0
.eh_frame:00000000000082A2                 db    0
.eh_frame:00000000000082A3                 db    0
.eh_frame:00000000000082A4                 db  44h ; D
.eh_frame:00000000000082A5                 db    5
.eh_frame:00000000000082A6                 db    0
.eh_frame:00000000000082A7                 db    0
.eh_frame:00000000000082A8                 db  88h
.eh_frame:00000000000082A9                 db 0CCh
.eh_frame:00000000000082AA                 db 0FFh
.eh_frame:00000000000082AB                 db 0FFh
.eh_frame:00000000000082AC                 db  15h
.eh_frame:00000000000082AD                 db    0
.eh_frame:00000000000082AE                 db    0
.eh_frame:00000000000082AF                 db    0
.eh_frame:00000000000082B0                 db    0
.eh_frame:00000000000082B1                 db    0
.eh_frame:00000000000082B2                 db    0
.eh_frame:00000000000082B3                 db    0
.eh_frame:00000000000082B4                 db  10h
.eh_frame:00000000000082B5                 db    0
.eh_frame:00000000000082B6                 db    0
.eh_frame:00000000000082B7                 db    0
.eh_frame:00000000000082B8                 db  58h ; X
.eh_frame:00000000000082B9                 db    5
.eh_frame:00000000000082BA                 db    0
.eh_frame:00000000000082BB                 db    0
.eh_frame:00000000000082BC                 db  94h
.eh_frame:00000000000082BD                 db 0CCh
.eh_frame:00000000000082BE                 db 0FFh
.eh_frame:00000000000082BF                 db 0FFh
.eh_frame:00000000000082C0                 db  30h ; 0
.eh_frame:00000000000082C1                 db    0
.eh_frame:00000000000082C2                 db    0
.eh_frame:00000000000082C3                 db    0
.eh_frame:00000000000082C4                 db    0
.eh_frame:00000000000082C5                 db  6Bh ; k
.eh_frame:00000000000082C6                 db  0Eh
.eh_frame:00000000000082C7                 db  10h
.eh_frame:00000000000082C8                 db  50h ; P
.eh_frame:00000000000082C9                 db    0
.eh_frame:00000000000082CA                 db    0
.eh_frame:00000000000082CB                 db    0
.eh_frame:00000000000082CC                 db  6Ch ; l
.eh_frame:00000000000082CD                 db    5
.eh_frame:00000000000082CE                 db    0
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db 0B0h
.eh_frame:00000000000082D1                 db 0CCh
.eh_frame:00000000000082D2                 db 0FFh
.eh_frame:00000000000082D3                 db 0FFh
.eh_frame:00000000000082D4                 db  74h ; t
.eh_frame:00000000000082D5                 db    0
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db    0
.eh_frame:00000000000082D9                 db  42h ; B
.eh_frame:00000000000082DA                 db  0Eh
.eh_frame:00000000000082DB                 db  10h
.eh_frame:00000000000082DC                 db  8Fh
.eh_frame:00000000000082DD                 db    2
.eh_frame:00000000000082DE                 db  42h ; B
.eh_frame:00000000000082DF                 db  0Eh
.eh_frame:00000000000082E0                 db  18h
.eh_frame:00000000000082E1                 db  8Eh
.eh_frame:00000000000082E2                 db    3
.eh_frame:00000000000082E3                 db  49h ; I
.eh_frame:00000000000082E4                 db  0Eh
.eh_frame:00000000000082E5                 db  20h
.eh_frame:00000000000082E6                 db  8Dh
.eh_frame:00000000000082E7                 db    4
.eh_frame:00000000000082E8                 db  42h ; B
.eh_frame:00000000000082E9                 db  0Eh
.eh_frame:00000000000082EA                 db  28h ; (
.eh_frame:00000000000082EB                 db  8Ch
.eh_frame:00000000000082EC                 db    5
.eh_frame:00000000000082ED                 db  44h ; D
.eh_frame:00000000000082EE                 db  0Eh
.eh_frame:00000000000082EF                 db  30h ; 0
.eh_frame:00000000000082F0                 db  86h
.eh_frame:00000000000082F1                 db    6
.eh_frame:00000000000082F2                 db  41h ; A
.eh_frame:00000000000082F3                 db  0Eh
.eh_frame:00000000000082F4                 db  38h ; 8
.eh_frame:00000000000082F5                 db  83h
.eh_frame:00000000000082F6                 db    7
.eh_frame:00000000000082F7                 db  4Dh ; M
.eh_frame:00000000000082F8                 db  0Eh
.eh_frame:00000000000082F9                 db  50h ; P
.eh_frame:00000000000082FA                 db  5Fh ; _
.eh_frame:00000000000082FB                 db  0Eh
.eh_frame:00000000000082FC                 db  58h ; X
.eh_frame:00000000000082FD                 db  47h ; G
.eh_frame:00000000000082FE                 db  0Eh
.eh_frame:00000000000082FF                 db  60h ; `
.eh_frame:0000000000008300                 db  46h ; F
.eh_frame:0000000000008301                 db  0Eh
.eh_frame:0000000000008302                 db  68h ; h
.eh_frame:0000000000008303                 db  44h ; D
.eh_frame:0000000000008304                 db  0Eh
.eh_frame:0000000000008305                 db  70h ; p
.eh_frame:0000000000008306                 db  58h ; X
.eh_frame:0000000000008307                 db  0Eh
.eh_frame:0000000000008308                 db  38h ; 8
.eh_frame:0000000000008309                 db  41h ; A
.eh_frame:000000000000830A                 db  0Eh
.eh_frame:000000000000830B                 db  30h ; 0
.eh_frame:000000000000830C                 db  41h ; A
.eh_frame:000000000000830D                 db  0Eh
.eh_frame:000000000000830E                 db  28h ; (
.eh_frame:000000000000830F                 db  42h ; B
.eh_frame:0000000000008310                 db  0Eh
.eh_frame:0000000000008311                 db  20h
.eh_frame:0000000000008312                 db  42h ; B
.eh_frame:0000000000008313                 db  0Eh
.eh_frame:0000000000008314                 db  18h
.eh_frame:0000000000008315                 db  42h ; B
.eh_frame:0000000000008316                 db  0Eh
.eh_frame:0000000000008317                 db  10h
.eh_frame:0000000000008318                 db  42h ; B
.eh_frame:0000000000008319                 db  0Eh
.eh_frame:000000000000831A                 db    8
.eh_frame:000000000000831B                 db    0
.eh_frame:000000000000831C                 db  68h ; h
.eh_frame:000000000000831D                 db    0
.eh_frame:000000000000831E                 db    0
.eh_frame:000000000000831F                 db    0
.eh_frame:0000000000008320                 db 0C0h
.eh_frame:0000000000008321                 db    5
.eh_frame:0000000000008322                 db    0
.eh_frame:0000000000008323                 db    0
.eh_frame:0000000000008324                 db 0DCh
.eh_frame:0000000000008325                 db 0CCh
.eh_frame:0000000000008326                 db 0FFh
.eh_frame:0000000000008327                 db 0FFh
.eh_frame:0000000000008328                 db 0E3h
.eh_frame:0000000000008329                 db    0
.eh_frame:000000000000832A                 db    0
.eh_frame:000000000000832B                 db    0
.eh_frame:000000000000832C                 db    0
.eh_frame:000000000000832D                 db  42h ; B
.eh_frame:000000000000832E                 db  0Eh
.eh_frame:000000000000832F                 db  10h
.eh_frame:0000000000008330                 db  8Fh
.eh_frame:0000000000008331                 db    2
.eh_frame:0000000000008332                 db  42h ; B
.eh_frame:0000000000008333                 db  0Eh
.eh_frame:0000000000008334                 db  18h
.eh_frame:0000000000008335                 db  8Eh
.eh_frame:0000000000008336                 db    3
.eh_frame:0000000000008337                 db  49h ; I
.eh_frame:0000000000008338                 db  0Eh
.eh_frame:0000000000008339                 db  20h
.eh_frame:000000000000833A                 db  8Dh
.eh_frame:000000000000833B                 db    4
.eh_frame:000000000000833C                 db  42h ; B
.eh_frame:000000000000833D                 db  0Eh
.eh_frame:000000000000833E                 db  28h ; (
.eh_frame:000000000000833F                 db  8Ch
.eh_frame:0000000000008340                 db    5
.eh_frame:0000000000008341                 db  44h ; D
.eh_frame:0000000000008342                 db  0Eh
.eh_frame:0000000000008343                 db  30h ; 0
.eh_frame:0000000000008344                 db  86h
.eh_frame:0000000000008345                 db    6
.eh_frame:0000000000008346                 db  41h ; A
.eh_frame:0000000000008347                 db  0Eh
.eh_frame:0000000000008348                 db  38h ; 8
.eh_frame:0000000000008349                 db  83h
.eh_frame:000000000000834A                 db    7
.eh_frame:000000000000834B                 db  4Dh ; M
.eh_frame:000000000000834C                 db  0Eh
.eh_frame:000000000000834D                 db  70h ; p
.eh_frame:000000000000834E                 db  65h ; e
.eh_frame:000000000000834F                 db  0Eh
.eh_frame:0000000000008350                 db  78h ; x
.eh_frame:0000000000008351                 db  4Dh ; M
.eh_frame:0000000000008352                 db  0Eh
.eh_frame:0000000000008353                 db  80h
.eh_frame:0000000000008354                 db    1
.eh_frame:0000000000008355                 db  46h ; F
.eh_frame:0000000000008356                 db  0Eh
.eh_frame:0000000000008357                 db  88h
.eh_frame:0000000000008358                 db    1
.eh_frame:0000000000008359                 db  42h ; B
.eh_frame:000000000000835A                 db  0Eh
.eh_frame:000000000000835B                 db  90h
.eh_frame:000000000000835C                 db    1
.eh_frame:000000000000835D                 db  5Eh ; ^
.eh_frame:000000000000835E                 db  0Eh
.eh_frame:000000000000835F                 db  70h ; p
.eh_frame:0000000000008360                 db  56h ; V
.eh_frame:0000000000008361                 db  0Eh
.eh_frame:0000000000008362                 db  78h ; x
.eh_frame:0000000000008363                 db  43h ; C
.eh_frame:0000000000008364                 db  0Eh
.eh_frame:0000000000008365                 db  80h
.eh_frame:0000000000008366                 db    1
.eh_frame:0000000000008367                 db  43h ; C
.eh_frame:0000000000008368                 db  0Eh
.eh_frame:0000000000008369                 db  88h
.eh_frame:000000000000836A                 db    1
.eh_frame:000000000000836B                 db  56h ; V
.eh_frame:000000000000836C                 db  0Eh
.eh_frame:000000000000836D                 db  90h
.eh_frame:000000000000836E                 db    1
.eh_frame:000000000000836F                 db  52h ; R
.eh_frame:0000000000008370                 db  0Eh
.eh_frame:0000000000008371                 db  70h ; p
.eh_frame:0000000000008372                 db  5Bh ; [
.eh_frame:0000000000008373                 db  0Eh
.eh_frame:0000000000008374                 db  38h ; 8
.eh_frame:0000000000008375                 db  41h ; A
.eh_frame:0000000000008376                 db  0Eh
.eh_frame:0000000000008377                 db  30h ; 0
.eh_frame:0000000000008378                 db  41h ; A
.eh_frame:0000000000008379                 db  0Eh
.eh_frame:000000000000837A                 db  28h ; (
.eh_frame:000000000000837B                 db  42h ; B
.eh_frame:000000000000837C                 db  0Eh
.eh_frame:000000000000837D                 db  20h
.eh_frame:000000000000837E                 db  42h ; B
.eh_frame:000000000000837F                 db  0Eh
.eh_frame:0000000000008380                 db  18h
.eh_frame:0000000000008381                 db  42h ; B
.eh_frame:0000000000008382                 db  0Eh
.eh_frame:0000000000008383                 db  10h
.eh_frame:0000000000008384                 db  42h ; B
.eh_frame:0000000000008385                 db  0Eh
.eh_frame:0000000000008386                 db    8
.eh_frame:0000000000008387                 db    0
.eh_frame:0000000000008388                 db  10h
.eh_frame:0000000000008389                 db    0
.eh_frame:000000000000838A                 db    0
.eh_frame:000000000000838B                 db    0
.eh_frame:000000000000838C                 db  2Ch ; ,
.eh_frame:000000000000838D                 db    6
.eh_frame:000000000000838E                 db    0
.eh_frame:000000000000838F                 db    0
.eh_frame:0000000000008390                 db  60h ; `
.eh_frame:0000000000008391                 db 0CDh
.eh_frame:0000000000008392                 db 0FFh
.eh_frame:0000000000008393                 db 0FFh
.eh_frame:0000000000008394                 db  0Ah
.eh_frame:0000000000008395                 db    0
.eh_frame:0000000000008396                 db    0
.eh_frame:0000000000008397                 db    0
.eh_frame:0000000000008398                 db    0
.eh_frame:0000000000008399                 db    0
.eh_frame:000000000000839A                 db    0
.eh_frame:000000000000839B                 db    0
.eh_frame:000000000000839C                 db  28h ; (
.eh_frame:000000000000839D                 db    0
.eh_frame:000000000000839E                 db    0
.eh_frame:000000000000839F                 db    0
.eh_frame:00000000000083A0                 db  40h ; @
.eh_frame:00000000000083A1                 db    6
.eh_frame:00000000000083A2                 db    0
.eh_frame:00000000000083A3                 db    0
.eh_frame:00000000000083A4                 db  5Ch ; \
.eh_frame:00000000000083A5                 db 0CDh
.eh_frame:00000000000083A6                 db 0FFh
.eh_frame:00000000000083A7                 db 0FFh
.eh_frame:00000000000083A8                 db  93h
.eh_frame:00000000000083A9                 db    0
.eh_frame:00000000000083AA                 db    0
.eh_frame:00000000000083AB                 db    0
.eh_frame:00000000000083AC                 db    0
.eh_frame:00000000000083AD                 db  48h ; H
.eh_frame:00000000000083AE                 db  0Eh
.eh_frame:00000000000083AF                 db  10h
.eh_frame:00000000000083B0                 db  8Ch
.eh_frame:00000000000083B1                 db    2
.eh_frame:00000000000083B2                 db  48h ; H
.eh_frame:00000000000083B3                 db  0Eh
.eh_frame:00000000000083B4                 db  18h
.eh_frame:00000000000083B5                 db  86h
.eh_frame:00000000000083B6                 db    3
.eh_frame:00000000000083B7                 db  41h ; A
.eh_frame:00000000000083B8                 db  0Eh
.eh_frame:00000000000083B9                 db  20h
.eh_frame:00000000000083BA                 db  83h
.eh_frame:00000000000083BB                 db    4
.eh_frame:00000000000083BC                 db    2
.eh_frame:00000000000083BD                 db  74h ; t
.eh_frame:00000000000083BE                 db  0Eh
.eh_frame:00000000000083BF                 db  18h
.eh_frame:00000000000083C0                 db  4Bh ; K
.eh_frame:00000000000083C1                 db  0Eh
.eh_frame:00000000000083C2                 db  10h
.eh_frame:00000000000083C3                 db  42h ; B
.eh_frame:00000000000083C4                 db  0Eh
.eh_frame:00000000000083C5                 db    8
.eh_frame:00000000000083C6                 db    0
.eh_frame:00000000000083C7                 db    0
.eh_frame:00000000000083C8                 db  10h
.eh_frame:00000000000083C9                 db    0
.eh_frame:00000000000083CA                 db    0
.eh_frame:00000000000083CB                 db    0
.eh_frame:00000000000083CC                 db  6Ch ; l
.eh_frame:00000000000083CD                 db    6
.eh_frame:00000000000083CE                 db    0
.eh_frame:00000000000083CF                 db    0
.eh_frame:00000000000083D0                 db 0D0h
.eh_frame:00000000000083D1                 db 0CDh
.eh_frame:00000000000083D2                 db 0FFh
.eh_frame:00000000000083D3                 db 0FFh
.eh_frame:00000000000083D4                 db  13h
.eh_frame:00000000000083D5                 db    0
.eh_frame:00000000000083D6                 db    0
.eh_frame:00000000000083D7                 db    0
.eh_frame:00000000000083D8                 db    0
.eh_frame:00000000000083D9                 db    0
.eh_frame:00000000000083DA                 db    0
.eh_frame:00000000000083DB                 db    0
.eh_frame:00000000000083DC                 db  10h
.eh_frame:00000000000083DD                 db    0
.eh_frame:00000000000083DE                 db    0
.eh_frame:00000000000083DF                 db    0
.eh_frame:00000000000083E0                 db  80h
.eh_frame:00000000000083E1                 db    6
.eh_frame:00000000000083E2                 db    0
.eh_frame:00000000000083E3                 db    0
.eh_frame:00000000000083E4                 db 0DCh
.eh_frame:00000000000083E5                 db 0CDh
.eh_frame:00000000000083E6                 db 0FFh
.eh_frame:00000000000083E7                 db 0FFh
.eh_frame:00000000000083E8                 db  0Ch
.eh_frame:00000000000083E9                 db    0
.eh_frame:00000000000083EA                 db    0
.eh_frame:00000000000083EB                 db    0
.eh_frame:00000000000083EC                 db    0
.eh_frame:00000000000083ED                 db    0
.eh_frame:00000000000083EE                 db    0
.eh_frame:00000000000083EF                 db    0
.eh_frame:00000000000083F0                 db  10h
.eh_frame:00000000000083F1                 db    0
.eh_frame:00000000000083F2                 db    0
.eh_frame:00000000000083F3                 db    0
.eh_frame:00000000000083F4                 db  94h
.eh_frame:00000000000083F5                 db    6
.eh_frame:00000000000083F6                 db    0
.eh_frame:00000000000083F7                 db    0
.eh_frame:00000000000083F8                 db 0D8h
.eh_frame:00000000000083F9                 db 0CDh
.eh_frame:00000000000083FA                 db 0FFh
.eh_frame:00000000000083FB                 db 0FFh
.eh_frame:00000000000083FC                 db  18h
.eh_frame:00000000000083FD                 db    0
.eh_frame:00000000000083FE                 db    0
.eh_frame:00000000000083FF                 db    0
.eh_frame:0000000000008400                 db    0
.eh_frame:0000000000008401                 db    0
.eh_frame:0000000000008402                 db    0
.eh_frame:0000000000008403                 db    0
.eh_frame:0000000000008404                 db  10h
.eh_frame:0000000000008405                 db    0
.eh_frame:0000000000008406                 db    0
.eh_frame:0000000000008407                 db    0
.eh_frame:0000000000008408                 db 0A8h
.eh_frame:0000000000008409                 db    6
.eh_frame:000000000000840A                 db    0
.eh_frame:000000000000840B                 db    0
.eh_frame:000000000000840C                 db 0E4h
.eh_frame:000000000000840D                 db 0CDh
.eh_frame:000000000000840E                 db 0FFh
.eh_frame:000000000000840F                 db 0FFh
.eh_frame:0000000000008410                 db  14h
.eh_frame:0000000000008411                 db    0
.eh_frame:0000000000008412                 db    0
.eh_frame:0000000000008413                 db    0
.eh_frame:0000000000008414                 db    0
.eh_frame:0000000000008415                 db    0
.eh_frame:0000000000008416                 db    0
.eh_frame:0000000000008417                 db    0
.eh_frame:0000000000008418                 db  18h
.eh_frame:0000000000008419                 db    0
.eh_frame:000000000000841A                 db    0
.eh_frame:000000000000841B                 db    0
.eh_frame:000000000000841C                 db 0BCh
.eh_frame:000000000000841D                 db    6
.eh_frame:000000000000841E                 db    0
.eh_frame:000000000000841F                 db    0
.eh_frame:0000000000008420                 db 0F0h
.eh_frame:0000000000008421                 db 0CDh
.eh_frame:0000000000008422                 db 0FFh
.eh_frame:0000000000008423                 db 0FFh
.eh_frame:0000000000008424                 db  8Eh
.eh_frame:0000000000008425                 db    0
.eh_frame:0000000000008426                 db    0
.eh_frame:0000000000008427                 db    0
.eh_frame:0000000000008428                 db    0
.eh_frame:0000000000008429                 db  44h ; D
.eh_frame:000000000000842A                 db  0Eh
.eh_frame:000000000000842B                 db  50h ; P
.eh_frame:000000000000842C                 db    2
.eh_frame:000000000000842D                 db  7Fh ; 
.eh_frame:000000000000842E                 db  0Ah
.eh_frame:000000000000842F                 db  0Eh
.eh_frame:0000000000008430                 db    8
.eh_frame:0000000000008431                 db  41h ; A
.eh_frame:0000000000008432                 db  0Bh
.eh_frame:0000000000008433                 db    0
.eh_frame:0000000000008434                 db  18h
.eh_frame:0000000000008435                 db    0
.eh_frame:0000000000008436                 db    0
.eh_frame:0000000000008437                 db    0
.eh_frame:0000000000008438                 db 0D8h
.eh_frame:0000000000008439                 db    6
.eh_frame:000000000000843A                 db    0
.eh_frame:000000000000843B                 db    0
.eh_frame:000000000000843C                 db  64h ; d
.eh_frame:000000000000843D                 db 0CEh
.eh_frame:000000000000843E                 db 0FFh
.eh_frame:000000000000843F                 db 0FFh
.eh_frame:0000000000008440                 db  8Ah
.eh_frame:0000000000008441                 db    0
.eh_frame:0000000000008442                 db    0
.eh_frame:0000000000008443                 db    0
.eh_frame:0000000000008444                 db    0
.eh_frame:0000000000008445                 db  44h ; D
.eh_frame:0000000000008446                 db  0Eh
.eh_frame:0000000000008447                 db  50h ; P
.eh_frame:0000000000008448                 db    2
.eh_frame:0000000000008449                 db  7Bh ; {
.eh_frame:000000000000844A                 db  0Ah
.eh_frame:000000000000844B                 db  0Eh
.eh_frame:000000000000844C                 db    8
.eh_frame:000000000000844D                 db  41h ; A
.eh_frame:000000000000844E                 db  0Bh
.eh_frame:000000000000844F                 db    0
.eh_frame:0000000000008450                 db  10h
.eh_frame:0000000000008451                 db    0
.eh_frame:0000000000008452                 db    0
.eh_frame:0000000000008453                 db    0
.eh_frame:0000000000008454                 db 0F4h
.eh_frame:0000000000008455                 db    6
.eh_frame:0000000000008456                 db    0
.eh_frame:0000000000008457                 db    0
.eh_frame:0000000000008458                 db 0D8h
.eh_frame:0000000000008459                 db 0CEh
.eh_frame:000000000000845A                 db 0FFh
.eh_frame:000000000000845B                 db 0FFh
.eh_frame:000000000000845C                 db  0Ch
.eh_frame:000000000000845D                 db    0
.eh_frame:000000000000845E                 db    0
.eh_frame:000000000000845F                 db    0
.eh_frame:0000000000008460                 db    0
.eh_frame:0000000000008461                 db    0
.eh_frame:0000000000008462                 db    0
.eh_frame:0000000000008463                 db    0
.eh_frame:0000000000008464                 db  10h
.eh_frame:0000000000008465                 db    0
.eh_frame:0000000000008466                 db    0
.eh_frame:0000000000008467                 db    0
.eh_frame:0000000000008468                 db    8
.eh_frame:0000000000008469                 db    7
.eh_frame:000000000000846A                 db    0
.eh_frame:000000000000846B                 db    0
.eh_frame:000000000000846C                 db 0D4h
.eh_frame:000000000000846D                 db 0CEh
.eh_frame:000000000000846E                 db 0FFh
.eh_frame:000000000000846F                 db 0FFh
.eh_frame:0000000000008470                 db  0Fh
.eh_frame:0000000000008471                 db    0
.eh_frame:0000000000008472                 db    0
.eh_frame:0000000000008473                 db    0
.eh_frame:0000000000008474                 db    0
.eh_frame:0000000000008475                 db    0
.eh_frame:0000000000008476                 db    0
.eh_frame:0000000000008477                 db    0
.eh_frame:0000000000008478                 db  18h
.eh_frame:0000000000008479                 db    0
.eh_frame:000000000000847A                 db    0
.eh_frame:000000000000847B                 db    0
.eh_frame:000000000000847C                 db  1Ch
.eh_frame:000000000000847D                 db    7
.eh_frame:000000000000847E                 db    0
.eh_frame:000000000000847F                 db    0
.eh_frame:0000000000008480                 db 0D0h
.eh_frame:0000000000008481                 db 0CEh
.eh_frame:0000000000008482                 db 0FFh
.eh_frame:0000000000008483                 db 0FFh
.eh_frame:0000000000008484                 db  98h
.eh_frame:0000000000008485                 db    0
.eh_frame:0000000000008486                 db    0
.eh_frame:0000000000008487                 db    0
.eh_frame:0000000000008488                 db    0
.eh_frame:0000000000008489                 db  44h ; D
.eh_frame:000000000000848A                 db  0Eh
.eh_frame:000000000000848B                 db  50h ; P
.eh_frame:000000000000848C                 db    2
.eh_frame:000000000000848D                 db  8Eh
.eh_frame:000000000000848E                 db  0Ah
.eh_frame:000000000000848F                 db  0Eh
.eh_frame:0000000000008490                 db    8
.eh_frame:0000000000008491                 db  41h ; A
.eh_frame:0000000000008492                 db  0Bh
.eh_frame:0000000000008493                 db    0
.eh_frame:0000000000008494                 db  10h
.eh_frame:0000000000008495                 db    0
.eh_frame:0000000000008496                 db    0
.eh_frame:0000000000008497                 db    0
.eh_frame:0000000000008498                 db  38h ; 8
.eh_frame:0000000000008499                 db    7
.eh_frame:000000000000849A                 db    0
.eh_frame:000000000000849B                 db    0
.eh_frame:000000000000849C                 db  54h ; T
.eh_frame:000000000000849D                 db 0CFh
.eh_frame:000000000000849E                 db 0FFh
.eh_frame:000000000000849F                 db 0FFh
.eh_frame:00000000000084A0                 db  10h
.eh_frame:00000000000084A1                 db    0
.eh_frame:00000000000084A2                 db    0
.eh_frame:00000000000084A3                 db    0
.eh_frame:00000000000084A4                 db    0
.eh_frame:00000000000084A5                 db    0
.eh_frame:00000000000084A6                 db    0
.eh_frame:00000000000084A7                 db    0
.eh_frame:00000000000084A8                 db  10h
.eh_frame:00000000000084A9                 db    0
.eh_frame:00000000000084AA                 db    0
.eh_frame:00000000000084AB                 db    0
.eh_frame:00000000000084AC                 db  4Ch ; L
.eh_frame:00000000000084AD                 db    7
.eh_frame:00000000000084AE                 db    0
.eh_frame:00000000000084AF                 db    0
.eh_frame:00000000000084B0                 db  50h ; P
.eh_frame:00000000000084B1                 db 0CFh
.eh_frame:00000000000084B2                 db 0FFh
.eh_frame:00000000000084B3                 db 0FFh
.eh_frame:00000000000084B4                 db  11h
.eh_frame:00000000000084B5                 db    0
.eh_frame:00000000000084B6                 db    0
.eh_frame:00000000000084B7                 db    0
.eh_frame:00000000000084B8                 db    0
.eh_frame:00000000000084B9                 db    0
.eh_frame:00000000000084BA                 db    0
.eh_frame:00000000000084BB                 db    0
.eh_frame:00000000000084BC                 db  10h
.eh_frame:00000000000084BD                 db    0
.eh_frame:00000000000084BE                 db    0
.eh_frame:00000000000084BF                 db    0
.eh_frame:00000000000084C0                 db  60h ; `
.eh_frame:00000000000084C1                 db    7
.eh_frame:00000000000084C2                 db    0
.eh_frame:00000000000084C3                 db    0
.eh_frame:00000000000084C4                 db  5Ch ; \
.eh_frame:00000000000084C5                 db 0CFh
.eh_frame:00000000000084C6                 db 0FFh
.eh_frame:00000000000084C7                 db 0FFh
.eh_frame:00000000000084C8                 db  0Ah
.eh_frame:00000000000084C9                 db    0
.eh_frame:00000000000084CA                 db    0
.eh_frame:00000000000084CB                 db    0
.eh_frame:00000000000084CC                 db    0
.eh_frame:00000000000084CD                 db    0
.eh_frame:00000000000084CE                 db    0
.eh_frame:00000000000084CF                 db    0
.eh_frame:00000000000084D0                 db  18h
.eh_frame:00000000000084D1                 db    0
.eh_frame:00000000000084D2                 db    0
.eh_frame:00000000000084D3                 db    0
.eh_frame:00000000000084D4                 db  74h ; t
.eh_frame:00000000000084D5                 db    7
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db  58h ; X
.eh_frame:00000000000084D9                 db 0CFh
.eh_frame:00000000000084DA                 db 0FFh
.eh_frame:00000000000084DB                 db 0FFh
.eh_frame:00000000000084DC                 db  8Eh
.eh_frame:00000000000084DD                 db    0
.eh_frame:00000000000084DE                 db    0
.eh_frame:00000000000084DF                 db    0
.eh_frame:00000000000084E0                 db    0
.eh_frame:00000000000084E1                 db  44h ; D
.eh_frame:00000000000084E2                 db  0Eh
.eh_frame:00000000000084E3                 db  50h ; P
.eh_frame:00000000000084E4                 db    2
.eh_frame:00000000000084E5                 db  7Fh ; 
.eh_frame:00000000000084E6                 db  0Ah
.eh_frame:00000000000084E7                 db  0Eh
.eh_frame:00000000000084E8                 db    8
.eh_frame:00000000000084E9                 db  41h ; A
.eh_frame:00000000000084EA                 db  0Bh
.eh_frame:00000000000084EB                 db    0
.eh_frame:00000000000084EC                 db  18h
.eh_frame:00000000000084ED                 db    0
.eh_frame:00000000000084EE                 db    0
.eh_frame:00000000000084EF                 db    0
.eh_frame:00000000000084F0                 db  90h
.eh_frame:00000000000084F1                 db    7
.eh_frame:00000000000084F2                 db    0
.eh_frame:00000000000084F3                 db    0
.eh_frame:00000000000084F4                 db 0CCh
.eh_frame:00000000000084F5                 db 0CFh
.eh_frame:00000000000084F6                 db 0FFh
.eh_frame:00000000000084F7                 db 0FFh
.eh_frame:00000000000084F8                 db  91h
.eh_frame:00000000000084F9                 db    0
.eh_frame:00000000000084FA                 db    0
.eh_frame:00000000000084FB                 db    0
.eh_frame:00000000000084FC                 db    0
.eh_frame:00000000000084FD                 db  44h ; D
.eh_frame:00000000000084FE                 db  0Eh
.eh_frame:00000000000084FF                 db  50h ; P
.eh_frame:0000000000008500                 db    2
.eh_frame:0000000000008501                 db  82h
.eh_frame:0000000000008502                 db  0Ah
.eh_frame:0000000000008503                 db  0Eh
.eh_frame:0000000000008504                 db    8
.eh_frame:0000000000008505                 db  41h ; A
.eh_frame:0000000000008506                 db  0Bh
.eh_frame:0000000000008507                 db    0
.eh_frame:0000000000008508                 db  10h
.eh_frame:0000000000008509                 db    0
.eh_frame:000000000000850A                 db    0
.eh_frame:000000000000850B                 db    0
.eh_frame:000000000000850C                 db 0ACh
.eh_frame:000000000000850D                 db    7
.eh_frame:000000000000850E                 db    0
.eh_frame:000000000000850F                 db    0
.eh_frame:0000000000008510                 db  50h ; P
.eh_frame:0000000000008511                 db 0D0h
.eh_frame:0000000000008512                 db 0FFh
.eh_frame:0000000000008513                 db 0FFh
.eh_frame:0000000000008514                 db  0Ch
.eh_frame:0000000000008515                 db    0
.eh_frame:0000000000008516                 db    0
.eh_frame:0000000000008517                 db    0
.eh_frame:0000000000008518                 db    0
.eh_frame:0000000000008519                 db    0
.eh_frame:000000000000851A                 db    0
.eh_frame:000000000000851B                 db    0
.eh_frame:000000000000851C                 db  10h
.eh_frame:000000000000851D                 db    0
.eh_frame:000000000000851E                 db    0
.eh_frame:000000000000851F                 db    0
.eh_frame:0000000000008520                 db 0C0h
.eh_frame:0000000000008521                 db    7
.eh_frame:0000000000008522                 db    0
.eh_frame:0000000000008523                 db    0
.eh_frame:0000000000008524                 db  4Ch ; L
.eh_frame:0000000000008525                 db 0D0h
.eh_frame:0000000000008526                 db 0FFh
.eh_frame:0000000000008527                 db 0FFh
.eh_frame:0000000000008528                 db  17h
.eh_frame:0000000000008529                 db    0
.eh_frame:000000000000852A                 db    0
.eh_frame:000000000000852B                 db    0
.eh_frame:000000000000852C                 db    0
.eh_frame:000000000000852D                 db    0
.eh_frame:000000000000852E                 db    0
.eh_frame:000000000000852F                 db    0
.eh_frame:0000000000008530                 db  10h
.eh_frame:0000000000008531                 db    0
.eh_frame:0000000000008532                 db    0
.eh_frame:0000000000008533                 db    0
.eh_frame:0000000000008534                 db 0D4h
.eh_frame:0000000000008535                 db    7
.eh_frame:0000000000008536                 db    0
.eh_frame:0000000000008537                 db    0
.eh_frame:0000000000008538                 db  58h ; X
.eh_frame:0000000000008539                 db 0D0h
.eh_frame:000000000000853A                 db 0FFh
.eh_frame:000000000000853B                 db 0FFh
.eh_frame:000000000000853C                 db  13h
.eh_frame:000000000000853D                 db    0
.eh_frame:000000000000853E                 db    0
.eh_frame:000000000000853F                 db    0
.eh_frame:0000000000008540                 db    0
.eh_frame:0000000000008541                 db    0
.eh_frame:0000000000008542                 db    0
.eh_frame:0000000000008543                 db    0
.eh_frame:0000000000008544                 db  10h
.eh_frame:0000000000008545                 db    0
.eh_frame:0000000000008546                 db    0
.eh_frame:0000000000008547                 db    0
.eh_frame:0000000000008548                 db 0E8h
.eh_frame:0000000000008549                 db    7
.eh_frame:000000000000854A                 db    0
.eh_frame:000000000000854B                 db    0
.eh_frame:000000000000854C                 db  64h ; d
.eh_frame:000000000000854D                 db 0D0h
.eh_frame:000000000000854E                 db 0FFh
.eh_frame:000000000000854F                 db 0FFh
.eh_frame:0000000000008550                 db  0Ch
.eh_frame:0000000000008551                 db    0
.eh_frame:0000000000008552                 db    0
.eh_frame:0000000000008553                 db    0
.eh_frame:0000000000008554                 db    0
.eh_frame:0000000000008555                 db    0
.eh_frame:0000000000008556                 db    0
.eh_frame:0000000000008557                 db    0
.eh_frame:0000000000008558                 db  10h
.eh_frame:0000000000008559                 db    0
.eh_frame:000000000000855A                 db    0
.eh_frame:000000000000855B                 db    0
.eh_frame:000000000000855C                 db 0FCh
.eh_frame:000000000000855D                 db    7
.eh_frame:000000000000855E                 db    0
.eh_frame:000000000000855F                 db    0
.eh_frame:0000000000008560                 db  60h ; `
.eh_frame:0000000000008561                 db 0D0h
.eh_frame:0000000000008562                 db 0FFh
.eh_frame:0000000000008563                 db 0FFh
.eh_frame:0000000000008564                 db  14h
.eh_frame:0000000000008565                 db    0
.eh_frame:0000000000008566                 db    0
.eh_frame:0000000000008567                 db    0
.eh_frame:0000000000008568                 db    0
.eh_frame:0000000000008569                 db    0
.eh_frame:000000000000856A                 db    0
.eh_frame:000000000000856B                 db    0
.eh_frame:000000000000856C                 db  10h
.eh_frame:000000000000856D                 db    0
.eh_frame:000000000000856E                 db    0
.eh_frame:000000000000856F                 db    0
.eh_frame:0000000000008570                 db  10h
.eh_frame:0000000000008571                 db    8
.eh_frame:0000000000008572                 db    0
.eh_frame:0000000000008573                 db    0
.eh_frame:0000000000008574                 db  6Ch ; l
.eh_frame:0000000000008575                 db 0D0h
.eh_frame:0000000000008576                 db 0FFh
.eh_frame:0000000000008577                 db 0FFh
.eh_frame:0000000000008578                 db  13h
.eh_frame:0000000000008579                 db    0
.eh_frame:000000000000857A                 db    0
.eh_frame:000000000000857B                 db    0
.eh_frame:000000000000857C                 db    0
.eh_frame:000000000000857D                 db    0
.eh_frame:000000000000857E                 db    0
.eh_frame:000000000000857F                 db    0
.eh_frame:0000000000008580                 db  14h
.eh_frame:0000000000008581                 db    0
.eh_frame:0000000000008582                 db    0
.eh_frame:0000000000008583                 db    0
.eh_frame:0000000000008584                 db  24h ; $
.eh_frame:0000000000008585                 db    8
.eh_frame:0000000000008586                 db    0
.eh_frame:0000000000008587                 db    0
.eh_frame:0000000000008588                 db  78h ; x
.eh_frame:0000000000008589                 db 0D0h
.eh_frame:000000000000858A                 db 0FFh
.eh_frame:000000000000858B                 db 0FFh
.eh_frame:000000000000858C                 db  18h
.eh_frame:000000000000858D                 db    0
.eh_frame:000000000000858E                 db    0
.eh_frame:000000000000858F                 db    0
.eh_frame:0000000000008590                 db    0
.eh_frame:0000000000008591                 db    0
.eh_frame:0000000000008592                 db    0
.eh_frame:0000000000008593                 db    0
.eh_frame:0000000000008594                 db    0
.eh_frame:0000000000008595                 db    0
.eh_frame:0000000000008596                 db    0
.eh_frame:0000000000008597                 db    0
.eh_frame:0000000000008598                 db  34h ; 4
.eh_frame:0000000000008599                 db    0
.eh_frame:000000000000859A                 db    0
.eh_frame:000000000000859B                 db    0
.eh_frame:000000000000859C                 db  3Ch ; <
.eh_frame:000000000000859D                 db    8
.eh_frame:000000000000859E                 db    0
.eh_frame:000000000000859F                 db    0
.eh_frame:00000000000085A0                 db  80h
.eh_frame:00000000000085A1                 db 0D0h
.eh_frame:00000000000085A2                 db 0FFh
.eh_frame:00000000000085A3                 db 0FFh
.eh_frame:00000000000085A4                 db  5Eh ; ^
.eh_frame:00000000000085A5                 db    0
.eh_frame:00000000000085A6                 db    0
.eh_frame:00000000000085A7                 db    0
.eh_frame:00000000000085A8                 db    0
.eh_frame:00000000000085A9                 db  42h ; B
.eh_frame:00000000000085AA                 db  0Eh
.eh_frame:00000000000085AB                 db  10h
.eh_frame:00000000000085AC                 db  8Dh
.eh_frame:00000000000085AD                 db    2
.eh_frame:00000000000085AE                 db  42h ; B
.eh_frame:00000000000085AF                 db  0Eh
.eh_frame:00000000000085B0                 db  18h
.eh_frame:00000000000085B1                 db  8Ch
.eh_frame:00000000000085B2                 db    3
.eh_frame:00000000000085B3                 db  44h ; D
.eh_frame:00000000000085B4                 db  0Eh
.eh_frame:00000000000085B5                 db  20h
.eh_frame:00000000000085B6                 db  86h
.eh_frame:00000000000085B7                 db    4
.eh_frame:00000000000085B8                 db  41h ; A
.eh_frame:00000000000085B9                 db  0Eh
.eh_frame:00000000000085BA                 db  28h ; (
.eh_frame:00000000000085BB                 db  83h
.eh_frame:00000000000085BC                 db    5
.eh_frame:00000000000085BD                 db  4Ah ; J
.eh_frame:00000000000085BE                 db  0Eh
.eh_frame:00000000000085BF                 db  30h ; 0
.eh_frame:00000000000085C0                 db    2
.eh_frame:00000000000085C1                 db  41h ; A
.eh_frame:00000000000085C2                 db  0Eh
.eh_frame:00000000000085C3                 db  28h ; (
.eh_frame:00000000000085C4                 db  44h ; D
.eh_frame:00000000000085C5                 db  0Eh
.eh_frame:00000000000085C6                 db  20h
.eh_frame:00000000000085C7                 db  41h ; A
.eh_frame:00000000000085C8                 db  0Eh
.eh_frame:00000000000085C9                 db  18h
.eh_frame:00000000000085CA                 db  42h ; B
.eh_frame:00000000000085CB                 db  0Eh
.eh_frame:00000000000085CC                 db  10h
.eh_frame:00000000000085CD                 db  42h ; B
.eh_frame:00000000000085CE                 db  0Eh
.eh_frame:00000000000085CF                 db    8
.eh_frame:00000000000085D0                 db  10h
.eh_frame:00000000000085D1                 db    1
.eh_frame:00000000000085D2                 db    0
.eh_frame:00000000000085D3                 db    0
.eh_frame:00000000000085D4                 db  74h ; t
.eh_frame:00000000000085D5                 db    8
.eh_frame:00000000000085D6                 db    0
.eh_frame:00000000000085D7                 db    0
.eh_frame:00000000000085D8                 db 0A8h
.eh_frame:00000000000085D9                 db 0D0h
.eh_frame:00000000000085DA                 db 0FFh
.eh_frame:00000000000085DB                 db 0FFh
.eh_frame:00000000000085DC                 db  17h
.eh_frame:00000000000085DD                 db    4
.eh_frame:00000000000085DE                 db    0
.eh_frame:00000000000085DF                 db    0
.eh_frame:00000000000085E0                 db    0
.eh_frame:00000000000085E1                 db  42h ; B
.eh_frame:00000000000085E2                 db  0Eh
.eh_frame:00000000000085E3                 db  10h
.eh_frame:00000000000085E4                 db  8Fh
.eh_frame:00000000000085E5                 db    2
.eh_frame:00000000000085E6                 db  42h ; B
.eh_frame:00000000000085E7                 db  0Eh
.eh_frame:00000000000085E8                 db  18h
.eh_frame:00000000000085E9                 db  8Eh
.eh_frame:00000000000085EA                 db    3
.eh_frame:00000000000085EB                 db  42h ; B
.eh_frame:00000000000085EC                 db  0Eh
.eh_frame:00000000000085ED                 db  20h
.eh_frame:00000000000085EE                 db  8Dh
.eh_frame:00000000000085EF                 db    4
.eh_frame:00000000000085F0                 db  42h ; B
.eh_frame:00000000000085F1                 db  0Eh
.eh_frame:00000000000085F2                 db  28h ; (
.eh_frame:00000000000085F3                 db  8Ch
.eh_frame:00000000000085F4                 db    5
.eh_frame:00000000000085F5                 db  44h ; D
.eh_frame:00000000000085F6                 db  0Eh
.eh_frame:00000000000085F7                 db  30h ; 0
.eh_frame:00000000000085F8                 db  86h
.eh_frame:00000000000085F9                 db    6
.eh_frame:00000000000085FA                 db  41h ; A
.eh_frame:00000000000085FB                 db  0Eh
.eh_frame:00000000000085FC                 db  38h ; 8
.eh_frame:00000000000085FD                 db  83h
.eh_frame:00000000000085FE                 db    7
.eh_frame:00000000000085FF                 db  4Ah ; J
.eh_frame:0000000000008600                 db  0Eh
.eh_frame:0000000000008601                 db  60h ; `
.eh_frame:0000000000008602                 db    2
.eh_frame:0000000000008603                 db 0DDh
.eh_frame:0000000000008604                 db  0Eh
.eh_frame:0000000000008605                 db  68h ; h
.eh_frame:0000000000008606                 db  57h ; W
.eh_frame:0000000000008607                 db  0Eh
.eh_frame:0000000000008608                 db  70h ; p
.eh_frame:0000000000008609                 db  42h ; B
.eh_frame:000000000000860A                 db  0Eh
.eh_frame:000000000000860B                 db  78h ; x
.eh_frame:000000000000860C                 db  42h ; B
.eh_frame:000000000000860D                 db  0Eh
.eh_frame:000000000000860E                 db  80h
.eh_frame:000000000000860F                 db    1
.eh_frame:0000000000008610                 db  42h ; B
.eh_frame:0000000000008611                 db  0Eh
.eh_frame:0000000000008612                 db  88h
.eh_frame:0000000000008613                 db    1
.eh_frame:0000000000008614                 db  42h ; B
.eh_frame:0000000000008615                 db  0Eh
.eh_frame:0000000000008616                 db  90h
.eh_frame:0000000000008617                 db    1
.eh_frame:0000000000008618                 db  53h ; S
.eh_frame:0000000000008619                 db  0Eh
.eh_frame:000000000000861A                 db  60h ; `
.eh_frame:000000000000861B                 db  44h ; D
.eh_frame:000000000000861C                 db  0Ah
.eh_frame:000000000000861D                 db  0Eh
.eh_frame:000000000000861E                 db  38h ; 8
.eh_frame:000000000000861F                 db  41h ; A
.eh_frame:0000000000008620                 db  0Eh
.eh_frame:0000000000008621                 db  30h ; 0
.eh_frame:0000000000008622                 db  41h ; A
.eh_frame:0000000000008623                 db  0Eh
.eh_frame:0000000000008624                 db  28h ; (
.eh_frame:0000000000008625                 db  42h ; B
.eh_frame:0000000000008626                 db  0Eh
.eh_frame:0000000000008627                 db  20h
.eh_frame:0000000000008628                 db  42h ; B
.eh_frame:0000000000008629                 db  0Eh
.eh_frame:000000000000862A                 db  18h
.eh_frame:000000000000862B                 db  42h ; B
.eh_frame:000000000000862C                 db  0Eh
.eh_frame:000000000000862D                 db  10h
.eh_frame:000000000000862E                 db  42h ; B
.eh_frame:000000000000862F                 db  0Eh
.eh_frame:0000000000008630                 db    8
.eh_frame:0000000000008631                 db  44h ; D
.eh_frame:0000000000008632                 db  0Bh
.eh_frame:0000000000008633                 db    2
.eh_frame:0000000000008634                 db  78h ; x
.eh_frame:0000000000008635                 db  0Ah
.eh_frame:0000000000008636                 db  0Eh
.eh_frame:0000000000008637                 db  68h ; h
.eh_frame:0000000000008638                 db  48h ; H
.eh_frame:0000000000008639                 db  0Bh
.eh_frame:000000000000863A                 db  5Ah ; Z
.eh_frame:000000000000863B                 db  0Ah
.eh_frame:000000000000863C                 db  0Eh
.eh_frame:000000000000863D                 db  38h ; 8
.eh_frame:000000000000863E                 db  47h ; G
.eh_frame:000000000000863F                 db  0Eh
.eh_frame:0000000000008640                 db  30h ; 0
.eh_frame:0000000000008641                 db  41h ; A
.eh_frame:0000000000008642                 db  0Eh
.eh_frame:0000000000008643                 db  28h ; (
.eh_frame:0000000000008644                 db  42h ; B
.eh_frame:0000000000008645                 db  0Eh
.eh_frame:0000000000008646                 db  20h
.eh_frame:0000000000008647                 db  42h ; B
.eh_frame:0000000000008648                 db  0Eh
.eh_frame:0000000000008649                 db  18h
.eh_frame:000000000000864A                 db  42h ; B
.eh_frame:000000000000864B                 db  0Eh
.eh_frame:000000000000864C                 db  10h
.eh_frame:000000000000864D                 db  42h ; B
.eh_frame:000000000000864E                 db  0Eh
.eh_frame:000000000000864F                 db    8
.eh_frame:0000000000008650                 db  56h ; V
.eh_frame:0000000000008651                 db  0Bh
.eh_frame:0000000000008652                 db  5Eh ; ^
.eh_frame:0000000000008653                 db  0Ah
.eh_frame:0000000000008654                 db  0Eh
.eh_frame:0000000000008655                 db  38h ; 8
.eh_frame:0000000000008656                 db  52h ; R
.eh_frame:0000000000008657                 db  0Eh
.eh_frame:0000000000008658                 db  30h ; 0
.eh_frame:0000000000008659                 db  41h ; A
.eh_frame:000000000000865A                 db  0Eh
.eh_frame:000000000000865B                 db  28h ; (
.eh_frame:000000000000865C                 db  42h ; B
.eh_frame:000000000000865D                 db  0Eh
.eh_frame:000000000000865E                 db  20h
.eh_frame:000000000000865F                 db  42h ; B
.eh_frame:0000000000008660                 db  0Eh
.eh_frame:0000000000008661                 db  18h
.eh_frame:0000000000008662                 db  42h ; B
.eh_frame:0000000000008663                 db  0Eh
.eh_frame:0000000000008664                 db  10h
.eh_frame:0000000000008665                 db  42h ; B
.eh_frame:0000000000008666                 db  0Eh
.eh_frame:0000000000008667                 db    8
.eh_frame:0000000000008668                 db  4Fh ; O
.eh_frame:0000000000008669                 db  0Bh
.eh_frame:000000000000866A                 db  62h ; b
.eh_frame:000000000000866B                 db  0Ah
.eh_frame:000000000000866C                 db  0Eh
.eh_frame:000000000000866D                 db  38h ; 8
.eh_frame:000000000000866E                 db  50h ; P
.eh_frame:000000000000866F                 db  0Eh
.eh_frame:0000000000008670                 db  30h ; 0
.eh_frame:0000000000008671                 db  41h ; A
.eh_frame:0000000000008672                 db  0Eh
.eh_frame:0000000000008673                 db  28h ; (
.eh_frame:0000000000008674                 db  42h ; B
.eh_frame:0000000000008675                 db  0Eh
.eh_frame:0000000000008676                 db  20h
.eh_frame:0000000000008677                 db  42h ; B
.eh_frame:0000000000008678                 db  0Eh
.eh_frame:0000000000008679                 db  18h
.eh_frame:000000000000867A                 db  42h ; B
.eh_frame:000000000000867B                 db  0Eh
.eh_frame:000000000000867C                 db  10h
.eh_frame:000000000000867D                 db  42h ; B
.eh_frame:000000000000867E                 db  0Eh
.eh_frame:000000000000867F                 db    8
.eh_frame:0000000000008680                 db  55h ; U
.eh_frame:0000000000008681                 db  0Bh
.eh_frame:0000000000008682                 db  66h ; f
.eh_frame:0000000000008683                 db  0Eh
.eh_frame:0000000000008684                 db  68h ; h
.eh_frame:0000000000008685                 db  42h ; B
.eh_frame:0000000000008686                 db  0Eh
.eh_frame:0000000000008687                 db  70h ; p
.eh_frame:0000000000008688                 db  5Ch ; \
.eh_frame:0000000000008689                 db  0Eh
.eh_frame:000000000000868A                 db  68h ; h
.eh_frame:000000000000868B                 db  41h ; A
.eh_frame:000000000000868C                 db  0Eh
.eh_frame:000000000000868D                 db  60h ; `
.eh_frame:000000000000868E                 db  44h ; D
.eh_frame:000000000000868F                 db  0Ah
.eh_frame:0000000000008690                 db  0Eh
.eh_frame:0000000000008691                 db  38h ; 8
.eh_frame:0000000000008692                 db  41h ; A
.eh_frame:0000000000008693                 db  0Eh
.eh_frame:0000000000008694                 db  30h ; 0
.eh_frame:0000000000008695                 db  41h ; A
.eh_frame:0000000000008696                 db  0Eh
.eh_frame:0000000000008697                 db  28h ; (
.eh_frame:0000000000008698                 db  42h ; B
.eh_frame:0000000000008699                 db  0Eh
.eh_frame:000000000000869A                 db  20h
.eh_frame:000000000000869B                 db  42h ; B
.eh_frame:000000000000869C                 db  0Eh
.eh_frame:000000000000869D                 db  18h
.eh_frame:000000000000869E                 db  42h ; B
.eh_frame:000000000000869F                 db  0Eh
.eh_frame:00000000000086A0                 db  10h
.eh_frame:00000000000086A1                 db  42h ; B
.eh_frame:00000000000086A2                 db  0Eh
.eh_frame:00000000000086A3                 db    8
.eh_frame:00000000000086A4                 db  45h ; E
.eh_frame:00000000000086A5                 db  0Bh
.eh_frame:00000000000086A6                 db  68h ; h
.eh_frame:00000000000086A7                 db  0Ah
.eh_frame:00000000000086A8                 db  0Eh
.eh_frame:00000000000086A9                 db  68h ; h
.eh_frame:00000000000086AA                 db  48h ; H
.eh_frame:00000000000086AB                 db  0Bh
.eh_frame:00000000000086AC                 db  72h ; r
.eh_frame:00000000000086AD                 db  0Eh
.eh_frame:00000000000086AE                 db  68h ; h
.eh_frame:00000000000086AF                 db  45h ; E
.eh_frame:00000000000086B0                 db  0Eh
.eh_frame:00000000000086B1                 db  70h ; p
.eh_frame:00000000000086B2                 db  42h ; B
.eh_frame:00000000000086B3                 db  0Eh
.eh_frame:00000000000086B4                 db  78h ; x
.eh_frame:00000000000086B5                 db  42h ; B
.eh_frame:00000000000086B6                 db  0Eh
.eh_frame:00000000000086B7                 db  80h
.eh_frame:00000000000086B8                 db    1
.eh_frame:00000000000086B9                 db  5Eh ; ^
.eh_frame:00000000000086BA                 db  0Eh
.eh_frame:00000000000086BB                 db  60h ; `
.eh_frame:00000000000086BC                 db  44h ; D
.eh_frame:00000000000086BD                 db  0Ah
.eh_frame:00000000000086BE                 db  0Eh
.eh_frame:00000000000086BF                 db  38h ; 8
.eh_frame:00000000000086C0                 db  41h ; A
.eh_frame:00000000000086C1                 db  0Eh
.eh_frame:00000000000086C2                 db  30h ; 0
.eh_frame:00000000000086C3                 db  41h ; A
.eh_frame:00000000000086C4                 db  0Eh
.eh_frame:00000000000086C5                 db  28h ; (
.eh_frame:00000000000086C6                 db  42h ; B
.eh_frame:00000000000086C7                 db  0Eh
.eh_frame:00000000000086C8                 db  20h
.eh_frame:00000000000086C9                 db  42h ; B
.eh_frame:00000000000086CA                 db  0Eh
.eh_frame:00000000000086CB                 db  18h
.eh_frame:00000000000086CC                 db  42h ; B
.eh_frame:00000000000086CD                 db  0Eh
.eh_frame:00000000000086CE                 db  10h
.eh_frame:00000000000086CF                 db  42h ; B
.eh_frame:00000000000086D0                 db  0Eh
.eh_frame:00000000000086D1                 db    8
.eh_frame:00000000000086D2                 db  41h ; A
.eh_frame:00000000000086D3                 db  0Bh
.eh_frame:00000000000086D4                 db  79h ; y
.eh_frame:00000000000086D5                 db  0Ah
.eh_frame:00000000000086D6                 db  0Eh
.eh_frame:00000000000086D7                 db  68h ; h
.eh_frame:00000000000086D8                 db  42h ; B
.eh_frame:00000000000086D9                 db  0Eh
.eh_frame:00000000000086DA                 db  70h ; p
.eh_frame:00000000000086DB                 db  42h ; B
.eh_frame:00000000000086DC                 db  0Eh
.eh_frame:00000000000086DD                 db  78h ; x
.eh_frame:00000000000086DE                 db  42h ; B
.eh_frame:00000000000086DF                 db  0Eh
.eh_frame:00000000000086E0                 db  80h
.eh_frame:00000000000086E1                 db    1
.eh_frame:00000000000086E2                 db  51h ; Q
.eh_frame:00000000000086E3                 db  0Bh
.eh_frame:00000000000086E4                 db  10h
.eh_frame:00000000000086E5                 db    0
.eh_frame:00000000000086E6                 db    0
.eh_frame:00000000000086E7                 db    0
.eh_frame:00000000000086E8                 db  88h
.eh_frame:00000000000086E9                 db    9
.eh_frame:00000000000086EA                 db    0
.eh_frame:00000000000086EB                 db    0
.eh_frame:00000000000086EC                 db 0B4h
.eh_frame:00000000000086ED                 db 0D3h
.eh_frame:00000000000086EE                 db 0FFh
.eh_frame:00000000000086EF                 db 0FFh
.eh_frame:00000000000086F0                 db  20h
.eh_frame:00000000000086F1                 db    0
.eh_frame:00000000000086F2                 db    0
.eh_frame:00000000000086F3                 db    0
.eh_frame:00000000000086F4                 db    0
.eh_frame:00000000000086F5                 db    0
.eh_frame:00000000000086F6                 db    0
.eh_frame:00000000000086F7                 db    0
.eh_frame:00000000000086F8                 db  18h
.eh_frame:00000000000086F9                 db    0
.eh_frame:00000000000086FA                 db    0
.eh_frame:00000000000086FB                 db    0
.eh_frame:00000000000086FC                 db  9Ch
.eh_frame:00000000000086FD                 db    9
.eh_frame:00000000000086FE                 db    0
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db 0C0h
.eh_frame:0000000000008701                 db 0D3h
.eh_frame:0000000000008702                 db 0FFh
.eh_frame:0000000000008703                 db 0FFh
.eh_frame:0000000000008704                 db  78h ; x
.eh_frame:0000000000008705                 db    0
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db    0
.eh_frame:0000000000008709                 db  44h ; D
.eh_frame:000000000000870A                 db  0Eh
.eh_frame:000000000000870B                 db  70h ; p
.eh_frame:000000000000870C                 db    2
.eh_frame:000000000000870D                 db  60h ; `
.eh_frame:000000000000870E                 db  0Ah
.eh_frame:000000000000870F                 db  0Eh
.eh_frame:0000000000008710                 db    8
.eh_frame:0000000000008711                 db  41h ; A
.eh_frame:0000000000008712                 db  0Bh
.eh_frame:0000000000008713                 db    0
.eh_frame:0000000000008714                 db  28h ; (
.eh_frame:0000000000008715                 db    0
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db 0B8h
.eh_frame:0000000000008719                 db    9
.eh_frame:000000000000871A                 db    0
.eh_frame:000000000000871B                 db    0
.eh_frame:000000000000871C                 db  24h ; $
.eh_frame:000000000000871D                 db 0D4h
.eh_frame:000000000000871E                 db 0FFh
.eh_frame:000000000000871F                 db 0FFh
.eh_frame:0000000000008720                 db 0D5h
.eh_frame:0000000000008721                 db    0
.eh_frame:0000000000008722                 db    0
.eh_frame:0000000000008723                 db    0
.eh_frame:0000000000008724                 db    0
.eh_frame:0000000000008725                 db  41h ; A
.eh_frame:0000000000008726                 db  0Eh
.eh_frame:0000000000008727                 db  10h
.eh_frame:0000000000008728                 db  86h
.eh_frame:0000000000008729                 db    2
.eh_frame:000000000000872A                 db  41h ; A
.eh_frame:000000000000872B                 db  0Eh
.eh_frame:000000000000872C                 db  18h
.eh_frame:000000000000872D                 db  83h
.eh_frame:000000000000872E                 db    3
.eh_frame:000000000000872F                 db  50h ; P
.eh_frame:0000000000008730                 db  0Eh
.eh_frame:0000000000008731                 db 0D0h
.eh_frame:0000000000008732                 db    1
.eh_frame:0000000000008733                 db    2
.eh_frame:0000000000008734                 db 0ABh
.eh_frame:0000000000008735                 db  0Ah
.eh_frame:0000000000008736                 db  0Eh
.eh_frame:0000000000008737                 db  18h
.eh_frame:0000000000008738                 db  41h ; A
.eh_frame:0000000000008739                 db  0Eh
.eh_frame:000000000000873A                 db  10h
.eh_frame:000000000000873B                 db  41h ; A
.eh_frame:000000000000873C                 db  0Eh
.eh_frame:000000000000873D                 db    8
.eh_frame:000000000000873E                 db  41h ; A
.eh_frame:000000000000873F                 db  0Bh
.eh_frame:0000000000008740                 db  1Ch
.eh_frame:0000000000008741                 db    0
.eh_frame:0000000000008742                 db    0
.eh_frame:0000000000008743                 db    0
.eh_frame:0000000000008744                 db 0E4h
.eh_frame:0000000000008745                 db    9
.eh_frame:0000000000008746                 db    0
.eh_frame:0000000000008747                 db    0
.eh_frame:0000000000008748                 db 0D8h
.eh_frame:0000000000008749                 db 0D4h
.eh_frame:000000000000874A                 db 0FFh
.eh_frame:000000000000874B                 db 0FFh
.eh_frame:000000000000874C                 db  80h
.eh_frame:000000000000874D                 db    0
.eh_frame:000000000000874E                 db    0
.eh_frame:000000000000874F                 db    0
.eh_frame:0000000000008750                 db    0
.eh_frame:0000000000008751                 db  41h ; A
.eh_frame:0000000000008752                 db  0Eh
.eh_frame:0000000000008753                 db  10h
.eh_frame:0000000000008754                 db  83h
.eh_frame:0000000000008755                 db    2
.eh_frame:0000000000008756                 db    2
.eh_frame:0000000000008757                 db  7Ah ; z
.eh_frame:0000000000008758                 db  0Eh
.eh_frame:0000000000008759                 db    8
.eh_frame:000000000000875A                 db    0
.eh_frame:000000000000875B                 db    0
.eh_frame:000000000000875C                 db    0
.eh_frame:000000000000875D                 db    0
.eh_frame:000000000000875E                 db    0
.eh_frame:000000000000875F                 db    0
.eh_frame:0000000000008760                 db  18h
.eh_frame:0000000000008761                 db    0
.eh_frame:0000000000008762                 db    0
.eh_frame:0000000000008763                 db    0
.eh_frame:0000000000008764                 db    4
.eh_frame:0000000000008765                 db  0Ah
.eh_frame:0000000000008766                 db    0
.eh_frame:0000000000008767                 db    0
.eh_frame:0000000000008768                 db  38h ; 8
.eh_frame:0000000000008769                 db 0D5h
.eh_frame:000000000000876A                 db 0FFh
.eh_frame:000000000000876B                 db 0FFh
.eh_frame:000000000000876C                 db  1Ah
.eh_frame:000000000000876D                 db    0
.eh_frame:000000000000876E                 db    0
.eh_frame:000000000000876F                 db    0
.eh_frame:0000000000008770                 db    0
.eh_frame:0000000000008771                 db  41h ; A
.eh_frame:0000000000008772                 db  0Eh
.eh_frame:0000000000008773                 db  10h
.eh_frame:0000000000008774                 db  83h
.eh_frame:0000000000008775                 db    2
.eh_frame:0000000000008776                 db  53h ; S
.eh_frame:0000000000008777                 db  0Ah
.eh_frame:0000000000008778                 db  0Eh
.eh_frame:0000000000008779                 db    8
.eh_frame:000000000000877A                 db  41h ; A
.eh_frame:000000000000877B                 db  0Bh
.eh_frame:000000000000877C                 db  10h
.eh_frame:000000000000877D                 db    0
.eh_frame:000000000000877E                 db    0
.eh_frame:000000000000877F                 db    0
.eh_frame:0000000000008780                 db  20h
.eh_frame:0000000000008781                 db  0Ah
.eh_frame:0000000000008782                 db    0
.eh_frame:0000000000008783                 db    0
.eh_frame:0000000000008784                 db  3Ch ; <
.eh_frame:0000000000008785                 db 0D5h
.eh_frame:0000000000008786                 db 0FFh
.eh_frame:0000000000008787                 db 0FFh
.eh_frame:0000000000008788                 db  24h ; $
.eh_frame:0000000000008789                 db    0
.eh_frame:000000000000878A                 db    0
.eh_frame:000000000000878B                 db    0
.eh_frame:000000000000878C                 db    0
.eh_frame:000000000000878D                 db  5Fh ; _
.eh_frame:000000000000878E                 db  0Eh
.eh_frame:000000000000878F                 db  10h
.eh_frame:0000000000008790                 db  10h
.eh_frame:0000000000008791                 db    0
.eh_frame:0000000000008792                 db    0
.eh_frame:0000000000008793                 db    0
.eh_frame:0000000000008794                 db  34h ; 4
.eh_frame:0000000000008795                 db  0Ah
.eh_frame:0000000000008796                 db    0
.eh_frame:0000000000008797                 db    0
.eh_frame:0000000000008798                 db  58h ; X
.eh_frame:0000000000008799                 db 0D5h
.eh_frame:000000000000879A                 db 0FFh
.eh_frame:000000000000879B                 db 0FFh
.eh_frame:000000000000879C                 db    2
.eh_frame:000000000000879D                 db    0
.eh_frame:000000000000879E                 db    0
.eh_frame:000000000000879F                 db    0
.eh_frame:00000000000087A0                 db    0
.eh_frame:00000000000087A1                 db    0
.eh_frame:00000000000087A2                 db    0
.eh_frame:00000000000087A3                 db    0
.eh_frame:00000000000087A4                 db  20h
.eh_frame:00000000000087A5                 db    0
.eh_frame:00000000000087A6                 db    0
.eh_frame:00000000000087A7                 db    0
.eh_frame:00000000000087A8                 db  48h ; H
.eh_frame:00000000000087A9                 db  0Ah
.eh_frame:00000000000087AA                 db    0
.eh_frame:00000000000087AB                 db    0
.eh_frame:00000000000087AC                 db  54h ; T
.eh_frame:00000000000087AD                 db 0D5h
.eh_frame:00000000000087AE                 db 0FFh
.eh_frame:00000000000087AF                 db 0FFh
.eh_frame:00000000000087B0                 db  36h ; 6
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db    0
.eh_frame:00000000000087B5                 db  44h ; D
.eh_frame:00000000000087B6                 db  0Eh
.eh_frame:00000000000087B7                 db  10h
.eh_frame:00000000000087B8                 db  83h
.eh_frame:00000000000087B9                 db    2
.eh_frame:00000000000087BA                 db  5Dh ; ]
.eh_frame:00000000000087BB                 db  0Ah
.eh_frame:00000000000087BC                 db  0Eh
.eh_frame:00000000000087BD                 db    8
.eh_frame:00000000000087BE                 db  47h ; G
.eh_frame:00000000000087BF                 db  0Bh
.eh_frame:00000000000087C0                 db  48h ; H
.eh_frame:00000000000087C1                 db  0Ah
.eh_frame:00000000000087C2                 db  0Eh
.eh_frame:00000000000087C3                 db    8
.eh_frame:00000000000087C4                 db  41h ; A
.eh_frame:00000000000087C5                 db  0Bh
.eh_frame:00000000000087C6                 db    0
.eh_frame:00000000000087C7                 db    0
.eh_frame:00000000000087C8                 db  10h
.eh_frame:00000000000087C9                 db    0
.eh_frame:00000000000087CA                 db    0
.eh_frame:00000000000087CB                 db    0
.eh_frame:00000000000087CC                 db  6Ch ; l
.eh_frame:00000000000087CD                 db  0Ah
.eh_frame:00000000000087CE                 db    0
.eh_frame:00000000000087CF                 db    0
.eh_frame:00000000000087D0                 db  70h ; p
.eh_frame:00000000000087D1                 db 0D5h
.eh_frame:00000000000087D2                 db 0FFh
.eh_frame:00000000000087D3                 db 0FFh
.eh_frame:00000000000087D4                 db  24h ; $
.eh_frame:00000000000087D5                 db    0
.eh_frame:00000000000087D6                 db    0
.eh_frame:00000000000087D7                 db    0
.eh_frame:00000000000087D8                 db    0
.eh_frame:00000000000087D9                 db  5Fh ; _
.eh_frame:00000000000087DA                 db  0Eh
.eh_frame:00000000000087DB                 db  10h
.eh_frame:00000000000087DC                 db  14h
.eh_frame:00000000000087DD                 db    0
.eh_frame:00000000000087DE                 db    0
.eh_frame:00000000000087DF                 db    0
.eh_frame:00000000000087E0                 db  80h
.eh_frame:00000000000087E1                 db  0Ah
.eh_frame:00000000000087E2                 db    0
.eh_frame:00000000000087E3                 db    0
.eh_frame:00000000000087E4                 db  8Ch
.eh_frame:00000000000087E5                 db 0D5h
.eh_frame:00000000000087E6                 db 0FFh
.eh_frame:00000000000087E7                 db 0FFh
.eh_frame:00000000000087E8                 db  82h
.eh_frame:00000000000087E9                 db    0
.eh_frame:00000000000087EA                 db    0
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db    0
.eh_frame:00000000000087ED                 db    2
.eh_frame:00000000000087EE                 db  5Fh ; _
.eh_frame:00000000000087EF                 db  0Eh
.eh_frame:00000000000087F0                 db  10h
.eh_frame:00000000000087F1                 db  49h ; I
.eh_frame:00000000000087F2                 db  0Eh
.eh_frame:00000000000087F3                 db    8
.eh_frame:00000000000087F4                 db  14h
.eh_frame:00000000000087F5                 db    0
.eh_frame:00000000000087F6                 db    0
.eh_frame:00000000000087F7                 db    0
.eh_frame:00000000000087F8                 db  98h
.eh_frame:00000000000087F9                 db  0Ah
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db    4
.eh_frame:00000000000087FD                 db 0D6h
.eh_frame:00000000000087FE                 db 0FFh
.eh_frame:00000000000087FF                 db 0FFh
.eh_frame:0000000000008800                 db  4Ah ; J
.eh_frame:0000000000008801                 db    0
.eh_frame:0000000000008802                 db    0
.eh_frame:0000000000008803                 db    0
.eh_frame:0000000000008804                 db    0
.eh_frame:0000000000008805                 db    2
.eh_frame:0000000000008806                 db  45h ; E
.eh_frame:0000000000008807                 db  0Eh
.eh_frame:0000000000008808                 db  10h
.eh_frame:0000000000008809                 db    0
.eh_frame:000000000000880A                 db    0
.eh_frame:000000000000880B                 db    0
.eh_frame:000000000000880C                 db  18h
.eh_frame:000000000000880D                 db    0
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db 0B0h
.eh_frame:0000000000008811                 db  0Ah
.eh_frame:0000000000008812                 db    0
.eh_frame:0000000000008813                 db    0
.eh_frame:0000000000008814                 db  3Ch ; <
.eh_frame:0000000000008815                 db 0D6h
.eh_frame:0000000000008816                 db 0FFh
.eh_frame:0000000000008817                 db 0FFh
.eh_frame:0000000000008818                 db  17h
.eh_frame:0000000000008819                 db    0
.eh_frame:000000000000881A                 db    0
.eh_frame:000000000000881B                 db    0
.eh_frame:000000000000881C                 db    0
.eh_frame:000000000000881D                 db  41h ; A
.eh_frame:000000000000881E                 db  0Eh
.eh_frame:000000000000881F                 db  10h
.eh_frame:0000000000008820                 db  83h
.eh_frame:0000000000008821                 db    2
.eh_frame:0000000000008822                 db  51h ; Q
.eh_frame:0000000000008823                 db  0Eh
.eh_frame:0000000000008824                 db    8
.eh_frame:0000000000008825                 db    0
.eh_frame:0000000000008826                 db    0
.eh_frame:0000000000008827                 db    0
.eh_frame:0000000000008828                 db  18h
.eh_frame:0000000000008829                 db    0
.eh_frame:000000000000882A                 db    0
.eh_frame:000000000000882B                 db    0
.eh_frame:000000000000882C                 db 0CCh
.eh_frame:000000000000882D                 db  0Ah
.eh_frame:000000000000882E                 db    0
.eh_frame:000000000000882F                 db    0
.eh_frame:0000000000008830                 db  40h ; @
.eh_frame:0000000000008831                 db 0D6h
.eh_frame:0000000000008832                 db 0FFh
.eh_frame:0000000000008833                 db 0FFh
.eh_frame:0000000000008834                 db  2Eh ; .
.eh_frame:0000000000008835                 db    0
.eh_frame:0000000000008836                 db    0
.eh_frame:0000000000008837                 db    0
.eh_frame:0000000000008838                 db    0
.eh_frame:0000000000008839                 db  47h ; G
.eh_frame:000000000000883A                 db  0Eh
.eh_frame:000000000000883B                 db  10h
.eh_frame:000000000000883C                 db  61h ; a
.eh_frame:000000000000883D                 db  0Ah
.eh_frame:000000000000883E                 db  0Eh
.eh_frame:000000000000883F                 db    8
.eh_frame:0000000000008840                 db  41h ; A
.eh_frame:0000000000008841                 db  0Bh
.eh_frame:0000000000008842                 db    0
.eh_frame:0000000000008843                 db    0
.eh_frame:0000000000008844                 db  24h ; $
.eh_frame:0000000000008845                 db    0
.eh_frame:0000000000008846                 db    0
.eh_frame:0000000000008847                 db    0
.eh_frame:0000000000008848                 db 0E8h
.eh_frame:0000000000008849                 db  0Ah
.eh_frame:000000000000884A                 db    0
.eh_frame:000000000000884B                 db    0
.eh_frame:000000000000884C                 db  54h ; T
.eh_frame:000000000000884D                 db 0D6h
.eh_frame:000000000000884E                 db 0FFh
.eh_frame:000000000000884F                 db 0FFh
.eh_frame:0000000000008850                 db  28h ; (
.eh_frame:0000000000008851                 db    0
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db    0
.eh_frame:0000000000008855                 db  41h ; A
.eh_frame:0000000000008856                 db  0Eh
.eh_frame:0000000000008857                 db  10h
.eh_frame:0000000000008858                 db  86h
.eh_frame:0000000000008859                 db    2
.eh_frame:000000000000885A                 db  41h ; A
.eh_frame:000000000000885B                 db  0Eh
.eh_frame:000000000000885C                 db  18h
.eh_frame:000000000000885D                 db  83h
.eh_frame:000000000000885E                 db    3
.eh_frame:000000000000885F                 db  4Dh ; M
.eh_frame:0000000000008860                 db  0Eh
.eh_frame:0000000000008861                 db  20h
.eh_frame:0000000000008862                 db  49h ; I
.eh_frame:0000000000008863                 db  0Eh
.eh_frame:0000000000008864                 db  18h
.eh_frame:0000000000008865                 db  47h ; G
.eh_frame:0000000000008866                 db  0Eh
.eh_frame:0000000000008867                 db  10h
.eh_frame:0000000000008868                 db  41h ; A
.eh_frame:0000000000008869                 db  0Eh
.eh_frame:000000000000886A                 db    8
.eh_frame:000000000000886B                 db    0
.eh_frame:000000000000886C                 db  18h
.eh_frame:000000000000886D                 db    0
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db  10h
.eh_frame:0000000000008871                 db  0Bh
.eh_frame:0000000000008872                 db    0
.eh_frame:0000000000008873                 db    0
.eh_frame:0000000000008874                 db  5Ch ; \
.eh_frame:0000000000008875                 db 0D6h
.eh_frame:0000000000008876                 db 0FFh
.eh_frame:0000000000008877                 db 0FFh
.eh_frame:0000000000008878                 db  13h
.eh_frame:0000000000008879                 db    0
.eh_frame:000000000000887A                 db    0
.eh_frame:000000000000887B                 db    0
.eh_frame:000000000000887C                 db    0
.eh_frame:000000000000887D                 db  41h ; A
.eh_frame:000000000000887E                 db  0Eh
.eh_frame:000000000000887F                 db  10h
.eh_frame:0000000000008880                 db  83h
.eh_frame:0000000000008881                 db    2
.eh_frame:0000000000008882                 db  50h ; P
.eh_frame:0000000000008883                 db  0Eh
.eh_frame:0000000000008884                 db    8
.eh_frame:0000000000008885                 db    0
.eh_frame:0000000000008886                 db    0
.eh_frame:0000000000008887                 db    0
.eh_frame:0000000000008888                 db  14h
.eh_frame:0000000000008889                 db    0
.eh_frame:000000000000888A                 db    0
.eh_frame:000000000000888B                 db    0
.eh_frame:000000000000888C                 db  2Ch ; ,
.eh_frame:000000000000888D                 db  0Bh
.eh_frame:000000000000888E                 db    0
.eh_frame:000000000000888F                 db    0
.eh_frame:0000000000008890                 db  60h ; `
.eh_frame:0000000000008891                 db 0D6h
.eh_frame:0000000000008892                 db 0FFh
.eh_frame:0000000000008893                 db 0FFh
.eh_frame:0000000000008894                 db  35h ; 5
.eh_frame:0000000000008895                 db    0
.eh_frame:0000000000008896                 db    0
.eh_frame:0000000000008897                 db    0
.eh_frame:0000000000008898                 db    0
.eh_frame:0000000000008899                 db  4Bh ; K
.eh_frame:000000000000889A                 db  0Eh
.eh_frame:000000000000889B                 db  10h
.eh_frame:000000000000889C                 db    0
.eh_frame:000000000000889D                 db    0
.eh_frame:000000000000889E                 db    0
.eh_frame:000000000000889F                 db    0
.eh_frame:00000000000088A0                 db  48h ; H
.eh_frame:00000000000088A1                 db    0
.eh_frame:00000000000088A2                 db    0
.eh_frame:00000000000088A3                 db    0
.eh_frame:00000000000088A4                 db  44h ; D
.eh_frame:00000000000088A5                 db  0Bh
.eh_frame:00000000000088A6                 db    0
.eh_frame:00000000000088A7                 db    0
.eh_frame:00000000000088A8                 db  88h
.eh_frame:00000000000088A9                 db 0D6h
.eh_frame:00000000000088AA                 db 0FFh
.eh_frame:00000000000088AB                 db 0FFh
.eh_frame:00000000000088AC                 db    0
.eh_frame:00000000000088AD                 db    1
.eh_frame:00000000000088AE                 db    0
.eh_frame:00000000000088AF                 db    0
.eh_frame:00000000000088B0                 db    0
.eh_frame:00000000000088B1                 db  42h ; B
.eh_frame:00000000000088B2                 db  0Eh
.eh_frame:00000000000088B3                 db  10h
.eh_frame:00000000000088B4                 db  8Fh
.eh_frame:00000000000088B5                 db    2
.eh_frame:00000000000088B6                 db  42h ; B
.eh_frame:00000000000088B7                 db  0Eh
.eh_frame:00000000000088B8                 db  18h
.eh_frame:00000000000088B9                 db  8Eh
.eh_frame:00000000000088BA                 db    3
.eh_frame:00000000000088BB                 db  45h ; E
.eh_frame:00000000000088BC                 db  0Eh
.eh_frame:00000000000088BD                 db  20h
.eh_frame:00000000000088BE                 db  8Dh
.eh_frame:00000000000088BF                 db    4
.eh_frame:00000000000088C0                 db  42h ; B
.eh_frame:00000000000088C1                 db  0Eh
.eh_frame:00000000000088C2                 db  28h ; (
.eh_frame:00000000000088C3                 db  8Ch
.eh_frame:00000000000088C4                 db    5
.eh_frame:00000000000088C5                 db  44h ; D
.eh_frame:00000000000088C6                 db  0Eh
.eh_frame:00000000000088C7                 db  30h ; 0
.eh_frame:00000000000088C8                 db  86h
.eh_frame:00000000000088C9                 db    6
.eh_frame:00000000000088CA                 db  41h ; A
.eh_frame:00000000000088CB                 db  0Eh
.eh_frame:00000000000088CC                 db  38h ; 8
.eh_frame:00000000000088CD                 db  83h
.eh_frame:00000000000088CE                 db    7
.eh_frame:00000000000088CF                 db  4Eh ; N
.eh_frame:00000000000088D0                 db  0Eh
.eh_frame:00000000000088D1                 db  50h ; P
.eh_frame:00000000000088D2                 db    2
.eh_frame:00000000000088D3                 db  9Dh
.eh_frame:00000000000088D4                 db  0Ah
.eh_frame:00000000000088D5                 db  0Eh
.eh_frame:00000000000088D6                 db  38h ; 8
.eh_frame:00000000000088D7                 db  41h ; A
.eh_frame:00000000000088D8                 db  0Eh
.eh_frame:00000000000088D9                 db  30h ; 0
.eh_frame:00000000000088DA                 db  41h ; A
.eh_frame:00000000000088DB                 db  0Eh
.eh_frame:00000000000088DC                 db  28h ; (
.eh_frame:00000000000088DD                 db  42h ; B
.eh_frame:00000000000088DE                 db  0Eh
.eh_frame:00000000000088DF                 db  20h
.eh_frame:00000000000088E0                 db  42h ; B
.eh_frame:00000000000088E1                 db  0Eh
.eh_frame:00000000000088E2                 db  18h
.eh_frame:00000000000088E3                 db  42h ; B
.eh_frame:00000000000088E4                 db  0Eh
.eh_frame:00000000000088E5                 db  10h
.eh_frame:00000000000088E6                 db  42h ; B
.eh_frame:00000000000088E7                 db  0Eh
.eh_frame:00000000000088E8                 db    8
.eh_frame:00000000000088E9                 db  4Bh ; K
.eh_frame:00000000000088EA                 db  0Bh
.eh_frame:00000000000088EB                 db    0
.eh_frame:00000000000088EC                 db  18h
.eh_frame:00000000000088ED                 db    0
.eh_frame:00000000000088EE                 db    0
.eh_frame:00000000000088EF                 db    0
.eh_frame:00000000000088F0                 db  90h
.eh_frame:00000000000088F1                 db  0Bh
.eh_frame:00000000000088F2                 db    0
.eh_frame:00000000000088F3                 db    0
.eh_frame:00000000000088F4                 db  3Ch ; <
.eh_frame:00000000000088F5                 db 0D7h
.eh_frame:00000000000088F6                 db 0FFh
.eh_frame:00000000000088F7                 db 0FFh
.eh_frame:00000000000088F8                 db  21h ; !
.eh_frame:00000000000088F9                 db    0
.eh_frame:00000000000088FA                 db    0
.eh_frame:00000000000088FB                 db    0
.eh_frame:00000000000088FC                 db    0
.eh_frame:00000000000088FD                 db  44h ; D
.eh_frame:00000000000088FE                 db  0Eh
.eh_frame:00000000000088FF                 db  18h
.eh_frame:0000000000008900                 db  42h ; B
.eh_frame:0000000000008901                 db  0Eh
.eh_frame:0000000000008902                 db  20h
.eh_frame:0000000000008903                 db  5Ah ; Z
.eh_frame:0000000000008904                 db  0Eh
.eh_frame:0000000000008905                 db    8
.eh_frame:0000000000008906                 db    0
.eh_frame:0000000000008907                 db    0
.eh_frame:0000000000008908                 db  4Ch ; L
.eh_frame:0000000000008909                 db    0
.eh_frame:000000000000890A                 db    0
.eh_frame:000000000000890B                 db    0
.eh_frame:000000000000890C                 db 0ACh
.eh_frame:000000000000890D                 db  0Bh
.eh_frame:000000000000890E                 db    0
.eh_frame:000000000000890F                 db    0
.eh_frame:0000000000008910                 db  50h ; P
.eh_frame:0000000000008911                 db 0D7h
.eh_frame:0000000000008912                 db 0FFh
.eh_frame:0000000000008913                 db 0FFh
.eh_frame:0000000000008914                 db  1Ch
.eh_frame:0000000000008915                 db    4
.eh_frame:0000000000008916                 db    0
.eh_frame:0000000000008917                 db    0
.eh_frame:0000000000008918                 db    0
.eh_frame:0000000000008919                 db  42h ; B
.eh_frame:000000000000891A                 db  0Eh
.eh_frame:000000000000891B                 db  10h
.eh_frame:000000000000891C                 db  8Fh
.eh_frame:000000000000891D                 db    2
.eh_frame:000000000000891E                 db  42h ; B
.eh_frame:000000000000891F                 db  0Eh
.eh_frame:0000000000008920                 db  18h
.eh_frame:0000000000008921                 db  8Eh
.eh_frame:0000000000008922                 db    3
.eh_frame:0000000000008923                 db  42h ; B
.eh_frame:0000000000008924                 db  0Eh
.eh_frame:0000000000008925                 db  20h
.eh_frame:0000000000008926                 db  8Dh
.eh_frame:0000000000008927                 db    4
.eh_frame:0000000000008928                 db  42h ; B
.eh_frame:0000000000008929                 db  0Eh
.eh_frame:000000000000892A                 db  28h ; (
.eh_frame:000000000000892B                 db  8Ch
.eh_frame:000000000000892C                 db    5
.eh_frame:000000000000892D                 db  41h ; A
.eh_frame:000000000000892E                 db  0Eh
.eh_frame:000000000000892F                 db  30h ; 0
.eh_frame:0000000000008930                 db  86h
.eh_frame:0000000000008931                 db    6
.eh_frame:0000000000008932                 db  41h ; A
.eh_frame:0000000000008933                 db  0Eh
.eh_frame:0000000000008934                 db  38h ; 8
.eh_frame:0000000000008935                 db  83h
.eh_frame:0000000000008936                 db    7
.eh_frame:0000000000008937                 db  44h ; D
.eh_frame:0000000000008938                 db  0Eh
.eh_frame:0000000000008939                 db  60h ; `
.eh_frame:000000000000893A                 db    2
.eh_frame:000000000000893B                 db 0E9h
.eh_frame:000000000000893C                 db  0Ah
.eh_frame:000000000000893D                 db  0Eh
.eh_frame:000000000000893E                 db  38h ; 8
.eh_frame:000000000000893F                 db  41h ; A
.eh_frame:0000000000008940                 db  0Eh
.eh_frame:0000000000008941                 db  30h ; 0
.eh_frame:0000000000008942                 db  41h ; A
.eh_frame:0000000000008943                 db  0Eh
.eh_frame:0000000000008944                 db  28h ; (
.eh_frame:0000000000008945                 db  42h ; B
.eh_frame:0000000000008946                 db  0Eh
.eh_frame:0000000000008947                 db  20h
.eh_frame:0000000000008948                 db  42h ; B
.eh_frame:0000000000008949                 db  0Eh
.eh_frame:000000000000894A                 db  18h
.eh_frame:000000000000894B                 db  42h ; B
.eh_frame:000000000000894C                 db  0Eh
.eh_frame:000000000000894D                 db  10h
.eh_frame:000000000000894E                 db  42h ; B
.eh_frame:000000000000894F                 db  0Eh
.eh_frame:0000000000008950                 db    8
.eh_frame:0000000000008951                 db  47h ; G
.eh_frame:0000000000008952                 db  0Bh
.eh_frame:0000000000008953                 db    0
.eh_frame:0000000000008954                 db    0
.eh_frame:0000000000008955                 db    0
.eh_frame:0000000000008956                 db    0
.eh_frame:0000000000008957                 db    0
.eh_frame:0000000000008958                 db  3Ch ; <
.eh_frame:0000000000008959                 db    0
.eh_frame:000000000000895A                 db    0
.eh_frame:000000000000895B                 db    0
.eh_frame:000000000000895C                 db 0FCh
.eh_frame:000000000000895D                 db  0Bh
.eh_frame:000000000000895E                 db    0
.eh_frame:000000000000895F                 db    0
.eh_frame:0000000000008960                 db  20h
.eh_frame:0000000000008961                 db 0DBh
.eh_frame:0000000000008962                 db 0FFh
.eh_frame:0000000000008963                 db 0FFh
.eh_frame:0000000000008964                 db  83h
.eh_frame:0000000000008965                 db    0
.eh_frame:0000000000008966                 db    0
.eh_frame:0000000000008967                 db    0
.eh_frame:0000000000008968                 db    0
.eh_frame:0000000000008969                 db  42h ; B
.eh_frame:000000000000896A                 db  0Eh
.eh_frame:000000000000896B                 db  10h
.eh_frame:000000000000896C                 db  8Dh
.eh_frame:000000000000896D                 db    2
.eh_frame:000000000000896E                 db  42h ; B
.eh_frame:000000000000896F                 db  0Eh
.eh_frame:0000000000008970                 db  18h
.eh_frame:0000000000008971                 db  8Ch
.eh_frame:0000000000008972                 db    3
.eh_frame:0000000000008973                 db  44h ; D
.eh_frame:0000000000008974                 db  0Eh
.eh_frame:0000000000008975                 db  20h
.eh_frame:0000000000008976                 db  86h
.eh_frame:0000000000008977                 db    4
.eh_frame:0000000000008978                 db  41h ; A
.eh_frame:0000000000008979                 db  0Eh
.eh_frame:000000000000897A                 db  28h ; (
.eh_frame:000000000000897B                 db  83h
.eh_frame:000000000000897C                 db    5
.eh_frame:000000000000897D                 db  4Ah ; J
.eh_frame:000000000000897E                 db  0Eh
.eh_frame:000000000000897F                 db  40h ; @
.eh_frame:0000000000008980                 db    2
.eh_frame:0000000000008981                 db  64h ; d
.eh_frame:0000000000008982                 db  0Ah
.eh_frame:0000000000008983                 db  0Eh
.eh_frame:0000000000008984                 db  28h ; (
.eh_frame:0000000000008985                 db  41h ; A
.eh_frame:0000000000008986                 db  0Eh
.eh_frame:0000000000008987                 db  20h
.eh_frame:0000000000008988                 db  41h ; A
.eh_frame:0000000000008989                 db  0Eh
.eh_frame:000000000000898A                 db  18h
.eh_frame:000000000000898B                 db  42h ; B
.eh_frame:000000000000898C                 db  0Eh
.eh_frame:000000000000898D                 db  10h
.eh_frame:000000000000898E                 db  42h ; B
.eh_frame:000000000000898F                 db  0Eh
.eh_frame:0000000000008990                 db    8
.eh_frame:0000000000008991                 db  41h ; A
.eh_frame:0000000000008992                 db  0Bh
.eh_frame:0000000000008993                 db    0
.eh_frame:0000000000008994                 db    0
.eh_frame:0000000000008995                 db    0
.eh_frame:0000000000008996                 db    0
.eh_frame:0000000000008997                 db    0
.eh_frame:0000000000008998                 db  4Ch ; L
.eh_frame:0000000000008999                 db    0
.eh_frame:000000000000899A                 db    0
.eh_frame:000000000000899B                 db    0
.eh_frame:000000000000899C                 db  3Ch ; <
.eh_frame:000000000000899D                 db  0Ch
.eh_frame:000000000000899E                 db    0
.eh_frame:000000000000899F                 db    0
.eh_frame:00000000000089A0                 db  70h ; p
.eh_frame:00000000000089A1                 db 0DBh
.eh_frame:00000000000089A2                 db 0FFh
.eh_frame:00000000000089A3                 db 0FFh
.eh_frame:00000000000089A4                 db  7Dh ; }
.eh_frame:00000000000089A5                 db    0
.eh_frame:00000000000089A6                 db    0
.eh_frame:00000000000089A7                 db    0
.eh_frame:00000000000089A8                 db    0
.eh_frame:00000000000089A9                 db  42h ; B
.eh_frame:00000000000089AA                 db  0Eh
.eh_frame:00000000000089AB                 db  10h
.eh_frame:00000000000089AC                 db  8Ch
.eh_frame:00000000000089AD                 db    2
.eh_frame:00000000000089AE                 db  41h ; A
.eh_frame:00000000000089AF                 db  0Eh
.eh_frame:00000000000089B0                 db  18h
.eh_frame:00000000000089B1                 db  86h
.eh_frame:00000000000089B2                 db    3
.eh_frame:00000000000089B3                 db  44h ; D
.eh_frame:00000000000089B4                 db  0Eh
.eh_frame:00000000000089B5                 db  20h
.eh_frame:00000000000089B6                 db  83h
.eh_frame:00000000000089B7                 db    4
.eh_frame:00000000000089B8                 db  69h ; i
.eh_frame:00000000000089B9                 db  0Ah
.eh_frame:00000000000089BA                 db  0Eh
.eh_frame:00000000000089BB                 db  18h
.eh_frame:00000000000089BC                 db  41h ; A
.eh_frame:00000000000089BD                 db  0Eh
.eh_frame:00000000000089BE                 db  10h
.eh_frame:00000000000089BF                 db  42h ; B
.eh_frame:00000000000089C0                 db  0Eh
.eh_frame:00000000000089C1                 db    8
.eh_frame:00000000000089C2                 db  45h ; E
.eh_frame:00000000000089C3                 db  0Bh
.eh_frame:00000000000089C4                 db  55h ; U
.eh_frame:00000000000089C5                 db  0Ah
.eh_frame:00000000000089C6                 db  0Eh
.eh_frame:00000000000089C7                 db  18h
.eh_frame:00000000000089C8                 db  41h ; A
.eh_frame:00000000000089C9                 db  0Eh
.eh_frame:00000000000089CA                 db  10h
.eh_frame:00000000000089CB                 db  42h ; B
.eh_frame:00000000000089CC                 db  0Eh
.eh_frame:00000000000089CD                 db    8
.eh_frame:00000000000089CE                 db  48h ; H
.eh_frame:00000000000089CF                 db  0Bh
.eh_frame:00000000000089D0                 db  41h ; A
.eh_frame:00000000000089D1                 db  0Ah
.eh_frame:00000000000089D2                 db  0Eh
.eh_frame:00000000000089D3                 db  18h
.eh_frame:00000000000089D4                 db  46h ; F
.eh_frame:00000000000089D5                 db  0Eh
.eh_frame:00000000000089D6                 db  10h
.eh_frame:00000000000089D7                 db  42h ; B
.eh_frame:00000000000089D8                 db  0Eh
.eh_frame:00000000000089D9                 db    8
.eh_frame:00000000000089DA                 db  47h ; G
.eh_frame:00000000000089DB                 db  0Bh
.eh_frame:00000000000089DC                 db  49h ; I
.eh_frame:00000000000089DD                 db  0Eh
.eh_frame:00000000000089DE                 db  18h
.eh_frame:00000000000089DF                 db  41h ; A
.eh_frame:00000000000089E0                 db  0Eh
.eh_frame:00000000000089E1                 db  10h
.eh_frame:00000000000089E2                 db  42h ; B
.eh_frame:00000000000089E3                 db  0Eh
.eh_frame:00000000000089E4                 db    8
.eh_frame:00000000000089E5                 db    0
.eh_frame:00000000000089E6                 db    0
.eh_frame:00000000000089E7                 db    0
.eh_frame:00000000000089E8                 db  1Ch
.eh_frame:00000000000089E9                 db    0
.eh_frame:00000000000089EA                 db    0
.eh_frame:00000000000089EB                 db    0
.eh_frame:00000000000089EC                 db  8Ch
.eh_frame:00000000000089ED                 db  0Ch
.eh_frame:00000000000089EE                 db    0
.eh_frame:00000000000089EF                 db    0
.eh_frame:00000000000089F0                 db 0A0h
.eh_frame:00000000000089F1                 db 0DBh
.eh_frame:00000000000089F2                 db 0FFh
.eh_frame:00000000000089F3                 db 0FFh
.eh_frame:00000000000089F4                 db  60h ; `
.eh_frame:00000000000089F5                 db    0
.eh_frame:00000000000089F6                 db    0
.eh_frame:00000000000089F7                 db    0
.eh_frame:00000000000089F8                 db    0
.eh_frame:00000000000089F9                 db  44h ; D
.eh_frame:00000000000089FA                 db  0Eh
.eh_frame:00000000000089FB                 db  10h
.eh_frame:00000000000089FC                 db  75h ; u
.eh_frame:00000000000089FD                 db  0Ah
.eh_frame:00000000000089FE                 db  0Eh
.eh_frame:00000000000089FF                 db    8
.eh_frame:0000000000008A00                 db  47h ; G
.eh_frame:0000000000008A01                 db  0Bh
.eh_frame:0000000000008A02                 db  5Fh ; _
.eh_frame:0000000000008A03                 db  0Eh
.eh_frame:0000000000008A04                 db    8
.eh_frame:0000000000008A05                 db    0
.eh_frame:0000000000008A06                 db    0
.eh_frame:0000000000008A07                 db    0
.eh_frame:0000000000008A08                 db  1Ch
.eh_frame:0000000000008A09                 db    0
.eh_frame:0000000000008A0A                 db    0
.eh_frame:0000000000008A0B                 db    0
.eh_frame:0000000000008A0C                 db 0ACh
.eh_frame:0000000000008A0D                 db  0Ch
.eh_frame:0000000000008A0E                 db    0
.eh_frame:0000000000008A0F                 db    0
.eh_frame:0000000000008A10                 db 0E0h
.eh_frame:0000000000008A11                 db 0DBh
.eh_frame:0000000000008A12                 db 0FFh
.eh_frame:0000000000008A13                 db 0FFh
.eh_frame:0000000000008A14                 db  3Ch ; <
.eh_frame:0000000000008A15                 db    0
.eh_frame:0000000000008A16                 db    0
.eh_frame:0000000000008A17                 db    0
.eh_frame:0000000000008A18                 db    0
.eh_frame:0000000000008A19                 db  44h ; D
.eh_frame:0000000000008A1A                 db  0Eh
.eh_frame:0000000000008A1B                 db  10h
.eh_frame:0000000000008A1C                 db  61h ; a
.eh_frame:0000000000008A1D                 db  0Ah
.eh_frame:0000000000008A1E                 db  0Eh
.eh_frame:0000000000008A1F                 db    8
.eh_frame:0000000000008A20                 db  4Bh ; K
.eh_frame:0000000000008A21                 db  0Bh
.eh_frame:0000000000008A22                 db  4Bh ; K
.eh_frame:0000000000008A23                 db  0Eh
.eh_frame:0000000000008A24                 db    8
.eh_frame:0000000000008A25                 db    0
.eh_frame:0000000000008A26                 db    0
.eh_frame:0000000000008A27                 db    0
.eh_frame:0000000000008A28                 db  34h ; 4
.eh_frame:0000000000008A29                 db    0
.eh_frame:0000000000008A2A                 db    0
.eh_frame:0000000000008A2B                 db    0
.eh_frame:0000000000008A2C                 db 0CCh
.eh_frame:0000000000008A2D                 db  0Ch
.eh_frame:0000000000008A2E                 db    0
.eh_frame:0000000000008A2F                 db    0
.eh_frame:0000000000008A30                 db    0
.eh_frame:0000000000008A31                 db 0DCh
.eh_frame:0000000000008A32                 db 0FFh
.eh_frame:0000000000008A33                 db 0FFh
.eh_frame:0000000000008A34                 db  7Bh ; {
.eh_frame:0000000000008A35                 db    0
.eh_frame:0000000000008A36                 db    0
.eh_frame:0000000000008A37                 db    0
.eh_frame:0000000000008A38                 db    0
.eh_frame:0000000000008A39                 db  42h ; B
.eh_frame:0000000000008A3A                 db  0Eh
.eh_frame:0000000000008A3B                 db  10h
.eh_frame:0000000000008A3C                 db  8Ch
.eh_frame:0000000000008A3D                 db    2
.eh_frame:0000000000008A3E                 db  41h ; A
.eh_frame:0000000000008A3F                 db  0Eh
.eh_frame:0000000000008A40                 db  18h
.eh_frame:0000000000008A41                 db  86h
.eh_frame:0000000000008A42                 db    3
.eh_frame:0000000000008A43                 db  41h ; A
.eh_frame:0000000000008A44                 db  0Eh
.eh_frame:0000000000008A45                 db  20h
.eh_frame:0000000000008A46                 db  83h
.eh_frame:0000000000008A47                 db    4
.eh_frame:0000000000008A48                 db  7Dh ; }
.eh_frame:0000000000008A49                 db  0Ah
.eh_frame:0000000000008A4A                 db  0Eh
.eh_frame:0000000000008A4B                 db  18h
.eh_frame:0000000000008A4C                 db  41h ; A
.eh_frame:0000000000008A4D                 db  0Eh
.eh_frame:0000000000008A4E                 db  10h
.eh_frame:0000000000008A4F                 db  42h ; B
.eh_frame:0000000000008A50                 db  0Eh
.eh_frame:0000000000008A51                 db    8
.eh_frame:0000000000008A52                 db  44h ; D
.eh_frame:0000000000008A53                 db  0Bh
.eh_frame:0000000000008A54                 db  60h ; `
.eh_frame:0000000000008A55                 db  0Ah
.eh_frame:0000000000008A56                 db  0Eh
.eh_frame:0000000000008A57                 db  18h
.eh_frame:0000000000008A58                 db  41h ; A
.eh_frame:0000000000008A59                 db  0Eh
.eh_frame:0000000000008A5A                 db  10h
.eh_frame:0000000000008A5B                 db  42h ; B
.eh_frame:0000000000008A5C                 db  0Eh
.eh_frame:0000000000008A5D                 db    8
.eh_frame:0000000000008A5E                 db  45h ; E
.eh_frame:0000000000008A5F                 db  0Bh
.eh_frame:0000000000008A60                 db  1Ch
.eh_frame:0000000000008A61                 db    0
.eh_frame:0000000000008A62                 db    0
.eh_frame:0000000000008A63                 db    0
.eh_frame:0000000000008A64                 db    4
.eh_frame:0000000000008A65                 db  0Dh
.eh_frame:0000000000008A66                 db    0
.eh_frame:0000000000008A67                 db    0
.eh_frame:0000000000008A68                 db  48h ; H
.eh_frame:0000000000008A69                 db 0DCh
.eh_frame:0000000000008A6A                 db 0FFh
.eh_frame:0000000000008A6B                 db 0FFh
.eh_frame:0000000000008A6C                 db  40h ; @
.eh_frame:0000000000008A6D                 db    0
.eh_frame:0000000000008A6E                 db    0
.eh_frame:0000000000008A6F                 db    0
.eh_frame:0000000000008A70                 db    0
.eh_frame:0000000000008A71                 db  44h ; D
.eh_frame:0000000000008A72                 db  0Eh
.eh_frame:0000000000008A73                 db  10h
.eh_frame:0000000000008A74                 db  83h
.eh_frame:0000000000008A75                 db    2
.eh_frame:0000000000008A76                 db  5Ah ; Z
.eh_frame:0000000000008A77                 db  0Ah
.eh_frame:0000000000008A78                 db  0Eh
.eh_frame:0000000000008A79                 db    8
.eh_frame:0000000000008A7A                 db  4Ah ; J
.eh_frame:0000000000008A7B                 db  0Bh
.eh_frame:0000000000008A7C                 db  53h ; S
.eh_frame:0000000000008A7D                 db  0Eh
.eh_frame:0000000000008A7E                 db    8
.eh_frame:0000000000008A7F                 db    0
.eh_frame:0000000000008A80                 db  2Ch ; ,
.eh_frame:0000000000008A81                 db    0
.eh_frame:0000000000008A82                 db    0
.eh_frame:0000000000008A83                 db    0
.eh_frame:0000000000008A84                 db  24h ; $
.eh_frame:0000000000008A85                 db  0Dh
.eh_frame:0000000000008A86                 db    0
.eh_frame:0000000000008A87                 db    0
.eh_frame:0000000000008A88                 db  68h ; h
.eh_frame:0000000000008A89                 db 0DCh
.eh_frame:0000000000008A8A                 db 0FFh
.eh_frame:0000000000008A8B                 db 0FFh
.eh_frame:0000000000008A8C                 db  57h ; W
.eh_frame:0000000000008A8D                 db    0
.eh_frame:0000000000008A8E                 db    0
.eh_frame:0000000000008A8F                 db    0
.eh_frame:0000000000008A90                 db    0
.eh_frame:0000000000008A91                 db  63h ; c
.eh_frame:0000000000008A92                 db  0Eh
.eh_frame:0000000000008A93                 db  10h
.eh_frame:0000000000008A94                 db  8Ch
.eh_frame:0000000000008A95                 db    2
.eh_frame:0000000000008A96                 db  41h ; A
.eh_frame:0000000000008A97                 db  0Eh
.eh_frame:0000000000008A98                 db  18h
.eh_frame:0000000000008A99                 db  86h
.eh_frame:0000000000008A9A                 db    3
.eh_frame:0000000000008A9B                 db  44h ; D
.eh_frame:0000000000008A9C                 db  0Eh
.eh_frame:0000000000008A9D                 db  20h
.eh_frame:0000000000008A9E                 db  83h
.eh_frame:0000000000008A9F                 db    4
.eh_frame:0000000000008AA0                 db  6Bh ; k
.eh_frame:0000000000008AA1                 db  0Eh
.eh_frame:0000000000008AA2                 db  18h
.eh_frame:0000000000008AA3                 db  41h ; A
.eh_frame:0000000000008AA4                 db  0Eh
.eh_frame:0000000000008AA5                 db  10h
.eh_frame:0000000000008AA6                 db  42h ; B
.eh_frame:0000000000008AA7                 db  0Eh
.eh_frame:0000000000008AA8                 db    8
.eh_frame:0000000000008AA9                 db    0
.eh_frame:0000000000008AAA                 db    0
.eh_frame:0000000000008AAB                 db    0
.eh_frame:0000000000008AAC                 db    0
.eh_frame:0000000000008AAD                 db    0
.eh_frame:0000000000008AAE                 db    0
.eh_frame:0000000000008AAF                 db    0
.eh_frame:0000000000008AB0                 db  44h ; D
.eh_frame:0000000000008AB1                 db    0
.eh_frame:0000000000008AB2                 db    0
.eh_frame:0000000000008AB3                 db    0
.eh_frame:0000000000008AB4                 db  54h ; T
.eh_frame:0000000000008AB5                 db  0Dh
.eh_frame:0000000000008AB6                 db    0
.eh_frame:0000000000008AB7                 db    0
.eh_frame:0000000000008AB8                 db  98h
.eh_frame:0000000000008AB9                 db 0DCh
.eh_frame:0000000000008ABA                 db 0FFh
.eh_frame:0000000000008ABB                 db 0FFh
.eh_frame:0000000000008ABC                 db  65h ; e
.eh_frame:0000000000008ABD                 db    0
.eh_frame:0000000000008ABE                 db    0
.eh_frame:0000000000008ABF                 db    0
.eh_frame:0000000000008AC0                 db    0
.eh_frame:0000000000008AC1                 db  42h ; B
.eh_frame:0000000000008AC2                 db  0Eh
.eh_frame:0000000000008AC3                 db  10h
.eh_frame:0000000000008AC4                 db  8Fh
.eh_frame:0000000000008AC5                 db    2
.eh_frame:0000000000008AC6                 db  42h ; B
.eh_frame:0000000000008AC7                 db  0Eh
.eh_frame:0000000000008AC8                 db  18h
.eh_frame:0000000000008AC9                 db  8Eh
.eh_frame:0000000000008ACA                 db    3
.eh_frame:0000000000008ACB                 db  45h ; E
.eh_frame:0000000000008ACC                 db  0Eh
.eh_frame:0000000000008ACD                 db  20h
.eh_frame:0000000000008ACE                 db  8Dh
.eh_frame:0000000000008ACF                 db    4
.eh_frame:0000000000008AD0                 db  42h ; B
.eh_frame:0000000000008AD1                 db  0Eh
.eh_frame:0000000000008AD2                 db  28h ; (
.eh_frame:0000000000008AD3                 db  8Ch
.eh_frame:0000000000008AD4                 db    5
.eh_frame:0000000000008AD5                 db  48h ; H
.eh_frame:0000000000008AD6                 db  0Eh
.eh_frame:0000000000008AD7                 db  30h ; 0
.eh_frame:0000000000008AD8                 db  86h
.eh_frame:0000000000008AD9                 db    6
.eh_frame:0000000000008ADA                 db  48h ; H
.eh_frame:0000000000008ADB                 db  0Eh
.eh_frame:0000000000008ADC                 db  38h ; 8
.eh_frame:0000000000008ADD                 db  83h
.eh_frame:0000000000008ADE                 db    7
.eh_frame:0000000000008ADF                 db  4Dh ; M
.eh_frame:0000000000008AE0                 db  0Eh
.eh_frame:0000000000008AE1                 db  40h ; @
.eh_frame:0000000000008AE2                 db  72h ; r
.eh_frame:0000000000008AE3                 db  0Eh
.eh_frame:0000000000008AE4                 db  38h ; 8
.eh_frame:0000000000008AE5                 db  41h ; A
.eh_frame:0000000000008AE6                 db  0Eh
.eh_frame:0000000000008AE7                 db  30h ; 0
.eh_frame:0000000000008AE8                 db  41h ; A
.eh_frame:0000000000008AE9                 db  0Eh
.eh_frame:0000000000008AEA                 db  28h ; (
.eh_frame:0000000000008AEB                 db  42h ; B
.eh_frame:0000000000008AEC                 db  0Eh
.eh_frame:0000000000008AED                 db  20h
.eh_frame:0000000000008AEE                 db  42h ; B
.eh_frame:0000000000008AEF                 db  0Eh
.eh_frame:0000000000008AF0                 db  18h
.eh_frame:0000000000008AF1                 db  42h ; B
.eh_frame:0000000000008AF2                 db  0Eh
.eh_frame:0000000000008AF3                 db  10h
.eh_frame:0000000000008AF4                 db  42h ; B
.eh_frame:0000000000008AF5                 db  0Eh
.eh_frame:0000000000008AF6                 db    8
.eh_frame:0000000000008AF7                 db    0
.eh_frame:0000000000008AF8                 db  14h
.eh_frame:0000000000008AF9                 db    0
.eh_frame:0000000000008AFA                 db    0
.eh_frame:0000000000008AFB                 db    0
.eh_frame:0000000000008AFC                 db  9Ch
.eh_frame:0000000000008AFD                 db  0Dh
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db 0C0h
.eh_frame:0000000000008B01                 db 0DCh
.eh_frame:0000000000008B02                 db 0FFh
.eh_frame:0000000000008B03                 db 0FFh
.eh_frame:0000000000008B04                 db    2
.eh_frame:0000000000008B05                 db    0
.eh_frame:0000000000008B06                 db    0
.eh_frame:0000000000008B07                 db    0
.eh_frame:0000000000008B08                 db    0
.eh_frame:0000000000008B09                 db    0
.eh_frame:0000000000008B0A                 db    0
.eh_frame:0000000000008B0B                 db    0
.eh_frame:0000000000008B0C                 db    0
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db  10h
.eh_frame:0000000000008B11                 db    0
.eh_frame:0000000000008B12                 db    0
.eh_frame:0000000000008B13                 db    0
.eh_frame:0000000000008B14                 db 0B4h
.eh_frame:0000000000008B15                 db  0Dh
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db 0B8h
.eh_frame:0000000000008B19                 db 0DCh
.eh_frame:0000000000008B1A                 db 0FFh
.eh_frame:0000000000008B1B                 db 0FFh
.eh_frame:0000000000008B1C                 db  0Eh
.eh_frame:0000000000008B1D                 db    0
.eh_frame:0000000000008B1E                 db    0
.eh_frame:0000000000008B1F                 db    0
.eh_frame:0000000000008B20                 db    0
.eh_frame:0000000000008B21                 db    0
.eh_frame:0000000000008B22                 db    0
.eh_frame:0000000000008B23                 db    0
.eh_frame:0000000000008B24 __FRAME_END__   db    0
.eh_frame:0000000000008B25                 db    0
.eh_frame:0000000000008B26                 db    0
.eh_frame:0000000000008B27                 db    0
.eh_frame:0000000000008B27 _eh_frame       ends
.eh_frame:0000000000008B27
.init_array:0000000000209A70 ; ELF Initialization Function Table
.init_array:0000000000209A70 ; ===========================================================================
.init_array:0000000000209A70
.init_array:0000000000209A70 ; Segment type: Pure data
.init_array:0000000000209A70 ; Segment permissions: Read/Write
.init_array:0000000000209A70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209A70                 assume cs:_init_array
.init_array:0000000000209A70                 ;org 209A70h
.init_array:0000000000209A70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209A70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209A70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209A70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209A70
.fini_array:0000000000209A78 ; ELF Termination Function Table
.fini_array:0000000000209A78 ; ===========================================================================
.fini_array:0000000000209A78
.fini_array:0000000000209A78 ; Segment type: Pure data
.fini_array:0000000000209A78 ; Segment permissions: Read/Write
.fini_array:0000000000209A78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209A78                 assume cs:_fini_array
.fini_array:0000000000209A78                 ;org 209A78h
.fini_array:0000000000209A78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209A78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209A78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209A78
.data.rel.ro:0000000000209A80 ; ===========================================================================
.data.rel.ro:0000000000209A80
.data.rel.ro:0000000000209A80 ; Segment type: Pure data
.data.rel.ro:0000000000209A80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209A80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209A80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209A80                 ;org 209A80h
.data.rel.ro:0000000000209A80 default_file_list_7140 dq offset aLt+2  ; DATA XREF: main+7F3↑o
.data.rel.ro:0000000000209A80                                         ; "-"
.data.rel.ro:0000000000209A88                 align 20h
.data.rel.ro:0000000000209AA0 ; struct option long_options
.data.rel.ro:0000000000209AA0 long_options    dq offset aInvalidNumberO+12h; name
.data.rel.ro:0000000000209AA0                                         ; DATA XREF: main:loc_18E8↑o
.data.rel.ro:0000000000209AA0                 dd 1                    ; has_arg ; "bytes"
.data.rel.ro:0000000000209AA0                 db 4 dup(0)
.data.rel.ro:0000000000209AA0                 dq 0                    ; flag
.data.rel.ro:0000000000209AA0                 dd 63h                  ; val
.data.rel.ro:0000000000209AA0                 db 4 dup(0)
.data.rel.ro:0000000000209AC0                 dq offset aInvalidNumberO_0+12h ; "lines"
.data.rel.ro:0000000000209AC8                 db    1
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  6Eh ; n
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aPresumeInputPi ; "-presume-input-pipe"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  80h
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aQuiet        ; "quiet"
.data.rel.ro:0000000000209B08                 db    0
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  71h ; q
.data.rel.ro:0000000000209B19                 db    0
.data.rel.ro:0000000000209B1A                 db    0
.data.rel.ro:0000000000209B1B                 db    0
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aSilent       ; "silent"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  71h ; q
.data.rel.ro:0000000000209B39                 db    0
.data.rel.ro:0000000000209B3A                 db    0
.data.rel.ro:0000000000209B3B                 db    0
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aVerbose      ; "verbose"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  76h ; v
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db  7Ah ; z
.data.rel.ro:0000000000209B79                 db    0
.data.rel.ro:0000000000209B7A                 db    0
.data.rel.ro:0000000000209B7B                 db    0
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B88                 db    0
.data.rel.ro:0000000000209B89                 db    0
.data.rel.ro:0000000000209B8A                 db    0
.data.rel.ro:0000000000209B8B                 db    0
.data.rel.ro:0000000000209B8C                 db    0
.data.rel.ro:0000000000209B8D                 db    0
.data.rel.ro:0000000000209B8E                 db    0
.data.rel.ro:0000000000209B8F                 db    0
.data.rel.ro:0000000000209B90                 db    0
.data.rel.ro:0000000000209B91                 db    0
.data.rel.ro:0000000000209B92                 db    0
.data.rel.ro:0000000000209B93                 db    0
.data.rel.ro:0000000000209B94                 db    0
.data.rel.ro:0000000000209B95                 db    0
.data.rel.ro:0000000000209B96                 db    0
.data.rel.ro:0000000000209B97                 db    0
.data.rel.ro:0000000000209B98                 db  7Eh ; ~
.data.rel.ro:0000000000209B99                 db 0FFh
.data.rel.ro:0000000000209B9A                 db 0FFh
.data.rel.ro:0000000000209B9B                 db 0FFh
.data.rel.ro:0000000000209B9C                 db    0
.data.rel.ro:0000000000209B9D                 db    0
.data.rel.ro:0000000000209B9E                 db    0
.data.rel.ro:0000000000209B9F                 db    0
.data.rel.ro:0000000000209BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209BA8                 db    0
.data.rel.ro:0000000000209BA9                 db    0
.data.rel.ro:0000000000209BAA                 db    0
.data.rel.ro:0000000000209BAB                 db    0
.data.rel.ro:0000000000209BAC                 db    0
.data.rel.ro:0000000000209BAD                 db    0
.data.rel.ro:0000000000209BAE                 db    0
.data.rel.ro:0000000000209BAF                 db    0
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB8                 db  7Dh ; }
.data.rel.ro:0000000000209BB9                 db 0FFh
.data.rel.ro:0000000000209BBA                 db 0FFh
.data.rel.ro:0000000000209BBB                 db 0FFh
.data.rel.ro:0000000000209BBC                 db    0
.data.rel.ro:0000000000209BBD                 db    0
.data.rel.ro:0000000000209BBE                 db    0
.data.rel.ro:0000000000209BBF                 db    0
.data.rel.ro:0000000000209BC0                 db    0
.data.rel.ro:0000000000209BC1                 db    0
.data.rel.ro:0000000000209BC2                 db    0
.data.rel.ro:0000000000209BC3                 db    0
.data.rel.ro:0000000000209BC4                 db    0
.data.rel.ro:0000000000209BC5                 db    0
.data.rel.ro:0000000000209BC6                 db    0
.data.rel.ro:0000000000209BC7                 db    0
.data.rel.ro:0000000000209BC8                 db    0
.data.rel.ro:0000000000209BC9                 db    0
.data.rel.ro:0000000000209BCA                 db    0
.data.rel.ro:0000000000209BCB                 db    0
.data.rel.ro:0000000000209BCC                 db    0
.data.rel.ro:0000000000209BCD                 db    0
.data.rel.ro:0000000000209BCE                 db    0
.data.rel.ro:0000000000209BCF                 db    0
.data.rel.ro:0000000000209BD0                 db    0
.data.rel.ro:0000000000209BD1                 db    0
.data.rel.ro:0000000000209BD2                 db    0
.data.rel.ro:0000000000209BD3                 db    0
.data.rel.ro:0000000000209BD4                 db    0
.data.rel.ro:0000000000209BD5                 db    0
.data.rel.ro:0000000000209BD6                 db    0
.data.rel.ro:0000000000209BD7                 db    0
.data.rel.ro:0000000000209BD8                 db    0
.data.rel.ro:0000000000209BD9                 db    0
.data.rel.ro:0000000000209BDA                 db    0
.data.rel.ro:0000000000209BDB                 db    0
.data.rel.ro:0000000000209BDC                 db    0
.data.rel.ro:0000000000209BDD                 db    0
.data.rel.ro:0000000000209BDE                 db    0
.data.rel.ro:0000000000209BDF                 db    0
.data.rel.ro:0000000000209BE0                 public quoting_style_args
.data.rel.ro:0000000000209BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209C08                 dq offset aInvalidTrailin+1Ch ; "c"
.data.rel.ro:0000000000209C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C30                 db    0
.data.rel.ro:0000000000209C31                 db    0
.data.rel.ro:0000000000209C32                 db    0
.data.rel.ro:0000000000209C33                 db    0
.data.rel.ro:0000000000209C34                 db    0
.data.rel.ro:0000000000209C35                 db    0
.data.rel.ro:0000000000209C36                 db    0
.data.rel.ro:0000000000209C37                 db    0
.data.rel.ro:0000000000209C37 _data_rel_ro    ends
.data.rel.ro:0000000000209C37
LOAD:0000000000209C38 ; ELF Dynamic Information
LOAD:0000000000209C38 ; ===========================================================================
LOAD:0000000000209C38
LOAD:0000000000209C38 ; Segment type: Pure data
LOAD:0000000000209C38 ; Segment permissions: Read/Write
LOAD:0000000000209C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C38                 assume cs:LOAD
LOAD:0000000000209C38                 ;org 209C38h
LOAD:0000000000209C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C48                 Elf64_Dyn <0Ch, 14D8h>  ; DT_INIT
LOAD:0000000000209C58                 Elf64_Dyn <0Dh, 67E0h>  ; DT_FINI
LOAD:0000000000209C68                 Elf64_Dyn <19h, 209A70h> ; DT_INIT_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <1Ah, 209A78h> ; DT_FINI_ARRAY
LOAD:0000000000209C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209CB8                 Elf64_Dyn <5, 8E0h>     ; DT_STRTAB
LOAD:0000000000209CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000209CD8                 Elf64_Dyn <0Ah, 2EBh>   ; DT_STRSZ
LOAD:0000000000209CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209D08                 Elf64_Dyn <3, 209E28h>  ; DT_PLTGOT
LOAD:0000000000209D18                 Elf64_Dyn <2, 4B0h>     ; DT_PLTRELSZ
LOAD:0000000000209D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D38                 Elf64_Dyn <17h, 1028h>  ; DT_JMPREL
LOAD:0000000000209D48                 Elf64_Dyn <7, 0CB0h>    ; DT_RELA
LOAD:0000000000209D58                 Elf64_Dyn <8, 378h>     ; DT_RELASZ
LOAD:0000000000209D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFFEh, 0C50h> ; DT_VERNEED
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209DB8                 Elf64_Dyn <6FFFFFF0h, 0BCCh> ; DT_VERSYM
LOAD:0000000000209DC8                 Elf64_Dyn <6FFFFFF9h, 1Ah> ; DT_RELACOUNT
LOAD:0000000000209DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E08                 db    0
LOAD:0000000000209E09                 db    0
LOAD:0000000000209E0A                 db    0
LOAD:0000000000209E0B                 db    0
LOAD:0000000000209E0C                 db    0
LOAD:0000000000209E0D                 db    0
LOAD:0000000000209E0E                 db    0
LOAD:0000000000209E0F                 db    0
LOAD:0000000000209E10                 db    0
LOAD:0000000000209E11                 db    0
LOAD:0000000000209E12                 db    0
LOAD:0000000000209E13                 db    0
LOAD:0000000000209E14                 db    0
LOAD:0000000000209E15                 db    0
LOAD:0000000000209E16                 db    0
LOAD:0000000000209E17                 db    0
LOAD:0000000000209E18                 db    0
LOAD:0000000000209E19                 db    0
LOAD:0000000000209E1A                 db    0
LOAD:0000000000209E1B                 db    0
LOAD:0000000000209E1C                 db    0
LOAD:0000000000209E1D                 db    0
LOAD:0000000000209E1E                 db    0
LOAD:0000000000209E1F                 db    0
LOAD:0000000000209E20                 db    0
LOAD:0000000000209E21                 db    0
LOAD:0000000000209E22                 db    0
LOAD:0000000000209E23                 db    0
LOAD:0000000000209E24                 db    0
LOAD:0000000000209E25                 db    0
LOAD:0000000000209E26                 db    0
LOAD:0000000000209E27                 db    0
LOAD:0000000000209E27 LOAD            ends
LOAD:0000000000209E27
.got:0000000000209E28 ; ===========================================================================
.got:0000000000209E28
.got:0000000000209E28 ; Segment type: Pure data
.got:0000000000209E28 ; Segment permissions: Read/Write
.got:0000000000209E28 _got            segment qword public 'DATA' use64
.got:0000000000209E28                 assume cs:_got
.got:0000000000209E28                 ;org 209E28h
.got:0000000000209E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E30 qword_209E30    dq 0                    ; DATA XREF: sub_14F0↑r
.got:0000000000209E38 qword_209E38    dq 0                    ; DATA XREF: sub_14F0+6↑r
.got:0000000000209E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E50 __errno_location_ptr dq offset __errno_location
.got:0000000000209E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E70 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000209E70                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000209E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209EB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EC0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000209EC8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209ED0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209ED8 __assert_fail_ptr dq offset __assert_fail
.got:0000000000209ED8                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000209EE0 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000209EE0                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000209EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EF0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209EF8 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000209F00 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000209F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F48 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000209F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000209F58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000209F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F80 memrchr_ptr     dq offset memrchr       ; DATA XREF: _memrchr↑r
.got:0000000000209F88 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000209F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FD8                                         ; DATA XREF: start+24↑r
.got:0000000000209FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FF0 _got            ends
.got:0000000000209FF0
LOAD:0000000000209FF8 ; ===========================================================================
LOAD:0000000000209FF8
LOAD:0000000000209FF8 ; Segment type: Pure data
LOAD:0000000000209FF8 ; Segment permissions: Read/Write
LOAD:0000000000209FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FF8                 assume cs:LOAD
LOAD:0000000000209FF8                 ;org 209FF8h
LOAD:0000000000209FF8                 align 20h
LOAD:0000000000209FF8 LOAD            ends
LOAD:0000000000209FF8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010 first_file_6927 db 1                    ; DATA XREF: main+3BD↑r
.data:000000000020A010                                         ; main+3EC↑w
.data:000000000020A011                 align 8
.data:000000000020A018                 public Version
.data:000000000020A018 Version         dq offset a831          ; DATA XREF: main+15B↑r
.data:000000000020A018                                         ; "8.31"
.data:000000000020A020                 public exit_failure
.data:000000000020A020 ; int exit_failure
.data:000000000020A020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3752↑r
.data:000000000020A020                                         ; xalloc_die+17↑r
.data:000000000020A024                 align 20h
.data:000000000020A040                 public quote_quoting_options
.data:000000000020A040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A040                                         ; quote_mem↑o ...
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058                 db    0
.data:000000000020A059                 db    0
.data:000000000020A05A                 db    0
.data:000000000020A05B                 db    0
.data:000000000020A05C                 db    0
.data:000000000020A05D                 db    0
.data:000000000020A05E                 db    0
.data:000000000020A05F                 db    0
.data:000000000020A060                 db    0
.data:000000000020A061                 db    0
.data:000000000020A062                 db    0
.data:000000000020A063                 db    0
.data:000000000020A064                 db    0
.data:000000000020A065                 db    0
.data:000000000020A066                 db    0
.data:000000000020A067                 db    0
.data:000000000020A068                 db    0
.data:000000000020A069                 db    0
.data:000000000020A06A                 db    0
.data:000000000020A06B                 db    0
.data:000000000020A06C                 db    0
.data:000000000020A06D                 db    0
.data:000000000020A06E                 db    0
.data:000000000020A06F                 db    0
.data:000000000020A070                 db    0
.data:000000000020A071                 db    0
.data:000000000020A072                 db    0
.data:000000000020A073                 db    0
.data:000000000020A074                 db    0
.data:000000000020A075                 db    0
.data:000000000020A076                 db    0
.data:000000000020A077                 db    0
.data:000000000020A078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A078                                         ; quotearg_n_options:loc_4D3D↑r ...
.data:000000000020A07C                 align 20h
.data:000000000020A080 ; void *slotvec
.data:000000000020A080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A080                                         ; quotearg_n_options+76↑w ...
.data:000000000020A088                 align 10h
.data:000000000020A090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A090                                         ; quotearg_n_options+187↑r ...
.data:000000000020A098 off_20A098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A098 _data           ends
.data:000000000020A098
.bss:000000000020A0A0 ; ===========================================================================
.bss:000000000020A0A0
.bss:000000000020A0A0 ; Segment type: Uninitialized
.bss:000000000020A0A0 ; Segment permissions: Read/Write
.bss:000000000020A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A0A0                 assume cs:_bss
.bss:000000000020A0A0                 ;org 20A0A0h
.bss:000000000020A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A0A0                 public __bss_start ; weak
.bss:000000000020A0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000838↑o
.bss:000000000020A0A0                                         ; LOAD:0000000000000880↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A0A0                                         ; _edata
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020A0A8 ; FILE *stdout
.bss:000000000020A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:000000000020A0A8                                         ; main+154↑r ...
.bss:000000000020A0A8                                         ; Alternative name is 'stdout'
.bss:000000000020A0A8                                         ; Copy of shared data
.bss:000000000020A0B0                 public optind@@GLIBC_2_2_5
.bss:000000000020A0B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:000000000020A0B0                                         ; main+2C6↑r ...
.bss:000000000020A0B0                                         ; Alternative name is 'optind'
.bss:000000000020A0B0                                         ; Copy of shared data
.bss:000000000020A0B4                 align 8
.bss:000000000020A0B8                 public optarg@@GLIBC_2_2_5
.bss:000000000020A0B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:000000000020A0B8                                         ; main:loc_19C0↑r ...
.bss:000000000020A0B8                                         ; Alternative name is 'optarg'
.bss:000000000020A0B8                                         ; Copy of shared data
.bss:000000000020A0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0C0                                         ; DATA XREF: LOAD:0000000000000850↑o
.bss:000000000020A0C0                                         ; LOAD:0000000000000868↑o ...
.bss:000000000020A0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8                 align 20h
.bss:000000000020A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0E0 ; FILE *stderr
.bss:000000000020A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:000000000020A0E0                                         ; usage+3D↑r ...
.bss:000000000020A0E0                                         ; Alternative name is 'stderr'
.bss:000000000020A0E0                                         ; Copy of shared data
.bss:000000000020A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0E9 have_read_stdin db ?                    ; DATA XREF: main+70↑w
.bss:000000000020A0E9                                         ; main+39D↑w ...
.bss:000000000020A0EA line_end        db ?                    ; DATA XREF: main+7E↑w
.bss:000000000020A0EA                                         ; main:loc_1A40↑w ...
.bss:000000000020A0EB print_headers   db ?                    ; DATA XREF: main+77↑w
.bss:000000000020A0EB                                         ; main:loc_1AFE↑w ...
.bss:000000000020A0EC presume_input_pipe db ?                 ; DATA XREF: main+10A↑w
.bss:000000000020A0EC                                         ; main+59E↑r ...
.bss:000000000020A0ED                 align 10h
.bss:000000000020A0F0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A0F0                                         ; close_stdout+1B↑r
.bss:000000000020A0F1                 align 8
.bss:000000000020A0F8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A0F8                                         ; close_stdout+56↑r
.bss:000000000020A100                 public program_name
.bss:000000000020A100 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A100                                         ; set_program_name:loc_395D↑w
.bss:000000000020A108                 align 20h
.bss:000000000020A120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A120                                         ; quotearg_free+46↑o ...
.bss:000000000020A121                 db    ? ;
.bss:000000000020A122                 db    ? ;
.bss:000000000020A123                 db    ? ;
.bss:000000000020A124                 db    ? ;
.bss:000000000020A125                 db    ? ;
.bss:000000000020A126                 db    ? ;
.bss:000000000020A127                 db    ? ;
.bss:000000000020A128                 db    ? ;
.bss:000000000020A129                 db    ? ;
.bss:000000000020A12A                 db    ? ;
.bss:000000000020A12B                 db    ? ;
.bss:000000000020A12C                 db    ? ;
.bss:000000000020A12D                 db    ? ;
.bss:000000000020A12E                 db    ? ;
.bss:000000000020A12F                 db    ? ;
.bss:000000000020A130                 db    ? ;
.bss:000000000020A131                 db    ? ;
.bss:000000000020A132                 db    ? ;
.bss:000000000020A133                 db    ? ;
.bss:000000000020A134                 db    ? ;
.bss:000000000020A135                 db    ? ;
.bss:000000000020A136                 db    ? ;
.bss:000000000020A137                 db    ? ;
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200                 db    ? ;
.bss:000000000020A201                 db    ? ;
.bss:000000000020A202                 db    ? ;
.bss:000000000020A203                 db    ? ;
.bss:000000000020A204                 db    ? ;
.bss:000000000020A205                 db    ? ;
.bss:000000000020A206                 db    ? ;
.bss:000000000020A207                 db    ? ;
.bss:000000000020A208                 db    ? ;
.bss:000000000020A209                 db    ? ;
.bss:000000000020A20A                 db    ? ;
.bss:000000000020A20B                 db    ? ;
.bss:000000000020A20C                 db    ? ;
.bss:000000000020A20D                 db    ? ;
.bss:000000000020A20E                 db    ? ;
.bss:000000000020A20F                 db    ? ;
.bss:000000000020A210                 db    ? ;
.bss:000000000020A211                 db    ? ;
.bss:000000000020A212                 db    ? ;
.bss:000000000020A213                 db    ? ;
.bss:000000000020A214                 db    ? ;
.bss:000000000020A215                 db    ? ;
.bss:000000000020A216                 db    ? ;
.bss:000000000020A217                 db    ? ;
.bss:000000000020A218                 db    ? ;
.bss:000000000020A219                 db    ? ;
.bss:000000000020A21A                 db    ? ;
.bss:000000000020A21B                 db    ? ;
.bss:000000000020A21C                 db    ? ;
.bss:000000000020A21D                 db    ? ;
.bss:000000000020A21E                 db    ? ;
.bss:000000000020A21F                 db    ? ;
.bss:000000000020A220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A220                                         ; get_quoting_style↑o ...
.bss:000000000020A230 xmmword_20A230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A240 xmmword_20A240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A250 qword_20A250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A250 _bss            ends
.bss:000000000020A250
.prgend:000000000020A258 ; ===========================================================================
.prgend:000000000020A258
.prgend:000000000020A258 ; Segment type: Zero-length
.prgend:000000000020A258 _prgend         segment byte public '' use64
.prgend:000000000020A258 _end            label byte
.prgend:000000000020A258 _prgend         ends
.prgend:000000000020A258
extern:000000000020A260 ; ===========================================================================
extern:000000000020A260
extern:000000000020A260 ; Segment type: Externs
extern:000000000020A260 ; extern
extern:000000000020A260 ; void free(void *ptr)
extern:000000000020A260                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A260                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A268 ; void __noreturn abort(void)
extern:000000000020A268                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A268                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A270 ; int *_errno_location(void)
extern:000000000020A270                 extrn __errno_location:near
extern:000000000020A270                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A270                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A278 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A278                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A278                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A280 ; void __noreturn exit(int status)
extern:000000000020A280                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A280                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A288 ; size_t _fpending(FILE *fp)
extern:000000000020A288                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A288                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A290 ; void clearerr_unlocked(FILE *stream)
extern:000000000020A290                 extrn clearerr_unlocked:near
extern:000000000020A290                                         ; CODE XREF: _clearerr_unlocked↑j
extern:000000000020A290                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:000000000020A298 ; char *textdomain(const char *domainname)
extern:000000000020A298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2A0 ; int fclose(FILE *stream)
extern:000000000020A2A0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2A8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2A8                 extrn bindtextdomain:near
extern:000000000020A2A8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A2B0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A2B0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A2B8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A2B8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A2B8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A2C0 ; size_t strlen(const char *s)
extern:000000000020A2C0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A2C8                 extrn __stack_chk_fail:near
extern:000000000020A2C8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A2D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A2D0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A2D8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A2D8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A2E0 ; char *strchr(const char *s, int c)
extern:000000000020A2E0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020A2E8 ; char *strrchr(const char *s, int c)
extern:000000000020A2E8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A2F0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A2F0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A2F8 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020A2F8                 extrn __assert_fail:near
extern:000000000020A2F8                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020A300 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020A300                 extrn __strtoul_internal:near
extern:000000000020A300                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020A300                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020A308 ; void *memset(void *s, int c, size_t n)
extern:000000000020A308                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A308                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A310 ; int close(int fd)
extern:000000000020A310                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A310                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A318 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020A318                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020A318                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020A320 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000020A320                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000020A320                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000020A328 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A328                 extrn __libc_start_main:near
extern:000000000020A328                                         ; CODE XREF: start+24↑p
extern:000000000020A328                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A330 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A330                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A330                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A338 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A338                 extrn fputs_unlocked:near
extern:000000000020A338                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A338                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A340 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A340                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A340                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A348 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A348                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A348                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A350 ; int fileno(FILE *stream)
extern:000000000020A350                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A350                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A358 ; void *malloc(size_t size)
extern:000000000020A358                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A358                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A360 ; int fflush(FILE *stream)
extern:000000000020A360                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A360                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A368 ; char *nl_langinfo(nl_item item)
extern:000000000020A368                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A368                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A370 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020A370                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020A370                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020A378 ; int _freading(FILE *fp)
extern:000000000020A378                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A378                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A380 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A380                 extrn fwrite_unlocked:near
extern:000000000020A380                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020A380                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020A388 ; void *realloc(void *ptr, size_t size)
extern:000000000020A388                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A388                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A390 ; char *setlocale(int category, const char *locale)
extern:000000000020A390                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A390                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A398                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A398                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A3A0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A3A0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A3A8 ; void *memrchr(const void *s, int c, size_t n)
extern:000000000020A3A8                 extrn memrchr:near      ; CODE XREF: _memrchr↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:memrchr_ptr↑o
extern:000000000020A3B0 ; int open(const char *file, int oflag, ...)
extern:000000000020A3B0                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020A3B8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A3B8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A3C0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A3C0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A3C8 ; void __noreturn exit(int status)
extern:000000000020A3C8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A3D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A3D0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A3D8                 extrn __fprintf_chk:near
extern:000000000020A3D8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A3E0 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A3E0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A3E8 ; int iswprint(wint_t wc)
extern:000000000020A3E8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A3F0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A3F0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A3F0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A3F8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A3F8                 extrn __ctype_b_loc:near
extern:000000000020A3F8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A400                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A400                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A408                 extrn __gmon_start__:near ; weak
extern:000000000020A408                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A408                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A410                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A410                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A410
extern:000000000020A410
extern:000000000020A410                 end start
