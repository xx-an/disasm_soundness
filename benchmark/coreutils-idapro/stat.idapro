LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : ADB98901EE063FE5962B8B40742A54A1268ED1678A36028A04F4159909705B37
LOAD:0000000000000000 ; Input MD5    : 5CDA7BD2BC06E930821A3D4855C7EDF1
LOAD:0000000000000000 ; Input CRC32  : EB20110F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/stat
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'stat.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'find-mount-point.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-type.c'
LOAD:0000000000000000 ; Source File : 'filemode.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'nstrftime.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'save-cwd.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'xasprintf.c'
LOAD:0000000000000000 ; Source File : 'chdir-long.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'mountlist.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'xvasprintf.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 5B3A8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 11D30h               ; Size in file image
LOAD:00000000000000D8                 dq 11D30h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 129B0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2129B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6F0h                 ; Size in file image
LOAD:0000000000000110                 dq 950h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 12B18h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 212B18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 101FCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 101FCh               ; Physical address
LOAD:00000000000001B0                 dq 434h                 ; Size in file image
LOAD:00000000000001B8                 dq 434h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 129B0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2129B0h              ; Physical address
LOAD:0000000000000220                 dq 650h                 ; Size in file image
LOAD:0000000000000228                 dq 650h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0E8h, 0B2h, 7Fh, 0Ah, 0E0h, 0B5h, 0ABh, 22h, 53h, 0B0h ; Desc
LOAD:0000000000000284                 db 0D2h, 31h, 4, 7Ch, 40h, 72h, 85h, 0B8h, 8, 0DFh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 5Bh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 5Bh, 5Ch, 61h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_C28, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_C28, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSnprintfChk - offset byte_C28, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_C28, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aEndmntent - offset byte_C28, 12h, 0, 0, \ ; "endmntent"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aAbort - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aErrnoLocation - offset byte_C28, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrncmp - offset byte_C28, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aItmDeregistert - offset byte_C28, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aLocaltimeR - offset byte_C28, 12h, 0, 0, \ ; "localtime_r"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aExit - offset byte_C28, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aStrcpy - offset byte_C28, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFpending - offset byte_C28, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aLocaleconv - offset byte_C28, 12h, 0, 0, \ ; "localeconv"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aReadlink - offset byte_C28, 12h, 0, 0, \ ; "readlink"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFcntl - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000460                            0>
LOAD:0000000000000478                 Elf64_Sym <offset aUnsetenv+2 - offset byte_C28, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_C28, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFclose - offset byte_C28, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aGetpwuid - offset byte_C28, 12h, 0, 0, \ ; "getpwuid"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aBindtextdomain - offset byte_C28, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aDcgettext - offset byte_C28, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_C28, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrlen - offset byte_C28, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLxstat - offset byte_C28, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aOpenat - offset byte_C28, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFchdir+1 - offset byte_C28, 12h, 0, 0, \ ; "chdir"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStackChkFail - offset byte_C28, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGetoptLong - offset byte_C28, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMbrtowc - offset byte_C28, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrchr - offset byte_C28, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGetgrgid - offset byte_C28, 12h, 0, 0, \ ; "getgrgid"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aOverflow - offset byte_C28, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStrrchr - offset byte_C28, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aGmtimeR - offset byte_C28, 12h, 0, 0, \ ; "gmtime_r"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aLseek - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000640                            0>
LOAD:0000000000000658                 Elf64_Sym <offset aAssertFail - offset byte_C28, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMemset - offset byte_C28, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aGetcwd - offset byte_C28, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aCanonicalizeFi - offset byte_C28, 12h, 0, 0, \ ; "canonicalize_file_name"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFclose+1 - offset byte_C28, 12h, 0, 0, \ ; "close"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrspn - offset byte_C28, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemchr - offset byte_C28, 12h, 0, 0, \ ; "memchr"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aLibcStartMain - offset byte_C28, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMemcmp - offset byte_C28, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFputsUnlocked - offset byte_C28, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aCalloc - offset byte_C28, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aGetdelim - offset byte_C28, 12h, 0, 0, \ ; "__getdelim"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aStrcmp - offset byte_C28, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aGmonStart - offset byte_C28, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aStrtol - offset byte_C28, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMemcpy - offset byte_C28, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aTzset - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:00000000000007D8                            0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFileno - offset byte_C28, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aStatfs - offset byte_C28, 12h, 0, 0, \ ; "statfs"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aXstat - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000820                            0>
LOAD:0000000000000838                 Elf64_Sym <offset aMalloc - offset byte_C28, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFflush - offset byte_C28, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aGetmntent - offset byte_C28, 12h, 0, 0, \ ; "getmntent"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aSetmntent - offset byte_C28, 12h, 0, 0, \ ; "setmntent"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aNlLanginfo - offset byte_C28, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFxstat - offset byte_C28, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aSscanf - offset byte_C28, 12h, 0, 0, \ ; "sscanf"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aMktime - offset byte_C28, 12h, 0, 0, \ ; "mktime"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFreading - offset byte_C28, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFchdir - offset byte_C28, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aRealloc - offset byte_C28, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aSetlocale - offset byte_C28, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aPrintfChk - offset byte_C28, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aTimegm - offset byte_C28, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aStrftime - offset byte_C28, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aError - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000009A0                            0>
LOAD:00000000000009B8                 Elf64_Sym <offset aMemrchr - offset byte_C28, 12h, 0, 0, \ ; "memrchr"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aFopen+1 - offset byte_C28, 12h, 0, 0, \ ; "open"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aFseeko - offset byte_C28, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aFopen - offset byte_C28, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000A00                            0>
LOAD:0000000000000A18                 Elf64_Sym <offset aUnsetenv - offset byte_C28, 12h, 0, 0, \ ; "unsetenv"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aCxaAtexit - offset byte_C28, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aExit+1 - offset byte_C28, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aFwrite - offset byte_C28, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aFprintfChk - offset byte_C28, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aItmRegistertmc - offset byte_C28, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aMbsinit - offset byte_C28, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aIswprint - offset byte_C28, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aHasmntopt - offset byte_C28, 12h, 0, 0, \ ; "hasmntopt"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aCxaFinalize - offset byte_C28, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aStrstr - offset byte_C28, 12h, 0, 0, \ ; "strstr"
LOAD:0000000000000B08                            offset dword_0, 0>
LOAD:0000000000000B20                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_C28, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000B20                            offset dword_0, 0>
LOAD:0000000000000B38                 Elf64_Sym <offset aCtypeBLoc - offset byte_C28, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000B38                            offset dword_0, 0>
LOAD:0000000000000B50                 Elf64_Sym <offset aSprintfChk - offset byte_C28, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000B50                            offset dword_0, 0>
LOAD:0000000000000B68                 Elf64_Sym <offset aStdout - offset byte_C28, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000B68                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000B80                 Elf64_Sym <offset aProgname - offset byte_C28, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000B80                            offset __bss_start, 8>
LOAD:0000000000000B98                 Elf64_Sym <offset aProgramInvocat - offset byte_C28, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000B98                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000BB0                 Elf64_Sym <offset aPrognameFull - offset byte_C28, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000BB0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000BC8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_C28, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000BC8                            offset __bss_start, 8>
LOAD:0000000000000BE0                 Elf64_Sym <offset aStderr - offset byte_C28, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000BE0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000BF8                 Elf64_Sym <offset aOptind - offset byte_C28, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000BF8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000C10                 Elf64_Sym <offset aOptarg - offset byte_C28, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000C10                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000C28 ; ELF String Table
LOAD:0000000000000C28 byte_C28        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000C28                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000C29 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001100↓o
LOAD:0000000000000C33 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000C3A aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000C41 aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C4A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C57 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C61 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C69 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000C69                                         ; LOAD:00000000000009D0↑o
LOAD:0000000000000C6F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C77 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000BF8↑o
LOAD:0000000000000C7E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C86 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C90 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000C99 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C99                                         ; LOAD:0000000000000568↑o
LOAD:0000000000000CA0 aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000CA9 aError          db 'error',0            ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000CAF aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000CC0 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000CC9 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000CD2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000CDA aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000CE0 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000CE0                                         ; LOAD:0000000000000A48↑o
LOAD:0000000000000CE6 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000CED aMemrchr        db 'memrchr',0          ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000CF5 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000CFC aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000CFC                                         ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:0000000000000D14 aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000D1D aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000D2B aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000D37 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000D37                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000D4E aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000D55 aSetmntent      db 'setmntent',0        ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000D5F aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000D66 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000D6D aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000D74 aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000D7F aStrstr         db 'strstr',0           ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000D86 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000D97 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000D9E aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000D9E                                         ; LOAD:0000000000000478↑o
LOAD:0000000000000DA7 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000DB5 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000000DBC aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000DC2 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000DC9 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000DC9                                         ; LOAD:00000000000006B8↑o
LOAD:0000000000000DD0 aGetmntent      db 'getmntent',0        ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000DDA aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000DE1 aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000DE8 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000DF0 aTzset          db 'tzset',0            ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000DF6 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000E02 aHasmntopt      db 'hasmntopt',0        ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000E0C aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000E1A aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000E21 aSscanf         db 'sscanf',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000E28 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000C10↑o
LOAD:0000000000000E2F aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000E3A aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000BE0↑o
LOAD:0000000000000E41 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000E50 aReadlink       db 'readlink',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000E59 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000E65 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000E6E aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000E75 aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000E7C aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000E87 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000E8E aStatfs         db 'statfs',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000E95 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000EA0 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000EA7 aEndmntent      db 'endmntent',0        ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000EB1 aMktime         db 'mktime',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000EB8 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000EB8                                         ; DATA XREF: LOAD:0000000000000BC8↑o
LOAD:0000000000000ED6 aCanonicalizeFi db 'canonicalize_file_name',0
LOAD:0000000000000ED6                                         ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000EED aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000EED                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000F01 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000F01                                         ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000F15 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000F24 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000F2A aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000F38 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000F3F aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000F47 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000F47                                         ; LOAD:0000000000000490↑o
LOAD:0000000000000F56 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000F5D aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000F5D                                         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000F6F aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000F76 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000F81 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000F90 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000F95 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:0000000000000FA0 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000BB0↑o
LOAD:0000000000000FB0 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000FBD aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001110↓o
LOAD:0000000000000FC8 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001120↓o
LOAD:0000000000000FD2 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001130↓o
LOAD:0000000000000FDE aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001140↓o
LOAD:0000000000000FEA aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001150↓o
LOAD:0000000000000FF4 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000FF4                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000001010 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000790↑o
LOAD:000000000000101F aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:000000000000101F                                         ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000001039                 align 2
LOAD:000000000000103A ; ELF GNU Symbol Version Table
LOAD:000000000000103A                 dw 0
LOAD:000000000000103C                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:000000000000103E                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000001040                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000001042                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000001044                 dw 3                    ; endmntent@@GLIBC_2.2.5
LOAD:0000000000001046                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000001048                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:000000000000104A                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:000000000000104C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:000000000000104E                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:0000000000001050                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000001052                 dw 3                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000001054                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000001056                 dw 3                    ; localeconv@@GLIBC_2.2.5
LOAD:0000000000001058                 dw 3                    ; readlink@@GLIBC_2.2.5
LOAD:000000000000105A                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:000000000000105C                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:000000000000105E                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000001060                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000001062                 dw 3                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000001064                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000001066                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000001068                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:000000000000106A                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:000000000000106C                 dw 3                    ; __lxstat@@GLIBC_2.2.5
LOAD:000000000000106E                 dw 5                    ; openat@@GLIBC_2.4
LOAD:0000000000001070                 dw 3                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000001072                 dw 5                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000001074                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000001076                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000001078                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:000000000000107A                 dw 3                    ; getgrgid@@GLIBC_2.2.5
LOAD:000000000000107C                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:000000000000107E                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000001080                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:0000000000001082                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000001084                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000001086                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000001088                 dw 3                    ; getcwd@@GLIBC_2.2.5
LOAD:000000000000108A                 dw 3                    ; canonicalize_file_name@@GLIBC_2.2.5
LOAD:000000000000108C                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:000000000000108E                 dw 3                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000001090                 dw 3                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000001092                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000001094                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000001096                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001098                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:000000000000109A                 dw 3                    ; __getdelim@@GLIBC_2.2.5
LOAD:000000000000109C                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:000000000000109E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:00000000000010A0                 dw 3                    ; strtol@@GLIBC_2.2.5
LOAD:00000000000010A2                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:00000000000010A4                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:00000000000010A6                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:00000000000010A8                 dw 3                    ; statfs@@GLIBC_2.2.5
LOAD:00000000000010AA                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:00000000000010AC                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:00000000000010AE                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:00000000000010B0                 dw 3                    ; getmntent@@GLIBC_2.2.5
LOAD:00000000000010B2                 dw 3                    ; setmntent@@GLIBC_2.2.5
LOAD:00000000000010B4                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:00000000000010B6                 dw 3                    ; __fxstat@@GLIBC_2.2.5
LOAD:00000000000010B8                 dw 3                    ; sscanf@@GLIBC_2.2.5
LOAD:00000000000010BA                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:00000000000010BC                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:00000000000010BE                 dw 3                    ; fchdir@@GLIBC_2.2.5
LOAD:00000000000010C0                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:00000000000010C2                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:00000000000010C4                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:00000000000010C6                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:00000000000010C8                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:00000000000010CA                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:00000000000010CC                 dw 3                    ; memrchr@@GLIBC_2.2.5
LOAD:00000000000010CE                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:00000000000010D0                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:00000000000010D2                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:00000000000010D4                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:00000000000010D6                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:00000000000010D8                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:00000000000010DA                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:00000000000010DC                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:00000000000010DE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:00000000000010E0                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:00000000000010E2                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:00000000000010E4                 dw 3                    ; hasmntopt@@GLIBC_2.2.5
LOAD:00000000000010E6                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000010E8                 dw 3                    ; strstr@@GLIBC_2.2.5
LOAD:00000000000010EA                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:00000000000010EC                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:00000000000010EE                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:00000000000010F0                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:00000000000010F2                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:00000000000010F4                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:00000000000010F6                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:00000000000010F8                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:00000000000010FA                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:00000000000010FC                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:00000000000010FE                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000001100 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001100                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_C28, 10h, 0> ; "libc.so.6"
LOAD:0000000000001110                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_C28, \ ; "GLIBC_2.14"
LOAD:0000000000001110                                10h>
LOAD:0000000000001120                 Elf64_Vernaux <0D696914h, 0, 5, offset aGlibc24 - offset byte_C28, \ ; "GLIBC_2.4"
LOAD:0000000000001120                                10h>
LOAD:0000000000001130                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_C28, \ ; "GLIBC_2.3.4"
LOAD:0000000000001130                                10h>
LOAD:0000000000001140                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_C28, \ ; "GLIBC_2.2.5"
LOAD:0000000000001140                                10h>
LOAD:0000000000001150                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_C28, 0> ; "GLIBC_2.3"
LOAD:0000000000001160 ; ELF RELA Relocation Table
LOAD:0000000000001160                 Elf64_Rela <2129B0h, 8, 28B0h> ; R_X86_64_RELATIVE +28B0h
LOAD:0000000000001178                 Elf64_Rela <2129B8h, 8, 2870h> ; R_X86_64_RELATIVE +2870h
LOAD:0000000000001190                 Elf64_Rela <2129C0h, 8, 0DF51h> ; R_X86_64_RELATIVE +0DF51h
LOAD:00000000000011A8                 Elf64_Rela <2129E0h, 8, 0DF5Dh> ; R_X86_64_RELATIVE +0DF5Dh
LOAD:00000000000011C0                 Elf64_Rela <212A00h, 8, 0DF69h> ; R_X86_64_RELATIVE +0DF69h
LOAD:00000000000011D8                 Elf64_Rela <212A20h, 8, 0DF70h> ; R_X86_64_RELATIVE +0DF70h
LOAD:00000000000011F0                 Elf64_Rela <212A40h, 8, 0DF77h> ; R_X86_64_RELATIVE +0DF77h
LOAD:0000000000001208                 Elf64_Rela <212A60h, 8, 0DF7Dh> ; R_X86_64_RELATIVE +0DF7Dh
LOAD:0000000000001220                 Elf64_Rela <212A80h, 8, 0DF82h> ; R_X86_64_RELATIVE +0DF82h
LOAD:0000000000001238                 Elf64_Rela <212AC0h, 8, 0F657h> ; R_X86_64_RELATIVE +0F657h
LOAD:0000000000001250                 Elf64_Rela <212AC8h, 8, 0F65Fh> ; R_X86_64_RELATIVE +0F65Fh
LOAD:0000000000001268                 Elf64_Rela <212AD0h, 8, 0F665h> ; R_X86_64_RELATIVE +0F665h
LOAD:0000000000001280                 Elf64_Rela <212AD8h, 8, 0F672h> ; R_X86_64_RELATIVE +0F672h
LOAD:0000000000001298                 Elf64_Rela <212AE0h, 8, 0F67Fh> ; R_X86_64_RELATIVE +0F67Fh
LOAD:00000000000012B0                 Elf64_Rela <212AE8h, 8, 0FF60h> ; R_X86_64_RELATIVE +0FF60h
LOAD:00000000000012C8                 Elf64_Rela <212AF0h, 8, 0F693h> ; R_X86_64_RELATIVE +0F693h
LOAD:00000000000012E0                 Elf64_Rela <212AF8h, 8, 0F678h> ; R_X86_64_RELATIVE +0F678h
LOAD:00000000000012F8                 Elf64_Rela <212B00h, 8, 0DEEAh> ; R_X86_64_RELATIVE +0DEEAh
LOAD:0000000000001310                 Elf64_Rela <212B08h, 8, 0F69Bh> ; R_X86_64_RELATIVE +0F69Bh
LOAD:0000000000001328                 Elf64_Rela <213008h, 8, 213008h> ; R_X86_64_RELATIVE +213008h
LOAD:0000000000001340                 Elf64_Rela <213010h, 8, 0FB81h> ; R_X86_64_RELATIVE +0FB81h
LOAD:0000000000001358                 Elf64_Rela <213018h, 8, 0F30Eh> ; R_X86_64_RELATIVE +0F30Eh
LOAD:0000000000001370                 Elf64_Rela <213020h, 8, 52F0h> ; R_X86_64_RELATIVE +52F0h
LOAD:0000000000001388                 Elf64_Rela <213080h, 8, 213090h> ; R_X86_64_RELATIVE +213090h
LOAD:00000000000013A0                 Elf64_Rela <213098h, 8, 2131C0h> ; R_X86_64_RELATIVE +2131C0h
LOAD:00000000000013B8                 Elf64_Rela <212FC8h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000013D0                 Elf64_Rela <212FD0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000013E8                 Elf64_Rela <212FD8h, 3200000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001400                 Elf64_Rela <212FE0h, 5200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001418                 Elf64_Rela <212FE8h, 5600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001430                 Elf64_Rela <2130A0h, 5C00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001448                 Elf64_Rela <2130A8h, 5B00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001460                 Elf64_Rela <2130B0h, 6100000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001478                 Elf64_Rela <2130B8h, 6200000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001490                 Elf64_Rela <2130C0h, 5E00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000014A8                 Elf64_Rela <2130E0h, 6000000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000014C0 ; ELF JMPREL Relocation Table
LOAD:00000000000014C0                 Elf64_Rela <212D20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000014D8                 Elf64_Rela <212D28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000014F0                 Elf64_Rela <212D30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001508                 Elf64_Rela <212D38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001520                 Elf64_Rela <212D40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT endmntent
LOAD:0000000000001538                 Elf64_Rela <212D48h, 600000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001550                 Elf64_Rela <212D50h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001568                 Elf64_Rela <212D58h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001580                 Elf64_Rela <212D60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:0000000000001598                 Elf64_Rela <212D68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000015B0                 Elf64_Rela <212D70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000015C8                 Elf64_Rela <212D78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000015E0                 Elf64_Rela <212D80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:00000000000015F8                 Elf64_Rela <212D88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001610                 Elf64_Rela <212D90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001628                 Elf64_Rela <212D98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:0000000000001640                 Elf64_Rela <212DA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001658                 Elf64_Rela <212DA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001670                 Elf64_Rela <212DB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:0000000000001688                 Elf64_Rela <212DB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000016A0                 Elf64_Rela <212DC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000016B8                 Elf64_Rela <212DC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000016D0                 Elf64_Rela <212DD0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000016E8                 Elf64_Rela <212DD8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001700                 Elf64_Rela <212DE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001718                 Elf64_Rela <212DE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:0000000000001730                 Elf64_Rela <212DF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001748                 Elf64_Rela <212DF8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001760                 Elf64_Rela <212E00h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001778                 Elf64_Rela <212E08h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001790                 Elf64_Rela <212E10h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:00000000000017A8                 Elf64_Rela <212E18h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000017C0                 Elf64_Rela <212E20h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000017D8                 Elf64_Rela <212E28h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:00000000000017F0                 Elf64_Rela <212E30h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001808                 Elf64_Rela <212E38h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001820                 Elf64_Rela <212E40h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001838                 Elf64_Rela <212E48h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:0000000000001850                 Elf64_Rela <212E50h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT canonicalize_file_name
LOAD:0000000000001868                 Elf64_Rela <212E58h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001880                 Elf64_Rela <212E60h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001898                 Elf64_Rela <212E68h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:00000000000018B0                 Elf64_Rela <212E70h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000018C8                 Elf64_Rela <212E78h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000018E0                 Elf64_Rela <212E80h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000018F8                 Elf64_Rela <212E88h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001910                 Elf64_Rela <212E90h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001928                 Elf64_Rela <212E98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001940                 Elf64_Rela <212EA0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001958                 Elf64_Rela <212EA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000001970                 Elf64_Rela <212EB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001988                 Elf64_Rela <212EB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT statfs
LOAD:00000000000019A0                 Elf64_Rela <212EC0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:00000000000019B8                 Elf64_Rela <212EC8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000019D0                 Elf64_Rela <212ED0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000019E8                 Elf64_Rela <212ED8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT getmntent
LOAD:0000000000001A00                 Elf64_Rela <212EE0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT setmntent
LOAD:0000000000001A18                 Elf64_Rela <212EE8h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001A30                 Elf64_Rela <212EF0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001A48                 Elf64_Rela <212EF8h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT sscanf
LOAD:0000000000001A60                 Elf64_Rela <212F00h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:0000000000001A78                 Elf64_Rela <212F08h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001A90                 Elf64_Rela <212F10h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001AA8                 Elf64_Rela <212F18h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001AC0                 Elf64_Rela <212F20h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001AD8                 Elf64_Rela <212F28h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001AF0                 Elf64_Rela <212F30h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:0000000000001B08                 Elf64_Rela <212F38h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:0000000000001B20                 Elf64_Rela <212F40h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001B38                 Elf64_Rela <212F48h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT memrchr
LOAD:0000000000001B50                 Elf64_Rela <212F50h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001B68                 Elf64_Rela <212F58h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001B80                 Elf64_Rela <212F60h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001B98                 Elf64_Rela <212F68h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:0000000000001BB0                 Elf64_Rela <212F70h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001BC8                 Elf64_Rela <212F78h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001BE0                 Elf64_Rela <212F80h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001BF8                 Elf64_Rela <212F88h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001C10                 Elf64_Rela <212F90h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001C28                 Elf64_Rela <212F98h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001C40                 Elf64_Rela <212FA0h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT hasmntopt
LOAD:0000000000001C58                 Elf64_Rela <212FA8h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT strstr
LOAD:0000000000001C70                 Elf64_Rela <212FB0h, 5800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001C88                 Elf64_Rela <212FB8h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001CA0                 Elf64_Rela <212FC0h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001CA0 LOAD            ends
LOAD:0000000000001CA0
.init:0000000000001CB8 ; ===========================================================================
.init:0000000000001CB8
.init:0000000000001CB8 ; Segment type: Pure code
.init:0000000000001CB8 ; Segment permissions: Read/Execute
.init:0000000000001CB8 _init           segment dword public 'CODE' use64
.init:0000000000001CB8                 assume cs:_init
.init:0000000000001CB8                 ;org 1CB8h
.init:0000000000001CB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001CB8
.init:0000000000001CB8 ; =============== S U B R O U T I N E =======================================
.init:0000000000001CB8
.init:0000000000001CB8
.init:0000000000001CB8                 public _init_proc
.init:0000000000001CB8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001CB8                 sub     rsp, 8          ; _init
.init:0000000000001CBC                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001CC3                 test    rax, rax
.init:0000000000001CC6                 jz      short loc_1CCA
.init:0000000000001CC8                 call    rax ; __gmon_start__
.init:0000000000001CCA
.init:0000000000001CCA loc_1CCA:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001CCA                 add     rsp, 8
.init:0000000000001CCE                 retn
.init:0000000000001CCE _init_proc      endp
.init:0000000000001CCE
.init:0000000000001CCE _init           ends
.init:0000000000001CCE
LOAD:0000000000001CCF ; ===========================================================================
LOAD:0000000000001CCF
LOAD:0000000000001CCF ; Segment type: Pure code
LOAD:0000000000001CCF ; Segment permissions: Read/Execute
LOAD:0000000000001CCF LOAD            segment byte public 'CODE' use64
LOAD:0000000000001CCF                 assume cs:LOAD
LOAD:0000000000001CCF                 ;org 1CCFh
LOAD:0000000000001CCF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001CCF                 align 10h
LOAD:0000000000001CCF LOAD            ends
LOAD:0000000000001CCF
.plt:0000000000001CD0 ; ===========================================================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Segment type: Pure code
.plt:0000000000001CD0 ; Segment permissions: Read/Execute
.plt:0000000000001CD0 _plt            segment para public 'CODE' use64
.plt:0000000000001CD0                 assume cs:_plt
.plt:0000000000001CD0                 ;org 1CD0h
.plt:0000000000001CD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0
.plt:0000000000001CD0 sub_1CD0        proc near               ; CODE XREF: .plt:0000000000001CEB↓j
.plt:0000000000001CD0                                         ; .plt:0000000000001CFB↓j ...
.plt:0000000000001CD0 ; __unwind {
.plt:0000000000001CD0                 push    cs:qword_212D10
.plt:0000000000001CD6                 jmp     cs:qword_212D18
.plt:0000000000001CD6 sub_1CD0        endp
.plt:0000000000001CD6
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CDC                 align 20h
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001CE0 ___ctype_toupper_loc proc near          ; CODE XREF: memcpy_lowcase_0+13↓p
.plt:0000000000001CE0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001CE0 ___ctype_toupper_loc endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    0
.plt:0000000000001CEB                 jmp     sub_1CD0
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; char *getenv(const char *name)
.plt:0000000000001CF0 _getenv         proc near               ; CODE XREF: main+20F↓p
.plt:0000000000001CF0                                         ; human_time+CF↓p ...
.plt:0000000000001CF0                 jmp     cs:getenv_ptr
.plt:0000000000001CF0 _getenv         endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    1
.plt:0000000000001CFB                 jmp     sub_1CD0
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001D00                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001D00                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001D00 ___snprintf_chk endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    2
.plt:0000000000001D0B                 jmp     sub_1CD0
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; void free(void *ptr)
.plt:0000000000001D10 _free           proc near               ; CODE XREF: print_it+117↓p
.plt:0000000000001D10                                         ; default_format+83↓p ...
.plt:0000000000001D10                 jmp     cs:free_ptr
.plt:0000000000001D10 _free           endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    3
.plt:0000000000001D1B                 jmp     sub_1CD0
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int endmntent(FILE *stream)
.plt:0000000000001D20 _endmntent      proc near               ; CODE XREF: read_file_system_list+701↓p
.plt:0000000000001D20                 jmp     cs:endmntent_ptr
.plt:0000000000001D20 _endmntent      endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    4
.plt:0000000000001D2B                 jmp     sub_1CD0
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: noreturn thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; void __noreturn abort(void)
.plt:0000000000001D30 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001D30                                         ; quotearg_buffer_restyled:def_79E1↓p ...
.plt:0000000000001D30                 jmp     cs:abort_ptr
.plt:0000000000001D30 _abort          endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    5
.plt:0000000000001D3B                 jmp     sub_1CD0
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; int *__errno_location(void)
.plt:0000000000001D40 ___errno_location proc near             ; CODE XREF: main+420↓p
.plt:0000000000001D40                                         ; main+462↓p ...
.plt:0000000000001D40                 jmp     cs:__errno_location_ptr
.plt:0000000000001D40 ___errno_location endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    6
.plt:0000000000001D4B                 jmp     sub_1CD0
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001D50 _strncmp        proc near               ; CODE XREF: usage+3CC↓p
.plt:0000000000001D50                                         ; usage+48D↓p ...
.plt:0000000000001D50                 jmp     cs:strncmp_ptr
.plt:0000000000001D50 _strncmp        endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    7
.plt:0000000000001D5B                 jmp     sub_1CD0
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:0000000000001D60 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:0000000000001D60                                         ; mktime_z+AA↓p
.plt:0000000000001D60                 jmp     cs:localtime_r_ptr
.plt:0000000000001D60 _localtime_r    endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    8
.plt:0000000000001D6B                 jmp     sub_1CD0
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: noreturn thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; void __noreturn _exit(int status)
.plt:0000000000001D70 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001D70                 jmp     cs:_exit_ptr
.plt:0000000000001D70 __exit          endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    9
.plt:0000000000001D7B                 jmp     sub_1CD0
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001D80 _strcpy         proc near               ; CODE XREF: make_format+B1↓j
.plt:0000000000001D80                 jmp     cs:strcpy_ptr
.plt:0000000000001D80 _strcpy         endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    0Ah
.plt:0000000000001D8B                 jmp     sub_1CD0
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; size_t __fpending(FILE *fp)
.plt:0000000000001D90 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001D90                 jmp     cs:__fpending_ptr
.plt:0000000000001D90 ___fpending     endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    0Bh
.plt:0000000000001D9B                 jmp     sub_1CD0
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; struct lconv *localeconv(void)
.plt:0000000000001DA0 _localeconv     proc near               ; CODE XREF: main+6E↓p
.plt:0000000000001DA0                 jmp     cs:localeconv_ptr
.plt:0000000000001DA0 _localeconv     endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    0Ch
.plt:0000000000001DAB                 jmp     sub_1CD0
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000001DB0 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000001DB0                 jmp     cs:readlink_ptr
.plt:0000000000001DB0 _readlink       endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    0Dh
.plt:0000000000001DBB                 jmp     sub_1CD0
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001DC0 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001DC0                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001DC0                 jmp     cs:fcntl_ptr
.plt:0000000000001DC0 _fcntl          endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    0Eh
.plt:0000000000001DCB                 jmp     sub_1CD0
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; int setenv(const char *name, const char *value, int replace)
.plt:0000000000001DD0 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:0000000000001DD0                 jmp     cs:setenv_ptr
.plt:0000000000001DD0 _setenv         endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    0Fh
.plt:0000000000001DDB                 jmp     sub_1CD0
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; char *textdomain(const char *domainname)
.plt:0000000000001DE0 _textdomain     proc near               ; CODE XREF: main+69↓p
.plt:0000000000001DE0                 jmp     cs:textdomain_ptr
.plt:0000000000001DE0 _textdomain     endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    10h
.plt:0000000000001DEB                 jmp     sub_1CD0
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; int fclose(FILE *stream)
.plt:0000000000001DF0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001DF0                                         ; rpl_fclose+6B↓j
.plt:0000000000001DF0                 jmp     cs:fclose_ptr
.plt:0000000000001DF0 _fclose         endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    11h
.plt:0000000000001DFB                 jmp     sub_1CD0
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; struct passwd *getpwuid(__uid_t uid)
.plt:0000000000001E00 _getpwuid       proc near               ; CODE XREF: print_stat+304↓p
.plt:0000000000001E00                 jmp     cs:getpwuid_ptr
.plt:0000000000001E00 _getpwuid       endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    12h
.plt:0000000000001E0B                 jmp     sub_1CD0
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001E10 _bindtextdomain proc near               ; CODE XREF: main+5D↓p
.plt:0000000000001E10                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001E10 _bindtextdomain endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    13h
.plt:0000000000001E1B                 jmp     sub_1CD0
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001E20 _dcgettext      proc near               ; CODE XREF: main+386↓p
.plt:0000000000001E20                                         ; main+418↓p ...
.plt:0000000000001E20                 jmp     cs:dcgettext_ptr
.plt:0000000000001E20 _dcgettext      endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    14h
.plt:0000000000001E2B                 jmp     sub_1CD0
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001E30 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001E30                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001E30 ___ctype_get_mb_cur_max endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    15h
.plt:0000000000001E3B                 jmp     sub_1CD0
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; size_t strlen(const char *s)
.plt:0000000000001E40 _strlen         proc near               ; CODE XREF: main+8E↓p
.plt:0000000000001E40                                         ; print_it+24↓p ...
.plt:0000000000001E40                 jmp     cs:strlen_ptr
.plt:0000000000001E40 _strlen         endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    16h
.plt:0000000000001E4B                 jmp     sub_1CD0
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001E50 ___lxstat       proc near               ; CODE XREF: main+3E2↓p
.plt:0000000000001E50                 jmp     cs:__lxstat_ptr
.plt:0000000000001E50 ___lxstat       endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    17h
.plt:0000000000001E5B                 jmp     sub_1CD0
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000001E60 _openat         proc near               ; CODE XREF: cdb_advance_fd+12↓p
.plt:0000000000001E60                 jmp     cs:openat_ptr
.plt:0000000000001E60 _openat         endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    18h
.plt:0000000000001E6B                 jmp     sub_1CD0
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; int chdir(const char *path)
.plt:0000000000001E70 _chdir          proc near               ; CODE XREF: find_mount_point+A0↓p
.plt:0000000000001E70                                         ; find_mount_point+10B↓p ...
.plt:0000000000001E70                 jmp     cs:chdir_ptr
.plt:0000000000001E70 _chdir          endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    19h
.plt:0000000000001E7B                 jmp     sub_1CD0
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: noreturn thunk
.plt:0000000000001E80
.plt:0000000000001E80 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2779↓p
.plt:0000000000001E80                                         ; human_time:loc_3D4B↓p ...
.plt:0000000000001E80                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001E80 ___stack_chk_fail endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    1Ah
.plt:0000000000001E8B                 jmp     sub_1CD0
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001E90 _getopt_long    proc near               ; CODE XREF: main+C2↓p
.plt:0000000000001E90                 jmp     cs:getopt_long_ptr
.plt:0000000000001E90 _getopt_long    endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    1Bh
.plt:0000000000001E9B                 jmp     sub_1CD0
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001EA0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001EA0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001EA0 _mbrtowc        endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    1Ch
.plt:0000000000001EAB                 jmp     sub_1CD0
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; char *strchr(const char *s, int c)
.plt:0000000000001EB0 _strchr         proc near               ; CODE XREF: make_format+37↓p
.plt:0000000000001EB0                                         ; make_format+5F↓p ...
.plt:0000000000001EB0                 jmp     cs:strchr_ptr
.plt:0000000000001EB0 _strchr         endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    1Dh
.plt:0000000000001EBB                 jmp     sub_1CD0
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000001EC0 _getgrgid       proc near               ; CODE XREF: print_stat+3DC↓p
.plt:0000000000001EC0                 jmp     cs:getgrgid_ptr
.plt:0000000000001EC0 _getgrgid       endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    1Eh
.plt:0000000000001ECB                 jmp     sub_1CD0
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001ED0 ___overflow     proc near               ; CODE XREF: print_statfs+565↓p
.plt:0000000000001ED0                                         ; print_it+326↓p ...
.plt:0000000000001ED0                 jmp     cs:__overflow_ptr
.plt:0000000000001ED0 ___overflow     endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    1Fh
.plt:0000000000001EDB                 jmp     sub_1CD0
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; char *strrchr(const char *s, int c)
.plt:0000000000001EE0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001EE0                 jmp     cs:strrchr_ptr
.plt:0000000000001EE0 _strrchr        endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    20h ; ' '
.plt:0000000000001EEB                 jmp     sub_1CD0
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:0000000000001EF0 _gmtime_r       proc near               ; CODE XREF: localtime_rz+90↓j
.plt:0000000000001EF0                 jmp     cs:gmtime_r_ptr
.plt:0000000000001EF0 _gmtime_r       endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    21h ; '!'
.plt:0000000000001EFB                 jmp     sub_1CD0
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001F00 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001F00                                         ; rpl_fseeko+3B↓p
.plt:0000000000001F00                 jmp     cs:lseek_ptr
.plt:0000000000001F00 _lseek          endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    22h ; '"'
.plt:0000000000001F0B                 jmp     sub_1CD0
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: noreturn thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001F10 ___assert_fail  proc near               ; CODE XREF: cdb_free+3C↓p
.plt:0000000000001F10                                         ; chdir_long+24C↓p ...
.plt:0000000000001F10                 jmp     cs:__assert_fail_ptr
.plt:0000000000001F10 ___assert_fail  endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    23h ; '#'
.plt:0000000000001F1B                 jmp     sub_1CD0
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001F20 _memset         proc near               ; CODE XREF: __strftime_internal+11D↓p
.plt:0000000000001F20                                         ; __strftime_internal+2E1↓p ...
.plt:0000000000001F20                 jmp     cs:memset_ptr
.plt:0000000000001F20 _memset         endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    24h ; '$'
.plt:0000000000001F2B                 jmp     sub_1CD0
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; char *getcwd(char *buf, size_t size)
.plt:0000000000001F30 _getcwd         proc near               ; CODE XREF: save_cwd+34↓p
.plt:0000000000001F30                                         ; xgetcwd+5↓p
.plt:0000000000001F30                 jmp     cs:getcwd_ptr
.plt:0000000000001F30 _getcwd         endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    25h ; '%'
.plt:0000000000001F3B                 jmp     sub_1CD0
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; char *canonicalize_file_name(const char *name)
.plt:0000000000001F40 _canonicalize_file_name proc near       ; CODE XREF: print_stat+169↓p
.plt:0000000000001F40                 jmp     cs:canonicalize_file_name_ptr
.plt:0000000000001F40 _canonicalize_file_name endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    26h ; '&'
.plt:0000000000001F4B                 jmp     sub_1CD0
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ; int close(int fd)
.plt:0000000000001F50 _close          proc near               ; CODE XREF: free_cwd+A↓p
.plt:0000000000001F50                                         ; cdb_free+A↓p ...
.plt:0000000000001F50                 jmp     cs:close_ptr
.plt:0000000000001F50 _close          endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    27h ; '''
.plt:0000000000001F5B                 jmp     sub_1CD0
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001F60 _strspn         proc near               ; CODE XREF: print_it+152↓p
.plt:0000000000001F60                                         ; print_it+166↓p ...
.plt:0000000000001F60                 jmp     cs:strspn_ptr
.plt:0000000000001F60 _strspn         endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    28h ; '('
.plt:0000000000001F6B                 jmp     sub_1CD0
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001F70 _memchr         proc near               ; CODE XREF: out_epoch_sec_isra_9+26↓p
.plt:0000000000001F70                                         ; chdir_long+17E↓p
.plt:0000000000001F70                 jmp     cs:memchr_ptr
.plt:0000000000001F70 _memchr         endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    29h ; ')'
.plt:0000000000001F7B                 jmp     sub_1CD0
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001F80 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000001F80                                         ; argmatch_valid+96↓p ...
.plt:0000000000001F80                 jmp     cs:memcmp_ptr
.plt:0000000000001F80 _memcmp         endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    2Ah ; '*'
.plt:0000000000001F8B                 jmp     sub_1CD0
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001F90 _fputs_unlocked proc near               ; CODE XREF: print_it+12A↓p
.plt:0000000000001F90                                         ; usage+9D↓p ...
.plt:0000000000001F90                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001F90 _fputs_unlocked endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    2Bh ; '+'
.plt:0000000000001F9B                 jmp     sub_1CD0
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001FA0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001FA0                 jmp     cs:calloc_ptr
.plt:0000000000001FA0 _calloc         endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    2Ch ; ','
.plt:0000000000001FAB                 jmp     sub_1CD0
.plt:0000000000001FB0
.plt:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FB0
.plt:0000000000001FB0 ; Attributes: thunk
.plt:0000000000001FB0
.plt:0000000000001FB0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000001FB0 ___getdelim     proc near               ; CODE XREF: read_file_system_list+6E↓p
.plt:0000000000001FB0                 jmp     cs:__getdelim_ptr
.plt:0000000000001FB0 ___getdelim     endp
.plt:0000000000001FB0
.plt:0000000000001FB6 ; ---------------------------------------------------------------------------
.plt:0000000000001FB6                 push    2Dh ; '-'
.plt:0000000000001FBB                 jmp     sub_1CD0
.plt:0000000000001FC0
.plt:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FC0
.plt:0000000000001FC0 ; Attributes: thunk
.plt:0000000000001FC0
.plt:0000000000001FC0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001FC0 _strcmp         proc near               ; CODE XREF: find_bind_mount+7F↓p
.plt:0000000000001FC0                                         ; read_file_system_list+424↓p ...
.plt:0000000000001FC0                 jmp     cs:strcmp_ptr
.plt:0000000000001FC0 _strcmp         endp
.plt:0000000000001FC0
.plt:0000000000001FC6 ; ---------------------------------------------------------------------------
.plt:0000000000001FC6                 push    2Eh ; '.'
.plt:0000000000001FCB                 jmp     sub_1CD0
.plt:0000000000001FD0
.plt:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FD0
.plt:0000000000001FD0 ; Attributes: thunk
.plt:0000000000001FD0
.plt:0000000000001FD0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001FD0 _strtol         proc near               ; CODE XREF: out_epoch_sec_isra_9+12F↓p
.plt:0000000000001FD0                                         ; out_epoch_sec_isra_9+270↓p
.plt:0000000000001FD0                 jmp     cs:strtol_ptr
.plt:0000000000001FD0 _strtol         endp
.plt:0000000000001FD0
.plt:0000000000001FD6 ; ---------------------------------------------------------------------------
.plt:0000000000001FD6                 push    2Fh ; '/'
.plt:0000000000001FDB                 jmp     sub_1CD0
.plt:0000000000001FE0
.plt:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FE0
.plt:0000000000001FE0 ; Attributes: thunk
.plt:0000000000001FE0
.plt:0000000000001FE0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001FE0 _memcpy         proc near               ; CODE XREF: print_it+1A7↓p
.plt:0000000000001FE0                                         ; find_mount_point+8D↓p ...
.plt:0000000000001FE0                 jmp     cs:memcpy_ptr
.plt:0000000000001FE0 _memcpy         endp
.plt:0000000000001FE0
.plt:0000000000001FE6 ; ---------------------------------------------------------------------------
.plt:0000000000001FE6                 push    30h ; '0'
.plt:0000000000001FEB                 jmp     sub_1CD0
.plt:0000000000001FF0
.plt:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FF0
.plt:0000000000001FF0 ; Attributes: thunk
.plt:0000000000001FF0
.plt:0000000000001FF0 ; void tzset(void)
.plt:0000000000001FF0 _tzset          proc near               ; CODE XREF: revert_tz:loc_ACF0↓p
.plt:0000000000001FF0                                         ; set_tz:loc_AFA8↓p
.plt:0000000000001FF0                 jmp     cs:tzset_ptr
.plt:0000000000001FF0 _tzset          endp
.plt:0000000000001FF0
.plt:0000000000001FF6 ; ---------------------------------------------------------------------------
.plt:0000000000001FF6                 push    31h ; '1'
.plt:0000000000001FFB                 jmp     sub_1CD0
.plt:0000000000002000
.plt:0000000000002000 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002000
.plt:0000000000002000 ; Attributes: thunk
.plt:0000000000002000
.plt:0000000000002000 ; int fileno(FILE *stream)
.plt:0000000000002000 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000002000                                         ; rpl_fclose+4B↓p ...
.plt:0000000000002000                 jmp     cs:fileno_ptr
.plt:0000000000002000 _fileno         endp
.plt:0000000000002000
.plt:0000000000002006 ; ---------------------------------------------------------------------------
.plt:0000000000002006                 push    32h ; '2'
.plt:000000000000200B                 jmp     sub_1CD0
.plt:0000000000002010
.plt:0000000000002010 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002010
.plt:0000000000002010 ; Attributes: thunk
.plt:0000000000002010
.plt:0000000000002010 ; int statfs(const char *file, struct statfs *buf)
.plt:0000000000002010 _statfs         proc near               ; CODE XREF: main+29B↓p
.plt:0000000000002010                 jmp     cs:statfs_ptr
.plt:0000000000002010 _statfs         endp
.plt:0000000000002010
.plt:0000000000002016 ; ---------------------------------------------------------------------------
.plt:0000000000002016                 push    33h ; '3'
.plt:000000000000201B                 jmp     sub_1CD0
.plt:0000000000002020
.plt:0000000000002020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002020
.plt:0000000000002020 ; Attributes: thunk
.plt:0000000000002020
.plt:0000000000002020 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002020 ___xstat        proc near               ; CODE XREF: main+320↓p
.plt:0000000000002020                                         ; find_bind_mount+3B↓p ...
.plt:0000000000002020                 jmp     cs:__xstat_ptr
.plt:0000000000002020 ___xstat        endp
.plt:0000000000002020
.plt:0000000000002026 ; ---------------------------------------------------------------------------
.plt:0000000000002026                 push    34h ; '4'
.plt:000000000000202B                 jmp     sub_1CD0
.plt:0000000000002030
.plt:0000000000002030 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002030
.plt:0000000000002030 ; Attributes: thunk
.plt:0000000000002030
.plt:0000000000002030 ; void *malloc(size_t size)
.plt:0000000000002030 _malloc         proc near               ; CODE XREF: areadlink_with_size+43↓p
.plt:0000000000002030                                         ; areadlink_with_size+7E↓p ...
.plt:0000000000002030                 jmp     cs:malloc_ptr
.plt:0000000000002030 _malloc         endp
.plt:0000000000002030
.plt:0000000000002036 ; ---------------------------------------------------------------------------
.plt:0000000000002036                 push    35h ; '5'
.plt:000000000000203B                 jmp     sub_1CD0
.plt:0000000000002040
.plt:0000000000002040 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002040
.plt:0000000000002040 ; Attributes: thunk
.plt:0000000000002040
.plt:0000000000002040 ; int fflush(FILE *stream)
.plt:0000000000002040 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000002040                                         ; rpl_fflush+3B↓j
.plt:0000000000002040                 jmp     cs:fflush_ptr
.plt:0000000000002040 _fflush         endp
.plt:0000000000002040
.plt:0000000000002046 ; ---------------------------------------------------------------------------
.plt:0000000000002046                 push    36h ; '6'
.plt:000000000000204B                 jmp     sub_1CD0
.plt:0000000000002050
.plt:0000000000002050 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002050
.plt:0000000000002050 ; Attributes: thunk
.plt:0000000000002050
.plt:0000000000002050 ; struct mntent *getmntent(FILE *stream)
.plt:0000000000002050 _getmntent      proc near               ; CODE XREF: read_file_system_list+4AE↓p
.plt:0000000000002050                                         ; read_file_system_list+6ED↓p
.plt:0000000000002050                 jmp     cs:getmntent_ptr
.plt:0000000000002050 _getmntent      endp
.plt:0000000000002050
.plt:0000000000002056 ; ---------------------------------------------------------------------------
.plt:0000000000002056                 push    37h ; '7'
.plt:000000000000205B                 jmp     sub_1CD0
.plt:0000000000002060
.plt:0000000000002060 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002060
.plt:0000000000002060 ; Attributes: thunk
.plt:0000000000002060
.plt:0000000000002060 ; FILE *setmntent(const char *file, const char *mode)
.plt:0000000000002060 _setmntent      proc near               ; CODE XREF: read_file_system_list+48E↓p
.plt:0000000000002060                 jmp     cs:setmntent_ptr
.plt:0000000000002060 _setmntent      endp
.plt:0000000000002060
.plt:0000000000002066 ; ---------------------------------------------------------------------------
.plt:0000000000002066                 push    38h ; '8'
.plt:000000000000206B                 jmp     sub_1CD0
.plt:0000000000002070
.plt:0000000000002070 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002070
.plt:0000000000002070 ; Attributes: thunk
.plt:0000000000002070
.plt:0000000000002070 ; char *nl_langinfo(nl_item item)
.plt:0000000000002070 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002070                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002070 _nl_langinfo    endp
.plt:0000000000002070
.plt:0000000000002076 ; ---------------------------------------------------------------------------
.plt:0000000000002076                 push    39h ; '9'
.plt:000000000000207B                 jmp     sub_1CD0
.plt:0000000000002080
.plt:0000000000002080 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002080
.plt:0000000000002080 ; Attributes: thunk
.plt:0000000000002080
.plt:0000000000002080 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000002080 ___fxstat       proc near               ; CODE XREF: main+3FB↓p
.plt:0000000000002080                 jmp     cs:__fxstat_ptr
.plt:0000000000002080 ___fxstat       endp
.plt:0000000000002080
.plt:0000000000002086 ; ---------------------------------------------------------------------------
.plt:0000000000002086                 push    3Ah ; ':'
.plt:000000000000208B                 jmp     sub_1CD0
.plt:0000000000002090
.plt:0000000000002090 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002090
.plt:0000000000002090 ; Attributes: thunk
.plt:0000000000002090
.plt:0000000000002090 ; int sscanf(const char *s, const char *format, ...)
.plt:0000000000002090 _sscanf         proc near               ; CODE XREF: read_file_system_list+B5↓p
.plt:0000000000002090                                         ; read_file_system_list+10D↓p
.plt:0000000000002090                 jmp     cs:sscanf_ptr
.plt:0000000000002090 _sscanf         endp
.plt:0000000000002090
.plt:0000000000002096 ; ---------------------------------------------------------------------------
.plt:0000000000002096                 push    3Bh ; ';'
.plt:000000000000209B                 jmp     sub_1CD0
.plt:00000000000020A0
.plt:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020A0
.plt:00000000000020A0 ; Attributes: thunk
.plt:00000000000020A0
.plt:00000000000020A0 ; time_t mktime(struct tm *tp)
.plt:00000000000020A0 _mktime         proc near               ; CODE XREF: mktime_z+3B↓p
.plt:00000000000020A0                 jmp     cs:mktime_ptr
.plt:00000000000020A0 _mktime         endp
.plt:00000000000020A0
.plt:00000000000020A6 ; ---------------------------------------------------------------------------
.plt:00000000000020A6                 push    3Ch ; '<'
.plt:00000000000020AB                 jmp     sub_1CD0
.plt:00000000000020B0
.plt:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020B0
.plt:00000000000020B0 ; Attributes: thunk
.plt:00000000000020B0
.plt:00000000000020B0 ; int __freading(FILE *fp)
.plt:00000000000020B0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000020B0                                         ; rpl_fflush+9↓p
.plt:00000000000020B0                 jmp     cs:__freading_ptr
.plt:00000000000020B0 ___freading     endp
.plt:00000000000020B0
.plt:00000000000020B6 ; ---------------------------------------------------------------------------
.plt:00000000000020B6                 push    3Dh ; '='
.plt:00000000000020BB                 jmp     sub_1CD0
.plt:00000000000020C0
.plt:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020C0
.plt:00000000000020C0 ; Attributes: thunk
.plt:00000000000020C0
.plt:00000000000020C0 ; int fchdir(int fd)
.plt:00000000000020C0 _fchdir         proc near               ; CODE XREF: restore_cwd+8↓j
.plt:00000000000020C0                                         ; chdir_long+1F8↓p
.plt:00000000000020C0                 jmp     cs:fchdir_ptr
.plt:00000000000020C0 _fchdir         endp
.plt:00000000000020C0
.plt:00000000000020C6 ; ---------------------------------------------------------------------------
.plt:00000000000020C6                 push    3Eh ; '>'
.plt:00000000000020CB                 jmp     sub_1CD0
.plt:00000000000020D0
.plt:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020D0
.plt:00000000000020D0 ; Attributes: thunk
.plt:00000000000020D0
.plt:00000000000020D0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000020D0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000020D0                                         ; vasnprintf+285↓p ...
.plt:00000000000020D0                 jmp     cs:realloc_ptr
.plt:00000000000020D0 _realloc        endp
.plt:00000000000020D0
.plt:00000000000020D6 ; ---------------------------------------------------------------------------
.plt:00000000000020D6                 push    3Fh ; '?'
.plt:00000000000020DB                 jmp     sub_1CD0
.plt:00000000000020E0
.plt:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020E0
.plt:00000000000020E0 ; Attributes: thunk
.plt:00000000000020E0
.plt:00000000000020E0 ; char *setlocale(int category, const char *locale)
.plt:00000000000020E0 _setlocale      proc near               ; CODE XREF: main+4A↓p
.plt:00000000000020E0                                         ; usage+3B3↓p ...
.plt:00000000000020E0                 jmp     cs:setlocale_ptr
.plt:00000000000020E0 _setlocale      endp
.plt:00000000000020E0
.plt:00000000000020E6 ; ---------------------------------------------------------------------------
.plt:00000000000020E6                 push    40h ; '@'
.plt:00000000000020EB                 jmp     sub_1CD0
.plt:00000000000020F0
.plt:00000000000020F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020F0
.plt:00000000000020F0 ; Attributes: thunk
.plt:00000000000020F0
.plt:00000000000020F0 ___printf_chk   proc near               ; CODE XREF: out_uint_x+32↓j
.plt:00000000000020F0                                         ; out_string+32↓j ...
.plt:00000000000020F0                 jmp     cs:__printf_chk_ptr
.plt:00000000000020F0 ___printf_chk   endp
.plt:00000000000020F0
.plt:00000000000020F6 ; ---------------------------------------------------------------------------
.plt:00000000000020F6                 push    41h ; 'A'
.plt:00000000000020FB                 jmp     sub_1CD0
.plt:0000000000002100
.plt:0000000000002100 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002100
.plt:0000000000002100 ; Attributes: thunk
.plt:0000000000002100
.plt:0000000000002100 ; time_t timegm(struct tm *tp)
.plt:0000000000002100 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000002100                 jmp     cs:timegm_ptr
.plt:0000000000002100 _timegm         endp
.plt:0000000000002100
.plt:0000000000002106 ; ---------------------------------------------------------------------------
.plt:0000000000002106                 push    42h ; 'B'
.plt:000000000000210B                 jmp     sub_1CD0
.plt:0000000000002110
.plt:0000000000002110 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002110
.plt:0000000000002110 ; Attributes: thunk
.plt:0000000000002110
.plt:0000000000002110 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000002110 _strftime       proc near               ; CODE XREF: __strftime_internal+418↓p
.plt:0000000000002110                 jmp     cs:strftime_ptr
.plt:0000000000002110 _strftime       endp
.plt:0000000000002110
.plt:0000000000002116 ; ---------------------------------------------------------------------------
.plt:0000000000002116                 push    43h ; 'C'
.plt:000000000000211B                 jmp     sub_1CD0
.plt:0000000000002120
.plt:0000000000002120 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002120
.plt:0000000000002120 ; Attributes: thunk
.plt:0000000000002120
.plt:0000000000002120 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002120 _error          proc near               ; CODE XREF: main+397↓p
.plt:0000000000002120                                         ; main+42E↓p ...
.plt:0000000000002120                 jmp     cs:error_ptr
.plt:0000000000002120 _error          endp
.plt:0000000000002120
.plt:0000000000002126 ; ---------------------------------------------------------------------------
.plt:0000000000002126                 push    44h ; 'D'
.plt:000000000000212B                 jmp     sub_1CD0
.plt:0000000000002130
.plt:0000000000002130 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002130
.plt:0000000000002130 ; Attributes: thunk
.plt:0000000000002130
.plt:0000000000002130 ; void *memrchr(const void *s, int c, size_t n)
.plt:0000000000002130 _memrchr        proc near               ; CODE XREF: chdir_long+149↓p
.plt:0000000000002130                 jmp     cs:memrchr_ptr
.plt:0000000000002130 _memrchr        endp
.plt:0000000000002130
.plt:0000000000002136 ; ---------------------------------------------------------------------------
.plt:0000000000002136                 push    45h ; 'E'
.plt:000000000000213B                 jmp     sub_1CD0
.plt:0000000000002140
.plt:0000000000002140 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002140
.plt:0000000000002140 ; Attributes: thunk
.plt:0000000000002140
.plt:0000000000002140 ; int open(const char *file, int oflag, ...)
.plt:0000000000002140 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000002140                 jmp     cs:open_ptr
.plt:0000000000002140 _open           endp
.plt:0000000000002140
.plt:0000000000002146 ; ---------------------------------------------------------------------------
.plt:0000000000002146                 push    46h ; 'F'
.plt:000000000000214B                 jmp     sub_1CD0
.plt:0000000000002150
.plt:0000000000002150 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002150
.plt:0000000000002150 ; Attributes: thunk
.plt:0000000000002150
.plt:0000000000002150 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002150 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_B65A↓j
.plt:0000000000002150                 jmp     cs:fseeko_ptr
.plt:0000000000002150 _fseeko         endp
.plt:0000000000002150
.plt:0000000000002156 ; ---------------------------------------------------------------------------
.plt:0000000000002156                 push    47h ; 'G'
.plt:000000000000215B                 jmp     sub_1CD0
.plt:0000000000002160
.plt:0000000000002160 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002160
.plt:0000000000002160 ; Attributes: thunk
.plt:0000000000002160
.plt:0000000000002160 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002160 _fopen          proc near               ; CODE XREF: read_file_system_list+2C↓p
.plt:0000000000002160                 jmp     cs:fopen_ptr
.plt:0000000000002160 _fopen          endp
.plt:0000000000002160
.plt:0000000000002166 ; ---------------------------------------------------------------------------
.plt:0000000000002166                 push    48h ; 'H'
.plt:000000000000216B                 jmp     sub_1CD0
.plt:0000000000002170
.plt:0000000000002170 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002170
.plt:0000000000002170 ; Attributes: thunk
.plt:0000000000002170
.plt:0000000000002170 ; int unsetenv(const char *name)
.plt:0000000000002170 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000002170                 jmp     cs:unsetenv_ptr
.plt:0000000000002170 _unsetenv       endp
.plt:0000000000002170
.plt:0000000000002176 ; ---------------------------------------------------------------------------
.plt:0000000000002176                 push    49h ; 'I'
.plt:000000000000217B                 jmp     sub_1CD0
.plt:0000000000002180
.plt:0000000000002180 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002180
.plt:0000000000002180 ; Attributes: thunk
.plt:0000000000002180
.plt:0000000000002180 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002180 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002180                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002180 ___cxa_atexit   endp
.plt:0000000000002180
.plt:0000000000002186 ; ---------------------------------------------------------------------------
.plt:0000000000002186                 push    4Ah ; 'J'
.plt:000000000000218B                 jmp     sub_1CD0
.plt:0000000000002190
.plt:0000000000002190 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002190
.plt:0000000000002190 ; Attributes: noreturn thunk
.plt:0000000000002190
.plt:0000000000002190 ; void __noreturn exit(int status)
.plt:0000000000002190 _exit           proc near               ; CODE XREF: main+16B↓p
.plt:0000000000002190                                         ; usage+58↓p
.plt:0000000000002190                 jmp     cs:exit_ptr
.plt:0000000000002190 _exit           endp
.plt:0000000000002190
.plt:0000000000002196 ; ---------------------------------------------------------------------------
.plt:0000000000002196                 push    4Bh ; 'K'
.plt:000000000000219B                 jmp     sub_1CD0
.plt:00000000000021A0
.plt:00000000000021A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021A0
.plt:00000000000021A0 ; Attributes: thunk
.plt:00000000000021A0
.plt:00000000000021A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000021A0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000021A0                 jmp     cs:fwrite_ptr
.plt:00000000000021A0 _fwrite         endp
.plt:00000000000021A0
.plt:00000000000021A6 ; ---------------------------------------------------------------------------
.plt:00000000000021A6                 push    4Ch ; 'L'
.plt:00000000000021AB                 jmp     sub_1CD0
.plt:00000000000021B0
.plt:00000000000021B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021B0
.plt:00000000000021B0 ; Attributes: thunk
.plt:00000000000021B0
.plt:00000000000021B0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000021B0                                         ; argmatch_valid+7A↓p ...
.plt:00000000000021B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000021B0 ___fprintf_chk  endp
.plt:00000000000021B0
.plt:00000000000021B6 ; ---------------------------------------------------------------------------
.plt:00000000000021B6                 push    4Dh ; 'M'
.plt:00000000000021BB                 jmp     sub_1CD0
.plt:00000000000021C0
.plt:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021C0
.plt:00000000000021C0 ; Attributes: thunk
.plt:00000000000021C0
.plt:00000000000021C0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000021C0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000021C0                 jmp     cs:mbsinit_ptr
.plt:00000000000021C0 _mbsinit        endp
.plt:00000000000021C0
.plt:00000000000021C6 ; ---------------------------------------------------------------------------
.plt:00000000000021C6                 push    4Eh ; 'N'
.plt:00000000000021CB                 jmp     sub_1CD0
.plt:00000000000021D0
.plt:00000000000021D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021D0
.plt:00000000000021D0 ; Attributes: thunk
.plt:00000000000021D0
.plt:00000000000021D0 ; int iswprint(wint_t wc)
.plt:00000000000021D0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000021D0                 jmp     cs:iswprint_ptr
.plt:00000000000021D0 _iswprint       endp
.plt:00000000000021D0
.plt:00000000000021D6 ; ---------------------------------------------------------------------------
.plt:00000000000021D6                 push    4Fh ; 'O'
.plt:00000000000021DB                 jmp     sub_1CD0
.plt:00000000000021E0
.plt:00000000000021E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021E0
.plt:00000000000021E0 ; Attributes: thunk
.plt:00000000000021E0
.plt:00000000000021E0 ; char *hasmntopt(const struct mntent *mnt, const char *opt)
.plt:00000000000021E0 _hasmntopt      proc near               ; CODE XREF: read_file_system_list+4CA↓p
.plt:00000000000021E0                 jmp     cs:hasmntopt_ptr
.plt:00000000000021E0 _hasmntopt      endp
.plt:00000000000021E0
.plt:00000000000021E6 ; ---------------------------------------------------------------------------
.plt:00000000000021E6                 push    50h ; 'P'
.plt:00000000000021EB                 jmp     sub_1CD0
.plt:00000000000021F0
.plt:00000000000021F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021F0
.plt:00000000000021F0 ; Attributes: thunk
.plt:00000000000021F0
.plt:00000000000021F0 ; char *strstr(const char *haystack, const char *needle)
.plt:00000000000021F0 _strstr         proc near               ; CODE XREF: main+1F9↓p
.plt:00000000000021F0                                         ; read_file_system_list+D7↓p
.plt:00000000000021F0                 jmp     cs:strstr_ptr
.plt:00000000000021F0 _strstr         endp
.plt:00000000000021F0
.plt:00000000000021F6 ; ---------------------------------------------------------------------------
.plt:00000000000021F6                 push    51h ; 'Q'
.plt:00000000000021FB                 jmp     sub_1CD0
.plt:0000000000002200
.plt:0000000000002200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002200
.plt:0000000000002200 ; Attributes: thunk
.plt:0000000000002200
.plt:0000000000002200 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000002200 ___ctype_tolower_loc proc near          ; CODE XREF: memcpy_lowcase+13↓p
.plt:0000000000002200                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000002200 ___ctype_tolower_loc endp
.plt:0000000000002200
.plt:0000000000002206 ; ---------------------------------------------------------------------------
.plt:0000000000002206                 push    52h ; 'R'
.plt:000000000000220B                 jmp     sub_1CD0
.plt:0000000000002210
.plt:0000000000002210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002210
.plt:0000000000002210 ; Attributes: thunk
.plt:0000000000002210
.plt:0000000000002210 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002210 ___ctype_b_loc  proc near               ; CODE XREF: print_it:loc_39E0↓p
.plt:0000000000002210                                         ; quotearg_buffer_restyled+513↓p
.plt:0000000000002210                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002210 ___ctype_b_loc  endp
.plt:0000000000002210
.plt:0000000000002216 ; ---------------------------------------------------------------------------
.plt:0000000000002216                 push    53h ; 'S'
.plt:000000000000221B                 jmp     sub_1CD0
.plt:0000000000002220
.plt:0000000000002220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002220
.plt:0000000000002220 ; Attributes: thunk
.plt:0000000000002220
.plt:0000000000002220 ___sprintf_chk  proc near               ; CODE XREF: print_statfs+117↓p
.plt:0000000000002220                                         ; human_time+BE↓p ...
.plt:0000000000002220                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000002220 ___sprintf_chk  endp
.plt:0000000000002220
.plt:0000000000002226 ; ---------------------------------------------------------------------------
.plt:0000000000002226                 push    54h ; 'T'
.plt:000000000000222B                 jmp     sub_1CD0
.plt:000000000000222B ; } // starts at 1CD0
.plt:000000000000222B _plt            ends
.plt:000000000000222B
.plt.got:0000000000002230 ; ===========================================================================
.plt.got:0000000000002230
.plt.got:0000000000002230 ; Segment type: Pure code
.plt.got:0000000000002230 ; Segment permissions: Read/Execute
.plt.got:0000000000002230 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002230                 assume cs:_plt_got
.plt.got:0000000000002230                 ;org 2230h
.plt.got:0000000000002230                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002230
.plt.got:0000000000002230 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002230
.plt.got:0000000000002230 ; Attributes: thunk
.plt.got:0000000000002230
.plt.got:0000000000002230 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002230 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002230 ; __unwind {
.plt.got:0000000000002230                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002230 __cxa_finalize  endp
.plt.got:0000000000002230
.plt.got:0000000000002230 ; ---------------------------------------------------------------------------
.plt.got:0000000000002236                 align 8
.plt.got:0000000000002236 ; } // starts at 2230
.plt.got:0000000000002236 _plt_got        ends
.plt.got:0000000000002236
LOAD:0000000000002238 ; ===========================================================================
LOAD:0000000000002238
LOAD:0000000000002238 ; Segment type: Pure code
LOAD:0000000000002238 ; Segment permissions: Read/Execute
LOAD:0000000000002238 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002238                 assume cs:LOAD
LOAD:0000000000002238                 ;org 2238h
LOAD:0000000000002238                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002238                 align 20h
LOAD:0000000000002238 LOAD            ends
LOAD:0000000000002238
.text:0000000000002240 ; ===========================================================================
.text:0000000000002240
.text:0000000000002240 ; Segment type: Pure code
.text:0000000000002240 ; Segment permissions: Read/Execute
.text:0000000000002240 _text           segment para public 'CODE' use64
.text:0000000000002240                 assume cs:_text
.text:0000000000002240                 ;org 2240h
.text:0000000000002240                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002240
.text:0000000000002240 ; =============== S U B R O U T I N E =======================================
.text:0000000000002240
.text:0000000000002240
.text:0000000000002240 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002240                 public main
.text:0000000000002240 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002240
.text:0000000000002240 var_F1          = byte ptr -0F1h
.text:0000000000002240 var_F0          = qword ptr -0F0h
.text:0000000000002240 var_E8          = qword ptr -0E8h
.text:0000000000002240 var_E0          = qword ptr -0E0h
.text:0000000000002240 stat_buf        = stat ptr -0D8h
.text:0000000000002240 var_40          = qword ptr -40h
.text:0000000000002240
.text:0000000000002240 ; __unwind {
.text:0000000000002240                 push    r15
.text:0000000000002242                 push    r14
.text:0000000000002244                 mov     r15d, 1
.text:000000000000224A                 push    r13
.text:000000000000224C                 push    r12
.text:000000000000224E                 lea     r12, long_options
.text:0000000000002255                 push    rbp
.text:0000000000002256                 push    rbx
.text:0000000000002257                 mov     ebp, edi
.text:0000000000002259                 mov     rbx, rsi
.text:000000000000225C                 sub     rsp, 0C8h
.text:0000000000002263                 mov     rdi, [rsi]
.text:0000000000002266                 mov     rax, fs:28h
.text:000000000000226F                 mov     [rsp+0F8h+var_40], rax
.text:0000000000002277                 xor     eax, eax
.text:0000000000002279                 call    set_program_name
.text:000000000000227E                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000002285                 mov     edi, 6          ; category
.text:000000000000228A                 call    _setlocale
.text:000000000000228F                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002296                 lea     rdi, domainname ; "coreutils"
.text:000000000000229D                 call    _bindtextdomain
.text:00000000000022A2                 lea     rdi, domainname ; "coreutils"
.text:00000000000022A9                 call    _textdomain
.text:00000000000022AE                 call    _localeconv
.text:00000000000022B3                 mov     rdi, [rax]
.text:00000000000022B6                 lea     rax, filename+1 ; "."
.text:00000000000022BD                 cmp     byte ptr [rdi], 0
.text:00000000000022C0                 cmovz   rdi, rax        ; s
.text:00000000000022C4                 xor     r13d, r13d
.text:00000000000022C7                 mov     cs:decimal_point, rdi
.text:00000000000022CE                 call    _strlen
.text:00000000000022D3                 lea     rdi, close_stdout
.text:00000000000022DA                 mov     cs:decimal_point_len, rax
.text:00000000000022E1                 call    atexit
.text:00000000000022E6                 mov     byte ptr [rsp+0F8h+var_F0], 0
.text:00000000000022EB                 mov     [rsp+0F8h+var_F1], 0
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: main+115↓j
.text:00000000000022F0                                         ; main+177↓j ...
.text:00000000000022F0                 lea     rdx, shortopts  ; "c:fLt"
.text:00000000000022F7                 xor     r8d, r8d        ; longind
.text:00000000000022FA                 mov     rcx, r12        ; longopts
.text:00000000000022FD                 mov     rsi, rbx        ; argv
.text:0000000000002300                 mov     edi, ebp        ; argc
.text:0000000000002302                 call    _getopt_long
.text:0000000000002307                 cmp     eax, 0FFFFFFFFh
.text:000000000000230A                 mov     r14d, eax
.text:000000000000230D                 jz      loc_241A
.text:0000000000002313                 cmp     r14d, 63h ; 'c'
.text:0000000000002317                 jz      loc_23C0
.text:000000000000231D                 jle     short loc_2360
.text:000000000000231F                 cmp     r14d, 74h ; 't'
.text:0000000000002323                 jz      loc_2410
.text:0000000000002329                 cmp     r14d, 80h
.text:0000000000002330                 jz      loc_23E8
.text:0000000000002336                 cmp     r14d, 66h ; 'f'
.text:000000000000233A                 jz      short loc_2350
.text:000000000000233C
.text:000000000000233C loc_233C:                               ; CODE XREF: main+13A↓j
.text:000000000000233C                                         ; main+55F↓j
.text:000000000000233C                 mov     edi, 1          ; status
.text:0000000000002341                 call    usage
.text:0000000000002341 ; ---------------------------------------------------------------------------
.text:0000000000002346                 align 10h
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: main+FA↑j
.text:0000000000002350                 mov     [rsp+0F8h+var_F1], 1
.text:0000000000002355                 jmp     short loc_22F0
.text:0000000000002355 ; ---------------------------------------------------------------------------
.text:0000000000002357                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: main+DD↑j
.text:0000000000002360                 cmp     r14d, 0FFFFFF7Eh
.text:0000000000002367                 jz      loc_2772
.text:000000000000236D                 cmp     r14d, 4Ch ; 'L'
.text:0000000000002371                 jz      short loc_23B0
.text:0000000000002373                 cmp     r14d, 0FFFFFF7Dh
.text:000000000000237A                 jnz     short loc_233C
.text:000000000000237C                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002383                 mov     rcx, cs:Version
.text:000000000000238A                 lea     r8, aMichaelMeskes ; "Michael Meskes"
.text:0000000000002391                 lea     rdx, unk_DEAC
.text:0000000000002398                 lea     rsi, aStat      ; "stat"
.text:000000000000239F                 xor     r9d, r9d
.text:00000000000023A2                 xor     eax, eax
.text:00000000000023A4                 call    version_etc
.text:00000000000023A9                 xor     edi, edi        ; status
.text:00000000000023AB                 call    _exit
.text:00000000000023B0 ; ---------------------------------------------------------------------------
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: main+131↑j
.text:00000000000023B0                 mov     cs:follow_links, r15b
.text:00000000000023B7                 jmp     loc_22F0
.text:00000000000023B7 ; ---------------------------------------------------------------------------
.text:00000000000023BC                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: main+D7↑j
.text:00000000000023C0                 lea     rax, aWrittenBySSAnd+1Ah ; "\n"
.text:00000000000023C7                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:00000000000023CE                 mov     cs:interpret_backslash_escapes, 0
.text:00000000000023D5                 mov     cs:trailing_delim, rax
.text:00000000000023DC                 jmp     loc_22F0
.text:00000000000023DC ; ---------------------------------------------------------------------------
.text:00000000000023E1                 align 8
.text:00000000000023E8
.text:00000000000023E8 loc_23E8:                               ; CODE XREF: main+F0↑j
.text:00000000000023E8                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023EF                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:00000000000023F6                 mov     cs:interpret_backslash_escapes, r15b
.text:00000000000023FD                 mov     cs:trailing_delim, rax
.text:0000000000002404                 jmp     loc_22F0
.text:0000000000002404 ; ---------------------------------------------------------------------------
.text:0000000000002409                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: main+E3↑j
.text:0000000000002410                 mov     byte ptr [rsp+0F8h+var_F0], 1
.text:0000000000002415                 jmp     loc_22F0
.text:000000000000241A ; ---------------------------------------------------------------------------
.text:000000000000241A
.text:000000000000241A loc_241A:                               ; CODE XREF: main+CD↑j
.text:000000000000241A                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:0000000000002420                 jz      loc_277E
.text:0000000000002426                 test    r13, r13
.text:0000000000002429                 jz      loc_2726
.text:000000000000242F                 lea     rsi, needle     ; "%N"
.text:0000000000002436                 mov     rdi, r13        ; haystack
.text:0000000000002439                 call    _strstr
.text:000000000000243E                 test    rax, rax
.text:0000000000002441                 mov     [rsp+0F8h+var_E8], r13
.text:0000000000002446                 jz      short loc_249B
.text:0000000000002448                 lea     rdi, name       ; "QUOTING_STYLE"
.text:000000000000244F                 call    _getenv
.text:0000000000002454                 test    rax, rax
.text:0000000000002457                 mov     r12, rax
.text:000000000000245A                 jz      loc_275C
.text:0000000000002460                 lea     rdx, quoting_style_vals
.text:0000000000002467                 lea     rsi, quoting_style_args
.text:000000000000246E                 mov     ecx, 4
.text:0000000000002473                 mov     rdi, rax
.text:0000000000002476                 call    argmatch
.text:000000000000247B                 test    eax, eax
.text:000000000000247D                 js      loc_26E1
.text:0000000000002483                 lea     rdx, quoting_style_vals
.text:000000000000248A                 cdqe
.text:000000000000248C                 xor     edi, edi
.text:000000000000248E                 mov     esi, [rdx+rax*4]
.text:0000000000002491                 call    set_quoting_style
.text:0000000000002496                 mov     [rsp+0F8h+var_E8], r13
.text:000000000000249B
.text:000000000000249B loc_249B:                               ; CODE XREF: main+206↑j
.text:000000000000249B                                         ; main+4E1↓j ...
.text:000000000000249B                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000024A1                 cmp     ebp, eax
.text:00000000000024A3                 jle     loc_25E3
.text:00000000000024A9                 movsxd  rdx, eax
.text:00000000000024AC                 not     eax
.text:00000000000024AE                 add     eax, ebp
.text:00000000000024B0                 lea     r12, [rbx+rdx*8]
.text:00000000000024B4                 lea     rbp, [rsp+0F8h+stat_buf]
.text:00000000000024B9                 add     rax, rdx
.text:00000000000024BC                 lea     rax, [rbx+rax*8+8]
.text:00000000000024C1                 mov     ebx, 1
.text:00000000000024C6                 mov     [rsp+0F8h+var_F0], rax
.text:00000000000024CB                 jmp     short loc_251C
.text:00000000000024CD ; ---------------------------------------------------------------------------
.text:00000000000024CD
.text:00000000000024CD loc_24CD:                               ; CODE XREF: main+2FE↓j
.text:00000000000024CD                 test    eax, eax
.text:00000000000024CF                 jz      loc_25A8
.text:00000000000024D5                 mov     rsi, rbp        ; buf
.text:00000000000024D8                 mov     rdi, r15        ; file
.text:00000000000024DB                 call    _statfs
.text:00000000000024E0                 test    eax, eax
.text:00000000000024E2                 jnz     loc_267A
.text:00000000000024E8                 lea     rcx, print_statfs
.text:00000000000024EF                 mov     r8, rbp
.text:00000000000024F2                 mov     rdx, r15
.text:00000000000024F5                 or      esi, 0FFFFFFFFh
.text:00000000000024F8                 mov     rdi, r13        ; src
.text:00000000000024FB                 call    print_it
.text:0000000000002500                 xor     eax, 1
.text:0000000000002503                 nop     dword ptr [rax+rax+00h]
.text:0000000000002508
.text:0000000000002508 loc_2508:                               ; CODE XREF: main+363↓j
.text:0000000000002508                                         ; main+39E↓j ...
.text:0000000000002508                 movzx   eax, al
.text:000000000000250B                 add     r12, 8
.text:000000000000250F                 and     ebx, eax
.text:0000000000002511                 cmp     [rsp+0F8h+var_F0], r12
.text:0000000000002516                 jz      loc_25E8
.text:000000000000251C
.text:000000000000251C loc_251C:                               ; CODE XREF: main+28B↑j
.text:000000000000251C                 mov     r15, [r12]
.text:0000000000002520                 lea     rdi, aLt+2      ; "-"
.text:0000000000002527                 mov     ecx, 2
.text:000000000000252C                 mov     rsi, r15
.text:000000000000252F                 repe cmpsb
.text:0000000000002531                 setnbe  al
.text:0000000000002534                 sbb     al, 0
.text:0000000000002536                 cmp     [rsp+0F8h+var_F1], 0
.text:000000000000253B                 movsx   eax, al
.text:000000000000253E                 jnz     short loc_24CD
.text:0000000000002540                 test    eax, eax
.text:0000000000002542                 jz      loc_2631
.text:0000000000002548                 cmp     cs:follow_links, 0
.text:000000000000254F                 jz      loc_2617
.text:0000000000002555                 mov     rdx, rbp        ; stat_buf
.text:0000000000002558                 mov     rsi, r15        ; filename
.text:000000000000255B                 mov     edi, 1          ; ver
.text:0000000000002560                 call    ___xstat
.text:0000000000002565                 test    eax, eax
.text:0000000000002567                 setnz   al
.text:000000000000256A
.text:000000000000256A loc_256A:                               ; CODE XREF: main+3EC↓j
.text:000000000000256A                 test    al, al
.text:000000000000256C                 mov     esi, r14d
.text:000000000000256F                 jnz     loc_26C1
.text:0000000000002575
.text:0000000000002575 loc_2575:                               ; CODE XREF: main+404↓j
.text:0000000000002575                 mov     edx, [rsp+0F8h+stat_buf.st_mode]
.text:0000000000002579                 mov     rdi, [rsp+0F8h+var_E8]
.text:000000000000257E                 lea     rcx, print_stat
.text:0000000000002585                 mov     r8, rbp
.text:0000000000002588                 and     edx, 0B000h
.text:000000000000258E                 cmp     edx, 2000h
.text:0000000000002594                 mov     rdx, r15
.text:0000000000002597                 cmovnz  rdi, r13        ; src
.text:000000000000259B                 call    print_it
.text:00000000000025A0                 xor     eax, 1
.text:00000000000025A3                 jmp     loc_2508
.text:00000000000025A8 ; ---------------------------------------------------------------------------
.text:00000000000025A8
.text:00000000000025A8 loc_25A8:                               ; CODE XREF: main+28F↑j
.text:00000000000025A8                 mov     rsi, r15
.text:00000000000025AB                 mov     edi, 4
.text:00000000000025B0                 call    quotearg_style
.text:00000000000025B5                 lea     rsi, msgid      ; "using %s to denote standard input does "...
.text:00000000000025BC                 mov     r15, rax
.text:00000000000025BF                 mov     edx, 5          ; category
.text:00000000000025C4                 xor     edi, edi        ; domainname
.text:00000000000025C6                 call    _dcgettext
.text:00000000000025CB                 mov     rcx, r15
.text:00000000000025CE                 mov     rdx, rax        ; format
.text:00000000000025D1                 xor     esi, esi        ; errnum
.text:00000000000025D3                 xor     eax, eax
.text:00000000000025D5                 xor     edi, edi        ; status
.text:00000000000025D7                 call    _error
.text:00000000000025DC                 xor     eax, eax
.text:00000000000025DE                 jmp     loc_2508
.text:00000000000025E3 ; ---------------------------------------------------------------------------
.text:00000000000025E3
.text:00000000000025E3 loc_25E3:                               ; CODE XREF: main+263↑j
.text:00000000000025E3                 mov     ebx, 1
.text:00000000000025E8
.text:00000000000025E8 loc_25E8:                               ; CODE XREF: main+2D6↑j
.text:00000000000025E8                 xor     ebx, 1
.text:00000000000025EB                 movzx   eax, bl
.text:00000000000025EE                 mov     rbx, [rsp+0F8h+var_40]
.text:00000000000025F6                 xor     rbx, fs:28h
.text:00000000000025FF                 jnz     loc_2779
.text:0000000000002605                 add     rsp, 0C8h
.text:000000000000260C                 pop     rbx
.text:000000000000260D                 pop     rbp
.text:000000000000260E                 pop     r12
.text:0000000000002610                 pop     r13
.text:0000000000002612                 pop     r14
.text:0000000000002614                 pop     r15
.text:0000000000002616                 retn
.text:0000000000002617 ; ---------------------------------------------------------------------------
.text:0000000000002617
.text:0000000000002617 loc_2617:                               ; CODE XREF: main+30F↑j
.text:0000000000002617                 mov     rdx, rbp        ; stat_buf
.text:000000000000261A                 mov     rsi, r15        ; filename
.text:000000000000261D                 mov     edi, 1          ; ver
.text:0000000000002622                 call    ___lxstat
.text:0000000000002627                 test    eax, eax
.text:0000000000002629                 setnz   al
.text:000000000000262C                 jmp     loc_256A
.text:0000000000002631 ; ---------------------------------------------------------------------------
.text:0000000000002631
.text:0000000000002631 loc_2631:                               ; CODE XREF: main+302↑j
.text:0000000000002631                 xor     esi, esi        ; fildes
.text:0000000000002633                 mov     rdx, rbp        ; stat_buf
.text:0000000000002636                 mov     edi, 1          ; ver
.text:000000000000263B                 call    ___fxstat
.text:0000000000002640                 test    eax, eax
.text:0000000000002642                 mov     esi, eax
.text:0000000000002644                 jz      loc_2575
.text:000000000000264A                 lea     rsi, aCannotStatStan ; "cannot stat standard input"
.text:0000000000002651                 mov     edx, 5          ; category
.text:0000000000002656                 xor     edi, edi        ; domainname
.text:0000000000002658                 call    _dcgettext
.text:000000000000265D                 mov     r15, rax
.text:0000000000002660                 call    ___errno_location
.text:0000000000002665                 mov     esi, [rax]      ; errnum
.text:0000000000002667                 mov     rdx, r15        ; format
.text:000000000000266A                 xor     eax, eax
.text:000000000000266C                 xor     edi, edi        ; status
.text:000000000000266E                 call    _error
.text:0000000000002673                 xor     eax, eax
.text:0000000000002675                 jmp     loc_2508
.text:000000000000267A ; ---------------------------------------------------------------------------
.text:000000000000267A
.text:000000000000267A loc_267A:                               ; CODE XREF: main+2A2↑j
.text:000000000000267A                 mov     rsi, r15
.text:000000000000267D                 mov     edi, 4
.text:0000000000002682                 call    quotearg_style
.text:0000000000002687                 lea     rsi, aCannotReadFile ; "cannot read file system information for"...
.text:000000000000268E                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000002693                 mov     edx, 5          ; category
.text:0000000000002698
.text:0000000000002698 loc_2698:                               ; CODE XREF: main+49F↓j
.text:0000000000002698                 xor     edi, edi        ; domainname
.text:000000000000269A                 call    _dcgettext
.text:000000000000269F                 mov     r15, rax
.text:00000000000026A2                 call    ___errno_location
.text:00000000000026A7                 mov     rcx, [rsp+0F8h+var_E0]
.text:00000000000026AC                 mov     esi, [rax]      ; errnum
.text:00000000000026AE                 mov     rdx, r15        ; format
.text:00000000000026B1                 xor     eax, eax
.text:00000000000026B3                 xor     edi, edi        ; status
.text:00000000000026B5                 call    _error
.text:00000000000026BA                 xor     eax, eax
.text:00000000000026BC                 jmp     loc_2508
.text:00000000000026C1 ; ---------------------------------------------------------------------------
.text:00000000000026C1
.text:00000000000026C1 loc_26C1:                               ; CODE XREF: main+32F↑j
.text:00000000000026C1                 mov     rsi, r15
.text:00000000000026C4                 mov     edi, 4
.text:00000000000026C9                 call    quotearg_style
.text:00000000000026CE                 mov     edx, 5
.text:00000000000026D3                 mov     [rsp+0F8h+var_E0], rax
.text:00000000000026D8                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:00000000000026DF                 jmp     short loc_2698
.text:00000000000026E1 ; ---------------------------------------------------------------------------
.text:00000000000026E1
.text:00000000000026E1 loc_26E1:                               ; CODE XREF: main+23D↑j
.text:00000000000026E1                 mov     esi, 4
.text:00000000000026E6                 xor     edi, edi
.text:00000000000026E8                 call    set_quoting_style
.text:00000000000026ED                 mov     rdi, r12
.text:00000000000026F0                 call    quote
.text:00000000000026F5                 lea     rsi, aIgnoringInvali ; "ignoring invalid value of environment v"...
.text:00000000000026FC                 mov     r12, rax
.text:00000000000026FF                 mov     edx, 5          ; category
.text:0000000000002704                 xor     edi, edi        ; domainname
.text:0000000000002706                 call    _dcgettext
.text:000000000000270B                 mov     rcx, r12
.text:000000000000270E                 mov     rdx, rax        ; format
.text:0000000000002711                 xor     esi, esi        ; errnum
.text:0000000000002713                 xor     edi, edi        ; status
.text:0000000000002715                 xor     eax, eax
.text:0000000000002717                 call    _error
.text:000000000000271C                 mov     [rsp+0F8h+var_E8], r13
.text:0000000000002721                 jmp     loc_249B
.text:0000000000002726 ; ---------------------------------------------------------------------------
.text:0000000000002726
.text:0000000000002726 loc_2726:                               ; CODE XREF: main+1E9↑j
.text:0000000000002726                 movzx   r12d, byte ptr [rsp+0F8h+var_F0]
.text:000000000000272C                 movzx   r15d, [rsp+0F8h+var_F1]
.text:0000000000002732                 xor     edx, edx
.text:0000000000002734                 mov     esi, r12d
.text:0000000000002737                 mov     edi, r15d
.text:000000000000273A                 call    default_format
.text:000000000000273F                 mov     edx, 1
.text:0000000000002744                 mov     esi, r12d
.text:0000000000002747                 mov     edi, r15d
.text:000000000000274A                 mov     r13, rax
.text:000000000000274D                 call    default_format
.text:0000000000002752                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000002757                 jmp     loc_249B
.text:000000000000275C ; ---------------------------------------------------------------------------
.text:000000000000275C
.text:000000000000275C loc_275C:                               ; CODE XREF: main+21A↑j
.text:000000000000275C                 mov     esi, 4
.text:0000000000002761                 xor     edi, edi
.text:0000000000002763                 call    set_quoting_style
.text:0000000000002768                 mov     [rsp+0F8h+var_E8], r13
.text:000000000000276D                 jmp     loc_249B
.text:0000000000002772 ; ---------------------------------------------------------------------------
.text:0000000000002772
.text:0000000000002772 loc_2772:                               ; CODE XREF: main+127↑j
.text:0000000000002772                 xor     edi, edi        ; status
.text:0000000000002774                 call    usage
.text:0000000000002779 ; ---------------------------------------------------------------------------
.text:0000000000002779
.text:0000000000002779 loc_2779:                               ; CODE XREF: main+3BF↑j
.text:0000000000002779                 call    ___stack_chk_fail
.text:000000000000277E ; ---------------------------------------------------------------------------
.text:000000000000277E
.text:000000000000277E loc_277E:                               ; CODE XREF: main+1E0↑j
.text:000000000000277E                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000002785                 xor     edi, edi        ; domainname
.text:0000000000002787                 mov     edx, 5          ; category
.text:000000000000278C                 call    _dcgettext
.text:0000000000002791                 xor     esi, esi        ; errnum
.text:0000000000002793                 mov     rdx, rax        ; format
.text:0000000000002796                 xor     edi, edi        ; status
.text:0000000000002798                 xor     eax, eax
.text:000000000000279A                 call    _error
.text:000000000000279F                 jmp     loc_233C
.text:000000000000279F ; } // starts at 2240
.text:000000000000279F main            endp
.text:000000000000279F
.text:000000000000279F ; ---------------------------------------------------------------------------
.text:00000000000027A4                 align 10h
.text:00000000000027B0
.text:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027B0
.text:00000000000027B0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000027B0
.text:00000000000027B0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000027B0                 public start
.text:00000000000027B0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000027B0 ; __unwind {
.text:00000000000027B0                 xor     ebp, ebp
.text:00000000000027B2                 mov     r9, rdx         ; rtld_fini
.text:00000000000027B5                 pop     rsi             ; argc
.text:00000000000027B6                 mov     rdx, rsp        ; ubp_av
.text:00000000000027B9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000027BD                 push    rax
.text:00000000000027BE                 push    rsp             ; stack_end
.text:00000000000027BF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000027C6                 lea     rcx, __libc_csu_init ; init
.text:00000000000027CD                 lea     rdi, main       ; main
.text:00000000000027D4                 call    cs:__libc_start_main_ptr
.text:00000000000027DA                 hlt
.text:00000000000027DA ; } // starts at 27B0
.text:00000000000027DA start           endp
.text:00000000000027DA
.text:00000000000027DA ; ---------------------------------------------------------------------------
.text:00000000000027DB                 align 20h
.text:00000000000027E0
.text:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027E0
.text:00000000000027E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000027E0
.text:00000000000027E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2893↓p
.text:00000000000027E0                 lea     rdi, __bss_start
.text:00000000000027E7                 push    rbp
.text:00000000000027E8                 lea     rax, __bss_start
.text:00000000000027EF                 cmp     rax, rdi
.text:00000000000027F2                 mov     rbp, rsp
.text:00000000000027F5                 jz      short loc_2810
.text:00000000000027F7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000027FE                 test    rax, rax
.text:0000000000002801                 jz      short loc_2810
.text:0000000000002803                 pop     rbp
.text:0000000000002804                 jmp     rax
.text:0000000000002804 ; ---------------------------------------------------------------------------
.text:0000000000002806                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002810                                         ; deregister_tm_clones+21↑j
.text:0000000000002810                 pop     rbp
.text:0000000000002811                 retn
.text:0000000000002811 deregister_tm_clones endp
.text:0000000000002811
.text:0000000000002811 ; ---------------------------------------------------------------------------
.text:0000000000002812                 align 20h
.text:0000000000002820
.text:0000000000002820 ; =============== S U B R O U T I N E =======================================
.text:0000000000002820
.text:0000000000002820 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002820
.text:0000000000002820 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002820                 lea     rdi, __bss_start
.text:0000000000002827                 lea     rsi, __bss_start
.text:000000000000282E                 push    rbp
.text:000000000000282F                 sub     rsi, rdi
.text:0000000000002832                 mov     rbp, rsp
.text:0000000000002835                 sar     rsi, 3
.text:0000000000002839                 mov     rax, rsi
.text:000000000000283C                 shr     rax, 3Fh
.text:0000000000002840                 add     rsi, rax
.text:0000000000002843                 sar     rsi, 1
.text:0000000000002846                 jz      short loc_2860
.text:0000000000002848                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000284F                 test    rax, rax
.text:0000000000002852                 jz      short loc_2860
.text:0000000000002854                 pop     rbp
.text:0000000000002855                 jmp     rax
.text:0000000000002855 ; ---------------------------------------------------------------------------
.text:0000000000002857                 align 20h
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002860                                         ; register_tm_clones+32↑j
.text:0000000000002860                 pop     rbp
.text:0000000000002861                 retn
.text:0000000000002861 register_tm_clones endp
.text:0000000000002861
.text:0000000000002861 ; ---------------------------------------------------------------------------
.text:0000000000002862                 align 10h
.text:0000000000002870
.text:0000000000002870 ; =============== S U B R O U T I N E =======================================
.text:0000000000002870
.text:0000000000002870 ; Attributes: info_from_lumina
.text:0000000000002870
.text:0000000000002870 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002870                 cmp     cs:completed_7697, 0
.text:0000000000002877                 jnz     short locret_28A8
.text:0000000000002879                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002881                 push    rbp
.text:0000000000002882                 mov     rbp, rsp
.text:0000000000002885                 jz      short loc_2893
.text:0000000000002887                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000288E                 call    __cxa_finalize
.text:0000000000002893
.text:0000000000002893 loc_2893:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002893                 call    deregister_tm_clones
.text:0000000000002898                 mov     cs:completed_7697, 1
.text:000000000000289F                 pop     rbp
.text:00000000000028A0                 retn
.text:00000000000028A0 ; ---------------------------------------------------------------------------
.text:00000000000028A1                 align 8
.text:00000000000028A8
.text:00000000000028A8 locret_28A8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000028A8                 rep retn
.text:00000000000028A8 __do_global_dtors_aux endp
.text:00000000000028A8
.text:00000000000028A8 ; ---------------------------------------------------------------------------
.text:00000000000028AA                 align 10h
.text:00000000000028B0
.text:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028B0
.text:00000000000028B0 ; Attributes: bp-based frame
.text:00000000000028B0
.text:00000000000028B0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000028B0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000028B0                 push    rbp
.text:00000000000028B1                 mov     rbp, rsp
.text:00000000000028B4                 pop     rbp
.text:00000000000028B5                 jmp     register_tm_clones
.text:00000000000028B5 frame_dummy     endp
.text:00000000000028B5
.text:00000000000028B5 ; ---------------------------------------------------------------------------
.text:00000000000028BA                 align 20h
.text:00000000000028C0
.text:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028C0
.text:00000000000028C0
.text:00000000000028C0 make_format     proc near               ; CODE XREF: out_uint_x+1A↓p
.text:00000000000028C0                                         ; out_string+1A↓p ...
.text:00000000000028C0
.text:00000000000028C0 s               = qword ptr -48h
.text:00000000000028C0 src             = qword ptr -40h
.text:00000000000028C0
.text:00000000000028C0 ; __unwind {
.text:00000000000028C0                 push    r15
.text:00000000000028C2                 push    r14
.text:00000000000028C4                 push    r13
.text:00000000000028C6                 push    r12
.text:00000000000028C8                 lea     r12, [rdi+rsi]
.text:00000000000028CC                 push    rbp
.text:00000000000028CD                 lea     rbp, [rdi+1]
.text:00000000000028D1                 push    rbx
.text:00000000000028D2                 lea     r13, printf_flags ; "'-+ #0I"
.text:00000000000028D9                 sub     rsp, 18h
.text:00000000000028DD                 cmp     rbp, r12
.text:00000000000028E0                 mov     rbx, rbp
.text:00000000000028E3                 mov     [rsp+48h+s], rdx
.text:00000000000028E7                 mov     [rsp+48h+src], rcx
.text:00000000000028EC                 jb      short loc_2912
.text:00000000000028EE                 jmp     short loc_295B
.text:00000000000028F0 ; ---------------------------------------------------------------------------
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: make_format+67↓j
.text:00000000000028F0                 mov     rdi, [rsp+48h+s] ; s
.text:00000000000028F4                 mov     esi, r14d       ; c
.text:00000000000028F7                 call    _strchr
.text:00000000000028FC                 test    rax, rax
.text:00000000000028FF                 jz      short loc_2909
.text:0000000000002901                 mov     [rbp+0], r15b
.text:0000000000002905                 add     rbp, 1
.text:0000000000002909
.text:0000000000002909 loc_2909:                               ; CODE XREF: make_format+3F↑j
.text:0000000000002909                 add     rbx, 1
.text:000000000000290D                 cmp     r12, rbx
.text:0000000000002910                 jbe     short loc_295B
.text:0000000000002912
.text:0000000000002912 loc_2912:                               ; CODE XREF: make_format+2C↑j
.text:0000000000002912                 movsx   r14d, byte ptr [rbx]
.text:0000000000002916                 mov     rdi, r13        ; s
.text:0000000000002919                 mov     esi, r14d       ; c
.text:000000000000291C                 mov     r15d, r14d
.text:000000000000291F                 call    _strchr
.text:0000000000002924                 test    rax, rax
.text:0000000000002927                 jnz     short loc_28F0
.text:0000000000002929                 cmp     rbx, r12
.text:000000000000292C                 jnb     short loc_295B
.text:000000000000292E                 mov     rsi, r12
.text:0000000000002931                 mov     rcx, rbx
.text:0000000000002934                 mov     rax, rbp
.text:0000000000002937                 sub     rsi, rbx
.text:000000000000293A                 add     rsi, rbp
.text:000000000000293D                 jmp     short loc_2944
.text:000000000000293D ; ---------------------------------------------------------------------------
.text:000000000000293F                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: make_format+93↓j
.text:0000000000002940                 movzx   r15d, byte ptr [rcx]
.text:0000000000002944
.text:0000000000002944 loc_2944:                               ; CODE XREF: make_format+7D↑j
.text:0000000000002944                 add     rax, 1
.text:0000000000002948                 add     rcx, 1
.text:000000000000294C                 mov     [rax-1], r15b
.text:0000000000002950                 cmp     rax, rsi
.text:0000000000002953                 jnz     short loc_2940
.text:0000000000002955                 sub     r12, rbx
.text:0000000000002958                 add     rbp, r12
.text:000000000000295B
.text:000000000000295B loc_295B:                               ; CODE XREF: make_format+2E↑j
.text:000000000000295B                                         ; make_format+50↑j ...
.text:000000000000295B                 mov     rsi, [rsp+48h+src] ; src
.text:0000000000002960                 add     rsp, 18h
.text:0000000000002964                 mov     rdi, rbp        ; dest
.text:0000000000002967                 pop     rbx
.text:0000000000002968                 pop     rbp
.text:0000000000002969                 pop     r12
.text:000000000000296B                 pop     r13
.text:000000000000296D                 pop     r14
.text:000000000000296F                 pop     r15
.text:0000000000002971                 jmp     _strcpy
.text:0000000000002971 ; } // starts at 28C0
.text:0000000000002971 make_format     endp
.text:0000000000002971
.text:0000000000002971 ; ---------------------------------------------------------------------------
.text:0000000000002976                 align 20h
.text:0000000000002980
.text:0000000000002980 ; =============== S U B R O U T I N E =======================================
.text:0000000000002980
.text:0000000000002980
.text:0000000000002980 out_uint_x      proc near               ; CODE XREF: print_statfs+5B↓p
.text:0000000000002980                                         ; print_statfs+19F↓p ...
.text:0000000000002980 ; __unwind {
.text:0000000000002980                 push    rbp
.text:0000000000002981                 push    rbx
.text:0000000000002982                 mov     rbp, rdx
.text:0000000000002985                 lea     rcx, unk_DA84
.text:000000000000298C                 lea     rdx, unk_DA87
.text:0000000000002993                 mov     rbx, rdi
.text:0000000000002996                 sub     rsp, 8
.text:000000000000299A                 call    make_format
.text:000000000000299F                 add     rsp, 8
.text:00000000000029A3                 mov     rdx, rbp
.text:00000000000029A6                 mov     rsi, rbx
.text:00000000000029A9                 pop     rbx
.text:00000000000029AA                 pop     rbp
.text:00000000000029AB                 mov     edi, 1
.text:00000000000029B0                 xor     eax, eax
.text:00000000000029B2                 jmp     ___printf_chk
.text:00000000000029B2 ; } // starts at 2980
.text:00000000000029B2 out_uint_x      endp
.text:00000000000029B2
.text:00000000000029B2 ; ---------------------------------------------------------------------------
.text:00000000000029B7                 align 20h
.text:00000000000029C0
.text:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029C0
.text:00000000000029C0
.text:00000000000029C0 out_string      proc near               ; CODE XREF: print_statfs+12E↓p
.text:00000000000029C0                                         ; print_statfs+1C3↓p ...
.text:00000000000029C0 ; __unwind {
.text:00000000000029C0                 push    rbp
.text:00000000000029C1                 push    rbx
.text:00000000000029C2                 mov     rbp, rdx
.text:00000000000029C5                 lea     rcx, aS_0+3     ; "s"
.text:00000000000029CC                 lea     rdx, aLt+2      ; "-"
.text:00000000000029D3                 mov     rbx, rdi
.text:00000000000029D6                 sub     rsp, 8
.text:00000000000029DA                 call    make_format
.text:00000000000029DF                 add     rsp, 8
.text:00000000000029E3                 mov     rdx, rbp
.text:00000000000029E6                 mov     rsi, rbx
.text:00000000000029E9                 pop     rbx
.text:00000000000029EA                 pop     rbp
.text:00000000000029EB                 mov     edi, 1
.text:00000000000029F0                 xor     eax, eax
.text:00000000000029F2                 jmp     ___printf_chk
.text:00000000000029F2 ; } // starts at 29C0
.text:00000000000029F2 out_string      endp
.text:00000000000029F2
.text:00000000000029F2 ; ---------------------------------------------------------------------------
.text:00000000000029F7                 align 20h
.text:0000000000002A00
.text:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A00
.text:0000000000002A00
.text:0000000000002A00 out_uint        proc near               ; CODE XREF: print_statfs+43↓p
.text:0000000000002A00                                         ; print_statfs+1B4↓p ...
.text:0000000000002A00 ; __unwind {
.text:0000000000002A00                 push    rbp
.text:0000000000002A01                 push    rbx
.text:0000000000002A02                 mov     rbp, rdx
.text:0000000000002A05                 lea     rcx, unk_DA8B
.text:0000000000002A0C                 lea     rdx, unk_DA8E
.text:0000000000002A13                 mov     rbx, rdi
.text:0000000000002A16                 sub     rsp, 8
.text:0000000000002A1A                 call    make_format
.text:0000000000002A1F                 add     rsp, 8
.text:0000000000002A23                 mov     rdx, rbp
.text:0000000000002A26                 mov     rsi, rbx
.text:0000000000002A29                 pop     rbx
.text:0000000000002A2A                 pop     rbp
.text:0000000000002A2B                 mov     edi, 1
.text:0000000000002A30                 xor     eax, eax
.text:0000000000002A32                 jmp     ___printf_chk
.text:0000000000002A32 ; } // starts at 2A00
.text:0000000000002A32 out_uint        endp
.text:0000000000002A32
.text:0000000000002A32 ; ---------------------------------------------------------------------------
.text:0000000000002A37                 align 20h
.text:0000000000002A40
.text:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A40
.text:0000000000002A40
.text:0000000000002A40 out_int         proc near               ; CODE XREF: print_statfs+144↓p
.text:0000000000002A40                                         ; print_statfs+154↓p ...
.text:0000000000002A40 ; __unwind {
.text:0000000000002A40                 push    rbp
.text:0000000000002A41                 push    rbx
.text:0000000000002A42                 mov     rbp, rdx
.text:0000000000002A45                 lea     rcx, unk_DA92
.text:0000000000002A4C                 lea     rdx, a0         ; "'-+ 0"
.text:0000000000002A53                 mov     rbx, rdi
.text:0000000000002A56                 sub     rsp, 8
.text:0000000000002A5A                 call    make_format
.text:0000000000002A5F                 add     rsp, 8
.text:0000000000002A63                 mov     rdx, rbp
.text:0000000000002A66                 mov     rsi, rbx
.text:0000000000002A69                 pop     rbx
.text:0000000000002A6A                 pop     rbp
.text:0000000000002A6B                 mov     edi, 1
.text:0000000000002A70                 xor     eax, eax
.text:0000000000002A72                 jmp     ___printf_chk
.text:0000000000002A72 ; } // starts at 2A40
.text:0000000000002A72 out_int         endp
.text:0000000000002A72
.text:0000000000002A72 ; ---------------------------------------------------------------------------
.text:0000000000002A77                 align 20h
.text:0000000000002A80
.text:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A80
.text:0000000000002A80
.text:0000000000002A80 print_statfs    proc near               ; DATA XREF: main+2A8↑o
.text:0000000000002A80 ; __unwind {
.text:0000000000002A80                 push    rbp
.text:0000000000002A81                 lea     eax, [rdx-53h]  ; switch 34 cases
.text:0000000000002A84                 push    rbx
.text:0000000000002A85                 sub     rsp, 8
.text:0000000000002A89                 cmp     eax, 21h
.text:0000000000002A8C                 ja      def_2AA6        ; jumptable 0000000000002AA6 default case, cases 85-96,101,103,104,106,107,109,111-114
.text:0000000000002A92                 lea     rcx, jpt_2AA6
.text:0000000000002A99                 mov     rbx, rdi
.text:0000000000002A9C                 mov     rbp, rsi
.text:0000000000002A9F                 movsxd  rax, ds:(jpt_2AA6 - 0DFA0h)[rcx+rax*4]
.text:0000000000002AA3                 add     rax, rcx
.text:0000000000002AA6                 jmp     rax             ; switch jump
.text:0000000000002AA6 ; ---------------------------------------------------------------------------
.text:0000000000002AA8                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002AB0                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002AB0                 mov     rdx, [r9+48h]   ; jumptable 0000000000002AA6 case 83
.text:0000000000002AB4                 test    rdx, rdx
.text:0000000000002AB7                 jnz     short loc_2ABD
.text:0000000000002AB9
.text:0000000000002AB9 loc_2AB9:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002AB9                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002AB9                 mov     rdx, [r9+8]     ; jumptable 0000000000002AA6 case 115
.text:0000000000002ABD
.text:0000000000002ABD loc_2ABD:                               ; CODE XREF: print_statfs+37↑j
.text:0000000000002ABD                                         ; print_statfs+164↓j
.text:0000000000002ABD                 mov     rsi, rbp
.text:0000000000002AC0                 mov     rdi, rbx
.text:0000000000002AC3                 call    out_uint
.text:0000000000002AC8
.text:0000000000002AC8 loc_2AC8:                               ; CODE XREF: print_statfs+60↓j
.text:0000000000002AC8                                         ; print_statfs+133↓j ...
.text:0000000000002AC8                 add     rsp, 8
.text:0000000000002ACC                 xor     eax, eax
.text:0000000000002ACE                 pop     rbx
.text:0000000000002ACF                 pop     rbp
.text:0000000000002AD0                 retn
.text:0000000000002AD0 ; ---------------------------------------------------------------------------
.text:0000000000002AD1                 align 8
.text:0000000000002AD8
.text:0000000000002AD8 loc_2AD8:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002AD8                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002AD8                 mov     rdx, [r9]       ; jumptable 0000000000002AA6 case 116
.text:0000000000002ADB                 call    out_uint_x
.text:0000000000002AE0                 jmp     short loc_2AC8
.text:0000000000002AE0 ; ---------------------------------------------------------------------------
.text:0000000000002AE2                 align 8
.text:0000000000002AE8
.text:0000000000002AE8 loc_2AE8:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002AE8                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002AE8                 mov     r8, [r9]        ; jumptable 0000000000002AA6 case 84
.text:0000000000002AEB                 cmp     r8, 2BAD1DEAh
.text:0000000000002AF2                 jz      loc_36BD
.text:0000000000002AF8                 jle     loc_2C78
.text:0000000000002AFE                 cmp     r8, 65735543h
.text:0000000000002B05                 jz      loc_3741
.text:0000000000002B0B                 jg      loc_2D10
.text:0000000000002B11                 cmp     r8, 534F434Bh
.text:0000000000002B18                 jz      loc_371D
.text:0000000000002B1E                 jg      loc_2E20
.text:0000000000002B24                 cmp     r8, 45584653h
.text:0000000000002B2B                 jz      loc_36A5
.text:0000000000002B31                 jle     loc_3230
.text:0000000000002B37                 cmp     r8, 5346314Dh
.text:0000000000002B3E                 lea     rdx, aM1fs      ; "m1fs"
.text:0000000000002B45                 jz      short loc_2BA8
.text:0000000000002B47                 jg      loc_353E
.text:0000000000002B4D                 cmp     r8, 50495045h
.text:0000000000002B54                 lea     rdx, aPipefs    ; "pipefs"
.text:0000000000002B5B                 jz      short loc_2BA8
.text:0000000000002B5D                 cmp     r8, 52654973h
.text:0000000000002B64                 lea     rdx, aReiserfs  ; "reiserfs"
.text:0000000000002B6B                 jz      short loc_2BA8
.text:0000000000002B6D                 cmp     r8, 47504653h
.text:0000000000002B74                 lea     rdx, aGpfs      ; "gpfs"
.text:0000000000002B7B                 jz      short loc_2BA8
.text:0000000000002B7D
.text:0000000000002B7D loc_2B7D:                               ; CODE XREF: print_statfs+281↓j
.text:0000000000002B7D                                         ; print_statfs+307↓j ...
.text:0000000000002B7D                 lea     rcx, aUnknown0xLx ; "UNKNOWN (0x%lx)"
.text:0000000000002B84                 lea     rdi, buf_7290
.text:0000000000002B8B                 mov     edx, 1Dh
.text:0000000000002B90                 mov     esi, 1
.text:0000000000002B95                 xor     eax, eax
.text:0000000000002B97                 call    ___sprintf_chk
.text:0000000000002B9C                 lea     rdx, buf_7290
.text:0000000000002BA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: print_statfs+C5↑j
.text:0000000000002BA8                                         ; print_statfs+DB↑j ...
.text:0000000000002BA8                 mov     rsi, rbp
.text:0000000000002BAB                 mov     rdi, rbx
.text:0000000000002BAE                 call    out_string
.text:0000000000002BB3                 jmp     loc_2AC8
.text:0000000000002BB3 ; ---------------------------------------------------------------------------
.text:0000000000002BB8                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002BC0                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002BC0                 mov     rdx, [r9+20h]   ; jumptable 0000000000002AA6 case 97
.text:0000000000002BC4                 call    out_int
.text:0000000000002BC9                 jmp     loc_2AC8
.text:0000000000002BC9 ; ---------------------------------------------------------------------------
.text:0000000000002BCE                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002BD0                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002BD0                 mov     rdx, [r9+10h]   ; jumptable 0000000000002AA6 case 98
.text:0000000000002BD4                 call    out_int
.text:0000000000002BD9                 jmp     loc_2AC8
.text:0000000000002BD9 ; ---------------------------------------------------------------------------
.text:0000000000002BDE                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002BE0                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002BE0                 mov     rdx, [r9+28h]   ; jumptable 0000000000002AA6 case 99
.text:0000000000002BE4                 jmp     loc_2ABD
.text:0000000000002BE4 ; ---------------------------------------------------------------------------
.text:0000000000002BE9                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002BF0                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002BF0                 mov     rdx, [r9+30h]   ; jumptable 0000000000002AA6 case 100
.text:0000000000002BF4                 call    out_int
.text:0000000000002BF9                 jmp     loc_2AC8
.text:0000000000002BF9 ; ---------------------------------------------------------------------------
.text:0000000000002BFE                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002C00                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002C00                 mov     rdx, [r9+18h]   ; jumptable 0000000000002AA6 case 102
.text:0000000000002C04                 call    out_int
.text:0000000000002C09                 jmp     loc_2AC8
.text:0000000000002C09 ; ---------------------------------------------------------------------------
.text:0000000000002C0E                 align 10h
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002C10                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002C10                 mov     edx, [r9+38h]   ; jumptable 0000000000002AA6 case 105
.text:0000000000002C14                 mov     eax, [r9+3Ch]
.text:0000000000002C18                 shl     rdx, 20h
.text:0000000000002C1C                 or      rdx, rax
.text:0000000000002C1F                 call    out_uint_x
.text:0000000000002C24                 jmp     loc_2AC8
.text:0000000000002C24 ; ---------------------------------------------------------------------------
.text:0000000000002C29                 align 10h
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002C30                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002C30                 mov     rdx, [r9+40h]   ; jumptable 0000000000002AA6 case 108
.text:0000000000002C34                 call    out_uint
.text:0000000000002C39                 jmp     loc_2AC8
.text:0000000000002C39 ; ---------------------------------------------------------------------------
.text:0000000000002C3E                 align 20h
.text:0000000000002C40
.text:0000000000002C40 loc_2C40:                               ; CODE XREF: print_statfs+26↑j
.text:0000000000002C40                                         ; DATA XREF: .rodata:jpt_2AA6↓o
.text:0000000000002C40                 mov     rdx, r8         ; jumptable 0000000000002AA6 case 110
.text:0000000000002C43                 call    out_string
.text:0000000000002C48                 jmp     loc_2AC8
.text:0000000000002C48 ; ---------------------------------------------------------------------------
.text:0000000000002C4D                 align 10h
.text:0000000000002C50
.text:0000000000002C50 def_2AA6:                               ; CODE XREF: print_statfs+C↑j
.text:0000000000002C50                                         ; print_statfs+26↑j
.text:0000000000002C50                                         ; DATA XREF: ...
.text:0000000000002C50                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 0000000000002AA6 default case, cases 85-96,101,103,104,106,107,109,111-114
.text:0000000000002C57                 mov     rax, [rdi+28h]
.text:0000000000002C5B                 cmp     rax, [rdi+30h]
.text:0000000000002C5F                 jnb     loc_2FE0
.text:0000000000002C65                 lea     rdx, [rax+1]
.text:0000000000002C69                 mov     [rdi+28h], rdx
.text:0000000000002C6D                 mov     byte ptr [rax], 3Fh ; '?'
.text:0000000000002C70                 jmp     loc_2AC8
.text:0000000000002C70 ; ---------------------------------------------------------------------------
.text:0000000000002C75                 align 8
.text:0000000000002C78
.text:0000000000002C78 loc_2C78:                               ; CODE XREF: print_statfs+78↑j
.text:0000000000002C78                 cmp     r8, 0ADF5h
.text:0000000000002C7F                 jz      loc_36F9
.text:0000000000002C85                 jg      loc_2D98
.text:0000000000002C8B                 cmp     r8, 4244h
.text:0000000000002C92                 jz      loc_36ED
.text:0000000000002C98                 jg      loc_2F70
.text:0000000000002C9E                 cmp     r8, 138Fh
.text:0000000000002CA5                 jz      loc_36D5
.text:0000000000002CAB                 jle     loc_3290
.text:0000000000002CB1                 cmp     r8, 3434h
.text:0000000000002CB8                 lea     rdx, aNilfs     ; "nilfs"
.text:0000000000002CBF                 jz      loc_2BA8
.text:0000000000002CC5                 jg      loc_357F
.text:0000000000002CCB                 cmp     r8, 2468h
.text:0000000000002CD2                 lea     rdx, aMinixV2   ; "minix v2"
.text:0000000000002CD9                 jz      loc_2BA8
.text:0000000000002CDF                 cmp     r8, 2478h
.text:0000000000002CE6                 lea     rdx, aMinixV230Char ; "minix v2 (30 char.)"
.text:0000000000002CED                 jz      loc_2BA8
.text:0000000000002CF3                 cmp     r8, 1CD1h
.text:0000000000002CFA                 lea     rdx, aDevpts    ; "devpts"
.text:0000000000002D01                 jnz     loc_2B7D
.text:0000000000002D07                 jmp     loc_2BA8
.text:0000000000002D07 ; ---------------------------------------------------------------------------
.text:0000000000002D0C                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: print_statfs+8B↑j
.text:0000000000002D10                 mov     eax, 858458F6h
.text:0000000000002D15                 cmp     r8, rax
.text:0000000000002D18                 jz      loc_3705
.text:0000000000002D1E                 jg      loc_2EF8
.text:0000000000002D24                 cmp     r8, 73636673h
.text:0000000000002D2B                 jz      loc_3729
.text:0000000000002D31                 jle     loc_31D0
.text:0000000000002D37                 cmp     r8, 7461636Fh
.text:0000000000002D3E                 lea     rdx, aOcfs2     ; "ocfs2"
.text:0000000000002D45                 jz      loc_2BA8
.text:0000000000002D4B                 jg      loc_33F4
.text:0000000000002D51                 cmp     r8, 73727279h
.text:0000000000002D58                 lea     rdx, aBtrfsTest ; "btrfs_test"
.text:0000000000002D5F                 jz      loc_2BA8
.text:0000000000002D65                 cmp     r8, 73757245h
.text:0000000000002D6C                 lea     rdx, aCoda      ; "coda"
.text:0000000000002D73                 jz      loc_2BA8
.text:0000000000002D79                 cmp     r8, 73717368h
.text:0000000000002D80                 lea     rdx, aSquashfs  ; "squashfs"
.text:0000000000002D87                 jnz     loc_2B7D
.text:0000000000002D8D                 jmp     loc_2BA8
.text:0000000000002D8D ; ---------------------------------------------------------------------------
.text:0000000000002D92                 align 8
.text:0000000000002D98
.text:0000000000002D98 loc_2D98:                               ; CODE XREF: print_statfs+205↑j
.text:0000000000002D98                 cmp     r8, 12FF7B5h
.text:0000000000002D9F                 jz      loc_36C9
.text:0000000000002DA5                 jg      loc_2E8E
.text:0000000000002DAB                 cmp     r8, 414A53h
.text:0000000000002DB2                 jz      loc_374D
.text:0000000000002DB8                 jle     loc_3118
.text:0000000000002DBE                 cmp     r8, 1021997h
.text:0000000000002DC5                 lea     rdx, aV9fs      ; "v9fs"
.text:0000000000002DCC                 jz      loc_2BA8
.text:0000000000002DD2                 jg      loc_332C
.text:0000000000002DD8                 cmp     r8, 0C36400h
.text:0000000000002DDF                 lea     rdx, aCeph      ; "ceph"
.text:0000000000002DE6                 jz      loc_2BA8
.text:0000000000002DEC                 cmp     r8, 1021994h
.text:0000000000002DF3                 lea     rdx, aTmpfs     ; "tmpfs"
.text:0000000000002DFA                 jz      loc_2BA8
.text:0000000000002E00                 cmp     r8, 0C0FFEEh
.text:0000000000002E07                 lea     rdx, aHostfs    ; "hostfs"
.text:0000000000002E0E                 jnz     loc_2B7D
.text:0000000000002E14                 jmp     loc_2BA8
.text:0000000000002E14 ; ---------------------------------------------------------------------------
.text:0000000000002E19                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: print_statfs+9E↑j
.text:0000000000002E20                 cmp     r8, 6165676Ch
.text:0000000000002E27                 jz      loc_3711
.text:0000000000002E2D                 jg      loc_2FEF
.text:0000000000002E33                 cmp     r8, 58465342h
.text:0000000000002E3A                 lea     rdx, aDaxfs+2   ; "xfs"
.text:0000000000002E41                 jz      loc_2BA8
.text:0000000000002E47                 jg      loc_32EB
.text:0000000000002E4D                 cmp     r8, 565A4653h
.text:0000000000002E54                 lea     rdx, aVzfs      ; "vzfs"
.text:0000000000002E5B                 jz      loc_2BA8
.text:0000000000002E61                 cmp     r8, 58295829h
.text:0000000000002E68                 lea     rdx, aZsmallocfs ; "zsmallocfs"
.text:0000000000002E6F                 jz      loc_2BA8
.text:0000000000002E75                 cmp     r8, 54190100h
.text:0000000000002E7C                 jnz     loc_2B7D
.text:0000000000002E82
.text:0000000000002E82 loc_2E82:                               ; CODE XREF: print_statfs+6B9↓j
.text:0000000000002E82                 lea     rdx, aAufs+1    ; "ufs"
.text:0000000000002E89                 jmp     loc_2BA8
.text:0000000000002E8E ; ---------------------------------------------------------------------------
.text:0000000000002E8E
.text:0000000000002E8E loc_2E8E:                               ; CODE XREF: print_statfs+325↑j
.text:0000000000002E8E                 cmp     r8, 11307854h
.text:0000000000002E95                 jz      loc_36E1
.text:0000000000002E9B                 jg      loc_3050
.text:0000000000002EA1                 cmp     r8, 7655821h
.text:0000000000002EA8                 lea     rdx, aRdt       ; "rdt"
.text:0000000000002EAF                 jz      loc_2BA8
.text:0000000000002EB5                 jg      loc_3435
.text:0000000000002EBB                 cmp     r8, 12FF7B7h
.text:0000000000002EC2                 lea     rdx, aCoh       ; "coh"
.text:0000000000002EC9                 jz      loc_2BA8
.text:0000000000002ECF                 lea     rdx, aSysv2     ; "sysv2"
.text:0000000000002ED6                 jl      loc_2BA8
.text:0000000000002EDC                 cmp     r8, 13111A8h
.text:0000000000002EE3                 lea     rdx, aIbrix     ; "ibrix"
.text:0000000000002EEA                 jz      loc_2BA8
.text:0000000000002EF0                 jmp     loc_2B7D
.text:0000000000002EF0 ; ---------------------------------------------------------------------------
.text:0000000000002EF5                 align 8
.text:0000000000002EF8
.text:0000000000002EF8 loc_2EF8:                               ; CODE XREF: print_statfs+29E↑j
.text:0000000000002EF8                 mov     eax, 0C97E8168h
.text:0000000000002EFD                 cmp     r8, rax
.text:0000000000002F00                 jz      loc_36B1
.text:0000000000002F06                 jg      loc_30B0
.text:0000000000002F0C                 sub     rax, 1EA6D67Eh
.text:0000000000002F12                 lea     rdx, aPanfs     ; "panfs"
.text:0000000000002F19                 cmp     r8, rax
.text:0000000000002F1C                 jz      loc_2BA8
.text:0000000000002F22                 jg      loc_34B7
.text:0000000000002F28                 sub     rax, 155351F4h
.text:0000000000002F2E                 lea     rdx, aHugetlbfs ; "hugetlbfs"
.text:0000000000002F35                 cmp     r8, rax
.text:0000000000002F38                 jz      loc_2BA8
.text:0000000000002F3E                 add     rax, 0F7DA3FFh
.text:0000000000002F44                 lea     rdx, aVxfs      ; "vxfs"
.text:0000000000002F4B                 cmp     r8, rax
.text:0000000000002F4E                 jz      loc_2BA8
.text:0000000000002F54                 sub     rax, 13DE94B7h
.text:0000000000002F5A                 lea     rdx, aBtrfs     ; "btrfs"
.text:0000000000002F61                 cmp     r8, rax
.text:0000000000002F64                 jnz     loc_2B7D
.text:0000000000002F6A                 jmp     loc_2BA8
.text:0000000000002F6A ; ---------------------------------------------------------------------------
.text:0000000000002F6F                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: print_statfs+218↑j
.text:0000000000002F70                 cmp     r8, 5DF5h
.text:0000000000002F77                 jz      loc_3735
.text:0000000000002F7D                 jle     loc_3170
.text:0000000000002F83                 cmp     r8, 9660h
.text:0000000000002F8A                 jz      loc_35A9
.text:0000000000002F90                 jg      loc_33B3
.text:0000000000002F96                 cmp     r8, 7275h
.text:0000000000002F9D                 lea     rdx, aRomfs     ; "romfs"
.text:0000000000002FA4                 jz      loc_2BA8
.text:0000000000002FAA                 cmp     r8, 72B6h
.text:0000000000002FB1                 lea     rdx, aJffs2     ; "jffs2"
.text:0000000000002FB8                 jz      loc_2BA8
.text:0000000000002FBE                 cmp     r8, 6969h
.text:0000000000002FC5                 lea     rdx, aPanfs+2   ; "nfs"
.text:0000000000002FCC                 jnz     loc_2B7D
.text:0000000000002FD2                 jmp     loc_2BA8
.text:0000000000002FD2 ; ---------------------------------------------------------------------------
.text:0000000000002FD7                 align 20h
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: print_statfs+1DF↑j
.text:0000000000002FE0                 mov     esi, 3Fh ; '?'  ; int
.text:0000000000002FE5                 call    ___overflow
.text:0000000000002FEA                 jmp     loc_2AC8
.text:0000000000002FEF ; ---------------------------------------------------------------------------
.text:0000000000002FEF
.text:0000000000002FEF loc_2FEF:                               ; CODE XREF: print_statfs+3AD↑j
.text:0000000000002FEF                 cmp     r8, 62656572h
.text:0000000000002FF6                 lea     rdx, aSysfs     ; "sysfs"
.text:0000000000002FFD                 jz      loc_2BA8
.text:0000000000003003                 jg      loc_3476
.text:0000000000003009                 cmp     r8, 62646576h
.text:0000000000003010                 lea     rdx, aBdevfs    ; "bdevfs"
.text:0000000000003017                 jz      loc_2BA8
.text:000000000000301D                 cmp     r8, 62656570h
.text:0000000000003024                 lea     rdx, aConfigfs  ; "configfs"
.text:000000000000302B                 jz      loc_2BA8
.text:0000000000003031                 cmp     r8, 61756673h
.text:0000000000003038                 lea     rdx, aAufs      ; "aufs"
.text:000000000000303F                 jnz     loc_2B7D
.text:0000000000003045                 jmp     loc_2BA8
.text:0000000000003045 ; ---------------------------------------------------------------------------
.text:000000000000304A                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: print_statfs+41B↑j
.text:0000000000003050                 cmp     r8, 19830326h
.text:0000000000003057                 lea     rdx, aFhgfs     ; "fhgfs"
.text:000000000000305E                 jz      loc_2BA8
.text:0000000000003064                 jg      loc_34FD
.text:000000000000306A                 cmp     r8, 15013346h
.text:0000000000003071                 lea     rdx, aUdf       ; "udf"
.text:0000000000003078                 jz      loc_2BA8
.text:000000000000307E                 cmp     r8, 19800202h
.text:0000000000003085                 lea     rdx, aMqueue    ; "mqueue"
.text:000000000000308C                 jz      loc_2BA8
.text:0000000000003092                 cmp     r8, 13661366h
.text:0000000000003099                 lea     rdx, aBalloonKvmFs ; "balloon-kvm-fs"
.text:00000000000030A0                 jnz     loc_2B7D
.text:00000000000030A6                 jmp     loc_2BA8
.text:00000000000030A6 ; ---------------------------------------------------------------------------
.text:00000000000030AB                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: print_statfs+486↑j
.text:00000000000030B0                 mov     eax, 0F97CFF8Ch
.text:00000000000030B5                 lea     rdx, aSelinux   ; "selinux"
.text:00000000000030BC                 cmp     r8, rax
.text:00000000000030BF                 jz      loc_2BA8
.text:00000000000030C5                 jg      loc_336D
.text:00000000000030CB                 sub     rax, 1B1E7DA8h
.text:00000000000030D1                 lea     rdx, aEfivarfs  ; "efivarfs"
.text:00000000000030D8                 cmp     r8, rax
.text:00000000000030DB                 jz      loc_2BA8
.text:00000000000030E1                 add     rax, 14969E2Ch
.text:00000000000030E7                 lea     rdx, aF2fs      ; "f2fs"
.text:00000000000030EE                 cmp     r8, rax
.text:00000000000030F1                 jz      loc_2BA8
.text:00000000000030F7                 sub     rax, 27F6D5FFh
.text:00000000000030FD                 lea     rdx, aBpfFs     ; "bpf_fs"
.text:0000000000003104                 cmp     r8, rax
.text:0000000000003107                 jnz     loc_2B7D
.text:000000000000310D                 jmp     loc_2BA8
.text:000000000000310D ; ---------------------------------------------------------------------------
.text:0000000000003112                 align 8
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: print_statfs+338↑j
.text:0000000000003118                 cmp     r8, 0EF53h
.text:000000000000311F                 lea     rdx, aExt2Ext3  ; "ext2/ext3"
.text:0000000000003126                 jz      loc_2BA8
.text:000000000000312C                 jle     loc_35E8
.text:0000000000003132                 cmp     r8, offset unk_11954
.text:0000000000003139                 jz      loc_2E82
.text:000000000000313F                 cmp     r8, 27E0EBh
.text:0000000000003146                 lea     rdx, aCgroupfs  ; "cgroupfs"
.text:000000000000314D                 jz      loc_2BA8
.text:0000000000003153                 cmp     r8, 0F15Fh
.text:000000000000315A                 lea     rdx, aEcryptfs  ; "ecryptfs"
.text:0000000000003161                 jnz     loc_2B7D
.text:0000000000003167                 jmp     loc_2BA8
.text:0000000000003167 ; ---------------------------------------------------------------------------
.text:000000000000316C                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: print_statfs+4FD↑j
.text:0000000000003170                 cmp     r8, 4D44h
.text:0000000000003177                 lea     rdx, aMsdos     ; "msdos"
.text:000000000000317E                 jz      loc_2BA8
.text:0000000000003184                 jle     loc_35B5
.text:000000000000318A                 cmp     r8, 517Bh
.text:0000000000003191                 lea     rdx, aSmb       ; "smb"
.text:0000000000003198                 jz      loc_2BA8
.text:000000000000319E                 cmp     r8, 564Ch
.text:00000000000031A5                 lea     rdx, aNovell    ; "novell"
.text:00000000000031AC                 jz      loc_2BA8
.text:00000000000031B2                 cmp     r8, 4D5Ah
.text:00000000000031B9                 lea     rdx, aMinix3    ; "minix3"
.text:00000000000031C0                 jnz     loc_2B7D
.text:00000000000031C6                 jmp     loc_2BA8
.text:00000000000031C6 ; ---------------------------------------------------------------------------
.text:00000000000031CB                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: print_statfs+2B1↑j
.text:00000000000031D0                 cmp     r8, 68191122h
.text:00000000000031D7                 lea     rdx, aQnx6      ; "qnx6"
.text:00000000000031DE                 jz      loc_2BA8
.text:00000000000031E4                 jle     loc_3678
.text:00000000000031EA                 cmp     r8, 6E667364h
.text:00000000000031F1                 lea     rdx, aNfsd      ; "nfsd"
.text:00000000000031F8                 jz      loc_2BA8
.text:00000000000031FE                 cmp     r8, 6E736673h
.text:0000000000003205                 lea     rdx, aNsfs      ; "nsfs"
.text:000000000000320C                 jz      loc_2BA8
.text:0000000000003212                 cmp     r8, 6B414653h
.text:0000000000003219                 lea     rdx, aKAfs      ; "k-afs"
.text:0000000000003220                 jnz     loc_2B7D
.text:0000000000003226                 jmp     loc_2BA8
.text:0000000000003226 ; ---------------------------------------------------------------------------
.text:000000000000322B                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: print_statfs+B1↑j
.text:0000000000003230                 cmp     r8, 42465331h
.text:0000000000003237                 lea     rdx, aBefs      ; "befs"
.text:000000000000323E                 jz      loc_2BA8
.text:0000000000003244                 jle     loc_3648
.text:000000000000324A                 cmp     r8, 43415D53h
.text:0000000000003251                 lea     rdx, aSmackfs   ; "smackfs"
.text:0000000000003258                 jz      loc_2BA8
.text:000000000000325E                 cmp     r8, 453DCD28h
.text:0000000000003265                 lea     rdx, aCramfsWend ; "cramfs-wend"
.text:000000000000326C                 jz      loc_2BA8
.text:0000000000003272                 cmp     r8, 42494E4Dh
.text:0000000000003279                 lea     rdx, aBinfmtMisc ; "binfmt_misc"
.text:0000000000003280                 jnz     loc_2B7D
.text:0000000000003286                 jmp     loc_2BA8
.text:0000000000003286 ; ---------------------------------------------------------------------------
.text:000000000000328B                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: print_statfs+22B↑j
.text:0000000000003290                 cmp     r8, 7C0h
.text:0000000000003297                 lea     rdx, aJffs      ; "jffs"
.text:000000000000329E                 jz      loc_2BA8
.text:00000000000032A4                 jle     loc_3618
.text:00000000000032AA                 cmp     r8, 137Dh
.text:00000000000032B1                 lea     rdx, aExt       ; "ext"
.text:00000000000032B8                 jz      loc_2BA8
.text:00000000000032BE                 cmp     r8, 137Fh
.text:00000000000032C5                 lea     rdx, aMinix     ; "minix"
.text:00000000000032CC                 jz      loc_2BA8
.text:00000000000032D2                 cmp     r8, 1373h
.text:00000000000032D9                 lea     rdx, aBdevfs+1  ; "devfs"
.text:00000000000032E0                 jnz     loc_2B7D
.text:00000000000032E6                 jmp     loc_2BA8
.text:00000000000032EB ; ---------------------------------------------------------------------------
.text:00000000000032EB
.text:00000000000032EB loc_32EB:                               ; CODE XREF: print_statfs+3C7↑j
.text:00000000000032EB                 cmp     r8, 5DCA2DF5h
.text:00000000000032F2                 lea     rdx, aSdcardfs  ; "sdcardfs"
.text:00000000000032F9                 jz      loc_2BA8
.text:00000000000032FF                 cmp     r8, 61636673h
.text:0000000000003306                 lea     rdx, aAcfs      ; "acfs"
.text:000000000000330D                 jz      loc_2BA8
.text:0000000000003313                 cmp     r8, 5A3C69F0h
.text:000000000000331A                 lea     rdx, aAafs      ; "aafs"
.text:0000000000003321                 jnz     loc_2B7D
.text:0000000000003327                 jmp     loc_2BA8
.text:000000000000332C ; ---------------------------------------------------------------------------
.text:000000000000332C
.text:000000000000332C loc_332C:                               ; CODE XREF: print_statfs+352↑j
.text:000000000000332C                 cmp     r8, 12FD16Dh
.text:0000000000003333                 lea     rdx, aXia       ; "xia"
.text:000000000000333A                 jz      loc_2BA8
.text:0000000000003340                 cmp     r8, 12FF7B4h
.text:0000000000003347                 lea     rdx, aXenix     ; "xenix"
.text:000000000000334E                 jz      loc_2BA8
.text:0000000000003354                 cmp     r8, 1161970h
.text:000000000000335B                 lea     rdx, aGfsGfs2   ; "gfs/gfs2"
.text:0000000000003362                 jnz     loc_2B7D
.text:0000000000003368                 jmp     loc_2BA8
.text:000000000000336D ; ---------------------------------------------------------------------------
.text:000000000000336D
.text:000000000000336D loc_336D:                               ; CODE XREF: print_statfs+645↑j
.text:000000000000336D                 mov     eax, 0FE534D42h
.text:0000000000003372                 lea     rdx, aSmb2      ; "smb2"
.text:0000000000003379                 cmp     r8, rax
.text:000000000000337C                 jz      loc_2BA8
.text:0000000000003382                 add     rax, 1000000h
.text:0000000000003388                 lea     rdx, aCifs      ; "cifs"
.text:000000000000338F                 cmp     r8, rax
.text:0000000000003392                 jz      loc_2BA8
.text:0000000000003398                 sub     rax, 5BD64F9h
.text:000000000000339E                 lea     rdx, aHpfs      ; "hpfs"
.text:00000000000033A5                 cmp     r8, rax
.text:00000000000033A8                 jnz     loc_2B7D
.text:00000000000033AE                 jmp     loc_2BA8
.text:00000000000033B3 ; ---------------------------------------------------------------------------
.text:00000000000033B3
.text:00000000000033B3 loc_33B3:                               ; CODE XREF: print_statfs+510↑j
.text:00000000000033B3                 cmp     r8, 9FA1h
.text:00000000000033BA                 lea     rdx, aOpenprom  ; "openprom"
.text:00000000000033C1                 jz      loc_2BA8
.text:00000000000033C7                 cmp     r8, 9FA2h
.text:00000000000033CE                 lea     rdx, unk_DD54
.text:00000000000033D5                 jz      loc_2BA8
.text:00000000000033DB                 cmp     r8, 9FA0h
.text:00000000000033E2                 lea     rdx, aProc      ; "proc"
.text:00000000000033E9                 jnz     loc_2B7D
.text:00000000000033EF                 jmp     loc_2BA8
.text:00000000000033F4 ; ---------------------------------------------------------------------------
.text:00000000000033F4
.text:00000000000033F4 loc_33F4:                               ; CODE XREF: print_statfs+2CB↑j
.text:00000000000033F4                 cmp     r8, 794C7630h
.text:00000000000033FB                 lea     rdx, aOverlayfs ; "overlayfs"
.text:0000000000003402                 jz      loc_2BA8
.text:0000000000003408                 cmp     r8, 7C7C6673h
.text:000000000000340F                 lea     rdx, aPrlFs     ; "prl_fs"
.text:0000000000003416                 jz      loc_2BA8
.text:000000000000341C                 cmp     r8, 74726163h
.text:0000000000003423                 lea     rdx, aTracefs   ; "tracefs"
.text:000000000000342A                 jnz     loc_2B7D
.text:0000000000003430                 jmp     loc_2BA8
.text:0000000000003435 ; ---------------------------------------------------------------------------
.text:0000000000003435
.text:0000000000003435 loc_3435:                               ; CODE XREF: print_statfs+435↑j
.text:0000000000003435                 cmp     r8, 0BAD1DEAh
.text:000000000000343C                 lea     rdx, aFutexfs   ; "futexfs"
.text:0000000000003443                 jz      loc_2BA8
.text:0000000000003449                 cmp     r8, 0BD00BD0h
.text:0000000000003450                 lea     rdx, aLustre    ; "lustre"
.text:0000000000003457                 jz      loc_2BA8
.text:000000000000345D                 cmp     r8, 9041934h
.text:0000000000003464                 lea     rdx, aAnonInodeFs ; "anon-inode FS"
.text:000000000000346B                 jnz     loc_2B7D
.text:0000000000003471                 jmp     loc_2BA8
.text:0000000000003476 ; ---------------------------------------------------------------------------
.text:0000000000003476
.text:0000000000003476 loc_3476:                               ; CODE XREF: print_statfs+583↑j
.text:0000000000003476                 cmp     r8, 64626720h
.text:000000000000347D                 lea     rdx, aDebugfs   ; "debugfs"
.text:0000000000003484                 jz      loc_2BA8
.text:000000000000348A                 cmp     r8, 64646178h
.text:0000000000003491                 lea     rdx, aDaxfs     ; "daxfs"
.text:0000000000003498                 jz      loc_2BA8
.text:000000000000349E                 cmp     r8, 63677270h
.text:00000000000034A5                 lea     rdx, aCgroup2fs ; "cgroup2fs"
.text:00000000000034AC                 jnz     loc_2B7D
.text:00000000000034B2                 jmp     loc_2BA8
.text:00000000000034B7 ; ---------------------------------------------------------------------------
.text:00000000000034B7
.text:00000000000034B7 loc_34B7:                               ; CODE XREF: print_statfs+4A2↑j
.text:00000000000034B7                 mov     eax, 0BACBACBCh
.text:00000000000034BC                 lea     rdx, aVmhgfs    ; "vmhgfs"
.text:00000000000034C3                 cmp     r8, rax
.text:00000000000034C6                 jz      loc_2BA8
.text:00000000000034CC                 add     rax, 42431F1h
.text:00000000000034D2                 lea     rdx, aSnfs      ; "snfs"
.text:00000000000034D9                 cmp     r8, rax
.text:00000000000034DC                 jz      loc_2BA8
.text:00000000000034E2                 sub     rax, 1335C539h
.text:00000000000034E8                 lea     rdx, aXenfs     ; "xenfs"
.text:00000000000034EF                 cmp     r8, rax
.text:00000000000034F2                 jnz     loc_2B7D
.text:00000000000034F8                 jmp     loc_2BA8
.text:00000000000034FD ; ---------------------------------------------------------------------------
.text:00000000000034FD
.text:00000000000034FD loc_34FD:                               ; CODE XREF: print_statfs+5E4↑j
.text:00000000000034FD                 cmp     r8, 24051905h
.text:0000000000003504                 lea     rdx, aUbifs     ; "ubifs"
.text:000000000000350B                 jz      loc_2BA8
.text:0000000000003511                 cmp     r8, 28CD3D45h
.text:0000000000003518                 lea     rdx, aCramfs    ; "cramfs"
.text:000000000000351F                 jz      loc_2BA8
.text:0000000000003525                 cmp     r8, 1BADFACEh
.text:000000000000352C                 lea     rdx, aHugetlbfs+6 ; "bfs"
.text:0000000000003533                 jnz     loc_2B7D
.text:0000000000003539                 jmp     loc_2BA8
.text:000000000000353E ; ---------------------------------------------------------------------------
.text:000000000000353E
.text:000000000000353E loc_353E:                               ; CODE XREF: print_statfs+C7↑j
.text:000000000000353E                 cmp     r8, 53464846h
.text:0000000000003545                 lea     rdx, aWslfs     ; "wslfs"
.text:000000000000354C                 jz      loc_2BA8
.text:0000000000003552                 cmp     r8, 5346544Eh
.text:0000000000003559                 lea     rdx, aNtfs      ; "ntfs"
.text:0000000000003560                 jz      loc_2BA8
.text:0000000000003566                 cmp     r8, 5346414Fh
.text:000000000000356D                 lea     rdx, aKAfs+2    ; "afs"
.text:0000000000003574                 jnz     loc_2B7D
.text:000000000000357A                 jmp     loc_2BA8
.text:000000000000357F ; ---------------------------------------------------------------------------
.text:000000000000357F
.text:000000000000357F loc_357F:                               ; CODE XREF: print_statfs+245↑j
.text:000000000000357F                 cmp     r8, 4004h
.text:0000000000003586                 jz      short loc_35A9
.text:0000000000003588                 cmp     r8, 4006h
.text:000000000000358F                 lea     rdx, aFat       ; "fat"
.text:0000000000003596                 jz      loc_2BA8
.text:000000000000359C                 cmp     r8, 4000h
.text:00000000000035A3                 jnz     loc_2B7D
.text:00000000000035A9
.text:00000000000035A9 loc_35A9:                               ; CODE XREF: print_statfs+50A↑j
.text:00000000000035A9                                         ; print_statfs+B06↑j
.text:00000000000035A9                 lea     rdx, aIsofs     ; "isofs"
.text:00000000000035B0                 jmp     loc_2BA8
.text:00000000000035B5 ; ---------------------------------------------------------------------------
.text:00000000000035B5
.text:00000000000035B5 loc_35B5:                               ; CODE XREF: print_statfs+704↑j
.text:00000000000035B5                 cmp     r8, 482Bh
.text:00000000000035BC                 lea     rdx, aHfs       ; "hfs+"
.text:00000000000035C3                 jz      loc_2BA8
.text:00000000000035C9                 cmp     r8, 4858h
.text:00000000000035D0                 lea     rdx, aHfsx      ; "hfsx"
.text:00000000000035D7                 jz      loc_2BA8
.text:00000000000035DD                 jmp     loc_2B7D
.text:00000000000035DD ; ---------------------------------------------------------------------------
.text:00000000000035E2                 align 8
.text:00000000000035E8
.text:00000000000035E8 loc_35E8:                               ; CODE XREF: print_statfs+6AC↑j
.text:00000000000035E8                 cmp     r8, 0ADFFh
.text:00000000000035EF                 lea     rdx, aAffs      ; "affs"
.text:00000000000035F6                 jz      loc_2BA8
.text:00000000000035FC                 cmp     r8, 0EF51h
.text:0000000000003603                 lea     rdx, aExt2      ; "ext2"
.text:000000000000360A                 jz      loc_2BA8
.text:0000000000003610                 jmp     loc_2B7D
.text:0000000000003610 ; ---------------------------------------------------------------------------
.text:0000000000003615                 align 8
.text:0000000000003618
.text:0000000000003618 loc_3618:                               ; CODE XREF: print_statfs+824↑j
.text:0000000000003618                 cmp     r8, 2Fh ; '/'
.text:000000000000361C                 lea     rdx, aQnx4      ; "qnx4"
.text:0000000000003623                 jz      loc_2BA8
.text:0000000000003629                 cmp     r8, 187h
.text:0000000000003630                 lea     rdx, aAutofs    ; "autofs"
.text:0000000000003637                 jz      loc_2BA8
.text:000000000000363D                 jmp     loc_2B7D
.text:000000000000363D ; ---------------------------------------------------------------------------
.text:0000000000003642                 align 8
.text:0000000000003648
.text:0000000000003648 loc_3648:                               ; CODE XREF: print_statfs+7C4↑j
.text:0000000000003648                 cmp     r8, 2FC12FC1h
.text:000000000000364F                 lea     rdx, aVzfs+1    ; "zfs"
.text:0000000000003656                 jz      loc_2BA8
.text:000000000000365C                 cmp     r8, 3153464Ah
.text:0000000000003663                 lea     rdx, aJfs       ; "jfs"
.text:000000000000366A                 jz      loc_2BA8
.text:0000000000003670                 jmp     loc_2B7D
.text:0000000000003670 ; ---------------------------------------------------------------------------
.text:0000000000003675                 align 8
.text:0000000000003678
.text:0000000000003678 loc_3678:                               ; CODE XREF: print_statfs+764↑j
.text:0000000000003678                 cmp     r8, 65735546h
.text:000000000000367F                 lea     rdx, aFuseblk   ; "fuseblk"
.text:0000000000003686                 jz      loc_2BA8
.text:000000000000368C                 cmp     r8, 67596969h
.text:0000000000003693                 lea     rdx, unk_DCDD
.text:000000000000369A                 jz      loc_2BA8
.text:00000000000036A0                 jmp     loc_2B7D
.text:00000000000036A5 ; ---------------------------------------------------------------------------
.text:00000000000036A5
.text:00000000000036A5 loc_36A5:                               ; CODE XREF: print_statfs+AB↑j
.text:00000000000036A5                 lea     rdx, aFutexfs+3 ; "exfs"
.text:00000000000036AC                 jmp     loc_2BA8
.text:00000000000036B1 ; ---------------------------------------------------------------------------
.text:00000000000036B1
.text:00000000000036B1 loc_36B1:                               ; CODE XREF: print_statfs+480↑j
.text:00000000000036B1                 lea     rdx, aLogfs     ; "logfs"
.text:00000000000036B8                 jmp     loc_2BA8
.text:00000000000036BD ; ---------------------------------------------------------------------------
.text:00000000000036BD
.text:00000000000036BD loc_36BD:                               ; CODE XREF: print_statfs+72↑j
.text:00000000000036BD                 lea     rdx, aInotifyfs ; "inotifyfs"
.text:00000000000036C4                 jmp     loc_2BA8
.text:00000000000036C9 ; ---------------------------------------------------------------------------
.text:00000000000036C9
.text:00000000000036C9 loc_36C9:                               ; CODE XREF: print_statfs+31F↑j
.text:00000000000036C9                 lea     rdx, aSysv4     ; "sysv4"
.text:00000000000036D0                 jmp     loc_2BA8
.text:00000000000036D5 ; ---------------------------------------------------------------------------
.text:00000000000036D5
.text:00000000000036D5 loc_36D5:                               ; CODE XREF: print_statfs+225↑j
.text:00000000000036D5                 lea     rdx, aMinix30Char ; "minix (30 char.)"
.text:00000000000036DC                 jmp     loc_2BA8
.text:00000000000036E1 ; ---------------------------------------------------------------------------
.text:00000000000036E1
.text:00000000000036E1 loc_36E1:                               ; CODE XREF: print_statfs+415↑j
.text:00000000000036E1                 lea     rdx, aInodefs   ; "inodefs"
.text:00000000000036E8                 jmp     loc_2BA8
.text:00000000000036ED ; ---------------------------------------------------------------------------
.text:00000000000036ED
.text:00000000000036ED loc_36ED:                               ; CODE XREF: print_statfs+212↑j
.text:00000000000036ED                 lea     rdx, aSquashfs+5 ; "hfs"
.text:00000000000036F4                 jmp     loc_2BA8
.text:00000000000036F9 ; ---------------------------------------------------------------------------
.text:00000000000036F9
.text:00000000000036F9 loc_36F9:                               ; CODE XREF: print_statfs+1FF↑j
.text:00000000000036F9                 lea     rdx, aAdfs      ; "adfs"
.text:0000000000003700                 jmp     loc_2BA8
.text:0000000000003705 ; ---------------------------------------------------------------------------
.text:0000000000003705
.text:0000000000003705 loc_3705:                               ; CODE XREF: print_statfs+298↑j
.text:0000000000003705                 lea     rdx, aCramfs+1  ; "ramfs"
.text:000000000000370C                 jmp     loc_2BA8
.text:0000000000003711 ; ---------------------------------------------------------------------------
.text:0000000000003711
.text:0000000000003711 loc_3711:                               ; CODE XREF: print_statfs+3A7↑j
.text:0000000000003711                 lea     rdx, aPstorefs  ; "pstorefs"
.text:0000000000003718                 jmp     loc_2BA8
.text:000000000000371D ; ---------------------------------------------------------------------------
.text:000000000000371D
.text:000000000000371D loc_371D:                               ; CODE XREF: print_statfs+98↑j
.text:000000000000371D                 lea     rdx, aSockfs    ; "sockfs"
.text:0000000000003724                 jmp     loc_2BA8
.text:0000000000003729 ; ---------------------------------------------------------------------------
.text:0000000000003729
.text:0000000000003729 loc_3729:                               ; CODE XREF: print_statfs+2AB↑j
.text:0000000000003729                 lea     rdx, aSecurityfs ; "securityfs"
.text:0000000000003730                 jmp     loc_2BA8
.text:0000000000003735 ; ---------------------------------------------------------------------------
.text:0000000000003735
.text:0000000000003735 loc_3735:                               ; CODE XREF: print_statfs+4F7↑j
.text:0000000000003735                 lea     rdx, aExofs     ; "exofs"
.text:000000000000373C                 jmp     loc_2BA8
.text:0000000000003741 ; ---------------------------------------------------------------------------
.text:0000000000003741
.text:0000000000003741 loc_3741:                               ; CODE XREF: print_statfs+85↑j
.text:0000000000003741                 lea     rdx, aFusectl   ; "fusectl"
.text:0000000000003748                 jmp     loc_2BA8
.text:000000000000374D ; ---------------------------------------------------------------------------
.text:000000000000374D
.text:000000000000374D loc_374D:                               ; CODE XREF: print_statfs+332↑j
.text:000000000000374D                 lea     rdx, aBefs+1    ; "efs"
.text:0000000000003754                 jmp     loc_2BA8
.text:0000000000003754 ; } // starts at 2A80
.text:0000000000003754 print_statfs    endp
.text:0000000000003754
.text:0000000000003754 ; ---------------------------------------------------------------------------
.text:0000000000003759                 align 20h
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760
.text:0000000000003760 ; __int64 __fastcall print_it(void *src)
.text:0000000000003760 print_it        proc near               ; CODE XREF: main+2BB↑p
.text:0000000000003760                                         ; main+35B↑p
.text:0000000000003760
.text:0000000000003760 var_55          = byte ptr -55h
.text:0000000000003760 var_54          = dword ptr -54h
.text:0000000000003760 var_50          = qword ptr -50h
.text:0000000000003760 var_48          = qword ptr -48h
.text:0000000000003760 var_40          = qword ptr -40h
.text:0000000000003760
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 push    r15
.text:0000000000003762                 push    r14
.text:0000000000003764                 mov     r14, rdi
.text:0000000000003767                 push    r13
.text:0000000000003769                 push    r12
.text:000000000000376B                 push    rbp
.text:000000000000376C                 push    rbx
.text:000000000000376D                 sub     rsp, 28h
.text:0000000000003771                 mov     [rsp+58h+var_54], esi
.text:0000000000003775                 mov     [rsp+58h+var_50], rdx
.text:000000000000377A                 mov     [rsp+58h+var_48], rcx
.text:000000000000377F                 mov     [rsp+58h+var_40], r8
.text:0000000000003784                 call    _strlen
.text:0000000000003789                 lea     rdi, [rax+3]
.text:000000000000378D                 call    xmalloc
.text:0000000000003792                 movzx   esi, byte ptr [r14]
.text:0000000000003796                 mov     rbx, rax
.text:0000000000003799                 mov     [rsp+58h+var_55], 0
.text:000000000000379E                 test    sil, sil
.text:00000000000037A1                 jz      loc_3874
.text:00000000000037A7                 mov     r12, r14
.text:00000000000037AA                 jmp     loc_382F
.text:00000000000037AA ; ---------------------------------------------------------------------------
.text:00000000000037AF                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: print_it+DE↓j
.text:00000000000037B0                 cmp     cs:interpret_backslash_escapes, 0
.text:00000000000037B7                 jz      short loc_37FF
.text:00000000000037B9                 movsx   r14d, byte ptr [r12+1]
.text:00000000000037BF                 lea     eax, [r14-30h]
.text:00000000000037C3                 cmp     al, 7
.text:00000000000037C5                 jbe     loc_3980
.text:00000000000037CB                 cmp     r14b, 78h ; 'x'
.text:00000000000037CF                 jz      loc_39E0
.text:00000000000037D5                 test    r14b, r14b
.text:00000000000037D8                 jnz     loc_3A90
.text:00000000000037DE                 lea     rsi, aWarningBacksla ; "warning: backslash at end of format"
.text:00000000000037E5                 mov     edx, 5          ; category
.text:00000000000037EA                 xor     edi, edi        ; domainname
.text:00000000000037EC                 call    _dcgettext
.text:00000000000037F1                 xor     esi, esi        ; errnum
.text:00000000000037F3                 mov     rdx, rax        ; format
.text:00000000000037F6                 xor     edi, edi        ; status
.text:00000000000037F8                 xor     eax, eax
.text:00000000000037FA                 call    _error
.text:00000000000037FF
.text:00000000000037FF loc_37FF:                               ; CODE XREF: print_it+57↑j
.text:00000000000037FF                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003806                 mov     rax, [rdi+28h]
.text:000000000000380A                 cmp     rax, [rdi+30h]
.text:000000000000380E                 jnb     loc_3B20
.text:0000000000003814                 lea     rdx, [rax+1]
.text:0000000000003818                 mov     r14, r12
.text:000000000000381B                 mov     r12, rbp
.text:000000000000381E                 mov     [rdi+28h], rdx
.text:0000000000003822                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000003825
.text:0000000000003825 loc_3825:                               ; CODE XREF: print_it+1DE↓j
.text:0000000000003825                                         ; print_it+219↓j ...
.text:0000000000003825                 movzx   esi, byte ptr [r14+1] ; int
.text:000000000000382A                 test    sil, sil
.text:000000000000382D                 jz      short loc_3874
.text:000000000000382F
.text:000000000000382F loc_382F:                               ; CODE XREF: print_it+4A↑j
.text:000000000000382F                                         ; print_it+112↓j
.text:000000000000382F                 cmp     sil, 25h ; '%'
.text:0000000000003833                 lea     rbp, [r12+1]
.text:0000000000003838                 jz      short loc_38A8
.text:000000000000383A                 cmp     sil, 5Ch ; '\'
.text:000000000000383E                 jz      loc_37B0
.text:0000000000003844                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000384B                 mov     rax, [rdi+28h]
.text:000000000000384F                 cmp     rax, [rdi+30h]
.text:0000000000003853                 jnb     loc_3A80
.text:0000000000003859                 lea     rdx, [rax+1]
.text:000000000000385D                 mov     r14, r12
.text:0000000000003860                 mov     r12, rbp
.text:0000000000003863                 mov     [rdi+28h], rdx
.text:0000000000003867                 mov     [rax], sil
.text:000000000000386A                 movzx   esi, byte ptr [r14+1]
.text:000000000000386F                 test    sil, sil
.text:0000000000003872                 jnz     short loc_382F
.text:0000000000003874
.text:0000000000003874 loc_3874:                               ; CODE XREF: print_it+41↑j
.text:0000000000003874                                         ; print_it+CD↑j
.text:0000000000003874                 mov     rdi, rbx        ; ptr
.text:0000000000003877                 call    _free
.text:000000000000387C                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003883                 mov     rdi, cs:trailing_delim ; s
.text:000000000000388A                 call    _fputs_unlocked
.text:000000000000388F                 movzx   eax, [rsp+58h+var_55]
.text:0000000000003894                 add     rsp, 28h
.text:0000000000003898                 pop     rbx
.text:0000000000003899                 pop     rbp
.text:000000000000389A                 pop     r12
.text:000000000000389C                 pop     r13
.text:000000000000389E                 pop     r14
.text:00000000000038A0                 pop     r15
.text:00000000000038A2                 retn
.text:00000000000038A2 ; ---------------------------------------------------------------------------
.text:00000000000038A3                 align 8
.text:00000000000038A8
.text:00000000000038A8 loc_38A8:                               ; CODE XREF: print_it+D8↑j
.text:00000000000038A8                 lea     rsi, printf_flags ; "'-+ #0I"
.text:00000000000038AF                 mov     rdi, rbp        ; s
.text:00000000000038B2                 call    _strspn
.text:00000000000038B7                 lea     r14, [r12+rax+1]
.text:00000000000038BC                 lea     rsi, digits     ; "0123456789"
.text:00000000000038C3                 mov     rdi, r14        ; s
.text:00000000000038C6                 call    _strspn
.text:00000000000038CB                 add     r14, rax
.text:00000000000038CE                 movzx   r13d, byte ptr [r14]
.text:00000000000038D2                 cmp     r13b, 2Eh ; '.'
.text:00000000000038D6                 jnz     short loc_38F1
.text:00000000000038D8                 lea     rdi, [r14+1]    ; s
.text:00000000000038DC                 lea     rsi, digits     ; "0123456789"
.text:00000000000038E3                 call    _strspn
.text:00000000000038E8                 lea     r14, [r14+rax+1]
.text:00000000000038ED                 movzx   r13d, byte ptr [r14]
.text:00000000000038F1
.text:00000000000038F1 loc_38F1:                               ; CODE XREF: print_it+176↑j
.text:00000000000038F1                 mov     rax, r14
.text:00000000000038F4                 mov     rsi, r12        ; src
.text:00000000000038F7                 mov     rdi, rbx        ; dest
.text:00000000000038FA                 sub     rax, rbp
.text:00000000000038FD                 lea     r15, [rax+1]
.text:0000000000003901                 mov     rbp, rax
.text:0000000000003904                 mov     rdx, r15        ; n
.text:0000000000003907                 call    _memcpy
.text:000000000000390C                 test    r13b, r13b
.text:000000000000390F                 jz      short loc_3948
.text:0000000000003911                 cmp     r13b, 25h ; '%'
.text:0000000000003915                 jz      short loc_394C
.text:0000000000003917                 movsx   edx, r13b
.text:000000000000391B                 mov     r9, [rsp+58h+var_40]
.text:0000000000003920                 mov     r8, [rsp+58h+var_50]
.text:0000000000003925                 mov     ecx, [rsp+58h+var_54]
.text:0000000000003929                 mov     rsi, r15
.text:000000000000392C                 mov     rdi, rbx
.text:000000000000392F                 mov     rax, [rsp+58h+var_48]
.text:0000000000003934                 lea     r12, [r14+1]
.text:0000000000003938                 call    rax
.text:000000000000393A                 or      [rsp+58h+var_55], al
.text:000000000000393E                 jmp     loc_3825
.text:000000000000393E ; ---------------------------------------------------------------------------
.text:0000000000003943                 align 8
.text:0000000000003948
.text:0000000000003948 loc_3948:                               ; CODE XREF: print_it+1AF↑j
.text:0000000000003948                 sub     r14, 1
.text:000000000000394C
.text:000000000000394C loc_394C:                               ; CODE XREF: print_it+1B5↑j
.text:000000000000394C                 test    rbp, rbp
.text:000000000000394F                 jnz     loc_3C11
.text:0000000000003955                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000395C                 lea     r12, [r14+1]
.text:0000000000003960                 mov     rax, [rdi+28h]
.text:0000000000003964                 cmp     rax, [rdi+30h]
.text:0000000000003968                 jnb     loc_3B10
.text:000000000000396E                 lea     rdx, [rax+1]
.text:0000000000003972                 mov     [rdi+28h], rdx
.text:0000000000003976                 mov     byte ptr [rax], 25h ; '%'
.text:0000000000003979                 jmp     loc_3825
.text:0000000000003979 ; ---------------------------------------------------------------------------
.text:000000000000397E                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: print_it+65↑j
.text:0000000000003980                 movsx   eax, byte ptr [r12+2]
.text:0000000000003986                 sub     r14d, 30h ; '0'
.text:000000000000398A                 lea     edx, [rax-30h]
.text:000000000000398D                 cmp     dl, 7
.text:0000000000003990                 ja      loc_3BE1
.text:0000000000003996                 lea     r14d, [rax+r14*8-30h]
.text:000000000000399B                 movsx   eax, byte ptr [r12+3]
.text:00000000000039A1                 lea     edx, [rax-30h]
.text:00000000000039A4                 cmp     dl, 7
.text:00000000000039A7                 ja      loc_3BEA
.text:00000000000039AD                 lea     r14d, [rax+r14*8-30h]
.text:00000000000039B2                 add     r12, 4
.text:00000000000039B6
.text:00000000000039B6 loc_39B6:                               ; CODE XREF: print_it+485↓j
.text:00000000000039B6                                         ; print_it+48E↓j
.text:00000000000039B6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000039BD                 mov     rax, [rdi+28h]
.text:00000000000039C1                 cmp     rax, [rdi+30h]
.text:00000000000039C5                 jnb     loc_3BAE
.text:00000000000039CB                 lea     rdx, [rax+1]
.text:00000000000039CF                 mov     [rdi+28h], rdx
.text:00000000000039D3                 mov     [rax], r14b
.text:00000000000039D6
.text:00000000000039D6 loc_39D6:                               ; CODE XREF: print_it+457↓j
.text:00000000000039D6                 lea     r14, [r12-1]
.text:00000000000039DB                 jmp     loc_3825
.text:00000000000039E0 ; ---------------------------------------------------------------------------
.text:00000000000039E0
.text:00000000000039E0 loc_39E0:                               ; CODE XREF: print_it+6F↑j
.text:00000000000039E0                 call    ___ctype_b_loc
.text:00000000000039E5                 movzx   ecx, byte ptr [r12+2]
.text:00000000000039EB                 mov     rdx, [rax]
.text:00000000000039EE                 test    byte ptr [rdx+rcx*2+1], 10h
.text:00000000000039F3                 mov     rax, rcx
.text:00000000000039F6                 jz      loc_3AB0
.text:00000000000039FC                 lea     esi, [rax-61h]
.text:00000000000039FF                 movsx   ecx, cl
.text:0000000000003A02                 cmp     sil, 5
.text:0000000000003A06                 jbe     loc_3B35
.text:0000000000003A0C                 lea     esi, [rcx-37h]
.text:0000000000003A0F                 sub     eax, 41h ; 'A'
.text:0000000000003A12                 sub     ecx, 30h ; '0'
.text:0000000000003A15                 cmp     al, 5
.text:0000000000003A17                 mov     eax, esi
.text:0000000000003A19                 cmova   eax, ecx
.text:0000000000003A1C
.text:0000000000003A1C loc_3A1C:                               ; CODE XREF: print_it+3D8↓j
.text:0000000000003A1C                 movzx   esi, byte ptr [r12+3]
.text:0000000000003A22                 lea     r14, [r12+2]
.text:0000000000003A27                 test    byte ptr [rdx+rsi*2+1], 10h
.text:0000000000003A2C                 mov     rcx, rsi
.text:0000000000003A2F                 jz      short loc_3A4F
.text:0000000000003A31                 movsx   edx, sil
.text:0000000000003A35                 lea     esi, [rsi-61h]
.text:0000000000003A38                 shl     eax, 4
.text:0000000000003A3B                 lea     r14, [r12+3]
.text:0000000000003A40                 cmp     sil, 5
.text:0000000000003A44                 ja      loc_3BBC
.text:0000000000003A4A                 sub     edx, 57h ; 'W'
.text:0000000000003A4D
.text:0000000000003A4D loc_3A4D:                               ; CODE XREF: print_it+46B↓j
.text:0000000000003A4D                 add     eax, edx
.text:0000000000003A4F
.text:0000000000003A4F loc_3A4F:                               ; CODE XREF: print_it+2CF↑j
.text:0000000000003A4F                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003A56                 lea     r12, [r14+1]
.text:0000000000003A5A                 mov     rdx, [rdi+28h]
.text:0000000000003A5E                 cmp     rdx, [rdi+30h]
.text:0000000000003A62                 jnb     loc_3C04
.text:0000000000003A68                 lea     rcx, [rdx+1]
.text:0000000000003A6C                 mov     [rdi+28h], rcx
.text:0000000000003A70                 mov     [rdx], al
.text:0000000000003A72                 jmp     loc_3825
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A77                 align 20h
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: print_it+F3↑j
.text:0000000000003A80                 mov     r14, r12
.text:0000000000003A83                 mov     r12, rbp
.text:0000000000003A86                 call    ___overflow
.text:0000000000003A8B                 jmp     loc_3825
.text:0000000000003A90 ; ---------------------------------------------------------------------------
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: print_it+78↑j
.text:0000000000003A90                 lea     eax, [r14-22h]  ; switch 85 cases
.text:0000000000003A94                 movsx   r13d, r14b
.text:0000000000003A98                 cmp     al, 54h
.text:0000000000003A9A                 ja      short def_3AAD  ; jumptable 0000000000003AAD default case, cases 35-91,93-96,99,100,103-109,111-113,115,117
.text:0000000000003A9C                 lea     rcx, jpt_3AAD
.text:0000000000003AA3                 movzx   eax, al
.text:0000000000003AA6                 movsxd  rax, ds:(jpt_3AAD - 0E028h)[rcx+rax*4]
.text:0000000000003AAA                 add     rax, rcx
.text:0000000000003AAD                 jmp     rax             ; switch jump
.text:0000000000003AAD ; ---------------------------------------------------------------------------
.text:0000000000003AAF                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: print_it+296↑j
.text:0000000000003AB0                 mov     r13d, 78h ; 'x'
.text:0000000000003AB6
.text:0000000000003AB6 def_3AAD:                               ; CODE XREF: print_it+33A↑j
.text:0000000000003AB6                                         ; print_it+34D↑j
.text:0000000000003AB6                                         ; DATA XREF: ...
.text:0000000000003AB6                 lea     rsi, aWarningUnrecog ; jumptable 0000000000003AAD default case, cases 35-91,93-96,99,100,103-109,111-113,115,117
.text:0000000000003ABD                 mov     edx, 5          ; category
.text:0000000000003AC2                 xor     edi, edi        ; domainname
.text:0000000000003AC4                 call    _dcgettext
.text:0000000000003AC9                 mov     ecx, r13d
.text:0000000000003ACC                 mov     rdx, rax        ; format
.text:0000000000003ACF                 xor     esi, esi        ; errnum
.text:0000000000003AD1                 xor     edi, edi        ; status
.text:0000000000003AD3                 xor     eax, eax
.text:0000000000003AD5                 call    _error
.text:0000000000003ADA                 nop     word ptr [rax+rax+00h]
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003AE0                                         ; print_it+3E9↓j ...
.text:0000000000003AE0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003AE7                 add     r12, 2
.text:0000000000003AEB                 mov     rax, [rdi+28h]
.text:0000000000003AEF                 cmp     rax, [rdi+30h]
.text:0000000000003AF3                 jnb     loc_3BD0
.text:0000000000003AF9                 lea     rdx, [rax+1]
.text:0000000000003AFD                 mov     [rdi+28h], rdx
.text:0000000000003B01                 mov     [rax], r14b
.text:0000000000003B04                 mov     r14, rbp
.text:0000000000003B07                 jmp     loc_3825
.text:0000000000003B07 ; ---------------------------------------------------------------------------
.text:0000000000003B0C                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: print_it+208↑j
.text:0000000000003B10                 mov     esi, 25h ; '%'  ; int
.text:0000000000003B15                 call    ___overflow
.text:0000000000003B1A                 jmp     loc_3825
.text:0000000000003B1A ; ---------------------------------------------------------------------------
.text:0000000000003B1F                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: print_it+AE↑j
.text:0000000000003B20                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000003B25                 mov     r14, r12
.text:0000000000003B28                 mov     r12, rbp
.text:0000000000003B2B                 call    ___overflow
.text:0000000000003B30                 jmp     loc_3825
.text:0000000000003B35 ; ---------------------------------------------------------------------------
.text:0000000000003B35
.text:0000000000003B35 loc_3B35:                               ; CODE XREF: print_it+2A6↑j
.text:0000000000003B35                 lea     eax, [rcx-57h]
.text:0000000000003B38                 jmp     loc_3A1C
.text:0000000000003B3D ; ---------------------------------------------------------------------------
.text:0000000000003B3D
.text:0000000000003B3D loc_3B3D:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B3D                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B3D                 mov     r13d, 0Bh       ; jumptable 0000000000003AAD case 118
.text:0000000000003B43                 mov     r14d, 0Bh
.text:0000000000003B49                 jmp     short loc_3AE0  ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003B4B ; ---------------------------------------------------------------------------
.text:0000000000003B4B
.text:0000000000003B4B loc_3B4B:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B4B                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B4B                 mov     r13d, 9         ; jumptable 0000000000003AAD case 116
.text:0000000000003B51                 mov     r14d, 9
.text:0000000000003B57                 jmp     short loc_3AE0  ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003B59 ; ---------------------------------------------------------------------------
.text:0000000000003B59
.text:0000000000003B59 loc_3B59:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B59                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B59                 mov     r13d, 0Dh       ; jumptable 0000000000003AAD case 114
.text:0000000000003B5F                 mov     r14d, 0Dh
.text:0000000000003B65                 jmp     loc_3AE0        ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003B6A ; ---------------------------------------------------------------------------
.text:0000000000003B6A
.text:0000000000003B6A loc_3B6A:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B6A                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B6A                 mov     r13d, 0Ah       ; jumptable 0000000000003AAD case 110
.text:0000000000003B70                 mov     r14d, 0Ah
.text:0000000000003B76                 jmp     loc_3AE0        ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003B7B ; ---------------------------------------------------------------------------
.text:0000000000003B7B
.text:0000000000003B7B loc_3B7B:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B7B                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B7B                 mov     r13d, 0Ch       ; jumptable 0000000000003AAD case 102
.text:0000000000003B81                 mov     r14d, 0Ch
.text:0000000000003B87                 jmp     loc_3AE0        ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003B8C ; ---------------------------------------------------------------------------
.text:0000000000003B8C
.text:0000000000003B8C loc_3B8C:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B8C                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B8C                 mov     r13d, 1Bh       ; jumptable 0000000000003AAD case 101
.text:0000000000003B92                 mov     r14d, 1Bh
.text:0000000000003B98                 jmp     loc_3AE0        ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003B9D ; ---------------------------------------------------------------------------
.text:0000000000003B9D
.text:0000000000003B9D loc_3B9D:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003B9D                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003B9D                 mov     r13d, 8         ; jumptable 0000000000003AAD case 98
.text:0000000000003BA3                 mov     r14d, 8
.text:0000000000003BA9                 jmp     loc_3AE0        ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003BAE ; ---------------------------------------------------------------------------
.text:0000000000003BAE
.text:0000000000003BAE loc_3BAE:                               ; CODE XREF: print_it+265↑j
.text:0000000000003BAE                 movzx   esi, r14b       ; int
.text:0000000000003BB2                 call    ___overflow
.text:0000000000003BB7                 jmp     loc_39D6
.text:0000000000003BBC ; ---------------------------------------------------------------------------
.text:0000000000003BBC
.text:0000000000003BBC loc_3BBC:                               ; CODE XREF: print_it+2E4↑j
.text:0000000000003BBC                 lea     esi, [rdx-37h]
.text:0000000000003BBF                 sub     ecx, 41h ; 'A'
.text:0000000000003BC2                 sub     edx, 30h ; '0'
.text:0000000000003BC5                 cmp     cl, 5
.text:0000000000003BC8                 cmovbe  edx, esi
.text:0000000000003BCB                 jmp     loc_3A4D
.text:0000000000003BD0 ; ---------------------------------------------------------------------------
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: print_it+393↑j
.text:0000000000003BD0                 movzx   esi, r13b       ; int
.text:0000000000003BD4                 mov     r14, rbp
.text:0000000000003BD7                 call    ___overflow
.text:0000000000003BDC                 jmp     loc_3825
.text:0000000000003BE1 ; ---------------------------------------------------------------------------
.text:0000000000003BE1
.text:0000000000003BE1 loc_3BE1:                               ; CODE XREF: print_it+230↑j
.text:0000000000003BE1                 add     r12, 2
.text:0000000000003BE5                 jmp     loc_39B6
.text:0000000000003BEA ; ---------------------------------------------------------------------------
.text:0000000000003BEA
.text:0000000000003BEA loc_3BEA:                               ; CODE XREF: print_it+247↑j
.text:0000000000003BEA                 add     r12, 3
.text:0000000000003BEE                 jmp     loc_39B6
.text:0000000000003BF3 ; ---------------------------------------------------------------------------
.text:0000000000003BF3
.text:0000000000003BF3 loc_3BF3:                               ; CODE XREF: print_it+34D↑j
.text:0000000000003BF3                                         ; DATA XREF: .rodata:jpt_3AAD↓o
.text:0000000000003BF3                 mov     r13d, 7         ; jumptable 0000000000003AAD case 97
.text:0000000000003BF9                 mov     r14d, 7
.text:0000000000003BFF                 jmp     loc_3AE0        ; jumptable 0000000000003AAD cases 34,92
.text:0000000000003C04 ; ---------------------------------------------------------------------------
.text:0000000000003C04
.text:0000000000003C04 loc_3C04:                               ; CODE XREF: print_it+302↑j
.text:0000000000003C04                 movzx   esi, al         ; int
.text:0000000000003C07                 call    ___overflow
.text:0000000000003C0C                 jmp     loc_3825
.text:0000000000003C11 ; ---------------------------------------------------------------------------
.text:0000000000003C11
.text:0000000000003C11 loc_3C11:                               ; CODE XREF: print_it+1EF↑j
.text:0000000000003C11                 mov     rax, r15
.text:0000000000003C14                 mov     r15d, r13d
.text:0000000000003C17                 mov     rdi, rbx
.text:0000000000003C1A                 mov     [rbx+rax], r15b
.text:0000000000003C1E                 mov     byte ptr [rbx+rbp+2], 0
.text:0000000000003C23                 call    quote
.text:0000000000003C28                 lea     rsi, aSInvalidDirect ; "%s: invalid directive"
.text:0000000000003C2F                 mov     rbx, rax
.text:0000000000003C32                 mov     edx, 5          ; category
.text:0000000000003C37                 xor     edi, edi        ; domainname
.text:0000000000003C39                 call    _dcgettext
.text:0000000000003C3E                 mov     rcx, rbx
.text:0000000000003C41                 mov     rdx, rax        ; format
.text:0000000000003C44                 xor     esi, esi        ; errnum
.text:0000000000003C46                 mov     edi, 1          ; status
.text:0000000000003C4B                 xor     eax, eax
.text:0000000000003C4D                 call    _error
.text:0000000000003C4D ; } // starts at 3760
.text:0000000000003C52                 nop     dword ptr [rax+00h]
.text:0000000000003C56                 db      2Eh
.text:0000000000003C56                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003C56 print_it        endp ; sp-analysis failed
.text:0000000000003C56
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60 human_time      proc near               ; CODE XREF: print_stat:loc_4358↓p
.text:0000000000003C60
.text:0000000000003C60 var_88          = qword ptr -88h
.text:0000000000003C60 var_80          = qword ptr -80h
.text:0000000000003C60 var_78          = byte ptr -78h
.text:0000000000003C60 var_38          = byte ptr -38h
.text:0000000000003C60 var_20          = qword ptr -20h
.text:0000000000003C60
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 push    rbp
.text:0000000000003C61                 push    rbx
.text:0000000000003C62                 sub     rsp, 78h
.text:0000000000003C66                 mov     [rsp+88h+var_88], rdi
.text:0000000000003C6A                 mov     rdi, cs:tz_7299
.text:0000000000003C71                 mov     rax, fs:28h
.text:0000000000003C7A                 mov     [rsp+88h+var_20], rax
.text:0000000000003C7F                 xor     eax, eax
.text:0000000000003C81                 mov     [rsp+88h+var_80], rsi
.text:0000000000003C86                 test    rdi, rdi
.text:0000000000003C89                 jz      loc_3D28
.text:0000000000003C8F
.text:0000000000003C8F loc_3C8F:                               ; CODE XREF: human_time+E6↓j
.text:0000000000003C8F                 lea     rbx, [rsp+88h+var_78]
.text:0000000000003C94                 mov     rsi, rsp
.text:0000000000003C97                 mov     rbp, [rsp+88h+var_80]
.text:0000000000003C9C                 mov     rdx, rbx
.text:0000000000003C9F                 call    localtime_rz
.text:0000000000003CA4                 test    rax, rax
.text:0000000000003CA7                 jz      short loc_3CF0
.text:0000000000003CA9                 mov     r8, cs:tz_7299
.text:0000000000003CB0                 lea     rdx, aYMDHMSNZ  ; "%Y-%m-%d %H:%M:%S.%N %z"
.text:0000000000003CB7                 lea     rdi, str_7298
.text:0000000000003CBE                 mov     r9d, ebp
.text:0000000000003CC1                 mov     rcx, rbx
.text:0000000000003CC4                 mov     esi, 3Dh ; '='
.text:0000000000003CC9                 call    nstrftime
.text:0000000000003CCE
.text:0000000000003CCE loc_3CCE:                               ; CODE XREF: human_time+C3↓j
.text:0000000000003CCE                 mov     rcx, [rsp+88h+var_20]
.text:0000000000003CD3                 xor     rcx, fs:28h
.text:0000000000003CDC                 lea     rax, str_7298
.text:0000000000003CE3                 jnz     short loc_3D4B
.text:0000000000003CE5                 add     rsp, 78h
.text:0000000000003CE9                 pop     rbx
.text:0000000000003CEA                 pop     rbp
.text:0000000000003CEB                 retn
.text:0000000000003CEB ; ---------------------------------------------------------------------------
.text:0000000000003CEC                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: human_time+47↑j
.text:0000000000003CF0                 mov     rdi, [rsp+88h+var_88]
.text:0000000000003CF4                 lea     rsi, [rsp+88h+var_38]
.text:0000000000003CF9                 call    imaxtostr
.text:0000000000003CFE                 lea     rcx, aS09d      ; "%s.%09d"
.text:0000000000003D05                 lea     rdi, str_7298
.text:0000000000003D0C                 mov     r8, rax
.text:0000000000003D0F                 mov     r9d, ebp
.text:0000000000003D12                 mov     edx, 3Dh ; '='
.text:0000000000003D17                 mov     esi, 1
.text:0000000000003D1C                 xor     eax, eax
.text:0000000000003D1E                 call    ___sprintf_chk
.text:0000000000003D23                 jmp     short loc_3CCE
.text:0000000000003D23 ; ---------------------------------------------------------------------------
.text:0000000000003D25                 align 8
.text:0000000000003D28
.text:0000000000003D28 loc_3D28:                               ; CODE XREF: human_time+29↑j
.text:0000000000003D28                 lea     rdi, aTz        ; "TZ"
.text:0000000000003D2F                 call    _getenv
.text:0000000000003D34                 mov     rdi, rax        ; src
.text:0000000000003D37                 call    tzalloc
.text:0000000000003D3C                 mov     rdi, rax
.text:0000000000003D3F                 mov     cs:tz_7299, rax
.text:0000000000003D46                 jmp     loc_3C8F
.text:0000000000003D4B ; ---------------------------------------------------------------------------
.text:0000000000003D4B
.text:0000000000003D4B loc_3D4B:                               ; CODE XREF: human_time+83↑j
.text:0000000000003D4B                 call    ___stack_chk_fail
.text:0000000000003D4B ; } // starts at 3C60
.text:0000000000003D4B human_time      endp
.text:0000000000003D4B
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50
.text:0000000000003D50 ; __int64 __fastcall find_bind_mount(char *s2)
.text:0000000000003D50 find_bind_mount proc near               ; CODE XREF: print_stat+18F↓p
.text:0000000000003D50                                         ; print_stat+536↓p
.text:0000000000003D50
.text:0000000000003D50 var_158         = qword ptr -158h
.text:0000000000003D50 var_150         = qword ptr -150h
.text:0000000000003D50 stat_buf        = stat ptr -0C8h
.text:0000000000003D50 var_30          = qword ptr -30h
.text:0000000000003D50
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 push    r13
.text:0000000000003D52                 push    r12
.text:0000000000003D54                 mov     r12, rdi
.text:0000000000003D57                 push    rbp
.text:0000000000003D58                 push    rbx
.text:0000000000003D59                 sub     rsp, 138h
.text:0000000000003D60                 mov     rax, fs:28h
.text:0000000000003D69                 mov     [rsp+158h+var_30], rax
.text:0000000000003D71                 xor     eax, eax
.text:0000000000003D73                 cmp     cs:tried_mount_list_7429, 0
.text:0000000000003D7A                 jz      loc_3E38
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: find_bind_mount+102↓j
.text:0000000000003D80                 mov     rdx, rsp        ; stat_buf
.text:0000000000003D83                 mov     rsi, r12        ; filename
.text:0000000000003D86                 mov     edi, 1          ; ver
.text:0000000000003D8B                 call    ___xstat
.text:0000000000003D90                 test    eax, eax
.text:0000000000003D92                 jnz     short loc_3E10
.text:0000000000003D94                 mov     rbx, cs:mount_list_7428
.text:0000000000003D9B                 test    rbx, rbx
.text:0000000000003D9E                 jz      short loc_3E10
.text:0000000000003DA0                 lea     r13, [rsp+158h+stat_buf]
.text:0000000000003DA8                 jmp     short loc_3DB9
.text:0000000000003DA8 ; ---------------------------------------------------------------------------
.text:0000000000003DAA                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: find_bind_mount+6D↓j
.text:0000000000003DB0                                         ; find_bind_mount+76↓j ...
.text:0000000000003DB0                 mov     rbx, [rbx+30h]
.text:0000000000003DB4                 test    rbx, rbx
.text:0000000000003DB7                 jz      short loc_3E10
.text:0000000000003DB9
.text:0000000000003DB9 loc_3DB9:                               ; CODE XREF: find_bind_mount+58↑j
.text:0000000000003DB9                 test    byte ptr [rbx+28h], 1
.text:0000000000003DBD                 jz      short loc_3DB0
.text:0000000000003DBF                 mov     rbp, [rbx]
.text:0000000000003DC2                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000003DC6                 jnz     short loc_3DB0
.text:0000000000003DC8                 mov     rdi, [rbx+8]    ; s1
.text:0000000000003DCC                 mov     rsi, r12        ; s2
.text:0000000000003DCF                 call    _strcmp
.text:0000000000003DD4                 test    eax, eax
.text:0000000000003DD6                 jnz     short loc_3DB0
.text:0000000000003DD8                 mov     rdx, r13        ; stat_buf
.text:0000000000003DDB                 mov     rsi, rbp        ; filename
.text:0000000000003DDE                 mov     edi, 1          ; ver
.text:0000000000003DE3                 call    ___xstat
.text:0000000000003DE8                 test    eax, eax
.text:0000000000003DEA                 jnz     short loc_3DB0
.text:0000000000003DEC                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:0000000000003DF4                 cmp     [rsp+158h+var_150], rax
.text:0000000000003DF9                 jnz     short loc_3DB0
.text:0000000000003DFB                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:0000000000003E03                 cmp     [rsp+158h+var_158], rax
.text:0000000000003E07                 jnz     short loc_3DB0
.text:0000000000003E09                 mov     rax, [rbx]
.text:0000000000003E0C                 jmp     short loc_3E12
.text:0000000000003E0C ; ---------------------------------------------------------------------------
.text:0000000000003E0E                 align 10h
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: find_bind_mount+42↑j
.text:0000000000003E10                                         ; find_bind_mount+4E↑j ...
.text:0000000000003E10                 xor     eax, eax
.text:0000000000003E12
.text:0000000000003E12 loc_3E12:                               ; CODE XREF: find_bind_mount+BC↑j
.text:0000000000003E12                 mov     rcx, [rsp+158h+var_30]
.text:0000000000003E1A                 xor     rcx, fs:28h
.text:0000000000003E23                 jnz     short loc_3E89
.text:0000000000003E25                 add     rsp, 138h
.text:0000000000003E2C                 pop     rbx
.text:0000000000003E2D                 pop     rbp
.text:0000000000003E2E                 pop     r12
.text:0000000000003E30                 pop     r13
.text:0000000000003E32                 retn
.text:0000000000003E32 ; ---------------------------------------------------------------------------
.text:0000000000003E33                 align 8
.text:0000000000003E38
.text:0000000000003E38 loc_3E38:                               ; CODE XREF: find_bind_mount+2A↑j
.text:0000000000003E38                 xor     edi, edi
.text:0000000000003E3A                 call    read_file_system_list
.text:0000000000003E3F                 test    rax, rax
.text:0000000000003E42                 mov     cs:mount_list_7428, rax
.text:0000000000003E49                 jz      short loc_3E57
.text:0000000000003E4B
.text:0000000000003E4B loc_3E4B:                               ; CODE XREF: find_bind_mount+137↓j
.text:0000000000003E4B                 mov     cs:tried_mount_list_7429, 1
.text:0000000000003E52                 jmp     loc_3D80
.text:0000000000003E57 ; ---------------------------------------------------------------------------
.text:0000000000003E57
.text:0000000000003E57 loc_3E57:                               ; CODE XREF: find_bind_mount+F9↑j
.text:0000000000003E57                 lea     rsi, aCannotReadTabl ; "cannot read table of mounted file syste"...
.text:0000000000003E5E                 xor     edi, edi        ; domainname
.text:0000000000003E60                 mov     edx, 5          ; category
.text:0000000000003E65                 call    _dcgettext
.text:0000000000003E6A                 mov     rbx, rax
.text:0000000000003E6D                 call    ___errno_location
.text:0000000000003E72                 mov     esi, [rax]      ; errnum
.text:0000000000003E74                 lea     rdx, aS_0+2     ; format
.text:0000000000003E7B                 mov     rcx, rbx
.text:0000000000003E7E                 xor     edi, edi        ; status
.text:0000000000003E80                 xor     eax, eax
.text:0000000000003E82                 call    _error
.text:0000000000003E87                 jmp     short loc_3E4B
.text:0000000000003E89 ; ---------------------------------------------------------------------------
.text:0000000000003E89
.text:0000000000003E89 loc_3E89:                               ; CODE XREF: find_bind_mount+D3↑j
.text:0000000000003E89                 call    ___stack_chk_fail
.text:0000000000003E89 ; } // starts at 3D50
.text:0000000000003E89 find_bind_mount endp
.text:0000000000003E89
.text:0000000000003E89 ; ---------------------------------------------------------------------------
.text:0000000000003E8E                 align 10h
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90
.text:0000000000003E90 default_format  proc near               ; CODE XREF: main+4FA↑p
.text:0000000000003E90                                         ; main+50D↑p
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 test    dil, dil
.text:0000000000003E93                 push    r12
.text:0000000000003E95                 push    rbp
.text:0000000000003E96                 push    rbx
.text:0000000000003E97                 jz      short loc_3EB2
.text:0000000000003E99                 test    sil, sil
.text:0000000000003E9C                 jz      loc_3F84
.text:0000000000003EA2                 pop     rbx
.text:0000000000003EA3                 pop     rbp
.text:0000000000003EA4                 pop     r12
.text:0000000000003EA6                 lea     rdi, fmt_terse_fs ; "%n %i %l %t %s %S %b %f %a %c %d\n"
.text:0000000000003EAD                 jmp     xstrdup
.text:0000000000003EB2 ; ---------------------------------------------------------------------------
.text:0000000000003EB2
.text:0000000000003EB2 loc_3EB2:                               ; CODE XREF: default_format+7↑j
.text:0000000000003EB2                 test    sil, sil
.text:0000000000003EB5                 jnz     loc_3FA3
.text:0000000000003EBB                 lea     rsi, aFileNSize10sBl ; "  File: %N\n  Size: %-10s\tBlocks: %-10"...
.text:0000000000003EC2                 xor     edi, edi        ; domainname
.text:0000000000003EC4                 mov     ebx, edx
.text:0000000000003EC6                 mov     edx, 5          ; category
.text:0000000000003ECB                 call    _dcgettext
.text:0000000000003ED0                 mov     rdi, rax        ; src
.text:0000000000003ED3                 call    xstrdup
.text:0000000000003ED8                 test    bl, bl
.text:0000000000003EDA                 mov     r12, rax
.text:0000000000003EDD                 mov     edx, 5          ; category
.text:0000000000003EE2                 lea     rsi, aDeviceDhDdInod ; "Device: %Dh/%dd\tInode: %-10i  Links: %"...
.text:0000000000003EE9                 jnz     short loc_3EF2
.text:0000000000003EEB                 lea     rsi, aDeviceDhDdInod_0 ; "Device: %Dh/%dd\tInode: %-10i  Links: %"...
.text:0000000000003EF2
.text:0000000000003EF2 loc_3EF2:                               ; CODE XREF: default_format+59↑j
.text:0000000000003EF2                 xor     edi, edi        ; domainname
.text:0000000000003EF4                 call    _dcgettext
.text:0000000000003EF9                 lea     rdi, aSS        ; "%s%s"
.text:0000000000003F00                 mov     rdx, rax
.text:0000000000003F03                 mov     rsi, r12
.text:0000000000003F06                 xor     eax, eax
.text:0000000000003F08                 call    xasprintf
.text:0000000000003F0D                 mov     rdi, r12        ; ptr
.text:0000000000003F10                 mov     rbp, rax
.text:0000000000003F13                 call    _free
.text:0000000000003F18                 lea     rsi, aAccess04a1010a ; "Access: (%04a/%10.10A)  Uid: (%5u/%8U) "...
.text:0000000000003F1F                 mov     edx, 5          ; category
.text:0000000000003F24                 xor     edi, edi        ; domainname
.text:0000000000003F26                 call    _dcgettext
.text:0000000000003F2B                 lea     rdi, aSS        ; "%s%s"
.text:0000000000003F32                 mov     rdx, rax
.text:0000000000003F35                 mov     rsi, rbp
.text:0000000000003F38                 xor     eax, eax
.text:0000000000003F3A                 call    xasprintf
.text:0000000000003F3F                 mov     rdi, rbp        ; ptr
.text:0000000000003F42                 mov     rbx, rax
.text:0000000000003F45                 call    _free
.text:0000000000003F4A                 lea     rsi, aAccessXModifyY ; "Access: %x\nModify: %y\nChange: %z\n Bi"...
.text:0000000000003F51                 mov     edx, 5          ; category
.text:0000000000003F56                 xor     edi, edi        ; domainname
.text:0000000000003F58                 call    _dcgettext
.text:0000000000003F5D                 lea     rdi, aSS        ; "%s%s"
.text:0000000000003F64                 mov     rdx, rax
.text:0000000000003F67                 mov     rsi, rbx
.text:0000000000003F6A                 xor     eax, eax
.text:0000000000003F6C                 call    xasprintf
.text:0000000000003F71                 mov     rdi, rbx        ; ptr
.text:0000000000003F74                 mov     rbp, rax
.text:0000000000003F77                 call    _free
.text:0000000000003F7C                 mov     rax, rbp
.text:0000000000003F7F                 pop     rbx
.text:0000000000003F80                 pop     rbp
.text:0000000000003F81                 pop     r12
.text:0000000000003F83                 retn
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: default_format+C↑j
.text:0000000000003F84                 lea     rsi, aFileNId8iNamel ; "  File: \"%n\"\n    ID: %-8i Namelen: %"...
.text:0000000000003F8B                 xor     edi, edi        ; domainname
.text:0000000000003F8D                 mov     edx, 5          ; category
.text:0000000000003F92                 call    _dcgettext
.text:0000000000003F97                 pop     rbx
.text:0000000000003F98                 pop     rbp
.text:0000000000003F99                 pop     r12
.text:0000000000003F9B                 mov     rdi, rax        ; src
.text:0000000000003F9E                 jmp     xstrdup
.text:0000000000003FA3 ; ---------------------------------------------------------------------------
.text:0000000000003FA3
.text:0000000000003FA3 loc_3FA3:                               ; CODE XREF: default_format+25↑j
.text:0000000000003FA3                 pop     rbx
.text:0000000000003FA4                 pop     rbp
.text:0000000000003FA5                 pop     r12
.text:0000000000003FA7                 lea     rdi, fmt_terse_regular ; "%n %s %b %f %u %g %D %i %h %t %T %X %Y "...
.text:0000000000003FAE                 jmp     xstrdup
.text:0000000000003FAE ; } // starts at 3E90
.text:0000000000003FAE default_format  endp
.text:0000000000003FAE
.text:0000000000003FAE ; ---------------------------------------------------------------------------
.text:0000000000003FB3                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0
.text:0000000000003FC0 out_epoch_sec_isra_9 proc near          ; CODE XREF: print_stat+2AB↓p
.text:0000000000003FC0                                         ; print_stat+2C3↓p ...
.text:0000000000003FC0
.text:0000000000003FC0 var_48          = qword ptr -48h
.text:0000000000003FC0 var_40          = qword ptr -40h
.text:0000000000003FC0
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 push    r15
.text:0000000000003FC2                 push    r14
.text:0000000000003FC4                 push    r13
.text:0000000000003FC6                 push    r12
.text:0000000000003FC8                 mov     r13, rdx
.text:0000000000003FCB                 push    rbp
.text:0000000000003FCC                 push    rbx
.text:0000000000003FCD                 mov     r12, rdx
.text:0000000000003FD0                 mov     rdx, rsi        ; n
.text:0000000000003FD3                 mov     rbp, rdi
.text:0000000000003FD6                 mov     rbx, rcx
.text:0000000000003FD9                 sub     rsp, 18h
.text:0000000000003FDD                 mov     [rsp+48h+var_48], rsi
.text:0000000000003FE1                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000003FE6                 call    _memchr
.text:0000000000003FEB                 test    rax, rax
.text:0000000000003FEE                 mov     r10, [rsp+48h+var_48]
.text:0000000000003FF2                 jz      loc_4150
.text:0000000000003FF8                 mov     rcx, rax
.text:0000000000003FFB                 mov     r15, rax
.text:0000000000003FFE                 mov     byte ptr [rbp+r10+0], 0
.text:0000000000004004                 movsx   eax, byte ptr [rax+1]
.text:0000000000004008                 sub     rcx, rbp
.text:000000000000400B                 sub     eax, 30h ; '0'
.text:000000000000400E                 cmp     eax, 9
.text:0000000000004011                 jbe     loc_40E0
.text:0000000000004017                 movsx   eax, byte ptr [r15-1]
.text:000000000000401C                 sub     eax, 30h ; '0'
.text:000000000000401F                 cmp     eax, 9
.text:0000000000004022                 jbe     loc_4200
.text:0000000000004028                 mov     r10, rcx
.text:000000000000402B                 mov     r15, rbx
.text:000000000000402E                 mov     esi, 1
.text:0000000000004033                 mov     dword ptr [rsp+48h+var_48], 0
.text:000000000000403A                 mov     r14d, 9
.text:0000000000004040                 mov     ecx, 1
.text:0000000000004045                 nop     dword ptr [rax]
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: out_epoch_sec_isra_9+183↓j
.text:0000000000004048                                         ; out_epoch_sec_isra_9+1C3↓j
.text:0000000000004048                 test    r12, r12
.text:000000000000404B                 jns     short loc_4056
.text:000000000000404D                 test    rbx, rbx
.text:0000000000004050                 jnz     loc_4190
.text:0000000000004056
.text:0000000000004056 loc_4056:                               ; CODE XREF: out_epoch_sec_isra_9+8B↑j
.text:0000000000004056                                         ; out_epoch_sec_isra_9+1FB↓j
.text:0000000000004056                 mov     rdx, r13
.text:0000000000004059                 mov     rsi, r10
.text:000000000000405C                 mov     rdi, rbp
.text:000000000000405F                 call    out_int
.text:0000000000004064
.text:0000000000004064 loc_4064:                               ; CODE XREF: out_epoch_sec_isra_9+234↓j
.text:0000000000004064                 test    r14d, r14d
.text:0000000000004067                 jz      short loc_40C9
.text:0000000000004069                 cmp     r14d, 9
.text:000000000000406D                 mov     ecx, 9
.text:0000000000004072                 mov     ebx, dword ptr [rsp+48h+var_48]
.text:0000000000004075                 cmovle  ecx, r14d
.text:0000000000004079                 mov     edx, 0
.text:000000000000407E                 sub     r14d, ecx
.text:0000000000004081                 test    eax, eax
.text:0000000000004083                 cmovs   eax, edx
.text:0000000000004086                 xor     r9d, r9d
.text:0000000000004089                 cmp     eax, ebx
.text:000000000000408B                 jge     short loc_40A6
.text:000000000000408D                 mov     ebp, ebx
.text:000000000000408F                 sub     ebp, eax
.text:0000000000004091                 mov     rax, cs:decimal_point_len
.text:0000000000004098                 movsxd  rdx, ebp
.text:000000000000409B                 sub     ebp, eax
.text:000000000000409D                 sub     ebp, ecx
.text:000000000000409F                 cmp     rdx, rax
.text:00000000000040A2                 cmova   r9d, ebp
.text:00000000000040A6
.text:00000000000040A6 loc_40A6:                               ; CODE XREF: out_epoch_sec_isra_9+CB↑j
.text:00000000000040A6                 mov     rdx, cs:decimal_point
.text:00000000000040AD                 push    0
.text:00000000000040AF                 lea     rsi, aSDD       ; "%s%.*d%-*.*d"
.text:00000000000040B6                 push    r14
.text:00000000000040B8                 mov     r8d, r15d
.text:00000000000040BB                 mov     edi, 1
.text:00000000000040C0                 xor     eax, eax
.text:00000000000040C2                 call    ___printf_chk
.text:00000000000040C7                 pop     rax
.text:00000000000040C8                 pop     rdx
.text:00000000000040C9
.text:00000000000040C9 loc_40C9:                               ; CODE XREF: out_epoch_sec_isra_9+A7↑j
.text:00000000000040C9                 add     rsp, 18h
.text:00000000000040CD                 pop     rbx
.text:00000000000040CE                 pop     rbp
.text:00000000000040CF                 pop     r12
.text:00000000000040D1                 pop     r13
.text:00000000000040D3                 pop     r14
.text:00000000000040D5                 pop     r15
.text:00000000000040D7                 retn
.text:00000000000040D7 ; ---------------------------------------------------------------------------
.text:00000000000040D8                 align 20h
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: out_epoch_sec_isra_9+51↑j
.text:00000000000040E0                 lea     rdi, [r15+1]    ; nptr
.text:00000000000040E4                 mov     edx, 0Ah        ; base
.text:00000000000040E9                 xor     esi, esi        ; endptr
.text:00000000000040EB                 mov     [rsp+48h+var_48], rcx
.text:00000000000040EF                 call    _strtol
.text:00000000000040F4                 mov     edx, 7FFFFFFFh
.text:00000000000040F9                 cmp     rax, 7FFFFFFFh
.text:00000000000040FF                 mov     rcx, [rsp+48h+var_48]
.text:0000000000004103                 cmovg   rax, rdx
.text:0000000000004107                 test    eax, eax
.text:0000000000004109                 mov     r14d, eax
.text:000000000000410C                 jz      loc_42D0
.text:0000000000004112                 movsx   eax, byte ptr [r15-1]
.text:0000000000004117                 sub     eax, 30h ; '0'
.text:000000000000411A                 cmp     eax, 9
.text:000000000000411D                 jbe     loc_4206
.text:0000000000004123                 mov     r10, rcx
.text:0000000000004126                 mov     dword ptr [rsp+48h+var_48], 0
.text:000000000000412D                 nop     dword ptr [rax]
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: out_epoch_sec_isra_9+292↓j
.text:0000000000004130                                         ; out_epoch_sec_isra_9+2B7↓j ...
.text:0000000000004130                 cmp     r14d, 8
.text:0000000000004134                 jle     short loc_415A
.text:0000000000004136                 mov     r15, rbx
.text:0000000000004139                 mov     esi, 1
.text:000000000000413E                 mov     ecx, 1
.text:0000000000004143                 jmp     loc_4048
.text:0000000000004143 ; ---------------------------------------------------------------------------
.text:0000000000004148                 align 10h
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: out_epoch_sec_isra_9+32↑j
.text:0000000000004150                 mov     dword ptr [rsp+48h+var_48], 0
.text:0000000000004157                 xor     r14d, r14d
.text:000000000000415A
.text:000000000000415A loc_415A:                               ; CODE XREF: out_epoch_sec_isra_9+174↑j
.text:000000000000415A                                         ; out_epoch_sec_isra_9+31A↓j
.text:000000000000415A                 mov     esi, r14d
.text:000000000000415D                 mov     ecx, 1
.text:0000000000004162                 nop     word ptr [rax+rax+00h]
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: out_epoch_sec_isra_9+1B3↓j
.text:0000000000004168                 lea     ecx, [rcx+rcx*4]
.text:000000000000416B                 add     esi, 1
.text:000000000000416E                 add     ecx, ecx
.text:0000000000004170                 cmp     esi, 9
.text:0000000000004173                 jnz     short loc_4168
.text:0000000000004175                 mov     rax, rbx
.text:0000000000004178                 movsxd  rsi, ecx
.text:000000000000417B                 cqo
.text:000000000000417D                 idiv    rsi
.text:0000000000004180                 mov     r15, rax
.text:0000000000004183                 jmp     loc_4048
.text:0000000000004183 ; ---------------------------------------------------------------------------
.text:0000000000004188                 align 10h
.text:0000000000004190
.text:0000000000004190 loc_4190:                               ; CODE XREF: out_epoch_sec_isra_9+90↑j
.text:0000000000004190                 mov     eax, 3B9ACA00h
.text:0000000000004195                 cdq
.text:0000000000004196                 idiv    ecx
.text:0000000000004198                 sub     eax, r15d
.text:000000000000419B                 mov     r15d, eax
.text:000000000000419E                 mov     rax, rbx
.text:00000000000041A1                 cqo
.text:00000000000041A3                 idiv    rsi
.text:00000000000041A6                 xor     eax, eax
.text:00000000000041A8                 test    rdx, rdx
.text:00000000000041AB                 setnz   al
.text:00000000000041AE                 xor     r13d, r13d
.text:00000000000041B1                 sub     r15d, eax
.text:00000000000041B4                 setnz   r13b
.text:00000000000041B8                 add     r13, r12
.text:00000000000041BB                 jnz     loc_4056
.text:00000000000041C1                 lea     rcx, a0f        ; ".0f"
.text:00000000000041C8                 lea     rdx, a0         ; "'-+ 0"
.text:00000000000041CF                 mov     rsi, r10
.text:00000000000041D2                 mov     rdi, rbp
.text:00000000000041D5                 call    make_format
.text:00000000000041DA                 movsd   xmm0, cs:qword_F270
.text:00000000000041E2                 mov     rsi, rbp
.text:00000000000041E5                 mov     edi, 1
.text:00000000000041EA                 mov     eax, 1
.text:00000000000041EF                 call    ___printf_chk
.text:00000000000041F4                 jmp     loc_4064
.text:00000000000041F4 ; ---------------------------------------------------------------------------
.text:00000000000041F9                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: out_epoch_sec_isra_9+62↑j
.text:0000000000004200                 mov     r14d, 9
.text:0000000000004206
.text:0000000000004206 loc_4206:                               ; CODE XREF: out_epoch_sec_isra_9+15D↑j
.text:0000000000004206                 mov     byte ptr [r15], 0
.text:000000000000420A                 nop     word ptr [rax+rax+00h]
.text:0000000000004210
.text:0000000000004210 loc_4210:                               ; CODE XREF: out_epoch_sec_isra_9+25F↓j
.text:0000000000004210                 sub     r15, 1
.text:0000000000004214                 movsx   eax, byte ptr [r15-1]
.text:0000000000004219                 sub     eax, 30h ; '0'
.text:000000000000421C                 cmp     eax, 9
.text:000000000000421F                 jbe     short loc_4210
.text:0000000000004221                 mov     edx, 0Ah        ; base
.text:0000000000004226                 xor     esi, esi        ; endptr
.text:0000000000004228                 mov     rdi, r15        ; nptr
.text:000000000000422B                 mov     [rsp+48h+var_40], rcx
.text:0000000000004230                 call    _strtol
.text:0000000000004235                 mov     edx, 7FFFFFFFh
.text:000000000000423A                 cmp     rax, 7FFFFFFFh
.text:0000000000004240                 mov     rcx, [rsp+48h+var_40]
.text:0000000000004245                 cmovg   rax, rdx
.text:0000000000004249                 cmp     eax, 1
.text:000000000000424C                 mov     dword ptr [rsp+48h+var_48], eax
.text:000000000000424F                 mov     r10, rcx
.text:0000000000004252                 jle     loc_4130
.text:0000000000004258                 xor     edx, edx
.text:000000000000425A                 cmp     byte ptr [r15], 30h ; '0'
.text:000000000000425E                 movsxd  rcx, eax
.text:0000000000004261                 setz    dl
.text:0000000000004264                 add     r15, rdx
.text:0000000000004267                 mov     rdx, cs:decimal_point_len
.text:000000000000426E                 mov     r10, r15
.text:0000000000004271                 sub     r10, rbp
.text:0000000000004274                 cmp     rcx, rdx
.text:0000000000004277                 jbe     loc_4130
.text:000000000000427D                 sub     eax, edx
.text:000000000000427F                 cmp     eax, 1
.text:0000000000004282                 jle     loc_4130
.text:0000000000004288                 sub     eax, r14d
.text:000000000000428B                 cmp     eax, 1
.text:000000000000428E                 jle     loc_4130
.text:0000000000004294                 cmp     rbp, r15
.text:0000000000004297                 mov     rdi, rbp
.text:000000000000429A                 jnb     short loc_42F5
.text:000000000000429C                 mov     rdx, rbp
.text:000000000000429F                 xor     esi, esi
.text:00000000000042A1                 jmp     short loc_42B7
.text:00000000000042A1 ; ---------------------------------------------------------------------------
.text:00000000000042A3                 align 8
.text:00000000000042A8
.text:00000000000042A8 loc_42A8:                               ; CODE XREF: out_epoch_sec_isra_9+2FD↓j
.text:00000000000042A8                 mov     [rdi], cl
.text:00000000000042AA                 add     rdi, 1
.text:00000000000042AE
.text:00000000000042AE loc_42AE:                               ; CODE XREF: out_epoch_sec_isra_9+304↓j
.text:00000000000042AE                 add     rdx, 1
.text:00000000000042B2                 cmp     r15, rdx
.text:00000000000042B5                 jz      short loc_42DF
.text:00000000000042B7
.text:00000000000042B7 loc_42B7:                               ; CODE XREF: out_epoch_sec_isra_9+2E1↑j
.text:00000000000042B7                 movzx   ecx, byte ptr [rdx]
.text:00000000000042BA                 cmp     cl, 2Dh ; '-'
.text:00000000000042BD                 jnz     short loc_42A8
.text:00000000000042BF                 mov     esi, 1
.text:00000000000042C4                 jmp     short loc_42AE
.text:00000000000042C4 ; ---------------------------------------------------------------------------
.text:00000000000042C6                 align 10h
.text:00000000000042D0
.text:00000000000042D0 loc_42D0:                               ; CODE XREF: out_epoch_sec_isra_9+14C↑j
.text:00000000000042D0                 mov     dword ptr [rsp+48h+var_48], 0
.text:00000000000042D7                 mov     r10, rcx
.text:00000000000042DA                 jmp     loc_415A
.text:00000000000042DF ; ---------------------------------------------------------------------------
.text:00000000000042DF
.text:00000000000042DF loc_42DF:                               ; CODE XREF: out_epoch_sec_isra_9+2F5↑j
.text:00000000000042DF                 mov     r15, rdi
.text:00000000000042E2                 xor     r10d, r10d
.text:00000000000042E5                 sub     r15, rbp
.text:00000000000042E8                 test    sil, sil
.text:00000000000042EB                 jz      short loc_42F8
.text:00000000000042ED
.text:00000000000042ED loc_42ED:                               ; CODE XREF: out_epoch_sec_isra_9+358↓j
.text:00000000000042ED                 add     r10, r15
.text:00000000000042F0                 jmp     loc_4130
.text:00000000000042F5 ; ---------------------------------------------------------------------------
.text:00000000000042F5
.text:00000000000042F5 loc_42F5:                               ; CODE XREF: out_epoch_sec_isra_9+2DA↑j
.text:00000000000042F5                 xor     r15d, r15d
.text:00000000000042F8
.text:00000000000042F8 loc_42F8:                               ; CODE XREF: out_epoch_sec_isra_9+32B↑j
.text:00000000000042F8                 lea     rcx, aYMD+6     ; "%d"
.text:00000000000042FF                 mov     r8d, eax
.text:0000000000004302                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004309                 mov     esi, 1
.text:000000000000430E                 xor     eax, eax
.text:0000000000004310                 call    ___sprintf_chk
.text:0000000000004315                 movsxd  r10, eax
.text:0000000000004318                 jmp     short loc_42ED
.text:0000000000004318 ; } // starts at 3FC0
.text:0000000000004318 out_epoch_sec_isra_9 endp
.text:0000000000004318
.text:0000000000004318 ; ---------------------------------------------------------------------------
.text:000000000000431A                 align 20h
.text:0000000000004320
.text:0000000000004320 ; =============== S U B R O U T I N E =======================================
.text:0000000000004320
.text:0000000000004320
.text:0000000000004320 print_stat      proc near               ; DATA XREF: main+33E↑o
.text:0000000000004320
.text:0000000000004320 path            = qword ptr -38h
.text:0000000000004320 var_30          = qword ptr -30h
.text:0000000000004320
.text:0000000000004320 ; __unwind {
.text:0000000000004320                 push    r14
.text:0000000000004322                 push    r13
.text:0000000000004324                 sub     edx, 41h ; 'A'  ; switch 58 cases
.text:0000000000004327                 push    r12
.text:0000000000004329                 push    rbp
.text:000000000000432A                 push    rbx
.text:000000000000432B                 sub     rsp, 10h
.text:000000000000432F                 cmp     edx, 39h
.text:0000000000004332                 ja      def_434C        ; jumptable 000000000000434C default case, cases 69,72-77,79-83,86,91-96,99,101,106-108,112-114,118
.text:0000000000004338                 lea     rcx, jpt_434C
.text:000000000000433F                 mov     rbx, rdi
.text:0000000000004342                 mov     rbp, rsi
.text:0000000000004345                 movsxd  rax, ds:(jpt_434C - 0E17Ch)[rcx+rdx*4]
.text:0000000000004349                 add     rax, rcx
.text:000000000000434C                 jmp     rax             ; switch jump
.text:000000000000434C ; ---------------------------------------------------------------------------
.text:000000000000434E                 align 10h
.text:0000000000004350
.text:0000000000004350 loc_4350:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004350                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004350                 mov     rsi, [r9+70h]   ; jumptable 000000000000434C case 122
.text:0000000000004354                 mov     rdi, [r9+68h]
.text:0000000000004358
.text:0000000000004358 loc_4358:                               ; CODE XREF: print_stat+68↓j
.text:0000000000004358                                         ; print_stat+78↓j
.text:0000000000004358                 call    human_time
.text:000000000000435D
.text:000000000000435D loc_435D:                               ; CODE XREF: print_stat+4E8↓j
.text:000000000000435D                 mov     rdx, rax
.text:0000000000004360                 mov     rsi, rbp
.text:0000000000004363                 mov     rdi, rbx
.text:0000000000004366                 xor     r12d, r12d
.text:0000000000004369                 call    out_string
.text:000000000000436E
.text:000000000000436E loc_436E:                               ; CODE XREF: print_stat+95↓j
.text:000000000000436E                                         ; print_stat+AC↓j ...
.text:000000000000436E                 add     rsp, 10h
.text:0000000000004372                 mov     eax, r12d
.text:0000000000004375                 pop     rbx
.text:0000000000004376                 pop     rbp
.text:0000000000004377                 pop     r12
.text:0000000000004379                 pop     r13
.text:000000000000437B                 pop     r14
.text:000000000000437D                 retn
.text:000000000000437D ; ---------------------------------------------------------------------------
.text:000000000000437E                 align 20h
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004380                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004380                 mov     rsi, [r9+60h]   ; jumptable 000000000000434C case 121
.text:0000000000004384                 mov     rdi, [r9+58h]
.text:0000000000004388                 jmp     short loc_4358
.text:0000000000004388 ; ---------------------------------------------------------------------------
.text:000000000000438A                 align 10h
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004390                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004390                 mov     rsi, [r9+50h]   ; jumptable 000000000000434C case 120
.text:0000000000004394                 mov     rdi, [r9+48h]
.text:0000000000004398                 jmp     short loc_4358
.text:0000000000004398 ; ---------------------------------------------------------------------------
.text:000000000000439A                 align 20h
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000043A0                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000043A0                 lea     rdx, aLt+2      ; jumptable 000000000000434C case 119
.text:00000000000043A7
.text:00000000000043A7 loc_43A7:                               ; CODE XREF: print_stat+313↓j
.text:00000000000043A7                                         ; print_stat+31C↓j ...
.text:00000000000043A7                 mov     rsi, rbp
.text:00000000000043AA                 mov     rdi, rbx
.text:00000000000043AD                 xor     r12d, r12d
.text:00000000000043B0                 call    out_string
.text:00000000000043B5                 jmp     short loc_436E
.text:00000000000043B5 ; ---------------------------------------------------------------------------
.text:00000000000043B7                 align 20h
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000043C0                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000043C0                 mov     edx, [r9+1Ch]   ; jumptable 000000000000434C case 117
.text:00000000000043C4                 xor     r12d, r12d
.text:00000000000043C7                 call    out_uint
.text:00000000000043CC                 jmp     short loc_436E
.text:00000000000043CC ; ---------------------------------------------------------------------------
.text:00000000000043CE                 align 10h
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000043D0                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000043D0                 mov     rax, [r9+28h]   ; jumptable 000000000000434C case 116
.text:00000000000043D4                 mov     rdx, rax
.text:00000000000043D7                 shr     rax, 20h
.text:00000000000043DB                 shr     rdx, 8
.text:00000000000043DF                 mov     ecx, edx
.text:00000000000043E1                 mov     rdx, rax
.text:00000000000043E4                 and     ecx, 0FFFh
.text:00000000000043EA                 and     edx, 0FFFFF000h
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: print_stat+338↓j
.text:00000000000043F0                 or      edx, ecx
.text:00000000000043F2                 mov     rsi, rbp
.text:00000000000043F5                 mov     rdi, rbx
.text:00000000000043F8                 call    out_uint_x
.text:00000000000043FD                 xor     r12d, r12d
.text:0000000000004400                 jmp     loc_436E
.text:0000000000004400 ; ---------------------------------------------------------------------------
.text:0000000000004405                 align 8
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004408                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004408                 mov     rdx, [r9+30h]   ; jumptable 000000000000434C case 115
.text:000000000000440C                 xor     r12d, r12d
.text:000000000000440F                 call    out_int
.text:0000000000004414                 jmp     loc_436E
.text:0000000000004414 ; ---------------------------------------------------------------------------
.text:0000000000004419                 align 20h
.text:0000000000004420
.text:0000000000004420 loc_4420:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004420                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004420                 mov     rdx, [r9+38h]   ; jumptable 000000000000434C case 111
.text:0000000000004424                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000442E                 lea     rcx, [rdx-1]
.text:0000000000004432                 cmp     rcx, rax
.text:0000000000004435                 mov     eax, 200h
.text:000000000000443A                 cmova   rdx, rax
.text:000000000000443E                 xor     r12d, r12d
.text:0000000000004441                 call    out_uint
.text:0000000000004446                 jmp     loc_436E
.text:0000000000004446 ; ---------------------------------------------------------------------------
.text:000000000000444B                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004450                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004450                 mov     rdx, r8         ; jumptable 000000000000434C case 110
.text:0000000000004453                 xor     r12d, r12d
.text:0000000000004456                 call    out_string
.text:000000000000445B                 jmp     loc_436E
.text:0000000000004460 ; ---------------------------------------------------------------------------
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004460                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004460                 cmp     cs:follow_links, 0 ; jumptable 000000000000434C case 109
.text:0000000000004467                 jnz     short loc_447D
.text:0000000000004469                 mov     eax, [r9+18h]
.text:000000000000446D                 and     eax, 0F000h
.text:0000000000004472                 cmp     eax, 0A000h
.text:0000000000004477                 jz      loc_4840
.text:000000000000447D
.text:000000000000447D loc_447D:                               ; CODE XREF: print_stat+147↑j
.text:000000000000447D                 mov     rdi, r8         ; name
.text:0000000000004480                 mov     [rsp+38h+var_30], r9
.text:0000000000004485                 mov     [rsp+38h+path], r8
.text:0000000000004489                 call    _canonicalize_file_name
.text:000000000000448E                 test    rax, rax
.text:0000000000004491                 mov     r13, rax
.text:0000000000004494                 mov     r8, [rsp+38h+path]
.text:0000000000004498                 mov     r9, [rsp+38h+var_30]
.text:000000000000449D                 jz      loc_486F
.text:00000000000044A3                 mov     rdi, rax        ; s2
.text:00000000000044A6                 mov     [rsp+38h+var_30], r9
.text:00000000000044AB                 mov     [rsp+38h+path], r8
.text:00000000000044AF                 call    find_bind_mount
.text:00000000000044B4                 mov     rdi, r13        ; ptr
.text:00000000000044B7                 mov     r14, rax
.text:00000000000044BA                 xor     r12d, r12d
.text:00000000000044BD                 call    _free
.text:00000000000044C2                 xor     r13d, r13d
.text:00000000000044C5                 test    r14, r14
.text:00000000000044C8                 mov     r8, [rsp+38h+path]
.text:00000000000044CC                 mov     r9, [rsp+38h+var_30]
.text:00000000000044D1                 jz      loc_4840
.text:00000000000044D7
.text:00000000000044D7 loc_44D7:                               ; CODE XREF: print_stat+54A↓j
.text:00000000000044D7                                         ; print_stat+598↓j ...
.text:00000000000044D7                 mov     rdx, r14
.text:00000000000044DA
.text:00000000000044DA loc_44DA:                               ; CODE XREF: print_stat+3CF↓j
.text:00000000000044DA                 mov     rdi, rbx
.text:00000000000044DD                 mov     rsi, rbp
.text:00000000000044E0                 call    out_string
.text:00000000000044E5                 mov     rdi, r13        ; ptr
.text:00000000000044E8                 call    _free
.text:00000000000044ED                 jmp     loc_436E
.text:00000000000044ED ; ---------------------------------------------------------------------------
.text:00000000000044F2                 align 8
.text:00000000000044F8
.text:00000000000044F8 loc_44F8:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000044F8                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000044F8                 mov     rdx, [r9+8]     ; jumptable 000000000000434C case 105
.text:00000000000044FC                 xor     r12d, r12d
.text:00000000000044FF                 call    out_uint
.text:0000000000004504                 jmp     loc_436E
.text:0000000000004504 ; ---------------------------------------------------------------------------
.text:0000000000004509                 align 10h
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004510                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004510                 mov     edx, [r9+20h]   ; jumptable 000000000000434C case 103
.text:0000000000004514                 xor     r12d, r12d
.text:0000000000004517                 call    out_uint
.text:000000000000451C                 jmp     loc_436E
.text:000000000000451C ; ---------------------------------------------------------------------------
.text:0000000000004521                 align 8
.text:0000000000004528
.text:0000000000004528 loc_4528:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004528                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004528                 mov     edx, [r9+18h]   ; jumptable 000000000000434C case 102
.text:000000000000452C                 xor     r12d, r12d
.text:000000000000452F                 call    out_uint_x
.text:0000000000004534                 jmp     loc_436E
.text:0000000000004534 ; ---------------------------------------------------------------------------
.text:0000000000004539                 align 20h
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004540                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004540                 mov     rdx, [r9+10h]   ; jumptable 000000000000434C case 104
.text:0000000000004544                 xor     r12d, r12d
.text:0000000000004547                 call    out_uint
.text:000000000000454C                 jmp     loc_436E
.text:000000000000454C ; ---------------------------------------------------------------------------
.text:0000000000004551                 align 8
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004558                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004558                 mov     rdx, [r9]       ; jumptable 000000000000434C case 100
.text:000000000000455B                 xor     r12d, r12d
.text:000000000000455E                 call    out_uint
.text:0000000000004563                 jmp     loc_436E
.text:0000000000004563 ; ---------------------------------------------------------------------------
.text:0000000000004568                 align 10h
.text:0000000000004570
.text:0000000000004570 loc_4570:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004570                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004570                 mov     rdx, [r9+40h]   ; jumptable 000000000000434C case 98
.text:0000000000004574                 xor     r12d, r12d
.text:0000000000004577                 call    out_uint
.text:000000000000457C                 jmp     loc_436E
.text:000000000000457C ; ---------------------------------------------------------------------------
.text:0000000000004581                 align 8
.text:0000000000004588
.text:0000000000004588 loc_4588:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004588                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004588                 mov     r12d, [r9+18h]  ; jumptable 000000000000434C case 97
.text:000000000000458C                 lea     rcx, aLo        ; "lo"
.text:0000000000004593                 lea     rdx, unk_DA87
.text:000000000000459A                 call    make_format
.text:000000000000459F                 and     r12d, 0FFFh
.text:00000000000045A6                 mov     rsi, rbx
.text:00000000000045A9                 mov     edi, 1
.text:00000000000045AE                 mov     rdx, r12
.text:00000000000045B1                 xor     eax, eax
.text:00000000000045B3                 xor     r12d, r12d
.text:00000000000045B6                 call    ___printf_chk
.text:00000000000045BB                 jmp     loc_436E
.text:00000000000045C0 ; ---------------------------------------------------------------------------
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000045C0                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000045C0                 mov     rcx, [r9+70h]   ; jumptable 000000000000434C case 90
.text:00000000000045C4                 mov     rdx, [r9+68h]
.text:00000000000045C8                 xor     r12d, r12d
.text:00000000000045CB                 call    out_epoch_sec_isra_9
.text:00000000000045D0                 jmp     loc_436E
.text:00000000000045D0 ; ---------------------------------------------------------------------------
.text:00000000000045D5                 align 8
.text:00000000000045D8
.text:00000000000045D8 loc_45D8:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000045D8                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000045D8                 mov     rcx, [r9+60h]   ; jumptable 000000000000434C case 89
.text:00000000000045DC                 mov     rdx, [r9+58h]
.text:00000000000045E0                 xor     r12d, r12d
.text:00000000000045E3                 call    out_epoch_sec_isra_9
.text:00000000000045E8                 jmp     loc_436E
.text:00000000000045E8 ; ---------------------------------------------------------------------------
.text:00000000000045ED                 align 10h
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000045F0                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000045F0                 mov     rcx, [r9+50h]   ; jumptable 000000000000434C case 88
.text:00000000000045F4                 mov     rdx, [r9+48h]
.text:00000000000045F8                 xor     r12d, r12d
.text:00000000000045FB                 call    out_epoch_sec_isra_9
.text:0000000000004600                 jmp     loc_436E
.text:0000000000004600 ; ---------------------------------------------------------------------------
.text:0000000000004605                 align 8
.text:0000000000004608
.text:0000000000004608 loc_4608:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004608                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004608                 xor     edx, edx        ; jumptable 000000000000434C case 87
.text:000000000000460A                 xor     ecx, ecx
.text:000000000000460C                 xor     r12d, r12d
.text:000000000000460F                 call    out_epoch_sec_isra_9
.text:0000000000004614                 jmp     loc_436E
.text:0000000000004614 ; ---------------------------------------------------------------------------
.text:0000000000004619                 align 20h
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004620                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004620                 mov     edi, [r9+1Ch]   ; jumptable 000000000000434C case 85
.text:0000000000004624                 call    _getpwuid
.text:0000000000004629                 test    rax, rax
.text:000000000000462C                 lea     rdx, aUnknown   ; "UNKNOWN"
.text:0000000000004633                 jz      loc_43A7
.text:0000000000004639
.text:0000000000004639 loc_4639:                               ; CODE XREF: print_stat+3EB↓j
.text:0000000000004639                 mov     rdx, [rax]
.text:000000000000463C                 jmp     loc_43A7
.text:000000000000463C ; ---------------------------------------------------------------------------
.text:0000000000004641                 align 8
.text:0000000000004648
.text:0000000000004648 loc_4648:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004648                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004648                 mov     rax, [r9+28h]   ; jumptable 000000000000434C case 84
.text:000000000000464C                 movzx   ecx, al
.text:000000000000464F                 shr     rax, 0Ch
.text:0000000000004653                 mov     rdx, rax
.text:0000000000004656                 xor     dl, dl
.text:0000000000004658                 jmp     loc_43F0
.text:0000000000004658 ; ---------------------------------------------------------------------------
.text:000000000000465D                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004660                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004660                 xor     edi, edi        ; jumptable 000000000000434C case 78
.text:0000000000004662                 mov     [rsp+38h+var_30], r9
.text:0000000000004667                 mov     [rsp+38h+path], r8
.text:000000000000466B                 call    get_quoting_style
.text:0000000000004670                 mov     r8, [rsp+38h+path]
.text:0000000000004674                 mov     edi, eax
.text:0000000000004676                 xor     r12d, r12d
.text:0000000000004679                 mov     rsi, r8
.text:000000000000467C                 call    quotearg_style
.text:0000000000004681                 mov     rsi, rbp
.text:0000000000004684                 mov     rdx, rax
.text:0000000000004687                 mov     rdi, rbx
.text:000000000000468A                 call    out_string
.text:000000000000468F                 mov     r9, [rsp+38h+var_30]
.text:0000000000004694                 mov     r8, [rsp+38h+path]
.text:0000000000004698                 mov     eax, [r9+18h]
.text:000000000000469C                 and     eax, 0F000h
.text:00000000000046A1                 cmp     eax, 0A000h
.text:00000000000046A6                 jnz     loc_436E
.text:00000000000046AC                 mov     rsi, [r9+30h]
.text:00000000000046B0                 mov     rdi, r8         ; path
.text:00000000000046B3                 call    areadlink_with_size
.text:00000000000046B8                 test    rax, rax
.text:00000000000046BB                 mov     r13, rax
.text:00000000000046BE                 mov     r8, [rsp+38h+path]
.text:00000000000046C2                 jz      loc_48CF
.text:00000000000046C8                 lea     rsi, asc_DE0F   ; " -> "
.text:00000000000046CF                 mov     edi, 1
.text:00000000000046D4                 xor     eax, eax
.text:00000000000046D6                 call    ___printf_chk
.text:00000000000046DB                 xor     edi, edi
.text:00000000000046DD                 call    get_quoting_style
.text:00000000000046E2                 mov     rsi, r13
.text:00000000000046E5                 mov     edi, eax
.text:00000000000046E7                 call    quotearg_style
.text:00000000000046EC                 mov     rdx, rax
.text:00000000000046EF                 jmp     loc_44DA
.text:00000000000046EF ; ---------------------------------------------------------------------------
.text:00000000000046F4                 align 8
.text:00000000000046F8
.text:00000000000046F8 loc_46F8:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000046F8                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000046F8                 mov     edi, [r9+20h]   ; jumptable 000000000000434C case 71
.text:00000000000046FC                 call    _getgrgid
.text:0000000000004701                 test    rax, rax
.text:0000000000004704                 lea     rdx, aUnknown   ; "UNKNOWN"
.text:000000000000470B                 jnz     loc_4639
.text:0000000000004711                 jmp     loc_43A7
.text:0000000000004711 ; ---------------------------------------------------------------------------
.text:0000000000004716                 align 20h
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004720                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004720                 mov     rdx, [r9]       ; jumptable 000000000000434C case 68
.text:0000000000004723                 xor     r12d, r12d
.text:0000000000004726                 call    out_uint_x
.text:000000000000472B                 jmp     loc_436E
.text:0000000000004730 ; ---------------------------------------------------------------------------
.text:0000000000004730
.text:0000000000004730 loc_4730:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004730                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004730                 mov     [rsp+38h+path], r8 ; jumptable 000000000000434C case 67
.text:0000000000004734                 call    ___errno_location
.text:0000000000004739                 mov     r8, [rsp+38h+path]
.text:000000000000473D                 mov     edi, 4
.text:0000000000004742                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000004748                 mov     r12, rax
.text:000000000000474B                 mov     rsi, r8
.text:000000000000474E                 call    quotearg_style
.text:0000000000004753                 lea     rsi, aFailedToGetSec ; "failed to get security context of %s"
.text:000000000000475A                 mov     edx, 5          ; category
.text:000000000000475F                 xor     edi, edi        ; domainname
.text:0000000000004761                 mov     r13, rax
.text:0000000000004764                 call    _dcgettext
.text:0000000000004769                 mov     esi, [r12]      ; errnum
.text:000000000000476D                 mov     rdx, rax        ; format
.text:0000000000004770                 mov     rcx, r13
.text:0000000000004773                 xor     edi, edi        ; status
.text:0000000000004775                 xor     eax, eax
.text:0000000000004777                 mov     r12d, 1
.text:000000000000477D                 call    _error
.text:0000000000004782                 mov     eax, 73h ; 's'
.text:0000000000004787                 lea     rdx, asc_DDF0   ; "?"
.text:000000000000478E                 mov     rsi, rbx
.text:0000000000004791                 mov     [rbx+rbp], ax
.text:0000000000004795                 mov     edi, 1
.text:000000000000479A                 xor     eax, eax
.text:000000000000479C                 call    ___printf_chk
.text:00000000000047A1                 jmp     loc_436E
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A6                 align 10h
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000047B0                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000047B0                 mov     edx, 200h       ; jumptable 000000000000434C case 66
.text:00000000000047B5                 xor     r12d, r12d
.text:00000000000047B8                 call    out_uint
.text:00000000000047BD                 jmp     loc_436E
.text:00000000000047BD ; ---------------------------------------------------------------------------
.text:00000000000047C2                 align 8
.text:00000000000047C8
.text:00000000000047C8 loc_47C8:                               ; CODE XREF: print_stat+2C↑j
.text:00000000000047C8                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:00000000000047C8                 lea     rsi, modebuf_7294 ; jumptable 000000000000434C case 65
.text:00000000000047CF                 mov     rdi, r9
.text:00000000000047D2                 xor     r12d, r12d
.text:00000000000047D5                 call    filemodestring
.text:00000000000047DA                 lea     rdx, modebuf_7294
.text:00000000000047E1                 mov     rsi, rbp
.text:00000000000047E4                 mov     rdi, rbx
.text:00000000000047E7                 mov     cs:byte_213162, 0
.text:00000000000047EE                 call    out_string
.text:00000000000047F3                 jmp     loc_436E
.text:00000000000047F3 ; ---------------------------------------------------------------------------
.text:00000000000047F8                 align 20h
.text:0000000000004800
.text:0000000000004800 loc_4800:                               ; CODE XREF: print_stat+2C↑j
.text:0000000000004800                                         ; DATA XREF: .rodata:jpt_434C↓o
.text:0000000000004800                 mov     rdi, r9         ; jumptable 000000000000434C case 70
.text:0000000000004803                 call    file_type
.text:0000000000004808                 jmp     loc_435D
.text:0000000000004808 ; ---------------------------------------------------------------------------
.text:000000000000480D                 align 10h
.text:0000000000004810
.text:0000000000004810 def_434C:                               ; CODE XREF: print_stat+12↑j
.text:0000000000004810                                         ; print_stat+2C↑j
.text:0000000000004810                                         ; DATA XREF: ...
.text:0000000000004810                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 000000000000434C default case, cases 69,72-77,79-83,86,91-96,99,101,106-108,112-114,118
.text:0000000000004817                 mov     rax, [rdi+28h]
.text:000000000000481B                 cmp     rax, [rdi+30h]
.text:000000000000481F                 jnb     loc_48BD
.text:0000000000004825                 lea     rdx, [rax+1]
.text:0000000000004829                 xor     r12d, r12d
.text:000000000000482C                 mov     [rdi+28h], rdx
.text:0000000000004830                 mov     byte ptr [rax], 3Fh ; '?'
.text:0000000000004833                 jmp     loc_436E
.text:0000000000004833 ; ---------------------------------------------------------------------------
.text:0000000000004838                 align 20h
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: print_stat+157↑j
.text:0000000000004840                                         ; print_stat+1B1↑j
.text:0000000000004840                 mov     rsi, r9
.text:0000000000004843                 mov     rdi, r8         ; path
.text:0000000000004846                 call    find_mount_point
.text:000000000000484B                 test    rax, rax
.text:000000000000484E                 mov     r13, rax
.text:0000000000004851                 jz      short loc_48AB
.text:0000000000004853                 mov     rdi, rax        ; s2
.text:0000000000004856                 call    find_bind_mount
.text:000000000000485B                 test    rax, rax
.text:000000000000485E                 mov     r14, rax
.text:0000000000004861                 jz      loc_4916
.text:0000000000004867                 xor     r12d, r12d
.text:000000000000486A                 jmp     loc_44D7
.text:000000000000486F ; ---------------------------------------------------------------------------
.text:000000000000486F
.text:000000000000486F loc_486F:                               ; CODE XREF: print_stat+17D↑j
.text:000000000000486F                 mov     rsi, r8
.text:0000000000004872                 mov     edi, 4
.text:0000000000004877                 call    quotearg_style
.text:000000000000487C                 lea     rsi, aFailedToCanoni ; "failed to canonicalize %s"
.text:0000000000004883                 mov     edx, 5          ; category
.text:0000000000004888                 xor     edi, edi        ; domainname
.text:000000000000488A                 mov     r14, rax
.text:000000000000488D                 call    _dcgettext
.text:0000000000004892                 mov     r12, rax
.text:0000000000004895                 call    ___errno_location
.text:000000000000489A                 mov     esi, [rax]      ; errnum
.text:000000000000489C                 mov     rcx, r14
.text:000000000000489F                 mov     rdx, r12        ; format
.text:00000000000048A2                 xor     edi, edi        ; status
.text:00000000000048A4                 xor     eax, eax
.text:00000000000048A6                 call    _error
.text:00000000000048AB
.text:00000000000048AB loc_48AB:                               ; CODE XREF: print_stat+531↑j
.text:00000000000048AB                 mov     r12d, 1
.text:00000000000048B1                 lea     r14, asc_DDF0   ; "?"
.text:00000000000048B8                 jmp     loc_44D7
.text:00000000000048BD ; ---------------------------------------------------------------------------
.text:00000000000048BD
.text:00000000000048BD loc_48BD:                               ; CODE XREF: print_stat+4FF↑j
.text:00000000000048BD                 mov     esi, 3Fh ; '?'  ; int
.text:00000000000048C2                 xor     r12d, r12d
.text:00000000000048C5                 call    ___overflow
.text:00000000000048CA                 jmp     loc_436E
.text:00000000000048CF ; ---------------------------------------------------------------------------
.text:00000000000048CF
.text:00000000000048CF loc_48CF:                               ; CODE XREF: print_stat+3A2↑j
.text:00000000000048CF                 mov     rsi, r8
.text:00000000000048D2                 mov     edi, 4
.text:00000000000048D7                 mov     r12d, 1
.text:00000000000048DD                 call    quotearg_style
.text:00000000000048E2                 lea     rsi, aCannotReadSymb ; "cannot read symbolic link %s"
.text:00000000000048E9                 mov     edx, 5          ; category
.text:00000000000048EE                 xor     edi, edi        ; domainname
.text:00000000000048F0                 mov     rbp, rax
.text:00000000000048F3                 call    _dcgettext
.text:00000000000048F8                 mov     rbx, rax
.text:00000000000048FB                 call    ___errno_location
.text:0000000000004900                 mov     esi, [rax]      ; errnum
.text:0000000000004902                 mov     rcx, rbp
.text:0000000000004905                 mov     rdx, rbx        ; format
.text:0000000000004908                 xor     edi, edi        ; status
.text:000000000000490A                 xor     eax, eax
.text:000000000000490C                 call    _error
.text:0000000000004911                 jmp     loc_436E
.text:0000000000004916 ; ---------------------------------------------------------------------------
.text:0000000000004916
.text:0000000000004916 loc_4916:                               ; CODE XREF: print_stat+541↑j
.text:0000000000004916                 mov     r14, r13
.text:0000000000004919                 xor     r12d, r12d
.text:000000000000491C                 jmp     loc_44D7
.text:000000000000491C ; } // starts at 4320
.text:000000000000491C print_stat      endp
.text:000000000000491C
.text:000000000000491C ; ---------------------------------------------------------------------------
.text:0000000000004921                 align 10h
.text:0000000000004930
.text:0000000000004930 ; =============== S U B R O U T I N E =======================================
.text:0000000000004930
.text:0000000000004930 ; Attributes: noreturn
.text:0000000000004930
.text:0000000000004930 ; void __fastcall __noreturn usage(int status)
.text:0000000000004930                 public usage
.text:0000000000004930 usage           proc near               ; CODE XREF: main+101↑p
.text:0000000000004930                                         ; main+534↑p ...
.text:0000000000004930
.text:0000000000004930 var_A8          = qword ptr -0A8h
.text:0000000000004930 var_A0          = qword ptr -0A0h
.text:0000000000004930 var_98          = qword ptr -98h
.text:0000000000004930 var_90          = qword ptr -90h
.text:0000000000004930 var_88          = qword ptr -88h
.text:0000000000004930 var_80          = qword ptr -80h
.text:0000000000004930 var_78          = qword ptr -78h
.text:0000000000004930 var_70          = qword ptr -70h
.text:0000000000004930 var_68          = qword ptr -68h
.text:0000000000004930 var_60          = qword ptr -60h
.text:0000000000004930 var_58          = qword ptr -58h
.text:0000000000004930 var_50          = qword ptr -50h
.text:0000000000004930 var_48          = qword ptr -48h
.text:0000000000004930 var_40          = qword ptr -40h
.text:0000000000004930 var_30          = qword ptr -30h
.text:0000000000004930
.text:0000000000004930 ; __unwind {
.text:0000000000004930                 push    r13
.text:0000000000004932                 push    r12
.text:0000000000004934                 mov     edx, 5          ; category
.text:0000000000004939                 push    rbp
.text:000000000000493A                 push    rbx
.text:000000000000493B                 mov     ebp, edi
.text:000000000000493D                 sub     rsp, 88h
.text:0000000000004944                 mov     rbx, cs:program_name
.text:000000000000494B                 mov     rax, fs:28h
.text:0000000000004954                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004959                 xor     eax, eax
.text:000000000000495B                 test    edi, edi
.text:000000000000495D                 jz      short loc_498D
.text:000000000000495F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004966                 xor     edi, edi        ; domainname
.text:0000000000004968                 call    _dcgettext
.text:000000000000496D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004974                 mov     rdx, rax
.text:0000000000004977                 mov     rcx, rbx
.text:000000000000497A                 mov     esi, 1
.text:000000000000497F                 xor     eax, eax
.text:0000000000004981                 call    ___fprintf_chk
.text:0000000000004986
.text:0000000000004986 loc_4986:                               ; CODE XREF: usage+446↓j
.text:0000000000004986                 mov     edi, ebp        ; status
.text:0000000000004988                 call    _exit
.text:000000000000498D ; ---------------------------------------------------------------------------
.text:000000000000498D
.text:000000000000498D loc_498D:                               ; CODE XREF: usage+2D↑j
.text:000000000000498D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:0000000000004994                 xor     edi, edi        ; domainname
.text:0000000000004996                 call    _dcgettext
.text:000000000000499B                 mov     rdx, rbx
.text:000000000000499E                 mov     rsi, rax
.text:00000000000049A1                 mov     edi, 1
.text:00000000000049A6                 xor     eax, eax
.text:00000000000049A8                 call    ___printf_chk
.text:00000000000049AD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049B4                 lea     rsi, aDisplayFileOrF ; "Display file or file system status.\n"
.text:00000000000049BB                 mov     edx, 5          ; category
.text:00000000000049C0                 xor     edi, edi        ; domainname
.text:00000000000049C2                 call    _dcgettext
.text:00000000000049C7                 mov     rsi, rbx        ; stream
.text:00000000000049CA                 mov     rdi, rax        ; s
.text:00000000000049CD                 call    _fputs_unlocked
.text:00000000000049D2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049D9                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000049E0                 mov     edx, 5          ; category
.text:00000000000049E5                 xor     edi, edi        ; domainname
.text:00000000000049E7                 call    _dcgettext
.text:00000000000049EC                 mov     rsi, rbx        ; stream
.text:00000000000049EF                 mov     rdi, rax        ; s
.text:00000000000049F2                 call    _fputs_unlocked
.text:00000000000049F7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049FE                 lea     rsi, aLDereferenceFo ; "  -L, --dereference     follow links\n "...
.text:0000000000004A05                 mov     edx, 5          ; category
.text:0000000000004A0A                 xor     edi, edi        ; domainname
.text:0000000000004A0C                 call    _dcgettext
.text:0000000000004A11                 mov     rsi, rbx        ; stream
.text:0000000000004A14                 mov     rdi, rax        ; s
.text:0000000000004A17                 call    _fputs_unlocked
.text:0000000000004A1C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A23                 lea     rsi, aCFormatFormatU ; "  -c  --format=FORMAT   use the specifi"...
.text:0000000000004A2A                 mov     edx, 5          ; category
.text:0000000000004A2F                 xor     edi, edi        ; domainname
.text:0000000000004A31                 call    _dcgettext
.text:0000000000004A36                 mov     rsi, rbx        ; stream
.text:0000000000004A39                 mov     rdi, rax        ; s
.text:0000000000004A3C                 call    _fputs_unlocked
.text:0000000000004A41                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A48                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004A4F                 mov     edx, 5          ; category
.text:0000000000004A54                 xor     edi, edi        ; domainname
.text:0000000000004A56                 call    _dcgettext
.text:0000000000004A5B                 mov     rsi, rbx        ; stream
.text:0000000000004A5E                 mov     rdi, rax        ; s
.text:0000000000004A61                 call    _fputs_unlocked
.text:0000000000004A66                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A6D                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000004A74                 mov     edx, 5          ; category
.text:0000000000004A79                 xor     edi, edi        ; domainname
.text:0000000000004A7B                 call    _dcgettext
.text:0000000000004A80                 mov     rsi, rbx        ; stream
.text:0000000000004A83                 mov     rdi, rax        ; s
.text:0000000000004A86                 call    _fputs_unlocked
.text:0000000000004A8B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A92                 lea     rsi, aTheValidFormat ; "\nThe valid format sequences for files "...
.text:0000000000004A99                 mov     edx, 5          ; category
.text:0000000000004A9E                 xor     edi, edi        ; domainname
.text:0000000000004AA0                 call    _dcgettext
.text:0000000000004AA5                 mov     rsi, rbx        ; stream
.text:0000000000004AA8                 mov     rdi, rax        ; s
.text:0000000000004AAB                 call    _fputs_unlocked
.text:0000000000004AB0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AB7                 lea     rsi, aDDeviceNumberI ; "  %d   device number in decimal\n  %D  "...
.text:0000000000004ABE                 mov     edx, 5          ; category
.text:0000000000004AC3                 xor     edi, edi        ; domainname
.text:0000000000004AC5                 call    _dcgettext
.text:0000000000004ACA                 mov     rsi, rbx        ; stream
.text:0000000000004ACD                 mov     rdi, rax        ; s
.text:0000000000004AD0                 call    _fputs_unlocked
.text:0000000000004AD5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004ADC                 lea     rsi, aHNumberOfHardL ; "  %h   number of hard links\n  %i   ino"...
.text:0000000000004AE3                 mov     edx, 5          ; category
.text:0000000000004AE8                 xor     edi, edi        ; domainname
.text:0000000000004AEA                 call    _dcgettext
.text:0000000000004AEF                 mov     rsi, rbx        ; stream
.text:0000000000004AF2                 mov     rdi, rax        ; s
.text:0000000000004AF5                 call    _fputs_unlocked
.text:0000000000004AFA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B01                 lea     rsi, aUUserIdOfOwner ; "  %u   user ID of owner\n  %U   user na"...
.text:0000000000004B08                 mov     edx, 5          ; category
.text:0000000000004B0D                 xor     edi, edi        ; domainname
.text:0000000000004B0F                 call    _dcgettext
.text:0000000000004B14                 mov     rsi, rbx        ; stream
.text:0000000000004B17                 mov     rdi, rax        ; s
.text:0000000000004B1A                 call    _fputs_unlocked
.text:0000000000004B1F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B26                 lea     rsi, aValidFormatSeq ; "Valid format sequences for file systems"...
.text:0000000000004B2D                 mov     edx, 5          ; category
.text:0000000000004B32                 xor     edi, edi        ; domainname
.text:0000000000004B34                 call    _dcgettext
.text:0000000000004B39                 mov     rsi, rbx        ; stream
.text:0000000000004B3C                 mov     rdi, rax        ; s
.text:0000000000004B3F                 call    _fputs_unlocked
.text:0000000000004B44                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B4B                 lea     rsi, aIFileSystemIdI ; "  %i   file system ID in hex\n  %l   ma"...
.text:0000000000004B52                 mov     edx, 5          ; category
.text:0000000000004B57                 xor     edi, edi        ; domainname
.text:0000000000004B59                 call    _dcgettext
.text:0000000000004B5E                 mov     rsi, rbx        ; stream
.text:0000000000004B61                 mov     rdi, rax        ; s
.text:0000000000004B64                 lea     rbx, aStat      ; "stat"
.text:0000000000004B6B                 call    _fputs_unlocked
.text:0000000000004B70                 lea     rsi, aTerseIsEquival ; "\n--terse is equivalent to the followin"...
.text:0000000000004B77                 mov     edx, 5          ; category
.text:0000000000004B7C                 xor     edi, edi        ; domainname
.text:0000000000004B7E                 call    _dcgettext
.text:0000000000004B83                 lea     rdx, fmt_terse_regular ; "%n %s %b %f %u %g %D %i %h %t %T %X %Y "...
.text:0000000000004B8A                 mov     rsi, rax
.text:0000000000004B8D                 mov     edi, 1
.text:0000000000004B92                 xor     eax, eax
.text:0000000000004B94                 call    ___printf_chk
.text:0000000000004B99                 lea     rsi, aTerseFileSyste ; "--terse --file-system is equivalent to "...
.text:0000000000004BA0                 mov     edx, 5          ; category
.text:0000000000004BA5                 xor     edi, edi        ; domainname
.text:0000000000004BA7                 call    _dcgettext
.text:0000000000004BAC                 lea     rdx, fmt_terse_fs ; "%n %i %l %t %s %S %b %f %a %c %d\n"
.text:0000000000004BB3                 mov     rsi, rax
.text:0000000000004BB6                 mov     edi, 1
.text:0000000000004BBB                 xor     eax, eax
.text:0000000000004BBD                 call    ___printf_chk
.text:0000000000004BC2                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000004BC9                 mov     edx, 5          ; category
.text:0000000000004BCE                 xor     edi, edi        ; domainname
.text:0000000000004BD0                 call    _dcgettext
.text:0000000000004BD5                 lea     rdx, aStat      ; "stat"
.text:0000000000004BDC                 mov     rsi, rax
.text:0000000000004BDF                 mov     edi, 1
.text:0000000000004BE4                 xor     eax, eax
.text:0000000000004BE6                 call    ___printf_chk
.text:0000000000004BEB                 lea     rax, asc_DE36   ; "["
.text:0000000000004BF2                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000004BF9                 mov     [rsp+0A8h+var_48], 0
.text:0000000000004C02                 mov     [rsp+0A8h+var_40], 0
.text:0000000000004C0B                 mov     rdx, rsp
.text:0000000000004C0E                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000004C12                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000004C19                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000004C1E                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000004C25                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000004C2A                 lea     rax, domainname ; "coreutils"
.text:0000000000004C31                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000004C36                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000004C3D                 mov     [rsp+0A8h+var_98], rax
.text:0000000000004C42                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000004C49                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000004C4E                 mov     [rsp+0A8h+var_90], rax
.text:0000000000004C53                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000004C5A                 mov     [rsp+0A8h+var_88], rax
.text:0000000000004C5F                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000004C66                 mov     [rsp+0A8h+var_80], rax
.text:0000000000004C6B                 mov     [rsp+0A8h+var_70], rax
.text:0000000000004C70                 mov     [rsp+0A8h+var_60], rax
.text:0000000000004C75                 mov     [rsp+0A8h+var_50], rax
.text:0000000000004C7A                 nop     word ptr [rax+rax+00h]
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: usage+36D↓j
.text:0000000000004C80                 add     rdx, 10h
.text:0000000000004C84                 mov     rdi, [rdx]
.text:0000000000004C87                 test    rdi, rdi
.text:0000000000004C8A                 jz      short loc_4C9F
.text:0000000000004C8C                 mov     ecx, 5
.text:0000000000004C91                 mov     rsi, rbx
.text:0000000000004C94                 repe cmpsb
.text:0000000000004C96                 setnbe  al
.text:0000000000004C99                 sbb     al, 0
.text:0000000000004C9B                 test    al, al
.text:0000000000004C9D                 jnz     short loc_4C80
.text:0000000000004C9F
.text:0000000000004C9F loc_4C9F:                               ; CODE XREF: usage+35A↑j
.text:0000000000004C9F                 mov     r12, [rdx+8]
.text:0000000000004CA3                 xor     edi, edi        ; domainname
.text:0000000000004CA5                 mov     edx, 5          ; category
.text:0000000000004CAA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000004CB1                 test    r12, r12
.text:0000000000004CB4                 jz      loc_4D7B
.text:0000000000004CBA                 call    _dcgettext
.text:0000000000004CBF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004CC6                 lea     rdx, unk_DEAC
.text:0000000000004CCD                 mov     rsi, rax
.text:0000000000004CD0                 mov     edi, 1
.text:0000000000004CD5                 xor     eax, eax
.text:0000000000004CD7                 call    ___printf_chk
.text:0000000000004CDC                 xor     esi, esi        ; locale
.text:0000000000004CDE                 mov     edi, 5          ; category
.text:0000000000004CE3                 call    _setlocale
.text:0000000000004CE8                 test    rax, rax
.text:0000000000004CEB                 jz      short loc_4D09
.text:0000000000004CED                 lea     rsi, s2         ; "en_"
.text:0000000000004CF4                 mov     edx, 3          ; n
.text:0000000000004CF9                 mov     rdi, rax        ; s1
.text:0000000000004CFC                 call    _strncmp
.text:0000000000004D01                 test    eax, eax
.text:0000000000004D03                 jnz     loc_4E10
.text:0000000000004D09
.text:0000000000004D09 loc_4D09:                               ; CODE XREF: usage+3BB↑j
.text:0000000000004D09                                         ; usage+505↓j
.text:0000000000004D09                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004D10                 xor     edi, edi        ; domainname
.text:0000000000004D12                 mov     edx, 5          ; category
.text:0000000000004D17                 call    _dcgettext
.text:0000000000004D1C                 lea     rcx, aStat      ; "stat"
.text:0000000000004D23                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004D2A                 mov     rsi, rax
.text:0000000000004D2D                 mov     edi, 1
.text:0000000000004D32                 xor     eax, eax
.text:0000000000004D34                 call    ___printf_chk
.text:0000000000004D39                 cmp     r12, rbx
.text:0000000000004D3C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004D43                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004D4A                 cmovz   rbx, rcx
.text:0000000000004D4E
.text:0000000000004D4E loc_4D4E:                               ; CODE XREF: usage+4D4↓j
.text:0000000000004D4E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000004D55                 xor     edi, edi        ; domainname
.text:0000000000004D57                 mov     edx, 5          ; category
.text:0000000000004D5C                 call    _dcgettext
.text:0000000000004D61                 mov     rcx, rbx
.text:0000000000004D64                 mov     rsi, rax
.text:0000000000004D67                 mov     rdx, r12
.text:0000000000004D6A                 mov     edi, 1
.text:0000000000004D6F                 xor     eax, eax
.text:0000000000004D71                 call    ___printf_chk
.text:0000000000004D76                 jmp     loc_4986
.text:0000000000004D7B ; ---------------------------------------------------------------------------
.text:0000000000004D7B
.text:0000000000004D7B loc_4D7B:                               ; CODE XREF: usage+384↑j
.text:0000000000004D7B                 call    _dcgettext
.text:0000000000004D80                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004D87                 lea     rdx, unk_DEAC
.text:0000000000004D8E                 mov     rsi, rax
.text:0000000000004D91                 mov     edi, 1
.text:0000000000004D96                 xor     eax, eax
.text:0000000000004D98                 call    ___printf_chk
.text:0000000000004D9D                 xor     esi, esi        ; locale
.text:0000000000004D9F                 mov     edi, 5          ; category
.text:0000000000004DA4                 call    _setlocale
.text:0000000000004DA9                 test    rax, rax
.text:0000000000004DAC                 jz      short loc_4DC6
.text:0000000000004DAE                 lea     rsi, s2         ; "en_"
.text:0000000000004DB5                 mov     edx, 3          ; n
.text:0000000000004DBA                 mov     rdi, rax        ; s1
.text:0000000000004DBD                 call    _strncmp
.text:0000000000004DC2                 test    eax, eax
.text:0000000000004DC4                 jnz     short loc_4E09
.text:0000000000004DC6
.text:0000000000004DC6 loc_4DC6:                               ; CODE XREF: usage+47C↑j
.text:0000000000004DC6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004DCD                 mov     edx, 5          ; category
.text:0000000000004DD2                 xor     edi, edi        ; domainname
.text:0000000000004DD4                 lea     r12, aStat      ; "stat"
.text:0000000000004DDB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004DE2                 call    _dcgettext
.text:0000000000004DE7                 lea     rcx, aStat      ; "stat"
.text:0000000000004DEE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004DF5                 mov     rsi, rax
.text:0000000000004DF8                 mov     edi, 1
.text:0000000000004DFD                 xor     eax, eax
.text:0000000000004DFF                 call    ___printf_chk
.text:0000000000004E04                 jmp     loc_4D4E
.text:0000000000004E09 ; ---------------------------------------------------------------------------
.text:0000000000004E09
.text:0000000000004E09 loc_4E09:                               ; CODE XREF: usage+494↑j
.text:0000000000004E09                 lea     r12, aStat      ; "stat"
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: usage+3D3↑j
.text:0000000000004E10                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E17                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000004E1E                 xor     edi, edi        ; domainname
.text:0000000000004E20                 mov     edx, 5          ; category
.text:0000000000004E25                 call    _dcgettext
.text:0000000000004E2A                 mov     rsi, r13        ; stream
.text:0000000000004E2D                 mov     rdi, rax        ; s
.text:0000000000004E30                 call    _fputs_unlocked
.text:0000000000004E35                 jmp     loc_4D09
.text:0000000000004E35 ; } // starts at 4930
.text:0000000000004E35 usage           endp
.text:0000000000004E35
.text:0000000000004E35 ; ---------------------------------------------------------------------------
.text:0000000000004E3A                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40 ; Attributes: bp-based frame
.text:0000000000004E40
.text:0000000000004E40 ; __int64 __fastcall find_mount_point(char *path)
.text:0000000000004E40                 public find_mount_point
.text:0000000000004E40 find_mount_point proc near              ; CODE XREF: print_stat+526↑p
.text:0000000000004E40
.text:0000000000004E40 var_170         = byte ptr -170h
.text:0000000000004E40 var_161         = byte ptr -161h
.text:0000000000004E40 stat_buf        = stat ptr -160h
.text:0000000000004E40 var_D0          = stat ptr -0D0h
.text:0000000000004E40 var_38          = qword ptr -38h
.text:0000000000004E40
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 push    rbp
.text:0000000000004E41                 mov     rbp, rsp
.text:0000000000004E44                 push    r15
.text:0000000000004E46                 push    r14
.text:0000000000004E48                 push    r13
.text:0000000000004E4A                 lea     r13, [rbp+var_170]
.text:0000000000004E51                 push    r12
.text:0000000000004E53                 push    rbx
.text:0000000000004E54                 mov     r12, rdi
.text:0000000000004E57                 mov     rbx, rsi
.text:0000000000004E5A                 mov     rdi, r13
.text:0000000000004E5D                 sub     rsp, 148h
.text:0000000000004E64                 mov     rax, fs:28h
.text:0000000000004E6D                 mov     [rbp+var_38], rax
.text:0000000000004E71                 xor     eax, eax
.text:0000000000004E73                 call    save_cwd
.text:0000000000004E78                 mov     r15d, eax
.text:0000000000004E7B                 call    ___errno_location
.text:0000000000004E80                 test    r15d, r15d
.text:0000000000004E83                 mov     r14, rax
.text:0000000000004E86                 jnz     loc_51A5
.text:0000000000004E8C                 mov     eax, [rbx+18h]
.text:0000000000004E8F                 and     eax, 0F000h
.text:0000000000004E94                 cmp     eax, 4000h
.text:0000000000004E99                 jz      loc_5080
.text:0000000000004E9F                 mov     rdi, r12
.text:0000000000004EA2                 call    dir_name
.text:0000000000004EA7                 mov     rdi, rax        ; s
.text:0000000000004EAA                 mov     rbx, rax
.text:0000000000004EAD                 call    _strlen
.text:0000000000004EB2                 lea     rdx, [rax+1]    ; n
.text:0000000000004EB6                 add     rax, 1Fh
.text:0000000000004EBA                 mov     rsi, rbx        ; src
.text:0000000000004EBD                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000004EC1                 sub     rsp, rax
.text:0000000000004EC4                 lea     rdi, [rsp+170h+var_161]
.text:0000000000004EC9                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:0000000000004ECD                 call    _memcpy
.text:0000000000004ED2                 mov     rdi, rbx        ; ptr
.text:0000000000004ED5                 mov     r12, rax
.text:0000000000004ED8                 call    _free
.text:0000000000004EDD                 mov     rdi, r12        ; path
.text:0000000000004EE0                 call    _chdir
.text:0000000000004EE5                 test    eax, eax
.text:0000000000004EE7                 js      loc_50FE
.text:0000000000004EED                 lea     rdx, [rbp+stat_buf] ; stat_buf
.text:0000000000004EF4                 lea     rsi, filename+1 ; filename
.text:0000000000004EFB                 mov     edi, 1          ; ver
.text:0000000000004F00                 call    ___xstat
.text:0000000000004F05                 test    eax, eax
.text:0000000000004F07                 js      loc_5140
.text:0000000000004F0D
.text:0000000000004F0D loc_4F0D:                               ; CODE XREF: find_mount_point+2B8↓j
.text:0000000000004F0D                 lea     r12, [rbp+var_D0]
.text:0000000000004F14                 lea     rbx, filename   ; ".."
.text:0000000000004F1B                 jmp     loc_4FD3
.text:0000000000004F20 ; ---------------------------------------------------------------------------
.text:0000000000004F20
.text:0000000000004F20 loc_4F20:                               ; CODE XREF: find_mount_point+1A5↓j
.text:0000000000004F20                 mov     rax, [rbp+stat_buf.st_dev]
.text:0000000000004F27                 cmp     [rbp+var_D0.st_dev], rax
.text:0000000000004F2E                 jnz     loc_5070
.text:0000000000004F34                 mov     rax, [rbp+stat_buf.st_ino]
.text:0000000000004F3B                 cmp     [rbp+var_D0.st_ino], rax
.text:0000000000004F42                 jz      loc_5070
.text:0000000000004F48                 mov     rdi, rbx        ; path
.text:0000000000004F4B                 call    _chdir
.text:0000000000004F50                 test    eax, eax
.text:0000000000004F52                 js      loc_5180
.text:0000000000004F58                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_dev]
.text:0000000000004F60                 movaps  xmmword ptr [rbp+stat_buf.st_dev], xmm0
.text:0000000000004F67                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_nlink]
.text:0000000000004F6F                 movaps  xmmword ptr [rbp+stat_buf.st_nlink], xmm0
.text:0000000000004F76                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_gid]
.text:0000000000004F7E                 movaps  xmmword ptr [rbp+stat_buf.st_gid], xmm0
.text:0000000000004F85                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_size]
.text:0000000000004F8D                 movaps  xmmword ptr [rbp+stat_buf.st_size], xmm0
.text:0000000000004F94                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_blocks]
.text:0000000000004F9C                 movaps  xmmword ptr [rbp+stat_buf.st_blocks], xmm0
.text:0000000000004FA3                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_atim.tv_nsec]
.text:0000000000004FA8                 movaps  xmmword ptr [rbp+stat_buf.st_atim.tv_nsec], xmm0
.text:0000000000004FAF                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_mtim.tv_nsec]
.text:0000000000004FB4                 movaps  xmmword ptr [rbp+stat_buf.st_mtim.tv_nsec], xmm0
.text:0000000000004FBB                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_ctim.tv_nsec]
.text:0000000000004FC0                 movaps  xmmword ptr [rbp+stat_buf.st_ctim.tv_nsec], xmm0
.text:0000000000004FC7                 movdqa  xmm0, xmmword ptr [rbp+var_D0.__unused+8]
.text:0000000000004FCC                 movaps  xmmword ptr [rbp+stat_buf.__unused+8], xmm0
.text:0000000000004FD3
.text:0000000000004FD3 loc_4FD3:                               ; CODE XREF: find_mount_point+DB↑j
.text:0000000000004FD3                 mov     rdx, r12        ; stat_buf
.text:0000000000004FD6                 mov     rsi, rbx        ; filename
.text:0000000000004FD9                 mov     edi, 1          ; ver
.text:0000000000004FDE                 call    ___xstat
.text:0000000000004FE3                 test    eax, eax
.text:0000000000004FE5                 jns     loc_4F20
.text:0000000000004FEB                 lea     rsi, filename   ; ".."
.text:0000000000004FF2                 mov     edi, 4
.text:0000000000004FF7                 call    quotearg_style
.text:0000000000004FFC                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000005003                 mov     rbx, rax
.text:0000000000005006                 mov     edx, 5          ; category
.text:000000000000500B
.text:000000000000500B loc_500B:                               ; CODE XREF: find_mount_point+360↓j
.text:000000000000500B                 xor     edi, edi        ; domainname
.text:000000000000500D                 call    _dcgettext
.text:0000000000005012                 mov     esi, [r14]      ; errnum
.text:0000000000005015                 mov     rcx, rbx
.text:0000000000005018                 mov     rdx, rax        ; format
.text:000000000000501B                 xor     edi, edi        ; status
.text:000000000000501D                 xor     eax, eax
.text:000000000000501F                 xor     ebx, ebx
.text:0000000000005021                 call    _error
.text:0000000000005026
.text:0000000000005026 loc_5026:                               ; CODE XREF: find_mount_point+238↓j
.text:0000000000005026                                         ; find_mount_point+337↓j
.text:0000000000005026                 mov     rdi, r13
.text:0000000000005029                 mov     r12d, [r14]
.text:000000000000502C                 call    restore_cwd
.text:0000000000005031                 test    eax, eax
.text:0000000000005033                 jnz     loc_51CE
.text:0000000000005039                 mov     rdi, r13
.text:000000000000503C                 call    free_cwd
.text:0000000000005041                 mov     [r14], r12d
.text:0000000000005044
.text:0000000000005044 loc_5044:                               ; CODE XREF: find_mount_point+2F5↓j
.text:0000000000005044                                         ; find_mount_point+389↓j
.text:0000000000005044                 mov     rcx, [rbp+var_38]
.text:0000000000005048                 xor     rcx, fs:28h
.text:0000000000005051                 mov     rax, rbx
.text:0000000000005054                 jnz     loc_51F3
.text:000000000000505A                 lea     rsp, [rbp-28h]
.text:000000000000505E                 pop     rbx
.text:000000000000505F                 pop     r12
.text:0000000000005061                 pop     r13
.text:0000000000005063                 pop     r14
.text:0000000000005065                 pop     r15
.text:0000000000005067                 pop     rbp
.text:0000000000005068                 retn
.text:0000000000005068 ; ---------------------------------------------------------------------------
.text:0000000000005069                 align 10h
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: find_mount_point+EE↑j
.text:0000000000005070                                         ; find_mount_point+102↑j
.text:0000000000005070                 call    xgetcwd
.text:0000000000005075                 mov     rbx, rax
.text:0000000000005078                 jmp     short loc_5026
.text:0000000000005078 ; ---------------------------------------------------------------------------
.text:000000000000507A                 align 20h
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: find_mount_point+59↑j
.text:0000000000005080                 movdqu  xmm0, xmmword ptr [rbx]
.text:0000000000005084                 mov     rdi, r12        ; path
.text:0000000000005087                 movaps  xmmword ptr [rbp+stat_buf.st_dev], xmm0
.text:000000000000508E                 movdqu  xmm0, xmmword ptr [rbx+10h]
.text:0000000000005093                 movaps  xmmword ptr [rbp+stat_buf.st_nlink], xmm0
.text:000000000000509A                 movdqu  xmm0, xmmword ptr [rbx+20h]
.text:000000000000509F                 movaps  xmmword ptr [rbp+stat_buf.st_gid], xmm0
.text:00000000000050A6                 movdqu  xmm0, xmmword ptr [rbx+30h]
.text:00000000000050AB                 movaps  xmmword ptr [rbp+stat_buf.st_size], xmm0
.text:00000000000050B2                 movdqu  xmm0, xmmword ptr [rbx+40h]
.text:00000000000050B7                 movaps  xmmword ptr [rbp+stat_buf.st_blocks], xmm0
.text:00000000000050BE                 movdqu  xmm0, xmmword ptr [rbx+50h]
.text:00000000000050C3                 movaps  xmmword ptr [rbp+stat_buf.st_atim.tv_nsec], xmm0
.text:00000000000050CA                 movdqu  xmm0, xmmword ptr [rbx+60h]
.text:00000000000050CF                 movaps  xmmword ptr [rbp+stat_buf.st_mtim.tv_nsec], xmm0
.text:00000000000050D6                 movdqu  xmm0, xmmword ptr [rbx+70h]
.text:00000000000050DB                 movaps  xmmword ptr [rbp+stat_buf.st_ctim.tv_nsec], xmm0
.text:00000000000050E2                 movdqu  xmm0, xmmword ptr [rbx+80h]
.text:00000000000050EA                 movaps  xmmword ptr [rbp+stat_buf.__unused+8], xmm0
.text:00000000000050F1                 call    _chdir
.text:00000000000050F6                 test    eax, eax
.text:00000000000050F8                 jns     loc_4F0D
.text:00000000000050FE
.text:00000000000050FE loc_50FE:                               ; CODE XREF: find_mount_point+A7↑j
.text:00000000000050FE                 mov     rsi, r12
.text:0000000000005101                 mov     edi, 4
.text:0000000000005106                 call    quotearg_style
.text:000000000000510B                 lea     rsi, aCannotChangeTo ; "cannot change to directory %s"
.text:0000000000005112                 mov     edx, 5          ; category
.text:0000000000005117                 xor     edi, edi        ; domainname
.text:0000000000005119                 mov     rbx, rax
.text:000000000000511C                 call    _dcgettext
.text:0000000000005121                 mov     esi, [r14]      ; errnum
.text:0000000000005124                 mov     rcx, rbx
.text:0000000000005127                 mov     rdx, rax        ; format
.text:000000000000512A                 xor     edi, edi        ; status
.text:000000000000512C                 xor     eax, eax
.text:000000000000512E                 xor     ebx, ebx
.text:0000000000005130                 call    _error
.text:0000000000005135                 jmp     loc_5044
.text:0000000000005135 ; ---------------------------------------------------------------------------
.text:000000000000513A                 align 20h
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: find_mount_point+C7↑j
.text:0000000000005140                 mov     rsi, r12
.text:0000000000005143                 mov     edi, 4
.text:0000000000005148                 call    quotearg_style
.text:000000000000514D                 lea     rsi, aCannotStatCurr ; "cannot stat current directory (now %s)"
.text:0000000000005154                 mov     edx, 5          ; category
.text:0000000000005159                 xor     edi, edi        ; domainname
.text:000000000000515B                 mov     rbx, rax
.text:000000000000515E                 call    _dcgettext
.text:0000000000005163                 mov     esi, [r14]      ; errnum
.text:0000000000005166                 mov     rcx, rbx
.text:0000000000005169                 mov     rdx, rax        ; format
.text:000000000000516C                 xor     edi, edi        ; status
.text:000000000000516E                 xor     eax, eax
.text:0000000000005170                 xor     ebx, ebx
.text:0000000000005172                 call    _error
.text:0000000000005177                 jmp     loc_5026
.text:0000000000005177 ; ---------------------------------------------------------------------------
.text:000000000000517C                 align 20h
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: find_mount_point+112↑j
.text:0000000000005180                 lea     rsi, filename   ; ".."
.text:0000000000005187                 mov     edi, 4
.text:000000000000518C                 call    quotearg_style
.text:0000000000005191                 mov     edx, 5
.text:0000000000005196                 mov     rbx, rax
.text:0000000000005199                 lea     rsi, aCannotChangeTo ; "cannot change to directory %s"
.text:00000000000051A0                 jmp     loc_500B
.text:00000000000051A5 ; ---------------------------------------------------------------------------
.text:00000000000051A5
.text:00000000000051A5 loc_51A5:                               ; CODE XREF: find_mount_point+46↑j
.text:00000000000051A5                 lea     rsi, aCannotGetCurre ; "cannot get current directory"
.text:00000000000051AC                 mov     edx, 5          ; category
.text:00000000000051B1                 xor     edi, edi        ; domainname
.text:00000000000051B3                 xor     ebx, ebx
.text:00000000000051B5                 call    _dcgettext
.text:00000000000051BA                 mov     esi, [r14]      ; errnum
.text:00000000000051BD                 mov     rdx, rax        ; format
.text:00000000000051C0                 xor     edi, edi        ; status
.text:00000000000051C2                 xor     eax, eax
.text:00000000000051C4                 call    _error
.text:00000000000051C9                 jmp     loc_5044
.text:00000000000051CE ; ---------------------------------------------------------------------------
.text:00000000000051CE
.text:00000000000051CE loc_51CE:                               ; CODE XREF: find_mount_point+1F3↑j
.text:00000000000051CE                 lea     rsi, aFailedToReturn ; "failed to return to initial working dir"...
.text:00000000000051D5                 mov     edx, 5          ; category
.text:00000000000051DA                 xor     edi, edi        ; domainname
.text:00000000000051DC                 call    _dcgettext
.text:00000000000051E1                 mov     esi, [r14]      ; errnum
.text:00000000000051E4                 mov     rdx, rax        ; format
.text:00000000000051E7                 mov     edi, 1          ; status
.text:00000000000051EC                 xor     eax, eax
.text:00000000000051EE                 call    _error
.text:00000000000051F3
.text:00000000000051F3 loc_51F3:                               ; CODE XREF: find_mount_point+214↑j
.text:00000000000051F3                 call    ___stack_chk_fail
.text:00000000000051F3 ; } // starts at 4E40
.text:00000000000051F3 find_mount_point endp
.text:00000000000051F3
.text:00000000000051F3 ; ---------------------------------------------------------------------------
.text:00000000000051F8                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200 ; Attributes: info_from_lumina
.text:0000000000005200
.text:0000000000005200 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:0000000000005200                 public areadlink_with_size
.text:0000000000005200 areadlink_with_size proc near           ; CODE XREF: print_stat+393↑p
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 push    r15
.text:0000000000005202                 push    r14
.text:0000000000005204                 mov     eax, 401h
.text:0000000000005209                 push    r13
.text:000000000000520B                 push    r12
.text:000000000000520D                 mov     r13, rdi
.text:0000000000005210                 push    rbp
.text:0000000000005211                 push    rbx
.text:0000000000005212                 lea     rbx, [rsi+1]
.text:0000000000005216                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:0000000000005220                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:000000000000522A                 sub     rsp, 8
.text:000000000000522E                 cmp     rsi, 401h
.text:0000000000005235                 cmovnb  rbx, rax
.text:0000000000005239                 nop     dword ptr [rax+00000000h]
.text:0000000000005240
.text:0000000000005240 loc_5240:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:0000000000005240                 mov     rdi, rbx        ; size
.text:0000000000005243                 call    _malloc
.text:0000000000005248                 test    rax, rax
.text:000000000000524B                 mov     rbp, rax
.text:000000000000524E                 jz      short loc_528B
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: areadlink_with_size+89↓j
.text:0000000000005250                 mov     rdx, rbx        ; len
.text:0000000000005253                 mov     rsi, rax        ; buf
.text:0000000000005256                 mov     rdi, r13        ; path
.text:0000000000005259                 call    _readlink
.text:000000000000525E                 test    rax, rax
.text:0000000000005261                 mov     r12, rax
.text:0000000000005264                 js      short loc_52B8
.text:0000000000005266
.text:0000000000005266 loc_5266:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:0000000000005266                 cmp     rbx, r12
.text:0000000000005269                 ja      short loc_52D0
.text:000000000000526B                 mov     rdi, rbp        ; ptr
.text:000000000000526E                 call    _free
.text:0000000000005273                 cmp     rbx, r14
.text:0000000000005276                 ja      short loc_52A0
.text:0000000000005278                 add     rbx, rbx
.text:000000000000527B                 mov     rdi, rbx        ; size
.text:000000000000527E                 call    _malloc
.text:0000000000005283                 test    rax, rax
.text:0000000000005286                 mov     rbp, rax
.text:0000000000005289                 jnz     short loc_5250
.text:000000000000528B
.text:000000000000528B loc_528B:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000528B                                         ; areadlink_with_size+CC↓j ...
.text:000000000000528B                 add     rsp, 8
.text:000000000000528F                 mov     rax, rbp
.text:0000000000005292                 pop     rbx
.text:0000000000005293                 pop     rbp
.text:0000000000005294                 pop     r12
.text:0000000000005296                 pop     r13
.text:0000000000005298                 pop     r14
.text:000000000000529A                 pop     r15
.text:000000000000529C                 retn
.text:000000000000529C ; ---------------------------------------------------------------------------
.text:000000000000529D                 align 20h
.text:00000000000052A0
.text:00000000000052A0 loc_52A0:                               ; CODE XREF: areadlink_with_size+76↑j
.text:00000000000052A0                 cmp     rbx, r15
.text:00000000000052A3                 ja      short loc_52E0
.text:00000000000052A5                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:00000000000052AF                 jmp     short loc_5240
.text:00000000000052AF ; ---------------------------------------------------------------------------
.text:00000000000052B1                 align 8
.text:00000000000052B8
.text:00000000000052B8 loc_52B8:                               ; CODE XREF: areadlink_with_size+64↑j
.text:00000000000052B8                 call    ___errno_location
.text:00000000000052BD                 cmp     dword ptr [rax], 22h ; '"'
.text:00000000000052C0                 jz      short loc_5266
.text:00000000000052C2                 mov     rdi, rbp        ; ptr
.text:00000000000052C5                 xor     ebp, ebp
.text:00000000000052C7                 call    _free
.text:00000000000052CC                 jmp     short loc_528B
.text:00000000000052CC ; ---------------------------------------------------------------------------
.text:00000000000052CE                 align 10h
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: areadlink_with_size+69↑j
.text:00000000000052D0                 mov     byte ptr [rbp+r12+0], 0
.text:00000000000052D6                 jmp     short loc_528B
.text:00000000000052D6 ; ---------------------------------------------------------------------------
.text:00000000000052D8                 align 20h
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:00000000000052E0                 call    ___errno_location
.text:00000000000052E5                 xor     ebp, ebp
.text:00000000000052E7                 mov     dword ptr [rax], 0Ch
.text:00000000000052ED                 jmp     short loc_528B
.text:00000000000052ED ; } // starts at 5200
.text:00000000000052ED areadlink_with_size endp
.text:00000000000052ED
.text:00000000000052ED ; ---------------------------------------------------------------------------
.text:00000000000052EF                 align 10h
.text:00000000000052F0
.text:00000000000052F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052F0
.text:00000000000052F0 ; Attributes: noreturn
.text:00000000000052F0
.text:00000000000052F0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:00000000000052F0 ; __unwind {
.text:00000000000052F0                 mov     edi, 1          ; status
.text:00000000000052F5                 jmp     usage
.text:00000000000052F5 ; } // starts at 52F0
.text:00000000000052F5 __argmatch_die  endp
.text:00000000000052F5
.text:00000000000052F5 ; ---------------------------------------------------------------------------
.text:00000000000052FA                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300 ; Attributes: info_from_lumina
.text:0000000000005300
.text:0000000000005300 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005300                 public argmatch
.text:0000000000005300 argmatch        proc near               ; CODE XREF: main+236↑p
.text:0000000000005300                                         ; __xargmatch_internal+2C↓p
.text:0000000000005300
.text:0000000000005300 var_58          = qword ptr -58h
.text:0000000000005300 s2              = qword ptr -50h
.text:0000000000005300 var_41          = byte ptr -41h
.text:0000000000005300 var_40          = qword ptr -40h
.text:0000000000005300
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 push    r15
.text:0000000000005302                 push    r14
.text:0000000000005304                 mov     r15, rsi
.text:0000000000005307                 push    r13
.text:0000000000005309                 push    r12
.text:000000000000530B                 mov     r13, rcx
.text:000000000000530E                 push    rbp
.text:000000000000530F                 push    rbx
.text:0000000000005310                 mov     rbp, rdx
.text:0000000000005313                 sub     rsp, 28h
.text:0000000000005317                 mov     [rsp+58h+s2], rdi
.text:000000000000531C                 mov     [rsp+58h+var_40], rdx
.text:0000000000005321                 call    _strlen
.text:0000000000005326                 mov     r14, [r15]
.text:0000000000005329                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000005331                 test    r14, r14
.text:0000000000005334                 jz      loc_53ED
.text:000000000000533A                 mov     r12, rax
.text:000000000000533D                 mov     [rsp+58h+var_41], 0
.text:0000000000005342                 xor     ebx, ebx
.text:0000000000005344                 jmp     short loc_5397
.text:0000000000005344 ; ---------------------------------------------------------------------------
.text:0000000000005346                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000005350                 mov     rax, [rsp+58h+var_40]
.text:0000000000005355                 test    rax, rax
.text:0000000000005358                 jz      loc_5400
.text:000000000000535E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000005362                 mov     rdx, r13        ; n
.text:0000000000005365                 mov     rsi, rbp        ; s2
.text:0000000000005368                 imul    rdi, r13
.text:000000000000536C                 add     rdi, rax        ; s1
.text:000000000000536F                 call    _memcmp
.text:0000000000005374                 test    eax, eax
.text:0000000000005376                 movzx   eax, [rsp+58h+var_41]
.text:000000000000537B                 mov     ecx, 1
.text:0000000000005380                 cmovnz  eax, ecx
.text:0000000000005383                 mov     [rsp+58h+var_41], al
.text:0000000000005387
.text:0000000000005387 loc_5387:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000005387                                         ; argmatch+105↓j
.text:0000000000005387                 add     rbx, 1
.text:000000000000538B                 add     rbp, r13
.text:000000000000538E                 mov     r14, [r15+rbx*8]
.text:0000000000005392                 test    r14, r14
.text:0000000000005395                 jz      short loc_53D8
.text:0000000000005397
.text:0000000000005397 loc_5397:                               ; CODE XREF: argmatch+44↑j
.text:0000000000005397                                         ; argmatch+D1↓j
.text:0000000000005397                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000539C                 mov     rdx, r12        ; n
.text:000000000000539F                 mov     rdi, r14        ; s1
.text:00000000000053A2                 call    _strncmp
.text:00000000000053A7                 test    eax, eax
.text:00000000000053A9                 jnz     short loc_5387
.text:00000000000053AB                 mov     rdi, r14        ; s
.text:00000000000053AE                 call    _strlen
.text:00000000000053B3                 cmp     rax, r12
.text:00000000000053B6                 jz      short loc_5410
.text:00000000000053B8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000053BD                 jnz     short loc_5350
.text:00000000000053BF                 mov     [rsp+58h+var_58], rbx
.text:00000000000053C3                 add     rbx, 1
.text:00000000000053C7                 add     rbp, r13
.text:00000000000053CA                 mov     r14, [r15+rbx*8]
.text:00000000000053CE                 test    r14, r14
.text:00000000000053D1                 jnz     short loc_5397
.text:00000000000053D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000053D8
.text:00000000000053D8 loc_53D8:                               ; CODE XREF: argmatch+95↑j
.text:00000000000053D8                 cmp     [rsp+58h+var_41], 0
.text:00000000000053DD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000053E4                 cmovz   rax, [rsp+58h+var_58]
.text:00000000000053E9                 mov     [rsp+58h+var_58], rax
.text:00000000000053ED
.text:00000000000053ED loc_53ED:                               ; CODE XREF: argmatch+34↑j
.text:00000000000053ED                                         ; argmatch+114↓j
.text:00000000000053ED                 mov     rax, [rsp+58h+var_58]
.text:00000000000053F1                 add     rsp, 28h
.text:00000000000053F5                 pop     rbx
.text:00000000000053F6                 pop     rbp
.text:00000000000053F7                 pop     r12
.text:00000000000053F9                 pop     r13
.text:00000000000053FB                 pop     r14
.text:00000000000053FD                 pop     r15
.text:00000000000053FF                 retn
.text:0000000000005400 ; ---------------------------------------------------------------------------
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: argmatch+58↑j
.text:0000000000005400                 mov     [rsp+58h+var_41], 1
.text:0000000000005405                 jmp     short loc_5387
.text:0000000000005405 ; ---------------------------------------------------------------------------
.text:0000000000005407                 align 10h
.text:0000000000005410
.text:0000000000005410 loc_5410:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000005410                 mov     [rsp+58h+var_58], rbx
.text:0000000000005414                 jmp     short loc_53ED
.text:0000000000005414 ; } // starts at 5300
.text:0000000000005414 argmatch        endp
.text:0000000000005414
.text:0000000000005414 ; ---------------------------------------------------------------------------
.text:0000000000005416                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420 ; Attributes: info_from_lumina
.text:0000000000005420
.text:0000000000005420 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000005420                 public argmatch_invalid
.text:0000000000005420 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005424                 push    r12
.text:0000000000005426                 mov     edx, 5          ; category
.text:000000000000542B                 push    rbp
.text:000000000000542C                 mov     r12, rsi
.text:000000000000542F                 push    rbx
.text:0000000000005430                 mov     rbp, rdi
.text:0000000000005433                 jz      short loc_5480
.text:0000000000005435                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000543C                 xor     edi, edi        ; domainname
.text:000000000000543E                 call    _dcgettext
.text:0000000000005443                 mov     rbx, rax
.text:0000000000005446
.text:0000000000005446 loc_5446:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000005446                 mov     rsi, rbp
.text:0000000000005449                 mov     edi, 1
.text:000000000000544E                 call    quote_n
.text:0000000000005453                 mov     rdx, r12
.text:0000000000005456                 mov     rbp, rax
.text:0000000000005459                 mov     esi, 8
.text:000000000000545E                 xor     edi, edi
.text:0000000000005460                 call    quotearg_n_style
.text:0000000000005465                 mov     r8, rbp
.text:0000000000005468                 mov     rdx, rbx        ; format
.text:000000000000546B                 mov     rcx, rax
.text:000000000000546E                 pop     rbx
.text:000000000000546F                 pop     rbp
.text:0000000000005470                 pop     r12
.text:0000000000005472                 xor     esi, esi        ; errnum
.text:0000000000005474                 xor     edi, edi        ; status
.text:0000000000005476                 xor     eax, eax
.text:0000000000005478                 jmp     _error
.text:0000000000005478 ; ---------------------------------------------------------------------------
.text:000000000000547D                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000005480                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000005487                 xor     edi, edi        ; domainname
.text:0000000000005489                 call    _dcgettext
.text:000000000000548E                 mov     rbx, rax
.text:0000000000005491                 jmp     short loc_5446
.text:0000000000005491 ; } // starts at 5420
.text:0000000000005491 argmatch_invalid endp
.text:0000000000005491
.text:0000000000005491 ; ---------------------------------------------------------------------------
.text:0000000000005493                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0 ; Attributes: info_from_lumina
.text:00000000000054A0
.text:00000000000054A0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000054A0                 public argmatch_valid
.text:00000000000054A0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 push    r15
.text:00000000000054A2                 push    r14
.text:00000000000054A4                 mov     r14, rdi
.text:00000000000054A7                 push    r13
.text:00000000000054A9                 push    r12
.text:00000000000054AB                 xor     edi, edi        ; domainname
.text:00000000000054AD                 push    rbp
.text:00000000000054AE                 push    rbx
.text:00000000000054AF                 mov     rbp, rsi
.text:00000000000054B2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:00000000000054B9                 mov     r12, rdx
.text:00000000000054BC                 mov     edx, 5          ; category
.text:00000000000054C1                 sub     rsp, 8
.text:00000000000054C5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:00000000000054CC                 call    _dcgettext
.text:00000000000054D1                 mov     rdi, rax        ; s
.text:00000000000054D4                 mov     rsi, rbx        ; stream
.text:00000000000054D7                 call    _fputs_unlocked
.text:00000000000054DC                 mov     r15, [r14]
.text:00000000000054DF                 test    r15, r15
.text:00000000000054E2                 jz      loc_5578
.text:00000000000054E8                 xor     r13d, r13d
.text:00000000000054EB                 xor     ebx, ebx
.text:00000000000054ED                 jmp     short loc_5528
.text:00000000000054ED ; ---------------------------------------------------------------------------
.text:00000000000054EF                 align 10h
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:00000000000054F0                                         ; argmatch_valid+9D↓j
.text:00000000000054F0                 mov     rdi, r15
.text:00000000000054F3                 add     rbx, 1
.text:00000000000054F7                 mov     r13, rbp
.text:00000000000054FA                 call    quote
.text:00000000000054FF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005506                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000550D                 mov     rcx, rax
.text:0000000000005510                 mov     esi, 1
.text:0000000000005515                 xor     eax, eax
.text:0000000000005517                 add     rbp, r12
.text:000000000000551A                 call    ___fprintf_chk
.text:000000000000551F                 mov     r15, [r14+rbx*8]
.text:0000000000005523                 test    r15, r15
.text:0000000000005526                 jz      short loc_5578
.text:0000000000005528
.text:0000000000005528 loc_5528:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000005528                                         ; argmatch_valid+D2↓j
.text:0000000000005528                 test    rbx, rbx
.text:000000000000552B                 jz      short loc_54F0
.text:000000000000552D                 mov     rdx, r12        ; n
.text:0000000000005530                 mov     rsi, rbp        ; s2
.text:0000000000005533                 mov     rdi, r13        ; s1
.text:0000000000005536                 call    _memcmp
.text:000000000000553B                 test    eax, eax
.text:000000000000553D                 jnz     short loc_54F0
.text:000000000000553F                 mov     rdi, r15
.text:0000000000005542                 add     rbx, 1
.text:0000000000005546                 add     rbp, r12
.text:0000000000005549                 call    quote
.text:000000000000554E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005555                 lea     rdx, aS_0       ; ", %s"
.text:000000000000555C                 mov     rcx, rax
.text:000000000000555F                 mov     esi, 1
.text:0000000000005564                 xor     eax, eax
.text:0000000000005566                 call    ___fprintf_chk
.text:000000000000556B                 mov     r15, [r14+rbx*8]
.text:000000000000556F                 test    r15, r15
.text:0000000000005572                 jnz     short loc_5528
.text:0000000000005574                 nop     dword ptr [rax+00h]
.text:0000000000005578
.text:0000000000005578 loc_5578:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000005578                                         ; argmatch_valid+86↑j
.text:0000000000005578                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000557F                 mov     rax, [rdi+28h]
.text:0000000000005583                 cmp     rax, [rdi+30h]
.text:0000000000005587                 jnb     short loc_55A8
.text:0000000000005589                 lea     rdx, [rax+1]
.text:000000000000558D                 mov     [rdi+28h], rdx
.text:0000000000005591                 mov     byte ptr [rax], 0Ah
.text:0000000000005594                 add     rsp, 8
.text:0000000000005598                 pop     rbx
.text:0000000000005599                 pop     rbp
.text:000000000000559A                 pop     r12
.text:000000000000559C                 pop     r13
.text:000000000000559E                 pop     r14
.text:00000000000055A0                 pop     r15
.text:00000000000055A2                 retn
.text:00000000000055A2 ; ---------------------------------------------------------------------------
.text:00000000000055A3                 align 8
.text:00000000000055A8
.text:00000000000055A8 loc_55A8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:00000000000055A8                 add     rsp, 8
.text:00000000000055AC                 mov     esi, 0Ah        ; int
.text:00000000000055B1                 pop     rbx
.text:00000000000055B2                 pop     rbp
.text:00000000000055B3                 pop     r12
.text:00000000000055B5                 pop     r13
.text:00000000000055B7                 pop     r14
.text:00000000000055B9                 pop     r15
.text:00000000000055BB                 jmp     ___overflow
.text:00000000000055BB ; } // starts at 54A0
.text:00000000000055BB argmatch_valid  endp
.text:00000000000055BB
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0 ; Attributes: info_from_lumina
.text:00000000000055C0
.text:00000000000055C0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:00000000000055C0                 public __xargmatch_internal
.text:00000000000055C0 __xargmatch_internal proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 push    r15
.text:00000000000055C2                 push    r14
.text:00000000000055C4                 mov     r14, rdi
.text:00000000000055C7                 push    r13
.text:00000000000055C9                 push    r12
.text:00000000000055CB                 mov     r12, rsi
.text:00000000000055CE                 push    rbp
.text:00000000000055CF                 push    rbx
.text:00000000000055D0                 mov     rbp, rcx
.text:00000000000055D3                 mov     rbx, rdx
.text:00000000000055D6                 mov     rcx, r8
.text:00000000000055D9                 mov     rdx, rbp
.text:00000000000055DC                 sub     rsp, 8
.text:00000000000055E0                 mov     rsi, rbx
.text:00000000000055E3                 mov     rdi, r12
.text:00000000000055E6                 mov     r15, r8
.text:00000000000055E9                 mov     r13, r9
.text:00000000000055EC                 call    argmatch
.text:00000000000055F1                 test    rax, rax
.text:00000000000055F4                 js      short loc_5605
.text:00000000000055F6
.text:00000000000055F6 loc_55F6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:00000000000055F6                 add     rsp, 8
.text:00000000000055FA                 pop     rbx
.text:00000000000055FB                 pop     rbp
.text:00000000000055FC                 pop     r12
.text:00000000000055FE                 pop     r13
.text:0000000000005600                 pop     r14
.text:0000000000005602                 pop     r15
.text:0000000000005604                 retn
.text:0000000000005605 ; ---------------------------------------------------------------------------
.text:0000000000005605
.text:0000000000005605 loc_5605:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000005605                 mov     rdx, rax
.text:0000000000005608                 mov     rsi, r12
.text:000000000000560B                 mov     rdi, r14
.text:000000000000560E                 call    argmatch_invalid
.text:0000000000005613                 mov     rdx, r15
.text:0000000000005616                 mov     rsi, rbp
.text:0000000000005619                 mov     rdi, rbx
.text:000000000000561C                 call    argmatch_valid
.text:0000000000005621                 call    r13
.text:0000000000005624                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000562B                 jmp     short loc_55F6
.text:000000000000562B ; } // starts at 55C0
.text:000000000000562B __xargmatch_internal endp
.text:000000000000562B
.text:000000000000562B ; ---------------------------------------------------------------------------
.text:000000000000562D                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005630                 public argmatch_to_argument
.text:0000000000005630 argmatch_to_argument proc near
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 push    r14
.text:0000000000005632                 push    r13
.text:0000000000005634                 push    r12
.text:0000000000005636                 push    rbp
.text:0000000000005637                 push    rbx
.text:0000000000005638                 mov     r14, [rsi]
.text:000000000000563B                 test    r14, r14
.text:000000000000563E                 jz      short loc_5671
.text:0000000000005640                 mov     r12, rcx
.text:0000000000005643                 mov     r13, rdi
.text:0000000000005646                 mov     rbp, rdx
.text:0000000000005649                 lea     rbx, [rsi+8]
.text:000000000000564D                 jmp     short loc_565F
.text:000000000000564D ; ---------------------------------------------------------------------------
.text:000000000000564F                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000005650                 mov     r14, [rbx]
.text:0000000000005653                 add     rbp, r12
.text:0000000000005656                 add     rbx, 8
.text:000000000000565A                 test    r14, r14
.text:000000000000565D                 jz      short loc_5671
.text:000000000000565F
.text:000000000000565F loc_565F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000565F                 mov     rdx, r12        ; n
.text:0000000000005662                 mov     rsi, rbp        ; s2
.text:0000000000005665                 mov     rdi, r13        ; s1
.text:0000000000005668                 call    _memcmp
.text:000000000000566D                 test    eax, eax
.text:000000000000566F                 jnz     short loc_5650
.text:0000000000005671
.text:0000000000005671 loc_5671:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000005671                                         ; argmatch_to_argument+2D↑j
.text:0000000000005671                 pop     rbx
.text:0000000000005672                 mov     rax, r14
.text:0000000000005675                 pop     rbp
.text:0000000000005676                 pop     r12
.text:0000000000005678                 pop     r13
.text:000000000000567A                 pop     r14
.text:000000000000567C                 retn
.text:000000000000567C ; } // starts at 5630
.text:000000000000567C argmatch_to_argument endp
.text:000000000000567C
.text:000000000000567C ; ---------------------------------------------------------------------------
.text:000000000000567D                 align 20h
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680
.text:0000000000005680                 public close_stdout_set_file_name
.text:0000000000005680 close_stdout_set_file_name proc near
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 mov     cs:file_name, rdi
.text:0000000000005687                 retn
.text:0000000000005687 ; } // starts at 5680
.text:0000000000005687 close_stdout_set_file_name endp
.text:0000000000005687
.text:0000000000005687 ; ---------------------------------------------------------------------------
.text:0000000000005688                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690
.text:0000000000005690                 public close_stdout_set_ignore_EPIPE
.text:0000000000005690 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 mov     cs:ignore_EPIPE, dil
.text:0000000000005697                 retn
.text:0000000000005697 ; } // starts at 5690
.text:0000000000005697 close_stdout_set_ignore_EPIPE endp
.text:0000000000005697
.text:0000000000005697 ; ---------------------------------------------------------------------------
.text:0000000000005698                 align 20h
.text:00000000000056A0
.text:00000000000056A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056A0
.text:00000000000056A0 ; Attributes: info_from_lumina
.text:00000000000056A0
.text:00000000000056A0 ; void __cdecl close_stdout()
.text:00000000000056A0                 public close_stdout
.text:00000000000056A0 close_stdout    proc near               ; DATA XREF: main+93↑o
.text:00000000000056A0 ; __unwind {
.text:00000000000056A0                 push    rbp
.text:00000000000056A1                 push    rbx
.text:00000000000056A2                 sub     rsp, 8
.text:00000000000056A6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000056AD                 call    close_stream
.text:00000000000056B2                 test    eax, eax
.text:00000000000056B4                 jz      short loc_56CC
.text:00000000000056B6                 call    ___errno_location
.text:00000000000056BB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000056C2                 mov     rbx, rax
.text:00000000000056C5                 jz      short loc_56E3
.text:00000000000056C7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000056CA                 jnz     short loc_56E3
.text:00000000000056CC
.text:00000000000056CC loc_56CC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000056CC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000056D3                 call    close_stream
.text:00000000000056D8                 test    eax, eax
.text:00000000000056DA                 jnz     short loc_5722
.text:00000000000056DC                 add     rsp, 8
.text:00000000000056E0                 pop     rbx
.text:00000000000056E1                 pop     rbp
.text:00000000000056E2                 retn
.text:00000000000056E3 ; ---------------------------------------------------------------------------
.text:00000000000056E3
.text:00000000000056E3 loc_56E3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000056E3                                         ; close_stdout+2A↑j
.text:00000000000056E3                 lea     rsi, aWriteError ; "write error"
.text:00000000000056EA                 xor     edi, edi        ; domainname
.text:00000000000056EC                 mov     edx, 5          ; category
.text:00000000000056F1                 call    _dcgettext
.text:00000000000056F6                 mov     rdi, cs:file_name
.text:00000000000056FD                 mov     rbp, rax
.text:0000000000005700                 test    rdi, rdi
.text:0000000000005703                 jz      short loc_572D
.text:0000000000005705                 call    quotearg_colon
.text:000000000000570A                 mov     esi, [rbx]      ; errnum
.text:000000000000570C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005713                 mov     rcx, rax
.text:0000000000005716                 mov     r8, rbp
.text:0000000000005719                 xor     edi, edi        ; status
.text:000000000000571B                 xor     eax, eax
.text:000000000000571D                 call    _error
.text:0000000000005722
.text:0000000000005722 loc_5722:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005722                                         ; close_stdout+A2↓j
.text:0000000000005722                 mov     edi, cs:exit_failure ; status
.text:0000000000005728                 call    __exit
.text:000000000000572D ; ---------------------------------------------------------------------------
.text:000000000000572D
.text:000000000000572D loc_572D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000572D                 mov     esi, [rbx]      ; errnum
.text:000000000000572F                 lea     rdx, aS_0+2     ; format
.text:0000000000005736                 mov     rcx, rax
.text:0000000000005739                 xor     edi, edi        ; status
.text:000000000000573B                 xor     eax, eax
.text:000000000000573D                 call    _error
.text:0000000000005742                 jmp     short loc_5722
.text:0000000000005742 ; } // starts at 56A0
.text:0000000000005742 close_stdout    endp
.text:0000000000005742
.text:0000000000005742 ; ---------------------------------------------------------------------------
.text:0000000000005744                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750
.text:0000000000005750                 public dir_name
.text:0000000000005750 dir_name        proc near               ; CODE XREF: find_mount_point+62↑p
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 sub     rsp, 8
.text:0000000000005754                 call    mdir_name
.text:0000000000005759                 test    rax, rax
.text:000000000000575C                 jz      short loc_5763
.text:000000000000575E                 add     rsp, 8
.text:0000000000005762                 retn
.text:0000000000005763 ; ---------------------------------------------------------------------------
.text:0000000000005763
.text:0000000000005763 loc_5763:                               ; CODE XREF: dir_name+C↑j
.text:0000000000005763                 call    xalloc_die
.text:0000000000005763 ; } // starts at 5750
.text:0000000000005763 dir_name        endp
.text:0000000000005763
.text:0000000000005763 ; ---------------------------------------------------------------------------
.text:0000000000005768                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770 ; Attributes: info_from_lumina
.text:0000000000005770
.text:0000000000005770 ; size_t __fastcall dir_len(const char *file)
.text:0000000000005770                 public dir_len
.text:0000000000005770 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 push    rbp
.text:0000000000005771                 push    rbx
.text:0000000000005772                 xor     ebp, ebp
.text:0000000000005774                 mov     rbx, rdi
.text:0000000000005777                 sub     rsp, 8
.text:000000000000577B                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000577E                 setz    bpl
.text:0000000000005782                 call    last_component
.text:0000000000005787                 mov     rcx, rax
.text:000000000000578A                 sub     rcx, rbx
.text:000000000000578D                 cmp     rcx, rbp
.text:0000000000005790                 jbe     short loc_57C0
.text:0000000000005792                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000005796                 lea     rdx, [rcx-1]
.text:000000000000579A                 jz      short loc_57AE
.text:000000000000579C                 jmp     short loc_57C0
.text:000000000000579C ; ---------------------------------------------------------------------------
.text:000000000000579E                 align 20h
.text:00000000000057A0
.text:00000000000057A0 loc_57A0:                               ; CODE XREF: dir_len+41↓j
.text:00000000000057A0                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:00000000000057A5                 lea     rax, [rdx-1]
.text:00000000000057A9                 jnz     short loc_57B3
.text:00000000000057AB                 mov     rdx, rax
.text:00000000000057AE
.text:00000000000057AE loc_57AE:                               ; CODE XREF: dir_len+2A↑j
.text:00000000000057AE                 cmp     rbp, rdx
.text:00000000000057B1                 jnz     short loc_57A0
.text:00000000000057B3
.text:00000000000057B3 loc_57B3:                               ; CODE XREF: dir_len+39↑j
.text:00000000000057B3                 add     rsp, 8
.text:00000000000057B7                 mov     rax, rdx
.text:00000000000057BA                 pop     rbx
.text:00000000000057BB                 pop     rbp
.text:00000000000057BC                 retn
.text:00000000000057BC ; ---------------------------------------------------------------------------
.text:00000000000057BD                 align 20h
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: dir_len+20↑j
.text:00000000000057C0                                         ; dir_len+2C↑j
.text:00000000000057C0                 add     rsp, 8
.text:00000000000057C4                 mov     rdx, rcx
.text:00000000000057C7                 mov     rax, rdx
.text:00000000000057CA                 pop     rbx
.text:00000000000057CB                 pop     rbp
.text:00000000000057CC                 retn
.text:00000000000057CC ; } // starts at 5770
.text:00000000000057CC dir_len         endp
.text:00000000000057CC
.text:00000000000057CC ; ---------------------------------------------------------------------------
.text:00000000000057CD                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0 ; Attributes: info_from_lumina
.text:00000000000057D0
.text:00000000000057D0 ; char *__fastcall mdir_name(const char *file)
.text:00000000000057D0                 public mdir_name
.text:00000000000057D0 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 push    rbp
.text:00000000000057D1                 push    rbx
.text:00000000000057D2                 mov     rbp, rdi
.text:00000000000057D5                 sub     rsp, 8
.text:00000000000057D9                 call    dir_len
.text:00000000000057DE                 test    rax, rax
.text:00000000000057E1                 mov     rbx, rax
.text:00000000000057E4                 setz    al
.text:00000000000057E7                 movzx   eax, al
.text:00000000000057EA                 lea     rdi, [rbx+rax+1] ; size
.text:00000000000057EF                 call    _malloc
.text:00000000000057F4                 test    rax, rax
.text:00000000000057F7                 mov     rcx, rax
.text:00000000000057FA                 jz      short loc_5816
.text:00000000000057FC                 mov     rdx, rbx        ; n
.text:00000000000057FF                 mov     rsi, rbp        ; src
.text:0000000000005802                 mov     rdi, rax        ; dest
.text:0000000000005805                 call    _memcpy
.text:000000000000580A                 test    rbx, rbx
.text:000000000000580D                 mov     rcx, rax
.text:0000000000005810                 jz      short loc_5820
.text:0000000000005812
.text:0000000000005812 loc_5812:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000005812                 mov     byte ptr [rcx+rbx], 0
.text:0000000000005816
.text:0000000000005816 loc_5816:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000005816                 add     rsp, 8
.text:000000000000581A                 mov     rax, rcx
.text:000000000000581D                 pop     rbx
.text:000000000000581E                 pop     rbp
.text:000000000000581F                 retn
.text:0000000000005820 ; ---------------------------------------------------------------------------
.text:0000000000005820
.text:0000000000005820 loc_5820:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000005820                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000005823                 mov     ebx, 1
.text:0000000000005828                 jmp     short loc_5812
.text:0000000000005828 ; } // starts at 57D0
.text:0000000000005828 mdir_name       endp
.text:0000000000005828
.text:0000000000005828 ; ---------------------------------------------------------------------------
.text:000000000000582A                 align 10h
.text:0000000000005830
.text:0000000000005830 ; =============== S U B R O U T I N E =======================================
.text:0000000000005830
.text:0000000000005830 ; Attributes: info_from_lumina
.text:0000000000005830
.text:0000000000005830 ; char *__fastcall last_component(const char *name)
.text:0000000000005830                 public last_component
.text:0000000000005830 last_component  proc near               ; CODE XREF: dir_len+12↑p
.text:0000000000005830 ; __unwind {
.text:0000000000005830                 movzx   edx, byte ptr [rdi]
.text:0000000000005833                 mov     rax, rdi
.text:0000000000005836                 cmp     dl, 2Fh ; '/'
.text:0000000000005839                 jnz     short loc_584C
.text:000000000000583B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005840
.text:0000000000005840 loc_5840:                               ; CODE XREF: last_component+1A↓j
.text:0000000000005840                 add     rax, 1
.text:0000000000005844                 movzx   edx, byte ptr [rax]
.text:0000000000005847                 cmp     dl, 2Fh ; '/'
.text:000000000000584A                 jz      short loc_5840
.text:000000000000584C
.text:000000000000584C loc_584C:                               ; CODE XREF: last_component+9↑j
.text:000000000000584C                 test    dl, dl
.text:000000000000584E                 jz      short locret_588A
.text:0000000000005850                 mov     rcx, rax
.text:0000000000005853                 xor     esi, esi
.text:0000000000005855                 jmp     short loc_5875
.text:0000000000005855 ; ---------------------------------------------------------------------------
.text:0000000000005857                 align 20h
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: last_component+48↓j
.text:0000000000005860                 test    sil, sil
.text:0000000000005863                 jz      short loc_586A
.text:0000000000005865                 mov     rax, rcx
.text:0000000000005868                 xor     esi, esi
.text:000000000000586A
.text:000000000000586A loc_586A:                               ; CODE XREF: last_component+33↑j
.text:000000000000586A                 add     rcx, 1
.text:000000000000586E                 movzx   edx, byte ptr [rcx]
.text:0000000000005871                 test    dl, dl
.text:0000000000005873                 jz      short locret_588A
.text:0000000000005875
.text:0000000000005875 loc_5875:                               ; CODE XREF: last_component+25↑j
.text:0000000000005875                                         ; last_component+58↓j
.text:0000000000005875                 cmp     dl, 2Fh ; '/'
.text:0000000000005878                 jnz     short loc_5860
.text:000000000000587A                 add     rcx, 1
.text:000000000000587E                 movzx   edx, byte ptr [rcx]
.text:0000000000005881                 mov     esi, 1
.text:0000000000005886                 test    dl, dl
.text:0000000000005888                 jnz     short loc_5875
.text:000000000000588A
.text:000000000000588A locret_588A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000588A                                         ; last_component+43↑j
.text:000000000000588A                 rep retn
.text:000000000000588A ; } // starts at 5830
.text:000000000000588A last_component  endp
.text:000000000000588A
.text:000000000000588A ; ---------------------------------------------------------------------------
.text:000000000000588C                 align 10h
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890 ; Attributes: info_from_lumina
.text:0000000000005890
.text:0000000000005890 ; size_t __fastcall base_len(const char *name)
.text:0000000000005890                 public base_len
.text:0000000000005890 base_len        proc near
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 push    rbx
.text:0000000000005891                 mov     rbx, rdi
.text:0000000000005894                 call    _strlen
.text:0000000000005899                 cmp     rax, 1
.text:000000000000589D                 jbe     short loc_58AA
.text:000000000000589F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:00000000000058A4                 lea     rdx, [rax-1]
.text:00000000000058A8                 jz      short loc_58B8
.text:00000000000058AA
.text:00000000000058AA loc_58AA:                               ; CODE XREF: base_len+D↑j
.text:00000000000058AA                 pop     rbx
.text:00000000000058AB                 retn
.text:00000000000058AB ; ---------------------------------------------------------------------------
.text:00000000000058AC                 align 10h
.text:00000000000058B0
.text:00000000000058B0 loc_58B0:                               ; CODE XREF: base_len+37↓j
.text:00000000000058B0                 mov     rdx, rax
.text:00000000000058B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000058B8
.text:00000000000058B8 loc_58B8:                               ; CODE XREF: base_len+18↑j
.text:00000000000058B8                 cmp     rdx, 1
.text:00000000000058BC                 jz      short loc_58D0
.text:00000000000058BE                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:00000000000058C3                 lea     rax, [rdx-1]
.text:00000000000058C7                 jz      short loc_58B0
.text:00000000000058C9                 mov     rax, rdx
.text:00000000000058CC                 pop     rbx
.text:00000000000058CD                 retn
.text:00000000000058CD ; ---------------------------------------------------------------------------
.text:00000000000058CE                 align 10h
.text:00000000000058D0
.text:00000000000058D0 loc_58D0:                               ; CODE XREF: base_len+2C↑j
.text:00000000000058D0                 mov     eax, 1
.text:00000000000058D5                 pop     rbx
.text:00000000000058D6                 retn
.text:00000000000058D6 ; } // starts at 5890
.text:00000000000058D6 base_len        endp
.text:00000000000058D6
.text:00000000000058D6 ; ---------------------------------------------------------------------------
.text:00000000000058D7                 align 20h
.text:00000000000058E0
.text:00000000000058E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058E0
.text:00000000000058E0
.text:00000000000058E0                 public file_type
.text:00000000000058E0 file_type       proc near               ; CODE XREF: print_stat+4E3↑p
.text:00000000000058E0 ; __unwind {
.text:00000000000058E0                 mov     eax, [rdi+18h]
.text:00000000000058E3                 mov     edx, 5          ; category
.text:00000000000058E8                 and     eax, 0F000h
.text:00000000000058ED                 cmp     eax, 8000h
.text:00000000000058F2                 jz      short loc_5940
.text:00000000000058F4                 cmp     eax, 4000h
.text:00000000000058F9                 jz      loc_5990
.text:00000000000058FF                 cmp     eax, 0A000h
.text:0000000000005904                 jz      short loc_5970
.text:0000000000005906                 cmp     eax, 6000h
.text:000000000000590B                 jz      loc_59A0
.text:0000000000005911                 cmp     eax, 2000h
.text:0000000000005916                 jz      loc_59B0
.text:000000000000591C                 cmp     eax, 1000h
.text:0000000000005921                 jz      loc_59C0
.text:0000000000005927                 cmp     eax, 0C000h
.text:000000000000592C                 jz      short loc_5980
.text:000000000000592E                 lea     rsi, aWeirdFile ; "weird file"
.text:0000000000005935                 xor     edi, edi        ; domainname
.text:0000000000005937                 jmp     _dcgettext
.text:0000000000005937 ; ---------------------------------------------------------------------------
.text:000000000000593C                 align 20h
.text:0000000000005940
.text:0000000000005940 loc_5940:                               ; CODE XREF: file_type+12↑j
.text:0000000000005940                 cmp     qword ptr [rdi+30h], 0
.text:0000000000005945                 jnz     short loc_5958
.text:0000000000005947                 lea     rsi, aRegularEmptyFi ; "regular empty file"
.text:000000000000594E                 xor     edi, edi        ; domainname
.text:0000000000005950                 jmp     _dcgettext
.text:0000000000005950 ; ---------------------------------------------------------------------------
.text:0000000000005955                 align 8
.text:0000000000005958
.text:0000000000005958 loc_5958:                               ; CODE XREF: file_type+65↑j
.text:0000000000005958                 lea     rsi, aRegularFile ; "regular file"
.text:000000000000595F                 xor     edi, edi        ; domainname
.text:0000000000005961                 jmp     _dcgettext
.text:0000000000005961 ; ---------------------------------------------------------------------------
.text:0000000000005966                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: file_type+24↑j
.text:0000000000005970                 lea     rsi, aSymbolicLink ; "symbolic link"
.text:0000000000005977                 xor     edi, edi        ; domainname
.text:0000000000005979                 jmp     _dcgettext
.text:0000000000005979 ; ---------------------------------------------------------------------------
.text:000000000000597E                 align 20h
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: file_type+4C↑j
.text:0000000000005980                 lea     rsi, aSocket    ; "socket"
.text:0000000000005987                 xor     edi, edi        ; domainname
.text:0000000000005989                 jmp     _dcgettext
.text:0000000000005989 ; ---------------------------------------------------------------------------
.text:000000000000598E                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: file_type+19↑j
.text:0000000000005990                 lea     rsi, aCannotGetCurre+13h ; msgid
.text:0000000000005997                 xor     edi, edi        ; domainname
.text:0000000000005999                 jmp     _dcgettext
.text:0000000000005999 ; ---------------------------------------------------------------------------
.text:000000000000599E                 align 20h
.text:00000000000059A0
.text:00000000000059A0 loc_59A0:                               ; CODE XREF: file_type+2B↑j
.text:00000000000059A0                 lea     rsi, aBlockSpecialFi ; "block special file"
.text:00000000000059A7                 xor     edi, edi        ; domainname
.text:00000000000059A9                 jmp     _dcgettext
.text:00000000000059A9 ; ---------------------------------------------------------------------------
.text:00000000000059AE                 align 10h
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: file_type+36↑j
.text:00000000000059B0                 lea     rsi, aCharacterSpeci ; "character special file"
.text:00000000000059B7                 xor     edi, edi        ; domainname
.text:00000000000059B9                 jmp     _dcgettext
.text:00000000000059B9 ; ---------------------------------------------------------------------------
.text:00000000000059BE                 align 20h
.text:00000000000059C0
.text:00000000000059C0 loc_59C0:                               ; CODE XREF: file_type+41↑j
.text:00000000000059C0                 lea     rsi, aFifo      ; "fifo"
.text:00000000000059C7                 xor     edi, edi        ; domainname
.text:00000000000059C9                 jmp     _dcgettext
.text:00000000000059C9 ; } // starts at 58E0
.text:00000000000059C9 file_type       endp
.text:00000000000059C9
.text:00000000000059C9 ; ---------------------------------------------------------------------------
.text:00000000000059CE                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0 ; Attributes: info_from_lumina
.text:00000000000059D0
.text:00000000000059D0 ; void __fastcall strmode(mode_t mode, char *str)
.text:00000000000059D0                 public strmode
.text:00000000000059D0 strmode         proc near               ; CODE XREF: filemodestring+3↓j
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 mov     edx, edi
.text:00000000000059D2                 mov     eax, 2Dh ; '-'
.text:00000000000059D7                 and     edx, 0F000h
.text:00000000000059DD                 cmp     edx, 8000h
.text:00000000000059E3                 jz      short loc_5A40
.text:00000000000059E5                 cmp     edx, 4000h
.text:00000000000059EB                 mov     eax, 64h ; 'd'
.text:00000000000059F0                 jz      short loc_5A40
.text:00000000000059F2                 cmp     edx, 6000h
.text:00000000000059F8                 mov     eax, 62h ; 'b'
.text:00000000000059FD                 jz      short loc_5A40
.text:00000000000059FF                 cmp     edx, 2000h
.text:0000000000005A05                 mov     eax, 63h ; 'c'
.text:0000000000005A0A                 jz      short loc_5A40
.text:0000000000005A0C                 cmp     edx, 0A000h
.text:0000000000005A12                 mov     eax, 6Ch ; 'l'
.text:0000000000005A17                 jz      short loc_5A40
.text:0000000000005A19                 cmp     edx, 1000h
.text:0000000000005A1F                 mov     eax, 70h ; 'p'
.text:0000000000005A24                 jz      short loc_5A40
.text:0000000000005A26                 cmp     edx, 0C000h
.text:0000000000005A2C                 mov     eax, 73h ; 's'
.text:0000000000005A31                 mov     edx, 3Fh ; '?'
.text:0000000000005A36                 cmovnz  eax, edx
.text:0000000000005A39                 nop     dword ptr [rax+00000000h]
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: strmode+13↑j
.text:0000000000005A40                                         ; strmode+20↑j ...
.text:0000000000005A40                 mov     [rsi], al
.text:0000000000005A42                 mov     eax, edi
.text:0000000000005A44                 and     eax, 100h
.text:0000000000005A49                 cmp     eax, 1
.text:0000000000005A4C                 sbb     eax, eax
.text:0000000000005A4E                 and     eax, 0FFFFFFBBh
.text:0000000000005A51                 add     eax, 72h ; 'r'
.text:0000000000005A54                 mov     [rsi+1], al
.text:0000000000005A57                 mov     eax, edi
.text:0000000000005A59                 and     eax, 80h
.text:0000000000005A5E                 cmp     eax, 1
.text:0000000000005A61                 sbb     eax, eax
.text:0000000000005A63                 and     eax, 0FFFFFFB6h
.text:0000000000005A66                 add     eax, 77h ; 'w'
.text:0000000000005A69                 mov     [rsi+2], al
.text:0000000000005A6C                 mov     eax, edi
.text:0000000000005A6E                 and     eax, 40h
.text:0000000000005A71                 cmp     eax, 1
.text:0000000000005A74                 sbb     eax, eax
.text:0000000000005A76                 test    edi, 800h
.text:0000000000005A7C                 jz      loc_5B20
.text:0000000000005A82                 and     eax, 0FFFFFFE0h
.text:0000000000005A85                 add     eax, 73h ; 's'
.text:0000000000005A88
.text:0000000000005A88 loc_5A88:                               ; CODE XREF: strmode+156↓j
.text:0000000000005A88                 mov     [rsi+3], al
.text:0000000000005A8B                 mov     eax, edi
.text:0000000000005A8D                 and     eax, 20h
.text:0000000000005A90                 cmp     eax, 1
.text:0000000000005A93                 sbb     eax, eax
.text:0000000000005A95                 and     eax, 0FFFFFFBBh
.text:0000000000005A98                 add     eax, 72h ; 'r'
.text:0000000000005A9B                 mov     [rsi+4], al
.text:0000000000005A9E                 mov     eax, edi
.text:0000000000005AA0                 and     eax, 10h
.text:0000000000005AA3                 cmp     eax, 1
.text:0000000000005AA6                 sbb     eax, eax
.text:0000000000005AA8                 and     eax, 0FFFFFFB6h
.text:0000000000005AAB                 add     eax, 77h ; 'w'
.text:0000000000005AAE                 mov     [rsi+5], al
.text:0000000000005AB1                 mov     eax, edi
.text:0000000000005AB3                 and     eax, 8
.text:0000000000005AB6                 cmp     eax, 1
.text:0000000000005AB9                 sbb     eax, eax
.text:0000000000005ABB                 test    edi, 400h
.text:0000000000005AC1                 jz      loc_5B48
.text:0000000000005AC7                 and     eax, 0FFFFFFE0h
.text:0000000000005ACA                 add     eax, 73h ; 's'
.text:0000000000005ACD
.text:0000000000005ACD loc_5ACD:                               ; CODE XREF: strmode+17E↓j
.text:0000000000005ACD                 mov     [rsi+6], al
.text:0000000000005AD0                 mov     eax, edi
.text:0000000000005AD2                 and     eax, 4
.text:0000000000005AD5                 cmp     eax, 1
.text:0000000000005AD8                 sbb     eax, eax
.text:0000000000005ADA                 and     eax, 0FFFFFFBBh
.text:0000000000005ADD                 add     eax, 72h ; 'r'
.text:0000000000005AE0                 mov     [rsi+7], al
.text:0000000000005AE3                 mov     eax, edi
.text:0000000000005AE5                 and     eax, 2
.text:0000000000005AE8                 cmp     eax, 1
.text:0000000000005AEB                 sbb     eax, eax
.text:0000000000005AED                 and     eax, 0FFFFFFB6h
.text:0000000000005AF0                 add     eax, 77h ; 'w'
.text:0000000000005AF3                 mov     [rsi+8], al
.text:0000000000005AF6                 mov     eax, edi
.text:0000000000005AF8                 and     eax, 1
.text:0000000000005AFB                 cmp     eax, 1
.text:0000000000005AFE                 sbb     eax, eax
.text:0000000000005B00                 and     edi, 200h
.text:0000000000005B06                 jz      short loc_5B30
.text:0000000000005B08                 and     eax, 0FFFFFFE0h
.text:0000000000005B0B                 add     eax, 74h ; 't'
.text:0000000000005B0E                 mov     [rsi+9], al
.text:0000000000005B11                 mov     eax, 20h ; ' '
.text:0000000000005B16                 mov     [rsi+0Ah], ax
.text:0000000000005B1A                 retn
.text:0000000000005B1A ; ---------------------------------------------------------------------------
.text:0000000000005B1B                 align 20h
.text:0000000000005B20
.text:0000000000005B20 loc_5B20:                               ; CODE XREF: strmode+AC↑j
.text:0000000000005B20                 and     eax, 0FFFFFFB5h
.text:0000000000005B23                 add     eax, 78h ; 'x'
.text:0000000000005B26                 jmp     loc_5A88
.text:0000000000005B26 ; ---------------------------------------------------------------------------
.text:0000000000005B2B                 align 10h
.text:0000000000005B30
.text:0000000000005B30 loc_5B30:                               ; CODE XREF: strmode+136↑j
.text:0000000000005B30                 and     eax, 0FFFFFFB5h
.text:0000000000005B33                 add     eax, 78h ; 'x'
.text:0000000000005B36                 mov     [rsi+9], al
.text:0000000000005B39                 mov     eax, 20h ; ' '
.text:0000000000005B3E                 mov     [rsi+0Ah], ax
.text:0000000000005B42                 retn
.text:0000000000005B42 ; ---------------------------------------------------------------------------
.text:0000000000005B43                 align 8
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: strmode+F1↑j
.text:0000000000005B48                 and     eax, 0FFFFFFB5h
.text:0000000000005B4B                 add     eax, 78h ; 'x'
.text:0000000000005B4E                 jmp     loc_5ACD
.text:0000000000005B4E ; } // starts at 59D0
.text:0000000000005B4E strmode         endp
.text:0000000000005B4E
.text:0000000000005B4E ; ---------------------------------------------------------------------------
.text:0000000000005B53                 align 20h
.text:0000000000005B60
.text:0000000000005B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B60
.text:0000000000005B60
.text:0000000000005B60                 public filemodestring
.text:0000000000005B60 filemodestring  proc near               ; CODE XREF: print_stat+4B5↑p
.text:0000000000005B60 ; __unwind {
.text:0000000000005B60                 mov     edi, [rdi+18h]
.text:0000000000005B63                 jmp     strmode
.text:0000000000005B63 ; } // starts at 5B60
.text:0000000000005B63 filemodestring  endp
.text:0000000000005B63
.text:0000000000005B63 ; ---------------------------------------------------------------------------
.text:0000000000005B68                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70 ; Attributes: info_from_lumina
.text:0000000000005B70
.text:0000000000005B70 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000005B70                 public imaxtostr
.text:0000000000005B70 imaxtostr       proc near               ; CODE XREF: human_time+99↑p
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 test    rdi, rdi
.text:0000000000005B73                 lea     rcx, [rsi+14h]
.text:0000000000005B77                 mov     byte ptr [rsi+14h], 0
.text:0000000000005B7B                 mov     r9, 6666666666666667h
.text:0000000000005B85                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000005B8F                 mov     r8d, 30h ; '0'
.text:0000000000005B95                 js      short loc_5BD3
.text:0000000000005B97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000005BA0                 mov     rax, rdi
.text:0000000000005BA3                 sub     rcx, 1
.text:0000000000005BA7                 mul     rsi
.text:0000000000005BAA                 shr     rdx, 3
.text:0000000000005BAE                 lea     rax, [rdx+rdx*4]
.text:0000000000005BB2                 add     rax, rax
.text:0000000000005BB5                 sub     rdi, rax
.text:0000000000005BB8                 add     edi, 30h ; '0'
.text:0000000000005BBB                 test    rdx, rdx
.text:0000000000005BBE                 mov     [rcx], dil
.text:0000000000005BC1                 mov     rdi, rdx
.text:0000000000005BC4                 jnz     short loc_5BA0
.text:0000000000005BC6                 mov     rax, rcx
.text:0000000000005BC9                 retn
.text:0000000000005BC9 ; ---------------------------------------------------------------------------
.text:0000000000005BCA                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 loc_5BD0:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000005BD0                 mov     rcx, rsi
.text:0000000000005BD3
.text:0000000000005BD3 loc_5BD3:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000005BD3                 mov     rax, rdi
.text:0000000000005BD6                 lea     rsi, [rcx-1]
.text:0000000000005BDA                 imul    r9
.text:0000000000005BDD                 mov     rax, rdi
.text:0000000000005BE0                 sar     rax, 3Fh
.text:0000000000005BE4                 sar     rdx, 2
.text:0000000000005BE8                 sub     rdx, rax
.text:0000000000005BEB                 lea     rax, [rdx+rdx*4]
.text:0000000000005BEF                 lea     eax, [r8+rax*2]
.text:0000000000005BF3                 sub     eax, edi
.text:0000000000005BF5                 test    rdx, rdx
.text:0000000000005BF8                 mov     rdi, rdx
.text:0000000000005BFB                 mov     [rcx-1], al
.text:0000000000005BFE                 jnz     short loc_5BD0
.text:0000000000005C00                 sub     rcx, 2
.text:0000000000005C04                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000005C08                 mov     rax, rcx
.text:0000000000005C0B                 retn
.text:0000000000005C0B ; } // starts at 5B70
.text:0000000000005C0B imaxtostr       endp
.text:0000000000005C0B
.text:0000000000005C0B ; ---------------------------------------------------------------------------
.text:0000000000005C0C                 align 10h
.text:0000000000005C10
.text:0000000000005C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C10
.text:0000000000005C10 ; Attributes: info_from_lumina
.text:0000000000005C10
.text:0000000000005C10 ; char *__fastcall memcpy_lowcase(char *dest, const char *src, size_t len)
.text:0000000000005C10 memcpy_lowcase  proc near               ; CODE XREF: __strftime_internal+1500↓p
.text:0000000000005C10                                         ; __strftime_internal+1977↓p
.text:0000000000005C10 ; __unwind {
.text:0000000000005C10                 test    rdx, rdx
.text:0000000000005C13                 push    r12
.text:0000000000005C15                 push    rbp
.text:0000000000005C16                 mov     rbp, rdi
.text:0000000000005C19                 push    rbx
.text:0000000000005C1A                 jz      short loc_5C49
.text:0000000000005C1C                 mov     r12, rsi
.text:0000000000005C1F                 lea     rbx, [rdx-1]
.text:0000000000005C23                 call    ___ctype_tolower_loc
.text:0000000000005C28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005C30
.text:0000000000005C30 loc_5C30:                               ; CODE XREF: memcpy_lowcase+37↓j
.text:0000000000005C30                 movzx   ecx, byte ptr [r12+rbx]
.text:0000000000005C35                 mov     rdx, [rax]
.text:0000000000005C38                 mov     edx, [rdx+rcx*4]
.text:0000000000005C3B                 mov     [rbp+rbx+0], dl
.text:0000000000005C3F                 sub     rbx, 1
.text:0000000000005C43                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C47                 jnz     short loc_5C30
.text:0000000000005C49
.text:0000000000005C49 loc_5C49:                               ; CODE XREF: memcpy_lowcase+A↑j
.text:0000000000005C49                 mov     rax, rbp
.text:0000000000005C4C                 pop     rbx
.text:0000000000005C4D                 pop     rbp
.text:0000000000005C4E                 pop     r12
.text:0000000000005C50                 retn
.text:0000000000005C50 ; } // starts at 5C10
.text:0000000000005C50 memcpy_lowcase  endp
.text:0000000000005C50
.text:0000000000005C50 ; ---------------------------------------------------------------------------
.text:0000000000005C51                 align 20h
.text:0000000000005C60
.text:0000000000005C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C60
.text:0000000000005C60 ; Attributes: info_from_lumina
.text:0000000000005C60
.text:0000000000005C60 ; char *__fastcall memcpy_lowcase_0(char *dest, const char *src, size_t len)
.text:0000000000005C60 memcpy_lowcase_0 proc near              ; CODE XREF: __strftime_internal+313↓p
.text:0000000000005C60                                         ; __strftime_internal:loc_61A1↓p ...
.text:0000000000005C60 ; __unwind {
.text:0000000000005C60                 test    rdx, rdx
.text:0000000000005C63                 push    r12
.text:0000000000005C65                 push    rbp
.text:0000000000005C66                 mov     rbp, rdi
.text:0000000000005C69                 push    rbx
.text:0000000000005C6A                 jz      short loc_5C99
.text:0000000000005C6C                 mov     r12, rsi
.text:0000000000005C6F                 lea     rbx, [rdx-1]
.text:0000000000005C73                 call    ___ctype_toupper_loc
.text:0000000000005C78                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: memcpy_lowcase_0+37↓j
.text:0000000000005C80                 movzx   ecx, byte ptr [r12+rbx]
.text:0000000000005C85                 mov     rdx, [rax]
.text:0000000000005C88                 mov     edx, [rdx+rcx*4]
.text:0000000000005C8B                 mov     [rbp+rbx+0], dl
.text:0000000000005C8F                 sub     rbx, 1
.text:0000000000005C93                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C97                 jnz     short loc_5C80
.text:0000000000005C99
.text:0000000000005C99 loc_5C99:                               ; CODE XREF: memcpy_lowcase_0+A↑j
.text:0000000000005C99                 mov     rax, rbp
.text:0000000000005C9C                 pop     rbx
.text:0000000000005C9D                 pop     rbp
.text:0000000000005C9E                 pop     r12
.text:0000000000005CA0                 retn
.text:0000000000005CA0 ; } // starts at 5C60
.text:0000000000005CA0 memcpy_lowcase_0 endp
.text:0000000000005CA0
.text:0000000000005CA0 ; ---------------------------------------------------------------------------
.text:0000000000005CA1                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CB0
.text:0000000000005CB0
.text:0000000000005CB0 ; __int64 __usercall _strftime_internal@<rax>(void *s@<rdi>, int, __int64, __int64, int)
.text:0000000000005CB0 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6AB↓p
.text:0000000000005CB0                                         ; __strftime_internal+768↓p ...
.text:0000000000005CB0
.text:0000000000005CB0 var_4F0         = qword ptr -4F0h
.text:0000000000005CB0 var_4E8         = qword ptr -4E8h
.text:0000000000005CB0 var_4E0         = qword ptr -4E0h
.text:0000000000005CB0 var_4D8         = qword ptr -4D8h
.text:0000000000005CB0 var_4CD         = byte ptr -4CDh
.text:0000000000005CB0 var_4CC         = dword ptr -4CCh
.text:0000000000005CB0 var_4C8         = qword ptr -4C8h
.text:0000000000005CB0 var_4C0         = dword ptr -4C0h
.text:0000000000005CB0 var_4B8         = qword ptr -4B8h
.text:0000000000005CB0 var_4B0         = qword ptr -4B0h
.text:0000000000005CB0 var_4A8         = qword ptr -4A8h
.text:0000000000005CB0 var_4A0         = qword ptr -4A0h
.text:0000000000005CB0 var_498         = qword ptr -498h
.text:0000000000005CB0 var_490         = dword ptr -490h
.text:0000000000005CB0 var_48C         = dword ptr -48Ch
.text:0000000000005CB0 var_488         = xmmword ptr -488h
.text:0000000000005CB0 var_478         = xmmword ptr -478h
.text:0000000000005CB0 var_468         = xmmword ptr -468h
.text:0000000000005CB0 var_458         = qword ptr -458h
.text:0000000000005CB0 format          = byte ptr -44Dh
.text:0000000000005CB0 var_44B         = byte ptr -44Bh
.text:0000000000005CB0 s               = byte ptr -448h
.text:0000000000005CB0 var_40          = qword ptr -40h
.text:0000000000005CB0 arg_0           = dword ptr  8
.text:0000000000005CB0 arg_8           = qword ptr  10h
.text:0000000000005CB0 arg_10          = qword ptr  18h
.text:0000000000005CB0 arg_18          = dword ptr  20h
.text:0000000000005CB0
.text:0000000000005CB0 ; __unwind {
.text:0000000000005CB0                 push    r15
.text:0000000000005CB2                 push    r14
.text:0000000000005CB4                 mov     r11, rdx
.text:0000000000005CB7                 push    r13
.text:0000000000005CB9                 push    r12
.text:0000000000005CBB                 mov     r13, rcx
.text:0000000000005CBE                 push    rbp
.text:0000000000005CBF                 push    rbx
.text:0000000000005CC0                 mov     rbp, rdi
.text:0000000000005CC3                 sub     rsp, 4C8h
.text:0000000000005CCA                 mov     rdi, [rcx+30h]
.text:0000000000005CCE                 mov     r15d, [rcx+8]
.text:0000000000005CD2                 mov     rax, [rsp+4F8h+arg_8]
.text:0000000000005CDA                 mov     [rsp+4F8h+var_4F0], rsi
.text:0000000000005CDF                 mov     [rsp+4F8h+var_4CC], r9d
.text:0000000000005CE4                 movsxd  r10, [rsp+4F8h+arg_0]
.text:0000000000005CEC                 mov     [rsp+4F8h+var_4CD], r8b
.text:0000000000005CF1                 mov     [rsp+4F8h+var_4E0], rax
.text:0000000000005CF6                 mov     rax, [rsp+4F8h+arg_10]
.text:0000000000005CFE                 mov     [rsp+4F8h+var_4E8], rax
.text:0000000000005D03                 mov     rax, fs:28h
.text:0000000000005D0C                 mov     [rsp+4F8h+var_40], rax
.text:0000000000005D14                 xor     eax, eax
.text:0000000000005D16                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005D1D                 test    rdi, rdi
.text:0000000000005D20                 cmovnz  rax, rdi
.text:0000000000005D24                 cmp     r15d, 0Ch
.text:0000000000005D28                 mov     [rsp+4F8h+var_4D8], rax
.text:0000000000005D2D                 jle     loc_5E20
.text:0000000000005D33                 sub     r15d, 0Ch
.text:0000000000005D37
.text:0000000000005D37 loc_5D37:                               ; CODE XREF: __strftime_internal+17C↓j
.text:0000000000005D37                 movzx   eax, byte ptr [r11]
.text:0000000000005D3B                 xor     r14d, r14d
.text:0000000000005D3E                 test    al, al
.text:0000000000005D40                 jz      loc_5DFC
.text:0000000000005D46                 mov     [rsp+4F8h+var_490], r15d
.text:0000000000005D4B                 mov     rbx, r11
.text:0000000000005D4E
.text:0000000000005D4E loc_5D4E:                               ; CODE XREF: __strftime_internal+146↓j
.text:0000000000005D4E                 cmp     al, 25h ; '%'
.text:0000000000005D50                 jz      loc_5E38
.text:0000000000005D56                 test    r10d, r10d
.text:0000000000005D59                 mov     r12d, 0
.text:0000000000005D5F                 mov     eax, 1
.text:0000000000005D64                 cmovns  r12, r10
.text:0000000000005D68                 test    r12, r12
.text:0000000000005D6B                 cmovz   r12, rax
.text:0000000000005D6F                 mov     rax, [rsp+4F8h+var_4F0]
.text:0000000000005D74                 sub     rax, r14
.text:0000000000005D77                 cmp     rax, r12
.text:0000000000005D7A                 ja      short loc_5DB0
.text:0000000000005D7C
.text:0000000000005D7C loc_5D7C:                               ; CODE XREF: __strftime_internal+294↓j
.text:0000000000005D7C                                         ; __strftime_internal+450↓j ...
.text:0000000000005D7C                 xor     r14d, r14d
.text:0000000000005D7F
.text:0000000000005D7F loc_5D7F:                               ; CODE XREF: __strftime_internal+14F↓j
.text:0000000000005D7F                                         ; __strftime_internal+15B↓j ...
.text:0000000000005D7F                 mov     rbx, [rsp+4F8h+var_40]
.text:0000000000005D87                 xor     rbx, fs:28h
.text:0000000000005D90                 mov     rax, r14
.text:0000000000005D93                 jnz     loc_7745
.text:0000000000005D99                 add     rsp, 4C8h
.text:0000000000005DA0                 pop     rbx
.text:0000000000005DA1                 pop     rbp
.text:0000000000005DA2                 pop     r12
.text:0000000000005DA4                 pop     r13
.text:0000000000005DA6                 pop     r14
.text:0000000000005DA8                 pop     r15
.text:0000000000005DAA                 retn
.text:0000000000005DAA ; ---------------------------------------------------------------------------
.text:0000000000005DAB                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 loc_5DB0:                               ; CODE XREF: __strftime_internal+CA↑j
.text:0000000000005DB0                 test    rbp, rbp
.text:0000000000005DB3                 jz      short loc_5DDC
.text:0000000000005DB5                 cmp     r10d, 1
.text:0000000000005DB9                 jle     short loc_5DD2
.text:0000000000005DBB                 lea     r15, [r10-1]
.text:0000000000005DBF                 mov     rdi, rbp        ; s
.text:0000000000005DC2                 mov     esi, 20h ; ' '  ; c
.text:0000000000005DC7                 mov     rdx, r15        ; n
.text:0000000000005DCA                 add     rbp, r15
.text:0000000000005DCD                 call    _memset
.text:0000000000005DD2
.text:0000000000005DD2 loc_5DD2:                               ; CODE XREF: __strftime_internal+109↑j
.text:0000000000005DD2                 movzx   eax, byte ptr [rbx]
.text:0000000000005DD5                 add     rbp, 1
.text:0000000000005DD9                 mov     [rbp-1], al
.text:0000000000005DDC
.text:0000000000005DDC loc_5DDC:                               ; CODE XREF: __strftime_internal+103↑j
.text:0000000000005DDC                                         ; __strftime_internal+6EB↓j ...
.text:0000000000005DDC                 add     r14, r12
.text:0000000000005DDF                 mov     r12, rbx
.text:0000000000005DE2
.text:0000000000005DE2 loc_5DE2:                               ; CODE XREF: __strftime_internal+328↓j
.text:0000000000005DE2                                         ; __strftime_internal+420↓j ...
.text:0000000000005DE2                 movzx   eax, byte ptr [r12+1]
.text:0000000000005DE8                 lea     rbx, [r12+1]
.text:0000000000005DED                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DF4                 test    al, al
.text:0000000000005DF6                 jnz     loc_5D4E
.text:0000000000005DFC
.text:0000000000005DFC loc_5DFC:                               ; CODE XREF: __strftime_internal+90↑j
.text:0000000000005DFC                 test    rbp, rbp
.text:0000000000005DFF                 jz      loc_5D7F
.text:0000000000005E05                 cmp     [rsp+4F8h+var_4F0], 0
.text:0000000000005E0B                 jz      loc_5D7F
.text:0000000000005E11                 mov     byte ptr [rbp+0], 0
.text:0000000000005E15                 jmp     loc_5D7F
.text:0000000000005E15 ; ---------------------------------------------------------------------------
.text:0000000000005E1A                 align 20h
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: __strftime_internal+7D↑j
.text:0000000000005E20                 test    r15d, r15d
.text:0000000000005E23                 mov     eax, 0Ch
.text:0000000000005E28                 cmovz   r15d, eax
.text:0000000000005E2C                 jmp     loc_5D37
.text:0000000000005E2C ; ---------------------------------------------------------------------------
.text:0000000000005E31                 align 8
.text:0000000000005E38
.text:0000000000005E38 loc_5E38:                               ; CODE XREF: __strftime_internal+A0↑j
.text:0000000000005E38                 movzx   eax, [rsp+4F8h+var_4CD]
.text:0000000000005E3D                 xor     r8d, r8d
.text:0000000000005E40                 xor     r15d, r15d
.text:0000000000005E43                 mov     edx, 1
.text:0000000000005E48                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:0000000000005E4C
.text:0000000000005E4C loc_5E4C:                               ; CODE XREF: __strftime_internal+233↓j
.text:0000000000005E4C                                         ; __strftime_internal+246↓j ...
.text:0000000000005E4C                 add     rbx, 1
.text:0000000000005E50                 movsx   eax, byte ptr [rbx]
.text:0000000000005E53                 lea     ecx, [rax-23h]
.text:0000000000005E56                 mov     esi, eax
.text:0000000000005E58                 mov     r9d, eax
.text:0000000000005E5B                 cmp     cl, 3Ch ; '<'
.text:0000000000005E5E                 ja      short loc_5E8C
.text:0000000000005E60                 mov     rdi, rdx
.text:0000000000005E63                 mov     r11, 1000000000002500h
.text:0000000000005E6D                 shl     rdi, cl
.text:0000000000005E70                 test    rdi, r11
.text:0000000000005E73                 jnz     short loc_5EE0
.text:0000000000005E75                 test    cl, cl
.text:0000000000005E77                 jz      short loc_5EF0
.text:0000000000005E79                 mov     rcx, 800000000000000h
.text:0000000000005E83                 test    rdi, rcx
.text:0000000000005E86                 jnz     loc_5FE0
.text:0000000000005E8C
.text:0000000000005E8C loc_5E8C:                               ; CODE XREF: __strftime_internal+1AE↑j
.text:0000000000005E8C                 lea     edx, [rax-30h]
.text:0000000000005E8F                 cmp     edx, 9
.text:0000000000005E92                 jbe     loc_5FF0
.text:0000000000005E98
.text:0000000000005E98 loc_5E98:                               ; CODE XREF: __strftime_internal+372↓j
.text:0000000000005E98                                         ; __strftime_internal+3AC↓j
.text:0000000000005E98                 cmp     sil, 45h ; 'E'
.text:0000000000005E9C                 jz      short loc_5EC8
.text:0000000000005E9E                 xor     r11d, r11d
.text:0000000000005EA1                 cmp     sil, 4Fh ; 'O'
.text:0000000000005EA5                 jz      short loc_5EC8
.text:0000000000005EA7
.text:0000000000005EA7 loc_5EA7:                               ; CODE XREF: __strftime_internal+227↓j
.text:0000000000005EA7                 cmp     sil, 7Ah        ; switch 123 cases
.text:0000000000005EAB                 ja      short def_5EBF  ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000005EAD                 lea     rdx, jpt_5EBF
.text:0000000000005EB4                 movzx   eax, sil
.text:0000000000005EB8                 movsxd  rax, ds:(jpt_5EBF - 0F410h)[rdx+rax*4]
.text:0000000000005EBC                 add     rax, rdx
.text:0000000000005EBF                 jmp     rax             ; switch jump
.text:0000000000005EBF ; ---------------------------------------------------------------------------
.text:0000000000005EC1                 align 8
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: __strftime_internal+1EC↑j
.text:0000000000005EC8                                         ; __strftime_internal+1F5↑j
.text:0000000000005EC8                 movsx   r9d, byte ptr [rbx+1]
.text:0000000000005ECD                 mov     r11d, eax
.text:0000000000005ED0                 add     rbx, 1
.text:0000000000005ED4                 mov     esi, r9d
.text:0000000000005ED7                 jmp     short loc_5EA7
.text:0000000000005ED7 ; ---------------------------------------------------------------------------
.text:0000000000005ED9                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005EE0                 mov     r15d, eax
.text:0000000000005EE3                 jmp     loc_5E4C
.text:0000000000005EE3 ; ---------------------------------------------------------------------------
.text:0000000000005EE8                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: __strftime_internal+1C7↑j
.text:0000000000005EF0                 mov     r8d, 1
.text:0000000000005EF6                 jmp     loc_5E4C
.text:0000000000005EFB ; ---------------------------------------------------------------------------
.text:0000000000005EFB
.text:0000000000005EFB loc_5EFB:                               ; CODE XREF: __strftime_internal+1212↓j
.text:0000000000005EFB                 mov     rbx, r9
.text:0000000000005EFE                 xchg    ax, ax
.text:0000000000005F00
.text:0000000000005F00 def_5EBF:                               ; CODE XREF: __strftime_internal+1FB↑j
.text:0000000000005F00                                         ; __strftime_internal+20F↑j ...
.text:0000000000005F00                 lea     rax, [rbx-1]    ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000005F04                 mov     r8d, 1
.text:0000000000005F0A
.text:0000000000005F0A loc_5F0A:                               ; CODE XREF: __strftime_internal+269↓j
.text:0000000000005F0A                 mov     r9, rax
.text:0000000000005F0D                 lea     rax, [rax-1]
.text:0000000000005F11                 add     r8d, 1
.text:0000000000005F15                 cmp     byte ptr [rax+1], 25h ; '%'
.text:0000000000005F19                 jnz     short loc_5F0A
.text:0000000000005F1B                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000005F20                 mov     eax, 0
.text:0000000000005F25                 movsxd  r8, r8d
.text:0000000000005F28                 mov     rcx, r8
.text:0000000000005F2B                 mov     r12, rbx
.text:0000000000005F2E                 sub     rdx, r14
.text:0000000000005F31                 test    r10d, r10d
.text:0000000000005F34                 cmovns  eax, r10d
.text:0000000000005F38                 cdqe
.text:0000000000005F3A                 cmp     rax, r8
.text:0000000000005F3D                 cmovnb  rcx, rax
.text:0000000000005F41
.text:0000000000005F41 loc_5F41:                               ; CODE XREF: __strftime_internal+122D↓j
.text:0000000000005F41                                         ; __strftime_internal+17E4↓j
.text:0000000000005F41                 cmp     rcx, rdx
.text:0000000000005F44                 jnb     loc_5D7C
.text:0000000000005F4A                 test    rbp, rbp
.text:0000000000005F4D                 jz      loc_5FD5
.text:0000000000005F53                 cmp     rax, r8
.text:0000000000005F56                 jbe     short loc_5FA5
.text:0000000000005F58                 movsxd  rdx, r10d
.text:0000000000005F5B                 mov     [rsp+4F8h+var_4B0], r8
.text:0000000000005F60                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000005F65                 sub     rdx, r8         ; n
.text:0000000000005F68                 cmp     r15d, 30h ; '0'
.text:0000000000005F6C                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:0000000000005F71                 lea     rbx, [rbp+rdx+0]
.text:0000000000005F76                 jz      loc_71E6
.text:0000000000005F7C                 cmp     r15d, 2Bh ; '+'
.text:0000000000005F80                 jz      loc_71E6
.text:0000000000005F86                 mov     rdi, rbp        ; s
.text:0000000000005F89                 mov     esi, 20h ; ' '  ; c
.text:0000000000005F8E                 mov     rbp, rbx
.text:0000000000005F91                 call    _memset
.text:0000000000005F96                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000005F9B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000005FA0                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000005FA5
.text:0000000000005FA5 loc_5FA5:                               ; CODE XREF: __strftime_internal+2A6↑j
.text:0000000000005FA5                                         ; __strftime_internal+1555↓j
.text:0000000000005FA5                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000005FAA                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:0000000000005FAF                 mov     rdx, r8         ; n
.text:0000000000005FB2                 mov     [rsp+4F8h+var_4C8], r8
.text:0000000000005FB7                 mov     rsi, r9         ; src
.text:0000000000005FBA                 mov     rdi, rbp        ; dest
.text:0000000000005FBD                 jz      loc_7190
.text:0000000000005FC3                 call    memcpy_lowcase_0
.text:0000000000005FC8                 mov     r8, [rsp+4F8h+var_4C8]
.text:0000000000005FCD                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000005FD2
.text:0000000000005FD2 loc_5FD2:                               ; CODE XREF: __strftime_internal+14EF↓j
.text:0000000000005FD2                 add     rbp, r8
.text:0000000000005FD5
.text:0000000000005FD5 loc_5FD5:                               ; CODE XREF: __strftime_internal+29D↑j
.text:0000000000005FD5                 add     r14, rcx
.text:0000000000005FD8                 jmp     loc_5DE2
.text:0000000000005FD8 ; ---------------------------------------------------------------------------
.text:0000000000005FDD                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 loc_5FE0:                               ; CODE XREF: __strftime_internal+1D6↑j
.text:0000000000005FE0                 mov     byte ptr [rsp+4F8h+var_4C8], 1
.text:0000000000005FE5                 jmp     loc_5E4C
.text:0000000000005FE5 ; ---------------------------------------------------------------------------
.text:0000000000005FEA                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 loc_5FF0:                               ; CODE XREF: __strftime_internal+1E2↑j
.text:0000000000005FF0                 xor     r10d, r10d
.text:0000000000005FF3
.text:0000000000005FF3 loc_5FF3:                               ; CODE XREF: __strftime_internal+36D↓j
.text:0000000000005FF3                 movsx   eax, byte ptr [rbx+1]
.text:0000000000005FF7                 cmp     r10d, 0CCCCCCCh
.text:0000000000005FFE                 lea     rcx, [rbx+1]
.text:0000000000006002                 mov     esi, eax
.text:0000000000006004                 lea     edx, [rax-30h]
.text:0000000000006007                 jg      short loc_6036
.text:0000000000006009                 movsx   edi, byte ptr [rbx]
.text:000000000000600C                 jz      short loc_6030
.text:000000000000600E
.text:000000000000600E loc_600E:                               ; CODE XREF: __strftime_internal+384↓j
.text:000000000000600E                 lea     r9d, [r10+r10*4]
.text:0000000000006012                 mov     rbx, rcx
.text:0000000000006015                 lea     r10d, [rdi+r9*2-30h]
.text:000000000000601A
.text:000000000000601A loc_601A:                               ; CODE XREF: __strftime_internal+39E↓j
.text:000000000000601A                 cmp     edx, 9
.text:000000000000601D                 jbe     short loc_5FF3
.text:000000000000601F                 mov     r9d, eax
.text:0000000000006022                 jmp     loc_5E98
.text:0000000000006022 ; ---------------------------------------------------------------------------
.text:0000000000006027                 align 10h
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: __strftime_internal+35C↑j
.text:0000000000006030                 cmp     dil, 37h ; '7'
.text:0000000000006034                 jle     short loc_600E
.text:0000000000006036
.text:0000000000006036 loc_6036:                               ; CODE XREF: __strftime_internal+357↑j
.text:0000000000006036                 cmp     edx, 9
.text:0000000000006039                 ja      short loc_6050
.text:000000000000603B                 movsx   eax, byte ptr [rbx+2]
.text:000000000000603F                 mov     r10d, 7FFFFFFFh
.text:0000000000006045                 add     rbx, 2
.text:0000000000006049                 mov     esi, eax
.text:000000000000604B                 lea     edx, [rax-30h]
.text:000000000000604E                 jmp     short loc_601A
.text:0000000000006050 ; ---------------------------------------------------------------------------
.text:0000000000006050
.text:0000000000006050 loc_6050:                               ; CODE XREF: __strftime_internal+389↑j
.text:0000000000006050                 mov     r9d, eax
.text:0000000000006053                 mov     rbx, rcx
.text:0000000000006056                 mov     r10d, 7FFFFFFFh
.text:000000000000605C                 jmp     loc_5E98
.text:000000000000605C ; ---------------------------------------------------------------------------
.text:0000000000006061                 align 8
.text:0000000000006068
.text:0000000000006068 loc_6068:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006068                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006068                 cmp     r11d, 4Fh ; 'O' ; jumptable 0000000000005EBF cases 88,99,120
.text:000000000000606C                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006072
.text:0000000000006072 loc_6072:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006072                                         ; __strftime_internal+10F6↓j
.text:0000000000006072                                         ; DATA XREF: ...
.text:0000000000006072                 xor     r8d, r8d        ; jumptable 0000000000005EBF case 114
.text:0000000000006075
.text:0000000000006075 loc_6075:                               ; CODE XREF: __strftime_internal+659↓j
.text:0000000000006075                                         ; __strftime_internal+A27↓j ...
.text:0000000000006075                 mov     eax, 2520h
.text:000000000000607A                 test    r11d, r11d
.text:000000000000607D                 mov     word ptr [rsp+4F8h+format], ax
.text:0000000000006085                 jnz     loc_775B
.text:000000000000608B                 lea     rdx, [rsp+4F8h+format] ; format
.text:0000000000006093                 mov     r12, rbx
.text:0000000000006096                 lea     rax, [rdx+2]
.text:000000000000609A
.text:000000000000609A loc_609A:                               ; CODE XREF: __strftime_internal+541↓j
.text:000000000000609A                                         ; __strftime_internal+5B6↓j
.text:000000000000609A                 lea     r9, [rsp+4F8h+s]
.text:00000000000060A2                 mov     [rax], sil
.text:00000000000060A5                 mov     byte ptr [rax+1], 0
.text:00000000000060A9                 mov     rcx, r13        ; tp
.text:00000000000060AC                 mov     esi, 400h       ; maxsize
.text:00000000000060B1                 mov     [rsp+4F8h+var_4C0], r10d
.text:00000000000060B6                 mov     rdi, r9         ; s
.text:00000000000060B9                 mov     byte ptr [rsp+4F8h+var_4A8], r8b
.text:00000000000060BE                 mov     dword ptr [rsp+4F8h+var_4B0], r11d
.text:00000000000060C3                 mov     [rsp+4F8h+var_4B8], r9
.text:00000000000060C8                 call    _strftime
.text:00000000000060CD                 test    rax, rax
.text:00000000000060D0                 jz      loc_5DE2
.text:00000000000060D6                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:00000000000060DB                 lea     rcx, [rax-1]
.text:00000000000060DF                 mov     rdx, [rsp+4F8h+var_4F0]
.text:00000000000060E4                 mov     eax, 0
.text:00000000000060E9                 test    r10d, r10d
.text:00000000000060EC                 cmovns  rax, r10
.text:00000000000060F0                 cmp     rcx, rax
.text:00000000000060F3                 mov     rbx, rax
.text:00000000000060F6                 cmovnb  rbx, rcx
.text:00000000000060FA                 sub     rdx, r14
.text:00000000000060FD                 cmp     rdx, rbx
.text:0000000000006100                 jbe     loc_5D7C
.text:0000000000006106                 test    rbp, rbp
.text:0000000000006109                 jz      loc_61AE
.text:000000000000610F                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006114                 mov     r9, [rsp+4F8h+var_4B8]
.text:0000000000006119                 movzx   r8d, byte ptr [rsp+4F8h+var_4A8]
.text:000000000000611F                 test    r11d, r11d
.text:0000000000006122                 jnz     short loc_617E
.text:0000000000006124                 cmp     rcx, rax
.text:0000000000006127                 jnb     short loc_617E
.text:0000000000006129                 movsxd  rdx, r10d
.text:000000000000612C                 mov     [rsp+4F8h+var_4A8], r9
.text:0000000000006131                 mov     [rsp+4F8h+var_4B0], rcx
.text:0000000000006136                 sub     rdx, rcx        ; n
.text:0000000000006139                 cmp     r15d, 30h ; '0'
.text:000000000000613D                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:0000000000006142                 lea     rax, [rbp+rdx+0]
.text:0000000000006147                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000614C                 jz      loc_71BF
.text:0000000000006152                 cmp     r15d, 2Bh ; '+'
.text:0000000000006156                 jz      loc_71BF
.text:000000000000615C                 mov     rdi, rbp        ; s
.text:000000000000615F                 mov     esi, 20h ; ' '  ; c
.text:0000000000006164                 call    _memset
.text:0000000000006169                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000616F                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006174                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000006179                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000617E
.text:000000000000617E loc_617E:                               ; CODE XREF: __strftime_internal+472↑j
.text:000000000000617E                                         ; __strftime_internal+477↑j ...
.text:000000000000617E                 test    r8b, r8b
.text:0000000000006181                 lea     rsi, [r9+1]
.text:0000000000006185                 mov     rdx, rcx
.text:0000000000006188                 jnz     loc_71A8
.text:000000000000618E                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000006193                 mov     rdi, rbp
.text:0000000000006196                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000619B                 jz      loc_6A11
.text:00000000000061A1
.text:00000000000061A1 loc_61A1:                               ; CODE XREF: __strftime_internal+D5B↓j
.text:00000000000061A1                 call    memcpy_lowcase_0
.text:00000000000061A6                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000061AB
.text:00000000000061AB loc_61AB:                               ; CODE XREF: __strftime_internal+D6B↓j
.text:00000000000061AB                                         ; __strftime_internal+150A↓j
.text:00000000000061AB                 add     rbp, rcx
.text:00000000000061AE
.text:00000000000061AE loc_61AE:                               ; CODE XREF: __strftime_internal+459↑j
.text:00000000000061AE                                         ; __strftime_internal+CEB↓j
.text:00000000000061AE                 add     r14, rbx
.text:00000000000061B1                 jmp     loc_5DE2
.text:00000000000061B6 ; ---------------------------------------------------------------------------
.text:00000000000061B6
.text:00000000000061B6 loc_61B6:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000061B6                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000061B6                 test    r11d, r11d      ; jumptable 0000000000005EBF cases 65,97
.text:00000000000061B9                 jnz     def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000061BF                 movzx   eax, byte ptr [rsp+4F8h+var_4C8]
.text:00000000000061C4                 test    r8b, r8b
.text:00000000000061C7                 lea     rdx, [rsp+4F8h+format]
.text:00000000000061CF                 mov     r12, rbx
.text:00000000000061D2                 cmovnz  eax, r8d
.text:00000000000061D6                 xor     r8d, r8d
.text:00000000000061D9                 xor     r11d, r11d
.text:00000000000061DC                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:00000000000061E0                 mov     eax, 2520h
.text:00000000000061E5                 mov     word ptr [rsp+4F8h+format], ax
.text:00000000000061ED                 lea     rax, [rdx+2]
.text:00000000000061F1                 jmp     loc_609A
.text:00000000000061F6 ; ---------------------------------------------------------------------------
.text:00000000000061F6
.text:00000000000061F6 loc_61F6:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000061F6                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000061F6                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 83
.text:00000000000061FA                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006200                 mov     ecx, [r13+0]
.text:0000000000006204                 mov     edi, 2
.text:0000000000006209                 nop     dword ptr [rax+00000000h]
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: __strftime_internal+852↓j
.text:0000000000006210                                         ; __strftime_internal+1047↓j ...
.text:0000000000006210                 mov     eax, ecx
.text:0000000000006212                 xor     esi, esi
.text:0000000000006214                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006219                 shr     eax, 1Fh
.text:000000000000621C                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000006220                 mov     eax, ecx
.text:0000000000006222                 not     eax
.text:0000000000006224                 shr     eax, 1Fh
.text:0000000000006227
.text:0000000000006227 loc_6227:                               ; CODE XREF: __strftime_internal+8AB↓j
.text:0000000000006227                                         ; __strftime_internal+A02↓j ...
.text:0000000000006227                 cmp     r11d, 4Fh ; 'O'
.text:000000000000622B                 jnz     loc_70B0
.text:0000000000006231                 test    al, al
.text:0000000000006233                 jz      loc_70B0
.text:0000000000006239                 mov     esi, r9d
.text:000000000000623C
.text:000000000000623C loc_623C:                               ; CODE XREF: __strftime_internal+B0D↓j
.text:000000000000623C                                         ; __strftime_internal+158C↓j
.text:000000000000623C                 mov     edx, 2520h
.text:0000000000006241                 xor     r8d, r8d
.text:0000000000006244                 mov     word ptr [rsp+4F8h+format], dx
.text:000000000000624C
.text:000000000000624C loc_624C:                               ; CODE XREF: __strftime_internal+1AAD↓j
.text:000000000000624C                 lea     rdx, [rsp+4F8h+format]
.text:0000000000006254                 mov     [rsp+4F8h+var_44B], r11b
.text:000000000000625C                 mov     r12, rbx
.text:000000000000625F                 mov     r11d, edi
.text:0000000000006262                 lea     rax, [rdx+3]
.text:0000000000006266                 jmp     loc_609A
.text:000000000000626B ; ---------------------------------------------------------------------------
.text:000000000000626B
.text:000000000000626B loc_626B:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000626B                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:000000000000626B                 test    r10d, r10d      ; jumptable 0000000000005EBF case 116
.text:000000000000626E                 mov     ecx, 0
.text:0000000000006273                 mov     eax, 1
.text:0000000000006278                 cmovns  ecx, r10d
.text:000000000000627C                 movsxd  rcx, ecx
.text:000000000000627F                 test    rcx, rcx
.text:0000000000006282                 cmovz   rcx, rax
.text:0000000000006286                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000628B                 sub     rax, r14
.text:000000000000628E                 cmp     rax, rcx
.text:0000000000006291                 jbe     loc_5D7C
.text:0000000000006297                 test    rbp, rbp
.text:000000000000629A                 jz      short loc_62E8
.text:000000000000629C                 cmp     r10d, 1
.text:00000000000062A0                 jle     short loc_62DC
.text:00000000000062A2                 movsxd  rdx, r10d
.text:00000000000062A5                 mov     [rsp+4F8h+var_4C8], rcx
.text:00000000000062AA                 sub     rdx, 1          ; n
.text:00000000000062AE                 cmp     r15d, 30h ; '0'
.text:00000000000062B2                 lea     r12, [rbp+rdx+0]
.text:00000000000062B7                 jz      loc_75D4
.text:00000000000062BD                 cmp     r15d, 2Bh ; '+'
.text:00000000000062C1                 jz      loc_75D4
.text:00000000000062C7                 mov     rdi, rbp        ; s
.text:00000000000062CA                 mov     esi, 20h ; ' '  ; c
.text:00000000000062CF                 mov     rbp, r12
.text:00000000000062D2                 call    _memset
.text:00000000000062D7                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000062DC
.text:00000000000062DC loc_62DC:                               ; CODE XREF: __strftime_internal+5F0↑j
.text:00000000000062DC                                         ; __strftime_internal+1939↓j
.text:00000000000062DC                 mov     byte ptr [rbp+0], 9
.text:00000000000062E0                 add     rbp, 1
.text:00000000000062E4                 nop     dword ptr [rax+00h]
.text:00000000000062E8
.text:00000000000062E8 loc_62E8:                               ; CODE XREF: __strftime_internal+5EA↑j
.text:00000000000062E8                                         ; __strftime_internal+7B5↓j ...
.text:00000000000062E8                 add     r14, rcx
.text:00000000000062EB                 mov     r12, rbx
.text:00000000000062EE                 jmp     loc_5DE2
.text:00000000000062F3 ; ---------------------------------------------------------------------------
.text:00000000000062F3
.text:00000000000062F3 loc_62F3:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000062F3                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000062F3                 mov     eax, 1          ; jumptable 0000000000005EBF case 80
.text:00000000000062F8
.text:00000000000062F8 loc_62F8:                               ; CODE XREF: __strftime_internal+13A1↓j
.text:00000000000062F8                 test    r8b, r8b
.text:00000000000062FB                 jnz     loc_722B
.text:0000000000006301                 mov     r8d, eax
.text:0000000000006304                 mov     esi, 70h ; 'p'
.text:0000000000006309                 jmp     loc_6075
.text:000000000000630E ; ---------------------------------------------------------------------------
.text:000000000000630E
.text:000000000000630E loc_630E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000630E                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:000000000000630E                 lea     rax, aHM        ; jumptable 0000000000005EBF case 82
.text:0000000000006315                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000631D                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000006322
.text:0000000000006322 loc_6322:                               ; CODE XREF: __strftime_internal+81F↓j
.text:0000000000006322                                         ; __strftime_internal+11B2↓j ...
.text:0000000000006322                 movzx   r8d, byte ptr [rsp+4F8h+var_4C8]
.text:0000000000006328                 mov     eax, [rsp+4F8h+arg_18]
.text:000000000000632F                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006336                 mov     dword ptr [rsp+4F8h+var_4B0], r10d
.text:000000000000633B                 xor     edi, edi        ; s
.text:000000000000633D                 mov     r9d, r15d
.text:0000000000006340                 mov     rcx, r13
.text:0000000000006343                 mov     dword ptr [rsp+4F8h+var_4C8], r8d
.text:0000000000006348                 push    rax             ; int
.text:0000000000006349                 push    [rsp+500h+var_4E8] ; __int64
.text:000000000000634D                 push    [rsp+508h+var_4E0] ; __int64
.text:0000000000006351                 mov     eax, [rsp+510h+var_4C0]
.text:0000000000006355                 push    rax             ; int
.text:0000000000006356                 mov     rdx, [rsp+518h+var_4B8]
.text:000000000000635B                 call    __strftime_internal
.text:0000000000006360                 add     rsp, 20h
.text:0000000000006364                 movsxd  r10, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006369                 mov     r11, rax
.text:000000000000636C                 mov     rsi, [rsp+4F8h+var_4F0]
.text:0000000000006371                 mov     eax, 0
.text:0000000000006376                 test    r10d, r10d
.text:0000000000006379                 cmovns  rax, r10
.text:000000000000637D                 cmp     r11, rax
.text:0000000000006380                 mov     r12, rax
.text:0000000000006383                 cmovnb  r12, r11
.text:0000000000006387                 sub     rsi, r14
.text:000000000000638A                 cmp     rsi, r12
.text:000000000000638D                 mov     [rsp+4F8h+var_4B0], rsi
.text:0000000000006392                 jbe     loc_5D7C
.text:0000000000006398                 test    rbp, rbp
.text:000000000000639B                 jz      loc_5DDC
.text:00000000000063A1                 cmp     r11, rax
.text:00000000000063A4                 jnb     short loc_63E6
.text:00000000000063A6                 movsxd  rdx, r10d
.text:00000000000063A9                 mov     [rsp+4F8h+var_4A0], r11
.text:00000000000063AE                 sub     rdx, r11        ; n
.text:00000000000063B1                 cmp     r15d, 30h ; '0'
.text:00000000000063B5                 lea     rax, [rbp+rdx+0]
.text:00000000000063BA                 mov     [rsp+4F8h+var_4A8], rax
.text:00000000000063BF                 jz      loc_74BC
.text:00000000000063C5                 cmp     r15d, 2Bh ; '+'
.text:00000000000063C9                 jz      loc_74BC
.text:00000000000063CF                 mov     rdi, rbp        ; s
.text:00000000000063D2                 mov     esi, 20h ; ' '  ; c
.text:00000000000063D7                 call    _memset
.text:00000000000063DC                 mov     rbp, [rsp+4F8h+var_4A8]
.text:00000000000063E1                 mov     r11, [rsp+4F8h+var_4A0]
.text:00000000000063E6
.text:00000000000063E6 loc_63E6:                               ; CODE XREF: __strftime_internal+6F4↑j
.text:00000000000063E6                                         ; __strftime_internal+1823↓j
.text:00000000000063E6                 mov     eax, [rsp+4F8h+arg_18]
.text:00000000000063ED                 mov     [rsp+4F8h+var_4A8], r11
.text:00000000000063F2                 mov     rdi, rbp        ; s
.text:00000000000063F5                 mov     r9d, r15d
.text:00000000000063F8                 mov     rcx, r13
.text:00000000000063FB                 push    rax             ; int
.text:00000000000063FC                 push    [rsp+500h+var_4E8] ; __int64
.text:0000000000006400                 push    [rsp+508h+var_4E0] ; __int64
.text:0000000000006404                 mov     eax, [rsp+510h+var_4C0]
.text:0000000000006408                 push    rax             ; int
.text:0000000000006409                 mov     r8d, dword ptr [rsp+518h+var_4C8]
.text:000000000000640E                 mov     rdx, [rsp+518h+var_4B8]
.text:0000000000006413                 mov     rsi, [rsp+518h+var_4B0]
.text:0000000000006418                 call    __strftime_internal
.text:000000000000641D                 mov     r11, [rsp+518h+var_4A8]
.text:0000000000006422                 add     rsp, 20h
.text:0000000000006426                 add     rbp, r11
.text:0000000000006429                 jmp     loc_5DDC
.text:000000000000642E ; ---------------------------------------------------------------------------
.text:000000000000642E
.text:000000000000642E loc_642E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000642E                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:000000000000642E                 mov     rdx, [rsp+4F8h+var_4F0] ; jumptable 0000000000005EBF case 37
.text:0000000000006433                 mov     eax, 0
.text:0000000000006438                 mov     ecx, 1
.text:000000000000643D                 sub     rdx, r14
.text:0000000000006440                 test    r10d, r10d
.text:0000000000006443                 cmovns  eax, r10d
.text:0000000000006447                 cdqe
.text:0000000000006449                 test    rax, rax
.text:000000000000644C                 cmovnz  rcx, rax
.text:0000000000006450                 test    r11d, r11d
.text:0000000000006453                 jnz     loc_7488
.text:0000000000006459                 cmp     rcx, rdx
.text:000000000000645C                 jnb     loc_5D7C
.text:0000000000006462                 test    rbp, rbp
.text:0000000000006465                 jz      loc_62E8
.text:000000000000646B                 cmp     r10d, 1
.text:000000000000646F                 jle     short loc_64AE
.text:0000000000006471                 movsxd  rdx, r10d
.text:0000000000006474                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000006479                 sub     rdx, 1          ; n
.text:000000000000647D                 cmp     r15d, 30h ; '0'
.text:0000000000006481                 lea     r12, [rbp+rdx+0]
.text:0000000000006486                 jz      loc_76F5
.text:000000000000648C                 cmp     r15d, 2Bh ; '+'
.text:0000000000006490                 mov     esi, 20h ; ' '  ; c
.text:0000000000006495                 jz      loc_76F5
.text:000000000000649B
.text:000000000000649B loc_649B:                               ; CODE XREF: __strftime_internal+1A4A↓j
.text:000000000000649B                 mov     rdi, rbp        ; s
.text:000000000000649E                 mov     rbp, r12
.text:00000000000064A1                 call    _memset
.text:00000000000064A6                 movzx   esi, byte ptr [rbx]
.text:00000000000064A9                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000064AE
.text:00000000000064AE loc_64AE:                               ; CODE XREF: __strftime_internal+7BF↑j
.text:00000000000064AE                 mov     [rbp+0], sil
.text:00000000000064B2                 add     rbp, 1
.text:00000000000064B6                 jmp     loc_62E8
.text:00000000000064BB ; ---------------------------------------------------------------------------
.text:00000000000064BB
.text:00000000000064BB loc_64BB:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000064BB                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000064BB                 lea     rax, aHMS       ; jumptable 0000000000005EBF case 84
.text:00000000000064C2                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:00000000000064CA                 mov     [rsp+4F8h+var_4B8], rax
.text:00000000000064CF                 jmp     loc_6322
.text:00000000000064D4 ; ---------------------------------------------------------------------------
.text:00000000000064D4
.text:00000000000064D4 loc_64D4:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000064D4                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000064D4                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 85
.text:00000000000064D8                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000064DE                 mov     esi, [r13+1Ch]
.text:00000000000064E2                 sub     esi, [r13+18h]
.text:00000000000064E6                 mov     edx, 92492493h
.text:00000000000064EB                 add     esi, 7
.text:00000000000064EE                 mov     eax, esi
.text:00000000000064F0                 imul    edx
.text:00000000000064F2
.text:00000000000064F2 loc_64F2:                               ; CODE XREF: __strftime_internal+10D9↓j
.text:00000000000064F2                 lea     ecx, [rdx+rsi]
.text:00000000000064F5                 sar     esi, 1Fh
.text:00000000000064F8                 mov     edi, 2
.text:00000000000064FD                 sar     ecx, 2
.text:0000000000006500                 sub     ecx, esi
.text:0000000000006502                 jmp     loc_6210
.text:0000000000006507 ; ---------------------------------------------------------------------------
.text:0000000000006507
.text:0000000000006507 loc_6507:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006507                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006507                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 89
.text:000000000000650B                 jz      loc_723A
.text:0000000000006511                 cmp     r11d, 4Fh ; 'O'
.text:0000000000006515                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000651B                 mov     eax, [r13+14h]
.text:000000000000651F                 cmp     eax, 0FFFFF894h
.text:0000000000006524                 lea     ecx, [rax+76Ch]
.text:000000000000652A                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000652F                 cmp     eax, 0FFFFF894h
.text:0000000000006534                 setnl   al
.text:0000000000006537                 test    r15d, r15d
.text:000000000000653A                 jnz     loc_73B9
.text:0000000000006540
.text:0000000000006540 loc_6540:                               ; CODE XREF: __strftime_internal+1703↓j
.text:0000000000006540                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000006545                 cmp     r15d, 2Bh ; '+'
.text:0000000000006549                 jz      loc_73C3
.text:000000000000654F
.text:000000000000654F loc_654F:                               ; CODE XREF: __strftime_internal+170D↓j
.text:000000000000654F                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006554                 mov     edi, 4
.text:0000000000006559
.text:0000000000006559 loc_6559:                               ; CODE XREF: __strftime_internal+117A↓j
.text:0000000000006559                 xor     esi, esi
.text:000000000000655B                 jmp     loc_6227
.text:0000000000006560 ; ---------------------------------------------------------------------------
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006560                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006560                 movzx   esi, byte ptr [rsp+4F8h+var_4C8] ; jumptable 0000000000005EBF case 90
.text:0000000000006565                 mov     rdi, [rsp+4F8h+var_4D8] ; s
.text:000000000000656A                 test    r8b, r8b
.text:000000000000656D                 mov     eax, 0
.text:0000000000006572                 mov     [rsp+4F8h+var_4C0], r10d
.text:0000000000006577                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000657C                 cmovnz  esi, eax
.text:000000000000657F                 mov     byte ptr [rsp+4F8h+var_4C8], sil
.text:0000000000006584                 call    _strlen
.text:0000000000006589                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000000658E                 mov     r12, rax
.text:0000000000006591                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006596                 mov     eax, 0
.text:000000000000659B                 test    r10d, r10d
.text:000000000000659E                 cmovns  rax, r10
.text:00000000000065A2                 cmp     r12, rax
.text:00000000000065A5                 mov     rcx, rax
.text:00000000000065A8                 cmovnb  rcx, r12
.text:00000000000065AC                 sub     rdx, r14
.text:00000000000065AF                 cmp     rdx, rcx
.text:00000000000065B2                 jbe     loc_5D7C
.text:00000000000065B8                 test    rbp, rbp
.text:00000000000065BB                 jz      loc_62E8
.text:00000000000065C1                 cmp     r12, rax
.text:00000000000065C4                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000065CA                 jnb     short loc_6617
.text:00000000000065CC                 movsxd  rdx, r10d
.text:00000000000065CF                 mov     [rsp+4F8h+var_4B0], rcx
.text:00000000000065D4                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:00000000000065D9                 sub     rdx, r12        ; n
.text:00000000000065DC                 cmp     r15d, 30h ; '0'
.text:00000000000065E0                 lea     rax, [rbp+rdx+0]
.text:00000000000065E5                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:00000000000065EA                 jz      loc_76AF
.text:00000000000065F0                 cmp     r15d, 2Bh ; '+'
.text:00000000000065F4                 jz      loc_76AF
.text:00000000000065FA                 mov     rdi, rbp        ; s
.text:00000000000065FD                 mov     esi, 20h ; ' '  ; c
.text:0000000000006602                 call    _memset
.text:0000000000006607                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000660D                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006612                 mov     rcx, [rsp+4F8h+var_4B0]
.text:0000000000006617
.text:0000000000006617 loc_6617:                               ; CODE XREF: __strftime_internal+91A↑j
.text:0000000000006617                                         ; __strftime_internal+1A1C↓j
.text:0000000000006617                 test    r8b, r8b
.text:000000000000661A                 jnz     loc_7617
.text:0000000000006620                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000006625                 mov     rdx, r12        ; n
.text:0000000000006628                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000662D                 mov     rsi, [rsp+4F8h+var_4D8] ; src
.text:0000000000006632                 mov     rdi, rbp        ; dest
.text:0000000000006635                 jz      loc_7608
.text:000000000000663B                 call    memcpy_lowcase_0
.text:0000000000006640                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000006645
.text:0000000000006645 loc_6645:                               ; CODE XREF: __strftime_internal+1962↓j
.text:0000000000006645                                         ; __strftime_internal+1981↓j
.text:0000000000006645                 add     rbp, r12
.text:0000000000006648                 jmp     loc_62E8
.text:000000000000664D ; ---------------------------------------------------------------------------
.text:000000000000664D
.text:000000000000664D loc_664D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000664D                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:000000000000664D                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 121
.text:0000000000006651                 jz      loc_723A
.text:0000000000006657                 mov     esi, [r13+14h]
.text:000000000000665B                 mov     edx, 51EB851Fh
.text:0000000000006660                 mov     eax, esi
.text:0000000000006662                 imul    edx
.text:0000000000006664                 mov     eax, esi
.text:0000000000006666                 sar     eax, 1Fh
.text:0000000000006669                 mov     ecx, edx
.text:000000000000666B                 sar     ecx, 5
.text:000000000000666E                 sub     ecx, eax
.text:0000000000006670                 mov     eax, esi
.text:0000000000006672                 imul    ecx, 64h ; 'd'
.text:0000000000006675                 sub     eax, ecx
.text:0000000000006677                 mov     ecx, eax
.text:0000000000006679                 jns     short loc_6689
.text:000000000000667B                 neg     eax
.text:000000000000667D                 add     ecx, 64h ; 'd'
.text:0000000000006680                 cmp     esi, 0FFFFF893h
.text:0000000000006686                 cmovle  ecx, eax
.text:0000000000006689
.text:0000000000006689 loc_6689:                               ; CODE XREF: __strftime_internal+9C9↑j
.text:0000000000006689                                         ; __strftime_internal+FE9↓j
.text:0000000000006689                 test    r15d, r15d
.text:000000000000668C                 jz      loc_6CBA
.text:0000000000006692
.text:0000000000006692 loc_6692:                               ; CODE XREF: __strftime_internal+1004↓j
.text:0000000000006692                                         ; __strftime_internal+1AA6↓j
.text:0000000000006692                 mov     eax, 1
.text:0000000000006697                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000669C
.text:000000000000669C loc_669C:                               ; CODE XREF: __strftime_internal+114D↓j
.text:000000000000669C                 cmp     r15d, 2Bh ; '+'
.text:00000000000066A0                 jz      loc_6E13
.text:00000000000066A6
.text:00000000000066A6 loc_66A6:                               ; CODE XREF: __strftime_internal+115D↓j
.text:00000000000066A6                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:00000000000066AB                 mov     edi, 2
.text:00000000000066B0                 xor     esi, esi
.text:00000000000066B2                 jmp     loc_6227
.text:00000000000066B7 ; ---------------------------------------------------------------------------
.text:00000000000066B7
.text:00000000000066B7 loc_66B7:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000066B7                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000066B7                 movzx   eax, byte ptr [rsp+4F8h+var_4C8] ; jumptable 0000000000005EBF cases 98,104
.text:00000000000066BC                 test    r8b, r8b
.text:00000000000066BF                 cmovnz  eax, r8d
.text:00000000000066C3                 cmp     r11d, 45h ; 'E'
.text:00000000000066C7                 jz      loc_7636
.text:00000000000066CD                 mov     esi, r9d
.text:00000000000066D0                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:00000000000066D4                 xor     r8d, r8d
.text:00000000000066D7                 jmp     loc_6075
.text:00000000000066DC ; ---------------------------------------------------------------------------
.text:00000000000066DC
.text:00000000000066DC loc_66DC:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000066DC                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000066DC                 xor     r8d, r8d        ; jumptable 0000000000005EBF case 122
.text:00000000000066DF
.text:00000000000066DF loc_66DF:                               ; CODE XREF: __strftime_internal+E98↓j
.text:00000000000066DF                 mov     ecx, [r13+20h]
.text:00000000000066E3                 test    ecx, ecx
.text:00000000000066E5                 js      loc_738E
.text:00000000000066EB                 mov     rcx, [r13+28h]
.text:00000000000066EF                 mov     byte ptr [rsp+4F8h+var_4C0], 1
.text:00000000000066F4                 test    ecx, ecx
.text:00000000000066F6                 js      short loc_670C
.text:00000000000066F8                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000066FD                 jnz     short loc_670C
.text:00000000000066FF                 mov     rax, [rsp+4F8h+var_4D8]
.text:0000000000006704                 cmp     byte ptr [rax], 2Dh ; '-'
.text:0000000000006707                 setz    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000670C
.text:000000000000670C loc_670C:                               ; CODE XREF: __strftime_internal+A46↑j
.text:000000000000670C                                         ; __strftime_internal+A4D↑j
.text:000000000000670C                 mov     eax, ecx
.text:000000000000670E                 mov     edx, 91A2B3C5h
.text:0000000000006713                 mov     esi, 88888889h
.text:0000000000006718                 imul    edx
.text:000000000000671A                 mov     eax, ecx
.text:000000000000671C                 sar     eax, 1Fh
.text:000000000000671F                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:0000000000006723                 lea     r12d, [rdx+rcx]
.text:0000000000006727                 sar     r12d, 0Bh
.text:000000000000672B                 sub     r12d, eax
.text:000000000000672E                 mov     eax, ecx
.text:0000000000006730                 imul    esi
.text:0000000000006732                 lea     edi, [rdx+rcx]
.text:0000000000006735                 sar     edi, 5
.text:0000000000006738                 sub     edi, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000673C                 mov     eax, edi
.text:000000000000673E                 imul    esi
.text:0000000000006740                 mov     eax, edi
.text:0000000000006742                 sar     eax, 1Fh
.text:0000000000006745                 lea     esi, [rdx+rdi]
.text:0000000000006748                 sar     esi, 5
.text:000000000000674B                 sub     esi, eax
.text:000000000000674D                 mov     eax, edi
.text:000000000000674F                 imul    esi, 3Ch ; '<'
.text:0000000000006752                 imul    edi, 3Ch ; '<'
.text:0000000000006755                 sub     eax, esi
.text:0000000000006757                 sub     ecx, edi
.text:0000000000006759                 cmp     r8, 1
.text:000000000000675D                 mov     esi, eax
.text:000000000000675F                 jz      loc_75B2
.text:0000000000006765                 jb      loc_7690
.text:000000000000676B                 cmp     r8, 2
.text:000000000000676F                 jz      loc_7565
.text:0000000000006775                 cmp     r8, 3
.text:0000000000006779                 jnz     loc_763F
.text:000000000000677F                 test    ecx, ecx
.text:0000000000006781                 jnz     loc_7565
.text:0000000000006787                 test    eax, eax
.text:0000000000006789                 jnz     loc_75B2
.text:000000000000678F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006794                 mov     ecx, r12d
.text:0000000000006797                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000679C                 mov     edi, 3
.text:00000000000067A1                 xor     eax, 1
.text:00000000000067A4                 jmp     loc_6227
.text:00000000000067A4 ; ---------------------------------------------------------------------------
.text:00000000000067A9                 align 10h
.text:00000000000067B0
.text:00000000000067B0 loc_67B0:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000067B0                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:00000000000067B0                 cmp     r11d, 4Fh ; 'O' ; jumptable 0000000000005EBF case 113
.text:00000000000067B4                 mov     eax, [r13+10h]
.text:00000000000067B8                 mov     edi, 1
.text:00000000000067BD                 jz      loc_623C
.text:00000000000067C3                 lea     edx, [rax+rax*4]
.text:00000000000067C6                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:00000000000067CB                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000067D0                 xor     esi, esi
.text:00000000000067D2                 lea     ecx, [rax+rdx*2]
.text:00000000000067D5                 sar     ecx, 5
.text:00000000000067D8                 add     ecx, 1
.text:00000000000067DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000067E0
.text:00000000000067E0 loc_67E0:                               ; CODE XREF: __strftime_internal+140C↓j
.text:00000000000067E0                 lea     r9, [rsp+4F8h+s]
.text:00000000000067E8                 mov     r12d, 0CCCCCCCDh
.text:00000000000067EE                 lea     r11, [r9+17h]
.text:00000000000067F2                 nop     word ptr [rax+rax+00h]
.text:00000000000067F8
.text:00000000000067F8 loc_67F8:                               ; CODE XREF: __strftime_internal+B82↓j
.text:00000000000067F8                 test    sil, 1
.text:00000000000067FC                 lea     r8, [r11-1]
.text:0000000000006800                 jz      short loc_6811
.text:0000000000006802                 lea     rax, [r11-2]
.text:0000000000006806                 mov     byte ptr [r11-1], 3Ah ; ':'
.text:000000000000680B                 mov     r11, r8
.text:000000000000680E                 mov     r8, rax
.text:0000000000006811
.text:0000000000006811 loc_6811:                               ; CODE XREF: __strftime_internal+B50↑j
.text:0000000000006811                 mov     eax, ecx
.text:0000000000006813                 sar     esi, 1
.text:0000000000006815                 mul     r12d
.text:0000000000006818                 shr     edx, 3
.text:000000000000681B                 lea     eax, [rdx+rdx*4]
.text:000000000000681E                 add     eax, eax
.text:0000000000006820                 sub     ecx, eax
.text:0000000000006822                 mov     eax, esi
.text:0000000000006824                 add     ecx, 30h ; '0'
.text:0000000000006827                 or      eax, edx
.text:0000000000006829                 mov     [r11-1], cl
.text:000000000000682D                 mov     ecx, edx
.text:000000000000682F                 mov     r11, r8
.text:0000000000006832                 jnz     short loc_67F8
.text:0000000000006834                 cmp     r10d, edi
.text:0000000000006837                 cmovge  edi, r10d
.text:000000000000683B                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000006840                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:0000000000006844                 jnz     loc_70C8
.text:000000000000684A                 cmp     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000684F                 jz      loc_6AE9
.text:0000000000006855                 cmp     r15d, 2Dh ; '-'
.text:0000000000006859                 jz      loc_7383
.text:000000000000685F                 mov     byte ptr [rsp+4F8h+var_4C0], 2Bh ; '+'
.text:0000000000006864
.text:0000000000006864 loc_6864:                               ; CODE XREF: __strftime_internal+1421↓j
.text:0000000000006864                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006868                 lea     rcx, [r9+17h]
.text:000000000000686C                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006871                 sub     rcx, r8
.text:0000000000006874                 lea     r12d, [rax-1]
.text:0000000000006878                 sub     rdx, r14
.text:000000000000687B                 sub     r12d, ecx
.text:000000000000687E                 test    r12d, r12d
.text:0000000000006881                 jle     loc_72CC
.text:0000000000006887                 cmp     r15d, 5Fh ; '_'
.text:000000000000688B                 jz      loc_7246
.text:0000000000006891                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006896                 cmp     rax, rdx
.text:0000000000006899                 mov     rdi, rax
.text:000000000000689C                 jnb     loc_5D7C
.text:00000000000068A2                 test    r10d, r10d
.text:00000000000068A5                 mov     eax, 0
.text:00000000000068AA                 mov     esi, 1
.text:00000000000068AF                 cmovns  eax, r10d
.text:00000000000068B3                 cdqe
.text:00000000000068B5                 test    rax, rax
.text:00000000000068B8                 cmovnz  rsi, rax
.text:00000000000068BC                 cmp     rsi, rdx
.text:00000000000068BF                 jnb     loc_5D7C
.text:00000000000068C5                 add     r14, rsi
.text:00000000000068C8                 test    rbp, rbp
.text:00000000000068CB                 movsxd  r9, r12d
.text:00000000000068CE                 mov     r12, rbx
.text:00000000000068D1                 jz      loc_6974
.text:00000000000068D7                 test    edi, edi
.text:00000000000068D9                 jnz     short loc_692F
.text:00000000000068DB                 cmp     rax, 1
.text:00000000000068DF                 jbe     short loc_692F
.text:00000000000068E1                 movsxd  rdx, r10d
.text:00000000000068E4                 mov     [rsp+4F8h+var_4A0], r8
.text:00000000000068E9                 mov     [rsp+4F8h+var_4A8], r9
.text:00000000000068EE                 sub     rdx, 1          ; n
.text:00000000000068F2                 cmp     r15d, 30h ; '0'
.text:00000000000068F6                 mov     [rsp+4F8h+var_4B8], rcx
.text:00000000000068FB                 lea     r12, [rbp+rdx+0]
.text:0000000000006900                 jz      loc_76D1
.text:0000000000006906                 cmp     r15d, 2Bh ; '+'
.text:000000000000690A                 jz      loc_76D1
.text:0000000000006910                 mov     rdi, rbp        ; s
.text:0000000000006913                 mov     esi, 20h ; ' '  ; c
.text:0000000000006918                 mov     rbp, r12
.text:000000000000691B                 call    _memset
.text:0000000000006920                 mov     r8, [rsp+4F8h+var_4A0]
.text:0000000000006925                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000692A                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000692F
.text:000000000000692F loc_692F:                               ; CODE XREF: __strftime_internal+C29↑j
.text:000000000000692F                                         ; __strftime_internal+C2F↑j ...
.text:000000000000692F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006934                 add     rbp, 1
.text:0000000000006938                 mov     r12, rbx
.text:000000000000693B                 mov     [rbp-1], al
.text:000000000000693E
.text:000000000000693E loc_693E:                               ; CODE XREF: __strftime_internal+1807↓j
.text:000000000000693E                 test    rbp, rbp
.text:0000000000006941                 jz      short loc_6974
.text:0000000000006943                 mov     rdx, r9         ; n
.text:0000000000006946                 mov     rdi, rbp        ; s
.text:0000000000006949                 mov     esi, 30h ; '0'  ; c
.text:000000000000694E                 mov     [rsp+4F8h+var_4A8], r8
.text:0000000000006953                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000006958                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:000000000000695D                 call    _memset
.text:0000000000006962                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006967                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000696C                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000006971                 add     rbp, r9
.text:0000000000006974
.text:0000000000006974 loc_6974:                               ; CODE XREF: __strftime_internal+C21↑j
.text:0000000000006974                                         ; __strftime_internal+C91↑j
.text:0000000000006974                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006979                 add     r14, r9
.text:000000000000697C                 xor     r11d, r11d
.text:000000000000697F                 xor     r10d, r10d
.text:0000000000006982                 sub     rdx, r14
.text:0000000000006985
.text:0000000000006985 loc_6985:                               ; CODE XREF: __strftime_internal+E72↓j
.text:0000000000006985                                         ; __strftime_internal+14D7↓j ...
.text:0000000000006985                 cmp     rcx, r11
.text:0000000000006988                 mov     rbx, r11
.text:000000000000698B                 cmovnb  rbx, rcx
.text:000000000000698F                 cmp     rbx, rdx
.text:0000000000006992                 jnb     loc_5D7C
.text:0000000000006998                 test    rbp, rbp
.text:000000000000699B                 jz      loc_61AE
.text:00000000000069A1                 mov     esi, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000069A5                 test    esi, esi
.text:00000000000069A7                 jnz     short loc_69F8
.text:00000000000069A9                 cmp     rcx, r11
.text:00000000000069AC                 jnb     short loc_69F8
.text:00000000000069AE                 movsxd  rdx, r10d
.text:00000000000069B1                 mov     [rsp+4F8h+var_4B0], r8
.text:00000000000069B6                 mov     [rsp+4F8h+var_4B8], rcx
.text:00000000000069BB                 sub     rdx, rcx        ; n
.text:00000000000069BE                 cmp     r15d, 30h ; '0'
.text:00000000000069C2                 lea     rax, [rbp+rdx+0]
.text:00000000000069C7                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:00000000000069CC                 jz      loc_720A
.text:00000000000069D2                 cmp     r15d, 2Bh ; '+'
.text:00000000000069D6                 jz      loc_720A
.text:00000000000069DC                 mov     rdi, rbp        ; s
.text:00000000000069DF                 mov     esi, 20h ; ' '  ; c
.text:00000000000069E4                 call    _memset
.text:00000000000069E9                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000069EE                 mov     r8, [rsp+4F8h+var_4B0]
.text:00000000000069F3                 mov     rcx, [rsp+4F8h+var_4B8]
.text:00000000000069F8
.text:00000000000069F8 loc_69F8:                               ; CODE XREF: __strftime_internal+CF7↑j
.text:00000000000069F8                                         ; __strftime_internal+CFC↑j ...
.text:00000000000069F8                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:00000000000069FD                 mov     rdx, rcx        ; n
.text:0000000000006A00                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000006A05                 mov     rsi, r8         ; src
.text:0000000000006A08                 mov     rdi, rbp        ; dest
.text:0000000000006A0B                 jnz     loc_61A1
.text:0000000000006A11
.text:0000000000006A11 loc_6A11:                               ; CODE XREF: __strftime_internal+4EB↑j
.text:0000000000006A11                 call    _memcpy
.text:0000000000006A16                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000006A1B                 jmp     loc_61AB
.text:0000000000006A20 ; ---------------------------------------------------------------------------
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006A20                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006A20                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 0000000000005EBF case 115
.text:0000000000006A26                 lea     rsi, [rsp+4F8h+var_488]
.text:0000000000006A2B                 mov     rax, [r13+30h]
.text:0000000000006A2F                 mov     rdi, [rsp+4F8h+var_4E8]
.text:0000000000006A34                 movaps  [rsp+4F8h+var_488], xmm0
.text:0000000000006A39                 mov     [rsp+4F8h+var_4C0], r10d
.text:0000000000006A3E                 movdqu  xmm0, xmmword ptr [r13+10h]
.text:0000000000006A44                 mov     [rsp+4F8h+var_458], rax
.text:0000000000006A4C                 movaps  [rsp+4F8h+var_478], xmm0
.text:0000000000006A54                 movdqu  xmm0, xmmword ptr [r13+20h]
.text:0000000000006A5A                 movaps  [rsp+4F8h+var_468], xmm0
.text:0000000000006A62                 call    mktime_z
.text:0000000000006A67                 lea     r9, [rsp+4F8h+s]
.text:0000000000006A6F                 mov     rsi, rax
.text:0000000000006A72                 mov     rcx, rax
.text:0000000000006A75                 mov     r11, 6666666666666667h
.text:0000000000006A7F                 mov     edi, 30h ; '0'
.text:0000000000006A84                 mov     r10d, [rsp+4F8h+var_4C0]
.text:0000000000006A89                 lea     r8, [r9+17h]
.text:0000000000006A8D                 nop     dword ptr [rax]
.text:0000000000006A90
.text:0000000000006A90 loc_6A90:                               ; CODE XREF: __strftime_internal+E1E↓j
.text:0000000000006A90                 mov     rax, rcx
.text:0000000000006A93                 imul    r11
.text:0000000000006A96                 mov     rax, rcx
.text:0000000000006A99                 sar     rax, 3Fh
.text:0000000000006A9D                 sar     rdx, 2
.text:0000000000006AA1                 sub     rdx, rax
.text:0000000000006AA4                 mov     rax, rdx
.text:0000000000006AA7                 lea     rdx, [rdx+rdx*4]
.text:0000000000006AAB                 add     rdx, rdx
.text:0000000000006AAE                 sub     rcx, rdx
.text:0000000000006AB1                 mov     rdx, rcx
.text:0000000000006AB4                 mov     rcx, rax
.text:0000000000006AB7                 mov     eax, edi
.text:0000000000006AB9                 sub     eax, edx
.text:0000000000006ABB                 add     edx, 30h ; '0'
.text:0000000000006ABE                 test    rsi, rsi
.text:0000000000006AC1                 cmovs   edx, eax
.text:0000000000006AC4                 sub     r8, 1
.text:0000000000006AC8                 test    rcx, rcx
.text:0000000000006ACB                 mov     [r8], dl
.text:0000000000006ACE                 jnz     short loc_6A90
.text:0000000000006AD0                 test    r10d, r10d
.text:0000000000006AD3                 mov     edi, 1
.text:0000000000006AD8                 cmovg   edi, r10d
.text:0000000000006ADC                 test    rsi, rsi
.text:0000000000006ADF                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:0000000000006AE3                 js      loc_70C8
.text:0000000000006AE9
.text:0000000000006AE9 loc_6AE9:                               ; CODE XREF: __strftime_internal+B9F↑j
.text:0000000000006AE9                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006AEE                 lea     rcx, [r9+17h]
.text:0000000000006AF2                 sub     rcx, r8
.text:0000000000006AF5                 sub     rdx, r14
.text:0000000000006AF8                 cmp     r15d, 2Dh ; '-'
.text:0000000000006AFC                 jz      short loc_6B0F
.text:0000000000006AFE                 mov     r12d, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006B03                 sub     r12d, ecx
.text:0000000000006B06                 test    r12d, r12d
.text:0000000000006B09                 jg      loc_7499
.text:0000000000006B0F
.text:0000000000006B0F loc_6B0F:                               ; CODE XREF: __strftime_internal+E4C↑j
.text:0000000000006B0F                 test    r10d, r10d
.text:0000000000006B12                 mov     r11d, 0
.text:0000000000006B18                 mov     r12, rbx
.text:0000000000006B1B                 cmovns  r11d, r10d
.text:0000000000006B1F                 movsxd  r11, r11d
.text:0000000000006B22                 jmp     loc_6985
.text:0000000000006B27 ; ---------------------------------------------------------------------------
.text:0000000000006B27
.text:0000000000006B27 loc_6B27:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006B27                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006B27                 movzx   eax, byte ptr [rbx+1] ; jumptable 0000000000005EBF case 58
.text:0000000000006B2B                 lea     rdx, [rbx+1]
.text:0000000000006B2F                 cmp     al, 3Ah ; ':'
.text:0000000000006B31                 jz      loc_764A
.text:0000000000006B37                 mov     r8d, 1
.text:0000000000006B3D
.text:0000000000006B3D loc_6B3D:                               ; CODE XREF: __strftime_internal+19B5↓j
.text:0000000000006B3D                 cmp     al, 7Ah ; 'z'
.text:0000000000006B3F                 jnz     def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006B45                 mov     rbx, rdx
.text:0000000000006B48                 jmp     loc_66DF
.text:0000000000006B4D ; ---------------------------------------------------------------------------
.text:0000000000006B4D
.text:0000000000006B4D loc_6B4D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006B4D                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006B4D                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF cases 71,86,103
.text:0000000000006B51                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006B57                 mov     edi, [r13+14h]
.text:0000000000006B5B                 mov     r8d, [r13+1Ch]
.text:0000000000006B5F                 mov     edx, 92492493h
.text:0000000000006B64                 mov     eax, edi
.text:0000000000006B66                 mov     ecx, r8d
.text:0000000000006B69                 sar     eax, 1Fh
.text:0000000000006B6C                 and     eax, 190h
.text:0000000000006B71                 lea     r12d, [rdi+rax-64h]
.text:0000000000006B76                 mov     eax, [r13+18h]
.text:0000000000006B7A                 sub     ecx, eax
.text:0000000000006B7C                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000006B80                 add     ecx, 17Eh
.text:0000000000006B86                 mov     eax, ecx
.text:0000000000006B88                 imul    edx
.text:0000000000006B8A                 lea     eax, [rdx+rcx]
.text:0000000000006B8D                 mov     edx, ecx
.text:0000000000006B8F                 sar     edx, 1Fh
.text:0000000000006B92                 sar     eax, 2
.text:0000000000006B95                 sub     eax, edx
.text:0000000000006B97                 lea     edx, ds:0[rax*8]
.text:0000000000006B9E                 sub     edx, eax
.text:0000000000006BA0                 mov     eax, edx
.text:0000000000006BA2                 mov     edx, r8d
.text:0000000000006BA5                 sub     edx, ecx
.text:0000000000006BA7                 lea     eax, [rdx+rax+3]
.text:0000000000006BAB                 test    eax, eax
.text:0000000000006BAD                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:0000000000006BB1                 js      loc_74D8
.text:0000000000006BB7                 test    r12b, 3
.text:0000000000006BBB                 mov     eax, 16Dh
.text:0000000000006BC0                 jnz     short loc_6C07
.text:0000000000006BC2                 mov     ecx, 51EB851Fh
.text:0000000000006BC7                 mov     eax, r12d
.text:0000000000006BCA                 imul    ecx
.text:0000000000006BCC                 mov     eax, r12d
.text:0000000000006BCF                 sar     eax, 1Fh
.text:0000000000006BD2                 mov     dword ptr [rsp+4F8h+var_4B0], eax
.text:0000000000006BD6                 mov     ecx, edx
.text:0000000000006BD8                 sar     edx, 5
.text:0000000000006BDB                 sub     edx, eax
.text:0000000000006BDD                 mov     eax, 16Eh
.text:0000000000006BE2                 imul    edx, 64h ; 'd'
.text:0000000000006BE5                 cmp     r12d, edx
.text:0000000000006BE8                 jnz     short loc_6C07
.text:0000000000006BEA                 sar     ecx, 7
.text:0000000000006BED                 mov     eax, ecx
.text:0000000000006BEF                 sub     eax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006BF3                 imul    eax, 190h
.text:0000000000006BF9                 cmp     r12d, eax
.text:0000000000006BFC                 setz    al
.text:0000000000006BFF                 movzx   eax, al
.text:0000000000006C02                 add     eax, 16Dh
.text:0000000000006C07
.text:0000000000006C07 loc_6C07:                               ; CODE XREF: __strftime_internal+F10↑j
.text:0000000000006C07                                         ; __strftime_internal+F38↑j
.text:0000000000006C07                 sub     r8d, eax
.text:0000000000006C0A                 mov     edx, 92492493h
.text:0000000000006C0F                 mov     ecx, r8d
.text:0000000000006C12                 sub     ecx, [rsp+4F8h+var_4C0]
.text:0000000000006C16                 add     ecx, 17Eh
.text:0000000000006C1C                 mov     eax, ecx
.text:0000000000006C1E                 sub     r8d, ecx
.text:0000000000006C21                 imul    edx
.text:0000000000006C23                 lea     eax, [rdx+rcx]
.text:0000000000006C26                 mov     edx, ecx
.text:0000000000006C28                 sar     edx, 1Fh
.text:0000000000006C2B                 sar     eax, 2
.text:0000000000006C2E                 sub     eax, edx
.text:0000000000006C30                 lea     edx, ds:0[rax*8]
.text:0000000000006C37                 sub     edx, eax
.text:0000000000006C39                 lea     ecx, [r8+rdx+3]
.text:0000000000006C3E                 mov     r8d, 1
.text:0000000000006C44                 test    ecx, ecx
.text:0000000000006C46                 jns     short loc_6C4F
.text:0000000000006C48                 mov     ecx, dword ptr [rsp+4F8h+var_4B8]
.text:0000000000006C4C                 xor     r8d, r8d
.text:0000000000006C4F
.text:0000000000006C4F loc_6C4F:                               ; CODE XREF: __strftime_internal+F96↑j
.text:0000000000006C4F                                         ; __strftime_internal+18B0↓j
.text:0000000000006C4F                 cmp     sil, 47h ; 'G'
.text:0000000000006C53                 jz      loc_7396
.text:0000000000006C59                 cmp     sil, 67h ; 'g'
.text:0000000000006C5D                 jnz     loc_758F
.text:0000000000006C63                 mov     ecx, 51EB851Fh
.text:0000000000006C68                 mov     eax, edi
.text:0000000000006C6A                 mov     esi, edi
.text:0000000000006C6C                 imul    ecx
.text:0000000000006C6E                 mov     eax, edx
.text:0000000000006C70                 mov     edx, edi
.text:0000000000006C72                 sar     edx, 1Fh
.text:0000000000006C75                 sar     eax, 5
.text:0000000000006C78                 sub     eax, edx
.text:0000000000006C7A                 imul    eax, 64h ; 'd'
.text:0000000000006C7D                 sub     esi, eax
.text:0000000000006C7F                 add     esi, r8d
.text:0000000000006C82                 mov     eax, esi
.text:0000000000006C84                 imul    ecx
.text:0000000000006C86                 mov     eax, esi
.text:0000000000006C88                 sar     eax, 1Fh
.text:0000000000006C8B                 mov     ecx, edx
.text:0000000000006C8D                 sar     ecx, 5
.text:0000000000006C90                 sub     ecx, eax
.text:0000000000006C92                 imul    ecx, 64h ; 'd'
.text:0000000000006C95                 sub     esi, ecx
.text:0000000000006C97                 mov     ecx, esi
.text:0000000000006C99                 jns     loc_6689
.text:0000000000006C9F                 mov     eax, 0FFFFF894h
.text:0000000000006CA4                 sub     eax, r8d
.text:0000000000006CA7                 cmp     edi, eax
.text:0000000000006CA9                 jge     loc_774A
.text:0000000000006CAF                 neg     ecx
.text:0000000000006CB1                 test    r15d, r15d
.text:0000000000006CB4                 jnz     loc_6692
.text:0000000000006CBA
.text:0000000000006CBA loc_6CBA:                               ; CODE XREF: __strftime_internal+9DC↑j
.text:0000000000006CBA                                         ; __strftime_internal+1AA0↓j
.text:0000000000006CBA                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000006CBF                 mov     eax, 1
.text:0000000000006CC4                 cmp     r15d, 2Bh ; '+'
.text:0000000000006CC8                 jz      loc_772A
.text:0000000000006CCE                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006CD3                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000006CD8                 mov     edi, 2
.text:0000000000006CDD                 xor     esi, esi
.text:0000000000006CDF                 jmp     loc_6227
.text:0000000000006CE4 ; ---------------------------------------------------------------------------
.text:0000000000006CE4
.text:0000000000006CE4 loc_6CE4:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006CE4                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006CE4                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 100
.text:0000000000006CE8                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006CEE                 mov     ecx, [r13+0Ch]
.text:0000000000006CF2                 mov     edi, 2
.text:0000000000006CF7                 jmp     loc_6210
.text:0000000000006CFC ; ---------------------------------------------------------------------------
.text:0000000000006CFC
.text:0000000000006CFC loc_6CFC:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006CFC                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006CFC                 mov     eax, [r13+18h]  ; jumptable 0000000000005EBF case 117
.text:0000000000006D00                 mov     edx, 92492493h
.text:0000000000006D05                 mov     edi, 1
.text:0000000000006D0A                 lea     ecx, [rax+6]
.text:0000000000006D0D                 mov     eax, ecx
.text:0000000000006D0F                 imul    edx
.text:0000000000006D11                 lea     eax, [rdx+rcx]
.text:0000000000006D14                 mov     edx, ecx
.text:0000000000006D16                 sar     edx, 1Fh
.text:0000000000006D19                 sar     eax, 2
.text:0000000000006D1C                 sub     eax, edx
.text:0000000000006D1E                 lea     edx, ds:0[rax*8]
.text:0000000000006D25                 sub     edx, eax
.text:0000000000006D27                 sub     ecx, edx
.text:0000000000006D29                 add     ecx, 1
.text:0000000000006D2C                 jmp     loc_6210
.text:0000000000006D31 ; ---------------------------------------------------------------------------
.text:0000000000006D31
.text:0000000000006D31 loc_6D31:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006D31                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006D31                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 119
.text:0000000000006D35                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006D3B                 mov     ecx, [r13+18h]
.text:0000000000006D3F                 mov     edi, 1
.text:0000000000006D44                 jmp     loc_6210
.text:0000000000006D49 ; ---------------------------------------------------------------------------
.text:0000000000006D49
.text:0000000000006D49 loc_6D49:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006D49                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006D49                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 87
.text:0000000000006D4D                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006D53                 mov     eax, [r13+18h]
.text:0000000000006D57                 mov     ecx, 92492493h
.text:0000000000006D5C                 lea     esi, [rax+6]
.text:0000000000006D5F                 mov     eax, esi
.text:0000000000006D61                 imul    ecx
.text:0000000000006D63                 lea     eax, [rdx+rsi]
.text:0000000000006D66                 mov     edx, esi
.text:0000000000006D68                 sar     edx, 1Fh
.text:0000000000006D6B                 sar     eax, 2
.text:0000000000006D6E                 sub     eax, edx
.text:0000000000006D70                 lea     edx, ds:0[rax*8]
.text:0000000000006D77                 sub     edx, eax
.text:0000000000006D79                 mov     eax, edx
.text:0000000000006D7B                 mov     edx, [r13+1Ch]
.text:0000000000006D7F                 sub     eax, esi
.text:0000000000006D81                 lea     esi, [rax+rdx+7]
.text:0000000000006D85                 mov     eax, esi
.text:0000000000006D87                 imul    ecx
.text:0000000000006D89                 jmp     loc_64F2
.text:0000000000006D8E ; ---------------------------------------------------------------------------
.text:0000000000006D8E
.text:0000000000006D8E loc_6D8E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006D8E                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006D8E                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 66
.text:0000000000006D92                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006D98                 test    r8b, r8b
.text:0000000000006D9B                 jz      loc_6075
.text:0000000000006DA1                 mov     byte ptr [rsp+4F8h+var_4C8], r8b
.text:0000000000006DA6                 jmp     loc_6072        ; jumptable 0000000000005EBF case 114
.text:0000000000006DAB ; ---------------------------------------------------------------------------
.text:0000000000006DAB
.text:0000000000006DAB loc_6DAB:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006DAB                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006DAB                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 67
.text:0000000000006DAF                 jz      loc_723A
.text:0000000000006DB5                 mov     esi, [r13+14h]
.text:0000000000006DB9                 mov     edx, 51EB851Fh
.text:0000000000006DBE                 mov     eax, esi
.text:0000000000006DC0                 imul    edx
.text:0000000000006DC2                 mov     eax, edx
.text:0000000000006DC4                 mov     edx, esi
.text:0000000000006DC6                 sar     edx, 1Fh
.text:0000000000006DC9                 sar     eax, 5
.text:0000000000006DCC                 sub     eax, edx
.text:0000000000006DCE                 mov     edx, esi
.text:0000000000006DD0                 lea     ecx, [rax+13h]
.text:0000000000006DD3                 imul    eax, 64h ; 'd'
.text:0000000000006DD6                 sub     edx, eax
.text:0000000000006DD8                 mov     eax, edx
.text:0000000000006DDA                 shr     eax, 1Fh
.text:0000000000006DDD                 test    ecx, ecx
.text:0000000000006DDF                 setnle  dl
.text:0000000000006DE2                 and     eax, edx
.text:0000000000006DE4                 cmp     esi, 0FFFFF894h
.text:0000000000006DEA                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006DEF                 sub     ecx, eax
.text:0000000000006DF1                 cmp     esi, 0FFFFF894h
.text:0000000000006DF7                 setnl   al
.text:0000000000006DFA                 test    r15d, r15d
.text:0000000000006DFD                 jnz     loc_669C
.text:0000000000006E03                 cmp     [rsp+4F8h+var_4CC], 2Bh ; '+'
.text:0000000000006E08                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000006E0D                 jnz     loc_66A6
.text:0000000000006E13
.text:0000000000006E13 loc_6E13:                               ; CODE XREF: __strftime_internal+9F0↑j
.text:0000000000006E13                 mov     edi, 2
.text:0000000000006E18                 mov     edx, 63h ; 'c'
.text:0000000000006E1D
.text:0000000000006E1D loc_6E1D:                               ; CODE XREF: __strftime_internal+171D↓j
.text:0000000000006E1D                 cmp     edx, ecx
.text:0000000000006E1F                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:0000000000006E24                 mov     r15d, 2Bh ; '+'
.text:0000000000006E2A                 jb      loc_6559
.text:0000000000006E30
.text:0000000000006E30 loc_6E30:                               ; CODE XREF: __strftime_internal+1A84↓j
.text:0000000000006E30                 cmp     r10d, edi
.text:0000000000006E33                 mov     r15d, 2Bh ; '+'
.text:0000000000006E39                 setnle  byte ptr [rsp+4F8h+var_4B8]
.text:0000000000006E3E                 xor     esi, esi
.text:0000000000006E40                 jmp     loc_6227
.text:0000000000006E45 ; ---------------------------------------------------------------------------
.text:0000000000006E45
.text:0000000000006E45 loc_6E45:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006E45                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006E45                 test    r11d, r11d      ; jumptable 0000000000005EBF case 68
.text:0000000000006E48                 jnz     def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006E4E                 lea     rax, aMDY       ; "%m/%d/%y"
.text:0000000000006E55                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:0000000000006E5D                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000006E62                 jmp     loc_6322
.text:0000000000006E67 ; ---------------------------------------------------------------------------
.text:0000000000006E67
.text:0000000000006E67 loc_6E67:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006E67                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006E67                 test    r11d, r11d      ; jumptable 0000000000005EBF case 70
.text:0000000000006E6A                 jnz     def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006E70                 test    r15d, r15d
.text:0000000000006E73                 jnz     loc_766D
.text:0000000000006E79                 test    r10d, r10d
.text:0000000000006E7C                 jns     loc_766D
.text:0000000000006E82                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000006E89                 mov     [rsp+4F8h+var_4C0], 4
.text:0000000000006E91                 mov     r15d, 2Bh ; '+'
.text:0000000000006E97                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000006E9C                 jmp     loc_6322
.text:0000000000006EA1 ; ---------------------------------------------------------------------------
.text:0000000000006EA1
.text:0000000000006EA1 loc_6EA1:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006EA1                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006EA1                 movzx   ecx, byte ptr [rbx-1] ; jumptable 0000000000005EBF case 0
.text:0000000000006EA5                 lea     r9, [rbx-1]
.text:0000000000006EA9
.text:0000000000006EA9 loc_6EA9:                               ; CODE XREF: __strftime_internal+1995↓j
.text:0000000000006EA9                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006EAE                 mov     eax, 0
.text:0000000000006EB3                 sub     rdx, r14
.text:0000000000006EB6                 test    r10d, r10d
.text:0000000000006EB9                 cmovns  eax, r10d
.text:0000000000006EBD                 cmp     cl, 25h ; '%'
.text:0000000000006EC0                 cdqe
.text:0000000000006EC2                 jnz     loc_5EFB
.text:0000000000006EC8                 test    rax, rax
.text:0000000000006ECB                 mov     ecx, 1
.text:0000000000006ED0                 mov     r12, r9
.text:0000000000006ED3                 cmovnz  rcx, rax
.text:0000000000006ED7                 mov     r8d, 1
.text:0000000000006EDD                 jmp     loc_5F41
.text:0000000000006EE2 ; ---------------------------------------------------------------------------
.text:0000000000006EE2
.text:0000000000006EE2 loc_6EE2:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006EE2                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006EE2                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 72
.text:0000000000006EE6                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006EEC                 mov     ecx, [r13+8]
.text:0000000000006EF0                 mov     edi, 2
.text:0000000000006EF5                 jmp     loc_6210
.text:0000000000006EFA ; ---------------------------------------------------------------------------
.text:0000000000006EFA
.text:0000000000006EFA loc_6EFA:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006EFA                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006EFA                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 77
.text:0000000000006EFE                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F04                 mov     ecx, [r13+4]
.text:0000000000006F08                 mov     edi, 2
.text:0000000000006F0D                 jmp     loc_6210
.text:0000000000006F12 ; ---------------------------------------------------------------------------
.text:0000000000006F12
.text:0000000000006F12 loc_6F12:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F12                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006F12                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 78
.text:0000000000006F16                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F1C                 cmp     r10d, 0FFFFFFFFh
.text:0000000000006F20                 jz      loc_7471
.text:0000000000006F26                 cmp     r10d, 8
.text:0000000000006F2A                 jg      loc_7739
.text:0000000000006F30                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000006F37                 mov     esi, r10d
.text:0000000000006F3A                 mov     edi, 66666667h
.text:0000000000006F3F                 nop
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: __strftime_internal+12A4↓j
.text:0000000000006F40                 mov     eax, ecx
.text:0000000000006F42                 add     esi, 1
.text:0000000000006F45                 sar     ecx, 1Fh
.text:0000000000006F48                 imul    edi
.text:0000000000006F4A                 sar     edx, 2
.text:0000000000006F4D                 sub     edx, ecx
.text:0000000000006F4F                 cmp     esi, 9
.text:0000000000006F52                 mov     ecx, edx
.text:0000000000006F54                 jnz     short loc_6F40
.text:0000000000006F56
.text:0000000000006F56 loc_6F56:                               ; CODE XREF: __strftime_internal+1A90↓j
.text:0000000000006F56                 mov     edi, r10d
.text:0000000000006F59                 jmp     loc_6210
.text:0000000000006F5E ; ---------------------------------------------------------------------------
.text:0000000000006F5E
.text:0000000000006F5E loc_6F5E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F5E                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006F5E                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 73
.text:0000000000006F62                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F68                 mov     ecx, [rsp+4F8h+var_490]
.text:0000000000006F6C                 mov     edi, 2
.text:0000000000006F71                 jmp     loc_6210
.text:0000000000006F76 ; ---------------------------------------------------------------------------
.text:0000000000006F76
.text:0000000000006F76 loc_6F76:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F76                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006F76                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 108
.text:0000000000006F7A                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F80                 mov     ecx, [rsp+4F8h+var_490]
.text:0000000000006F84
.text:0000000000006F84 loc_6F84:                               ; CODE XREF: __strftime_internal+13E4↓j
.text:0000000000006F84                                         ; __strftime_internal+13F7↓j
.text:0000000000006F84                 test    r15d, r15d
.text:0000000000006F87                 mov     edi, 2
.text:0000000000006F8C                 jnz     loc_6210
.text:0000000000006F92                 mov     r15d, 5Fh ; '_'
.text:0000000000006F98                 jmp     loc_6210
.text:0000000000006F9D ; ---------------------------------------------------------------------------
.text:0000000000006F9D
.text:0000000000006F9D loc_6F9D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F9D                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006F9D                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 109
.text:0000000000006FA1                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006FA7                 mov     eax, [r13+10h]
.text:0000000000006FAB                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006FB0                 mov     edi, 2
.text:0000000000006FB5                 cmp     eax, 0FFFFFFFFh
.text:0000000000006FB8                 lea     ecx, [rax+1]
.text:0000000000006FBB                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006FC0                 cmp     eax, 0FFFFFFFFh
.text:0000000000006FC3                 setnl   al
.text:0000000000006FC6                 xor     esi, esi
.text:0000000000006FC8                 jmp     loc_6227
.text:0000000000006FCD ; ---------------------------------------------------------------------------
.text:0000000000006FCD
.text:0000000000006FCD loc_6FCD:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006FCD                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000006FCD                 test    r10d, r10d      ; jumptable 0000000000005EBF case 110
.text:0000000000006FD0                 mov     ecx, 0
.text:0000000000006FD5                 mov     eax, 1
.text:0000000000006FDA                 cmovns  ecx, r10d
.text:0000000000006FDE                 movsxd  rcx, ecx
.text:0000000000006FE1                 test    rcx, rcx
.text:0000000000006FE4                 cmovz   rcx, rax
.text:0000000000006FE8                 mov     rax, [rsp+4F8h+var_4F0]
.text:0000000000006FED                 sub     rax, r14
.text:0000000000006FF0                 cmp     rax, rcx
.text:0000000000006FF3                 jbe     loc_5D7C
.text:0000000000006FF9                 test    rbp, rbp
.text:0000000000006FFC                 jz      loc_62E8
.text:0000000000007002                 cmp     r10d, 1
.text:0000000000007006                 jle     short loc_7042
.text:0000000000007008                 movsxd  rdx, r10d
.text:000000000000700B                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000007010                 sub     rdx, 1          ; n
.text:0000000000007014                 cmp     r15d, 30h ; '0'
.text:0000000000007018                 lea     r12, [rbp+rdx+0]
.text:000000000000701D                 jz      loc_75EE
.text:0000000000007023                 cmp     r15d, 2Bh ; '+'
.text:0000000000007027                 jz      loc_75EE
.text:000000000000702D                 mov     rdi, rbp        ; s
.text:0000000000007030                 mov     esi, 20h ; ' '  ; c
.text:0000000000007035                 mov     rbp, r12
.text:0000000000007038                 call    _memset
.text:000000000000703D                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007042
.text:0000000000007042 loc_7042:                               ; CODE XREF: __strftime_internal+1356↑j
.text:0000000000007042                                         ; __strftime_internal+1953↓j
.text:0000000000007042                 mov     byte ptr [rbp+0], 0Ah
.text:0000000000007046                 add     rbp, 1
.text:000000000000704A                 jmp     loc_62E8
.text:000000000000704F ; ---------------------------------------------------------------------------
.text:000000000000704F
.text:000000000000704F loc_704F:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000704F                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:000000000000704F                 xor     eax, eax        ; jumptable 0000000000005EBF case 112
.text:0000000000007051                 jmp     loc_62F8
.text:0000000000007056 ; ---------------------------------------------------------------------------
.text:0000000000007056
.text:0000000000007056 loc_7056:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007056                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000007056                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 106
.text:000000000000705A                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007060                 mov     eax, [r13+1Ch]
.text:0000000000007064                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000007069                 mov     edi, 3
.text:000000000000706E                 cmp     eax, 0FFFFFFFFh
.text:0000000000007071                 lea     ecx, [rax+1]
.text:0000000000007074                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007079                 cmp     eax, 0FFFFFFFFh
.text:000000000000707C                 setnl   al
.text:000000000000707F                 xor     esi, esi
.text:0000000000007081                 jmp     loc_6227
.text:0000000000007086 ; ---------------------------------------------------------------------------
.text:0000000000007086
.text:0000000000007086 loc_7086:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007086                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000007086                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 107
.text:000000000000708A                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007090                 mov     ecx, [r13+8]
.text:0000000000007094                 jmp     loc_6F84
.text:0000000000007099 ; ---------------------------------------------------------------------------
.text:0000000000007099
.text:0000000000007099 loc_7099:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007099                                         ; DATA XREF: .rodata:jpt_5EBF↓o
.text:0000000000007099                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000005EBF case 101
.text:000000000000709D                 jz      def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000070A3                 mov     ecx, [r13+0Ch]
.text:00000000000070A7                 jmp     loc_6F84
.text:00000000000070A7 ; ---------------------------------------------------------------------------
.text:00000000000070AC                 align 10h
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: __strftime_internal+57B↑j
.text:00000000000070B0                                         ; __strftime_internal+583↑j
.text:00000000000070B0                 mov     eax, ecx
.text:00000000000070B2                 neg     eax
.text:00000000000070B4                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000070B9                 cmovnz  ecx, eax
.text:00000000000070BC                 jmp     loc_67E0
.text:00000000000070BC ; ---------------------------------------------------------------------------
.text:00000000000070C1                 align 8
.text:00000000000070C8
.text:00000000000070C8 loc_70C8:                               ; CODE XREF: __strftime_internal+B94↑j
.text:00000000000070C8                                         ; __strftime_internal+E33↑j
.text:00000000000070C8                 cmp     r15d, 2Dh ; '-'
.text:00000000000070CC                 mov     byte ptr [rsp+4F8h+var_4C0], 2Dh ; '-'
.text:00000000000070D1                 jnz     loc_6864
.text:00000000000070D7
.text:00000000000070D7 loc_70D7:                               ; CODE XREF: __strftime_internal+16D9↓j
.text:00000000000070D7                 test    r10d, r10d
.text:00000000000070DA                 mov     r11d, 0
.text:00000000000070E0                 mov     rax, [rsp+4F8h+var_4F0]
.text:00000000000070E5                 cmovns  r11d, r10d
.text:00000000000070E9                 mov     r12d, 1
.text:00000000000070EF                 movsxd  r11, r11d
.text:00000000000070F2                 test    r11, r11
.text:00000000000070F5                 cmovnz  r12, r11
.text:00000000000070F9                 sub     rax, r14
.text:00000000000070FC                 cmp     rax, r12
.text:00000000000070FF                 jbe     loc_5D7C
.text:0000000000007105                 test    rbp, rbp
.text:0000000000007108                 jz      short loc_716C
.text:000000000000710A                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000710E                 test    eax, eax
.text:0000000000007110                 jnz     short loc_7164
.text:0000000000007112                 cmp     r11, 1
.text:0000000000007116                 jbe     short loc_7164
.text:0000000000007118                 movsxd  rax, r10d
.text:000000000000711B                 mov     rdi, rbp        ; s
.text:000000000000711E                 mov     esi, 20h ; ' '  ; c
.text:0000000000007123                 lea     rcx, [rax-1]
.text:0000000000007127                 mov     [rsp+4F8h+var_498], r9
.text:000000000000712C                 mov     [rsp+4F8h+var_4A0], r8
.text:0000000000007131                 mov     [rsp+4F8h+var_4A8], r11
.text:0000000000007136                 mov     dword ptr [rsp+4F8h+var_4B8], r10d
.text:000000000000713B                 mov     rdx, rcx        ; n
.text:000000000000713E                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:0000000000007143                 call    _memset
.text:0000000000007148                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000714D                 mov     r9, [rsp+4F8h+var_498]
.text:0000000000007152                 mov     r8, [rsp+4F8h+var_4A0]
.text:0000000000007157                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000715C                 mov     r10d, dword ptr [rsp+4F8h+var_4B8]
.text:0000000000007161                 add     rbp, rcx
.text:0000000000007164
.text:0000000000007164 loc_7164:                               ; CODE XREF: __strftime_internal+1460↑j
.text:0000000000007164                                         ; __strftime_internal+1466↑j
.text:0000000000007164                 mov     [rbp+0], r15b
.text:0000000000007168                 add     rbp, 1
.text:000000000000716C
.text:000000000000716C loc_716C:                               ; CODE XREF: __strftime_internal+1458↑j
.text:000000000000716C                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000007171                 lea     rcx, [r9+17h]
.text:0000000000007175                 add     r14, r12
.text:0000000000007178                 mov     r15d, 2Dh ; '-'
.text:000000000000717E                 mov     r12, rbx
.text:0000000000007181                 sub     rcx, r8
.text:0000000000007184                 sub     rdx, r14
.text:0000000000007187                 jmp     loc_6985
.text:0000000000007187 ; ---------------------------------------------------------------------------
.text:000000000000718C                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: __strftime_internal+30D↑j
.text:0000000000007190                 call    _memcpy
.text:0000000000007195                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000719A                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000000719F                 jmp     loc_5FD2
.text:000000000000719F ; ---------------------------------------------------------------------------
.text:00000000000071A4                 align 8
.text:00000000000071A8
.text:00000000000071A8 loc_71A8:                               ; CODE XREF: __strftime_internal+4D8↑j
.text:00000000000071A8                 mov     rdi, rbp
.text:00000000000071AB                 mov     [rsp+4F8h+var_4C8], rcx
.text:00000000000071B0                 call    memcpy_lowcase
.text:00000000000071B5                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000071BA                 jmp     loc_61AB
.text:00000000000071BF ; ---------------------------------------------------------------------------
.text:00000000000071BF
.text:00000000000071BF loc_71BF:                               ; CODE XREF: __strftime_internal+49C↑j
.text:00000000000071BF                                         ; __strftime_internal+4A6↑j
.text:00000000000071BF                 mov     rdi, rbp        ; s
.text:00000000000071C2                 mov     esi, 30h ; '0'  ; c
.text:00000000000071C7                 call    _memset
.text:00000000000071CC                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000071D1                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000071D7                 mov     rcx, [rsp+4F8h+var_4B0]
.text:00000000000071DC                 mov     r9, [rsp+4F8h+var_4A8]
.text:00000000000071E1                 jmp     loc_617E
.text:00000000000071E6 ; ---------------------------------------------------------------------------
.text:00000000000071E6
.text:00000000000071E6 loc_71E6:                               ; CODE XREF: __strftime_internal+2C6↑j
.text:00000000000071E6                                         ; __strftime_internal+2D0↑j
.text:00000000000071E6                 mov     rdi, rbp        ; s
.text:00000000000071E9                 mov     esi, 30h ; '0'  ; c
.text:00000000000071EE                 mov     rbp, rbx
.text:00000000000071F1                 call    _memset
.text:00000000000071F6                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000071FB                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000007200                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000007205                 jmp     loc_5FA5
.text:000000000000720A ; ---------------------------------------------------------------------------
.text:000000000000720A
.text:000000000000720A loc_720A:                               ; CODE XREF: __strftime_internal+D1C↑j
.text:000000000000720A                                         ; __strftime_internal+D26↑j
.text:000000000000720A                 mov     rdi, rbp        ; s
.text:000000000000720D                 mov     esi, 30h ; '0'  ; c
.text:0000000000007212                 call    _memset
.text:0000000000007217                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000721C                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000007221                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000007226                 jmp     loc_69F8
.text:000000000000722B ; ---------------------------------------------------------------------------
.text:000000000000722B
.text:000000000000722B loc_722B:                               ; CODE XREF: __strftime_internal+64B↑j
.text:000000000000722B                 mov     esi, 70h ; 'p'
.text:0000000000007230                 mov     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000007235                 jmp     loc_6075
.text:000000000000723A ; ---------------------------------------------------------------------------
.text:000000000000723A
.text:000000000000723A loc_723A:                               ; CODE XREF: __strftime_internal+85B↑j
.text:000000000000723A                                         ; __strftime_internal+9A1↑j ...
.text:000000000000723A                 xor     edi, edi
.text:000000000000723C                 jmp     loc_623C
.text:0000000000007241 ; ---------------------------------------------------------------------------
.text:0000000000007241
.text:0000000000007241 loc_7241:                               ; CODE XREF: __strftime_internal+17ED↓j
.text:0000000000007241                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000007246
.text:0000000000007246 loc_7246:                               ; CODE XREF: __strftime_internal+BDB↑j
.text:0000000000007246                 movsxd  r15, r12d
.text:0000000000007249                 cmp     r15, rdx
.text:000000000000724C                 jnb     loc_5D7C
.text:0000000000007252                 test    rbp, rbp
.text:0000000000007255                 jz      short loc_7288
.text:0000000000007257                 mov     rdi, rbp        ; s
.text:000000000000725A                 mov     rdx, r15        ; n
.text:000000000000725D                 mov     esi, 20h ; ' '  ; c
.text:0000000000007262                 mov     dword ptr [rsp+4F8h+var_4A0], r10d
.text:0000000000007267                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000726C                 add     rbp, r15
.text:000000000000726F                 mov     [rsp+4F8h+var_4B8], r8
.text:0000000000007274                 call    _memset
.text:0000000000007279                 mov     r10d, dword ptr [rsp+4F8h+var_4A0]
.text:000000000000727E                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000007283                 mov     r8, [rsp+4F8h+var_4B8]
.text:0000000000007288
.text:0000000000007288 loc_7288:                               ; CODE XREF: __strftime_internal+15A5↑j
.text:0000000000007288                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000728D                 mov     eax, r10d
.text:0000000000007290                 add     r14, r15
.text:0000000000007293                 sub     eax, r12d
.text:0000000000007296                 cmp     r10d, r12d
.text:0000000000007299                 mov     r10d, 0
.text:000000000000729F                 cmovg   r10d, eax
.text:00000000000072A3                 sub     rdx, r14
.text:00000000000072A6                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000072AB                 jnz     loc_73D2
.text:00000000000072B1                 add     r9, 17h
.text:00000000000072B5                 movsxd  r11, r10d
.text:00000000000072B8                 mov     r12, rbx
.text:00000000000072BB                 mov     rcx, r9
.text:00000000000072BE                 mov     r15d, 5Fh ; '_'
.text:00000000000072C4                 sub     rcx, r8
.text:00000000000072C7                 jmp     loc_6985
.text:00000000000072CC ; ---------------------------------------------------------------------------
.text:00000000000072CC
.text:00000000000072CC loc_72CC:                               ; CODE XREF: __strftime_internal+BD1↑j
.text:00000000000072CC                 test    r10d, r10d
.text:00000000000072CF                 mov     r11d, 0
.text:00000000000072D5                 mov     r12d, 1
.text:00000000000072DB                 cmovns  r11d, r10d
.text:00000000000072DF                 movsxd  r11, r11d
.text:00000000000072E2                 test    r11, r11
.text:00000000000072E5                 cmovnz  r12, r11
.text:00000000000072E9                 cmp     r12, rdx
.text:00000000000072EC                 jnb     loc_5D7C
.text:00000000000072F2                 test    rbp, rbp
.text:00000000000072F5                 jz      short loc_7370
.text:00000000000072F7                 mov     edi, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000072FB                 test    edi, edi
.text:00000000000072FD                 jnz     short loc_7364
.text:00000000000072FF                 cmp     r11, 1
.text:0000000000007303                 jbe     short loc_7364
.text:0000000000007305                 movsxd  rdx, r10d
.text:0000000000007308                 mov     [rsp+4F8h+var_48C], r10d
.text:000000000000730D                 mov     [rsp+4F8h+var_498], r8
.text:0000000000007312                 sub     rdx, 1          ; n
.text:0000000000007316                 cmp     r15d, 30h ; '0'
.text:000000000000731A                 mov     [rsp+4F8h+var_4A0], rcx
.text:000000000000731F                 lea     rax, [rbp+rdx+0]
.text:0000000000007324                 mov     [rsp+4F8h+var_4A8], r11
.text:0000000000007329                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000732E                 jz      loc_76FF
.text:0000000000007334                 cmp     r15d, 2Bh ; '+'
.text:0000000000007338                 jz      loc_76FF
.text:000000000000733E                 mov     rdi, rbp        ; s
.text:0000000000007341                 mov     esi, 20h ; ' '  ; c
.text:0000000000007346                 call    _memset
.text:000000000000734B                 mov     rbp, [rsp+4F8h+var_4B8]
.text:0000000000007350                 mov     r10d, [rsp+4F8h+var_48C]
.text:0000000000007355                 mov     r8, [rsp+4F8h+var_498]
.text:000000000000735A                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000735F                 mov     r11, [rsp+4F8h+var_4A8]
.text:0000000000007364
.text:0000000000007364 loc_7364:                               ; CODE XREF: __strftime_internal+164D↑j
.text:0000000000007364                                         ; __strftime_internal+1653↑j ...
.text:0000000000007364                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007369                 add     rbp, 1
.text:000000000000736D                 mov     [rbp-1], al
.text:0000000000007370
.text:0000000000007370 loc_7370:                               ; CODE XREF: __strftime_internal+1645↑j
.text:0000000000007370                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000007375                 add     r14, r12
.text:0000000000007378                 mov     r12, rbx
.text:000000000000737B                 sub     rdx, r14
.text:000000000000737E                 jmp     loc_6985
.text:0000000000007383 ; ---------------------------------------------------------------------------
.text:0000000000007383
.text:0000000000007383 loc_7383:                               ; CODE XREF: __strftime_internal+BA9↑j
.text:0000000000007383                 mov     r15d, 2Bh ; '+'
.text:0000000000007389                 jmp     loc_70D7
.text:000000000000738E ; ---------------------------------------------------------------------------
.text:000000000000738E
.text:000000000000738E loc_738E:                               ; CODE XREF: __strftime_internal+A35↑j
.text:000000000000738E                 mov     r12, rbx
.text:0000000000007391                 jmp     loc_5DE2
.text:0000000000007396 ; ---------------------------------------------------------------------------
.text:0000000000007396
.text:0000000000007396 loc_7396:                               ; CODE XREF: __strftime_internal+FA3↑j
.text:0000000000007396                 mov     eax, 0FFFFF894h
.text:000000000000739B                 lea     ecx, [rdi+r8+76Ch]
.text:00000000000073A3                 sub     eax, r8d
.text:00000000000073A6                 cmp     edi, eax
.text:00000000000073A8                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:00000000000073AD                 setnl   al
.text:00000000000073B0                 test    r15d, r15d
.text:00000000000073B3                 jz      loc_6540
.text:00000000000073B9
.text:00000000000073B9 loc_73B9:                               ; CODE XREF: __strftime_internal+88A↑j
.text:00000000000073B9                 cmp     r15d, 2Bh ; '+'
.text:00000000000073BD                 jnz     loc_654F
.text:00000000000073C3
.text:00000000000073C3 loc_73C3:                               ; CODE XREF: __strftime_internal+899↑j
.text:00000000000073C3                 mov     edi, 4
.text:00000000000073C8                 mov     edx, 270Fh
.text:00000000000073CD                 jmp     loc_6E1D
.text:00000000000073D2 ; ---------------------------------------------------------------------------
.text:00000000000073D2
.text:00000000000073D2 loc_73D2:                               ; CODE XREF: __strftime_internal+15FB↑j
.text:00000000000073D2                 movsxd  r15, r10d
.text:00000000000073D5                 mov     r12d, 1
.text:00000000000073DB                 test    r15, r15
.text:00000000000073DE                 cmovnz  r12, r15
.text:00000000000073E2                 cmp     r12, rdx
.text:00000000000073E5                 jnb     loc_5D7C
.text:00000000000073EB                 test    rbp, rbp
.text:00000000000073EE                 jz      short loc_744B
.text:00000000000073F0                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000073F5                 test    r11d, r11d
.text:00000000000073F8                 jnz     short loc_743F
.text:00000000000073FA                 cmp     r15, 1
.text:00000000000073FE                 jbe     short loc_743F
.text:0000000000007400                 lea     rcx, [r15-1]
.text:0000000000007404                 mov     rdi, rbp        ; s
.text:0000000000007407                 mov     esi, 20h ; ' '  ; c
.text:000000000000740C                 mov     dword ptr [rsp+4F8h+var_498], r10d
.text:0000000000007411                 mov     [rsp+4F8h+var_4A0], r9
.text:0000000000007416                 mov     rdx, rcx        ; n
.text:0000000000007419                 mov     [rsp+4F8h+var_4A8], r8
.text:000000000000741E                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000007423                 call    _memset
.text:0000000000007428                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000742D                 mov     r10d, dword ptr [rsp+4F8h+var_498]
.text:0000000000007432                 mov     r9, [rsp+4F8h+var_4A0]
.text:0000000000007437                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000743C                 add     rbp, rcx
.text:000000000000743F
.text:000000000000743F loc_743F:                               ; CODE XREF: __strftime_internal+1748↑j
.text:000000000000743F                                         ; __strftime_internal+174E↑j
.text:000000000000743F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007444                 add     rbp, 1
.text:0000000000007448                 mov     [rbp-1], al
.text:000000000000744B
.text:000000000000744B loc_744B:                               ; CODE XREF: __strftime_internal+173E↑j
.text:000000000000744B                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000007450                 add     r9, 17h
.text:0000000000007454                 add     r14, r12
.text:0000000000007457                 mov     rcx, r9
.text:000000000000745A                 mov     r11, r15
.text:000000000000745D                 mov     r12, rbx
.text:0000000000007460                 sub     rcx, r8
.text:0000000000007463                 mov     r15d, 5Fh ; '_'
.text:0000000000007469                 sub     rdx, r14
.text:000000000000746C                 jmp     loc_6985
.text:0000000000007471 ; ---------------------------------------------------------------------------
.text:0000000000007471
.text:0000000000007471 loc_7471:                               ; CODE XREF: __strftime_internal+1270↑j
.text:0000000000007471                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000007478                 mov     edi, 9
.text:000000000000747D                 mov     r10d, 9
.text:0000000000007483                 jmp     loc_6210
.text:0000000000007488 ; ---------------------------------------------------------------------------
.text:0000000000007488
.text:0000000000007488 loc_7488:                               ; CODE XREF: __strftime_internal+7A3↑j
.text:0000000000007488                 mov     r12, rbx
.text:000000000000748B                 mov     r9, rbx
.text:000000000000748E                 mov     r8d, 1
.text:0000000000007494                 jmp     loc_5F41
.text:0000000000007499 ; ---------------------------------------------------------------------------
.text:0000000000007499
.text:0000000000007499 loc_7499:                               ; CODE XREF: __strftime_internal+E59↑j
.text:0000000000007499                 cmp     r15d, 5Fh ; '_'
.text:000000000000749D                 jz      loc_7241
.text:00000000000074A3                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000074A8                 cmp     rax, rdx
.text:00000000000074AB                 jnb     loc_5D7C
.text:00000000000074B1                 movsxd  r9, r12d
.text:00000000000074B4                 mov     r12, rbx
.text:00000000000074B7                 jmp     loc_693E
.text:00000000000074BC ; ---------------------------------------------------------------------------
.text:00000000000074BC
.text:00000000000074BC loc_74BC:                               ; CODE XREF: __strftime_internal+70F↑j
.text:00000000000074BC                                         ; __strftime_internal+719↑j
.text:00000000000074BC                 mov     rdi, rbp        ; s
.text:00000000000074BF                 mov     esi, 30h ; '0'  ; c
.text:00000000000074C4                 call    _memset
.text:00000000000074C9                 mov     rbp, [rsp+4F8h+var_4A8]
.text:00000000000074CE                 mov     r11, [rsp+4F8h+var_4A0]
.text:00000000000074D3                 jmp     loc_63E6
.text:00000000000074D8 ; ---------------------------------------------------------------------------
.text:00000000000074D8
.text:00000000000074D8 loc_74D8:                               ; CODE XREF: __strftime_internal+F01↑j
.text:00000000000074D8                 sub     r12d, 1
.text:00000000000074DC                 mov     edx, 16Dh
.text:00000000000074E1                 test    r12b, 3
.text:00000000000074E5                 jnz     short loc_7523
.text:00000000000074E7                 mov     eax, r12d
.text:00000000000074EA                 mov     edx, 51EB851Fh
.text:00000000000074EF                 imul    edx
.text:00000000000074F1                 mov     eax, edx
.text:00000000000074F3                 mov     edx, r12d
.text:00000000000074F6                 sar     edx, 1Fh
.text:00000000000074F9                 sar     eax, 5
.text:00000000000074FC                 sub     eax, edx
.text:00000000000074FE                 mov     edx, 16Eh
.text:0000000000007503                 imul    eax, 64h ; 'd'
.text:0000000000007506                 cmp     r12d, eax
.text:0000000000007509                 jnz     short loc_7523
.text:000000000000750B                 mov     eax, r12d
.text:000000000000750E                 mov     ecx, 190h
.text:0000000000007513                 cdq
.text:0000000000007514                 idiv    ecx
.text:0000000000007516                 cmp     edx, 1
.text:0000000000007519                 sbb     edx, edx
.text:000000000000751B                 not     edx
.text:000000000000751D                 add     edx, 16Eh
.text:0000000000007523
.text:0000000000007523 loc_7523:                               ; CODE XREF: __strftime_internal+1835↑j
.text:0000000000007523                                         ; __strftime_internal+1859↑j
.text:0000000000007523                 add     r8d, edx
.text:0000000000007526                 mov     edx, 92492493h
.text:000000000000752B                 mov     ecx, r8d
.text:000000000000752E                 sub     ecx, [rsp+4F8h+var_4C0]
.text:0000000000007532                 add     ecx, 17Eh
.text:0000000000007538                 mov     eax, ecx
.text:000000000000753A                 sub     r8d, ecx
.text:000000000000753D                 imul    edx
.text:000000000000753F                 lea     eax, [rdx+rcx]
.text:0000000000007542                 mov     edx, ecx
.text:0000000000007544                 sar     edx, 1Fh
.text:0000000000007547                 sar     eax, 2
.text:000000000000754A                 sub     eax, edx
.text:000000000000754C                 lea     edx, ds:0[rax*8]
.text:0000000000007553                 sub     edx, eax
.text:0000000000007555                 lea     ecx, [r8+rdx+3]
.text:000000000000755A                 mov     r8d, 0FFFFFFFFh
.text:0000000000007560                 jmp     loc_6C4F
.text:0000000000007565 ; ---------------------------------------------------------------------------
.text:0000000000007565
.text:0000000000007565 loc_7565:                               ; CODE XREF: __strftime_internal+ABF↑j
.text:0000000000007565                                         ; __strftime_internal+AD1↑j
.text:0000000000007565                 imul    esi, 64h ; 'd'
.text:0000000000007568                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000756D                 mov     edi, 9
.text:0000000000007572                 imul    eax, r12d, 2710h
.text:0000000000007579                 add     eax, esi
.text:000000000000757B                 mov     esi, 14h
.text:0000000000007580                 add     ecx, eax
.text:0000000000007582                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007587                 xor     eax, 1
.text:000000000000758A                 jmp     loc_6227
.text:000000000000758F ; ---------------------------------------------------------------------------
.text:000000000000758F
.text:000000000000758F loc_758F:                               ; CODE XREF: __strftime_internal+FAD↑j
.text:000000000000758F                 mov     eax, ecx
.text:0000000000007591                 mov     edx, 92492493h
.text:0000000000007596                 mov     edi, 2
.text:000000000000759B                 imul    edx
.text:000000000000759D                 lea     eax, [rdx+rcx]
.text:00000000000075A0                 sar     ecx, 1Fh
.text:00000000000075A3                 sar     eax, 2
.text:00000000000075A6                 sub     eax, ecx
.text:00000000000075A8                 mov     ecx, eax
.text:00000000000075AA                 add     ecx, 1
.text:00000000000075AD                 jmp     loc_6210
.text:00000000000075B2 ; ---------------------------------------------------------------------------
.text:00000000000075B2
.text:00000000000075B2 loc_75B2:                               ; CODE XREF: __strftime_internal+AAF↑j
.text:00000000000075B2                                         ; __strftime_internal+AD9↑j
.text:00000000000075B2                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:00000000000075B7                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:00000000000075BC                 mov     edi, 6
.text:00000000000075C1                 imul    ecx, r12d, 64h ; 'd'
.text:00000000000075C5                 xor     eax, 1
.text:00000000000075C8                 add     ecx, esi
.text:00000000000075CA                 mov     esi, 4
.text:00000000000075CF                 jmp     loc_6227
.text:00000000000075D4 ; ---------------------------------------------------------------------------
.text:00000000000075D4
.text:00000000000075D4 loc_75D4:                               ; CODE XREF: __strftime_internal+607↑j
.text:00000000000075D4                                         ; __strftime_internal+611↑j
.text:00000000000075D4                 mov     rdi, rbp        ; s
.text:00000000000075D7                 mov     esi, 30h ; '0'  ; c
.text:00000000000075DC                 mov     rbp, r12
.text:00000000000075DF                 call    _memset
.text:00000000000075E4                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000075E9                 jmp     loc_62DC
.text:00000000000075EE ; ---------------------------------------------------------------------------
.text:00000000000075EE
.text:00000000000075EE loc_75EE:                               ; CODE XREF: __strftime_internal+136D↑j
.text:00000000000075EE                                         ; __strftime_internal+1377↑j
.text:00000000000075EE                 mov     rdi, rbp        ; s
.text:00000000000075F1                 mov     esi, 30h ; '0'  ; c
.text:00000000000075F6                 mov     rbp, r12
.text:00000000000075F9                 call    _memset
.text:00000000000075FE                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007603                 jmp     loc_7042
.text:0000000000007608 ; ---------------------------------------------------------------------------
.text:0000000000007608
.text:0000000000007608 loc_7608:                               ; CODE XREF: __strftime_internal+985↑j
.text:0000000000007608                 call    _memcpy
.text:000000000000760D                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007612                 jmp     loc_6645
.text:0000000000007617 ; ---------------------------------------------------------------------------
.text:0000000000007617
.text:0000000000007617 loc_7617:                               ; CODE XREF: __strftime_internal+96A↑j
.text:0000000000007617                 mov     rsi, [rsp+4F8h+var_4D8]
.text:000000000000761C                 mov     rdx, r12
.text:000000000000761F                 mov     rdi, rbp
.text:0000000000007622                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000007627                 call    memcpy_lowcase
.text:000000000000762C                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007631                 jmp     loc_6645
.text:0000000000007636 ; ---------------------------------------------------------------------------
.text:0000000000007636
.text:0000000000007636 loc_7636:                               ; CODE XREF: __strftime_internal+A17↑j
.text:0000000000007636                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000763A                 jmp     def_5EBF        ; jumptable 0000000000005EBF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000763F ; ---------------------------------------------------------------------------
.text:000000000000763F
.text:000000000000763F loc_763F:                               ; CODE XREF: __strftime_internal+AC9↑j
.text:000000000000763F                 movzx   ecx, byte ptr [rbx]
.text:0000000000007642                 mov     r9, rbx
.text:0000000000007645                 jmp     loc_6EA9
.text:000000000000764A ; ---------------------------------------------------------------------------
.text:000000000000764A
.text:000000000000764A loc_764A:                               ; CODE XREF: __strftime_internal+E81↑j
.text:000000000000764A                 lea     rcx, [rbx+2]
.text:000000000000764E                 mov     r8d, 1
.text:0000000000007654
.text:0000000000007654 loc_7654:                               ; CODE XREF: __strftime_internal+19BB↓j
.text:0000000000007654                 mov     rdx, rcx
.text:0000000000007657                 add     rcx, 1
.text:000000000000765B                 movzx   eax, byte ptr [rcx-1]
.text:000000000000765F                 add     r8, 1
.text:0000000000007663                 cmp     al, 3Ah ; ':'
.text:0000000000007665                 jnz     loc_6B3D
.text:000000000000766B                 jmp     short loc_7654
.text:000000000000766D ; ---------------------------------------------------------------------------
.text:000000000000766D
.text:000000000000766D loc_766D:                               ; CODE XREF: __strftime_internal+11C3↑j
.text:000000000000766D                                         ; __strftime_internal+11CC↑j
.text:000000000000766D                 mov     esi, r10d
.text:0000000000007670                 mov     eax, 0
.text:0000000000007675                 sub     esi, 6
.text:0000000000007678                 cmovns  eax, esi
.text:000000000000767B                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000767F                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000007686                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000768B                 jmp     loc_6322
.text:0000000000007690 ; ---------------------------------------------------------------------------
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: __strftime_internal+AB5↑j
.text:0000000000007690                 imul    ecx, r12d, 64h ; 'd'
.text:0000000000007694                 xor     esi, esi
.text:0000000000007696                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000769B                 mov     edi, 5
.text:00000000000076A0                 add     ecx, eax
.text:00000000000076A2                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:00000000000076A7                 xor     eax, 1
.text:00000000000076AA                 jmp     loc_6227
.text:00000000000076AF ; ---------------------------------------------------------------------------
.text:00000000000076AF
.text:00000000000076AF loc_76AF:                               ; CODE XREF: __strftime_internal+93A↑j
.text:00000000000076AF                                         ; __strftime_internal+944↑j
.text:00000000000076AF                 mov     rdi, rbp        ; s
.text:00000000000076B2                 mov     esi, 30h ; '0'  ; c
.text:00000000000076B7                 call    _memset
.text:00000000000076BC                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000076C1                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000076C7                 mov     rcx, [rsp+4F8h+var_4B0]
.text:00000000000076CC                 jmp     loc_6617
.text:00000000000076D1 ; ---------------------------------------------------------------------------
.text:00000000000076D1
.text:00000000000076D1 loc_76D1:                               ; CODE XREF: __strftime_internal+C50↑j
.text:00000000000076D1                                         ; __strftime_internal+C5A↑j
.text:00000000000076D1                 mov     rdi, rbp        ; s
.text:00000000000076D4                 mov     esi, 30h ; '0'  ; c
.text:00000000000076D9                 mov     rbp, r12
.text:00000000000076DC                 call    _memset
.text:00000000000076E1                 mov     rcx, [rsp+4F8h+var_4B8]
.text:00000000000076E6                 mov     r9, [rsp+4F8h+var_4A8]
.text:00000000000076EB                 mov     r8, [rsp+4F8h+var_4A0]
.text:00000000000076F0                 jmp     loc_692F
.text:00000000000076F5 ; ---------------------------------------------------------------------------
.text:00000000000076F5
.text:00000000000076F5 loc_76F5:                               ; CODE XREF: __strftime_internal+7D6↑j
.text:00000000000076F5                                         ; __strftime_internal+7E5↑j
.text:00000000000076F5                 mov     esi, 30h ; '0'
.text:00000000000076FA                 jmp     loc_649B
.text:00000000000076FF ; ---------------------------------------------------------------------------
.text:00000000000076FF
.text:00000000000076FF loc_76FF:                               ; CODE XREF: __strftime_internal+167E↑j
.text:00000000000076FF                                         ; __strftime_internal+1688↑j
.text:00000000000076FF                 mov     rdi, rbp        ; s
.text:0000000000007702                 mov     esi, 30h ; '0'  ; c
.text:0000000000007707                 call    _memset
.text:000000000000770C                 mov     rbp, [rsp+4F8h+var_4B8]
.text:0000000000007711                 mov     r11, [rsp+4F8h+var_4A8]
.text:0000000000007716                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000771B                 mov     r8, [rsp+4F8h+var_498]
.text:0000000000007720                 mov     r10d, [rsp+4F8h+var_48C]
.text:0000000000007725                 jmp     loc_7364
.text:000000000000772A ; ---------------------------------------------------------------------------
.text:000000000000772A
.text:000000000000772A loc_772A:                               ; CODE XREF: __strftime_internal+1018↑j
.text:000000000000772A                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000772F                 mov     edi, 2
.text:0000000000007734                 jmp     loc_6E30
.text:0000000000007739 ; ---------------------------------------------------------------------------
.text:0000000000007739
.text:0000000000007739 loc_7739:                               ; CODE XREF: __strftime_internal+127A↑j
.text:0000000000007739                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000007740                 jmp     loc_6F56
.text:0000000000007745 ; ---------------------------------------------------------------------------
.text:0000000000007745
.text:0000000000007745 loc_7745:                               ; CODE XREF: __strftime_internal+E3↑j
.text:0000000000007745                 call    ___stack_chk_fail
.text:000000000000774A ; ---------------------------------------------------------------------------
.text:000000000000774A
.text:000000000000774A loc_774A:                               ; CODE XREF: __strftime_internal+FF9↑j
.text:000000000000774A                 add     ecx, 64h ; 'd'
.text:000000000000774D                 test    r15d, r15d
.text:0000000000007750                 jz      loc_6CBA
.text:0000000000007756                 jmp     loc_6692
.text:000000000000775B ; ---------------------------------------------------------------------------
.text:000000000000775B
.text:000000000000775B loc_775B:                               ; CODE XREF: __strftime_internal+3D5↑j
.text:000000000000775B                 xor     edi, edi
.text:000000000000775D                 jmp     loc_624C
.text:000000000000775D ; } // starts at 5CB0
.text:000000000000775D __strftime_internal endp
.text:000000000000775D
.text:000000000000775D ; ---------------------------------------------------------------------------
.text:0000000000007762                 align 10h
.text:0000000000007770
.text:0000000000007770 ; =============== S U B R O U T I N E =======================================
.text:0000000000007770
.text:0000000000007770
.text:0000000000007770                 public nstrftime
.text:0000000000007770 nstrftime       proc near               ; CODE XREF: human_time+69↑p
.text:0000000000007770
.text:0000000000007770 var_11          = qword ptr -11h
.text:0000000000007770
.text:0000000000007770 ; __unwind {
.text:0000000000007770                 sub     rsp, 18h
.text:0000000000007774                 mov     rax, fs:28h
.text:000000000000777D                 mov     [rsp+18h+var_11+1], rax
.text:0000000000007782                 xor     eax, eax
.text:0000000000007784                 mov     byte ptr [rsp+18h+var_11], 0
.text:0000000000007789                 push    r9              ; int
.text:000000000000778B                 xor     r9d, r9d
.text:000000000000778E                 push    r8              ; __int64
.text:0000000000007790                 xor     r8d, r8d
.text:0000000000007793                 lea     rax, [rsp+28h+var_11]
.text:0000000000007798                 push    rax             ; __int64
.text:0000000000007799                 push    0FFFFFFFFFFFFFFFFh ; int
.text:000000000000779B                 call    __strftime_internal
.text:00000000000077A0                 add     rsp, 20h
.text:00000000000077A4                 mov     rdx, [rsp+18h+var_11+1]
.text:00000000000077A9                 xor     rdx, fs:28h
.text:00000000000077B2                 jnz     short loc_77B9
.text:00000000000077B4                 add     rsp, 18h
.text:00000000000077B8                 retn
.text:00000000000077B9 ; ---------------------------------------------------------------------------
.text:00000000000077B9
.text:00000000000077B9 loc_77B9:                               ; CODE XREF: nstrftime+42↑j
.text:00000000000077B9                 call    ___stack_chk_fail
.text:00000000000077B9 ; } // starts at 7770
.text:00000000000077B9 nstrftime       endp
.text:00000000000077B9
.text:00000000000077B9 ; ---------------------------------------------------------------------------
.text:00000000000077BE                 align 20h
.text:00000000000077C0
.text:00000000000077C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077C0
.text:00000000000077C0
.text:00000000000077C0                 public set_program_name
.text:00000000000077C0 set_program_name proc near              ; CODE XREF: main+39↑p
.text:00000000000077C0 ; __unwind {
.text:00000000000077C0                 test    rdi, rdi
.text:00000000000077C3                 push    rbx
.text:00000000000077C4                 jz      short loc_783D
.text:00000000000077C6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000077CB                 mov     rbx, rdi
.text:00000000000077CE                 call    _strrchr
.text:00000000000077D3                 test    rax, rax
.text:00000000000077D6                 jz      short loc_782D
.text:00000000000077D8                 lea     r8, [rax+1]
.text:00000000000077DC                 mov     rdx, r8
.text:00000000000077DF                 sub     rdx, rbx
.text:00000000000077E2                 cmp     rdx, 6
.text:00000000000077E6                 jle     short loc_782D
.text:00000000000077E8                 lea     rsi, [rax-6]
.text:00000000000077EC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000077F3                 mov     ecx, 7
.text:00000000000077F8                 repe cmpsb
.text:00000000000077FA                 setnbe  dl
.text:00000000000077FD                 sbb     dl, 0
.text:0000000000007800                 test    dl, dl
.text:0000000000007802                 jnz     short loc_782D
.text:0000000000007804                 lea     rdi, aLt        ; "lt-"
.text:000000000000780B                 mov     ecx, 3
.text:0000000000007810                 mov     rsi, r8
.text:0000000000007813                 mov     rbx, r8
.text:0000000000007816                 repe cmpsb
.text:0000000000007818                 setnbe  dl
.text:000000000000781B                 sbb     dl, 0
.text:000000000000781E                 test    dl, dl
.text:0000000000007820                 jnz     short loc_782D
.text:0000000000007822                 lea     rbx, [rax+4]
.text:0000000000007826                 mov     cs:__bss_start, rbx
.text:000000000000782D
.text:000000000000782D loc_782D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000782D                                         ; set_program_name+26↑j ...
.text:000000000000782D                 mov     cs:program_name, rbx
.text:0000000000007834                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000783B                 pop     rbx
.text:000000000000783C                 retn
.text:000000000000783D ; ---------------------------------------------------------------------------
.text:000000000000783D
.text:000000000000783D loc_783D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000783D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000007844                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000784B                 mov     edx, 37h ; '7'  ; n
.text:0000000000007850                 mov     esi, 1          ; size
.text:0000000000007855                 call    _fwrite
.text:000000000000785A                 call    _abort
.text:000000000000785A ; } // starts at 77C0
.text:000000000000785A set_program_name endp
.text:000000000000785A
.text:000000000000785A ; ---------------------------------------------------------------------------
.text:000000000000785F                 align 20h
.text:0000000000007860
.text:0000000000007860 ; =============== S U B R O U T I N E =======================================
.text:0000000000007860
.text:0000000000007860 ; Attributes: info_from_lumina
.text:0000000000007860
.text:0000000000007860 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000007860 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000007860                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000007860 ; __unwind {
.text:0000000000007860                 push    rbp
.text:0000000000007861                 push    rbx
.text:0000000000007862                 mov     rbp, rdi
.text:0000000000007865                 mov     ebx, esi
.text:0000000000007867                 sub     rsp, 8
.text:000000000000786B                 call    locale_charset
.text:0000000000007870                 movzx   edx, byte ptr [rax]
.text:0000000000007873                 and     edx, 0FFFFFFDFh
.text:0000000000007876                 cmp     dl, 55h ; 'U'
.text:0000000000007879                 jz      short loc_78F0
.text:000000000000787B                 cmp     dl, 47h ; 'G'
.text:000000000000787E                 jz      short loc_78A0
.text:0000000000007880
.text:0000000000007880 loc_7880:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000007880                                         ; gettext_quote+50↓j ...
.text:0000000000007880                 lea     rax, unk_F653
.text:0000000000007887                 lea     rdx, aDir+0Ah   ; "'"
.text:000000000000788E                 cmp     ebx, 9
.text:0000000000007891                 cmovnz  rax, rdx
.text:0000000000007895                 add     rsp, 8
.text:0000000000007899                 pop     rbx
.text:000000000000789A                 pop     rbp
.text:000000000000789B                 retn
.text:000000000000789B ; ---------------------------------------------------------------------------
.text:000000000000789C                 align 20h
.text:00000000000078A0
.text:00000000000078A0 loc_78A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000078A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000078A4                 and     edx, 0FFFFFFDFh
.text:00000000000078A7                 cmp     dl, 42h ; 'B'
.text:00000000000078AA                 jnz     short loc_7880
.text:00000000000078AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000078B0                 jnz     short loc_7880
.text:00000000000078B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000078B6                 jnz     short loc_7880
.text:00000000000078B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000078BC                 jnz     short loc_7880
.text:00000000000078BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000078C2                 jnz     short loc_7880
.text:00000000000078C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000078C8                 jnz     short loc_7880
.text:00000000000078CA                 cmp     byte ptr [rax+7], 0
.text:00000000000078CE                 jnz     short loc_7880
.text:00000000000078D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000078D4                 lea     rax, unk_F64C
.text:00000000000078DB                 lea     rdx, unk_F650
.text:00000000000078E2                 cmovnz  rax, rdx
.text:00000000000078E6                 add     rsp, 8
.text:00000000000078EA                 pop     rbx
.text:00000000000078EB                 pop     rbp
.text:00000000000078EC                 retn
.text:00000000000078EC ; ---------------------------------------------------------------------------
.text:00000000000078ED                 align 10h
.text:00000000000078F0
.text:00000000000078F0 loc_78F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000078F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000078F4                 and     edx, 0FFFFFFDFh
.text:00000000000078F7                 cmp     dl, 54h ; 'T'
.text:00000000000078FA                 jnz     short loc_7880
.text:00000000000078FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000007900                 and     edx, 0FFFFFFDFh
.text:0000000000007903                 cmp     dl, 46h ; 'F'
.text:0000000000007906                 jnz     loc_7880
.text:000000000000790C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000007910                 jnz     loc_7880
.text:0000000000007916                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000791A                 jnz     loc_7880
.text:0000000000007920                 cmp     byte ptr [rax+5], 0
.text:0000000000007924                 jnz     loc_7880
.text:000000000000792A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000792E                 lea     rax, unk_F644
.text:0000000000007935                 lea     rdx, unk_F648
.text:000000000000793C                 cmovnz  rax, rdx
.text:0000000000007940                 add     rsp, 8
.text:0000000000007944                 pop     rbx
.text:0000000000007945                 pop     rbp
.text:0000000000007946                 retn
.text:0000000000007946 ; } // starts at 7860
.text:0000000000007946 gettext_quote   endp
.text:0000000000007946
.text:0000000000007946 ; ---------------------------------------------------------------------------
.text:0000000000007947                 align 10h
.text:0000000000007950
.text:0000000000007950 ; =============== S U B R O U T I N E =======================================
.text:0000000000007950
.text:0000000000007950 ; Attributes: info_from_lumina
.text:0000000000007950
.text:0000000000007950 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000007950 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000007950                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000007950
.text:0000000000007950 var_E0          = dword ptr -0E0h
.text:0000000000007950 var_DB          = byte ptr -0DBh
.text:0000000000007950 var_DA          = byte ptr -0DAh
.text:0000000000007950 var_D9          = byte ptr -0D9h
.text:0000000000007950 s               = qword ptr -0D8h
.text:0000000000007950 n               = qword ptr -0D0h
.text:0000000000007950 var_C8          = qword ptr -0C8h
.text:0000000000007950 ps              = qword ptr -0C0h
.text:0000000000007950 var_B8          = qword ptr -0B8h
.text:0000000000007950 var_B0          = qword ptr -0B0h
.text:0000000000007950 var_A8          = qword ptr -0A8h
.text:0000000000007950 s2              = qword ptr -0A0h
.text:0000000000007950 var_98          = qword ptr -98h
.text:0000000000007950 var_90          = qword ptr -90h
.text:0000000000007950 var_88          = qword ptr -88h
.text:0000000000007950 var_80          = qword ptr -80h
.text:0000000000007950 var_78          = qword ptr -78h
.text:0000000000007950 var_70          = dword ptr -70h
.text:0000000000007950 var_6C          = byte ptr -6Ch
.text:0000000000007950 var_6B          = byte ptr -6Bh
.text:0000000000007950 var_6A          = byte ptr -6Ah
.text:0000000000007950 var_69          = byte ptr -69h
.text:0000000000007950 var_68          = qword ptr -68h
.text:0000000000007950 var_60          = qword ptr -60h
.text:0000000000007950 wc              = dword ptr -4Ch
.text:0000000000007950 var_48          = qword ptr -48h
.text:0000000000007950 var_40          = qword ptr -40h
.text:0000000000007950 arg_0           = qword ptr  8
.text:0000000000007950 arg_8           = qword ptr  10h
.text:0000000000007950 arg_10          = qword ptr  18h
.text:0000000000007950
.text:0000000000007950 ; __unwind {
.text:0000000000007950                 push    r15
.text:0000000000007952                 push    r14
.text:0000000000007954                 mov     r15d, r8d
.text:0000000000007957                 push    r13
.text:0000000000007959                 push    r12
.text:000000000000795B                 mov     r14, rdi
.text:000000000000795E                 push    rbp
.text:000000000000795F                 push    rbx
.text:0000000000007960                 mov     ebx, r9d
.text:0000000000007963                 mov     r13, rsi
.text:0000000000007966                 mov     rbp, rcx
.text:0000000000007969                 and     ebx, 2
.text:000000000000796C                 sub     rsp, 0B8h
.text:0000000000007973                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000797B                 mov     [rsp+0E8h+s], rdx
.text:0000000000007980                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000007985                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000798A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000798F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000007997                 mov     [rsp+0E8h+var_80], rax
.text:000000000000799C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000079A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000079A9                 mov     rax, fs:28h
.text:00000000000079B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000079BA                 xor     eax, eax
.text:00000000000079BC                 call    ___ctype_get_mb_cur_max
.text:00000000000079C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000079C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000079CA                 ja      def_79E1        ; jumptable 00000000000121F1 default case
.text:00000000000079D0                 lea     rcx, jpt_79E1
.text:00000000000079D7                 mov     edx, r15d
.text:00000000000079DA                 movsxd  rax, ds:(jpt_79E1 - 0F6C0h)[rcx+rdx*4]
.text:00000000000079DE                 add     rax, rcx
.text:00000000000079E1                 jmp     rax             ; switch jump
.text:00000000000079E3 ; ---------------------------------------------------------------------------
.text:00000000000079E3
.text:00000000000079E3 loc_79E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000079E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000079E3                                         ; DATA XREF: ...
.text:00000000000079E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000079E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000079ED                 xor     r12d, r12d
.text:00000000000079F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000079F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000079FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007A03
.text:0000000000007A03 loc_7A03:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000007A03                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000007A0A                 mov     [rsp+0E8h+n], 1
.text:0000000000007A13                 xor     r15d, r15d
.text:0000000000007A16                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007A1E                 mov     [rsp+0E8h+s2], rax
.text:0000000000007A23
.text:0000000000007A23 loc_7A23:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000007A23                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000007A23                 xor     r11d, r11d
.text:0000000000007A26                 mov     rax, rbp
.text:0000000000007A29                 mov     r8d, r12d
.text:0000000000007A2C                 mov     rbp, r11
.text:0000000000007A2F                 mov     r11, rax
.text:0000000000007A32                 nop     word ptr [rax+rax+00h]
.text:0000000000007A38
.text:0000000000007A38 loc_7A38:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000007A38                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000007A38                 cmp     r11, rbp
.text:0000000000007A3B                 setnz   r12b
.text:0000000000007A3F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007A43                 jnz     short loc_7A52
.text:0000000000007A45                 mov     rax, [rsp+0E8h+s]
.text:0000000000007A4A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000007A4E                 setnz   r12b
.text:0000000000007A52
.text:0000000000007A52 loc_7A52:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000007A52                 test    r12b, r12b
.text:0000000000007A55                 jz      loc_80B0
.text:0000000000007A5B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007A60                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000007A65                 lea     r9, [rdi+rbp]
.text:0000000000007A69                 setnz   al
.text:0000000000007A6C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007A70                 mov     r10d, eax
.text:0000000000007A73                 jz      loc_7B20
.text:0000000000007A79                 mov     rax, [rsp+0E8h+n]
.text:0000000000007A7E                 test    rax, rax
.text:0000000000007A81                 jz      loc_7EB0
.text:0000000000007A87                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007A8B                 lea     rbx, [rbp+rax+0]
.text:0000000000007A90                 jnz     short loc_7AC0
.text:0000000000007A92                 cmp     rax, 1
.text:0000000000007A96                 jbe     short loc_7AC0
.text:0000000000007A98                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000007A9D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000007AA2                 mov     [rsp+0E8h+ps], r9
.text:0000000000007AA7                 call    _strlen
.text:0000000000007AAC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000007AB2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000007AB8                 mov     r11, rax
.text:0000000000007ABB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000007AC0
.text:0000000000007AC0 loc_7AC0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000007AC0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000007AC0                 cmp     rbx, r11
.text:0000000000007AC3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000007AC8                 ja      loc_8080
.text:0000000000007ACE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000007AD3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000007AD8                 mov     rdi, r9         ; s1
.text:0000000000007ADB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000007AE0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000007AE5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000007AEA                 call    _memcmp
.text:0000000000007AEF                 test    eax, eax
.text:0000000000007AF1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000007AF6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000007AFC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000007B01                 jnz     loc_8080
.text:0000000000007B07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007B0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000007B12                 jnz     loc_8A95
.text:0000000000007B18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000007B20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000007B20                 movzx   ebx, byte ptr [r9]
.text:0000000000007B24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007B27                 ja      def_7B3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000007B2D                 lea     rcx, jpt_7B3E
.text:0000000000007B34                 movzx   edx, bl
.text:0000000000007B37                 movsxd  rax, ds:(jpt_7B3E - 0F6ECh)[rcx+rdx*4]
.text:0000000000007B3B                 add     rax, rcx
.text:0000000000007B3E                 jmp     rax             ; switch jump
.text:0000000000007B40 ; ---------------------------------------------------------------------------
.text:0000000000007B40
.text:0000000000007B40 loc_7B40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007B40                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007B40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000007B43
.text:0000000000007B43 loc_7B43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007B43                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007B43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000007B47                 setnz   al
.text:0000000000007B4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B4E                 jnz     short loc_7B5C
.text:0000000000007B50                 mov     rax, [rsp+0E8h+s]
.text:0000000000007B55                 cmp     byte ptr [rax+1], 0
.text:0000000000007B59                 setnz   al
.text:0000000000007B5C
.text:0000000000007B5C loc_7B5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000007B5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007B61                 setz    dl
.text:0000000000007B64                 test    al, al
.text:0000000000007B66                 jz      loc_7DB8
.text:0000000000007B6C
.text:0000000000007B6C loc_7B6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000007B6C                 xor     r12d, r12d
.text:0000000000007B6F                 xor     eax, eax
.text:0000000000007B71                 nop     dword ptr [rax+00000000h]
.text:0000000000007B78
.text:0000000000007B78 loc_7B78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000007B78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000007B78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000007B7D                 jnz     loc_7C92
.text:0000000000007B83                 test    dl, dl
.text:0000000000007B85                 jnz     loc_7C92
.text:0000000000007B8B
.text:0000000000007B8B loc_7B8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000007B8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000007B90                 test    rsi, rsi
.text:0000000000007B93                 jz      short loc_7BA9
.text:0000000000007B95                 mov     edx, ebx
.text:0000000000007B97                 shr     dl, 5
.text:0000000000007B9A                 movzx   edx, dl
.text:0000000000007B9D                 mov     edx, [rsi+rdx*4]
.text:0000000000007BA0                 bt      edx, ebx
.text:0000000000007BA3                 jb      loc_7CF3
.text:0000000000007BA9
.text:0000000000007BA9 loc_7BA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000007BA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000007BA9                 test    r10b, r10b
.text:0000000000007BAC                 jnz     loc_7CF3
.text:0000000000007BB2                 xor     eax, 1
.text:0000000000007BB5                 add     rbp, 1
.text:0000000000007BB9                 and     eax, r8d
.text:0000000000007BBC
.text:0000000000007BBC loc_7BBC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000007BBC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000007BBC                 test    al, al
.text:0000000000007BBE                 jz      short loc_7BE0
.text:0000000000007BC0                 cmp     r13, r15
.text:0000000000007BC3                 jbe     short loc_7BCA
.text:0000000000007BC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007BCA
.text:0000000000007BCA loc_7BCA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000007BCA                 lea     rax, [r15+1]
.text:0000000000007BCE                 cmp     r13, rax
.text:0000000000007BD1                 jbe     short loc_7BD9
.text:0000000000007BD3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000007BD9
.text:0000000000007BD9 loc_7BD9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000007BD9                 add     r15, 2
.text:0000000000007BDD                 xor     r8d, r8d
.text:0000000000007BE0
.text:0000000000007BE0 loc_7BE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000007BE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000007BE0                 cmp     r15, r13
.text:0000000000007BE3                 jnb     short loc_7BE9
.text:0000000000007BE5                 mov     [r14+r15], bl
.text:0000000000007BE9
.text:0000000000007BE9 loc_7BE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000007BE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000007BEE                 add     r15, 1
.text:0000000000007BF2                 mov     eax, 0
.text:0000000000007BF7                 test    r12b, r12b
.text:0000000000007BFA                 cmovz   edi, eax
.text:0000000000007BFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000007C02                 jmp     loc_7A38
.text:0000000000007C02 ; ---------------------------------------------------------------------------
.text:0000000000007C07                 align 10h
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007C10                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007C10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000007C13
.text:0000000000007C13 loc_7C13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007C13                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007C13                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000007C17                 cmp     eax, 2
.text:0000000000007C1A                 jz      loc_81D8
.text:0000000000007C20                 cmp     eax, 5
.text:0000000000007C23                 jz      loc_8198
.text:0000000000007C29                 cmp     eax, 2
.text:0000000000007C2C                 mov     ebx, 3Fh ; '?'
.text:0000000000007C31                 setz    dl
.text:0000000000007C34                 xor     r12d, r12d
.text:0000000000007C37                 xor     eax, eax
.text:0000000000007C39                 jmp     loc_7B78
.text:0000000000007C39 ; ---------------------------------------------------------------------------
.text:0000000000007C3E                 align 20h
.text:0000000000007C40
.text:0000000000007C40 loc_7C40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007C40                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007C40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000007C43
.text:0000000000007C43 loc_7C43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007C43                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007C43                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000007C48                 jz      loc_8150
.text:0000000000007C4E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007C53                 xor     edx, edx
.text:0000000000007C55                 xor     eax, eax
.text:0000000000007C57                 mov     ebx, 27h ; '''
.text:0000000000007C5C                 jmp     loc_7B78
.text:0000000000007C5C ; ---------------------------------------------------------------------------
.text:0000000000007C61                 align 8
.text:0000000000007C68
.text:0000000000007C68 loc_7C68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007C68                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007C68                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000007C6D                 mov     ebx, 74h ; 't'
.text:0000000000007C72
.text:0000000000007C72 loc_7C72:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000007C72                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000007C72                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007C77                 setz    al
.text:0000000000007C7A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000007C7E                 jnz     loc_7DCE
.text:0000000000007C84
.text:0000000000007C84 loc_7C84:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000007C84                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000007C84                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007C89                 jnz     short loc_7CF0
.text:0000000000007C8B
.text:0000000000007C8B loc_7C8B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000007C8B                 mov     ebx, edx
.text:0000000000007C8D                 xor     r12d, r12d
.text:0000000000007C90                 xor     eax, eax
.text:0000000000007C92
.text:0000000000007C92 loc_7C92:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000007C92                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000007C92                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007C97                 jnz     loc_7B8B
.text:0000000000007C9D                 jmp     loc_7BA9
.text:0000000000007C9D ; ---------------------------------------------------------------------------
.text:0000000000007CA2                 align 8
.text:0000000000007CA8
.text:0000000000007CA8 loc_7CA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007CA8                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007CA8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000007CAD                 mov     ebx, 62h ; 'b'
.text:0000000000007CB2                 jmp     short loc_7C84
.text:0000000000007CB2 ; ---------------------------------------------------------------------------
.text:0000000000007CB4                 align 8
.text:0000000000007CB8
.text:0000000000007CB8 loc_7CB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007CB8                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007CB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000007CBD                 jz      loc_8090
.text:0000000000007CC3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007CC8                 jz      loc_7EE0
.text:0000000000007CCE
.text:0000000000007CCE loc_7CCE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000007CCE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007CD3                 jz      loc_7EE0
.text:0000000000007CD9                 cmp     [rsp+0E8h+n], 0
.text:0000000000007CDF                 jnz     loc_809B
.text:0000000000007CE5                 mov     ebx, 5Ch ; '\'
.text:0000000000007CEA                 nop     word ptr [rax+rax+00h]
.text:0000000000007CF0
.text:0000000000007CF0 loc_7CF0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000007CF0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000007CF0                 xor     r12d, r12d
.text:0000000000007CF3
.text:0000000000007CF3 loc_7CF3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000007CF3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000007CF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007CF8                 setz    dl
.text:0000000000007CFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007D00                 mov     eax, edx
.text:0000000000007D02                 jnz     loc_8558
.text:0000000000007D08                 mov     eax, r8d
.text:0000000000007D0B                 xor     eax, 1
.text:0000000000007D0E                 and     al, dl
.text:0000000000007D10                 jz      short loc_7D41
.text:0000000000007D12                 cmp     r13, r15
.text:0000000000007D15                 jbe     short loc_7D1C
.text:0000000000007D17                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007D1C
.text:0000000000007D1C loc_7D1C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000007D1C                 lea     rdx, [r15+1]
.text:0000000000007D20                 cmp     r13, rdx
.text:0000000000007D23                 jbe     short loc_7D2B
.text:0000000000007D25                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000007D2B
.text:0000000000007D2B loc_7D2B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000007D2B                 lea     rdx, [r15+2]
.text:0000000000007D2F                 cmp     r13, rdx
.text:0000000000007D32                 jbe     short loc_7D3A
.text:0000000000007D34                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007D3A
.text:0000000000007D3A loc_7D3A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000007D3A                 add     r15, 3
.text:0000000000007D3E                 mov     r8d, eax
.text:0000000000007D41
.text:0000000000007D41 loc_7D41:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000007D41                 cmp     r13, r15
.text:0000000000007D44                 jbe     short loc_7D4B
.text:0000000000007D46                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000007D4B
.text:0000000000007D4B loc_7D4B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000007D4B                 add     r15, 1
.text:0000000000007D4F                 add     rbp, 1
.text:0000000000007D53                 jmp     loc_7BE0
.text:0000000000007D53 ; ---------------------------------------------------------------------------
.text:0000000000007D58                 align 20h
.text:0000000000007D60
.text:0000000000007D60 loc_7D60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007D60                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007D60                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000007D65                 jnz     loc_7F33
.text:0000000000007D6B                 xor     edx, edx
.text:0000000000007D6D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000007D72                 jz      loc_7C8B
.text:0000000000007D78                 add     rbp, 1
.text:0000000000007D7C                 jmp     loc_7A38
.text:0000000000007D7C ; ---------------------------------------------------------------------------
.text:0000000000007D81                 align 8
.text:0000000000007D88
.text:0000000000007D88 loc_7D88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007D88                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007D88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000007D8D                 setz    dl
.text:0000000000007D90                 xor     eax, eax
.text:0000000000007D92                 jmp     loc_7B78
.text:0000000000007D92 ; ---------------------------------------------------------------------------
.text:0000000000007D97                 align 20h
.text:0000000000007DA0
.text:0000000000007DA0 loc_7DA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007DA0                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007DA0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000007DA5                 mov     ebx, 61h ; 'a'
.text:0000000000007DAA                 jmp     loc_7C84
.text:0000000000007DAA ; ---------------------------------------------------------------------------
.text:0000000000007DAF                 align 10h
.text:0000000000007DB0
.text:0000000000007DB0 loc_7DB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007DB0                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007DB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000007DB5                 setz    dl
.text:0000000000007DB8
.text:0000000000007DB8 loc_7DB8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000007DB8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000007DB8                 test    rbp, rbp
.text:0000000000007DBB                 jnz     loc_7B6C
.text:0000000000007DC1
.text:0000000000007DC1 loc_7DC1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000007DC1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000007DC1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000007DC6                 and     al, dl
.text:0000000000007DC8                 jz      loc_7B78
.text:0000000000007DCE
.text:0000000000007DCE loc_7DCE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000007DCE                 mov     rbp, r11
.text:0000000000007DD1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007DD9                 jmp     loc_84D9
.text:0000000000007DD9 ; ---------------------------------------------------------------------------
.text:0000000000007DDE                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 loc_7DE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007DE0                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007DE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000007DE5                 setz    dl
.text:0000000000007DE8                 xor     r12d, r12d
.text:0000000000007DEB                 jmp     short loc_7DC1
.text:0000000000007DEB ; ---------------------------------------------------------------------------
.text:0000000000007DED                 align 10h
.text:0000000000007DF0
.text:0000000000007DF0 loc_7DF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007DF0                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007DF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000007DF5                 mov     ebx, 20h ; ' '
.text:0000000000007DFA                 setz    dl
.text:0000000000007DFD                 jmp     short loc_7DC1
.text:0000000000007DFD ; ---------------------------------------------------------------------------
.text:0000000000007DFF                 align 20h
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E00                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007E00                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000007E05                 mov     ebx, 72h ; 'r'
.text:0000000000007E0A                 jmp     loc_7C72
.text:0000000000007E0A ; ---------------------------------------------------------------------------
.text:0000000000007E0F                 align 10h
.text:0000000000007E10
.text:0000000000007E10 loc_7E10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E10                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007E10                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000007E15                 mov     ebx, 66h ; 'f'
.text:0000000000007E1A                 jmp     loc_7C84
.text:0000000000007E1A ; ---------------------------------------------------------------------------
.text:0000000000007E1F                 align 20h
.text:0000000000007E20
.text:0000000000007E20 loc_7E20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E20                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007E20                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000007E25                 mov     ebx, 76h ; 'v'
.text:0000000000007E2A                 jmp     loc_7C84
.text:0000000000007E2A ; ---------------------------------------------------------------------------
.text:0000000000007E2F                 align 10h
.text:0000000000007E30
.text:0000000000007E30 loc_7E30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E30                                         ; DATA XREF: .rodata:jpt_7B3E↓o
.text:0000000000007E30                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000007E35                 mov     ebx, 6Eh ; 'n'
.text:0000000000007E3A                 jmp     loc_7C72
.text:0000000000007E3A ; ---------------------------------------------------------------------------
.text:0000000000007E3F                 align 20h
.text:0000000000007E40
.text:0000000000007E40 def_7ECA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000007E40                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000007E40                                         ; DATA XREF: ...
.text:0000000000007E40                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007E43                 nop     dword ptr [rax+rax+00h]
.text:0000000000007E48
.text:0000000000007E48 def_7B3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000007E48                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000007E48                                         ; DATA XREF: ...
.text:0000000000007E48                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000007E4E                 jnz     loc_81F8
.text:0000000000007E54                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000007E59                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000007E5E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000007E63                 call    ___ctype_b_loc
.text:0000000000007E68                 mov     rcx, [rax]
.text:0000000000007E6B                 movzx   edx, bl
.text:0000000000007E6E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000007E74                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000007E7A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000007E7F                 mov     edi, 1
.text:0000000000007E84                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000007E88                 and     ax, 4000h
.text:0000000000007E8C                 setnz   r12b
.text:0000000000007E90                 setz    al
.text:0000000000007E93                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007E97
.text:0000000000007E97 loc_7E97:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000007E97                 test    al, al
.text:0000000000007E99                 jnz     loc_8831
.text:0000000000007E9F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007EA4                 setz    dl
.text:0000000000007EA7                 jmp     loc_7B78
.text:0000000000007EA7 ; ---------------------------------------------------------------------------
.text:0000000000007EAC                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000007EB0                 movzx   ebx, byte ptr [r9]
.text:0000000000007EB4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007EB7                 ja      short def_7ECA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007EB9                 lea     rcx, jpt_7ECA
.text:0000000000007EC0                 movzx   edx, bl
.text:0000000000007EC3                 movsxd  rax, ds:(jpt_7ECA - 0F8E8h)[rcx+rdx*4]
.text:0000000000007EC7                 add     rax, rcx
.text:0000000000007ECA                 jmp     rax             ; switch jump
.text:0000000000007ECA ; ---------------------------------------------------------------------------
.text:0000000000007ECC                 align 10h
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007ED0                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007ED0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000007ED3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007ED8                 jnz     loc_7CCE
.text:0000000000007EDE                 xchg    ax, ax
.text:0000000000007EE0
.text:0000000000007EE0 loc_7EE0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000007EE0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000007EE0                 mov     edx, 5Ch ; '\'
.text:0000000000007EE5                 mov     ebx, 5Ch ; '\'
.text:0000000000007EEA                 jmp     loc_7C84
.text:0000000000007EEA ; ---------------------------------------------------------------------------
.text:0000000000007EEF                 align 10h
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007EF0                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007EF0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000007EF5                 xor     r10d, r10d
.text:0000000000007EF8                 mov     ebx, 66h ; 'f'
.text:0000000000007EFD                 jmp     loc_7C84
.text:0000000000007EFD ; ---------------------------------------------------------------------------
.text:0000000000007F02                 align 8
.text:0000000000007F08
.text:0000000000007F08 loc_7F08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007F08                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007F08                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000007F0D                 xor     r10d, r10d
.text:0000000000007F10                 mov     ebx, 6Eh ; 'n'
.text:0000000000007F15                 jmp     loc_7C72
.text:0000000000007F15 ; ---------------------------------------------------------------------------
.text:0000000000007F1A                 align 20h
.text:0000000000007F20
.text:0000000000007F20 loc_7F20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007F20                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007F20                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000007F25                 jmp     loc_7CF0
.text:0000000000007F25 ; ---------------------------------------------------------------------------
.text:0000000000007F2A                 align 10h
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007F30                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007F30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000007F33
.text:0000000000007F33 loc_7F33:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000007F33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007F38                 setz    dl
.text:0000000000007F3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007F40                 jnz     loc_8ADA
.text:0000000000007F46                 mov     eax, r8d
.text:0000000000007F49                 mov     rcx, r15
.text:0000000000007F4C                 xor     eax, 1
.text:0000000000007F4F                 and     al, dl
.text:0000000000007F51                 jz      short loc_7F80
.text:0000000000007F53                 cmp     r13, r15
.text:0000000000007F56                 jbe     short loc_7F5D
.text:0000000000007F58                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007F5D
.text:0000000000007F5D loc_7F5D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000007F5D                 lea     rcx, [r15+1]
.text:0000000000007F61                 cmp     r13, rcx
.text:0000000000007F64                 jbe     short loc_7F6C
.text:0000000000007F66                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000007F6C
.text:0000000000007F6C loc_7F6C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000007F6C                 lea     rcx, [r15+2]
.text:0000000000007F70                 cmp     r13, rcx
.text:0000000000007F73                 ja      loc_85A9
.text:0000000000007F79
.text:0000000000007F79 loc_7F79:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000007F79                 lea     rcx, [r15+3]
.text:0000000000007F7D                 mov     r8d, eax
.text:0000000000007F80
.text:0000000000007F80 loc_7F80:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000007F80                 cmp     r13, rcx
.text:0000000000007F83                 jbe     short loc_7F8A
.text:0000000000007F85                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000007F8A
.text:0000000000007F8A loc_7F8A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000007F8A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007F8F                 lea     r15, [rcx+1]
.text:0000000000007F93                 jz      loc_8599
.text:0000000000007F99                 lea     rax, [rbp+1]
.text:0000000000007F9D                 cmp     rax, r11
.text:0000000000007FA0                 jnb     short loc_7FBB
.text:0000000000007FA2                 mov     rax, [rsp+0E8h+s]
.text:0000000000007FA7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000007FAC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000007FB0                 sub     eax, 30h ; '0'
.text:0000000000007FB3                 cmp     al, 9
.text:0000000000007FB5                 jbe     loc_87E9
.text:0000000000007FBB
.text:0000000000007FBB loc_7FBB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000007FBB                 mov     eax, r12d
.text:0000000000007FBE                 mov     ebx, 30h ; '0'
.text:0000000000007FC3                 xor     r12d, r12d
.text:0000000000007FC6                 jmp     loc_7B78
.text:0000000000007FC6 ; ---------------------------------------------------------------------------
.text:0000000000007FCB                 align 10h
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007FD0                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007FD0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000007FD5                 mov     r12d, r10d
.text:0000000000007FD8                 setz    dl
.text:0000000000007FDB                 xor     r10d, r10d
.text:0000000000007FDE                 xor     eax, eax
.text:0000000000007FE0                 jmp     loc_7B78
.text:0000000000007FE0 ; ---------------------------------------------------------------------------
.text:0000000000007FE5                 align 8
.text:0000000000007FE8
.text:0000000000007FE8 loc_7FE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007FE8                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000007FE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000007FED                 setz    dl
.text:0000000000007FF0                 xor     r10d, r10d
.text:0000000000007FF3                 jmp     loc_7DB8
.text:0000000000007FF3 ; ---------------------------------------------------------------------------
.text:0000000000007FF8                 align 20h
.text:0000000000008000
.text:0000000000008000 loc_8000:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008000                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000008000                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000008005                 setz    dl
.text:0000000000008008                 xor     r10d, r10d
.text:000000000000800B                 xor     r12d, r12d
.text:000000000000800E                 jmp     loc_7DC1
.text:000000000000800E ; ---------------------------------------------------------------------------
.text:0000000000008013                 align 8
.text:0000000000008018
.text:0000000000008018 loc_8018:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008018                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000008018                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000801D                 mov     r12d, r10d
.text:0000000000008020                 mov     ebx, 20h ; ' '
.text:0000000000008025                 setz    dl
.text:0000000000008028                 xor     r10d, r10d
.text:000000000000802B                 jmp     loc_7DC1
.text:0000000000008030 ; ---------------------------------------------------------------------------
.text:0000000000008030
.text:0000000000008030 loc_8030:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008030                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000008030                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000008035                 xor     r10d, r10d
.text:0000000000008038                 mov     ebx, 72h ; 'r'
.text:000000000000803D                 jmp     loc_7C72
.text:000000000000803D ; ---------------------------------------------------------------------------
.text:0000000000008042                 align 8
.text:0000000000008048
.text:0000000000008048 loc_8048:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008048                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000008048                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000804D                 jmp     loc_7CF0
.text:000000000000804D ; ---------------------------------------------------------------------------
.text:0000000000008052                 align 8
.text:0000000000008058
.text:0000000000008058 loc_8058:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008058                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000008058                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000805D                 xor     r10d, r10d
.text:0000000000008060                 mov     ebx, 74h ; 't'
.text:0000000000008065                 jmp     loc_7C72
.text:0000000000008065 ; ---------------------------------------------------------------------------
.text:000000000000806A                 align 10h
.text:0000000000008070
.text:0000000000008070 loc_8070:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008070                                         ; DATA XREF: .rodata:jpt_7ECA↓o
.text:0000000000008070                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000008075                 jmp     loc_7CF0
.text:0000000000008075 ; ---------------------------------------------------------------------------
.text:000000000000807A                 align 20h
.text:0000000000008080
.text:0000000000008080 loc_8080:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000008080                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000008080                 xor     r10d, r10d
.text:0000000000008083                 jmp     loc_7B20
.text:0000000000008083 ; ---------------------------------------------------------------------------
.text:0000000000008088                 align 10h
.text:0000000000008090
.text:0000000000008090 loc_8090:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000008090                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008095                 jnz     loc_8A00
.text:000000000000809B
.text:000000000000809B loc_809B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000809B                 add     rbp, 1
.text:000000000000809F                 mov     eax, r8d
.text:00000000000080A2                 xor     r12d, r12d
.text:00000000000080A5                 mov     ebx, 5Ch ; '\'
.text:00000000000080AA                 jmp     loc_7BBC
.text:00000000000080AA ; ---------------------------------------------------------------------------
.text:00000000000080AF                 align 10h
.text:00000000000080B0
.text:00000000000080B0 loc_80B0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000080B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000080B5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000080BA                 mov     r12d, r8d
.text:00000000000080BD                 mov     rbp, r11
.text:00000000000080C0                 setz    dl
.text:00000000000080C3                 mov     eax, ebx
.text:00000000000080C5                 test    r15, r15
.text:00000000000080C8                 setz    cl
.text:00000000000080CB                 and     eax, edx
.text:00000000000080CD                 and     al, cl
.text:00000000000080CF                 jnz     loc_8B36
.text:00000000000080D5                 mov     eax, ebx
.text:00000000000080D7                 xor     eax, 1
.text:00000000000080DA                 and     dl, al
.text:00000000000080DC                 jz      loc_8A4C
.text:00000000000080E2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000080E7                 jz      loc_8A4A
.text:00000000000080ED                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000080F2                 jnz     loc_8AED
.text:00000000000080F8                 test    r13, r13
.text:00000000000080FB                 setz    al
.text:00000000000080FE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000008104                 setnz   dl
.text:0000000000008107                 and     al, dl
.text:0000000000008109                 jz      loc_8B2C
.text:000000000000810F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008114
.text:0000000000008114 loc_8114:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000008114                 lea     rbx, aDir+0Ah   ; "'"
.text:000000000000811B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000811F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008127                 mov     r15d, 1
.text:000000000000812D                 mov     [rsp+0E8h+n], 1
.text:0000000000008136                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000813B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000008140                 mov     [rsp+0E8h+var_6C], al
.text:0000000000008144                 jmp     loc_7A23
.text:0000000000008144 ; ---------------------------------------------------------------------------
.text:0000000000008149                 align 10h
.text:0000000000008150
.text:0000000000008150 loc_8150:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000008150                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008155                 jnz     loc_8A00
.text:000000000000815B                 test    r13, r13
.text:000000000000815E                 jz      loc_8560
.text:0000000000008164                 xor     edx, edx
.text:0000000000008166                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000816C                 jnz     loc_8560
.text:0000000000008172
.text:0000000000008172 loc_8172:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000008172                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000008172                 mov     [rsp+0E8h+var_98], r13
.text:0000000000008177                 add     r15, 3
.text:000000000000817B                 xor     eax, eax
.text:000000000000817D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000008182                 xor     r8d, r8d
.text:0000000000008185                 mov     r13, rdx
.text:0000000000008188                 mov     ebx, 27h ; '''
.text:000000000000818D                 jmp     loc_7BA9
.text:000000000000818D ; ---------------------------------------------------------------------------
.text:0000000000008192                 align 8
.text:0000000000008198
.text:0000000000008198 loc_8198:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000008198                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000819D                 jz      short loc_81C0
.text:000000000000819F                 lea     rcx, [rbp+2]
.text:00000000000081A3                 cmp     rcx, r11
.text:00000000000081A6                 jnb     short loc_81C0
.text:00000000000081A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000081AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000081B2                 jz      loc_8942
.text:00000000000081B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000081C0
.text:00000000000081C0 loc_81C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000081C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000081C0                 xor     edx, edx
.text:00000000000081C2                 xor     r12d, r12d
.text:00000000000081C5                 xor     eax, eax
.text:00000000000081C7                 mov     ebx, 3Fh ; '?'
.text:00000000000081CC                 jmp     loc_7B78
.text:00000000000081CC ; ---------------------------------------------------------------------------
.text:00000000000081D1                 align 8
.text:00000000000081D8
.text:00000000000081D8 loc_81D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000081D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000081DD                 jnz     loc_8A00
.text:00000000000081E3                 xor     r12d, r12d
.text:00000000000081E6                 xor     eax, eax
.text:00000000000081E8                 mov     ebx, 3Fh ; '?'
.text:00000000000081ED                 jmp     loc_7BA9
.text:00000000000081ED ; ---------------------------------------------------------------------------
.text:00000000000081F2                 align 8
.text:00000000000081F8
.text:00000000000081F8 loc_81F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000081F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000008200                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008204                 mov     [rsp+0E8h+var_48], 0
.text:0000000000008210                 mov     [rsp+0E8h+ps], rax
.text:0000000000008215                 jnz     short loc_8244
.text:0000000000008217                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000821C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000008221                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000008226                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000822B                 call    _strlen
.text:0000000000008230                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000008236                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000823C                 mov     r11, rax
.text:000000000000823F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000008244
.text:0000000000008244 loc_8244:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000008244                 lea     rax, [rsp+0E8h+wc]
.text:000000000000824C                 xor     ecx, ecx
.text:000000000000824E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000008252                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000008257                 mov     rbx, rcx
.text:000000000000825A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000008262                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000008267                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000826C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000008274                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000008279                 mov     [rsp+0E8h+var_78], r13
.text:000000000000827E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000008283
.text:0000000000008283 loc_8283:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000008283                 mov     rax, [rsp+0E8h+s]
.text:0000000000008288                 lea     r14, [rbp+rbx+0]
.text:000000000000828D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000008292                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000008297                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000829C                 lea     r13, [rax+r14]
.text:00000000000082A0                 sub     rdx, r14
.text:00000000000082A3                 mov     rsi, r13
.text:00000000000082A6                 call    rpl_mbrtowc
.text:00000000000082AB                 test    rax, rax
.text:00000000000082AE                 mov     r15, rax
.text:00000000000082B1                 jz      short loc_8301
.text:00000000000082B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000082B7                 jz      loc_88D5
.text:00000000000082BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000082C1                 jz      loc_8861
.text:00000000000082C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000082CC                 setz    al
.text:00000000000082CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000082D3                 jnz     loc_8470
.text:00000000000082D9
.text:00000000000082D9 loc_82D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000082D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000082D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000082E0                 call    _iswprint
.text:00000000000082E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000082EA                 test    eax, eax
.text:00000000000082EC                 mov     eax, 0
.text:00000000000082F1                 cmovz   r12d, eax
.text:00000000000082F5                 add     rbx, r15
.text:00000000000082F8                 call    _mbsinit
.text:00000000000082FD                 test    eax, eax
.text:00000000000082FF                 jz      short loc_8283
.text:0000000000008301
.text:0000000000008301 loc_8301:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000008301                 mov     edx, r12d
.text:0000000000008304                 mov     rdi, rbx
.text:0000000000008307                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000830D                 xor     edx, 1
.text:0000000000008310                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000008315                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000831B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000831F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008327                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000832C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008331                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008336
.text:0000000000008336 loc_8336:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000008336                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000008336                 cmp     rdi, 1
.text:000000000000833A                 jbe     loc_893B
.text:0000000000008340
.text:0000000000008340 loc_8340:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000008340                 mov     rcx, rdi
.text:0000000000008343                 xor     esi, esi
.text:0000000000008345                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000834B                 add     rcx, rbp
.text:000000000000834E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000008353                 jmp     loc_840E
.text:0000000000008353 ; ---------------------------------------------------------------------------
.text:0000000000008358                 align 20h
.text:0000000000008360
.text:0000000000008360 loc_8360:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000008360                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008365                 setz    al
.text:0000000000008368                 test    r9b, r9b
.text:000000000000836B                 jnz     loc_8820
.text:0000000000008371                 mov     esi, r8d
.text:0000000000008374                 xor     esi, 1
.text:0000000000008377                 and     al, sil
.text:000000000000837A                 jz      short loc_83AB
.text:000000000000837C                 cmp     r13, r15
.text:000000000000837F                 jbe     short loc_8386
.text:0000000000008381                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008386
.text:0000000000008386 loc_8386:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000008386                 lea     rsi, [r15+1]
.text:000000000000838A                 cmp     r13, rsi
.text:000000000000838D                 jbe     short loc_8395
.text:000000000000838F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000008395
.text:0000000000008395 loc_8395:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000008395                 lea     rsi, [r15+2]
.text:0000000000008399                 cmp     r13, rsi
.text:000000000000839C                 jbe     short loc_83A4
.text:000000000000839E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000083A4
.text:00000000000083A4 loc_83A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000083A4                 add     r15, 3
.text:00000000000083A8                 mov     r8d, eax
.text:00000000000083AB
.text:00000000000083AB loc_83AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000083AB                 cmp     r13, r15
.text:00000000000083AE                 jbe     short loc_83B5
.text:00000000000083B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000083B5
.text:00000000000083B5 loc_83B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000083B5                 lea     rax, [r15+1]
.text:00000000000083B9                 cmp     r13, rax
.text:00000000000083BC                 jbe     short loc_83CB
.text:00000000000083BE                 mov     eax, ebx
.text:00000000000083C0                 shr     al, 6
.text:00000000000083C3                 add     eax, 30h ; '0'
.text:00000000000083C6                 mov     [r14+r15+1], al
.text:00000000000083CB
.text:00000000000083CB loc_83CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000083CB                 lea     rax, [r15+2]
.text:00000000000083CF                 cmp     r13, rax
.text:00000000000083D2                 jbe     short loc_83E4
.text:00000000000083D4                 mov     eax, ebx
.text:00000000000083D6                 shr     al, 3
.text:00000000000083D9                 and     eax, 7
.text:00000000000083DC                 add     eax, 30h ; '0'
.text:00000000000083DF                 mov     [r14+r15+2], al
.text:00000000000083E4
.text:00000000000083E4 loc_83E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000083E4                 and     ebx, 7
.text:00000000000083E7                 add     rbp, 1
.text:00000000000083EB                 add     r15, 3
.text:00000000000083EF                 add     ebx, 30h ; '0'
.text:00000000000083F2                 cmp     rbp, rcx
.text:00000000000083F5                 jnb     loc_7BE0
.text:00000000000083FB                 mov     esi, edx
.text:00000000000083FD
.text:00000000000083FD loc_83FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000083FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000083FD                 cmp     r13, r15
.text:0000000000008400                 jbe     short loc_8406
.text:0000000000008402                 mov     [r14+r15], bl
.text:0000000000008406
.text:0000000000008406 loc_8406:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000008406                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000840A                 add     r15, 1
.text:000000000000840E
.text:000000000000840E loc_840E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000840E                 test    dl, dl
.text:0000000000008410                 jnz     loc_8360
.text:0000000000008416                 mov     eax, esi
.text:0000000000008418                 xor     eax, 1
.text:000000000000841B                 and     eax, r8d
.text:000000000000841E                 test    r10b, r10b
.text:0000000000008421                 jz      short loc_8431
.text:0000000000008423                 cmp     r13, r15
.text:0000000000008426                 jbe     short loc_842D
.text:0000000000008428                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000842D
.text:000000000000842D loc_842D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000842D                 add     r15, 1
.text:0000000000008431
.text:0000000000008431 loc_8431:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000008431                 add     rbp, 1
.text:0000000000008435                 cmp     rbp, rcx
.text:0000000000008438                 jnb     loc_7BBC
.text:000000000000843E                 test    al, al
.text:0000000000008440                 jz      loc_883E
.text:0000000000008446                 cmp     r13, r15
.text:0000000000008449                 jbe     short loc_8450
.text:000000000000844B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008450
.text:0000000000008450 loc_8450:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000008450                 lea     rax, [r15+1]
.text:0000000000008454                 cmp     r13, rax
.text:0000000000008457                 jbe     short loc_845F
.text:0000000000008459                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000845F
.text:000000000000845F loc_845F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000845F                 add     r15, 2
.text:0000000000008463                 xor     r10d, r10d
.text:0000000000008466                 xor     r8d, r8d
.text:0000000000008469                 jmp     short loc_83FD
.text:0000000000008469 ; ---------------------------------------------------------------------------
.text:000000000000846B                 align 10h
.text:0000000000008470
.text:0000000000008470 loc_8470:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000008470                 cmp     r15, 1
.text:0000000000008474                 jz      loc_82D9
.text:000000000000847A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000847F                 lea     rcx, [rdi+r15]
.text:0000000000008483                 lea     rdx, [rdi+r14+1]
.text:0000000000008488                 lea     r8, [rcx+r14]
.text:000000000000848C                 jmp     short loc_849D
.text:000000000000848C ; ---------------------------------------------------------------------------
.text:000000000000848E                 align 10h
.text:0000000000008490
.text:0000000000008490 loc_8490:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000008490                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000008490                 add     rdx, 1
.text:0000000000008494                 cmp     r8, rdx
.text:0000000000008497                 jz      loc_82D9
.text:000000000000849D
.text:000000000000849D loc_849D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000849D                 movzx   ecx, byte ptr [rdx]
.text:00000000000084A0                 sub     ecx, 5Bh ; '['
.text:00000000000084A3                 cmp     cl, 21h ; '!'
.text:00000000000084A6                 ja      short loc_8490
.text:00000000000084A8                 mov     esi, 1
.text:00000000000084AD                 shl     rsi, cl
.text:00000000000084B0                 mov     rcx, rsi
.text:00000000000084B3                 mov     rsi, 20000002Bh
.text:00000000000084BD                 test    rcx, rsi
.text:00000000000084C0                 jz      short loc_8490
.text:00000000000084C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000084C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000084CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000084D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000084D9
.text:00000000000084D9 loc_84D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000084D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000084D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000084DE                 jz      short loc_84F0
.text:00000000000084E0                 test    al, al
.text:00000000000084E2                 mov     eax, 4
.text:00000000000084E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000084EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000084F0
.text:00000000000084F0 loc_84F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000084F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000084F0                 sub     rsp, 8
.text:00000000000084F4                 mov     rcx, rbp
.text:00000000000084F7                 mov     rsi, r13
.text:00000000000084FA                 push    [rsp+0F0h+var_88]
.text:00000000000084FE                 push    [rsp+0F8h+var_80]
.text:0000000000008502                 mov     rdi, r14
.text:0000000000008505                 push    0
.text:0000000000008507                 mov     r9d, [rsp+108h+var_70]
.text:000000000000850F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000008514                 mov     rdx, [rsp+108h+s]
.text:0000000000008519                 and     r9d, 0FFFFFFFDh
.text:000000000000851D                 call    quotearg_buffer_restyled
.text:0000000000008522                 add     rsp, 20h
.text:0000000000008526                 mov     r15, rax
.text:0000000000008529
.text:0000000000008529 loc_8529:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000008529                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000008529                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000008531                 xor     rbx, fs:28h
.text:000000000000853A                 mov     rax, r15
.text:000000000000853D                 jnz     loc_8B43
.text:0000000000008543                 add     rsp, 0B8h
.text:000000000000854A                 pop     rbx
.text:000000000000854B                 pop     rbp
.text:000000000000854C                 pop     r12
.text:000000000000854E                 pop     r13
.text:0000000000008550                 pop     r14
.text:0000000000008552                 pop     r15
.text:0000000000008554                 retn
.text:0000000000008554 ; ---------------------------------------------------------------------------
.text:0000000000008555                 align 8
.text:0000000000008558
.text:0000000000008558 loc_8558:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000008558                 mov     rbp, r11
.text:000000000000855B                 jmp     loc_84D9
.text:0000000000008560 ; ---------------------------------------------------------------------------
.text:0000000000008560
.text:0000000000008560 loc_8560:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000008560                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000008560                 cmp     r13, r15
.text:0000000000008563                 jbe     short loc_856A
.text:0000000000008565                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000856A
.text:000000000000856A loc_856A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000856A                 lea     rax, [r15+1]
.text:000000000000856E                 cmp     r13, rax
.text:0000000000008571                 jbe     short loc_8579
.text:0000000000008573                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000008579
.text:0000000000008579 loc_8579:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000008579                 lea     rax, [r15+2]
.text:000000000000857D                 cmp     r13, rax
.text:0000000000008580                 jbe     loc_8B72
.text:0000000000008586                 mov     rdx, r13
.text:0000000000008589                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000858F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008594                 jmp     loc_8172
.text:0000000000008599 ; ---------------------------------------------------------------------------
.text:0000000000008599
.text:0000000000008599 loc_8599:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000008599                 mov     eax, r12d
.text:000000000000859C                 mov     ebx, 30h ; '0'
.text:00000000000085A1                 xor     r12d, r12d
.text:00000000000085A4                 jmp     loc_7BA9
.text:00000000000085A9 ; ---------------------------------------------------------------------------
.text:00000000000085A9
.text:00000000000085A9 loc_85A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000085A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000085AF                 jmp     loc_7F79
.text:00000000000085B4 ; ---------------------------------------------------------------------------
.text:00000000000085B4
.text:00000000000085B4 loc_85B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000085B4                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:00000000000085B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000085B6                 jnz     loc_79E3        ; jumptable 00000000000121F1 case 1
.text:00000000000085BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000085C1
.text:00000000000085C1 loc_85C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000085C1                 test    r13, r13
.text:00000000000085C4                 jnz     loc_8B5A
.text:00000000000085CA                 lea     rax, aDir+0Ah   ; "'"
.text:00000000000085D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000085DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000085DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000085E4                 xor     r12d, r12d
.text:00000000000085E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000085EC                 mov     [rsp+0E8h+n], 1
.text:00000000000085F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000085FA                 mov     r15d, 1
.text:0000000000008600                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008608                 jmp     loc_7A23
.text:0000000000008608 ; ---------------------------------------------------------------------------
.text:000000000000860D                 align 10h
.text:0000000000008610
.text:0000000000008610 loc_8610:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008610                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:0000000000008610                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000008612                 jnz     loc_8A0D
.text:0000000000008618                 test    r13, r13
.text:000000000000861B                 jz      loc_8846
.text:0000000000008621                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000008625                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000862A                 xor     r12d, r12d
.text:000000000000862D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008632                 mov     [rsp+0E8h+var_98], 0
.text:000000000000863B
.text:000000000000863B loc_863B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000863B                 lea     rax, unk_F653
.text:0000000000008642                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008647                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000864C                 mov     [rsp+0E8h+n], 1
.text:0000000000008655                 mov     r15d, 1
.text:000000000000865B                 mov     [rsp+0E8h+s2], rax
.text:0000000000008660                 jmp     loc_7A23
.text:0000000000008665 ; ---------------------------------------------------------------------------
.text:0000000000008665
.text:0000000000008665 loc_8665:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008665                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:0000000000008665                 lea     rax, unk_F653   ; jumptable 00000000000121F1 case 6
.text:000000000000866C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008671                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008676                 xor     r12d, r12d
.text:0000000000008679                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008682                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008687                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000868C                 mov     [rsp+0E8h+n], 1
.text:0000000000008695                 xor     r15d, r15d
.text:0000000000008698                 mov     [rsp+0E8h+s2], rax
.text:000000000000869D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000086A5                 jmp     loc_7A23
.text:00000000000086AA ; ---------------------------------------------------------------------------
.text:00000000000086AA
.text:00000000000086AA loc_86AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000086AA                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:00000000000086AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000086AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000086B4                 xor     r12d, r12d
.text:00000000000086B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000086C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000086C5                 xor     r15d, r15d
.text:00000000000086C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000086CD                 mov     [rsp+0E8h+n], 0
.text:00000000000086D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000086DF                 jmp     loc_7A23
.text:00000000000086E4 ; ---------------------------------------------------------------------------
.text:00000000000086E4
.text:00000000000086E4 loc_86E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000086E4                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:00000000000086E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000086E9                 jz      short loc_8741
.text:00000000000086EB                 lea     rsi, asc_F655   ; "`"
.text:00000000000086F2                 xor     edi, edi        ; domainname
.text:00000000000086F4                 mov     edx, 5          ; category
.text:00000000000086F9                 call    _dcgettext
.text:00000000000086FE                 mov     rcx, rax
.text:0000000000008701                 mov     [rsp+0E8h+var_80], rax
.text:0000000000008706                 lea     rax, asc_F655   ; "`"
.text:000000000000870D                 cmp     rcx, rax
.text:0000000000008710                 jz      loc_8AAE
.text:0000000000008716
.text:0000000000008716 loc_8716:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000008716                 lea     rsi, aDir+0Ah   ; msgid
.text:000000000000871D                 xor     edi, edi        ; domainname
.text:000000000000871F                 mov     edx, 5          ; category
.text:0000000000008724                 call    _dcgettext
.text:0000000000008729                 mov     rcx, rax
.text:000000000000872C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000008731                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000008738                 cmp     rcx, rax
.text:000000000000873B                 jz      loc_8AC4
.text:0000000000008741
.text:0000000000008741 loc_8741:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000008741                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000008741                 xor     r15d, r15d
.text:0000000000008744                 test    ebx, ebx
.text:0000000000008746                 jz      loc_890D
.text:000000000000874C
.text:000000000000874C loc_874C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000874C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000874C                 test    ebx, ebx
.text:000000000000874E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000008753                 setnz   [rsp+0E8h+var_D9]
.text:0000000000008758                 xor     r12d, r12d
.text:000000000000875B                 mov     rdi, rbx        ; s
.text:000000000000875E                 call    _strlen
.text:0000000000008763                 mov     [rsp+0E8h+s2], rbx
.text:0000000000008768                 mov     [rsp+0E8h+n], rax
.text:000000000000876D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008772                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008777                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008780                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008785                 jmp     loc_7A23
.text:000000000000878A ; ---------------------------------------------------------------------------
.text:000000000000878A
.text:000000000000878A loc_878A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000878A                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:000000000000878A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000878F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008794                 xor     r12d, r12d
.text:0000000000008797                 mov     [rsp+0E8h+var_98], 0
.text:00000000000087A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000087A5                 xor     r15d, r15d
.text:00000000000087A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000087AD                 mov     [rsp+0E8h+n], 0
.text:00000000000087B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000087BF                 jmp     loc_7A23
.text:00000000000087C4 ; ---------------------------------------------------------------------------
.text:00000000000087C4
.text:00000000000087C4 loc_87C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000087C4                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:00000000000087C4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000087C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000087CE                 xor     r12d, r12d
.text:00000000000087D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000087DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000087DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000087E4                 jmp     loc_7A03
.text:00000000000087E9 ; ---------------------------------------------------------------------------
.text:00000000000087E9
.text:00000000000087E9 loc_87E9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000087E9                 cmp     r13, r15
.text:00000000000087EC                 jbe     short loc_87F3
.text:00000000000087EE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000087F3
.text:00000000000087F3 loc_87F3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000087F3                 lea     rax, [rcx+2]
.text:00000000000087F7                 cmp     r13, rax
.text:00000000000087FA                 jbe     short loc_8802
.text:00000000000087FC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000008802
.text:0000000000008802 loc_8802:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000008802                 mov     eax, r12d
.text:0000000000008805                 lea     r15, [rcx+3]
.text:0000000000008809                 xor     r12d, r12d
.text:000000000000880C                 mov     ebx, 30h ; '0'
.text:0000000000008811                 jmp     loc_7B78
.text:0000000000008811 ; ---------------------------------------------------------------------------
.text:0000000000008816                 align 20h
.text:0000000000008820
.text:0000000000008820 loc_8820:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000008820                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008825                 mov     rbp, r11
.text:0000000000008828                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000882C                 jmp     loc_84D9
.text:0000000000008831 ; ---------------------------------------------------------------------------
.text:0000000000008831
.text:0000000000008831 loc_8831:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000008831                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000008836                 xor     r12d, r12d
.text:0000000000008839                 jmp     loc_8340
.text:000000000000883E ; ---------------------------------------------------------------------------
.text:000000000000883E
.text:000000000000883E loc_883E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000883E                 xor     r10d, r10d
.text:0000000000008841                 jmp     loc_83FD
.text:0000000000008846 ; ---------------------------------------------------------------------------
.text:0000000000008846
.text:0000000000008846 loc_8846:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000008846                 mov     [rsp+0E8h+var_98], 0
.text:000000000000884F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008854                 xor     r12d, r12d
.text:0000000000008857                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000885C                 jmp     loc_863B
.text:0000000000008861 ; ---------------------------------------------------------------------------
.text:0000000000008861
.text:0000000000008861 loc_8861:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000008861                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008866                 mov     rsi, r14
.text:0000000000008869                 mov     rcx, r13
.text:000000000000886C                 mov     rax, rbx
.text:000000000000886F                 mov     rdi, rbx
.text:0000000000008872                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000008878                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000887D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000008885                 cmp     rsi, r11
.text:0000000000008888                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000888E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008896                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000889B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000088A0                 jnb     short loc_88C8
.text:00000000000088A2                 cmp     byte ptr [rcx], 0
.text:00000000000088A5                 jnz     short loc_88B7
.text:00000000000088A7                 jmp     short loc_88C8
.text:00000000000088A7 ; ---------------------------------------------------------------------------
.text:00000000000088A9                 align 10h
.text:00000000000088B0
.text:00000000000088B0 loc_88B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000088B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000088B5                 jz      short loc_88C5
.text:00000000000088B7
.text:00000000000088B7 loc_88B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000088B7                 add     rax, 1
.text:00000000000088BB                 lea     rdx, [rbp+rax+0]
.text:00000000000088C0                 cmp     r11, rdx
.text:00000000000088C3                 ja      short loc_88B0
.text:00000000000088C5
.text:00000000000088C5 loc_88C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000088C5                 mov     rdi, rax
.text:00000000000088C8
.text:00000000000088C8 loc_88C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000088C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000088C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000088CD                 xor     r12d, r12d
.text:00000000000088D0                 jmp     loc_8336
.text:00000000000088D5 ; ---------------------------------------------------------------------------
.text:00000000000088D5
.text:00000000000088D5 loc_88D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000088D5                 mov     rdi, rbx
.text:00000000000088D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000088DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000088E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000088E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000088F1                 xor     r12d, r12d
.text:00000000000088F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000088F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000088FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008903                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000008908                 jmp     loc_8336
.text:000000000000890D ; ---------------------------------------------------------------------------
.text:000000000000890D
.text:000000000000890D loc_890D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000890D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000008912                 movzx   eax, byte ptr [rdx]
.text:0000000000008915                 test    al, al
.text:0000000000008917                 jz      loc_874C
.text:000000000000891D                 nop     dword ptr [rax]
.text:0000000000008920
.text:0000000000008920 loc_8920:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000008920                 cmp     r13, r15
.text:0000000000008923                 jbe     short loc_8929
.text:0000000000008925                 mov     [r14+r15], al
.text:0000000000008929
.text:0000000000008929 loc_8929:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000008929                 add     r15, 1
.text:000000000000892D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000008932                 test    al, al
.text:0000000000008934                 jnz     short loc_8920
.text:0000000000008936                 jmp     loc_874C
.text:000000000000893B ; ---------------------------------------------------------------------------
.text:000000000000893B
.text:000000000000893B loc_893B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000893B                 mov     eax, edx
.text:000000000000893D                 jmp     loc_7E97
.text:0000000000008942 ; ---------------------------------------------------------------------------
.text:0000000000008942
.text:0000000000008942 loc_8942:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000008942                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000008946                 cmp     bl, 3Eh ; '>'
.text:0000000000008949                 ja      loc_81C0
.text:000000000000894F                 mov     rax, 7000A38200000000h
.text:0000000000008959                 bt      rax, rbx
.text:000000000000895D                 jnb     loc_81C0
.text:0000000000008963                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008968                 jnz     loc_8B52
.text:000000000000896E                 cmp     r13, r15
.text:0000000000008971                 jbe     short loc_8978
.text:0000000000008973                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000008978
.text:0000000000008978 loc_8978:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000008978                 lea     rax, [r15+1]
.text:000000000000897C                 cmp     r13, rax
.text:000000000000897F                 jbe     short loc_8987
.text:0000000000008981                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000008987
.text:0000000000008987 loc_8987:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000008987                 lea     rax, [r15+2]
.text:000000000000898B                 cmp     r13, rax
.text:000000000000898E                 jbe     short loc_8996
.text:0000000000008990                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000008996
.text:0000000000008996 loc_8996:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000008996                 lea     rax, [r15+3]
.text:000000000000899A                 cmp     r13, rax
.text:000000000000899D                 jbe     short loc_89A5
.text:000000000000899F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000089A5
.text:00000000000089A5 loc_89A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000089A5                 add     r15, 4
.text:00000000000089A9                 xor     edx, edx
.text:00000000000089AB                 xor     r12d, r12d
.text:00000000000089AE                 xor     eax, eax
.text:00000000000089B0                 mov     rbp, rcx
.text:00000000000089B3                 jmp     loc_7B78
.text:00000000000089B8 ; ---------------------------------------------------------------------------
.text:00000000000089B8
.text:00000000000089B8 loc_89B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000089B8                                         ; DATA XREF: .rodata:jpt_79E1↓o
.text:00000000000089B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000089BA                 jz      loc_8B48
.text:00000000000089C0                 lea     rax, aDir+0Ah   ; "'"
.text:00000000000089C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000089CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000089D1                 xor     r12d, r12d
.text:00000000000089D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000089DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000089E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000089E7                 mov     [rsp+0E8h+n], 1
.text:00000000000089F0                 xor     r15d, r15d
.text:00000000000089F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000089F8                 jmp     loc_7A23
.text:00000000000089F8 ; ---------------------------------------------------------------------------
.text:00000000000089FD                 align 20h
.text:0000000000008A00
.text:0000000000008A00 loc_8A00:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000008A00                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000008A00                 mov     rbp, r11
.text:0000000000008A03                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000008A08                 jmp     loc_84D9
.text:0000000000008A0D ; ---------------------------------------------------------------------------
.text:0000000000008A0D
.text:0000000000008A0D loc_8A0D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000008A0D                 lea     rax, unk_F653
.text:0000000000008A14                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008A19                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008A1E                 xor     r12d, r12d
.text:0000000000008A21                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008A2A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008A2F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008A34                 mov     [rsp+0E8h+n], 1
.text:0000000000008A3D                 xor     r15d, r15d
.text:0000000000008A40                 mov     [rsp+0E8h+s2], rax
.text:0000000000008A45                 jmp     loc_7A23
.text:0000000000008A4A ; ---------------------------------------------------------------------------
.text:0000000000008A4A
.text:0000000000008A4A loc_8A4A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000008A4A                 mov     eax, edx
.text:0000000000008A4C
.text:0000000000008A4C loc_8A4C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000008A4C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000008A4C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000008A51                 test    rbx, rbx
.text:0000000000008A54                 jz      short loc_8A82
.text:0000000000008A56                 test    al, al
.text:0000000000008A58                 jz      short loc_8A82
.text:0000000000008A5A                 movzx   ecx, byte ptr [rbx]
.text:0000000000008A5D                 mov     rax, rbx
.text:0000000000008A60                 test    cl, cl
.text:0000000000008A62                 jz      short loc_8A82
.text:0000000000008A64                 mov     rdx, r15
.text:0000000000008A67                 sub     rax, r15
.text:0000000000008A6A
.text:0000000000008A6A loc_8A6A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000008A6A                 cmp     r13, rdx
.text:0000000000008A6D                 jbe     short loc_8A73
.text:0000000000008A6F                 mov     [r14+rdx], cl
.text:0000000000008A73
.text:0000000000008A73 loc_8A73:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000008A73                 add     rdx, 1
.text:0000000000008A77                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000008A7B                 test    cl, cl
.text:0000000000008A7D                 jnz     short loc_8A6A
.text:0000000000008A7F                 mov     r15, rdx
.text:0000000000008A82
.text:0000000000008A82 loc_8A82:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000008A82                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000008A82                 cmp     r13, r15
.text:0000000000008A85                 jbe     loc_8529
.text:0000000000008A8B                 mov     byte ptr [r14+r15], 0
.text:0000000000008A90                 jmp     loc_8529
.text:0000000000008A95 ; ---------------------------------------------------------------------------
.text:0000000000008A95
.text:0000000000008A95 loc_8A95:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000008A95                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008A9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008A9F                 mov     rbp, r11
.text:0000000000008AA2                 setz    al
.text:0000000000008AA5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000008AA9                 jmp     loc_84D9
.text:0000000000008AAE ; ---------------------------------------------------------------------------
.text:0000000000008AAE
.text:0000000000008AAE loc_8AAE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000008AAE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000008AB2                 mov     rdi, rcx
.text:0000000000008AB5                 call    gettext_quote
.text:0000000000008ABA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000008ABF                 jmp     loc_8716
.text:0000000000008AC4 ; ---------------------------------------------------------------------------
.text:0000000000008AC4
.text:0000000000008AC4 loc_8AC4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000008AC4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000008AC8                 mov     rdi, rcx
.text:0000000000008ACB                 call    gettext_quote
.text:0000000000008AD0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000008AD5                 jmp     loc_8741
.text:0000000000008ADA ; ---------------------------------------------------------------------------
.text:0000000000008ADA
.text:0000000000008ADA loc_8ADA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000008ADA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008ADF                 mov     rbp, r11
.text:0000000000008AE2                 mov     eax, edx
.text:0000000000008AE4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000008AE8                 jmp     loc_84D9
.text:0000000000008AED ; ---------------------------------------------------------------------------
.text:0000000000008AED
.text:0000000000008AED loc_8AED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000008AED                 sub     rsp, 8
.text:0000000000008AF1                 mov     r8d, 5
.text:0000000000008AF7                 mov     rcx, r11
.text:0000000000008AFA                 push    [rsp+0F0h+var_88]
.text:0000000000008AFE                 push    [rsp+0F8h+var_80]
.text:0000000000008B02                 mov     rdi, r14
.text:0000000000008B05                 push    [rsp+100h+var_C8]
.text:0000000000008B09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000008B11                 mov     rdx, [rsp+108h+s]
.text:0000000000008B16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000008B1B                 call    quotearg_buffer_restyled
.text:0000000000008B20                 add     rsp, 20h
.text:0000000000008B24                 mov     r15, rax
.text:0000000000008B27                 jmp     loc_8529
.text:0000000000008B2C ; ---------------------------------------------------------------------------
.text:0000000000008B2C
.text:0000000000008B2C loc_8B2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000008B2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000008B31                 jmp     loc_8A4C
.text:0000000000008B36 ; ---------------------------------------------------------------------------
.text:0000000000008B36
.text:0000000000008B36 loc_8B36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000008B36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008B3E                 jmp     loc_84D9
.text:0000000000008B43 ; ---------------------------------------------------------------------------
.text:0000000000008B43
.text:0000000000008B43 loc_8B43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000008B43                 call    ___stack_chk_fail
.text:0000000000008B48 ; ---------------------------------------------------------------------------
.text:0000000000008B48
.text:0000000000008B48 loc_8B48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000008B48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000008B4D                 jmp     loc_85C1
.text:0000000000008B52 ; ---------------------------------------------------------------------------
.text:0000000000008B52
.text:0000000000008B52 loc_8B52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000008B52                 mov     rbp, r11
.text:0000000000008B55                 jmp     loc_84F0
.text:0000000000008B5A ; ---------------------------------------------------------------------------
.text:0000000000008B5A
.text:0000000000008B5A loc_8B5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000008B5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008B5F                 xor     eax, eax
.text:0000000000008B61                 xor     r12d, r12d
.text:0000000000008B64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008B6D                 jmp     loc_8114
.text:0000000000008B72 ; ---------------------------------------------------------------------------
.text:0000000000008B72
.text:0000000000008B72 loc_8B72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000008B72                 mov     rdx, r13
.text:0000000000008B75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008B7A                 jmp     loc_8172
.text:0000000000008B7F ; ---------------------------------------------------------------------------
.text:0000000000008B7F
.text:0000000000008B7F def_79E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000008B7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000008B7F ; } // starts at 7950
.text:0000000000008B7F quotearg_buffer_restyled endp
.text:0000000000008B7F
.text:0000000000008B7F ; ---------------------------------------------------------------------------
.text:0000000000008B84                 align 10h
.text:0000000000008B90
.text:0000000000008B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B90
.text:0000000000008B90
.text:0000000000008B90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000008B90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000008B90
.text:0000000000008B90 var_50          = qword ptr -50h
.text:0000000000008B90 var_48          = qword ptr -48h
.text:0000000000008B90 var_40          = dword ptr -40h
.text:0000000000008B90 var_3C          = dword ptr -3Ch
.text:0000000000008B90
.text:0000000000008B90 ; __unwind {
.text:0000000000008B90                 push    r15
.text:0000000000008B92                 push    r14
.text:0000000000008B94                 movsxd  r15, edi
.text:0000000000008B97                 push    r13
.text:0000000000008B99                 push    r12
.text:0000000000008B9B                 mov     r14, rdx
.text:0000000000008B9E                 push    rbp
.text:0000000000008B9F                 push    rbx
.text:0000000000008BA0                 mov     rbp, rcx
.text:0000000000008BA3                 sub     rsp, 28h
.text:0000000000008BA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000008BAC                 call    ___errno_location
.text:0000000000008BB1                 mov     r13, rax
.text:0000000000008BB4                 mov     eax, [rax]
.text:0000000000008BB6                 test    r15d, r15d
.text:0000000000008BB9                 mov     rbx, cs:slotvec
.text:0000000000008BC0                 mov     [rsp+58h+var_40], eax
.text:0000000000008BC4                 js      loc_8D31
.text:0000000000008BCA                 cmp     cs:nslots, r15d
.text:0000000000008BD1                 jg      short loc_8C35
.text:0000000000008BD3                 cmp     r15d, 7FFFFFFFh
.text:0000000000008BDA                 jz      loc_8D36
.text:0000000000008BE0                 lea     r12d, [r15+1]
.text:0000000000008BE4                 lea     rax, slotvec0
.text:0000000000008BEB                 movsxd  rsi, r12d
.text:0000000000008BEE                 shl     rsi, 4
.text:0000000000008BF2                 cmp     rbx, rax
.text:0000000000008BF5                 jz      loc_8D10
.text:0000000000008BFB                 mov     rdi, rbx
.text:0000000000008BFE                 call    xrealloc
.text:0000000000008C03                 mov     rbx, rax
.text:0000000000008C06                 mov     cs:slotvec, rax
.text:0000000000008C0D
.text:0000000000008C0D loc_8C0D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000008C0D                 movsxd  rdi, cs:nslots
.text:0000000000008C14                 mov     edx, r12d
.text:0000000000008C17                 xor     esi, esi        ; c
.text:0000000000008C19                 sub     edx, edi
.text:0000000000008C1B                 shl     rdi, 4
.text:0000000000008C1F                 movsxd  rdx, edx
.text:0000000000008C22                 add     rdi, rbx        ; s
.text:0000000000008C25                 shl     rdx, 4          ; n
.text:0000000000008C29                 call    _memset
.text:0000000000008C2E                 mov     cs:nslots, r12d
.text:0000000000008C35
.text:0000000000008C35 loc_8C35:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000008C35                 mov     eax, [rbp+4]
.text:0000000000008C38                 shl     r15, 4
.text:0000000000008C3C                 sub     rsp, 8
.text:0000000000008C40                 add     rbx, r15
.text:0000000000008C43                 lea     r15, [rbp+8]
.text:0000000000008C47                 mov     r8d, [rbp+0]
.text:0000000000008C4B                 mov     r11, [rbx]
.text:0000000000008C4E                 mov     r12, [rbx+8]
.text:0000000000008C52                 mov     rcx, r14
.text:0000000000008C55                 or      eax, 1
.text:0000000000008C58                 mov     [rsp+60h+var_3C], eax
.text:0000000000008C5C                 push    qword ptr [rbp+30h]
.text:0000000000008C5F                 mov     r9d, eax
.text:0000000000008C62                 push    qword ptr [rbp+28h]
.text:0000000000008C65                 push    r15
.text:0000000000008C67                 mov     rsi, r11
.text:0000000000008C6A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000008C6F                 mov     rdi, r12
.text:0000000000008C72                 mov     [rsp+78h+var_48], r11
.text:0000000000008C77                 call    quotearg_buffer_restyled
.text:0000000000008C7C                 add     rsp, 20h
.text:0000000000008C80                 mov     r11, [rsp+58h+var_48]
.text:0000000000008C85                 cmp     r11, rax
.text:0000000000008C88                 ja      short loc_8CF1
.text:0000000000008C8A                 lea     rsi, [rax+1]
.text:0000000000008C8E                 lea     rax, slot0
.text:0000000000008C95                 cmp     r12, rax
.text:0000000000008C98                 mov     [rbx], rsi
.text:0000000000008C9B                 jz      short loc_8CAF
.text:0000000000008C9D                 mov     rdi, r12        ; ptr
.text:0000000000008CA0                 mov     [rsp+58h+var_48], rsi
.text:0000000000008CA5                 call    _free
.text:0000000000008CAA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000008CAF
.text:0000000000008CAF loc_8CAF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000008CAF                 mov     rdi, rsi
.text:0000000000008CB2                 mov     [rsp+58h+var_48], rsi
.text:0000000000008CB7                 call    xmalloc
.text:0000000000008CBC                 sub     rsp, 8
.text:0000000000008CC0                 mov     [rbx+8], rax
.text:0000000000008CC4                 mov     r8d, [rbp+0]
.text:0000000000008CC8                 push    qword ptr [rbp+30h]
.text:0000000000008CCB                 push    qword ptr [rbp+28h]
.text:0000000000008CCE                 mov     rcx, r14
.text:0000000000008CD1                 push    r15
.text:0000000000008CD3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000008CD8                 mov     rdi, rax
.text:0000000000008CDB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000008CE0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000008CE5                 mov     r12, rax
.text:0000000000008CE8                 call    quotearg_buffer_restyled
.text:0000000000008CED                 add     rsp, 20h
.text:0000000000008CF1
.text:0000000000008CF1 loc_8CF1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000008CF1                 mov     eax, [rsp+58h+var_40]
.text:0000000000008CF5                 mov     [r13+0], eax
.text:0000000000008CF9                 add     rsp, 28h
.text:0000000000008CFD                 mov     rax, r12
.text:0000000000008D00                 pop     rbx
.text:0000000000008D01                 pop     rbp
.text:0000000000008D02                 pop     r12
.text:0000000000008D04                 pop     r13
.text:0000000000008D06                 pop     r14
.text:0000000000008D08                 pop     r15
.text:0000000000008D0A                 retn
.text:0000000000008D0A ; ---------------------------------------------------------------------------
.text:0000000000008D0B                 align 10h
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000008D10                 xor     edi, edi
.text:0000000000008D12                 call    xrealloc
.text:0000000000008D17                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000008D1F                 mov     rbx, rax
.text:0000000000008D22                 mov     cs:slotvec, rax
.text:0000000000008D29                 movups  xmmword ptr [rax], xmm0
.text:0000000000008D2C                 jmp     loc_8C0D
.text:0000000000008D31 ; ---------------------------------------------------------------------------
.text:0000000000008D31
.text:0000000000008D31 loc_8D31:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000008D31                 call    _abort
.text:0000000000008D36 ; ---------------------------------------------------------------------------
.text:0000000000008D36
.text:0000000000008D36 loc_8D36:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000008D36                 call    xalloc_die
.text:0000000000008D36 ; } // starts at 8B90
.text:0000000000008D36 quotearg_n_options endp
.text:0000000000008D36
.text:0000000000008D36 ; ---------------------------------------------------------------------------
.text:0000000000008D3B                 align 20h
.text:0000000000008D40
.text:0000000000008D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D40
.text:0000000000008D40 ; Attributes: info_from_lumina
.text:0000000000008D40
.text:0000000000008D40 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000008D40                 public clone_quoting_options
.text:0000000000008D40 clone_quoting_options proc near
.text:0000000000008D40 ; __unwind {
.text:0000000000008D40                 push    r12
.text:0000000000008D42                 push    rbp
.text:0000000000008D43                 push    rbx
.text:0000000000008D44                 mov     rbx, rdi
.text:0000000000008D47                 call    ___errno_location
.text:0000000000008D4C                 mov     r12d, [rax]
.text:0000000000008D4F                 mov     rbp, rax
.text:0000000000008D52                 lea     rax, default_quoting_options
.text:0000000000008D59                 test    rbx, rbx
.text:0000000000008D5C                 mov     esi, 38h ; '8'  ; n
.text:0000000000008D61                 cmovz   rbx, rax
.text:0000000000008D65                 mov     rdi, rbx        ; src
.text:0000000000008D68                 call    xmemdup
.text:0000000000008D6D                 mov     [rbp+0], r12d
.text:0000000000008D71                 pop     rbx
.text:0000000000008D72                 pop     rbp
.text:0000000000008D73                 pop     r12
.text:0000000000008D75                 retn
.text:0000000000008D75 ; } // starts at 8D40
.text:0000000000008D75 clone_quoting_options endp
.text:0000000000008D75
.text:0000000000008D75 ; ---------------------------------------------------------------------------
.text:0000000000008D76                 align 20h
.text:0000000000008D80
.text:0000000000008D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D80
.text:0000000000008D80
.text:0000000000008D80                 public get_quoting_style
.text:0000000000008D80 get_quoting_style proc near             ; CODE XREF: print_stat+34B↑p
.text:0000000000008D80                                         ; print_stat+3BD↑p
.text:0000000000008D80 ; __unwind {
.text:0000000000008D80                 lea     rax, default_quoting_options
.text:0000000000008D87                 test    rdi, rdi
.text:0000000000008D8A                 cmovz   rdi, rax
.text:0000000000008D8E                 mov     eax, [rdi]
.text:0000000000008D90                 retn
.text:0000000000008D90 ; } // starts at 8D80
.text:0000000000008D90 get_quoting_style endp
.text:0000000000008D90
.text:0000000000008D90 ; ---------------------------------------------------------------------------
.text:0000000000008D91                 align 20h
.text:0000000000008DA0
.text:0000000000008DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DA0
.text:0000000000008DA0
.text:0000000000008DA0                 public set_quoting_style
.text:0000000000008DA0 set_quoting_style proc near             ; CODE XREF: main+251↑p
.text:0000000000008DA0                                         ; main+4A8↑p ...
.text:0000000000008DA0 ; __unwind {
.text:0000000000008DA0                 lea     rax, default_quoting_options
.text:0000000000008DA7                 test    rdi, rdi
.text:0000000000008DAA                 cmovz   rdi, rax
.text:0000000000008DAE                 mov     [rdi], esi
.text:0000000000008DB0                 retn
.text:0000000000008DB0 ; } // starts at 8DA0
.text:0000000000008DB0 set_quoting_style endp
.text:0000000000008DB0
.text:0000000000008DB0 ; ---------------------------------------------------------------------------
.text:0000000000008DB1                 align 20h
.text:0000000000008DC0
.text:0000000000008DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DC0
.text:0000000000008DC0 ; Attributes: info_from_lumina
.text:0000000000008DC0
.text:0000000000008DC0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000008DC0                 public set_char_quoting
.text:0000000000008DC0 set_char_quoting proc near
.text:0000000000008DC0 ; __unwind {
.text:0000000000008DC0                 lea     rax, default_quoting_options
.text:0000000000008DC7                 test    rdi, rdi
.text:0000000000008DCA                 mov     ecx, esi
.text:0000000000008DCC                 cmovz   rdi, rax
.text:0000000000008DD0                 mov     eax, esi
.text:0000000000008DD2                 and     ecx, 1Fh
.text:0000000000008DD5                 shr     al, 5
.text:0000000000008DD8                 movzx   eax, al
.text:0000000000008DDB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000008DE0                 mov     esi, [rdi]
.text:0000000000008DE2                 mov     eax, esi
.text:0000000000008DE4                 shr     eax, cl
.text:0000000000008DE6                 xor     edx, eax
.text:0000000000008DE8                 and     eax, 1
.text:0000000000008DEB                 and     edx, 1
.text:0000000000008DEE                 shl     edx, cl
.text:0000000000008DF0                 xor     edx, esi
.text:0000000000008DF2                 mov     [rdi], edx
.text:0000000000008DF4                 retn
.text:0000000000008DF4 ; } // starts at 8DC0
.text:0000000000008DF4 set_char_quoting endp
.text:0000000000008DF4
.text:0000000000008DF4 ; ---------------------------------------------------------------------------
.text:0000000000008DF5                 align 20h
.text:0000000000008E00
.text:0000000000008E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E00
.text:0000000000008E00
.text:0000000000008E00                 public set_quoting_flags
.text:0000000000008E00 set_quoting_flags proc near
.text:0000000000008E00 ; __unwind {
.text:0000000000008E00                 lea     rax, default_quoting_options
.text:0000000000008E07                 test    rdi, rdi
.text:0000000000008E0A                 cmovz   rdi, rax
.text:0000000000008E0E                 mov     eax, [rdi+4]
.text:0000000000008E11                 mov     [rdi+4], esi
.text:0000000000008E14                 retn
.text:0000000000008E14 ; } // starts at 8E00
.text:0000000000008E14 set_quoting_flags endp
.text:0000000000008E14
.text:0000000000008E14 ; ---------------------------------------------------------------------------
.text:0000000000008E15                 align 20h
.text:0000000000008E20
.text:0000000000008E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E20
.text:0000000000008E20 ; Attributes: info_from_lumina
.text:0000000000008E20
.text:0000000000008E20 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000008E20                 public set_custom_quoting
.text:0000000000008E20 set_custom_quoting proc near
.text:0000000000008E20 ; __unwind {
.text:0000000000008E20                 lea     rax, default_quoting_options
.text:0000000000008E27                 test    rdi, rdi
.text:0000000000008E2A                 cmovz   rdi, rax
.text:0000000000008E2E                 test    rsi, rsi
.text:0000000000008E31                 mov     dword ptr [rdi], 0Ah
.text:0000000000008E37                 jz      short loc_8E47
.text:0000000000008E39                 test    rdx, rdx
.text:0000000000008E3C                 jz      short loc_8E47
.text:0000000000008E3E                 mov     [rdi+28h], rsi
.text:0000000000008E42                 mov     [rdi+30h], rdx
.text:0000000000008E46                 retn
.text:0000000000008E47 ; ---------------------------------------------------------------------------
.text:0000000000008E47
.text:0000000000008E47 loc_8E47:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000008E47                                         ; set_custom_quoting+1C↑j
.text:0000000000008E47                 sub     rsp, 8
.text:0000000000008E4B                 call    _abort
.text:0000000000008E4B ; } // starts at 8E20
.text:0000000000008E4B set_custom_quoting endp
.text:0000000000008E4B
.text:0000000000008E50
.text:0000000000008E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E50
.text:0000000000008E50 ; Attributes: info_from_lumina
.text:0000000000008E50
.text:0000000000008E50 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000008E50                 public quotearg_buffer
.text:0000000000008E50 quotearg_buffer proc near
.text:0000000000008E50
.text:0000000000008E50 var_40          = qword ptr -40h
.text:0000000000008E50
.text:0000000000008E50 ; __unwind {
.text:0000000000008E50                 push    r15
.text:0000000000008E52                 push    r14
.text:0000000000008E54                 lea     rax, default_quoting_options
.text:0000000000008E5B                 push    r13
.text:0000000000008E5D                 push    r12
.text:0000000000008E5F                 mov     r13, rdi
.text:0000000000008E62                 push    rbp
.text:0000000000008E63                 push    rbx
.text:0000000000008E64                 mov     rbx, r8
.text:0000000000008E67                 mov     r14, rsi
.text:0000000000008E6A                 mov     r15, rdx
.text:0000000000008E6D                 sub     rsp, 18h
.text:0000000000008E71                 test    r8, r8
.text:0000000000008E74                 cmovz   rbx, rax
.text:0000000000008E78                 mov     [rsp+48h+var_40], rcx
.text:0000000000008E7D                 call    ___errno_location
.text:0000000000008E82                 mov     r12d, [rax]
.text:0000000000008E85                 mov     rbp, rax
.text:0000000000008E88                 lea     rax, [rbx+8]
.text:0000000000008E8C                 sub     rsp, 8
.text:0000000000008E90                 mov     r9d, [rbx+4]
.text:0000000000008E94                 push    qword ptr [rbx+30h]
.text:0000000000008E97                 mov     r8d, [rbx]
.text:0000000000008E9A                 push    qword ptr [rbx+28h]
.text:0000000000008E9D                 mov     rdx, r15
.text:0000000000008EA0                 push    rax
.text:0000000000008EA1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000008EA6                 mov     rsi, r14
.text:0000000000008EA9                 mov     rdi, r13
.text:0000000000008EAC                 call    quotearg_buffer_restyled
.text:0000000000008EB1                 mov     [rbp+0], r12d
.text:0000000000008EB5                 add     rsp, 38h
.text:0000000000008EB9                 pop     rbx
.text:0000000000008EBA                 pop     rbp
.text:0000000000008EBB                 pop     r12
.text:0000000000008EBD                 pop     r13
.text:0000000000008EBF                 pop     r14
.text:0000000000008EC1                 pop     r15
.text:0000000000008EC3                 retn
.text:0000000000008EC3 ; } // starts at 8E50
.text:0000000000008EC3 quotearg_buffer endp
.text:0000000000008EC3
.text:0000000000008EC3 ; ---------------------------------------------------------------------------
.text:0000000000008EC4                 align 10h
.text:0000000000008ED0
.text:0000000000008ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008ED0
.text:0000000000008ED0 ; Attributes: info_from_lumina
.text:0000000000008ED0
.text:0000000000008ED0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000008ED0                 public quotearg_alloc_mem
.text:0000000000008ED0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000008ED0
.text:0000000000008ED0 var_5C          = dword ptr -5Ch
.text:0000000000008ED0 var_58          = qword ptr -58h
.text:0000000000008ED0 var_50          = qword ptr -50h
.text:0000000000008ED0 var_48          = qword ptr -48h
.text:0000000000008ED0 var_40          = qword ptr -40h
.text:0000000000008ED0
.text:0000000000008ED0 ; __unwind {
.text:0000000000008ED0                 push    r15
.text:0000000000008ED2                 push    r14
.text:0000000000008ED4                 lea     rax, default_quoting_options
.text:0000000000008EDB                 push    r13
.text:0000000000008EDD                 push    r12
.text:0000000000008EDF                 mov     r12, rdx
.text:0000000000008EE2                 push    rbp
.text:0000000000008EE3                 push    rbx
.text:0000000000008EE4                 mov     rbx, rcx
.text:0000000000008EE7                 mov     r14, rdi
.text:0000000000008EEA                 mov     r15, rsi
.text:0000000000008EED                 sub     rsp, 38h
.text:0000000000008EF1                 test    rcx, rcx
.text:0000000000008EF4                 cmovz   rbx, rax
.text:0000000000008EF8                 xor     ebp, ebp
.text:0000000000008EFA                 call    ___errno_location
.text:0000000000008EFF                 test    r12, r12
.text:0000000000008F02                 mov     r13, rax
.text:0000000000008F05                 mov     eax, [rax]
.text:0000000000008F07                 setz    bpl
.text:0000000000008F0B                 or      ebp, [rbx+4]
.text:0000000000008F0E                 lea     r10, [rbx+8]
.text:0000000000008F12                 sub     rsp, 8
.text:0000000000008F16                 mov     r8d, [rbx]
.text:0000000000008F19                 mov     rcx, r15
.text:0000000000008F1C                 mov     [rsp+70h+var_5C], eax
.text:0000000000008F20                 push    qword ptr [rbx+30h]
.text:0000000000008F23                 mov     rdx, r14
.text:0000000000008F26                 push    qword ptr [rbx+28h]
.text:0000000000008F29                 push    r10
.text:0000000000008F2B                 xor     esi, esi
.text:0000000000008F2D                 mov     r9d, ebp
.text:0000000000008F30                 xor     edi, edi
.text:0000000000008F32                 mov     [rsp+88h+var_48], r10
.text:0000000000008F37                 call    quotearg_buffer_restyled
.text:0000000000008F3C                 lea     rsi, [rax+1]
.text:0000000000008F40                 mov     [rsp+88h+var_40], rax
.text:0000000000008F45                 add     rsp, 20h
.text:0000000000008F49                 mov     rdi, rsi
.text:0000000000008F4C                 mov     [rsp+68h+var_50], rsi
.text:0000000000008F51                 call    xmalloc
.text:0000000000008F56                 mov     [rsp+68h+var_58], rax
.text:0000000000008F5B                 sub     rsp, 8
.text:0000000000008F5F                 push    qword ptr [rbx+30h]
.text:0000000000008F62                 push    qword ptr [rbx+28h]
.text:0000000000008F65                 mov     r10, [rsp+80h+var_48]
.text:0000000000008F6A                 mov     r9d, ebp
.text:0000000000008F6D                 mov     r8d, [rbx]
.text:0000000000008F70                 mov     rcx, r15
.text:0000000000008F73                 mov     rdx, r14
.text:0000000000008F76                 mov     rdi, rax
.text:0000000000008F79                 push    r10
.text:0000000000008F7B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000008F80                 call    quotearg_buffer_restyled
.text:0000000000008F85                 mov     eax, [rsp+88h+var_5C]
.text:0000000000008F89                 add     rsp, 20h
.text:0000000000008F8D                 test    r12, r12
.text:0000000000008F90                 mov     [r13+0], eax
.text:0000000000008F94                 jz      short loc_8F9F
.text:0000000000008F96                 mov     r11, [rsp+68h+var_40]
.text:0000000000008F9B                 mov     [r12], r11
.text:0000000000008F9F
.text:0000000000008F9F loc_8F9F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000008F9F                 mov     rax, [rsp+68h+var_58]
.text:0000000000008FA4                 add     rsp, 38h
.text:0000000000008FA8                 pop     rbx
.text:0000000000008FA9                 pop     rbp
.text:0000000000008FAA                 pop     r12
.text:0000000000008FAC                 pop     r13
.text:0000000000008FAE                 pop     r14
.text:0000000000008FB0                 pop     r15
.text:0000000000008FB2                 retn
.text:0000000000008FB2 ; } // starts at 8ED0
.text:0000000000008FB2 quotearg_alloc_mem endp
.text:0000000000008FB2
.text:0000000000008FB2 ; ---------------------------------------------------------------------------
.text:0000000000008FB3                 align 20h
.text:0000000000008FC0
.text:0000000000008FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FC0
.text:0000000000008FC0
.text:0000000000008FC0                 public quotearg_alloc
.text:0000000000008FC0 quotearg_alloc  proc near
.text:0000000000008FC0 ; __unwind {
.text:0000000000008FC0                 mov     rcx, rdx
.text:0000000000008FC3                 xor     edx, edx
.text:0000000000008FC5                 jmp     quotearg_alloc_mem
.text:0000000000008FC5 ; } // starts at 8FC0
.text:0000000000008FC5 quotearg_alloc  endp
.text:0000000000008FC5
.text:0000000000008FC5 ; ---------------------------------------------------------------------------
.text:0000000000008FCA                 align 10h
.text:0000000000008FD0
.text:0000000000008FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FD0
.text:0000000000008FD0 ; Attributes: info_from_lumina
.text:0000000000008FD0
.text:0000000000008FD0 ; void __cdecl quotearg_free()
.text:0000000000008FD0                 public quotearg_free
.text:0000000000008FD0 quotearg_free   proc near
.text:0000000000008FD0 ; __unwind {
.text:0000000000008FD0                 mov     eax, cs:nslots
.text:0000000000008FD6                 push    r12
.text:0000000000008FD8                 mov     r12, cs:slotvec
.text:0000000000008FDF                 push    rbp
.text:0000000000008FE0                 push    rbx
.text:0000000000008FE1                 cmp     eax, 1
.text:0000000000008FE4                 jle     short loc_9011
.text:0000000000008FE6                 sub     eax, 2
.text:0000000000008FE9                 lea     rbx, [r12+18h]
.text:0000000000008FEE                 shl     rax, 4
.text:0000000000008FF2                 lea     rbp, [r12+rax+28h]
.text:0000000000008FF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009000
.text:0000000000009000 loc_9000:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000009000                 mov     rdi, [rbx]      ; ptr
.text:0000000000009003                 add     rbx, 10h
.text:0000000000009007                 call    _free
.text:000000000000900C                 cmp     rbx, rbp
.text:000000000000900F                 jnz     short loc_9000
.text:0000000000009011
.text:0000000000009011 loc_9011:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000009011                 mov     rdi, [r12+8]    ; ptr
.text:0000000000009016                 lea     rbx, slot0
.text:000000000000901D                 cmp     rdi, rbx
.text:0000000000009020                 jz      short loc_9039
.text:0000000000009022                 call    _free
.text:0000000000009027                 mov     cs:slotvec0, 100h
.text:0000000000009032                 mov     cs:off_213098, rbx
.text:0000000000009039
.text:0000000000009039 loc_9039:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000009039                 lea     rbx, slotvec0
.text:0000000000009040                 cmp     r12, rbx
.text:0000000000009043                 jz      short loc_9054
.text:0000000000009045                 mov     rdi, r12        ; ptr
.text:0000000000009048                 call    _free
.text:000000000000904D                 mov     cs:slotvec, rbx
.text:0000000000009054
.text:0000000000009054 loc_9054:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000009054                 pop     rbx
.text:0000000000009055                 mov     cs:nslots, 1
.text:000000000000905F                 pop     rbp
.text:0000000000009060                 pop     r12
.text:0000000000009062                 retn
.text:0000000000009062 ; } // starts at 8FD0
.text:0000000000009062 quotearg_free   endp
.text:0000000000009062
.text:0000000000009062 ; ---------------------------------------------------------------------------
.text:0000000000009063                 align 10h
.text:0000000000009070
.text:0000000000009070 ; =============== S U B R O U T I N E =======================================
.text:0000000000009070
.text:0000000000009070
.text:0000000000009070                 public quotearg_n
.text:0000000000009070 quotearg_n      proc near
.text:0000000000009070 ; __unwind {
.text:0000000000009070                 lea     rcx, default_quoting_options
.text:0000000000009077                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000907E                 jmp     quotearg_n_options
.text:000000000000907E ; } // starts at 9070
.text:000000000000907E quotearg_n      endp
.text:000000000000907E
.text:000000000000907E ; ---------------------------------------------------------------------------
.text:0000000000009083                 align 10h
.text:0000000000009090
.text:0000000000009090 ; =============== S U B R O U T I N E =======================================
.text:0000000000009090
.text:0000000000009090
.text:0000000000009090                 public quotearg_n_mem
.text:0000000000009090 quotearg_n_mem  proc near
.text:0000000000009090 ; __unwind {
.text:0000000000009090                 lea     rcx, default_quoting_options
.text:0000000000009097                 jmp     quotearg_n_options
.text:0000000000009097 ; } // starts at 9090
.text:0000000000009097 quotearg_n_mem  endp
.text:0000000000009097
.text:0000000000009097 ; ---------------------------------------------------------------------------
.text:000000000000909C                 align 20h
.text:00000000000090A0
.text:00000000000090A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090A0
.text:00000000000090A0
.text:00000000000090A0                 public quotearg
.text:00000000000090A0 quotearg        proc near
.text:00000000000090A0 ; __unwind {
.text:00000000000090A0                 lea     rcx, default_quoting_options
.text:00000000000090A7                 mov     rsi, rdi
.text:00000000000090AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090B1                 xor     edi, edi
.text:00000000000090B3                 jmp     quotearg_n_options
.text:00000000000090B3 ; } // starts at 90A0
.text:00000000000090B3 quotearg        endp
.text:00000000000090B3
.text:00000000000090B3 ; ---------------------------------------------------------------------------
.text:00000000000090B8                 align 20h
.text:00000000000090C0
.text:00000000000090C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090C0
.text:00000000000090C0
.text:00000000000090C0                 public quotearg_mem
.text:00000000000090C0 quotearg_mem    proc near
.text:00000000000090C0 ; __unwind {
.text:00000000000090C0                 lea     rcx, default_quoting_options
.text:00000000000090C7                 mov     rdx, rsi
.text:00000000000090CA                 mov     rsi, rdi
.text:00000000000090CD                 xor     edi, edi
.text:00000000000090CF                 jmp     quotearg_n_options
.text:00000000000090CF ; } // starts at 90C0
.text:00000000000090CF quotearg_mem    endp
.text:00000000000090CF
.text:00000000000090CF ; ---------------------------------------------------------------------------
.text:00000000000090D4                 align 20h
.text:00000000000090E0
.text:00000000000090E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090E0
.text:00000000000090E0 ; Attributes: info_from_lumina
.text:00000000000090E0
.text:00000000000090E0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000090E0                 public quotearg_n_style
.text:00000000000090E0 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:00000000000090E0                                         ; quotearg_style+7↓j
.text:00000000000090E0
.text:00000000000090E0 var_48          = dword ptr -48h
.text:00000000000090E0 var_44          = qword ptr -44h
.text:00000000000090E0 var_3C          = qword ptr -3Ch
.text:00000000000090E0 var_34          = qword ptr -34h
.text:00000000000090E0 var_2C          = qword ptr -2Ch
.text:00000000000090E0 var_24          = qword ptr -24h
.text:00000000000090E0 var_1C          = qword ptr -1Ch
.text:00000000000090E0 var_14          = dword ptr -14h
.text:00000000000090E0 var_10          = qword ptr -10h
.text:00000000000090E0
.text:00000000000090E0 ; __unwind {
.text:00000000000090E0                 sub     rsp, 48h
.text:00000000000090E4                 mov     rax, rdx
.text:00000000000090E7                 mov     rdx, fs:28h
.text:00000000000090F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000090F5                 xor     edx, edx
.text:00000000000090F7                 cmp     esi, 0Ah
.text:00000000000090FA                 jz      short loc_9164
.text:00000000000090FC                 mov     [rsp+48h+var_48], esi
.text:00000000000090FF                 mov     rcx, rsp
.text:0000000000009102                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009109                 mov     rsi, rax
.text:000000000000910C                 mov     [rsp+48h+var_44], 0
.text:0000000000009115                 mov     [rsp+48h+var_3C], 0
.text:000000000000911E                 mov     [rsp+48h+var_34], 0
.text:0000000000009127                 mov     [rsp+48h+var_2C], 0
.text:0000000000009130                 mov     [rsp+48h+var_24], 0
.text:0000000000009139                 mov     [rsp+48h+var_1C], 0
.text:0000000000009142                 mov     [rsp+48h+var_14], 0
.text:000000000000914A                 call    quotearg_n_options
.text:000000000000914F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000009154                 xor     rcx, fs:28h
.text:000000000000915D                 jnz     short loc_9169
.text:000000000000915F                 add     rsp, 48h
.text:0000000000009163                 retn
.text:0000000000009164 ; ---------------------------------------------------------------------------
.text:0000000000009164
.text:0000000000009164 loc_9164:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000009164                 call    _abort
.text:0000000000009169 ; ---------------------------------------------------------------------------
.text:0000000000009169
.text:0000000000009169 loc_9169:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000009169                 call    ___stack_chk_fail
.text:0000000000009169 ; } // starts at 90E0
.text:0000000000009169 quotearg_n_style endp
.text:0000000000009169
.text:0000000000009169 ; ---------------------------------------------------------------------------
.text:000000000000916E                 align 10h
.text:0000000000009170
.text:0000000000009170 ; =============== S U B R O U T I N E =======================================
.text:0000000000009170
.text:0000000000009170 ; Attributes: info_from_lumina
.text:0000000000009170
.text:0000000000009170 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000009170                 public quotearg_n_style_mem
.text:0000000000009170 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000009170
.text:0000000000009170 var_48          = dword ptr -48h
.text:0000000000009170 var_44          = qword ptr -44h
.text:0000000000009170 var_3C          = qword ptr -3Ch
.text:0000000000009170 var_34          = qword ptr -34h
.text:0000000000009170 var_2C          = qword ptr -2Ch
.text:0000000000009170 var_24          = qword ptr -24h
.text:0000000000009170 var_1C          = qword ptr -1Ch
.text:0000000000009170 var_14          = dword ptr -14h
.text:0000000000009170 var_10          = qword ptr -10h
.text:0000000000009170
.text:0000000000009170 ; __unwind {
.text:0000000000009170                 sub     rsp, 48h
.text:0000000000009174                 mov     rax, rdx
.text:0000000000009177                 mov     rdx, rcx
.text:000000000000917A                 mov     rcx, fs:28h
.text:0000000000009183                 mov     [rsp+48h+var_10], rcx
.text:0000000000009188                 xor     ecx, ecx
.text:000000000000918A                 cmp     esi, 0Ah
.text:000000000000918D                 jz      short loc_91F0
.text:000000000000918F                 mov     [rsp+48h+var_48], esi
.text:0000000000009192                 mov     rcx, rsp
.text:0000000000009195                 mov     rsi, rax
.text:0000000000009198                 mov     [rsp+48h+var_44], 0
.text:00000000000091A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000091AA                 mov     [rsp+48h+var_34], 0
.text:00000000000091B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000091BC                 mov     [rsp+48h+var_24], 0
.text:00000000000091C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000091CE                 mov     [rsp+48h+var_14], 0
.text:00000000000091D6                 call    quotearg_n_options
.text:00000000000091DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000091E0                 xor     rdx, fs:28h
.text:00000000000091E9                 jnz     short loc_91F5
.text:00000000000091EB                 add     rsp, 48h
.text:00000000000091EF                 retn
.text:00000000000091F0 ; ---------------------------------------------------------------------------
.text:00000000000091F0
.text:00000000000091F0 loc_91F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000091F0                 call    _abort
.text:00000000000091F5 ; ---------------------------------------------------------------------------
.text:00000000000091F5
.text:00000000000091F5 loc_91F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000091F5                 call    ___stack_chk_fail
.text:00000000000091F5 ; } // starts at 9170
.text:00000000000091F5 quotearg_n_style_mem endp
.text:00000000000091F5
.text:00000000000091F5 ; ---------------------------------------------------------------------------
.text:00000000000091FA                 align 20h
.text:0000000000009200
.text:0000000000009200 ; =============== S U B R O U T I N E =======================================
.text:0000000000009200
.text:0000000000009200
.text:0000000000009200                 public quotearg_style
.text:0000000000009200 quotearg_style  proc near               ; CODE XREF: main+370↑p
.text:0000000000009200                                         ; main+442↑p ...
.text:0000000000009200 ; __unwind {
.text:0000000000009200                 mov     rdx, rsi
.text:0000000000009203                 mov     esi, edi
.text:0000000000009205                 xor     edi, edi
.text:0000000000009207                 jmp     quotearg_n_style
.text:0000000000009207 ; } // starts at 9200
.text:0000000000009207 quotearg_style  endp
.text:0000000000009207
.text:0000000000009207 ; ---------------------------------------------------------------------------
.text:000000000000920C                 align 10h
.text:0000000000009210
.text:0000000000009210 ; =============== S U B R O U T I N E =======================================
.text:0000000000009210
.text:0000000000009210
.text:0000000000009210                 public quotearg_style_mem
.text:0000000000009210 quotearg_style_mem proc near
.text:0000000000009210 ; __unwind {
.text:0000000000009210                 mov     rcx, rdx
.text:0000000000009213                 mov     rdx, rsi
.text:0000000000009216                 mov     esi, edi
.text:0000000000009218                 xor     edi, edi
.text:000000000000921A                 jmp     quotearg_n_style_mem
.text:000000000000921A ; } // starts at 9210
.text:000000000000921A quotearg_style_mem endp
.text:000000000000921A
.text:000000000000921A ; ---------------------------------------------------------------------------
.text:000000000000921F                 align 20h
.text:0000000000009220
.text:0000000000009220 ; =============== S U B R O U T I N E =======================================
.text:0000000000009220
.text:0000000000009220 ; Attributes: info_from_lumina
.text:0000000000009220
.text:0000000000009220 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000009220                 public quotearg_char_mem
.text:0000000000009220 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000009220                                         ; quotearg_colon+C↓j ...
.text:0000000000009220
.text:0000000000009220 var_48          = xmmword ptr -48h
.text:0000000000009220 var_38          = xmmword ptr -38h
.text:0000000000009220 var_28          = xmmword ptr -28h
.text:0000000000009220 var_18          = qword ptr -18h
.text:0000000000009220 var_10          = qword ptr -10h
.text:0000000000009220
.text:0000000000009220 ; __unwind {
.text:0000000000009220                 sub     rsp, 48h
.text:0000000000009224                 mov     ecx, edx
.text:0000000000009226                 mov     rax, fs:28h
.text:000000000000922F                 mov     [rsp+48h+var_10], rax
.text:0000000000009234                 xor     eax, eax
.text:0000000000009236                 mov     rax, cs:qword_2132F0
.text:000000000000923D                 mov     r8, rsp
.text:0000000000009240                 and     ecx, 1Fh
.text:0000000000009243                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000924B                 mov     [rsp+48h+var_18], rax
.text:0000000000009250                 mov     eax, edx
.text:0000000000009252                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000009256                 shr     al, 5
.text:0000000000009259                 movzx   eax, al
.text:000000000000925C                 lea     r9, [r8+rax*4+8]
.text:0000000000009261                 movdqa  xmm0, cs:xmmword_2132D0
.text:0000000000009269                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000926E                 movdqa  xmm0, cs:xmmword_2132E0
.text:0000000000009276                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000927B                 mov     edx, [r9]
.text:000000000000927E                 mov     eax, edx
.text:0000000000009280                 shr     eax, cl
.text:0000000000009282                 not     eax
.text:0000000000009284                 and     eax, 1
.text:0000000000009287                 shl     eax, cl
.text:0000000000009289                 mov     rcx, r8
.text:000000000000928C                 xor     eax, edx
.text:000000000000928E                 mov     rdx, rsi
.text:0000000000009291                 mov     rsi, rdi
.text:0000000000009294                 mov     [r9], eax
.text:0000000000009297                 xor     edi, edi
.text:0000000000009299                 call    quotearg_n_options
.text:000000000000929E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000092A3                 xor     rsi, fs:28h
.text:00000000000092AC                 jnz     short loc_92B3
.text:00000000000092AE                 add     rsp, 48h
.text:00000000000092B2                 retn
.text:00000000000092B3 ; ---------------------------------------------------------------------------
.text:00000000000092B3
.text:00000000000092B3 loc_92B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000092B3                 call    ___stack_chk_fail
.text:00000000000092B3 ; } // starts at 9220
.text:00000000000092B3 quotearg_char_mem endp
.text:00000000000092B3
.text:00000000000092B3 ; ---------------------------------------------------------------------------
.text:00000000000092B8                 align 20h
.text:00000000000092C0
.text:00000000000092C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092C0
.text:00000000000092C0
.text:00000000000092C0                 public quotearg_char
.text:00000000000092C0 quotearg_char   proc near
.text:00000000000092C0 ; __unwind {
.text:00000000000092C0                 movsx   edx, sil
.text:00000000000092C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000092CB                 jmp     quotearg_char_mem
.text:00000000000092CB ; } // starts at 92C0
.text:00000000000092CB quotearg_char   endp
.text:00000000000092CB
.text:00000000000092D0
.text:00000000000092D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092D0
.text:00000000000092D0
.text:00000000000092D0                 public quotearg_colon
.text:00000000000092D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000092D0 ; __unwind {
.text:00000000000092D0                 mov     edx, 3Ah ; ':'
.text:00000000000092D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000092DC                 jmp     quotearg_char_mem
.text:00000000000092DC ; } // starts at 92D0
.text:00000000000092DC quotearg_colon  endp
.text:00000000000092DC
.text:00000000000092DC ; ---------------------------------------------------------------------------
.text:00000000000092E1                 align 10h
.text:00000000000092F0
.text:00000000000092F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092F0
.text:00000000000092F0
.text:00000000000092F0                 public quotearg_colon_mem
.text:00000000000092F0 quotearg_colon_mem proc near
.text:00000000000092F0 ; __unwind {
.text:00000000000092F0                 mov     edx, 3Ah ; ':'
.text:00000000000092F5                 jmp     quotearg_char_mem
.text:00000000000092F5 ; } // starts at 92F0
.text:00000000000092F5 quotearg_colon_mem endp
.text:00000000000092F5
.text:00000000000092F5 ; ---------------------------------------------------------------------------
.text:00000000000092FA                 align 20h
.text:0000000000009300
.text:0000000000009300 ; =============== S U B R O U T I N E =======================================
.text:0000000000009300
.text:0000000000009300 ; Attributes: info_from_lumina
.text:0000000000009300
.text:0000000000009300 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000009300                 public quotearg_n_style_colon
.text:0000000000009300 quotearg_n_style_colon proc near
.text:0000000000009300
.text:0000000000009300 var_48          = dword ptr -48h
.text:0000000000009300 var_44          = qword ptr -44h
.text:0000000000009300 var_3C          = qword ptr -3Ch
.text:0000000000009300 var_34          = qword ptr -34h
.text:0000000000009300 var_2C          = qword ptr -2Ch
.text:0000000000009300 var_24          = qword ptr -24h
.text:0000000000009300 var_1C          = qword ptr -1Ch
.text:0000000000009300 var_14          = dword ptr -14h
.text:0000000000009300 var_10          = qword ptr -10h
.text:0000000000009300
.text:0000000000009300 ; __unwind {
.text:0000000000009300                 sub     rsp, 48h
.text:0000000000009304                 mov     rax, rdx
.text:0000000000009307                 mov     rdx, fs:28h
.text:0000000000009310                 mov     [rsp+48h+var_10], rdx
.text:0000000000009315                 xor     edx, edx
.text:0000000000009317                 cmp     esi, 0Ah
.text:000000000000931A                 jz      short loc_9384
.text:000000000000931C                 mov     [rsp+48h+var_48], esi
.text:000000000000931F                 mov     rcx, rsp
.text:0000000000009322                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009329                 mov     rsi, rax
.text:000000000000932C                 mov     [rsp+48h+var_44], 0
.text:0000000000009335                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000933E                 mov     [rsp+48h+var_34], 0
.text:0000000000009347                 mov     [rsp+48h+var_2C], 0
.text:0000000000009350                 mov     [rsp+48h+var_24], 0
.text:0000000000009359                 mov     [rsp+48h+var_1C], 0
.text:0000000000009362                 mov     [rsp+48h+var_14], 0
.text:000000000000936A                 call    quotearg_n_options
.text:000000000000936F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000009374                 xor     rcx, fs:28h
.text:000000000000937D                 jnz     short loc_9389
.text:000000000000937F                 add     rsp, 48h
.text:0000000000009383                 retn
.text:0000000000009384 ; ---------------------------------------------------------------------------
.text:0000000000009384
.text:0000000000009384 loc_9384:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000009384                 call    _abort
.text:0000000000009389 ; ---------------------------------------------------------------------------
.text:0000000000009389
.text:0000000000009389 loc_9389:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000009389                 call    ___stack_chk_fail
.text:0000000000009389 ; } // starts at 9300
.text:0000000000009389 quotearg_n_style_colon endp
.text:0000000000009389
.text:0000000000009389 ; ---------------------------------------------------------------------------
.text:000000000000938E                 align 10h
.text:0000000000009390
.text:0000000000009390 ; =============== S U B R O U T I N E =======================================
.text:0000000000009390
.text:0000000000009390 ; Attributes: info_from_lumina
.text:0000000000009390
.text:0000000000009390 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000009390                 public quotearg_n_custom_mem
.text:0000000000009390 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000009390                                         ; quotearg_custom+12↓j ...
.text:0000000000009390
.text:0000000000009390 var_48          = xmmword ptr -48h
.text:0000000000009390 var_38          = xmmword ptr -38h
.text:0000000000009390 var_28          = xmmword ptr -28h
.text:0000000000009390 var_18          = qword ptr -18h
.text:0000000000009390 var_10          = qword ptr -10h
.text:0000000000009390
.text:0000000000009390 ; __unwind {
.text:0000000000009390                 sub     rsp, 48h
.text:0000000000009394                 mov     r9, rcx
.text:0000000000009397                 mov     rcx, cs:qword_2132F0
.text:000000000000939E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000093A6                 mov     rax, fs:28h
.text:00000000000093AF                 mov     [rsp+48h+var_10], rax
.text:00000000000093B4                 xor     eax, eax
.text:00000000000093B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000093BA                 test    rsi, rsi
.text:00000000000093BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000093C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000093C9                 movdqa  xmm0, cs:xmmword_2132D0
.text:00000000000093D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000093D6                 movdqa  xmm0, cs:xmmword_2132E0
.text:00000000000093DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000093E3                 jz      short loc_9417
.text:00000000000093E5                 test    rdx, rdx
.text:00000000000093E8                 jz      short loc_9417
.text:00000000000093EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000093EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000093F4                 mov     rcx, rsp
.text:00000000000093F7                 mov     rdx, r8
.text:00000000000093FA                 mov     rsi, r9
.text:00000000000093FD                 call    quotearg_n_options
.text:0000000000009402                 mov     rdi, [rsp+48h+var_10]
.text:0000000000009407                 xor     rdi, fs:28h
.text:0000000000009410                 jnz     short loc_941C
.text:0000000000009412                 add     rsp, 48h
.text:0000000000009416                 retn
.text:0000000000009417 ; ---------------------------------------------------------------------------
.text:0000000000009417
.text:0000000000009417 loc_9417:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000009417                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000009417                 call    _abort
.text:000000000000941C ; ---------------------------------------------------------------------------
.text:000000000000941C
.text:000000000000941C loc_941C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000941C                 call    ___stack_chk_fail
.text:000000000000941C ; } // starts at 9390
.text:000000000000941C quotearg_n_custom_mem endp
.text:000000000000941C
.text:000000000000941C ; ---------------------------------------------------------------------------
.text:0000000000009421                 align 10h
.text:0000000000009430
.text:0000000000009430 ; =============== S U B R O U T I N E =======================================
.text:0000000000009430
.text:0000000000009430
.text:0000000000009430                 public quotearg_n_custom
.text:0000000000009430 quotearg_n_custom proc near
.text:0000000000009430 ; __unwind {
.text:0000000000009430                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000009437                 jmp     quotearg_n_custom_mem
.text:0000000000009437 ; } // starts at 9430
.text:0000000000009437 quotearg_n_custom endp
.text:0000000000009437
.text:0000000000009437 ; ---------------------------------------------------------------------------
.text:000000000000943C                 align 20h
.text:0000000000009440
.text:0000000000009440 ; =============== S U B R O U T I N E =======================================
.text:0000000000009440
.text:0000000000009440
.text:0000000000009440                 public quotearg_custom
.text:0000000000009440 quotearg_custom proc near
.text:0000000000009440 ; __unwind {
.text:0000000000009440                 mov     rcx, rdx
.text:0000000000009443                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000944A                 mov     rdx, rsi
.text:000000000000944D                 mov     rsi, rdi
.text:0000000000009450                 xor     edi, edi
.text:0000000000009452                 jmp     quotearg_n_custom_mem
.text:0000000000009452 ; } // starts at 9440
.text:0000000000009452 quotearg_custom endp
.text:0000000000009452
.text:0000000000009452 ; ---------------------------------------------------------------------------
.text:0000000000009457                 align 20h
.text:0000000000009460
.text:0000000000009460 ; =============== S U B R O U T I N E =======================================
.text:0000000000009460
.text:0000000000009460
.text:0000000000009460                 public quotearg_custom_mem
.text:0000000000009460 quotearg_custom_mem proc near
.text:0000000000009460 ; __unwind {
.text:0000000000009460                 mov     r8, rcx
.text:0000000000009463                 mov     rcx, rdx
.text:0000000000009466                 mov     rdx, rsi
.text:0000000000009469                 mov     rsi, rdi
.text:000000000000946C                 xor     edi, edi
.text:000000000000946E                 jmp     quotearg_n_custom_mem
.text:000000000000946E ; } // starts at 9460
.text:000000000000946E quotearg_custom_mem endp
.text:000000000000946E
.text:000000000000946E ; ---------------------------------------------------------------------------
.text:0000000000009473                 align 20h
.text:0000000000009480
.text:0000000000009480 ; =============== S U B R O U T I N E =======================================
.text:0000000000009480
.text:0000000000009480
.text:0000000000009480                 public quote_n_mem
.text:0000000000009480 quote_n_mem     proc near
.text:0000000000009480 ; __unwind {
.text:0000000000009480                 lea     rcx, quote_quoting_options
.text:0000000000009487                 jmp     quotearg_n_options
.text:0000000000009487 ; } // starts at 9480
.text:0000000000009487 quote_n_mem     endp
.text:0000000000009487
.text:0000000000009487 ; ---------------------------------------------------------------------------
.text:000000000000948C                 align 10h
.text:0000000000009490
.text:0000000000009490 ; =============== S U B R O U T I N E =======================================
.text:0000000000009490
.text:0000000000009490
.text:0000000000009490                 public quote_mem
.text:0000000000009490 quote_mem       proc near
.text:0000000000009490 ; __unwind {
.text:0000000000009490                 lea     rcx, quote_quoting_options
.text:0000000000009497                 mov     rdx, rsi
.text:000000000000949A                 mov     rsi, rdi
.text:000000000000949D                 xor     edi, edi
.text:000000000000949F                 jmp     quotearg_n_options
.text:000000000000949F ; } // starts at 9490
.text:000000000000949F quote_mem       endp
.text:000000000000949F
.text:000000000000949F ; ---------------------------------------------------------------------------
.text:00000000000094A4                 align 10h
.text:00000000000094B0
.text:00000000000094B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094B0
.text:00000000000094B0
.text:00000000000094B0                 public quote_n
.text:00000000000094B0 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:00000000000094B0 ; __unwind {
.text:00000000000094B0                 lea     rcx, quote_quoting_options
.text:00000000000094B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000094BE                 jmp     quotearg_n_options
.text:00000000000094BE ; } // starts at 94B0
.text:00000000000094BE quote_n         endp
.text:00000000000094BE
.text:00000000000094BE ; ---------------------------------------------------------------------------
.text:00000000000094C3                 align 10h
.text:00000000000094D0
.text:00000000000094D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094D0
.text:00000000000094D0
.text:00000000000094D0                 public quote
.text:00000000000094D0 quote           proc near               ; CODE XREF: main+4B0↑p
.text:00000000000094D0                                         ; print_it+4C3↑p ...
.text:00000000000094D0 ; __unwind {
.text:00000000000094D0                 lea     rcx, quote_quoting_options
.text:00000000000094D7                 mov     rsi, rdi
.text:00000000000094DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000094E1                 xor     edi, edi
.text:00000000000094E3                 jmp     quotearg_n_options
.text:00000000000094E3 ; } // starts at 94D0
.text:00000000000094E3 quote           endp
.text:00000000000094E3
.text:00000000000094E3 ; ---------------------------------------------------------------------------
.text:00000000000094E8                 align 10h
.text:00000000000094F0
.text:00000000000094F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094F0
.text:00000000000094F0
.text:00000000000094F0                 public save_cwd
.text:00000000000094F0 save_cwd        proc near               ; CODE XREF: find_mount_point+33↑p
.text:00000000000094F0 ; __unwind {
.text:00000000000094F0                 push    rbx
.text:00000000000094F1                 mov     rbx, rdi
.text:00000000000094F4                 mov     qword ptr [rdi+8], 0
.text:00000000000094FC                 lea     rdi, filename+1 ; "."
.text:0000000000009503                 xor     eax, eax
.text:0000000000009505                 mov     esi, 80000h
.text:000000000000950A                 call    open_safer
.text:000000000000950F                 mov     edx, eax
.text:0000000000009511                 mov     [rbx], eax
.text:0000000000009513                 xor     eax, eax
.text:0000000000009515                 test    edx, edx
.text:0000000000009517                 js      short loc_9520
.text:0000000000009519                 pop     rbx
.text:000000000000951A                 retn
.text:000000000000951A ; ---------------------------------------------------------------------------
.text:000000000000951B                 align 20h
.text:0000000000009520
.text:0000000000009520 loc_9520:                               ; CODE XREF: save_cwd+27↑j
.text:0000000000009520                 xor     esi, esi        ; size
.text:0000000000009522                 xor     edi, edi        ; buf
.text:0000000000009524                 call    _getcwd
.text:0000000000009529                 test    rax, rax
.text:000000000000952C                 mov     [rbx+8], rax
.text:0000000000009530                 setz    al
.text:0000000000009533                 movzx   eax, al
.text:0000000000009536                 neg     eax
.text:0000000000009538                 pop     rbx
.text:0000000000009539                 retn
.text:0000000000009539 ; } // starts at 94F0
.text:0000000000009539 save_cwd        endp
.text:0000000000009539
.text:0000000000009539 ; ---------------------------------------------------------------------------
.text:000000000000953A                 align 20h
.text:0000000000009540
.text:0000000000009540 ; =============== S U B R O U T I N E =======================================
.text:0000000000009540
.text:0000000000009540
.text:0000000000009540                 public restore_cwd
.text:0000000000009540 restore_cwd     proc near               ; CODE XREF: find_mount_point+1EC↑p
.text:0000000000009540 ; __unwind {
.text:0000000000009540                 mov     eax, [rdi]
.text:0000000000009542                 test    eax, eax
.text:0000000000009544                 js      short loc_9550
.text:0000000000009546                 mov     edi, eax        ; fd
.text:0000000000009548                 jmp     _fchdir
.text:0000000000009548 ; ---------------------------------------------------------------------------
.text:000000000000954D                 align 10h
.text:0000000000009550
.text:0000000000009550 loc_9550:                               ; CODE XREF: restore_cwd+4↑j
.text:0000000000009550                 mov     rdi, [rdi+8]    ; s
.text:0000000000009554                 jmp     chdir_long
.text:0000000000009554 ; } // starts at 9540
.text:0000000000009554 restore_cwd     endp
.text:0000000000009554
.text:0000000000009554 ; ---------------------------------------------------------------------------
.text:0000000000009559                 align 20h
.text:0000000000009560
.text:0000000000009560 ; =============== S U B R O U T I N E =======================================
.text:0000000000009560
.text:0000000000009560
.text:0000000000009560                 public free_cwd
.text:0000000000009560 free_cwd        proc near               ; CODE XREF: find_mount_point+1FC↑p
.text:0000000000009560 ; __unwind {
.text:0000000000009560                 push    rbx
.text:0000000000009561                 mov     rbx, rdi
.text:0000000000009564                 mov     edi, [rdi]      ; fd
.text:0000000000009566                 test    edi, edi
.text:0000000000009568                 js      short loc_956F
.text:000000000000956A                 call    _close
.text:000000000000956F
.text:000000000000956F loc_956F:                               ; CODE XREF: free_cwd+8↑j
.text:000000000000956F                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000009573                 pop     rbx
.text:0000000000009574                 jmp     _free
.text:0000000000009574 ; } // starts at 9560
.text:0000000000009574 free_cwd        endp
.text:0000000000009574
.text:0000000000009574 ; ---------------------------------------------------------------------------
.text:0000000000009579                 align 20h
.text:0000000000009580
.text:0000000000009580 ; =============== S U B R O U T I N E =======================================
.text:0000000000009580
.text:0000000000009580
.text:0000000000009580 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000009580                 public version_etc_arn
.text:0000000000009580 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_99BB↓j
.text:0000000000009580                                         ; version_etc_va:loc_9A0B↓p ...
.text:0000000000009580
.text:0000000000009580 var_58          = qword ptr -58h
.text:0000000000009580 var_50          = qword ptr -50h
.text:0000000000009580 var_48          = qword ptr -48h
.text:0000000000009580 var_40          = qword ptr -40h
.text:0000000000009580
.text:0000000000009580 ; __unwind {
.text:0000000000009580                 push    r15
.text:0000000000009582                 push    r14
.text:0000000000009584                 push    r13
.text:0000000000009586                 push    r12
.text:0000000000009588                 mov     r12, r9
.text:000000000000958B                 push    rbp
.text:000000000000958C                 push    rbx
.text:000000000000958D                 mov     rbp, rdi
.text:0000000000009590                 mov     rbx, r8
.text:0000000000009593                 sub     rsp, 28h
.text:0000000000009597                 test    rsi, rsi
.text:000000000000959A                 jz      loc_96B8
.text:00000000000095A0                 mov     r8, rdx
.text:00000000000095A3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000095AA                 mov     r9, rcx
.text:00000000000095AD                 xor     eax, eax
.text:00000000000095AF                 mov     rcx, rsi
.text:00000000000095B2                 mov     esi, 1
.text:00000000000095B7                 call    ___fprintf_chk
.text:00000000000095BC
.text:00000000000095BC loc_95BC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000095BC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000095C3                 xor     edi, edi        ; domainname
.text:00000000000095C5                 mov     edx, 5          ; category
.text:00000000000095CA                 call    _dcgettext
.text:00000000000095CF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000095D6                 mov     rcx, rax
.text:00000000000095D9                 mov     r8d, 7E3h
.text:00000000000095DF                 mov     esi, 1
.text:00000000000095E4                 mov     rdi, rbp
.text:00000000000095E7                 xor     eax, eax
.text:00000000000095E9                 call    ___fprintf_chk
.text:00000000000095EE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000095F5                 xor     edi, edi        ; domainname
.text:00000000000095F7                 mov     edx, 5          ; category
.text:00000000000095FC                 call    _dcgettext
.text:0000000000009601                 mov     rsi, rbp        ; stream
.text:0000000000009604                 mov     rdi, rax        ; s
.text:0000000000009607                 call    _fputs_unlocked
.text:000000000000960C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000009610                 ja      def_9624        ; jumptable 0000000000009624 default case
.text:0000000000009616                 lea     rdx, jpt_9624
.text:000000000000961D                 movsxd  rax, ds:(jpt_9624 - 0FE24h)[rdx+r12*4]
.text:0000000000009621                 add     rax, rdx
.text:0000000000009624                 jmp     rax             ; switch jump
.text:0000000000009624 ; ---------------------------------------------------------------------------
.text:0000000000009626                 align 10h
.text:0000000000009630
.text:0000000000009630 loc_9630:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009630                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009630                 mov     r9, [rbx+38h]   ; jumptable 0000000000009624 case 8
.text:0000000000009634                 mov     rax, [rbx+10h]
.text:0000000000009638                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000963F                 mov     r8, [rbx+8]
.text:0000000000009643                 mov     edx, 5          ; category
.text:0000000000009648                 xor     edi, edi        ; domainname
.text:000000000000964A                 mov     r13, [rbx+30h]
.text:000000000000964E                 mov     r12, [rbx+28h]
.text:0000000000009652                 mov     [rsp+58h+var_48], r9
.text:0000000000009657                 mov     r15, [rbx+20h]
.text:000000000000965B                 mov     r14, [rbx+18h]
.text:000000000000965F                 mov     [rsp+58h+var_58], rax
.text:0000000000009663                 mov     [rsp+58h+var_50], r8
.text:0000000000009668                 mov     rbx, [rbx]
.text:000000000000966B                 call    _dcgettext
.text:0000000000009670                 sub     rsp, 8
.text:0000000000009674
.text:0000000000009674 loc_9674:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000009674                 mov     r9, [rsp+60h+var_48]
.text:0000000000009679                 mov     rdx, rax
.text:000000000000967C                 mov     rcx, rbx
.text:000000000000967F                 mov     esi, 1
.text:0000000000009684                 mov     rdi, rbp
.text:0000000000009687                 xor     eax, eax
.text:0000000000009689                 push    r9
.text:000000000000968B                 push    r13
.text:000000000000968D                 push    r12
.text:000000000000968F                 push    r15
.text:0000000000009691                 push    r14
.text:0000000000009693                 mov     r9, [rsp+88h+var_58]
.text:0000000000009698                 mov     r8, [rsp+88h+var_50]
.text:000000000000969D                 call    ___fprintf_chk
.text:00000000000096A2                 add     rsp, 30h
.text:00000000000096A6
.text:00000000000096A6 loc_96A6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000096A6                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:00000000000096A6                 add     rsp, 28h        ; jumptable 0000000000009624 case 0
.text:00000000000096AA                 pop     rbx
.text:00000000000096AB                 pop     rbp
.text:00000000000096AC                 pop     r12
.text:00000000000096AE                 pop     r13
.text:00000000000096B0                 pop     r14
.text:00000000000096B2                 pop     r15
.text:00000000000096B4                 retn
.text:00000000000096B4 ; ---------------------------------------------------------------------------
.text:00000000000096B5                 align 8
.text:00000000000096B8
.text:00000000000096B8 loc_96B8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000096B8                 mov     r8, rcx
.text:00000000000096BB                 mov     rcx, rdx
.text:00000000000096BE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:00000000000096C5                 mov     esi, 1
.text:00000000000096CA                 xor     eax, eax
.text:00000000000096CC                 call    ___fprintf_chk
.text:00000000000096D1                 jmp     loc_95BC
.text:00000000000096D1 ; ---------------------------------------------------------------------------
.text:00000000000096D6                 align 20h
.text:00000000000096E0
.text:00000000000096E0 loc_96E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000096E0                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:00000000000096E0                 mov     r10, [rbx+40h]  ; jumptable 0000000000009624 case 9
.text:00000000000096E4                 mov     r9, [rbx+38h]
.text:00000000000096E8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000096EF                 mov     rax, [rbx+10h]
.text:00000000000096F3                 mov     r8, [rbx+8]
.text:00000000000096F7                 mov     edx, 5          ; category
.text:00000000000096FC                 mov     r13, [rbx+30h]
.text:0000000000009700                 mov     r12, [rbx+28h]
.text:0000000000009704                 mov     r15, [rbx+20h]
.text:0000000000009708                 mov     r14, [rbx+18h]
.text:000000000000970C                 mov     rbx, [rbx]
.text:000000000000970F                 mov     [rsp+58h+var_40], r10
.text:0000000000009714                 mov     [rsp+58h+var_48], r9
.text:0000000000009719                 mov     [rsp+58h+var_58], rax
.text:000000000000971D                 mov     [rsp+58h+var_50], r8
.text:0000000000009722
.text:0000000000009722 loc_9722:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000009722                 xor     edi, edi        ; domainname
.text:0000000000009724                 call    _dcgettext
.text:0000000000009729                 mov     r10, [rsp+58h+var_40]
.text:000000000000972E                 push    r10
.text:0000000000009730                 jmp     loc_9674
.text:0000000000009730 ; ---------------------------------------------------------------------------
.text:0000000000009735                 align 8
.text:0000000000009738
.text:0000000000009738 loc_9738:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009738                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009738                 mov     rbx, [rbx]      ; jumptable 0000000000009624 case 1
.text:000000000000973B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000009742                 mov     edx, 5          ; category
.text:0000000000009747                 xor     edi, edi        ; domainname
.text:0000000000009749                 call    _dcgettext
.text:000000000000974E                 add     rsp, 28h
.text:0000000000009752                 mov     rcx, rbx
.text:0000000000009755                 mov     rdi, rbp
.text:0000000000009758                 pop     rbx
.text:0000000000009759                 pop     rbp
.text:000000000000975A                 pop     r12
.text:000000000000975C                 pop     r13
.text:000000000000975E                 pop     r14
.text:0000000000009760                 pop     r15
.text:0000000000009762                 mov     rdx, rax
.text:0000000000009765                 mov     esi, 1
.text:000000000000976A                 xor     eax, eax
.text:000000000000976C                 jmp     ___fprintf_chk
.text:000000000000976C ; ---------------------------------------------------------------------------
.text:0000000000009771                 align 8
.text:0000000000009778
.text:0000000000009778 loc_9778:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009778                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009778                 mov     r12, [rbx+8]    ; jumptable 0000000000009624 case 2
.text:000000000000977C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000009783                 mov     rbx, [rbx]
.text:0000000000009786                 mov     edx, 5          ; category
.text:000000000000978B                 xor     edi, edi        ; domainname
.text:000000000000978D                 call    _dcgettext
.text:0000000000009792                 add     rsp, 28h
.text:0000000000009796                 mov     r8, r12
.text:0000000000009799                 mov     rcx, rbx
.text:000000000000979C                 mov     rdi, rbp
.text:000000000000979F                 mov     rdx, rax
.text:00000000000097A2                 mov     esi, 1
.text:00000000000097A7                 pop     rbx
.text:00000000000097A8                 pop     rbp
.text:00000000000097A9                 pop     r12
.text:00000000000097AB                 pop     r13
.text:00000000000097AD                 pop     r14
.text:00000000000097AF                 pop     r15
.text:00000000000097B1                 xor     eax, eax
.text:00000000000097B3                 jmp     ___fprintf_chk
.text:00000000000097B3 ; ---------------------------------------------------------------------------
.text:00000000000097B8                 align 20h
.text:00000000000097C0
.text:00000000000097C0 loc_97C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000097C0                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:00000000000097C0                 mov     r13, [rbx+10h]  ; jumptable 0000000000009624 case 3
.text:00000000000097C4                 mov     r12, [rbx+8]
.text:00000000000097C8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000097CF                 mov     rbx, [rbx]
.text:00000000000097D2                 mov     edx, 5          ; category
.text:00000000000097D7                 xor     edi, edi        ; domainname
.text:00000000000097D9                 call    _dcgettext
.text:00000000000097DE                 add     rsp, 28h
.text:00000000000097E2                 mov     r9, r13
.text:00000000000097E5                 mov     r8, r12
.text:00000000000097E8                 mov     rcx, rbx
.text:00000000000097EB                 mov     rdi, rbp
.text:00000000000097EE                 mov     rdx, rax
.text:00000000000097F1                 pop     rbx
.text:00000000000097F2                 pop     rbp
.text:00000000000097F3                 pop     r12
.text:00000000000097F5                 pop     r13
.text:00000000000097F7                 pop     r14
.text:00000000000097F9                 pop     r15
.text:00000000000097FB                 mov     esi, 1
.text:0000000000009800                 xor     eax, eax
.text:0000000000009802                 jmp     ___fprintf_chk
.text:0000000000009802 ; ---------------------------------------------------------------------------
.text:0000000000009807                 align 10h
.text:0000000000009810
.text:0000000000009810 loc_9810:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009810                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009810                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000009624 case 4
.text:0000000000009817                 mov     edx, 5          ; category
.text:000000000000981C                 xor     edi, edi        ; domainname
.text:000000000000981E                 mov     r14, [rbx+18h]
.text:0000000000009822                 mov     r13, [rbx+10h]
.text:0000000000009826                 mov     r12, [rbx+8]
.text:000000000000982A                 mov     rbx, [rbx]
.text:000000000000982D                 call    _dcgettext
.text:0000000000009832                 sub     rsp, 8
.text:0000000000009836
.text:0000000000009836 loc_9836:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000009836                 push    r14
.text:0000000000009838                 mov     rdx, rax
.text:000000000000983B                 mov     r9, r13
.text:000000000000983E                 mov     r8, r12
.text:0000000000009841                 mov     rcx, rbx
.text:0000000000009844                 mov     rdi, rbp
.text:0000000000009847                 mov     esi, 1
.text:000000000000984C                 xor     eax, eax
.text:000000000000984E                 call    ___fprintf_chk
.text:0000000000009853                 pop     rax
.text:0000000000009854                 pop     rdx
.text:0000000000009855                 add     rsp, 28h
.text:0000000000009859                 pop     rbx
.text:000000000000985A                 pop     rbp
.text:000000000000985B                 pop     r12
.text:000000000000985D                 pop     r13
.text:000000000000985F                 pop     r14
.text:0000000000009861                 pop     r15
.text:0000000000009863                 retn
.text:0000000000009863 ; ---------------------------------------------------------------------------
.text:0000000000009864                 align 8
.text:0000000000009868
.text:0000000000009868 loc_9868:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009868                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009868                 mov     r15, [rbx+20h]  ; jumptable 0000000000009624 case 5
.text:000000000000986C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000009873                 mov     edx, 5          ; category
.text:0000000000009878                 xor     edi, edi        ; domainname
.text:000000000000987A                 mov     r14, [rbx+18h]
.text:000000000000987E                 mov     r13, [rbx+10h]
.text:0000000000009882                 mov     r12, [rbx+8]
.text:0000000000009886                 mov     rbx, [rbx]
.text:0000000000009889                 call    _dcgettext
.text:000000000000988E                 push    r15
.text:0000000000009890                 jmp     short loc_9836
.text:0000000000009890 ; ---------------------------------------------------------------------------
.text:0000000000009892                 align 8
.text:0000000000009898
.text:0000000000009898 loc_9898:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009898                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009898                 mov     r8, [rbx+8]     ; jumptable 0000000000009624 case 6
.text:000000000000989C                 mov     r12, [rbx+28h]
.text:00000000000098A0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000098A7                 mov     r15, [rbx+20h]
.text:00000000000098AB                 mov     r14, [rbx+18h]
.text:00000000000098AF                 mov     edx, 5          ; category
.text:00000000000098B4                 mov     r13, [rbx+10h]
.text:00000000000098B8                 xor     edi, edi        ; domainname
.text:00000000000098BA                 mov     rbx, [rbx]
.text:00000000000098BD                 mov     [rsp+58h+var_58], r8
.text:00000000000098C1                 call    _dcgettext
.text:00000000000098C6                 sub     rsp, 8
.text:00000000000098CA                 mov     r9, r13
.text:00000000000098CD                 push    r12
.text:00000000000098CF                 push    r15
.text:00000000000098D1                 push    r14
.text:00000000000098D3
.text:00000000000098D3 loc_98D3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000098D3                 mov     r8, [rsp+78h+var_58]
.text:00000000000098D8                 mov     rcx, rbx
.text:00000000000098DB                 mov     rdx, rax
.text:00000000000098DE                 mov     rdi, rbp
.text:00000000000098E1                 mov     esi, 1
.text:00000000000098E6                 xor     eax, eax
.text:00000000000098E8                 call    ___fprintf_chk
.text:00000000000098ED                 add     rsp, 20h
.text:00000000000098F1                 add     rsp, 28h
.text:00000000000098F5                 pop     rbx
.text:00000000000098F6                 pop     rbp
.text:00000000000098F7                 pop     r12
.text:00000000000098F9                 pop     r13
.text:00000000000098FB                 pop     r14
.text:00000000000098FD                 pop     r15
.text:00000000000098FF                 retn
.text:0000000000009900 ; ---------------------------------------------------------------------------
.text:0000000000009900
.text:0000000000009900 loc_9900:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009900                                         ; DATA XREF: .rodata:jpt_9624↓o
.text:0000000000009900                 mov     r9, [rbx+10h]   ; jumptable 0000000000009624 case 7
.text:0000000000009904                 mov     r13, [rbx+30h]
.text:0000000000009908                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000990F                 mov     r12, [rbx+28h]
.text:0000000000009913                 mov     r15, [rbx+20h]
.text:0000000000009917                 mov     edx, 5          ; category
.text:000000000000991C                 mov     r14, [rbx+18h]
.text:0000000000009920                 mov     r8, [rbx+8]
.text:0000000000009924                 xor     edi, edi        ; domainname
.text:0000000000009926                 mov     [rsp+58h+var_50], r9
.text:000000000000992B                 mov     rbx, [rbx]
.text:000000000000992E                 mov     [rsp+58h+var_58], r8
.text:0000000000009932                 call    _dcgettext
.text:0000000000009937                 push    r13
.text:0000000000009939                 push    r12
.text:000000000000993B                 push    r15
.text:000000000000993D                 push    r14
.text:000000000000993F                 mov     r9, [rsp+78h+var_50]
.text:0000000000009944                 jmp     short loc_98D3
.text:0000000000009944 ; ---------------------------------------------------------------------------
.text:0000000000009946                 align 10h
.text:0000000000009950
.text:0000000000009950 def_9624:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000009950                 mov     r10, [rbx+40h]  ; jumptable 0000000000009624 default case
.text:0000000000009954                 mov     r9, [rbx+38h]
.text:0000000000009958                 mov     edx, 5
.text:000000000000995D                 mov     rax, [rbx+10h]
.text:0000000000009961                 mov     r8, [rbx+8]
.text:0000000000009965                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000996C                 mov     r13, [rbx+30h]
.text:0000000000009970                 mov     r12, [rbx+28h]
.text:0000000000009974                 mov     r15, [rbx+20h]
.text:0000000000009978                 mov     r14, [rbx+18h]
.text:000000000000997C                 mov     [rsp+58h+var_40], r10
.text:0000000000009981                 mov     [rsp+58h+var_48], r9
.text:0000000000009986                 mov     [rsp+58h+var_58], rax
.text:000000000000998A                 mov     [rsp+58h+var_50], r8
.text:000000000000998F                 mov     rbx, [rbx]
.text:0000000000009992                 jmp     loc_9722
.text:0000000000009992 ; } // starts at 9580
.text:0000000000009992 version_etc_arn endp
.text:0000000000009992
.text:0000000000009992 ; ---------------------------------------------------------------------------
.text:0000000000009997                 align 20h
.text:00000000000099A0
.text:00000000000099A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099A0
.text:00000000000099A0 ; Attributes: info_from_lumina
.text:00000000000099A0
.text:00000000000099A0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000099A0                 public version_etc_ar
.text:00000000000099A0 version_etc_ar  proc near
.text:00000000000099A0 ; __unwind {
.text:00000000000099A0                 xor     r9d, r9d
.text:00000000000099A3                 cmp     qword ptr [r8], 0
.text:00000000000099A7                 jz      short loc_99BB
.text:00000000000099A9                 nop     dword ptr [rax+00000000h]
.text:00000000000099B0
.text:00000000000099B0 loc_99B0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000099B0                 add     r9, 1
.text:00000000000099B4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000099B9                 jnz     short loc_99B0
.text:00000000000099BB
.text:00000000000099BB loc_99BB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000099BB                 jmp     version_etc_arn
.text:00000000000099BB ; } // starts at 99A0
.text:00000000000099BB version_etc_ar  endp
.text:00000000000099BB
.text:00000000000099C0
.text:00000000000099C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099C0
.text:00000000000099C0 ; Attributes: info_from_lumina
.text:00000000000099C0
.text:00000000000099C0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000099C0                 public version_etc_va
.text:00000000000099C0 version_etc_va  proc near
.text:00000000000099C0
.text:00000000000099C0 authtab         = qword ptr -68h
.text:00000000000099C0 var_10          = qword ptr -10h
.text:00000000000099C0
.text:00000000000099C0 ; __unwind {
.text:00000000000099C0                 sub     rsp, 68h
.text:00000000000099C4                 mov     r10, r8
.text:00000000000099C7                 xor     r9d, r9d
.text:00000000000099CA                 mov     rax, fs:28h
.text:00000000000099D3                 mov     [rsp+68h+var_10], rax
.text:00000000000099D8                 xor     eax, eax
.text:00000000000099DA                 mov     r8, rsp
.text:00000000000099DD                 nop     dword ptr [rax]
.text:00000000000099E0
.text:00000000000099E0 loc_99E0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000099E0                 mov     eax, [r10]
.text:00000000000099E3                 cmp     eax, 2Fh ; '/'
.text:00000000000099E6                 ja      short loc_9A2A
.text:00000000000099E8                 mov     r11d, eax
.text:00000000000099EB                 add     r11, [r10+10h]
.text:00000000000099EF                 add     eax, 8
.text:00000000000099F2                 mov     [r10], eax
.text:00000000000099F5
.text:00000000000099F5 loc_99F5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000099F5                 mov     rax, [r11]
.text:00000000000099F8                 test    rax, rax
.text:00000000000099FB                 mov     [r8+r9*8], rax
.text:00000000000099FF                 jz      short loc_9A0B
.text:0000000000009A01                 add     r9, 1
.text:0000000000009A05                 cmp     r9, 0Ah
.text:0000000000009A09                 jnz     short loc_99E0
.text:0000000000009A0B
.text:0000000000009A0B loc_9A0B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000009A0B                 call    version_etc_arn
.text:0000000000009A10                 mov     rax, [rsp+68h+var_10]
.text:0000000000009A15                 xor     rax, fs:28h
.text:0000000000009A1E                 jnz     short loc_9A25
.text:0000000000009A20                 add     rsp, 68h
.text:0000000000009A24                 retn
.text:0000000000009A25 ; ---------------------------------------------------------------------------
.text:0000000000009A25
.text:0000000000009A25 loc_9A25:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000009A25                 call    ___stack_chk_fail
.text:0000000000009A2A ; ---------------------------------------------------------------------------
.text:0000000000009A2A
.text:0000000000009A2A loc_9A2A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000009A2A                 mov     r11, [r10+8]
.text:0000000000009A2E                 lea     rax, [r11+8]
.text:0000000000009A32                 mov     [r10+8], rax
.text:0000000000009A36                 jmp     short loc_99F5
.text:0000000000009A36 ; } // starts at 99C0
.text:0000000000009A36 version_etc_va  endp
.text:0000000000009A36
.text:0000000000009A36 ; ---------------------------------------------------------------------------
.text:0000000000009A38                 align 20h
.text:0000000000009A40
.text:0000000000009A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A40
.text:0000000000009A40 ; Attributes: info_from_lumina
.text:0000000000009A40
.text:0000000000009A40 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000009A40                 public version_etc
.text:0000000000009A40 version_etc     proc near               ; CODE XREF: main+164↑p
.text:0000000000009A40
.text:0000000000009A40 var_C0          = dword ptr -0C0h
.text:0000000000009A40 var_B8          = qword ptr -0B8h
.text:0000000000009A40 var_B0          = qword ptr -0B0h
.text:0000000000009A40 var_A8          = byte ptr -0A8h
.text:0000000000009A40 var_50          = qword ptr -50h
.text:0000000000009A40 var_48          = byte ptr -48h
.text:0000000000009A40 var_28          = qword ptr -28h
.text:0000000000009A40 var_20          = qword ptr -20h
.text:0000000000009A40 arg_0           = byte ptr  8
.text:0000000000009A40
.text:0000000000009A40 ; __unwind {
.text:0000000000009A40                 push    rbp
.text:0000000000009A41                 push    rbx
.text:0000000000009A42                 mov     r10d, 20h ; ' '
.text:0000000000009A48                 xor     r11d, r11d
.text:0000000000009A4B                 sub     rsp, 0B8h
.text:0000000000009A52                 mov     rax, fs:28h
.text:0000000000009A5B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000009A60                 xor     eax, eax
.text:0000000000009A62                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000009A6A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000009A72                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000009A7A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000009A7F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000009A87                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000009A8F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000009A94                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000009A9C                 xor     r9d, r9d
.text:0000000000009A9F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000009AA4                 mov     rbp, rax
.text:0000000000009AA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009AB0
.text:0000000000009AB0 loc_9AB0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000009AB0                 cmp     r10d, 2Fh ; '/'
.text:0000000000009AB4                 ja      short loc_9B0C
.text:0000000000009AB6                 mov     eax, r10d
.text:0000000000009AB9                 mov     r11d, 1
.text:0000000000009ABF                 add     r10d, 8
.text:0000000000009AC3                 add     rax, rbp
.text:0000000000009AC6
.text:0000000000009AC6 loc_9AC6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000009AC6                 mov     rax, [rax]
.text:0000000000009AC9                 test    rax, rax
.text:0000000000009ACC                 mov     [r8+r9*8], rax
.text:0000000000009AD0                 jz      short loc_9ADC
.text:0000000000009AD2                 add     r9, 1
.text:0000000000009AD6                 cmp     r9, 0Ah
.text:0000000000009ADA                 jnz     short loc_9AB0
.text:0000000000009ADC
.text:0000000000009ADC loc_9ADC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000009ADC                 test    r11b, r11b
.text:0000000000009ADF                 jnz     short loc_9B05
.text:0000000000009AE1
.text:0000000000009AE1 loc_9AE1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000009AE1                 call    version_etc_arn
.text:0000000000009AE6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000009AEB                 xor     rax, fs:28h
.text:0000000000009AF4                 jnz     short loc_9B00
.text:0000000000009AF6                 add     rsp, 0B8h
.text:0000000000009AFD                 pop     rbx
.text:0000000000009AFE                 pop     rbp
.text:0000000000009AFF                 retn
.text:0000000000009B00 ; ---------------------------------------------------------------------------
.text:0000000000009B00
.text:0000000000009B00 loc_9B00:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000009B00                 call    ___stack_chk_fail
.text:0000000000009B05 ; ---------------------------------------------------------------------------
.text:0000000000009B05
.text:0000000000009B05 loc_9B05:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000009B05                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000009B0A                 jmp     short loc_9AE1
.text:0000000000009B0C ; ---------------------------------------------------------------------------
.text:0000000000009B0C
.text:0000000000009B0C loc_9B0C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000009B0C                 mov     rax, rbx
.text:0000000000009B0F                 add     rbx, 8
.text:0000000000009B13                 jmp     short loc_9AC6
.text:0000000000009B13 ; } // starts at 9A40
.text:0000000000009B13 version_etc     endp
.text:0000000000009B13
.text:0000000000009B13 ; ---------------------------------------------------------------------------
.text:0000000000009B15                 align 20h
.text:0000000000009B20
.text:0000000000009B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B20
.text:0000000000009B20 ; Attributes: info_from_lumina
.text:0000000000009B20
.text:0000000000009B20 ; void __cdecl emit_bug_reporting_address()
.text:0000000000009B20                 public emit_bug_reporting_address
.text:0000000000009B20 emit_bug_reporting_address proc near
.text:0000000000009B20 ; __unwind {
.text:0000000000009B20                 push    rbx
.text:0000000000009B21                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000009B28                 mov     edx, 5          ; category
.text:0000000000009B2D                 xor     edi, edi        ; domainname
.text:0000000000009B2F                 call    _dcgettext
.text:0000000000009B34                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000009B3B                 mov     rsi, rax
.text:0000000000009B3E                 mov     edi, 1
.text:0000000000009B43                 xor     eax, eax
.text:0000000000009B45                 call    ___printf_chk
.text:0000000000009B4A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000009B51                 mov     edx, 5          ; category
.text:0000000000009B56                 xor     edi, edi        ; domainname
.text:0000000000009B58                 call    _dcgettext
.text:0000000000009B5D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000009B64                 lea     rdx, unk_DEAC
.text:0000000000009B6B                 mov     rsi, rax
.text:0000000000009B6E                 mov     edi, 1
.text:0000000000009B73                 xor     eax, eax
.text:0000000000009B75                 call    ___printf_chk
.text:0000000000009B7A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000009B81                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000009B88                 xor     edi, edi        ; domainname
.text:0000000000009B8A                 mov     edx, 5          ; category
.text:0000000000009B8F                 call    _dcgettext
.text:0000000000009B94                 mov     rsi, rbx        ; stream
.text:0000000000009B97                 mov     rdi, rax        ; s
.text:0000000000009B9A                 pop     rbx
.text:0000000000009B9B                 jmp     _fputs_unlocked
.text:0000000000009B9B ; } // starts at 9B20
.text:0000000000009B9B emit_bug_reporting_address endp
.text:0000000000009B9B
.text:0000000000009BA0
.text:0000000000009BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BA0
.text:0000000000009BA0
.text:0000000000009BA0                 public xmalloc
.text:0000000000009BA0 xmalloc         proc near               ; CODE XREF: print_it+2D↑p
.text:0000000000009BA0                                         ; quotearg_n_options+127↑p ...
.text:0000000000009BA0 ; __unwind {
.text:0000000000009BA0                 push    rbx
.text:0000000000009BA1                 mov     rbx, rdi
.text:0000000000009BA4                 call    _malloc
.text:0000000000009BA9                 test    rax, rax
.text:0000000000009BAC                 jnz     short loc_9BB3
.text:0000000000009BAE                 test    rbx, rbx
.text:0000000000009BB1                 jnz     short loc_9BB5
.text:0000000000009BB3
.text:0000000000009BB3 loc_9BB3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000009BB3                 pop     rbx
.text:0000000000009BB4                 retn
.text:0000000000009BB5 ; ---------------------------------------------------------------------------
.text:0000000000009BB5
.text:0000000000009BB5 loc_9BB5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000009BB5                 call    xalloc_die
.text:0000000000009BB5 ; } // starts at 9BA0
.text:0000000000009BB5 xmalloc         endp
.text:0000000000009BB5
.text:0000000000009BB5 ; ---------------------------------------------------------------------------
.text:0000000000009BBA                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BC0
.text:0000000000009BC0 ; Attributes: info_from_lumina
.text:0000000000009BC0
.text:0000000000009BC0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000009BC0                 public xnmalloc
.text:0000000000009BC0 xnmalloc        proc near
.text:0000000000009BC0 ; __unwind {
.text:0000000000009BC0                 mov     rax, rdi
.text:0000000000009BC3                 mul     rsi
.text:0000000000009BC6                 mov     rdi, rax
.text:0000000000009BC9                 seto    al
.text:0000000000009BCC                 test    rdi, rdi
.text:0000000000009BCF                 js      short loc_9BDB
.text:0000000000009BD1                 movzx   eax, al
.text:0000000000009BD4                 test    rax, rax
.text:0000000000009BD7                 jnz     short loc_9BDB
.text:0000000000009BD9                 jmp     short xmalloc
.text:0000000000009BDB ; ---------------------------------------------------------------------------
.text:0000000000009BDB
.text:0000000000009BDB loc_9BDB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000009BDB                                         ; xnmalloc+17↑j
.text:0000000000009BDB                 sub     rsp, 8
.text:0000000000009BDF                 call    xalloc_die
.text:0000000000009BDF ; } // starts at 9BC0
.text:0000000000009BDF xnmalloc        endp
.text:0000000000009BDF
.text:0000000000009BDF ; ---------------------------------------------------------------------------
.text:0000000000009BE4                 align 10h
.text:0000000000009BF0
.text:0000000000009BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BF0
.text:0000000000009BF0
.text:0000000000009BF0                 public xcharalloc
.text:0000000000009BF0 xcharalloc      proc near
.text:0000000000009BF0 ; __unwind {
.text:0000000000009BF0                 jmp     short xmalloc
.text:0000000000009BF0 ; } // starts at 9BF0
.text:0000000000009BF0 xcharalloc      endp
.text:0000000000009BF0
.text:0000000000009BF0 ; ---------------------------------------------------------------------------
.text:0000000000009BF2                 align 20h
.text:0000000000009C00
.text:0000000000009C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C00
.text:0000000000009C00 ; Attributes: info_from_lumina
.text:0000000000009C00
.text:0000000000009C00 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000009C00                 public xrealloc
.text:0000000000009C00 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000009C00                                         ; quotearg_n_options+182↑p ...
.text:0000000000009C00 ; __unwind {
.text:0000000000009C00                 test    rsi, rsi
.text:0000000000009C03                 push    rbx
.text:0000000000009C04                 mov     rbx, rsi
.text:0000000000009C07                 jnz     short loc_9C0E
.text:0000000000009C09                 test    rdi, rdi
.text:0000000000009C0C                 jnz     short loc_9C28
.text:0000000000009C0E
.text:0000000000009C0E loc_9C0E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000009C0E                 mov     rsi, rbx        ; size
.text:0000000000009C11                 call    _realloc
.text:0000000000009C16                 test    rax, rax
.text:0000000000009C19                 jnz     short loc_9C20
.text:0000000000009C1B                 test    rbx, rbx
.text:0000000000009C1E                 jnz     short loc_9C31
.text:0000000000009C20
.text:0000000000009C20 loc_9C20:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000009C20                 pop     rbx
.text:0000000000009C21                 retn
.text:0000000000009C21 ; ---------------------------------------------------------------------------
.text:0000000000009C22                 align 8
.text:0000000000009C28
.text:0000000000009C28 loc_9C28:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000009C28                 call    _free
.text:0000000000009C2D                 xor     eax, eax
.text:0000000000009C2F                 pop     rbx
.text:0000000000009C30                 retn
.text:0000000000009C31 ; ---------------------------------------------------------------------------
.text:0000000000009C31
.text:0000000000009C31 loc_9C31:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000009C31                 call    xalloc_die
.text:0000000000009C31 ; } // starts at 9C00
.text:0000000000009C31 xrealloc        endp
.text:0000000000009C31
.text:0000000000009C31 ; ---------------------------------------------------------------------------
.text:0000000000009C36                 align 20h
.text:0000000000009C40
.text:0000000000009C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C40
.text:0000000000009C40 ; Attributes: info_from_lumina
.text:0000000000009C40
.text:0000000000009C40 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000009C40                 public xnrealloc
.text:0000000000009C40 xnrealloc       proc near
.text:0000000000009C40 ; __unwind {
.text:0000000000009C40                 mov     rax, rsi
.text:0000000000009C43                 mul     rdx
.text:0000000000009C46                 mov     rsi, rax
.text:0000000000009C49                 seto    al
.text:0000000000009C4C                 test    rsi, rsi
.text:0000000000009C4F                 js      short loc_9C5B
.text:0000000000009C51                 movzx   eax, al
.text:0000000000009C54                 test    rax, rax
.text:0000000000009C57                 jnz     short loc_9C5B
.text:0000000000009C59                 jmp     short xrealloc
.text:0000000000009C5B ; ---------------------------------------------------------------------------
.text:0000000000009C5B
.text:0000000000009C5B loc_9C5B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000009C5B                                         ; xnrealloc+17↑j
.text:0000000000009C5B                 sub     rsp, 8
.text:0000000000009C5F                 call    xalloc_die
.text:0000000000009C5F ; } // starts at 9C40
.text:0000000000009C5F xnrealloc       endp
.text:0000000000009C5F
.text:0000000000009C5F ; ---------------------------------------------------------------------------
.text:0000000000009C64                 align 10h
.text:0000000000009C70
.text:0000000000009C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C70
.text:0000000000009C70 ; Attributes: info_from_lumina
.text:0000000000009C70
.text:0000000000009C70 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000009C70                 public x2nrealloc
.text:0000000000009C70 x2nrealloc      proc near
.text:0000000000009C70 ; __unwind {
.text:0000000000009C70                 test    rdi, rdi
.text:0000000000009C73                 mov     r9, rdx
.text:0000000000009C76                 mov     rcx, [rsi]
.text:0000000000009C79                 jz      short loc_9CB0
.text:0000000000009C7B                 xor     edx, edx
.text:0000000000009C7D                 mov     rax, 5555555555555554h
.text:0000000000009C87                 div     r9
.text:0000000000009C8A                 cmp     rax, rcx
.text:0000000000009C8D                 jbe     short loc_9CCB
.text:0000000000009C8F                 mov     rax, rcx
.text:0000000000009C92                 shr     rax, 1
.text:0000000000009C95                 lea     rcx, [rax+rcx+1]
.text:0000000000009C9A
.text:0000000000009C9A loc_9C9A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000009C9A                 mov     [rsi], rcx
.text:0000000000009C9D                 imul    rcx, r9
.text:0000000000009CA1                 mov     rsi, rcx
.text:0000000000009CA4                 jmp     xrealloc
.text:0000000000009CA4 ; ---------------------------------------------------------------------------
.text:0000000000009CA9                 align 10h
.text:0000000000009CB0
.text:0000000000009CB0 loc_9CB0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000009CB0                 test    rcx, rcx
.text:0000000000009CB3                 jz      short loc_9CD8
.text:0000000000009CB5
.text:0000000000009CB5 loc_9CB5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000009CB5                 mov     rax, rcx
.text:0000000000009CB8                 mul     r9
.text:0000000000009CBB                 seto    dl
.text:0000000000009CBE                 test    rax, rax
.text:0000000000009CC1                 movzx   edx, dl
.text:0000000000009CC4                 js      short loc_9CCB
.text:0000000000009CC6                 test    rdx, rdx
.text:0000000000009CC9                 jz      short loc_9C9A
.text:0000000000009CCB
.text:0000000000009CCB loc_9CCB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000009CCB                                         ; x2nrealloc+54↑j
.text:0000000000009CCB                 sub     rsp, 8
.text:0000000000009CCF                 call    xalloc_die
.text:0000000000009CCF ; ---------------------------------------------------------------------------
.text:0000000000009CD4                 align 8
.text:0000000000009CD8
.text:0000000000009CD8 loc_9CD8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000009CD8                 xor     edx, edx
.text:0000000000009CDA                 mov     eax, 80h
.text:0000000000009CDF                 xor     r8d, r8d
.text:0000000000009CE2                 div     r9
.text:0000000000009CE5                 test    rax, rax
.text:0000000000009CE8                 setz    r8b
.text:0000000000009CEC                 lea     rcx, [r8+rax]
.text:0000000000009CF0                 jmp     short loc_9CB5
.text:0000000000009CF0 ; } // starts at 9C70
.text:0000000000009CF0 x2nrealloc      endp
.text:0000000000009CF0
.text:0000000000009CF0 ; ---------------------------------------------------------------------------
.text:0000000000009CF2                 align 20h
.text:0000000000009D00
.text:0000000000009D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D00
.text:0000000000009D00 ; Attributes: info_from_lumina
.text:0000000000009D00
.text:0000000000009D00 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000009D00                 public x2realloc
.text:0000000000009D00 x2realloc       proc near
.text:0000000000009D00 ; __unwind {
.text:0000000000009D00                 test    rdi, rdi
.text:0000000000009D03                 mov     rax, [rsi]
.text:0000000000009D06                 jz      short loc_9D30
.text:0000000000009D08                 mov     rdx, 5555555555555553h
.text:0000000000009D12                 cmp     rax, rdx
.text:0000000000009D15                 ja      short loc_9D41
.text:0000000000009D17                 mov     rdx, rax
.text:0000000000009D1A                 shr     rdx, 1
.text:0000000000009D1D                 lea     rax, [rdx+rax+1]
.text:0000000000009D22
.text:0000000000009D22 loc_9D22:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000009D22                 mov     [rsi], rax
.text:0000000000009D25                 mov     rsi, rax
.text:0000000000009D28                 jmp     xrealloc
.text:0000000000009D28 ; ---------------------------------------------------------------------------
.text:0000000000009D2D                 align 10h
.text:0000000000009D30
.text:0000000000009D30 loc_9D30:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000009D30                 test    rax, rax
.text:0000000000009D33                 mov     edx, 80h
.text:0000000000009D38                 cmovz   rax, rdx
.text:0000000000009D3C                 test    rax, rax
.text:0000000000009D3F                 jns     short loc_9D22
.text:0000000000009D41
.text:0000000000009D41 loc_9D41:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000009D41                 sub     rsp, 8
.text:0000000000009D45                 call    xalloc_die
.text:0000000000009D45 ; } // starts at 9D00
.text:0000000000009D45 x2realloc       endp
.text:0000000000009D45
.text:0000000000009D45 ; ---------------------------------------------------------------------------
.text:0000000000009D4A                 align 10h
.text:0000000000009D50
.text:0000000000009D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D50
.text:0000000000009D50
.text:0000000000009D50 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000009D50                 public xzalloc
.text:0000000000009D50 xzalloc         proc near
.text:0000000000009D50 ; __unwind {
.text:0000000000009D50                 push    rbx
.text:0000000000009D51                 mov     rbx, rdi
.text:0000000000009D54                 call    xmalloc
.text:0000000000009D59                 mov     rdx, rbx        ; n
.text:0000000000009D5C                 xor     esi, esi        ; c
.text:0000000000009D5E                 mov     rdi, rax        ; s
.text:0000000000009D61                 pop     rbx
.text:0000000000009D62                 jmp     _memset
.text:0000000000009D62 ; } // starts at 9D50
.text:0000000000009D62 xzalloc         endp
.text:0000000000009D62
.text:0000000000009D62 ; ---------------------------------------------------------------------------
.text:0000000000009D67                 align 10h
.text:0000000000009D70
.text:0000000000009D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D70
.text:0000000000009D70 ; Attributes: info_from_lumina
.text:0000000000009D70
.text:0000000000009D70 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000009D70                 public xcalloc
.text:0000000000009D70 xcalloc         proc near
.text:0000000000009D70 ; __unwind {
.text:0000000000009D70                 mov     rax, rdi
.text:0000000000009D73                 sub     rsp, 8
.text:0000000000009D77                 mul     rsi
.text:0000000000009D7A                 seto    dl
.text:0000000000009D7D                 test    rax, rax
.text:0000000000009D80                 js      short loc_9D99
.text:0000000000009D82                 movzx   edx, dl
.text:0000000000009D85                 test    rdx, rdx
.text:0000000000009D88                 jnz     short loc_9D99
.text:0000000000009D8A                 call    _calloc
.text:0000000000009D8F                 test    rax, rax
.text:0000000000009D92                 jz      short loc_9D99
.text:0000000000009D94                 add     rsp, 8
.text:0000000000009D98                 retn
.text:0000000000009D99 ; ---------------------------------------------------------------------------
.text:0000000000009D99
.text:0000000000009D99 loc_9D99:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000009D99                                         ; xcalloc+18↑j ...
.text:0000000000009D99                 call    xalloc_die
.text:0000000000009D99 ; } // starts at 9D70
.text:0000000000009D99 xcalloc         endp
.text:0000000000009D99
.text:0000000000009D99 ; ---------------------------------------------------------------------------
.text:0000000000009D9E                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DA0
.text:0000000000009DA0 ; Attributes: info_from_lumina
.text:0000000000009DA0
.text:0000000000009DA0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000009DA0                 public xmemdup
.text:0000000000009DA0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000009DA0                                         ; xstrdup+11↓j
.text:0000000000009DA0 ; __unwind {
.text:0000000000009DA0                 push    rbp
.text:0000000000009DA1                 push    rbx
.text:0000000000009DA2                 mov     rbp, rdi
.text:0000000000009DA5                 mov     rdi, rsi
.text:0000000000009DA8                 mov     rbx, rsi
.text:0000000000009DAB                 sub     rsp, 8
.text:0000000000009DAF                 call    xmalloc
.text:0000000000009DB4                 add     rsp, 8
.text:0000000000009DB8                 mov     rdx, rbx        ; n
.text:0000000000009DBB                 mov     rsi, rbp        ; src
.text:0000000000009DBE                 pop     rbx
.text:0000000000009DBF                 pop     rbp
.text:0000000000009DC0                 mov     rdi, rax        ; dest
.text:0000000000009DC3                 jmp     _memcpy
.text:0000000000009DC3 ; } // starts at 9DA0
.text:0000000000009DC3 xmemdup         endp
.text:0000000000009DC3
.text:0000000000009DC3 ; ---------------------------------------------------------------------------
.text:0000000000009DC8                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DD0
.text:0000000000009DD0
.text:0000000000009DD0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000009DD0                 public xstrdup
.text:0000000000009DD0 xstrdup         proc near               ; CODE XREF: default_format+1D↑j
.text:0000000000009DD0                                         ; default_format+43↑p ...
.text:0000000000009DD0 ; __unwind {
.text:0000000000009DD0                 push    rbx
.text:0000000000009DD1                 mov     rbx, rdi
.text:0000000000009DD4                 call    _strlen
.text:0000000000009DD9                 mov     rdi, rbx        ; src
.text:0000000000009DDC                 lea     rsi, [rax+1]    ; n
.text:0000000000009DE0                 pop     rbx
.text:0000000000009DE1                 jmp     short xmemdup
.text:0000000000009DE1 ; } // starts at 9DD0
.text:0000000000009DE1 xstrdup         endp
.text:0000000000009DE1
.text:0000000000009DE1 ; ---------------------------------------------------------------------------
.text:0000000000009DE3                 align 10h
.text:0000000000009DF0
.text:0000000000009DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DF0
.text:0000000000009DF0 ; Attributes: noreturn info_from_lumina
.text:0000000000009DF0
.text:0000000000009DF0 ; void __cdecl xalloc_die()
.text:0000000000009DF0                 public xalloc_die
.text:0000000000009DF0 xalloc_die      proc near               ; CODE XREF: dir_name:loc_5763↑p
.text:0000000000009DF0                                         ; quotearg_n_options:loc_8D36↑p ...
.text:0000000000009DF0 ; __unwind {
.text:0000000000009DF0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000009DF7                 sub     rsp, 8
.text:0000000000009DFB                 mov     edx, 5          ; category
.text:0000000000009E00                 xor     edi, edi        ; domainname
.text:0000000000009E02                 call    _dcgettext
.text:0000000000009E07                 mov     edi, cs:exit_failure ; status
.text:0000000000009E0D                 lea     rdx, aS_0+2     ; format
.text:0000000000009E14                 mov     rcx, rax
.text:0000000000009E17                 xor     esi, esi        ; errnum
.text:0000000000009E19                 xor     eax, eax
.text:0000000000009E1B                 call    _error
.text:0000000000009E20                 call    _abort
.text:0000000000009E20 ; } // starts at 9DF0
.text:0000000000009E20 xalloc_die      endp
.text:0000000000009E20
.text:0000000000009E20 ; ---------------------------------------------------------------------------
.text:0000000000009E25                 align 10h
.text:0000000000009E30
.text:0000000000009E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E30
.text:0000000000009E30 ; Attributes: info_from_lumina
.text:0000000000009E30
.text:0000000000009E30 ; char *__cdecl xgetcwd()
.text:0000000000009E30                 public xgetcwd
.text:0000000000009E30 xgetcwd         proc near               ; CODE XREF: find_mount_point:loc_5070↑p
.text:0000000000009E30 ; __unwind {
.text:0000000000009E30                 push    rbx
.text:0000000000009E31                 xor     esi, esi        ; size
.text:0000000000009E33                 xor     edi, edi        ; buf
.text:0000000000009E35                 call    _getcwd
.text:0000000000009E3A                 test    rax, rax
.text:0000000000009E3D                 mov     rbx, rax
.text:0000000000009E40                 jz      short loc_9E50
.text:0000000000009E42
.text:0000000000009E42 loc_9E42:                               ; CODE XREF: xgetcwd+28↓j
.text:0000000000009E42                 mov     rax, rbx
.text:0000000000009E45                 pop     rbx
.text:0000000000009E46                 retn
.text:0000000000009E46 ; ---------------------------------------------------------------------------
.text:0000000000009E47                 align 10h
.text:0000000000009E50
.text:0000000000009E50 loc_9E50:                               ; CODE XREF: xgetcwd+10↑j
.text:0000000000009E50                 call    ___errno_location
.text:0000000000009E55                 cmp     dword ptr [rax], 0Ch
.text:0000000000009E58                 jnz     short loc_9E42
.text:0000000000009E5A                 call    xalloc_die
.text:0000000000009E5A ; } // starts at 9E30
.text:0000000000009E5A xgetcwd         endp
.text:0000000000009E5A
.text:0000000000009E5A ; ---------------------------------------------------------------------------
.text:0000000000009E5F                 align 20h
.text:0000000000009E60
.text:0000000000009E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E60
.text:0000000000009E60 ; Attributes: info_from_lumina
.text:0000000000009E60
.text:0000000000009E60 ; char *xasprintf(const char *fmt, ...)
.text:0000000000009E60                 public xasprintf
.text:0000000000009E60 xasprintf       proc near               ; CODE XREF: default_format+78↑p
.text:0000000000009E60                                         ; default_format+AA↑p ...
.text:0000000000009E60
.text:0000000000009E60 var_D8          = dword ptr -0D8h
.text:0000000000009E60 var_D4          = dword ptr -0D4h
.text:0000000000009E60 var_D0          = qword ptr -0D0h
.text:0000000000009E60 var_C8          = qword ptr -0C8h
.text:0000000000009E60 var_C0          = qword ptr -0C0h
.text:0000000000009E60 var_B8          = byte ptr -0B8h
.text:0000000000009E60 var_B0          = qword ptr -0B0h
.text:0000000000009E60 var_A8          = qword ptr -0A8h
.text:0000000000009E60 var_A0          = qword ptr -0A0h
.text:0000000000009E60 var_98          = qword ptr -98h
.text:0000000000009E60 var_90          = qword ptr -90h
.text:0000000000009E60 var_88          = xmmword ptr -88h
.text:0000000000009E60 var_78          = xmmword ptr -78h
.text:0000000000009E60 var_68          = xmmword ptr -68h
.text:0000000000009E60 var_58          = xmmword ptr -58h
.text:0000000000009E60 var_48          = xmmword ptr -48h
.text:0000000000009E60 var_38          = xmmword ptr -38h
.text:0000000000009E60 var_28          = xmmword ptr -28h
.text:0000000000009E60 var_18          = xmmword ptr -18h
.text:0000000000009E60 arg_0           = byte ptr  8
.text:0000000000009E60
.text:0000000000009E60 ; __unwind {
.text:0000000000009E60                 sub     rsp, 0D8h
.text:0000000000009E67                 test    al, al
.text:0000000000009E69                 mov     [rsp+0D8h+var_B0], rsi
.text:0000000000009E6E                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000009E73                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000009E78                 mov     [rsp+0D8h+var_98], r8
.text:0000000000009E7D                 mov     [rsp+0D8h+var_90], r9
.text:0000000000009E82                 jz      short loc_9EBB
.text:0000000000009E84                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000009E89                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000009E8E                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000009E93                 movaps  [rsp+0D8h+var_58], xmm3
.text:0000000000009E9B                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000009EA3                 movaps  [rsp+0D8h+var_38], xmm5
.text:0000000000009EAB                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000009EB3                 movaps  [rsp+0D8h+var_18], xmm7
.text:0000000000009EBB
.text:0000000000009EBB loc_9EBB:                               ; CODE XREF: xasprintf+22↑j
.text:0000000000009EBB                 mov     rax, fs:28h
.text:0000000000009EC4                 mov     [rsp+0D8h+var_C0], rax
.text:0000000000009EC9                 xor     eax, eax
.text:0000000000009ECB                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000009ED3                 mov     rsi, rsp
.text:0000000000009ED6                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000009EDB                 lea     rax, [rsp+0D8h+var_B8]
.text:0000000000009EE0                 mov     [rsp+0D8h+var_D8], 8
.text:0000000000009EE7                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000009EEF                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000009EF4                 call    xvasprintf
.text:0000000000009EF9                 mov     rdx, [rsp+0D8h+var_C0]
.text:0000000000009EFE                 xor     rdx, fs:28h
.text:0000000000009F07                 jnz     short loc_9F11
.text:0000000000009F09                 add     rsp, 0D8h
.text:0000000000009F10                 retn
.text:0000000000009F11 ; ---------------------------------------------------------------------------
.text:0000000000009F11
.text:0000000000009F11 loc_9F11:                               ; CODE XREF: xasprintf+A7↑j
.text:0000000000009F11                 call    ___stack_chk_fail
.text:0000000000009F11 ; } // starts at 9E60
.text:0000000000009F11 xasprintf       endp
.text:0000000000009F11
.text:0000000000009F11 ; ---------------------------------------------------------------------------
.text:0000000000009F16                 align 20h
.text:0000000000009F20
.text:0000000000009F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F20
.text:0000000000009F20
.text:0000000000009F20 cdb_free        proc near               ; CODE XREF: cdb_advance_fd+20↓p
.text:0000000000009F20                                         ; chdir_long+1CE↓p ...
.text:0000000000009F20 ; __unwind {
.text:0000000000009F20                 mov     edi, [rdi]      ; fd
.text:0000000000009F22                 test    edi, edi
.text:0000000000009F24                 js      short locret_9F40
.text:0000000000009F26                 sub     rsp, 8
.text:0000000000009F2A                 call    _close
.text:0000000000009F2F                 test    eax, eax
.text:0000000000009F31                 jnz     short loc_9F42
.text:0000000000009F33                 add     rsp, 8
.text:0000000000009F37                 retn
.text:0000000000009F37 ; ---------------------------------------------------------------------------
.text:0000000000009F38                 align 20h
.text:0000000000009F40
.text:0000000000009F40 locret_9F40:                            ; CODE XREF: cdb_free+4↑j
.text:0000000000009F40                 rep retn
.text:0000000000009F42 ; ---------------------------------------------------------------------------
.text:0000000000009F42
.text:0000000000009F42 loc_9F42:                               ; CODE XREF: cdb_free+11↑j
.text:0000000000009F42                 lea     rcx, __PRETTY_FUNCTION___5081 ; "cdb_free"
.text:0000000000009F49                 lea     rsi, file       ; "../coreutils-8.31/lib/chdir-long.c"
.text:0000000000009F50                 lea     rdi, assertion  ; "! close_fail"
.text:0000000000009F57                 mov     edx, 40h ; '@'  ; line
.text:0000000000009F5C                 call    ___assert_fail
.text:0000000000009F5C ; } // starts at 9F20
.text:0000000000009F5C cdb_free        endp
.text:0000000000009F5C
.text:0000000000009F5C ; ---------------------------------------------------------------------------
.text:0000000000009F61                 align 10h
.text:0000000000009F70
.text:0000000000009F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F70
.text:0000000000009F70
.text:0000000000009F70 cdb_advance_fd  proc near               ; CODE XREF: chdir_long+103↓p
.text:0000000000009F70                                         ; chdir_long+199↓p ...
.text:0000000000009F70 ; __unwind {
.text:0000000000009F70                 push    rbp
.text:0000000000009F71                 push    rbx
.text:0000000000009F72                 mov     rbx, rdi
.text:0000000000009F75                 xor     eax, eax
.text:0000000000009F77                 mov     edx, offset unk_10900 ; oflag
.text:0000000000009F7C                 sub     rsp, 8
.text:0000000000009F80                 mov     edi, [rdi]      ; fd
.text:0000000000009F82                 call    _openat
.text:0000000000009F87                 test    eax, eax
.text:0000000000009F89                 js      short loc_9FA0
.text:0000000000009F8B                 mov     ebp, eax
.text:0000000000009F8D                 mov     rdi, rbx
.text:0000000000009F90                 call    cdb_free
.text:0000000000009F95                 mov     [rbx], ebp
.text:0000000000009F97                 xor     eax, eax
.text:0000000000009F99
.text:0000000000009F99 loc_9F99:                               ; CODE XREF: cdb_advance_fd+35↓j
.text:0000000000009F99                 add     rsp, 8
.text:0000000000009F9D                 pop     rbx
.text:0000000000009F9E                 pop     rbp
.text:0000000000009F9F                 retn
.text:0000000000009FA0 ; ---------------------------------------------------------------------------
.text:0000000000009FA0
.text:0000000000009FA0 loc_9FA0:                               ; CODE XREF: cdb_advance_fd+19↑j
.text:0000000000009FA0                 mov     eax, 0FFFFFFFFh
.text:0000000000009FA5                 jmp     short loc_9F99
.text:0000000000009FA5 ; } // starts at 9F70
.text:0000000000009FA5 cdb_advance_fd  endp
.text:0000000000009FA5
.text:0000000000009FA5 ; ---------------------------------------------------------------------------
.text:0000000000009FA7                 align 10h
.text:0000000000009FB0
.text:0000000000009FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009FB0
.text:0000000000009FB0 ; Attributes: info_from_lumina
.text:0000000000009FB0
.text:0000000000009FB0 ; __int64 __fastcall chdir_long(void *s)
.text:0000000000009FB0                 public chdir_long
.text:0000000000009FB0 chdir_long      proc near               ; CODE XREF: restore_cwd+14↑j
.text:0000000000009FB0
.text:0000000000009FB0 fd              = dword ptr -44h
.text:0000000000009FB0 var_40          = qword ptr -40h
.text:0000000000009FB0
.text:0000000000009FB0 ; __unwind {
.text:0000000000009FB0                 push    r15
.text:0000000000009FB2                 push    r14
.text:0000000000009FB4                 push    r13
.text:0000000000009FB6                 push    r12
.text:0000000000009FB8                 push    rbp
.text:0000000000009FB9                 push    rbx
.text:0000000000009FBA                 mov     rbp, rdi
.text:0000000000009FBD                 sub     rsp, 18h
.text:0000000000009FC1                 mov     rax, fs:28h
.text:0000000000009FCA                 mov     [rsp+48h+var_40], rax
.text:0000000000009FCF                 xor     eax, eax
.text:0000000000009FD1                 call    _chdir          ; PIC mode
.text:0000000000009FD6                 test    eax, eax
.text:0000000000009FD8                 mov     ebx, eax
.text:0000000000009FDA                 jz      short loc_9FE9
.text:0000000000009FDC                 call    ___errno_location ; PIC mode
.text:0000000000009FE1                 cmp     dword ptr [rax], 24h ; '$'
.text:0000000000009FE4                 mov     r14, rax
.text:0000000000009FE7                 jz      short loc_A010
.text:0000000000009FE9
.text:0000000000009FE9 loc_9FE9:                               ; CODE XREF: chdir_long+2A↑j
.text:0000000000009FE9                                         ; chdir_long+162↓j ...
.text:0000000000009FE9                 mov     rcx, [rsp+48h+var_40]
.text:0000000000009FEE                 xor     rcx, fs:28h
.text:0000000000009FF7                 mov     eax, ebx
.text:0000000000009FF9                 jnz     loc_A201
.text:0000000000009FFF                 add     rsp, 18h
.text:000000000000A003                 pop     rbx
.text:000000000000A004                 pop     rbp
.text:000000000000A005                 pop     r12
.text:000000000000A007                 pop     r13
.text:000000000000A009                 pop     r14
.text:000000000000A00B                 pop     r15
.text:000000000000A00D                 retn
.text:000000000000A00D ; ---------------------------------------------------------------------------
.text:000000000000A00E                 align 10h
.text:000000000000A010
.text:000000000000A010 loc_A010:                               ; CODE XREF: chdir_long+37↑j
.text:000000000000A010                 mov     rdi, rbp        ; s
.text:000000000000A013                 call    _strlen         ; PIC mode
.text:000000000000A018                 test    rax, rax
.text:000000000000A01B                 mov     r12, rax
.text:000000000000A01E                 mov     [rsp+48h+fd], 0FFFFFF9Ch
.text:000000000000A026                 jz      loc_A206
.text:000000000000A02C                 cmp     rax, 0FFFh
.text:000000000000A032                 jbe     loc_A225
.text:000000000000A038                 lea     rsi, aLibs+6    ; accept
.text:000000000000A03F                 mov     rdi, rbp        ; s
.text:000000000000A042                 call    _strspn         ; PIC mode
.text:000000000000A047                 cmp     rax, 2
.text:000000000000A04B                 mov     rbx, rax
.text:000000000000A04E                 jz      loc_A120
.text:000000000000A054                 test    rax, rax
.text:000000000000A057                 mov     r15, rbp
.text:000000000000A05A                 jnz     loc_A1C0
.text:000000000000A060
.text:000000000000A060 loc_A060:                               ; CODE XREF: chdir_long+1BC↓j
.text:000000000000A060                                         ; chdir_long+22D↓j
.text:000000000000A060                 cmp     byte ptr [r15], 2Fh ; '/'
.text:000000000000A064                 jz      loc_A263
.text:000000000000A06A                 add     rbp, r12
.text:000000000000A06D                 cmp     r15, rbp
.text:000000000000A070                 ja      loc_A244
.text:000000000000A076                 mov     rax, rbp
.text:000000000000A079                 lea     r12, [rsp+48h+fd]
.text:000000000000A07E                 sub     rax, r15
.text:000000000000A081                 cmp     rax, 0FFFh
.text:000000000000A087                 mov     r13, r12
.text:000000000000A08A                 jg      short loc_A0EC
.text:000000000000A08C                 jmp     loc_A190
.text:000000000000A08C ; ---------------------------------------------------------------------------
.text:000000000000A091                 align 8
.text:000000000000A098
.text:000000000000A098 loc_A098:                               ; CODE XREF: chdir_long+154↓j
.text:000000000000A098                 mov     byte ptr [rax], 0
.text:000000000000A09B                 sub     rax, r15
.text:000000000000A09E                 cmp     rax, 0FFFh
.text:000000000000A0A4                 jg      loc_A1E2
.text:000000000000A0AA                 mov     rsi, r15
.text:000000000000A0AD                 mov     rdi, r12
.text:000000000000A0B0                 mov     r13, r12
.text:000000000000A0B3                 call    cdb_advance_fd
.text:000000000000A0B8                 test    eax, eax
.text:000000000000A0BA                 mov     byte ptr [rbx], 2Fh ; '/'
.text:000000000000A0BD                 jnz     loc_A178
.text:000000000000A0C3                 add     rbx, 1
.text:000000000000A0C7                 lea     rsi, aLibs+6    ; accept
.text:000000000000A0CE                 mov     rdi, rbx        ; s
.text:000000000000A0D1                 call    _strspn         ; PIC mode
.text:000000000000A0D6                 lea     r15, [rbx+rax]
.text:000000000000A0DA                 mov     rax, rbp
.text:000000000000A0DD                 sub     rax, r15
.text:000000000000A0E0                 cmp     rax, 0FFFh
.text:000000000000A0E6                 jle     loc_A190
.text:000000000000A0EC
.text:000000000000A0EC loc_A0EC:                               ; CODE XREF: chdir_long+DA↑j
.text:000000000000A0EC                 mov     edx, 1000h      ; n
.text:000000000000A0F1                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000A0F6                 mov     rdi, r15        ; s
.text:000000000000A0F9                 call    _memrchr        ; PIC mode
.text:000000000000A0FE                 test    rax, rax
.text:000000000000A101                 mov     rbx, rax
.text:000000000000A104                 jnz     short loc_A098
.text:000000000000A106                 mov     dword ptr [r14], 24h ; '$'
.text:000000000000A10D                 mov     ebx, 0FFFFFFFFh
.text:000000000000A112                 jmp     loc_9FE9
.text:000000000000A112 ; ---------------------------------------------------------------------------
.text:000000000000A117                 align 20h
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: chdir_long+9E↑j
.text:000000000000A120                 lea     rdx, [r12-3]    ; n
.text:000000000000A125                 lea     rdi, [rbp+3]    ; s
.text:000000000000A129                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000A12E                 call    _memchr         ; PIC mode
.text:000000000000A133                 test    rax, rax
.text:000000000000A136                 mov     rbx, rax
.text:000000000000A139                 jz      short loc_A186
.text:000000000000A13B                 lea     r13, [rsp+48h+fd]
.text:000000000000A140                 mov     byte ptr [rax], 0
.text:000000000000A143                 mov     rsi, rbp
.text:000000000000A146                 mov     rdi, r13
.text:000000000000A149                 call    cdb_advance_fd
.text:000000000000A14E                 test    eax, eax
.text:000000000000A150                 mov     byte ptr [rbx], 2Fh ; '/'
.text:000000000000A153                 jnz     short loc_A178
.text:000000000000A155                 add     rbx, 1
.text:000000000000A159                 lea     rsi, aLibs+6    ; accept
.text:000000000000A160                 mov     rdi, rbx        ; s
.text:000000000000A163                 call    _strspn         ; PIC mode
.text:000000000000A168                 lea     r15, [rbx+rax]
.text:000000000000A16C                 jmp     loc_A060
.text:000000000000A16C ; ---------------------------------------------------------------------------
.text:000000000000A171                 align 8
.text:000000000000A178
.text:000000000000A178 loc_A178:                               ; CODE XREF: chdir_long+10D↑j
.text:000000000000A178                                         ; chdir_long+1A3↑j ...
.text:000000000000A178                 mov     ebx, [r14]
.text:000000000000A17B                 mov     rdi, r13
.text:000000000000A17E                 call    cdb_free
.text:000000000000A183                 mov     [r14], ebx
.text:000000000000A186
.text:000000000000A186 loc_A186:                               ; CODE XREF: chdir_long+189↑j
.text:000000000000A186                 mov     ebx, 0FFFFFFFFh
.text:000000000000A18B                 jmp     loc_9FE9
.text:000000000000A190 ; ---------------------------------------------------------------------------
.text:000000000000A190
.text:000000000000A190 loc_A190:                               ; CODE XREF: chdir_long+DC↑j
.text:000000000000A190                                         ; chdir_long+136↑j
.text:000000000000A190                 cmp     rbp, r15
.text:000000000000A193                 jbe     short loc_A1A4
.text:000000000000A195                 mov     rsi, r15
.text:000000000000A198                 mov     rdi, r13
.text:000000000000A19B                 call    cdb_advance_fd
.text:000000000000A1A0                 test    eax, eax
.text:000000000000A1A2                 jnz     short loc_A178
.text:000000000000A1A4
.text:000000000000A1A4 loc_A1A4:                               ; CODE XREF: chdir_long+1E3↑j
.text:000000000000A1A4                 mov     edi, [rsp+48h+fd] ; fd
.text:000000000000A1A8                 call    _fchdir         ; PIC mode
.text:000000000000A1AD                 test    eax, eax
.text:000000000000A1AF                 mov     ebx, eax
.text:000000000000A1B1                 jnz     short loc_A178
.text:000000000000A1B3                 mov     rdi, r13
.text:000000000000A1B6                 call    cdb_free
.text:000000000000A1BB                 jmp     loc_9FE9
.text:000000000000A1C0 ; ---------------------------------------------------------------------------
.text:000000000000A1C0
.text:000000000000A1C0 loc_A1C0:                               ; CODE XREF: chdir_long+AA↑j
.text:000000000000A1C0                 lea     r13, [rsp+48h+fd]
.text:000000000000A1C5                 lea     rsi, aLibs+6    ; "/"
.text:000000000000A1CC                 mov     rdi, r13
.text:000000000000A1CF                 call    cdb_advance_fd
.text:000000000000A1D4                 test    eax, eax
.text:000000000000A1D6                 jnz     short loc_A178
.text:000000000000A1D8                 lea     r15, [rbp+rbx+0]
.text:000000000000A1DD                 jmp     loc_A060
.text:000000000000A1E2 ; ---------------------------------------------------------------------------
.text:000000000000A1E2
.text:000000000000A1E2 loc_A1E2:                               ; CODE XREF: chdir_long+F4↑j
.text:000000000000A1E2                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000A1E9                 lea     rsi, file       ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000A1F0                 lea     rdi, aSlashDir4096 ; "slash - dir < 4096"
.text:000000000000A1F7                 mov     edx, 0B3h       ; line
.text:000000000000A1FC                 call    ___assert_fail  ; PIC mode
.text:000000000000A201 ; ---------------------------------------------------------------------------
.text:000000000000A201
.text:000000000000A201 loc_A201:                               ; CODE XREF: chdir_long+49↑j
.text:000000000000A201                 call    ___stack_chk_fail ; PIC mode
.text:000000000000A206 ; ---------------------------------------------------------------------------
.text:000000000000A206
.text:000000000000A206 loc_A206:                               ; CODE XREF: chdir_long+76↑j
.text:000000000000A206                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000A20D                 lea     rsi, file       ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000A214                 lea     rdi, a0Len      ; "0 < len"
.text:000000000000A21B                 mov     edx, 7Eh ; '~'  ; line
.text:000000000000A220                 call    ___assert_fail  ; PIC mode
.text:000000000000A225 ; ---------------------------------------------------------------------------
.text:000000000000A225
.text:000000000000A225 loc_A225:                               ; CODE XREF: chdir_long+82↑j
.text:000000000000A225                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000A22C                 lea     rsi, file       ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000A233                 lea     rdi, a4096Len   ; "4096 <= len"
.text:000000000000A23A                 mov     edx, 7Fh        ; line
.text:000000000000A23F                 call    ___assert_fail  ; PIC mode
.text:000000000000A244 ; ---------------------------------------------------------------------------
.text:000000000000A244
.text:000000000000A244 loc_A244:                               ; CODE XREF: chdir_long+C0↑j
.text:000000000000A244                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000A24B                 lea     rsi, file       ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000A252                 lea     rdi, aDirDirEnd ; "dir <= dir_end"
.text:000000000000A259                 mov     edx, 0A3h       ; line
.text:000000000000A25E                 call    ___assert_fail  ; PIC mode
.text:000000000000A263 ; ---------------------------------------------------------------------------
.text:000000000000A263
.text:000000000000A263 loc_A263:                               ; CODE XREF: chdir_long+B4↑j
.text:000000000000A263                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000A26A                 lea     rsi, file       ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000A271                 lea     rdi, aDir       ; "*dir != '/'"
.text:000000000000A278                 mov     edx, 0A2h       ; line
.text:000000000000A27D                 call    ___assert_fail  ; PIC mode
.text:000000000000A27D ; } // starts at 9FB0
.text:000000000000A27D chdir_long      endp
.text:000000000000A27D
.text:000000000000A27D ; ---------------------------------------------------------------------------
.text:000000000000A282                 align 10h
.text:000000000000A290
.text:000000000000A290 ; =============== S U B R O U T I N E =======================================
.text:000000000000A290
.text:000000000000A290 ; Attributes: info_from_lumina
.text:000000000000A290
.text:000000000000A290 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000A290                 public rpl_mbrtowc
.text:000000000000A290 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:000000000000A290
.text:000000000000A290 pwc             = dword ptr -34h
.text:000000000000A290 var_30          = qword ptr -30h
.text:000000000000A290
.text:000000000000A290 ; __unwind {
.text:000000000000A290                 push    r13
.text:000000000000A292                 push    r12
.text:000000000000A294                 mov     r13, rsi
.text:000000000000A297                 push    rbp
.text:000000000000A298                 push    rbx
.text:000000000000A299                 mov     rbx, rdi
.text:000000000000A29C                 mov     r12, rdx
.text:000000000000A29F                 sub     rsp, 18h
.text:000000000000A2A3                 mov     rax, fs:28h
.text:000000000000A2AC                 mov     [rsp+38h+var_30], rax
.text:000000000000A2B1                 xor     eax, eax
.text:000000000000A2B3                 lea     rax, [rsp+38h+pwc]
.text:000000000000A2B8                 test    rdi, rdi
.text:000000000000A2BB                 cmovz   rbx, rax
.text:000000000000A2BF                 mov     rdi, rbx        ; pwc
.text:000000000000A2C2                 call    _mbrtowc
.text:000000000000A2C7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000A2CB                 mov     rbp, rax
.text:000000000000A2CE                 jbe     short loc_A2F0
.text:000000000000A2D0                 test    r12, r12
.text:000000000000A2D3                 jz      short loc_A2F0
.text:000000000000A2D5                 xor     edi, edi
.text:000000000000A2D7                 call    hard_locale
.text:000000000000A2DC                 test    al, al
.text:000000000000A2DE                 jnz     short loc_A2F0
.text:000000000000A2E0                 movzx   eax, byte ptr [r13+0]
.text:000000000000A2E5                 mov     ebp, 1
.text:000000000000A2EA                 mov     [rbx], eax
.text:000000000000A2EC                 nop     dword ptr [rax+00h]
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000A2F0                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000A2F0                 mov     rdx, [rsp+38h+var_30]
.text:000000000000A2F5                 xor     rdx, fs:28h
.text:000000000000A2FE                 mov     rax, rbp
.text:000000000000A301                 jnz     short loc_A30E
.text:000000000000A303                 add     rsp, 18h
.text:000000000000A307                 pop     rbx
.text:000000000000A308                 pop     rbp
.text:000000000000A309                 pop     r12
.text:000000000000A30B                 pop     r13
.text:000000000000A30D                 retn
.text:000000000000A30E ; ---------------------------------------------------------------------------
.text:000000000000A30E
.text:000000000000A30E loc_A30E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000A30E                 call    ___stack_chk_fail
.text:000000000000A30E ; } // starts at A290
.text:000000000000A30E rpl_mbrtowc     endp
.text:000000000000A30E
.text:000000000000A30E ; ---------------------------------------------------------------------------
.text:000000000000A313                 align 20h
.text:000000000000A320
.text:000000000000A320 ; =============== S U B R O U T I N E =======================================
.text:000000000000A320
.text:000000000000A320
.text:000000000000A320 unescape_tab    proc near               ; CODE XREF: read_file_system_list+158↓p
.text:000000000000A320                                         ; read_file_system_list+167↓p ...
.text:000000000000A320 ; __unwind {
.text:000000000000A320                 push    rbx
.text:000000000000A321                 mov     rbx, rdi
.text:000000000000A324                 call    _strlen
.text:000000000000A329                 mov     rcx, rbx
.text:000000000000A32C                 add     rax, 1
.text:000000000000A330                 xor     edx, edx
.text:000000000000A332                 jmp     short loc_A347
.text:000000000000A332 ; ---------------------------------------------------------------------------
.text:000000000000A334                 align 8
.text:000000000000A338
.text:000000000000A338 loc_A338:                               ; CODE XREF: unescape_tab+33↓j
.text:000000000000A338                                         ; unescape_tab+3C↓j ...
.text:000000000000A338                 mov     [rcx], sil
.text:000000000000A33B                 mov     rdx, rdi
.text:000000000000A33E
.text:000000000000A33E loc_A33E:                               ; CODE XREF: unescape_tab+7A↓j
.text:000000000000A33E                 add     rcx, 1
.text:000000000000A342                 cmp     rax, rdx
.text:000000000000A345                 jbe     short loc_A3A0
.text:000000000000A347
.text:000000000000A347 loc_A347:                               ; CODE XREF: unescape_tab+12↑j
.text:000000000000A347                 movzx   esi, byte ptr [rbx+rdx]
.text:000000000000A34B                 lea     rdi, [rdx+1]
.text:000000000000A34F                 cmp     sil, 5Ch ; '\'
.text:000000000000A353                 jnz     short loc_A338
.text:000000000000A355                 lea     r8, [rdx+4]
.text:000000000000A359                 cmp     r8, rax
.text:000000000000A35C                 jnb     short loc_A338
.text:000000000000A35E                 movzx   r9d, byte ptr [rbx+rdi]
.text:000000000000A363                 lea     r10d, [r9-30h]
.text:000000000000A367                 cmp     r10b, 3
.text:000000000000A36B                 ja      short loc_A338
.text:000000000000A36D                 movzx   r10d, byte ptr [rbx+rdx+2]
.text:000000000000A373                 lea     r11d, [r10-30h]
.text:000000000000A377                 cmp     r11b, 7
.text:000000000000A37B                 ja      short loc_A338
.text:000000000000A37D                 movzx   edx, byte ptr [rbx+rdx+3]
.text:000000000000A382                 lea     r11d, [rdx-30h]
.text:000000000000A386                 cmp     r11b, 7
.text:000000000000A38A                 ja      short loc_A338
.text:000000000000A38C                 lea     edx, [r10+r9*8]
.text:000000000000A390                 lea     edx, [r11+rdx*8-80h]
.text:000000000000A395                 mov     [rcx], dl
.text:000000000000A397                 mov     rdx, r8
.text:000000000000A39A                 jmp     short loc_A33E
.text:000000000000A39A ; ---------------------------------------------------------------------------
.text:000000000000A39C                 align 20h
.text:000000000000A3A0
.text:000000000000A3A0 loc_A3A0:                               ; CODE XREF: unescape_tab+25↑j
.text:000000000000A3A0                 pop     rbx
.text:000000000000A3A1                 retn
.text:000000000000A3A1 ; } // starts at A320
.text:000000000000A3A1 unescape_tab    endp
.text:000000000000A3A1
.text:000000000000A3A1 ; ---------------------------------------------------------------------------
.text:000000000000A3A2                 align 10h
.text:000000000000A3B0
.text:000000000000A3B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3B0
.text:000000000000A3B0
.text:000000000000A3B0 ; __int64 __fastcall free_mount_entry(void *ptr)
.text:000000000000A3B0                 public free_mount_entry
.text:000000000000A3B0 free_mount_entry proc near              ; CODE XREF: read_file_system_list+734↓p
.text:000000000000A3B0 ; __unwind {
.text:000000000000A3B0                 push    rbx
.text:000000000000A3B1                 mov     rbx, rdi
.text:000000000000A3B4                 mov     rdi, [rdi]      ; ptr
.text:000000000000A3B7                 call    _free
.text:000000000000A3BC                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000A3C0                 call    _free
.text:000000000000A3C5                 mov     rdi, [rbx+10h]  ; ptr
.text:000000000000A3C9                 call    _free
.text:000000000000A3CE                 test    byte ptr [rbx+28h], 4
.text:000000000000A3D2                 jz      short loc_A3DD
.text:000000000000A3D4                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000A3D8                 call    _free
.text:000000000000A3DD
.text:000000000000A3DD loc_A3DD:                               ; CODE XREF: free_mount_entry+22↑j
.text:000000000000A3DD                 mov     rdi, rbx        ; ptr
.text:000000000000A3E0                 pop     rbx
.text:000000000000A3E1                 jmp     _free
.text:000000000000A3E1 ; } // starts at A3B0
.text:000000000000A3E1 free_mount_entry endp
.text:000000000000A3E1
.text:000000000000A3E1 ; ---------------------------------------------------------------------------
.text:000000000000A3E6                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3F0
.text:000000000000A3F0
.text:000000000000A3F0                 public read_file_system_list
.text:000000000000A3F0 read_file_system_list proc near         ; CODE XREF: find_bind_mount+EA↑p
.text:000000000000A3F0
.text:000000000000A3F0 var_90          = qword ptr -90h
.text:000000000000A3F0 var_81          = byte ptr -81h
.text:000000000000A3F0 var_80          = dword ptr -80h
.text:000000000000A3F0 var_7C          = dword ptr -7Ch
.text:000000000000A3F0 var_78          = dword ptr -78h
.text:000000000000A3F0 var_74          = dword ptr -74h
.text:000000000000A3F0 var_70          = dword ptr -70h
.text:000000000000A3F0 var_6C          = dword ptr -6Ch
.text:000000000000A3F0 var_68          = dword ptr -68h
.text:000000000000A3F0 var_64          = dword ptr -64h
.text:000000000000A3F0 var_60          = dword ptr -60h
.text:000000000000A3F0 var_5C          = dword ptr -5Ch
.text:000000000000A3F0 ptr             = qword ptr -58h
.text:000000000000A3F0 lineptr         = qword ptr -50h
.text:000000000000A3F0 n               = qword ptr -48h
.text:000000000000A3F0 var_40          = qword ptr -40h
.text:000000000000A3F0
.text:000000000000A3F0 ; __unwind {
.text:000000000000A3F0                 push    r15
.text:000000000000A3F2                 push    r14
.text:000000000000A3F4                 lea     rsi, aWriteError+0Ah ; modes
.text:000000000000A3FB                 push    r13
.text:000000000000A3FD                 push    r12
.text:000000000000A3FF                 lea     rdi, aProcSelfMounti ; "/proc/self/mountinfo"
.text:000000000000A406                 push    rbp
.text:000000000000A407                 push    rbx
.text:000000000000A408                 sub     rsp, 68h
.text:000000000000A40C                 mov     rax, fs:28h
.text:000000000000A415                 mov     [rsp+98h+var_40], rax
.text:000000000000A41A                 xor     eax, eax
.text:000000000000A41C                 call    _fopen
.text:000000000000A421                 test    rax, rax
.text:000000000000A424                 jz      loc_A870
.text:000000000000A42A                 lea     r14, [rsp+98h+ptr]
.text:000000000000A42F                 lea     r13, [rsp+98h+n]
.text:000000000000A434                 lea     r12, [rsp+98h+lineptr]
.text:000000000000A439                 mov     rbp, rax
.text:000000000000A43C                 mov     [rsp+98h+lineptr], 0
.text:000000000000A445                 mov     [rsp+98h+n], 0
.text:000000000000A44E                 xchg    ax, ax
.text:000000000000A450
.text:000000000000A450 loc_A450:                               ; CODE XREF: read_file_system_list+C4↓j
.text:000000000000A450                                         ; read_file_system_list+E2↓j ...
.text:000000000000A450                 mov     rcx, rbp        ; stream
.text:000000000000A453                 mov     edx, 0Ah        ; delimiter
.text:000000000000A458                 mov     rsi, r13        ; n
.text:000000000000A45B                 mov     rdi, r12        ; lineptr
.text:000000000000A45E                 call    ___getdelim
.text:000000000000A463                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A467                 jz      loc_A6A0
.text:000000000000A46D                 lea     rcx, [rsp+98h+var_7C]
.text:000000000000A472                 lea     rdx, [rsp+98h+var_80]
.text:000000000000A477                 sub     rsp, 8
.text:000000000000A47B                 lea     rbx, [rsp+0A0h+var_81]
.text:000000000000A480                 lea     rsi, aUUUUNSNNSNC ; "%*u %*u %u:%u %n%*s%n %n%*s%n%c"
.text:000000000000A487                 push    rbx
.text:000000000000A488                 lea     rax, [rsp+0A8h+var_74]
.text:000000000000A48D                 push    rax
.text:000000000000A48E                 lea     rax, [rsp+0B0h+var_78]
.text:000000000000A493                 push    rax
.text:000000000000A494                 mov     rdi, [rsp+0B8h+lineptr] ; s
.text:000000000000A499                 xor     eax, eax
.text:000000000000A49B                 lea     r9, [rsp+0B8h+var_5C]
.text:000000000000A4A0                 lea     r8, [rsp+0B8h+var_60]
.text:000000000000A4A5                 call    _sscanf
.text:000000000000A4AA                 and     eax, 0FFFFFFFBh
.text:000000000000A4AD                 add     rsp, 20h
.text:000000000000A4B1                 cmp     eax, 3
.text:000000000000A4B4                 jnz     short loc_A450
.text:000000000000A4B6                 movsxd  rdi, [rsp+98h+var_74]
.text:000000000000A4BB                 lea     rsi, asc_FF48   ; " - "
.text:000000000000A4C2                 add     rdi, [rsp+98h+lineptr] ; haystack
.text:000000000000A4C7                 call    _strstr
.text:000000000000A4CC                 test    rax, rax
.text:000000000000A4CF                 mov     r15, rax
.text:000000000000A4D2                 jz      loc_A450
.text:000000000000A4D8                 lea     rcx, [rsp+98h+var_6C]
.text:000000000000A4DD                 lea     rdx, [rsp+98h+var_70]
.text:000000000000A4E2                 sub     rsp, 8
.text:000000000000A4E6                 push    rbx
.text:000000000000A4E7                 lea     rsi, aNSNNSNC   ; " - %n%*s%n %n%*s%n %c"
.text:000000000000A4EE                 mov     rdi, rax        ; s
.text:000000000000A4F1                 xor     eax, eax
.text:000000000000A4F3                 lea     r9, [rsp+0A8h+var_64]
.text:000000000000A4F8                 lea     r8, [rsp+0A8h+var_68]
.text:000000000000A4FD                 call    _sscanf
.text:000000000000A502                 and     eax, 0FFFFFFFBh
.text:000000000000A505                 cmp     eax, 1
.text:000000000000A508                 pop     rdx
.text:000000000000A509                 pop     rcx
.text:000000000000A50A                 jnz     loc_A450
.text:000000000000A510                 movsxd  rax, [rsp+98h+var_5C]
.text:000000000000A515                 mov     rdx, [rsp+98h+lineptr]
.text:000000000000A51A                 mov     byte ptr [rdx+rax], 0
.text:000000000000A51E                 movsxd  rax, [rsp+98h+var_74]
.text:000000000000A523                 mov     rdx, [rsp+98h+lineptr]
.text:000000000000A528                 mov     byte ptr [rdx+rax], 0
.text:000000000000A52C                 movsxd  rax, [rsp+98h+var_6C]
.text:000000000000A531                 mov     byte ptr [r15+rax], 0
.text:000000000000A536                 movsxd  rax, [rsp+98h+var_64]
.text:000000000000A53B                 mov     byte ptr [r15+rax], 0
.text:000000000000A540                 movsxd  rdi, [rsp+98h+var_68]
.text:000000000000A545                 add     rdi, r15
.text:000000000000A548                 call    unescape_tab
.text:000000000000A54D                 movsxd  rdi, [rsp+98h+var_78]
.text:000000000000A552                 add     rdi, [rsp+98h+lineptr]
.text:000000000000A557                 call    unescape_tab
.text:000000000000A55C                 movsxd  rdi, [rsp+98h+var_60]
.text:000000000000A561                 add     rdi, [rsp+98h+lineptr]
.text:000000000000A566                 call    unescape_tab
.text:000000000000A56B                 mov     edi, 38h ; '8'
.text:000000000000A570                 call    xmalloc
.text:000000000000A575                 movsxd  rdi, [rsp+98h+var_68]
.text:000000000000A57A                 mov     rbx, rax
.text:000000000000A57D                 add     rdi, r15        ; src
.text:000000000000A580                 call    xstrdup
.text:000000000000A585                 movsxd  rdi, [rsp+98h+var_78]
.text:000000000000A58A                 mov     [rbx], rax
.text:000000000000A58D                 add     rdi, [rsp+98h+lineptr] ; src
.text:000000000000A592                 call    xstrdup
.text:000000000000A597                 movsxd  rdi, [rsp+98h+var_60]
.text:000000000000A59C                 mov     [rbx+8], rax
.text:000000000000A5A0                 add     rdi, [rsp+98h+lineptr] ; src
.text:000000000000A5A5                 call    xstrdup
.text:000000000000A5AA                 movsxd  rdi, [rsp+98h+var_70]
.text:000000000000A5AF                 mov     [rbx+10h], rax
.text:000000000000A5B3                 add     rdi, r15        ; src
.text:000000000000A5B6                 call    xstrdup
.text:000000000000A5BB                 mov     edx, [rsp+98h+var_80]
.text:000000000000A5BF                 mov     r15, rax
.text:000000000000A5C2                 mov     [rbx+18h], rax
.text:000000000000A5C6                 mov     eax, [rsp+98h+var_7C]
.text:000000000000A5CA                 mov     rsi, 0FFFFF00000000000h
.text:000000000000A5D4                 lea     rdi, aAutofs    ; "autofs"
.text:000000000000A5DB                 or      byte ptr [rbx+28h], 4
.text:000000000000A5DF                 mov     rcx, rdx
.text:000000000000A5E2                 shl     rdx, 20h
.text:000000000000A5E6                 shl     rcx, 8
.text:000000000000A5EA                 and     rdx, rsi
.text:000000000000A5ED                 mov     rsi, 0FFFFFF00000h
.text:000000000000A5F7                 and     ecx, 0FFF00h
.text:000000000000A5FD                 or      rdx, rcx
.text:000000000000A600                 movzx   ecx, al
.text:000000000000A603                 shl     rax, 0Ch
.text:000000000000A607                 or      rdx, rcx
.text:000000000000A60A                 and     rax, rsi
.text:000000000000A60D                 mov     ecx, 7
.text:000000000000A612                 mov     rsi, r15
.text:000000000000A615                 or      rax, rdx
.text:000000000000A618                 mov     edx, 1
.text:000000000000A61D                 repe cmpsb
.text:000000000000A61F                 mov     [rbx+20h], rax
.text:000000000000A623                 setnbe  al
.text:000000000000A626                 sbb     al, 0
.text:000000000000A628                 test    al, al
.text:000000000000A62A                 jz      short loc_A64A
.text:000000000000A62C                 lea     rdi, aProc      ; "proc"
.text:000000000000A633                 mov     ecx, 5
.text:000000000000A638                 mov     rsi, r15
.text:000000000000A63B                 repe cmpsb
.text:000000000000A63D                 setnbe  al
.text:000000000000A640                 sbb     al, 0
.text:000000000000A642                 test    al, al
.text:000000000000A644                 jnz     loc_A6F8
.text:000000000000A64A
.text:000000000000A64A loc_A64A:                               ; CODE XREF: read_file_system_list+23A↑j
.text:000000000000A64A                                         ; read_file_system_list+320↓j ...
.text:000000000000A64A                 movzx   eax, byte ptr [rbx+28h]
.text:000000000000A64E                 mov     r8, [rbx]
.text:000000000000A651                 mov     esi, 3Ah ; ':'  ; c
.text:000000000000A656                 mov     rdi, r8         ; s
.text:000000000000A659                 mov     [rsp+98h+var_90], r8
.text:000000000000A65E                 and     eax, 0FFFFFFFEh
.text:000000000000A661                 or      eax, edx
.text:000000000000A663                 mov     [rbx+28h], al
.text:000000000000A666                 call    _strchr
.text:000000000000A66B                 test    rax, rax
.text:000000000000A66E                 mov     edx, 1
.text:000000000000A673                 mov     r8, [rsp+98h+var_90]
.text:000000000000A678                 jz      loc_A840
.text:000000000000A67E
.text:000000000000A67E loc_A67E:                               ; CODE XREF: read_file_system_list+475↓j
.text:000000000000A67E                                         ; read_file_system_list+7A3↓j ...
.text:000000000000A67E                 movzx   eax, byte ptr [rbx+28h]
.text:000000000000A682                 add     edx, edx
.text:000000000000A684                 and     eax, 0FFFFFFFDh
.text:000000000000A687                 or      eax, edx
.text:000000000000A689                 mov     [rbx+28h], al
.text:000000000000A68C                 mov     [r14], rbx
.text:000000000000A68F                 lea     r14, [rbx+30h]
.text:000000000000A693                 jmp     loc_A450
.text:000000000000A693 ; ---------------------------------------------------------------------------
.text:000000000000A698                 align 20h
.text:000000000000A6A0
.text:000000000000A6A0 loc_A6A0:                               ; CODE XREF: read_file_system_list+77↑j
.text:000000000000A6A0                 mov     rdi, [rsp+98h+lineptr] ; ptr
.text:000000000000A6A5                 call    _free
.text:000000000000A6AA                 test    byte ptr [rbp+0], 20h
.text:000000000000A6AE                 jnz     loc_AC10
.text:000000000000A6B4                 mov     rdi, rbp        ; stream
.text:000000000000A6B7                 call    rpl_fclose
.text:000000000000A6BC                 cmp     eax, 0FFFFFFFFh
.text:000000000000A6BF                 jz      loc_AAFE
.text:000000000000A6C5
.text:000000000000A6C5 loc_A6C5:                               ; CODE XREF: read_file_system_list+708↓j
.text:000000000000A6C5                 mov     qword ptr [r14], 0
.text:000000000000A6CC                 mov     rax, [rsp+98h+ptr]
.text:000000000000A6D1
.text:000000000000A6D1 loc_A6D1:                               ; CODE XREF: read_file_system_list+74C↓j
.text:000000000000A6D1                                         ; read_file_system_list+83E↓j
.text:000000000000A6D1                 mov     rbx, [rsp+98h+var_40]
.text:000000000000A6D6                 xor     rbx, fs:28h
.text:000000000000A6DF                 jnz     loc_AC33
.text:000000000000A6E5                 add     rsp, 68h
.text:000000000000A6E9                 pop     rbx
.text:000000000000A6EA                 pop     rbp
.text:000000000000A6EB                 pop     r12
.text:000000000000A6ED                 pop     r13
.text:000000000000A6EF                 pop     r14
.text:000000000000A6F1                 pop     r15
.text:000000000000A6F3                 retn
.text:000000000000A6F3 ; ---------------------------------------------------------------------------
.text:000000000000A6F4                 align 8
.text:000000000000A6F8
.text:000000000000A6F8 loc_A6F8:                               ; CODE XREF: read_file_system_list+254↑j
.text:000000000000A6F8                 lea     rdi, aSubfs     ; "subfs"
.text:000000000000A6FF                 mov     ecx, 6
.text:000000000000A704                 mov     rsi, r15
.text:000000000000A707                 repe cmpsb
.text:000000000000A709                 setnbe  al
.text:000000000000A70C                 sbb     al, 0
.text:000000000000A70E                 test    al, al
.text:000000000000A710                 jz      loc_A64A
.text:000000000000A716                 lea     rdi, aDebugfs   ; "debugfs"
.text:000000000000A71D                 mov     ecx, 8
.text:000000000000A722                 mov     rsi, r15
.text:000000000000A725                 repe cmpsb
.text:000000000000A727                 setnbe  al
.text:000000000000A72A                 sbb     al, 0
.text:000000000000A72C                 test    al, al
.text:000000000000A72E                 jz      loc_A64A
.text:000000000000A734                 lea     rdi, aDevpts    ; "devpts"
.text:000000000000A73B                 mov     ecx, 7
.text:000000000000A740                 mov     rsi, r15
.text:000000000000A743                 repe cmpsb
.text:000000000000A745                 setnbe  al
.text:000000000000A748                 sbb     al, 0
.text:000000000000A74A                 test    al, al
.text:000000000000A74C                 jz      loc_A64A
.text:000000000000A752                 lea     rdi, aFusectl   ; "fusectl"
.text:000000000000A759                 mov     ecx, 8
.text:000000000000A75E                 mov     rsi, r15
.text:000000000000A761                 repe cmpsb
.text:000000000000A763                 setnbe  al
.text:000000000000A766                 sbb     al, 0
.text:000000000000A768                 test    al, al
.text:000000000000A76A                 jz      loc_A64A
.text:000000000000A770                 lea     rdi, aMqueue    ; "mqueue"
.text:000000000000A777                 mov     ecx, 7
.text:000000000000A77C                 mov     rsi, r15
.text:000000000000A77F                 repe cmpsb
.text:000000000000A781                 setnbe  al
.text:000000000000A784                 sbb     al, 0
.text:000000000000A786                 test    al, al
.text:000000000000A788                 jz      loc_A64A
.text:000000000000A78E                 lea     rdi, unk_DCDD
.text:000000000000A795                 mov     ecx, 0Bh
.text:000000000000A79A                 mov     rsi, r15
.text:000000000000A79D                 repe cmpsb
.text:000000000000A79F                 setnbe  al
.text:000000000000A7A2                 sbb     al, 0
.text:000000000000A7A4                 test    al, al
.text:000000000000A7A6                 jz      loc_A64A
.text:000000000000A7AC                 lea     rdi, aSysfs     ; "sysfs"
.text:000000000000A7B3                 mov     ecx, 6
.text:000000000000A7B8                 mov     rsi, r15
.text:000000000000A7BB                 repe cmpsb
.text:000000000000A7BD                 setnbe  al
.text:000000000000A7C0                 sbb     al, 0
.text:000000000000A7C2                 test    al, al
.text:000000000000A7C4                 jz      loc_A64A
.text:000000000000A7CA                 lea     rdi, aBdevfs+1  ; "devfs"
.text:000000000000A7D1                 mov     ecx, 6
.text:000000000000A7D6                 mov     rsi, r15
.text:000000000000A7D9                 repe cmpsb
.text:000000000000A7DB                 setnbe  al
.text:000000000000A7DE                 sbb     al, 0
.text:000000000000A7E0                 test    al, al
.text:000000000000A7E2                 jz      loc_A64A
.text:000000000000A7E8                 lea     rdi, aKernfs    ; "kernfs"
.text:000000000000A7EF                 mov     ecx, 7
.text:000000000000A7F4                 mov     rsi, r15
.text:000000000000A7F7                 repe cmpsb
.text:000000000000A7F9                 setnbe  al
.text:000000000000A7FC                 sbb     al, 0
.text:000000000000A7FE                 test    al, al
.text:000000000000A800                 jz      loc_A64A
.text:000000000000A806                 lea     rsi, aIgnore    ; "ignore"
.text:000000000000A80D                 mov     rdi, r15        ; s1
.text:000000000000A810                 mov     byte ptr [rsp+98h+var_90], dl
.text:000000000000A814                 call    _strcmp
.text:000000000000A819                 test    eax, eax
.text:000000000000A81B                 movzx   edx, byte ptr [rsp+98h+var_90]
.text:000000000000A820                 jz      loc_A64A
.text:000000000000A826                 lea     rsi, aNone      ; "none"
.text:000000000000A82D                 mov     rdi, r15        ; s1
.text:000000000000A830                 call    _strcmp
.text:000000000000A835                 test    eax, eax
.text:000000000000A837                 setz    dl
.text:000000000000A83A                 jmp     loc_A64A
.text:000000000000A83A ; ---------------------------------------------------------------------------
.text:000000000000A83F                 align 20h
.text:000000000000A840
.text:000000000000A840 loc_A840:                               ; CODE XREF: read_file_system_list+288↑j
.text:000000000000A840                 cmp     byte ptr [r8], 2Fh ; '/'
.text:000000000000A844                 jz      loc_AB70
.text:000000000000A84A
.text:000000000000A84A loc_A84A:                               ; CODE XREF: read_file_system_list+785↓j
.text:000000000000A84A                                         ; read_file_system_list+7C7↓j
.text:000000000000A84A                 lea     rsi, aHosts     ; "-hosts"
.text:000000000000A851                 mov     ecx, 7
.text:000000000000A856                 mov     rdi, r8
.text:000000000000A859                 repe cmpsb
.text:000000000000A85B                 setnbe  al
.text:000000000000A85E                 sbb     al, 0
.text:000000000000A860                 test    al, al
.text:000000000000A862                 setz    dl
.text:000000000000A865                 jmp     loc_A67E
.text:000000000000A865 ; ---------------------------------------------------------------------------
.text:000000000000A86A                 align 10h
.text:000000000000A870
.text:000000000000A870 loc_A870:                               ; CODE XREF: read_file_system_list+34↑j
.text:000000000000A870                 lea     rsi, aWriteError+0Ah ; mode
.text:000000000000A877                 lea     rdi, aEtcMtab   ; "/etc/mtab"
.text:000000000000A87E                 call    _setmntent
.text:000000000000A883                 test    rax, rax
.text:000000000000A886                 mov     rbx, rax
.text:000000000000A889                 jz      loc_AC2C
.text:000000000000A88F                 mov     rdi, rbx        ; stream
.text:000000000000A892                 lea     r14, [rsp+98h+ptr]
.text:000000000000A897                 lea     rbp, aAutofs    ; "autofs"
.text:000000000000A89E                 call    _getmntent
.text:000000000000A8A3                 test    rax, rax
.text:000000000000A8A6                 mov     r13, rax
.text:000000000000A8A9                 jz      loc_AAEE
.text:000000000000A8AF                 nop
.text:000000000000A8B0
.text:000000000000A8B0 loc_A8B0:                               ; CODE XREF: read_file_system_list+6F8↓j
.text:000000000000A8B0                 lea     rsi, opt        ; "bind"
.text:000000000000A8B7                 mov     rdi, r13        ; mnt
.text:000000000000A8BA                 call    _hasmntopt
.text:000000000000A8BF                 mov     edi, 38h ; '8'
.text:000000000000A8C4                 mov     r15, rax
.text:000000000000A8C7                 call    xmalloc
.text:000000000000A8CC                 mov     rdi, [r13+0]    ; src
.text:000000000000A8D0                 mov     r12, rax
.text:000000000000A8D3                 call    xstrdup
.text:000000000000A8D8                 mov     rdi, [r13+8]    ; src
.text:000000000000A8DC                 mov     [r12], rax
.text:000000000000A8E0                 call    xstrdup
.text:000000000000A8E5                 mov     rdi, [r13+10h]  ; src
.text:000000000000A8E9                 mov     [r12+8], rax
.text:000000000000A8EE                 mov     qword ptr [r12+10h], 0
.text:000000000000A8F7                 call    xstrdup
.text:000000000000A8FC                 mov     ecx, 7
.text:000000000000A901                 mov     rsi, rax
.text:000000000000A904                 mov     rdi, rbp
.text:000000000000A907                 or      byte ptr [r12+28h], 4
.text:000000000000A90D                 mov     r13, rax
.text:000000000000A910                 mov     [r12+18h], rax
.text:000000000000A915                 repe cmpsb
.text:000000000000A917                 mov     edx, 1
.text:000000000000A91C                 setnbe  al
.text:000000000000A91F                 sbb     al, 0
.text:000000000000A921                 test    al, al
.text:000000000000A923                 jz      loc_AA88
.text:000000000000A929                 lea     rdi, aProc      ; "proc"
.text:000000000000A930                 mov     ecx, 5
.text:000000000000A935                 mov     rsi, r13
.text:000000000000A938                 repe cmpsb
.text:000000000000A93A                 setnbe  al
.text:000000000000A93D                 sbb     al, 0
.text:000000000000A93F                 test    al, al
.text:000000000000A941                 jz      loc_AA88
.text:000000000000A947                 lea     rdi, aSubfs     ; "subfs"
.text:000000000000A94E                 mov     ecx, 6
.text:000000000000A953                 mov     rsi, r13
.text:000000000000A956                 repe cmpsb
.text:000000000000A958                 setnbe  al
.text:000000000000A95B                 sbb     al, 0
.text:000000000000A95D                 test    al, al
.text:000000000000A95F                 jz      loc_AA88
.text:000000000000A965                 lea     rdi, aDebugfs   ; "debugfs"
.text:000000000000A96C                 mov     ecx, 8
.text:000000000000A971                 mov     rsi, r13
.text:000000000000A974                 repe cmpsb
.text:000000000000A976                 setnbe  al
.text:000000000000A979                 sbb     al, 0
.text:000000000000A97B                 test    al, al
.text:000000000000A97D                 jz      loc_AA88
.text:000000000000A983                 lea     rdi, aDevpts    ; "devpts"
.text:000000000000A98A                 mov     ecx, 7
.text:000000000000A98F                 mov     rsi, r13
.text:000000000000A992                 repe cmpsb
.text:000000000000A994                 setnbe  al
.text:000000000000A997                 sbb     al, 0
.text:000000000000A999                 test    al, al
.text:000000000000A99B                 jz      loc_AA88
.text:000000000000A9A1                 lea     rdi, aFusectl   ; "fusectl"
.text:000000000000A9A8                 mov     ecx, 8
.text:000000000000A9AD                 mov     rsi, r13
.text:000000000000A9B0                 repe cmpsb
.text:000000000000A9B2                 setnbe  al
.text:000000000000A9B5                 sbb     al, 0
.text:000000000000A9B7                 test    al, al
.text:000000000000A9B9                 jz      loc_AA88
.text:000000000000A9BF                 lea     rdi, aMqueue    ; "mqueue"
.text:000000000000A9C6                 mov     ecx, 7
.text:000000000000A9CB                 mov     rsi, r13
.text:000000000000A9CE                 repe cmpsb
.text:000000000000A9D0                 setnbe  al
.text:000000000000A9D3                 sbb     al, 0
.text:000000000000A9D5                 test    al, al
.text:000000000000A9D7                 jz      loc_AA88
.text:000000000000A9DD                 lea     rdi, unk_DCDD
.text:000000000000A9E4                 mov     ecx, 0Bh
.text:000000000000A9E9                 mov     rsi, r13
.text:000000000000A9EC                 repe cmpsb
.text:000000000000A9EE                 setnbe  al
.text:000000000000A9F1                 sbb     al, 0
.text:000000000000A9F3                 test    al, al
.text:000000000000A9F5                 jz      loc_AA88
.text:000000000000A9FB                 lea     rdi, aSysfs     ; "sysfs"
.text:000000000000AA02                 mov     ecx, 6
.text:000000000000AA07                 mov     rsi, r13
.text:000000000000AA0A                 repe cmpsb
.text:000000000000AA0C                 setnbe  al
.text:000000000000AA0F                 sbb     al, 0
.text:000000000000AA11                 test    al, al
.text:000000000000AA13                 jz      short loc_AA88
.text:000000000000AA15                 lea     rdi, aBdevfs+1  ; "devfs"
.text:000000000000AA1C                 mov     ecx, 6
.text:000000000000AA21                 mov     rsi, r13
.text:000000000000AA24                 repe cmpsb
.text:000000000000AA26                 setnbe  al
.text:000000000000AA29                 sbb     al, 0
.text:000000000000AA2B                 test    al, al
.text:000000000000AA2D                 jz      short loc_AA88
.text:000000000000AA2F                 lea     rdi, aKernfs    ; "kernfs"
.text:000000000000AA36                 mov     ecx, 7
.text:000000000000AA3B                 mov     rsi, r13
.text:000000000000AA3E                 repe cmpsb
.text:000000000000AA40                 setnbe  al
.text:000000000000AA43                 sbb     al, 0
.text:000000000000AA45                 test    al, al
.text:000000000000AA47                 jz      short loc_AA88
.text:000000000000AA49                 lea     rsi, aIgnore    ; "ignore"
.text:000000000000AA50                 mov     rdi, r13        ; s1
.text:000000000000AA53                 mov     byte ptr [rsp+98h+var_90], dl
.text:000000000000AA57                 call    _strcmp
.text:000000000000AA5C                 test    eax, eax
.text:000000000000AA5E                 movzx   edx, byte ptr [rsp+98h+var_90]
.text:000000000000AA63                 jz      short loc_AA88
.text:000000000000AA65                 lea     rsi, aNone      ; "none"
.text:000000000000AA6C                 mov     rdi, r13        ; s1
.text:000000000000AA6F                 call    _strcmp
.text:000000000000AA74                 test    r15, r15
.text:000000000000AA77                 setz    dl
.text:000000000000AA7A                 test    eax, eax
.text:000000000000AA7C                 setz    al
.text:000000000000AA7F                 and     edx, eax
.text:000000000000AA81                 nop     dword ptr [rax+00000000h]
.text:000000000000AA88
.text:000000000000AA88 loc_AA88:                               ; CODE XREF: read_file_system_list+533↑j
.text:000000000000AA88                                         ; read_file_system_list+551↑j ...
.text:000000000000AA88                 movzx   eax, byte ptr [r12+28h]
.text:000000000000AA8E                 mov     r15, [r12]
.text:000000000000AA92                 mov     esi, 3Ah ; ':'  ; c
.text:000000000000AA97                 mov     rdi, r15        ; s
.text:000000000000AA9A                 and     eax, 0FFFFFFFEh
.text:000000000000AA9D                 or      eax, edx
.text:000000000000AA9F                 mov     [r12+28h], al
.text:000000000000AAA4                 call    _strchr
.text:000000000000AAA9                 test    rax, rax
.text:000000000000AAAC                 mov     edx, 1
.text:000000000000AAB1                 jz      loc_AB48
.text:000000000000AAB7
.text:000000000000AAB7 loc_AAB7:                               ; CODE XREF: read_file_system_list+779↓j
.text:000000000000AAB7                                         ; read_file_system_list+7EF↓j ...
.text:000000000000AAB7                 movzx   eax, byte ptr [r12+28h]
.text:000000000000AABD                 add     edx, edx
.text:000000000000AABF                 mov     qword ptr [r12+20h], 0FFFFFFFFFFFFFFFFh
.text:000000000000AAC8                 mov     rdi, rbx        ; stream
.text:000000000000AACB                 and     eax, 0FFFFFFFDh
.text:000000000000AACE                 or      eax, edx
.text:000000000000AAD0                 mov     [r12+28h], al
.text:000000000000AAD5                 mov     [r14], r12
.text:000000000000AAD8                 lea     r14, [r12+30h]
.text:000000000000AADD                 call    _getmntent
.text:000000000000AAE2                 test    rax, rax
.text:000000000000AAE5                 mov     r13, rax
.text:000000000000AAE8                 jnz     loc_A8B0
.text:000000000000AAEE
.text:000000000000AAEE loc_AAEE:                               ; CODE XREF: read_file_system_list+4B9↑j
.text:000000000000AAEE                 mov     rdi, rbx        ; stream
.text:000000000000AAF1                 call    _endmntent
.text:000000000000AAF6                 test    eax, eax
.text:000000000000AAF8                 jnz     loc_A6C5
.text:000000000000AAFE
.text:000000000000AAFE loc_AAFE:                               ; CODE XREF: read_file_system_list+2CF↑j
.text:000000000000AAFE                 call    ___errno_location
.text:000000000000AB03                 mov     r13d, [rax]
.text:000000000000AB06                 mov     r12, rax
.text:000000000000AB09
.text:000000000000AB09 loc_AB09:                               ; CODE XREF: read_file_system_list+837↓j
.text:000000000000AB09                 mov     qword ptr [r14], 0
.text:000000000000AB10                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000AB15                 test    rdi, rdi
.text:000000000000AB18                 jz      short loc_AB36
.text:000000000000AB1A                 nop     word ptr [rax+rax+00h]
.text:000000000000AB20
.text:000000000000AB20 loc_AB20:                               ; CODE XREF: read_file_system_list+744↓j
.text:000000000000AB20                 mov     rbx, [rdi+30h]
.text:000000000000AB24                 call    free_mount_entry
.text:000000000000AB29                 test    rbx, rbx
.text:000000000000AB2C                 mov     [rsp+98h+ptr], rbx
.text:000000000000AB31                 mov     rdi, rbx
.text:000000000000AB34                 jnz     short loc_AB20
.text:000000000000AB36
.text:000000000000AB36 loc_AB36:                               ; CODE XREF: read_file_system_list+728↑j
.text:000000000000AB36                 mov     [r12], r13d
.text:000000000000AB3A                 xor     eax, eax
.text:000000000000AB3C                 jmp     loc_A6D1
.text:000000000000AB3C ; ---------------------------------------------------------------------------
.text:000000000000AB41                 align 8
.text:000000000000AB48
.text:000000000000AB48 loc_AB48:                               ; CODE XREF: read_file_system_list+6C1↑j
.text:000000000000AB48                 cmp     byte ptr [r15], 2Fh ; '/'
.text:000000000000AB4C                 jz      short loc_ABC0
.text:000000000000AB4E
.text:000000000000AB4E loc_AB4E:                               ; CODE XREF: read_file_system_list+7D5↓j
.text:000000000000AB4E                                         ; read_file_system_list+813↓j
.text:000000000000AB4E                 lea     rsi, aHosts     ; "-hosts"
.text:000000000000AB55                 mov     ecx, 7
.text:000000000000AB5A                 mov     rdi, r15
.text:000000000000AB5D                 repe cmpsb
.text:000000000000AB5F                 setnbe  al
.text:000000000000AB62                 sbb     al, 0
.text:000000000000AB64                 test    al, al
.text:000000000000AB66                 setz    dl
.text:000000000000AB69                 jmp     loc_AAB7
.text:000000000000AB69 ; ---------------------------------------------------------------------------
.text:000000000000AB6E                 align 10h
.text:000000000000AB70
.text:000000000000AB70 loc_AB70:                               ; CODE XREF: read_file_system_list+454↑j
.text:000000000000AB70                 cmp     byte ptr [r8+1], 2Fh ; '/'
.text:000000000000AB75                 jnz     loc_A84A
.text:000000000000AB7B                 lea     rdi, aSmbfs     ; "smbfs"
.text:000000000000AB82                 mov     ecx, 6
.text:000000000000AB87                 mov     rsi, r15
.text:000000000000AB8A                 repe cmpsb
.text:000000000000AB8C                 setnbe  al
.text:000000000000AB8F                 sbb     al, 0
.text:000000000000AB91                 test    al, al
.text:000000000000AB93                 jz      loc_A67E
.text:000000000000AB99                 lea     rdi, aCifs      ; "cifs"
.text:000000000000ABA0                 mov     ecx, 5
.text:000000000000ABA5                 mov     rsi, r15
.text:000000000000ABA8                 repe cmpsb
.text:000000000000ABAA                 setnbe  al
.text:000000000000ABAD                 sbb     al, 0
.text:000000000000ABAF                 test    al, al
.text:000000000000ABB1                 jz      loc_A67E
.text:000000000000ABB7                 jmp     loc_A84A
.text:000000000000ABB7 ; ---------------------------------------------------------------------------
.text:000000000000ABBC                 align 20h
.text:000000000000ABC0
.text:000000000000ABC0 loc_ABC0:                               ; CODE XREF: read_file_system_list+75C↑j
.text:000000000000ABC0                 cmp     byte ptr [r15+1], 2Fh ; '/'
.text:000000000000ABC5                 jnz     short loc_AB4E
.text:000000000000ABC7                 lea     rdi, aSmbfs     ; "smbfs"
.text:000000000000ABCE                 mov     ecx, 6
.text:000000000000ABD3                 mov     rsi, r13
.text:000000000000ABD6                 repe cmpsb
.text:000000000000ABD8                 setnbe  al
.text:000000000000ABDB                 sbb     al, 0
.text:000000000000ABDD                 test    al, al
.text:000000000000ABDF                 jz      loc_AAB7
.text:000000000000ABE5                 lea     rdi, aCifs      ; "cifs"
.text:000000000000ABEC                 mov     ecx, 5
.text:000000000000ABF1                 mov     rsi, r13
.text:000000000000ABF4                 repe cmpsb
.text:000000000000ABF6                 setnbe  al
.text:000000000000ABF9                 sbb     al, 0
.text:000000000000ABFB                 test    al, al
.text:000000000000ABFD                 jz      loc_AAB7
.text:000000000000AC03                 jmp     loc_AB4E
.text:000000000000AC03 ; ---------------------------------------------------------------------------
.text:000000000000AC08                 align 10h
.text:000000000000AC10
.text:000000000000AC10 loc_AC10:                               ; CODE XREF: read_file_system_list+2BE↑j
.text:000000000000AC10                 call    ___errno_location
.text:000000000000AC15                 mov     r13d, [rax]
.text:000000000000AC18                 mov     r12, rax
.text:000000000000AC1B                 mov     rdi, rbp        ; stream
.text:000000000000AC1E                 call    rpl_fclose
.text:000000000000AC23                 mov     [r12], r13d
.text:000000000000AC27                 jmp     loc_AB09
.text:000000000000AC2C ; ---------------------------------------------------------------------------
.text:000000000000AC2C
.text:000000000000AC2C loc_AC2C:                               ; CODE XREF: read_file_system_list+499↑j
.text:000000000000AC2C                 xor     eax, eax
.text:000000000000AC2E                 jmp     loc_A6D1
.text:000000000000AC33 ; ---------------------------------------------------------------------------
.text:000000000000AC33
.text:000000000000AC33 loc_AC33:                               ; CODE XREF: read_file_system_list+2EF↑j
.text:000000000000AC33                 call    ___stack_chk_fail
.text:000000000000AC33 ; } // starts at A3F0
.text:000000000000AC33 read_file_system_list endp
.text:000000000000AC33
.text:000000000000AC33 ; ---------------------------------------------------------------------------
.text:000000000000AC38                 align 20h
.text:000000000000AC40
.text:000000000000AC40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC40
.text:000000000000AC40 ; Attributes: info_from_lumina
.text:000000000000AC40
.text:000000000000AC40 ; int __fastcall setenv_TZ(const char *tz)
.text:000000000000AC40 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_ACC4↓p
.text:000000000000AC40                                         ; set_tz:loc_AF15↓p
.text:000000000000AC40 ; __unwind {
.text:000000000000AC40                 test    rdi, rdi
.text:000000000000AC43                 jz      short loc_AC60
.text:000000000000AC45                 mov     rsi, rdi        ; value
.text:000000000000AC48                 lea     rdi, aTz        ; "TZ"
.text:000000000000AC4F                 mov     edx, 1          ; replace
.text:000000000000AC54                 jmp     _setenv
.text:000000000000AC54 ; ---------------------------------------------------------------------------
.text:000000000000AC59                 align 20h
.text:000000000000AC60
.text:000000000000AC60 loc_AC60:                               ; CODE XREF: setenv_TZ+3↑j
.text:000000000000AC60                 lea     rdi, aTz        ; "TZ"
.text:000000000000AC67                 jmp     _unsetenv
.text:000000000000AC67 ; } // starts at AC40
.text:000000000000AC67 setenv_TZ       endp
.text:000000000000AC67
.text:000000000000AC67 ; ---------------------------------------------------------------------------
.text:000000000000AC6C                 align 10h
.text:000000000000AC70
.text:000000000000AC70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC70
.text:000000000000AC70 ; Attributes: info_from_lumina
.text:000000000000AC70
.text:000000000000AC70 ; void __fastcall tzfree_0(timezone_t tz)
.text:000000000000AC70 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:000000000000AC70                                         ; set_tz+67↓p ...
.text:000000000000AC70 ; __unwind {
.text:000000000000AC70                 test    rdi, rdi
.text:000000000000AC73                 jz      short locret_AC98
.text:000000000000AC75                 push    rbx
.text:000000000000AC76                 db      2Eh
.text:000000000000AC76                 nop     word ptr [rax+rax+00000000h]
.text:000000000000AC80
.text:000000000000AC80 loc_AC80:                               ; CODE XREF: tzfree_0+1E↓j
.text:000000000000AC80                 mov     rbx, [rdi]
.text:000000000000AC83                 call    _free
.text:000000000000AC88                 test    rbx, rbx
.text:000000000000AC8B                 mov     rdi, rbx
.text:000000000000AC8E                 jnz     short loc_AC80
.text:000000000000AC90                 pop     rbx
.text:000000000000AC91                 retn
.text:000000000000AC91 ; ---------------------------------------------------------------------------
.text:000000000000AC92                 align 8
.text:000000000000AC98
.text:000000000000AC98 locret_AC98:                            ; CODE XREF: tzfree_0+3↑j
.text:000000000000AC98                 rep retn
.text:000000000000AC98 ; } // starts at AC70
.text:000000000000AC98 tzfree_0        endp
.text:000000000000AC98
.text:000000000000AC98 ; ---------------------------------------------------------------------------
.text:000000000000AC9A                 align 20h
.text:000000000000ACA0
.text:000000000000ACA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACA0
.text:000000000000ACA0 ; Attributes: info_from_lumina
.text:000000000000ACA0
.text:000000000000ACA0 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:000000000000ACA0 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:000000000000ACA0                                         ; localtime_rz+98↓p ...
.text:000000000000ACA0 ; __unwind {
.text:000000000000ACA0                 push    r13
.text:000000000000ACA2                 push    r12
.text:000000000000ACA4                 push    rbp
.text:000000000000ACA5                 push    rbx
.text:000000000000ACA6                 mov     rbp, rdi
.text:000000000000ACA9                 sub     rsp, 8
.text:000000000000ACAD                 call    ___errno_location
.text:000000000000ACB2                 cmp     byte ptr [rbp+8], 0
.text:000000000000ACB6                 mov     rbx, rax
.text:000000000000ACB9                 mov     r12d, [rax]
.text:000000000000ACBC                 lea     rdi, [rbp+9]
.text:000000000000ACC0                 jnz     short loc_ACC4
.text:000000000000ACC2                 xor     edi, edi        ; value
.text:000000000000ACC4
.text:000000000000ACC4 loc_ACC4:                               ; CODE XREF: revert_tz+20↑j
.text:000000000000ACC4                 call    setenv_TZ
.text:000000000000ACC9                 test    eax, eax
.text:000000000000ACCB                 jz      short loc_ACF0
.text:000000000000ACCD                 mov     r12d, [rbx]
.text:000000000000ACD0                 xor     r13d, r13d
.text:000000000000ACD3
.text:000000000000ACD3 loc_ACD3:                               ; CODE XREF: revert_tz+5B↓j
.text:000000000000ACD3                 mov     rdi, rbp
.text:000000000000ACD6                 call    tzfree_0
.text:000000000000ACDB                 mov     [rbx], r12d
.text:000000000000ACDE                 add     rsp, 8
.text:000000000000ACE2                 mov     eax, r13d
.text:000000000000ACE5                 pop     rbx
.text:000000000000ACE6                 pop     rbp
.text:000000000000ACE7                 pop     r12
.text:000000000000ACE9                 pop     r13
.text:000000000000ACEB                 retn
.text:000000000000ACEB ; ---------------------------------------------------------------------------
.text:000000000000ACEC                 align 10h
.text:000000000000ACF0
.text:000000000000ACF0 loc_ACF0:                               ; CODE XREF: revert_tz+2B↑j
.text:000000000000ACF0                 call    _tzset
.text:000000000000ACF5                 mov     r13d, 1
.text:000000000000ACFB                 jmp     short loc_ACD3
.text:000000000000ACFB ; } // starts at ACA0
.text:000000000000ACFB revert_tz       endp
.text:000000000000ACFB
.text:000000000000ACFB ; ---------------------------------------------------------------------------
.text:000000000000ACFD                 align 20h
.text:000000000000AD00
.text:000000000000AD00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD00
.text:000000000000AD00 ; Attributes: info_from_lumina
.text:000000000000AD00
.text:000000000000AD00 ; timezone_t __fastcall tzalloc(const char *name)
.text:000000000000AD00                 public tzalloc
.text:000000000000AD00 tzalloc         proc near               ; CODE XREF: human_time+D7↑p
.text:000000000000AD00                                         ; save_abbr+EC↓p ...
.text:000000000000AD00 ; __unwind {
.text:000000000000AD00                 test    rdi, rdi
.text:000000000000AD03                 push    r12
.text:000000000000AD05                 push    rbp
.text:000000000000AD06                 push    rbx
.text:000000000000AD07                 jz      short loc_AD68
.text:000000000000AD09                 mov     r12, rdi
.text:000000000000AD0C                 call    _strlen
.text:000000000000AD11                 lea     rbp, [rax+1]
.text:000000000000AD15                 mov     edi, 76h ; 'v'
.text:000000000000AD1A                 cmp     rbp, 76h ; 'v'
.text:000000000000AD1E                 cmovnb  rdi, rbp
.text:000000000000AD22                 add     rdi, 11h
.text:000000000000AD26                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000AD2A                 call    _malloc
.text:000000000000AD2F                 test    rax, rax
.text:000000000000AD32                 mov     rbx, rax
.text:000000000000AD35                 jz      short loc_AD5B
.text:000000000000AD37                 mov     qword ptr [rax], 0
.text:000000000000AD3E                 lea     rdi, [rbx+9]    ; dest
.text:000000000000AD42                 mov     eax, 1
.text:000000000000AD47                 mov     [rbx+8], ax
.text:000000000000AD4B                 mov     rdx, rbp        ; n
.text:000000000000AD4E                 mov     rsi, r12        ; src
.text:000000000000AD51                 call    _memcpy
.text:000000000000AD56                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000000AD5B
.text:000000000000AD5B loc_AD5B:                               ; CODE XREF: tzalloc+35↑j
.text:000000000000AD5B                                         ; tzalloc+78↓j
.text:000000000000AD5B                 mov     rax, rbx
.text:000000000000AD5E                 pop     rbx
.text:000000000000AD5F                 pop     rbp
.text:000000000000AD60                 pop     r12
.text:000000000000AD62                 retn
.text:000000000000AD62 ; ---------------------------------------------------------------------------
.text:000000000000AD63                 align 8
.text:000000000000AD68
.text:000000000000AD68 loc_AD68:                               ; CODE XREF: tzalloc+7↑j
.text:000000000000AD68                 mov     edi, 80h        ; size
.text:000000000000AD6D                 call    _malloc
.text:000000000000AD72                 test    rax, rax
.text:000000000000AD75                 mov     rbx, rax
.text:000000000000AD78                 jz      short loc_AD5B
.text:000000000000AD7A                 xor     edx, edx
.text:000000000000AD7C                 mov     qword ptr [rbx], 0
.text:000000000000AD83                 mov     rax, rbx
.text:000000000000AD86                 mov     [rbx+8], dx
.text:000000000000AD8A                 pop     rbx
.text:000000000000AD8B                 pop     rbp
.text:000000000000AD8C                 pop     r12
.text:000000000000AD8E                 retn
.text:000000000000AD8E ; } // starts at AD00
.text:000000000000AD8E tzalloc         endp
.text:000000000000AD8E
.text:000000000000AD8E ; ---------------------------------------------------------------------------
.text:000000000000AD8F                 align 10h
.text:000000000000AD90
.text:000000000000AD90 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD90
.text:000000000000AD90 ; Attributes: info_from_lumina
.text:000000000000AD90
.text:000000000000AD90 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:000000000000AD90 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:000000000000AD90                                         ; mktime_z+51↓p
.text:000000000000AD90 ; __unwind {
.text:000000000000AD90                 push    r15
.text:000000000000AD92                 push    r14
.text:000000000000AD94                 mov     eax, 1
.text:000000000000AD99                 push    r13
.text:000000000000AD9B                 push    r12
.text:000000000000AD9D                 push    rbp
.text:000000000000AD9E                 push    rbx
.text:000000000000AD9F                 sub     rsp, 8
.text:000000000000ADA3                 mov     rbp, [rsi+30h]
.text:000000000000ADA7                 test    rbp, rbp
.text:000000000000ADAA                 jz      loc_AE40
.text:000000000000ADB0                 cmp     rsi, rbp
.text:000000000000ADB3                 mov     r12, rdi
.text:000000000000ADB6                 mov     r13, rsi
.text:000000000000ADB9                 ja      short loc_ADC4
.text:000000000000ADBB                 lea     rdx, [rsi+38h]
.text:000000000000ADBF                 cmp     rbp, rdx
.text:000000000000ADC2                 jb      short loc_AE40
.text:000000000000ADC4
.text:000000000000ADC4 loc_ADC4:                               ; CODE XREF: save_abbr+29↑j
.text:000000000000ADC4                 cmp     byte ptr [rbp+0], 0
.text:000000000000ADC8                 lea     rbx, [r12+9]
.text:000000000000ADCD                 jz      short loc_AE30
.text:000000000000ADCF                 nop
.text:000000000000ADD0
.text:000000000000ADD0 loc_ADD0:                               ; CODE XREF: save_abbr+76↓j
.text:000000000000ADD0                                         ; save_abbr+7F↓j
.text:000000000000ADD0                 mov     rsi, rbp        ; s2
.text:000000000000ADD3                 mov     rdi, rbx        ; s1
.text:000000000000ADD6                 call    _strcmp
.text:000000000000ADDB                 test    eax, eax
.text:000000000000ADDD                 jz      short loc_AE37
.text:000000000000ADDF
.text:000000000000ADDF loc_ADDF:                               ; CODE XREF: save_abbr+95↓j
.text:000000000000ADDF                 cmp     byte ptr [rbx], 0
.text:000000000000ADE2                 jnz     short loc_ADF6
.text:000000000000ADE4                 lea     r14, [r12+9]
.text:000000000000ADE9                 cmp     r14, rbx
.text:000000000000ADEC                 jnz     short loc_AE50
.text:000000000000ADEE                 cmp     byte ptr [r12+8], 0
.text:000000000000ADF4                 jz      short loc_AE50
.text:000000000000ADF6
.text:000000000000ADF6 loc_ADF6:                               ; CODE XREF: save_abbr+52↑j
.text:000000000000ADF6                 mov     rdi, rbx        ; s
.text:000000000000ADF9                 call    _strlen
.text:000000000000ADFE                 lea     rbx, [rbx+rax+1]
.text:000000000000AE03                 cmp     byte ptr [rbx], 0
.text:000000000000AE06                 jnz     short loc_ADD0
.text:000000000000AE08                 mov     rax, [r12]
.text:000000000000AE0C                 test    rax, rax
.text:000000000000AE0F                 jz      short loc_ADD0
.text:000000000000AE11                 lea     rbx, [rax+9]
.text:000000000000AE15                 mov     rsi, rbp        ; s2
.text:000000000000AE18                 mov     r12, rax
.text:000000000000AE1B                 mov     rdi, rbx        ; s1
.text:000000000000AE1E                 call    _strcmp
.text:000000000000AE23                 test    eax, eax
.text:000000000000AE25                 jnz     short loc_ADDF
.text:000000000000AE27                 jmp     short loc_AE37
.text:000000000000AE27 ; ---------------------------------------------------------------------------
.text:000000000000AE29                 align 10h
.text:000000000000AE30
.text:000000000000AE30 loc_AE30:                               ; CODE XREF: save_abbr+3D↑j
.text:000000000000AE30                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000AE37
.text:000000000000AE37 loc_AE37:                               ; CODE XREF: save_abbr+4D↑j
.text:000000000000AE37                                         ; save_abbr+97↑j ...
.text:000000000000AE37                 mov     [r13+30h], rbx
.text:000000000000AE3B                 mov     eax, 1
.text:000000000000AE40
.text:000000000000AE40 loc_AE40:                               ; CODE XREF: save_abbr+1A↑j
.text:000000000000AE40                                         ; save_abbr+32↑j ...
.text:000000000000AE40                 add     rsp, 8
.text:000000000000AE44                 pop     rbx
.text:000000000000AE45                 pop     rbp
.text:000000000000AE46                 pop     r12
.text:000000000000AE48                 pop     r13
.text:000000000000AE4A                 pop     r14
.text:000000000000AE4C                 pop     r15
.text:000000000000AE4E                 retn
.text:000000000000AE4E ; ---------------------------------------------------------------------------
.text:000000000000AE4F                 align 10h
.text:000000000000AE50
.text:000000000000AE50 loc_AE50:                               ; CODE XREF: save_abbr+5C↑j
.text:000000000000AE50                                         ; save_abbr+64↑j
.text:000000000000AE50                 mov     rdi, rbp        ; s
.text:000000000000AE53                 call    _strlen
.text:000000000000AE58                 lea     rdx, [rax+1]    ; n
.text:000000000000AE5C                 mov     r15, rax
.text:000000000000AE5F                 mov     rax, rbx
.text:000000000000AE62                 sub     rax, r14
.text:000000000000AE65                 mov     rcx, rax
.text:000000000000AE68                 not     rcx
.text:000000000000AE6B                 cmp     rcx, rdx
.text:000000000000AE6E                 jb      short loc_AEA0
.text:000000000000AE70                 add     rax, rdx
.text:000000000000AE73                 cmp     rax, 76h ; 'v'
.text:000000000000AE77                 jbe     short loc_AEB0
.text:000000000000AE79                 mov     rdi, rbp        ; src
.text:000000000000AE7C                 call    tzalloc
.text:000000000000AE81                 mov     rbx, rax
.text:000000000000AE84                 mov     [r12], rax
.text:000000000000AE88                 xor     eax, eax
.text:000000000000AE8A                 test    rbx, rbx
.text:000000000000AE8D                 jz      short loc_AE40
.text:000000000000AE8F                 mov     byte ptr [rbx+8], 0
.text:000000000000AE93                 add     rbx, 9
.text:000000000000AE97                 jmp     short loc_AE37
.text:000000000000AE97 ; ---------------------------------------------------------------------------
.text:000000000000AE99                 align 20h
.text:000000000000AEA0
.text:000000000000AEA0 loc_AEA0:                               ; CODE XREF: save_abbr+DE↑j
.text:000000000000AEA0                 call    ___errno_location
.text:000000000000AEA5                 mov     dword ptr [rax], 0Ch
.text:000000000000AEAB                 xor     eax, eax
.text:000000000000AEAD                 jmp     short loc_AE40
.text:000000000000AEAD ; ---------------------------------------------------------------------------
.text:000000000000AEAF                 align 10h
.text:000000000000AEB0
.text:000000000000AEB0 loc_AEB0:                               ; CODE XREF: save_abbr+E7↑j
.text:000000000000AEB0                 mov     rsi, rbp        ; src
.text:000000000000AEB3                 mov     rdi, rbx        ; dest
.text:000000000000AEB6                 call    _memcpy
.text:000000000000AEBB                 mov     byte ptr [rbx+r15+1], 0
.text:000000000000AEC1                 jmp     loc_AE37
.text:000000000000AEC1 ; } // starts at AD90
.text:000000000000AEC1 save_abbr       endp
.text:000000000000AEC1
.text:000000000000AEC1 ; ---------------------------------------------------------------------------
.text:000000000000AEC6                 align 10h
.text:000000000000AED0
.text:000000000000AED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AED0
.text:000000000000AED0 ; Attributes: info_from_lumina
.text:000000000000AED0
.text:000000000000AED0 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:000000000000AED0 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:000000000000AED0                                         ; mktime_z+27↓p
.text:000000000000AED0
.text:000000000000AED0 var_20          = qword ptr -20h
.text:000000000000AED0
.text:000000000000AED0 ; __unwind {
.text:000000000000AED0                 push    r12
.text:000000000000AED2                 push    rbp
.text:000000000000AED3                 mov     rbp, rdi
.text:000000000000AED6                 push    rbx
.text:000000000000AED7                 lea     rdi, aTz        ; "TZ"
.text:000000000000AEDE                 sub     rsp, 10h
.text:000000000000AEE2                 call    _getenv
.text:000000000000AEE7                 test    rax, rax
.text:000000000000AEEA                 mov     rbx, rax
.text:000000000000AEED                 jz      loc_AF88
.text:000000000000AEF3                 cmp     byte ptr [rbp+8], 0
.text:000000000000AEF7                 jnz     short loc_AF60
.text:000000000000AEF9
.text:000000000000AEF9 loc_AEF9:                               ; CODE XREF: set_tz+A4↓j
.text:000000000000AEF9                                         ; set_tz+C2↓j
.text:000000000000AEF9                 mov     rdi, rbx        ; src
.text:000000000000AEFC                 call    tzalloc
.text:000000000000AF01                 test    rax, rax
.text:000000000000AF04                 mov     r12, rax
.text:000000000000AF07                 jz      short loc_AF4D
.text:000000000000AF09                 xor     edi, edi
.text:000000000000AF0B                 cmp     byte ptr [rbp+8], 0
.text:000000000000AF0F                 jz      short loc_AF15
.text:000000000000AF11                 lea     rdi, [rbp+9]    ; value
.text:000000000000AF15
.text:000000000000AF15 loc_AF15:                               ; CODE XREF: set_tz+3F↑j
.text:000000000000AF15                 call    setenv_TZ
.text:000000000000AF1A                 test    eax, eax
.text:000000000000AF1C                 jz      loc_AFA8
.text:000000000000AF22                 call    ___errno_location
.text:000000000000AF27                 cmp     r12, 1
.text:000000000000AF2B                 mov     ebx, [rax]
.text:000000000000AF2D                 jz      short loc_AF48
.text:000000000000AF2F                 mov     rdi, r12
.text:000000000000AF32                 mov     [rsp+28h+var_20], rax
.text:000000000000AF37                 call    tzfree_0
.text:000000000000AF3C                 mov     rax, [rsp+28h+var_20]
.text:000000000000AF41                 nop     dword ptr [rax+00000000h]
.text:000000000000AF48
.text:000000000000AF48 loc_AF48:                               ; CODE XREF: set_tz+5D↑j
.text:000000000000AF48                 mov     [rax], ebx
.text:000000000000AF4A                 xor     r12d, r12d
.text:000000000000AF4D
.text:000000000000AF4D loc_AF4D:                               ; CODE XREF: set_tz+37↑j
.text:000000000000AF4D                                         ; set_tz+DD↓j
.text:000000000000AF4D                 add     rsp, 10h
.text:000000000000AF51                 mov     rax, r12
.text:000000000000AF54                 pop     rbx
.text:000000000000AF55                 pop     rbp
.text:000000000000AF56                 pop     r12
.text:000000000000AF58                 retn
.text:000000000000AF58 ; ---------------------------------------------------------------------------
.text:000000000000AF59                 align 20h
.text:000000000000AF60
.text:000000000000AF60 loc_AF60:                               ; CODE XREF: set_tz+27↑j
.text:000000000000AF60                 lea     rdi, [rbp+9]    ; s1
.text:000000000000AF64                 mov     rsi, rax        ; s2
.text:000000000000AF67                 mov     r12d, 1
.text:000000000000AF6D                 call    _strcmp
.text:000000000000AF72                 test    eax, eax
.text:000000000000AF74                 jnz     short loc_AEF9
.text:000000000000AF76                 add     rsp, 10h
.text:000000000000AF7A                 mov     rax, r12
.text:000000000000AF7D                 pop     rbx
.text:000000000000AF7E                 pop     rbp
.text:000000000000AF7F                 pop     r12
.text:000000000000AF81                 retn
.text:000000000000AF81 ; ---------------------------------------------------------------------------
.text:000000000000AF82                 align 8
.text:000000000000AF88
.text:000000000000AF88 loc_AF88:                               ; CODE XREF: set_tz+1D↑j
.text:000000000000AF88                 cmp     byte ptr [rbp+8], 0
.text:000000000000AF8C                 mov     r12d, 1
.text:000000000000AF92                 jnz     loc_AEF9
.text:000000000000AF98                 add     rsp, 10h
.text:000000000000AF9C                 mov     rax, r12
.text:000000000000AF9F                 pop     rbx
.text:000000000000AFA0                 pop     rbp
.text:000000000000AFA1                 pop     r12
.text:000000000000AFA3                 retn
.text:000000000000AFA3 ; ---------------------------------------------------------------------------
.text:000000000000AFA4                 align 8
.text:000000000000AFA8
.text:000000000000AFA8 loc_AFA8:                               ; CODE XREF: set_tz+4C↑j
.text:000000000000AFA8                 call    _tzset
.text:000000000000AFAD                 jmp     short loc_AF4D
.text:000000000000AFAD ; } // starts at AED0
.text:000000000000AFAD set_tz          endp
.text:000000000000AFAD
.text:000000000000AFAD ; ---------------------------------------------------------------------------
.text:000000000000AFAF                 align 10h
.text:000000000000AFB0
.text:000000000000AFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFB0
.text:000000000000AFB0
.text:000000000000AFB0                 public tzfree
.text:000000000000AFB0 tzfree          proc near
.text:000000000000AFB0 ; __unwind {
.text:000000000000AFB0                 cmp     rdi, 1
.text:000000000000AFB4                 jz      short locret_AFBB
.text:000000000000AFB6                 jmp     tzfree_0
.text:000000000000AFBB ; ---------------------------------------------------------------------------
.text:000000000000AFBB
.text:000000000000AFBB locret_AFBB:                            ; CODE XREF: tzfree+4↑j
.text:000000000000AFBB                 retn
.text:000000000000AFBB ; } // starts at AFB0
.text:000000000000AFBB tzfree          endp
.text:000000000000AFBB
.text:000000000000AFBB ; ---------------------------------------------------------------------------
.text:000000000000AFBC                 align 20h
.text:000000000000AFC0
.text:000000000000AFC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFC0
.text:000000000000AFC0 ; Attributes: info_from_lumina
.text:000000000000AFC0
.text:000000000000AFC0 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:000000000000AFC0                 public localtime_rz
.text:000000000000AFC0 localtime_rz    proc near               ; CODE XREF: human_time+3F↑p
.text:000000000000AFC0 ; __unwind {
.text:000000000000AFC0                 push    r13
.text:000000000000AFC2                 push    r12
.text:000000000000AFC4                 push    rbp
.text:000000000000AFC5                 push    rbx
.text:000000000000AFC6                 mov     rbp, rsi
.text:000000000000AFC9                 sub     rsp, 8
.text:000000000000AFCD                 test    rdi, rdi
.text:000000000000AFD0                 jz      short loc_B040
.text:000000000000AFD2                 mov     r13, rdx
.text:000000000000AFD5                 mov     rbx, rdi
.text:000000000000AFD8                 call    set_tz
.text:000000000000AFDD                 test    rax, rax
.text:000000000000AFE0                 mov     r12, rax
.text:000000000000AFE3                 jz      short loc_B02E
.text:000000000000AFE5                 mov     rsi, r13        ; tp
.text:000000000000AFE8                 mov     rdi, rbp        ; timer
.text:000000000000AFEB                 call    _localtime_r
.text:000000000000AFF0                 test    rax, rax
.text:000000000000AFF3                 jz      short loc_B020
.text:000000000000AFF5                 mov     rsi, r13
.text:000000000000AFF8                 mov     rdi, rbx
.text:000000000000AFFB                 call    save_abbr
.text:000000000000B000                 test    al, al
.text:000000000000B002                 jz      short loc_B020
.text:000000000000B004                 cmp     r12, 1
.text:000000000000B008                 jnz     short loc_B055
.text:000000000000B00A
.text:000000000000B00A loc_B00A:                               ; CODE XREF: localtime_rz+9F↓j
.text:000000000000B00A                 add     rsp, 8
.text:000000000000B00E                 mov     rax, r13
.text:000000000000B011                 pop     rbx
.text:000000000000B012                 pop     rbp
.text:000000000000B013                 pop     r12
.text:000000000000B015                 pop     r13
.text:000000000000B017                 retn
.text:000000000000B017 ; ---------------------------------------------------------------------------
.text:000000000000B018                 align 20h
.text:000000000000B020
.text:000000000000B020 loc_B020:                               ; CODE XREF: localtime_rz+33↑j
.text:000000000000B020                                         ; localtime_rz+42↑j
.text:000000000000B020                 cmp     r12, 1
.text:000000000000B024                 jz      short loc_B02E
.text:000000000000B026                 mov     rdi, r12
.text:000000000000B029                 call    revert_tz
.text:000000000000B02E
.text:000000000000B02E loc_B02E:                               ; CODE XREF: localtime_rz+23↑j
.text:000000000000B02E                                         ; localtime_rz+64↑j ...
.text:000000000000B02E                 add     rsp, 8
.text:000000000000B032                 xor     eax, eax
.text:000000000000B034                 pop     rbx
.text:000000000000B035                 pop     rbp
.text:000000000000B036                 pop     r12
.text:000000000000B038                 pop     r13
.text:000000000000B03A                 retn
.text:000000000000B03A ; ---------------------------------------------------------------------------
.text:000000000000B03B                 align 20h
.text:000000000000B040
.text:000000000000B040 loc_B040:                               ; CODE XREF: localtime_rz+10↑j
.text:000000000000B040                 add     rsp, 8
.text:000000000000B044                 mov     rdi, rbp        ; timer
.text:000000000000B047                 mov     rsi, rdx        ; tp
.text:000000000000B04A                 pop     rbx
.text:000000000000B04B                 pop     rbp
.text:000000000000B04C                 pop     r12
.text:000000000000B04E                 pop     r13
.text:000000000000B050                 jmp     _gmtime_r
.text:000000000000B055 ; ---------------------------------------------------------------------------
.text:000000000000B055
.text:000000000000B055 loc_B055:                               ; CODE XREF: localtime_rz+48↑j
.text:000000000000B055                 mov     rdi, r12
.text:000000000000B058                 call    revert_tz
.text:000000000000B05D                 test    al, al
.text:000000000000B05F                 jnz     short loc_B00A
.text:000000000000B061                 jmp     short loc_B02E
.text:000000000000B061 ; } // starts at AFC0
.text:000000000000B061 localtime_rz    endp
.text:000000000000B061
.text:000000000000B061 ; ---------------------------------------------------------------------------
.text:000000000000B063                 align 10h
.text:000000000000B070
.text:000000000000B070 ; =============== S U B R O U T I N E =======================================
.text:000000000000B070
.text:000000000000B070 ; Attributes: info_from_lumina
.text:000000000000B070
.text:000000000000B070 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:000000000000B070                 public mktime_z
.text:000000000000B070 mktime_z        proc near               ; CODE XREF: __strftime_internal+DB2↑p
.text:000000000000B070
.text:000000000000B070 timer           = qword ptr -60h
.text:000000000000B070 tp              = tm ptr -58h
.text:000000000000B070 var_20          = qword ptr -20h
.text:000000000000B070
.text:000000000000B070 ; __unwind {
.text:000000000000B070                 push    r12
.text:000000000000B072                 push    rbp
.text:000000000000B073                 push    rbx
.text:000000000000B074                 mov     rbx, rsi
.text:000000000000B077                 sub     rsp, 50h
.text:000000000000B07B                 mov     rax, fs:28h
.text:000000000000B084                 mov     [rsp+68h+var_20], rax
.text:000000000000B089                 xor     eax, eax
.text:000000000000B08B                 test    rdi, rdi
.text:000000000000B08E                 jz      loc_B190
.text:000000000000B094                 mov     rbp, rdi
.text:000000000000B097                 call    set_tz
.text:000000000000B09C                 test    rax, rax
.text:000000000000B09F                 mov     r12, rax
.text:000000000000B0A2                 jz      loc_B1A0
.text:000000000000B0A8                 mov     rdi, rbx        ; tp
.text:000000000000B0AB                 call    _mktime
.text:000000000000B0B0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B0B4                 mov     [rsp+68h+timer], rax
.text:000000000000B0B9                 jz      short loc_B110
.text:000000000000B0BB
.text:000000000000B0BB loc_B0BB:                               ; CODE XREF: mktime_z+10D↓j
.text:000000000000B0BB                 mov     rsi, rbx
.text:000000000000B0BE                 mov     rdi, rbp
.text:000000000000B0C1                 call    save_abbr
.text:000000000000B0C6                 test    al, al
.text:000000000000B0C8                 jnz     short loc_B0D3
.text:000000000000B0CA                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:000000000000B0D3
.text:000000000000B0D3 loc_B0D3:                               ; CODE XREF: mktime_z+58↑j
.text:000000000000B0D3                                         ; mktime_z+B2↓j ...
.text:000000000000B0D3                 cmp     r12, 1
.text:000000000000B0D7                 jz      short loc_B0E9
.text:000000000000B0D9                 mov     rdi, r12
.text:000000000000B0DC                 call    revert_tz
.text:000000000000B0E1                 test    al, al
.text:000000000000B0E3                 jz      loc_B1A0
.text:000000000000B0E9
.text:000000000000B0E9 loc_B0E9:                               ; CODE XREF: mktime_z+67↑j
.text:000000000000B0E9                 mov     rax, [rsp+68h+timer]
.text:000000000000B0EE
.text:000000000000B0EE loc_B0EE:                               ; CODE XREF: mktime_z+128↓j
.text:000000000000B0EE                                         ; mktime_z+137↓j
.text:000000000000B0EE                 mov     rcx, [rsp+68h+var_20]
.text:000000000000B0F3                 xor     rcx, fs:28h
.text:000000000000B0FC                 jnz     loc_B1AC
.text:000000000000B102                 add     rsp, 50h
.text:000000000000B106                 pop     rbx
.text:000000000000B107                 pop     rbp
.text:000000000000B108                 pop     r12
.text:000000000000B10A                 retn
.text:000000000000B10A ; ---------------------------------------------------------------------------
.text:000000000000B10B                 align 10h
.text:000000000000B110
.text:000000000000B110 loc_B110:                               ; CODE XREF: mktime_z+49↑j
.text:000000000000B110                 lea     rsi, [rsp+68h+tp] ; tp
.text:000000000000B115                 lea     rdi, [rsp+68h+timer] ; timer
.text:000000000000B11A                 call    _localtime_r
.text:000000000000B11F                 test    rax, rax
.text:000000000000B122                 jz      short loc_B0D3
.text:000000000000B124                 mov     eax, [rbx]
.text:000000000000B126                 mov     edx, [rbx+4]
.text:000000000000B129                 xor     eax, [rsp+68h+tp.tm_sec]
.text:000000000000B12D                 xor     edx, [rsp+68h+tp.tm_min]
.text:000000000000B131                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:000000000000B135                 or      eax, edx
.text:000000000000B137                 mov     edx, [rbx+8]
.text:000000000000B13A                 xor     edx, [rsp+68h+tp.tm_hour]
.text:000000000000B13E                 or      eax, edx
.text:000000000000B140                 mov     edx, [rbx+0Ch]
.text:000000000000B143                 xor     edx, [rsp+68h+tp.tm_mday]
.text:000000000000B147                 or      eax, edx
.text:000000000000B149                 mov     edx, [rbx+10h]
.text:000000000000B14C                 xor     edx, [rsp+68h+tp.tm_mon]
.text:000000000000B150                 or      eax, edx
.text:000000000000B152                 mov     edx, [rbx+14h]
.text:000000000000B155                 xor     edx, [rsp+68h+tp.tm_year]
.text:000000000000B159                 or      eax, edx
.text:000000000000B15B                 mov     edx, [rbx+20h]
.text:000000000000B15E                 test    edx, edx
.text:000000000000B160                 setz    dil
.text:000000000000B164                 test    ecx, ecx
.text:000000000000B166                 setz    sil
.text:000000000000B16A                 cmp     dil, sil
.text:000000000000B16D                 jz      short loc_B17B
.text:000000000000B16F                 test    edx, edx
.text:000000000000B171                 js      short loc_B17B
.text:000000000000B173                 test    ecx, ecx
.text:000000000000B175                 jns     loc_B0D3
.text:000000000000B17B
.text:000000000000B17B loc_B17B:                               ; CODE XREF: mktime_z+FD↑j
.text:000000000000B17B                                         ; mktime_z+101↑j
.text:000000000000B17B                 test    eax, eax
.text:000000000000B17D                 jz      loc_B0BB
.text:000000000000B183                 jmp     loc_B0D3
.text:000000000000B183 ; ---------------------------------------------------------------------------
.text:000000000000B188                 align 10h
.text:000000000000B190
.text:000000000000B190 loc_B190:                               ; CODE XREF: mktime_z+1E↑j
.text:000000000000B190                 mov     rdi, rsi        ; tp
.text:000000000000B193                 call    _timegm
.text:000000000000B198                 jmp     loc_B0EE
.text:000000000000B198 ; ---------------------------------------------------------------------------
.text:000000000000B19D                 align 20h
.text:000000000000B1A0
.text:000000000000B1A0 loc_B1A0:                               ; CODE XREF: mktime_z+32↑j
.text:000000000000B1A0                                         ; mktime_z+73↑j
.text:000000000000B1A0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B1A7                 jmp     loc_B0EE
.text:000000000000B1AC ; ---------------------------------------------------------------------------
.text:000000000000B1AC
.text:000000000000B1AC loc_B1AC:                               ; CODE XREF: mktime_z+8C↑j
.text:000000000000B1AC                 call    ___stack_chk_fail
.text:000000000000B1AC ; } // starts at B070
.text:000000000000B1AC mktime_z        endp
.text:000000000000B1AC
.text:000000000000B1AC ; ---------------------------------------------------------------------------
.text:000000000000B1B1                 align 20h
.text:000000000000B1C0
.text:000000000000B1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1C0
.text:000000000000B1C0 ; Attributes: info_from_lumina
.text:000000000000B1C0
.text:000000000000B1C0 ; int __fastcall close_stream(FILE *stream)
.text:000000000000B1C0                 public close_stream
.text:000000000000B1C0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000000B1C0                                         ; close_stdout+33↑p
.text:000000000000B1C0 ; __unwind {
.text:000000000000B1C0                 push    r12
.text:000000000000B1C2                 push    rbp
.text:000000000000B1C3                 mov     rbp, rdi
.text:000000000000B1C6                 push    rbx
.text:000000000000B1C7                 call    ___fpending
.text:000000000000B1CC                 mov     ebx, [rbp+0]
.text:000000000000B1CF                 mov     rdi, rbp        ; stream
.text:000000000000B1D2                 mov     r12, rax
.text:000000000000B1D5                 call    rpl_fclose
.text:000000000000B1DA                 and     ebx, 20h
.text:000000000000B1DD                 test    ebx, ebx
.text:000000000000B1DF                 jnz     short loc_B1F8
.text:000000000000B1E1                 test    eax, eax
.text:000000000000B1E3                 jz      short loc_B1EF
.text:000000000000B1E5                 test    r12, r12
.text:000000000000B1E8                 mov     eax, 0FFFFFFFFh
.text:000000000000B1ED                 jz      short loc_B228
.text:000000000000B1EF
.text:000000000000B1EF loc_B1EF:                               ; CODE XREF: close_stream+23↑j
.text:000000000000B1EF                 pop     rbx
.text:000000000000B1F0                 pop     rbp
.text:000000000000B1F1                 pop     r12
.text:000000000000B1F3                 retn
.text:000000000000B1F3 ; ---------------------------------------------------------------------------
.text:000000000000B1F4                 align 8
.text:000000000000B1F8
.text:000000000000B1F8 loc_B1F8:                               ; CODE XREF: close_stream+1F↑j
.text:000000000000B1F8                 test    eax, eax
.text:000000000000B1FA                 jnz     short loc_B218
.text:000000000000B1FC                 call    ___errno_location
.text:000000000000B201                 mov     dword ptr [rax], 0
.text:000000000000B207                 mov     eax, 0FFFFFFFFh
.text:000000000000B20C                 pop     rbx
.text:000000000000B20D                 pop     rbp
.text:000000000000B20E                 pop     r12
.text:000000000000B210                 retn
.text:000000000000B210 ; ---------------------------------------------------------------------------
.text:000000000000B211                 align 8
.text:000000000000B218
.text:000000000000B218 loc_B218:                               ; CODE XREF: close_stream+3A↑j
.text:000000000000B218                 pop     rbx
.text:000000000000B219                 mov     eax, 0FFFFFFFFh
.text:000000000000B21E                 pop     rbp
.text:000000000000B21F                 pop     r12
.text:000000000000B221                 retn
.text:000000000000B221 ; ---------------------------------------------------------------------------
.text:000000000000B222                 align 8
.text:000000000000B228
.text:000000000000B228 loc_B228:                               ; CODE XREF: close_stream+2D↑j
.text:000000000000B228                 call    ___errno_location
.text:000000000000B22D                 cmp     dword ptr [rax], 9
.text:000000000000B230                 pop     rbx
.text:000000000000B231                 pop     rbp
.text:000000000000B232                 pop     r12
.text:000000000000B234                 setnz   al
.text:000000000000B237                 movzx   eax, al
.text:000000000000B23A                 neg     eax
.text:000000000000B23C                 retn
.text:000000000000B23C ; } // starts at B1C0
.text:000000000000B23C close_stream    endp
.text:000000000000B23C
.text:000000000000B23C ; ---------------------------------------------------------------------------
.text:000000000000B23D                 align 20h
.text:000000000000B240
.text:000000000000B240 ; =============== S U B R O U T I N E =======================================
.text:000000000000B240
.text:000000000000B240
.text:000000000000B240                 public open_safer
.text:000000000000B240 open_safer      proc near               ; CODE XREF: save_cwd+1A↑p
.text:000000000000B240
.text:000000000000B240 var_58          = dword ptr -58h
.text:000000000000B240 var_50          = qword ptr -50h
.text:000000000000B240 var_48          = qword ptr -48h
.text:000000000000B240 var_40          = qword ptr -40h
.text:000000000000B240 var_38          = byte ptr -38h
.text:000000000000B240 var_28          = qword ptr -28h
.text:000000000000B240 arg_0           = byte ptr  8
.text:000000000000B240
.text:000000000000B240 ; __unwind {
.text:000000000000B240                 sub     rsp, 58h
.text:000000000000B244                 mov     [rsp+58h+var_28], rdx
.text:000000000000B249                 xor     edx, edx
.text:000000000000B24B                 mov     rax, fs:28h
.text:000000000000B254                 mov     [rsp+58h+var_40], rax
.text:000000000000B259                 xor     eax, eax
.text:000000000000B25B                 test    sil, 40h
.text:000000000000B25F                 jnz     short loc_B288
.text:000000000000B261
.text:000000000000B261 loc_B261:                               ; CODE XREF: open_safer+67↓j
.text:000000000000B261                 xor     eax, eax
.text:000000000000B263                 call    _open
.text:000000000000B268                 mov     edi, eax        ; fd
.text:000000000000B26A                 call    fd_safer_flag
.text:000000000000B26F                 mov     rcx, [rsp+58h+var_40]
.text:000000000000B274                 xor     rcx, fs:28h
.text:000000000000B27D                 jnz     short loc_B2A9
.text:000000000000B27F                 add     rsp, 58h
.text:000000000000B283                 retn
.text:000000000000B283 ; ---------------------------------------------------------------------------
.text:000000000000B284                 align 8
.text:000000000000B288
.text:000000000000B288 loc_B288:                               ; CODE XREF: open_safer+1F↑j
.text:000000000000B288                 lea     rax, [rsp+58h+arg_0]
.text:000000000000B28D                 mov     [rsp+58h+var_58], 10h
.text:000000000000B294                 mov     edx, dword ptr [rsp+58h+var_28]
.text:000000000000B298                 mov     [rsp+58h+var_50], rax
.text:000000000000B29D                 lea     rax, [rsp+58h+var_38]
.text:000000000000B2A2                 mov     [rsp+58h+var_48], rax
.text:000000000000B2A7                 jmp     short loc_B261
.text:000000000000B2A9 ; ---------------------------------------------------------------------------
.text:000000000000B2A9
.text:000000000000B2A9 loc_B2A9:                               ; CODE XREF: open_safer+3D↑j
.text:000000000000B2A9                 call    ___stack_chk_fail
.text:000000000000B2A9 ; } // starts at B240
.text:000000000000B2A9 open_safer      endp
.text:000000000000B2A9
.text:000000000000B2A9 ; ---------------------------------------------------------------------------
.text:000000000000B2AE                 align 10h
.text:000000000000B2B0
.text:000000000000B2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2B0
.text:000000000000B2B0
.text:000000000000B2B0                 public hard_locale
.text:000000000000B2B0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000000B2B0 ; __unwind {
.text:000000000000B2B0                 sub     rsp, 8
.text:000000000000B2B4                 xor     esi, esi        ; locale
.text:000000000000B2B6                 call    _setlocale
.text:000000000000B2BB                 mov     rdx, rax
.text:000000000000B2BE                 mov     eax, 1
.text:000000000000B2C3                 test    rdx, rdx
.text:000000000000B2C6                 jz      short loc_B2E5
.text:000000000000B2C8                 lea     rdi, aC         ; "C"
.text:000000000000B2CF                 mov     ecx, 2
.text:000000000000B2D4                 mov     rsi, rdx
.text:000000000000B2D7                 repe cmpsb
.text:000000000000B2D9                 setnbe  cl
.text:000000000000B2DC                 sbb     cl, 0
.text:000000000000B2DF                 xor     eax, eax
.text:000000000000B2E1                 test    cl, cl
.text:000000000000B2E3                 jnz     short loc_B2F0
.text:000000000000B2E5
.text:000000000000B2E5 loc_B2E5:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000B2E5                 add     rsp, 8
.text:000000000000B2E9                 retn
.text:000000000000B2E9 ; ---------------------------------------------------------------------------
.text:000000000000B2EA                 align 10h
.text:000000000000B2F0
.text:000000000000B2F0 loc_B2F0:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000B2F0                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000B2F7                 mov     ecx, 6
.text:000000000000B2FC                 mov     rsi, rdx
.text:000000000000B2FF                 repe cmpsb
.text:000000000000B301                 setnbe  al
.text:000000000000B304                 sbb     al, 0
.text:000000000000B306                 test    al, al
.text:000000000000B308                 setnz   al
.text:000000000000B30B                 add     rsp, 8
.text:000000000000B30F                 retn
.text:000000000000B30F ; } // starts at B2B0
.text:000000000000B30F hard_locale     endp
.text:000000000000B30F
.text:000000000000B310
.text:000000000000B310 ; =============== S U B R O U T I N E =======================================
.text:000000000000B310
.text:000000000000B310
.text:000000000000B310                 public locale_charset
.text:000000000000B310 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000B310 ; __unwind {
.text:000000000000B310                 sub     rsp, 8
.text:000000000000B314                 mov     edi, 0Eh        ; item
.text:000000000000B319                 call    _nl_langinfo
.text:000000000000B31E                 test    rax, rax
.text:000000000000B321                 jz      short loc_B340
.text:000000000000B323                 cmp     byte ptr [rax], 0
.text:000000000000B326                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000B32D                 cmovz   rax, rdx
.text:000000000000B331                 add     rsp, 8
.text:000000000000B335                 retn
.text:000000000000B335 ; ---------------------------------------------------------------------------
.text:000000000000B336                 align 20h
.text:000000000000B340
.text:000000000000B340 loc_B340:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000B340                 lea     rax, aAscii     ; "ASCII"
.text:000000000000B347                 add     rsp, 8
.text:000000000000B34B                 retn
.text:000000000000B34B ; } // starts at B310
.text:000000000000B34B locale_charset  endp
.text:000000000000B34B
.text:000000000000B34B ; ---------------------------------------------------------------------------
.text:000000000000B34C                 align 10h
.text:000000000000B350
.text:000000000000B350 ; =============== S U B R O U T I N E =======================================
.text:000000000000B350
.text:000000000000B350 ; Attributes: info_from_lumina
.text:000000000000B350
.text:000000000000B350 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000000B350                 public fd_safer_flag
.text:000000000000B350 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000000B350 ; __unwind {
.text:000000000000B350                 push    r13
.text:000000000000B352                 push    r12
.text:000000000000B354                 push    rbp
.text:000000000000B355                 push    rbx
.text:000000000000B356                 mov     ebx, edi
.text:000000000000B358                 sub     rsp, 8
.text:000000000000B35C                 cmp     edi, 2
.text:000000000000B35F                 ja      short loc_B382
.text:000000000000B361                 call    dup_safer
.text:000000000000B366                 mov     r12d, eax
.text:000000000000B369                 call    ___errno_location
.text:000000000000B36E                 mov     r13d, [rax]
.text:000000000000B371                 mov     rbp, rax
.text:000000000000B374                 mov     edi, ebx        ; fd
.text:000000000000B376                 call    _close
.text:000000000000B37B                 mov     ebx, r12d
.text:000000000000B37E                 mov     [rbp+0], r13d
.text:000000000000B382
.text:000000000000B382 loc_B382:                               ; CODE XREF: fd_safer_flag+F↑j
.text:000000000000B382                 add     rsp, 8
.text:000000000000B386                 mov     eax, ebx
.text:000000000000B388                 pop     rbx
.text:000000000000B389                 pop     rbp
.text:000000000000B38A                 pop     r12
.text:000000000000B38C                 pop     r13
.text:000000000000B38E                 retn
.text:000000000000B38E ; } // starts at B350
.text:000000000000B38E fd_safer_flag   endp
.text:000000000000B38E
.text:000000000000B38E ; ---------------------------------------------------------------------------
.text:000000000000B38F                 align 10h
.text:000000000000B390
.text:000000000000B390 ; =============== S U B R O U T I N E =======================================
.text:000000000000B390
.text:000000000000B390
.text:000000000000B390 xstrcat         proc near               ; CODE XREF: xvasprintf:loc_B52A↓p
.text:000000000000B390
.text:000000000000B390 var_58          = xmmword ptr -58h
.text:000000000000B390 var_48          = qword ptr -48h
.text:000000000000B390 var_40          = qword ptr -40h
.text:000000000000B390
.text:000000000000B390 ; __unwind {
.text:000000000000B390                 push    r15
.text:000000000000B392                 push    r14
.text:000000000000B394                 push    r13
.text:000000000000B396                 push    r12
.text:000000000000B398                 push    rbp
.text:000000000000B399                 push    rbx
.text:000000000000B39A                 sub     rsp, 28h
.text:000000000000B39E                 mov     rax, fs:28h
.text:000000000000B3A7                 mov     [rsp+58h+var_40], rax
.text:000000000000B3AC                 xor     eax, eax
.text:000000000000B3AE                 test    rdi, rdi
.text:000000000000B3B1                 movdqu  xmm0, xmmword ptr [rsi]
.text:000000000000B3B5                 movups  [rsp+58h+var_58], xmm0
.text:000000000000B3B9                 mov     r14, [rsi+10h]
.text:000000000000B3BD                 mov     [rsp+58h+var_48], r14
.text:000000000000B3C2                 jz      loc_B470
.text:000000000000B3C8                 mov     r12, rdi
.text:000000000000B3CB                 mov     r15, rsi
.text:000000000000B3CE                 mov     rbp, rdi
.text:000000000000B3D1                 xor     ebx, ebx
.text:000000000000B3D3                 mov     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000B3DA
.text:000000000000B3DA loc_B3DA:                               ; CODE XREF: xstrcat+74↓j
.text:000000000000B3DA                 mov     edx, dword ptr [rsp+58h+var_58]
.text:000000000000B3DD                 cmp     edx, 2Fh ; '/'
.text:000000000000B3E0                 ja      loc_B4C0
.text:000000000000B3E6                 mov     eax, edx
.text:000000000000B3E8                 add     edx, 8
.text:000000000000B3EB                 add     rax, r14
.text:000000000000B3EE                 mov     dword ptr [rsp+58h+var_58], edx
.text:000000000000B3F1
.text:000000000000B3F1 loc_B3F1:                               ; CODE XREF: xstrcat+13E↓j
.text:000000000000B3F1                 mov     rdi, [rax]      ; s
.text:000000000000B3F4                 call    _strlen
.text:000000000000B3F9                 add     rbx, rax
.text:000000000000B3FC                 cmovb   rbx, r13
.text:000000000000B400                 sub     rbp, 1
.text:000000000000B404                 jnz     short loc_B3DA
.text:000000000000B406                 cmp     rbx, 7FFFFFFFh
.text:000000000000B40D                 ja      loc_B4B0
.text:000000000000B413                 lea     rdi, [rbx+1]
.text:000000000000B417                 call    xmalloc
.text:000000000000B41C                 mov     r14, rax
.text:000000000000B41F                 mov     rbx, rax
.text:000000000000B422                 jmp     short loc_B455
.text:000000000000B424 ; ---------------------------------------------------------------------------
.text:000000000000B424
.text:000000000000B424 loc_B424:                               ; CODE XREF: xstrcat+CB↓j
.text:000000000000B424                 mov     eax, edx
.text:000000000000B426                 add     rax, [r15+10h]
.text:000000000000B42A                 add     edx, 8
.text:000000000000B42D                 mov     [r15], edx
.text:000000000000B430
.text:000000000000B430 loc_B430:                               ; CODE XREF: xstrcat+D9↓j
.text:000000000000B430                 mov     r13, [rax]
.text:000000000000B433                 mov     rdi, r13        ; s
.text:000000000000B436                 call    _strlen
.text:000000000000B43B                 mov     rdi, rbx        ; dest
.text:000000000000B43E                 mov     rbp, rax
.text:000000000000B441                 mov     rdx, rax        ; n
.text:000000000000B444                 mov     rsi, r13        ; src
.text:000000000000B447                 add     rbx, rbp
.text:000000000000B44A                 call    _memcpy
.text:000000000000B44F                 sub     r12, 1
.text:000000000000B453                 jz      short loc_B480
.text:000000000000B455
.text:000000000000B455 loc_B455:                               ; CODE XREF: xstrcat+92↑j
.text:000000000000B455                 mov     edx, [r15]
.text:000000000000B458                 cmp     edx, 2Fh ; '/'
.text:000000000000B45B                 jbe     short loc_B424
.text:000000000000B45D                 mov     rax, [r15+8]
.text:000000000000B461                 lea     rdx, [rax+8]
.text:000000000000B465                 mov     [r15+8], rdx
.text:000000000000B469                 jmp     short loc_B430
.text:000000000000B469 ; ---------------------------------------------------------------------------
.text:000000000000B46B                 align 10h
.text:000000000000B470
.text:000000000000B470 loc_B470:                               ; CODE XREF: xstrcat+32↑j
.text:000000000000B470                 mov     edi, 1
.text:000000000000B475                 call    xmalloc
.text:000000000000B47A                 mov     rbx, rax
.text:000000000000B47D                 mov     r14, rax
.text:000000000000B480
.text:000000000000B480 loc_B480:                               ; CODE XREF: xstrcat+C3↑j
.text:000000000000B480                 mov     byte ptr [rbx], 0
.text:000000000000B483
.text:000000000000B483 loc_B483:                               ; CODE XREF: xstrcat+12E↓j
.text:000000000000B483                 mov     rcx, [rsp+58h+var_40]
.text:000000000000B488                 xor     rcx, fs:28h
.text:000000000000B491                 mov     rax, r14
.text:000000000000B494                 jnz     short loc_B4A5
.text:000000000000B496                 add     rsp, 28h
.text:000000000000B49A                 pop     rbx
.text:000000000000B49B                 pop     rbp
.text:000000000000B49C                 pop     r12
.text:000000000000B49E                 pop     r13
.text:000000000000B4A0                 pop     r14
.text:000000000000B4A2                 pop     r15
.text:000000000000B4A4                 retn
.text:000000000000B4A5 ; ---------------------------------------------------------------------------
.text:000000000000B4A5
.text:000000000000B4A5 loc_B4A5:                               ; CODE XREF: xstrcat+104↑j
.text:000000000000B4A5                 call    ___stack_chk_fail
.text:000000000000B4A5 ; ---------------------------------------------------------------------------
.text:000000000000B4AA                 align 10h
.text:000000000000B4B0
.text:000000000000B4B0 loc_B4B0:                               ; CODE XREF: xstrcat+7D↑j
.text:000000000000B4B0                 call    ___errno_location
.text:000000000000B4B5                 xor     r14d, r14d
.text:000000000000B4B8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000B4BE                 jmp     short loc_B483
.text:000000000000B4C0 ; ---------------------------------------------------------------------------
.text:000000000000B4C0
.text:000000000000B4C0 loc_B4C0:                               ; CODE XREF: xstrcat+50↑j
.text:000000000000B4C0                 mov     rax, qword ptr [rsp+58h+var_58+8]
.text:000000000000B4C5                 lea     rdx, [rax+8]
.text:000000000000B4C9                 mov     qword ptr [rsp+58h+var_58+8], rdx
.text:000000000000B4CE                 jmp     loc_B3F1
.text:000000000000B4CE ; } // starts at B390
.text:000000000000B4CE xstrcat         endp
.text:000000000000B4CE
.text:000000000000B4CE ; ---------------------------------------------------------------------------
.text:000000000000B4D3                 align 20h
.text:000000000000B4E0
.text:000000000000B4E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B4E0
.text:000000000000B4E0
.text:000000000000B4E0                 public xvasprintf
.text:000000000000B4E0 xvasprintf      proc near               ; CODE XREF: xasprintf+94↑p
.text:000000000000B4E0
.text:000000000000B4E0 var_18          = qword ptr -18h
.text:000000000000B4E0 var_10          = qword ptr -10h
.text:000000000000B4E0
.text:000000000000B4E0 ; __unwind {
.text:000000000000B4E0                 sub     rsp, 18h
.text:000000000000B4E4                 mov     rax, fs:28h
.text:000000000000B4ED                 mov     [rsp+18h+var_10], rax
.text:000000000000B4F2                 xor     eax, eax
.text:000000000000B4F4                 movzx   eax, byte ptr [rdi]
.text:000000000000B4F7                 test    al, al
.text:000000000000B4F9                 jz      short loc_B576
.text:000000000000B4FB                 cmp     al, 25h ; '%'
.text:000000000000B4FD                 mov     r8, rdi
.text:000000000000B500                 jnz     short loc_B538
.text:000000000000B502                 cmp     byte ptr [rdi+1], 73h ; 's'
.text:000000000000B506                 jnz     short loc_B538
.text:000000000000B508                 xor     edi, edi
.text:000000000000B50A                 jmp     short loc_B51D
.text:000000000000B50A ; ---------------------------------------------------------------------------
.text:000000000000B50C                 align 10h
.text:000000000000B510
.text:000000000000B510 loc_B510:                               ; CODE XREF: xvasprintf+48↓j
.text:000000000000B510                 cmp     cl, 25h ; '%'
.text:000000000000B513                 jnz     short loc_B538
.text:000000000000B515                 cmp     byte ptr [r8+rdi*2+1], 73h ; 's'
.text:000000000000B51B                 jnz     short loc_B538
.text:000000000000B51D
.text:000000000000B51D loc_B51D:                               ; CODE XREF: xvasprintf+2A↑j
.text:000000000000B51D                 add     rdi, 1
.text:000000000000B521                 movzx   ecx, byte ptr [r8+rdi*2]
.text:000000000000B526                 test    cl, cl
.text:000000000000B528                 jnz     short loc_B510
.text:000000000000B52A
.text:000000000000B52A loc_B52A:                               ; CODE XREF: xvasprintf+98↓j
.text:000000000000B52A                 call    xstrcat
.text:000000000000B52F                 jmp     short loc_B54E
.text:000000000000B52F ; ---------------------------------------------------------------------------
.text:000000000000B531                 align 8
.text:000000000000B538
.text:000000000000B538 loc_B538:                               ; CODE XREF: xvasprintf+20↑j
.text:000000000000B538                                         ; xvasprintf+26↑j ...
.text:000000000000B538                 mov     rdx, rsi
.text:000000000000B53B                 mov     rdi, rsp
.text:000000000000B53E                 mov     rsi, r8
.text:000000000000B541                 call    u16_u16_vasprintf
.text:000000000000B546                 test    eax, eax
.text:000000000000B548                 js      short loc_B568
.text:000000000000B54A                 mov     rax, [rsp+18h+var_18]
.text:000000000000B54E
.text:000000000000B54E loc_B54E:                               ; CODE XREF: xvasprintf+4F↑j
.text:000000000000B54E                                         ; xvasprintf+94↓j
.text:000000000000B54E                 mov     rdx, [rsp+18h+var_10]
.text:000000000000B553                 xor     rdx, fs:28h
.text:000000000000B55C                 jnz     short loc_B57A
.text:000000000000B55E                 add     rsp, 18h
.text:000000000000B562                 retn
.text:000000000000B562 ; ---------------------------------------------------------------------------
.text:000000000000B563                 align 8
.text:000000000000B568
.text:000000000000B568 loc_B568:                               ; CODE XREF: xvasprintf+68↑j
.text:000000000000B568                 call    ___errno_location
.text:000000000000B56D                 cmp     dword ptr [rax], 0Ch
.text:000000000000B570                 jz      short loc_B57F
.text:000000000000B572                 xor     eax, eax
.text:000000000000B574                 jmp     short loc_B54E
.text:000000000000B576 ; ---------------------------------------------------------------------------
.text:000000000000B576
.text:000000000000B576 loc_B576:                               ; CODE XREF: xvasprintf+19↑j
.text:000000000000B576                 xor     edi, edi
.text:000000000000B578                 jmp     short loc_B52A
.text:000000000000B57A ; ---------------------------------------------------------------------------
.text:000000000000B57A
.text:000000000000B57A loc_B57A:                               ; CODE XREF: xvasprintf+7C↑j
.text:000000000000B57A                 call    ___stack_chk_fail
.text:000000000000B57F ; ---------------------------------------------------------------------------
.text:000000000000B57F
.text:000000000000B57F loc_B57F:                               ; CODE XREF: xvasprintf+90↑j
.text:000000000000B57F                 call    xalloc_die
.text:000000000000B57F ; } // starts at B4E0
.text:000000000000B57F xvasprintf      endp
.text:000000000000B57F
.text:000000000000B57F ; ---------------------------------------------------------------------------
.text:000000000000B584                 align 10h
.text:000000000000B590
.text:000000000000B590 ; =============== S U B R O U T I N E =======================================
.text:000000000000B590
.text:000000000000B590 ; Attributes: info_from_lumina
.text:000000000000B590
.text:000000000000B590 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000B590                 public rpl_fclose
.text:000000000000B590 rpl_fclose      proc near               ; CODE XREF: read_file_system_list+2C7↑p
.text:000000000000B590                                         ; read_file_system_list+82E↑p ...
.text:000000000000B590 ; __unwind {
.text:000000000000B590                 push    r12
.text:000000000000B592                 push    rbp
.text:000000000000B593                 push    rbx
.text:000000000000B594                 mov     rbx, rdi
.text:000000000000B597                 call    _fileno
.text:000000000000B59C                 test    eax, eax
.text:000000000000B59E                 mov     rdi, rbx        ; fp
.text:000000000000B5A1                 js      short loc_B5F7
.text:000000000000B5A3                 call    ___freading
.text:000000000000B5A8                 test    eax, eax
.text:000000000000B5AA                 jnz     short loc_B5D8
.text:000000000000B5AC
.text:000000000000B5AC loc_B5AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000B5AC                 mov     rdi, rbx        ; stream
.text:000000000000B5AF                 call    rpl_fflush
.text:000000000000B5B4                 test    eax, eax
.text:000000000000B5B6                 jz      short loc_B5F4
.text:000000000000B5B8                 call    ___errno_location
.text:000000000000B5BD                 mov     r12d, [rax]
.text:000000000000B5C0                 mov     rdi, rbx        ; stream
.text:000000000000B5C3                 mov     rbp, rax
.text:000000000000B5C6                 call    _fclose
.text:000000000000B5CB                 test    r12d, r12d
.text:000000000000B5CE                 jnz     short loc_B600
.text:000000000000B5D0
.text:000000000000B5D0 loc_B5D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000B5D0                 pop     rbx
.text:000000000000B5D1                 pop     rbp
.text:000000000000B5D2                 pop     r12
.text:000000000000B5D4                 retn
.text:000000000000B5D4 ; ---------------------------------------------------------------------------
.text:000000000000B5D5                 align 8
.text:000000000000B5D8
.text:000000000000B5D8 loc_B5D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000B5D8                 mov     rdi, rbx        ; stream
.text:000000000000B5DB                 call    _fileno
.text:000000000000B5E0                 xor     esi, esi        ; offset
.text:000000000000B5E2                 mov     edx, 1          ; whence
.text:000000000000B5E7                 mov     edi, eax        ; fd
.text:000000000000B5E9                 call    _lseek
.text:000000000000B5EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B5F2                 jnz     short loc_B5AC
.text:000000000000B5F4
.text:000000000000B5F4 loc_B5F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000B5F4                 mov     rdi, rbx        ; stream
.text:000000000000B5F7
.text:000000000000B5F7 loc_B5F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000B5F7                 pop     rbx
.text:000000000000B5F8                 pop     rbp
.text:000000000000B5F9                 pop     r12
.text:000000000000B5FB                 jmp     _fclose
.text:000000000000B600 ; ---------------------------------------------------------------------------
.text:000000000000B600
.text:000000000000B600 loc_B600:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000B600                 mov     [rbp+0], r12d
.text:000000000000B604                 mov     eax, 0FFFFFFFFh
.text:000000000000B609                 jmp     short loc_B5D0
.text:000000000000B609 ; } // starts at B590
.text:000000000000B609 rpl_fclose      endp
.text:000000000000B609
.text:000000000000B609 ; ---------------------------------------------------------------------------
.text:000000000000B60B                 align 10h
.text:000000000000B610
.text:000000000000B610 ; =============== S U B R O U T I N E =======================================
.text:000000000000B610
.text:000000000000B610 ; Attributes: info_from_lumina
.text:000000000000B610
.text:000000000000B610 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000B610                 public rpl_fflush
.text:000000000000B610 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000B610 ; __unwind {
.text:000000000000B610                 test    rdi, rdi
.text:000000000000B613                 push    rbx
.text:000000000000B614                 mov     rbx, rdi
.text:000000000000B617                 jz      short loc_B62A
.text:000000000000B619                 call    ___freading
.text:000000000000B61E                 test    eax, eax
.text:000000000000B620                 jz      short loc_B62A
.text:000000000000B622                 test    dword ptr [rbx], 100h
.text:000000000000B628                 jnz     short loc_B638
.text:000000000000B62A
.text:000000000000B62A loc_B62A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000B62A                                         ; rpl_fflush+10↑j
.text:000000000000B62A                 mov     rdi, rbx        ; stream
.text:000000000000B62D                 pop     rbx
.text:000000000000B62E                 jmp     _fflush
.text:000000000000B62E ; ---------------------------------------------------------------------------
.text:000000000000B633                 align 8
.text:000000000000B638
.text:000000000000B638 loc_B638:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000B638                 mov     rdi, rbx
.text:000000000000B63B                 mov     edx, 1
.text:000000000000B640                 xor     esi, esi
.text:000000000000B642                 call    rpl_fseeko
.text:000000000000B647                 mov     rdi, rbx        ; stream
.text:000000000000B64A                 pop     rbx
.text:000000000000B64B                 jmp     _fflush
.text:000000000000B64B ; } // starts at B610
.text:000000000000B64B rpl_fflush      endp
.text:000000000000B64B
.text:000000000000B650
.text:000000000000B650 ; =============== S U B R O U T I N E =======================================
.text:000000000000B650
.text:000000000000B650 ; Attributes: info_from_lumina
.text:000000000000B650
.text:000000000000B650 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000B650                 public rpl_fseeko
.text:000000000000B650 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000B650 ; __unwind {
.text:000000000000B650                 mov     rax, [rdi+8]
.text:000000000000B654                 cmp     [rdi+10h], rax
.text:000000000000B658                 jz      short loc_B660
.text:000000000000B65A
.text:000000000000B65A loc_B65A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000B65A                                         ; rpl_fseeko+1F↓j
.text:000000000000B65A                 jmp     _fseeko
.text:000000000000B65A ; ---------------------------------------------------------------------------
.text:000000000000B65F                 align 20h
.text:000000000000B660
.text:000000000000B660 loc_B660:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000B660                 mov     rax, [rdi+20h]
.text:000000000000B664                 cmp     [rdi+28h], rax
.text:000000000000B668                 jnz     short loc_B65A
.text:000000000000B66A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000B66F                 jnz     short loc_B65A
.text:000000000000B671                 push    r12
.text:000000000000B673                 push    rbp
.text:000000000000B674                 mov     r12d, edx
.text:000000000000B677                 push    rbx
.text:000000000000B678                 mov     rbp, rsi
.text:000000000000B67B                 mov     rbx, rdi
.text:000000000000B67E                 call    _fileno
.text:000000000000B683                 mov     edx, r12d       ; whence
.text:000000000000B686                 mov     rsi, rbp        ; offset
.text:000000000000B689                 mov     edi, eax        ; fd
.text:000000000000B68B                 call    _lseek
.text:000000000000B690                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B694                 jz      short loc_B6A2
.text:000000000000B696                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000B699                 mov     [rbx+90h], rax
.text:000000000000B6A0                 xor     eax, eax
.text:000000000000B6A2
.text:000000000000B6A2 loc_B6A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000B6A2                 pop     rbx
.text:000000000000B6A3                 pop     rbp
.text:000000000000B6A4                 pop     r12
.text:000000000000B6A6                 retn
.text:000000000000B6A6 ; } // starts at B650
.text:000000000000B6A6 rpl_fseeko      endp
.text:000000000000B6A6
.text:000000000000B6A6 ; ---------------------------------------------------------------------------
.text:000000000000B6A7                 align 10h
.text:000000000000B6B0
.text:000000000000B6B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6B0
.text:000000000000B6B0 ; Attributes: info_from_lumina
.text:000000000000B6B0
.text:000000000000B6B0                 public u16_u16_vasprintf
.text:000000000000B6B0 u16_u16_vasprintf proc near             ; CODE XREF: xvasprintf+61↑p
.text:000000000000B6B0
.text:000000000000B6B0 var_18          = qword ptr -18h
.text:000000000000B6B0 var_10          = qword ptr -10h
.text:000000000000B6B0
.text:000000000000B6B0 ; __unwind {
.text:000000000000B6B0                 push    rbx
.text:000000000000B6B1                 mov     rax, rsi
.text:000000000000B6B4                 mov     rbx, rdi
.text:000000000000B6B7                 xor     edi, edi
.text:000000000000B6B9                 sub     rsp, 10h
.text:000000000000B6BD                 mov     rcx, fs:28h
.text:000000000000B6C6                 mov     [rsp+18h+var_10], rcx
.text:000000000000B6CB                 xor     ecx, ecx
.text:000000000000B6CD                 mov     rsi, rsp
.text:000000000000B6D0                 mov     rcx, rdx
.text:000000000000B6D3                 mov     rdx, rax
.text:000000000000B6D6                 call    vasnprintf
.text:000000000000B6DB                 test    rax, rax
.text:000000000000B6DE                 jz      short loc_B722
.text:000000000000B6E0                 mov     rdx, [rsp+18h+var_18]
.text:000000000000B6E4                 cmp     rdx, 7FFFFFFFh
.text:000000000000B6EB                 ja      short loc_B708
.text:000000000000B6ED                 mov     [rbx], rax
.text:000000000000B6F0                 mov     eax, edx
.text:000000000000B6F2
.text:000000000000B6F2 loc_B6F2:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:000000000000B6F2                                         ; u16_u16_vasprintf+77↓j
.text:000000000000B6F2                 mov     rbx, [rsp+18h+var_10]
.text:000000000000B6F7                 xor     rbx, fs:28h
.text:000000000000B700                 jnz     short loc_B729
.text:000000000000B702                 add     rsp, 10h
.text:000000000000B706                 pop     rbx
.text:000000000000B707                 retn
.text:000000000000B708 ; ---------------------------------------------------------------------------
.text:000000000000B708
.text:000000000000B708 loc_B708:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:000000000000B708                 mov     rdi, rax        ; ptr
.text:000000000000B70B                 call    _free
.text:000000000000B710                 call    ___errno_location
.text:000000000000B715                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000B71B                 mov     eax, 0FFFFFFFFh
.text:000000000000B720                 jmp     short loc_B6F2
.text:000000000000B722 ; ---------------------------------------------------------------------------
.text:000000000000B722
.text:000000000000B722 loc_B722:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:000000000000B722                 mov     eax, 0FFFFFFFFh
.text:000000000000B727                 jmp     short loc_B6F2
.text:000000000000B729 ; ---------------------------------------------------------------------------
.text:000000000000B729
.text:000000000000B729 loc_B729:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:000000000000B729                 call    ___stack_chk_fail
.text:000000000000B729 ; } // starts at B6B0
.text:000000000000B729 u16_u16_vasprintf endp
.text:000000000000B729
.text:000000000000B729 ; ---------------------------------------------------------------------------
.text:000000000000B72E                 align 10h
.text:000000000000B730
.text:000000000000B730 ; =============== S U B R O U T I N E =======================================
.text:000000000000B730
.text:000000000000B730
.text:000000000000B730                 public dup_safer
.text:000000000000B730 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000B730 ; __unwind {
.text:000000000000B730                 mov     edx, 3
.text:000000000000B735                 xor     esi, esi
.text:000000000000B737                 xor     eax, eax
.text:000000000000B739                 jmp     rpl_fcntl
.text:000000000000B739 ; } // starts at B730
.text:000000000000B739 dup_safer       endp
.text:000000000000B739
.text:000000000000B739 ; ---------------------------------------------------------------------------
.text:000000000000B73E                 align 20h
.text:000000000000B740
.text:000000000000B740 ; =============== S U B R O U T I N E =======================================
.text:000000000000B740
.text:000000000000B740
.text:000000000000B740 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000B740                 public rpl_fcntl
.text:000000000000B740 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:000000000000B740
.text:000000000000B740 var_68          = dword ptr -68h
.text:000000000000B740 var_60          = qword ptr -60h
.text:000000000000B740 var_58          = qword ptr -58h
.text:000000000000B740 var_50          = qword ptr -50h
.text:000000000000B740 var_48          = byte ptr -48h
.text:000000000000B740 var_38          = qword ptr -38h
.text:000000000000B740 var_30          = qword ptr -30h
.text:000000000000B740 var_28          = qword ptr -28h
.text:000000000000B740 var_20          = qword ptr -20h
.text:000000000000B740 arg_0           = byte ptr  8
.text:000000000000B740
.text:000000000000B740 ; __unwind {
.text:000000000000B740                 push    r12
.text:000000000000B742                 push    rbp
.text:000000000000B743                 mov     ebp, edi
.text:000000000000B745                 push    rbx
.text:000000000000B746                 sub     rsp, 50h
.text:000000000000B74A                 mov     rax, fs:28h
.text:000000000000B753                 mov     [rsp+68h+var_50], rax
.text:000000000000B758                 xor     eax, eax
.text:000000000000B75A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000B75F                 test    esi, esi
.text:000000000000B761                 mov     [rsp+68h+var_38], rdx
.text:000000000000B766                 mov     [rsp+68h+var_30], rcx
.text:000000000000B76B                 mov     [rsp+68h+var_28], r8
.text:000000000000B770                 mov     [rsp+68h+var_60], rax
.text:000000000000B775                 lea     rax, [rsp+68h+var_48]
.text:000000000000B77A                 mov     [rsp+68h+var_20], r9
.text:000000000000B77F                 mov     [rsp+68h+var_68], 10h
.text:000000000000B786                 mov     [rsp+68h+var_58], rax
.text:000000000000B78B                 jz      loc_B992
.text:000000000000B791                 cmp     esi, 406h
.text:000000000000B797                 jnz     short loc_B7E0
.text:000000000000B799                 mov     rax, [rsp+68h+var_58]
.text:000000000000B79E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000B7A5                 mov     [rsp+68h+var_68], 18h
.text:000000000000B7AC                 mov     r12d, [rax+10h]
.text:000000000000B7B0                 mov     edx, r12d
.text:000000000000B7B3                 js      loc_B8E3
.text:000000000000B7B9                 xor     eax, eax
.text:000000000000B7BB                 mov     esi, 406h       ; cmd
.text:000000000000B7C0                 call    _fcntl
.text:000000000000B7C5                 test    eax, eax
.text:000000000000B7C7                 mov     ebx, eax
.text:000000000000B7C9                 js      loc_B958
.text:000000000000B7CF
.text:000000000000B7CF loc_B7CF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000B7CF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000B7D9                 jmp     short loc_B820
.text:000000000000B7D9 ; ---------------------------------------------------------------------------
.text:000000000000B7DB                 align 20h
.text:000000000000B7E0
.text:000000000000B7E0 loc_B7E0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000B7E0                 cmp     esi, 0Bh
.text:000000000000B7E3                 jz      short loc_B810
.text:000000000000B7E5                 jg      short loc_B840
.text:000000000000B7E7                 cmp     esi, 4
.text:000000000000B7EA                 jz      loc_B8C0
.text:000000000000B7F0                 jg      loc_B8B0
.text:000000000000B7F6                 cmp     esi, 2
.text:000000000000B7F9                 jz      loc_B8C0
.text:000000000000B7FF                 jg      short loc_B810
.text:000000000000B801                 cmp     esi, 1
.text:000000000000B804                 jnz     short loc_B868
.text:000000000000B806                 db      2Eh
.text:000000000000B806                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B810
.text:000000000000B810 loc_B810:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000B810                                         ; rpl_fcntl+BF↑j ...
.text:000000000000B810                 mov     edi, ebp        ; fd
.text:000000000000B812                 xor     eax, eax
.text:000000000000B814                 call    _fcntl
.text:000000000000B819                 mov     ebx, eax
.text:000000000000B81B                 nop     dword ptr [rax+rax+00h]
.text:000000000000B820
.text:000000000000B820 loc_B820:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000B820                                         ; rpl_fcntl+147↓j ...
.text:000000000000B820                 mov     rcx, [rsp+68h+var_50]
.text:000000000000B825                 xor     rcx, fs:28h
.text:000000000000B82E                 mov     eax, ebx
.text:000000000000B830                 jnz     loc_B98D
.text:000000000000B836                 add     rsp, 50h
.text:000000000000B83A                 pop     rbx
.text:000000000000B83B                 pop     rbp
.text:000000000000B83C                 pop     r12
.text:000000000000B83E                 retn
.text:000000000000B83E ; ---------------------------------------------------------------------------
.text:000000000000B83F                 align 20h
.text:000000000000B840
.text:000000000000B840 loc_B840:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000B840                 cmp     esi, 407h
.text:000000000000B846                 jg      short loc_B890
.text:000000000000B848                 cmp     esi, 406h
.text:000000000000B84E                 jge     short loc_B8C0
.text:000000000000B850                 cmp     esi, 401h
.text:000000000000B856                 jz      short loc_B810
.text:000000000000B858                 cmp     esi, 402h
.text:000000000000B85E                 jz      short loc_B8C0
.text:000000000000B860                 cmp     esi, 400h
.text:000000000000B866                 jz      short loc_B8C0
.text:000000000000B868
.text:000000000000B868 loc_B868:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000B868                                         ; rpl_fcntl+164↓j ...
.text:000000000000B868                 mov     eax, [rsp+68h+var_68]
.text:000000000000B86B                 cmp     eax, 2Fh ; '/'
.text:000000000000B86E                 ja      loc_B9AA
.text:000000000000B874                 add     rax, [rsp+68h+var_58]
.text:000000000000B879
.text:000000000000B879 loc_B879:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000B879                 mov     rdx, [rax]
.text:000000000000B87C                 mov     edi, ebp        ; fd
.text:000000000000B87E                 xor     eax, eax
.text:000000000000B880                 call    _fcntl
.text:000000000000B885                 mov     ebx, eax
.text:000000000000B887                 jmp     short loc_B820
.text:000000000000B887 ; ---------------------------------------------------------------------------
.text:000000000000B889                 align 10h
.text:000000000000B890
.text:000000000000B890 loc_B890:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000B890                 cmp     esi, 409h
.text:000000000000B896                 jz      short loc_B8C0
.text:000000000000B898                 jl      loc_B810
.text:000000000000B89E                 cmp     esi, 40Ah
.text:000000000000B8A4                 jnz     short loc_B868
.text:000000000000B8A6                 jmp     loc_B810
.text:000000000000B8A6 ; ---------------------------------------------------------------------------
.text:000000000000B8AB                 align 10h
.text:000000000000B8B0
.text:000000000000B8B0 loc_B8B0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000B8B0                 cmp     esi, 9
.text:000000000000B8B3                 jz      loc_B810
.text:000000000000B8B9                 jg      short loc_B8C0
.text:000000000000B8BB                 cmp     esi, 8
.text:000000000000B8BE                 jnz     short loc_B868
.text:000000000000B8C0
.text:000000000000B8C0 loc_B8C0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000B8C0                                         ; rpl_fcntl+B9↑j ...
.text:000000000000B8C0                 mov     eax, [rsp+68h+var_68]
.text:000000000000B8C3                 cmp     eax, 2Fh ; '/'
.text:000000000000B8C6                 ja      loc_B9B4
.text:000000000000B8CC                 add     rax, [rsp+68h+var_58]
.text:000000000000B8D1
.text:000000000000B8D1 loc_B8D1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000B8D1                 mov     edx, [rax]
.text:000000000000B8D3                 mov     edi, ebp        ; fd
.text:000000000000B8D5                 xor     eax, eax
.text:000000000000B8D7                 call    _fcntl
.text:000000000000B8DC                 mov     ebx, eax
.text:000000000000B8DE                 jmp     loc_B820
.text:000000000000B8E3 ; ---------------------------------------------------------------------------
.text:000000000000B8E3
.text:000000000000B8E3 loc_B8E3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000B8E3                 xor     esi, esi        ; cmd
.text:000000000000B8E5                 xor     eax, eax
.text:000000000000B8E7                 call    _fcntl
.text:000000000000B8EC                 test    eax, eax
.text:000000000000B8EE                 mov     ebx, eax
.text:000000000000B8F0                 js      loc_B820
.text:000000000000B8F6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000B8FD                 jnz     loc_B820
.text:000000000000B903
.text:000000000000B903 loc_B903:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000B903                 xor     eax, eax
.text:000000000000B905                 mov     esi, 1          ; cmd
.text:000000000000B90A                 mov     edi, ebx        ; fd
.text:000000000000B90C                 call    _fcntl
.text:000000000000B911                 test    eax, eax
.text:000000000000B913                 js      short loc_B931
.text:000000000000B915                 or      eax, 1
.text:000000000000B918                 mov     esi, 2          ; cmd
.text:000000000000B91D                 mov     edi, ebx        ; fd
.text:000000000000B91F                 mov     edx, eax
.text:000000000000B921                 xor     eax, eax
.text:000000000000B923                 call    _fcntl
.text:000000000000B928                 cmp     eax, 0FFFFFFFFh
.text:000000000000B92B                 jnz     loc_B820
.text:000000000000B931
.text:000000000000B931 loc_B931:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000B931                 call    ___errno_location
.text:000000000000B936                 mov     r12d, [rax]
.text:000000000000B939                 mov     rbp, rax
.text:000000000000B93C                 mov     edi, ebx        ; fd
.text:000000000000B93E                 call    _close
.text:000000000000B943                 mov     ebx, 0FFFFFFFFh
.text:000000000000B948                 mov     [rbp+0], r12d
.text:000000000000B94C                 jmp     loc_B820
.text:000000000000B94C ; ---------------------------------------------------------------------------
.text:000000000000B951                 align 8
.text:000000000000B958
.text:000000000000B958 loc_B958:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000B958                 call    ___errno_location
.text:000000000000B95D                 cmp     dword ptr [rax], 16h
.text:000000000000B960                 jnz     loc_B7CF
.text:000000000000B966                 xor     esi, esi        ; cmd
.text:000000000000B968                 xor     eax, eax
.text:000000000000B96A                 mov     edx, r12d
.text:000000000000B96D                 mov     edi, ebp        ; fd
.text:000000000000B96F                 call    _fcntl
.text:000000000000B974                 test    eax, eax
.text:000000000000B976                 mov     ebx, eax
.text:000000000000B978                 js      loc_B820
.text:000000000000B97E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000B988                 jmp     loc_B903
.text:000000000000B98D ; ---------------------------------------------------------------------------
.text:000000000000B98D
.text:000000000000B98D loc_B98D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000B98D                 call    ___stack_chk_fail
.text:000000000000B992 ; ---------------------------------------------------------------------------
.text:000000000000B992
.text:000000000000B992 loc_B992:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000B992                 mov     rax, [rsp+68h+var_58]
.text:000000000000B997                 xor     esi, esi        ; cmd
.text:000000000000B999                 mov     edx, [rax+10h]
.text:000000000000B99C                 xor     eax, eax
.text:000000000000B99E                 call    _fcntl
.text:000000000000B9A3                 mov     ebx, eax
.text:000000000000B9A5                 jmp     loc_B820
.text:000000000000B9AA ; ---------------------------------------------------------------------------
.text:000000000000B9AA
.text:000000000000B9AA loc_B9AA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000B9AA                 mov     rax, [rsp+68h+var_60]
.text:000000000000B9AF                 jmp     loc_B879
.text:000000000000B9B4 ; ---------------------------------------------------------------------------
.text:000000000000B9B4
.text:000000000000B9B4 loc_B9B4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000B9B4                 mov     rax, [rsp+68h+var_60]
.text:000000000000B9B9                 jmp     loc_B8D1
.text:000000000000B9B9 ; } // starts at B740
.text:000000000000B9B9 rpl_fcntl       endp
.text:000000000000B9B9
.text:000000000000B9B9 ; ---------------------------------------------------------------------------
.text:000000000000B9BE                 align 20h
.text:000000000000B9C0
.text:000000000000B9C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9C0
.text:000000000000B9C0 ; Attributes: bp-based frame
.text:000000000000B9C0
.text:000000000000B9C0                 public vasnprintf
.text:000000000000B9C0 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:000000000000B9C0
.text:000000000000B9C0 var_450         = tbyte ptr -450h
.text:000000000000B9C0 var_440         = tbyte ptr -440h
.text:000000000000B9C0 var_430         = qword ptr -430h
.text:000000000000B9C0 var_421         = byte ptr -421h
.text:000000000000B9C0 ptr             = qword ptr -420h
.text:000000000000B9C0 var_418         = qword ptr -418h
.text:000000000000B9C0 var_410         = qword ptr -410h
.text:000000000000B9C0 var_408         = qword ptr -408h
.text:000000000000B9C0 var_400         = qword ptr -400h
.text:000000000000B9C0 var_3F8         = qword ptr -3F8h
.text:000000000000B9C0 var_3F0         = qword ptr -3F0h
.text:000000000000B9C0 src             = qword ptr -3E8h
.text:000000000000B9C0 var_3E0         = qword ptr -3E0h
.text:000000000000B9C0 var_3D8         = qword ptr -3D8h
.text:000000000000B9C0 var_3D0         = qword ptr -3D0h
.text:000000000000B9C0 n               = qword ptr -3C8h
.text:000000000000B9C0 var_3BC         = dword ptr -3BCh
.text:000000000000B9C0 var_3B8         = dword ptr -3B8h
.text:000000000000B9C0 var_3B4         = dword ptr -3B4h
.text:000000000000B9C0 var_3B0         = byte ptr -3B0h
.text:000000000000B9C0 var_3A8         = qword ptr -3A8h
.text:000000000000B9C0 var_2C0         = qword ptr -2C0h
.text:000000000000B9C0 var_2B8         = qword ptr -2B8h
.text:000000000000B9C0 var_2B0         = qword ptr -2B0h
.text:000000000000B9C0 var_2A8         = qword ptr -2A8h
.text:000000000000B9C0 var_38          = qword ptr -38h
.text:000000000000B9C0
.text:000000000000B9C0 ; __unwind {
.text:000000000000B9C0                 push    rbp
.text:000000000000B9C1                 mov     rbp, rsp
.text:000000000000B9C4                 push    r15
.text:000000000000B9C6                 push    r14
.text:000000000000B9C8                 push    r13
.text:000000000000B9CA                 push    r12
.text:000000000000B9CC                 lea     r14, [rbp+var_3B0]
.text:000000000000B9D3                 push    rbx
.text:000000000000B9D4                 mov     rbx, rdx
.text:000000000000B9D7                 mov     r12, rcx
.text:000000000000B9DA                 mov     rdx, r14
.text:000000000000B9DD                 sub     rsp, 408h
.text:000000000000B9E4                 mov     [rbp+var_418], rsi
.text:000000000000B9EB                 lea     rsi, [rbp+var_2C0]
.text:000000000000B9F2                 mov     [rbp+src], rdi
.text:000000000000B9F9                 mov     rdi, rbx
.text:000000000000B9FC                 mov     [rbp+var_410], r14
.text:000000000000BA03                 mov     rax, fs:28h
.text:000000000000BA0C                 mov     [rbp+var_38], rax
.text:000000000000BA10                 xor     eax, eax
.text:000000000000BA12                 mov     [rbp+var_408], rsi
.text:000000000000BA19                 call    printf_parse
.text:000000000000BA1E                 test    eax, eax
.text:000000000000BA20                 js      loc_C888
.text:000000000000BA26                 mov     rsi, r14
.text:000000000000BA29                 mov     rdi, r12
.text:000000000000BA2C                 call    printf_fetchargs
.text:000000000000BA31                 test    eax, eax
.text:000000000000BA33                 js      loc_C8F0
.text:000000000000BA39                 mov     rax, [rbp+var_2B0]
.text:000000000000BA40                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BA47                 add     rax, 7
.text:000000000000BA4B                 cmp     rax, 6
.text:000000000000BA4F                 cmovbe  rax, rdx
.text:000000000000BA53                 add     rax, [rbp+var_2A8]
.text:000000000000BA5A                 jb      loc_C488
.text:000000000000BA60                 mov     rdi, rax
.text:000000000000BA63                 xor     r8d, r8d
.text:000000000000BA66                 add     rdi, 6          ; size
.text:000000000000BA6A                 setb    r8b
.text:000000000000BA6E                 jb      loc_C488
.text:000000000000BA74                 cmp     rdi, 0F9Fh
.text:000000000000BA7B                 jbe     loc_BBC8
.text:000000000000BA81                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000BA85                 mov     [rbp+n], r8
.text:000000000000BA8C                 jz      loc_C488
.text:000000000000BA92                 call    _malloc
.text:000000000000BA97                 test    rax, rax
.text:000000000000BA9A                 mov     [rbp+var_3D8], rax
.text:000000000000BAA1                 jz      loc_C488
.text:000000000000BAA7                 mov     r8, [rbp+n]
.text:000000000000BAAE                 mov     [rbp+ptr], rax
.text:000000000000BAB5
.text:000000000000BAB5 loc_BAB5:                               ; CODE XREF: vasnprintf+22E↓j
.text:000000000000BAB5                 xor     r12d, r12d
.text:000000000000BAB8                 cmp     [rbp+src], 0
.text:000000000000BAC0                 jz      short loc_BACC
.text:000000000000BAC2                 mov     rax, [rbp+var_418]
.text:000000000000BAC9                 mov     r12, [rax]
.text:000000000000BACC
.text:000000000000BACC loc_BACC:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000BACC                 mov     r13, [rbp+var_2B8]
.text:000000000000BAD3                 lea     rax, [rbp+var_3BC]
.text:000000000000BADA                 mov     r15, [rbp+src]
.text:000000000000BAE1                 mov     [rbp+var_400], 0
.text:000000000000BAEC                 mov     [rbp+var_3F0], rax
.text:000000000000BAF3                 mov     rax, rbx
.text:000000000000BAF6                 mov     rbx, r8
.text:000000000000BAF9                 mov     rcx, [r13+0]
.text:000000000000BAFD                 mov     r8, rax
.text:000000000000BB00                 cmp     rcx, r8
.text:000000000000BB03                 jz      loc_C471
.text:000000000000BB09
.text:000000000000BB09 loc_BB09:                               ; CODE XREF: vasnprintf+AAB↓j
.text:000000000000BB09                 sub     rcx, r8
.text:000000000000BB0C                 mov     rax, rbx
.text:000000000000BB0F                 add     rax, rcx
.text:000000000000BB12                 mov     r14, rax
.text:000000000000BB15                 jnb     loc_BBF8
.text:000000000000BB1B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000BB1F                 jz      loc_C5F0
.text:000000000000BB25
.text:000000000000BB25 loc_BB25:                               ; CODE XREF: vasnprintf+4E2↓j
.text:000000000000BB25                                         ; vasnprintf+A86↓j ...
.text:000000000000BB25                 call    ___errno_location
.text:000000000000BB2A                 mov     [rbp+n], rax
.text:000000000000BB31
.text:000000000000BB31 loc_BB31:                               ; CODE XREF: vasnprintf+640↓j
.text:000000000000BB31                                         ; vasnprintf+652↓j ...
.text:000000000000BB31                 cmp     r15, [rbp+src]
.text:000000000000BB38                 jz      short loc_BB43
.text:000000000000BB3A                 test    r15, r15
.text:000000000000BB3D                 jnz     loc_C620
.text:000000000000BB43
.text:000000000000BB43 loc_BB43:                               ; CODE XREF: vasnprintf+178↑j
.text:000000000000BB43                                         ; vasnprintf+C68↓j
.text:000000000000BB43                 mov     rax, [rbp+ptr]
.text:000000000000BB4A                 test    rax, rax
.text:000000000000BB4D                 jz      short loc_BB57
.text:000000000000BB4F                 mov     rdi, rax        ; ptr
.text:000000000000BB52                 call    _free
.text:000000000000BB57
.text:000000000000BB57 loc_BB57:                               ; CODE XREF: vasnprintf+18D↑j
.text:000000000000BB57                                         ; vasnprintf+AD4↓j
.text:000000000000BB57                 mov     rax, [rbp+var_408]
.text:000000000000BB5E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000BB65                 add     rax, 20h ; ' '
.text:000000000000BB69                 cmp     rdi, rax
.text:000000000000BB6C                 jz      short loc_BB73
.text:000000000000BB6E                 call    _free
.text:000000000000BB73
.text:000000000000BB73 loc_BB73:                               ; CODE XREF: vasnprintf+1AC↑j
.text:000000000000BB73                 mov     rax, [rbp+var_410]
.text:000000000000BB7A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000BB81                 add     rax, 10h
.text:000000000000BB85                 cmp     rdi, rax
.text:000000000000BB88                 jz      short loc_BB8F
.text:000000000000BB8A                 call    _free
.text:000000000000BB8F
.text:000000000000BB8F loc_BB8F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000BB8F                 mov     rax, [rbp+n]
.text:000000000000BB96                 xor     r15d, r15d
.text:000000000000BB99                 mov     dword ptr [rax], 0Ch
.text:000000000000BB9F
.text:000000000000BB9F loc_BB9F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000BB9F                                         ; vasnprintf+EBE↓j ...
.text:000000000000BB9F                 mov     rdi, [rbp+var_38]
.text:000000000000BBA3                 xor     rdi, fs:28h
.text:000000000000BBAC                 mov     rax, r15
.text:000000000000BBAF                 jnz     loc_CAB7
.text:000000000000BBB5                 lea     rsp, [rbp-28h]
.text:000000000000BBB9                 pop     rbx
.text:000000000000BBBA                 pop     r12
.text:000000000000BBBC                 pop     r13
.text:000000000000BBBE                 pop     r14
.text:000000000000BBC0                 pop     r15
.text:000000000000BBC2                 pop     rbp
.text:000000000000BBC3                 retn
.text:000000000000BBC3 ; ---------------------------------------------------------------------------
.text:000000000000BBC4                 align 8
.text:000000000000BBC8
.text:000000000000BBC8 loc_BBC8:                               ; CODE XREF: vasnprintf+BB↑j
.text:000000000000BBC8                 add     rax, 24h ; '$'
.text:000000000000BBCC                 mov     [rbp+ptr], 0
.text:000000000000BBD7                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000BBDB                 sub     rsp, rax
.text:000000000000BBDE                 lea     rax, [rsp+430h+var_421]
.text:000000000000BBE3                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000BBE7                 mov     [rbp+var_3D8], rax
.text:000000000000BBEE                 jmp     loc_BAB5
.text:000000000000BBEE ; ---------------------------------------------------------------------------
.text:000000000000BBF3                 align 8
.text:000000000000BBF8
.text:000000000000BBF8 loc_BBF8:                               ; CODE XREF: vasnprintf+155↑j
.text:000000000000BBF8                 cmp     r12, rax
.text:000000000000BBFB                 jnb     short loc_BC64
.text:000000000000BBFD                 test    r12, r12
.text:000000000000BC00                 jnz     loc_C530
.text:000000000000BC06                 cmp     rax, 0Ch
.text:000000000000BC0A                 ja      loc_C542
.text:000000000000BC10                 mov     r12d, 0Ch
.text:000000000000BC16
.text:000000000000BC16 loc_BC16:                               ; CODE XREF: vasnprintf+B7C↓j
.text:000000000000BC16                 cmp     r15, [rbp+src]
.text:000000000000BC1D                 setz    dl
.text:000000000000BC20                 test    r15, r15
.text:000000000000BC23                 jz      loc_C568
.text:000000000000BC29
.text:000000000000BC29 loc_BC29:                               ; CODE XREF: vasnprintf+B9C↓j
.text:000000000000BC29                 test    dl, dl
.text:000000000000BC2B                 jnz     loc_C568
.text:000000000000BC31                 mov     rsi, r12        ; size
.text:000000000000BC34                 mov     rdi, r15        ; ptr
.text:000000000000BC37                 mov     [rbp+var_3D0], r8
.text:000000000000BC3E                 mov     [rbp+n], rcx
.text:000000000000BC45                 call    _realloc
.text:000000000000BC4A                 test    rax, rax
.text:000000000000BC4D                 mov     rcx, [rbp+n]
.text:000000000000BC54                 mov     r8, [rbp+var_3D0]
.text:000000000000BC5B                 jz      loc_C60B
.text:000000000000BC61                 mov     r15, rax
.text:000000000000BC64
.text:000000000000BC64 loc_BC64:                               ; CODE XREF: vasnprintf+23B↑j
.text:000000000000BC64                                         ; vasnprintf+C23↓j ...
.text:000000000000BC64                 lea     rdi, [r15+rbx]  ; dest
.text:000000000000BC68                 mov     rdx, rcx        ; n
.text:000000000000BC6B                 mov     rsi, r8         ; src
.text:000000000000BC6E                 call    _memcpy
.text:000000000000BC73
.text:000000000000BC73 loc_BC73:                               ; CODE XREF: vasnprintf+AB4↓j
.text:000000000000BC73                 mov     rax, [rbp+var_400]
.text:000000000000BC7A                 cmp     [rbp+var_2C0], rax
.text:000000000000BC81                 jz      loc_C93B
.text:000000000000BC87                 movzx   edx, byte ptr [r13+48h]
.text:000000000000BC8C                 mov     rax, [r13+50h]
.text:000000000000BC90                 cmp     dl, 25h ; '%'
.text:000000000000BC93                 jz      loc_C428
.text:000000000000BC99                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BC9D                 jz      def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000BC9D                                         ; jumptable 000000000000C4C0 default case
.text:000000000000BCA3                 mov     r8, [rbp+var_3A8]
.text:000000000000BCAA                 shl     rax, 5
.text:000000000000BCAE                 add     rax, r8
.text:000000000000BCB1                 cmp     dl, 6Eh ; 'n'
.text:000000000000BCB4                 mov     edi, [rax]
.text:000000000000BCB6                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000BCBC                 jz      loc_C4A0
.text:000000000000BCC2                 mov     eax, [r13+10h]
.text:000000000000BCC6                 mov     rdi, [rbp+var_3D8]
.text:000000000000BCCD                 test    al, 1
.text:000000000000BCCF                 mov     byte ptr [rdi], 25h ; '%'
.text:000000000000BCD2                 lea     rbx, [rdi+1]
.text:000000000000BCD6                 jz      short loc_BCE7
.text:000000000000BCD8                 mov     rdi, [rbp+var_3D8]
.text:000000000000BCDF                 lea     rbx, [rdi+2]
.text:000000000000BCE3                 mov     byte ptr [rdi+1], 27h ; '''
.text:000000000000BCE7
.text:000000000000BCE7 loc_BCE7:                               ; CODE XREF: vasnprintf+316↑j
.text:000000000000BCE7                 test    al, 2
.text:000000000000BCE9                 jz      short loc_BCF2
.text:000000000000BCEB                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000BCEE                 add     rbx, 1
.text:000000000000BCF2
.text:000000000000BCF2 loc_BCF2:                               ; CODE XREF: vasnprintf+329↑j
.text:000000000000BCF2                 test    al, 4
.text:000000000000BCF4                 jz      short loc_BCFD
.text:000000000000BCF6                 mov     byte ptr [rbx], 2Bh ; '+'
.text:000000000000BCF9                 add     rbx, 1
.text:000000000000BCFD
.text:000000000000BCFD loc_BCFD:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000BCFD                 test    al, 8
.text:000000000000BCFF                 jz      short loc_BD08
.text:000000000000BD01                 mov     byte ptr [rbx], 20h ; ' '
.text:000000000000BD04                 add     rbx, 1
.text:000000000000BD08
.text:000000000000BD08 loc_BD08:                               ; CODE XREF: vasnprintf+33F↑j
.text:000000000000BD08                 test    al, 10h
.text:000000000000BD0A                 jz      short loc_BD13
.text:000000000000BD0C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000BD0F                 add     rbx, 1
.text:000000000000BD13
.text:000000000000BD13 loc_BD13:                               ; CODE XREF: vasnprintf+34A↑j
.text:000000000000BD13                 test    al, 40h
.text:000000000000BD15                 jz      short loc_BD1E
.text:000000000000BD17                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000BD1A                 add     rbx, 1
.text:000000000000BD1E
.text:000000000000BD1E loc_BD1E:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000BD1E                 test    al, 20h
.text:000000000000BD20                 jz      short loc_BD29
.text:000000000000BD22                 mov     byte ptr [rbx], 30h ; '0'
.text:000000000000BD25                 add     rbx, 1
.text:000000000000BD29
.text:000000000000BD29 loc_BD29:                               ; CODE XREF: vasnprintf+360↑j
.text:000000000000BD29                 mov     rsi, [r13+18h]  ; src
.text:000000000000BD2D                 mov     rdx, [r13+20h]
.text:000000000000BD31                 cmp     rsi, rdx
.text:000000000000BD34                 jz      short loc_BD66
.text:000000000000BD36                 mov     rcx, rdx
.text:000000000000BD39                 mov     rdi, rbx        ; dest
.text:000000000000BD3C                 mov     [rbp+var_3E0], r8
.text:000000000000BD43                 sub     rcx, rsi
.text:000000000000BD46                 mov     rdx, rcx        ; n
.text:000000000000BD49                 mov     [rbp+n], rcx
.text:000000000000BD50                 call    _memcpy
.text:000000000000BD55                 mov     rcx, [rbp+n]
.text:000000000000BD5C                 mov     r8, [rbp+var_3E0]
.text:000000000000BD63                 add     rbx, rcx
.text:000000000000BD66
.text:000000000000BD66 loc_BD66:                               ; CODE XREF: vasnprintf+374↑j
.text:000000000000BD66                 mov     rsi, [r13+30h]  ; src
.text:000000000000BD6A                 mov     rdx, [r13+38h]
.text:000000000000BD6E                 cmp     rsi, rdx
.text:000000000000BD71                 jz      short loc_BDA3
.text:000000000000BD73                 mov     rcx, rdx
.text:000000000000BD76                 mov     rdi, rbx        ; dest
.text:000000000000BD79                 mov     [rbp+var_3E0], r8
.text:000000000000BD80                 sub     rcx, rsi
.text:000000000000BD83                 mov     rdx, rcx        ; n
.text:000000000000BD86                 mov     [rbp+n], rcx
.text:000000000000BD8D                 call    _memcpy
.text:000000000000BD92                 mov     rcx, [rbp+n]
.text:000000000000BD99                 mov     r8, [rbp+var_3E0]
.text:000000000000BDA0                 add     rbx, rcx
.text:000000000000BDA3
.text:000000000000BDA3 loc_BDA3:                               ; CODE XREF: vasnprintf+3B1↑j
.text:000000000000BDA3                 mov     edi, dword ptr [rbp+var_3D0]
.text:000000000000BDA9                 cmp     edi, 10h
.text:000000000000BDAC                 ja      short loc_BDDB
.text:000000000000BDAE                 mov     eax, 1
.text:000000000000BDB3                 mov     ecx, edi
.text:000000000000BDB5                 shl     rax, cl
.text:000000000000BDB8                 test    eax, 14180h
.text:000000000000BDBD                 jnz     short loc_BDD4
.text:000000000000BDBF                 test    ah, 10h
.text:000000000000BDC2                 jnz     loc_C720
.text:000000000000BDC8                 test    ah, 6
.text:000000000000BDCB                 jz      short loc_BDDB
.text:000000000000BDCD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000BDD0                 add     rbx, 1
.text:000000000000BDD4
.text:000000000000BDD4 loc_BDD4:                               ; CODE XREF: vasnprintf+3FD↑j
.text:000000000000BDD4                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000BDD7                 add     rbx, 1
.text:000000000000BDDB
.text:000000000000BDDB loc_BDDB:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000BDDB                                         ; vasnprintf+40B↑j ...
.text:000000000000BDDB                 movzx   eax, byte ptr [r13+48h]
.text:000000000000BDE0                 mov     byte ptr [rbx+1], 0
.text:000000000000BDE4                 mov     [rbx], al
.text:000000000000BDE6                 mov     rax, [r13+28h]
.text:000000000000BDEA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BDEE                 jz      loc_C520
.text:000000000000BDF4                 shl     rax, 5
.text:000000000000BDF8                 add     rax, r8
.text:000000000000BDFB                 cmp     dword ptr [rax], 5
.text:000000000000BDFE                 jnz     def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000BDFE                                         ; jumptable 000000000000C4C0 default case
.text:000000000000BE04                 mov     eax, [rax+10h]
.text:000000000000BE07                 mov     dword ptr [rbp+var_3E0], 1
.text:000000000000BE11                 mov     [rbp+var_3B8], eax
.text:000000000000BE17
.text:000000000000BE17 loc_BE17:                               ; CODE XREF: vasnprintf+B6A↓j
.text:000000000000BE17                 mov     rax, [r13+40h]
.text:000000000000BE1B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BE1F                 jz      short loc_BE4C
.text:000000000000BE21                 shl     rax, 5
.text:000000000000BE25                 add     r8, rax
.text:000000000000BE28                 cmp     dword ptr [r8], 5
.text:000000000000BE2C                 jnz     def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000BE2C                                         ; jumptable 000000000000C4C0 default case
.text:000000000000BE32                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000BE38                 mov     edx, [r8+10h]
.text:000000000000BE3C                 mov     [rbp+rax*4+var_3B8], edx
.text:000000000000BE43                 lea     eax, [rax+1]
.text:000000000000BE46                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000BE4C
.text:000000000000BE4C loc_BE4C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000BE4C                 mov     rax, r14
.text:000000000000BE4F                 xor     edx, edx
.text:000000000000BE51                 add     rax, 2
.text:000000000000BE55                 jb      loc_CABC
.text:000000000000BE5B                 cmp     r12, rax
.text:000000000000BE5E                 jnb     short loc_BEAB
.text:000000000000BE60                 test    r12, r12
.text:000000000000BE63                 jnz     loc_C688
.text:000000000000BE69                 cmp     rax, 0Ch
.text:000000000000BE6D                 ja      loc_C6A0
.text:000000000000BE73                 mov     r12d, 0Ch
.text:000000000000BE79
.text:000000000000BE79 loc_BE79:                               ; CODE XREF: vasnprintf+CD4↓j
.text:000000000000BE79                 cmp     r15, [rbp+src]
.text:000000000000BE80                 setz    dl
.text:000000000000BE83                 test    r15, r15
.text:000000000000BE86                 jz      loc_C6D0
.text:000000000000BE8C
.text:000000000000BE8C loc_BE8C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000BE8C                 test    dl, dl
.text:000000000000BE8E                 jnz     loc_C6D0
.text:000000000000BE94                 mov     rsi, r12        ; size
.text:000000000000BE97                 mov     rdi, r15        ; ptr
.text:000000000000BE9A                 call    _realloc
.text:000000000000BE9F                 test    rax, rax
.text:000000000000BEA2                 jz      loc_BB25
.text:000000000000BEA8                 mov     r15, rax
.text:000000000000BEAB
.text:000000000000BEAB loc_BEAB:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000BEAB                                         ; vasnprintf+D53↓j ...
.text:000000000000BEAB                 mov     byte ptr [r15+r14], 0
.text:000000000000BEB0                 call    ___errno_location
.text:000000000000BEB5                 mov     [rbp+n], rax
.text:000000000000BEBC                 mov     eax, [rax]
.text:000000000000BEBE                 mov     [rbp+var_3F8], rbx
.text:000000000000BEC5                 mov     [rbp-424h], eax
.text:000000000000BECB                 nop     dword ptr [rax+rax+00h]
.text:000000000000BED0
.text:000000000000BED0 loc_BED0:                               ; CODE XREF: vasnprintf+637↓j
.text:000000000000BED0                                         ; vasnprintf+68D↓j ...
.text:000000000000BED0                 mov     rax, [rbp+n]
.text:000000000000BED7                 mov     rbx, r12
.text:000000000000BEDA                 mov     r10d, 7FFFFFFFh
.text:000000000000BEE0                 sub     rbx, r14
.text:000000000000BEE3                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000BEED                 cmp     rbx, 7FFFFFFFh
.text:000000000000BEF4                 mov     dword ptr [rax], 0
.text:000000000000BEFA                 mov     eax, dword ptr [rbp+var_3D0]
.text:000000000000BF00                 cmovbe  r10, rbx
.text:000000000000BF04                 cmp     eax, 11h        ; switch 18 cases
.text:000000000000BF07                 ja      def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000BF07                                         ; jumptable 000000000000C4C0 default case
.text:000000000000BF0D                 lea     rsi, jpt_BF1B
.text:000000000000BF14                 movsxd  rax, ds:(jpt_BF1B - 0FFC8h)[rsi+rax*4]
.text:000000000000BF18                 add     rax, rsi
.text:000000000000BF1B                 jmp     rax             ; switch jump
.text:000000000000BF1B ; ---------------------------------------------------------------------------
.text:000000000000BF1D                 align 20h
.text:000000000000BF20
.text:000000000000BF20 loc_BF20:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000BF20                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000BF20                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B cases 7-10,15-17
.text:000000000000BF24                 lea     rdi, [r15+r14]
.text:000000000000BF28                 shl     rax, 5
.text:000000000000BF2C                 add     rax, [rbp+var_3A8]
.text:000000000000BF33                 mov     r9, [rax+10h]
.text:000000000000BF37                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000BF3D                 cmp     eax, 1
.text:000000000000BF40                 jz      loc_C408
.text:000000000000BF46                 cmp     eax, 2
.text:000000000000BF49                 jz      loc_C3F0
.text:000000000000BF4F                 sub     rsp, 8
.text:000000000000BF53                 push    [rbp+var_3F0]
.text:000000000000BF59
.text:000000000000BF59 loc_BF59:                               ; CODE XREF: vasnprintf+CBE↓j
.text:000000000000BF59                 mov     r8, [rbp+var_3D8]
.text:000000000000BF60                 mov     rsi, r10
.text:000000000000BF63                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BF6A                 mov     edx, 1
.text:000000000000BF6F                 xor     eax, eax
.text:000000000000BF71                 mov     [rbp+var_430], r10
.text:000000000000BF78                 call    ___snprintf_chk
.text:000000000000BF7D                 pop     rsi
.text:000000000000BF7E                 pop     rdi
.text:000000000000BF7F                 mov     r10, [rbp+var_430]
.text:000000000000BF86
.text:000000000000BF86 loc_BF86:                               ; CODE XREF: vasnprintf+83D↓j
.text:000000000000BF86                                         ; vasnprintf+8BE↓j ...
.text:000000000000BF86                 mov     ecx, [rbp+var_3BC]
.text:000000000000BF8C                 test    ecx, ecx
.text:000000000000BF8E                 js      loc_C0CC
.text:000000000000BF94
.text:000000000000BF94 loc_BF94:                               ; CODE XREF: vasnprintf+706↓j
.text:000000000000BF94                 movsxd  rdx, ecx
.text:000000000000BF97                 cmp     rdx, r10
.text:000000000000BF9A                 jnb     short loc_BFAA
.text:000000000000BF9C                 add     rdx, r15
.text:000000000000BF9F                 cmp     byte ptr [rdx+r14], 0
.text:000000000000BFA4                 jnz     def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000BFA4                                         ; jumptable 000000000000C4C0 default case
.text:000000000000BFAA
.text:000000000000BFAA loc_BFAA:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000BFAA                 cmp     ecx, eax
.text:000000000000BFAC                 jge     short loc_BFB6
.text:000000000000BFAE
.text:000000000000BFAE loc_BFAE:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000BFAE                 mov     [rbp+var_3BC], eax
.text:000000000000BFB4                 mov     ecx, eax
.text:000000000000BFB6
.text:000000000000BFB6 loc_BFB6:                               ; CODE XREF: vasnprintf+5EC↑j
.text:000000000000BFB6                 lea     eax, [rcx+1]
.text:000000000000BFB9                 cmp     rax, r10
.text:000000000000BFBC                 jb      loc_C7F0
.text:000000000000BFC2                 cmp     rbx, 7FFFFFFEh
.text:000000000000BFC9                 ja      loc_C810
.text:000000000000BFCF                 lea     rsi, [r12+r12]
.text:000000000000BFD3                 lea     edx, [rcx+2]
.text:000000000000BFD6                 test    r12, r12
.text:000000000000BFD9                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BFE0                 cmovns  rax, rsi
.text:000000000000BFE4                 add     rdx, r14
.text:000000000000BFE7                 jb      loc_CAA8
.text:000000000000BFED                 cmp     rax, rdx
.text:000000000000BFF0                 cmovb   rax, rdx
.text:000000000000BFF4                 cmp     r12, rax
.text:000000000000BFF7                 jnb     loc_BED0
.text:000000000000BFFD                 test    r12, r12
.text:000000000000C000                 js      loc_BB31
.text:000000000000C006                 cmp     rsi, rax
.text:000000000000C009                 mov     r12, rsi
.text:000000000000C00C                 jnb     short loc_C01B
.text:000000000000C00E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C012                 jz      loc_BB31
.text:000000000000C018                 mov     r12, rax
.text:000000000000C01B
.text:000000000000C01B loc_C01B:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000C01B                 cmp     r15, [rbp+src]
.text:000000000000C022                 setz    bl
.text:000000000000C025                 test    r15, r15
.text:000000000000C028                 jz      loc_C3B0
.text:000000000000C02E                 test    bl, bl
.text:000000000000C030                 jnz     loc_C3B0
.text:000000000000C036                 mov     rsi, r12        ; size
.text:000000000000C039                 mov     rdi, r15        ; ptr
.text:000000000000C03C                 call    _realloc
.text:000000000000C041                 test    rax, rax
.text:000000000000C044                 jz      loc_BB31
.text:000000000000C04A                 mov     r15, rax
.text:000000000000C04D                 jmp     loc_BED0
.text:000000000000C04D ; ---------------------------------------------------------------------------
.text:000000000000C052                 align 8
.text:000000000000C058
.text:000000000000C058 loc_C058:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C058                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C058                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B cases 5,6,13,14
.text:000000000000C05C                 lea     rdi, [r15+r14]
.text:000000000000C060                 shl     rax, 5
.text:000000000000C064                 add     rax, [rbp+var_3A8]
.text:000000000000C06B                 mov     r9d, [rax+10h]
.text:000000000000C06F                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C075                 cmp     eax, 1
.text:000000000000C078                 jz      loc_C2B0
.text:000000000000C07E
.text:000000000000C07E loc_C07E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000C07E                                         ; vasnprintf+9B1↓j ...
.text:000000000000C07E                 cmp     eax, 2
.text:000000000000C081                 jz      loc_C2F8
.text:000000000000C087
.text:000000000000C087 loc_C087:                               ; CODE XREF: vasnprintf+92E↓j
.text:000000000000C087                 sub     rsp, 8
.text:000000000000C08B                 push    [rbp+var_3F0]
.text:000000000000C091
.text:000000000000C091 loc_C091:                               ; CODE XREF: vasnprintf+8FF↓j
.text:000000000000C091                 mov     r8, [rbp+var_3D8]
.text:000000000000C098                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C09F                 mov     edx, 1
.text:000000000000C0A4                 mov     rsi, r10
.text:000000000000C0A7                 xor     eax, eax
.text:000000000000C0A9                 mov     [rbp+var_430], r10
.text:000000000000C0B0                 call    ___snprintf_chk
.text:000000000000C0B5                 pop     rdx
.text:000000000000C0B6                 pop     rcx
.text:000000000000C0B7                 mov     ecx, [rbp+var_3BC]
.text:000000000000C0BD                 mov     r10, [rbp+var_430]
.text:000000000000C0C4                 test    ecx, ecx
.text:000000000000C0C6                 jns     loc_BF94
.text:000000000000C0CC
.text:000000000000C0CC loc_C0CC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000C0CC                 mov     rdi, [rbp+var_3F8]
.text:000000000000C0D3                 cmp     byte ptr [rdi+1], 0
.text:000000000000C0D7                 jnz     loc_C418
.text:000000000000C0DD                 test    eax, eax
.text:000000000000C0DF                 jns     loc_BFAE
.text:000000000000C0E5                 mov     rax, [rbp+n]
.text:000000000000C0EC                 mov     ebx, [rax]
.text:000000000000C0EE                 test    ebx, ebx
.text:000000000000C0F0                 jnz     short loc_C110
.text:000000000000C0F2                 movzx   eax, byte ptr [r13+48h]
.text:000000000000C0F7                 mov     ebx, 16h
.text:000000000000C0FC                 and     eax, 0FFFFFFEFh
.text:000000000000C0FF                 cmp     al, 63h ; 'c'
.text:000000000000C101                 mov     eax, 54h ; 'T'
.text:000000000000C106                 cmovz   ebx, eax
.text:000000000000C109                 nop     dword ptr [rax+00000000h]
.text:000000000000C110
.text:000000000000C110 loc_C110:                               ; CODE XREF: vasnprintf+730↑j
.text:000000000000C110                 cmp     r15, [rbp+src]
.text:000000000000C117                 jz      short loc_C122
.text:000000000000C119                 test    r15, r15
.text:000000000000C11C                 jnz     loc_C8CC
.text:000000000000C122
.text:000000000000C122 loc_C122:                               ; CODE XREF: vasnprintf+757↑j
.text:000000000000C122                                         ; vasnprintf+F14↓j
.text:000000000000C122                 mov     rax, [rbp+ptr]
.text:000000000000C129                 test    rax, rax
.text:000000000000C12C                 jz      short loc_C136
.text:000000000000C12E                 mov     rdi, rax        ; ptr
.text:000000000000C131                 call    _free
.text:000000000000C136
.text:000000000000C136 loc_C136:                               ; CODE XREF: vasnprintf+76C↑j
.text:000000000000C136                 mov     rax, [rbp+var_408]
.text:000000000000C13D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000C144                 add     rax, 20h ; ' '
.text:000000000000C148                 cmp     rdi, rax
.text:000000000000C14B                 jz      short loc_C152
.text:000000000000C14D                 call    _free
.text:000000000000C152
.text:000000000000C152 loc_C152:                               ; CODE XREF: vasnprintf+78B↑j
.text:000000000000C152                 mov     rax, [rbp+var_410]
.text:000000000000C159                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000C160                 add     rax, 10h
.text:000000000000C164                 cmp     rdi, rax
.text:000000000000C167                 jz      short loc_C16E
.text:000000000000C169                 call    _free
.text:000000000000C16E
.text:000000000000C16E loc_C16E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000C16E                 mov     rax, [rbp+n]
.text:000000000000C175                 xor     r15d, r15d
.text:000000000000C178                 mov     [rax], ebx
.text:000000000000C17A                 jmp     loc_BB9F
.text:000000000000C17A ; ---------------------------------------------------------------------------
.text:000000000000C17F                 align 20h
.text:000000000000C180
.text:000000000000C180 loc_C180:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C180                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C180                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B case 12
.text:000000000000C184                 lea     rdi, [r15+r14]
.text:000000000000C188                 shl     rax, 5
.text:000000000000C18C                 add     rax, [rbp+var_3A8]
.text:000000000000C193                 fld     tbyte ptr [rax+10h]
.text:000000000000C196                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C19C                 cmp     eax, 1
.text:000000000000C19F                 jz      loc_C7D0
.text:000000000000C1A5                 cmp     eax, 2
.text:000000000000C1A8                 jnz     loc_C670
.text:000000000000C1AE                 mov     eax, [rbp+var_3B4]
.text:000000000000C1B4                 sub     rsp, 8
.text:000000000000C1B8                 push    [rbp+var_3F0]
.text:000000000000C1BE                 mov     r9d, [rbp+var_3B8]
.text:000000000000C1C5                 mov     r8, [rbp+var_3D8]
.text:000000000000C1CC                 mov     rsi, r10
.text:000000000000C1CF                 sub     rsp, 18h
.text:000000000000C1D3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C1DA                 mov     edx, 1
.text:000000000000C1DF                 fstp    [rsp+458h+var_450]
.text:000000000000C1E3                 push    rax
.text:000000000000C1E4                 xor     eax, eax
.text:000000000000C1E6                 mov     [rbp+var_430], r10
.text:000000000000C1ED                 call    ___snprintf_chk
.text:000000000000C1F2                 add     rsp, 30h
.text:000000000000C1F6                 mov     r10, [rbp+var_430]
.text:000000000000C1FD                 jmp     loc_BF86
.text:000000000000C1FD ; ---------------------------------------------------------------------------
.text:000000000000C202                 align 8
.text:000000000000C208
.text:000000000000C208 loc_C208:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C208                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C208                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B case 11
.text:000000000000C20C                 lea     rdi, [r15+r14]
.text:000000000000C210                 shl     rax, 5
.text:000000000000C214                 add     rax, [rbp+var_3A8]
.text:000000000000C21B                 movsd   xmm0, qword ptr [rax+10h]
.text:000000000000C220                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C226                 cmp     eax, 1
.text:000000000000C229                 jz      loc_C7C0
.text:000000000000C22F                 cmp     eax, 2
.text:000000000000C232                 jnz     loc_C630
.text:000000000000C238                 mov     eax, [rbp+var_3B4]
.text:000000000000C23E                 push    [rbp+var_3F0]
.text:000000000000C244                 push    rax
.text:000000000000C245
.text:000000000000C245 loc_C245:                               ; CODE XREF: vasnprintf+E0A↓j
.text:000000000000C245                 mov     r9d, [rbp+var_3B8]
.text:000000000000C24C                 mov     r8, [rbp+var_3D8]
.text:000000000000C253                 mov     rsi, r10
.text:000000000000C256                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C25D                 mov     edx, 1
.text:000000000000C262                 mov     eax, 1
.text:000000000000C267                 mov     [rbp+var_430], r10
.text:000000000000C26E                 call    ___snprintf_chk
.text:000000000000C273                 pop     r8
.text:000000000000C275                 mov     r10, [rbp+var_430]
.text:000000000000C27C                 pop     r9
.text:000000000000C27E                 jmp     loc_BF86
.text:000000000000C27E ; ---------------------------------------------------------------------------
.text:000000000000C283                 align 8
.text:000000000000C288
.text:000000000000C288 loc_C288:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C288                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C288                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B case 4
.text:000000000000C28C                 lea     rdi, [r15+r14]
.text:000000000000C290                 shl     rax, 5
.text:000000000000C294                 add     rax, [rbp+var_3A8]
.text:000000000000C29B                 movzx   r9d, word ptr [rax+10h]
.text:000000000000C2A0                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C2A6                 cmp     eax, 1
.text:000000000000C2A9                 jnz     loc_C07E
.text:000000000000C2AF                 nop
.text:000000000000C2B0
.text:000000000000C2B0 loc_C2B0:                               ; CODE XREF: vasnprintf+6B8↑j
.text:000000000000C2B0                                         ; vasnprintf+929↓j ...
.text:000000000000C2B0                 push    [rbp+var_3F0]
.text:000000000000C2B6                 push    r9
.text:000000000000C2B8
.text:000000000000C2B8 loc_C2B8:                               ; CODE XREF: vasnprintf+A50↓j
.text:000000000000C2B8                 mov     r9d, [rbp+var_3B8]
.text:000000000000C2BF                 jmp     loc_C091
.text:000000000000C2BF ; ---------------------------------------------------------------------------
.text:000000000000C2C4                 align 8
.text:000000000000C2C8
.text:000000000000C2C8 loc_C2C8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C2C8                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C2C8                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B case 3
.text:000000000000C2CC                 lea     rdi, [r15+r14]
.text:000000000000C2D0                 shl     rax, 5
.text:000000000000C2D4                 add     rax, [rbp+var_3A8]
.text:000000000000C2DB                 movsx   r9d, word ptr [rax+10h]
.text:000000000000C2E0                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C2E6                 cmp     eax, 1
.text:000000000000C2E9                 jz      short loc_C2B0
.text:000000000000C2EB                 cmp     eax, 2
.text:000000000000C2EE                 jnz     loc_C087
.text:000000000000C2F4                 nop     dword ptr [rax+00h]
.text:000000000000C2F8
.text:000000000000C2F8 loc_C2F8:                               ; CODE XREF: vasnprintf+6C1↑j
.text:000000000000C2F8                 sub     rsp, 8
.text:000000000000C2FC                 push    [rbp+var_3F0]
.text:000000000000C302                 push    r9
.text:000000000000C304
.text:000000000000C304 loc_C304:                               ; CODE XREF: vasnprintf+A3C↓j
.text:000000000000C304                 mov     eax, [rbp+var_3B4]
.text:000000000000C30A                 push    rax
.text:000000000000C30B
.text:000000000000C30B loc_C30B:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000C30B                 mov     r9d, [rbp+var_3B8]
.text:000000000000C312                 mov     r8, [rbp+var_3D8]
.text:000000000000C319                 mov     rsi, r10
.text:000000000000C31C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C323                 mov     edx, 1
.text:000000000000C328                 xor     eax, eax
.text:000000000000C32A                 mov     [rbp+var_430], r10
.text:000000000000C331                 call    ___snprintf_chk
.text:000000000000C336                 add     rsp, 20h
.text:000000000000C33A                 mov     r10, [rbp+var_430]
.text:000000000000C341                 jmp     loc_BF86
.text:000000000000C341 ; ---------------------------------------------------------------------------
.text:000000000000C346                 align 10h
.text:000000000000C350
.text:000000000000C350 loc_C350:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C350                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C350                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B case 2
.text:000000000000C354                 lea     rdi, [r15+r14]
.text:000000000000C358                 shl     rax, 5
.text:000000000000C35C                 add     rax, [rbp+var_3A8]
.text:000000000000C363                 movzx   r9d, byte ptr [rax+10h]
.text:000000000000C368                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C36E                 cmp     eax, 1
.text:000000000000C371                 jnz     loc_C07E
.text:000000000000C377                 jmp     loc_C2B0
.text:000000000000C377 ; ---------------------------------------------------------------------------
.text:000000000000C37C                 align 20h
.text:000000000000C380
.text:000000000000C380 loc_C380:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000C380                                         ; DATA XREF: .rodata:jpt_BF1B↓o
.text:000000000000C380                 mov     rax, [r13+50h]  ; jumptable 000000000000BF1B case 1
.text:000000000000C384                 lea     rdi, [r15+r14]
.text:000000000000C388                 shl     rax, 5
.text:000000000000C38C                 add     rax, [rbp+var_3A8]
.text:000000000000C393                 movsx   r9d, byte ptr [rax+10h]
.text:000000000000C398                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000C39E                 cmp     eax, 1
.text:000000000000C3A1                 jnz     loc_C07E
.text:000000000000C3A7                 jmp     loc_C2B0
.text:000000000000C3A7 ; ---------------------------------------------------------------------------
.text:000000000000C3AC                 align 10h
.text:000000000000C3B0
.text:000000000000C3B0 loc_C3B0:                               ; CODE XREF: vasnprintf+668↑j
.text:000000000000C3B0                                         ; vasnprintf+670↑j
.text:000000000000C3B0                 mov     rdi, r12        ; size
.text:000000000000C3B3                 call    _malloc
.text:000000000000C3B8                 test    rax, rax
.text:000000000000C3BB                 mov     rcx, rax
.text:000000000000C3BE                 jz      loc_BB31
.text:000000000000C3C4                 test    r14, r14
.text:000000000000C3C7                 jz      loc_C480
.text:000000000000C3CD                 test    bl, bl
.text:000000000000C3CF                 jz      loc_C480
.text:000000000000C3D5                 mov     rsi, r15        ; src
.text:000000000000C3D8                 mov     rdx, r14        ; n
.text:000000000000C3DB                 mov     rdi, rax        ; dest
.text:000000000000C3DE                 call    _memcpy
.text:000000000000C3E3                 mov     r15, rax
.text:000000000000C3E6                 jmp     loc_BED0
.text:000000000000C3E6 ; ---------------------------------------------------------------------------
.text:000000000000C3EB                 align 10h
.text:000000000000C3F0
.text:000000000000C3F0 loc_C3F0:                               ; CODE XREF: vasnprintf+589↑j
.text:000000000000C3F0                 sub     rsp, 8
.text:000000000000C3F4                 push    [rbp+var_3F0]
.text:000000000000C3FA                 push    r9
.text:000000000000C3FC                 jmp     loc_C304
.text:000000000000C3FC ; ---------------------------------------------------------------------------
.text:000000000000C401                 align 8
.text:000000000000C408
.text:000000000000C408 loc_C408:                               ; CODE XREF: vasnprintf+580↑j
.text:000000000000C408                 push    [rbp+var_3F0]
.text:000000000000C40E                 push    r9
.text:000000000000C410                 jmp     loc_C2B8
.text:000000000000C410 ; ---------------------------------------------------------------------------
.text:000000000000C415                 align 8
.text:000000000000C418
.text:000000000000C418 loc_C418:                               ; CODE XREF: vasnprintf+717↑j
.text:000000000000C418                 mov     byte ptr [rdi+1], 0
.text:000000000000C41C                 jmp     loc_BED0
.text:000000000000C41C ; ---------------------------------------------------------------------------
.text:000000000000C421                 align 8
.text:000000000000C428
.text:000000000000C428 loc_C428:                               ; CODE XREF: vasnprintf+2D3↑j
.text:000000000000C428                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C42C                 jnz     def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000C42C                                         ; jumptable 000000000000C4C0 default case
.text:000000000000C432                 mov     rax, r14
.text:000000000000C435                 add     rax, 1
.text:000000000000C439                 mov     rbx, rax
.text:000000000000C43C                 jnb     loc_C4C8
.text:000000000000C442                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000C446                 jnz     loc_BB25
.text:000000000000C44C                 mov     rbx, r12
.text:000000000000C44F
.text:000000000000C44F loc_C44F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000C44F                                         ; vasnprintf+B58↓j ...
.text:000000000000C44F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:000000000000C454
.text:000000000000C454 loc_C454:                               ; CODE XREF: vasnprintf+C46↓j
.text:000000000000C454                                         ; vasnprintf+D76↓j ...
.text:000000000000C454                 mov     r8, [r13+8]
.text:000000000000C458                 add     r13, 58h ; 'X'
.text:000000000000C45C                 mov     rcx, [r13+0]
.text:000000000000C460                 add     [rbp+var_400], 1
.text:000000000000C468                 cmp     rcx, r8
.text:000000000000C46B                 jnz     loc_BB09
.text:000000000000C471
.text:000000000000C471 loc_C471:                               ; CODE XREF: vasnprintf+143↑j
.text:000000000000C471                 mov     r14, rbx
.text:000000000000C474                 jmp     loc_BC73
.text:000000000000C474 ; ---------------------------------------------------------------------------
.text:000000000000C479                 align 20h
.text:000000000000C480
.text:000000000000C480 loc_C480:                               ; CODE XREF: vasnprintf+A07↑j
.text:000000000000C480                                         ; vasnprintf+A0F↑j
.text:000000000000C480                 mov     r15, rcx
.text:000000000000C483                 jmp     loc_BED0
.text:000000000000C488 ; ---------------------------------------------------------------------------
.text:000000000000C488
.text:000000000000C488 loc_C488:                               ; CODE XREF: vasnprintf+9A↑j
.text:000000000000C488                                         ; vasnprintf+AE↑j ...
.text:000000000000C488                 call    ___errno_location
.text:000000000000C48D                 mov     [rbp+n], rax
.text:000000000000C494                 jmp     loc_BB57
.text:000000000000C494 ; ---------------------------------------------------------------------------
.text:000000000000C499                 align 20h
.text:000000000000C4A0
.text:000000000000C4A0 loc_C4A0:                               ; CODE XREF: vasnprintf+2FC↑j
.text:000000000000C4A0                 mov     edx, edi
.text:000000000000C4A2                 sub     edx, 12h        ; switch 5 cases
.text:000000000000C4A5                 cmp     edx, 4
.text:000000000000C4A8                 ja      def_BF1B        ; jumptable 000000000000BF1B default case, case 0
.text:000000000000C4A8                                         ; jumptable 000000000000C4C0 default case
.text:000000000000C4AE                 lea     rdi, jpt_C4C0
.text:000000000000C4B5                 mov     rax, [rax+10h]
.text:000000000000C4B9                 movsxd  rdx, ds:(jpt_C4C0 - 10010h)[rdi+rdx*4]
.text:000000000000C4BD                 add     rdx, rdi
.text:000000000000C4C0                 jmp     rdx             ; switch jump
.text:000000000000C4C0 ; ---------------------------------------------------------------------------
.text:000000000000C4C2                 align 8
.text:000000000000C4C8
.text:000000000000C4C8 loc_C4C8:                               ; CODE XREF: vasnprintf+A7C↑j
.text:000000000000C4C8                 cmp     r12, rax
.text:000000000000C4CB                 jnb     short loc_C44F
.text:000000000000C4CD                 test    r12, r12
.text:000000000000C4D0                 jnz     loc_C8A0
.text:000000000000C4D6                 cmp     rax, 0Ch
.text:000000000000C4DA                 ja      loc_C8B2
.text:000000000000C4E0                 mov     r12d, 0Ch
.text:000000000000C4E6
.text:000000000000C4E6 loc_C4E6:                               ; CODE XREF: vasnprintf+EEC↓j
.text:000000000000C4E6                                         ; vasnprintf+EFF↓j
.text:000000000000C4E6                 cmp     r15, [rbp+src]
.text:000000000000C4ED                 setz    dl
.text:000000000000C4F0                 test    r15, r15
.text:000000000000C4F3                 jz      loc_C760
.text:000000000000C4F9                 test    dl, dl
.text:000000000000C4FB                 jnz     loc_C760
.text:000000000000C501                 mov     rsi, r12        ; size
.text:000000000000C504                 mov     rdi, r15        ; ptr
.text:000000000000C507                 call    _realloc
.text:000000000000C50C                 test    rax, rax
.text:000000000000C50F                 jz      loc_C60B
.text:000000000000C515                 mov     r15, rax
.text:000000000000C518                 jmp     loc_C44F
.text:000000000000C518 ; ---------------------------------------------------------------------------
.text:000000000000C51D                 align 20h
.text:000000000000C520
.text:000000000000C520 loc_C520:                               ; CODE XREF: vasnprintf+42E↑j
.text:000000000000C520                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000C52A                 jmp     loc_BE17
.text:000000000000C52A ; ---------------------------------------------------------------------------
.text:000000000000C52F                 align 10h
.text:000000000000C530
.text:000000000000C530 loc_C530:                               ; CODE XREF: vasnprintf+240↑j
.text:000000000000C530                 js      loc_BB25
.text:000000000000C536                 add     r12, r12
.text:000000000000C539                 cmp     r12, rax
.text:000000000000C53C                 jnb     loc_BC16
.text:000000000000C542
.text:000000000000C542 loc_C542:                               ; CODE XREF: vasnprintf+24A↑j
.text:000000000000C542                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C546                 jz      loc_BB25
.text:000000000000C54C                 cmp     r15, [rbp+src]
.text:000000000000C553                 mov     r12, rax
.text:000000000000C556                 setz    dl
.text:000000000000C559                 test    r15, r15
.text:000000000000C55C                 jnz     loc_BC29
.text:000000000000C562                 nop     word ptr [rax+rax+00h]
.text:000000000000C568
.text:000000000000C568 loc_C568:                               ; CODE XREF: vasnprintf+263↑j
.text:000000000000C568                                         ; vasnprintf+26B↑j
.text:000000000000C568                 mov     rdi, r12        ; size
.text:000000000000C56B                 mov     [rbp+var_3E0], r8
.text:000000000000C572                 mov     byte ptr [rbp+var_3D0], dl
.text:000000000000C578                 mov     [rbp+n], rcx
.text:000000000000C57F                 call    _malloc
.text:000000000000C584                 test    rax, rax
.text:000000000000C587                 mov     r9, rax
.text:000000000000C58A                 mov     rcx, [rbp+n]
.text:000000000000C591                 movzx   edx, byte ptr [rbp+var_3D0]
.text:000000000000C598                 mov     r8, [rbp+var_3E0]
.text:000000000000C59F                 jz      loc_BB25
.text:000000000000C5A5                 test    rbx, rbx
.text:000000000000C5A8                 jz      loc_C7B0
.text:000000000000C5AE                 test    dl, dl
.text:000000000000C5B0                 jz      loc_C7B0
.text:000000000000C5B6                 mov     rsi, r15        ; src
.text:000000000000C5B9                 mov     rdx, rbx        ; n
.text:000000000000C5BC                 mov     rdi, rax        ; dest
.text:000000000000C5BF                 mov     [rbp+var_3D0], r8
.text:000000000000C5C6                 mov     [rbp+n], rcx
.text:000000000000C5CD                 call    _memcpy
.text:000000000000C5D2                 mov     rcx, [rbp+n]
.text:000000000000C5D9                 mov     r15, rax
.text:000000000000C5DC                 mov     r8, [rbp+var_3D0]
.text:000000000000C5E3                 jmp     loc_BC64
.text:000000000000C5E3 ; ---------------------------------------------------------------------------
.text:000000000000C5E8                 align 10h
.text:000000000000C5F0
.text:000000000000C5F0 loc_C5F0:                               ; CODE XREF: vasnprintf+15F↑j
.text:000000000000C5F0                 mov     r14, r12
.text:000000000000C5F3                 jmp     loc_BC64
.text:000000000000C5F3 ; ---------------------------------------------------------------------------
.text:000000000000C5F8                 align 20h
.text:000000000000C600
.text:000000000000C600 loc_C600:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000C600                                         ; DATA XREF: .rodata:jpt_C4C0↓o
.text:000000000000C600                 mov     [rax], r14      ; jumptable 000000000000C4C0 cases 21,22
.text:000000000000C603                 mov     rbx, r14
.text:000000000000C606                 jmp     loc_C454
.text:000000000000C60B ; ---------------------------------------------------------------------------
.text:000000000000C60B
.text:000000000000C60B loc_C60B:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000C60B                                         ; vasnprintf+B4F↑j ...
.text:000000000000C60B                 call    ___errno_location
.text:000000000000C610                 mov     [rbp+n], rax
.text:000000000000C617                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C620
.text:000000000000C620 loc_C620:                               ; CODE XREF: vasnprintf+17D↑j
.text:000000000000C620                 mov     rdi, r15        ; ptr
.text:000000000000C623                 call    _free
.text:000000000000C628                 jmp     loc_BB43
.text:000000000000C628 ; ---------------------------------------------------------------------------
.text:000000000000C62D                 align 10h
.text:000000000000C630
.text:000000000000C630 loc_C630:                               ; CODE XREF: vasnprintf+872↑j
.text:000000000000C630                 mov     r9, [rbp+var_3F0]
.text:000000000000C637                 mov     r8, [rbp+var_3D8]
.text:000000000000C63E                 mov     rsi, r10
.text:000000000000C641                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C648                 mov     edx, 1
.text:000000000000C64D                 mov     eax, 1
.text:000000000000C652                 mov     [rbp+var_430], r10
.text:000000000000C659                 call    ___snprintf_chk
.text:000000000000C65E                 mov     r10, [rbp+var_430]
.text:000000000000C665                 jmp     loc_BF86
.text:000000000000C665 ; ---------------------------------------------------------------------------
.text:000000000000C66A                 align 10h
.text:000000000000C670
.text:000000000000C670 loc_C670:                               ; CODE XREF: vasnprintf+7E8↑j
.text:000000000000C670                 sub     rsp, 10h
.text:000000000000C674                 mov     r9, [rbp+var_3F0]
.text:000000000000C67B                 fstp    [rsp+440h+var_440]
.text:000000000000C67E                 jmp     loc_BF59
.text:000000000000C67E ; ---------------------------------------------------------------------------
.text:000000000000C683                 align 8
.text:000000000000C688
.text:000000000000C688 loc_C688:                               ; CODE XREF: vasnprintf+4A3↑j
.text:000000000000C688                 js      loc_BB25
.text:000000000000C68E                 add     r12, r12
.text:000000000000C691                 cmp     r12, rax
.text:000000000000C694                 jnb     loc_BE79
.text:000000000000C69A                 nop     word ptr [rax+rax+00h]
.text:000000000000C6A0
.text:000000000000C6A0 loc_C6A0:                               ; CODE XREF: vasnprintf+4AD↑j
.text:000000000000C6A0                                         ; vasnprintf+1114↓j
.text:000000000000C6A0                 test    rdx, rdx
.text:000000000000C6A3                 jnz     loc_BB25
.text:000000000000C6A9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C6AD                 jz      loc_BB25
.text:000000000000C6B3                 cmp     r15, [rbp+src]
.text:000000000000C6BA                 mov     r12, rax
.text:000000000000C6BD                 setz    dl
.text:000000000000C6C0                 test    r15, r15
.text:000000000000C6C3                 jnz     loc_BE8C
.text:000000000000C6C9                 nop     dword ptr [rax+00000000h]
.text:000000000000C6D0
.text:000000000000C6D0 loc_C6D0:                               ; CODE XREF: vasnprintf+4C6↑j
.text:000000000000C6D0                                         ; vasnprintf+4CE↑j
.text:000000000000C6D0                 mov     rdi, r12        ; size
.text:000000000000C6D3                 mov     byte ptr [rbp+n], dl
.text:000000000000C6D9                 call    _malloc
.text:000000000000C6DE                 test    rax, rax
.text:000000000000C6E1                 mov     rcx, rax
.text:000000000000C6E4                 movzx   edx, byte ptr [rbp+n]
.text:000000000000C6EB                 jz      loc_BB25
.text:000000000000C6F1                 test    r14, r14
.text:000000000000C6F4                 jz      loc_C890
.text:000000000000C6FA                 test    dl, dl
.text:000000000000C6FC                 jz      loc_C890
.text:000000000000C702                 mov     rsi, r15        ; src
.text:000000000000C705                 mov     rdx, r14        ; n
.text:000000000000C708                 mov     rdi, rax        ; dest
.text:000000000000C70B                 call    _memcpy
.text:000000000000C710                 mov     r15, rax
.text:000000000000C713                 jmp     loc_BEAB
.text:000000000000C713 ; ---------------------------------------------------------------------------
.text:000000000000C718                 align 20h
.text:000000000000C720
.text:000000000000C720 loc_C720:                               ; CODE XREF: vasnprintf+402↑j
.text:000000000000C720                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:000000000000C723                 add     rbx, 1
.text:000000000000C727                 jmp     loc_BDDB
.text:000000000000C727 ; ---------------------------------------------------------------------------
.text:000000000000C72C                 align 10h
.text:000000000000C730
.text:000000000000C730 loc_C730:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000C730                                         ; DATA XREF: .rodata:jpt_C4C0↓o
.text:000000000000C730                 mov     [rax], r14b     ; jumptable 000000000000C4C0 case 18
.text:000000000000C733                 mov     rbx, r14
.text:000000000000C736                 jmp     loc_C454
.text:000000000000C736 ; ---------------------------------------------------------------------------
.text:000000000000C73B                 align 20h
.text:000000000000C740
.text:000000000000C740 loc_C740:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000C740                                         ; DATA XREF: .rodata:jpt_C4C0↓o
.text:000000000000C740                 mov     [rax], r14d     ; jumptable 000000000000C4C0 case 20
.text:000000000000C743                 mov     rbx, r14
.text:000000000000C746                 jmp     loc_C454
.text:000000000000C746 ; ---------------------------------------------------------------------------
.text:000000000000C74B                 align 10h
.text:000000000000C750
.text:000000000000C750 loc_C750:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000C750                                         ; DATA XREF: .rodata:jpt_C4C0↓o
.text:000000000000C750                 mov     [rax], r14w     ; jumptable 000000000000C4C0 case 19
.text:000000000000C754                 mov     rbx, r14
.text:000000000000C757                 jmp     loc_C454
.text:000000000000C757 ; ---------------------------------------------------------------------------
.text:000000000000C75C                 align 20h
.text:000000000000C760
.text:000000000000C760 loc_C760:                               ; CODE XREF: vasnprintf+B33↑j
.text:000000000000C760                                         ; vasnprintf+B3B↑j
.text:000000000000C760                 mov     rdi, r12        ; size
.text:000000000000C763                 mov     byte ptr [rbp+n], dl
.text:000000000000C769                 call    _malloc
.text:000000000000C76E                 test    rax, rax
.text:000000000000C771                 mov     rcx, rax
.text:000000000000C774                 movzx   edx, byte ptr [rbp+n]
.text:000000000000C77B                 jz      loc_BB25
.text:000000000000C781                 test    r14, r14
.text:000000000000C784                 jz      loc_C8C4
.text:000000000000C78A                 test    dl, dl
.text:000000000000C78C                 jz      loc_C8C4
.text:000000000000C792                 mov     rsi, r15        ; src
.text:000000000000C795                 mov     rdx, r14        ; n
.text:000000000000C798                 mov     rdi, rax        ; dest
.text:000000000000C79B                 call    _memcpy
.text:000000000000C7A0                 mov     r15, rax
.text:000000000000C7A3                 jmp     loc_C44F
.text:000000000000C7A3 ; ---------------------------------------------------------------------------
.text:000000000000C7A8                 align 10h
.text:000000000000C7B0
.text:000000000000C7B0 loc_C7B0:                               ; CODE XREF: vasnprintf+BE8↑j
.text:000000000000C7B0                                         ; vasnprintf+BF0↑j
.text:000000000000C7B0                 mov     r15, r9
.text:000000000000C7B3                 jmp     loc_BC64
.text:000000000000C7B3 ; ---------------------------------------------------------------------------
.text:000000000000C7B8                 align 20h
.text:000000000000C7C0
.text:000000000000C7C0 loc_C7C0:                               ; CODE XREF: vasnprintf+869↑j
.text:000000000000C7C0                 sub     rsp, 8
.text:000000000000C7C4                 push    [rbp+var_3F0]
.text:000000000000C7CA                 jmp     loc_C245
.text:000000000000C7CA ; ---------------------------------------------------------------------------
.text:000000000000C7CF                 align 10h
.text:000000000000C7D0
.text:000000000000C7D0 loc_C7D0:                               ; CODE XREF: vasnprintf+7DF↑j
.text:000000000000C7D0                 sub     rsp, 8
.text:000000000000C7D4                 push    [rbp+var_3F0]
.text:000000000000C7DA                 sub     rsp, 10h
.text:000000000000C7DE                 fstp    [rsp+450h+var_450]
.text:000000000000C7E1                 jmp     loc_C30B
.text:000000000000C7E1 ; ---------------------------------------------------------------------------
.text:000000000000C7E6                 align 10h
.text:000000000000C7F0
.text:000000000000C7F0 loc_C7F0:                               ; CODE XREF: vasnprintf+5FC↑j
.text:000000000000C7F0                 mov     rax, [rbp+n]
.text:000000000000C7F7                 mov     edi, [rbp-424h]
.text:000000000000C7FD                 movsxd  rbx, ecx
.text:000000000000C800                 add     rbx, r14
.text:000000000000C803                 mov     [rax], edi
.text:000000000000C805                 jmp     loc_C454
.text:000000000000C805 ; ---------------------------------------------------------------------------
.text:000000000000C80A                 align 10h
.text:000000000000C810
.text:000000000000C810 loc_C810:                               ; CODE XREF: vasnprintf+609↑j
.text:000000000000C810                 cmp     r15, [rbp+src]
.text:000000000000C817                 jz      short loc_C822
.text:000000000000C819                 test    r15, r15
.text:000000000000C81C                 jnz     loc_C8D9
.text:000000000000C822
.text:000000000000C822 loc_C822:                               ; CODE XREF: vasnprintf+E57↑j
.text:000000000000C822                                         ; vasnprintf+F21↓j
.text:000000000000C822                 mov     rax, [rbp+ptr]
.text:000000000000C829                 test    rax, rax
.text:000000000000C82C                 jz      short loc_C836
.text:000000000000C82E                 mov     rdi, rax        ; ptr
.text:000000000000C831                 call    _free
.text:000000000000C836
.text:000000000000C836 loc_C836:                               ; CODE XREF: vasnprintf+E6C↑j
.text:000000000000C836                 mov     rax, [rbp+var_408]
.text:000000000000C83D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000C844                 add     rax, 20h ; ' '
.text:000000000000C848                 cmp     rdi, rax
.text:000000000000C84B                 jz      short loc_C852
.text:000000000000C84D                 call    _free
.text:000000000000C852
.text:000000000000C852 loc_C852:                               ; CODE XREF: vasnprintf+E8B↑j
.text:000000000000C852                 mov     rax, [rbp+var_410]
.text:000000000000C859                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000C860                 add     rax, 10h
.text:000000000000C864                 cmp     rdi, rax
.text:000000000000C867                 jz      short loc_C86E
.text:000000000000C869                 call    _free
.text:000000000000C86E
.text:000000000000C86E loc_C86E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000C86E                 mov     rax, [rbp+n]
.text:000000000000C875                 xor     r15d, r15d
.text:000000000000C878                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000C87E                 jmp     loc_BB9F
.text:000000000000C87E ; ---------------------------------------------------------------------------
.text:000000000000C883                 align 8
.text:000000000000C888
.text:000000000000C888 loc_C888:                               ; CODE XREF: vasnprintf+60↑j
.text:000000000000C888                 xor     r15d, r15d
.text:000000000000C88B                 jmp     loc_BB9F
.text:000000000000C890 ; ---------------------------------------------------------------------------
.text:000000000000C890
.text:000000000000C890 loc_C890:                               ; CODE XREF: vasnprintf+D34↑j
.text:000000000000C890                                         ; vasnprintf+D3C↑j
.text:000000000000C890                 mov     r15, rcx
.text:000000000000C893                 jmp     loc_BEAB
.text:000000000000C893 ; ---------------------------------------------------------------------------
.text:000000000000C898                 align 20h
.text:000000000000C8A0
.text:000000000000C8A0 loc_C8A0:                               ; CODE XREF: vasnprintf+B10↑j
.text:000000000000C8A0                 js      loc_BB25
.text:000000000000C8A6                 add     r12, r12
.text:000000000000C8A9                 cmp     r12, rax
.text:000000000000C8AC                 jnb     loc_C4E6
.text:000000000000C8B2
.text:000000000000C8B2 loc_C8B2:                               ; CODE XREF: vasnprintf+B1A↑j
.text:000000000000C8B2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C8B6                 jz      loc_BB25
.text:000000000000C8BC                 mov     r12, rax
.text:000000000000C8BF                 jmp     loc_C4E6
.text:000000000000C8C4 ; ---------------------------------------------------------------------------
.text:000000000000C8C4
.text:000000000000C8C4 loc_C8C4:                               ; CODE XREF: vasnprintf+DC4↑j
.text:000000000000C8C4                                         ; vasnprintf+DCC↑j
.text:000000000000C8C4                 mov     r15, rcx
.text:000000000000C8C7                 jmp     loc_C44F
.text:000000000000C8CC ; ---------------------------------------------------------------------------
.text:000000000000C8CC
.text:000000000000C8CC loc_C8CC:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000C8CC                 mov     rdi, r15        ; ptr
.text:000000000000C8CF                 call    _free
.text:000000000000C8D4                 jmp     loc_C122
.text:000000000000C8D9 ; ---------------------------------------------------------------------------
.text:000000000000C8D9
.text:000000000000C8D9 loc_C8D9:                               ; CODE XREF: vasnprintf+E5C↑j
.text:000000000000C8D9                 mov     rdi, r15        ; ptr
.text:000000000000C8DC                 call    _free
.text:000000000000C8E1                 jmp     loc_C822
.text:000000000000C8E6 ; ---------------------------------------------------------------------------
.text:000000000000C8E6
.text:000000000000C8E6 def_BF1B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:000000000000C8E6                                         ; vasnprintf+43E↑j ...
.text:000000000000C8E6                 call    _abort          ; jumptable 000000000000BF1B default case, case 0
.text:000000000000C8E6                                         ; jumptable 000000000000C4C0 default case
.text:000000000000C8E6 ; ---------------------------------------------------------------------------
.text:000000000000C8EB                 align 10h
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: vasnprintf+73↑j
.text:000000000000C8F0                 mov     rax, [rbp+var_408]
.text:000000000000C8F7                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000C8FE                 add     rax, 20h ; ' '
.text:000000000000C902                 cmp     rdi, rax
.text:000000000000C905                 jz      short loc_C90C
.text:000000000000C907                 call    _free
.text:000000000000C90C
.text:000000000000C90C loc_C90C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000C90C                 mov     rax, [rbp+var_410]
.text:000000000000C913                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000C91A                 add     rax, 10h
.text:000000000000C91E                 cmp     rdi, rax
.text:000000000000C921                 jz      short loc_C928
.text:000000000000C923                 call    _free
.text:000000000000C928
.text:000000000000C928 loc_C928:                               ; CODE XREF: vasnprintf+F61↑j
.text:000000000000C928                 call    ___errno_location
.text:000000000000C92D                 xor     r15d, r15d
.text:000000000000C930                 mov     dword ptr [rax], 16h
.text:000000000000C936                 jmp     loc_BB9F
.text:000000000000C93B ; ---------------------------------------------------------------------------
.text:000000000000C93B
.text:000000000000C93B loc_C93B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000C93B                 mov     rbx, r14
.text:000000000000C93E                 xor     eax, eax
.text:000000000000C940                 add     rbx, 1
.text:000000000000C944                 jb      loc_CA50
.text:000000000000C94A                 cmp     r12, rbx
.text:000000000000C94D                 jnb     short loc_C99C
.text:000000000000C94F                 test    r12, r12
.text:000000000000C952                 jnz     loc_CA89
.text:000000000000C958                 cmp     rbx, 0Ch
.text:000000000000C95C                 ja      loc_CA6E
.text:000000000000C962                 mov     r12d, 0Ch
.text:000000000000C968
.text:000000000000C968 loc_C968:                               ; CODE XREF: vasnprintf+10C4↓j
.text:000000000000C968                                         ; vasnprintf+10D5↓j
.text:000000000000C968                 cmp     r15, [rbp+src]
.text:000000000000C96F                 setz    r13b
.text:000000000000C973                 test    r15, r15
.text:000000000000C976                 jz      loc_CA1C
.text:000000000000C97C                 test    r13b, r13b
.text:000000000000C97F                 jnz     loc_CA1C
.text:000000000000C985                 mov     rsi, r12        ; size
.text:000000000000C988                 mov     rdi, r15        ; ptr
.text:000000000000C98B                 call    _realloc
.text:000000000000C990                 test    rax, rax
.text:000000000000C993                 jz      loc_C60B
.text:000000000000C999                 mov     r15, rax
.text:000000000000C99C
.text:000000000000C99C loc_C99C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000C99C                                         ; vasnprintf+108B↓j ...
.text:000000000000C99C                 cmp     r15, [rbp+src]
.text:000000000000C9A3                 mov     byte ptr [r15+r14], 0
.text:000000000000C9A8                 jz      short loc_C9C1
.text:000000000000C9AA                 cmp     r12, rbx
.text:000000000000C9AD                 jbe     short loc_C9C1
.text:000000000000C9AF                 mov     rdi, r15        ; ptr
.text:000000000000C9B2                 mov     rsi, rbx        ; size
.text:000000000000C9B5                 call    _realloc
.text:000000000000C9BA                 test    rax, rax
.text:000000000000C9BD                 cmovnz  r15, rax
.text:000000000000C9C1
.text:000000000000C9C1 loc_C9C1:                               ; CODE XREF: vasnprintf+FE8↑j
.text:000000000000C9C1                                         ; vasnprintf+FED↑j
.text:000000000000C9C1                 mov     rax, [rbp+ptr]
.text:000000000000C9C8                 test    rax, rax
.text:000000000000C9CB                 jz      short loc_C9D5
.text:000000000000C9CD                 mov     rdi, rax        ; ptr
.text:000000000000C9D0                 call    _free
.text:000000000000C9D5
.text:000000000000C9D5 loc_C9D5:                               ; CODE XREF: vasnprintf+100B↑j
.text:000000000000C9D5                 mov     rax, [rbp+var_408]
.text:000000000000C9DC                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000C9E3                 add     rax, 20h ; ' '
.text:000000000000C9E7                 cmp     rdi, rax
.text:000000000000C9EA                 jz      short loc_C9F1
.text:000000000000C9EC                 call    _free
.text:000000000000C9F1
.text:000000000000C9F1 loc_C9F1:                               ; CODE XREF: vasnprintf+102A↑j
.text:000000000000C9F1                 mov     rax, [rbp+var_410]
.text:000000000000C9F8                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000C9FF                 add     rax, 10h
.text:000000000000CA03                 cmp     rdi, rax
.text:000000000000CA06                 jz      short loc_CA0D
.text:000000000000CA08                 call    _free
.text:000000000000CA0D
.text:000000000000CA0D loc_CA0D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000CA0D                 mov     rax, [rbp+var_418]
.text:000000000000CA14                 mov     [rax], r14
.text:000000000000CA17                 jmp     loc_BB9F
.text:000000000000CA1C ; ---------------------------------------------------------------------------
.text:000000000000CA1C
.text:000000000000CA1C loc_CA1C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000CA1C                                         ; vasnprintf+FBF↑j
.text:000000000000CA1C                 mov     rdi, r12        ; size
.text:000000000000CA1F                 call    _malloc
.text:000000000000CA24                 test    rax, rax
.text:000000000000CA27                 mov     rcx, rax
.text:000000000000CA2A                 jz      loc_BB25
.text:000000000000CA30                 test    r14, r14
.text:000000000000CA33                 jz      short loc_CAA0
.text:000000000000CA35                 test    r13b, r13b
.text:000000000000CA38                 jz      short loc_CAA0
.text:000000000000CA3A                 mov     rsi, r15        ; src
.text:000000000000CA3D                 mov     rdx, r14        ; n
.text:000000000000CA40                 mov     rdi, rax        ; dest
.text:000000000000CA43                 call    _memcpy
.text:000000000000CA48                 mov     r15, rax
.text:000000000000CA4B                 jmp     loc_C99C
.text:000000000000CA50 ; ---------------------------------------------------------------------------
.text:000000000000CA50
.text:000000000000CA50 loc_CA50:                               ; CODE XREF: vasnprintf+F84↑j
.text:000000000000CA50                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000CA54                 mov     eax, 1
.text:000000000000CA59                 jz      loc_C99C
.text:000000000000CA5F                 test    r12, r12
.text:000000000000CA62                 jz      loc_BB25
.text:000000000000CA68                 js      loc_BB25
.text:000000000000CA6E
.text:000000000000CA6E loc_CA6E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000CA6E                                         ; vasnprintf+10DB↓j
.text:000000000000CA6E                 test    rax, rax
.text:000000000000CA71                 jnz     loc_BB25
.text:000000000000CA77                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000CA7B                 jz      loc_BB25
.text:000000000000CA81                 mov     r12, rbx
.text:000000000000CA84                 jmp     loc_C968
.text:000000000000CA89 ; ---------------------------------------------------------------------------
.text:000000000000CA89
.text:000000000000CA89 loc_CA89:                               ; CODE XREF: vasnprintf+F92↑j
.text:000000000000CA89                 js      loc_BB25
.text:000000000000CA8F                 add     r12, r12
.text:000000000000CA92                 cmp     r12, rbx
.text:000000000000CA95                 jnb     loc_C968
.text:000000000000CA9B                 jmp     short loc_CA6E
.text:000000000000CA9B ; ---------------------------------------------------------------------------
.text:000000000000CA9D                 align 20h
.text:000000000000CAA0
.text:000000000000CAA0 loc_CAA0:                               ; CODE XREF: vasnprintf+1073↑j
.text:000000000000CAA0                                         ; vasnprintf+1078↑j
.text:000000000000CAA0                 mov     r15, rcx
.text:000000000000CAA3                 jmp     loc_C99C
.text:000000000000CAA8 ; ---------------------------------------------------------------------------
.text:000000000000CAA8
.text:000000000000CAA8 loc_CAA8:                               ; CODE XREF: vasnprintf+627↑j
.text:000000000000CAA8                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000CAAC                 jz      loc_BED0
.text:000000000000CAB2                 jmp     loc_BB31
.text:000000000000CAB7 ; ---------------------------------------------------------------------------
.text:000000000000CAB7
.text:000000000000CAB7 loc_CAB7:                               ; CODE XREF: vasnprintf+1EF↑j
.text:000000000000CAB7                 call    ___stack_chk_fail
.text:000000000000CABC ; ---------------------------------------------------------------------------
.text:000000000000CABC
.text:000000000000CABC loc_CABC:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000CABC                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000CAC0                 mov     edx, 1
.text:000000000000CAC5                 jz      loc_BEAB
.text:000000000000CACB                 test    r12, r12
.text:000000000000CACE                 jz      loc_BB25
.text:000000000000CAD4                 jns     loc_C6A0
.text:000000000000CADA                 jmp     loc_BB25
.text:000000000000CADA ; } // starts at B9C0
.text:000000000000CADA vasnprintf      endp
.text:000000000000CADA
.text:000000000000CADA ; ---------------------------------------------------------------------------
.text:000000000000CADF                 align 20h
.text:000000000000CAE0
.text:000000000000CAE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CAE0
.text:000000000000CAE0
.text:000000000000CAE0                 public printf_fetchargs
.text:000000000000CAE0 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:000000000000CAE0 ; __unwind {
.text:000000000000CAE0                 cmp     qword ptr [rsi], 0
.text:000000000000CAE4                 mov     rax, [rsi+8]
.text:000000000000CAE8                 jz      short loc_CB4D
.text:000000000000CAEA                 lea     r8, jpt_CB16
.text:000000000000CAF1                 lea     r10, wide_null_string_2696
.text:000000000000CAF8                 lea     r9, aNull       ; "(NULL)"
.text:000000000000CAFF                 xor     ecx, ecx
.text:000000000000CB01                 nop     dword ptr [rax+00000000h]
.text:000000000000CB08
.text:000000000000CB08 loc_CB08:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:000000000000CB08                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000CB0B                 ja      short def_CB16  ; jumptable 000000000000CB16 default case, case 0
.text:000000000000CB0D                 mov     edx, [rax]
.text:000000000000CB0F                 movsxd  rdx, ds:(jpt_CB16 - 10030h)[r8+rdx*4]
.text:000000000000CB13                 add     rdx, r8
.text:000000000000CB16                 jmp     rdx             ; switch jump
.text:000000000000CB16 ; ---------------------------------------------------------------------------
.text:000000000000CB18                 align 20h
.text:000000000000CB20
.text:000000000000CB20 loc_CB20:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CB20                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CB20                 mov     rdx, [rdi+8]    ; jumptable 000000000000CB16 case 12
.text:000000000000CB24                 add     rdx, 0Fh
.text:000000000000CB28                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000CB2C                 lea     r11, [rdx+10h]
.text:000000000000CB30                 mov     [rdi+8], r11
.text:000000000000CB34                 fld     tbyte ptr [rdx]
.text:000000000000CB36                 fstp    tbyte ptr [rax+10h]
.text:000000000000CB39                 nop     dword ptr [rax+00000000h]
.text:000000000000CB40
.text:000000000000CB40 loc_CB40:                               ; CODE XREF: printf_fetchargs+98↓j
.text:000000000000CB40                                         ; printf_fetchargs+BA↓j ...
.text:000000000000CB40                 add     rcx, 1
.text:000000000000CB44                 add     rax, 20h ; ' '
.text:000000000000CB48                 cmp     [rsi], rcx
.text:000000000000CB4B                 ja      short loc_CB08
.text:000000000000CB4D
.text:000000000000CB4D loc_CB4D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000CB4D                 xor     eax, eax
.text:000000000000CB4F                 retn
.text:000000000000CB50 ; ---------------------------------------------------------------------------
.text:000000000000CB50
.text:000000000000CB50 def_CB16:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:000000000000CB50                                         ; printf_fetchargs+36↑j
.text:000000000000CB50                                         ; DATA XREF: ...
.text:000000000000CB50                 mov     eax, 0FFFFFFFFh ; jumptable 000000000000CB16 default case, case 0
.text:000000000000CB55                 retn
.text:000000000000CB56 ; ---------------------------------------------------------------------------
.text:000000000000CB56
.text:000000000000CB56 loc_CB56:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CB56                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CB56                 mov     r11d, [rdi]     ; jumptable 000000000000CB16 cases 7-10,17-22
.text:000000000000CB59                 cmp     r11d, 2Fh ; '/'
.text:000000000000CB5D                 ja      loc_CC9A
.text:000000000000CB63                 mov     edx, r11d
.text:000000000000CB66                 add     rdx, [rdi+10h]
.text:000000000000CB6A                 add     r11d, 8
.text:000000000000CB6E                 mov     [rdi], r11d
.text:000000000000CB71
.text:000000000000CB71 loc_CB71:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:000000000000CB71                 mov     rdx, [rdx]
.text:000000000000CB74                 mov     [rax+10h], rdx
.text:000000000000CB78                 jmp     short loc_CB40
.text:000000000000CB7A ; ---------------------------------------------------------------------------
.text:000000000000CB7A
.text:000000000000CB7A loc_CB7A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CB7A                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CB7A                 mov     r11d, [rdi]     ; jumptable 000000000000CB16 cases 5,6,13,14
.text:000000000000CB7D                 cmp     r11d, 2Fh ; '/'
.text:000000000000CB81                 ja      loc_CCBC
.text:000000000000CB87                 mov     edx, r11d
.text:000000000000CB8A                 add     rdx, [rdi+10h]
.text:000000000000CB8E                 add     r11d, 8
.text:000000000000CB92                 mov     [rdi], r11d
.text:000000000000CB95
.text:000000000000CB95 loc_CB95:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:000000000000CB95                 mov     edx, [rdx]
.text:000000000000CB97                 mov     [rax+10h], edx
.text:000000000000CB9A                 jmp     short loc_CB40
.text:000000000000CB9C ; ---------------------------------------------------------------------------
.text:000000000000CB9C
.text:000000000000CB9C loc_CB9C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CB9C                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CB9C                 mov     r11d, [rdi]     ; jumptable 000000000000CB16 cases 1,2
.text:000000000000CB9F                 cmp     r11d, 2Fh ; '/'
.text:000000000000CBA3                 ja      loc_CCAB
.text:000000000000CBA9                 mov     edx, r11d
.text:000000000000CBAC                 add     rdx, [rdi+10h]
.text:000000000000CBB0                 add     r11d, 8
.text:000000000000CBB4                 mov     [rdi], r11d
.text:000000000000CBB7
.text:000000000000CBB7 loc_CBB7:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:000000000000CBB7                 mov     edx, [rdx]
.text:000000000000CBB9                 mov     [rax+10h], dl
.text:000000000000CBBC                 jmp     short loc_CB40
.text:000000000000CBBE ; ---------------------------------------------------------------------------
.text:000000000000CBBE
.text:000000000000CBBE loc_CBBE:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CBBE                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CBBE                 mov     r11d, [rdi]     ; jumptable 000000000000CB16 cases 3,4
.text:000000000000CBC1                 cmp     r11d, 2Fh ; '/'
.text:000000000000CBC5                 ja      loc_CC6A
.text:000000000000CBCB                 mov     edx, r11d
.text:000000000000CBCE                 add     rdx, [rdi+10h]
.text:000000000000CBD2                 add     r11d, 8
.text:000000000000CBD6                 mov     [rdi], r11d
.text:000000000000CBD9
.text:000000000000CBD9 loc_CBD9:                               ; CODE XREF: printf_fetchargs+196↓j
.text:000000000000CBD9                 mov     edx, [rdx]
.text:000000000000CBDB                 mov     [rax+10h], dx
.text:000000000000CBDF                 jmp     loc_CB40
.text:000000000000CBE4 ; ---------------------------------------------------------------------------
.text:000000000000CBE4
.text:000000000000CBE4 loc_CBE4:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CBE4                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CBE4                 mov     r11d, [rdi]     ; jumptable 000000000000CB16 case 15
.text:000000000000CBE7                 cmp     r11d, 2Fh ; '/'
.text:000000000000CBEB                 ja      loc_CC7B
.text:000000000000CBF1                 mov     edx, r11d
.text:000000000000CBF4                 add     rdx, [rdi+10h]
.text:000000000000CBF8                 add     r11d, 8
.text:000000000000CBFC                 mov     [rdi], r11d
.text:000000000000CBFF
.text:000000000000CBFF loc_CBFF:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000CBFF                 mov     rdx, [rdx]
.text:000000000000CC02                 test    rdx, rdx
.text:000000000000CC05                 cmovz   rdx, r9
.text:000000000000CC09                 mov     [rax+10h], rdx
.text:000000000000CC0D                 jmp     loc_CB40
.text:000000000000CC12 ; ---------------------------------------------------------------------------
.text:000000000000CC12
.text:000000000000CC12 loc_CC12:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CC12                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CC12                 mov     r11d, [rdi+4]   ; jumptable 000000000000CB16 case 11
.text:000000000000CC16                 cmp     r11d, 0AFh
.text:000000000000CC1D                 ja      loc_CCCD
.text:000000000000CC23                 mov     edx, r11d
.text:000000000000CC26                 add     rdx, [rdi+10h]
.text:000000000000CC2A                 add     r11d, 10h
.text:000000000000CC2E                 mov     [rdi+4], r11d
.text:000000000000CC32
.text:000000000000CC32 loc_CC32:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:000000000000CC32                 movsd   xmm0, qword ptr [rdx]
.text:000000000000CC36                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000CC3B                 jmp     loc_CB40
.text:000000000000CC40 ; ---------------------------------------------------------------------------
.text:000000000000CC40
.text:000000000000CC40 loc_CC40:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000CC40                                         ; DATA XREF: .rodata:jpt_CB16↓o
.text:000000000000CC40                 mov     r11d, [rdi]     ; jumptable 000000000000CB16 case 16
.text:000000000000CC43                 cmp     r11d, 2Fh ; '/'
.text:000000000000CC47                 ja      short loc_CC8C
.text:000000000000CC49                 mov     edx, r11d
.text:000000000000CC4C                 add     rdx, [rdi+10h]
.text:000000000000CC50                 add     r11d, 8
.text:000000000000CC54                 mov     [rdi], r11d
.text:000000000000CC57
.text:000000000000CC57 loc_CC57:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:000000000000CC57                 mov     rdx, [rdx]
.text:000000000000CC5A                 test    rdx, rdx
.text:000000000000CC5D                 cmovz   rdx, r10
.text:000000000000CC61                 mov     [rax+10h], rdx
.text:000000000000CC65                 jmp     loc_CB40
.text:000000000000CC6A ; ---------------------------------------------------------------------------
.text:000000000000CC6A
.text:000000000000CC6A loc_CC6A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000CC6A                 mov     rdx, [rdi+8]
.text:000000000000CC6E                 lea     r11, [rdx+8]
.text:000000000000CC72                 mov     [rdi+8], r11
.text:000000000000CC76                 jmp     loc_CBD9
.text:000000000000CC7B ; ---------------------------------------------------------------------------
.text:000000000000CC7B
.text:000000000000CC7B loc_CC7B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000CC7B                 mov     rdx, [rdi+8]
.text:000000000000CC7F                 lea     r11, [rdx+8]
.text:000000000000CC83                 mov     [rdi+8], r11
.text:000000000000CC87                 jmp     loc_CBFF
.text:000000000000CC8C ; ---------------------------------------------------------------------------
.text:000000000000CC8C
.text:000000000000CC8C loc_CC8C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000CC8C                 mov     rdx, [rdi+8]
.text:000000000000CC90                 lea     r11, [rdx+8]
.text:000000000000CC94                 mov     [rdi+8], r11
.text:000000000000CC98                 jmp     short loc_CC57
.text:000000000000CC9A ; ---------------------------------------------------------------------------
.text:000000000000CC9A
.text:000000000000CC9A loc_CC9A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000CC9A                 mov     rdx, [rdi+8]
.text:000000000000CC9E                 lea     r11, [rdx+8]
.text:000000000000CCA2                 mov     [rdi+8], r11
.text:000000000000CCA6                 jmp     loc_CB71
.text:000000000000CCAB ; ---------------------------------------------------------------------------
.text:000000000000CCAB
.text:000000000000CCAB loc_CCAB:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000CCAB                 mov     rdx, [rdi+8]
.text:000000000000CCAF                 lea     r11, [rdx+8]
.text:000000000000CCB3                 mov     [rdi+8], r11
.text:000000000000CCB7                 jmp     loc_CBB7
.text:000000000000CCBC ; ---------------------------------------------------------------------------
.text:000000000000CCBC
.text:000000000000CCBC loc_CCBC:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000CCBC                 mov     rdx, [rdi+8]
.text:000000000000CCC0                 lea     r11, [rdx+8]
.text:000000000000CCC4                 mov     [rdi+8], r11
.text:000000000000CCC8                 jmp     loc_CB95
.text:000000000000CCCD ; ---------------------------------------------------------------------------
.text:000000000000CCCD
.text:000000000000CCCD loc_CCCD:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000CCCD                 mov     rdx, [rdi+8]
.text:000000000000CCD1                 lea     r11, [rdx+8]
.text:000000000000CCD5                 mov     [rdi+8], r11
.text:000000000000CCD9                 jmp     loc_CC32
.text:000000000000CCD9 ; } // starts at CAE0
.text:000000000000CCD9 printf_fetchargs endp
.text:000000000000CCD9
.text:000000000000CCD9 ; ---------------------------------------------------------------------------
.text:000000000000CCDE                 align 20h
.text:000000000000CCE0 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:000000000000CCE0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:000000000000CCE0 ;
.text:000000000000CCE0 ; Source File : 'printf-parse.c'
.text:000000000000CCE0
.text:000000000000CCE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCE0
.text:000000000000CCE0 ; Attributes: info_from_lumina
.text:000000000000CCE0
.text:000000000000CCE0 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:000000000000CCE0                 public printf_parse
.text:000000000000CCE0 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:000000000000CCE0
.text:000000000000CCE0 src             = qword ptr -80h
.text:000000000000CCE0 var_78          = qword ptr -78h
.text:000000000000CCE0 var_70          = qword ptr -70h
.text:000000000000CCE0 var_68          = qword ptr -68h
.text:000000000000CCE0 var_60          = qword ptr -60h
.text:000000000000CCE0 var_58          = qword ptr -58h
.text:000000000000CCE0 var_50          = qword ptr -50h
.text:000000000000CCE0 var_48          = qword ptr -48h
.text:000000000000CCE0 var_40          = qword ptr -40h
.text:000000000000CCE0
.text:000000000000CCE0 ; __unwind {
.text:000000000000CCE0                 push    r15
.text:000000000000CCE2                 push    r14
.text:000000000000CCE4                 lea     rcx, [rsi+20h]
.text:000000000000CCE8                 push    r13
.text:000000000000CCEA                 push    r12
.text:000000000000CCEC                 lea     rax, [rdx+10h]
.text:000000000000CCF0                 push    rbp
.text:000000000000CCF1                 push    rbx
.text:000000000000CCF2                 mov     r14, rsi
.text:000000000000CCF5                 mov     r15, rdx
.text:000000000000CCF8                 xor     ebx, ebx
.text:000000000000CCFA                 mov     r9d, 7
.text:000000000000CD00                 sub     rsp, 58h
.text:000000000000CD04                 mov     r10d, 7
.text:000000000000CD0A                 mov     qword ptr [rsi], 0
.text:000000000000CD11                 mov     [rsi+8], rcx
.text:000000000000CD15                 mov     [rsp+88h+var_60], rcx
.text:000000000000CD1A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000CD21                 mov     qword ptr [rdx], 0
.text:000000000000CD28                 mov     [rsp+88h+src], rax
.text:000000000000CD2D                 mov     [rdx+8], rax
.text:000000000000CD31                 mov     [rsp+88h+var_70], 0
.text:000000000000CD3A                 mov     [rsp+88h+var_78], 0
.text:000000000000CD43                 mov     [rsp+88h+var_68], 0
.text:000000000000CD4C                 jmp     short loc_CD5B
.text:000000000000CD4C ; ---------------------------------------------------------------------------
.text:000000000000CD4E                 align 10h
.text:000000000000CD50
.text:000000000000CD50 loc_CD50:                               ; CODE XREF: printf_parse+80↓j
.text:000000000000CD50                 cmp     al, 25h ; '%'
.text:000000000000CD52                 lea     rbp, [rdi+1]
.text:000000000000CD56                 jz      short loc_CD98
.text:000000000000CD58
.text:000000000000CD58 loc_CD58:                               ; CODE XREF: printf_parse+35B↓j
.text:000000000000CD58                                         ; printf_parse+364↓j
.text:000000000000CD58                 mov     rdi, rbp
.text:000000000000CD5B
.text:000000000000CD5B loc_CD5B:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000CD5B                 movzx   eax, byte ptr [rdi]
.text:000000000000CD5E                 test    al, al
.text:000000000000CD60                 jnz     short loc_CD50
.text:000000000000CD62                 lea     rax, [rbx+rbx*4]
.text:000000000000CD66                 lea     rax, [rbx+rax*2]
.text:000000000000CD6A                 mov     [rcx+rax*8], rdi
.text:000000000000CD6E                 mov     rax, [rsp+88h+var_78]
.text:000000000000CD73                 mov     [r14+10h], rax
.text:000000000000CD77                 mov     rax, [rsp+88h+var_70]
.text:000000000000CD7C                 mov     [r14+18h], rax
.text:000000000000CD80                 xor     eax, eax
.text:000000000000CD82
.text:000000000000CD82 loc_CD82:                               ; CODE XREF: printf_parse+87E↓j
.text:000000000000CD82                                         ; printf_parse+B1C↓j
.text:000000000000CD82                 add     rsp, 58h
.text:000000000000CD86                 pop     rbx
.text:000000000000CD87                 pop     rbp
.text:000000000000CD88                 pop     r12
.text:000000000000CD8A                 pop     r13
.text:000000000000CD8C                 pop     r14
.text:000000000000CD8E                 pop     r15
.text:000000000000CD90                 retn
.text:000000000000CD90 ; ---------------------------------------------------------------------------
.text:000000000000CD91                 align 8
.text:000000000000CD98
.text:000000000000CD98 loc_CD98:                               ; CODE XREF: printf_parse+76↑j
.text:000000000000CD98                 lea     rax, [rbx+rbx*4]
.text:000000000000CD9C                 mov     r13, r8
.text:000000000000CD9F                 lea     rax, [rbx+rax*2]
.text:000000000000CDA3                 lea     r12, [rcx+rax*8]
.text:000000000000CDA7                 mov     [r12], rdi
.text:000000000000CDAB                 mov     dword ptr [r12+10h], 0
.text:000000000000CDB4                 mov     qword ptr [r12+18h], 0
.text:000000000000CDBD                 mov     qword ptr [r12+20h], 0
.text:000000000000CDC6                 mov     [r12+28h], r8
.text:000000000000CDCB                 mov     qword ptr [r12+30h], 0
.text:000000000000CDD4                 mov     qword ptr [r12+38h], 0
.text:000000000000CDDD                 mov     [r12+40h], r8
.text:000000000000CDE2                 mov     [r12+50h], r8
.text:000000000000CDE7                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000CDEB                 lea     eax, [rbx-30h]
.text:000000000000CDEE                 cmp     al, 9
.text:000000000000CDF0                 ja      short loc_CE2E
.text:000000000000CDF2                 jmp     loc_D22A
.text:000000000000CDF2 ; ---------------------------------------------------------------------------
.text:000000000000CDF7                 align 20h
.text:000000000000CE00
.text:000000000000CE00 loc_CE00:                               ; CODE XREF: printf_parse+158↓j
.text:000000000000CE00                 cmp     bl, 2Dh ; '-'
.text:000000000000CE03                 jz      short loc_CE48
.text:000000000000CE05                 cmp     bl, 2Bh ; '+'
.text:000000000000CE08                 jz      short loc_CE50
.text:000000000000CE0A                 cmp     bl, 20h ; ' '
.text:000000000000CE0D                 jz      short loc_CE60
.text:000000000000CE0F                 cmp     bl, 23h ; '#'
.text:000000000000CE12                 jz      short loc_CE70
.text:000000000000CE14                 cmp     bl, 30h ; '0'
.text:000000000000CE17                 jz      short loc_CE80
.text:000000000000CE19                 cmp     bl, 49h ; 'I'
.text:000000000000CE1C                 jnz     short loc_CE90
.text:000000000000CE1E                 or      dword ptr [r12+10h], 40h
.text:000000000000CE24                 nop     dword ptr [rax+00h]
.text:000000000000CE28
.text:000000000000CE28 loc_CE28:                               ; CODE XREF: printf_parse+160↓j
.text:000000000000CE28                                         ; printf_parse+16E↓j ...
.text:000000000000CE28                 movzx   ebx, byte ptr [rax]
.text:000000000000CE2B                 mov     rbp, rax
.text:000000000000CE2E
.text:000000000000CE2E loc_CE2E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000CE2E                                         ; printf_parse+565↓j ...
.text:000000000000CE2E                 lea     rax, [rbp+1]
.text:000000000000CE32                 cmp     bl, 27h ; '''
.text:000000000000CE35                 mov     rdx, rax
.text:000000000000CE38                 jnz     short loc_CE00
.text:000000000000CE3A                 or      dword ptr [r12+10h], 1
.text:000000000000CE40                 jmp     short loc_CE28
.text:000000000000CE40 ; ---------------------------------------------------------------------------
.text:000000000000CE42                 align 8
.text:000000000000CE48
.text:000000000000CE48 loc_CE48:                               ; CODE XREF: printf_parse+123↑j
.text:000000000000CE48                 or      dword ptr [r12+10h], 2
.text:000000000000CE4E                 jmp     short loc_CE28
.text:000000000000CE50 ; ---------------------------------------------------------------------------
.text:000000000000CE50
.text:000000000000CE50 loc_CE50:                               ; CODE XREF: printf_parse+128↑j
.text:000000000000CE50                 or      dword ptr [r12+10h], 4
.text:000000000000CE56                 jmp     short loc_CE28
.text:000000000000CE56 ; ---------------------------------------------------------------------------
.text:000000000000CE58                 align 20h
.text:000000000000CE60
.text:000000000000CE60 loc_CE60:                               ; CODE XREF: printf_parse+12D↑j
.text:000000000000CE60                 or      dword ptr [r12+10h], 8
.text:000000000000CE66                 jmp     short loc_CE28
.text:000000000000CE66 ; ---------------------------------------------------------------------------
.text:000000000000CE68                 align 10h
.text:000000000000CE70
.text:000000000000CE70 loc_CE70:                               ; CODE XREF: printf_parse+132↑j
.text:000000000000CE70                 or      dword ptr [r12+10h], 10h
.text:000000000000CE76                 jmp     short loc_CE28
.text:000000000000CE76 ; ---------------------------------------------------------------------------
.text:000000000000CE78                 align 20h
.text:000000000000CE80
.text:000000000000CE80 loc_CE80:                               ; CODE XREF: printf_parse+137↑j
.text:000000000000CE80                 or      dword ptr [r12+10h], 20h
.text:000000000000CE86                 jmp     short loc_CE28
.text:000000000000CE86 ; ---------------------------------------------------------------------------
.text:000000000000CE88                 align 10h
.text:000000000000CE90
.text:000000000000CE90 loc_CE90:                               ; CODE XREF: printf_parse+13C↑j
.text:000000000000CE90                 cmp     bl, 2Ah ; '*'
.text:000000000000CE93                 jz      loc_D049
.text:000000000000CE99                 lea     ecx, [rbx-30h]
.text:000000000000CE9C                 cmp     cl, 9
.text:000000000000CE9F                 jbe     loc_D2B7
.text:000000000000CEA5
.text:000000000000CEA5 loc_CEA5:                               ; CODE XREF: printf_parse+629↓j
.text:000000000000CEA5                                         ; printf_parse+96C↓j
.text:000000000000CEA5                 cmp     bl, 2Eh ; '.'
.text:000000000000CEA8                 jz      loc_D17F
.text:000000000000CEAE
.text:000000000000CEAE loc_CEAE:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000CEAE                                         ; printf_parse+545↓j ...
.text:000000000000CEAE                 xor     eax, eax
.text:000000000000CEB0                 mov     esi, 1
.text:000000000000CEB5                 jmp     short loc_CEE7
.text:000000000000CEB5 ; ---------------------------------------------------------------------------
.text:000000000000CEB7                 align 20h
.text:000000000000CEC0
.text:000000000000CEC0 loc_CEC0:                               ; CODE XREF: printf_parse+20E↓j
.text:000000000000CEC0                 cmp     bl, 4Ch ; 'L'
.text:000000000000CEC3                 jz      short loc_CF00
.text:000000000000CEC5                 cmp     bl, 6Ch ; 'l'
.text:000000000000CEC8                 jz      short loc_CEE0
.text:000000000000CECA                 cmp     bl, 6Ah ; 'j'
.text:000000000000CECD                 jz      short loc_CEE0
.text:000000000000CECF                 mov     edx, ebx
.text:000000000000CED1                 and     edx, 0FFFFFFDFh
.text:000000000000CED4                 cmp     dl, 5Ah ; 'Z'
.text:000000000000CED7                 jz      short loc_CEE0
.text:000000000000CED9                 cmp     bl, 74h ; 't'
.text:000000000000CEDC                 jnz     short loc_CF08
.text:000000000000CEDE                 xchg    ax, ax
.text:000000000000CEE0
.text:000000000000CEE0 loc_CEE0:                               ; CODE XREF: printf_parse+1E8↑j
.text:000000000000CEE0                                         ; printf_parse+1ED↑j ...
.text:000000000000CEE0                 add     eax, 8
.text:000000000000CEE3
.text:000000000000CEE3 loc_CEE3:                               ; CODE XREF: printf_parse+21B↓j
.text:000000000000CEE3                                         ; printf_parse+223↓j
.text:000000000000CEE3                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000CEE7
.text:000000000000CEE7 loc_CEE7:                               ; CODE XREF: printf_parse+1D5↑j
.text:000000000000CEE7                 add     rbp, 1
.text:000000000000CEEB                 cmp     bl, 68h ; 'h'
.text:000000000000CEEE                 jnz     short loc_CEC0
.text:000000000000CEF0                 mov     ecx, eax
.text:000000000000CEF2                 mov     edx, esi
.text:000000000000CEF4                 and     ecx, 1
.text:000000000000CEF7                 shl     edx, cl
.text:000000000000CEF9                 or      eax, edx
.text:000000000000CEFB                 jmp     short loc_CEE3
.text:000000000000CEFB ; ---------------------------------------------------------------------------
.text:000000000000CEFD                 align 20h
.text:000000000000CF00
.text:000000000000CF00 loc_CF00:                               ; CODE XREF: printf_parse+1E3↑j
.text:000000000000CF00                 or      eax, 4
.text:000000000000CF03                 jmp     short loc_CEE3
.text:000000000000CF03 ; ---------------------------------------------------------------------------
.text:000000000000CF05                 align 8
.text:000000000000CF08
.text:000000000000CF08 loc_CF08:                               ; CODE XREF: printf_parse+1FC↑j
.text:000000000000CF08                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000CF0B                 cmp     dl, 53h
.text:000000000000CF0E                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000CF14                 lea     rcx, jpt_CF25
.text:000000000000CF1B                 movzx   edx, dl
.text:000000000000CF1E                 movsxd  rdx, ds:(jpt_CF25 - 100ACh)[rcx+rdx*4]
.text:000000000000CF22                 add     rdx, rcx
.text:000000000000CF25                 jmp     rdx             ; switch jump
.text:000000000000CF27 ; ---------------------------------------------------------------------------
.text:000000000000CF27
.text:000000000000CF27 loc_CF27:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000CF27                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000CF27                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000CF2D                 mov     ebx, 73h ; 's'
.text:000000000000CF32                 nop     word ptr [rax+rax+00h]
.text:000000000000CF38
.text:000000000000CF38 loc_CF38:                               ; CODE XREF: printf_parse+705↓j
.text:000000000000CF38                                         ; printf_parse+70D↓j ...
.text:000000000000CF38                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000CF3C                 jz      loc_D5F7
.text:000000000000CF42                 mov     [r12+50h], r13
.text:000000000000CF47
.text:000000000000CF47 loc_CF47:                               ; CODE XREF: printf_parse+939↓j
.text:000000000000CF47                 cmp     r9, r13
.text:000000000000CF4A                 mov     rcx, [r15+8]
.text:000000000000CF4E                 jbe     loc_D570
.text:000000000000CF54
.text:000000000000CF54 loc_CF54:                               ; CODE XREF: printf_parse+912↓j
.text:000000000000CF54                 mov     rax, [r15]
.text:000000000000CF57                 mov     rdx, rax
.text:000000000000CF5A                 shl     rdx, 5
.text:000000000000CF5E                 add     rdx, rcx
.text:000000000000CF61                 cmp     rax, r13
.text:000000000000CF64                 ja      short loc_CF86
.text:000000000000CF66                 db      2Eh
.text:000000000000CF66                 nop     word ptr [rax+rax+00000000h]
.text:000000000000CF70
.text:000000000000CF70 loc_CF70:                               ; CODE XREF: printf_parse+2A1↓j
.text:000000000000CF70                 add     rax, 1
.text:000000000000CF74                 mov     dword ptr [rdx], 0
.text:000000000000CF7A                 add     rdx, 20h ; ' '
.text:000000000000CF7E                 cmp     rax, r13
.text:000000000000CF81                 jbe     short loc_CF70
.text:000000000000CF83                 mov     [r15], rax
.text:000000000000CF86
.text:000000000000CF86 loc_CF86:                               ; CODE XREF: printf_parse+284↑j
.text:000000000000CF86                 shl     r13, 5
.text:000000000000CF8A                 lea     rax, [rcx+r13]
.text:000000000000CF8E                 mov     edx, [rax]
.text:000000000000CF90                 test    edx, edx
.text:000000000000CF92                 jnz     loc_D563
.text:000000000000CF98                 mov     [rax], r11d
.text:000000000000CF9B
.text:000000000000CF9B loc_CF9B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000CF9B                                         ; printf_parse+886↓j
.text:000000000000CF9B                                         ; DATA XREF: ...
.text:000000000000CF9B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:000000000000CFA0                 mov     rax, [r14]
.text:000000000000CFA3                 mov     [r12+8], rbp
.text:000000000000CFA8                 lea     rbx, [rax+1]
.text:000000000000CFAC                 cmp     r10, rbx
.text:000000000000CFAF                 mov     [r14], rbx
.text:000000000000CFB2                 ja      loc_D040
.text:000000000000CFB8                 test    r10, r10
.text:000000000000CFBB                 js      loc_D967
.text:000000000000CFC1                 add     r10, r10
.text:000000000000CFC4                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000CFCE                 cmp     r10, rax
.text:000000000000CFD1                 ja      loc_D967
.text:000000000000CFD7                 lea     rax, [r10+r10*4]
.text:000000000000CFDB                 mov     rdi, [r14+8]    ; ptr
.text:000000000000CFDF                 cmp     [rsp+88h+var_60], rdi
.text:000000000000CFE4                 mov     [rsp+88h+var_48], r9
.text:000000000000CFE9                 mov     [rsp+88h+var_50], r10
.text:000000000000CFEE                 lea     rax, [r10+rax*2]
.text:000000000000CFF2                 mov     [rsp+88h+var_58], r8
.text:000000000000CFF7                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000CFFF                 jz      loc_D6BD
.text:000000000000D005                 call    _realloc        ; PIC mode
.text:000000000000D00A                 test    rax, rax
.text:000000000000D00D                 mov     rcx, rax
.text:000000000000D010                 mov     r8, [rsp+88h+var_58]
.text:000000000000D015                 mov     r10, [rsp+88h+var_50]
.text:000000000000D01A                 mov     r9, [rsp+88h+var_48]
.text:000000000000D01F                 jz      loc_D967
.text:000000000000D025                 mov     rax, [rsp+88h+var_60]
.text:000000000000D02A                 cmp     rax, [r14+8]
.text:000000000000D02E                 mov     rbx, [r14]
.text:000000000000D031                 jz      loc_D6E0
.text:000000000000D037
.text:000000000000D037 loc_D037:                               ; CODE XREF: printf_parse+A3D↓j
.text:000000000000D037                 mov     [r14+8], rcx
.text:000000000000D03B                 jmp     loc_CD58
.text:000000000000D040 ; ---------------------------------------------------------------------------
.text:000000000000D040
.text:000000000000D040 loc_D040:                               ; CODE XREF: printf_parse+2D2↑j
.text:000000000000D040                 mov     rcx, [r14+8]
.text:000000000000D044                 jmp     loc_CD58
.text:000000000000D049 ; ---------------------------------------------------------------------------
.text:000000000000D049
.text:000000000000D049 loc_D049:                               ; CODE XREF: printf_parse+1B3↑j
.text:000000000000D049                 mov     rsi, [rsp+88h+var_78]
.text:000000000000D04E                 mov     ecx, 1
.text:000000000000D053                 mov     [r12+18h], rbp
.text:000000000000D058                 mov     [r12+20h], rax
.text:000000000000D05D                 test    rsi, rsi
.text:000000000000D060                 cmovnz  rcx, rsi
.text:000000000000D064                 mov     [rsp+88h+var_78], rcx
.text:000000000000D069                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000D06D                 lea     esi, [rcx-30h]
.text:000000000000D070                 cmp     sil, 9
.text:000000000000D074                 jbe     loc_D355
.text:000000000000D07A
.text:000000000000D07A loc_D07A:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000D07A                 mov     rsi, [rsp+88h+var_68]
.text:000000000000D07F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D083                 lea     rdx, [rsi+1]
.text:000000000000D087                 mov     [r12+28h], rsi
.text:000000000000D08C                 jz      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D092                 mov     rbx, [rsp+88h+var_68]
.text:000000000000D097                 mov     rbp, rax
.text:000000000000D09A                 mov     [rsp+88h+var_68], rdx
.text:000000000000D09F
.text:000000000000D09F loc_D09F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000D09F                 cmp     r9, rbx
.text:000000000000D0A2                 mov     rcx, [r15+8]
.text:000000000000D0A6                 ja      loc_D722
.text:000000000000D0AC                 add     r9, r9
.text:000000000000D0AF                 lea     rax, [rbx+1]
.text:000000000000D0B3                 cmp     r9, rbx
.text:000000000000D0B6                 cmovbe  r9, rax
.text:000000000000D0BA                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000D0C4                 cmp     r9, rax
.text:000000000000D0C7                 ja      loc_D96B
.text:000000000000D0CD                 mov     rsi, r9
.text:000000000000D0D0                 mov     [rsp+88h+var_48], r9
.text:000000000000D0D5                 mov     [rsp+88h+var_50], r10
.text:000000000000D0DA                 shl     rsi, 5          ; size
.text:000000000000D0DE                 cmp     [rsp+88h+src], rcx
.text:000000000000D0E3                 mov     [rsp+88h+var_58], r8
.text:000000000000D0E8                 jz      loc_D801
.text:000000000000D0EE                 mov     rdi, rcx        ; ptr
.text:000000000000D0F1                 call    _realloc        ; PIC mode
.text:000000000000D0F6                 mov     rdx, [r15+8]
.text:000000000000D0FA                 mov     r8, [rsp+88h+var_58]
.text:000000000000D0FF                 mov     rcx, rax
.text:000000000000D102                 mov     r10, [rsp+88h+var_50]
.text:000000000000D107                 mov     r9, [rsp+88h+var_48]
.text:000000000000D10C
.text:000000000000D10C loc_D10C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000D10C                 test    rcx, rcx
.text:000000000000D10F                 jz      loc_D9C7
.text:000000000000D115                 cmp     [rsp+88h+src], rdx
.text:000000000000D11A                 mov     rax, [r15]
.text:000000000000D11D                 jz      loc_D8DB
.text:000000000000D123
.text:000000000000D123 loc_D123:                               ; CODE XREF: printf_parse+C33↓j
.text:000000000000D123                 mov     [r15+8], rcx
.text:000000000000D127
.text:000000000000D127 loc_D127:                               ; CODE XREF: printf_parse+A45↓j
.text:000000000000D127                 mov     rdx, rax
.text:000000000000D12A                 shl     rdx, 5
.text:000000000000D12E                 add     rdx, rcx
.text:000000000000D131                 cmp     rax, rbx
.text:000000000000D134                 ja      short loc_D156
.text:000000000000D136                 db      2Eh
.text:000000000000D136                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D140
.text:000000000000D140 loc_D140:                               ; CODE XREF: printf_parse+471↓j
.text:000000000000D140                 add     rax, 1
.text:000000000000D144                 mov     dword ptr [rdx], 0
.text:000000000000D14A                 add     rdx, 20h ; ' '
.text:000000000000D14E                 cmp     rax, rbx
.text:000000000000D151                 jbe     short loc_D140
.text:000000000000D153                 mov     [r15], rax
.text:000000000000D156
.text:000000000000D156 loc_D156:                               ; CODE XREF: printf_parse+454↑j
.text:000000000000D156                 shl     rbx, 5
.text:000000000000D15A                 lea     rax, [rcx+rbx]
.text:000000000000D15E                 mov     edx, [rax]
.text:000000000000D160                 test    edx, edx
.text:000000000000D162                 jnz     loc_D63B
.text:000000000000D168                 mov     dword ptr [rax], 5
.text:000000000000D16E                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000D172                 lea     rdx, [rbp+1]
.text:000000000000D176                 cmp     bl, 2Eh ; '.'
.text:000000000000D179                 jnz     loc_CEAE
.text:000000000000D17F
.text:000000000000D17F loc_D17F:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000D17F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:000000000000D183                 mov     [r12+30h], rbp
.text:000000000000D188                 jnz     loc_D30E
.text:000000000000D18E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000D193                 lea     r11, [rbp+2]
.text:000000000000D197                 mov     eax, 2
.text:000000000000D19C                 mov     [r12+38h], r11
.text:000000000000D1A1                 cmp     rsi, 2
.text:000000000000D1A5                 cmovnb  rax, rsi
.text:000000000000D1A9                 mov     [rsp+88h+var_70], rax
.text:000000000000D1AE                 movsx   eax, byte ptr [rbp+2]
.text:000000000000D1B2                 lea     edx, [rax-30h]
.text:000000000000D1B5                 cmp     dl, 9
.text:000000000000D1B8                 jbe     loc_D84C
.text:000000000000D1BE
.text:000000000000D1BE loc_D1BE:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000D1BE                 mov     rbx, [r12+40h]
.text:000000000000D1C3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D1C7                 jz      loc_D825
.text:000000000000D1CD
.text:000000000000D1CD loc_D1CD:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000D1CD                                         ; printf_parse+C59↓j
.text:000000000000D1CD                 cmp     r9, rbx
.text:000000000000D1D0                 mov     rcx, [r15+8]
.text:000000000000D1D4                 jbe     loc_D73F
.text:000000000000D1DA                 mov     rax, [r15]
.text:000000000000D1DD
.text:000000000000D1DD loc_D1DD:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000D1DD                 mov     rdx, rax
.text:000000000000D1E0                 shl     rdx, 5
.text:000000000000D1E4                 add     rdx, rcx
.text:000000000000D1E7                 cmp     rax, rbx
.text:000000000000D1EA                 ja      short loc_D206
.text:000000000000D1EC                 nop     dword ptr [rax+00h]
.text:000000000000D1F0
.text:000000000000D1F0 loc_D1F0:                               ; CODE XREF: printf_parse+521↓j
.text:000000000000D1F0                 add     rax, 1
.text:000000000000D1F4                 mov     dword ptr [rdx], 0
.text:000000000000D1FA                 add     rdx, 20h ; ' '
.text:000000000000D1FE                 cmp     rax, rbx
.text:000000000000D201                 jbe     short loc_D1F0
.text:000000000000D203                 mov     [r15], rax
.text:000000000000D206
.text:000000000000D206 loc_D206:                               ; CODE XREF: printf_parse+50A↑j
.text:000000000000D206                 shl     rbx, 5
.text:000000000000D20A                 lea     rax, [rcx+rbx]
.text:000000000000D20E                 mov     edx, [rax]
.text:000000000000D210                 test    edx, edx
.text:000000000000D212                 jnz     loc_D72A
.text:000000000000D218                 mov     dword ptr [rax], 5
.text:000000000000D21E                 mov     rbp, r11
.text:000000000000D221                 movzx   ebx, byte ptr [r11]
.text:000000000000D225                 jmp     loc_CEAE
.text:000000000000D22A ; ---------------------------------------------------------------------------
.text:000000000000D22A
.text:000000000000D22A loc_D22A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000D22A                 mov     rax, rbp
.text:000000000000D22D                 nop     dword ptr [rax]
.text:000000000000D230
.text:000000000000D230 loc_D230:                               ; CODE XREF: printf_parse+55D↓j
.text:000000000000D230                 add     rax, 1
.text:000000000000D234                 movzx   edx, byte ptr [rax]
.text:000000000000D237                 lea     ecx, [rdx-30h]
.text:000000000000D23A                 cmp     cl, 9
.text:000000000000D23D                 jbe     short loc_D230
.text:000000000000D23F                 cmp     dl, 24h ; '$'
.text:000000000000D242                 mov     r13, r8
.text:000000000000D245                 jnz     loc_CE2E
.text:000000000000D24B                 xor     edx, edx
.text:000000000000D24D
.text:000000000000D24D loc_D24D:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000D24D                 movsx   eax, bl
.text:000000000000D250                 mov     rdi, 1999999999999999h
.text:000000000000D25A                 mov     rsi, r8
.text:000000000000D25D                 sub     eax, 30h ; '0'
.text:000000000000D260                 cmp     rdx, rdi
.text:000000000000D263                 cdqe
.text:000000000000D265                 ja      short loc_D26E
.text:000000000000D267                 lea     rsi, [rdx+rdx*4]
.text:000000000000D26B                 add     rsi, rsi
.text:000000000000D26E
.text:000000000000D26E loc_D26E:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000D26E                 mov     rcx, rbp
.text:000000000000D271
.text:000000000000D271 loc_D271:                               ; CODE XREF: printf_parse+956↓j
.text:000000000000D271                 add     rax, rsi
.text:000000000000D274                 movzx   ebx, byte ptr [rbp+1]
.text:000000000000D278                 setb    sil
.text:000000000000D27C                 add     rbp, 1
.text:000000000000D280                 mov     rdx, rax
.text:000000000000D283                 movzx   esi, sil
.text:000000000000D287                 test    rsi, rsi
.text:000000000000D28A                 lea     edi, [rbx-30h]
.text:000000000000D28D                 jnz     loc_D61E
.text:000000000000D293                 cmp     dil, 9
.text:000000000000D297                 jbe     short loc_D24D
.text:000000000000D299                 mov     r13, rax
.text:000000000000D29C                 sub     r13, 1
.text:000000000000D2A0                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:000000000000D2A4                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D2AA                 lea     rbp, [rcx+2]
.text:000000000000D2AE                 movzx   ebx, byte ptr [rcx+2]
.text:000000000000D2B2                 jmp     loc_CE2E
.text:000000000000D2B7 ; ---------------------------------------------------------------------------
.text:000000000000D2B7
.text:000000000000D2B7 loc_D2B7:                               ; CODE XREF: printf_parse+1BF↑j
.text:000000000000D2B7                 mov     [r12+18h], rbp
.text:000000000000D2BC                 movzx   edi, byte ptr [rbp+0]
.text:000000000000D2C0                 mov     rsi, rbp
.text:000000000000D2C3                 lea     ecx, [rdi-30h]
.text:000000000000D2C6                 cmp     cl, 9
.text:000000000000D2C9                 jbe     short loc_D2D7
.text:000000000000D2CB                 jmp     short loc_D300
.text:000000000000D2CB ; ---------------------------------------------------------------------------
.text:000000000000D2CD                 align 10h
.text:000000000000D2D0
.text:000000000000D2D0 loc_D2D0:                               ; CODE XREF: printf_parse+600↓j
.text:000000000000D2D0                 mov     rbp, rax
.text:000000000000D2D3                 add     rax, 1
.text:000000000000D2D7
.text:000000000000D2D7 loc_D2D7:                               ; CODE XREF: printf_parse+5E9↑j
.text:000000000000D2D7                 movzx   edi, byte ptr [rax]
.text:000000000000D2DA                 lea     edx, [rdi-30h]
.text:000000000000D2DD                 cmp     dl, 9
.text:000000000000D2E0                 jbe     short loc_D2D0
.text:000000000000D2E2                 mov     rcx, rax
.text:000000000000D2E5                 lea     rdx, [rbp+2]
.text:000000000000D2E9                 mov     rbp, rax
.text:000000000000D2EC                 sub     rcx, rsi
.text:000000000000D2EF                 mov     rsi, [rsp+88h+var_78]
.text:000000000000D2F4                 cmp     rsi, rcx
.text:000000000000D2F7                 cmovnb  rcx, rsi
.text:000000000000D2FB                 mov     [rsp+88h+var_78], rcx
.text:000000000000D300
.text:000000000000D300 loc_D300:                               ; CODE XREF: printf_parse+5EB↑j
.text:000000000000D300                 mov     [r12+20h], rbp
.text:000000000000D305                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000D309                 jmp     loc_CEA5
.text:000000000000D30E ; ---------------------------------------------------------------------------
.text:000000000000D30E
.text:000000000000D30E loc_D30E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000D30E                 movzx   eax, byte ptr [rbp+1]
.text:000000000000D312                 sub     eax, 30h ; '0'
.text:000000000000D315                 cmp     al, 9
.text:000000000000D317                 ja      short loc_D32E
.text:000000000000D319                 nop     dword ptr [rax+00000000h]
.text:000000000000D320
.text:000000000000D320 loc_D320:                               ; CODE XREF: printf_parse+64C↓j
.text:000000000000D320                 add     rdx, 1
.text:000000000000D324                 movzx   eax, byte ptr [rdx]
.text:000000000000D327                 sub     eax, 30h ; '0'
.text:000000000000D32A                 cmp     al, 9
.text:000000000000D32C                 jbe     short loc_D320
.text:000000000000D32E
.text:000000000000D32E loc_D32E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000D32E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000D333                 mov     rax, rdx
.text:000000000000D336                 mov     [r12+38h], rdx
.text:000000000000D33B                 sub     rax, rbp
.text:000000000000D33E                 movzx   ebx, byte ptr [rdx]
.text:000000000000D341                 mov     rbp, rdx
.text:000000000000D344                 cmp     rsi, rax
.text:000000000000D347                 cmovnb  rax, rsi
.text:000000000000D34B                 mov     [rsp+88h+var_70], rax
.text:000000000000D350                 jmp     loc_CEAE
.text:000000000000D355 ; ---------------------------------------------------------------------------
.text:000000000000D355
.text:000000000000D355 loc_D355:                               ; CODE XREF: printf_parse+394↑j
.text:000000000000D355                 mov     rsi, rax
.text:000000000000D358
.text:000000000000D358 loc_D358:                               ; CODE XREF: printf_parse+687↓j
.text:000000000000D358                 add     rsi, 1
.text:000000000000D35C                 movzx   edi, byte ptr [rsi]
.text:000000000000D35F                 lea     r11d, [rdi-30h]
.text:000000000000D363                 cmp     r11b, 9
.text:000000000000D367                 jbe     short loc_D358
.text:000000000000D369                 cmp     dil, 24h ; '$'
.text:000000000000D36D                 jnz     loc_D07A
.text:000000000000D373                 xor     esi, esi
.text:000000000000D375
.text:000000000000D375 loc_D375:                               ; CODE XREF: printf_parse+6DE↓j
.text:000000000000D375                 movsx   eax, cl
.text:000000000000D378                 mov     rdi, 1999999999999999h
.text:000000000000D382                 mov     rcx, r8
.text:000000000000D385                 sub     eax, 30h ; '0'
.text:000000000000D388                 cmp     rsi, rdi
.text:000000000000D38B                 cdqe
.text:000000000000D38D                 ja      short loc_D396
.text:000000000000D38F                 lea     rcx, [rsi+rsi*4]
.text:000000000000D393                 add     rcx, rcx
.text:000000000000D396
.text:000000000000D396 loc_D396:                               ; CODE XREF: printf_parse+6AD↑j
.text:000000000000D396                 mov     rbp, rdx
.text:000000000000D399
.text:000000000000D399 loc_D399:                               ; CODE XREF: printf_parse+BF6↓j
.text:000000000000D399                 xor     r11d, r11d
.text:000000000000D39C                 add     rax, rcx
.text:000000000000D39F                 movzx   ecx, byte ptr [rdx+1]
.text:000000000000D3A3                 setb    r11b
.text:000000000000D3A7                 add     rdx, 1
.text:000000000000D3AB                 mov     rsi, rax
.text:000000000000D3AE                 test    r11, r11
.text:000000000000D3B1                 lea     edi, [rcx-30h]
.text:000000000000D3B4                 jnz     loc_D8BE
.text:000000000000D3BA                 cmp     dil, 9
.text:000000000000D3BE                 jbe     short loc_D375
.text:000000000000D3C0                 lea     rbx, [rax-1]
.text:000000000000D3C4                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000D3C8                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D3CE                 mov     [r12+28h], rbx
.text:000000000000D3D3                 add     rbp, 2
.text:000000000000D3D7                 jmp     loc_D09F
.text:000000000000D3DC ; ---------------------------------------------------------------------------
.text:000000000000D3DC
.text:000000000000D3DC loc_D3DC:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D3DC                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D3DC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000D3DF                 mov     r11d, 16h
.text:000000000000D3E5                 jg      loc_CF38
.text:000000000000D3EB                 test    al, 4
.text:000000000000D3ED                 jnz     loc_CF38
.text:000000000000D3F3                 cmp     eax, 7
.text:000000000000D3F6                 mov     r11d, 15h
.text:000000000000D3FC                 jg      loc_CF38
.text:000000000000D402                 test    al, 2
.text:000000000000D404                 mov     r11d, 12h
.text:000000000000D40A                 jnz     loc_CF38
.text:000000000000D410                 xor     r11d, r11d
.text:000000000000D413                 test    al, 1
.text:000000000000D415                 setz    r11b
.text:000000000000D419                 add     r11d, 13h
.text:000000000000D41D                 jmp     loc_CF38
.text:000000000000D41D ; ---------------------------------------------------------------------------
.text:000000000000D422                 align 8
.text:000000000000D428
.text:000000000000D428 loc_D428:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D428                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D428                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000D42B                 cmp     eax, 7
.text:000000000000D42E                 setnle  r11b
.text:000000000000D432                 add     r11d, 0Dh
.text:000000000000D436                 jmp     loc_CF38
.text:000000000000D43B ; ---------------------------------------------------------------------------
.text:000000000000D43B
.text:000000000000D43B loc_D43B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D43B                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D43B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000D43E                 mov     r11d, 9
.text:000000000000D444                 jg      loc_CF38
.text:000000000000D44A                 test    al, 4
.text:000000000000D44C                 jnz     loc_CF38
.text:000000000000D452                 cmp     eax, 7
.text:000000000000D455                 mov     r11d, 7
.text:000000000000D45B                 jg      loc_CF38
.text:000000000000D461                 test    al, 2
.text:000000000000D463                 mov     r11d, 1
.text:000000000000D469                 jnz     loc_CF38
.text:000000000000D46F                 and     eax, 1
.text:000000000000D472                 cmp     eax, 1
.text:000000000000D475                 sbb     r11d, r11d
.text:000000000000D478                 and     r11d, 2
.text:000000000000D47C                 add     r11d, 3
.text:000000000000D480                 jmp     loc_CF38
.text:000000000000D480 ; ---------------------------------------------------------------------------
.text:000000000000D485                 align 8
.text:000000000000D488
.text:000000000000D488 loc_D488:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D488                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D488                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000D48B                 cmp     eax, 7
.text:000000000000D48E                 setnle  r11b
.text:000000000000D492                 add     r11d, 0Fh
.text:000000000000D496                 jmp     loc_CF38
.text:000000000000D49B ; ---------------------------------------------------------------------------
.text:000000000000D49B
.text:000000000000D49B loc_D49B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D49B                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D49B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000D49E                 mov     r11d, 0Ch
.text:000000000000D4A4                 jg      loc_CF38
.text:000000000000D4AA                 xor     r11d, r11d
.text:000000000000D4AD                 test    al, 4
.text:000000000000D4AF                 setnz   r11b
.text:000000000000D4B3                 add     r11d, 0Bh
.text:000000000000D4B7                 jmp     loc_CF38
.text:000000000000D4BC ; ---------------------------------------------------------------------------
.text:000000000000D4BC
.text:000000000000D4BC loc_D4BC:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D4BC                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D4BC                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:000000000000D4C2                 mov     ebx, 63h ; 'c'
.text:000000000000D4C7                 jmp     loc_CF38
.text:000000000000D4CC ; ---------------------------------------------------------------------------
.text:000000000000D4CC
.text:000000000000D4CC loc_D4CC:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D4CC                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D4CC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000D4CF                 mov     r11d, 0Ah
.text:000000000000D4D5                 jg      loc_CF38
.text:000000000000D4DB                 test    al, 4
.text:000000000000D4DD                 jnz     loc_CF38
.text:000000000000D4E3                 cmp     eax, 7
.text:000000000000D4E6                 mov     r11d, 8
.text:000000000000D4EC                 jg      loc_CF38
.text:000000000000D4F2                 test    al, 2
.text:000000000000D4F4                 mov     r11d, 2
.text:000000000000D4FA                 jnz     loc_CF38
.text:000000000000D500                 and     eax, 1
.text:000000000000D503                 cmp     eax, 1
.text:000000000000D506                 sbb     r11d, r11d
.text:000000000000D509                 and     r11d, 2
.text:000000000000D50D                 add     r11d, 4
.text:000000000000D511                 jmp     loc_CF38
.text:000000000000D511 ; ---------------------------------------------------------------------------
.text:000000000000D516                 align 20h
.text:000000000000D520
.text:000000000000D520 loc_D520:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000D520                                         ; DATA XREF: .rodata:jpt_CF25↓o
.text:000000000000D520                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:000000000000D526                 jmp     loc_CF38
.text:000000000000D52B ; ---------------------------------------------------------------------------
.text:000000000000D52B
.text:000000000000D52B def_CF25:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000D52B                                         ; printf_parse+245↑j ...
.text:000000000000D52B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D52F
.text:000000000000D52F loc_D52F:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000D52F                                         ; printf_parse+95E↓j ...
.text:000000000000D52F                 cmp     [rsp+88h+src], rcx
.text:000000000000D534                 jz      short loc_D53E
.text:000000000000D536                 mov     rdi, rcx        ; ptr
.text:000000000000D539                 call    _free           ; PIC mode
.text:000000000000D53E
.text:000000000000D53E loc_D53E:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000D53E                 mov     rdi, [r14+8]    ; ptr
.text:000000000000D542                 cmp     [rsp+88h+var_60], rdi
.text:000000000000D547                 jz      short loc_D54E
.text:000000000000D549                 call    _free           ; PIC mode
.text:000000000000D54E
.text:000000000000D54E loc_D54E:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000D54E                 call    ___errno_location ; PIC mode
.text:000000000000D553                 mov     dword ptr [rax], 16h
.text:000000000000D559                 mov     eax, 0FFFFFFFFh
.text:000000000000D55E                 jmp     loc_CD82
.text:000000000000D563 ; ---------------------------------------------------------------------------
.text:000000000000D563
.text:000000000000D563 loc_D563:                               ; CODE XREF: printf_parse+2B2↑j
.text:000000000000D563                 cmp     edx, r11d
.text:000000000000D566                 jz      loc_CF9B        ; jumptable 0000000000000245 case 37
.text:000000000000D56C                 jmp     short loc_D52F
.text:000000000000D56C ; ---------------------------------------------------------------------------
.text:000000000000D56E                 align 10h
.text:000000000000D570
.text:000000000000D570 loc_D570:                               ; CODE XREF: printf_parse+26E↑j
.text:000000000000D570                 add     r9, r9
.text:000000000000D573                 lea     rax, [r13+1]
.text:000000000000D577                 cmp     r9, r13
.text:000000000000D57A                 cmovbe  r9, rax
.text:000000000000D57E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000D588                 cmp     r9, rax
.text:000000000000D58B                 ja      loc_D96B
.text:000000000000D591                 mov     rsi, r9
.text:000000000000D594                 mov     [rsp+88h+var_40], r9
.text:000000000000D599                 mov     [rsp+88h+var_48], r10
.text:000000000000D59E                 shl     rsi, 5          ; size
.text:000000000000D5A2                 cmp     [rsp+88h+src], rcx
.text:000000000000D5A7                 mov     [rsp+88h+var_50], r8
.text:000000000000D5AC                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000D5B1                 jz      loc_D651
.text:000000000000D5B7                 mov     rdi, rcx        ; ptr
.text:000000000000D5BA                 call    _realloc        ; PIC mode
.text:000000000000D5BF                 test    rax, rax
.text:000000000000D5C2                 mov     rcx, rax
.text:000000000000D5C5                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000D5CA                 mov     r8, [rsp+88h+var_50]
.text:000000000000D5CF                 mov     r10, [rsp+88h+var_48]
.text:000000000000D5D4                 mov     r9, [rsp+88h+var_40]
.text:000000000000D5D9                 jz      loc_D967
.text:000000000000D5DF                 mov     rax, [rsp+88h+src]
.text:000000000000D5E4                 cmp     rax, [r15+8]
.text:000000000000D5E8                 jz      loc_D679
.text:000000000000D5EE
.text:000000000000D5EE loc_D5EE:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000D5EE                 mov     [r15+8], rcx
.text:000000000000D5F2                 jmp     loc_CF54
.text:000000000000D5F7 ; ---------------------------------------------------------------------------
.text:000000000000D5F7
.text:000000000000D5F7 loc_D5F7:                               ; CODE XREF: printf_parse+25C↑j
.text:000000000000D5F7                 mov     rsi, [rsp+88h+var_68]
.text:000000000000D5FC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D600                 lea     rax, [rsi+1]
.text:000000000000D604                 mov     [r12+50h], rsi
.text:000000000000D609                 jz      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D60F                 mov     r13, [rsp+88h+var_68]
.text:000000000000D614                 mov     [rsp+88h+var_68], rax
.text:000000000000D619                 jmp     loc_CF47
.text:000000000000D61E ; ---------------------------------------------------------------------------
.text:000000000000D61E
.text:000000000000D61E loc_D61E:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000D61E                 cmp     dil, 9
.text:000000000000D622                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D628                 movsx   eax, bl
.text:000000000000D62B                 mov     rsi, r8
.text:000000000000D62E                 mov     rcx, rbp
.text:000000000000D631                 sub     eax, 30h ; '0'
.text:000000000000D634                 cdqe
.text:000000000000D636                 jmp     loc_D271
.text:000000000000D63B ; ---------------------------------------------------------------------------
.text:000000000000D63B
.text:000000000000D63B loc_D63B:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000D63B                 cmp     edx, 5
.text:000000000000D63E                 jnz     loc_D52F
.text:000000000000D644                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000D648                 lea     rdx, [rbp+1]
.text:000000000000D64C                 jmp     loc_CEA5
.text:000000000000D651 ; ---------------------------------------------------------------------------
.text:000000000000D651
.text:000000000000D651 loc_D651:                               ; CODE XREF: printf_parse+8D1↑j
.text:000000000000D651                 mov     rdi, rsi        ; size
.text:000000000000D654                 call    _malloc         ; PIC mode
.text:000000000000D659                 test    rax, rax
.text:000000000000D65C                 mov     rcx, rax
.text:000000000000D65F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000D664                 mov     r8, [rsp+88h+var_50]
.text:000000000000D669                 mov     r10, [rsp+88h+var_48]
.text:000000000000D66E                 mov     r9, [rsp+88h+var_40]
.text:000000000000D673                 jz      loc_D7DC
.text:000000000000D679
.text:000000000000D679 loc_D679:                               ; CODE XREF: printf_parse+908↑j
.text:000000000000D679                 mov     rdx, [r15]
.text:000000000000D67C                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000D681                 mov     rdi, rcx        ; dest
.text:000000000000D684                 mov     [rsp+88h+var_40], r9
.text:000000000000D689                 mov     [rsp+88h+var_48], r10
.text:000000000000D68E                 mov     [rsp+88h+var_50], r8
.text:000000000000D693                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000D698                 shl     rdx, 5          ; n
.text:000000000000D69C                 call    _memcpy         ; PIC mode
.text:000000000000D6A1                 mov     r9, [rsp+88h+var_40]
.text:000000000000D6A6                 mov     r10, [rsp+88h+var_48]
.text:000000000000D6AB                 mov     rcx, rax
.text:000000000000D6AE                 mov     r8, [rsp+88h+var_50]
.text:000000000000D6B3                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000D6B8                 jmp     loc_D5EE
.text:000000000000D6BD ; ---------------------------------------------------------------------------
.text:000000000000D6BD
.text:000000000000D6BD loc_D6BD:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000D6BD                 mov     rdi, rsi        ; size
.text:000000000000D6C0                 call    _malloc         ; PIC mode
.text:000000000000D6C5                 test    rax, rax
.text:000000000000D6C8                 mov     rcx, rax
.text:000000000000D6CB                 mov     r8, [rsp+88h+var_58]
.text:000000000000D6D0                 mov     r10, [rsp+88h+var_50]
.text:000000000000D6D5                 mov     r9, [rsp+88h+var_48]
.text:000000000000D6DA                 jz      loc_D7C9
.text:000000000000D6E0
.text:000000000000D6E0 loc_D6E0:                               ; CODE XREF: printf_parse+351↑j
.text:000000000000D6E0                 lea     rax, [rbx+rbx*4]
.text:000000000000D6E4                 mov     rsi, [rsp+88h+var_60] ; src
.text:000000000000D6E9                 mov     rdi, rcx        ; dest
.text:000000000000D6EC                 mov     [rsp+88h+var_48], r9
.text:000000000000D6F1                 mov     [rsp+88h+var_50], r10
.text:000000000000D6F6                 lea     rdx, [rbx+rax*2]
.text:000000000000D6FA                 mov     [rsp+88h+var_58], r8
.text:000000000000D6FF                 shl     rdx, 3          ; n
.text:000000000000D703                 call    _memcpy         ; PIC mode
.text:000000000000D708                 mov     rbx, [r14]
.text:000000000000D70B                 mov     rcx, rax
.text:000000000000D70E                 mov     r9, [rsp+88h+var_48]
.text:000000000000D713                 mov     r10, [rsp+88h+var_50]
.text:000000000000D718                 mov     r8, [rsp+88h+var_58]
.text:000000000000D71D                 jmp     loc_D037
.text:000000000000D722 ; ---------------------------------------------------------------------------
.text:000000000000D722
.text:000000000000D722 loc_D722:                               ; CODE XREF: printf_parse+3C6↑j
.text:000000000000D722                 mov     rax, [r15]
.text:000000000000D725                 jmp     loc_D127
.text:000000000000D72A ; ---------------------------------------------------------------------------
.text:000000000000D72A
.text:000000000000D72A loc_D72A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000D72A                 cmp     edx, 5
.text:000000000000D72D                 jnz     loc_D52F
.text:000000000000D733                 movzx   ebx, byte ptr [r11]
.text:000000000000D737                 mov     rbp, r11
.text:000000000000D73A                 jmp     loc_CEAE
.text:000000000000D73F ; ---------------------------------------------------------------------------
.text:000000000000D73F
.text:000000000000D73F loc_D73F:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000D73F                 add     r9, r9
.text:000000000000D742                 lea     rax, [rbx+1]
.text:000000000000D746                 cmp     r9, rbx
.text:000000000000D749                 cmovbe  r9, rax
.text:000000000000D74D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000D757                 cmp     r9, rax
.text:000000000000D75A                 ja      loc_D96B
.text:000000000000D760                 mov     rsi, r9
.text:000000000000D763                 mov     [rsp+88h+var_40], r9
.text:000000000000D768                 mov     [rsp+88h+var_48], r10
.text:000000000000D76D                 shl     rsi, 5          ; size
.text:000000000000D771                 cmp     [rsp+88h+src], rcx
.text:000000000000D776                 mov     [rsp+88h+var_50], r8
.text:000000000000D77B                 mov     [rsp+88h+var_58], r11
.text:000000000000D780                 jz      loc_D93E
.text:000000000000D786                 mov     rdi, rcx        ; ptr
.text:000000000000D789                 call    _realloc        ; PIC mode
.text:000000000000D78E                 mov     rdx, [r15+8]
.text:000000000000D792                 mov     r11, [rsp+88h+var_58]
.text:000000000000D797                 mov     rcx, rax
.text:000000000000D79A                 mov     r8, [rsp+88h+var_50]
.text:000000000000D79F                 mov     r10, [rsp+88h+var_48]
.text:000000000000D7A4                 mov     r9, [rsp+88h+var_40]
.text:000000000000D7A9
.text:000000000000D7A9 loc_D7A9:                               ; CODE XREF: printf_parse+C82↓j
.text:000000000000D7A9                 test    rcx, rcx
.text:000000000000D7AC                 jz      loc_D9C7
.text:000000000000D7B2                 cmp     [rsp+88h+src], rdx
.text:000000000000D7B7                 mov     rax, [r15]
.text:000000000000D7BA                 jz      loc_D980
.text:000000000000D7C0
.text:000000000000D7C0 loc_D7C0:                               ; CODE XREF: printf_parse+CE2↓j
.text:000000000000D7C0                 mov     [r15+8], rcx
.text:000000000000D7C4                 jmp     loc_D1DD
.text:000000000000D7C9 ; ---------------------------------------------------------------------------
.text:000000000000D7C9
.text:000000000000D7C9 loc_D7C9:                               ; CODE XREF: printf_parse+9FA↑j
.text:000000000000D7C9                 mov     rcx, [r15+8]
.text:000000000000D7CD                 cmp     [rsp+88h+src], rcx
.text:000000000000D7D2                 jz      short loc_D7EC
.text:000000000000D7D4
.text:000000000000D7D4 loc_D7D4:                               ; CODE XREF: printf_parse+C90↓j
.text:000000000000D7D4                 mov     rdi, rcx        ; ptr
.text:000000000000D7D7                 call    _free           ; PIC mode
.text:000000000000D7DC
.text:000000000000D7DC loc_D7DC:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000D7DC                                         ; printf_parse+C96↓j
.text:000000000000D7DC                 mov     rdi, [r14+8]    ; ptr
.text:000000000000D7E0                 cmp     [rsp+88h+var_60], rdi
.text:000000000000D7E5                 jz      short loc_D7EC
.text:000000000000D7E7                 call    _free           ; PIC mode
.text:000000000000D7EC
.text:000000000000D7EC loc_D7EC:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000D7EC                                         ; printf_parse+B05↑j
.text:000000000000D7EC                 call    ___errno_location ; PIC mode
.text:000000000000D7F1                 mov     dword ptr [rax], 0Ch
.text:000000000000D7F7                 mov     eax, 0FFFFFFFFh
.text:000000000000D7FC                 jmp     loc_CD82
.text:000000000000D801 ; ---------------------------------------------------------------------------
.text:000000000000D801
.text:000000000000D801 loc_D801:                               ; CODE XREF: printf_parse+408↑j
.text:000000000000D801                 mov     rdi, rsi        ; size
.text:000000000000D804                 call    _malloc         ; PIC mode
.text:000000000000D809                 mov     rdx, [rsp+88h+src]
.text:000000000000D80E                 mov     rcx, rax
.text:000000000000D811                 mov     r9, [rsp+88h+var_48]
.text:000000000000D816                 mov     r10, [rsp+88h+var_50]
.text:000000000000D81B                 mov     r8, [rsp+88h+var_58]
.text:000000000000D820                 jmp     loc_D10C
.text:000000000000D825 ; ---------------------------------------------------------------------------
.text:000000000000D825
.text:000000000000D825 loc_D825:                               ; CODE XREF: printf_parse+4E7↑j
.text:000000000000D825                 mov     rsi, [rsp+88h+var_68]
.text:000000000000D82A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D82E                 lea     rax, [rsi+1]
.text:000000000000D832                 mov     [r12+40h], rsi
.text:000000000000D837                 jz      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D83D                 mov     rbx, [rsp+88h+var_68]
.text:000000000000D842                 mov     [rsp+88h+var_68], rax
.text:000000000000D847                 jmp     loc_D1CD
.text:000000000000D84C ; ---------------------------------------------------------------------------
.text:000000000000D84C
.text:000000000000D84C loc_D84C:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000D84C                 mov     rdx, r11
.text:000000000000D84F
.text:000000000000D84F loc_D84F:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000D84F                 add     rdx, 1
.text:000000000000D853                 movzx   ecx, byte ptr [rdx]
.text:000000000000D856                 lea     esi, [rcx-30h]
.text:000000000000D859                 cmp     sil, 9
.text:000000000000D85D                 jbe     short loc_D84F
.text:000000000000D85F                 cmp     cl, 24h ; '$'
.text:000000000000D862                 jnz     loc_D1BE
.text:000000000000D868                 xor     ecx, ecx
.text:000000000000D86A
.text:000000000000D86A loc_D86A:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000D86A                 mov     rsi, 1999999999999999h
.text:000000000000D874                 sub     eax, 30h ; '0'
.text:000000000000D877                 mov     rdx, r8
.text:000000000000D87A                 cmp     rcx, rsi
.text:000000000000D87D                 cdqe
.text:000000000000D87F                 ja      short loc_D888
.text:000000000000D881                 lea     rdx, [rcx+rcx*4]
.text:000000000000D885                 add     rdx, rdx
.text:000000000000D888
.text:000000000000D888 loc_D888:                               ; CODE XREF: printf_parse+B9F↑j
.text:000000000000D888                 mov     rsi, r11
.text:000000000000D88B
.text:000000000000D88B loc_D88B:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000D88B                 xor     ebx, ebx
.text:000000000000D88D                 add     rdx, rax
.text:000000000000D890                 movsx   eax, byte ptr [r11+1]
.text:000000000000D895                 setb    bl
.text:000000000000D898                 add     r11, 1
.text:000000000000D89C                 mov     rcx, rdx
.text:000000000000D89F                 test    rbx, rbx
.text:000000000000D8A2                 lea     edi, [rax-30h]
.text:000000000000D8A5                 jz      short loc_D918
.text:000000000000D8A7                 cmp     dil, 9
.text:000000000000D8AB                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D8B1                 sub     eax, 30h ; '0'
.text:000000000000D8B4                 mov     rdx, r8
.text:000000000000D8B7                 mov     rsi, r11
.text:000000000000D8BA                 cdqe
.text:000000000000D8BC                 jmp     short loc_D88B
.text:000000000000D8BE ; ---------------------------------------------------------------------------
.text:000000000000D8BE
.text:000000000000D8BE loc_D8BE:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000D8BE                 cmp     dil, 9
.text:000000000000D8C2                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D8C8                 movsx   eax, cl
.text:000000000000D8CB                 mov     rbp, rdx
.text:000000000000D8CE                 mov     rcx, r8
.text:000000000000D8D1                 sub     eax, 30h ; '0'
.text:000000000000D8D4                 cdqe
.text:000000000000D8D6                 jmp     loc_D399
.text:000000000000D8DB ; ---------------------------------------------------------------------------
.text:000000000000D8DB
.text:000000000000D8DB loc_D8DB:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000D8DB                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000D8E0                 shl     rax, 5
.text:000000000000D8E4                 mov     rdi, rcx        ; dest
.text:000000000000D8E7                 mov     rdx, rax        ; n
.text:000000000000D8EA                 mov     [rsp+88h+var_48], r9
.text:000000000000D8EF                 mov     [rsp+88h+var_50], r10
.text:000000000000D8F4                 mov     [rsp+88h+var_58], r8
.text:000000000000D8F9                 call    _memcpy         ; PIC mode
.text:000000000000D8FE                 mov     r9, [rsp+88h+var_48]
.text:000000000000D903                 mov     rcx, rax
.text:000000000000D906                 mov     r10, [rsp+88h+var_50]
.text:000000000000D90B                 mov     rax, [r15]
.text:000000000000D90E                 mov     r8, [rsp+88h+var_58]
.text:000000000000D913                 jmp     loc_D123
.text:000000000000D918 ; ---------------------------------------------------------------------------
.text:000000000000D918
.text:000000000000D918 loc_D918:                               ; CODE XREF: printf_parse+BC5↑j
.text:000000000000D918                 cmp     dil, 9
.text:000000000000D91C                 jbe     loc_D86A
.text:000000000000D922                 lea     rbx, [rdx-1]
.text:000000000000D926                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000D92A                 ja      def_CF25        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000D930                 mov     [r12+40h], rbx
.text:000000000000D935                 lea     r11, [rsi+2]
.text:000000000000D939                 jmp     loc_D1CD
.text:000000000000D93E ; ---------------------------------------------------------------------------
.text:000000000000D93E
.text:000000000000D93E loc_D93E:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000D93E                 mov     rdi, rsi        ; size
.text:000000000000D941                 call    _malloc         ; PIC mode
.text:000000000000D946                 mov     rdx, [rsp+88h+src]
.text:000000000000D94B                 mov     rcx, rax
.text:000000000000D94E                 mov     r9, [rsp+88h+var_40]
.text:000000000000D953                 mov     r10, [rsp+88h+var_48]
.text:000000000000D958                 mov     r8, [rsp+88h+var_50]
.text:000000000000D95D                 mov     r11, [rsp+88h+var_58]
.text:000000000000D962                 jmp     loc_D7A9
.text:000000000000D967 ; ---------------------------------------------------------------------------
.text:000000000000D967
.text:000000000000D967 loc_D967:                               ; CODE XREF: printf_parse+2DB↑j
.text:000000000000D967                                         ; printf_parse+2F1↑j ...
.text:000000000000D967                 mov     rcx, [r15+8]
.text:000000000000D96B
.text:000000000000D96B loc_D96B:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000D96B                                         ; printf_parse+8AB↑j ...
.text:000000000000D96B                 cmp     [rsp+88h+src], rcx
.text:000000000000D970                 jnz     loc_D7D4
.text:000000000000D976                 jmp     loc_D7DC
.text:000000000000D976 ; ---------------------------------------------------------------------------
.text:000000000000D97B                 align 20h
.text:000000000000D980
.text:000000000000D980 loc_D980:                               ; CODE XREF: printf_parse+ADA↑j
.text:000000000000D980                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000D985                 shl     rax, 5
.text:000000000000D989                 mov     rdi, rcx        ; dest
.text:000000000000D98C                 mov     rdx, rax        ; n
.text:000000000000D98F                 mov     [rsp+88h+var_40], r9
.text:000000000000D994                 mov     [rsp+88h+var_48], r10
.text:000000000000D999                 mov     [rsp+88h+var_50], r8
.text:000000000000D99E                 mov     [rsp+88h+var_58], r11
.text:000000000000D9A3                 call    _memcpy         ; PIC mode
.text:000000000000D9A8                 mov     r9, [rsp+88h+var_40]
.text:000000000000D9AD                 mov     rcx, rax
.text:000000000000D9B0                 mov     r10, [rsp+88h+var_48]
.text:000000000000D9B5                 mov     rax, [r15]
.text:000000000000D9B8                 mov     r8, [rsp+88h+var_50]
.text:000000000000D9BD                 mov     r11, [rsp+88h+var_58]
.text:000000000000D9C2                 jmp     loc_D7C0
.text:000000000000D9C7 ; ---------------------------------------------------------------------------
.text:000000000000D9C7
.text:000000000000D9C7 loc_D9C7:                               ; CODE XREF: printf_parse+42F↑j
.text:000000000000D9C7                                         ; printf_parse+ACC↑j
.text:000000000000D9C7                 mov     rcx, rdx
.text:000000000000D9CA                 jmp     short loc_D96B
.text:000000000000D9CA ; } // starts at CCE0
.text:000000000000D9CA printf_parse    endp
.text:000000000000D9CA
.text:000000000000D9CA ; ---------------------------------------------------------------------------
.text:000000000000D9CC                 align 10h
.text:000000000000D9D0
.text:000000000000D9D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D9D0
.text:000000000000D9D0 ; Attributes: info_from_lumina
.text:000000000000D9D0
.text:000000000000D9D0 ; void _libc_csu_init(void)
.text:000000000000D9D0                 public __libc_csu_init
.text:000000000000D9D0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000D9D0 ; __unwind {
.text:000000000000D9D0                 push    r15
.text:000000000000D9D2                 push    r14
.text:000000000000D9D4                 mov     r15, rdx
.text:000000000000D9D7                 push    r13
.text:000000000000D9D9                 push    r12
.text:000000000000D9DB                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000D9E2                 push    rbp
.text:000000000000D9E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000D9EA                 push    rbx
.text:000000000000D9EB                 mov     r13d, edi
.text:000000000000D9EE                 mov     r14, rsi
.text:000000000000D9F1                 sub     rbp, r12
.text:000000000000D9F4                 sub     rsp, 8
.text:000000000000D9F8                 sar     rbp, 3
.text:000000000000D9FC                 call    _init_proc
.text:000000000000DA01                 test    rbp, rbp
.text:000000000000DA04                 jz      short loc_DA26
.text:000000000000DA06                 xor     ebx, ebx
.text:000000000000DA08                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000DA10
.text:000000000000DA10 loc_DA10:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000DA10                 mov     rdx, r15
.text:000000000000DA13                 mov     rsi, r14
.text:000000000000DA16                 mov     edi, r13d
.text:000000000000DA19                 call    ds:(__frame_dummy_init_array_entry - 2129B0h)[r12+rbx*8]
.text:000000000000DA1D                 add     rbx, 1
.text:000000000000DA21                 cmp     rbp, rbx
.text:000000000000DA24                 jnz     short loc_DA10
.text:000000000000DA26
.text:000000000000DA26 loc_DA26:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000DA26                 add     rsp, 8
.text:000000000000DA2A                 pop     rbx
.text:000000000000DA2B                 pop     rbp
.text:000000000000DA2C                 pop     r12
.text:000000000000DA2E                 pop     r13
.text:000000000000DA30                 pop     r14
.text:000000000000DA32                 pop     r15
.text:000000000000DA34                 retn
.text:000000000000DA34 ; } // starts at D9D0
.text:000000000000DA34 __libc_csu_init endp
.text:000000000000DA34
.text:000000000000DA34 ; ---------------------------------------------------------------------------
.text:000000000000DA35                 align 20h
.text:000000000000DA40
.text:000000000000DA40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DA40
.text:000000000000DA40
.text:000000000000DA40 ; void _libc_csu_fini(void)
.text:000000000000DA40                 public __libc_csu_fini
.text:000000000000DA40 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000DA40 ; __unwind {
.text:000000000000DA40                 rep retn
.text:000000000000DA40 ; } // starts at DA40
.text:000000000000DA40 __libc_csu_fini endp
.text:000000000000DA40
.text:000000000000DA40 ; ---------------------------------------------------------------------------
.text:000000000000DA42                 align 10h
.text:000000000000DA50
.text:000000000000DA50 ; =============== S U B R O U T I N E =======================================
.text:000000000000DA50
.text:000000000000DA50
.text:000000000000DA50 atexit          proc near               ; CODE XREF: main+A1↑p
.text:000000000000DA50 ; __unwind {
.text:000000000000DA50                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000DA57                 xor     esi, esi        ; obj
.text:000000000000DA59                 jmp     ___cxa_atexit
.text:000000000000DA59 ; } // starts at DA50
.text:000000000000DA59 atexit          endp
.text:000000000000DA59
.text:000000000000DA59 _text           ends
.text:000000000000DA59
LOAD:000000000000DA5E ; ===========================================================================
LOAD:000000000000DA5E
LOAD:000000000000DA5E ; Segment type: Pure code
LOAD:000000000000DA5E ; Segment permissions: Read/Execute
LOAD:000000000000DA5E LOAD            segment byte public 'CODE' use64
LOAD:000000000000DA5E                 assume cs:LOAD
LOAD:000000000000DA5E                 ;org 0DA5Eh
LOAD:000000000000DA5E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000DA5E                 align 20h
LOAD:000000000000DA5E LOAD            ends
LOAD:000000000000DA5E
.fini:000000000000DA60 ; ===========================================================================
.fini:000000000000DA60
.fini:000000000000DA60 ; Segment type: Pure code
.fini:000000000000DA60 ; Segment permissions: Read/Execute
.fini:000000000000DA60 _fini           segment dword public 'CODE' use64
.fini:000000000000DA60                 assume cs:_fini
.fini:000000000000DA60                 ;org 0DA60h
.fini:000000000000DA60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000DA60
.fini:000000000000DA60 ; =============== S U B R O U T I N E =======================================
.fini:000000000000DA60
.fini:000000000000DA60
.fini:000000000000DA60                 public _term_proc
.fini:000000000000DA60 _term_proc      proc near
.fini:000000000000DA60                 sub     rsp, 8          ; _fini
.fini:000000000000DA64                 add     rsp, 8
.fini:000000000000DA68                 retn
.fini:000000000000DA68 _term_proc      endp
.fini:000000000000DA68
.fini:000000000000DA68 _fini           ends
.fini:000000000000DA68
LOAD:000000000000DA69 ; ===========================================================================
LOAD:000000000000DA69
LOAD:000000000000DA69 ; Segment type: Pure code
LOAD:000000000000DA69 ; Segment permissions: Read/Execute
LOAD:000000000000DA69 LOAD            segment byte public 'CODE' use64
LOAD:000000000000DA69                 assume cs:LOAD
LOAD:000000000000DA69                 ;org 0DA69h
LOAD:000000000000DA69                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000DA69                 align 20h
LOAD:000000000000DA69 LOAD            ends
LOAD:000000000000DA69
.rodata:000000000000DA80 ; ===========================================================================
.rodata:000000000000DA80
.rodata:000000000000DA80 ; Segment type: Pure data
.rodata:000000000000DA80 ; Segment permissions: Read
.rodata:000000000000DA80 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000DA80                 assume cs:_rodata
.rodata:000000000000DA80                 ;org 0DA80h
.rodata:000000000000DA80                 public _IO_stdin_used
.rodata:000000000000DA80 _IO_stdin_used  db    1
.rodata:000000000000DA81                 db    0
.rodata:000000000000DA82                 db    2
.rodata:000000000000DA83                 db    0
.rodata:000000000000DA84 unk_DA84        db  6Ch ; l             ; DATA XREF: out_uint_x+5↑o
.rodata:000000000000DA85                 db  78h ; x
.rodata:000000000000DA86                 db    0
.rodata:000000000000DA87 unk_DA87        db  2Dh ; -             ; DATA XREF: out_uint_x+C↑o
.rodata:000000000000DA87                                         ; print_stat+273↑o
.rodata:000000000000DA88                 db  23h ; #
.rodata:000000000000DA89                 db  30h ; 0
.rodata:000000000000DA8A                 db    0
.rodata:000000000000DA8B unk_DA8B        db  6Ch ; l             ; DATA XREF: out_uint+5↑o
.rodata:000000000000DA8C                 db  75h ; u
.rodata:000000000000DA8D                 db    0
.rodata:000000000000DA8E unk_DA8E        db  27h ; '             ; DATA XREF: out_uint+C↑o
.rodata:000000000000DA8F                 db  2Dh ; -
.rodata:000000000000DA90                 db  30h ; 0
.rodata:000000000000DA91                 db    0
.rodata:000000000000DA92 unk_DA92        db  6Ch ; l             ; DATA XREF: out_int+5↑o
.rodata:000000000000DA93                 db  64h ; d
.rodata:000000000000DA94                 db    0
.rodata:000000000000DA95 a0              db 27h,'-+ 0',0         ; DATA XREF: out_int+C↑o
.rodata:000000000000DA95                                         ; out_epoch_sec_isra_9+208↑o
.rodata:000000000000DA9B aAafs           db 'aafs',0             ; DATA XREF: print_statfs+89A↑o
.rodata:000000000000DAA0 aAcfs           db 'acfs',0             ; DATA XREF: print_statfs+886↑o
.rodata:000000000000DAA5 aAdfs           db 'adfs',0             ; DATA XREF: print_statfs:loc_36F9↑o
.rodata:000000000000DAAA aAffs           db 'affs',0             ; DATA XREF: print_statfs+B6F↑o
.rodata:000000000000DAAF aAnonInodeFs    db 'anon-inode FS',0    ; DATA XREF: print_statfs+9E4↑o
.rodata:000000000000DABD aAufs           db 'aufs',0             ; DATA XREF: print_statfs+5B8↑o
.rodata:000000000000DABD                                         ; print_statfs:loc_2E82↑o
.rodata:000000000000DAC2 aAutofs         db 'autofs',0           ; DATA XREF: print_statfs+BB0↑o
.rodata:000000000000DAC2                                         ; read_file_system_list+1E4↑o ...
.rodata:000000000000DAC9 aBalloonKvmFs   db 'balloon-kvm-fs',0   ; DATA XREF: print_statfs+619↑o
.rodata:000000000000DAD8 aBefs           db 'befs',0             ; DATA XREF: print_statfs+7B7↑o
.rodata:000000000000DAD8                                         ; print_statfs:loc_374D↑o
.rodata:000000000000DADD aBpfFs          db 'bpf_fs',0           ; DATA XREF: print_statfs+67D↑o
.rodata:000000000000DAE4 aBinfmtMisc     db 'binfmt_misc',0      ; DATA XREF: print_statfs+7F9↑o
.rodata:000000000000DAF0 aBtrfs          db 'btrfs',0            ; DATA XREF: print_statfs+4DA↑o
.rodata:000000000000DAF6 aBtrfsTest      db 'btrfs_test',0       ; DATA XREF: print_statfs+2D8↑o
.rodata:000000000000DB01 aCeph           db 'ceph',0             ; DATA XREF: print_statfs+35F↑o
.rodata:000000000000DB06 aCgroupfs       db 'cgroupfs',0         ; DATA XREF: print_statfs+6C6↑o
.rodata:000000000000DB0F aCgroup2fs      db 'cgroup2fs',0        ; DATA XREF: print_statfs+A25↑o
.rodata:000000000000DB19 aCifs           db 'cifs',0             ; DATA XREF: print_statfs+908↑o
.rodata:000000000000DB19                                         ; read_file_system_list+7A9↑o ...
.rodata:000000000000DB1E aCoda           db 'coda',0             ; DATA XREF: print_statfs+2EC↑o
.rodata:000000000000DB23 aCoh            db 'coh',0              ; DATA XREF: print_statfs+442↑o
.rodata:000000000000DB27 aConfigfs       db 'configfs',0         ; DATA XREF: print_statfs+5A4↑o
.rodata:000000000000DB30 aCramfs         db 'cramfs',0           ; DATA XREF: print_statfs+A98↑o
.rodata:000000000000DB30                                         ; print_statfs:loc_3705↑o
.rodata:000000000000DB37 aCramfsWend     db 'cramfs-wend',0      ; DATA XREF: print_statfs+7E5↑o
.rodata:000000000000DB43 aDaxfs          db 'daxfs',0            ; DATA XREF: print_statfs+A11↑o
.rodata:000000000000DB43                                         ; print_statfs+3BA↑o
.rodata:000000000000DB49 aDebugfs        db 'debugfs',0          ; DATA XREF: print_statfs+9FD↑o
.rodata:000000000000DB49                                         ; read_file_system_list+326↑o ...
.rodata:000000000000DB51 aDevpts         db 'devpts',0           ; DATA XREF: print_statfs+27A↑o
.rodata:000000000000DB51                                         ; read_file_system_list+344↑o ...
.rodata:000000000000DB58 aEcryptfs       db 'ecryptfs',0         ; DATA XREF: print_statfs+6DA↑o
.rodata:000000000000DB61 aEfivarfs       db 'efivarfs',0         ; DATA XREF: print_statfs+651↑o
.rodata:000000000000DB6A aExofs          db 'exofs',0            ; DATA XREF: print_statfs:loc_3735↑o
.rodata:000000000000DB70 aExt            db 'ext',0              ; DATA XREF: print_statfs+831↑o
.rodata:000000000000DB74 aExt2Ext3       db 'ext2/ext3',0        ; DATA XREF: print_statfs+69F↑o
.rodata:000000000000DB7E aExt2           db 'ext2',0             ; DATA XREF: print_statfs+B83↑o
.rodata:000000000000DB83 aF2fs           db 'f2fs',0             ; DATA XREF: print_statfs+667↑o
.rodata:000000000000DB88 aFat            db 'fat',0              ; DATA XREF: print_statfs+B0F↑o
.rodata:000000000000DB8C aFhgfs          db 'fhgfs',0            ; DATA XREF: print_statfs+5D7↑o
.rodata:000000000000DB92 aFuseblk        db 'fuseblk',0          ; DATA XREF: print_statfs+BFF↑o
.rodata:000000000000DB9A aFusectl        db 'fusectl',0          ; DATA XREF: print_statfs:loc_3741↑o
.rodata:000000000000DB9A                                         ; read_file_system_list+362↑o ...
.rodata:000000000000DBA2 aFutexfs        db 'futexfs',0          ; DATA XREF: print_statfs+9BC↑o
.rodata:000000000000DBA2                                         ; print_statfs:loc_36A5↑o
.rodata:000000000000DBAA aGfsGfs2        db 'gfs/gfs2',0         ; DATA XREF: print_statfs+8DB↑o
.rodata:000000000000DBB3 aGpfs           db 'gpfs',0             ; DATA XREF: print_statfs+F4↑o
.rodata:000000000000DBB8 aHfs            db 'hfs+',0             ; DATA XREF: print_statfs+B3C↑o
.rodata:000000000000DBBD aHfsx           db 'hfsx',0             ; DATA XREF: print_statfs+B50↑o
.rodata:000000000000DBC2 aHostfs         db 'hostfs',0           ; DATA XREF: print_statfs+387↑o
.rodata:000000000000DBC9 aHpfs           db 'hpfs',0             ; DATA XREF: print_statfs+91E↑o
.rodata:000000000000DBCE aHugetlbfs      db 'hugetlbfs',0        ; DATA XREF: print_statfs+4AE↑o
.rodata:000000000000DBCE                                         ; print_statfs+AAC↑o
.rodata:000000000000DBD8 aInodefs        db 'inodefs',0          ; DATA XREF: print_statfs:loc_36E1↑o
.rodata:000000000000DBE0 aIbrix          db 'ibrix',0            ; DATA XREF: print_statfs+463↑o
.rodata:000000000000DBE6 aInotifyfs      db 'inotifyfs',0        ; DATA XREF: print_statfs:loc_36BD↑o
.rodata:000000000000DBF0 aIsofs          db 'isofs',0            ; DATA XREF: print_statfs:loc_35A9↑o
.rodata:000000000000DBF6 aZsmallocfs     db 'zsmallocfs',0       ; DATA XREF: print_statfs+3E8↑o
.rodata:000000000000DC01 aJffs           db 'jffs',0             ; DATA XREF: print_statfs+817↑o
.rodata:000000000000DC06 aJffs2          db 'jffs2',0            ; DATA XREF: print_statfs+531↑o
.rodata:000000000000DC0C aJfs            db 'jfs',0              ; DATA XREF: print_statfs+BE3↑o
.rodata:000000000000DC10 aKAfs           db 'k-afs',0            ; DATA XREF: print_statfs+799↑o
.rodata:000000000000DC10                                         ; print_statfs+AED↑o
.rodata:000000000000DC16 aLogfs          db 'logfs',0            ; DATA XREF: print_statfs:loc_36B1↑o
.rodata:000000000000DC1C aLustre         db 'lustre',0           ; DATA XREF: print_statfs+9D0↑o
.rodata:000000000000DC23 aM1fs           db 'm1fs',0             ; DATA XREF: print_statfs+BE↑o
.rodata:000000000000DC28 aMinix          db 'minix',0            ; DATA XREF: print_statfs+845↑o
.rodata:000000000000DC2E aMinix30Char    db 'minix (30 char.)',0 ; DATA XREF: print_statfs:loc_36D5↑o
.rodata:000000000000DC3F aMinixV2        db 'minix v2',0         ; DATA XREF: print_statfs+252↑o
.rodata:000000000000DC48 aMinixV230Char  db 'minix v2 (30 char.)',0
.rodata:000000000000DC48                                         ; DATA XREF: print_statfs+266↑o
.rodata:000000000000DC5C aMinix3         db 'minix3',0           ; DATA XREF: print_statfs+739↑o
.rodata:000000000000DC63 aMqueue         db 'mqueue',0           ; DATA XREF: print_statfs+605↑o
.rodata:000000000000DC63                                         ; read_file_system_list+380↑o ...
.rodata:000000000000DC6A aMsdos          db 'msdos',0            ; DATA XREF: print_statfs+6F7↑o
.rodata:000000000000DC70 aNovell         db 'novell',0           ; DATA XREF: print_statfs+725↑o
.rodata:000000000000DC77 aNfsd           db 'nfsd',0             ; DATA XREF: print_statfs+771↑o
.rodata:000000000000DC7C aNilfs          db 'nilfs',0            ; DATA XREF: print_statfs+238↑o
.rodata:000000000000DC82 aNsfs           db 'nsfs',0             ; DATA XREF: print_statfs+785↑o
.rodata:000000000000DC87 aNtfs           db 'ntfs',0             ; DATA XREF: print_statfs+AD9↑o
.rodata:000000000000DC8C aOpenprom       db 'openprom',0         ; DATA XREF: print_statfs+93A↑o
.rodata:000000000000DC95 aOcfs2          db 'ocfs2',0            ; DATA XREF: print_statfs+2BE↑o
.rodata:000000000000DC9B aOverlayfs      db 'overlayfs',0        ; DATA XREF: print_statfs+97B↑o
.rodata:000000000000DCA5 aPanfs          db 'panfs',0            ; DATA XREF: print_statfs+492↑o
.rodata:000000000000DCA5                                         ; print_statfs+545↑o
.rodata:000000000000DCAB aPrlFs          db 'prl_fs',0           ; DATA XREF: print_statfs+98F↑o
.rodata:000000000000DCB2 aProc           db 'proc',0             ; DATA XREF: print_statfs+962↑o
.rodata:000000000000DCB2                                         ; read_file_system_list+23C↑o ...
.rodata:000000000000DCB7 aPstorefs       db 'pstorefs',0         ; DATA XREF: print_statfs:loc_3711↑o
.rodata:000000000000DCC0 aQnx4           db 'qnx4',0             ; DATA XREF: print_statfs+B9C↑o
.rodata:000000000000DCC5 aQnx6           db 'qnx6',0             ; DATA XREF: print_statfs+757↑o
.rodata:000000000000DCCA aRdt            db 'rdt',0              ; DATA XREF: print_statfs+428↑o
.rodata:000000000000DCCE aReiserfs       db 'reiserfs',0         ; DATA XREF: print_statfs+E4↑o
.rodata:000000000000DCD7 aRomfs          db 'romfs',0            ; DATA XREF: print_statfs+51D↑o
.rodata:000000000000DCDD unk_DCDD        db  72h ; r             ; DATA XREF: print_statfs+C13↑o
.rodata:000000000000DCDD                                         ; read_file_system_list+39E↑o ...
.rodata:000000000000DCDE                 db  70h ; p
.rodata:000000000000DCDF                 db  63h ; c
.rodata:000000000000DCE0                 db  5Fh ; _
.rodata:000000000000DCE1 aPipefs         db 'pipefs',0           ; DATA XREF: print_statfs+D4↑o
.rodata:000000000000DCE8 aSdcardfs       db 'sdcardfs',0         ; DATA XREF: print_statfs+872↑o
.rodata:000000000000DCF1 aSecurityfs     db 'securityfs',0       ; DATA XREF: print_statfs:loc_3729↑o
.rodata:000000000000DCFC aSelinux        db 'selinux',0          ; DATA XREF: print_statfs+635↑o
.rodata:000000000000DD04 aSmackfs        db 'smackfs',0          ; DATA XREF: print_statfs+7D1↑o
.rodata:000000000000DD0C aSmb            db 'smb',0              ; DATA XREF: print_statfs+711↑o
.rodata:000000000000DD10 aSmb2           db 'smb2',0             ; DATA XREF: print_statfs+8F2↑o
.rodata:000000000000DD15 aSnfs           db 'snfs',0             ; DATA XREF: print_statfs+A52↑o
.rodata:000000000000DD1A aSockfs         db 'sockfs',0           ; DATA XREF: print_statfs:loc_371D↑o
.rodata:000000000000DD21 aSquashfs       db 'squashfs',0         ; DATA XREF: print_statfs+300↑o
.rodata:000000000000DD21                                         ; print_statfs:loc_36ED↑o
.rodata:000000000000DD2A aSysfs          db 'sysfs',0            ; DATA XREF: print_statfs+576↑o
.rodata:000000000000DD2A                                         ; read_file_system_list+3BC↑o ...
.rodata:000000000000DD30 aSysv2          db 'sysv2',0            ; DATA XREF: print_statfs+44F↑o
.rodata:000000000000DD36 aSysv4          db 'sysv4',0            ; DATA XREF: print_statfs:loc_36C9↑o
.rodata:000000000000DD3C aTmpfs          db 'tmpfs',0            ; DATA XREF: print_statfs+373↑o
.rodata:000000000000DD42 aTracefs        db 'tracefs',0          ; DATA XREF: print_statfs+9A3↑o
.rodata:000000000000DD4A aUbifs          db 'ubifs',0            ; DATA XREF: print_statfs+A84↑o
.rodata:000000000000DD50 aUdf            db 'udf',0              ; DATA XREF: print_statfs+5F1↑o
.rodata:000000000000DD54 unk_DD54        db  75h ; u             ; DATA XREF: print_statfs+94E↑o
.rodata:000000000000DD55                 db  73h ; s
.rodata:000000000000DD56 aBdevfs         db 'bdevfs',0           ; DATA XREF: print_statfs+590↑o
.rodata:000000000000DD56                                         ; print_statfs+859↑o ...
.rodata:000000000000DD5D aV9fs           db 'v9fs',0             ; DATA XREF: print_statfs+345↑o
.rodata:000000000000DD62 aVmhgfs         db 'vmhgfs',0           ; DATA XREF: print_statfs+A3C↑o
.rodata:000000000000DD69 aVxfs           db 'vxfs',0             ; DATA XREF: print_statfs+4C4↑o
.rodata:000000000000DD6E aVzfs           db 'vzfs',0             ; DATA XREF: print_statfs+3D4↑o
.rodata:000000000000DD6E                                         ; print_statfs+BCF↑o
.rodata:000000000000DD73 aWslfs          db 'wslfs',0            ; DATA XREF: print_statfs+AC5↑o
.rodata:000000000000DD79 aXenfs          db 'xenfs',0            ; DATA XREF: print_statfs+A68↑o
.rodata:000000000000DD7F aXenix          db 'xenix',0            ; DATA XREF: print_statfs+8C7↑o
.rodata:000000000000DD85 aXia            db 'xia',0              ; DATA XREF: print_statfs+8B3↑o
.rodata:000000000000DD89 aUnknown0xLx    db 'UNKNOWN (0x%lx)',0  ; DATA XREF: print_statfs:loc_2B7D↑o
.rodata:000000000000DD99 ; const char aSInvalidDirect[]
.rodata:000000000000DD99 aSInvalidDirect db '%s: invalid directive',0
.rodata:000000000000DD99                                         ; DATA XREF: print_it+4C8↑o
.rodata:000000000000DDAF ; const char aTz[]
.rodata:000000000000DDAF aTz             db 'TZ',0               ; DATA XREF: human_time:loc_3D28↑o
.rodata:000000000000DDAF                                         ; setenv_TZ+8↑o ...
.rodata:000000000000DDB2 aYMDHMSNZ       db '%Y-%m-%d %H:%M:%S.%N %z',0
.rodata:000000000000DDB2                                         ; DATA XREF: human_time+50↑o
.rodata:000000000000DDCA aS09d           db '%s.%09d',0          ; DATA XREF: human_time+9E↑o
.rodata:000000000000DDD2 aSS             db '%s%s',0             ; DATA XREF: default_format+69↑o
.rodata:000000000000DDD2                                         ; default_format+9B↑o ...
.rodata:000000000000DDD7 a0f             db '.0f',0              ; DATA XREF: out_epoch_sec_isra_9+201↑o
.rodata:000000000000DDDB aSDD            db '%s%.*d%-*.*d',0     ; DATA XREF: out_epoch_sec_isra_9+EF↑o
.rodata:000000000000DDE8 aUnknown        db 'UNKNOWN',0          ; DATA XREF: print_stat+30C↑o
.rodata:000000000000DDE8                                         ; print_stat+3E4↑o
.rodata:000000000000DDF0 asc_DDF0        db '?',0                ; DATA XREF: print_stat+467↑o
.rodata:000000000000DDF0                                         ; print_stat+591↑o
.rodata:000000000000DDF2 ; const char aCannotReadSymb[]
.rodata:000000000000DDF2 aCannotReadSymb db 'cannot read symbolic link %s',0
.rodata:000000000000DDF2                                         ; DATA XREF: print_stat+5C2↑o
.rodata:000000000000DE0F asc_DE0F        db ' -> ',0             ; DATA XREF: print_stat+3A8↑o
.rodata:000000000000DE14 aLo             db 'lo',0               ; DATA XREF: print_stat+26C↑o
.rodata:000000000000DE17 ; const char aFailedToCanoni[]
.rodata:000000000000DE17 aFailedToCanoni db 'failed to canonicalize %s',0
.rodata:000000000000DE17                                         ; DATA XREF: print_stat+55C↑o
.rodata:000000000000DE31 aStat           db 'stat',0             ; DATA XREF: main+158↑o
.rodata:000000000000DE31                                         ; usage+234↑o ...
.rodata:000000000000DE36 asc_DE36        db '[',0                ; DATA XREF: usage+2BB↑o
.rodata:000000000000DE38 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+2E2↑o
.rodata:000000000000DE48 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000DE48                                         ; DATA XREF: usage+312↑o
.rodata:000000000000DE48                                         ; usage+40C↑o ...
.rodata:000000000000DE5E aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+323↑o
.rodata:000000000000DE68 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+32F↑o
.rodata:000000000000DE77 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+2C2↑o
.rodata:000000000000DE81 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+2EE↑o
.rodata:000000000000DE8B aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+306↑o
.rodata:000000000000DE95 ; const char aSOnlineHelpS[]
.rodata:000000000000DE95 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+37A↑o
.rodata:000000000000DE95                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000DEAC unk_DEAC        db  47h ; G             ; DATA XREF: main+151↑o
.rodata:000000000000DEAC                                         ; usage+396↑o ...
.rodata:000000000000DEAD                 db  4Eh ; N
.rodata:000000000000DEAE                 db  55h ; U
.rodata:000000000000DEAF                 db  20h
.rodata:000000000000DEB0 ; const char domainname[]
.rodata:000000000000DEB0 domainname      db 'coreutils',0        ; DATA XREF: main+56↑o
.rodata:000000000000DEB0                                         ; main+62↑o ...
.rodata:000000000000DEBA ; const char s2[]
.rodata:000000000000DEBA s2              db 'en_',0              ; DATA XREF: usage+3BD↑o
.rodata:000000000000DEBA                                         ; usage+47E↑o
.rodata:000000000000DEBE ; const char aFullDocumentat[]
.rodata:000000000000DEBE aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000DEBE                                         ; DATA XREF: usage:loc_4D09↑o
.rodata:000000000000DEBE                                         ; usage:loc_4DC6↑o
.rodata:000000000000DED9 ; const char dirname[]
.rodata:000000000000DED9 dirname         db '/usr/local/share/locale',0
.rodata:000000000000DED9                                         ; DATA XREF: main+4F↑o
.rodata:000000000000DEF1 aMichaelMeskes  db 'Michael Meskes',0   ; DATA XREF: main+14A↑o
.rodata:000000000000DF00 ; const char shortopts[]
.rodata:000000000000DF00 shortopts       db 'c:fLt',0            ; DATA XREF: main:loc_22F0↑o
.rodata:000000000000DF06 ; const char aMissingOperand[]
.rodata:000000000000DF06 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_277E↑o
.rodata:000000000000DF16 ; const char needle[]
.rodata:000000000000DF16 needle          db '%N',0               ; DATA XREF: main+1EF↑o
.rodata:000000000000DF19 ; const char name[]
.rodata:000000000000DF19 name            db 'QUOTING_STYLE',0    ; DATA XREF: main+208↑o
.rodata:000000000000DF27 ; const char aCannotStatStan[]
.rodata:000000000000DF27 aCannotStatStan db 'cannot stat standard input',0
.rodata:000000000000DF27                                         ; DATA XREF: main+40A↑o
.rodata:000000000000DF42 ; const char aCannotStatS[]
.rodata:000000000000DF42 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: main+498↑o
.rodata:000000000000DF42                                         ; find_mount_point+1BC↑o
.rodata:000000000000DF51 aDereference    db 'dereference',0      ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000DF5D aFileSystem     db 'file-system',0      ; DATA XREF: .data.rel.ro:00000000002129E0↓o
.rodata:000000000000DF69 aFormat         db 'format',0           ; DATA XREF: .data.rel.ro:0000000000212A00↓o
.rodata:000000000000DF70 aPrintf         db 'printf',0           ; DATA XREF: .data.rel.ro:0000000000212A20↓o
.rodata:000000000000DF77 aTerse          db 'terse',0            ; DATA XREF: .data.rel.ro:0000000000212A40↓o
.rodata:000000000000DF7D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000212A60↓o
.rodata:000000000000DF82 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000212A80↓o
.rodata:000000000000DF8A                 align 20h
.rodata:000000000000DFA0 jpt_2AA6        dd offset loc_2AB0 - 0DFA0h
.rodata:000000000000DFA0                                         ; DATA XREF: print_statfs+12↑o
.rodata:000000000000DFA0                                         ; print_statfs+1F↑r
.rodata:000000000000DFA0                 dd offset loc_2AE8 - 0DFA0h ; jump table for switch statement
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2BC0 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2BD0 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2BE0 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2BF0 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2C00 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2C10 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2C30 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2C40 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset def_2AA6 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2AB9 - 0DFA0h
.rodata:000000000000DFA0                 dd offset loc_2AD8 - 0DFA0h
.rodata:000000000000E028 jpt_3AAD        dd offset loc_3AE0 - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                                         ; DATA XREF: print_it+33C↑o
.rodata:000000000000E028                                         ; print_it+346↑r
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h ; jump table for switch statement
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset loc_3AE0 - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset loc_3BF3 - 0E028h
.rodata:000000000000E028                 dd offset loc_3B9D - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset loc_3B8C - 0E028h
.rodata:000000000000E028                 dd offset loc_3B7B - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset loc_3B6A - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset def_3AAD - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset loc_3B59 - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset loc_3B4B - 0E028h, offset def_3AAD - 0E028h
.rodata:000000000000E028                 dd offset loc_3B3D - 0E028h
.rodata:000000000000E17C jpt_434C        dd offset loc_47C8 - 0E17Ch, offset loc_47B0 - 0E17Ch
.rodata:000000000000E17C                                         ; DATA XREF: print_stat+18↑o
.rodata:000000000000E17C                                         ; print_stat+25↑r
.rodata:000000000000E17C                 dd offset loc_4730 - 0E17Ch, offset loc_4720 - 0E17Ch ; jump table for switch statement
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset loc_4800 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_46F8 - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset loc_4660 - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset loc_4648 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4620 - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4608 - 0E17Ch, offset loc_45F0 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_45D8 - 0E17Ch, offset loc_45C0 - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4588 - 0E17Ch, offset loc_4570 - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset loc_4558 - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset loc_4528 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4510 - 0E17Ch, offset loc_4540 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_44F8 - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4460 - 0E17Ch, offset loc_4450 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4420 - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset def_434C - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4408 - 0E17Ch, offset loc_43D0 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_43C0 - 0E17Ch, offset def_434C - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_43A0 - 0E17Ch, offset loc_4390 - 0E17Ch
.rodata:000000000000E17C                 dd offset loc_4380 - 0E17Ch, offset loc_4350 - 0E17Ch
.rodata:000000000000E264                 align 20h
.rodata:000000000000E280 fmt_terse_regular db '%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o',0Ah,0
.rodata:000000000000E280                                         ; DATA XREF: default_format+117↑o
.rodata:000000000000E280                                         ; usage+253↑o
.rodata:000000000000E2B1                 align 20h
.rodata:000000000000E2C0 fmt_terse_fs    db '%n %i %l %t %s %S %b %f %a %c %d',0Ah,0
.rodata:000000000000E2C0                                         ; DATA XREF: default_format+16↑o
.rodata:000000000000E2C0                                         ; usage+27C↑o
.rodata:000000000000E2E2                 align 8
.rodata:000000000000E2E8 ; const char printf_flags[]
.rodata:000000000000E2E8 printf_flags    db 27h,'-+ #0I',0       ; DATA XREF: make_format+12↑o
.rodata:000000000000E2E8                                         ; print_it:loc_38A8↑o
.rodata:000000000000E2F0 ; const char digits[]
.rodata:000000000000E2F0 digits          db '0123456789',0       ; DATA XREF: print_it+15C↑o
.rodata:000000000000E2F0                                         ; print_it+17C↑o
.rodata:000000000000E2FB                 align 20h
.rodata:000000000000E300 ; const char aWarningBacksla[]
.rodata:000000000000E300 aWarningBacksla db 'warning: backslash at end of format',0
.rodata:000000000000E300                                         ; DATA XREF: print_it+7E↑o
.rodata:000000000000E324                 align 8
.rodata:000000000000E328 ; const char aWarningUnrecog[]
.rodata:000000000000E328 aWarningUnrecog db 'warning: unrecognized escape ',27h,'\%c',27h,0
.rodata:000000000000E328                                         ; DATA XREF: print_it:def_3AAD↑o
.rodata:000000000000E34B                 align 10h
.rodata:000000000000E350 ; const char aCannotReadTabl[]
.rodata:000000000000E350 aCannotReadTabl db 'cannot read table of mounted file systems',0
.rodata:000000000000E350                                         ; DATA XREF: find_bind_mount:loc_3E57↑o
.rodata:000000000000E37A                 align 20h
.rodata:000000000000E380 ; const char aFileNId8iNamel[]
.rodata:000000000000E380 aFileNId8iNamel db '  File: "%n"',0Ah   ; DATA XREF: default_format:loc_3F84↑o
.rodata:000000000000E380                 db '    ID: %-8i Namelen: %-7l Type: %T',0Ah
.rodata:000000000000E380                 db 'Block size: %-10s Fundamental block size: %S',0Ah
.rodata:000000000000E380                 db 'Blocks: Total: %-10b Free: %-10f Available: %a',0Ah
.rodata:000000000000E380                 db 'Inodes: Total: %-10c Free: %d',0Ah,0
.rodata:000000000000E42C                 align 10h
.rodata:000000000000E430 ; const char aFileNSize10sBl[]
.rodata:000000000000E430 aFileNSize10sBl db '  File: %N',0Ah     ; DATA XREF: default_format+2B↑o
.rodata:000000000000E430                 db '  Size: %-10s',9,'Blocks: %-10b IO Block: %-6o %F',0Ah,0
.rodata:000000000000E46A                 align 10h
.rodata:000000000000E470 aDeviceDhDdInod db 'Device: %Dh/%dd',9,'Inode: %-10i  Links: %-5h Device type: %t,%T',0Ah
.rodata:000000000000E470                                         ; DATA XREF: default_format+52↑o
.rodata:000000000000E470                 db 0
.rodata:000000000000E4AE                 align 10h
.rodata:000000000000E4B0 ; const char aDeviceDhDdInod_0[]
.rodata:000000000000E4B0 aDeviceDhDdInod_0 db 'Device: %Dh/%dd',9,'Inode: %-10i  Links: %h',0Ah,0
.rodata:000000000000E4B0                                         ; DATA XREF: default_format+5B↑o
.rodata:000000000000E4D9                 align 20h
.rodata:000000000000E4E0 ; const char aAccess04a1010a[]
.rodata:000000000000E4E0 aAccess04a1010a db 'Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)',0Ah,0
.rodata:000000000000E4E0                                         ; DATA XREF: default_format+88↑o
.rodata:000000000000E519                 align 20h
.rodata:000000000000E520 ; const char aAccessXModifyY[]
.rodata:000000000000E520 aAccessXModifyY db 'Access: %x',0Ah     ; DATA XREF: default_format+BA↑o
.rodata:000000000000E520                 db 'Modify: %y',0Ah
.rodata:000000000000E520                 db 'Change: %z',0Ah
.rodata:000000000000E520                 db ' Birth: %w',0Ah,0
.rodata:000000000000E54D                 align 10h
.rodata:000000000000E550 ; const char aFailedToGetSec[]
.rodata:000000000000E550 aFailedToGetSec db 'failed to get security context of %s',0
.rodata:000000000000E550                                         ; DATA XREF: print_stat+433↑o
.rodata:000000000000E575                 align 8
.rodata:000000000000E578 ; const char aTrySHelpForMor[]
.rodata:000000000000E578 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000E578                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000E59F                 align 20h
.rodata:000000000000E5A0 ; const char aUsageSOptionFi[]
.rodata:000000000000E5A0 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE...',0Ah,0
.rodata:000000000000E5A0                                         ; DATA XREF: usage:loc_498D↑o
.rodata:000000000000E5BF                 align 20h
.rodata:000000000000E5C0 ; const char aDisplayFileOrF[]
.rodata:000000000000E5C0 aDisplayFileOrF db 'Display file or file system status.',0Ah,0
.rodata:000000000000E5C0                                         ; DATA XREF: usage+84↑o
.rodata:000000000000E5E5                 align 8
.rodata:000000000000E5E8 ; const char aMandatoryArgum[]
.rodata:000000000000E5E8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:000000000000E5E8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000E5E8                 db 'ns too.',0Ah,0
.rodata:000000000000E633                 align 8
.rodata:000000000000E638 ; const char aLDereferenceFo[]
.rodata:000000000000E638 aLDereferenceFo db '  -L, --dereference     follow links',0Ah
.rodata:000000000000E638                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000E638                 db '  -f, --file-system     display file system status instead of fil'
.rodata:000000000000E638                 db 'e status',0Ah,0
.rodata:000000000000E6A8 ; const char aCFormatFormatU[]
.rodata:000000000000E6A8 aCFormatFormatU db '  -c  --format=FORMAT   use the specified FORMAT instead of the d'
.rodata:000000000000E6A8                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000E6A8                 db 'efault;',0Ah
.rodata:000000000000E6A8                 db '                          output a newline after each use of FORM'
.rodata:000000000000E6A8                 db 'AT',0Ah
.rodata:000000000000E6A8                 db '      --printf=FORMAT   like --format, but interpret backslash es'
.rodata:000000000000E6A8                 db 'capes,',0Ah
.rodata:000000000000E6A8                 db '                          and do not output a mandatory trailing '
.rodata:000000000000E6A8                 db 'newline;',0Ah
.rodata:000000000000E6A8                 db '                          if you want a newline, include \n in FO'
.rodata:000000000000E6A8                 db 'RMAT',0Ah
.rodata:000000000000E6A8                 db '  -t, --terse           print the information in terse form',0Ah,0
.rodata:000000000000E84A                 align 10h
.rodata:000000000000E850 ; const char aHelpDisplayThi[]
.rodata:000000000000E850 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000E850                                         ; DATA XREF: usage+118↑o
.rodata:000000000000E87D                 align 20h
.rodata:000000000000E880 ; const char aVersionOutputV[]
.rodata:000000000000E880 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000E880                                         ; DATA XREF: usage+13D↑o
.rodata:000000000000E8B6                 align 8
.rodata:000000000000E8B8 ; const char aTheValidFormat[]
.rodata:000000000000E8B8 aTheValidFormat db 0Ah                  ; DATA XREF: usage+162↑o
.rodata:000000000000E8B8                 db 'The valid format sequences for files (without --file-system):',0Ah
.rodata:000000000000E8B8                 db 0Ah
.rodata:000000000000E8B8                 db '  %a   access rights in octal (note ',27h,'#',27h,' and ',27h,'0',27h
.rodata:000000000000E8B8                 db ' printf flags)',0Ah
.rodata:000000000000E8B8                 db '  %A   access rights in human readable form',0Ah
.rodata:000000000000E8B8                 db '  %b   number of blocks allocated (see %B)',0Ah
.rodata:000000000000E8B8                 db '  %B   the size in bytes of each block reported by %b',0Ah
.rodata:000000000000E8B8                 db '  %C   SELinux security context string',0Ah,0
.rodata:000000000000E9EB                 align 10h
.rodata:000000000000E9F0 ; const char aDDeviceNumberI[]
.rodata:000000000000E9F0 aDDeviceNumberI db '  %d   device number in decimal',0Ah
.rodata:000000000000E9F0                                         ; DATA XREF: usage+187↑o
.rodata:000000000000E9F0                 db '  %D   device number in hex',0Ah
.rodata:000000000000E9F0                 db '  %f   raw mode in hex',0Ah
.rodata:000000000000E9F0                 db '  %F   file type',0Ah
.rodata:000000000000E9F0                 db '  %g   group ID of owner',0Ah
.rodata:000000000000E9F0                 db '  %G   group name of owner',0Ah,0
.rodata:000000000000EA89                 align 10h
.rodata:000000000000EA90 ; const char aHNumberOfHardL[]
.rodata:000000000000EA90 aHNumberOfHardL db '  %h   number of hard links',0Ah
.rodata:000000000000EA90                                         ; DATA XREF: usage+1AC↑o
.rodata:000000000000EA90                 db '  %i   inode number',0Ah
.rodata:000000000000EA90                 db '  %m   mount point',0Ah
.rodata:000000000000EA90                 db '  %n   file name',0Ah
.rodata:000000000000EA90                 db '  %N   quoted file name with dereference if symbolic link',0Ah
.rodata:000000000000EA90                 db '  %o   optimal I/O transfer size hint',0Ah
.rodata:000000000000EA90                 db '  %s   total size, in bytes',0Ah
.rodata:000000000000EA90                 db '  %t   major device type in hex, for character/block device speci'
.rodata:000000000000EA90                 db 'al files',0Ah
.rodata:000000000000EA90                 db '  %T   minor device type in hex, for character/block device speci'
.rodata:000000000000EA90                 db 'al files',0Ah,0
.rodata:000000000000EBF5                 align 8
.rodata:000000000000EBF8 ; const char aUUserIdOfOwner[]
.rodata:000000000000EBF8 aUUserIdOfOwner db '  %u   user ID of owner',0Ah
.rodata:000000000000EBF8                                         ; DATA XREF: usage+1D1↑o
.rodata:000000000000EBF8                 db '  %U   user name of owner',0Ah
.rodata:000000000000EBF8                 db '  %w   time of file birth, human-readable; - if unknown',0Ah
.rodata:000000000000EBF8                 db '  %W   time of file birth, seconds since Epoch; 0 if unknown',0Ah
.rodata:000000000000EBF8                 db '  %x   time of last access, human-readable',0Ah
.rodata:000000000000EBF8                 db '  %X   time of last access, seconds since Epoch',0Ah
.rodata:000000000000EBF8                 db '  %y   time of last data modification, human-readable',0Ah
.rodata:000000000000EBF8                 db '  %Y   time of last data modification, seconds since Epoch',0Ah
.rodata:000000000000EBF8                 db '  %z   time of last status change, human-readable',0Ah
.rodata:000000000000EBF8                 db '  %Z   time of last status change, seconds since Epoch',0Ah
.rodata:000000000000EBF8                 db 0Ah,0
.rodata:000000000000EDD6                 align 8
.rodata:000000000000EDD8 ; const char aValidFormatSeq[]
.rodata:000000000000EDD8 aValidFormatSeq db 'Valid format sequences for file systems:',0Ah
.rodata:000000000000EDD8                                         ; DATA XREF: usage+1F6↑o
.rodata:000000000000EDD8                 db 0Ah
.rodata:000000000000EDD8                 db '  %a   free blocks available to non-superuser',0Ah
.rodata:000000000000EDD8                 db '  %b   total data blocks in file system',0Ah
.rodata:000000000000EDD8                 db '  %c   total file nodes in file system',0Ah
.rodata:000000000000EDD8                 db '  %d   free file nodes in file system',0Ah
.rodata:000000000000EDD8                 db '  %f   free blocks in file system',0Ah,0
.rodata:000000000000EEC8 ; const char aIFileSystemIdI[]
.rodata:000000000000EEC8 aIFileSystemIdI db '  %i   file system ID in hex',0Ah
.rodata:000000000000EEC8                                         ; DATA XREF: usage+21B↑o
.rodata:000000000000EEC8                 db '  %l   maximum length of filenames',0Ah
.rodata:000000000000EEC8                 db '  %n   file name',0Ah
.rodata:000000000000EEC8                 db '  %s   block size (for faster transfers)',0Ah
.rodata:000000000000EEC8                 db '  %S   fundamental block size (for block counts)',0Ah
.rodata:000000000000EEC8                 db '  %t   file system type in hex',0Ah
.rodata:000000000000EEC8                 db '  %T   file system type in human readable form',0Ah,0
.rodata:000000000000EFC2                 align 8
.rodata:000000000000EFC8 ; const char aTerseIsEquival[]
.rodata:000000000000EFC8 aTerseIsEquival db 0Ah                  ; DATA XREF: usage+240↑o
.rodata:000000000000EFC8                 db '--terse is equivalent to the following FORMAT:',0Ah
.rodata:000000000000EFC8                 db '    %s',0
.rodata:000000000000EFFF                 align 20h
.rodata:000000000000F000 ; const char aTerseFileSyste[]
.rodata:000000000000F000 aTerseFileSyste db '--terse --file-system is equivalent to the following FORMAT:',0Ah
.rodata:000000000000F000                                         ; DATA XREF: usage+269↑o
.rodata:000000000000F000                 db '    %s',0
.rodata:000000000000F044                 align 8
.rodata:000000000000F048 ; const char aNoteYourShellM[]
.rodata:000000000000F048 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+292↑o
.rodata:000000000000F048                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:000000000000F048                 db 'persedes',0Ah
.rodata:000000000000F048                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:000000000000F048                 db 'ocumentation',0Ah
.rodata:000000000000F048                 db 'for details about the options it supports.',0Ah,0
.rodata:000000000000F107                 align 8
.rodata:000000000000F108 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000F108                                         ; DATA XREF: usage+38F↑o
.rodata:000000000000F108                                         ; usage+3F3↑o ...
.rodata:000000000000F130 ; const char aReportAnyTrans[]
.rodata:000000000000F130 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000F130                                         ; DATA XREF: usage+4E7↑o
.rodata:000000000000F130                 db 'am/>',0Ah,0
.rodata:000000000000F177                 align 8
.rodata:000000000000F178 ; const char aOrAvailableLoc[]
.rodata:000000000000F178 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000F178                                         ; DATA XREF: usage:loc_4D4E↑o
.rodata:000000000000F1AB                 align 10h
.rodata:000000000000F1B0 ; const char aIgnoringInvali[]
.rodata:000000000000F1B0 aIgnoringInvali db 'ignoring invalid value of environment variable QUOTING_STYLE: %s',0
.rodata:000000000000F1B0                                         ; DATA XREF: main+4B5↑o
.rodata:000000000000F1F1                 align 8
.rodata:000000000000F1F8 ; const char msgid[]
.rodata:000000000000F1F8 msgid           db 'using %s to denote standard input does not work in file system mo'
.rodata:000000000000F1F8                                         ; DATA XREF: main+375↑o
.rodata:000000000000F1F8                 db 'de',0
.rodata:000000000000F23C                 align 20h
.rodata:000000000000F240 ; const char aCannotReadFile[]
.rodata:000000000000F240 aCannotReadFile db 'cannot read file system information for %s',0
.rodata:000000000000F240                                         ; DATA XREF: main+447↑o
.rodata:000000000000F26B                 align 10h
.rodata:000000000000F270 qword_F270      dq 0BFD0000000000000h   ; DATA XREF: out_epoch_sec_isra_9+21A↑r
.rodata:000000000000F278 ; const char aCannotGetCurre[]
.rodata:000000000000F278 aCannotGetCurre db 'cannot get current directory',0
.rodata:000000000000F278                                         ; DATA XREF: find_mount_point:loc_51A5↑o
.rodata:000000000000F295 ; const char aCannotChangeTo[]
.rodata:000000000000F295 aCannotChangeTo db 'cannot change to directory %s',0
.rodata:000000000000F295                                         ; DATA XREF: find_mount_point+2CB↑o
.rodata:000000000000F295                                         ; find_mount_point+359↑o
.rodata:000000000000F2B3 ; const char filename[]
.rodata:000000000000F2B3 filename        db '..',0               ; DATA XREF: find_mount_point+D4↑o
.rodata:000000000000F2B3                                         ; find_mount_point+1AB↑o ...
.rodata:000000000000F2B6                 align 8
.rodata:000000000000F2B8 ; const char aCannotStatCurr[]
.rodata:000000000000F2B8 aCannotStatCurr db 'cannot stat current directory (now %s)',0
.rodata:000000000000F2B8                                         ; DATA XREF: find_mount_point+30D↑o
.rodata:000000000000F2DF                 align 20h
.rodata:000000000000F2E0 ; const char aFailedToReturn[]
.rodata:000000000000F2E0 aFailedToReturn db 'failed to return to initial working directory',0
.rodata:000000000000F2E0                                         ; DATA XREF: find_mount_point:loc_51CE↑o
.rodata:000000000000F30E a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000F313 ; const char aInvalidArgumen[]
.rodata:000000000000F313 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000F313                                         ; DATA XREF: argmatch_invalid:loc_5480↑o
.rodata:000000000000F32E ; const char aAmbiguousArgum[]
.rodata:000000000000F32E aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000F32E                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000F34B ; const char aValidArguments[]
.rodata:000000000000F34B aValidArguments db 'Valid arguments are:',0
.rodata:000000000000F34B                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000F360 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000F360                 db '  - %s',0
.rodata:000000000000F368 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000F368                                         ; find_bind_mount+124↑o ...
.rodata:000000000000F36D ; const char aWriteError[]
.rodata:000000000000F36D aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_56E3↑o
.rodata:000000000000F36D                                         ; read_file_system_list+4↑o ...
.rodata:000000000000F379 ; const char format[]
.rodata:000000000000F379 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000F380 ; const char aRegularEmptyFi[]
.rodata:000000000000F380 aRegularEmptyFi db 'regular empty file',0
.rodata:000000000000F380                                         ; DATA XREF: file_type+67↑o
.rodata:000000000000F393 ; const char aRegularFile[]
.rodata:000000000000F393 aRegularFile    db 'regular file',0     ; DATA XREF: file_type:loc_5958↑o
.rodata:000000000000F3A0 ; const char aSymbolicLink[]
.rodata:000000000000F3A0 aSymbolicLink   db 'symbolic link',0    ; DATA XREF: file_type:loc_5970↑o
.rodata:000000000000F3AE ; const char aBlockSpecialFi[]
.rodata:000000000000F3AE aBlockSpecialFi db 'block special file',0
.rodata:000000000000F3AE                                         ; DATA XREF: file_type:loc_59A0↑o
.rodata:000000000000F3C1 ; const char aCharacterSpeci[]
.rodata:000000000000F3C1 aCharacterSpeci db 'character special file',0
.rodata:000000000000F3C1                                         ; DATA XREF: file_type:loc_59B0↑o
.rodata:000000000000F3D8 ; const char aFifo[]
.rodata:000000000000F3D8 aFifo           db 'fifo',0             ; DATA XREF: file_type:loc_59C0↑o
.rodata:000000000000F3DD ; const char aSocket[]
.rodata:000000000000F3DD aSocket         db 'socket',0           ; DATA XREF: file_type:loc_5980↑o
.rodata:000000000000F3E4 ; const char aWeirdFile[]
.rodata:000000000000F3E4 aWeirdFile      db 'weird file',0       ; DATA XREF: file_type+4E↑o
.rodata:000000000000F3EF aHM             db '%H:%M',0            ; DATA XREF: __strftime_internal:loc_630E↑o
.rodata:000000000000F3F5 aHMS            db '%H:%M:%S',0         ; DATA XREF: __strftime_internal:loc_64BB↑o
.rodata:000000000000F3FE aYMD            db '%Y-%m-%d',0         ; DATA XREF: __strftime_internal+11D2↑o
.rodata:000000000000F3FE                                         ; __strftime_internal+19CF↑o ...
.rodata:000000000000F407 aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+119E↑o
.rodata:000000000000F410 jpt_5EBF        dd offset loc_6EA1 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                                         ; DATA XREF: __strftime_internal+1FD↑o
.rodata:000000000000F410                                         ; __strftime_internal+208↑r
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h ; jump table for switch statement
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset loc_642E - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset loc_6B27 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset loc_61B6 - 0F410h
.rodata:000000000000F410                 dd offset loc_6D8E - 0F410h, offset loc_6DAB - 0F410h
.rodata:000000000000F410                 dd offset loc_6E45 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset loc_6E67 - 0F410h, offset loc_6B4D - 0F410h
.rodata:000000000000F410                 dd offset loc_6EE2 - 0F410h, offset loc_6F5E - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset loc_6EFA - 0F410h
.rodata:000000000000F410                 dd offset loc_6F12 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset loc_62F3 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset loc_630E - 0F410h, offset loc_61F6 - 0F410h
.rodata:000000000000F410                 dd offset loc_64BB - 0F410h, offset loc_64D4 - 0F410h
.rodata:000000000000F410                 dd offset loc_6B4D - 0F410h, offset loc_6D49 - 0F410h
.rodata:000000000000F410                 dd offset loc_6068 - 0F410h, offset loc_6507 - 0F410h
.rodata:000000000000F410                 dd offset loc_6560 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset loc_61B6 - 0F410h
.rodata:000000000000F410                 dd offset loc_66B7 - 0F410h, offset loc_6068 - 0F410h
.rodata:000000000000F410                 dd offset loc_6CE4 - 0F410h, offset loc_7099 - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset loc_6B4D - 0F410h
.rodata:000000000000F410                 dd offset loc_66B7 - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset loc_7056 - 0F410h, offset loc_7086 - 0F410h
.rodata:000000000000F410                 dd offset loc_6F76 - 0F410h, offset loc_6F9D - 0F410h
.rodata:000000000000F410                 dd offset loc_6FCD - 0F410h, offset def_5EBF - 0F410h
.rodata:000000000000F410                 dd offset loc_704F - 0F410h, offset loc_67B0 - 0F410h
.rodata:000000000000F410                 dd offset loc_6072 - 0F410h, offset loc_6A20 - 0F410h
.rodata:000000000000F410                 dd offset loc_626B - 0F410h, offset loc_6CFC - 0F410h
.rodata:000000000000F410                 dd offset def_5EBF - 0F410h, offset loc_6D31 - 0F410h
.rodata:000000000000F410                 dd offset loc_6068 - 0F410h, offset loc_664D - 0F410h
.rodata:000000000000F410                 dd offset loc_66DC - 0F410h
.rodata:000000000000F5FC                 align 20h
.rodata:000000000000F600 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000F600                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000F638 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000F638                                         ; chdir_long+88↑o ...
.rodata:000000000000F640 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000F640                                         ; main+2E0↑o ...
.rodata:000000000000F644 unk_F644        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000F645                 db  80h
.rodata:000000000000F646                 db  98h
.rodata:000000000000F647                 db    0
.rodata:000000000000F648 unk_F648        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000F649                 db  80h
.rodata:000000000000F64A                 db  99h
.rodata:000000000000F64B                 db    0
.rodata:000000000000F64C unk_F64C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000F64D                 db    7
.rodata:000000000000F64E                 db  65h ; e
.rodata:000000000000F64F                 db    0
.rodata:000000000000F650 unk_F650        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000F651                 db 0AFh
.rodata:000000000000F652                 db    0
.rodata:000000000000F653 unk_F653        db  22h ; "             ; DATA XREF: gettext_quote:loc_7880↑o
.rodata:000000000000F653                                         ; quotearg_buffer_restyled:loc_863B↑o ...
.rodata:000000000000F654                 db    0
.rodata:000000000000F655 ; const char asc_F655[2]
.rodata:000000000000F655 asc_F655        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000F655                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000F657 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000F65F aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000212AC8↓o
.rodata:000000000000F665 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000212AD0↓o
.rodata:000000000000F672 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000212AD8↓o
.rodata:000000000000F672                                         ; .data.rel.ro:0000000000212AF8↓o
.rodata:000000000000F67F aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000F67F                                         ; DATA XREF: .data.rel.ro:0000000000212AE0↓o
.rodata:000000000000F693 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000212AF0↓o
.rodata:000000000000F69B aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000212B08↓o
.rodata:000000000000F6A3                 align 20h
.rodata:000000000000F6C0 jpt_79E1        dd offset loc_878A - 0F6C0h
.rodata:000000000000F6C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000F6C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000F6C0                 dd offset loc_79E3 - 0F6C0h ; jump table for switch statement
.rodata:000000000000F6C0                 dd offset loc_89B8 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_87C4 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_85B4 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_8610 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_8665 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_86AA - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_86E4 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_86E4 - 0F6C0h
.rodata:000000000000F6C0                 dd offset loc_86E4 - 0F6C0h
.rodata:000000000000F6EC jpt_7B3E        dd offset loc_7D60 - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000F6EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh ; jump table for switch statement
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset loc_7DA0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7CA8 - 0F6ECh, offset loc_7C68 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7E30 - 0F6ECh, offset loc_7E20 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7E10 - 0F6ECh, offset loc_7E00 - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset def_7B3E - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DF0 - 0F6ECh, offset loc_7DE0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7DB0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7C43 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7DE0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7DE0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7DE0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7C13 - 0F6ECh
.rodata:000000000000F6EC                 dd offset def_7B3E - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7DE0 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7CB8 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7D88 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7D88 - 0F6ECh, offset loc_7B43 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DE0 - 0F6ECh, offset loc_7B43 - 0F6ECh
.rodata:000000000000F6EC                 dd offset loc_7DB0 - 0F6ECh
.rodata:000000000000F8E8 jpt_7ECA        dd offset loc_7F30 - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000F8E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h ; jump table for switch statement
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset loc_7F20 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8070 - 0F8E8h, offset loc_8058 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7F08 - 0F8E8h, offset loc_8048 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7EF0 - 0F8E8h, offset loc_8030 - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset def_7ECA - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8018 - 0F8E8h, offset loc_8000 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7FE8 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7C40 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_8000 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_8000 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_8000 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7C10 - 0F8E8h
.rodata:000000000000F8E8                 dd offset def_7ECA - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_8000 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7ED0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7FD0 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FD0 - 0F8E8h, offset loc_7B40 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_8000 - 0F8E8h, offset loc_7B40 - 0F8E8h
.rodata:000000000000F8E8                 dd offset loc_7FE8 - 0F8E8h
.rodata:000000000000FAE4                 align 20h
.rodata:000000000000FB00                 public quoting_style_vals
.rodata:000000000000FB00 quoting_style_vals db    0              ; DATA XREF: main+220↑o
.rodata:000000000000FB00                                         ; main+243↑o
.rodata:000000000000FB01                 db    0
.rodata:000000000000FB02                 db    0
.rodata:000000000000FB03                 db    0
.rodata:000000000000FB04                 db    1
.rodata:000000000000FB05                 db    0
.rodata:000000000000FB06                 db    0
.rodata:000000000000FB07                 db    0
.rodata:000000000000FB08                 db    2
.rodata:000000000000FB09                 db    0
.rodata:000000000000FB0A                 db    0
.rodata:000000000000FB0B                 db    0
.rodata:000000000000FB0C                 db    3
.rodata:000000000000FB0D                 db    0
.rodata:000000000000FB0E                 db    0
.rodata:000000000000FB0F                 db    0
.rodata:000000000000FB10                 db    4
.rodata:000000000000FB11                 db    0
.rodata:000000000000FB12                 db    0
.rodata:000000000000FB13                 db    0
.rodata:000000000000FB14                 db    5
.rodata:000000000000FB15                 db    0
.rodata:000000000000FB16                 db    0
.rodata:000000000000FB17                 db    0
.rodata:000000000000FB18                 db    6
.rodata:000000000000FB19                 db    0
.rodata:000000000000FB1A                 db    0
.rodata:000000000000FB1B                 db    0
.rodata:000000000000FB1C                 db    7
.rodata:000000000000FB1D                 db    0
.rodata:000000000000FB1E                 db    0
.rodata:000000000000FB1F                 db    0
.rodata:000000000000FB20                 db    8
.rodata:000000000000FB21                 db    0
.rodata:000000000000FB22                 db    0
.rodata:000000000000FB23                 db    0
.rodata:000000000000FB24                 db    9
.rodata:000000000000FB25                 db    0
.rodata:000000000000FB26                 db    0
.rodata:000000000000FB27                 db    0
.rodata:000000000000FB28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000FB34 aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000FB3B ; const char aC_0[]
.rodata:000000000000FB3B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_95BC↑o
.rodata:000000000000FB3F ; const char aWrittenByS[]
.rodata:000000000000FB3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000FB3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000FB4F ; const char aWrittenBySAndS[]
.rodata:000000000000FB4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000FB4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000FB66 ; const char aWrittenBySSAnd[]
.rodata:000000000000FB66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000FB66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000FB82 ; const char aReportBugsToS[]
.rodata:000000000000FB82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000FB82                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000FB97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000FB97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000FBAD ; const char aSHomePageS[]
.rodata:000000000000FBAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000FBAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000FBC1                 align 8
.rodata:000000000000FBC8 ; const char aLicenseGplv3Gn[]
.rodata:000000000000FBC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000FBC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000FBC8                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000FBC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000FBC8                 db '.',0Ah
.rodata:000000000000FBC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000FBC8                 db 0Ah,0
.rodata:000000000000FC94                 align 8
.rodata:000000000000FC98 ; const char aWrittenBySSSAn[]
.rodata:000000000000FC98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FC98                                         ; DATA XREF: version_etc_arn:loc_9810↑o
.rodata:000000000000FC98                 db 'and %s.',0Ah,0
.rodata:000000000000FCB8 ; const char aWrittenBySSSSA[]
.rodata:000000000000FCB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FCB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000FCB8                 db '%s, and %s.',0Ah,0
.rodata:000000000000FCDC                 align 20h
.rodata:000000000000FCE0 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000FCE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FCE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000FCE0                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000FD08 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000FD08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FD08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000FD08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000FD34                 align 8
.rodata:000000000000FD38 ; const char aWrittenBySSSSS[]
.rodata:000000000000FD38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FD38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000FD38                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000FD38                 db 'and %s.',0Ah,0
.rodata:000000000000FD68 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000FD68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FD68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000FD68                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000FD68                 db '%s, and %s.',0Ah,0
.rodata:000000000000FD9C                 align 20h
.rodata:000000000000FDA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000FDA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000FDA0                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000FDA0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000FDDC                 align 20h
.rodata:000000000000FDE0 ; const char aGeneralHelpUsi[]
.rodata:000000000000FDE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000FDE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000FDE0                 db 0
.rodata:000000000000FE21                 align 4
.rodata:000000000000FE24 jpt_9624        dd offset loc_96A6 - 0FE24h
.rodata:000000000000FE24                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000FE24                                         ; version_etc_arn+9D↑r
.rodata:000000000000FE24                 dd offset loc_9738 - 0FE24h ; jump table for switch statement
.rodata:000000000000FE24                 dd offset loc_9778 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_97C0 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_9810 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_9868 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_9898 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_9900 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_9630 - 0FE24h
.rodata:000000000000FE24                 dd offset loc_96E0 - 0FE24h
.rodata:000000000000FE4C                 align 20h
.rodata:000000000000FE60                 public version_etc_copyright
.rodata:000000000000FE60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000FE60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000FE8F ; const char aMemoryExhauste[]
.rodata:000000000000FE8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000FEA0 ; const char file[]
.rodata:000000000000FEA0 file            db '../coreutils-8.31/lib/chdir-long.c',0
.rodata:000000000000FEA0                                         ; DATA XREF: cdb_free+29↑o
.rodata:000000000000FEA0                                         ; chdir_long+239↑o ...
.rodata:000000000000FEC3 ; const char assertion[]
.rodata:000000000000FEC3 assertion       db '! close_fail',0     ; DATA XREF: cdb_free+30↑o
.rodata:000000000000FED0 ; const char a0Len[]
.rodata:000000000000FED0 a0Len           db '0 < len',0          ; DATA XREF: chdir_long+264↑o
.rodata:000000000000FED8 ; const char a4096Len[]
.rodata:000000000000FED8 a4096Len        db '4096 <= len',0      ; DATA XREF: chdir_long+283↑o
.rodata:000000000000FEE4 ; const char aDir[]
.rodata:000000000000FEE4 aDir            db '*dir != ',27h,'/',27h,0
.rodata:000000000000FEE4                                         ; DATA XREF: chdir_long+2C1↑o
.rodata:000000000000FEE4                                         ; gettext_quote+27↑o ...
.rodata:000000000000FEF0 ; const char aDirDirEnd[]
.rodata:000000000000FEF0 aDirDirEnd      db 'dir <= dir_end',0   ; DATA XREF: chdir_long+2A2↑o
.rodata:000000000000FEFF ; const char aSlashDir4096[]
.rodata:000000000000FEFF aSlashDir4096   db 'slash - dir < 4096',0
.rodata:000000000000FEFF                                         ; DATA XREF: chdir_long+240↑o
.rodata:000000000000FF12                 align 8
.rodata:000000000000FF18 ; const char _PRETTY_FUNCTION___5081[]
.rodata:000000000000FF18 __PRETTY_FUNCTION___5081 db 'cdb_free',0
.rodata:000000000000FF18                                         ; DATA XREF: cdb_free:loc_9F42↑o
.rodata:000000000000FF21                 align 8
.rodata:000000000000FF28 ; const char _PRETTY_FUNCTION___5099[]
.rodata:000000000000FF28 __PRETTY_FUNCTION___5099 db 'chdir_long',0
.rodata:000000000000FF28                                         ; DATA XREF: chdir_long:loc_A1E2↑o
.rodata:000000000000FF28                                         ; chdir_long:loc_A206↑o ...
.rodata:000000000000FF33 ; const char aProcSelfMounti[]
.rodata:000000000000FF33 aProcSelfMounti db '/proc/self/mountinfo',0
.rodata:000000000000FF33                                         ; DATA XREF: read_file_system_list+F↑o
.rodata:000000000000FF48 ; const char asc_FF48[]
.rodata:000000000000FF48 asc_FF48        db ' - ',0              ; DATA XREF: read_file_system_list+CB↑o
.rodata:000000000000FF4C ; const char aNSNNSNC[]
.rodata:000000000000FF4C aNSNNSNC        db ' - %n%*s%n %n%*s%n %c',0
.rodata:000000000000FF4C                                         ; DATA XREF: read_file_system_list+F7↑o
.rodata:000000000000FF62 aSubfs          db 'subfs',0            ; DATA XREF: read_file_system_list:loc_A6F8↑o
.rodata:000000000000FF62                                         ; read_file_system_list+557↑o
.rodata:000000000000FF68 aKernfs         db 'kernfs',0           ; DATA XREF: read_file_system_list+3F8↑o
.rodata:000000000000FF68                                         ; read_file_system_list+63F↑o
.rodata:000000000000FF6F ; const char aIgnore[]
.rodata:000000000000FF6F aIgnore         db 'ignore',0           ; DATA XREF: read_file_system_list+416↑o
.rodata:000000000000FF6F                                         ; read_file_system_list+659↑o
.rodata:000000000000FF76 ; const char aNone[]
.rodata:000000000000FF76 aNone           db 'none',0             ; DATA XREF: read_file_system_list+436↑o
.rodata:000000000000FF76                                         ; read_file_system_list+675↑o
.rodata:000000000000FF7B aSmbfs          db 'smbfs',0            ; DATA XREF: read_file_system_list+78B↑o
.rodata:000000000000FF7B                                         ; read_file_system_list+7D7↑o
.rodata:000000000000FF81 aHosts          db '-hosts',0           ; DATA XREF: read_file_system_list:loc_A84A↑o
.rodata:000000000000FF81                                         ; read_file_system_list:loc_AB4E↑o
.rodata:000000000000FF88 ; const char aEtcMtab[]
.rodata:000000000000FF88 aEtcMtab        db '/etc/mtab',0        ; DATA XREF: read_file_system_list+487↑o
.rodata:000000000000FF92 ; const char opt[]
.rodata:000000000000FF92 opt             db 'bind',0             ; DATA XREF: read_file_system_list:loc_A8B0↑o
.rodata:000000000000FF97                 align 8
.rodata:000000000000FF98 ; const char aUUUUNSNNSNC[]
.rodata:000000000000FF98 aUUUUNSNNSNC    db '%*u %*u %u:%u %n%*s%n %n%*s%n%c',0
.rodata:000000000000FF98                                         ; DATA XREF: read_file_system_list+90↑o
.rodata:000000000000FFB8 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000FFBA aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_B2F0↑o
.rodata:000000000000FFC0 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000FFC0                                         ; locale_charset:loc_B340↑o
.rodata:000000000000FFC6                 align 8
.rodata:000000000000FFC8 jpt_BF1B        dd offset def_BF1B - 0FFC8h
.rodata:000000000000FFC8                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:000000000000FFC8                                         ; vasnprintf+554↑r
.rodata:000000000000FFC8                 dd offset loc_C380 - 0FFC8h ; jump table for switch statement
.rodata:000000000000FFC8                 dd offset loc_C350 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C2C8 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C288 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C058 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C058 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C208 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C180 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C058 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_C058 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:000000000000FFC8                 dd offset loc_BF20 - 0FFC8h
.rodata:0000000000010010 jpt_C4C0        dd offset loc_C730 - 10010h
.rodata:0000000000010010                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000010010                                         ; vasnprintf+AF9↑r
.rodata:0000000000010010                 dd offset loc_C750 - 10010h ; jump table for switch statement
.rodata:0000000000010010                 dd offset loc_C740 - 10010h
.rodata:0000000000010010                 dd offset loc_C600 - 10010h
.rodata:0000000000010010                 dd offset loc_C600 - 10010h
.rodata:0000000000010024 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:000000000001002B                 align 10h
.rodata:0000000000010030 jpt_CB16        dd offset def_CB16 - 10030h
.rodata:0000000000010030                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000010030                                         ; printf_fetchargs+2F↑r
.rodata:0000000000010030                 dd offset loc_CB9C - 10030h ; jump table for switch statement
.rodata:0000000000010030                 dd offset loc_CB9C - 10030h
.rodata:0000000000010030                 dd offset loc_CBBE - 10030h
.rodata:0000000000010030                 dd offset loc_CBBE - 10030h
.rodata:0000000000010030                 dd offset loc_CB7A - 10030h
.rodata:0000000000010030                 dd offset loc_CB7A - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CC12 - 10030h
.rodata:0000000000010030                 dd offset loc_CB20 - 10030h
.rodata:0000000000010030                 dd offset loc_CB7A - 10030h
.rodata:0000000000010030                 dd offset loc_CB7A - 10030h
.rodata:0000000000010030                 dd offset loc_CBE4 - 10030h
.rodata:0000000000010030                 dd offset loc_CC40 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:0000000000010030                 dd offset loc_CB56 - 10030h
.rodata:000000000001008C                 align 10h
.rodata:0000000000010090 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000010091                 db    0
.rodata:0000000000010092                 db    0
.rodata:0000000000010093                 db    0
.rodata:0000000000010094                 db  4Eh ; N
.rodata:0000000000010095                 db    0
.rodata:0000000000010096                 db    0
.rodata:0000000000010097                 db    0
.rodata:0000000000010098                 db  55h ; U
.rodata:0000000000010099                 db    0
.rodata:000000000001009A                 db    0
.rodata:000000000001009B                 db    0
.rodata:000000000001009C                 db  4Ch ; L
.rodata:000000000001009D                 db    0
.rodata:000000000001009E                 db    0
.rodata:000000000001009F                 db    0
.rodata:00000000000100A0                 db  4Ch ; L
.rodata:00000000000100A1                 db    0
.rodata:00000000000100A2                 db    0
.rodata:00000000000100A3                 db    0
.rodata:00000000000100A4                 db  29h ; )
.rodata:00000000000100A5                 db    0
.rodata:00000000000100A6                 db    0
.rodata:00000000000100A7                 db    0
.rodata:00000000000100A8                 db    0
.rodata:00000000000100A9                 db    0
.rodata:00000000000100AA                 db    0
.rodata:00000000000100AB                 db    0
.rodata:00000000000100AC jpt_CF25        dd offset loc_CF9B - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                                         ; DATA XREF: printf_parse+234↑o
.rodata:00000000000100AC                                         ; printf_parse+23E↑r
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh ; jump table for switch statement
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D49B - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D4BC - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D49B - 100ACh, offset loc_D49B - 100ACh
.rodata:00000000000100AC                 dd offset loc_D49B - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_CF27 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset loc_D4CC - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D49B - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D428 - 100ACh, offset loc_D43B - 100ACh
.rodata:00000000000100AC                 dd offset loc_D49B - 100ACh, offset loc_D49B - 100ACh
.rodata:00000000000100AC                 dd offset loc_D49B - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D43B - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset loc_D3DC - 100ACh
.rodata:00000000000100AC                 dd offset loc_D4CC - 100ACh, offset loc_D520 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D488 - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset loc_D4CC - 100ACh, offset def_CF25 - 100ACh
.rodata:00000000000100AC                 dd offset def_CF25 - 100ACh, offset loc_D4CC - 100ACh
.rodata:00000000000100AC _rodata         ends
.rodata:00000000000100AC
.eh_frame_hdr:00000000000101FC ; ===========================================================================
.eh_frame_hdr:00000000000101FC
.eh_frame_hdr:00000000000101FC ; Segment type: Pure data
.eh_frame_hdr:00000000000101FC ; Segment permissions: Read
.eh_frame_hdr:00000000000101FC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000101FC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000101FC                 ;org 101FCh
.eh_frame_hdr:00000000000101FC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000101FD                 db  1Bh
.eh_frame_hdr:00000000000101FE                 db    3
.eh_frame_hdr:00000000000101FF                 db  3Bh ; ;
.eh_frame_hdr:0000000000010200                 db  30h ; 0
.eh_frame_hdr:0000000000010201                 db    4
.eh_frame_hdr:0000000000010202                 db    0
.eh_frame_hdr:0000000000010203                 db    0
.eh_frame_hdr:0000000000010204                 db  85h
.eh_frame_hdr:0000000000010205                 db    0
.eh_frame_hdr:0000000000010206                 db    0
.eh_frame_hdr:0000000000010207                 db    0
.eh_frame_hdr:0000000000010208                 db 0D4h
.eh_frame_hdr:0000000000010209                 db  1Ah
.eh_frame_hdr:000000000001020A                 db 0FFh
.eh_frame_hdr:000000000001020B                 db 0FFh
.eh_frame_hdr:000000000001020C                 db  7Ch ; |
.eh_frame_hdr:000000000001020D                 db    4
.eh_frame_hdr:000000000001020E                 db    0
.eh_frame_hdr:000000000001020F                 db    0
.eh_frame_hdr:0000000000010210                 db  34h ; 4
.eh_frame_hdr:0000000000010211                 db  20h
.eh_frame_hdr:0000000000010212                 db 0FFh
.eh_frame_hdr:0000000000010213                 db 0FFh
.eh_frame_hdr:0000000000010214                 db 0A4h
.eh_frame_hdr:0000000000010215                 db    4
.eh_frame_hdr:0000000000010216                 db    0
.eh_frame_hdr:0000000000010217                 db    0
.eh_frame_hdr:0000000000010218                 db  44h ; D
.eh_frame_hdr:0000000000010219                 db  20h
.eh_frame_hdr:000000000001021A                 db 0FFh
.eh_frame_hdr:000000000001021B                 db 0FFh
.eh_frame_hdr:000000000001021C                 db  9Ch
.eh_frame_hdr:000000000001021D                 db    7
.eh_frame_hdr:000000000001021E                 db    0
.eh_frame_hdr:000000000001021F                 db    0
.eh_frame_hdr:0000000000010220                 db 0B4h
.eh_frame_hdr:0000000000010221                 db  25h ; %
.eh_frame_hdr:0000000000010222                 db 0FFh
.eh_frame_hdr:0000000000010223                 db 0FFh
.eh_frame_hdr:0000000000010224                 db  4Ch ; L
.eh_frame_hdr:0000000000010225                 db    4
.eh_frame_hdr:0000000000010226                 db    0
.eh_frame_hdr:0000000000010227                 db    0
.eh_frame_hdr:0000000000010228                 db 0C4h
.eh_frame_hdr:0000000000010229                 db  26h ; &
.eh_frame_hdr:000000000001022A                 db 0FFh
.eh_frame_hdr:000000000001022B                 db 0FFh
.eh_frame_hdr:000000000001022C                 db 0BCh
.eh_frame_hdr:000000000001022D                 db    4
.eh_frame_hdr:000000000001022E                 db    0
.eh_frame_hdr:000000000001022F                 db    0
.eh_frame_hdr:0000000000010230                 db  84h
.eh_frame_hdr:0000000000010231                 db  27h ; '
.eh_frame_hdr:0000000000010232                 db 0FFh
.eh_frame_hdr:0000000000010233                 db 0FFh
.eh_frame_hdr:0000000000010234                 db    4
.eh_frame_hdr:0000000000010235                 db    5
.eh_frame_hdr:0000000000010236                 db    0
.eh_frame_hdr:0000000000010237                 db    0
.eh_frame_hdr:0000000000010238                 db 0C4h
.eh_frame_hdr:0000000000010239                 db  27h ; '
.eh_frame_hdr:000000000001023A                 db 0FFh
.eh_frame_hdr:000000000001023B                 db 0FFh
.eh_frame_hdr:000000000001023C                 db  2Ch ; ,
.eh_frame_hdr:000000000001023D                 db    5
.eh_frame_hdr:000000000001023E                 db    0
.eh_frame_hdr:000000000001023F                 db    0
.eh_frame_hdr:0000000000010240                 db    4
.eh_frame_hdr:0000000000010241                 db  28h ; (
.eh_frame_hdr:0000000000010242                 db 0FFh
.eh_frame_hdr:0000000000010243                 db 0FFh
.eh_frame_hdr:0000000000010244                 db  54h ; T
.eh_frame_hdr:0000000000010245                 db    5
.eh_frame_hdr:0000000000010246                 db    0
.eh_frame_hdr:0000000000010247                 db    0
.eh_frame_hdr:0000000000010248                 db  44h ; D
.eh_frame_hdr:0000000000010249                 db  28h ; (
.eh_frame_hdr:000000000001024A                 db 0FFh
.eh_frame_hdr:000000000001024B                 db 0FFh
.eh_frame_hdr:000000000001024C                 db  7Ch ; |
.eh_frame_hdr:000000000001024D                 db    5
.eh_frame_hdr:000000000001024E                 db    0
.eh_frame_hdr:000000000001024F                 db    0
.eh_frame_hdr:0000000000010250                 db  84h
.eh_frame_hdr:0000000000010251                 db  28h ; (
.eh_frame_hdr:0000000000010252                 db 0FFh
.eh_frame_hdr:0000000000010253                 db 0FFh
.eh_frame_hdr:0000000000010254                 db 0A4h
.eh_frame_hdr:0000000000010255                 db    5
.eh_frame_hdr:0000000000010256                 db    0
.eh_frame_hdr:0000000000010257                 db    0
.eh_frame_hdr:0000000000010258                 db  64h ; d
.eh_frame_hdr:0000000000010259                 db  35h ; 5
.eh_frame_hdr:000000000001025A                 db 0FFh
.eh_frame_hdr:000000000001025B                 db 0FFh
.eh_frame_hdr:000000000001025C                 db 0D0h
.eh_frame_hdr:000000000001025D                 db    5
.eh_frame_hdr:000000000001025E                 db    0
.eh_frame_hdr:000000000001025F                 db    0
.eh_frame_hdr:0000000000010260                 db  64h ; d
.eh_frame_hdr:0000000000010261                 db  3Ah ; :
.eh_frame_hdr:0000000000010262                 db 0FFh
.eh_frame_hdr:0000000000010263                 db 0FFh
.eh_frame_hdr:0000000000010264                 db  1Ch
.eh_frame_hdr:0000000000010265                 db    6
.eh_frame_hdr:0000000000010266                 db    0
.eh_frame_hdr:0000000000010267                 db    0
.eh_frame_hdr:0000000000010268                 db  54h ; T
.eh_frame_hdr:0000000000010269                 db  3Bh ; ;
.eh_frame_hdr:000000000001026A                 db 0FFh
.eh_frame_hdr:000000000001026B                 db 0FFh
.eh_frame_hdr:000000000001026C                 db  48h ; H
.eh_frame_hdr:000000000001026D                 db    6
.eh_frame_hdr:000000000001026E                 db    0
.eh_frame_hdr:000000000001026F                 db    0
.eh_frame_hdr:0000000000010270                 db  94h
.eh_frame_hdr:0000000000010271                 db  3Ch ; <
.eh_frame_hdr:0000000000010272                 db 0FFh
.eh_frame_hdr:0000000000010273                 db 0FFh
.eh_frame_hdr:0000000000010274                 db  84h
.eh_frame_hdr:0000000000010275                 db    6
.eh_frame_hdr:0000000000010276                 db    0
.eh_frame_hdr:0000000000010277                 db    0
.eh_frame_hdr:0000000000010278                 db 0C4h
.eh_frame_hdr:0000000000010279                 db  3Dh ; =
.eh_frame_hdr:000000000001027A                 db 0FFh
.eh_frame_hdr:000000000001027B                 db 0FFh
.eh_frame_hdr:000000000001027C                 db 0D4h
.eh_frame_hdr:000000000001027D                 db    6
.eh_frame_hdr:000000000001027E                 db    0
.eh_frame_hdr:000000000001027F                 db    0
.eh_frame_hdr:0000000000010280                 db  24h ; $
.eh_frame_hdr:0000000000010281                 db  41h ; A
.eh_frame_hdr:0000000000010282                 db 0FFh
.eh_frame_hdr:0000000000010283                 db 0FFh
.eh_frame_hdr:0000000000010284                 db  2Ch ; ,
.eh_frame_hdr:0000000000010285                 db    7
.eh_frame_hdr:0000000000010286                 db    0
.eh_frame_hdr:0000000000010287                 db    0
.eh_frame_hdr:0000000000010288                 db  34h ; 4
.eh_frame_hdr:0000000000010289                 db  47h ; G
.eh_frame_hdr:000000000001028A                 db 0FFh
.eh_frame_hdr:000000000001028B                 db 0FFh
.eh_frame_hdr:000000000001028C                 db  70h ; p
.eh_frame_hdr:000000000001028D                 db    7
.eh_frame_hdr:000000000001028E                 db    0
.eh_frame_hdr:000000000001028F                 db    0
.eh_frame_hdr:0000000000010290                 db  44h ; D
.eh_frame_hdr:0000000000010291                 db  4Ch ; L
.eh_frame_hdr:0000000000010292                 db 0FFh
.eh_frame_hdr:0000000000010293                 db 0FFh
.eh_frame_hdr:0000000000010294                 db 0ECh
.eh_frame_hdr:0000000000010295                 db    7
.eh_frame_hdr:0000000000010296                 db    0
.eh_frame_hdr:0000000000010297                 db    0
.eh_frame_hdr:0000000000010298                 db    4
.eh_frame_hdr:0000000000010299                 db  50h ; P
.eh_frame_hdr:000000000001029A                 db 0FFh
.eh_frame_hdr:000000000001029B                 db 0FFh
.eh_frame_hdr:000000000001029C                 db  1Ch
.eh_frame_hdr:000000000001029D                 db    8
.eh_frame_hdr:000000000001029E                 db    0
.eh_frame_hdr:000000000001029F                 db    0
.eh_frame_hdr:00000000000102A0                 db 0F4h
.eh_frame_hdr:00000000000102A1                 db  50h ; P
.eh_frame_hdr:00000000000102A2                 db 0FFh
.eh_frame_hdr:00000000000102A3                 db 0FFh
.eh_frame_hdr:00000000000102A4                 db  6Ch ; l
.eh_frame_hdr:00000000000102A5                 db    8
.eh_frame_hdr:00000000000102A6                 db    0
.eh_frame_hdr:00000000000102A7                 db    0
.eh_frame_hdr:00000000000102A8                 db    4
.eh_frame_hdr:00000000000102A9                 db  51h ; Q
.eh_frame_hdr:00000000000102AA                 db 0FFh
.eh_frame_hdr:00000000000102AB                 db 0FFh
.eh_frame_hdr:00000000000102AC                 db  80h
.eh_frame_hdr:00000000000102AD                 db    8
.eh_frame_hdr:00000000000102AE                 db    0
.eh_frame_hdr:00000000000102AF                 db    0
.eh_frame_hdr:00000000000102B0                 db  24h ; $
.eh_frame_hdr:00000000000102B1                 db  52h ; R
.eh_frame_hdr:00000000000102B2                 db 0FFh
.eh_frame_hdr:00000000000102B3                 db 0FFh
.eh_frame_hdr:00000000000102B4                 db 0CCh
.eh_frame_hdr:00000000000102B5                 db    8
.eh_frame_hdr:00000000000102B6                 db    0
.eh_frame_hdr:00000000000102B7                 db    0
.eh_frame_hdr:00000000000102B8                 db 0A4h
.eh_frame_hdr:00000000000102B9                 db  52h ; R
.eh_frame_hdr:00000000000102BA                 db 0FFh
.eh_frame_hdr:00000000000102BB                 db 0FFh
.eh_frame_hdr:00000000000102BC                 db 0F8h
.eh_frame_hdr:00000000000102BD                 db    8
.eh_frame_hdr:00000000000102BE                 db    0
.eh_frame_hdr:00000000000102BF                 db    0
.eh_frame_hdr:00000000000102C0                 db 0C4h
.eh_frame_hdr:00000000000102C1                 db  53h ; S
.eh_frame_hdr:00000000000102C2                 db 0FFh
.eh_frame_hdr:00000000000102C3                 db 0FFh
.eh_frame_hdr:00000000000102C4                 db  58h ; X
.eh_frame_hdr:00000000000102C5                 db    9
.eh_frame_hdr:00000000000102C6                 db    0
.eh_frame_hdr:00000000000102C7                 db    0
.eh_frame_hdr:00000000000102C8                 db  34h ; 4
.eh_frame_hdr:00000000000102C9                 db  54h ; T
.eh_frame_hdr:00000000000102CA                 db 0FFh
.eh_frame_hdr:00000000000102CB                 db 0FFh
.eh_frame_hdr:00000000000102CC                 db 0A4h
.eh_frame_hdr:00000000000102CD                 db    9
.eh_frame_hdr:00000000000102CE                 db    0
.eh_frame_hdr:00000000000102CF                 db    0
.eh_frame_hdr:00000000000102D0                 db  84h
.eh_frame_hdr:00000000000102D1                 db  54h ; T
.eh_frame_hdr:00000000000102D2                 db 0FFh
.eh_frame_hdr:00000000000102D3                 db 0FFh
.eh_frame_hdr:00000000000102D4                 db 0E4h
.eh_frame_hdr:00000000000102D5                 db    9
.eh_frame_hdr:00000000000102D6                 db    0
.eh_frame_hdr:00000000000102D7                 db    0
.eh_frame_hdr:00000000000102D8                 db  94h
.eh_frame_hdr:00000000000102D9                 db  54h ; T
.eh_frame_hdr:00000000000102DA                 db 0FFh
.eh_frame_hdr:00000000000102DB                 db 0FFh
.eh_frame_hdr:00000000000102DC                 db 0F8h
.eh_frame_hdr:00000000000102DD                 db    9
.eh_frame_hdr:00000000000102DE                 db    0
.eh_frame_hdr:00000000000102DF                 db    0
.eh_frame_hdr:00000000000102E0                 db 0A4h
.eh_frame_hdr:00000000000102E1                 db  54h ; T
.eh_frame_hdr:00000000000102E2                 db 0FFh
.eh_frame_hdr:00000000000102E3                 db 0FFh
.eh_frame_hdr:00000000000102E4                 db  0Ch
.eh_frame_hdr:00000000000102E5                 db  0Ah
.eh_frame_hdr:00000000000102E6                 db    0
.eh_frame_hdr:00000000000102E7                 db    0
.eh_frame_hdr:00000000000102E8                 db  54h ; T
.eh_frame_hdr:00000000000102E9                 db  55h ; U
.eh_frame_hdr:00000000000102EA                 db 0FFh
.eh_frame_hdr:00000000000102EB                 db 0FFh
.eh_frame_hdr:00000000000102EC                 db  3Ch ; <
.eh_frame_hdr:00000000000102ED                 db  0Ah
.eh_frame_hdr:00000000000102EE                 db    0
.eh_frame_hdr:00000000000102EF                 db    0
.eh_frame_hdr:00000000000102F0                 db  74h ; t
.eh_frame_hdr:00000000000102F1                 db  55h ; U
.eh_frame_hdr:00000000000102F2                 db 0FFh
.eh_frame_hdr:00000000000102F3                 db 0FFh
.eh_frame_hdr:00000000000102F4                 db  5Ch ; \
.eh_frame_hdr:00000000000102F5                 db  0Ah
.eh_frame_hdr:00000000000102F6                 db    0
.eh_frame_hdr:00000000000102F7                 db    0
.eh_frame_hdr:00000000000102F8                 db 0D4h
.eh_frame_hdr:00000000000102F9                 db  55h ; U
.eh_frame_hdr:00000000000102FA                 db 0FFh
.eh_frame_hdr:00000000000102FB                 db 0FFh
.eh_frame_hdr:00000000000102FC                 db  90h
.eh_frame_hdr:00000000000102FD                 db  0Ah
.eh_frame_hdr:00000000000102FE                 db    0
.eh_frame_hdr:00000000000102FF                 db    0
.eh_frame_hdr:0000000000010300                 db  34h ; 4
.eh_frame_hdr:0000000000010301                 db  56h ; V
.eh_frame_hdr:0000000000010302                 db 0FFh
.eh_frame_hdr:0000000000010303                 db 0FFh
.eh_frame_hdr:0000000000010304                 db 0BCh
.eh_frame_hdr:0000000000010305                 db  0Ah
.eh_frame_hdr:0000000000010306                 db    0
.eh_frame_hdr:0000000000010307                 db    0
.eh_frame_hdr:0000000000010308                 db  94h
.eh_frame_hdr:0000000000010309                 db  56h ; V
.eh_frame_hdr:000000000001030A                 db 0FFh
.eh_frame_hdr:000000000001030B                 db 0FFh
.eh_frame_hdr:000000000001030C                 db 0D0h
.eh_frame_hdr:000000000001030D                 db  0Ah
.eh_frame_hdr:000000000001030E                 db    0
.eh_frame_hdr:000000000001030F                 db    0
.eh_frame_hdr:0000000000010310                 db 0E4h
.eh_frame_hdr:0000000000010311                 db  56h ; V
.eh_frame_hdr:0000000000010312                 db 0FFh
.eh_frame_hdr:0000000000010313                 db 0FFh
.eh_frame_hdr:0000000000010314                 db 0FCh
.eh_frame_hdr:0000000000010315                 db  0Ah
.eh_frame_hdr:0000000000010316                 db    0
.eh_frame_hdr:0000000000010317                 db    0
.eh_frame_hdr:0000000000010318                 db 0D4h
.eh_frame_hdr:0000000000010319                 db  57h ; W
.eh_frame_hdr:000000000001031A                 db 0FFh
.eh_frame_hdr:000000000001031B                 db 0FFh
.eh_frame_hdr:000000000001031C                 db  14h
.eh_frame_hdr:000000000001031D                 db  0Bh
.eh_frame_hdr:000000000001031E                 db    0
.eh_frame_hdr:000000000001031F                 db    0
.eh_frame_hdr:0000000000010320                 db  64h ; d
.eh_frame_hdr:0000000000010321                 db  59h ; Y
.eh_frame_hdr:0000000000010322                 db 0FFh
.eh_frame_hdr:0000000000010323                 db 0FFh
.eh_frame_hdr:0000000000010324                 db  28h ; (
.eh_frame_hdr:0000000000010325                 db  0Bh
.eh_frame_hdr:0000000000010326                 db    0
.eh_frame_hdr:0000000000010327                 db    0
.eh_frame_hdr:0000000000010328                 db  74h ; t
.eh_frame_hdr:0000000000010329                 db  59h ; Y
.eh_frame_hdr:000000000001032A                 db 0FFh
.eh_frame_hdr:000000000001032B                 db 0FFh
.eh_frame_hdr:000000000001032C                 db  3Ch ; <
.eh_frame_hdr:000000000001032D                 db  0Bh
.eh_frame_hdr:000000000001032E                 db    0
.eh_frame_hdr:000000000001032F                 db    0
.eh_frame_hdr:0000000000010330                 db  14h
.eh_frame_hdr:0000000000010331                 db  5Ah ; Z
.eh_frame_hdr:0000000000010332                 db 0FFh
.eh_frame_hdr:0000000000010333                 db 0FFh
.eh_frame_hdr:0000000000010334                 db  54h ; T
.eh_frame_hdr:0000000000010335                 db  0Bh
.eh_frame_hdr:0000000000010336                 db    0
.eh_frame_hdr:0000000000010337                 db    0
.eh_frame_hdr:0000000000010338                 db  64h ; d
.eh_frame_hdr:0000000000010339                 db  5Ah ; Z
.eh_frame_hdr:000000000001033A                 db 0FFh
.eh_frame_hdr:000000000001033B                 db 0FFh
.eh_frame_hdr:000000000001033C                 db  80h
.eh_frame_hdr:000000000001033D                 db  0Bh
.eh_frame_hdr:000000000001033E                 db    0
.eh_frame_hdr:000000000001033F                 db    0
.eh_frame_hdr:0000000000010340                 db 0B4h
.eh_frame_hdr:0000000000010341                 db  5Ah ; Z
.eh_frame_hdr:0000000000010342                 db 0FFh
.eh_frame_hdr:0000000000010343                 db 0FFh
.eh_frame_hdr:0000000000010344                 db 0ACh
.eh_frame_hdr:0000000000010345                 db  0Bh
.eh_frame_hdr:0000000000010346                 db    0
.eh_frame_hdr:0000000000010347                 db    0
.eh_frame_hdr:0000000000010348                 db  74h ; t
.eh_frame_hdr:0000000000010349                 db  75h ; u
.eh_frame_hdr:000000000001034A                 db 0FFh
.eh_frame_hdr:000000000001034B                 db 0FFh
.eh_frame_hdr:000000000001034C                 db  24h ; $
.eh_frame_hdr:000000000001034D                 db  0Ch
.eh_frame_hdr:000000000001034E                 db    0
.eh_frame_hdr:000000000001034F                 db    0
.eh_frame_hdr:0000000000010350                 db 0C4h
.eh_frame_hdr:0000000000010351                 db  75h ; u
.eh_frame_hdr:0000000000010352                 db 0FFh
.eh_frame_hdr:0000000000010353                 db 0FFh
.eh_frame_hdr:0000000000010354                 db  54h ; T
.eh_frame_hdr:0000000000010355                 db  0Ch
.eh_frame_hdr:0000000000010356                 db    0
.eh_frame_hdr:0000000000010357                 db    0
.eh_frame_hdr:0000000000010358                 db  64h ; d
.eh_frame_hdr:0000000000010359                 db  76h ; v
.eh_frame_hdr:000000000001035A                 db 0FFh
.eh_frame_hdr:000000000001035B                 db 0FFh
.eh_frame_hdr:000000000001035C                 db  74h ; t
.eh_frame_hdr:000000000001035D                 db  0Ch
.eh_frame_hdr:000000000001035E                 db    0
.eh_frame_hdr:000000000001035F                 db    0
.eh_frame_hdr:0000000000010360                 db  54h ; T
.eh_frame_hdr:0000000000010361                 db  77h ; w
.eh_frame_hdr:0000000000010362                 db 0FFh
.eh_frame_hdr:0000000000010363                 db 0FFh
.eh_frame_hdr:0000000000010364                 db 0B8h
.eh_frame_hdr:0000000000010365                 db  0Ch
.eh_frame_hdr:0000000000010366                 db    0
.eh_frame_hdr:0000000000010367                 db    0
.eh_frame_hdr:0000000000010368                 db  94h
.eh_frame_hdr:0000000000010369                 db  89h
.eh_frame_hdr:000000000001036A                 db 0FFh
.eh_frame_hdr:000000000001036B                 db 0FFh
.eh_frame_hdr:000000000001036C                 db  30h ; 0
.eh_frame_hdr:000000000001036D                 db  0Dh
.eh_frame_hdr:000000000001036E                 db    0
.eh_frame_hdr:000000000001036F                 db    0
.eh_frame_hdr:0000000000010370                 db  44h ; D
.eh_frame_hdr:0000000000010371                 db  8Bh
.eh_frame_hdr:0000000000010372                 db 0FFh
.eh_frame_hdr:0000000000010373                 db 0FFh
.eh_frame_hdr:0000000000010374                 db  9Ch
.eh_frame_hdr:0000000000010375                 db  0Dh
.eh_frame_hdr:0000000000010376                 db    0
.eh_frame_hdr:0000000000010377                 db    0
.eh_frame_hdr:0000000000010378                 db  84h
.eh_frame_hdr:0000000000010379                 db  8Bh
.eh_frame_hdr:000000000001037A                 db 0FFh
.eh_frame_hdr:000000000001037B                 db 0FFh
.eh_frame_hdr:000000000001037C                 db 0C8h
.eh_frame_hdr:000000000001037D                 db  0Dh
.eh_frame_hdr:000000000001037E                 db    0
.eh_frame_hdr:000000000001037F                 db    0
.eh_frame_hdr:0000000000010380                 db 0A4h
.eh_frame_hdr:0000000000010381                 db  8Bh
.eh_frame_hdr:0000000000010382                 db 0FFh
.eh_frame_hdr:0000000000010383                 db 0FFh
.eh_frame_hdr:0000000000010384                 db 0DCh
.eh_frame_hdr:0000000000010385                 db  0Dh
.eh_frame_hdr:0000000000010386                 db    0
.eh_frame_hdr:0000000000010387                 db    0
.eh_frame_hdr:0000000000010388                 db 0C4h
.eh_frame_hdr:0000000000010389                 db  8Bh
.eh_frame_hdr:000000000001038A                 db 0FFh
.eh_frame_hdr:000000000001038B                 db 0FFh
.eh_frame_hdr:000000000001038C                 db 0F0h
.eh_frame_hdr:000000000001038D                 db  0Dh
.eh_frame_hdr:000000000001038E                 db    0
.eh_frame_hdr:000000000001038F                 db    0
.eh_frame_hdr:0000000000010390                 db    4
.eh_frame_hdr:0000000000010391                 db  8Ch
.eh_frame_hdr:0000000000010392                 db 0FFh
.eh_frame_hdr:0000000000010393                 db 0FFh
.eh_frame_hdr:0000000000010394                 db    4
.eh_frame_hdr:0000000000010395                 db  0Eh
.eh_frame_hdr:0000000000010396                 db    0
.eh_frame_hdr:0000000000010397                 db    0
.eh_frame_hdr:0000000000010398                 db  24h ; $
.eh_frame_hdr:0000000000010399                 db  8Ch
.eh_frame_hdr:000000000001039A                 db 0FFh
.eh_frame_hdr:000000000001039B                 db 0FFh
.eh_frame_hdr:000000000001039C                 db  18h
.eh_frame_hdr:000000000001039D                 db  0Eh
.eh_frame_hdr:000000000001039E                 db    0
.eh_frame_hdr:000000000001039F                 db    0
.eh_frame_hdr:00000000000103A0                 db  54h ; T
.eh_frame_hdr:00000000000103A1                 db  8Ch
.eh_frame_hdr:00000000000103A2                 db 0FFh
.eh_frame_hdr:00000000000103A3                 db 0FFh
.eh_frame_hdr:00000000000103A4                 db  2Ch ; ,
.eh_frame_hdr:00000000000103A5                 db  0Eh
.eh_frame_hdr:00000000000103A6                 db    0
.eh_frame_hdr:00000000000103A7                 db    0
.eh_frame_hdr:00000000000103A8                 db 0D4h
.eh_frame_hdr:00000000000103A9                 db  8Ch
.eh_frame_hdr:00000000000103AA                 db 0FFh
.eh_frame_hdr:00000000000103AB                 db 0FFh
.eh_frame_hdr:00000000000103AC                 db  80h
.eh_frame_hdr:00000000000103AD                 db  0Eh
.eh_frame_hdr:00000000000103AE                 db    0
.eh_frame_hdr:00000000000103AF                 db    0
.eh_frame_hdr:00000000000103B0                 db 0C4h
.eh_frame_hdr:00000000000103B1                 db  8Dh
.eh_frame_hdr:00000000000103B2                 db 0FFh
.eh_frame_hdr:00000000000103B3                 db 0FFh
.eh_frame_hdr:00000000000103B4                 db 0ECh
.eh_frame_hdr:00000000000103B5                 db  0Eh
.eh_frame_hdr:00000000000103B6                 db    0
.eh_frame_hdr:00000000000103B7                 db    0
.eh_frame_hdr:00000000000103B8                 db 0D4h
.eh_frame_hdr:00000000000103B9                 db  8Dh
.eh_frame_hdr:00000000000103BA                 db 0FFh
.eh_frame_hdr:00000000000103BB                 db 0FFh
.eh_frame_hdr:00000000000103BC                 db    0
.eh_frame_hdr:00000000000103BD                 db  0Fh
.eh_frame_hdr:00000000000103BE                 db    0
.eh_frame_hdr:00000000000103BF                 db    0
.eh_frame_hdr:00000000000103C0                 db  74h ; t
.eh_frame_hdr:00000000000103C1                 db  8Eh
.eh_frame_hdr:00000000000103C2                 db 0FFh
.eh_frame_hdr:00000000000103C3                 db 0FFh
.eh_frame_hdr:00000000000103C4                 db  2Ch ; ,
.eh_frame_hdr:00000000000103C5                 db  0Fh
.eh_frame_hdr:00000000000103C6                 db    0
.eh_frame_hdr:00000000000103C7                 db    0
.eh_frame_hdr:00000000000103C8                 db  94h
.eh_frame_hdr:00000000000103C9                 db  8Eh
.eh_frame_hdr:00000000000103CA                 db 0FFh
.eh_frame_hdr:00000000000103CB                 db 0FFh
.eh_frame_hdr:00000000000103CC                 db  40h ; @
.eh_frame_hdr:00000000000103CD                 db  0Fh
.eh_frame_hdr:00000000000103CE                 db    0
.eh_frame_hdr:00000000000103CF                 db    0
.eh_frame_hdr:00000000000103D0                 db 0A4h
.eh_frame_hdr:00000000000103D1                 db  8Eh
.eh_frame_hdr:00000000000103D2                 db 0FFh
.eh_frame_hdr:00000000000103D3                 db 0FFh
.eh_frame_hdr:00000000000103D4                 db  54h ; T
.eh_frame_hdr:00000000000103D5                 db  0Fh
.eh_frame_hdr:00000000000103D6                 db    0
.eh_frame_hdr:00000000000103D7                 db    0
.eh_frame_hdr:00000000000103D8                 db 0C4h
.eh_frame_hdr:00000000000103D9                 db  8Eh
.eh_frame_hdr:00000000000103DA                 db 0FFh
.eh_frame_hdr:00000000000103DB                 db 0FFh
.eh_frame_hdr:00000000000103DC                 db  68h ; h
.eh_frame_hdr:00000000000103DD                 db  0Fh
.eh_frame_hdr:00000000000103DE                 db    0
.eh_frame_hdr:00000000000103DF                 db    0
.eh_frame_hdr:00000000000103E0                 db 0E4h
.eh_frame_hdr:00000000000103E1                 db  8Eh
.eh_frame_hdr:00000000000103E2                 db 0FFh
.eh_frame_hdr:00000000000103E3                 db 0FFh
.eh_frame_hdr:00000000000103E4                 db  7Ch ; |
.eh_frame_hdr:00000000000103E5                 db  0Fh
.eh_frame_hdr:00000000000103E6                 db    0
.eh_frame_hdr:00000000000103E7                 db    0
.eh_frame_hdr:00000000000103E8                 db  74h ; t
.eh_frame_hdr:00000000000103E9                 db  8Fh
.eh_frame_hdr:00000000000103EA                 db 0FFh
.eh_frame_hdr:00000000000103EB                 db 0FFh
.eh_frame_hdr:00000000000103EC                 db  98h
.eh_frame_hdr:00000000000103ED                 db  0Fh
.eh_frame_hdr:00000000000103EE                 db    0
.eh_frame_hdr:00000000000103EF                 db    0
.eh_frame_hdr:00000000000103F0                 db    4
.eh_frame_hdr:00000000000103F1                 db  90h
.eh_frame_hdr:00000000000103F2                 db 0FFh
.eh_frame_hdr:00000000000103F3                 db 0FFh
.eh_frame_hdr:00000000000103F4                 db 0B4h
.eh_frame_hdr:00000000000103F5                 db  0Fh
.eh_frame_hdr:00000000000103F6                 db    0
.eh_frame_hdr:00000000000103F7                 db    0
.eh_frame_hdr:00000000000103F8                 db  14h
.eh_frame_hdr:00000000000103F9                 db  90h
.eh_frame_hdr:00000000000103FA                 db 0FFh
.eh_frame_hdr:00000000000103FB                 db 0FFh
.eh_frame_hdr:00000000000103FC                 db 0C8h
.eh_frame_hdr:00000000000103FD                 db  0Fh
.eh_frame_hdr:00000000000103FE                 db    0
.eh_frame_hdr:00000000000103FF                 db    0
.eh_frame_hdr:0000000000010400                 db  24h ; $
.eh_frame_hdr:0000000000010401                 db  90h
.eh_frame_hdr:0000000000010402                 db 0FFh
.eh_frame_hdr:0000000000010403                 db 0FFh
.eh_frame_hdr:0000000000010404                 db 0DCh
.eh_frame_hdr:0000000000010405                 db  0Fh
.eh_frame_hdr:0000000000010406                 db    0
.eh_frame_hdr:0000000000010407                 db    0
.eh_frame_hdr:0000000000010408                 db 0C4h
.eh_frame_hdr:0000000000010409                 db  90h
.eh_frame_hdr:000000000001040A                 db 0FFh
.eh_frame_hdr:000000000001040B                 db 0FFh
.eh_frame_hdr:000000000001040C                 db 0F8h
.eh_frame_hdr:000000000001040D                 db  0Fh
.eh_frame_hdr:000000000001040E                 db    0
.eh_frame_hdr:000000000001040F                 db    0
.eh_frame_hdr:0000000000010410                 db 0D4h
.eh_frame_hdr:0000000000010411                 db  90h
.eh_frame_hdr:0000000000010412                 db 0FFh
.eh_frame_hdr:0000000000010413                 db 0FFh
.eh_frame_hdr:0000000000010414                 db  0Ch
.eh_frame_hdr:0000000000010415                 db  10h
.eh_frame_hdr:0000000000010416                 db    0
.eh_frame_hdr:0000000000010417                 db    0
.eh_frame_hdr:0000000000010418                 db 0F4h
.eh_frame_hdr:0000000000010419                 db  90h
.eh_frame_hdr:000000000001041A                 db 0FFh
.eh_frame_hdr:000000000001041B                 db 0FFh
.eh_frame_hdr:000000000001041C                 db  20h
.eh_frame_hdr:000000000001041D                 db  10h
.eh_frame_hdr:000000000001041E                 db    0
.eh_frame_hdr:000000000001041F                 db    0
.eh_frame_hdr:0000000000010420                 db    4
.eh_frame_hdr:0000000000010421                 db  91h
.eh_frame_hdr:0000000000010422                 db 0FFh
.eh_frame_hdr:0000000000010423                 db 0FFh
.eh_frame_hdr:0000000000010424                 db  34h ; 4
.eh_frame_hdr:0000000000010425                 db  10h
.eh_frame_hdr:0000000000010426                 db    0
.eh_frame_hdr:0000000000010427                 db    0
.eh_frame_hdr:0000000000010428                 db  94h
.eh_frame_hdr:0000000000010429                 db  91h
.eh_frame_hdr:000000000001042A                 db 0FFh
.eh_frame_hdr:000000000001042B                 db 0FFh
.eh_frame_hdr:000000000001042C                 db  50h ; P
.eh_frame_hdr:000000000001042D                 db  10h
.eh_frame_hdr:000000000001042E                 db    0
.eh_frame_hdr:000000000001042F                 db    0
.eh_frame_hdr:0000000000010430                 db  34h ; 4
.eh_frame_hdr:0000000000010431                 db  92h
.eh_frame_hdr:0000000000010432                 db 0FFh
.eh_frame_hdr:0000000000010433                 db 0FFh
.eh_frame_hdr:0000000000010434                 db  6Ch ; l
.eh_frame_hdr:0000000000010435                 db  10h
.eh_frame_hdr:0000000000010436                 db    0
.eh_frame_hdr:0000000000010437                 db    0
.eh_frame_hdr:0000000000010438                 db  44h ; D
.eh_frame_hdr:0000000000010439                 db  92h
.eh_frame_hdr:000000000001043A                 db 0FFh
.eh_frame_hdr:000000000001043B                 db 0FFh
.eh_frame_hdr:000000000001043C                 db  80h
.eh_frame_hdr:000000000001043D                 db  10h
.eh_frame_hdr:000000000001043E                 db    0
.eh_frame_hdr:000000000001043F                 db    0
.eh_frame_hdr:0000000000010440                 db  64h ; d
.eh_frame_hdr:0000000000010441                 db  92h
.eh_frame_hdr:0000000000010442                 db 0FFh
.eh_frame_hdr:0000000000010443                 db 0FFh
.eh_frame_hdr:0000000000010444                 db  94h
.eh_frame_hdr:0000000000010445                 db  10h
.eh_frame_hdr:0000000000010446                 db    0
.eh_frame_hdr:0000000000010447                 db    0
.eh_frame_hdr:0000000000010448                 db  84h
.eh_frame_hdr:0000000000010449                 db  92h
.eh_frame_hdr:000000000001044A                 db 0FFh
.eh_frame_hdr:000000000001044B                 db 0FFh
.eh_frame_hdr:000000000001044C                 db 0A8h
.eh_frame_hdr:000000000001044D                 db  10h
.eh_frame_hdr:000000000001044E                 db    0
.eh_frame_hdr:000000000001044F                 db    0
.eh_frame_hdr:0000000000010450                 db  94h
.eh_frame_hdr:0000000000010451                 db  92h
.eh_frame_hdr:0000000000010452                 db 0FFh
.eh_frame_hdr:0000000000010453                 db 0FFh
.eh_frame_hdr:0000000000010454                 db 0BCh
.eh_frame_hdr:0000000000010455                 db  10h
.eh_frame_hdr:0000000000010456                 db    0
.eh_frame_hdr:0000000000010457                 db    0
.eh_frame_hdr:0000000000010458                 db 0B4h
.eh_frame_hdr:0000000000010459                 db  92h
.eh_frame_hdr:000000000001045A                 db 0FFh
.eh_frame_hdr:000000000001045B                 db 0FFh
.eh_frame_hdr:000000000001045C                 db 0D0h
.eh_frame_hdr:000000000001045D                 db  10h
.eh_frame_hdr:000000000001045E                 db    0
.eh_frame_hdr:000000000001045F                 db    0
.eh_frame_hdr:0000000000010460                 db 0D4h
.eh_frame_hdr:0000000000010461                 db  92h
.eh_frame_hdr:0000000000010462                 db 0FFh
.eh_frame_hdr:0000000000010463                 db 0FFh
.eh_frame_hdr:0000000000010464                 db 0E4h
.eh_frame_hdr:0000000000010465                 db  10h
.eh_frame_hdr:0000000000010466                 db    0
.eh_frame_hdr:0000000000010467                 db    0
.eh_frame_hdr:0000000000010468                 db 0F4h
.eh_frame_hdr:0000000000010469                 db  92h
.eh_frame_hdr:000000000001046A                 db 0FFh
.eh_frame_hdr:000000000001046B                 db 0FFh
.eh_frame_hdr:000000000001046C                 db 0FCh
.eh_frame_hdr:000000000001046D                 db  10h
.eh_frame_hdr:000000000001046E                 db    0
.eh_frame_hdr:000000000001046F                 db    0
.eh_frame_hdr:0000000000010470                 db  44h ; D
.eh_frame_hdr:0000000000010471                 db  93h
.eh_frame_hdr:0000000000010472                 db 0FFh
.eh_frame_hdr:0000000000010473                 db 0FFh
.eh_frame_hdr:0000000000010474                 db  1Ch
.eh_frame_hdr:0000000000010475                 db  11h
.eh_frame_hdr:0000000000010476                 db    0
.eh_frame_hdr:0000000000010477                 db    0
.eh_frame_hdr:0000000000010478                 db  64h ; d
.eh_frame_hdr:0000000000010479                 db  93h
.eh_frame_hdr:000000000001047A                 db 0FFh
.eh_frame_hdr:000000000001047B                 db 0FFh
.eh_frame_hdr:000000000001047C                 db  30h ; 0
.eh_frame_hdr:000000000001047D                 db  11h
.eh_frame_hdr:000000000001047E                 db    0
.eh_frame_hdr:000000000001047F                 db    0
.eh_frame_hdr:0000000000010480                 db  84h
.eh_frame_hdr:0000000000010481                 db  93h
.eh_frame_hdr:0000000000010482                 db 0FFh
.eh_frame_hdr:0000000000010483                 db 0FFh
.eh_frame_hdr:0000000000010484                 db  4Ch ; L
.eh_frame_hdr:0000000000010485                 db  11h
.eh_frame_hdr:0000000000010486                 db    0
.eh_frame_hdr:0000000000010487                 db    0
.eh_frame_hdr:0000000000010488                 db 0A4h
.eh_frame_hdr:0000000000010489                 db  97h
.eh_frame_hdr:000000000001048A                 db 0FFh
.eh_frame_hdr:000000000001048B                 db 0FFh
.eh_frame_hdr:000000000001048C                 db  60h ; `
.eh_frame_hdr:000000000001048D                 db  12h
.eh_frame_hdr:000000000001048E                 db    0
.eh_frame_hdr:000000000001048F                 db    0
.eh_frame_hdr:0000000000010490                 db 0C4h
.eh_frame_hdr:0000000000010491                 db  97h
.eh_frame_hdr:0000000000010492                 db 0FFh
.eh_frame_hdr:0000000000010493                 db 0FFh
.eh_frame_hdr:0000000000010494                 db  74h ; t
.eh_frame_hdr:0000000000010495                 db  12h
.eh_frame_hdr:0000000000010496                 db    0
.eh_frame_hdr:0000000000010497                 db    0
.eh_frame_hdr:0000000000010498                 db  44h ; D
.eh_frame_hdr:0000000000010499                 db  98h
.eh_frame_hdr:000000000001049A                 db 0FFh
.eh_frame_hdr:000000000001049B                 db 0FFh
.eh_frame_hdr:000000000001049C                 db  90h
.eh_frame_hdr:000000000001049D                 db  12h
.eh_frame_hdr:000000000001049E                 db    0
.eh_frame_hdr:000000000001049F                 db    0
.eh_frame_hdr:00000000000104A0                 db  24h ; $
.eh_frame_hdr:00000000000104A1                 db  99h
.eh_frame_hdr:00000000000104A2                 db 0FFh
.eh_frame_hdr:00000000000104A3                 db 0FFh
.eh_frame_hdr:00000000000104A4                 db 0BCh
.eh_frame_hdr:00000000000104A5                 db  12h
.eh_frame_hdr:00000000000104A6                 db    0
.eh_frame_hdr:00000000000104A7                 db    0
.eh_frame_hdr:00000000000104A8                 db 0A4h
.eh_frame_hdr:00000000000104A9                 db  99h
.eh_frame_hdr:00000000000104AA                 db 0FFh
.eh_frame_hdr:00000000000104AB                 db 0FFh
.eh_frame_hdr:00000000000104AC                 db 0DCh
.eh_frame_hdr:00000000000104AD                 db  12h
.eh_frame_hdr:00000000000104AE                 db    0
.eh_frame_hdr:00000000000104AF                 db    0
.eh_frame_hdr:00000000000104B0                 db 0C4h
.eh_frame_hdr:00000000000104B1                 db  99h
.eh_frame_hdr:00000000000104B2                 db 0FFh
.eh_frame_hdr:00000000000104B3                 db 0FFh
.eh_frame_hdr:00000000000104B4                 db 0F8h
.eh_frame_hdr:00000000000104B5                 db  12h
.eh_frame_hdr:00000000000104B6                 db    0
.eh_frame_hdr:00000000000104B7                 db    0
.eh_frame_hdr:00000000000104B8                 db 0F4h
.eh_frame_hdr:00000000000104B9                 db  99h
.eh_frame_hdr:00000000000104BA                 db 0FFh
.eh_frame_hdr:00000000000104BB                 db 0FFh
.eh_frame_hdr:00000000000104BC                 db  0Ch
.eh_frame_hdr:00000000000104BD                 db  13h
.eh_frame_hdr:00000000000104BE                 db    0
.eh_frame_hdr:00000000000104BF                 db    0
.eh_frame_hdr:00000000000104C0                 db    4
.eh_frame_hdr:00000000000104C1                 db  9Ah
.eh_frame_hdr:00000000000104C2                 db 0FFh
.eh_frame_hdr:00000000000104C3                 db 0FFh
.eh_frame_hdr:00000000000104C4                 db  20h
.eh_frame_hdr:00000000000104C5                 db  13h
.eh_frame_hdr:00000000000104C6                 db    0
.eh_frame_hdr:00000000000104C7                 db    0
.eh_frame_hdr:00000000000104C8                 db  44h ; D
.eh_frame_hdr:00000000000104C9                 db  9Ah
.eh_frame_hdr:00000000000104CA                 db 0FFh
.eh_frame_hdr:00000000000104CB                 db 0FFh
.eh_frame_hdr:00000000000104CC                 db  44h ; D
.eh_frame_hdr:00000000000104CD                 db  13h
.eh_frame_hdr:00000000000104CE                 db    0
.eh_frame_hdr:00000000000104CF                 db    0
.eh_frame_hdr:00000000000104D0                 db  74h ; t
.eh_frame_hdr:00000000000104D1                 db  9Ah
.eh_frame_hdr:00000000000104D2                 db 0FFh
.eh_frame_hdr:00000000000104D3                 db 0FFh
.eh_frame_hdr:00000000000104D4                 db  58h ; X
.eh_frame_hdr:00000000000104D5                 db  13h
.eh_frame_hdr:00000000000104D6                 db    0
.eh_frame_hdr:00000000000104D7                 db    0
.eh_frame_hdr:00000000000104D8                 db    4
.eh_frame_hdr:00000000000104D9                 db  9Bh
.eh_frame_hdr:00000000000104DA                 db 0FFh
.eh_frame_hdr:00000000000104DB                 db 0FFh
.eh_frame_hdr:00000000000104DC                 db  70h ; p
.eh_frame_hdr:00000000000104DD                 db  13h
.eh_frame_hdr:00000000000104DE                 db    0
.eh_frame_hdr:00000000000104DF                 db    0
.eh_frame_hdr:00000000000104E0                 db  54h ; T
.eh_frame_hdr:00000000000104E1                 db  9Bh
.eh_frame_hdr:00000000000104E2                 db 0FFh
.eh_frame_hdr:00000000000104E3                 db 0FFh
.eh_frame_hdr:00000000000104E4                 db  88h
.eh_frame_hdr:00000000000104E5                 db  13h
.eh_frame_hdr:00000000000104E6                 db    0
.eh_frame_hdr:00000000000104E7                 db    0
.eh_frame_hdr:00000000000104E8                 db  74h ; t
.eh_frame_hdr:00000000000104E9                 db  9Bh
.eh_frame_hdr:00000000000104EA                 db 0FFh
.eh_frame_hdr:00000000000104EB                 db 0FFh
.eh_frame_hdr:00000000000104EC                 db 0A4h
.eh_frame_hdr:00000000000104ED                 db  13h
.eh_frame_hdr:00000000000104EE                 db    0
.eh_frame_hdr:00000000000104EF                 db    0
.eh_frame_hdr:00000000000104F0                 db 0A4h
.eh_frame_hdr:00000000000104F1                 db  9Bh
.eh_frame_hdr:00000000000104F2                 db 0FFh
.eh_frame_hdr:00000000000104F3                 db 0FFh
.eh_frame_hdr:00000000000104F4                 db 0C0h
.eh_frame_hdr:00000000000104F5                 db  13h
.eh_frame_hdr:00000000000104F6                 db    0
.eh_frame_hdr:00000000000104F7                 db    0
.eh_frame_hdr:00000000000104F8                 db 0D4h
.eh_frame_hdr:00000000000104F9                 db  9Bh
.eh_frame_hdr:00000000000104FA                 db 0FFh
.eh_frame_hdr:00000000000104FB                 db 0FFh
.eh_frame_hdr:00000000000104FC                 db 0E8h
.eh_frame_hdr:00000000000104FD                 db  13h
.eh_frame_hdr:00000000000104FE                 db    0
.eh_frame_hdr:00000000000104FF                 db    0
.eh_frame_hdr:0000000000010500                 db 0F4h
.eh_frame_hdr:0000000000010501                 db  9Bh
.eh_frame_hdr:0000000000010502                 db 0FFh
.eh_frame_hdr:0000000000010503                 db 0FFh
.eh_frame_hdr:0000000000010504                 db    4
.eh_frame_hdr:0000000000010505                 db  14h
.eh_frame_hdr:0000000000010506                 db    0
.eh_frame_hdr:0000000000010507                 db    0
.eh_frame_hdr:0000000000010508                 db  34h ; 4
.eh_frame_hdr:0000000000010509                 db  9Ch
.eh_frame_hdr:000000000001050A                 db 0FFh
.eh_frame_hdr:000000000001050B                 db 0FFh
.eh_frame_hdr:000000000001050C                 db  1Ch
.eh_frame_hdr:000000000001050D                 db  14h
.eh_frame_hdr:000000000001050E                 db    0
.eh_frame_hdr:000000000001050F                 db    0
.eh_frame_hdr:0000000000010510                 db  64h ; d
.eh_frame_hdr:0000000000010511                 db  9Ch
.eh_frame_hdr:0000000000010512                 db 0FFh
.eh_frame_hdr:0000000000010513                 db 0FFh
.eh_frame_hdr:0000000000010514                 db  3Ch ; <
.eh_frame_hdr:0000000000010515                 db  14h
.eh_frame_hdr:0000000000010516                 db    0
.eh_frame_hdr:0000000000010517                 db    0
.eh_frame_hdr:0000000000010518                 db  24h ; $
.eh_frame_hdr:0000000000010519                 db  9Dh
.eh_frame_hdr:000000000001051A                 db 0FFh
.eh_frame_hdr:000000000001051B                 db 0FFh
.eh_frame_hdr:000000000001051C                 db  5Ch ; \
.eh_frame_hdr:000000000001051D                 db  14h
.eh_frame_hdr:000000000001051E                 db    0
.eh_frame_hdr:000000000001051F                 db    0
.eh_frame_hdr:0000000000010520                 db  74h ; t
.eh_frame_hdr:0000000000010521                 db  9Dh
.eh_frame_hdr:0000000000010522                 db 0FFh
.eh_frame_hdr:0000000000010523                 db 0FFh
.eh_frame_hdr:0000000000010524                 db  78h ; x
.eh_frame_hdr:0000000000010525                 db  14h
.eh_frame_hdr:0000000000010526                 db    0
.eh_frame_hdr:0000000000010527                 db    0
.eh_frame_hdr:0000000000010528                 db 0B4h
.eh_frame_hdr:0000000000010529                 db  9Dh
.eh_frame_hdr:000000000001052A                 db 0FFh
.eh_frame_hdr:000000000001052B                 db 0FFh
.eh_frame_hdr:000000000001052C                 db 0A4h
.eh_frame_hdr:000000000001052D                 db  14h
.eh_frame_hdr:000000000001052E                 db    0
.eh_frame_hdr:000000000001052F                 db    0
.eh_frame_hdr:0000000000010530                 db  94h
.eh_frame_hdr:0000000000010531                 db 0A0h
.eh_frame_hdr:0000000000010532                 db 0FFh
.eh_frame_hdr:0000000000010533                 db 0FFh
.eh_frame_hdr:0000000000010534                 db 0F4h
.eh_frame_hdr:0000000000010535                 db  14h
.eh_frame_hdr:0000000000010536                 db    0
.eh_frame_hdr:0000000000010537                 db    0
.eh_frame_hdr:0000000000010538                 db  24h ; $
.eh_frame_hdr:0000000000010539                 db 0A1h
.eh_frame_hdr:000000000001053A                 db 0FFh
.eh_frame_hdr:000000000001053B                 db 0FFh
.eh_frame_hdr:000000000001053C                 db  34h ; 4
.eh_frame_hdr:000000000001053D                 db  15h
.eh_frame_hdr:000000000001053E                 db    0
.eh_frame_hdr:000000000001053F                 db    0
.eh_frame_hdr:0000000000010540                 db 0B4h
.eh_frame_hdr:0000000000010541                 db 0A1h
.eh_frame_hdr:0000000000010542                 db 0FFh
.eh_frame_hdr:0000000000010543                 db 0FFh
.eh_frame_hdr:0000000000010544                 db  50h ; P
.eh_frame_hdr:0000000000010545                 db  15h
.eh_frame_hdr:0000000000010546                 db    0
.eh_frame_hdr:0000000000010547                 db    0
.eh_frame_hdr:0000000000010548                 db 0F4h
.eh_frame_hdr:0000000000010549                 db 0A1h
.eh_frame_hdr:000000000001054A                 db 0FFh
.eh_frame_hdr:000000000001054B                 db 0FFh
.eh_frame_hdr:000000000001054C                 db  6Ch ; l
.eh_frame_hdr:000000000001054D                 db  15h
.eh_frame_hdr:000000000001054E                 db    0
.eh_frame_hdr:000000000001054F                 db    0
.eh_frame_hdr:0000000000010550                 db  44h ; D
.eh_frame_hdr:0000000000010551                 db 0AAh
.eh_frame_hdr:0000000000010552                 db 0FFh
.eh_frame_hdr:0000000000010553                 db 0FFh
.eh_frame_hdr:0000000000010554                 db 0E4h
.eh_frame_hdr:0000000000010555                 db  15h
.eh_frame_hdr:0000000000010556                 db    0
.eh_frame_hdr:0000000000010557                 db    0
.eh_frame_hdr:0000000000010558                 db  74h ; t
.eh_frame_hdr:0000000000010559                 db 0AAh
.eh_frame_hdr:000000000001055A                 db 0FFh
.eh_frame_hdr:000000000001055B                 db 0FFh
.eh_frame_hdr:000000000001055C                 db 0F8h
.eh_frame_hdr:000000000001055D                 db  15h
.eh_frame_hdr:000000000001055E                 db    0
.eh_frame_hdr:000000000001055F                 db    0
.eh_frame_hdr:0000000000010560                 db 0A4h
.eh_frame_hdr:0000000000010561                 db 0AAh
.eh_frame_hdr:0000000000010562                 db 0FFh
.eh_frame_hdr:0000000000010563                 db 0FFh
.eh_frame_hdr:0000000000010564                 db  14h
.eh_frame_hdr:0000000000010565                 db  16h
.eh_frame_hdr:0000000000010566                 db    0
.eh_frame_hdr:0000000000010567                 db    0
.eh_frame_hdr:0000000000010568                 db    4
.eh_frame_hdr:0000000000010569                 db 0ABh
.eh_frame_hdr:000000000001056A                 db 0FFh
.eh_frame_hdr:000000000001056B                 db 0FFh
.eh_frame_hdr:000000000001056C                 db  50h ; P
.eh_frame_hdr:000000000001056D                 db  16h
.eh_frame_hdr:000000000001056E                 db    0
.eh_frame_hdr:000000000001056F                 db    0
.eh_frame_hdr:0000000000010570                 db  94h
.eh_frame_hdr:0000000000010571                 db 0ABh
.eh_frame_hdr:0000000000010572                 db 0FFh
.eh_frame_hdr:0000000000010573                 db 0FFh
.eh_frame_hdr:0000000000010574                 db  88h
.eh_frame_hdr:0000000000010575                 db  16h
.eh_frame_hdr:0000000000010576                 db    0
.eh_frame_hdr:0000000000010577                 db    0
.eh_frame_hdr:0000000000010578                 db 0D4h
.eh_frame_hdr:0000000000010579                 db 0ACh
.eh_frame_hdr:000000000001057A                 db 0FFh
.eh_frame_hdr:000000000001057B                 db 0FFh
.eh_frame_hdr:000000000001057C                 db 0D4h
.eh_frame_hdr:000000000001057D                 db  16h
.eh_frame_hdr:000000000001057E                 db    0
.eh_frame_hdr:000000000001057F                 db    0
.eh_frame_hdr:0000000000010580                 db 0B4h
.eh_frame_hdr:0000000000010581                 db 0ADh
.eh_frame_hdr:0000000000010582                 db 0FFh
.eh_frame_hdr:0000000000010583                 db 0FFh
.eh_frame_hdr:0000000000010584                 db  28h ; (
.eh_frame_hdr:0000000000010585                 db  17h
.eh_frame_hdr:0000000000010586                 db    0
.eh_frame_hdr:0000000000010587                 db    0
.eh_frame_hdr:0000000000010588                 db 0C4h
.eh_frame_hdr:0000000000010589                 db 0ADh
.eh_frame_hdr:000000000001058A                 db 0FFh
.eh_frame_hdr:000000000001058B                 db 0FFh
.eh_frame_hdr:000000000001058C                 db  3Ch ; <
.eh_frame_hdr:000000000001058D                 db  17h
.eh_frame_hdr:000000000001058E                 db    0
.eh_frame_hdr:000000000001058F                 db    0
.eh_frame_hdr:0000000000010590                 db  74h ; t
.eh_frame_hdr:0000000000010591                 db 0AEh
.eh_frame_hdr:0000000000010592                 db 0FFh
.eh_frame_hdr:0000000000010593                 db 0FFh
.eh_frame_hdr:0000000000010594                 db  9Ch
.eh_frame_hdr:0000000000010595                 db  17h
.eh_frame_hdr:0000000000010596                 db    0
.eh_frame_hdr:0000000000010597                 db    0
.eh_frame_hdr:0000000000010598                 db 0C4h
.eh_frame_hdr:0000000000010599                 db 0AFh
.eh_frame_hdr:000000000001059A                 db 0FFh
.eh_frame_hdr:000000000001059B                 db 0FFh
.eh_frame_hdr:000000000001059C                 db 0D4h
.eh_frame_hdr:000000000001059D                 db  17h
.eh_frame_hdr:000000000001059E                 db    0
.eh_frame_hdr:000000000001059F                 db    0
.eh_frame_hdr:00000000000105A0                 db  44h ; D
.eh_frame_hdr:00000000000105A1                 db 0B0h
.eh_frame_hdr:00000000000105A2                 db 0FFh
.eh_frame_hdr:00000000000105A3                 db 0FFh
.eh_frame_hdr:00000000000105A4                 db  24h ; $
.eh_frame_hdr:00000000000105A5                 db  18h
.eh_frame_hdr:00000000000105A6                 db    0
.eh_frame_hdr:00000000000105A7                 db    0
.eh_frame_hdr:00000000000105A8                 db 0B4h
.eh_frame_hdr:00000000000105A9                 db 0B0h
.eh_frame_hdr:00000000000105AA                 db 0FFh
.eh_frame_hdr:00000000000105AB                 db 0FFh
.eh_frame_hdr:00000000000105AC                 db  44h ; D
.eh_frame_hdr:00000000000105AD                 db  18h
.eh_frame_hdr:00000000000105AE                 db    0
.eh_frame_hdr:00000000000105AF                 db    0
.eh_frame_hdr:00000000000105B0                 db  14h
.eh_frame_hdr:00000000000105B1                 db 0B1h
.eh_frame_hdr:00000000000105B2                 db 0FFh
.eh_frame_hdr:00000000000105B3                 db 0FFh
.eh_frame_hdr:00000000000105B4                 db  64h ; d
.eh_frame_hdr:00000000000105B5                 db  18h
.eh_frame_hdr:00000000000105B6                 db    0
.eh_frame_hdr:00000000000105B7                 db    0
.eh_frame_hdr:00000000000105B8                 db  54h ; T
.eh_frame_hdr:00000000000105B9                 db 0B1h
.eh_frame_hdr:00000000000105BA                 db 0FFh
.eh_frame_hdr:00000000000105BB                 db 0FFh
.eh_frame_hdr:00000000000105BC                 db  84h
.eh_frame_hdr:00000000000105BD                 db  18h
.eh_frame_hdr:00000000000105BE                 db    0
.eh_frame_hdr:00000000000105BF                 db    0
.eh_frame_hdr:00000000000105C0                 db  94h
.eh_frame_hdr:00000000000105C1                 db 0B1h
.eh_frame_hdr:00000000000105C2                 db 0FFh
.eh_frame_hdr:00000000000105C3                 db 0FFh
.eh_frame_hdr:00000000000105C4                 db 0BCh
.eh_frame_hdr:00000000000105C5                 db  18h
.eh_frame_hdr:00000000000105C6                 db    0
.eh_frame_hdr:00000000000105C7                 db    0
.eh_frame_hdr:00000000000105C8                 db 0E4h
.eh_frame_hdr:00000000000105C9                 db 0B2h
.eh_frame_hdr:00000000000105CA                 db 0FFh
.eh_frame_hdr:00000000000105CB                 db 0FFh
.eh_frame_hdr:00000000000105CC                 db    8
.eh_frame_hdr:00000000000105CD                 db  19h
.eh_frame_hdr:00000000000105CE                 db    0
.eh_frame_hdr:00000000000105CF                 db    0
.eh_frame_hdr:00000000000105D0                 db  94h
.eh_frame_hdr:00000000000105D1                 db 0B3h
.eh_frame_hdr:00000000000105D2                 db 0FFh
.eh_frame_hdr:00000000000105D3                 db 0FFh
.eh_frame_hdr:00000000000105D4                 db  24h ; $
.eh_frame_hdr:00000000000105D5                 db  19h
.eh_frame_hdr:00000000000105D6                 db    0
.eh_frame_hdr:00000000000105D7                 db    0
.eh_frame_hdr:00000000000105D8                 db  14h
.eh_frame_hdr:00000000000105D9                 db 0B4h
.eh_frame_hdr:00000000000105DA                 db 0FFh
.eh_frame_hdr:00000000000105DB                 db 0FFh
.eh_frame_hdr:00000000000105DC                 db  5Ch ; \
.eh_frame_hdr:00000000000105DD                 db  19h
.eh_frame_hdr:00000000000105DE                 db    0
.eh_frame_hdr:00000000000105DF                 db    0
.eh_frame_hdr:00000000000105E0                 db  54h ; T
.eh_frame_hdr:00000000000105E1                 db 0B4h
.eh_frame_hdr:00000000000105E2                 db 0FFh
.eh_frame_hdr:00000000000105E3                 db 0FFh
.eh_frame_hdr:00000000000105E4                 db  7Ch ; |
.eh_frame_hdr:00000000000105E5                 db  19h
.eh_frame_hdr:00000000000105E6                 db    0
.eh_frame_hdr:00000000000105E7                 db    0
.eh_frame_hdr:00000000000105E8                 db 0B4h
.eh_frame_hdr:00000000000105E9                 db 0B4h
.eh_frame_hdr:00000000000105EA                 db 0FFh
.eh_frame_hdr:00000000000105EB                 db 0FFh
.eh_frame_hdr:00000000000105EC                 db 0ACh
.eh_frame_hdr:00000000000105ED                 db  19h
.eh_frame_hdr:00000000000105EE                 db    0
.eh_frame_hdr:00000000000105EF                 db    0
.eh_frame_hdr:00000000000105F0                 db  34h ; 4
.eh_frame_hdr:00000000000105F1                 db 0B5h
.eh_frame_hdr:00000000000105F2                 db 0FFh
.eh_frame_hdr:00000000000105F3                 db 0FFh
.eh_frame_hdr:00000000000105F4                 db 0D4h
.eh_frame_hdr:00000000000105F5                 db  19h
.eh_frame_hdr:00000000000105F6                 db    0
.eh_frame_hdr:00000000000105F7                 db    0
.eh_frame_hdr:00000000000105F8                 db  44h ; D
.eh_frame_hdr:00000000000105F9                 db 0B5h
.eh_frame_hdr:00000000000105FA                 db 0FFh
.eh_frame_hdr:00000000000105FB                 db 0FFh
.eh_frame_hdr:00000000000105FC                 db 0ECh
.eh_frame_hdr:00000000000105FD                 db  19h
.eh_frame_hdr:00000000000105FE                 db    0
.eh_frame_hdr:00000000000105FF                 db    0
.eh_frame_hdr:0000000000010600                 db 0C4h
.eh_frame_hdr:0000000000010601                 db 0B7h
.eh_frame_hdr:0000000000010602                 db 0FFh
.eh_frame_hdr:0000000000010603                 db 0FFh
.eh_frame_hdr:0000000000010604                 db  24h ; $
.eh_frame_hdr:0000000000010605                 db  1Ah
.eh_frame_hdr:0000000000010606                 db    0
.eh_frame_hdr:0000000000010607                 db    0
.eh_frame_hdr:0000000000010608                 db 0E4h
.eh_frame_hdr:0000000000010609                 db 0C8h
.eh_frame_hdr:000000000001060A                 db 0FFh
.eh_frame_hdr:000000000001060B                 db 0FFh
.eh_frame_hdr:000000000001060C                 db  54h ; T
.eh_frame_hdr:000000000001060D                 db  1Ah
.eh_frame_hdr:000000000001060E                 db    0
.eh_frame_hdr:000000000001060F                 db    0
.eh_frame_hdr:0000000000010610                 db 0E4h
.eh_frame_hdr:0000000000010611                 db 0CAh
.eh_frame_hdr:0000000000010612                 db 0FFh
.eh_frame_hdr:0000000000010613                 db 0FFh
.eh_frame_hdr:0000000000010614                 db  6Ch ; l
.eh_frame_hdr:0000000000010615                 db  1Ah
.eh_frame_hdr:0000000000010616                 db    0
.eh_frame_hdr:0000000000010617                 db    0
.eh_frame_hdr:0000000000010618                 db 0D4h
.eh_frame_hdr:0000000000010619                 db 0D7h
.eh_frame_hdr:000000000001061A                 db 0FFh
.eh_frame_hdr:000000000001061B                 db 0FFh
.eh_frame_hdr:000000000001061C                 db 0BCh
.eh_frame_hdr:000000000001061D                 db  1Ah
.eh_frame_hdr:000000000001061E                 db    0
.eh_frame_hdr:000000000001061F                 db    0
.eh_frame_hdr:0000000000010620                 db  44h ; D
.eh_frame_hdr:0000000000010621                 db 0D8h
.eh_frame_hdr:0000000000010622                 db 0FFh
.eh_frame_hdr:0000000000010623                 db 0FFh
.eh_frame_hdr:0000000000010624                 db    4
.eh_frame_hdr:0000000000010625                 db  1Bh
.eh_frame_hdr:0000000000010626                 db    0
.eh_frame_hdr:0000000000010627                 db    0
.eh_frame_hdr:0000000000010628                 db  54h ; T
.eh_frame_hdr:0000000000010629                 db 0D8h
.eh_frame_hdr:000000000001062A                 db 0FFh
.eh_frame_hdr:000000000001062B                 db 0FFh
.eh_frame_hdr:000000000001062C                 db  1Ch
.eh_frame_hdr:000000000001062D                 db  1Bh
.eh_frame_hdr:000000000001062E                 db    0
.eh_frame_hdr:000000000001062F                 db    0
.eh_frame_hdr:000000000001062F _eh_frame_hdr   ends
.eh_frame_hdr:000000000001062F
.eh_frame:0000000000010630 ; ===========================================================================
.eh_frame:0000000000010630
.eh_frame:0000000000010630 ; Segment type: Pure data
.eh_frame:0000000000010630 ; Segment permissions: Read
.eh_frame:0000000000010630 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000010630                 assume cs:_eh_frame
.eh_frame:0000000000010630                 ;org 10630h
.eh_frame:0000000000010630                 db  14h
.eh_frame:0000000000010631                 db    0
.eh_frame:0000000000010632                 db    0
.eh_frame:0000000000010633                 db    0
.eh_frame:0000000000010634                 db    0
.eh_frame:0000000000010635                 db    0
.eh_frame:0000000000010636                 db    0
.eh_frame:0000000000010637                 db    0
.eh_frame:0000000000010638                 db    1
.eh_frame:0000000000010639                 db  7Ah ; z
.eh_frame:000000000001063A                 db  52h ; R
.eh_frame:000000000001063B                 db    0
.eh_frame:000000000001063C                 db    1
.eh_frame:000000000001063D                 db  78h ; x
.eh_frame:000000000001063E                 db  10h
.eh_frame:000000000001063F                 db    1
.eh_frame:0000000000010640                 db  1Bh
.eh_frame:0000000000010641                 db  0Ch
.eh_frame:0000000000010642                 db    7
.eh_frame:0000000000010643                 db    8
.eh_frame:0000000000010644                 db  90h
.eh_frame:0000000000010645                 db    1
.eh_frame:0000000000010646                 db    7
.eh_frame:0000000000010647                 db  10h
.eh_frame:0000000000010648                 db  14h
.eh_frame:0000000000010649                 db    0
.eh_frame:000000000001064A                 db    0
.eh_frame:000000000001064B                 db    0
.eh_frame:000000000001064C                 db  1Ch
.eh_frame:000000000001064D                 db    0
.eh_frame:000000000001064E                 db    0
.eh_frame:000000000001064F                 db    0
.eh_frame:0000000000010650                 db  60h ; `
.eh_frame:0000000000010651                 db  21h ; !
.eh_frame:0000000000010652                 db 0FFh
.eh_frame:0000000000010653                 db 0FFh
.eh_frame:0000000000010654                 db  2Bh ; +
.eh_frame:0000000000010655                 db    0
.eh_frame:0000000000010656                 db    0
.eh_frame:0000000000010657                 db    0
.eh_frame:0000000000010658                 db    0
.eh_frame:0000000000010659                 db    0
.eh_frame:000000000001065A                 db    0
.eh_frame:000000000001065B                 db    0
.eh_frame:000000000001065C                 db    0
.eh_frame:000000000001065D                 db    0
.eh_frame:000000000001065E                 db    0
.eh_frame:000000000001065F                 db    0
.eh_frame:0000000000010660                 db  14h
.eh_frame:0000000000010661                 db    0
.eh_frame:0000000000010662                 db    0
.eh_frame:0000000000010663                 db    0
.eh_frame:0000000000010664                 db    0
.eh_frame:0000000000010665                 db    0
.eh_frame:0000000000010666                 db    0
.eh_frame:0000000000010667                 db    0
.eh_frame:0000000000010668                 db    1
.eh_frame:0000000000010669                 db  7Ah ; z
.eh_frame:000000000001066A                 db  52h ; R
.eh_frame:000000000001066B                 db    0
.eh_frame:000000000001066C                 db    1
.eh_frame:000000000001066D                 db  78h ; x
.eh_frame:000000000001066E                 db  10h
.eh_frame:000000000001066F                 db    1
.eh_frame:0000000000010670                 db  1Bh
.eh_frame:0000000000010671                 db  0Ch
.eh_frame:0000000000010672                 db    7
.eh_frame:0000000000010673                 db    8
.eh_frame:0000000000010674                 db  90h
.eh_frame:0000000000010675                 db    1
.eh_frame:0000000000010676                 db    0
.eh_frame:0000000000010677                 db    0
.eh_frame:0000000000010678                 db  24h ; $
.eh_frame:0000000000010679                 db    0
.eh_frame:000000000001067A                 db    0
.eh_frame:000000000001067B                 db    0
.eh_frame:000000000001067C                 db  1Ch
.eh_frame:000000000001067D                 db    0
.eh_frame:000000000001067E                 db    0
.eh_frame:000000000001067F                 db    0
.eh_frame:0000000000010680                 db  50h ; P
.eh_frame:0000000000010681                 db  16h
.eh_frame:0000000000010682                 db 0FFh
.eh_frame:0000000000010683                 db 0FFh
.eh_frame:0000000000010684                 db  60h ; `
.eh_frame:0000000000010685                 db    5
.eh_frame:0000000000010686                 db    0
.eh_frame:0000000000010687                 db    0
.eh_frame:0000000000010688                 db    0
.eh_frame:0000000000010689                 db  0Eh
.eh_frame:000000000001068A                 db  10h
.eh_frame:000000000001068B                 db  46h ; F
.eh_frame:000000000001068C                 db  0Eh
.eh_frame:000000000001068D                 db  18h
.eh_frame:000000000001068E                 db  4Ah ; J
.eh_frame:000000000001068F                 db  0Fh
.eh_frame:0000000000010690                 db  0Bh
.eh_frame:0000000000010691                 db  77h ; w
.eh_frame:0000000000010692                 db    8
.eh_frame:0000000000010693                 db  80h
.eh_frame:0000000000010694                 db    0
.eh_frame:0000000000010695                 db  3Fh ; ?
.eh_frame:0000000000010696                 db  1Ah
.eh_frame:0000000000010697                 db  3Bh ; ;
.eh_frame:0000000000010698                 db  2Ah ; *
.eh_frame:0000000000010699                 db  33h ; 3
.eh_frame:000000000001069A                 db  24h ; $
.eh_frame:000000000001069B                 db  22h ; "
.eh_frame:000000000001069C                 db    0
.eh_frame:000000000001069D                 db    0
.eh_frame:000000000001069E                 db    0
.eh_frame:000000000001069F                 db    0
.eh_frame:00000000000106A0                 db  14h
.eh_frame:00000000000106A1                 db    0
.eh_frame:00000000000106A2                 db    0
.eh_frame:00000000000106A3                 db    0
.eh_frame:00000000000106A4                 db  44h ; D
.eh_frame:00000000000106A5                 db    0
.eh_frame:00000000000106A6                 db    0
.eh_frame:00000000000106A7                 db    0
.eh_frame:00000000000106A8                 db  88h
.eh_frame:00000000000106A9                 db  1Bh
.eh_frame:00000000000106AA                 db 0FFh
.eh_frame:00000000000106AB                 db 0FFh
.eh_frame:00000000000106AC                 db    8
.eh_frame:00000000000106AD                 db    0
.eh_frame:00000000000106AE                 db    0
.eh_frame:00000000000106AF                 db    0
.eh_frame:00000000000106B0                 db    0
.eh_frame:00000000000106B1                 db    0
.eh_frame:00000000000106B2                 db    0
.eh_frame:00000000000106B3                 db    0
.eh_frame:00000000000106B4                 db    0
.eh_frame:00000000000106B5                 db    0
.eh_frame:00000000000106B6                 db    0
.eh_frame:00000000000106B7                 db    0
.eh_frame:00000000000106B8                 db  44h ; D
.eh_frame:00000000000106B9                 db    0
.eh_frame:00000000000106BA                 db    0
.eh_frame:00000000000106BB                 db    0
.eh_frame:00000000000106BC                 db  5Ch ; \
.eh_frame:00000000000106BD                 db    0
.eh_frame:00000000000106BE                 db    0
.eh_frame:00000000000106BF                 db    0
.eh_frame:00000000000106C0                 db    0
.eh_frame:00000000000106C1                 db  22h ; "
.eh_frame:00000000000106C2                 db 0FFh
.eh_frame:00000000000106C3                 db 0FFh
.eh_frame:00000000000106C4                 db 0B6h
.eh_frame:00000000000106C5                 db    0
.eh_frame:00000000000106C6                 db    0
.eh_frame:00000000000106C7                 db    0
.eh_frame:00000000000106C8                 db    0
.eh_frame:00000000000106C9                 db  42h ; B
.eh_frame:00000000000106CA                 db  0Eh
.eh_frame:00000000000106CB                 db  10h
.eh_frame:00000000000106CC                 db  8Fh
.eh_frame:00000000000106CD                 db    2
.eh_frame:00000000000106CE                 db  42h ; B
.eh_frame:00000000000106CF                 db  0Eh
.eh_frame:00000000000106D0                 db  18h
.eh_frame:00000000000106D1                 db  8Eh
.eh_frame:00000000000106D2                 db    3
.eh_frame:00000000000106D3                 db  42h ; B
.eh_frame:00000000000106D4                 db  0Eh
.eh_frame:00000000000106D5                 db  20h
.eh_frame:00000000000106D6                 db  8Dh
.eh_frame:00000000000106D7                 db    4
.eh_frame:00000000000106D8                 db  42h ; B
.eh_frame:00000000000106D9                 db  0Eh
.eh_frame:00000000000106DA                 db  28h ; (
.eh_frame:00000000000106DB                 db  8Ch
.eh_frame:00000000000106DC                 db    5
.eh_frame:00000000000106DD                 db  45h ; E
.eh_frame:00000000000106DE                 db  0Eh
.eh_frame:00000000000106DF                 db  30h ; 0
.eh_frame:00000000000106E0                 db  86h
.eh_frame:00000000000106E1                 db    6
.eh_frame:00000000000106E2                 db  45h ; E
.eh_frame:00000000000106E3                 db  0Eh
.eh_frame:00000000000106E4                 db  38h ; 8
.eh_frame:00000000000106E5                 db  83h
.eh_frame:00000000000106E6                 db    7
.eh_frame:00000000000106E7                 db  4Bh ; K
.eh_frame:00000000000106E8                 db  0Eh
.eh_frame:00000000000106E9                 db  50h ; P
.eh_frame:00000000000106EA                 db    2
.eh_frame:00000000000106EB                 db  87h
.eh_frame:00000000000106EC                 db  0Eh
.eh_frame:00000000000106ED                 db  38h ; 8
.eh_frame:00000000000106EE                 db  44h ; D
.eh_frame:00000000000106EF                 db  0Eh
.eh_frame:00000000000106F0                 db  30h ; 0
.eh_frame:00000000000106F1                 db  41h ; A
.eh_frame:00000000000106F2                 db  0Eh
.eh_frame:00000000000106F3                 db  28h ; (
.eh_frame:00000000000106F4                 db  42h ; B
.eh_frame:00000000000106F5                 db  0Eh
.eh_frame:00000000000106F6                 db  20h
.eh_frame:00000000000106F7                 db  42h ; B
.eh_frame:00000000000106F8                 db  0Eh
.eh_frame:00000000000106F9                 db  18h
.eh_frame:00000000000106FA                 db  42h ; B
.eh_frame:00000000000106FB                 db  0Eh
.eh_frame:00000000000106FC                 db  10h
.eh_frame:00000000000106FD                 db  42h ; B
.eh_frame:00000000000106FE                 db  0Eh
.eh_frame:00000000000106FF                 db    8
.eh_frame:0000000000010700                 db  24h ; $
.eh_frame:0000000000010701                 db    0
.eh_frame:0000000000010702                 db    0
.eh_frame:0000000000010703                 db    0
.eh_frame:0000000000010704                 db 0A4h
.eh_frame:0000000000010705                 db    0
.eh_frame:0000000000010706                 db    0
.eh_frame:0000000000010707                 db    0
.eh_frame:0000000000010708                 db  78h ; x
.eh_frame:0000000000010709                 db  22h ; "
.eh_frame:000000000001070A                 db 0FFh
.eh_frame:000000000001070B                 db 0FFh
.eh_frame:000000000001070C                 db  37h ; 7
.eh_frame:000000000001070D                 db    0
.eh_frame:000000000001070E                 db    0
.eh_frame:000000000001070F                 db    0
.eh_frame:0000000000010710                 db    0
.eh_frame:0000000000010711                 db  41h ; A
.eh_frame:0000000000010712                 db  0Eh
.eh_frame:0000000000010713                 db  10h
.eh_frame:0000000000010714                 db  86h
.eh_frame:0000000000010715                 db    2
.eh_frame:0000000000010716                 db  41h ; A
.eh_frame:0000000000010717                 db  0Eh
.eh_frame:0000000000010718                 db  18h
.eh_frame:0000000000010719                 db  83h
.eh_frame:000000000001071A                 db    3
.eh_frame:000000000001071B                 db  58h ; X
.eh_frame:000000000001071C                 db  0Eh
.eh_frame:000000000001071D                 db  20h
.eh_frame:000000000001071E                 db  49h ; I
.eh_frame:000000000001071F                 db  0Eh
.eh_frame:0000000000010720                 db  18h
.eh_frame:0000000000010721                 db  47h ; G
.eh_frame:0000000000010722                 db  0Eh
.eh_frame:0000000000010723                 db  10h
.eh_frame:0000000000010724                 db  41h ; A
.eh_frame:0000000000010725                 db  0Eh
.eh_frame:0000000000010726                 db    8
.eh_frame:0000000000010727                 db    0
.eh_frame:0000000000010728                 db  24h ; $
.eh_frame:0000000000010729                 db    0
.eh_frame:000000000001072A                 db    0
.eh_frame:000000000001072B                 db    0
.eh_frame:000000000001072C                 db 0CCh
.eh_frame:000000000001072D                 db    0
.eh_frame:000000000001072E                 db    0
.eh_frame:000000000001072F                 db    0
.eh_frame:0000000000010730                 db  90h
.eh_frame:0000000000010731                 db  22h ; "
.eh_frame:0000000000010732                 db 0FFh
.eh_frame:0000000000010733                 db 0FFh
.eh_frame:0000000000010734                 db  37h ; 7
.eh_frame:0000000000010735                 db    0
.eh_frame:0000000000010736                 db    0
.eh_frame:0000000000010737                 db    0
.eh_frame:0000000000010738                 db    0
.eh_frame:0000000000010739                 db  41h ; A
.eh_frame:000000000001073A                 db  0Eh
.eh_frame:000000000001073B                 db  10h
.eh_frame:000000000001073C                 db  86h
.eh_frame:000000000001073D                 db    2
.eh_frame:000000000001073E                 db  41h ; A
.eh_frame:000000000001073F                 db  0Eh
.eh_frame:0000000000010740                 db  18h
.eh_frame:0000000000010741                 db  83h
.eh_frame:0000000000010742                 db    3
.eh_frame:0000000000010743                 db  58h ; X
.eh_frame:0000000000010744                 db  0Eh
.eh_frame:0000000000010745                 db  20h
.eh_frame:0000000000010746                 db  49h ; I
.eh_frame:0000000000010747                 db  0Eh
.eh_frame:0000000000010748                 db  18h
.eh_frame:0000000000010749                 db  47h ; G
.eh_frame:000000000001074A                 db  0Eh
.eh_frame:000000000001074B                 db  10h
.eh_frame:000000000001074C                 db  41h ; A
.eh_frame:000000000001074D                 db  0Eh
.eh_frame:000000000001074E                 db    8
.eh_frame:000000000001074F                 db    0
.eh_frame:0000000000010750                 db  24h ; $
.eh_frame:0000000000010751                 db    0
.eh_frame:0000000000010752                 db    0
.eh_frame:0000000000010753                 db    0
.eh_frame:0000000000010754                 db 0F4h
.eh_frame:0000000000010755                 db    0
.eh_frame:0000000000010756                 db    0
.eh_frame:0000000000010757                 db    0
.eh_frame:0000000000010758                 db 0A8h
.eh_frame:0000000000010759                 db  22h ; "
.eh_frame:000000000001075A                 db 0FFh
.eh_frame:000000000001075B                 db 0FFh
.eh_frame:000000000001075C                 db  37h ; 7
.eh_frame:000000000001075D                 db    0
.eh_frame:000000000001075E                 db    0
.eh_frame:000000000001075F                 db    0
.eh_frame:0000000000010760                 db    0
.eh_frame:0000000000010761                 db  41h ; A
.eh_frame:0000000000010762                 db  0Eh
.eh_frame:0000000000010763                 db  10h
.eh_frame:0000000000010764                 db  86h
.eh_frame:0000000000010765                 db    2
.eh_frame:0000000000010766                 db  41h ; A
.eh_frame:0000000000010767                 db  0Eh
.eh_frame:0000000000010768                 db  18h
.eh_frame:0000000000010769                 db  83h
.eh_frame:000000000001076A                 db    3
.eh_frame:000000000001076B                 db  58h ; X
.eh_frame:000000000001076C                 db  0Eh
.eh_frame:000000000001076D                 db  20h
.eh_frame:000000000001076E                 db  49h ; I
.eh_frame:000000000001076F                 db  0Eh
.eh_frame:0000000000010770                 db  18h
.eh_frame:0000000000010771                 db  47h ; G
.eh_frame:0000000000010772                 db  0Eh
.eh_frame:0000000000010773                 db  10h
.eh_frame:0000000000010774                 db  41h ; A
.eh_frame:0000000000010775                 db  0Eh
.eh_frame:0000000000010776                 db    8
.eh_frame:0000000000010777                 db    0
.eh_frame:0000000000010778                 db  24h ; $
.eh_frame:0000000000010779                 db    0
.eh_frame:000000000001077A                 db    0
.eh_frame:000000000001077B                 db    0
.eh_frame:000000000001077C                 db  1Ch
.eh_frame:000000000001077D                 db    1
.eh_frame:000000000001077E                 db    0
.eh_frame:000000000001077F                 db    0
.eh_frame:0000000000010780                 db 0C0h
.eh_frame:0000000000010781                 db  22h ; "
.eh_frame:0000000000010782                 db 0FFh
.eh_frame:0000000000010783                 db 0FFh
.eh_frame:0000000000010784                 db  37h ; 7
.eh_frame:0000000000010785                 db    0
.eh_frame:0000000000010786                 db    0
.eh_frame:0000000000010787                 db    0
.eh_frame:0000000000010788                 db    0
.eh_frame:0000000000010789                 db  41h ; A
.eh_frame:000000000001078A                 db  0Eh
.eh_frame:000000000001078B                 db  10h
.eh_frame:000000000001078C                 db  86h
.eh_frame:000000000001078D                 db    2
.eh_frame:000000000001078E                 db  41h ; A
.eh_frame:000000000001078F                 db  0Eh
.eh_frame:0000000000010790                 db  18h
.eh_frame:0000000000010791                 db  83h
.eh_frame:0000000000010792                 db    3
.eh_frame:0000000000010793                 db  58h ; X
.eh_frame:0000000000010794                 db  0Eh
.eh_frame:0000000000010795                 db  20h
.eh_frame:0000000000010796                 db  49h ; I
.eh_frame:0000000000010797                 db  0Eh
.eh_frame:0000000000010798                 db  18h
.eh_frame:0000000000010799                 db  47h ; G
.eh_frame:000000000001079A                 db  0Eh
.eh_frame:000000000001079B                 db  10h
.eh_frame:000000000001079C                 db  41h ; A
.eh_frame:000000000001079D                 db  0Eh
.eh_frame:000000000001079E                 db    8
.eh_frame:000000000001079F                 db    0
.eh_frame:00000000000107A0                 db  28h ; (
.eh_frame:00000000000107A1                 db    0
.eh_frame:00000000000107A2                 db    0
.eh_frame:00000000000107A3                 db    0
.eh_frame:00000000000107A4                 db  44h ; D
.eh_frame:00000000000107A5                 db    1
.eh_frame:00000000000107A6                 db    0
.eh_frame:00000000000107A7                 db    0
.eh_frame:00000000000107A8                 db 0D8h
.eh_frame:00000000000107A9                 db  22h ; "
.eh_frame:00000000000107AA                 db 0FFh
.eh_frame:00000000000107AB                 db 0FFh
.eh_frame:00000000000107AC                 db 0D9h
.eh_frame:00000000000107AD                 db  0Ch
.eh_frame:00000000000107AE                 db    0
.eh_frame:00000000000107AF                 db    0
.eh_frame:00000000000107B0                 db    0
.eh_frame:00000000000107B1                 db  41h ; A
.eh_frame:00000000000107B2                 db  0Eh
.eh_frame:00000000000107B3                 db  10h
.eh_frame:00000000000107B4                 db  86h
.eh_frame:00000000000107B5                 db    2
.eh_frame:00000000000107B6                 db  44h ; D
.eh_frame:00000000000107B7                 db  0Eh
.eh_frame:00000000000107B8                 db  18h
.eh_frame:00000000000107B9                 db  83h
.eh_frame:00000000000107BA                 db    3
.eh_frame:00000000000107BB                 db  44h ; D
.eh_frame:00000000000107BC                 db  0Eh
.eh_frame:00000000000107BD                 db  20h
.eh_frame:00000000000107BE                 db    2
.eh_frame:00000000000107BF                 db  43h ; C
.eh_frame:00000000000107C0                 db  0Ah
.eh_frame:00000000000107C1                 db  0Eh
.eh_frame:00000000000107C2                 db  18h
.eh_frame:00000000000107C3                 db  43h ; C
.eh_frame:00000000000107C4                 db  0Eh
.eh_frame:00000000000107C5                 db  10h
.eh_frame:00000000000107C6                 db  41h ; A
.eh_frame:00000000000107C7                 db  0Eh
.eh_frame:00000000000107C8                 db    8
.eh_frame:00000000000107C9                 db  48h ; H
.eh_frame:00000000000107CA                 db  0Bh
.eh_frame:00000000000107CB                 db    0
.eh_frame:00000000000107CC                 db  48h ; H
.eh_frame:00000000000107CD                 db    0
.eh_frame:00000000000107CE                 db    0
.eh_frame:00000000000107CF                 db    0
.eh_frame:00000000000107D0                 db  70h ; p
.eh_frame:00000000000107D1                 db    1
.eh_frame:00000000000107D2                 db    0
.eh_frame:00000000000107D3                 db    0
.eh_frame:00000000000107D4                 db  8Ch
.eh_frame:00000000000107D5                 db  2Fh ; /
.eh_frame:00000000000107D6                 db 0FFh
.eh_frame:00000000000107D7                 db 0FFh
.eh_frame:00000000000107D8                 db 0F2h
.eh_frame:00000000000107D9                 db    4
.eh_frame:00000000000107DA                 db    0
.eh_frame:00000000000107DB                 db    0
.eh_frame:00000000000107DC                 db    0
.eh_frame:00000000000107DD                 db  42h ; B
.eh_frame:00000000000107DE                 db  0Eh
.eh_frame:00000000000107DF                 db  10h
.eh_frame:00000000000107E0                 db  8Fh
.eh_frame:00000000000107E1                 db    2
.eh_frame:00000000000107E2                 db  42h ; B
.eh_frame:00000000000107E3                 db  0Eh
.eh_frame:00000000000107E4                 db  18h
.eh_frame:00000000000107E5                 db  8Eh
.eh_frame:00000000000107E6                 db    3
.eh_frame:00000000000107E7                 db  45h ; E
.eh_frame:00000000000107E8                 db  0Eh
.eh_frame:00000000000107E9                 db  20h
.eh_frame:00000000000107EA                 db  8Dh
.eh_frame:00000000000107EB                 db    4
.eh_frame:00000000000107EC                 db  42h ; B
.eh_frame:00000000000107ED                 db  0Eh
.eh_frame:00000000000107EE                 db  28h ; (
.eh_frame:00000000000107EF                 db  8Ch
.eh_frame:00000000000107F0                 db    5
.eh_frame:00000000000107F1                 db  41h ; A
.eh_frame:00000000000107F2                 db  0Eh
.eh_frame:00000000000107F3                 db  30h ; 0
.eh_frame:00000000000107F4                 db  86h
.eh_frame:00000000000107F5                 db    6
.eh_frame:00000000000107F6                 db  41h ; A
.eh_frame:00000000000107F7                 db  0Eh
.eh_frame:00000000000107F8                 db  38h ; 8
.eh_frame:00000000000107F9                 db  83h
.eh_frame:00000000000107FA                 db    7
.eh_frame:00000000000107FB                 db  44h ; D
.eh_frame:00000000000107FC                 db  0Eh
.eh_frame:00000000000107FD                 db  60h ; `
.eh_frame:00000000000107FE                 db    3
.eh_frame:00000000000107FF                 db  27h ; '
.eh_frame:0000000000010800                 db    1
.eh_frame:0000000000010801                 db  0Ah
.eh_frame:0000000000010802                 db  0Eh
.eh_frame:0000000000010803                 db  38h ; 8
.eh_frame:0000000000010804                 db  41h ; A
.eh_frame:0000000000010805                 db  0Eh
.eh_frame:0000000000010806                 db  30h ; 0
.eh_frame:0000000000010807                 db  41h ; A
.eh_frame:0000000000010808                 db  0Eh
.eh_frame:0000000000010809                 db  28h ; (
.eh_frame:000000000001080A                 db  42h ; B
.eh_frame:000000000001080B                 db  0Eh
.eh_frame:000000000001080C                 db  20h
.eh_frame:000000000001080D                 db  42h ; B
.eh_frame:000000000001080E                 db  0Eh
.eh_frame:000000000001080F                 db  18h
.eh_frame:0000000000010810                 db  42h ; B
.eh_frame:0000000000010811                 db  0Eh
.eh_frame:0000000000010812                 db  10h
.eh_frame:0000000000010813                 db  42h ; B
.eh_frame:0000000000010814                 db  0Eh
.eh_frame:0000000000010815                 db    8
.eh_frame:0000000000010816                 db  46h ; F
.eh_frame:0000000000010817                 db  0Bh
.eh_frame:0000000000010818                 db  28h ; (
.eh_frame:0000000000010819                 db    0
.eh_frame:000000000001081A                 db    0
.eh_frame:000000000001081B                 db    0
.eh_frame:000000000001081C                 db 0BCh
.eh_frame:000000000001081D                 db    1
.eh_frame:000000000001081E                 db    0
.eh_frame:000000000001081F                 db    0
.eh_frame:0000000000010820                 db  40h ; @
.eh_frame:0000000000010821                 db  34h ; 4
.eh_frame:0000000000010822                 db 0FFh
.eh_frame:0000000000010823                 db 0FFh
.eh_frame:0000000000010824                 db 0F0h
.eh_frame:0000000000010825                 db    0
.eh_frame:0000000000010826                 db    0
.eh_frame:0000000000010827                 db    0
.eh_frame:0000000000010828                 db    0
.eh_frame:0000000000010829                 db  41h ; A
.eh_frame:000000000001082A                 db  0Eh
.eh_frame:000000000001082B                 db  10h
.eh_frame:000000000001082C                 db  86h
.eh_frame:000000000001082D                 db    2
.eh_frame:000000000001082E                 db  41h ; A
.eh_frame:000000000001082F                 db  0Eh
.eh_frame:0000000000010830                 db  18h
.eh_frame:0000000000010831                 db  83h
.eh_frame:0000000000010832                 db    3
.eh_frame:0000000000010833                 db  44h ; D
.eh_frame:0000000000010834                 db  0Eh
.eh_frame:0000000000010835                 db  90h
.eh_frame:0000000000010836                 db    1
.eh_frame:0000000000010837                 db    2
.eh_frame:0000000000010838                 db  83h
.eh_frame:0000000000010839                 db  0Ah
.eh_frame:000000000001083A                 db  0Eh
.eh_frame:000000000001083B                 db  18h
.eh_frame:000000000001083C                 db  41h ; A
.eh_frame:000000000001083D                 db  0Eh
.eh_frame:000000000001083E                 db  10h
.eh_frame:000000000001083F                 db  41h ; A
.eh_frame:0000000000010840                 db  0Eh
.eh_frame:0000000000010841                 db    8
.eh_frame:0000000000010842                 db  45h ; E
.eh_frame:0000000000010843                 db  0Bh
.eh_frame:0000000000010844                 db  38h ; 8
.eh_frame:0000000000010845                 db    0
.eh_frame:0000000000010846                 db    0
.eh_frame:0000000000010847                 db    0
.eh_frame:0000000000010848                 db 0E8h
.eh_frame:0000000000010849                 db    1
.eh_frame:000000000001084A                 db    0
.eh_frame:000000000001084B                 db    0
.eh_frame:000000000001084C                 db    4
.eh_frame:000000000001084D                 db  35h ; 5
.eh_frame:000000000001084E                 db 0FFh
.eh_frame:000000000001084F                 db 0FFh
.eh_frame:0000000000010850                 db  3Eh ; >
.eh_frame:0000000000010851                 db    1
.eh_frame:0000000000010852                 db    0
.eh_frame:0000000000010853                 db    0
.eh_frame:0000000000010854                 db    0
.eh_frame:0000000000010855                 db  42h ; B
.eh_frame:0000000000010856                 db  0Eh
.eh_frame:0000000000010857                 db  10h
.eh_frame:0000000000010858                 db  8Dh
.eh_frame:0000000000010859                 db    2
.eh_frame:000000000001085A                 db  42h ; B
.eh_frame:000000000001085B                 db  0Eh
.eh_frame:000000000001085C                 db  18h
.eh_frame:000000000001085D                 db  8Ch
.eh_frame:000000000001085E                 db    3
.eh_frame:000000000001085F                 db  44h ; D
.eh_frame:0000000000010860                 db  0Eh
.eh_frame:0000000000010861                 db  20h
.eh_frame:0000000000010862                 db  86h
.eh_frame:0000000000010863                 db    4
.eh_frame:0000000000010864                 db  41h ; A
.eh_frame:0000000000010865                 db  0Eh
.eh_frame:0000000000010866                 db  28h ; (
.eh_frame:0000000000010867                 db  83h
.eh_frame:0000000000010868                 db    5
.eh_frame:0000000000010869                 db  47h ; G
.eh_frame:000000000001086A                 db  0Eh
.eh_frame:000000000001086B                 db 0E0h
.eh_frame:000000000001086C                 db    2
.eh_frame:000000000001086D                 db    2
.eh_frame:000000000001086E                 db 0CCh
.eh_frame:000000000001086F                 db  0Ah
.eh_frame:0000000000010870                 db  0Eh
.eh_frame:0000000000010871                 db  28h ; (
.eh_frame:0000000000010872                 db  41h ; A
.eh_frame:0000000000010873                 db  0Eh
.eh_frame:0000000000010874                 db  20h
.eh_frame:0000000000010875                 db  41h ; A
.eh_frame:0000000000010876                 db  0Eh
.eh_frame:0000000000010877                 db  18h
.eh_frame:0000000000010878                 db  42h ; B
.eh_frame:0000000000010879                 db  0Eh
.eh_frame:000000000001087A                 db  10h
.eh_frame:000000000001087B                 db  42h ; B
.eh_frame:000000000001087C                 db  0Eh
.eh_frame:000000000001087D                 db    8
.eh_frame:000000000001087E                 db  46h ; F
.eh_frame:000000000001087F                 db  0Bh
.eh_frame:0000000000010880                 db  4Ch ; L
.eh_frame:0000000000010881                 db    0
.eh_frame:0000000000010882                 db    0
.eh_frame:0000000000010883                 db    0
.eh_frame:0000000000010884                 db  24h ; $
.eh_frame:0000000000010885                 db    2
.eh_frame:0000000000010886                 db    0
.eh_frame:0000000000010887                 db    0
.eh_frame:0000000000010888                 db    8
.eh_frame:0000000000010889                 db  36h ; 6
.eh_frame:000000000001088A                 db 0FFh
.eh_frame:000000000001088B                 db 0FFh
.eh_frame:000000000001088C                 db  23h ; #
.eh_frame:000000000001088D                 db    1
.eh_frame:000000000001088E                 db    0
.eh_frame:000000000001088F                 db    0
.eh_frame:0000000000010890                 db    0
.eh_frame:0000000000010891                 db  45h ; E
.eh_frame:0000000000010892                 db  0Eh
.eh_frame:0000000000010893                 db  10h
.eh_frame:0000000000010894                 db  8Ch
.eh_frame:0000000000010895                 db    2
.eh_frame:0000000000010896                 db  41h ; A
.eh_frame:0000000000010897                 db  0Eh
.eh_frame:0000000000010898                 db  18h
.eh_frame:0000000000010899                 db  86h
.eh_frame:000000000001089A                 db    3
.eh_frame:000000000001089B                 db  41h ; A
.eh_frame:000000000001089C                 db  0Eh
.eh_frame:000000000001089D                 db  20h
.eh_frame:000000000001089E                 db  83h
.eh_frame:000000000001089F                 db    4
.eh_frame:00000000000108A0                 db  4Ch ; L
.eh_frame:00000000000108A1                 db  0Ah
.eh_frame:00000000000108A2                 db  0Eh
.eh_frame:00000000000108A3                 db  18h
.eh_frame:00000000000108A4                 db  41h ; A
.eh_frame:00000000000108A5                 db  0Eh
.eh_frame:00000000000108A6                 db  10h
.eh_frame:00000000000108A7                 db  42h ; B
.eh_frame:00000000000108A8                 db  0Eh
.eh_frame:00000000000108A9                 db    8
.eh_frame:00000000000108AA                 db  4Ch ; L
.eh_frame:00000000000108AB                 db  0Bh
.eh_frame:00000000000108AC                 db    2
.eh_frame:00000000000108AD                 db 0CEh
.eh_frame:00000000000108AE                 db  0Ah
.eh_frame:00000000000108AF                 db  0Eh
.eh_frame:00000000000108B0                 db  18h
.eh_frame:00000000000108B1                 db  41h ; A
.eh_frame:00000000000108B2                 db  0Eh
.eh_frame:00000000000108B3                 db  10h
.eh_frame:00000000000108B4                 db  42h ; B
.eh_frame:00000000000108B5                 db  0Eh
.eh_frame:00000000000108B6                 db    8
.eh_frame:00000000000108B7                 db  41h ; A
.eh_frame:00000000000108B8                 db  0Bh
.eh_frame:00000000000108B9                 db  54h ; T
.eh_frame:00000000000108BA                 db  0Ah
.eh_frame:00000000000108BB                 db  0Eh
.eh_frame:00000000000108BC                 db  18h
.eh_frame:00000000000108BD                 db  41h ; A
.eh_frame:00000000000108BE                 db  0Eh
.eh_frame:00000000000108BF                 db  10h
.eh_frame:00000000000108C0                 db  42h ; B
.eh_frame:00000000000108C1                 db  0Eh
.eh_frame:00000000000108C2                 db    8
.eh_frame:00000000000108C3                 db  48h ; H
.eh_frame:00000000000108C4                 db  0Bh
.eh_frame:00000000000108C5                 db  41h ; A
.eh_frame:00000000000108C6                 db  0Eh
.eh_frame:00000000000108C7                 db  18h
.eh_frame:00000000000108C8                 db  41h ; A
.eh_frame:00000000000108C9                 db  0Eh
.eh_frame:00000000000108CA                 db  10h
.eh_frame:00000000000108CB                 db  42h ; B
.eh_frame:00000000000108CC                 db  0Eh
.eh_frame:00000000000108CD                 db    8
.eh_frame:00000000000108CE                 db    0
.eh_frame:00000000000108CF                 db    0
.eh_frame:00000000000108D0                 db  54h ; T
.eh_frame:00000000000108D1                 db    0
.eh_frame:00000000000108D2                 db    0
.eh_frame:00000000000108D3                 db    0
.eh_frame:00000000000108D4                 db  74h ; t
.eh_frame:00000000000108D5                 db    2
.eh_frame:00000000000108D6                 db    0
.eh_frame:00000000000108D7                 db    0
.eh_frame:00000000000108D8                 db 0E8h
.eh_frame:00000000000108D9                 db  36h ; 6
.eh_frame:00000000000108DA                 db 0FFh
.eh_frame:00000000000108DB                 db 0FFh
.eh_frame:00000000000108DC                 db  5Ah ; Z
.eh_frame:00000000000108DD                 db    3
.eh_frame:00000000000108DE                 db    0
.eh_frame:00000000000108DF                 db    0
.eh_frame:00000000000108E0                 db    0
.eh_frame:00000000000108E1                 db  42h ; B
.eh_frame:00000000000108E2                 db  0Eh
.eh_frame:00000000000108E3                 db  10h
.eh_frame:00000000000108E4                 db  8Fh
.eh_frame:00000000000108E5                 db    2
.eh_frame:00000000000108E6                 db  42h ; B
.eh_frame:00000000000108E7                 db  0Eh
.eh_frame:00000000000108E8                 db  18h
.eh_frame:00000000000108E9                 db  8Eh
.eh_frame:00000000000108EA                 db    3
.eh_frame:00000000000108EB                 db  42h ; B
.eh_frame:00000000000108EC                 db  0Eh
.eh_frame:00000000000108ED                 db  20h
.eh_frame:00000000000108EE                 db  8Dh
.eh_frame:00000000000108EF                 db    4
.eh_frame:00000000000108F0                 db  42h ; B
.eh_frame:00000000000108F1                 db  0Eh
.eh_frame:00000000000108F2                 db  28h ; (
.eh_frame:00000000000108F3                 db  8Ch
.eh_frame:00000000000108F4                 db    5
.eh_frame:00000000000108F5                 db  44h ; D
.eh_frame:00000000000108F6                 db  0Eh
.eh_frame:00000000000108F7                 db  30h ; 0
.eh_frame:00000000000108F8                 db  86h
.eh_frame:00000000000108F9                 db    6
.eh_frame:00000000000108FA                 db  41h ; A
.eh_frame:00000000000108FB                 db  0Eh
.eh_frame:00000000000108FC                 db  38h ; 8
.eh_frame:00000000000108FD                 db  83h
.eh_frame:00000000000108FE                 db    7
.eh_frame:00000000000108FF                 db  50h ; P
.eh_frame:0000000000010900 unk_10900       db  0Eh                 ; DATA XREF: cdb_advance_fd+7↑o
.eh_frame:0000000000010901                 db  50h ; P
.eh_frame:0000000000010902                 db    2
.eh_frame:0000000000010903                 db 0D2h
.eh_frame:0000000000010904                 db  0Eh
.eh_frame:0000000000010905                 db  58h ; X
.eh_frame:0000000000010906                 db  49h ; I
.eh_frame:0000000000010907                 db  0Eh
.eh_frame:0000000000010908                 db  60h ; `
.eh_frame:0000000000010909                 db  50h ; P
.eh_frame:000000000001090A                 db  0Eh
.eh_frame:000000000001090B                 db  58h ; X
.eh_frame:000000000001090C                 db  41h ; A
.eh_frame:000000000001090D                 db  0Eh
.eh_frame:000000000001090E                 db  50h ; P
.eh_frame:000000000001090F                 db  44h ; D
.eh_frame:0000000000010910                 db  0Ah
.eh_frame:0000000000010911                 db  0Eh
.eh_frame:0000000000010912                 db  38h ; 8
.eh_frame:0000000000010913                 db  41h ; A
.eh_frame:0000000000010914                 db  0Eh
.eh_frame:0000000000010915                 db  30h ; 0
.eh_frame:0000000000010916                 db  41h ; A
.eh_frame:0000000000010917                 db  0Eh
.eh_frame:0000000000010918                 db  28h ; (
.eh_frame:0000000000010919                 db  42h ; B
.eh_frame:000000000001091A                 db  0Eh
.eh_frame:000000000001091B                 db  20h
.eh_frame:000000000001091C                 db  42h ; B
.eh_frame:000000000001091D                 db  0Eh
.eh_frame:000000000001091E                 db  18h
.eh_frame:000000000001091F                 db  42h ; B
.eh_frame:0000000000010920                 db  0Eh
.eh_frame:0000000000010921                 db  10h
.eh_frame:0000000000010922                 db  42h ; B
.eh_frame:0000000000010923                 db  0Eh
.eh_frame:0000000000010924                 db    8
.eh_frame:0000000000010925                 db  49h ; I
.eh_frame:0000000000010926                 db  0Bh
.eh_frame:0000000000010927                 db    0
.eh_frame:0000000000010928                 db  40h ; @
.eh_frame:0000000000010929                 db    0
.eh_frame:000000000001092A                 db    0
.eh_frame:000000000001092B                 db    0
.eh_frame:000000000001092C                 db 0CCh
.eh_frame:000000000001092D                 db    2
.eh_frame:000000000001092E                 db    0
.eh_frame:000000000001092F                 db    0
.eh_frame:0000000000010930                 db 0F0h
.eh_frame:0000000000010931                 db  39h ; 9
.eh_frame:0000000000010932                 db 0FFh
.eh_frame:0000000000010933                 db 0FFh
.eh_frame:0000000000010934                 db    1
.eh_frame:0000000000010935                 db    6
.eh_frame:0000000000010936                 db    0
.eh_frame:0000000000010937                 db    0
.eh_frame:0000000000010938                 db    0
.eh_frame:0000000000010939                 db  42h ; B
.eh_frame:000000000001093A                 db  0Eh
.eh_frame:000000000001093B                 db  10h
.eh_frame:000000000001093C                 db  8Eh
.eh_frame:000000000001093D                 db    2
.eh_frame:000000000001093E                 db  42h ; B
.eh_frame:000000000001093F                 db  0Eh
.eh_frame:0000000000010940                 db  18h
.eh_frame:0000000000010941                 db  8Dh
.eh_frame:0000000000010942                 db    3
.eh_frame:0000000000010943                 db  45h ; E
.eh_frame:0000000000010944                 db  0Eh
.eh_frame:0000000000010945                 db  20h
.eh_frame:0000000000010946                 db  8Ch
.eh_frame:0000000000010947                 db    4
.eh_frame:0000000000010948                 db  41h ; A
.eh_frame:0000000000010949                 db  0Eh
.eh_frame:000000000001094A                 db  28h ; (
.eh_frame:000000000001094B                 db  86h
.eh_frame:000000000001094C                 db    5
.eh_frame:000000000001094D                 db  41h ; A
.eh_frame:000000000001094E                 db  0Eh
.eh_frame:000000000001094F                 db  30h ; 0
.eh_frame:0000000000010950                 db  83h
.eh_frame:0000000000010951                 db    6
.eh_frame:0000000000010952                 db  44h ; D
.eh_frame:0000000000010953                 db  0Eh
.eh_frame:0000000000010954                 db  40h ; @
.eh_frame:0000000000010955                 db    2
.eh_frame:0000000000010956                 db  43h ; C
.eh_frame:0000000000010957                 db  0Ah
.eh_frame:0000000000010958                 db  0Eh
.eh_frame:0000000000010959                 db  30h ; 0
.eh_frame:000000000001095A                 db  44h ; D
.eh_frame:000000000001095B                 db  0Eh
.eh_frame:000000000001095C                 db  28h ; (
.eh_frame:000000000001095D                 db  41h ; A
.eh_frame:000000000001095E                 db  0Eh
.eh_frame:000000000001095F                 db  20h
.eh_frame:0000000000010960                 db  42h ; B
.eh_frame:0000000000010961                 db  0Eh
.eh_frame:0000000000010962                 db  18h
.eh_frame:0000000000010963                 db  42h ; B
.eh_frame:0000000000010964                 db  0Eh
.eh_frame:0000000000010965                 db  10h
.eh_frame:0000000000010966                 db  42h ; B
.eh_frame:0000000000010967                 db  0Eh
.eh_frame:0000000000010968                 db    8
.eh_frame:0000000000010969                 db  43h ; C
.eh_frame:000000000001096A                 db  0Bh
.eh_frame:000000000001096B                 db    0
.eh_frame:000000000001096C                 db  28h ; (
.eh_frame:000000000001096D                 db    0
.eh_frame:000000000001096E                 db    0
.eh_frame:000000000001096F                 db    0
.eh_frame:0000000000010970                 db  10h
.eh_frame:0000000000010971                 db    3
.eh_frame:0000000000010972                 db    0
.eh_frame:0000000000010973                 db    0
.eh_frame:0000000000010974                 db 0BCh
.eh_frame:0000000000010975                 db  3Fh ; ?
.eh_frame:0000000000010976                 db 0FFh
.eh_frame:0000000000010977                 db 0FFh
.eh_frame:0000000000010978                 db  0Ah
.eh_frame:0000000000010979                 db    5
.eh_frame:000000000001097A                 db    0
.eh_frame:000000000001097B                 db    0
.eh_frame:000000000001097C                 db    0
.eh_frame:000000000001097D                 db  42h ; B
.eh_frame:000000000001097E                 db  0Eh
.eh_frame:000000000001097F                 db  10h
.eh_frame:0000000000010980                 db  8Dh
.eh_frame:0000000000010981                 db    2
.eh_frame:0000000000010982                 db  42h ; B
.eh_frame:0000000000010983                 db  0Eh
.eh_frame:0000000000010984                 db  18h
.eh_frame:0000000000010985                 db  8Ch
.eh_frame:0000000000010986                 db    3
.eh_frame:0000000000010987                 db  46h ; F
.eh_frame:0000000000010988                 db  0Eh
.eh_frame:0000000000010989                 db  20h
.eh_frame:000000000001098A                 db  86h
.eh_frame:000000000001098B                 db    4
.eh_frame:000000000001098C                 db  41h ; A
.eh_frame:000000000001098D                 db  0Eh
.eh_frame:000000000001098E                 db  28h ; (
.eh_frame:000000000001098F                 db  83h
.eh_frame:0000000000010990                 db    5
.eh_frame:0000000000010991                 db  49h ; I
.eh_frame:0000000000010992                 db  0Eh
.eh_frame:0000000000010993                 db 0B0h
.eh_frame:0000000000010994                 db    1
.eh_frame:0000000000010995                 db    0
.eh_frame:0000000000010996                 db    0
.eh_frame:0000000000010997                 db    0
.eh_frame:0000000000010998                 db  4Ch ; L
.eh_frame:0000000000010999                 db    0
.eh_frame:000000000001099A                 db    0
.eh_frame:000000000001099B                 db    0
.eh_frame:000000000001099C                 db  3Ch ; <
.eh_frame:000000000001099D                 db    3
.eh_frame:000000000001099E                 db    0
.eh_frame:000000000001099F                 db    0
.eh_frame:00000000000109A0                 db 0A0h
.eh_frame:00000000000109A1                 db  18h
.eh_frame:00000000000109A2                 db 0FFh
.eh_frame:00000000000109A3                 db 0FFh
.eh_frame:00000000000109A4                 db  64h ; d
.eh_frame:00000000000109A5                 db    5
.eh_frame:00000000000109A6                 db    0
.eh_frame:00000000000109A7                 db    0
.eh_frame:00000000000109A8                 db    0
.eh_frame:00000000000109A9                 db  42h ; B
.eh_frame:00000000000109AA                 db  0Eh
.eh_frame:00000000000109AB                 db  10h
.eh_frame:00000000000109AC                 db  8Fh
.eh_frame:00000000000109AD                 db    2
.eh_frame:00000000000109AE                 db  42h ; B
.eh_frame:00000000000109AF                 db  0Eh
.eh_frame:00000000000109B0                 db  18h
.eh_frame:00000000000109B1                 db  8Eh
.eh_frame:00000000000109B2                 db    3
.eh_frame:00000000000109B3                 db  48h ; H
.eh_frame:00000000000109B4                 db  0Eh
.eh_frame:00000000000109B5                 db  20h
.eh_frame:00000000000109B6                 db  8Dh
.eh_frame:00000000000109B7                 db    4
.eh_frame:00000000000109B8                 db  42h ; B
.eh_frame:00000000000109B9                 db  0Eh
.eh_frame:00000000000109BA                 db  28h ; (
.eh_frame:00000000000109BB                 db  8Ch
.eh_frame:00000000000109BC                 db    5
.eh_frame:00000000000109BD                 db  48h ; H
.eh_frame:00000000000109BE                 db  0Eh
.eh_frame:00000000000109BF                 db  30h ; 0
.eh_frame:00000000000109C0                 db  86h
.eh_frame:00000000000109C1                 db    6
.eh_frame:00000000000109C2                 db  41h ; A
.eh_frame:00000000000109C3                 db  0Eh
.eh_frame:00000000000109C4                 db  38h ; 8
.eh_frame:00000000000109C5                 db  83h
.eh_frame:00000000000109C6                 db    7
.eh_frame:00000000000109C7                 db  4Ch ; L
.eh_frame:00000000000109C8                 db  0Eh
.eh_frame:00000000000109C9                 db  80h
.eh_frame:00000000000109CA                 db    2
.eh_frame:00000000000109CB                 db    3
.eh_frame:00000000000109CC                 db 0A9h
.eh_frame:00000000000109CD                 db    3
.eh_frame:00000000000109CE                 db  0Ah
.eh_frame:00000000000109CF                 db  0Eh
.eh_frame:00000000000109D0                 db  38h ; 8
.eh_frame:00000000000109D1                 db  41h ; A
.eh_frame:00000000000109D2                 db  0Eh
.eh_frame:00000000000109D3                 db  30h ; 0
.eh_frame:00000000000109D4                 db  41h ; A
.eh_frame:00000000000109D5                 db  0Eh
.eh_frame:00000000000109D6                 db  28h ; (
.eh_frame:00000000000109D7                 db  42h ; B
.eh_frame:00000000000109D8                 db  0Eh
.eh_frame:00000000000109D9                 db  20h
.eh_frame:00000000000109DA                 db  42h ; B
.eh_frame:00000000000109DB                 db  0Eh
.eh_frame:00000000000109DC                 db  18h
.eh_frame:00000000000109DD                 db  42h ; B
.eh_frame:00000000000109DE                 db  0Eh
.eh_frame:00000000000109DF                 db  10h
.eh_frame:00000000000109E0                 db  42h ; B
.eh_frame:00000000000109E1                 db  0Eh
.eh_frame:00000000000109E2                 db    8
.eh_frame:00000000000109E3                 db  41h ; A
.eh_frame:00000000000109E4                 db  0Bh
.eh_frame:00000000000109E5                 db    0
.eh_frame:00000000000109E6                 db    0
.eh_frame:00000000000109E7                 db    0
.eh_frame:00000000000109E8                 db  2Ch ; ,
.eh_frame:00000000000109E9                 db    0
.eh_frame:00000000000109EA                 db    0
.eh_frame:00000000000109EB                 db    0
.eh_frame:00000000000109EC                 db  8Ch
.eh_frame:00000000000109ED                 db    3
.eh_frame:00000000000109EE                 db    0
.eh_frame:00000000000109EF                 db    0
.eh_frame:00000000000109F0                 db  50h ; P
.eh_frame:00000000000109F1                 db  44h ; D
.eh_frame:00000000000109F2                 db 0FFh
.eh_frame:00000000000109F3                 db 0FFh
.eh_frame:00000000000109F4                 db 0B8h
.eh_frame:00000000000109F5                 db    3
.eh_frame:00000000000109F6                 db    0
.eh_frame:00000000000109F7                 db    0
.eh_frame:00000000000109F8                 db    0
.eh_frame:00000000000109F9                 db  41h ; A
.eh_frame:00000000000109FA                 db  0Eh
.eh_frame:00000000000109FB                 db  10h
.eh_frame:00000000000109FC                 db  86h
.eh_frame:00000000000109FD                 db    2
.eh_frame:00000000000109FE                 db  43h ; C
.eh_frame:00000000000109FF                 db  0Dh
.eh_frame:0000000000010A00                 db    6
.eh_frame:0000000000010A01                 db  46h ; F
.eh_frame:0000000000010A02                 db  8Fh
.eh_frame:0000000000010A03                 db    3
.eh_frame:0000000000010A04                 db  8Eh
.eh_frame:0000000000010A05                 db    4
.eh_frame:0000000000010A06                 db  8Dh
.eh_frame:0000000000010A07                 db    5
.eh_frame:0000000000010A08                 db  4Ah ; J
.eh_frame:0000000000010A09                 db  8Ch
.eh_frame:0000000000010A0A                 db    6
.eh_frame:0000000000010A0B                 db  83h
.eh_frame:0000000000010A0C                 db    7
.eh_frame:0000000000010A0D                 db    3
.eh_frame:0000000000010A0E                 db  14h
.eh_frame:0000000000010A0F                 db    2
.eh_frame:0000000000010A10                 db  0Ah
.eh_frame:0000000000010A11                 db  0Ch
.eh_frame:0000000000010A12                 db    7
.eh_frame:0000000000010A13                 db    8
.eh_frame:0000000000010A14                 db  48h ; H
.eh_frame:0000000000010A15                 db  0Bh
.eh_frame:0000000000010A16                 db    0
.eh_frame:0000000000010A17                 db    0
.eh_frame:0000000000010A18                 db  4Ch ; L
.eh_frame:0000000000010A19                 db    0
.eh_frame:0000000000010A1A                 db    0
.eh_frame:0000000000010A1B                 db    0
.eh_frame:0000000000010A1C                 db 0BCh
.eh_frame:0000000000010A1D                 db    3
.eh_frame:0000000000010A1E                 db    0
.eh_frame:0000000000010A1F                 db    0
.eh_frame:0000000000010A20                 db 0E0h
.eh_frame:0000000000010A21                 db  47h ; G
.eh_frame:0000000000010A22                 db 0FFh
.eh_frame:0000000000010A23                 db 0FFh
.eh_frame:0000000000010A24                 db 0EFh
.eh_frame:0000000000010A25                 db    0
.eh_frame:0000000000010A26                 db    0
.eh_frame:0000000000010A27                 db    0
.eh_frame:0000000000010A28                 db    0
.eh_frame:0000000000010A29                 db  42h ; B
.eh_frame:0000000000010A2A                 db  0Eh
.eh_frame:0000000000010A2B                 db  10h
.eh_frame:0000000000010A2C                 db  8Fh
.eh_frame:0000000000010A2D                 db    2
.eh_frame:0000000000010A2E                 db  42h ; B
.eh_frame:0000000000010A2F                 db  0Eh
.eh_frame:0000000000010A30                 db  18h
.eh_frame:0000000000010A31                 db  8Eh
.eh_frame:0000000000010A32                 db    3
.eh_frame:0000000000010A33                 db  47h ; G
.eh_frame:0000000000010A34                 db  0Eh
.eh_frame:0000000000010A35                 db  20h
.eh_frame:0000000000010A36                 db  8Dh
.eh_frame:0000000000010A37                 db    4
.eh_frame:0000000000010A38                 db  42h ; B
.eh_frame:0000000000010A39                 db  0Eh
.eh_frame:0000000000010A3A                 db  28h ; (
.eh_frame:0000000000010A3B                 db  8Ch
.eh_frame:0000000000010A3C                 db    5
.eh_frame:0000000000010A3D                 db  44h ; D
.eh_frame:0000000000010A3E                 db  0Eh
.eh_frame:0000000000010A3F                 db  30h ; 0
.eh_frame:0000000000010A40                 db  86h
.eh_frame:0000000000010A41                 db    6
.eh_frame:0000000000010A42                 db  41h ; A
.eh_frame:0000000000010A43                 db  0Eh
.eh_frame:0000000000010A44                 db  38h ; 8
.eh_frame:0000000000010A45                 db  83h
.eh_frame:0000000000010A46                 db    7
.eh_frame:0000000000010A47                 db  5Ch ; \
.eh_frame:0000000000010A48                 db  0Eh
.eh_frame:0000000000010A49                 db  40h ; @
.eh_frame:0000000000010A4A                 db    2
.eh_frame:0000000000010A4B                 db  61h ; a
.eh_frame:0000000000010A4C                 db  0Ah
.eh_frame:0000000000010A4D                 db  0Eh
.eh_frame:0000000000010A4E                 db  38h ; 8
.eh_frame:0000000000010A4F                 db  44h ; D
.eh_frame:0000000000010A50                 db  0Eh
.eh_frame:0000000000010A51                 db  30h ; 0
.eh_frame:0000000000010A52                 db  41h ; A
.eh_frame:0000000000010A53                 db  0Eh
.eh_frame:0000000000010A54                 db  28h ; (
.eh_frame:0000000000010A55                 db  42h ; B
.eh_frame:0000000000010A56                 db  0Eh
.eh_frame:0000000000010A57                 db  20h
.eh_frame:0000000000010A58                 db  42h ; B
.eh_frame:0000000000010A59                 db  0Eh
.eh_frame:0000000000010A5A                 db  18h
.eh_frame:0000000000010A5B                 db  42h ; B
.eh_frame:0000000000010A5C                 db  0Eh
.eh_frame:0000000000010A5D                 db  10h
.eh_frame:0000000000010A5E                 db  42h ; B
.eh_frame:0000000000010A5F                 db  0Eh
.eh_frame:0000000000010A60                 db    8
.eh_frame:0000000000010A61                 db  44h ; D
.eh_frame:0000000000010A62                 db  0Bh
.eh_frame:0000000000010A63                 db    0
.eh_frame:0000000000010A64                 db    0
.eh_frame:0000000000010A65                 db    0
.eh_frame:0000000000010A66                 db    0
.eh_frame:0000000000010A67                 db    0
.eh_frame:0000000000010A68                 db  10h
.eh_frame:0000000000010A69                 db    0
.eh_frame:0000000000010A6A                 db    0
.eh_frame:0000000000010A6B                 db    0
.eh_frame:0000000000010A6C                 db  0Ch
.eh_frame:0000000000010A6D                 db    4
.eh_frame:0000000000010A6E                 db    0
.eh_frame:0000000000010A6F                 db    0
.eh_frame:0000000000010A70                 db  80h
.eh_frame:0000000000010A71                 db  48h ; H
.eh_frame:0000000000010A72                 db 0FFh
.eh_frame:0000000000010A73                 db 0FFh
.eh_frame:0000000000010A74                 db  0Ah
.eh_frame:0000000000010A75                 db    0
.eh_frame:0000000000010A76                 db    0
.eh_frame:0000000000010A77                 db    0
.eh_frame:0000000000010A78                 db    0
.eh_frame:0000000000010A79                 db    0
.eh_frame:0000000000010A7A                 db    0
.eh_frame:0000000000010A7B                 db    0
.eh_frame:0000000000010A7C                 db  48h ; H
.eh_frame:0000000000010A7D                 db    0
.eh_frame:0000000000010A7E                 db    0
.eh_frame:0000000000010A7F                 db    0
.eh_frame:0000000000010A80                 db  20h
.eh_frame:0000000000010A81                 db    4
.eh_frame:0000000000010A82                 db    0
.eh_frame:0000000000010A83                 db    0
.eh_frame:0000000000010A84                 db  7Ch ; |
.eh_frame:0000000000010A85                 db  48h ; H
.eh_frame:0000000000010A86                 db 0FFh
.eh_frame:0000000000010A87                 db 0FFh
.eh_frame:0000000000010A88                 db  16h
.eh_frame:0000000000010A89                 db    1
.eh_frame:0000000000010A8A                 db    0
.eh_frame:0000000000010A8B                 db    0
.eh_frame:0000000000010A8C                 db    0
.eh_frame:0000000000010A8D                 db  42h ; B
.eh_frame:0000000000010A8E                 db  0Eh
.eh_frame:0000000000010A8F                 db  10h
.eh_frame:0000000000010A90                 db  8Fh
.eh_frame:0000000000010A91                 db    2
.eh_frame:0000000000010A92                 db  42h ; B
.eh_frame:0000000000010A93                 db  0Eh
.eh_frame:0000000000010A94                 db  18h
.eh_frame:0000000000010A95                 db  8Eh
.eh_frame:0000000000010A96                 db    3
.eh_frame:0000000000010A97                 db  45h ; E
.eh_frame:0000000000010A98                 db  0Eh
.eh_frame:0000000000010A99                 db  20h
.eh_frame:0000000000010A9A                 db  8Dh
.eh_frame:0000000000010A9B                 db    4
.eh_frame:0000000000010A9C                 db  42h ; B
.eh_frame:0000000000010A9D                 db  0Eh
.eh_frame:0000000000010A9E                 db  28h ; (
.eh_frame:0000000000010A9F                 db  8Ch
.eh_frame:0000000000010AA0                 db    5
.eh_frame:0000000000010AA1                 db  44h ; D
.eh_frame:0000000000010AA2                 db  0Eh
.eh_frame:0000000000010AA3                 db  30h ; 0
.eh_frame:0000000000010AA4                 db  86h
.eh_frame:0000000000010AA5                 db    6
.eh_frame:0000000000010AA6                 db  41h ; A
.eh_frame:0000000000010AA7                 db  0Eh
.eh_frame:0000000000010AA8                 db  38h ; 8
.eh_frame:0000000000010AA9                 db  83h
.eh_frame:0000000000010AAA                 db    7
.eh_frame:0000000000010AAB                 db  47h ; G
.eh_frame:0000000000010AAC                 db  0Eh
.eh_frame:0000000000010AAD                 db  60h ; `
.eh_frame:0000000000010AAE                 db    2
.eh_frame:0000000000010AAF                 db 0DEh
.eh_frame:0000000000010AB0                 db  0Ah
.eh_frame:0000000000010AB1                 db  0Eh
.eh_frame:0000000000010AB2                 db  38h ; 8
.eh_frame:0000000000010AB3                 db  41h ; A
.eh_frame:0000000000010AB4                 db  0Eh
.eh_frame:0000000000010AB5                 db  30h ; 0
.eh_frame:0000000000010AB6                 db  41h ; A
.eh_frame:0000000000010AB7                 db  0Eh
.eh_frame:0000000000010AB8                 db  28h ; (
.eh_frame:0000000000010AB9                 db  42h ; B
.eh_frame:0000000000010ABA                 db  0Eh
.eh_frame:0000000000010ABB                 db  20h
.eh_frame:0000000000010ABC                 db  42h ; B
.eh_frame:0000000000010ABD                 db  0Eh
.eh_frame:0000000000010ABE                 db  18h
.eh_frame:0000000000010ABF                 db  42h ; B
.eh_frame:0000000000010AC0                 db  0Eh
.eh_frame:0000000000010AC1                 db  10h
.eh_frame:0000000000010AC2                 db  42h ; B
.eh_frame:0000000000010AC3                 db  0Eh
.eh_frame:0000000000010AC4                 db    8
.eh_frame:0000000000010AC5                 db  41h ; A
.eh_frame:0000000000010AC6                 db  0Bh
.eh_frame:0000000000010AC7                 db    0
.eh_frame:0000000000010AC8                 db  28h ; (
.eh_frame:0000000000010AC9                 db    0
.eh_frame:0000000000010ACA                 db    0
.eh_frame:0000000000010ACB                 db    0
.eh_frame:0000000000010ACC                 db  6Ch ; l
.eh_frame:0000000000010ACD                 db    4
.eh_frame:0000000000010ACE                 db    0
.eh_frame:0000000000010ACF                 db    0
.eh_frame:0000000000010AD0                 db  50h ; P
.eh_frame:0000000000010AD1                 db  49h ; I
.eh_frame:0000000000010AD2                 db 0FFh
.eh_frame:0000000000010AD3                 db 0FFh
.eh_frame:0000000000010AD4                 db  73h ; s
.eh_frame:0000000000010AD5                 db    0
.eh_frame:0000000000010AD6                 db    0
.eh_frame:0000000000010AD7                 db    0
.eh_frame:0000000000010AD8                 db    0
.eh_frame:0000000000010AD9                 db  46h ; F
.eh_frame:0000000000010ADA                 db  0Eh
.eh_frame:0000000000010ADB                 db  10h
.eh_frame:0000000000010ADC                 db  8Ch
.eh_frame:0000000000010ADD                 db    2
.eh_frame:0000000000010ADE                 db  46h ; F
.eh_frame:0000000000010ADF                 db  0Eh
.eh_frame:0000000000010AE0                 db  18h
.eh_frame:0000000000010AE1                 db  86h
.eh_frame:0000000000010AE2                 db    3
.eh_frame:0000000000010AE3                 db  44h ; D
.eh_frame:0000000000010AE4                 db  0Eh
.eh_frame:0000000000010AE5                 db  20h
.eh_frame:0000000000010AE6                 db  83h
.eh_frame:0000000000010AE7                 db    4
.eh_frame:0000000000010AE8                 db  7Fh ; 
.eh_frame:0000000000010AE9                 db  0Ah
.eh_frame:0000000000010AEA                 db  0Eh
.eh_frame:0000000000010AEB                 db  18h
.eh_frame:0000000000010AEC                 db  41h ; A
.eh_frame:0000000000010AED                 db  0Eh
.eh_frame:0000000000010AEE                 db  10h
.eh_frame:0000000000010AEF                 db  42h ; B
.eh_frame:0000000000010AF0                 db  0Eh
.eh_frame:0000000000010AF1                 db    8
.eh_frame:0000000000010AF2                 db  4Eh ; N
.eh_frame:0000000000010AF3                 db  0Bh
.eh_frame:0000000000010AF4                 db  5Ch ; \
.eh_frame:0000000000010AF5                 db    0
.eh_frame:0000000000010AF6                 db    0
.eh_frame:0000000000010AF7                 db    0
.eh_frame:0000000000010AF8                 db  98h
.eh_frame:0000000000010AF9                 db    4
.eh_frame:0000000000010AFA                 db    0
.eh_frame:0000000000010AFB                 db    0
.eh_frame:0000000000010AFC                 db 0A4h
.eh_frame:0000000000010AFD                 db  49h ; I
.eh_frame:0000000000010AFE                 db 0FFh
.eh_frame:0000000000010AFF                 db 0FFh
.eh_frame:0000000000010B00                 db  20h
.eh_frame:0000000000010B01                 db    1
.eh_frame:0000000000010B02                 db    0
.eh_frame:0000000000010B03                 db    0
.eh_frame:0000000000010B04                 db    0
.eh_frame:0000000000010B05                 db  42h ; B
.eh_frame:0000000000010B06                 db  0Eh
.eh_frame:0000000000010B07                 db  10h
.eh_frame:0000000000010B08                 db  8Fh
.eh_frame:0000000000010B09                 db    2
.eh_frame:0000000000010B0A                 db  42h ; B
.eh_frame:0000000000010B0B                 db  0Eh
.eh_frame:0000000000010B0C                 db  18h
.eh_frame:0000000000010B0D                 db  8Eh
.eh_frame:0000000000010B0E                 db    3
.eh_frame:0000000000010B0F                 db  45h ; E
.eh_frame:0000000000010B10                 db  0Eh
.eh_frame:0000000000010B11                 db  20h
.eh_frame:0000000000010B12                 db  8Dh
.eh_frame:0000000000010B13                 db    4
.eh_frame:0000000000010B14                 db  42h ; B
.eh_frame:0000000000010B15                 db  0Eh
.eh_frame:0000000000010B16                 db  28h ; (
.eh_frame:0000000000010B17                 db  8Ch
.eh_frame:0000000000010B18                 db    5
.eh_frame:0000000000010B19                 db  43h ; C
.eh_frame:0000000000010B1A                 db  0Eh
.eh_frame:0000000000010B1B                 db  30h ; 0
.eh_frame:0000000000010B1C                 db  86h
.eh_frame:0000000000010B1D                 db    6
.eh_frame:0000000000010B1E                 db  41h ; A
.eh_frame:0000000000010B1F                 db  0Eh
.eh_frame:0000000000010B20                 db  38h ; 8
.eh_frame:0000000000010B21                 db  83h
.eh_frame:0000000000010B22                 db    7
.eh_frame:0000000000010B23                 db  56h ; V
.eh_frame:0000000000010B24                 db  0Eh
.eh_frame:0000000000010B25                 db  40h ; @
.eh_frame:0000000000010B26                 db    2
.eh_frame:0000000000010B27                 db 0D3h
.eh_frame:0000000000010B28                 db  0Ah
.eh_frame:0000000000010B29                 db  0Eh
.eh_frame:0000000000010B2A                 db  38h ; 8
.eh_frame:0000000000010B2B                 db  41h ; A
.eh_frame:0000000000010B2C                 db  0Eh
.eh_frame:0000000000010B2D                 db  30h ; 0
.eh_frame:0000000000010B2E                 db  41h ; A
.eh_frame:0000000000010B2F                 db  0Eh
.eh_frame:0000000000010B30                 db  28h ; (
.eh_frame:0000000000010B31                 db  42h ; B
.eh_frame:0000000000010B32                 db  0Eh
.eh_frame:0000000000010B33                 db  20h
.eh_frame:0000000000010B34                 db  42h ; B
.eh_frame:0000000000010B35                 db  0Eh
.eh_frame:0000000000010B36                 db  18h
.eh_frame:0000000000010B37                 db  42h ; B
.eh_frame:0000000000010B38                 db  0Eh
.eh_frame:0000000000010B39                 db  10h
.eh_frame:0000000000010B3A                 db  42h ; B
.eh_frame:0000000000010B3B                 db  0Eh
.eh_frame:0000000000010B3C                 db    8
.eh_frame:0000000000010B3D                 db  46h ; F
.eh_frame:0000000000010B3E                 db  0Bh
.eh_frame:0000000000010B3F                 db  44h ; D
.eh_frame:0000000000010B40                 db  0Eh
.eh_frame:0000000000010B41                 db  38h ; 8
.eh_frame:0000000000010B42                 db  46h ; F
.eh_frame:0000000000010B43                 db  0Eh
.eh_frame:0000000000010B44                 db  30h ; 0
.eh_frame:0000000000010B45                 db  41h ; A
.eh_frame:0000000000010B46                 db  0Eh
.eh_frame:0000000000010B47                 db  28h ; (
.eh_frame:0000000000010B48                 db  42h ; B
.eh_frame:0000000000010B49                 db  0Eh
.eh_frame:0000000000010B4A                 db  20h
.eh_frame:0000000000010B4B                 db  42h ; B
.eh_frame:0000000000010B4C                 db  0Eh
.eh_frame:0000000000010B4D                 db  18h
.eh_frame:0000000000010B4E                 db  42h ; B
.eh_frame:0000000000010B4F                 db  0Eh
.eh_frame:0000000000010B50                 db  10h
.eh_frame:0000000000010B51                 db  42h ; B
.eh_frame:0000000000010B52                 db  0Eh
.eh_frame:0000000000010B53                 db    8
.eh_frame:0000000000010B54                 db  48h ; H
.eh_frame:0000000000010B55                 db    0
.eh_frame:0000000000010B56                 db    0
.eh_frame:0000000000010B57                 db    0
.eh_frame:0000000000010B58                 db 0F8h
.eh_frame:0000000000010B59                 db    4
.eh_frame:0000000000010B5A                 db    0
.eh_frame:0000000000010B5B                 db    0
.eh_frame:0000000000010B5C                 db  64h ; d
.eh_frame:0000000000010B5D                 db  4Ah ; J
.eh_frame:0000000000010B5E                 db 0FFh
.eh_frame:0000000000010B5F                 db 0FFh
.eh_frame:0000000000010B60                 db  6Dh ; m
.eh_frame:0000000000010B61                 db    0
.eh_frame:0000000000010B62                 db    0
.eh_frame:0000000000010B63                 db    0
.eh_frame:0000000000010B64                 db    0
.eh_frame:0000000000010B65                 db  42h ; B
.eh_frame:0000000000010B66                 db  0Eh
.eh_frame:0000000000010B67                 db  10h
.eh_frame:0000000000010B68                 db  8Fh
.eh_frame:0000000000010B69                 db    2
.eh_frame:0000000000010B6A                 db  42h ; B
.eh_frame:0000000000010B6B                 db  0Eh
.eh_frame:0000000000010B6C                 db  18h
.eh_frame:0000000000010B6D                 db  8Eh
.eh_frame:0000000000010B6E                 db    3
.eh_frame:0000000000010B6F                 db  45h ; E
.eh_frame:0000000000010B70                 db  0Eh
.eh_frame:0000000000010B71                 db  20h
.eh_frame:0000000000010B72                 db  8Dh
.eh_frame:0000000000010B73                 db    4
.eh_frame:0000000000010B74                 db  42h ; B
.eh_frame:0000000000010B75                 db  0Eh
.eh_frame:0000000000010B76                 db  28h ; (
.eh_frame:0000000000010B77                 db  8Ch
.eh_frame:0000000000010B78                 db    5
.eh_frame:0000000000010B79                 db  44h ; D
.eh_frame:0000000000010B7A                 db  0Eh
.eh_frame:0000000000010B7B                 db  30h ; 0
.eh_frame:0000000000010B7C                 db  86h
.eh_frame:0000000000010B7D                 db    6
.eh_frame:0000000000010B7E                 db  41h ; A
.eh_frame:0000000000010B7F                 db  0Eh
.eh_frame:0000000000010B80                 db  38h ; 8
.eh_frame:0000000000010B81                 db  83h
.eh_frame:0000000000010B82                 db    7
.eh_frame:0000000000010B83                 db  50h ; P
.eh_frame:0000000000010B84                 db  0Eh
.eh_frame:0000000000010B85                 db  40h ; @
.eh_frame:0000000000010B86                 db  5Ah ; Z
.eh_frame:0000000000010B87                 db  0Ah
.eh_frame:0000000000010B88                 db  0Eh
.eh_frame:0000000000010B89                 db  38h ; 8
.eh_frame:0000000000010B8A                 db  41h ; A
.eh_frame:0000000000010B8B                 db  0Eh
.eh_frame:0000000000010B8C                 db  30h ; 0
.eh_frame:0000000000010B8D                 db  41h ; A
.eh_frame:0000000000010B8E                 db  0Eh
.eh_frame:0000000000010B8F                 db  28h ; (
.eh_frame:0000000000010B90                 db  42h ; B
.eh_frame:0000000000010B91                 db  0Eh
.eh_frame:0000000000010B92                 db  20h
.eh_frame:0000000000010B93                 db  42h ; B
.eh_frame:0000000000010B94                 db  0Eh
.eh_frame:0000000000010B95                 db  18h
.eh_frame:0000000000010B96                 db  42h ; B
.eh_frame:0000000000010B97                 db  0Eh
.eh_frame:0000000000010B98                 db  10h
.eh_frame:0000000000010B99                 db  42h ; B
.eh_frame:0000000000010B9A                 db  0Eh
.eh_frame:0000000000010B9B                 db    8
.eh_frame:0000000000010B9C                 db  41h ; A
.eh_frame:0000000000010B9D                 db  0Bh
.eh_frame:0000000000010B9E                 db    0
.eh_frame:0000000000010B9F                 db    0
.eh_frame:0000000000010BA0                 db  3Ch ; <
.eh_frame:0000000000010BA1                 db    0
.eh_frame:0000000000010BA2                 db    0
.eh_frame:0000000000010BA3                 db    0
.eh_frame:0000000000010BA4                 db  44h ; D
.eh_frame:0000000000010BA5                 db    5
.eh_frame:0000000000010BA6                 db    0
.eh_frame:0000000000010BA7                 db    0
.eh_frame:0000000000010BA8                 db  88h
.eh_frame:0000000000010BA9                 db  4Ah ; J
.eh_frame:0000000000010BAA                 db 0FFh
.eh_frame:0000000000010BAB                 db 0FFh
.eh_frame:0000000000010BAC                 db  4Dh ; M
.eh_frame:0000000000010BAD                 db    0
.eh_frame:0000000000010BAE                 db    0
.eh_frame:0000000000010BAF                 db    0
.eh_frame:0000000000010BB0                 db    0
.eh_frame:0000000000010BB1                 db  42h ; B
.eh_frame:0000000000010BB2                 db  0Eh
.eh_frame:0000000000010BB3                 db  10h
.eh_frame:0000000000010BB4                 db  8Eh
.eh_frame:0000000000010BB5                 db    2
.eh_frame:0000000000010BB6                 db  42h ; B
.eh_frame:0000000000010BB7                 db  0Eh
.eh_frame:0000000000010BB8                 db  18h
.eh_frame:0000000000010BB9                 db  8Dh
.eh_frame:0000000000010BBA                 db    3
.eh_frame:0000000000010BBB                 db  42h ; B
.eh_frame:0000000000010BBC                 db  0Eh
.eh_frame:0000000000010BBD                 db  20h
.eh_frame:0000000000010BBE                 db  8Ch
.eh_frame:0000000000010BBF                 db    4
.eh_frame:0000000000010BC0                 db  41h ; A
.eh_frame:0000000000010BC1                 db  0Eh
.eh_frame:0000000000010BC2                 db  28h ; (
.eh_frame:0000000000010BC3                 db  86h
.eh_frame:0000000000010BC4                 db    5
.eh_frame:0000000000010BC5                 db  41h ; A
.eh_frame:0000000000010BC6                 db  0Eh
.eh_frame:0000000000010BC7                 db  30h ; 0
.eh_frame:0000000000010BC8                 db  83h
.eh_frame:0000000000010BC9                 db    6
.eh_frame:0000000000010BCA                 db  7Ah ; z
.eh_frame:0000000000010BCB                 db  0Eh
.eh_frame:0000000000010BCC                 db  28h ; (
.eh_frame:0000000000010BCD                 db  44h ; D
.eh_frame:0000000000010BCE                 db  0Eh
.eh_frame:0000000000010BCF                 db  20h
.eh_frame:0000000000010BD0                 db  42h ; B
.eh_frame:0000000000010BD1                 db  0Eh
.eh_frame:0000000000010BD2                 db  18h
.eh_frame:0000000000010BD3                 db  42h ; B
.eh_frame:0000000000010BD4                 db  0Eh
.eh_frame:0000000000010BD5                 db  10h
.eh_frame:0000000000010BD6                 db  42h ; B
.eh_frame:0000000000010BD7                 db  0Eh
.eh_frame:0000000000010BD8                 db    8
.eh_frame:0000000000010BD9                 db    0
.eh_frame:0000000000010BDA                 db    0
.eh_frame:0000000000010BDB                 db    0
.eh_frame:0000000000010BDC                 db    0
.eh_frame:0000000000010BDD                 db    0
.eh_frame:0000000000010BDE                 db    0
.eh_frame:0000000000010BDF                 db    0
.eh_frame:0000000000010BE0                 db  10h
.eh_frame:0000000000010BE1                 db    0
.eh_frame:0000000000010BE2                 db    0
.eh_frame:0000000000010BE3                 db    0
.eh_frame:0000000000010BE4                 db  84h
.eh_frame:0000000000010BE5                 db    5
.eh_frame:0000000000010BE6                 db    0
.eh_frame:0000000000010BE7                 db    0
.eh_frame:0000000000010BE8                 db  98h
.eh_frame:0000000000010BE9                 db  4Ah ; J
.eh_frame:0000000000010BEA                 db 0FFh
.eh_frame:0000000000010BEB                 db 0FFh
.eh_frame:0000000000010BEC                 db    8
.eh_frame:0000000000010BED                 db    0
.eh_frame:0000000000010BEE                 db    0
.eh_frame:0000000000010BEF                 db    0
.eh_frame:0000000000010BF0                 db    0
.eh_frame:0000000000010BF1                 db    0
.eh_frame:0000000000010BF2                 db    0
.eh_frame:0000000000010BF3                 db    0
.eh_frame:0000000000010BF4                 db  10h
.eh_frame:0000000000010BF5                 db    0
.eh_frame:0000000000010BF6                 db    0
.eh_frame:0000000000010BF7                 db    0
.eh_frame:0000000000010BF8                 db  98h
.eh_frame:0000000000010BF9                 db    5
.eh_frame:0000000000010BFA                 db    0
.eh_frame:0000000000010BFB                 db    0
.eh_frame:0000000000010BFC                 db  94h
.eh_frame:0000000000010BFD                 db  4Ah ; J
.eh_frame:0000000000010BFE                 db 0FFh
.eh_frame:0000000000010BFF                 db 0FFh
.eh_frame:0000000000010C00                 db    8
.eh_frame:0000000000010C01                 db    0
.eh_frame:0000000000010C02                 db    0
.eh_frame:0000000000010C03                 db    0
.eh_frame:0000000000010C04                 db    0
.eh_frame:0000000000010C05                 db    0
.eh_frame:0000000000010C06                 db    0
.eh_frame:0000000000010C07                 db    0
.eh_frame:0000000000010C08                 db  2Ch ; ,
.eh_frame:0000000000010C09                 db    0
.eh_frame:0000000000010C0A                 db    0
.eh_frame:0000000000010C0B                 db    0
.eh_frame:0000000000010C0C                 db 0ACh
.eh_frame:0000000000010C0D                 db    5
.eh_frame:0000000000010C0E                 db    0
.eh_frame:0000000000010C0F                 db    0
.eh_frame:0000000000010C10                 db  90h
.eh_frame:0000000000010C11                 db  4Ah ; J
.eh_frame:0000000000010C12                 db 0FFh
.eh_frame:0000000000010C13                 db 0FFh
.eh_frame:0000000000010C14                 db 0A4h
.eh_frame:0000000000010C15                 db    0
.eh_frame:0000000000010C16                 db    0
.eh_frame:0000000000010C17                 db    0
.eh_frame:0000000000010C18                 db    0
.eh_frame:0000000000010C19                 db  41h ; A
.eh_frame:0000000000010C1A                 db  0Eh
.eh_frame:0000000000010C1B                 db  10h
.eh_frame:0000000000010C1C                 db  86h
.eh_frame:0000000000010C1D                 db    2
.eh_frame:0000000000010C1E                 db  41h ; A
.eh_frame:0000000000010C1F                 db  0Eh
.eh_frame:0000000000010C20                 db  18h
.eh_frame:0000000000010C21                 db  83h
.eh_frame:0000000000010C22                 db    3
.eh_frame:0000000000010C23                 db  44h ; D
.eh_frame:0000000000010C24                 db  0Eh
.eh_frame:0000000000010C25                 db  20h
.eh_frame:0000000000010C26                 db  7Ah ; z
.eh_frame:0000000000010C27                 db  0Ah
.eh_frame:0000000000010C28                 db  0Eh
.eh_frame:0000000000010C29                 db  18h
.eh_frame:0000000000010C2A                 db  41h ; A
.eh_frame:0000000000010C2B                 db  0Eh
.eh_frame:0000000000010C2C                 db  10h
.eh_frame:0000000000010C2D                 db  41h ; A
.eh_frame:0000000000010C2E                 db  0Eh
.eh_frame:0000000000010C2F                 db    8
.eh_frame:0000000000010C30                 db  41h ; A
.eh_frame:0000000000010C31                 db  0Bh
.eh_frame:0000000000010C32                 db    0
.eh_frame:0000000000010C33                 db    0
.eh_frame:0000000000010C34                 db    0
.eh_frame:0000000000010C35                 db    0
.eh_frame:0000000000010C36                 db    0
.eh_frame:0000000000010C37                 db    0
.eh_frame:0000000000010C38                 db  1Ch
.eh_frame:0000000000010C39                 db    0
.eh_frame:0000000000010C3A                 db    0
.eh_frame:0000000000010C3B                 db    0
.eh_frame:0000000000010C3C                 db 0DCh
.eh_frame:0000000000010C3D                 db    5
.eh_frame:0000000000010C3E                 db    0
.eh_frame:0000000000010C3F                 db    0
.eh_frame:0000000000010C40                 db  10h
.eh_frame:0000000000010C41                 db  4Bh ; K
.eh_frame:0000000000010C42                 db 0FFh
.eh_frame:0000000000010C43                 db 0FFh
.eh_frame:0000000000010C44                 db  18h
.eh_frame:0000000000010C45                 db    0
.eh_frame:0000000000010C46                 db    0
.eh_frame:0000000000010C47                 db    0
.eh_frame:0000000000010C48                 db    0
.eh_frame:0000000000010C49                 db  44h ; D
.eh_frame:0000000000010C4A                 db  0Eh
.eh_frame:0000000000010C4B                 db  10h
.eh_frame:0000000000010C4C                 db  4Eh ; N
.eh_frame:0000000000010C4D                 db  0Ah
.eh_frame:0000000000010C4E                 db  0Eh
.eh_frame:0000000000010C4F                 db    8
.eh_frame:0000000000010C50                 db  41h ; A
.eh_frame:0000000000010C51                 db  0Bh
.eh_frame:0000000000010C52                 db    0
.eh_frame:0000000000010C53                 db    0
.eh_frame:0000000000010C54                 db    0
.eh_frame:0000000000010C55                 db    0
.eh_frame:0000000000010C56                 db    0
.eh_frame:0000000000010C57                 db    0
.eh_frame:0000000000010C58                 db  30h ; 0
.eh_frame:0000000000010C59                 db    0
.eh_frame:0000000000010C5A                 db    0
.eh_frame:0000000000010C5B                 db    0
.eh_frame:0000000000010C5C                 db 0FCh
.eh_frame:0000000000010C5D                 db    5
.eh_frame:0000000000010C5E                 db    0
.eh_frame:0000000000010C5F                 db    0
.eh_frame:0000000000010C60                 db  10h
.eh_frame:0000000000010C61                 db  4Bh ; K
.eh_frame:0000000000010C62                 db 0FFh
.eh_frame:0000000000010C63                 db 0FFh
.eh_frame:0000000000010C64                 db  5Dh ; ]
.eh_frame:0000000000010C65                 db    0
.eh_frame:0000000000010C66                 db    0
.eh_frame:0000000000010C67                 db    0
.eh_frame:0000000000010C68                 db    0
.eh_frame:0000000000010C69                 db  41h ; A
.eh_frame:0000000000010C6A                 db  0Eh
.eh_frame:0000000000010C6B                 db  10h
.eh_frame:0000000000010C6C                 db  86h
.eh_frame:0000000000010C6D                 db    2
.eh_frame:0000000000010C6E                 db  41h ; A
.eh_frame:0000000000010C6F                 db  0Eh
.eh_frame:0000000000010C70                 db  18h
.eh_frame:0000000000010C71                 db  83h
.eh_frame:0000000000010C72                 db    3
.eh_frame:0000000000010C73                 db  49h ; I
.eh_frame:0000000000010C74                 db  0Eh
.eh_frame:0000000000010C75                 db  20h
.eh_frame:0000000000010C76                 db  7Ch ; |
.eh_frame:0000000000010C77                 db  0Ah
.eh_frame:0000000000010C78                 db  0Eh
.eh_frame:0000000000010C79                 db  18h
.eh_frame:0000000000010C7A                 db  44h ; D
.eh_frame:0000000000010C7B                 db  0Eh
.eh_frame:0000000000010C7C                 db  10h
.eh_frame:0000000000010C7D                 db  41h ; A
.eh_frame:0000000000010C7E                 db  0Eh
.eh_frame:0000000000010C7F                 db    8
.eh_frame:0000000000010C80                 db  44h ; D
.eh_frame:0000000000010C81                 db  0Bh
.eh_frame:0000000000010C82                 db  44h ; D
.eh_frame:0000000000010C83                 db  0Eh
.eh_frame:0000000000010C84                 db  18h
.eh_frame:0000000000010C85                 db  47h ; G
.eh_frame:0000000000010C86                 db  0Eh
.eh_frame:0000000000010C87                 db  10h
.eh_frame:0000000000010C88                 db  41h ; A
.eh_frame:0000000000010C89                 db  0Eh
.eh_frame:0000000000010C8A                 db    8
.eh_frame:0000000000010C8B                 db    0
.eh_frame:0000000000010C8C                 db  28h ; (
.eh_frame:0000000000010C8D                 db    0
.eh_frame:0000000000010C8E                 db    0
.eh_frame:0000000000010C8F                 db    0
.eh_frame:0000000000010C90                 db  30h ; 0
.eh_frame:0000000000010C91                 db    6
.eh_frame:0000000000010C92                 db    0
.eh_frame:0000000000010C93                 db    0
.eh_frame:0000000000010C94                 db  3Ch ; <
.eh_frame:0000000000010C95                 db  4Bh ; K
.eh_frame:0000000000010C96                 db 0FFh
.eh_frame:0000000000010C97                 db 0FFh
.eh_frame:0000000000010C98                 db  5Ah ; Z
.eh_frame:0000000000010C99                 db    0
.eh_frame:0000000000010C9A                 db    0
.eh_frame:0000000000010C9B                 db    0
.eh_frame:0000000000010C9C                 db    0
.eh_frame:0000000000010C9D                 db  41h ; A
.eh_frame:0000000000010C9E                 db  0Eh
.eh_frame:0000000000010C9F                 db  10h
.eh_frame:0000000000010CA0                 db  86h
.eh_frame:0000000000010CA1                 db    2
.eh_frame:0000000000010CA2                 db  41h ; A
.eh_frame:0000000000010CA3                 db  0Eh
.eh_frame:0000000000010CA4                 db  18h
.eh_frame:0000000000010CA5                 db  83h
.eh_frame:0000000000010CA6                 db    3
.eh_frame:0000000000010CA7                 db  47h ; G
.eh_frame:0000000000010CA8                 db  0Eh
.eh_frame:0000000000010CA9                 db  20h
.eh_frame:0000000000010CAA                 db    2
.eh_frame:0000000000010CAB                 db  41h ; A
.eh_frame:0000000000010CAC                 db  0Ah
.eh_frame:0000000000010CAD                 db  0Eh
.eh_frame:0000000000010CAE                 db  18h
.eh_frame:0000000000010CAF                 db  44h ; D
.eh_frame:0000000000010CB0                 db  0Eh
.eh_frame:0000000000010CB1                 db  10h
.eh_frame:0000000000010CB2                 db  41h ; A
.eh_frame:0000000000010CB3                 db  0Eh
.eh_frame:0000000000010CB4                 db    8
.eh_frame:0000000000010CB5                 db  41h ; A
.eh_frame:0000000000010CB6                 db  0Bh
.eh_frame:0000000000010CB7                 db    0
.eh_frame:0000000000010CB8                 db  10h
.eh_frame:0000000000010CB9                 db    0
.eh_frame:0000000000010CBA                 db    0
.eh_frame:0000000000010CBB                 db    0
.eh_frame:0000000000010CBC                 db  5Ch ; \
.eh_frame:0000000000010CBD                 db    6
.eh_frame:0000000000010CBE                 db    0
.eh_frame:0000000000010CBF                 db    0
.eh_frame:0000000000010CC0                 db  70h ; p
.eh_frame:0000000000010CC1                 db  4Bh ; K
.eh_frame:0000000000010CC2                 db 0FFh
.eh_frame:0000000000010CC3                 db 0FFh
.eh_frame:0000000000010CC4                 db  5Ch ; \
.eh_frame:0000000000010CC5                 db    0
.eh_frame:0000000000010CC6                 db    0
.eh_frame:0000000000010CC7                 db    0
.eh_frame:0000000000010CC8                 db    0
.eh_frame:0000000000010CC9                 db    0
.eh_frame:0000000000010CCA                 db    0
.eh_frame:0000000000010CCB                 db    0
.eh_frame:0000000000010CCC                 db  28h ; (
.eh_frame:0000000000010CCD                 db    0
.eh_frame:0000000000010CCE                 db    0
.eh_frame:0000000000010CCF                 db    0
.eh_frame:0000000000010CD0                 db  70h ; p
.eh_frame:0000000000010CD1                 db    6
.eh_frame:0000000000010CD2                 db    0
.eh_frame:0000000000010CD3                 db    0
.eh_frame:0000000000010CD4                 db 0BCh
.eh_frame:0000000000010CD5                 db  4Bh ; K
.eh_frame:0000000000010CD6                 db 0FFh
.eh_frame:0000000000010CD7                 db 0FFh
.eh_frame:0000000000010CD8                 db  47h ; G
.eh_frame:0000000000010CD9                 db    0
.eh_frame:0000000000010CDA                 db    0
.eh_frame:0000000000010CDB                 db    0
.eh_frame:0000000000010CDC                 db    0
.eh_frame:0000000000010CDD                 db  41h ; A
.eh_frame:0000000000010CDE                 db  0Eh
.eh_frame:0000000000010CDF                 db  10h
.eh_frame:0000000000010CE0                 db  83h
.eh_frame:0000000000010CE1                 db    2
.eh_frame:0000000000010CE2                 db  5Ah ; Z
.eh_frame:0000000000010CE3                 db  0Ah
.eh_frame:0000000000010CE4                 db  0Eh
.eh_frame:0000000000010CE5                 db    8
.eh_frame:0000000000010CE6                 db  45h ; E
.eh_frame:0000000000010CE7                 db  0Bh
.eh_frame:0000000000010CE8                 db  5Dh ; ]
.eh_frame:0000000000010CE9                 db  0Ah
.eh_frame:0000000000010CEA                 db  0Eh
.eh_frame:0000000000010CEB                 db    8
.eh_frame:0000000000010CEC                 db  43h ; C
.eh_frame:0000000000010CED                 db  0Bh
.eh_frame:0000000000010CEE                 db  46h ; F
.eh_frame:0000000000010CEF                 db  0Eh
.eh_frame:0000000000010CF0                 db    8
.eh_frame:0000000000010CF1                 db    0
.eh_frame:0000000000010CF2                 db    0
.eh_frame:0000000000010CF3                 db    0
.eh_frame:0000000000010CF4                 db    0
.eh_frame:0000000000010CF5                 db    0
.eh_frame:0000000000010CF6                 db    0
.eh_frame:0000000000010CF7                 db    0
.eh_frame:0000000000010CF8                 db  14h
.eh_frame:0000000000010CF9                 db    0
.eh_frame:0000000000010CFA                 db    0
.eh_frame:0000000000010CFB                 db    0
.eh_frame:0000000000010CFC                 db  9Ch
.eh_frame:0000000000010CFD                 db    6
.eh_frame:0000000000010CFE                 db    0
.eh_frame:0000000000010CFF                 db    0
.eh_frame:0000000000010D00                 db 0E0h
.eh_frame:0000000000010D01                 db  4Bh ; K
.eh_frame:0000000000010D02                 db 0FFh
.eh_frame:0000000000010D03                 db 0FFh
.eh_frame:0000000000010D04                 db 0EEh
.eh_frame:0000000000010D05                 db    0
.eh_frame:0000000000010D06                 db    0
.eh_frame:0000000000010D07                 db    0
.eh_frame:0000000000010D08                 db    0
.eh_frame:0000000000010D09                 db    0
.eh_frame:0000000000010D0A                 db    0
.eh_frame:0000000000010D0B                 db    0
.eh_frame:0000000000010D0C                 db    0
.eh_frame:0000000000010D0D                 db    0
.eh_frame:0000000000010D0E                 db    0
.eh_frame:0000000000010D0F                 db    0
.eh_frame:0000000000010D10                 db  10h
.eh_frame:0000000000010D11                 db    0
.eh_frame:0000000000010D12                 db    0
.eh_frame:0000000000010D13                 db    0
.eh_frame:0000000000010D14                 db 0B4h
.eh_frame:0000000000010D15                 db    6
.eh_frame:0000000000010D16                 db    0
.eh_frame:0000000000010D17                 db    0
.eh_frame:0000000000010D18                 db 0B8h
.eh_frame:0000000000010D19                 db  4Ch ; L
.eh_frame:0000000000010D1A                 db 0FFh
.eh_frame:0000000000010D1B                 db 0FFh
.eh_frame:0000000000010D1C                 db  83h
.eh_frame:0000000000010D1D                 db    1
.eh_frame:0000000000010D1E                 db    0
.eh_frame:0000000000010D1F                 db    0
.eh_frame:0000000000010D20                 db    0
.eh_frame:0000000000010D21                 db    0
.eh_frame:0000000000010D22                 db    0
.eh_frame:0000000000010D23                 db    0
.eh_frame:0000000000010D24                 db  10h
.eh_frame:0000000000010D25                 db    0
.eh_frame:0000000000010D26                 db    0
.eh_frame:0000000000010D27                 db    0
.eh_frame:0000000000010D28                 db 0C8h
.eh_frame:0000000000010D29                 db    6
.eh_frame:0000000000010D2A                 db    0
.eh_frame:0000000000010D2B                 db    0
.eh_frame:0000000000010D2C                 db  34h ; 4
.eh_frame:0000000000010D2D                 db  4Eh ; N
.eh_frame:0000000000010D2E                 db 0FFh
.eh_frame:0000000000010D2F                 db 0FFh
.eh_frame:0000000000010D30                 db    8
.eh_frame:0000000000010D31                 db    0
.eh_frame:0000000000010D32                 db    0
.eh_frame:0000000000010D33                 db    0
.eh_frame:0000000000010D34                 db    0
.eh_frame:0000000000010D35                 db    0
.eh_frame:0000000000010D36                 db    0
.eh_frame:0000000000010D37                 db    0
.eh_frame:0000000000010D38                 db  14h
.eh_frame:0000000000010D39                 db    0
.eh_frame:0000000000010D3A                 db    0
.eh_frame:0000000000010D3B                 db    0
.eh_frame:0000000000010D3C                 db 0DCh
.eh_frame:0000000000010D3D                 db    6
.eh_frame:0000000000010D3E                 db    0
.eh_frame:0000000000010D3F                 db    0
.eh_frame:0000000000010D40                 db  30h ; 0
.eh_frame:0000000000010D41                 db  4Eh ; N
.eh_frame:0000000000010D42                 db 0FFh
.eh_frame:0000000000010D43                 db 0FFh
.eh_frame:0000000000010D44                 db  9Ch
.eh_frame:0000000000010D45                 db    0
.eh_frame:0000000000010D46                 db    0
.eh_frame:0000000000010D47                 db    0
.eh_frame:0000000000010D48                 db    0
.eh_frame:0000000000010D49                 db    0
.eh_frame:0000000000010D4A                 db    0
.eh_frame:0000000000010D4B                 db    0
.eh_frame:0000000000010D4C                 db    0
.eh_frame:0000000000010D4D                 db    0
.eh_frame:0000000000010D4E                 db    0
.eh_frame:0000000000010D4F                 db    0
.eh_frame:0000000000010D50                 db  28h ; (
.eh_frame:0000000000010D51                 db    0
.eh_frame:0000000000010D52                 db    0
.eh_frame:0000000000010D53                 db    0
.eh_frame:0000000000010D54                 db 0F4h
.eh_frame:0000000000010D55                 db    6
.eh_frame:0000000000010D56                 db    0
.eh_frame:0000000000010D57                 db    0
.eh_frame:0000000000010D58                 db 0B8h
.eh_frame:0000000000010D59                 db  4Eh ; N
.eh_frame:0000000000010D5A                 db 0FFh
.eh_frame:0000000000010D5B                 db 0FFh
.eh_frame:0000000000010D5C                 db  41h ; A
.eh_frame:0000000000010D5D                 db    0
.eh_frame:0000000000010D5E                 db    0
.eh_frame:0000000000010D5F                 db    0
.eh_frame:0000000000010D60                 db    0
.eh_frame:0000000000010D61                 db  45h ; E
.eh_frame:0000000000010D62                 db  0Eh
.eh_frame:0000000000010D63                 db  10h
.eh_frame:0000000000010D64                 db  8Ch
.eh_frame:0000000000010D65                 db    2
.eh_frame:0000000000010D66                 db  41h ; A
.eh_frame:0000000000010D67                 db  0Eh
.eh_frame:0000000000010D68                 db  18h
.eh_frame:0000000000010D69                 db  86h
.eh_frame:0000000000010D6A                 db    3
.eh_frame:0000000000010D6B                 db  44h ; D
.eh_frame:0000000000010D6C                 db  0Eh
.eh_frame:0000000000010D6D                 db  20h
.eh_frame:0000000000010D6E                 db  83h
.eh_frame:0000000000010D6F                 db    4
.eh_frame:0000000000010D70                 db  73h ; s
.eh_frame:0000000000010D71                 db  0Eh
.eh_frame:0000000000010D72                 db  18h
.eh_frame:0000000000010D73                 db  41h ; A
.eh_frame:0000000000010D74                 db  0Eh
.eh_frame:0000000000010D75                 db  10h
.eh_frame:0000000000010D76                 db  42h ; B
.eh_frame:0000000000010D77                 db  0Eh
.eh_frame:0000000000010D78                 db    8
.eh_frame:0000000000010D79                 db    0
.eh_frame:0000000000010D7A                 db    0
.eh_frame:0000000000010D7B                 db    0
.eh_frame:0000000000010D7C                 db  28h ; (
.eh_frame:0000000000010D7D                 db    0
.eh_frame:0000000000010D7E                 db    0
.eh_frame:0000000000010D7F                 db    0
.eh_frame:0000000000010D80                 db  20h
.eh_frame:0000000000010D81                 db    7
.eh_frame:0000000000010D82                 db    0
.eh_frame:0000000000010D83                 db    0
.eh_frame:0000000000010D84                 db 0DCh
.eh_frame:0000000000010D85                 db  4Eh ; N
.eh_frame:0000000000010D86                 db 0FFh
.eh_frame:0000000000010D87                 db 0FFh
.eh_frame:0000000000010D88                 db  41h ; A
.eh_frame:0000000000010D89                 db    0
.eh_frame:0000000000010D8A                 db    0
.eh_frame:0000000000010D8B                 db    0
.eh_frame:0000000000010D8C                 db    0
.eh_frame:0000000000010D8D                 db  45h ; E
.eh_frame:0000000000010D8E                 db  0Eh
.eh_frame:0000000000010D8F                 db  10h
.eh_frame:0000000000010D90                 db  8Ch
.eh_frame:0000000000010D91                 db    2
.eh_frame:0000000000010D92                 db  41h ; A
.eh_frame:0000000000010D93                 db  0Eh
.eh_frame:0000000000010D94                 db  18h
.eh_frame:0000000000010D95                 db  86h
.eh_frame:0000000000010D96                 db    3
.eh_frame:0000000000010D97                 db  44h ; D
.eh_frame:0000000000010D98                 db  0Eh
.eh_frame:0000000000010D99                 db  20h
.eh_frame:0000000000010D9A                 db  83h
.eh_frame:0000000000010D9B                 db    4
.eh_frame:0000000000010D9C                 db  73h ; s
.eh_frame:0000000000010D9D                 db  0Eh
.eh_frame:0000000000010D9E                 db  18h
.eh_frame:0000000000010D9F                 db  41h ; A
.eh_frame:0000000000010DA0                 db  0Eh
.eh_frame:0000000000010DA1                 db  10h
.eh_frame:0000000000010DA2                 db  42h ; B
.eh_frame:0000000000010DA3                 db  0Eh
.eh_frame:0000000000010DA4                 db    8
.eh_frame:0000000000010DA5                 db    0
.eh_frame:0000000000010DA6                 db    0
.eh_frame:0000000000010DA7                 db    0
.eh_frame:0000000000010DA8                 db  74h ; t
.eh_frame:0000000000010DA9                 db    0
.eh_frame:0000000000010DAA                 db    0
.eh_frame:0000000000010DAB                 db    0
.eh_frame:0000000000010DAC                 db  4Ch ; L
.eh_frame:0000000000010DAD                 db    7
.eh_frame:0000000000010DAE                 db    0
.eh_frame:0000000000010DAF                 db    0
.eh_frame:0000000000010DB0                 db    0
.eh_frame:0000000000010DB1                 db  4Fh ; O
.eh_frame:0000000000010DB2                 db 0FFh
.eh_frame:0000000000010DB3                 db 0FFh
.eh_frame:0000000000010DB4                 db 0B2h
.eh_frame:0000000000010DB5                 db  1Ah
.eh_frame:0000000000010DB6                 db    0
.eh_frame:0000000000010DB7                 db    0
.eh_frame:0000000000010DB8                 db    0
.eh_frame:0000000000010DB9                 db  42h ; B
.eh_frame:0000000000010DBA                 db  0Eh
.eh_frame:0000000000010DBB                 db  10h
.eh_frame:0000000000010DBC                 db  8Fh
.eh_frame:0000000000010DBD                 db    2
.eh_frame:0000000000010DBE                 db  42h ; B
.eh_frame:0000000000010DBF                 db  0Eh
.eh_frame:0000000000010DC0                 db  18h
.eh_frame:0000000000010DC1                 db  8Eh
.eh_frame:0000000000010DC2                 db    3
.eh_frame:0000000000010DC3                 db  45h ; E
.eh_frame:0000000000010DC4                 db  0Eh
.eh_frame:0000000000010DC5                 db  20h
.eh_frame:0000000000010DC6                 db  8Dh
.eh_frame:0000000000010DC7                 db    4
.eh_frame:0000000000010DC8                 db  42h ; B
.eh_frame:0000000000010DC9                 db  0Eh
.eh_frame:0000000000010DCA                 db  28h ; (
.eh_frame:0000000000010DCB                 db  8Ch
.eh_frame:0000000000010DCC                 db    5
.eh_frame:0000000000010DCD                 db  44h ; D
.eh_frame:0000000000010DCE                 db  0Eh
.eh_frame:0000000000010DCF                 db  30h ; 0
.eh_frame:0000000000010DD0                 db  86h
.eh_frame:0000000000010DD1                 db    6
.eh_frame:0000000000010DD2                 db  41h ; A
.eh_frame:0000000000010DD3                 db  0Eh
.eh_frame:0000000000010DD4                 db  38h ; 8
.eh_frame:0000000000010DD5                 db  83h
.eh_frame:0000000000010DD6                 db    7
.eh_frame:0000000000010DD7                 db  4Ah ; J
.eh_frame:0000000000010DD8                 db  0Eh
.eh_frame:0000000000010DD9                 db  80h
.eh_frame:0000000000010DDA                 db  0Ah
.eh_frame:0000000000010DDB                 db    2
.eh_frame:0000000000010DDC                 db 0D6h
.eh_frame:0000000000010DDD                 db  0Ah
.eh_frame:0000000000010DDE                 db  0Eh
.eh_frame:0000000000010DDF                 db  38h ; 8
.eh_frame:0000000000010DE0                 db  41h ; A
.eh_frame:0000000000010DE1                 db  0Eh
.eh_frame:0000000000010DE2                 db  30h ; 0
.eh_frame:0000000000010DE3                 db  41h ; A
.eh_frame:0000000000010DE4                 db  0Eh
.eh_frame:0000000000010DE5                 db  28h ; (
.eh_frame:0000000000010DE6                 db  42h ; B
.eh_frame:0000000000010DE7                 db  0Eh
.eh_frame:0000000000010DE8                 db  20h
.eh_frame:0000000000010DE9                 db  42h ; B
.eh_frame:0000000000010DEA                 db  0Eh
.eh_frame:0000000000010DEB                 db  18h
.eh_frame:0000000000010DEC                 db  42h ; B
.eh_frame:0000000000010DED                 db  0Eh
.eh_frame:0000000000010DEE                 db  10h
.eh_frame:0000000000010DEF                 db  42h ; B
.eh_frame:0000000000010DF0                 db  0Eh
.eh_frame:0000000000010DF1                 db    8
.eh_frame:0000000000010DF2                 db  46h ; F
.eh_frame:0000000000010DF3                 db  0Bh
.eh_frame:0000000000010DF4                 db    3
.eh_frame:0000000000010DF5                 db  99h
.eh_frame:0000000000010DF6                 db    5
.eh_frame:0000000000010DF7                 db  0Eh
.eh_frame:0000000000010DF8                 db  88h
.eh_frame:0000000000010DF9                 db  0Ah
.eh_frame:0000000000010DFA                 db  44h ; D
.eh_frame:0000000000010DFB                 db  0Eh
.eh_frame:0000000000010DFC                 db  90h
.eh_frame:0000000000010DFD                 db  0Ah
.eh_frame:0000000000010DFE                 db  44h ; D
.eh_frame:0000000000010DFF                 db  0Eh
.eh_frame:0000000000010E00                 db  98h
.eh_frame:0000000000010E01                 db  0Ah
.eh_frame:0000000000010E02                 db  45h ; E
.eh_frame:0000000000010E03                 db  0Eh
.eh_frame:0000000000010E04                 db 0A0h
.eh_frame:0000000000010E05                 db  0Ah
.eh_frame:0000000000010E06                 db  4Eh ; N
.eh_frame:0000000000010E07                 db  0Eh
.eh_frame:0000000000010E08                 db  80h
.eh_frame:0000000000010E09                 db  0Ah
.eh_frame:0000000000010E0A                 db    2
.eh_frame:0000000000010E0B                 db  98h
.eh_frame:0000000000010E0C                 db  0Eh
.eh_frame:0000000000010E0D                 db  88h
.eh_frame:0000000000010E0E                 db  0Ah
.eh_frame:0000000000010E0F                 db  44h ; D
.eh_frame:0000000000010E10                 db  0Eh
.eh_frame:0000000000010E11                 db  90h
.eh_frame:0000000000010E12                 db  0Ah
.eh_frame:0000000000010E13                 db  44h ; D
.eh_frame:0000000000010E14                 db  0Eh
.eh_frame:0000000000010E15                 db  98h
.eh_frame:0000000000010E16                 db  0Ah
.eh_frame:0000000000010E17                 db  45h ; E
.eh_frame:0000000000010E18                 db  0Eh
.eh_frame:0000000000010E19                 db 0A0h
.eh_frame:0000000000010E1A                 db  0Ah
.eh_frame:0000000000010E1B                 db  5Dh ; ]
.eh_frame:0000000000010E1C                 db  0Eh
.eh_frame:0000000000010E1D                 db  80h
.eh_frame:0000000000010E1E                 db  0Ah
.eh_frame:0000000000010E1F                 db    0
.eh_frame:0000000000010E20                 db  2Ch ; ,
.eh_frame:0000000000010E21                 db    0
.eh_frame:0000000000010E22                 db    0
.eh_frame:0000000000010E23                 db    0
.eh_frame:0000000000010E24                 db 0C4h
.eh_frame:0000000000010E25                 db    7
.eh_frame:0000000000010E26                 db    0
.eh_frame:0000000000010E27                 db    0
.eh_frame:0000000000010E28                 db  48h ; H
.eh_frame:0000000000010E29                 db  69h ; i
.eh_frame:0000000000010E2A                 db 0FFh
.eh_frame:0000000000010E2B                 db 0FFh
.eh_frame:0000000000010E2C                 db  4Eh ; N
.eh_frame:0000000000010E2D                 db    0
.eh_frame:0000000000010E2E                 db    0
.eh_frame:0000000000010E2F                 db    0
.eh_frame:0000000000010E30                 db    0
.eh_frame:0000000000010E31                 db  44h ; D
.eh_frame:0000000000010E32                 db  0Eh
.eh_frame:0000000000010E33                 db  20h
.eh_frame:0000000000010E34                 db  57h ; W
.eh_frame:0000000000010E35                 db  0Eh
.eh_frame:0000000000010E36                 db  28h ; (
.eh_frame:0000000000010E37                 db  45h ; E
.eh_frame:0000000000010E38                 db  0Eh
.eh_frame:0000000000010E39                 db  30h ; 0
.eh_frame:0000000000010E3A                 db  49h ; I
.eh_frame:0000000000010E3B                 db  0Eh
.eh_frame:0000000000010E3C                 db  38h ; 8
.eh_frame:0000000000010E3D                 db  42h ; B
.eh_frame:0000000000010E3E                 db  0Eh
.eh_frame:0000000000010E3F                 db  40h ; @
.eh_frame:0000000000010E40                 db  49h ; I
.eh_frame:0000000000010E41                 db  0Eh
.eh_frame:0000000000010E42                 db  20h
.eh_frame:0000000000010E43                 db  54h ; T
.eh_frame:0000000000010E44                 db  0Ah
.eh_frame:0000000000010E45                 db  0Eh
.eh_frame:0000000000010E46                 db    8
.eh_frame:0000000000010E47                 db  41h ; A
.eh_frame:0000000000010E48                 db  0Bh
.eh_frame:0000000000010E49                 db    0
.eh_frame:0000000000010E4A                 db    0
.eh_frame:0000000000010E4B                 db    0
.eh_frame:0000000000010E4C                 db    0
.eh_frame:0000000000010E4D                 db    0
.eh_frame:0000000000010E4E                 db    0
.eh_frame:0000000000010E4F                 db    0
.eh_frame:0000000000010E50                 db  1Ch
.eh_frame:0000000000010E51                 db    0
.eh_frame:0000000000010E52                 db    0
.eh_frame:0000000000010E53                 db    0
.eh_frame:0000000000010E54                 db 0F4h
.eh_frame:0000000000010E55                 db    7
.eh_frame:0000000000010E56                 db    0
.eh_frame:0000000000010E57                 db    0
.eh_frame:0000000000010E58                 db  68h ; h
.eh_frame:0000000000010E59                 db  69h ; i
.eh_frame:0000000000010E5A                 db 0FFh
.eh_frame:0000000000010E5B                 db 0FFh
.eh_frame:0000000000010E5C                 db  9Fh
.eh_frame:0000000000010E5D                 db    0
.eh_frame:0000000000010E5E                 db    0
.eh_frame:0000000000010E5F                 db    0
.eh_frame:0000000000010E60                 db    0
.eh_frame:0000000000010E61                 db  44h ; D
.eh_frame:0000000000010E62                 db  0Eh
.eh_frame:0000000000010E63                 db  10h
.eh_frame:0000000000010E64                 db  83h
.eh_frame:0000000000010E65                 db    2
.eh_frame:0000000000010E66                 db    2
.eh_frame:0000000000010E67                 db  78h ; x
.eh_frame:0000000000010E68                 db  0Ah
.eh_frame:0000000000010E69                 db  0Eh
.eh_frame:0000000000010E6A                 db    8
.eh_frame:0000000000010E6B                 db  41h ; A
.eh_frame:0000000000010E6C                 db  0Bh
.eh_frame:0000000000010E6D                 db    0
.eh_frame:0000000000010E6E                 db    0
.eh_frame:0000000000010E6F                 db    0
.eh_frame:0000000000010E70                 db  40h ; @
.eh_frame:0000000000010E71                 db    0
.eh_frame:0000000000010E72                 db    0
.eh_frame:0000000000010E73                 db    0
.eh_frame:0000000000010E74                 db  14h
.eh_frame:0000000000010E75                 db    8
.eh_frame:0000000000010E76                 db    0
.eh_frame:0000000000010E77                 db    0
.eh_frame:0000000000010E78                 db 0E8h
.eh_frame:0000000000010E79                 db  69h ; i
.eh_frame:0000000000010E7A                 db 0FFh
.eh_frame:0000000000010E7B                 db 0FFh
.eh_frame:0000000000010E7C                 db 0E7h
.eh_frame:0000000000010E7D                 db    0
.eh_frame:0000000000010E7E                 db    0
.eh_frame:0000000000010E7F                 db    0
.eh_frame:0000000000010E80                 db    0
.eh_frame:0000000000010E81                 db  41h ; A
.eh_frame:0000000000010E82                 db  0Eh
.eh_frame:0000000000010E83                 db  10h
.eh_frame:0000000000010E84                 db  86h
.eh_frame:0000000000010E85                 db    2
.eh_frame:0000000000010E86                 db  41h ; A
.eh_frame:0000000000010E87                 db  0Eh
.eh_frame:0000000000010E88                 db  18h
.eh_frame:0000000000010E89                 db  83h
.eh_frame:0000000000010E8A                 db    3
.eh_frame:0000000000010E8B                 db  49h ; I
.eh_frame:0000000000010E8C                 db  0Eh
.eh_frame:0000000000010E8D                 db  20h
.eh_frame:0000000000010E8E                 db  6Eh ; n
.eh_frame:0000000000010E8F                 db  0Ah
.eh_frame:0000000000010E90                 db  0Eh
.eh_frame:0000000000010E91                 db  18h
.eh_frame:0000000000010E92                 db  41h ; A
.eh_frame:0000000000010E93                 db  0Eh
.eh_frame:0000000000010E94                 db  10h
.eh_frame:0000000000010E95                 db  41h ; A
.eh_frame:0000000000010E96                 db  0Eh
.eh_frame:0000000000010E97                 db    8
.eh_frame:0000000000010E98                 db  45h ; E
.eh_frame:0000000000010E99                 db  0Bh
.eh_frame:0000000000010E9A                 db    2
.eh_frame:0000000000010E9B                 db  4Ah ; J
.eh_frame:0000000000010E9C                 db  0Ah
.eh_frame:0000000000010E9D                 db  0Eh
.eh_frame:0000000000010E9E                 db  18h
.eh_frame:0000000000010E9F                 db  41h ; A
.eh_frame:0000000000010EA0                 db  0Eh
.eh_frame:0000000000010EA1                 db  10h
.eh_frame:0000000000010EA2                 db  41h ; A
.eh_frame:0000000000010EA3                 db  0Eh
.eh_frame:0000000000010EA4                 db    8
.eh_frame:0000000000010EA5                 db  44h ; D
.eh_frame:0000000000010EA6                 db  0Bh
.eh_frame:0000000000010EA7                 db    2
.eh_frame:0000000000010EA8                 db  54h ; T
.eh_frame:0000000000010EA9                 db  0Eh
.eh_frame:0000000000010EAA                 db  18h
.eh_frame:0000000000010EAB                 db  41h ; A
.eh_frame:0000000000010EAC                 db  0Eh
.eh_frame:0000000000010EAD                 db  10h
.eh_frame:0000000000010EAE                 db  41h ; A
.eh_frame:0000000000010EAF                 db  0Eh
.eh_frame:0000000000010EB0                 db    8
.eh_frame:0000000000010EB1                 db    0
.eh_frame:0000000000010EB2                 db    0
.eh_frame:0000000000010EB3                 db    0
.eh_frame:0000000000010EB4                 db  74h ; t
.eh_frame:0000000000010EB5                 db    0
.eh_frame:0000000000010EB6                 db    0
.eh_frame:0000000000010EB7                 db    0
.eh_frame:0000000000010EB8                 db  58h ; X
.eh_frame:0000000000010EB9                 db    8
.eh_frame:0000000000010EBA                 db    0
.eh_frame:0000000000010EBB                 db    0
.eh_frame:0000000000010EBC                 db  94h
.eh_frame:0000000000010EBD                 db  6Ah ; j
.eh_frame:0000000000010EBE                 db 0FFh
.eh_frame:0000000000010EBF                 db 0FFh
.eh_frame:0000000000010EC0                 db  34h ; 4
.eh_frame:0000000000010EC1                 db  12h
.eh_frame:0000000000010EC2                 db    0
.eh_frame:0000000000010EC3                 db    0
.eh_frame:0000000000010EC4                 db    0
.eh_frame:0000000000010EC5                 db  42h ; B
.eh_frame:0000000000010EC6                 db  0Eh
.eh_frame:0000000000010EC7                 db  10h
.eh_frame:0000000000010EC8                 db  8Fh
.eh_frame:0000000000010EC9                 db    2
.eh_frame:0000000000010ECA                 db  42h ; B
.eh_frame:0000000000010ECB                 db  0Eh
.eh_frame:0000000000010ECC                 db  18h
.eh_frame:0000000000010ECD                 db  8Eh
.eh_frame:0000000000010ECE                 db    3
.eh_frame:0000000000010ECF                 db  45h ; E
.eh_frame:0000000000010ED0                 db  0Eh
.eh_frame:0000000000010ED1                 db  20h
.eh_frame:0000000000010ED2                 db  8Dh
.eh_frame:0000000000010ED3                 db    4
.eh_frame:0000000000010ED4                 db  42h ; B
.eh_frame:0000000000010ED5                 db  0Eh
.eh_frame:0000000000010ED6                 db  28h ; (
.eh_frame:0000000000010ED7                 db  8Ch
.eh_frame:0000000000010ED8                 db    5
.eh_frame:0000000000010ED9                 db  44h ; D
.eh_frame:0000000000010EDA                 db  0Eh
.eh_frame:0000000000010EDB                 db  30h ; 0
.eh_frame:0000000000010EDC                 db  86h
.eh_frame:0000000000010EDD                 db    6
.eh_frame:0000000000010EDE                 db  41h ; A
.eh_frame:0000000000010EDF                 db  0Eh
.eh_frame:0000000000010EE0                 db  38h ; 8
.eh_frame:0000000000010EE1                 db  83h
.eh_frame:0000000000010EE2                 db    7
.eh_frame:0000000000010EE3                 db  53h ; S
.eh_frame:0000000000010EE4                 db  0Eh
.eh_frame:0000000000010EE5                 db 0F0h
.eh_frame:0000000000010EE6                 db    1
.eh_frame:0000000000010EE7                 db    3
.eh_frame:0000000000010EE8                 db  81h
.eh_frame:0000000000010EE9                 db  0Bh
.eh_frame:0000000000010EEA                 db  0Eh
.eh_frame:0000000000010EEB                 db 0F8h
.eh_frame:0000000000010EEC                 db    1
.eh_frame:0000000000010EED                 db  4Ah ; J
.eh_frame:0000000000010EEE                 db  0Eh
.eh_frame:0000000000010EEF                 db  80h
.eh_frame:0000000000010EF0                 db    2
.eh_frame:0000000000010EF1                 db  44h ; D
.eh_frame:0000000000010EF2                 db  0Eh
.eh_frame:0000000000010EF3                 db  88h
.eh_frame:0000000000010EF4                 db    2
.eh_frame:0000000000010EF5                 db  45h ; E
.eh_frame:0000000000010EF6                 db  0Eh
.eh_frame:0000000000010EF7                 db  90h
.eh_frame:0000000000010EF8                 db    2
.eh_frame:0000000000010EF9                 db  5Fh ; _
.eh_frame:0000000000010EFA                 db  0Eh
.eh_frame:0000000000010EFB                 db 0F0h
.eh_frame:0000000000010EFC                 db    1
.eh_frame:0000000000010EFD                 db  64h ; d
.eh_frame:0000000000010EFE                 db  0Ah
.eh_frame:0000000000010EFF                 db  0Eh
.eh_frame:0000000000010F00                 db  38h ; 8
.eh_frame:0000000000010F01                 db  41h ; A
.eh_frame:0000000000010F02                 db  0Eh
.eh_frame:0000000000010F03                 db  30h ; 0
.eh_frame:0000000000010F04                 db  41h ; A
.eh_frame:0000000000010F05                 db  0Eh
.eh_frame:0000000000010F06                 db  28h ; (
.eh_frame:0000000000010F07                 db  42h ; B
.eh_frame:0000000000010F08                 db  0Eh
.eh_frame:0000000000010F09                 db  20h
.eh_frame:0000000000010F0A                 db  42h ; B
.eh_frame:0000000000010F0B                 db  0Eh
.eh_frame:0000000000010F0C                 db  18h
.eh_frame:0000000000010F0D                 db  42h ; B
.eh_frame:0000000000010F0E                 db  0Eh
.eh_frame:0000000000010F0F                 db  10h
.eh_frame:0000000000010F10                 db  42h ; B
.eh_frame:0000000000010F11                 db  0Eh
.eh_frame:0000000000010F12                 db    8
.eh_frame:0000000000010F13                 db  44h ; D
.eh_frame:0000000000010F14                 db  0Bh
.eh_frame:0000000000010F15                 db    3
.eh_frame:0000000000010F16                 db  99h
.eh_frame:0000000000010F17                 db    5
.eh_frame:0000000000010F18                 db  0Eh
.eh_frame:0000000000010F19                 db 0F8h
.eh_frame:0000000000010F1A                 db    1
.eh_frame:0000000000010F1B                 db  4Dh ; M
.eh_frame:0000000000010F1C                 db  0Eh
.eh_frame:0000000000010F1D                 db  80h
.eh_frame:0000000000010F1E                 db    2
.eh_frame:0000000000010F1F                 db  44h ; D
.eh_frame:0000000000010F20                 db  0Eh
.eh_frame:0000000000010F21                 db  88h
.eh_frame:0000000000010F22                 db    2
.eh_frame:0000000000010F23                 db  47h ; G
.eh_frame:0000000000010F24                 db  0Eh
.eh_frame:0000000000010F25                 db  90h
.eh_frame:0000000000010F26                 db    2
.eh_frame:0000000000010F27                 db  5Bh ; [
.eh_frame:0000000000010F28                 db  0Eh
.eh_frame:0000000000010F29                 db 0F0h
.eh_frame:0000000000010F2A                 db    1
.eh_frame:0000000000010F2B                 db    0
.eh_frame:0000000000010F2C                 db  68h ; h
.eh_frame:0000000000010F2D                 db    0
.eh_frame:0000000000010F2E                 db    0
.eh_frame:0000000000010F2F                 db    0
.eh_frame:0000000000010F30                 db 0D0h
.eh_frame:0000000000010F31                 db    8
.eh_frame:0000000000010F32                 db    0
.eh_frame:0000000000010F33                 db    0
.eh_frame:0000000000010F34                 db  5Ch ; \
.eh_frame:0000000000010F35                 db  7Ch ; |
.eh_frame:0000000000010F36                 db 0FFh
.eh_frame:0000000000010F37                 db 0FFh
.eh_frame:0000000000010F38                 db 0ABh
.eh_frame:0000000000010F39                 db    1
.eh_frame:0000000000010F3A                 db    0
.eh_frame:0000000000010F3B                 db    0
.eh_frame:0000000000010F3C                 db    0
.eh_frame:0000000000010F3D                 db  42h ; B
.eh_frame:0000000000010F3E                 db  0Eh
.eh_frame:0000000000010F3F                 db  10h
.eh_frame:0000000000010F40                 db  8Fh
.eh_frame:0000000000010F41                 db    2
.eh_frame:0000000000010F42                 db  42h ; B
.eh_frame:0000000000010F43                 db  0Eh
.eh_frame:0000000000010F44                 db  18h
.eh_frame:0000000000010F45                 db  8Eh
.eh_frame:0000000000010F46                 db    3
.eh_frame:0000000000010F47                 db  45h ; E
.eh_frame:0000000000010F48                 db  0Eh
.eh_frame:0000000000010F49                 db  20h
.eh_frame:0000000000010F4A                 db  8Dh
.eh_frame:0000000000010F4B                 db    4
.eh_frame:0000000000010F4C                 db  42h ; B
.eh_frame:0000000000010F4D                 db  0Eh
.eh_frame:0000000000010F4E                 db  28h ; (
.eh_frame:0000000000010F4F                 db  8Ch
.eh_frame:0000000000010F50                 db    5
.eh_frame:0000000000010F51                 db  44h ; D
.eh_frame:0000000000010F52                 db  0Eh
.eh_frame:0000000000010F53                 db  30h ; 0
.eh_frame:0000000000010F54                 db  86h
.eh_frame:0000000000010F55                 db    6
.eh_frame:0000000000010F56                 db  41h ; A
.eh_frame:0000000000010F57                 db  0Eh
.eh_frame:0000000000010F58                 db  38h ; 8
.eh_frame:0000000000010F59                 db  83h
.eh_frame:0000000000010F5A                 db    7
.eh_frame:0000000000010F5B                 db  47h ; G
.eh_frame:0000000000010F5C                 db  0Eh
.eh_frame:0000000000010F5D                 db  60h ; `
.eh_frame:0000000000010F5E                 db    2
.eh_frame:0000000000010F5F                 db  99h
.eh_frame:0000000000010F60                 db  0Eh
.eh_frame:0000000000010F61                 db  68h ; h
.eh_frame:0000000000010F62                 db  5Fh ; _
.eh_frame:0000000000010F63                 db  0Eh
.eh_frame:0000000000010F64                 db  70h ; p
.eh_frame:0000000000010F65                 db  46h ; F
.eh_frame:0000000000010F66                 db  0Eh
.eh_frame:0000000000010F67                 db  78h ; x
.eh_frame:0000000000010F68                 db  42h ; B
.eh_frame:0000000000010F69                 db  0Eh
.eh_frame:0000000000010F6A                 db  80h
.eh_frame:0000000000010F6B                 db    1
.eh_frame:0000000000010F6C                 db  59h ; Y
.eh_frame:0000000000010F6D                 db  0Eh
.eh_frame:0000000000010F6E                 db  60h ; `
.eh_frame:0000000000010F6F                 db    2
.eh_frame:0000000000010F70                 db  40h ; @
.eh_frame:0000000000010F71                 db  0Eh
.eh_frame:0000000000010F72                 db  68h ; h
.eh_frame:0000000000010F73                 db  4Bh ; K
.eh_frame:0000000000010F74                 db  0Eh
.eh_frame:0000000000010F75                 db  70h ; p
.eh_frame:0000000000010F76                 db  43h ; C
.eh_frame:0000000000010F77                 db  0Eh
.eh_frame:0000000000010F78                 db  78h ; x
.eh_frame:0000000000010F79                 db  45h ; E
.eh_frame:0000000000010F7A                 db  0Eh
.eh_frame:0000000000010F7B                 db  80h
.eh_frame:0000000000010F7C                 db    1
.eh_frame:0000000000010F7D                 db  5Eh ; ^
.eh_frame:0000000000010F7E                 db  0Eh
.eh_frame:0000000000010F7F                 db  60h ; `
.eh_frame:0000000000010F80                 db  4Ch ; L
.eh_frame:0000000000010F81                 db  0Ah
.eh_frame:0000000000010F82                 db  0Eh
.eh_frame:0000000000010F83                 db  38h ; 8
.eh_frame:0000000000010F84                 db  44h ; D
.eh_frame:0000000000010F85                 db  0Eh
.eh_frame:0000000000010F86                 db  30h ; 0
.eh_frame:0000000000010F87                 db  41h ; A
.eh_frame:0000000000010F88                 db  0Eh
.eh_frame:0000000000010F89                 db  28h ; (
.eh_frame:0000000000010F8A                 db  42h ; B
.eh_frame:0000000000010F8B                 db  0Eh
.eh_frame:0000000000010F8C                 db  20h
.eh_frame:0000000000010F8D                 db  42h ; B
.eh_frame:0000000000010F8E                 db  0Eh
.eh_frame:0000000000010F8F                 db  18h
.eh_frame:0000000000010F90                 db  42h ; B
.eh_frame:0000000000010F91                 db  0Eh
.eh_frame:0000000000010F92                 db  10h
.eh_frame:0000000000010F93                 db  42h ; B
.eh_frame:0000000000010F94                 db  0Eh
.eh_frame:0000000000010F95                 db    8
.eh_frame:0000000000010F96                 db  46h ; F
.eh_frame:0000000000010F97                 db  0Bh
.eh_frame:0000000000010F98                 db  28h ; (
.eh_frame:0000000000010F99                 db    0
.eh_frame:0000000000010F9A                 db    0
.eh_frame:0000000000010F9B                 db    0
.eh_frame:0000000000010F9C                 db  3Ch ; <
.eh_frame:0000000000010F9D                 db    9
.eh_frame:0000000000010F9E                 db    0
.eh_frame:0000000000010F9F                 db    0
.eh_frame:0000000000010FA0                 db 0A0h
.eh_frame:0000000000010FA1                 db  7Dh ; }
.eh_frame:0000000000010FA2                 db 0FFh
.eh_frame:0000000000010FA3                 db 0FFh
.eh_frame:0000000000010FA4                 db  36h ; 6
.eh_frame:0000000000010FA5                 db    0
.eh_frame:0000000000010FA6                 db    0
.eh_frame:0000000000010FA7                 db    0
.eh_frame:0000000000010FA8                 db    0
.eh_frame:0000000000010FA9                 db  42h ; B
.eh_frame:0000000000010FAA                 db  0Eh
.eh_frame:0000000000010FAB                 db  10h
.eh_frame:0000000000010FAC                 db  8Ch
.eh_frame:0000000000010FAD                 db    2
.eh_frame:0000000000010FAE                 db  41h ; A
.eh_frame:0000000000010FAF                 db  0Eh
.eh_frame:0000000000010FB0                 db  18h
.eh_frame:0000000000010FB1                 db  86h
.eh_frame:0000000000010FB2                 db    3
.eh_frame:0000000000010FB3                 db  41h ; A
.eh_frame:0000000000010FB4                 db  0Eh
.eh_frame:0000000000010FB5                 db  20h
.eh_frame:0000000000010FB6                 db  83h
.eh_frame:0000000000010FB7                 db    4
.eh_frame:0000000000010FB8                 db  6Eh ; n
.eh_frame:0000000000010FB9                 db  0Eh
.eh_frame:0000000000010FBA                 db  18h
.eh_frame:0000000000010FBB                 db  41h ; A
.eh_frame:0000000000010FBC                 db  0Eh
.eh_frame:0000000000010FBD                 db  10h
.eh_frame:0000000000010FBE                 db  42h ; B
.eh_frame:0000000000010FBF                 db  0Eh
.eh_frame:0000000000010FC0                 db    8
.eh_frame:0000000000010FC1                 db    0
.eh_frame:0000000000010FC2                 db    0
.eh_frame:0000000000010FC3                 db    0
.eh_frame:0000000000010FC4                 db  10h
.eh_frame:0000000000010FC5                 db    0
.eh_frame:0000000000010FC6                 db    0
.eh_frame:0000000000010FC7                 db    0
.eh_frame:0000000000010FC8                 db  68h ; h
.eh_frame:0000000000010FC9                 db    9
.eh_frame:0000000000010FCA                 db    0
.eh_frame:0000000000010FCB                 db    0
.eh_frame:0000000000010FCC                 db 0B4h
.eh_frame:0000000000010FCD                 db  7Dh ; }
.eh_frame:0000000000010FCE                 db 0FFh
.eh_frame:0000000000010FCF                 db 0FFh
.eh_frame:0000000000010FD0                 db  11h
.eh_frame:0000000000010FD1                 db    0
.eh_frame:0000000000010FD2                 db    0
.eh_frame:0000000000010FD3                 db    0
.eh_frame:0000000000010FD4                 db    0
.eh_frame:0000000000010FD5                 db    0
.eh_frame:0000000000010FD6                 db    0
.eh_frame:0000000000010FD7                 db    0
.eh_frame:0000000000010FD8                 db  10h
.eh_frame:0000000000010FD9                 db    0
.eh_frame:0000000000010FDA                 db    0
.eh_frame:0000000000010FDB                 db    0
.eh_frame:0000000000010FDC                 db  7Ch ; |
.eh_frame:0000000000010FDD                 db    9
.eh_frame:0000000000010FDE                 db    0
.eh_frame:0000000000010FDF                 db    0
.eh_frame:0000000000010FE0                 db 0C0h
.eh_frame:0000000000010FE1                 db  7Dh ; }
.eh_frame:0000000000010FE2                 db 0FFh
.eh_frame:0000000000010FE3                 db 0FFh
.eh_frame:0000000000010FE4                 db  11h
.eh_frame:0000000000010FE5                 db    0
.eh_frame:0000000000010FE6                 db    0
.eh_frame:0000000000010FE7                 db    0
.eh_frame:0000000000010FE8                 db    0
.eh_frame:0000000000010FE9                 db    0
.eh_frame:0000000000010FEA                 db    0
.eh_frame:0000000000010FEB                 db    0
.eh_frame:0000000000010FEC                 db  10h
.eh_frame:0000000000010FED                 db    0
.eh_frame:0000000000010FEE                 db    0
.eh_frame:0000000000010FEF                 db    0
.eh_frame:0000000000010FF0                 db  90h
.eh_frame:0000000000010FF1                 db    9
.eh_frame:0000000000010FF2                 db    0
.eh_frame:0000000000010FF3                 db    0
.eh_frame:0000000000010FF4                 db 0CCh
.eh_frame:0000000000010FF5                 db  7Dh ; }
.eh_frame:0000000000010FF6                 db 0FFh
.eh_frame:0000000000010FF7                 db 0FFh
.eh_frame:0000000000010FF8                 db  35h ; 5
.eh_frame:0000000000010FF9                 db    0
.eh_frame:0000000000010FFA                 db    0
.eh_frame:0000000000010FFB                 db    0
.eh_frame:0000000000010FFC                 db    0
.eh_frame:0000000000010FFD                 db    0
.eh_frame:0000000000010FFE                 db    0
.eh_frame:0000000000010FFF                 db    0
.eh_frame:0000000000011000                 db  10h
.eh_frame:0000000000011001                 db    0
.eh_frame:0000000000011002                 db    0
.eh_frame:0000000000011003                 db    0
.eh_frame:0000000000011004                 db 0A4h
.eh_frame:0000000000011005                 db    9
.eh_frame:0000000000011006                 db    0
.eh_frame:0000000000011007                 db    0
.eh_frame:0000000000011008                 db 0F8h
.eh_frame:0000000000011009                 db  7Dh ; }
.eh_frame:000000000001100A                 db 0FFh
.eh_frame:000000000001100B                 db 0FFh
.eh_frame:000000000001100C                 db  15h
.eh_frame:000000000001100D                 db    0
.eh_frame:000000000001100E                 db    0
.eh_frame:000000000001100F                 db    0
.eh_frame:0000000000011010                 db    0
.eh_frame:0000000000011011                 db    0
.eh_frame:0000000000011012                 db    0
.eh_frame:0000000000011013                 db    0
.eh_frame:0000000000011014                 db  10h
.eh_frame:0000000000011015                 db    0
.eh_frame:0000000000011016                 db    0
.eh_frame:0000000000011017                 db    0
.eh_frame:0000000000011018                 db 0B8h
.eh_frame:0000000000011019                 db    9
.eh_frame:000000000001101A                 db    0
.eh_frame:000000000001101B                 db    0
.eh_frame:000000000001101C                 db    4
.eh_frame:000000000001101D                 db  7Eh ; ~
.eh_frame:000000000001101E                 db 0FFh
.eh_frame:000000000001101F                 db 0FFh
.eh_frame:0000000000011020                 db  30h ; 0
.eh_frame:0000000000011021                 db    0
.eh_frame:0000000000011022                 db    0
.eh_frame:0000000000011023                 db    0
.eh_frame:0000000000011024                 db    0
.eh_frame:0000000000011025                 db  6Bh ; k
.eh_frame:0000000000011026                 db  0Eh
.eh_frame:0000000000011027                 db  10h
.eh_frame:0000000000011028                 db  50h ; P
.eh_frame:0000000000011029                 db    0
.eh_frame:000000000001102A                 db    0
.eh_frame:000000000001102B                 db    0
.eh_frame:000000000001102C                 db 0CCh
.eh_frame:000000000001102D                 db    9
.eh_frame:000000000001102E                 db    0
.eh_frame:000000000001102F                 db    0
.eh_frame:0000000000011030                 db  20h
.eh_frame:0000000000011031                 db  7Eh ; ~
.eh_frame:0000000000011032                 db 0FFh
.eh_frame:0000000000011033                 db 0FFh
.eh_frame:0000000000011034                 db  74h ; t
.eh_frame:0000000000011035                 db    0
.eh_frame:0000000000011036                 db    0
.eh_frame:0000000000011037                 db    0
.eh_frame:0000000000011038                 db    0
.eh_frame:0000000000011039                 db  42h ; B
.eh_frame:000000000001103A                 db  0Eh
.eh_frame:000000000001103B                 db  10h
.eh_frame:000000000001103C                 db  8Fh
.eh_frame:000000000001103D                 db    2
.eh_frame:000000000001103E                 db  42h ; B
.eh_frame:000000000001103F                 db  0Eh
.eh_frame:0000000000011040                 db  18h
.eh_frame:0000000000011041                 db  8Eh
.eh_frame:0000000000011042                 db    3
.eh_frame:0000000000011043                 db  49h ; I
.eh_frame:0000000000011044                 db  0Eh
.eh_frame:0000000000011045                 db  20h
.eh_frame:0000000000011046                 db  8Dh
.eh_frame:0000000000011047                 db    4
.eh_frame:0000000000011048                 db  42h ; B
.eh_frame:0000000000011049                 db  0Eh
.eh_frame:000000000001104A                 db  28h ; (
.eh_frame:000000000001104B                 db  8Ch
.eh_frame:000000000001104C                 db    5
.eh_frame:000000000001104D                 db  44h ; D
.eh_frame:000000000001104E                 db  0Eh
.eh_frame:000000000001104F                 db  30h ; 0
.eh_frame:0000000000011050                 db  86h
.eh_frame:0000000000011051                 db    6
.eh_frame:0000000000011052                 db  41h ; A
.eh_frame:0000000000011053                 db  0Eh
.eh_frame:0000000000011054                 db  38h ; 8
.eh_frame:0000000000011055                 db  83h
.eh_frame:0000000000011056                 db    7
.eh_frame:0000000000011057                 db  4Dh ; M
.eh_frame:0000000000011058                 db  0Eh
.eh_frame:0000000000011059                 db  50h ; P
.eh_frame:000000000001105A                 db  5Fh ; _
.eh_frame:000000000001105B                 db  0Eh
.eh_frame:000000000001105C                 db  58h ; X
.eh_frame:000000000001105D                 db  47h ; G
.eh_frame:000000000001105E                 db  0Eh
.eh_frame:000000000001105F                 db  60h ; `
.eh_frame:0000000000011060                 db  46h ; F
.eh_frame:0000000000011061                 db  0Eh
.eh_frame:0000000000011062                 db  68h ; h
.eh_frame:0000000000011063                 db  44h ; D
.eh_frame:0000000000011064                 db  0Eh
.eh_frame:0000000000011065                 db  70h ; p
.eh_frame:0000000000011066                 db  58h ; X
.eh_frame:0000000000011067                 db  0Eh
.eh_frame:0000000000011068                 db  38h ; 8
.eh_frame:0000000000011069                 db  41h ; A
.eh_frame:000000000001106A                 db  0Eh
.eh_frame:000000000001106B                 db  30h ; 0
.eh_frame:000000000001106C                 db  41h ; A
.eh_frame:000000000001106D                 db  0Eh
.eh_frame:000000000001106E                 db  28h ; (
.eh_frame:000000000001106F                 db  42h ; B
.eh_frame:0000000000011070                 db  0Eh
.eh_frame:0000000000011071                 db  20h
.eh_frame:0000000000011072                 db  42h ; B
.eh_frame:0000000000011073                 db  0Eh
.eh_frame:0000000000011074                 db  18h
.eh_frame:0000000000011075                 db  42h ; B
.eh_frame:0000000000011076                 db  0Eh
.eh_frame:0000000000011077                 db  10h
.eh_frame:0000000000011078                 db  42h ; B
.eh_frame:0000000000011079                 db  0Eh
.eh_frame:000000000001107A                 db    8
.eh_frame:000000000001107B                 db    0
.eh_frame:000000000001107C                 db  68h ; h
.eh_frame:000000000001107D                 db    0
.eh_frame:000000000001107E                 db    0
.eh_frame:000000000001107F                 db    0
.eh_frame:0000000000011080                 db  20h
.eh_frame:0000000000011081                 db  0Ah
.eh_frame:0000000000011082                 db    0
.eh_frame:0000000000011083                 db    0
.eh_frame:0000000000011084                 db  4Ch ; L
.eh_frame:0000000000011085                 db  7Eh ; ~
.eh_frame:0000000000011086                 db 0FFh
.eh_frame:0000000000011087                 db 0FFh
.eh_frame:0000000000011088                 db 0E3h
.eh_frame:0000000000011089                 db    0
.eh_frame:000000000001108A                 db    0
.eh_frame:000000000001108B                 db    0
.eh_frame:000000000001108C                 db    0
.eh_frame:000000000001108D                 db  42h ; B
.eh_frame:000000000001108E                 db  0Eh
.eh_frame:000000000001108F                 db  10h
.eh_frame:0000000000011090                 db  8Fh
.eh_frame:0000000000011091                 db    2
.eh_frame:0000000000011092                 db  42h ; B
.eh_frame:0000000000011093                 db  0Eh
.eh_frame:0000000000011094                 db  18h
.eh_frame:0000000000011095                 db  8Eh
.eh_frame:0000000000011096                 db    3
.eh_frame:0000000000011097                 db  49h ; I
.eh_frame:0000000000011098                 db  0Eh
.eh_frame:0000000000011099                 db  20h
.eh_frame:000000000001109A                 db  8Dh
.eh_frame:000000000001109B                 db    4
.eh_frame:000000000001109C                 db  42h ; B
.eh_frame:000000000001109D                 db  0Eh
.eh_frame:000000000001109E                 db  28h ; (
.eh_frame:000000000001109F                 db  8Ch
.eh_frame:00000000000110A0                 db    5
.eh_frame:00000000000110A1                 db  44h ; D
.eh_frame:00000000000110A2                 db  0Eh
.eh_frame:00000000000110A3                 db  30h ; 0
.eh_frame:00000000000110A4                 db  86h
.eh_frame:00000000000110A5                 db    6
.eh_frame:00000000000110A6                 db  41h ; A
.eh_frame:00000000000110A7                 db  0Eh
.eh_frame:00000000000110A8                 db  38h ; 8
.eh_frame:00000000000110A9                 db  83h
.eh_frame:00000000000110AA                 db    7
.eh_frame:00000000000110AB                 db  4Dh ; M
.eh_frame:00000000000110AC                 db  0Eh
.eh_frame:00000000000110AD                 db  70h ; p
.eh_frame:00000000000110AE                 db  65h ; e
.eh_frame:00000000000110AF                 db  0Eh
.eh_frame:00000000000110B0                 db  78h ; x
.eh_frame:00000000000110B1                 db  4Dh ; M
.eh_frame:00000000000110B2                 db  0Eh
.eh_frame:00000000000110B3                 db  80h
.eh_frame:00000000000110B4                 db    1
.eh_frame:00000000000110B5                 db  46h ; F
.eh_frame:00000000000110B6                 db  0Eh
.eh_frame:00000000000110B7                 db  88h
.eh_frame:00000000000110B8                 db    1
.eh_frame:00000000000110B9                 db  42h ; B
.eh_frame:00000000000110BA                 db  0Eh
.eh_frame:00000000000110BB                 db  90h
.eh_frame:00000000000110BC                 db    1
.eh_frame:00000000000110BD                 db  5Eh ; ^
.eh_frame:00000000000110BE                 db  0Eh
.eh_frame:00000000000110BF                 db  70h ; p
.eh_frame:00000000000110C0                 db  56h ; V
.eh_frame:00000000000110C1                 db  0Eh
.eh_frame:00000000000110C2                 db  78h ; x
.eh_frame:00000000000110C3                 db  43h ; C
.eh_frame:00000000000110C4                 db  0Eh
.eh_frame:00000000000110C5                 db  80h
.eh_frame:00000000000110C6                 db    1
.eh_frame:00000000000110C7                 db  43h ; C
.eh_frame:00000000000110C8                 db  0Eh
.eh_frame:00000000000110C9                 db  88h
.eh_frame:00000000000110CA                 db    1
.eh_frame:00000000000110CB                 db  56h ; V
.eh_frame:00000000000110CC                 db  0Eh
.eh_frame:00000000000110CD                 db  90h
.eh_frame:00000000000110CE                 db    1
.eh_frame:00000000000110CF                 db  52h ; R
.eh_frame:00000000000110D0                 db  0Eh
.eh_frame:00000000000110D1                 db  70h ; p
.eh_frame:00000000000110D2                 db  5Bh ; [
.eh_frame:00000000000110D3                 db  0Eh
.eh_frame:00000000000110D4                 db  38h ; 8
.eh_frame:00000000000110D5                 db  41h ; A
.eh_frame:00000000000110D6                 db  0Eh
.eh_frame:00000000000110D7                 db  30h ; 0
.eh_frame:00000000000110D8                 db  41h ; A
.eh_frame:00000000000110D9                 db  0Eh
.eh_frame:00000000000110DA                 db  28h ; (
.eh_frame:00000000000110DB                 db  42h ; B
.eh_frame:00000000000110DC                 db  0Eh
.eh_frame:00000000000110DD                 db  20h
.eh_frame:00000000000110DE                 db  42h ; B
.eh_frame:00000000000110DF                 db  0Eh
.eh_frame:00000000000110E0                 db  18h
.eh_frame:00000000000110E1                 db  42h ; B
.eh_frame:00000000000110E2                 db  0Eh
.eh_frame:00000000000110E3                 db  10h
.eh_frame:00000000000110E4                 db  42h ; B
.eh_frame:00000000000110E5                 db  0Eh
.eh_frame:00000000000110E6                 db    8
.eh_frame:00000000000110E7                 db    0
.eh_frame:00000000000110E8                 db  10h
.eh_frame:00000000000110E9                 db    0
.eh_frame:00000000000110EA                 db    0
.eh_frame:00000000000110EB                 db    0
.eh_frame:00000000000110EC                 db  8Ch
.eh_frame:00000000000110ED                 db  0Ah
.eh_frame:00000000000110EE                 db    0
.eh_frame:00000000000110EF                 db    0
.eh_frame:00000000000110F0                 db 0D0h
.eh_frame:00000000000110F1                 db  7Eh ; ~
.eh_frame:00000000000110F2                 db 0FFh
.eh_frame:00000000000110F3                 db 0FFh
.eh_frame:00000000000110F4                 db  0Ah
.eh_frame:00000000000110F5                 db    0
.eh_frame:00000000000110F6                 db    0
.eh_frame:00000000000110F7                 db    0
.eh_frame:00000000000110F8                 db    0
.eh_frame:00000000000110F9                 db    0
.eh_frame:00000000000110FA                 db    0
.eh_frame:00000000000110FB                 db    0
.eh_frame:00000000000110FC                 db  28h ; (
.eh_frame:00000000000110FD                 db    0
.eh_frame:00000000000110FE                 db    0
.eh_frame:00000000000110FF                 db    0
.eh_frame:0000000000011100                 db 0A0h
.eh_frame:0000000000011101                 db  0Ah
.eh_frame:0000000000011102                 db    0
.eh_frame:0000000000011103                 db    0
.eh_frame:0000000000011104                 db 0CCh
.eh_frame:0000000000011105                 db  7Eh ; ~
.eh_frame:0000000000011106                 db 0FFh
.eh_frame:0000000000011107                 db 0FFh
.eh_frame:0000000000011108                 db  93h
.eh_frame:0000000000011109                 db    0
.eh_frame:000000000001110A                 db    0
.eh_frame:000000000001110B                 db    0
.eh_frame:000000000001110C                 db    0
.eh_frame:000000000001110D                 db  48h ; H
.eh_frame:000000000001110E                 db  0Eh
.eh_frame:000000000001110F                 db  10h
.eh_frame:0000000000011110                 db  8Ch
.eh_frame:0000000000011111                 db    2
.eh_frame:0000000000011112                 db  48h ; H
.eh_frame:0000000000011113                 db  0Eh
.eh_frame:0000000000011114                 db  18h
.eh_frame:0000000000011115                 db  86h
.eh_frame:0000000000011116                 db    3
.eh_frame:0000000000011117                 db  41h ; A
.eh_frame:0000000000011118                 db  0Eh
.eh_frame:0000000000011119                 db  20h
.eh_frame:000000000001111A                 db  83h
.eh_frame:000000000001111B                 db    4
.eh_frame:000000000001111C                 db    2
.eh_frame:000000000001111D                 db  74h ; t
.eh_frame:000000000001111E                 db  0Eh
.eh_frame:000000000001111F                 db  18h
.eh_frame:0000000000011120                 db  4Bh ; K
.eh_frame:0000000000011121                 db  0Eh
.eh_frame:0000000000011122                 db  10h
.eh_frame:0000000000011123                 db  42h ; B
.eh_frame:0000000000011124                 db  0Eh
.eh_frame:0000000000011125                 db    8
.eh_frame:0000000000011126                 db    0
.eh_frame:0000000000011127                 db    0
.eh_frame:0000000000011128                 db  10h
.eh_frame:0000000000011129                 db    0
.eh_frame:000000000001112A                 db    0
.eh_frame:000000000001112B                 db    0
.eh_frame:000000000001112C                 db 0CCh
.eh_frame:000000000001112D                 db  0Ah
.eh_frame:000000000001112E                 db    0
.eh_frame:000000000001112F                 db    0
.eh_frame:0000000000011130                 db  40h ; @
.eh_frame:0000000000011131                 db  7Fh ; 
.eh_frame:0000000000011132                 db 0FFh
.eh_frame:0000000000011133                 db 0FFh
.eh_frame:0000000000011134                 db  13h
.eh_frame:0000000000011135                 db    0
.eh_frame:0000000000011136                 db    0
.eh_frame:0000000000011137                 db    0
.eh_frame:0000000000011138                 db    0
.eh_frame:0000000000011139                 db    0
.eh_frame:000000000001113A                 db    0
.eh_frame:000000000001113B                 db    0
.eh_frame:000000000001113C                 db  10h
.eh_frame:000000000001113D                 db    0
.eh_frame:000000000001113E                 db    0
.eh_frame:000000000001113F                 db    0
.eh_frame:0000000000011140                 db 0E0h
.eh_frame:0000000000011141                 db  0Ah
.eh_frame:0000000000011142                 db    0
.eh_frame:0000000000011143                 db    0
.eh_frame:0000000000011144                 db  4Ch ; L
.eh_frame:0000000000011145                 db  7Fh ; 
.eh_frame:0000000000011146                 db 0FFh
.eh_frame:0000000000011147                 db 0FFh
.eh_frame:0000000000011148                 db  0Ch
.eh_frame:0000000000011149                 db    0
.eh_frame:000000000001114A                 db    0
.eh_frame:000000000001114B                 db    0
.eh_frame:000000000001114C                 db    0
.eh_frame:000000000001114D                 db    0
.eh_frame:000000000001114E                 db    0
.eh_frame:000000000001114F                 db    0
.eh_frame:0000000000011150                 db  10h
.eh_frame:0000000000011151                 db    0
.eh_frame:0000000000011152                 db    0
.eh_frame:0000000000011153                 db    0
.eh_frame:0000000000011154                 db 0F4h
.eh_frame:0000000000011155                 db  0Ah
.eh_frame:0000000000011156                 db    0
.eh_frame:0000000000011157                 db    0
.eh_frame:0000000000011158                 db  48h ; H
.eh_frame:0000000000011159                 db  7Fh ; 
.eh_frame:000000000001115A                 db 0FFh
.eh_frame:000000000001115B                 db 0FFh
.eh_frame:000000000001115C                 db  18h
.eh_frame:000000000001115D                 db    0
.eh_frame:000000000001115E                 db    0
.eh_frame:000000000001115F                 db    0
.eh_frame:0000000000011160                 db    0
.eh_frame:0000000000011161                 db    0
.eh_frame:0000000000011162                 db    0
.eh_frame:0000000000011163                 db    0
.eh_frame:0000000000011164                 db  10h
.eh_frame:0000000000011165                 db    0
.eh_frame:0000000000011166                 db    0
.eh_frame:0000000000011167                 db    0
.eh_frame:0000000000011168                 db    8
.eh_frame:0000000000011169                 db  0Bh
.eh_frame:000000000001116A                 db    0
.eh_frame:000000000001116B                 db    0
.eh_frame:000000000001116C                 db  54h ; T
.eh_frame:000000000001116D                 db  7Fh ; 
.eh_frame:000000000001116E                 db 0FFh
.eh_frame:000000000001116F                 db 0FFh
.eh_frame:0000000000011170                 db  14h
.eh_frame:0000000000011171                 db    0
.eh_frame:0000000000011172                 db    0
.eh_frame:0000000000011173                 db    0
.eh_frame:0000000000011174                 db    0
.eh_frame:0000000000011175                 db    0
.eh_frame:0000000000011176                 db    0
.eh_frame:0000000000011177                 db    0
.eh_frame:0000000000011178                 db  18h
.eh_frame:0000000000011179                 db    0
.eh_frame:000000000001117A                 db    0
.eh_frame:000000000001117B                 db    0
.eh_frame:000000000001117C                 db  1Ch
.eh_frame:000000000001117D                 db  0Bh
.eh_frame:000000000001117E                 db    0
.eh_frame:000000000001117F                 db    0
.eh_frame:0000000000011180                 db  60h ; `
.eh_frame:0000000000011181                 db  7Fh ; 
.eh_frame:0000000000011182                 db 0FFh
.eh_frame:0000000000011183                 db 0FFh
.eh_frame:0000000000011184                 db  8Eh
.eh_frame:0000000000011185                 db    0
.eh_frame:0000000000011186                 db    0
.eh_frame:0000000000011187                 db    0
.eh_frame:0000000000011188                 db    0
.eh_frame:0000000000011189                 db  44h ; D
.eh_frame:000000000001118A                 db  0Eh
.eh_frame:000000000001118B                 db  50h ; P
.eh_frame:000000000001118C                 db    2
.eh_frame:000000000001118D                 db  7Fh ; 
.eh_frame:000000000001118E                 db  0Ah
.eh_frame:000000000001118F                 db  0Eh
.eh_frame:0000000000011190                 db    8
.eh_frame:0000000000011191                 db  41h ; A
.eh_frame:0000000000011192                 db  0Bh
.eh_frame:0000000000011193                 db    0
.eh_frame:0000000000011194                 db  18h
.eh_frame:0000000000011195                 db    0
.eh_frame:0000000000011196                 db    0
.eh_frame:0000000000011197                 db    0
.eh_frame:0000000000011198                 db  38h ; 8
.eh_frame:0000000000011199                 db  0Bh
.eh_frame:000000000001119A                 db    0
.eh_frame:000000000001119B                 db    0
.eh_frame:000000000001119C                 db 0D4h
.eh_frame:000000000001119D                 db  7Fh ; 
.eh_frame:000000000001119E                 db 0FFh
.eh_frame:000000000001119F                 db 0FFh
.eh_frame:00000000000111A0                 db  8Ah
.eh_frame:00000000000111A1                 db    0
.eh_frame:00000000000111A2                 db    0
.eh_frame:00000000000111A3                 db    0
.eh_frame:00000000000111A4                 db    0
.eh_frame:00000000000111A5                 db  44h ; D
.eh_frame:00000000000111A6                 db  0Eh
.eh_frame:00000000000111A7                 db  50h ; P
.eh_frame:00000000000111A8                 db    2
.eh_frame:00000000000111A9                 db  7Bh ; {
.eh_frame:00000000000111AA                 db  0Ah
.eh_frame:00000000000111AB                 db  0Eh
.eh_frame:00000000000111AC                 db    8
.eh_frame:00000000000111AD                 db  41h ; A
.eh_frame:00000000000111AE                 db  0Bh
.eh_frame:00000000000111AF                 db    0
.eh_frame:00000000000111B0                 db  10h
.eh_frame:00000000000111B1                 db    0
.eh_frame:00000000000111B2                 db    0
.eh_frame:00000000000111B3                 db    0
.eh_frame:00000000000111B4                 db  54h ; T
.eh_frame:00000000000111B5                 db  0Bh
.eh_frame:00000000000111B6                 db    0
.eh_frame:00000000000111B7                 db    0
.eh_frame:00000000000111B8                 db  48h ; H
.eh_frame:00000000000111B9                 db  80h
.eh_frame:00000000000111BA                 db 0FFh
.eh_frame:00000000000111BB                 db 0FFh
.eh_frame:00000000000111BC                 db  0Ch
.eh_frame:00000000000111BD                 db    0
.eh_frame:00000000000111BE                 db    0
.eh_frame:00000000000111BF                 db    0
.eh_frame:00000000000111C0                 db    0
.eh_frame:00000000000111C1                 db    0
.eh_frame:00000000000111C2                 db    0
.eh_frame:00000000000111C3                 db    0
.eh_frame:00000000000111C4                 db  10h
.eh_frame:00000000000111C5                 db    0
.eh_frame:00000000000111C6                 db    0
.eh_frame:00000000000111C7                 db    0
.eh_frame:00000000000111C8                 db  68h ; h
.eh_frame:00000000000111C9                 db  0Bh
.eh_frame:00000000000111CA                 db    0
.eh_frame:00000000000111CB                 db    0
.eh_frame:00000000000111CC                 db  44h ; D
.eh_frame:00000000000111CD                 db  80h
.eh_frame:00000000000111CE                 db 0FFh
.eh_frame:00000000000111CF                 db 0FFh
.eh_frame:00000000000111D0                 db  0Fh
.eh_frame:00000000000111D1                 db    0
.eh_frame:00000000000111D2                 db    0
.eh_frame:00000000000111D3                 db    0
.eh_frame:00000000000111D4                 db    0
.eh_frame:00000000000111D5                 db    0
.eh_frame:00000000000111D6                 db    0
.eh_frame:00000000000111D7                 db    0
.eh_frame:00000000000111D8                 db  18h
.eh_frame:00000000000111D9                 db    0
.eh_frame:00000000000111DA                 db    0
.eh_frame:00000000000111DB                 db    0
.eh_frame:00000000000111DC                 db  7Ch ; |
.eh_frame:00000000000111DD                 db  0Bh
.eh_frame:00000000000111DE                 db    0
.eh_frame:00000000000111DF                 db    0
.eh_frame:00000000000111E0                 db  40h ; @
.eh_frame:00000000000111E1                 db  80h
.eh_frame:00000000000111E2                 db 0FFh
.eh_frame:00000000000111E3                 db 0FFh
.eh_frame:00000000000111E4                 db  98h
.eh_frame:00000000000111E5                 db    0
.eh_frame:00000000000111E6                 db    0
.eh_frame:00000000000111E7                 db    0
.eh_frame:00000000000111E8                 db    0
.eh_frame:00000000000111E9                 db  44h ; D
.eh_frame:00000000000111EA                 db  0Eh
.eh_frame:00000000000111EB                 db  50h ; P
.eh_frame:00000000000111EC                 db    2
.eh_frame:00000000000111ED                 db  8Eh
.eh_frame:00000000000111EE                 db  0Ah
.eh_frame:00000000000111EF                 db  0Eh
.eh_frame:00000000000111F0                 db    8
.eh_frame:00000000000111F1                 db  41h ; A
.eh_frame:00000000000111F2                 db  0Bh
.eh_frame:00000000000111F3                 db    0
.eh_frame:00000000000111F4                 db  10h
.eh_frame:00000000000111F5                 db    0
.eh_frame:00000000000111F6                 db    0
.eh_frame:00000000000111F7                 db    0
.eh_frame:00000000000111F8                 db  98h
.eh_frame:00000000000111F9                 db  0Bh
.eh_frame:00000000000111FA                 db    0
.eh_frame:00000000000111FB                 db    0
.eh_frame:00000000000111FC                 db 0C4h
.eh_frame:00000000000111FD                 db  80h
.eh_frame:00000000000111FE                 db 0FFh
.eh_frame:00000000000111FF                 db 0FFh
.eh_frame:0000000000011200                 db  10h
.eh_frame:0000000000011201                 db    0
.eh_frame:0000000000011202                 db    0
.eh_frame:0000000000011203                 db    0
.eh_frame:0000000000011204                 db    0
.eh_frame:0000000000011205                 db    0
.eh_frame:0000000000011206                 db    0
.eh_frame:0000000000011207                 db    0
.eh_frame:0000000000011208                 db  10h
.eh_frame:0000000000011209                 db    0
.eh_frame:000000000001120A                 db    0
.eh_frame:000000000001120B                 db    0
.eh_frame:000000000001120C                 db 0ACh
.eh_frame:000000000001120D                 db  0Bh
.eh_frame:000000000001120E                 db    0
.eh_frame:000000000001120F                 db    0
.eh_frame:0000000000011210                 db 0C0h
.eh_frame:0000000000011211                 db  80h
.eh_frame:0000000000011212                 db 0FFh
.eh_frame:0000000000011213                 db 0FFh
.eh_frame:0000000000011214                 db  11h
.eh_frame:0000000000011215                 db    0
.eh_frame:0000000000011216                 db    0
.eh_frame:0000000000011217                 db    0
.eh_frame:0000000000011218                 db    0
.eh_frame:0000000000011219                 db    0
.eh_frame:000000000001121A                 db    0
.eh_frame:000000000001121B                 db    0
.eh_frame:000000000001121C                 db  10h
.eh_frame:000000000001121D                 db    0
.eh_frame:000000000001121E                 db    0
.eh_frame:000000000001121F                 db    0
.eh_frame:0000000000011220                 db 0C0h
.eh_frame:0000000000011221                 db  0Bh
.eh_frame:0000000000011222                 db    0
.eh_frame:0000000000011223                 db    0
.eh_frame:0000000000011224                 db 0CCh
.eh_frame:0000000000011225                 db  80h
.eh_frame:0000000000011226                 db 0FFh
.eh_frame:0000000000011227                 db 0FFh
.eh_frame:0000000000011228                 db  0Ah
.eh_frame:0000000000011229                 db    0
.eh_frame:000000000001122A                 db    0
.eh_frame:000000000001122B                 db    0
.eh_frame:000000000001122C                 db    0
.eh_frame:000000000001122D                 db    0
.eh_frame:000000000001122E                 db    0
.eh_frame:000000000001122F                 db    0
.eh_frame:0000000000011230                 db  18h
.eh_frame:0000000000011231                 db    0
.eh_frame:0000000000011232                 db    0
.eh_frame:0000000000011233                 db    0
.eh_frame:0000000000011234                 db 0D4h
.eh_frame:0000000000011235                 db  0Bh
.eh_frame:0000000000011236                 db    0
.eh_frame:0000000000011237                 db    0
.eh_frame:0000000000011238                 db 0C8h
.eh_frame:0000000000011239                 db  80h
.eh_frame:000000000001123A                 db 0FFh
.eh_frame:000000000001123B                 db 0FFh
.eh_frame:000000000001123C                 db  8Eh
.eh_frame:000000000001123D                 db    0
.eh_frame:000000000001123E                 db    0
.eh_frame:000000000001123F                 db    0
.eh_frame:0000000000011240                 db    0
.eh_frame:0000000000011241                 db  44h ; D
.eh_frame:0000000000011242                 db  0Eh
.eh_frame:0000000000011243                 db  50h ; P
.eh_frame:0000000000011244                 db    2
.eh_frame:0000000000011245                 db  7Fh ; 
.eh_frame:0000000000011246                 db  0Ah
.eh_frame:0000000000011247                 db  0Eh
.eh_frame:0000000000011248                 db    8
.eh_frame:0000000000011249                 db  41h ; A
.eh_frame:000000000001124A                 db  0Bh
.eh_frame:000000000001124B                 db    0
.eh_frame:000000000001124C                 db  18h
.eh_frame:000000000001124D                 db    0
.eh_frame:000000000001124E                 db    0
.eh_frame:000000000001124F                 db    0
.eh_frame:0000000000011250                 db 0F0h
.eh_frame:0000000000011251                 db  0Bh
.eh_frame:0000000000011252                 db    0
.eh_frame:0000000000011253                 db    0
.eh_frame:0000000000011254                 db  3Ch ; <
.eh_frame:0000000000011255                 db  81h
.eh_frame:0000000000011256                 db 0FFh
.eh_frame:0000000000011257                 db 0FFh
.eh_frame:0000000000011258                 db  91h
.eh_frame:0000000000011259                 db    0
.eh_frame:000000000001125A                 db    0
.eh_frame:000000000001125B                 db    0
.eh_frame:000000000001125C                 db    0
.eh_frame:000000000001125D                 db  44h ; D
.eh_frame:000000000001125E                 db  0Eh
.eh_frame:000000000001125F                 db  50h ; P
.eh_frame:0000000000011260                 db    2
.eh_frame:0000000000011261                 db  82h
.eh_frame:0000000000011262                 db  0Ah
.eh_frame:0000000000011263                 db  0Eh
.eh_frame:0000000000011264                 db    8
.eh_frame:0000000000011265                 db  41h ; A
.eh_frame:0000000000011266                 db  0Bh
.eh_frame:0000000000011267                 db    0
.eh_frame:0000000000011268                 db  10h
.eh_frame:0000000000011269                 db    0
.eh_frame:000000000001126A                 db    0
.eh_frame:000000000001126B                 db    0
.eh_frame:000000000001126C                 db  0Ch
.eh_frame:000000000001126D                 db  0Ch
.eh_frame:000000000001126E                 db    0
.eh_frame:000000000001126F                 db    0
.eh_frame:0000000000011270                 db 0C0h
.eh_frame:0000000000011271                 db  81h
.eh_frame:0000000000011272                 db 0FFh
.eh_frame:0000000000011273                 db 0FFh
.eh_frame:0000000000011274                 db  0Ch
.eh_frame:0000000000011275                 db    0
.eh_frame:0000000000011276                 db    0
.eh_frame:0000000000011277                 db    0
.eh_frame:0000000000011278                 db    0
.eh_frame:0000000000011279                 db    0
.eh_frame:000000000001127A                 db    0
.eh_frame:000000000001127B                 db    0
.eh_frame:000000000001127C                 db  10h
.eh_frame:000000000001127D                 db    0
.eh_frame:000000000001127E                 db    0
.eh_frame:000000000001127F                 db    0
.eh_frame:0000000000011280                 db  20h
.eh_frame:0000000000011281                 db  0Ch
.eh_frame:0000000000011282                 db    0
.eh_frame:0000000000011283                 db    0
.eh_frame:0000000000011284                 db 0BCh
.eh_frame:0000000000011285                 db  81h
.eh_frame:0000000000011286                 db 0FFh
.eh_frame:0000000000011287                 db 0FFh
.eh_frame:0000000000011288                 db  17h
.eh_frame:0000000000011289                 db    0
.eh_frame:000000000001128A                 db    0
.eh_frame:000000000001128B                 db    0
.eh_frame:000000000001128C                 db    0
.eh_frame:000000000001128D                 db    0
.eh_frame:000000000001128E                 db    0
.eh_frame:000000000001128F                 db    0
.eh_frame:0000000000011290                 db  10h
.eh_frame:0000000000011291                 db    0
.eh_frame:0000000000011292                 db    0
.eh_frame:0000000000011293                 db    0
.eh_frame:0000000000011294                 db  34h ; 4
.eh_frame:0000000000011295                 db  0Ch
.eh_frame:0000000000011296                 db    0
.eh_frame:0000000000011297                 db    0
.eh_frame:0000000000011298                 db 0C8h
.eh_frame:0000000000011299                 db  81h
.eh_frame:000000000001129A                 db 0FFh
.eh_frame:000000000001129B                 db 0FFh
.eh_frame:000000000001129C                 db  13h
.eh_frame:000000000001129D                 db    0
.eh_frame:000000000001129E                 db    0
.eh_frame:000000000001129F                 db    0
.eh_frame:00000000000112A0                 db    0
.eh_frame:00000000000112A1                 db    0
.eh_frame:00000000000112A2                 db    0
.eh_frame:00000000000112A3                 db    0
.eh_frame:00000000000112A4                 db  10h
.eh_frame:00000000000112A5                 db    0
.eh_frame:00000000000112A6                 db    0
.eh_frame:00000000000112A7                 db    0
.eh_frame:00000000000112A8                 db  48h ; H
.eh_frame:00000000000112A9                 db  0Ch
.eh_frame:00000000000112AA                 db    0
.eh_frame:00000000000112AB                 db    0
.eh_frame:00000000000112AC                 db 0D4h
.eh_frame:00000000000112AD                 db  81h
.eh_frame:00000000000112AE                 db 0FFh
.eh_frame:00000000000112AF                 db 0FFh
.eh_frame:00000000000112B0                 db  0Ch
.eh_frame:00000000000112B1                 db    0
.eh_frame:00000000000112B2                 db    0
.eh_frame:00000000000112B3                 db    0
.eh_frame:00000000000112B4                 db    0
.eh_frame:00000000000112B5                 db    0
.eh_frame:00000000000112B6                 db    0
.eh_frame:00000000000112B7                 db    0
.eh_frame:00000000000112B8                 db  10h
.eh_frame:00000000000112B9                 db    0
.eh_frame:00000000000112BA                 db    0
.eh_frame:00000000000112BB                 db    0
.eh_frame:00000000000112BC                 db  5Ch ; \
.eh_frame:00000000000112BD                 db  0Ch
.eh_frame:00000000000112BE                 db    0
.eh_frame:00000000000112BF                 db    0
.eh_frame:00000000000112C0                 db 0D0h
.eh_frame:00000000000112C1                 db  81h
.eh_frame:00000000000112C2                 db 0FFh
.eh_frame:00000000000112C3                 db 0FFh
.eh_frame:00000000000112C4                 db  14h
.eh_frame:00000000000112C5                 db    0
.eh_frame:00000000000112C6                 db    0
.eh_frame:00000000000112C7                 db    0
.eh_frame:00000000000112C8                 db    0
.eh_frame:00000000000112C9                 db    0
.eh_frame:00000000000112CA                 db    0
.eh_frame:00000000000112CB                 db    0
.eh_frame:00000000000112CC                 db  10h
.eh_frame:00000000000112CD                 db    0
.eh_frame:00000000000112CE                 db    0
.eh_frame:00000000000112CF                 db    0
.eh_frame:00000000000112D0                 db  70h ; p
.eh_frame:00000000000112D1                 db  0Ch
.eh_frame:00000000000112D2                 db    0
.eh_frame:00000000000112D3                 db    0
.eh_frame:00000000000112D4                 db 0DCh
.eh_frame:00000000000112D5                 db  81h
.eh_frame:00000000000112D6                 db 0FFh
.eh_frame:00000000000112D7                 db 0FFh
.eh_frame:00000000000112D8                 db  13h
.eh_frame:00000000000112D9                 db    0
.eh_frame:00000000000112DA                 db    0
.eh_frame:00000000000112DB                 db    0
.eh_frame:00000000000112DC                 db    0
.eh_frame:00000000000112DD                 db    0
.eh_frame:00000000000112DE                 db    0
.eh_frame:00000000000112DF                 db    0
.eh_frame:00000000000112E0                 db  14h
.eh_frame:00000000000112E1                 db    0
.eh_frame:00000000000112E2                 db    0
.eh_frame:00000000000112E3                 db    0
.eh_frame:00000000000112E4                 db  84h
.eh_frame:00000000000112E5                 db  0Ch
.eh_frame:00000000000112E6                 db    0
.eh_frame:00000000000112E7                 db    0
.eh_frame:00000000000112E8                 db 0E8h
.eh_frame:00000000000112E9                 db  81h
.eh_frame:00000000000112EA                 db 0FFh
.eh_frame:00000000000112EB                 db 0FFh
.eh_frame:00000000000112EC                 db  18h
.eh_frame:00000000000112ED                 db    0
.eh_frame:00000000000112EE                 db    0
.eh_frame:00000000000112EF                 db    0
.eh_frame:00000000000112F0                 db    0
.eh_frame:00000000000112F1                 db    0
.eh_frame:00000000000112F2                 db    0
.eh_frame:00000000000112F3                 db    0
.eh_frame:00000000000112F4                 db    0
.eh_frame:00000000000112F5                 db    0
.eh_frame:00000000000112F6                 db    0
.eh_frame:00000000000112F7                 db    0
.eh_frame:00000000000112F8                 db  1Ch
.eh_frame:00000000000112F9                 db    0
.eh_frame:00000000000112FA                 db    0
.eh_frame:00000000000112FB                 db    0
.eh_frame:00000000000112FC                 db  9Ch
.eh_frame:00000000000112FD                 db  0Ch
.eh_frame:00000000000112FE                 db    0
.eh_frame:00000000000112FF                 db    0
.eh_frame:0000000000011300                 db 0F0h
.eh_frame:0000000000011301                 db  81h
.eh_frame:0000000000011302                 db 0FFh
.eh_frame:0000000000011303                 db 0FFh
.eh_frame:0000000000011304                 db  4Ah ; J
.eh_frame:0000000000011305                 db    0
.eh_frame:0000000000011306                 db    0
.eh_frame:0000000000011307                 db    0
.eh_frame:0000000000011308                 db    0
.eh_frame:0000000000011309                 db  41h ; A
.eh_frame:000000000001130A                 db  0Eh
.eh_frame:000000000001130B                 db  10h
.eh_frame:000000000001130C                 db  83h
.eh_frame:000000000001130D                 db    2
.eh_frame:000000000001130E                 db  69h ; i
.eh_frame:000000000001130F                 db  0Ah
.eh_frame:0000000000011310                 db  0Eh
.eh_frame:0000000000011311                 db    8
.eh_frame:0000000000011312                 db  46h ; F
.eh_frame:0000000000011313                 db  0Bh
.eh_frame:0000000000011314                 db  59h ; Y
.eh_frame:0000000000011315                 db  0Eh
.eh_frame:0000000000011316                 db    8
.eh_frame:0000000000011317                 db    0
.eh_frame:0000000000011318                 db  10h
.eh_frame:0000000000011319                 db    0
.eh_frame:000000000001131A                 db    0
.eh_frame:000000000001131B                 db    0
.eh_frame:000000000001131C                 db 0BCh
.eh_frame:000000000001131D                 db  0Ch
.eh_frame:000000000001131E                 db    0
.eh_frame:000000000001131F                 db    0
.eh_frame:0000000000011320                 db  20h
.eh_frame:0000000000011321                 db  82h
.eh_frame:0000000000011322                 db 0FFh
.eh_frame:0000000000011323                 db 0FFh
.eh_frame:0000000000011324                 db  19h
.eh_frame:0000000000011325                 db    0
.eh_frame:0000000000011326                 db    0
.eh_frame:0000000000011327                 db    0
.eh_frame:0000000000011328                 db    0
.eh_frame:0000000000011329                 db    0
.eh_frame:000000000001132A                 db    0
.eh_frame:000000000001132B                 db    0
.eh_frame:000000000001132C                 db  18h
.eh_frame:000000000001132D                 db    0
.eh_frame:000000000001132E                 db    0
.eh_frame:000000000001132F                 db    0
.eh_frame:0000000000011330                 db 0D0h
.eh_frame:0000000000011331                 db  0Ch
.eh_frame:0000000000011332                 db    0
.eh_frame:0000000000011333                 db    0
.eh_frame:0000000000011334                 db  2Ch ; ,
.eh_frame:0000000000011335                 db  82h
.eh_frame:0000000000011336                 db 0FFh
.eh_frame:0000000000011337                 db 0FFh
.eh_frame:0000000000011338                 db  19h
.eh_frame:0000000000011339                 db    0
.eh_frame:000000000001133A                 db    0
.eh_frame:000000000001133B                 db    0
.eh_frame:000000000001133C                 db    0
.eh_frame:000000000001133D                 db  41h ; A
.eh_frame:000000000001133E                 db  0Eh
.eh_frame:000000000001133F                 db  10h
.eh_frame:0000000000011340                 db  83h
.eh_frame:0000000000011341                 db    2
.eh_frame:0000000000011342                 db  53h ; S
.eh_frame:0000000000011343                 db  0Eh
.eh_frame:0000000000011344                 db    8
.eh_frame:0000000000011345                 db    0
.eh_frame:0000000000011346                 db    0
.eh_frame:0000000000011347                 db    0
.eh_frame:0000000000011348                 db  10h
.eh_frame:0000000000011349                 db    1
.eh_frame:000000000001134A                 db    0
.eh_frame:000000000001134B                 db    0
.eh_frame:000000000001134C                 db 0ECh
.eh_frame:000000000001134D                 db  0Ch
.eh_frame:000000000001134E                 db    0
.eh_frame:000000000001134F                 db    0
.eh_frame:0000000000011350                 db  30h ; 0
.eh_frame:0000000000011351                 db  82h
.eh_frame:0000000000011352                 db 0FFh
.eh_frame:0000000000011353                 db 0FFh
.eh_frame:0000000000011354                 db  17h
.eh_frame:0000000000011355                 db    4
.eh_frame:0000000000011356                 db    0
.eh_frame:0000000000011357                 db    0
.eh_frame:0000000000011358                 db    0
.eh_frame:0000000000011359                 db  42h ; B
.eh_frame:000000000001135A                 db  0Eh
.eh_frame:000000000001135B                 db  10h
.eh_frame:000000000001135C                 db  8Fh
.eh_frame:000000000001135D                 db    2
.eh_frame:000000000001135E                 db  42h ; B
.eh_frame:000000000001135F                 db  0Eh
.eh_frame:0000000000011360                 db  18h
.eh_frame:0000000000011361                 db  8Eh
.eh_frame:0000000000011362                 db    3
.eh_frame:0000000000011363                 db  42h ; B
.eh_frame:0000000000011364                 db  0Eh
.eh_frame:0000000000011365                 db  20h
.eh_frame:0000000000011366                 db  8Dh
.eh_frame:0000000000011367                 db    4
.eh_frame:0000000000011368                 db  42h ; B
.eh_frame:0000000000011369                 db  0Eh
.eh_frame:000000000001136A                 db  28h ; (
.eh_frame:000000000001136B                 db  8Ch
.eh_frame:000000000001136C                 db    5
.eh_frame:000000000001136D                 db  44h ; D
.eh_frame:000000000001136E                 db  0Eh
.eh_frame:000000000001136F                 db  30h ; 0
.eh_frame:0000000000011370                 db  86h
.eh_frame:0000000000011371                 db    6
.eh_frame:0000000000011372                 db  41h ; A
.eh_frame:0000000000011373                 db  0Eh
.eh_frame:0000000000011374                 db  38h ; 8
.eh_frame:0000000000011375                 db  83h
.eh_frame:0000000000011376                 db    7
.eh_frame:0000000000011377                 db  4Ah ; J
.eh_frame:0000000000011378                 db  0Eh
.eh_frame:0000000000011379                 db  60h ; `
.eh_frame:000000000001137A                 db    2
.eh_frame:000000000001137B                 db 0DDh
.eh_frame:000000000001137C                 db  0Eh
.eh_frame:000000000001137D                 db  68h ; h
.eh_frame:000000000001137E                 db  57h ; W
.eh_frame:000000000001137F                 db  0Eh
.eh_frame:0000000000011380                 db  70h ; p
.eh_frame:0000000000011381                 db  42h ; B
.eh_frame:0000000000011382                 db  0Eh
.eh_frame:0000000000011383                 db  78h ; x
.eh_frame:0000000000011384                 db  42h ; B
.eh_frame:0000000000011385                 db  0Eh
.eh_frame:0000000000011386                 db  80h
.eh_frame:0000000000011387                 db    1
.eh_frame:0000000000011388                 db  42h ; B
.eh_frame:0000000000011389                 db  0Eh
.eh_frame:000000000001138A                 db  88h
.eh_frame:000000000001138B                 db    1
.eh_frame:000000000001138C                 db  42h ; B
.eh_frame:000000000001138D                 db  0Eh
.eh_frame:000000000001138E                 db  90h
.eh_frame:000000000001138F                 db    1
.eh_frame:0000000000011390                 db  53h ; S
.eh_frame:0000000000011391                 db  0Eh
.eh_frame:0000000000011392                 db  60h ; `
.eh_frame:0000000000011393                 db  44h ; D
.eh_frame:0000000000011394                 db  0Ah
.eh_frame:0000000000011395                 db  0Eh
.eh_frame:0000000000011396                 db  38h ; 8
.eh_frame:0000000000011397                 db  41h ; A
.eh_frame:0000000000011398                 db  0Eh
.eh_frame:0000000000011399                 db  30h ; 0
.eh_frame:000000000001139A                 db  41h ; A
.eh_frame:000000000001139B                 db  0Eh
.eh_frame:000000000001139C                 db  28h ; (
.eh_frame:000000000001139D                 db  42h ; B
.eh_frame:000000000001139E                 db  0Eh
.eh_frame:000000000001139F                 db  20h
.eh_frame:00000000000113A0                 db  42h ; B
.eh_frame:00000000000113A1                 db  0Eh
.eh_frame:00000000000113A2                 db  18h
.eh_frame:00000000000113A3                 db  42h ; B
.eh_frame:00000000000113A4                 db  0Eh
.eh_frame:00000000000113A5                 db  10h
.eh_frame:00000000000113A6                 db  42h ; B
.eh_frame:00000000000113A7                 db  0Eh
.eh_frame:00000000000113A8                 db    8
.eh_frame:00000000000113A9                 db  44h ; D
.eh_frame:00000000000113AA                 db  0Bh
.eh_frame:00000000000113AB                 db    2
.eh_frame:00000000000113AC                 db  78h ; x
.eh_frame:00000000000113AD                 db  0Ah
.eh_frame:00000000000113AE                 db  0Eh
.eh_frame:00000000000113AF                 db  68h ; h
.eh_frame:00000000000113B0                 db  48h ; H
.eh_frame:00000000000113B1                 db  0Bh
.eh_frame:00000000000113B2                 db  5Ah ; Z
.eh_frame:00000000000113B3                 db  0Ah
.eh_frame:00000000000113B4                 db  0Eh
.eh_frame:00000000000113B5                 db  38h ; 8
.eh_frame:00000000000113B6                 db  47h ; G
.eh_frame:00000000000113B7                 db  0Eh
.eh_frame:00000000000113B8                 db  30h ; 0
.eh_frame:00000000000113B9                 db  41h ; A
.eh_frame:00000000000113BA                 db  0Eh
.eh_frame:00000000000113BB                 db  28h ; (
.eh_frame:00000000000113BC                 db  42h ; B
.eh_frame:00000000000113BD                 db  0Eh
.eh_frame:00000000000113BE                 db  20h
.eh_frame:00000000000113BF                 db  42h ; B
.eh_frame:00000000000113C0                 db  0Eh
.eh_frame:00000000000113C1                 db  18h
.eh_frame:00000000000113C2                 db  42h ; B
.eh_frame:00000000000113C3                 db  0Eh
.eh_frame:00000000000113C4                 db  10h
.eh_frame:00000000000113C5                 db  42h ; B
.eh_frame:00000000000113C6                 db  0Eh
.eh_frame:00000000000113C7                 db    8
.eh_frame:00000000000113C8                 db  56h ; V
.eh_frame:00000000000113C9                 db  0Bh
.eh_frame:00000000000113CA                 db  5Eh ; ^
.eh_frame:00000000000113CB                 db  0Ah
.eh_frame:00000000000113CC                 db  0Eh
.eh_frame:00000000000113CD                 db  38h ; 8
.eh_frame:00000000000113CE                 db  52h ; R
.eh_frame:00000000000113CF                 db  0Eh
.eh_frame:00000000000113D0                 db  30h ; 0
.eh_frame:00000000000113D1                 db  41h ; A
.eh_frame:00000000000113D2                 db  0Eh
.eh_frame:00000000000113D3                 db  28h ; (
.eh_frame:00000000000113D4                 db  42h ; B
.eh_frame:00000000000113D5                 db  0Eh
.eh_frame:00000000000113D6                 db  20h
.eh_frame:00000000000113D7                 db  42h ; B
.eh_frame:00000000000113D8                 db  0Eh
.eh_frame:00000000000113D9                 db  18h
.eh_frame:00000000000113DA                 db  42h ; B
.eh_frame:00000000000113DB                 db  0Eh
.eh_frame:00000000000113DC                 db  10h
.eh_frame:00000000000113DD                 db  42h ; B
.eh_frame:00000000000113DE                 db  0Eh
.eh_frame:00000000000113DF                 db    8
.eh_frame:00000000000113E0                 db  4Fh ; O
.eh_frame:00000000000113E1                 db  0Bh
.eh_frame:00000000000113E2                 db  62h ; b
.eh_frame:00000000000113E3                 db  0Ah
.eh_frame:00000000000113E4                 db  0Eh
.eh_frame:00000000000113E5                 db  38h ; 8
.eh_frame:00000000000113E6                 db  50h ; P
.eh_frame:00000000000113E7                 db  0Eh
.eh_frame:00000000000113E8                 db  30h ; 0
.eh_frame:00000000000113E9                 db  41h ; A
.eh_frame:00000000000113EA                 db  0Eh
.eh_frame:00000000000113EB                 db  28h ; (
.eh_frame:00000000000113EC                 db  42h ; B
.eh_frame:00000000000113ED                 db  0Eh
.eh_frame:00000000000113EE                 db  20h
.eh_frame:00000000000113EF                 db  42h ; B
.eh_frame:00000000000113F0                 db  0Eh
.eh_frame:00000000000113F1                 db  18h
.eh_frame:00000000000113F2                 db  42h ; B
.eh_frame:00000000000113F3                 db  0Eh
.eh_frame:00000000000113F4                 db  10h
.eh_frame:00000000000113F5                 db  42h ; B
.eh_frame:00000000000113F6                 db  0Eh
.eh_frame:00000000000113F7                 db    8
.eh_frame:00000000000113F8                 db  55h ; U
.eh_frame:00000000000113F9                 db  0Bh
.eh_frame:00000000000113FA                 db  66h ; f
.eh_frame:00000000000113FB                 db  0Eh
.eh_frame:00000000000113FC                 db  68h ; h
.eh_frame:00000000000113FD                 db  42h ; B
.eh_frame:00000000000113FE                 db  0Eh
.eh_frame:00000000000113FF                 db  70h ; p
.eh_frame:0000000000011400                 db  5Ch ; \
.eh_frame:0000000000011401                 db  0Eh
.eh_frame:0000000000011402                 db  68h ; h
.eh_frame:0000000000011403                 db  41h ; A
.eh_frame:0000000000011404                 db  0Eh
.eh_frame:0000000000011405                 db  60h ; `
.eh_frame:0000000000011406                 db  44h ; D
.eh_frame:0000000000011407                 db  0Ah
.eh_frame:0000000000011408                 db  0Eh
.eh_frame:0000000000011409                 db  38h ; 8
.eh_frame:000000000001140A                 db  41h ; A
.eh_frame:000000000001140B                 db  0Eh
.eh_frame:000000000001140C                 db  30h ; 0
.eh_frame:000000000001140D                 db  41h ; A
.eh_frame:000000000001140E                 db  0Eh
.eh_frame:000000000001140F                 db  28h ; (
.eh_frame:0000000000011410                 db  42h ; B
.eh_frame:0000000000011411                 db  0Eh
.eh_frame:0000000000011412                 db  20h
.eh_frame:0000000000011413                 db  42h ; B
.eh_frame:0000000000011414                 db  0Eh
.eh_frame:0000000000011415                 db  18h
.eh_frame:0000000000011416                 db  42h ; B
.eh_frame:0000000000011417                 db  0Eh
.eh_frame:0000000000011418                 db  10h
.eh_frame:0000000000011419                 db  42h ; B
.eh_frame:000000000001141A                 db  0Eh
.eh_frame:000000000001141B                 db    8
.eh_frame:000000000001141C                 db  45h ; E
.eh_frame:000000000001141D                 db  0Bh
.eh_frame:000000000001141E                 db  68h ; h
.eh_frame:000000000001141F                 db  0Ah
.eh_frame:0000000000011420                 db  0Eh
.eh_frame:0000000000011421                 db  68h ; h
.eh_frame:0000000000011422                 db  48h ; H
.eh_frame:0000000000011423                 db  0Bh
.eh_frame:0000000000011424                 db  72h ; r
.eh_frame:0000000000011425                 db  0Eh
.eh_frame:0000000000011426                 db  68h ; h
.eh_frame:0000000000011427                 db  45h ; E
.eh_frame:0000000000011428                 db  0Eh
.eh_frame:0000000000011429                 db  70h ; p
.eh_frame:000000000001142A                 db  42h ; B
.eh_frame:000000000001142B                 db  0Eh
.eh_frame:000000000001142C                 db  78h ; x
.eh_frame:000000000001142D                 db  42h ; B
.eh_frame:000000000001142E                 db  0Eh
.eh_frame:000000000001142F                 db  80h
.eh_frame:0000000000011430                 db    1
.eh_frame:0000000000011431                 db  5Eh ; ^
.eh_frame:0000000000011432                 db  0Eh
.eh_frame:0000000000011433                 db  60h ; `
.eh_frame:0000000000011434                 db  44h ; D
.eh_frame:0000000000011435                 db  0Ah
.eh_frame:0000000000011436                 db  0Eh
.eh_frame:0000000000011437                 db  38h ; 8
.eh_frame:0000000000011438                 db  41h ; A
.eh_frame:0000000000011439                 db  0Eh
.eh_frame:000000000001143A                 db  30h ; 0
.eh_frame:000000000001143B                 db  41h ; A
.eh_frame:000000000001143C                 db  0Eh
.eh_frame:000000000001143D                 db  28h ; (
.eh_frame:000000000001143E                 db  42h ; B
.eh_frame:000000000001143F                 db  0Eh
.eh_frame:0000000000011440                 db  20h
.eh_frame:0000000000011441                 db  42h ; B
.eh_frame:0000000000011442                 db  0Eh
.eh_frame:0000000000011443                 db  18h
.eh_frame:0000000000011444                 db  42h ; B
.eh_frame:0000000000011445                 db  0Eh
.eh_frame:0000000000011446                 db  10h
.eh_frame:0000000000011447                 db  42h ; B
.eh_frame:0000000000011448                 db  0Eh
.eh_frame:0000000000011449                 db    8
.eh_frame:000000000001144A                 db  41h ; A
.eh_frame:000000000001144B                 db  0Bh
.eh_frame:000000000001144C                 db  79h ; y
.eh_frame:000000000001144D                 db  0Ah
.eh_frame:000000000001144E                 db  0Eh
.eh_frame:000000000001144F                 db  68h ; h
.eh_frame:0000000000011450                 db  42h ; B
.eh_frame:0000000000011451                 db  0Eh
.eh_frame:0000000000011452                 db  70h ; p
.eh_frame:0000000000011453                 db  42h ; B
.eh_frame:0000000000011454                 db  0Eh
.eh_frame:0000000000011455                 db  78h ; x
.eh_frame:0000000000011456                 db  42h ; B
.eh_frame:0000000000011457                 db  0Eh
.eh_frame:0000000000011458                 db  80h
.eh_frame:0000000000011459                 db    1
.eh_frame:000000000001145A                 db  51h ; Q
.eh_frame:000000000001145B                 db  0Bh
.eh_frame:000000000001145C                 db  10h
.eh_frame:000000000001145D                 db    0
.eh_frame:000000000001145E                 db    0
.eh_frame:000000000001145F                 db    0
.eh_frame:0000000000011460                 db    0
.eh_frame:0000000000011461                 db  0Eh
.eh_frame:0000000000011462                 db    0
.eh_frame:0000000000011463                 db    0
.eh_frame:0000000000011464                 db  3Ch ; <
.eh_frame:0000000000011465                 db  85h
.eh_frame:0000000000011466                 db 0FFh
.eh_frame:0000000000011467                 db 0FFh
.eh_frame:0000000000011468                 db  20h
.eh_frame:0000000000011469                 db    0
.eh_frame:000000000001146A                 db    0
.eh_frame:000000000001146B                 db    0
.eh_frame:000000000001146C                 db    0
.eh_frame:000000000001146D                 db    0
.eh_frame:000000000001146E                 db    0
.eh_frame:000000000001146F                 db    0
.eh_frame:0000000000011470                 db  18h
.eh_frame:0000000000011471                 db    0
.eh_frame:0000000000011472                 db    0
.eh_frame:0000000000011473                 db    0
.eh_frame:0000000000011474                 db  14h
.eh_frame:0000000000011475                 db  0Eh
.eh_frame:0000000000011476                 db    0
.eh_frame:0000000000011477                 db    0
.eh_frame:0000000000011478                 db  48h ; H
.eh_frame:0000000000011479                 db  85h
.eh_frame:000000000001147A                 db 0FFh
.eh_frame:000000000001147B                 db 0FFh
.eh_frame:000000000001147C                 db  78h ; x
.eh_frame:000000000001147D                 db    0
.eh_frame:000000000001147E                 db    0
.eh_frame:000000000001147F                 db    0
.eh_frame:0000000000011480                 db    0
.eh_frame:0000000000011481                 db  44h ; D
.eh_frame:0000000000011482                 db  0Eh
.eh_frame:0000000000011483                 db  70h ; p
.eh_frame:0000000000011484                 db    2
.eh_frame:0000000000011485                 db  60h ; `
.eh_frame:0000000000011486                 db  0Ah
.eh_frame:0000000000011487                 db  0Eh
.eh_frame:0000000000011488                 db    8
.eh_frame:0000000000011489                 db  41h ; A
.eh_frame:000000000001148A                 db  0Bh
.eh_frame:000000000001148B                 db    0
.eh_frame:000000000001148C                 db  28h ; (
.eh_frame:000000000001148D                 db    0
.eh_frame:000000000001148E                 db    0
.eh_frame:000000000001148F                 db    0
.eh_frame:0000000000011490                 db  30h ; 0
.eh_frame:0000000000011491                 db  0Eh
.eh_frame:0000000000011492                 db    0
.eh_frame:0000000000011493                 db    0
.eh_frame:0000000000011494                 db 0ACh
.eh_frame:0000000000011495                 db  85h
.eh_frame:0000000000011496                 db 0FFh
.eh_frame:0000000000011497                 db 0FFh
.eh_frame:0000000000011498                 db 0D5h
.eh_frame:0000000000011499                 db    0
.eh_frame:000000000001149A                 db    0
.eh_frame:000000000001149B                 db    0
.eh_frame:000000000001149C                 db    0
.eh_frame:000000000001149D                 db  41h ; A
.eh_frame:000000000001149E                 db  0Eh
.eh_frame:000000000001149F                 db  10h
.eh_frame:00000000000114A0                 db  86h
.eh_frame:00000000000114A1                 db    2
.eh_frame:00000000000114A2                 db  41h ; A
.eh_frame:00000000000114A3                 db  0Eh
.eh_frame:00000000000114A4                 db  18h
.eh_frame:00000000000114A5                 db  83h
.eh_frame:00000000000114A6                 db    3
.eh_frame:00000000000114A7                 db  50h ; P
.eh_frame:00000000000114A8                 db  0Eh
.eh_frame:00000000000114A9                 db 0D0h
.eh_frame:00000000000114AA                 db    1
.eh_frame:00000000000114AB                 db    2
.eh_frame:00000000000114AC                 db 0ABh
.eh_frame:00000000000114AD                 db  0Ah
.eh_frame:00000000000114AE                 db  0Eh
.eh_frame:00000000000114AF                 db  18h
.eh_frame:00000000000114B0                 db  41h ; A
.eh_frame:00000000000114B1                 db  0Eh
.eh_frame:00000000000114B2                 db  10h
.eh_frame:00000000000114B3                 db  41h ; A
.eh_frame:00000000000114B4                 db  0Eh
.eh_frame:00000000000114B5                 db    8
.eh_frame:00000000000114B6                 db  41h ; A
.eh_frame:00000000000114B7                 db  0Bh
.eh_frame:00000000000114B8                 db  1Ch
.eh_frame:00000000000114B9                 db    0
.eh_frame:00000000000114BA                 db    0
.eh_frame:00000000000114BB                 db    0
.eh_frame:00000000000114BC                 db  5Ch ; \
.eh_frame:00000000000114BD                 db  0Eh
.eh_frame:00000000000114BE                 db    0
.eh_frame:00000000000114BF                 db    0
.eh_frame:00000000000114C0                 db  60h ; `
.eh_frame:00000000000114C1                 db  86h
.eh_frame:00000000000114C2                 db 0FFh
.eh_frame:00000000000114C3                 db 0FFh
.eh_frame:00000000000114C4                 db  80h
.eh_frame:00000000000114C5                 db    0
.eh_frame:00000000000114C6                 db    0
.eh_frame:00000000000114C7                 db    0
.eh_frame:00000000000114C8                 db    0
.eh_frame:00000000000114C9                 db  41h ; A
.eh_frame:00000000000114CA                 db  0Eh
.eh_frame:00000000000114CB                 db  10h
.eh_frame:00000000000114CC                 db  83h
.eh_frame:00000000000114CD                 db    2
.eh_frame:00000000000114CE                 db    2
.eh_frame:00000000000114CF                 db  7Ah ; z
.eh_frame:00000000000114D0                 db  0Eh
.eh_frame:00000000000114D1                 db    8
.eh_frame:00000000000114D2                 db    0
.eh_frame:00000000000114D3                 db    0
.eh_frame:00000000000114D4                 db    0
.eh_frame:00000000000114D5                 db    0
.eh_frame:00000000000114D6                 db    0
.eh_frame:00000000000114D7                 db    0
.eh_frame:00000000000114D8                 db  18h
.eh_frame:00000000000114D9                 db    0
.eh_frame:00000000000114DA                 db    0
.eh_frame:00000000000114DB                 db    0
.eh_frame:00000000000114DC                 db  7Ch ; |
.eh_frame:00000000000114DD                 db  0Eh
.eh_frame:00000000000114DE                 db    0
.eh_frame:00000000000114DF                 db    0
.eh_frame:00000000000114E0                 db 0C0h
.eh_frame:00000000000114E1                 db  86h
.eh_frame:00000000000114E2                 db 0FFh
.eh_frame:00000000000114E3                 db 0FFh
.eh_frame:00000000000114E4                 db  1Ah
.eh_frame:00000000000114E5                 db    0
.eh_frame:00000000000114E6                 db    0
.eh_frame:00000000000114E7                 db    0
.eh_frame:00000000000114E8                 db    0
.eh_frame:00000000000114E9                 db  41h ; A
.eh_frame:00000000000114EA                 db  0Eh
.eh_frame:00000000000114EB                 db  10h
.eh_frame:00000000000114EC                 db  83h
.eh_frame:00000000000114ED                 db    2
.eh_frame:00000000000114EE                 db  53h ; S
.eh_frame:00000000000114EF                 db  0Ah
.eh_frame:00000000000114F0                 db  0Eh
.eh_frame:00000000000114F1                 db    8
.eh_frame:00000000000114F2                 db  41h ; A
.eh_frame:00000000000114F3                 db  0Bh
.eh_frame:00000000000114F4                 db  10h
.eh_frame:00000000000114F5                 db    0
.eh_frame:00000000000114F6                 db    0
.eh_frame:00000000000114F7                 db    0
.eh_frame:00000000000114F8                 db  98h
.eh_frame:00000000000114F9                 db  0Eh
.eh_frame:00000000000114FA                 db    0
.eh_frame:00000000000114FB                 db    0
.eh_frame:00000000000114FC                 db 0C4h
.eh_frame:00000000000114FD                 db  86h
.eh_frame:00000000000114FE                 db 0FFh
.eh_frame:00000000000114FF                 db 0FFh
.eh_frame:0000000000011500                 db  24h ; $
.eh_frame:0000000000011501                 db    0
.eh_frame:0000000000011502                 db    0
.eh_frame:0000000000011503                 db    0
.eh_frame:0000000000011504                 db    0
.eh_frame:0000000000011505                 db  5Fh ; _
.eh_frame:0000000000011506                 db  0Eh
.eh_frame:0000000000011507                 db  10h
.eh_frame:0000000000011508                 db  10h
.eh_frame:0000000000011509                 db    0
.eh_frame:000000000001150A                 db    0
.eh_frame:000000000001150B                 db    0
.eh_frame:000000000001150C                 db 0ACh
.eh_frame:000000000001150D                 db  0Eh
.eh_frame:000000000001150E                 db    0
.eh_frame:000000000001150F                 db    0
.eh_frame:0000000000011510                 db 0E0h
.eh_frame:0000000000011511                 db  86h
.eh_frame:0000000000011512                 db 0FFh
.eh_frame:0000000000011513                 db 0FFh
.eh_frame:0000000000011514                 db    2
.eh_frame:0000000000011515                 db    0
.eh_frame:0000000000011516                 db    0
.eh_frame:0000000000011517                 db    0
.eh_frame:0000000000011518                 db    0
.eh_frame:0000000000011519                 db    0
.eh_frame:000000000001151A                 db    0
.eh_frame:000000000001151B                 db    0
.eh_frame:000000000001151C                 db  20h
.eh_frame:000000000001151D                 db    0
.eh_frame:000000000001151E                 db    0
.eh_frame:000000000001151F                 db    0
.eh_frame:0000000000011520                 db 0C0h
.eh_frame:0000000000011521                 db  0Eh
.eh_frame:0000000000011522                 db    0
.eh_frame:0000000000011523                 db    0
.eh_frame:0000000000011524                 db 0DCh
.eh_frame:0000000000011525                 db  86h
.eh_frame:0000000000011526                 db 0FFh
.eh_frame:0000000000011527                 db 0FFh
.eh_frame:0000000000011528                 db  36h ; 6
.eh_frame:0000000000011529                 db    0
.eh_frame:000000000001152A                 db    0
.eh_frame:000000000001152B                 db    0
.eh_frame:000000000001152C                 db    0
.eh_frame:000000000001152D                 db  44h ; D
.eh_frame:000000000001152E                 db  0Eh
.eh_frame:000000000001152F                 db  10h
.eh_frame:0000000000011530                 db  83h
.eh_frame:0000000000011531                 db    2
.eh_frame:0000000000011532                 db  5Dh ; ]
.eh_frame:0000000000011533                 db  0Ah
.eh_frame:0000000000011534                 db  0Eh
.eh_frame:0000000000011535                 db    8
.eh_frame:0000000000011536                 db  47h ; G
.eh_frame:0000000000011537                 db  0Bh
.eh_frame:0000000000011538                 db  48h ; H
.eh_frame:0000000000011539                 db  0Ah
.eh_frame:000000000001153A                 db  0Eh
.eh_frame:000000000001153B                 db    8
.eh_frame:000000000001153C                 db  41h ; A
.eh_frame:000000000001153D                 db  0Bh
.eh_frame:000000000001153E                 db    0
.eh_frame:000000000001153F                 db    0
.eh_frame:0000000000011540                 db  10h
.eh_frame:0000000000011541                 db    0
.eh_frame:0000000000011542                 db    0
.eh_frame:0000000000011543                 db    0
.eh_frame:0000000000011544                 db 0E4h
.eh_frame:0000000000011545                 db  0Eh
.eh_frame:0000000000011546                 db    0
.eh_frame:0000000000011547                 db    0
.eh_frame:0000000000011548                 db 0F8h
.eh_frame:0000000000011549                 db  86h
.eh_frame:000000000001154A                 db 0FFh
.eh_frame:000000000001154B                 db 0FFh
.eh_frame:000000000001154C                 db  24h ; $
.eh_frame:000000000001154D                 db    0
.eh_frame:000000000001154E                 db    0
.eh_frame:000000000001154F                 db    0
.eh_frame:0000000000011550                 db    0
.eh_frame:0000000000011551                 db  5Fh ; _
.eh_frame:0000000000011552                 db  0Eh
.eh_frame:0000000000011553                 db  10h
.eh_frame:0000000000011554                 db  14h
.eh_frame:0000000000011555                 db    0
.eh_frame:0000000000011556                 db    0
.eh_frame:0000000000011557                 db    0
.eh_frame:0000000000011558                 db 0F8h
.eh_frame:0000000000011559                 db  0Eh
.eh_frame:000000000001155A                 db    0
.eh_frame:000000000001155B                 db    0
.eh_frame:000000000001155C                 db  14h
.eh_frame:000000000001155D                 db  87h
.eh_frame:000000000001155E                 db 0FFh
.eh_frame:000000000001155F                 db 0FFh
.eh_frame:0000000000011560                 db  82h
.eh_frame:0000000000011561                 db    0
.eh_frame:0000000000011562                 db    0
.eh_frame:0000000000011563                 db    0
.eh_frame:0000000000011564                 db    0
.eh_frame:0000000000011565                 db    2
.eh_frame:0000000000011566                 db  5Fh ; _
.eh_frame:0000000000011567                 db  0Eh
.eh_frame:0000000000011568                 db  10h
.eh_frame:0000000000011569                 db  49h ; I
.eh_frame:000000000001156A                 db  0Eh
.eh_frame:000000000001156B                 db    8
.eh_frame:000000000001156C                 db  14h
.eh_frame:000000000001156D                 db    0
.eh_frame:000000000001156E                 db    0
.eh_frame:000000000001156F                 db    0
.eh_frame:0000000000011570                 db  10h
.eh_frame:0000000000011571                 db  0Fh
.eh_frame:0000000000011572                 db    0
.eh_frame:0000000000011573                 db    0
.eh_frame:0000000000011574                 db  8Ch
.eh_frame:0000000000011575                 db  87h
.eh_frame:0000000000011576                 db 0FFh
.eh_frame:0000000000011577                 db 0FFh
.eh_frame:0000000000011578                 db  4Ah ; J
.eh_frame:0000000000011579                 db    0
.eh_frame:000000000001157A                 db    0
.eh_frame:000000000001157B                 db    0
.eh_frame:000000000001157C                 db    0
.eh_frame:000000000001157D                 db    2
.eh_frame:000000000001157E                 db  45h ; E
.eh_frame:000000000001157F                 db  0Eh
.eh_frame:0000000000011580                 db  10h
.eh_frame:0000000000011581                 db    0
.eh_frame:0000000000011582                 db    0
.eh_frame:0000000000011583                 db    0
.eh_frame:0000000000011584                 db  18h
.eh_frame:0000000000011585                 db    0
.eh_frame:0000000000011586                 db    0
.eh_frame:0000000000011587                 db    0
.eh_frame:0000000000011588                 db  28h ; (
.eh_frame:0000000000011589                 db  0Fh
.eh_frame:000000000001158A                 db    0
.eh_frame:000000000001158B                 db    0
.eh_frame:000000000001158C                 db 0C4h
.eh_frame:000000000001158D                 db  87h
.eh_frame:000000000001158E                 db 0FFh
.eh_frame:000000000001158F                 db 0FFh
.eh_frame:0000000000011590                 db  17h
.eh_frame:0000000000011591                 db    0
.eh_frame:0000000000011592                 db    0
.eh_frame:0000000000011593                 db    0
.eh_frame:0000000000011594                 db    0
.eh_frame:0000000000011595                 db  41h ; A
.eh_frame:0000000000011596                 db  0Eh
.eh_frame:0000000000011597                 db  10h
.eh_frame:0000000000011598                 db  83h
.eh_frame:0000000000011599                 db    2
.eh_frame:000000000001159A                 db  51h ; Q
.eh_frame:000000000001159B                 db  0Eh
.eh_frame:000000000001159C                 db    8
.eh_frame:000000000001159D                 db    0
.eh_frame:000000000001159E                 db    0
.eh_frame:000000000001159F                 db    0
.eh_frame:00000000000115A0                 db  18h
.eh_frame:00000000000115A1                 db    0
.eh_frame:00000000000115A2                 db    0
.eh_frame:00000000000115A3                 db    0
.eh_frame:00000000000115A4                 db  44h ; D
.eh_frame:00000000000115A5                 db  0Fh
.eh_frame:00000000000115A6                 db    0
.eh_frame:00000000000115A7                 db    0
.eh_frame:00000000000115A8                 db 0C8h
.eh_frame:00000000000115A9                 db  87h
.eh_frame:00000000000115AA                 db 0FFh
.eh_frame:00000000000115AB                 db 0FFh
.eh_frame:00000000000115AC                 db  2Eh ; .
.eh_frame:00000000000115AD                 db    0
.eh_frame:00000000000115AE                 db    0
.eh_frame:00000000000115AF                 db    0
.eh_frame:00000000000115B0                 db    0
.eh_frame:00000000000115B1                 db  47h ; G
.eh_frame:00000000000115B2                 db  0Eh
.eh_frame:00000000000115B3                 db  10h
.eh_frame:00000000000115B4                 db  61h ; a
.eh_frame:00000000000115B5                 db  0Ah
.eh_frame:00000000000115B6                 db  0Eh
.eh_frame:00000000000115B7                 db    8
.eh_frame:00000000000115B8                 db  41h ; A
.eh_frame:00000000000115B9                 db  0Bh
.eh_frame:00000000000115BA                 db    0
.eh_frame:00000000000115BB                 db    0
.eh_frame:00000000000115BC                 db  24h ; $
.eh_frame:00000000000115BD                 db    0
.eh_frame:00000000000115BE                 db    0
.eh_frame:00000000000115BF                 db    0
.eh_frame:00000000000115C0                 db  60h ; `
.eh_frame:00000000000115C1                 db  0Fh
.eh_frame:00000000000115C2                 db    0
.eh_frame:00000000000115C3                 db    0
.eh_frame:00000000000115C4                 db 0DCh
.eh_frame:00000000000115C5                 db  87h
.eh_frame:00000000000115C6                 db 0FFh
.eh_frame:00000000000115C7                 db 0FFh
.eh_frame:00000000000115C8                 db  28h ; (
.eh_frame:00000000000115C9                 db    0
.eh_frame:00000000000115CA                 db    0
.eh_frame:00000000000115CB                 db    0
.eh_frame:00000000000115CC                 db    0
.eh_frame:00000000000115CD                 db  41h ; A
.eh_frame:00000000000115CE                 db  0Eh
.eh_frame:00000000000115CF                 db  10h
.eh_frame:00000000000115D0                 db  86h
.eh_frame:00000000000115D1                 db    2
.eh_frame:00000000000115D2                 db  41h ; A
.eh_frame:00000000000115D3                 db  0Eh
.eh_frame:00000000000115D4                 db  18h
.eh_frame:00000000000115D5                 db  83h
.eh_frame:00000000000115D6                 db    3
.eh_frame:00000000000115D7                 db  4Dh ; M
.eh_frame:00000000000115D8                 db  0Eh
.eh_frame:00000000000115D9                 db  20h
.eh_frame:00000000000115DA                 db  49h ; I
.eh_frame:00000000000115DB                 db  0Eh
.eh_frame:00000000000115DC                 db  18h
.eh_frame:00000000000115DD                 db  47h ; G
.eh_frame:00000000000115DE                 db  0Eh
.eh_frame:00000000000115DF                 db  10h
.eh_frame:00000000000115E0                 db  41h ; A
.eh_frame:00000000000115E1                 db  0Eh
.eh_frame:00000000000115E2                 db    8
.eh_frame:00000000000115E3                 db    0
.eh_frame:00000000000115E4                 db  18h
.eh_frame:00000000000115E5                 db    0
.eh_frame:00000000000115E6                 db    0
.eh_frame:00000000000115E7                 db    0
.eh_frame:00000000000115E8                 db  88h
.eh_frame:00000000000115E9                 db  0Fh
.eh_frame:00000000000115EA                 db    0
.eh_frame:00000000000115EB                 db    0
.eh_frame:00000000000115EC                 db 0E4h
.eh_frame:00000000000115ED                 db  87h
.eh_frame:00000000000115EE                 db 0FFh
.eh_frame:00000000000115EF                 db 0FFh
.eh_frame:00000000000115F0                 db  13h
.eh_frame:00000000000115F1                 db    0
.eh_frame:00000000000115F2                 db    0
.eh_frame:00000000000115F3                 db    0
.eh_frame:00000000000115F4                 db    0
.eh_frame:00000000000115F5                 db  41h ; A
.eh_frame:00000000000115F6                 db  0Eh
.eh_frame:00000000000115F7                 db  10h
.eh_frame:00000000000115F8                 db  83h
.eh_frame:00000000000115F9                 db    2
.eh_frame:00000000000115FA                 db  50h ; P
.eh_frame:00000000000115FB                 db  0Eh
.eh_frame:00000000000115FC                 db    8
.eh_frame:00000000000115FD                 db    0
.eh_frame:00000000000115FE                 db    0
.eh_frame:00000000000115FF                 db    0
.eh_frame:0000000000011600                 db  14h
.eh_frame:0000000000011601                 db    0
.eh_frame:0000000000011602                 db    0
.eh_frame:0000000000011603                 db    0
.eh_frame:0000000000011604                 db 0A4h
.eh_frame:0000000000011605                 db  0Fh
.eh_frame:0000000000011606                 db    0
.eh_frame:0000000000011607                 db    0
.eh_frame:0000000000011608                 db 0E8h
.eh_frame:0000000000011609                 db  87h
.eh_frame:000000000001160A                 db 0FFh
.eh_frame:000000000001160B                 db 0FFh
.eh_frame:000000000001160C                 db  35h ; 5
.eh_frame:000000000001160D                 db    0
.eh_frame:000000000001160E                 db    0
.eh_frame:000000000001160F                 db    0
.eh_frame:0000000000011610                 db    0
.eh_frame:0000000000011611                 db  4Bh ; K
.eh_frame:0000000000011612                 db  0Eh
.eh_frame:0000000000011613                 db  10h
.eh_frame:0000000000011614                 db    0
.eh_frame:0000000000011615                 db    0
.eh_frame:0000000000011616                 db    0
.eh_frame:0000000000011617                 db    0
.eh_frame:0000000000011618                 db  1Ch
.eh_frame:0000000000011619                 db    0
.eh_frame:000000000001161A                 db    0
.eh_frame:000000000001161B                 db    0
.eh_frame:000000000001161C                 db 0BCh
.eh_frame:000000000001161D                 db  0Fh
.eh_frame:000000000001161E                 db    0
.eh_frame:000000000001161F                 db    0
.eh_frame:0000000000011620                 db  10h
.eh_frame:0000000000011621                 db  88h
.eh_frame:0000000000011622                 db 0FFh
.eh_frame:0000000000011623                 db 0FFh
.eh_frame:0000000000011624                 db  2Fh ; /
.eh_frame:0000000000011625                 db    0
.eh_frame:0000000000011626                 db    0
.eh_frame:0000000000011627                 db    0
.eh_frame:0000000000011628                 db    0
.eh_frame:0000000000011629                 db  41h ; A
.eh_frame:000000000001162A                 db  0Eh
.eh_frame:000000000001162B                 db  10h
.eh_frame:000000000001162C                 db  83h
.eh_frame:000000000001162D                 db    2
.eh_frame:000000000001162E                 db  55h ; U
.eh_frame:000000000001162F                 db  0Ah
.eh_frame:0000000000011630                 db  0Eh
.eh_frame:0000000000011631                 db    8
.eh_frame:0000000000011632                 db  4Ah ; J
.eh_frame:0000000000011633                 db  0Bh
.eh_frame:0000000000011634                 db    0
.eh_frame:0000000000011635                 db    0
.eh_frame:0000000000011636                 db    0
.eh_frame:0000000000011637                 db    0
.eh_frame:0000000000011638                 db  1Ch
.eh_frame:0000000000011639                 db    0
.eh_frame:000000000001163A                 db    0
.eh_frame:000000000001163B                 db    0
.eh_frame:000000000001163C                 db 0DCh
.eh_frame:000000000001163D                 db  0Fh
.eh_frame:000000000001163E                 db    0
.eh_frame:000000000001163F                 db    0
.eh_frame:0000000000011640                 db  20h
.eh_frame:0000000000011641                 db  88h
.eh_frame:0000000000011642                 db 0FFh
.eh_frame:0000000000011643                 db 0FFh
.eh_frame:0000000000011644                 db 0B6h
.eh_frame:0000000000011645                 db    0
.eh_frame:0000000000011646                 db    0
.eh_frame:0000000000011647                 db    0
.eh_frame:0000000000011648                 db    0
.eh_frame:0000000000011649                 db  47h ; G
.eh_frame:000000000001164A                 db  0Eh
.eh_frame:000000000001164B                 db 0E0h
.eh_frame:000000000001164C                 db    1
.eh_frame:000000000001164D                 db    2
.eh_frame:000000000001164E                 db 0A9h
.eh_frame:000000000001164F                 db  0Ah
.eh_frame:0000000000011650                 db  0Eh
.eh_frame:0000000000011651                 db    8
.eh_frame:0000000000011652                 db  41h ; A
.eh_frame:0000000000011653                 db  0Bh
.eh_frame:0000000000011654                 db    0
.eh_frame:0000000000011655                 db    0
.eh_frame:0000000000011656                 db    0
.eh_frame:0000000000011657                 db    0
.eh_frame:0000000000011658                 db  18h
.eh_frame:0000000000011659                 db    0
.eh_frame:000000000001165A                 db    0
.eh_frame:000000000001165B                 db    0
.eh_frame:000000000001165C                 db 0FCh
.eh_frame:000000000001165D                 db  0Fh
.eh_frame:000000000001165E                 db    0
.eh_frame:000000000001165F                 db    0
.eh_frame:0000000000011660                 db 0C0h
.eh_frame:0000000000011661                 db  88h
.eh_frame:0000000000011662                 db 0FFh
.eh_frame:0000000000011663                 db 0FFh
.eh_frame:0000000000011664                 db  41h ; A
.eh_frame:0000000000011665                 db    0
.eh_frame:0000000000011666                 db    0
.eh_frame:0000000000011667                 db    0
.eh_frame:0000000000011668                 db    0
.eh_frame:0000000000011669                 db  4Ah ; J
.eh_frame:000000000001166A                 db  0Eh
.eh_frame:000000000001166B                 db  10h
.eh_frame:000000000001166C                 db  4Dh ; M
.eh_frame:000000000001166D                 db  0Eh
.eh_frame:000000000001166E                 db    8
.eh_frame:000000000001166F                 db  4Bh ; K
.eh_frame:0000000000011670                 db  0Eh
.eh_frame:0000000000011671                 db  10h
.eh_frame:0000000000011672                 db    0
.eh_frame:0000000000011673                 db    0
.eh_frame:0000000000011674                 db  28h ; (
.eh_frame:0000000000011675                 db    0
.eh_frame:0000000000011676                 db    0
.eh_frame:0000000000011677                 db    0
.eh_frame:0000000000011678                 db  18h
.eh_frame:0000000000011679                 db  10h
.eh_frame:000000000001167A                 db    0
.eh_frame:000000000001167B                 db    0
.eh_frame:000000000001167C                 db 0F4h
.eh_frame:000000000001167D                 db  88h
.eh_frame:000000000001167E                 db 0FFh
.eh_frame:000000000001167F                 db 0FFh
.eh_frame:0000000000011680                 db  37h ; 7
.eh_frame:0000000000011681                 db    0
.eh_frame:0000000000011682                 db    0
.eh_frame:0000000000011683                 db    0
.eh_frame:0000000000011684                 db    0
.eh_frame:0000000000011685                 db  41h ; A
.eh_frame:0000000000011686                 db  0Eh
.eh_frame:0000000000011687                 db  10h
.eh_frame:0000000000011688                 db  86h
.eh_frame:0000000000011689                 db    2
.eh_frame:000000000001168A                 db  41h ; A
.eh_frame:000000000001168B                 db  0Eh
.eh_frame:000000000001168C                 db  18h
.eh_frame:000000000001168D                 db  83h
.eh_frame:000000000001168E                 db    3
.eh_frame:000000000001168F                 db  4Eh ; N
.eh_frame:0000000000011690                 db  0Eh
.eh_frame:0000000000011691                 db  20h
.eh_frame:0000000000011692                 db  5Dh ; ]
.eh_frame:0000000000011693                 db  0Ah
.eh_frame:0000000000011694                 db  0Eh
.eh_frame:0000000000011695                 db  18h
.eh_frame:0000000000011696                 db  41h ; A
.eh_frame:0000000000011697                 db  0Eh
.eh_frame:0000000000011698                 db  10h
.eh_frame:0000000000011699                 db  41h ; A
.eh_frame:000000000001169A                 db  0Eh
.eh_frame:000000000001169B                 db    8
.eh_frame:000000000001169C                 db  41h ; A
.eh_frame:000000000001169D                 db  0Bh
.eh_frame:000000000001169E                 db    0
.eh_frame:000000000001169F                 db    0
.eh_frame:00000000000116A0                 db  4Ch ; L
.eh_frame:00000000000116A1                 db    0
.eh_frame:00000000000116A2                 db    0
.eh_frame:00000000000116A3                 db    0
.eh_frame:00000000000116A4                 db  44h ; D
.eh_frame:00000000000116A5                 db  10h
.eh_frame:00000000000116A6                 db    0
.eh_frame:00000000000116A7                 db    0
.eh_frame:00000000000116A8                 db    8
.eh_frame:00000000000116A9                 db  89h
.eh_frame:00000000000116AA                 db 0FFh
.eh_frame:00000000000116AB                 db 0FFh
.eh_frame:00000000000116AC                 db 0D2h
.eh_frame:00000000000116AD                 db    2
.eh_frame:00000000000116AE                 db    0
.eh_frame:00000000000116AF                 db    0
.eh_frame:00000000000116B0                 db    0
.eh_frame:00000000000116B1                 db  42h ; B
.eh_frame:00000000000116B2                 db  0Eh
.eh_frame:00000000000116B3                 db  10h
.eh_frame:00000000000116B4                 db  8Fh
.eh_frame:00000000000116B5                 db    2
.eh_frame:00000000000116B6                 db  42h ; B
.eh_frame:00000000000116B7                 db  0Eh
.eh_frame:00000000000116B8                 db  18h
.eh_frame:00000000000116B9                 db  8Eh
.eh_frame:00000000000116BA                 db    3
.eh_frame:00000000000116BB                 db  42h ; B
.eh_frame:00000000000116BC                 db  0Eh
.eh_frame:00000000000116BD                 db  20h
.eh_frame:00000000000116BE                 db  8Dh
.eh_frame:00000000000116BF                 db    4
.eh_frame:00000000000116C0                 db  42h ; B
.eh_frame:00000000000116C1                 db  0Eh
.eh_frame:00000000000116C2                 db  28h ; (
.eh_frame:00000000000116C3                 db  8Ch
.eh_frame:00000000000116C4                 db    5
.eh_frame:00000000000116C5                 db  41h ; A
.eh_frame:00000000000116C6                 db  0Eh
.eh_frame:00000000000116C7                 db  30h ; 0
.eh_frame:00000000000116C8                 db  86h
.eh_frame:00000000000116C9                 db    6
.eh_frame:00000000000116CA                 db  41h ; A
.eh_frame:00000000000116CB                 db  0Eh
.eh_frame:00000000000116CC                 db  38h ; 8
.eh_frame:00000000000116CD                 db  83h
.eh_frame:00000000000116CE                 db    7
.eh_frame:00000000000116CF                 db  47h ; G
.eh_frame:00000000000116D0                 db  0Eh
.eh_frame:00000000000116D1                 db  50h ; P
.eh_frame:00000000000116D2                 db    2
.eh_frame:00000000000116D3                 db  42h ; B
.eh_frame:00000000000116D4                 db  0Ah
.eh_frame:00000000000116D5                 db  0Eh
.eh_frame:00000000000116D6                 db  38h ; 8
.eh_frame:00000000000116D7                 db  41h ; A
.eh_frame:00000000000116D8                 db  0Eh
.eh_frame:00000000000116D9                 db  30h ; 0
.eh_frame:00000000000116DA                 db  41h ; A
.eh_frame:00000000000116DB                 db  0Eh
.eh_frame:00000000000116DC                 db  28h ; (
.eh_frame:00000000000116DD                 db  42h ; B
.eh_frame:00000000000116DE                 db  0Eh
.eh_frame:00000000000116DF                 db  20h
.eh_frame:00000000000116E0                 db  42h ; B
.eh_frame:00000000000116E1                 db  0Eh
.eh_frame:00000000000116E2                 db  18h
.eh_frame:00000000000116E3                 db  42h ; B
.eh_frame:00000000000116E4                 db  0Eh
.eh_frame:00000000000116E5                 db  10h
.eh_frame:00000000000116E6                 db  42h ; B
.eh_frame:00000000000116E7                 db  0Eh
.eh_frame:00000000000116E8                 db    8
.eh_frame:00000000000116E9                 db  43h ; C
.eh_frame:00000000000116EA                 db  0Bh
.eh_frame:00000000000116EB                 db    0
.eh_frame:00000000000116EC                 db    0
.eh_frame:00000000000116ED                 db    0
.eh_frame:00000000000116EE                 db    0
.eh_frame:00000000000116EF                 db    0
.eh_frame:00000000000116F0                 db  3Ch ; <
.eh_frame:00000000000116F1                 db    0
.eh_frame:00000000000116F2                 db    0
.eh_frame:00000000000116F3                 db    0
.eh_frame:00000000000116F4                 db  94h
.eh_frame:00000000000116F5                 db  10h
.eh_frame:00000000000116F6                 db    0
.eh_frame:00000000000116F7                 db    0
.eh_frame:00000000000116F8                 db  98h
.eh_frame:00000000000116F9                 db  8Bh
.eh_frame:00000000000116FA                 db 0FFh
.eh_frame:00000000000116FB                 db 0FFh
.eh_frame:00000000000116FC                 db  83h
.eh_frame:00000000000116FD                 db    0
.eh_frame:00000000000116FE                 db    0
.eh_frame:00000000000116FF                 db    0
.eh_frame:0000000000011700                 db    0
.eh_frame:0000000000011701                 db  42h ; B
.eh_frame:0000000000011702                 db  0Eh
.eh_frame:0000000000011703                 db  10h
.eh_frame:0000000000011704                 db  8Dh
.eh_frame:0000000000011705                 db    2
.eh_frame:0000000000011706                 db  42h ; B
.eh_frame:0000000000011707                 db  0Eh
.eh_frame:0000000000011708                 db  18h
.eh_frame:0000000000011709                 db  8Ch
.eh_frame:000000000001170A                 db    3
.eh_frame:000000000001170B                 db  44h ; D
.eh_frame:000000000001170C                 db  0Eh
.eh_frame:000000000001170D                 db  20h
.eh_frame:000000000001170E                 db  86h
.eh_frame:000000000001170F                 db    4
.eh_frame:0000000000011710                 db  41h ; A
.eh_frame:0000000000011711                 db  0Eh
.eh_frame:0000000000011712                 db  28h ; (
.eh_frame:0000000000011713                 db  83h
.eh_frame:0000000000011714                 db    5
.eh_frame:0000000000011715                 db  4Ah ; J
.eh_frame:0000000000011716                 db  0Eh
.eh_frame:0000000000011717                 db  40h ; @
.eh_frame:0000000000011718                 db    2
.eh_frame:0000000000011719                 db  64h ; d
.eh_frame:000000000001171A                 db  0Ah
.eh_frame:000000000001171B                 db  0Eh
.eh_frame:000000000001171C                 db  28h ; (
.eh_frame:000000000001171D                 db  41h ; A
.eh_frame:000000000001171E                 db  0Eh
.eh_frame:000000000001171F                 db  20h
.eh_frame:0000000000011720                 db  41h ; A
.eh_frame:0000000000011721                 db  0Eh
.eh_frame:0000000000011722                 db  18h
.eh_frame:0000000000011723                 db  42h ; B
.eh_frame:0000000000011724                 db  0Eh
.eh_frame:0000000000011725                 db  10h
.eh_frame:0000000000011726                 db  42h ; B
.eh_frame:0000000000011727                 db  0Eh
.eh_frame:0000000000011728                 db    8
.eh_frame:0000000000011729                 db  41h ; A
.eh_frame:000000000001172A                 db  0Bh
.eh_frame:000000000001172B                 db    0
.eh_frame:000000000001172C                 db    0
.eh_frame:000000000001172D                 db    0
.eh_frame:000000000001172E                 db    0
.eh_frame:000000000001172F                 db    0
.eh_frame:0000000000011730                 db  18h
.eh_frame:0000000000011731                 db    0
.eh_frame:0000000000011732                 db    0
.eh_frame:0000000000011733                 db    0
.eh_frame:0000000000011734                 db 0D4h
.eh_frame:0000000000011735                 db  10h
.eh_frame:0000000000011736                 db    0
.eh_frame:0000000000011737                 db    0
.eh_frame:0000000000011738                 db 0E8h
.eh_frame:0000000000011739                 db  8Bh
.eh_frame:000000000001173A                 db 0FFh
.eh_frame:000000000001173B                 db 0FFh
.eh_frame:000000000001173C                 db  82h
.eh_frame:000000000001173D                 db    0
.eh_frame:000000000001173E                 db    0
.eh_frame:000000000001173F                 db    0
.eh_frame:0000000000011740                 db    0
.eh_frame:0000000000011741                 db  41h ; A
.eh_frame:0000000000011742                 db  0Eh
.eh_frame:0000000000011743                 db  10h
.eh_frame:0000000000011744                 db  83h
.eh_frame:0000000000011745                 db    2
.eh_frame:0000000000011746                 db    2
.eh_frame:0000000000011747                 db  80h
.eh_frame:0000000000011748                 db  0Eh
.eh_frame:0000000000011749                 db    8
.eh_frame:000000000001174A                 db    0
.eh_frame:000000000001174B                 db    0
.eh_frame:000000000001174C                 db  18h
.eh_frame:000000000001174D                 db    0
.eh_frame:000000000001174E                 db    0
.eh_frame:000000000001174F                 db    0
.eh_frame:0000000000011750                 db 0F0h
.eh_frame:0000000000011751                 db  10h
.eh_frame:0000000000011752                 db    0
.eh_frame:0000000000011753                 db    0
.eh_frame:0000000000011754                 db  5Ch ; \
.eh_frame:0000000000011755                 db  8Ch
.eh_frame:0000000000011756                 db 0FFh
.eh_frame:0000000000011757                 db 0FFh
.eh_frame:0000000000011758                 db  36h ; 6
.eh_frame:0000000000011759                 db    0
.eh_frame:000000000001175A                 db    0
.eh_frame:000000000001175B                 db    0
.eh_frame:000000000001175C                 db    0
.eh_frame:000000000001175D                 db  41h ; A
.eh_frame:000000000001175E                 db  0Eh
.eh_frame:000000000001175F                 db  10h
.eh_frame:0000000000011760                 db  83h
.eh_frame:0000000000011761                 db    2
.eh_frame:0000000000011762                 db  70h ; p
.eh_frame:0000000000011763                 db  0Eh
.eh_frame:0000000000011764                 db    8
.eh_frame:0000000000011765                 db    0
.eh_frame:0000000000011766                 db    0
.eh_frame:0000000000011767                 db    0
.eh_frame:0000000000011768                 db  74h ; t
.eh_frame:0000000000011769                 db    0
.eh_frame:000000000001176A                 db    0
.eh_frame:000000000001176B                 db    0
.eh_frame:000000000001176C                 db  0Ch
.eh_frame:000000000001176D                 db  11h
.eh_frame:000000000001176E                 db    0
.eh_frame:000000000001176F                 db    0
.eh_frame:0000000000011770                 db  80h
.eh_frame:0000000000011771                 db  8Ch
.eh_frame:0000000000011772                 db 0FFh
.eh_frame:0000000000011773                 db 0FFh
.eh_frame:0000000000011774                 db  48h ; H
.eh_frame:0000000000011775                 db    8
.eh_frame:0000000000011776                 db    0
.eh_frame:0000000000011777                 db    0
.eh_frame:0000000000011778                 db    0
.eh_frame:0000000000011779                 db  42h ; B
.eh_frame:000000000001177A                 db  0Eh
.eh_frame:000000000001177B                 db  10h
.eh_frame:000000000001177C                 db  8Fh
.eh_frame:000000000001177D                 db    2
.eh_frame:000000000001177E                 db  42h ; B
.eh_frame:000000000001177F                 db  0Eh
.eh_frame:0000000000011780                 db  18h
.eh_frame:0000000000011781                 db  8Eh
.eh_frame:0000000000011782                 db    3
.eh_frame:0000000000011783                 db  49h ; I
.eh_frame:0000000000011784                 db  0Eh
.eh_frame:0000000000011785                 db  20h
.eh_frame:0000000000011786                 db  8Dh
.eh_frame:0000000000011787                 db    4
.eh_frame:0000000000011788                 db  42h ; B
.eh_frame:0000000000011789                 db  0Eh
.eh_frame:000000000001178A                 db  28h ; (
.eh_frame:000000000001178B                 db  8Ch
.eh_frame:000000000001178C                 db    5
.eh_frame:000000000001178D                 db  48h ; H
.eh_frame:000000000001178E                 db  0Eh
.eh_frame:000000000001178F                 db  30h ; 0
.eh_frame:0000000000011790                 db  86h
.eh_frame:0000000000011791                 db    6
.eh_frame:0000000000011792                 db  41h ; A
.eh_frame:0000000000011793                 db  0Eh
.eh_frame:0000000000011794                 db  38h ; 8
.eh_frame:0000000000011795                 db  83h
.eh_frame:0000000000011796                 db    7
.eh_frame:0000000000011797                 db  44h ; D
.eh_frame:0000000000011798                 db  0Eh
.eh_frame:0000000000011799                 db 0A0h
.eh_frame:000000000001179A                 db    1
.eh_frame:000000000001179B                 db    2
.eh_frame:000000000001179C                 db  6Fh ; o
.eh_frame:000000000001179D                 db  0Eh
.eh_frame:000000000001179E                 db 0A8h
.eh_frame:000000000001179F                 db    1
.eh_frame:00000000000117A0                 db  4Dh ; M
.eh_frame:00000000000117A1                 db  0Eh
.eh_frame:00000000000117A2                 db 0B0h
.eh_frame:00000000000117A3                 db    1
.eh_frame:00000000000117A4                 db  46h ; F
.eh_frame:00000000000117A5                 db  0Eh
.eh_frame:00000000000117A6                 db 0B8h
.eh_frame:00000000000117A7                 db    1
.eh_frame:00000000000117A8                 db  46h ; F
.eh_frame:00000000000117A9                 db  0Eh
.eh_frame:00000000000117AA                 db 0C0h
.eh_frame:00000000000117AB                 db    1
.eh_frame:00000000000117AC                 db  5Dh ; ]
.eh_frame:00000000000117AD                 db  0Eh
.eh_frame:00000000000117AE                 db 0A0h
.eh_frame:00000000000117AF                 db    1
.eh_frame:00000000000117B0                 db  75h ; u
.eh_frame:00000000000117B1                 db  0Eh
.eh_frame:00000000000117B2                 db 0A8h
.eh_frame:00000000000117B3                 db    1
.eh_frame:00000000000117B4                 db  41h ; A
.eh_frame:00000000000117B5                 db  0Eh
.eh_frame:00000000000117B6                 db 0B0h
.eh_frame:00000000000117B7                 db    1
.eh_frame:00000000000117B8                 db  62h ; b
.eh_frame:00000000000117B9                 db  0Eh
.eh_frame:00000000000117BA                 db 0A8h
.eh_frame:00000000000117BB                 db    1
.eh_frame:00000000000117BC                 db  41h ; A
.eh_frame:00000000000117BD                 db  0Eh
.eh_frame:00000000000117BE                 db 0A0h
.eh_frame:00000000000117BF                 db    1
.eh_frame:00000000000117C0                 db    3
.eh_frame:00000000000117C1                 db 0DFh
.eh_frame:00000000000117C2                 db    1
.eh_frame:00000000000117C3                 db  0Ah
.eh_frame:00000000000117C4                 db  0Eh
.eh_frame:00000000000117C5                 db  38h ; 8
.eh_frame:00000000000117C6                 db  41h ; A
.eh_frame:00000000000117C7                 db  0Eh
.eh_frame:00000000000117C8                 db  30h ; 0
.eh_frame:00000000000117C9                 db  41h ; A
.eh_frame:00000000000117CA                 db  0Eh
.eh_frame:00000000000117CB                 db  28h ; (
.eh_frame:00000000000117CC                 db  42h ; B
.eh_frame:00000000000117CD                 db  0Eh
.eh_frame:00000000000117CE                 db  20h
.eh_frame:00000000000117CF                 db  42h ; B
.eh_frame:00000000000117D0                 db  0Eh
.eh_frame:00000000000117D1                 db  18h
.eh_frame:00000000000117D2                 db  42h ; B
.eh_frame:00000000000117D3                 db  0Eh
.eh_frame:00000000000117D4                 db  10h
.eh_frame:00000000000117D5                 db  42h ; B
.eh_frame:00000000000117D6                 db  0Eh
.eh_frame:00000000000117D7                 db    8
.eh_frame:00000000000117D8                 db  45h ; E
.eh_frame:00000000000117D9                 db  0Bh
.eh_frame:00000000000117DA                 db    0
.eh_frame:00000000000117DB                 db    0
.eh_frame:00000000000117DC                 db    0
.eh_frame:00000000000117DD                 db    0
.eh_frame:00000000000117DE                 db    0
.eh_frame:00000000000117DF                 db    0
.eh_frame:00000000000117E0                 db  10h
.eh_frame:00000000000117E1                 db    0
.eh_frame:00000000000117E2                 db    0
.eh_frame:00000000000117E3                 db    0
.eh_frame:00000000000117E4                 db  84h
.eh_frame:00000000000117E5                 db  11h
.eh_frame:00000000000117E6                 db    0
.eh_frame:00000000000117E7                 db    0
.eh_frame:00000000000117E8                 db  58h ; X
.eh_frame:00000000000117E9                 db  94h
.eh_frame:00000000000117EA                 db 0FFh
.eh_frame:00000000000117EB                 db 0FFh
.eh_frame:00000000000117EC                 db  2Ch ; ,
.eh_frame:00000000000117ED                 db    0
.eh_frame:00000000000117EE                 db    0
.eh_frame:00000000000117EF                 db    0
.eh_frame:00000000000117F0                 db    0
.eh_frame:00000000000117F1                 db    0
.eh_frame:00000000000117F2                 db    0
.eh_frame:00000000000117F3                 db    0
.eh_frame:00000000000117F4                 db  18h
.eh_frame:00000000000117F5                 db    0
.eh_frame:00000000000117F6                 db    0
.eh_frame:00000000000117F7                 db    0
.eh_frame:00000000000117F8                 db  98h
.eh_frame:00000000000117F9                 db  11h
.eh_frame:00000000000117FA                 db    0
.eh_frame:00000000000117FB                 db    0
.eh_frame:00000000000117FC                 db  74h ; t
.eh_frame:00000000000117FD                 db  94h
.eh_frame:00000000000117FE                 db 0FFh
.eh_frame:00000000000117FF                 db 0FFh
.eh_frame:0000000000011800                 db  2Ah ; *
.eh_frame:0000000000011801                 db    0
.eh_frame:0000000000011802                 db    0
.eh_frame:0000000000011803                 db    0
.eh_frame:0000000000011804                 db    0
.eh_frame:0000000000011805                 db  46h ; F
.eh_frame:0000000000011806                 db  0Eh
.eh_frame:0000000000011807                 db  10h
.eh_frame:0000000000011808                 db  83h
.eh_frame:0000000000011809                 db    2
.eh_frame:000000000001180A                 db  5Bh ; [
.eh_frame:000000000001180B                 db  0Eh
.eh_frame:000000000001180C                 db    8
.eh_frame:000000000001180D                 db  47h ; G
.eh_frame:000000000001180E                 db 0C3h
.eh_frame:000000000001180F                 db    0
.eh_frame:0000000000011810                 db  38h ; 8
.eh_frame:0000000000011811                 db    0
.eh_frame:0000000000011812                 db    0
.eh_frame:0000000000011813                 db    0
.eh_frame:0000000000011814                 db 0B4h
.eh_frame:0000000000011815                 db  11h
.eh_frame:0000000000011816                 db    0
.eh_frame:0000000000011817                 db    0
.eh_frame:0000000000011818                 db  88h
.eh_frame:0000000000011819                 db  94h
.eh_frame:000000000001181A                 db 0FFh
.eh_frame:000000000001181B                 db 0FFh
.eh_frame:000000000001181C                 db  5Dh ; ]
.eh_frame:000000000001181D                 db    0
.eh_frame:000000000001181E                 db    0
.eh_frame:000000000001181F                 db    0
.eh_frame:0000000000011820                 db    0
.eh_frame:0000000000011821                 db  42h ; B
.eh_frame:0000000000011822                 db  0Eh
.eh_frame:0000000000011823                 db  10h
.eh_frame:0000000000011824                 db  8Dh
.eh_frame:0000000000011825                 db    2
.eh_frame:0000000000011826                 db  42h ; B
.eh_frame:0000000000011827                 db  0Eh
.eh_frame:0000000000011828                 db  18h
.eh_frame:0000000000011829                 db  8Ch
.eh_frame:000000000001182A                 db    3
.eh_frame:000000000001182B                 db  41h ; A
.eh_frame:000000000001182C                 db  0Eh
.eh_frame:000000000001182D                 db  20h
.eh_frame:000000000001182E                 db  86h
.eh_frame:000000000001182F                 db    4
.eh_frame:0000000000011830                 db  41h ; A
.eh_frame:0000000000011831                 db  0Eh
.eh_frame:0000000000011832                 db  28h ; (
.eh_frame:0000000000011833                 db  83h
.eh_frame:0000000000011834                 db    5
.eh_frame:0000000000011835                 db  47h ; G
.eh_frame:0000000000011836                 db  0Eh
.eh_frame:0000000000011837                 db  30h ; 0
.eh_frame:0000000000011838                 db  75h ; u
.eh_frame:0000000000011839                 db  0Ah
.eh_frame:000000000001183A                 db  0Eh
.eh_frame:000000000001183B                 db  28h ; (
.eh_frame:000000000001183C                 db  44h ; D
.eh_frame:000000000001183D                 db  0Eh
.eh_frame:000000000001183E                 db  20h
.eh_frame:000000000001183F                 db  41h ; A
.eh_frame:0000000000011840                 db  0Eh
.eh_frame:0000000000011841                 db  18h
.eh_frame:0000000000011842                 db  42h ; B
.eh_frame:0000000000011843                 db  0Eh
.eh_frame:0000000000011844                 db  10h
.eh_frame:0000000000011845                 db  42h ; B
.eh_frame:0000000000011846                 db  0Eh
.eh_frame:0000000000011847                 db    8
.eh_frame:0000000000011848                 db  45h ; E
.eh_frame:0000000000011849                 db  0Bh
.eh_frame:000000000001184A                 db    0
.eh_frame:000000000001184B                 db    0
.eh_frame:000000000001184C                 db  34h ; 4
.eh_frame:000000000001184D                 db    0
.eh_frame:000000000001184E                 db    0
.eh_frame:000000000001184F                 db    0
.eh_frame:0000000000011850                 db 0F0h
.eh_frame:0000000000011851                 db  11h
.eh_frame:0000000000011852                 db    0
.eh_frame:0000000000011853                 db    0
.eh_frame:0000000000011854                 db 0ACh
.eh_frame:0000000000011855                 db  94h
.eh_frame:0000000000011856                 db 0FFh
.eh_frame:0000000000011857                 db 0FFh
.eh_frame:0000000000011858                 db  8Fh
.eh_frame:0000000000011859                 db    0
.eh_frame:000000000001185A                 db    0
.eh_frame:000000000001185B                 db    0
.eh_frame:000000000001185C                 db    0
.eh_frame:000000000001185D                 db  45h ; E
.eh_frame:000000000001185E                 db  0Eh
.eh_frame:000000000001185F                 db  10h
.eh_frame:0000000000011860                 db  8Ch
.eh_frame:0000000000011861                 db    2
.eh_frame:0000000000011862                 db  41h ; A
.eh_frame:0000000000011863                 db  0Eh
.eh_frame:0000000000011864                 db  18h
.eh_frame:0000000000011865                 db  86h
.eh_frame:0000000000011866                 db    3
.eh_frame:0000000000011867                 db  41h ; A
.eh_frame:0000000000011868                 db  0Eh
.eh_frame:0000000000011869                 db  20h
.eh_frame:000000000001186A                 db  83h
.eh_frame:000000000001186B                 db    4
.eh_frame:000000000001186C                 db    2
.eh_frame:000000000001186D                 db  58h ; X
.eh_frame:000000000001186E                 db  0Ah
.eh_frame:000000000001186F                 db  0Eh
.eh_frame:0000000000011870                 db  18h
.eh_frame:0000000000011871                 db  41h ; A
.eh_frame:0000000000011872                 db  0Eh
.eh_frame:0000000000011873                 db  10h
.eh_frame:0000000000011874                 db  42h ; B
.eh_frame:0000000000011875                 db  0Eh
.eh_frame:0000000000011876                 db    8
.eh_frame:0000000000011877                 db  46h ; F
.eh_frame:0000000000011878                 db  0Bh
.eh_frame:0000000000011879                 db  63h ; c
.eh_frame:000000000001187A                 db  0Eh
.eh_frame:000000000001187B                 db  18h
.eh_frame:000000000001187C                 db  41h ; A
.eh_frame:000000000001187D                 db  0Eh
.eh_frame:000000000001187E                 db  10h
.eh_frame:000000000001187F                 db  42h ; B
.eh_frame:0000000000011880                 db  0Eh
.eh_frame:0000000000011881                 db    8
.eh_frame:0000000000011882                 db    0
.eh_frame:0000000000011883                 db    0
.eh_frame:0000000000011884                 db  48h ; H
.eh_frame:0000000000011885                 db    0
.eh_frame:0000000000011886                 db    0
.eh_frame:0000000000011887                 db    0
.eh_frame:0000000000011888                 db  28h ; (
.eh_frame:0000000000011889                 db  12h
.eh_frame:000000000001188A                 db    0
.eh_frame:000000000001188B                 db    0
.eh_frame:000000000001188C                 db    4
.eh_frame:000000000001188D                 db  95h
.eh_frame:000000000001188E                 db 0FFh
.eh_frame:000000000001188F                 db 0FFh
.eh_frame:0000000000011890                 db  36h ; 6
.eh_frame:0000000000011891                 db    1
.eh_frame:0000000000011892                 db    0
.eh_frame:0000000000011893                 db    0
.eh_frame:0000000000011894                 db    0
.eh_frame:0000000000011895                 db  42h ; B
.eh_frame:0000000000011896                 db  0Eh
.eh_frame:0000000000011897                 db  10h
.eh_frame:0000000000011898                 db  8Fh
.eh_frame:0000000000011899                 db    2
.eh_frame:000000000001189A                 db  42h ; B
.eh_frame:000000000001189B                 db  0Eh
.eh_frame:000000000001189C                 db  18h
.eh_frame:000000000001189D                 db  8Eh
.eh_frame:000000000001189E                 db    3
.eh_frame:000000000001189F                 db  47h ; G
.eh_frame:00000000000118A0                 db  0Eh
.eh_frame:00000000000118A1                 db  20h
.eh_frame:00000000000118A2                 db  8Dh
.eh_frame:00000000000118A3                 db    4
.eh_frame:00000000000118A4                 db  42h ; B
.eh_frame:00000000000118A5                 db  0Eh
.eh_frame:00000000000118A6                 db  28h ; (
.eh_frame:00000000000118A7                 db  8Ch
.eh_frame:00000000000118A8                 db    5
.eh_frame:00000000000118A9                 db  41h ; A
.eh_frame:00000000000118AA                 db  0Eh
.eh_frame:00000000000118AB                 db  30h ; 0
.eh_frame:00000000000118AC                 db  86h
.eh_frame:00000000000118AD                 db    6
.eh_frame:00000000000118AE                 db  41h ; A
.eh_frame:00000000000118AF                 db  0Eh
.eh_frame:00000000000118B0                 db  38h ; 8
.eh_frame:00000000000118B1                 db  83h
.eh_frame:00000000000118B2                 db    7
.eh_frame:00000000000118B3                 db  44h ; D
.eh_frame:00000000000118B4                 db  0Eh
.eh_frame:00000000000118B5                 db  40h ; @
.eh_frame:00000000000118B6                 db    2
.eh_frame:00000000000118B7                 db 0A1h
.eh_frame:00000000000118B8                 db  0Ah
.eh_frame:00000000000118B9                 db  0Eh
.eh_frame:00000000000118BA                 db  38h ; 8
.eh_frame:00000000000118BB                 db  41h ; A
.eh_frame:00000000000118BC                 db  0Eh
.eh_frame:00000000000118BD                 db  30h ; 0
.eh_frame:00000000000118BE                 db  41h ; A
.eh_frame:00000000000118BF                 db  0Eh
.eh_frame:00000000000118C0                 db  28h ; (
.eh_frame:00000000000118C1                 db  42h ; B
.eh_frame:00000000000118C2                 db  0Eh
.eh_frame:00000000000118C3                 db  20h
.eh_frame:00000000000118C4                 db  42h ; B
.eh_frame:00000000000118C5                 db  0Eh
.eh_frame:00000000000118C6                 db  18h
.eh_frame:00000000000118C7                 db  42h ; B
.eh_frame:00000000000118C8                 db  0Eh
.eh_frame:00000000000118C9                 db  10h
.eh_frame:00000000000118CA                 db  42h ; B
.eh_frame:00000000000118CB                 db  0Eh
.eh_frame:00000000000118CC                 db    8
.eh_frame:00000000000118CD                 db  42h ; B
.eh_frame:00000000000118CE                 db  0Bh
.eh_frame:00000000000118CF                 db    0
.eh_frame:00000000000118D0                 db  50h ; P
.eh_frame:00000000000118D1                 db    0
.eh_frame:00000000000118D2                 db    0
.eh_frame:00000000000118D3                 db    0
.eh_frame:00000000000118D4                 db  74h ; t
.eh_frame:00000000000118D5                 db  12h
.eh_frame:00000000000118D6                 db    0
.eh_frame:00000000000118D7                 db    0
.eh_frame:00000000000118D8                 db 0F8h
.eh_frame:00000000000118D9                 db  95h
.eh_frame:00000000000118DA                 db 0FFh
.eh_frame:00000000000118DB                 db 0FFh
.eh_frame:00000000000118DC                 db 0DFh
.eh_frame:00000000000118DD                 db    0
.eh_frame:00000000000118DE                 db    0
.eh_frame:00000000000118DF                 db    0
.eh_frame:00000000000118E0                 db    0
.eh_frame:00000000000118E1                 db  42h ; B
.eh_frame:00000000000118E2                 db  0Eh
.eh_frame:00000000000118E3                 db  10h
.eh_frame:00000000000118E4                 db  8Ch
.eh_frame:00000000000118E5                 db    2
.eh_frame:00000000000118E6                 db  41h ; A
.eh_frame:00000000000118E7                 db  0Eh
.eh_frame:00000000000118E8                 db  18h
.eh_frame:00000000000118E9                 db  86h
.eh_frame:00000000000118EA                 db    3
.eh_frame:00000000000118EB                 db  44h ; D
.eh_frame:00000000000118EC                 db  0Eh
.eh_frame:00000000000118ED                 db  20h
.eh_frame:00000000000118EE                 db  83h
.eh_frame:00000000000118EF                 db    4
.eh_frame:00000000000118F0                 db  4Bh ; K
.eh_frame:00000000000118F1                 db  0Eh
.eh_frame:00000000000118F2                 db  30h ; 0
.eh_frame:00000000000118F3                 db    2
.eh_frame:00000000000118F4                 db  6Fh ; o
.eh_frame:00000000000118F5                 db  0Ah
.eh_frame:00000000000118F6                 db  0Eh
.eh_frame:00000000000118F7                 db  20h
.eh_frame:00000000000118F8                 db  44h ; D
.eh_frame:00000000000118F9                 db  0Eh
.eh_frame:00000000000118FA                 db  18h
.eh_frame:00000000000118FB                 db  41h ; A
.eh_frame:00000000000118FC                 db  0Eh
.eh_frame:00000000000118FD                 db  10h
.eh_frame:00000000000118FE                 db  42h ; B
.eh_frame:00000000000118FF                 db  0Eh
.eh_frame:0000000000011900                 db    8
.eh_frame:0000000000011901                 db  48h ; H
.eh_frame:0000000000011902                 db  0Bh
.eh_frame:0000000000011903                 db  5Ah ; Z
.eh_frame:0000000000011904                 db  0Ah
.eh_frame:0000000000011905                 db  0Eh
.eh_frame:0000000000011906                 db  20h
.eh_frame:0000000000011907                 db  44h ; D
.eh_frame:0000000000011908                 db  0Eh
.eh_frame:0000000000011909                 db  18h
.eh_frame:000000000001190A                 db  41h ; A
.eh_frame:000000000001190B                 db  0Eh
.eh_frame:000000000001190C                 db  10h
.eh_frame:000000000001190D                 db  42h ; B
.eh_frame:000000000001190E                 db  0Eh
.eh_frame:000000000001190F                 db    8
.eh_frame:0000000000011910                 db  47h ; G
.eh_frame:0000000000011911                 db  0Bh
.eh_frame:0000000000011912                 db  54h ; T
.eh_frame:0000000000011913                 db  0Ah
.eh_frame:0000000000011914                 db  0Eh
.eh_frame:0000000000011915                 db  20h
.eh_frame:0000000000011916                 db  44h ; D
.eh_frame:0000000000011917                 db  0Eh
.eh_frame:0000000000011918                 db  18h
.eh_frame:0000000000011919                 db  41h ; A
.eh_frame:000000000001191A                 db  0Eh
.eh_frame:000000000001191B                 db  10h
.eh_frame:000000000001191C                 db  42h ; B
.eh_frame:000000000001191D                 db  0Eh
.eh_frame:000000000001191E                 db    8
.eh_frame:000000000001191F                 db  45h ; E
.eh_frame:0000000000011920                 db  0Bh
.eh_frame:0000000000011921                 db    0
.eh_frame:0000000000011922                 db    0
.eh_frame:0000000000011923                 db    0
.eh_frame:0000000000011924                 db  10h
.eh_frame:0000000000011925                 db    0
.eh_frame:0000000000011926                 db    0
.eh_frame:0000000000011927                 db    0
.eh_frame:0000000000011928                 db 0C8h
.eh_frame:0000000000011929                 db  12h
.eh_frame:000000000001192A                 db    0
.eh_frame:000000000001192B                 db    0
.eh_frame:000000000001192C                 db  84h
.eh_frame:000000000001192D                 db  96h
.eh_frame:000000000001192E                 db 0FFh
.eh_frame:000000000001192F                 db 0FFh
.eh_frame:0000000000011930                 db  0Ch
.eh_frame:0000000000011931                 db    0
.eh_frame:0000000000011932                 db    0
.eh_frame:0000000000011933                 db    0
.eh_frame:0000000000011934                 db    0
.eh_frame:0000000000011935                 db    0
.eh_frame:0000000000011936                 db    0
.eh_frame:0000000000011937                 db    0
.eh_frame:0000000000011938                 db  5Ch ; \
.eh_frame:0000000000011939                 db    0
.eh_frame:000000000001193A                 db    0
.eh_frame:000000000001193B                 db    0
.eh_frame:000000000001193C                 db 0DCh
.eh_frame:000000000001193D                 db  12h
.eh_frame:000000000001193E                 db    0
.eh_frame:000000000001193F                 db    0
.eh_frame:0000000000011940                 db  80h
.eh_frame:0000000000011941                 db  96h
.eh_frame:0000000000011942                 db 0FFh
.eh_frame:0000000000011943                 db 0FFh
.eh_frame:0000000000011944                 db 0A3h
.eh_frame:0000000000011945                 db    0
.eh_frame:0000000000011946                 db    0
.eh_frame:0000000000011947                 db    0
.eh_frame:0000000000011948                 db    0
.eh_frame:0000000000011949                 db  42h ; B
.eh_frame:000000000001194A                 db  0Eh
.eh_frame:000000000001194B                 db  10h
.eh_frame:000000000001194C                 db  8Dh
.eh_frame:000000000001194D                 db    2
.eh_frame:000000000001194E                 db  42h ; B
.eh_frame:000000000001194F                 db  0Eh
.eh_frame:0000000000011950                 db  18h
.eh_frame:0000000000011951                 db  8Ch
.eh_frame:0000000000011952                 db    3
.eh_frame:0000000000011953                 db  41h ; A
.eh_frame:0000000000011954 unk_11954       db  0Eh                 ; DATA XREF: print_statfs+6B2↑o
.eh_frame:0000000000011955                 db  20h
.eh_frame:0000000000011956                 db  86h
.eh_frame:0000000000011957                 db    4
.eh_frame:0000000000011958                 db  41h ; A
.eh_frame:0000000000011959                 db  0Eh
.eh_frame:000000000001195A                 db  28h ; (
.eh_frame:000000000001195B                 db  83h
.eh_frame:000000000001195C                 db    5
.eh_frame:000000000001195D                 db  47h ; G
.eh_frame:000000000001195E                 db  0Eh
.eh_frame:000000000001195F                 db  30h ; 0
.eh_frame:0000000000011960                 db    2
.eh_frame:0000000000011961                 db  41h ; A
.eh_frame:0000000000011962                 db  0Ah
.eh_frame:0000000000011963                 db  0Eh
.eh_frame:0000000000011964                 db  28h ; (
.eh_frame:0000000000011965                 db  44h ; D
.eh_frame:0000000000011966                 db  0Eh
.eh_frame:0000000000011967                 db  20h
.eh_frame:0000000000011968                 db  41h ; A
.eh_frame:0000000000011969                 db  0Eh
.eh_frame:000000000001196A                 db  18h
.eh_frame:000000000001196B                 db  42h ; B
.eh_frame:000000000001196C                 db  0Eh
.eh_frame:000000000001196D                 db  10h
.eh_frame:000000000001196E                 db  42h ; B
.eh_frame:000000000001196F                 db  0Eh
.eh_frame:0000000000011970                 db    8
.eh_frame:0000000000011971                 db  49h ; I
.eh_frame:0000000000011972                 db  0Bh
.eh_frame:0000000000011973                 db  52h ; R
.eh_frame:0000000000011974                 db  0Ah
.eh_frame:0000000000011975                 db  0Eh
.eh_frame:0000000000011976                 db  28h ; (
.eh_frame:0000000000011977                 db  43h ; C
.eh_frame:0000000000011978                 db  0Eh
.eh_frame:0000000000011979                 db  20h
.eh_frame:000000000001197A                 db  41h ; A
.eh_frame:000000000001197B                 db  0Eh
.eh_frame:000000000001197C                 db  18h
.eh_frame:000000000001197D                 db  42h ; B
.eh_frame:000000000001197E                 db  0Eh
.eh_frame:000000000001197F                 db  10h
.eh_frame:0000000000011980                 db  42h ; B
.eh_frame:0000000000011981                 db  0Eh
.eh_frame:0000000000011982                 db    8
.eh_frame:0000000000011983                 db  46h ; F
.eh_frame:0000000000011984                 db  0Bh
.eh_frame:0000000000011985                 db  44h ; D
.eh_frame:0000000000011986                 db  0Ah
.eh_frame:0000000000011987                 db  0Eh
.eh_frame:0000000000011988                 db  28h ; (
.eh_frame:0000000000011989                 db  47h ; G
.eh_frame:000000000001198A                 db  0Eh
.eh_frame:000000000001198B                 db  20h
.eh_frame:000000000001198C                 db  41h ; A
.eh_frame:000000000001198D                 db  0Eh
.eh_frame:000000000001198E                 db  18h
.eh_frame:000000000001198F                 db  42h ; B
.eh_frame:0000000000011990                 db  0Eh
.eh_frame:0000000000011991                 db  10h
.eh_frame:0000000000011992                 db  42h ; B
.eh_frame:0000000000011993                 db  0Eh
.eh_frame:0000000000011994                 db    8
.eh_frame:0000000000011995                 db  45h ; E
.eh_frame:0000000000011996                 db  0Bh
.eh_frame:0000000000011997                 db    0
.eh_frame:0000000000011998                 db  34h ; 4
.eh_frame:0000000000011999                 db    0
.eh_frame:000000000001199A                 db    0
.eh_frame:000000000001199B                 db    0
.eh_frame:000000000001199C                 db  3Ch ; <
.eh_frame:000000000001199D                 db  13h
.eh_frame:000000000001199E                 db    0
.eh_frame:000000000001199F                 db    0
.eh_frame:00000000000119A0                 db 0D0h
.eh_frame:00000000000119A1                 db  96h
.eh_frame:00000000000119A2                 db 0FFh
.eh_frame:00000000000119A3                 db 0FFh
.eh_frame:00000000000119A4                 db  41h ; A
.eh_frame:00000000000119A5                 db    1
.eh_frame:00000000000119A6                 db    0
.eh_frame:00000000000119A7                 db    0
.eh_frame:00000000000119A8                 db    0
.eh_frame:00000000000119A9                 db  42h ; B
.eh_frame:00000000000119AA                 db  0Eh
.eh_frame:00000000000119AB                 db  10h
.eh_frame:00000000000119AC                 db  8Ch
.eh_frame:00000000000119AD                 db    2
.eh_frame:00000000000119AE                 db  41h ; A
.eh_frame:00000000000119AF                 db  0Eh
.eh_frame:00000000000119B0                 db  18h
.eh_frame:00000000000119B1                 db  86h
.eh_frame:00000000000119B2                 db    3
.eh_frame:00000000000119B3                 db  41h ; A
.eh_frame:00000000000119B4                 db  0Eh
.eh_frame:00000000000119B5                 db  20h
.eh_frame:00000000000119B6                 db  83h
.eh_frame:00000000000119B7                 db    4
.eh_frame:00000000000119B8                 db  47h ; G
.eh_frame:00000000000119B9                 db  0Eh
.eh_frame:00000000000119BA                 db  70h ; p
.eh_frame:00000000000119BB                 db    2
.eh_frame:00000000000119BC                 db  8Bh
.eh_frame:00000000000119BD                 db  0Ah
.eh_frame:00000000000119BE                 db  0Eh
.eh_frame:00000000000119BF                 db  20h
.eh_frame:00000000000119C0                 db  41h ; A
.eh_frame:00000000000119C1                 db  0Eh
.eh_frame:00000000000119C2                 db  18h
.eh_frame:00000000000119C3                 db  41h ; A
.eh_frame:00000000000119C4                 db  0Eh
.eh_frame:00000000000119C5                 db  10h
.eh_frame:00000000000119C6                 db  42h ; B
.eh_frame:00000000000119C7                 db  0Eh
.eh_frame:00000000000119C8                 db    8
.eh_frame:00000000000119C9                 db  46h ; F
.eh_frame:00000000000119CA                 db  0Bh
.eh_frame:00000000000119CB                 db    0
.eh_frame:00000000000119CC                 db    0
.eh_frame:00000000000119CD                 db    0
.eh_frame:00000000000119CE                 db    0
.eh_frame:00000000000119CF                 db    0
.eh_frame:00000000000119D0                 db  4Ch ; L
.eh_frame:00000000000119D1                 db    0
.eh_frame:00000000000119D2                 db    0
.eh_frame:00000000000119D3                 db    0
.eh_frame:00000000000119D4                 db  74h ; t
.eh_frame:00000000000119D5                 db  13h
.eh_frame:00000000000119D6                 db    0
.eh_frame:00000000000119D7                 db    0
.eh_frame:00000000000119D8                 db 0E8h
.eh_frame:00000000000119D9                 db  97h
.eh_frame:00000000000119DA                 db 0FFh
.eh_frame:00000000000119DB                 db 0FFh
.eh_frame:00000000000119DC                 db  7Dh ; }
.eh_frame:00000000000119DD                 db    0
.eh_frame:00000000000119DE                 db    0
.eh_frame:00000000000119DF                 db    0
.eh_frame:00000000000119E0                 db    0
.eh_frame:00000000000119E1                 db  42h ; B
.eh_frame:00000000000119E2                 db  0Eh
.eh_frame:00000000000119E3                 db  10h
.eh_frame:00000000000119E4                 db  8Ch
.eh_frame:00000000000119E5                 db    2
.eh_frame:00000000000119E6                 db  41h ; A
.eh_frame:00000000000119E7                 db  0Eh
.eh_frame:00000000000119E8                 db  18h
.eh_frame:00000000000119E9                 db  86h
.eh_frame:00000000000119EA                 db    3
.eh_frame:00000000000119EB                 db  44h ; D
.eh_frame:00000000000119EC                 db  0Eh
.eh_frame:00000000000119ED                 db  20h
.eh_frame:00000000000119EE                 db  83h
.eh_frame:00000000000119EF                 db    4
.eh_frame:00000000000119F0                 db  69h ; i
.eh_frame:00000000000119F1                 db  0Ah
.eh_frame:00000000000119F2                 db  0Eh
.eh_frame:00000000000119F3                 db  18h
.eh_frame:00000000000119F4                 db  41h ; A
.eh_frame:00000000000119F5                 db  0Eh
.eh_frame:00000000000119F6                 db  10h
.eh_frame:00000000000119F7                 db  42h ; B
.eh_frame:00000000000119F8                 db  0Eh
.eh_frame:00000000000119F9                 db    8
.eh_frame:00000000000119FA                 db  45h ; E
.eh_frame:00000000000119FB                 db  0Bh
.eh_frame:00000000000119FC                 db  55h ; U
.eh_frame:00000000000119FD                 db  0Ah
.eh_frame:00000000000119FE                 db  0Eh
.eh_frame:00000000000119FF                 db  18h
.eh_frame:0000000000011A00                 db  41h ; A
.eh_frame:0000000000011A01                 db  0Eh
.eh_frame:0000000000011A02                 db  10h
.eh_frame:0000000000011A03                 db  42h ; B
.eh_frame:0000000000011A04                 db  0Eh
.eh_frame:0000000000011A05                 db    8
.eh_frame:0000000000011A06                 db  48h ; H
.eh_frame:0000000000011A07                 db  0Bh
.eh_frame:0000000000011A08                 db  41h ; A
.eh_frame:0000000000011A09                 db  0Ah
.eh_frame:0000000000011A0A                 db  0Eh
.eh_frame:0000000000011A0B                 db  18h
.eh_frame:0000000000011A0C                 db  46h ; F
.eh_frame:0000000000011A0D                 db  0Eh
.eh_frame:0000000000011A0E                 db  10h
.eh_frame:0000000000011A0F                 db  42h ; B
.eh_frame:0000000000011A10                 db  0Eh
.eh_frame:0000000000011A11                 db    8
.eh_frame:0000000000011A12                 db  47h ; G
.eh_frame:0000000000011A13                 db  0Bh
.eh_frame:0000000000011A14                 db  49h ; I
.eh_frame:0000000000011A15                 db  0Eh
.eh_frame:0000000000011A16                 db  18h
.eh_frame:0000000000011A17                 db  41h ; A
.eh_frame:0000000000011A18                 db  0Eh
.eh_frame:0000000000011A19                 db  10h
.eh_frame:0000000000011A1A                 db  42h ; B
.eh_frame:0000000000011A1B                 db  0Eh
.eh_frame:0000000000011A1C                 db    8
.eh_frame:0000000000011A1D                 db    0
.eh_frame:0000000000011A1E                 db    0
.eh_frame:0000000000011A1F                 db    0
.eh_frame:0000000000011A20                 db  1Ch
.eh_frame:0000000000011A21                 db    0
.eh_frame:0000000000011A22                 db    0
.eh_frame:0000000000011A23                 db    0
.eh_frame:0000000000011A24                 db 0C4h
.eh_frame:0000000000011A25                 db  13h
.eh_frame:0000000000011A26                 db    0
.eh_frame:0000000000011A27                 db    0
.eh_frame:0000000000011A28                 db  18h
.eh_frame:0000000000011A29                 db  98h
.eh_frame:0000000000011A2A                 db 0FFh
.eh_frame:0000000000011A2B                 db 0FFh
.eh_frame:0000000000011A2C                 db  6Eh ; n
.eh_frame:0000000000011A2D                 db    0
.eh_frame:0000000000011A2E                 db    0
.eh_frame:0000000000011A2F                 db    0
.eh_frame:0000000000011A30                 db    0
.eh_frame:0000000000011A31                 db  44h ; D
.eh_frame:0000000000011A32                 db  0Eh
.eh_frame:0000000000011A33                 db  60h ; `
.eh_frame:0000000000011A34                 db  7Fh ; 
.eh_frame:0000000000011A35                 db  0Ah
.eh_frame:0000000000011A36                 db  0Eh
.eh_frame:0000000000011A37                 db    8
.eh_frame:0000000000011A38                 db  45h ; E
.eh_frame:0000000000011A39                 db  0Bh
.eh_frame:0000000000011A3A                 db    0
.eh_frame:0000000000011A3B                 db    0
.eh_frame:0000000000011A3C                 db    0
.eh_frame:0000000000011A3D                 db    0
.eh_frame:0000000000011A3E                 db    0
.eh_frame:0000000000011A3F                 db    0
.eh_frame:0000000000011A40                 db  1Ch
.eh_frame:0000000000011A41                 db    0
.eh_frame:0000000000011A42                 db    0
.eh_frame:0000000000011A43                 db    0
.eh_frame:0000000000011A44                 db 0E4h
.eh_frame:0000000000011A45                 db  13h
.eh_frame:0000000000011A46                 db    0
.eh_frame:0000000000011A47                 db    0
.eh_frame:0000000000011A48                 db  68h ; h
.eh_frame:0000000000011A49                 db  98h
.eh_frame:0000000000011A4A                 db 0FFh
.eh_frame:0000000000011A4B                 db 0FFh
.eh_frame:0000000000011A4C                 db  60h ; `
.eh_frame:0000000000011A4D                 db    0
.eh_frame:0000000000011A4E                 db    0
.eh_frame:0000000000011A4F                 db    0
.eh_frame:0000000000011A50                 db    0
.eh_frame:0000000000011A51                 db  44h ; D
.eh_frame:0000000000011A52                 db  0Eh
.eh_frame:0000000000011A53                 db  10h
.eh_frame:0000000000011A54                 db  75h ; u
.eh_frame:0000000000011A55                 db  0Ah
.eh_frame:0000000000011A56                 db  0Eh
.eh_frame:0000000000011A57                 db    8
.eh_frame:0000000000011A58                 db  47h ; G
.eh_frame:0000000000011A59                 db  0Bh
.eh_frame:0000000000011A5A                 db  5Fh ; _
.eh_frame:0000000000011A5B                 db  0Eh
.eh_frame:0000000000011A5C                 db    8
.eh_frame:0000000000011A5D                 db    0
.eh_frame:0000000000011A5E                 db    0
.eh_frame:0000000000011A5F                 db    0
.eh_frame:0000000000011A60                 db  1Ch
.eh_frame:0000000000011A61                 db    0
.eh_frame:0000000000011A62                 db    0
.eh_frame:0000000000011A63                 db    0
.eh_frame:0000000000011A64                 db    4
.eh_frame:0000000000011A65                 db  14h
.eh_frame:0000000000011A66                 db    0
.eh_frame:0000000000011A67                 db    0
.eh_frame:0000000000011A68                 db 0A8h
.eh_frame:0000000000011A69                 db  98h
.eh_frame:0000000000011A6A                 db 0FFh
.eh_frame:0000000000011A6B                 db 0FFh
.eh_frame:0000000000011A6C                 db  3Ch ; <
.eh_frame:0000000000011A6D                 db    0
.eh_frame:0000000000011A6E                 db    0
.eh_frame:0000000000011A6F                 db    0
.eh_frame:0000000000011A70                 db    0
.eh_frame:0000000000011A71                 db  44h ; D
.eh_frame:0000000000011A72                 db  0Eh
.eh_frame:0000000000011A73                 db  10h
.eh_frame:0000000000011A74                 db  61h ; a
.eh_frame:0000000000011A75                 db  0Ah
.eh_frame:0000000000011A76                 db  0Eh
.eh_frame:0000000000011A77                 db    8
.eh_frame:0000000000011A78                 db  4Bh ; K
.eh_frame:0000000000011A79                 db  0Bh
.eh_frame:0000000000011A7A                 db  4Bh ; K
.eh_frame:0000000000011A7B                 db  0Eh
.eh_frame:0000000000011A7C                 db    8
.eh_frame:0000000000011A7D                 db    0
.eh_frame:0000000000011A7E                 db    0
.eh_frame:0000000000011A7F                 db    0
.eh_frame:0000000000011A80                 db  34h ; 4
.eh_frame:0000000000011A81                 db    0
.eh_frame:0000000000011A82                 db    0
.eh_frame:0000000000011A83                 db    0
.eh_frame:0000000000011A84                 db  24h ; $
.eh_frame:0000000000011A85                 db  14h
.eh_frame:0000000000011A86                 db    0
.eh_frame:0000000000011A87                 db    0
.eh_frame:0000000000011A88                 db 0C8h
.eh_frame:0000000000011A89                 db  98h
.eh_frame:0000000000011A8A                 db 0FFh
.eh_frame:0000000000011A8B                 db 0FFh
.eh_frame:0000000000011A8C                 db  3Fh ; ?
.eh_frame:0000000000011A8D                 db    0
.eh_frame:0000000000011A8E                 db    0
.eh_frame:0000000000011A8F                 db    0
.eh_frame:0000000000011A90                 db    0
.eh_frame:0000000000011A91                 db  42h ; B
.eh_frame:0000000000011A92                 db  0Eh
.eh_frame:0000000000011A93                 db  10h
.eh_frame:0000000000011A94                 db  8Dh
.eh_frame:0000000000011A95                 db    2
.eh_frame:0000000000011A96                 db  42h ; B
.eh_frame:0000000000011A97                 db  0Eh
.eh_frame:0000000000011A98                 db  18h
.eh_frame:0000000000011A99                 db  8Ch
.eh_frame:0000000000011A9A                 db    3
.eh_frame:0000000000011A9B                 db  41h ; A
.eh_frame:0000000000011A9C                 db  0Eh
.eh_frame:0000000000011A9D                 db  20h
.eh_frame:0000000000011A9E                 db  86h
.eh_frame:0000000000011A9F                 db    4
.eh_frame:0000000000011AA0                 db  41h ; A
.eh_frame:0000000000011AA1                 db  0Eh
.eh_frame:0000000000011AA2                 db  28h ; (
.eh_frame:0000000000011AA3                 db  83h
.eh_frame:0000000000011AA4                 db    5
.eh_frame:0000000000011AA5                 db  46h ; F
.eh_frame:0000000000011AA6                 db  0Eh
.eh_frame:0000000000011AA7                 db  30h ; 0
.eh_frame:0000000000011AA8                 db  6Ah ; j
.eh_frame:0000000000011AA9                 db  0Eh
.eh_frame:0000000000011AAA                 db  28h ; (
.eh_frame:0000000000011AAB                 db  43h ; C
.eh_frame:0000000000011AAC                 db  0Eh
.eh_frame:0000000000011AAD                 db  20h
.eh_frame:0000000000011AAE                 db  41h ; A
.eh_frame:0000000000011AAF                 db  0Eh
.eh_frame:0000000000011AB0                 db  18h
.eh_frame:0000000000011AB1                 db  42h ; B
.eh_frame:0000000000011AB2                 db  0Eh
.eh_frame:0000000000011AB3                 db  10h
.eh_frame:0000000000011AB4                 db  42h ; B
.eh_frame:0000000000011AB5                 db  0Eh
.eh_frame:0000000000011AB6                 db    8
.eh_frame:0000000000011AB7                 db    0
.eh_frame:0000000000011AB8                 db  48h ; H
.eh_frame:0000000000011AB9                 db    0
.eh_frame:0000000000011ABA                 db    0
.eh_frame:0000000000011ABB                 db    0
.eh_frame:0000000000011ABC                 db  5Ch ; \
.eh_frame:0000000000011ABD                 db  14h
.eh_frame:0000000000011ABE                 db    0
.eh_frame:0000000000011ABF                 db    0
.eh_frame:0000000000011AC0                 db 0D0h
.eh_frame:0000000000011AC1                 db  98h
.eh_frame:0000000000011AC2                 db 0FFh
.eh_frame:0000000000011AC3                 db 0FFh
.eh_frame:0000000000011AC4                 db  43h ; C
.eh_frame:0000000000011AC5                 db    1
.eh_frame:0000000000011AC6                 db    0
.eh_frame:0000000000011AC7                 db    0
.eh_frame:0000000000011AC8                 db    0
.eh_frame:0000000000011AC9                 db  42h ; B
.eh_frame:0000000000011ACA                 db  0Eh
.eh_frame:0000000000011ACB                 db  10h
.eh_frame:0000000000011ACC                 db  8Fh
.eh_frame:0000000000011ACD                 db    2
.eh_frame:0000000000011ACE                 db  42h ; B
.eh_frame:0000000000011ACF                 db  0Eh
.eh_frame:0000000000011AD0                 db  18h
.eh_frame:0000000000011AD1                 db  8Eh
.eh_frame:0000000000011AD2                 db    3
.eh_frame:0000000000011AD3                 db  42h ; B
.eh_frame:0000000000011AD4                 db  0Eh
.eh_frame:0000000000011AD5                 db  20h
.eh_frame:0000000000011AD6                 db  8Dh
.eh_frame:0000000000011AD7                 db    4
.eh_frame:0000000000011AD8                 db  42h ; B
.eh_frame:0000000000011AD9                 db  0Eh
.eh_frame:0000000000011ADA                 db  28h ; (
.eh_frame:0000000000011ADB                 db  8Ch
.eh_frame:0000000000011ADC                 db    5
.eh_frame:0000000000011ADD                 db  41h ; A
.eh_frame:0000000000011ADE                 db  0Eh
.eh_frame:0000000000011ADF                 db  30h ; 0
.eh_frame:0000000000011AE0                 db  86h
.eh_frame:0000000000011AE1                 db    6
.eh_frame:0000000000011AE2                 db  41h ; A
.eh_frame:0000000000011AE3                 db  0Eh
.eh_frame:0000000000011AE4                 db  38h ; 8
.eh_frame:0000000000011AE5                 db  83h
.eh_frame:0000000000011AE6                 db    7
.eh_frame:0000000000011AE7                 db  44h ; D
.eh_frame:0000000000011AE8                 db  0Eh
.eh_frame:0000000000011AE9                 db  60h ; `
.eh_frame:0000000000011AEA                 db    2
.eh_frame:0000000000011AEB                 db 0FCh
.eh_frame:0000000000011AEC                 db  0Ah
.eh_frame:0000000000011AED                 db  0Eh
.eh_frame:0000000000011AEE                 db  38h ; 8
.eh_frame:0000000000011AEF                 db  41h ; A
.eh_frame:0000000000011AF0                 db  0Eh
.eh_frame:0000000000011AF1                 db  30h ; 0
.eh_frame:0000000000011AF2                 db  41h ; A
.eh_frame:0000000000011AF3                 db  0Eh
.eh_frame:0000000000011AF4                 db  28h ; (
.eh_frame:0000000000011AF5                 db  42h ; B
.eh_frame:0000000000011AF6                 db  0Eh
.eh_frame:0000000000011AF7                 db  20h
.eh_frame:0000000000011AF8                 db  42h ; B
.eh_frame:0000000000011AF9                 db  0Eh
.eh_frame:0000000000011AFA                 db  18h
.eh_frame:0000000000011AFB                 db  42h ; B
.eh_frame:0000000000011AFC                 db  0Eh
.eh_frame:0000000000011AFD                 db  10h
.eh_frame:0000000000011AFE                 db  42h ; B
.eh_frame:0000000000011AFF                 db  0Eh
.eh_frame:0000000000011B00                 db    8
.eh_frame:0000000000011B01                 db  41h ; A
.eh_frame:0000000000011B02                 db  0Bh
.eh_frame:0000000000011B03                 db    0
.eh_frame:0000000000011B04                 db  18h
.eh_frame:0000000000011B05                 db    0
.eh_frame:0000000000011B06                 db    0
.eh_frame:0000000000011B07                 db    0
.eh_frame:0000000000011B08                 db 0A8h
.eh_frame:0000000000011B09                 db  14h
.eh_frame:0000000000011B0A                 db    0
.eh_frame:0000000000011B0B                 db    0
.eh_frame:0000000000011B0C                 db 0D4h
.eh_frame:0000000000011B0D                 db  99h
.eh_frame:0000000000011B0E                 db 0FFh
.eh_frame:0000000000011B0F                 db 0FFh
.eh_frame:0000000000011B10                 db 0A4h
.eh_frame:0000000000011B11                 db    0
.eh_frame:0000000000011B12                 db    0
.eh_frame:0000000000011B13                 db    0
.eh_frame:0000000000011B14                 db    0
.eh_frame:0000000000011B15                 db  44h ; D
.eh_frame:0000000000011B16                 db  0Eh
.eh_frame:0000000000011B17                 db  20h
.eh_frame:0000000000011B18                 db    2
.eh_frame:0000000000011B19                 db  7Eh ; ~
.eh_frame:0000000000011B1A                 db  0Ah
.eh_frame:0000000000011B1B                 db  0Eh
.eh_frame:0000000000011B1C                 db    8
.eh_frame:0000000000011B1D                 db  46h ; F
.eh_frame:0000000000011B1E                 db  0Bh
.eh_frame:0000000000011B1F                 db    0
.eh_frame:0000000000011B20                 db  34h ; 4
.eh_frame:0000000000011B21                 db    0
.eh_frame:0000000000011B22                 db    0
.eh_frame:0000000000011B23                 db    0
.eh_frame:0000000000011B24                 db 0C4h
.eh_frame:0000000000011B25                 db  14h
.eh_frame:0000000000011B26                 db    0
.eh_frame:0000000000011B27                 db    0
.eh_frame:0000000000011B28                 db  68h ; h
.eh_frame:0000000000011B29                 db  9Ah
.eh_frame:0000000000011B2A                 db 0FFh
.eh_frame:0000000000011B2B                 db 0FFh
.eh_frame:0000000000011B2C                 db  7Bh ; {
.eh_frame:0000000000011B2D                 db    0
.eh_frame:0000000000011B2E                 db    0
.eh_frame:0000000000011B2F                 db    0
.eh_frame:0000000000011B30                 db    0
.eh_frame:0000000000011B31                 db  42h ; B
.eh_frame:0000000000011B32                 db  0Eh
.eh_frame:0000000000011B33                 db  10h
.eh_frame:0000000000011B34                 db  8Ch
.eh_frame:0000000000011B35                 db    2
.eh_frame:0000000000011B36                 db  41h ; A
.eh_frame:0000000000011B37                 db  0Eh
.eh_frame:0000000000011B38                 db  18h
.eh_frame:0000000000011B39                 db  86h
.eh_frame:0000000000011B3A                 db    3
.eh_frame:0000000000011B3B                 db  41h ; A
.eh_frame:0000000000011B3C                 db  0Eh
.eh_frame:0000000000011B3D                 db  20h
.eh_frame:0000000000011B3E                 db  83h
.eh_frame:0000000000011B3F                 db    4
.eh_frame:0000000000011B40                 db  7Dh ; }
.eh_frame:0000000000011B41                 db  0Ah
.eh_frame:0000000000011B42                 db  0Eh
.eh_frame:0000000000011B43                 db  18h
.eh_frame:0000000000011B44                 db  41h ; A
.eh_frame:0000000000011B45                 db  0Eh
.eh_frame:0000000000011B46                 db  10h
.eh_frame:0000000000011B47                 db  42h ; B
.eh_frame:0000000000011B48                 db  0Eh
.eh_frame:0000000000011B49                 db    8
.eh_frame:0000000000011B4A                 db  44h ; D
.eh_frame:0000000000011B4B                 db  0Bh
.eh_frame:0000000000011B4C                 db  60h ; `
.eh_frame:0000000000011B4D                 db  0Ah
.eh_frame:0000000000011B4E                 db  0Eh
.eh_frame:0000000000011B4F                 db  18h
.eh_frame:0000000000011B50                 db  41h ; A
.eh_frame:0000000000011B51                 db  0Eh
.eh_frame:0000000000011B52                 db  10h
.eh_frame:0000000000011B53                 db  42h ; B
.eh_frame:0000000000011B54                 db  0Eh
.eh_frame:0000000000011B55                 db    8
.eh_frame:0000000000011B56                 db  45h ; E
.eh_frame:0000000000011B57                 db  0Bh
.eh_frame:0000000000011B58                 db  1Ch
.eh_frame:0000000000011B59                 db    0
.eh_frame:0000000000011B5A                 db    0
.eh_frame:0000000000011B5B                 db    0
.eh_frame:0000000000011B5C                 db 0FCh
.eh_frame:0000000000011B5D                 db  14h
.eh_frame:0000000000011B5E                 db    0
.eh_frame:0000000000011B5F                 db    0
.eh_frame:0000000000011B60                 db 0B0h
.eh_frame:0000000000011B61                 db  9Ah
.eh_frame:0000000000011B62                 db 0FFh
.eh_frame:0000000000011B63                 db 0FFh
.eh_frame:0000000000011B64                 db  40h ; @
.eh_frame:0000000000011B65                 db    0
.eh_frame:0000000000011B66                 db    0
.eh_frame:0000000000011B67                 db    0
.eh_frame:0000000000011B68                 db    0
.eh_frame:0000000000011B69                 db  44h ; D
.eh_frame:0000000000011B6A                 db  0Eh
.eh_frame:0000000000011B6B                 db  10h
.eh_frame:0000000000011B6C                 db  83h
.eh_frame:0000000000011B6D                 db    2
.eh_frame:0000000000011B6E                 db  5Ah ; Z
.eh_frame:0000000000011B6F                 db  0Ah
.eh_frame:0000000000011B70                 db  0Eh
.eh_frame:0000000000011B71                 db    8
.eh_frame:0000000000011B72                 db  4Ah ; J
.eh_frame:0000000000011B73                 db  0Bh
.eh_frame:0000000000011B74                 db  53h ; S
.eh_frame:0000000000011B75                 db  0Eh
.eh_frame:0000000000011B76                 db    8
.eh_frame:0000000000011B77                 db    0
.eh_frame:0000000000011B78                 db  2Ch ; ,
.eh_frame:0000000000011B79                 db    0
.eh_frame:0000000000011B7A                 db    0
.eh_frame:0000000000011B7B                 db    0
.eh_frame:0000000000011B7C                 db  1Ch
.eh_frame:0000000000011B7D                 db  15h
.eh_frame:0000000000011B7E                 db    0
.eh_frame:0000000000011B7F                 db    0
.eh_frame:0000000000011B80                 db 0D0h
.eh_frame:0000000000011B81                 db  9Ah
.eh_frame:0000000000011B82                 db 0FFh
.eh_frame:0000000000011B83                 db 0FFh
.eh_frame:0000000000011B84                 db  57h ; W
.eh_frame:0000000000011B85                 db    0
.eh_frame:0000000000011B86                 db    0
.eh_frame:0000000000011B87                 db    0
.eh_frame:0000000000011B88                 db    0
.eh_frame:0000000000011B89                 db  63h ; c
.eh_frame:0000000000011B8A                 db  0Eh
.eh_frame:0000000000011B8B                 db  10h
.eh_frame:0000000000011B8C                 db  8Ch
.eh_frame:0000000000011B8D                 db    2
.eh_frame:0000000000011B8E                 db  41h ; A
.eh_frame:0000000000011B8F                 db  0Eh
.eh_frame:0000000000011B90                 db  18h
.eh_frame:0000000000011B91                 db  86h
.eh_frame:0000000000011B92                 db    3
.eh_frame:0000000000011B93                 db  44h ; D
.eh_frame:0000000000011B94                 db  0Eh
.eh_frame:0000000000011B95                 db  20h
.eh_frame:0000000000011B96                 db  83h
.eh_frame:0000000000011B97                 db    4
.eh_frame:0000000000011B98                 db  6Bh ; k
.eh_frame:0000000000011B99                 db  0Eh
.eh_frame:0000000000011B9A                 db  18h
.eh_frame:0000000000011B9B                 db  41h ; A
.eh_frame:0000000000011B9C                 db  0Eh
.eh_frame:0000000000011B9D                 db  10h
.eh_frame:0000000000011B9E                 db  42h ; B
.eh_frame:0000000000011B9F                 db  0Eh
.eh_frame:0000000000011BA0                 db    8
.eh_frame:0000000000011BA1                 db    0
.eh_frame:0000000000011BA2                 db    0
.eh_frame:0000000000011BA3                 db    0
.eh_frame:0000000000011BA4                 db    0
.eh_frame:0000000000011BA5                 db    0
.eh_frame:0000000000011BA6                 db    0
.eh_frame:0000000000011BA7                 db    0
.eh_frame:0000000000011BA8                 db  24h ; $
.eh_frame:0000000000011BA9                 db    0
.eh_frame:0000000000011BAA                 db    0
.eh_frame:0000000000011BAB                 db    0
.eh_frame:0000000000011BAC                 db  4Ch ; L
.eh_frame:0000000000011BAD                 db  15h
.eh_frame:0000000000011BAE                 db    0
.eh_frame:0000000000011BAF                 db    0
.eh_frame:0000000000011BB0                 db    0
.eh_frame:0000000000011BB1                 db  9Bh
.eh_frame:0000000000011BB2                 db 0FFh
.eh_frame:0000000000011BB3                 db 0FFh
.eh_frame:0000000000011BB4                 db  7Eh ; ~
.eh_frame:0000000000011BB5                 db    0
.eh_frame:0000000000011BB6                 db    0
.eh_frame:0000000000011BB7                 db    0
.eh_frame:0000000000011BB8                 db    0
.eh_frame:0000000000011BB9                 db  41h ; A
.eh_frame:0000000000011BBA                 db  0Eh
.eh_frame:0000000000011BBB                 db  10h
.eh_frame:0000000000011BBC                 db  83h
.eh_frame:0000000000011BBD                 db    2
.eh_frame:0000000000011BBE                 db  4Ch ; L
.eh_frame:0000000000011BBF                 db  0Eh
.eh_frame:0000000000011BC0                 db  20h
.eh_frame:0000000000011BC1                 db    2
.eh_frame:0000000000011BC2                 db  49h ; I
.eh_frame:0000000000011BC3                 db  0Ah
.eh_frame:0000000000011BC4                 db  0Eh
.eh_frame:0000000000011BC5                 db  10h
.eh_frame:0000000000011BC6                 db  41h ; A
.eh_frame:0000000000011BC7                 db  0Eh
.eh_frame:0000000000011BC8                 db    8
.eh_frame:0000000000011BC9                 db  41h ; A
.eh_frame:0000000000011BCA                 db  0Bh
.eh_frame:0000000000011BCB                 db    0
.eh_frame:0000000000011BCC                 db    0
.eh_frame:0000000000011BCD                 db    0
.eh_frame:0000000000011BCE                 db    0
.eh_frame:0000000000011BCF                 db    0
.eh_frame:0000000000011BD0                 db  14h
.eh_frame:0000000000011BD1                 db    0
.eh_frame:0000000000011BD2                 db    0
.eh_frame:0000000000011BD3                 db    0
.eh_frame:0000000000011BD4                 db  74h ; t
.eh_frame:0000000000011BD5                 db  15h
.eh_frame:0000000000011BD6                 db    0
.eh_frame:0000000000011BD7                 db    0
.eh_frame:0000000000011BD8                 db  58h ; X
.eh_frame:0000000000011BD9                 db  9Bh
.eh_frame:0000000000011BDA                 db 0FFh
.eh_frame:0000000000011BDB                 db 0FFh
.eh_frame:0000000000011BDC                 db  0Eh
.eh_frame:0000000000011BDD                 db    0
.eh_frame:0000000000011BDE                 db    0
.eh_frame:0000000000011BDF                 db    0
.eh_frame:0000000000011BE0                 db    0
.eh_frame:0000000000011BE1                 db    0
.eh_frame:0000000000011BE2                 db    0
.eh_frame:0000000000011BE3                 db    0
.eh_frame:0000000000011BE4                 db    0
.eh_frame:0000000000011BE5                 db    0
.eh_frame:0000000000011BE6                 db    0
.eh_frame:0000000000011BE7                 db    0
.eh_frame:0000000000011BE8                 db  34h ; 4
.eh_frame:0000000000011BE9                 db    0
.eh_frame:0000000000011BEA                 db    0
.eh_frame:0000000000011BEB                 db    0
.eh_frame:0000000000011BEC                 db  8Ch
.eh_frame:0000000000011BED                 db  15h
.eh_frame:0000000000011BEE                 db    0
.eh_frame:0000000000011BEF                 db    0
.eh_frame:0000000000011BF0                 db  50h ; P
.eh_frame:0000000000011BF1                 db  9Bh
.eh_frame:0000000000011BF2                 db 0FFh
.eh_frame:0000000000011BF3                 db 0FFh
.eh_frame:0000000000011BF4                 db  7Eh ; ~
.eh_frame:0000000000011BF5                 db    2
.eh_frame:0000000000011BF6                 db    0
.eh_frame:0000000000011BF7                 db    0
.eh_frame:0000000000011BF8                 db    0
.eh_frame:0000000000011BF9                 db  42h ; B
.eh_frame:0000000000011BFA                 db  0Eh
.eh_frame:0000000000011BFB                 db  10h
.eh_frame:0000000000011BFC                 db  8Ch
.eh_frame:0000000000011BFD                 db    2
.eh_frame:0000000000011BFE                 db  41h ; A
.eh_frame:0000000000011BFF                 db  0Eh
.eh_frame:0000000000011C00                 db  18h
.eh_frame:0000000000011C01                 db  86h
.eh_frame:0000000000011C02                 db    3
.eh_frame:0000000000011C03                 db  43h ; C
.eh_frame:0000000000011C04                 db  0Eh
.eh_frame:0000000000011C05                 db  20h
.eh_frame:0000000000011C06                 db  83h
.eh_frame:0000000000011C07                 db    4
.eh_frame:0000000000011C08                 db  44h ; D
.eh_frame:0000000000011C09                 db  0Eh
.eh_frame:0000000000011C0A                 db  70h ; p
.eh_frame:0000000000011C0B                 db    2
.eh_frame:0000000000011C0C                 db 0F0h
.eh_frame:0000000000011C0D                 db  0Ah
.eh_frame:0000000000011C0E                 db  0Eh
.eh_frame:0000000000011C0F                 db  20h
.eh_frame:0000000000011C10                 db  41h ; A
.eh_frame:0000000000011C11                 db  0Eh
.eh_frame:0000000000011C12                 db  18h
.eh_frame:0000000000011C13                 db  41h ; A
.eh_frame:0000000000011C14                 db  0Eh
.eh_frame:0000000000011C15                 db  10h
.eh_frame:0000000000011C16                 db  42h ; B
.eh_frame:0000000000011C17                 db  0Eh
.eh_frame:0000000000011C18                 db    8
.eh_frame:0000000000011C19                 db  42h ; B
.eh_frame:0000000000011C1A                 db  0Bh
.eh_frame:0000000000011C1B                 db    0
.eh_frame:0000000000011C1C                 db    0
.eh_frame:0000000000011C1D                 db    0
.eh_frame:0000000000011C1E                 db    0
.eh_frame:0000000000011C1F                 db    0
.eh_frame:0000000000011C20                 db  2Ch ; ,
.eh_frame:0000000000011C21                 db    0
.eh_frame:0000000000011C22                 db    0
.eh_frame:0000000000011C23                 db    0
.eh_frame:0000000000011C24                 db 0C4h
.eh_frame:0000000000011C25                 db  15h
.eh_frame:0000000000011C26                 db    0
.eh_frame:0000000000011C27                 db    0
.eh_frame:0000000000011C28                 db  98h
.eh_frame:0000000000011C29                 db  9Dh
.eh_frame:0000000000011C2A                 db 0FFh
.eh_frame:0000000000011C2B                 db 0FFh
.eh_frame:0000000000011C2C                 db  1Fh
.eh_frame:0000000000011C2D                 db  11h
.eh_frame:0000000000011C2E                 db    0
.eh_frame:0000000000011C2F                 db    0
.eh_frame:0000000000011C30                 db    0
.eh_frame:0000000000011C31                 db  41h ; A
.eh_frame:0000000000011C32                 db  0Eh
.eh_frame:0000000000011C33                 db  10h
.eh_frame:0000000000011C34                 db  86h
.eh_frame:0000000000011C35                 db    2
.eh_frame:0000000000011C36                 db  43h ; C
.eh_frame:0000000000011C37                 db  0Dh
.eh_frame:0000000000011C38                 db    6
.eh_frame:0000000000011C39                 db  48h ; H
.eh_frame:0000000000011C3A                 db  8Fh
.eh_frame:0000000000011C3B                 db    3
.eh_frame:0000000000011C3C                 db  8Eh
.eh_frame:0000000000011C3D                 db    4
.eh_frame:0000000000011C3E                 db  8Dh
.eh_frame:0000000000011C3F                 db    5
.eh_frame:0000000000011C40                 db  8Ch
.eh_frame:0000000000011C41                 db    6
.eh_frame:0000000000011C42                 db  48h ; H
.eh_frame:0000000000011C43                 db  83h
.eh_frame:0000000000011C44                 db    7
.eh_frame:0000000000011C45                 db    3
.eh_frame:0000000000011C46                 db 0EFh
.eh_frame:0000000000011C47                 db    1
.eh_frame:0000000000011C48                 db  0Ah
.eh_frame:0000000000011C49                 db  0Ch
.eh_frame:0000000000011C4A                 db    7
.eh_frame:0000000000011C4B                 db    8
.eh_frame:0000000000011C4C                 db  45h ; E
.eh_frame:0000000000011C4D                 db  0Bh
.eh_frame:0000000000011C4E                 db    0
.eh_frame:0000000000011C4F                 db    0
.eh_frame:0000000000011C50                 db  14h
.eh_frame:0000000000011C51                 db    0
.eh_frame:0000000000011C52                 db    0
.eh_frame:0000000000011C53                 db    0
.eh_frame:0000000000011C54                 db 0F4h
.eh_frame:0000000000011C55                 db  15h
.eh_frame:0000000000011C56                 db    0
.eh_frame:0000000000011C57                 db    0
.eh_frame:0000000000011C58                 db  88h
.eh_frame:0000000000011C59                 db 0AEh
.eh_frame:0000000000011C5A                 db 0FFh
.eh_frame:0000000000011C5B                 db 0FFh
.eh_frame:0000000000011C5C                 db 0FEh
.eh_frame:0000000000011C5D                 db    1
.eh_frame:0000000000011C5E                 db    0
.eh_frame:0000000000011C5F                 db    0
.eh_frame:0000000000011C60                 db    0
.eh_frame:0000000000011C61                 db    0
.eh_frame:0000000000011C62                 db    0
.eh_frame:0000000000011C63                 db    0
.eh_frame:0000000000011C64                 db    0
.eh_frame:0000000000011C65                 db    0
.eh_frame:0000000000011C66                 db    0
.eh_frame:0000000000011C67                 db    0
.eh_frame:0000000000011C68                 db  4Ch ; L
.eh_frame:0000000000011C69                 db    0
.eh_frame:0000000000011C6A                 db    0
.eh_frame:0000000000011C6B                 db    0
.eh_frame:0000000000011C6C                 db  0Ch
.eh_frame:0000000000011C6D                 db  16h
.eh_frame:0000000000011C6E                 db    0
.eh_frame:0000000000011C6F                 db    0
.eh_frame:0000000000011C70                 db  70h ; p
.eh_frame:0000000000011C71                 db 0B0h
.eh_frame:0000000000011C72                 db 0FFh
.eh_frame:0000000000011C73                 db 0FFh
.eh_frame:0000000000011C74                 db 0ECh
.eh_frame:0000000000011C75                 db  0Ch
.eh_frame:0000000000011C76                 db    0
.eh_frame:0000000000011C77                 db    0
.eh_frame:0000000000011C78                 db    0
.eh_frame:0000000000011C79                 db  42h ; B
.eh_frame:0000000000011C7A                 db  0Eh
.eh_frame:0000000000011C7B                 db  10h
.eh_frame:0000000000011C7C                 db  8Fh
.eh_frame:0000000000011C7D                 db    2
.eh_frame:0000000000011C7E                 db  42h ; B
.eh_frame:0000000000011C7F                 db  0Eh
.eh_frame:0000000000011C80                 db  18h
.eh_frame:0000000000011C81                 db  8Eh
.eh_frame:0000000000011C82                 db    3
.eh_frame:0000000000011C83                 db  46h ; F
.eh_frame:0000000000011C84                 db  0Eh
.eh_frame:0000000000011C85                 db  20h
.eh_frame:0000000000011C86                 db  8Dh
.eh_frame:0000000000011C87                 db    4
.eh_frame:0000000000011C88                 db  42h ; B
.eh_frame:0000000000011C89                 db  0Eh
.eh_frame:0000000000011C8A                 db  28h ; (
.eh_frame:0000000000011C8B                 db  8Ch
.eh_frame:0000000000011C8C                 db    5
.eh_frame:0000000000011C8D                 db  45h ; E
.eh_frame:0000000000011C8E                 db  0Eh
.eh_frame:0000000000011C8F                 db  30h ; 0
.eh_frame:0000000000011C90                 db  86h
.eh_frame:0000000000011C91                 db    6
.eh_frame:0000000000011C92                 db  41h ; A
.eh_frame:0000000000011C93                 db  0Eh
.eh_frame:0000000000011C94                 db  38h ; 8
.eh_frame:0000000000011C95                 db  83h
.eh_frame:0000000000011C96                 db    7
.eh_frame:0000000000011C97                 db  52h ; R
.eh_frame:0000000000011C98                 db  0Eh
.eh_frame:0000000000011C99                 db  90h
.eh_frame:0000000000011C9A                 db    1
.eh_frame:0000000000011C9B                 db    2
.eh_frame:0000000000011C9C                 db  82h
.eh_frame:0000000000011C9D                 db  0Ah
.eh_frame:0000000000011C9E                 db  0Eh
.eh_frame:0000000000011C9F                 db  38h ; 8
.eh_frame:0000000000011CA0                 db  41h ; A
.eh_frame:0000000000011CA1                 db  0Eh
.eh_frame:0000000000011CA2                 db  30h ; 0
.eh_frame:0000000000011CA3                 db  41h ; A
.eh_frame:0000000000011CA4                 db  0Eh
.eh_frame:0000000000011CA5                 db  28h ; (
.eh_frame:0000000000011CA6                 db  42h ; B
.eh_frame:0000000000011CA7                 db  0Eh
.eh_frame:0000000000011CA8                 db  20h
.eh_frame:0000000000011CA9                 db  42h ; B
.eh_frame:0000000000011CAA                 db  0Eh
.eh_frame:0000000000011CAB                 db  18h
.eh_frame:0000000000011CAC                 db  42h ; B
.eh_frame:0000000000011CAD                 db  0Eh
.eh_frame:0000000000011CAE                 db  10h
.eh_frame:0000000000011CAF                 db  42h ; B
.eh_frame:0000000000011CB0                 db  0Eh
.eh_frame:0000000000011CB1                 db    8
.eh_frame:0000000000011CB2                 db  48h ; H
.eh_frame:0000000000011CB3                 db  0Bh
.eh_frame:0000000000011CB4                 db    0
.eh_frame:0000000000011CB5                 db    0
.eh_frame:0000000000011CB6                 db    0
.eh_frame:0000000000011CB7                 db    0
.eh_frame:0000000000011CB8                 db  44h ; D
.eh_frame:0000000000011CB9                 db    0
.eh_frame:0000000000011CBA                 db    0
.eh_frame:0000000000011CBB                 db    0
.eh_frame:0000000000011CBC                 db  5Ch ; \
.eh_frame:0000000000011CBD                 db  16h
.eh_frame:0000000000011CBE                 db    0
.eh_frame:0000000000011CBF                 db    0
.eh_frame:0000000000011CC0                 db  10h
.eh_frame:0000000000011CC1                 db 0BDh
.eh_frame:0000000000011CC2                 db 0FFh
.eh_frame:0000000000011CC3                 db 0FFh
.eh_frame:0000000000011CC4                 db  65h ; e
.eh_frame:0000000000011CC5                 db    0
.eh_frame:0000000000011CC6                 db    0
.eh_frame:0000000000011CC7                 db    0
.eh_frame:0000000000011CC8                 db    0
.eh_frame:0000000000011CC9                 db  42h ; B
.eh_frame:0000000000011CCA                 db  0Eh
.eh_frame:0000000000011CCB                 db  10h
.eh_frame:0000000000011CCC                 db  8Fh
.eh_frame:0000000000011CCD                 db    2
.eh_frame:0000000000011CCE                 db  42h ; B
.eh_frame:0000000000011CCF                 db  0Eh
.eh_frame:0000000000011CD0                 db  18h
.eh_frame:0000000000011CD1                 db  8Eh
.eh_frame:0000000000011CD2                 db    3
.eh_frame:0000000000011CD3                 db  45h ; E
.eh_frame:0000000000011CD4                 db  0Eh
.eh_frame:0000000000011CD5                 db  20h
.eh_frame:0000000000011CD6                 db  8Dh
.eh_frame:0000000000011CD7                 db    4
.eh_frame:0000000000011CD8                 db  42h ; B
.eh_frame:0000000000011CD9                 db  0Eh
.eh_frame:0000000000011CDA                 db  28h ; (
.eh_frame:0000000000011CDB                 db  8Ch
.eh_frame:0000000000011CDC                 db    5
.eh_frame:0000000000011CDD                 db  48h ; H
.eh_frame:0000000000011CDE                 db  0Eh
.eh_frame:0000000000011CDF                 db  30h ; 0
.eh_frame:0000000000011CE0                 db  86h
.eh_frame:0000000000011CE1                 db    6
.eh_frame:0000000000011CE2                 db  48h ; H
.eh_frame:0000000000011CE3                 db  0Eh
.eh_frame:0000000000011CE4                 db  38h ; 8
.eh_frame:0000000000011CE5                 db  83h
.eh_frame:0000000000011CE6                 db    7
.eh_frame:0000000000011CE7                 db  4Dh ; M
.eh_frame:0000000000011CE8                 db  0Eh
.eh_frame:0000000000011CE9                 db  40h ; @
.eh_frame:0000000000011CEA                 db  72h ; r
.eh_frame:0000000000011CEB                 db  0Eh
.eh_frame:0000000000011CEC                 db  38h ; 8
.eh_frame:0000000000011CED                 db  41h ; A
.eh_frame:0000000000011CEE                 db  0Eh
.eh_frame:0000000000011CEF                 db  30h ; 0
.eh_frame:0000000000011CF0                 db  41h ; A
.eh_frame:0000000000011CF1                 db  0Eh
.eh_frame:0000000000011CF2                 db  28h ; (
.eh_frame:0000000000011CF3                 db  42h ; B
.eh_frame:0000000000011CF4                 db  0Eh
.eh_frame:0000000000011CF5                 db  20h
.eh_frame:0000000000011CF6                 db  42h ; B
.eh_frame:0000000000011CF7                 db  0Eh
.eh_frame:0000000000011CF8                 db  18h
.eh_frame:0000000000011CF9                 db  42h ; B
.eh_frame:0000000000011CFA                 db  0Eh
.eh_frame:0000000000011CFB                 db  10h
.eh_frame:0000000000011CFC                 db  42h ; B
.eh_frame:0000000000011CFD                 db  0Eh
.eh_frame:0000000000011CFE                 db    8
.eh_frame:0000000000011CFF                 db    0
.eh_frame:0000000000011D00                 db  14h
.eh_frame:0000000000011D01                 db    0
.eh_frame:0000000000011D02                 db    0
.eh_frame:0000000000011D03                 db    0
.eh_frame:0000000000011D04                 db 0A4h
.eh_frame:0000000000011D05                 db  16h
.eh_frame:0000000000011D06                 db    0
.eh_frame:0000000000011D07                 db    0
.eh_frame:0000000000011D08                 db  38h ; 8
.eh_frame:0000000000011D09                 db 0BDh
.eh_frame:0000000000011D0A                 db 0FFh
.eh_frame:0000000000011D0B                 db 0FFh
.eh_frame:0000000000011D0C                 db    2
.eh_frame:0000000000011D0D                 db    0
.eh_frame:0000000000011D0E                 db    0
.eh_frame:0000000000011D0F                 db    0
.eh_frame:0000000000011D10                 db    0
.eh_frame:0000000000011D11                 db    0
.eh_frame:0000000000011D12                 db    0
.eh_frame:0000000000011D13                 db    0
.eh_frame:0000000000011D14                 db    0
.eh_frame:0000000000011D15                 db    0
.eh_frame:0000000000011D16                 db    0
.eh_frame:0000000000011D17                 db    0
.eh_frame:0000000000011D18                 db  10h
.eh_frame:0000000000011D19                 db    0
.eh_frame:0000000000011D1A                 db    0
.eh_frame:0000000000011D1B                 db    0
.eh_frame:0000000000011D1C                 db 0BCh
.eh_frame:0000000000011D1D                 db  16h
.eh_frame:0000000000011D1E                 db    0
.eh_frame:0000000000011D1F                 db    0
.eh_frame:0000000000011D20                 db  30h ; 0
.eh_frame:0000000000011D21                 db 0BDh
.eh_frame:0000000000011D22                 db 0FFh
.eh_frame:0000000000011D23                 db 0FFh
.eh_frame:0000000000011D24                 db  0Eh
.eh_frame:0000000000011D25                 db    0
.eh_frame:0000000000011D26                 db    0
.eh_frame:0000000000011D27                 db    0
.eh_frame:0000000000011D28                 db    0
.eh_frame:0000000000011D29                 db    0
.eh_frame:0000000000011D2A                 db    0
.eh_frame:0000000000011D2B                 db    0
.eh_frame:0000000000011D2C __FRAME_END__   db    0
.eh_frame:0000000000011D2D                 db    0
.eh_frame:0000000000011D2E                 db    0
.eh_frame:0000000000011D2F                 db    0
.eh_frame:0000000000011D2F _eh_frame       ends
.eh_frame:0000000000011D2F
.init_array:00000000002129B0 ; ELF Initialization Function Table
.init_array:00000000002129B0 ; ===========================================================================
.init_array:00000000002129B0
.init_array:00000000002129B0 ; Segment type: Pure data
.init_array:00000000002129B0 ; Segment permissions: Read/Write
.init_array:00000000002129B0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002129B0                 assume cs:_init_array
.init_array:00000000002129B0                 ;org 2129B0h
.init_array:00000000002129B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002129B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002129B0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002129B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002129B0
.fini_array:00000000002129B8 ; ELF Termination Function Table
.fini_array:00000000002129B8 ; ===========================================================================
.fini_array:00000000002129B8
.fini_array:00000000002129B8 ; Segment type: Pure data
.fini_array:00000000002129B8 ; Segment permissions: Read/Write
.fini_array:00000000002129B8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002129B8                 assume cs:_fini_array
.fini_array:00000000002129B8                 ;org 2129B8h
.fini_array:00000000002129B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002129B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002129B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002129B8
.data.rel.ro:00000000002129C0 ; ===========================================================================
.data.rel.ro:00000000002129C0
.data.rel.ro:00000000002129C0 ; Segment type: Pure data
.data.rel.ro:00000000002129C0 ; Segment permissions: Read/Write
.data.rel.ro:00000000002129C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:00000000002129C0                 assume cs:_data_rel_ro
.data.rel.ro:00000000002129C0                 ;org 2129C0h
.data.rel.ro:00000000002129C0 ; struct option long_options
.data.rel.ro:00000000002129C0 long_options    dq offset aDereference  ; name
.data.rel.ro:00000000002129C0                                         ; DATA XREF: main+E↑o
.data.rel.ro:00000000002129C0                 dd 0                    ; has_arg ; "dereference"
.data.rel.ro:00000000002129C0                 db 4 dup(0)
.data.rel.ro:00000000002129C0                 dq 0                    ; flag
.data.rel.ro:00000000002129C0                 dd 4Ch                  ; val
.data.rel.ro:00000000002129C0                 db 4 dup(0)
.data.rel.ro:00000000002129E0                 dq offset aFileSystem   ; "file-system"
.data.rel.ro:00000000002129E8                 db    0
.data.rel.ro:00000000002129E9                 db    0
.data.rel.ro:00000000002129EA                 db    0
.data.rel.ro:00000000002129EB                 db    0
.data.rel.ro:00000000002129EC                 db    0
.data.rel.ro:00000000002129ED                 db    0
.data.rel.ro:00000000002129EE                 db    0
.data.rel.ro:00000000002129EF                 db    0
.data.rel.ro:00000000002129F0                 db    0
.data.rel.ro:00000000002129F1                 db    0
.data.rel.ro:00000000002129F2                 db    0
.data.rel.ro:00000000002129F3                 db    0
.data.rel.ro:00000000002129F4                 db    0
.data.rel.ro:00000000002129F5                 db    0
.data.rel.ro:00000000002129F6                 db    0
.data.rel.ro:00000000002129F7                 db    0
.data.rel.ro:00000000002129F8                 db  66h ; f
.data.rel.ro:00000000002129F9                 db    0
.data.rel.ro:00000000002129FA                 db    0
.data.rel.ro:00000000002129FB                 db    0
.data.rel.ro:00000000002129FC                 db    0
.data.rel.ro:00000000002129FD                 db    0
.data.rel.ro:00000000002129FE                 db    0
.data.rel.ro:00000000002129FF                 db    0
.data.rel.ro:0000000000212A00                 dq offset aFormat       ; "format"
.data.rel.ro:0000000000212A08                 db    1
.data.rel.ro:0000000000212A09                 db    0
.data.rel.ro:0000000000212A0A                 db    0
.data.rel.ro:0000000000212A0B                 db    0
.data.rel.ro:0000000000212A0C                 db    0
.data.rel.ro:0000000000212A0D                 db    0
.data.rel.ro:0000000000212A0E                 db    0
.data.rel.ro:0000000000212A0F                 db    0
.data.rel.ro:0000000000212A10                 db    0
.data.rel.ro:0000000000212A11                 db    0
.data.rel.ro:0000000000212A12                 db    0
.data.rel.ro:0000000000212A13                 db    0
.data.rel.ro:0000000000212A14                 db    0
.data.rel.ro:0000000000212A15                 db    0
.data.rel.ro:0000000000212A16                 db    0
.data.rel.ro:0000000000212A17                 db    0
.data.rel.ro:0000000000212A18                 db  63h ; c
.data.rel.ro:0000000000212A19                 db    0
.data.rel.ro:0000000000212A1A                 db    0
.data.rel.ro:0000000000212A1B                 db    0
.data.rel.ro:0000000000212A1C                 db    0
.data.rel.ro:0000000000212A1D                 db    0
.data.rel.ro:0000000000212A1E                 db    0
.data.rel.ro:0000000000212A1F                 db    0
.data.rel.ro:0000000000212A20                 dq offset aPrintf       ; "printf"
.data.rel.ro:0000000000212A28                 db    1
.data.rel.ro:0000000000212A29                 db    0
.data.rel.ro:0000000000212A2A                 db    0
.data.rel.ro:0000000000212A2B                 db    0
.data.rel.ro:0000000000212A2C                 db    0
.data.rel.ro:0000000000212A2D                 db    0
.data.rel.ro:0000000000212A2E                 db    0
.data.rel.ro:0000000000212A2F                 db    0
.data.rel.ro:0000000000212A30                 db    0
.data.rel.ro:0000000000212A31                 db    0
.data.rel.ro:0000000000212A32                 db    0
.data.rel.ro:0000000000212A33                 db    0
.data.rel.ro:0000000000212A34                 db    0
.data.rel.ro:0000000000212A35                 db    0
.data.rel.ro:0000000000212A36                 db    0
.data.rel.ro:0000000000212A37                 db    0
.data.rel.ro:0000000000212A38                 db  80h
.data.rel.ro:0000000000212A39                 db    0
.data.rel.ro:0000000000212A3A                 db    0
.data.rel.ro:0000000000212A3B                 db    0
.data.rel.ro:0000000000212A3C                 db    0
.data.rel.ro:0000000000212A3D                 db    0
.data.rel.ro:0000000000212A3E                 db    0
.data.rel.ro:0000000000212A3F                 db    0
.data.rel.ro:0000000000212A40                 dq offset aTerse        ; "terse"
.data.rel.ro:0000000000212A48                 db    0
.data.rel.ro:0000000000212A49                 db    0
.data.rel.ro:0000000000212A4A                 db    0
.data.rel.ro:0000000000212A4B                 db    0
.data.rel.ro:0000000000212A4C                 db    0
.data.rel.ro:0000000000212A4D                 db    0
.data.rel.ro:0000000000212A4E                 db    0
.data.rel.ro:0000000000212A4F                 db    0
.data.rel.ro:0000000000212A50                 db    0
.data.rel.ro:0000000000212A51                 db    0
.data.rel.ro:0000000000212A52                 db    0
.data.rel.ro:0000000000212A53                 db    0
.data.rel.ro:0000000000212A54                 db    0
.data.rel.ro:0000000000212A55                 db    0
.data.rel.ro:0000000000212A56                 db    0
.data.rel.ro:0000000000212A57                 db    0
.data.rel.ro:0000000000212A58                 db  74h ; t
.data.rel.ro:0000000000212A59                 db    0
.data.rel.ro:0000000000212A5A                 db    0
.data.rel.ro:0000000000212A5B                 db    0
.data.rel.ro:0000000000212A5C                 db    0
.data.rel.ro:0000000000212A5D                 db    0
.data.rel.ro:0000000000212A5E                 db    0
.data.rel.ro:0000000000212A5F                 db    0
.data.rel.ro:0000000000212A60                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000212A68                 db    0
.data.rel.ro:0000000000212A69                 db    0
.data.rel.ro:0000000000212A6A                 db    0
.data.rel.ro:0000000000212A6B                 db    0
.data.rel.ro:0000000000212A6C                 db    0
.data.rel.ro:0000000000212A6D                 db    0
.data.rel.ro:0000000000212A6E                 db    0
.data.rel.ro:0000000000212A6F                 db    0
.data.rel.ro:0000000000212A70                 db    0
.data.rel.ro:0000000000212A71                 db    0
.data.rel.ro:0000000000212A72                 db    0
.data.rel.ro:0000000000212A73                 db    0
.data.rel.ro:0000000000212A74                 db    0
.data.rel.ro:0000000000212A75                 db    0
.data.rel.ro:0000000000212A76                 db    0
.data.rel.ro:0000000000212A77                 db    0
.data.rel.ro:0000000000212A78                 db  7Eh ; ~
.data.rel.ro:0000000000212A79                 db 0FFh
.data.rel.ro:0000000000212A7A                 db 0FFh
.data.rel.ro:0000000000212A7B                 db 0FFh
.data.rel.ro:0000000000212A7C                 db    0
.data.rel.ro:0000000000212A7D                 db    0
.data.rel.ro:0000000000212A7E                 db    0
.data.rel.ro:0000000000212A7F                 db    0
.data.rel.ro:0000000000212A80                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000212A88                 db    0
.data.rel.ro:0000000000212A89                 db    0
.data.rel.ro:0000000000212A8A                 db    0
.data.rel.ro:0000000000212A8B                 db    0
.data.rel.ro:0000000000212A8C                 db    0
.data.rel.ro:0000000000212A8D                 db    0
.data.rel.ro:0000000000212A8E                 db    0
.data.rel.ro:0000000000212A8F                 db    0
.data.rel.ro:0000000000212A90                 db    0
.data.rel.ro:0000000000212A91                 db    0
.data.rel.ro:0000000000212A92                 db    0
.data.rel.ro:0000000000212A93                 db    0
.data.rel.ro:0000000000212A94                 db    0
.data.rel.ro:0000000000212A95                 db    0
.data.rel.ro:0000000000212A96                 db    0
.data.rel.ro:0000000000212A97                 db    0
.data.rel.ro:0000000000212A98                 db  7Dh ; }
.data.rel.ro:0000000000212A99                 db 0FFh
.data.rel.ro:0000000000212A9A                 db 0FFh
.data.rel.ro:0000000000212A9B                 db 0FFh
.data.rel.ro:0000000000212A9C                 db    0
.data.rel.ro:0000000000212A9D                 db    0
.data.rel.ro:0000000000212A9E                 db    0
.data.rel.ro:0000000000212A9F                 db    0
.data.rel.ro:0000000000212AA0                 db    0
.data.rel.ro:0000000000212AA1                 db    0
.data.rel.ro:0000000000212AA2                 db    0
.data.rel.ro:0000000000212AA3                 db    0
.data.rel.ro:0000000000212AA4                 db    0
.data.rel.ro:0000000000212AA5                 db    0
.data.rel.ro:0000000000212AA6                 db    0
.data.rel.ro:0000000000212AA7                 db    0
.data.rel.ro:0000000000212AA8                 db    0
.data.rel.ro:0000000000212AA9                 db    0
.data.rel.ro:0000000000212AAA                 db    0
.data.rel.ro:0000000000212AAB                 db    0
.data.rel.ro:0000000000212AAC                 db    0
.data.rel.ro:0000000000212AAD                 db    0
.data.rel.ro:0000000000212AAE                 db    0
.data.rel.ro:0000000000212AAF                 db    0
.data.rel.ro:0000000000212AB0                 db    0
.data.rel.ro:0000000000212AB1                 db    0
.data.rel.ro:0000000000212AB2                 db    0
.data.rel.ro:0000000000212AB3                 db    0
.data.rel.ro:0000000000212AB4                 db    0
.data.rel.ro:0000000000212AB5                 db    0
.data.rel.ro:0000000000212AB6                 db    0
.data.rel.ro:0000000000212AB7                 db    0
.data.rel.ro:0000000000212AB8                 db    0
.data.rel.ro:0000000000212AB9                 db    0
.data.rel.ro:0000000000212ABA                 db    0
.data.rel.ro:0000000000212ABB                 db    0
.data.rel.ro:0000000000212ABC                 db    0
.data.rel.ro:0000000000212ABD                 db    0
.data.rel.ro:0000000000212ABE                 db    0
.data.rel.ro:0000000000212ABF                 db    0
.data.rel.ro:0000000000212AC0                 public quoting_style_args
.data.rel.ro:0000000000212AC0 quoting_style_args dq offset aLiteral   ; DATA XREF: main+227↑o
.data.rel.ro:0000000000212AC0                                         ; "literal"
.data.rel.ro:0000000000212AC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000212AD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000212AD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000212AE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000212AE8                 dq offset aNSNNSNC+14h  ; "c"
.data.rel.ro:0000000000212AF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000212AF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000212B00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000212B08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000212B10                 db    0
.data.rel.ro:0000000000212B11                 db    0
.data.rel.ro:0000000000212B12                 db    0
.data.rel.ro:0000000000212B13                 db    0
.data.rel.ro:0000000000212B14                 db    0
.data.rel.ro:0000000000212B15                 db    0
.data.rel.ro:0000000000212B16                 db    0
.data.rel.ro:0000000000212B17                 db    0
.data.rel.ro:0000000000212B17 _data_rel_ro    ends
.data.rel.ro:0000000000212B17
LOAD:0000000000212B18 ; ELF Dynamic Information
LOAD:0000000000212B18 ; ===========================================================================
LOAD:0000000000212B18
LOAD:0000000000212B18 ; Segment type: Pure data
LOAD:0000000000212B18 ; Segment permissions: Read/Write
LOAD:0000000000212B18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000212B18                 assume cs:LOAD
LOAD:0000000000212B18                 ;org 212B18h
LOAD:0000000000212B18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000212B18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000212B18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000212B28                 Elf64_Dyn <0Ch, 1CB8h>  ; DT_INIT
LOAD:0000000000212B38                 Elf64_Dyn <0Dh, 0DA60h> ; DT_FINI
LOAD:0000000000212B48                 Elf64_Dyn <19h, 2129B0h> ; DT_INIT_ARRAY
LOAD:0000000000212B58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000212B68                 Elf64_Dyn <1Ah, 2129B8h> ; DT_FINI_ARRAY
LOAD:0000000000212B78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000212B88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000212B98                 Elf64_Dyn <5, 0C28h>    ; DT_STRTAB
LOAD:0000000000212BA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000212BB8                 Elf64_Dyn <0Ah, 411h>   ; DT_STRSZ
LOAD:0000000000212BC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000212BD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000212BE8                 Elf64_Dyn <3, 212D08h>  ; DT_PLTGOT
LOAD:0000000000212BF8                 Elf64_Dyn <2, 7F8h>     ; DT_PLTRELSZ
LOAD:0000000000212C08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000212C18                 Elf64_Dyn <17h, 14C0h>  ; DT_JMPREL
LOAD:0000000000212C28                 Elf64_Dyn <7, 1160h>    ; DT_RELA
LOAD:0000000000212C38                 Elf64_Dyn <8, 360h>     ; DT_RELASZ
LOAD:0000000000212C48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000212C58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000212C68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000212C78                 Elf64_Dyn <6FFFFFFEh, 1100h> ; DT_VERNEED
LOAD:0000000000212C88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000212C98                 Elf64_Dyn <6FFFFFF0h, 103Ah> ; DT_VERSYM
LOAD:0000000000212CA8                 Elf64_Dyn <6FFFFFF9h, 19h> ; DT_RELACOUNT
LOAD:0000000000212CB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000212CC8                 db    0
LOAD:0000000000212CC9                 db    0
LOAD:0000000000212CCA                 db    0
LOAD:0000000000212CCB                 db    0
LOAD:0000000000212CCC                 db    0
LOAD:0000000000212CCD                 db    0
LOAD:0000000000212CCE                 db    0
LOAD:0000000000212CCF                 db    0
LOAD:0000000000212CD0                 db    0
LOAD:0000000000212CD1                 db    0
LOAD:0000000000212CD2                 db    0
LOAD:0000000000212CD3                 db    0
LOAD:0000000000212CD4                 db    0
LOAD:0000000000212CD5                 db    0
LOAD:0000000000212CD6                 db    0
LOAD:0000000000212CD7                 db    0
LOAD:0000000000212CD8                 db    0
LOAD:0000000000212CD9                 db    0
LOAD:0000000000212CDA                 db    0
LOAD:0000000000212CDB                 db    0
LOAD:0000000000212CDC                 db    0
LOAD:0000000000212CDD                 db    0
LOAD:0000000000212CDE                 db    0
LOAD:0000000000212CDF                 db    0
LOAD:0000000000212CE0                 db    0
LOAD:0000000000212CE1                 db    0
LOAD:0000000000212CE2                 db    0
LOAD:0000000000212CE3                 db    0
LOAD:0000000000212CE4                 db    0
LOAD:0000000000212CE5                 db    0
LOAD:0000000000212CE6                 db    0
LOAD:0000000000212CE7                 db    0
LOAD:0000000000212CE8                 db    0
LOAD:0000000000212CE9                 db    0
LOAD:0000000000212CEA                 db    0
LOAD:0000000000212CEB                 db    0
LOAD:0000000000212CEC                 db    0
LOAD:0000000000212CED                 db    0
LOAD:0000000000212CEE                 db    0
LOAD:0000000000212CEF                 db    0
LOAD:0000000000212CF0                 db    0
LOAD:0000000000212CF1                 db    0
LOAD:0000000000212CF2                 db    0
LOAD:0000000000212CF3                 db    0
LOAD:0000000000212CF4                 db    0
LOAD:0000000000212CF5                 db    0
LOAD:0000000000212CF6                 db    0
LOAD:0000000000212CF7                 db    0
LOAD:0000000000212CF8                 db    0
LOAD:0000000000212CF9                 db    0
LOAD:0000000000212CFA                 db    0
LOAD:0000000000212CFB                 db    0
LOAD:0000000000212CFC                 db    0
LOAD:0000000000212CFD                 db    0
LOAD:0000000000212CFE                 db    0
LOAD:0000000000212CFF                 db    0
LOAD:0000000000212D00                 db    0
LOAD:0000000000212D01                 db    0
LOAD:0000000000212D02                 db    0
LOAD:0000000000212D03                 db    0
LOAD:0000000000212D04                 db    0
LOAD:0000000000212D05                 db    0
LOAD:0000000000212D06                 db    0
LOAD:0000000000212D07                 db    0
LOAD:0000000000212D07 LOAD            ends
LOAD:0000000000212D07
.got:0000000000212D08 ; ===========================================================================
.got:0000000000212D08
.got:0000000000212D08 ; Segment type: Pure data
.got:0000000000212D08 ; Segment permissions: Read/Write
.got:0000000000212D08 _got            segment qword public 'DATA' use64
.got:0000000000212D08                 assume cs:_got
.got:0000000000212D08                 ;org 212D08h
.got:0000000000212D08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000212D10 qword_212D10    dq 0                    ; DATA XREF: sub_1CD0↑r
.got:0000000000212D18 qword_212D18    dq 0                    ; DATA XREF: sub_1CD0+6↑r
.got:0000000000212D20 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000212D20                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000212D28 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000212D30 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000212D30                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000212D38 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000212D40 endmntent_ptr   dq offset endmntent     ; DATA XREF: _endmntent↑r
.got:0000000000212D48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000212D50 __errno_location_ptr dq offset __errno_location
.got:0000000000212D50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000212D58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000212D60 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:0000000000212D68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000212D70 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000212D78 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000212D80 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:0000000000212D88 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:0000000000212D90 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000212D98 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:0000000000212DA0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000212DA8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000212DB0 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:0000000000212DB8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000212DB8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000212DC0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000212DC8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000212DC8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000212DD0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000212DD8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000212DE0 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:0000000000212DE8 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:0000000000212DF0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000212DF0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000212DF8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000212E00 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000212E08 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000212E10 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:0000000000212E18 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000212E20 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000212E28 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:0000000000212E30 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000212E38 __assert_fail_ptr dq offset __assert_fail
.got:0000000000212E38                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000212E40 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000212E48 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:0000000000212E50 canonicalize_file_name_ptr dq offset canonicalize_file_name
.got:0000000000212E50                                         ; DATA XREF: _canonicalize_file_name↑r
.got:0000000000212E58 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000212E60 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000212E68 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000212E70 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000212E78 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000212E78                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000212E80 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000212E88 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000212E90 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000212E98 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000212EA0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000212EA8 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:0000000000212EB0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000212EB8 statfs_ptr      dq offset statfs        ; DATA XREF: _statfs↑r
.got:0000000000212EC0 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000212EC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000212ED0 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000212ED8 getmntent_ptr   dq offset getmntent     ; DATA XREF: _getmntent↑r
.got:0000000000212EE0 setmntent_ptr   dq offset setmntent     ; DATA XREF: _setmntent↑r
.got:0000000000212EE8 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000212EF0 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000212EF8 sscanf_ptr      dq offset sscanf        ; DATA XREF: _sscanf↑r
.got:0000000000212F00 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:0000000000212F08 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000212F10 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:0000000000212F18 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000212F20 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000212F28 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000212F30 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:0000000000212F38 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000212F40 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000212F48 memrchr_ptr     dq offset memrchr       ; DATA XREF: _memrchr↑r
.got:0000000000212F50 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000212F58 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000212F60 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000212F68 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000212F70 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000212F78 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000212F80 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000212F88 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000212F88                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000212F90 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000212F98 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000212FA0 hasmntopt_ptr   dq offset hasmntopt     ; DATA XREF: _hasmntopt↑r
.got:0000000000212FA8 strstr_ptr      dq offset strstr        ; DATA XREF: _strstr↑r
.got:0000000000212FB0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000212FB0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000212FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000212FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000212FC0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000212FC0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000212FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000212FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000212FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000212FD0                                         ; DATA XREF: start+24↑r
.got:0000000000212FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000212FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000212FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000212FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000212FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000212FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000212FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000212FE8 _got            ends
.got:0000000000212FE8
LOAD:0000000000212FF0 ; ===========================================================================
LOAD:0000000000212FF0
LOAD:0000000000212FF0 ; Segment type: Pure data
LOAD:0000000000212FF0 ; Segment permissions: Read/Write
LOAD:0000000000212FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000212FF0                 assume cs:LOAD
LOAD:0000000000212FF0                 ;org 212FF0h
LOAD:0000000000212FF0                 align 20h
LOAD:0000000000212FF0 LOAD            ends
LOAD:0000000000212FF0
.data:0000000000213000 ; ===========================================================================
.data:0000000000213000
.data:0000000000213000 ; Segment type: Pure data
.data:0000000000213000 ; Segment permissions: Read/Write
.data:0000000000213000 _data           segment align_32 public 'DATA' use64
.data:0000000000213000                 assume cs:_data
.data:0000000000213000                 ;org 213000h
.data:0000000000213000                 public __data_start ; weak
.data:0000000000213000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000213000                                         ; data_start
.data:0000000000213001                 db    0
.data:0000000000213002                 db    0
.data:0000000000213003                 db    0
.data:0000000000213004                 db    0
.data:0000000000213005                 db    0
.data:0000000000213006                 db    0
.data:0000000000213007                 db    0
.data:0000000000213008                 public __dso_handle
.data:0000000000213008 ; void *_dso_handle
.data:0000000000213008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000213008                                         ; atexit↑r ...
.data:0000000000213010 ; char *trailing_delim
.data:0000000000213010 trailing_delim  dq offset aWrittenBySSAnd+1Bh
.data:0000000000213010                                         ; DATA XREF: main+195↑w
.data:0000000000213010                                         ; main+1BD↑w ...
.data:0000000000213010                                         ; ""
.data:0000000000213018                 public Version
.data:0000000000213018 Version         dq offset a831          ; DATA XREF: main+143↑r
.data:0000000000213018                                         ; "8.31"
.data:0000000000213020                 public argmatch_die
.data:0000000000213020 argmatch_die    dq offset __argmatch_die
.data:0000000000213028                 public exit_failure
.data:0000000000213028 ; int exit_failure
.data:0000000000213028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5722↑r
.data:0000000000213028                                         ; xalloc_die+17↑r
.data:000000000021302C                 align 20h
.data:0000000000213040                 public quote_quoting_options
.data:0000000000213040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000213040                                         ; quote_mem↑o ...
.data:0000000000213041                 db    0
.data:0000000000213042                 db    0
.data:0000000000213043                 db    0
.data:0000000000213044                 db    0
.data:0000000000213045                 db    0
.data:0000000000213046                 db    0
.data:0000000000213047                 db    0
.data:0000000000213048                 db    0
.data:0000000000213049                 db    0
.data:000000000021304A                 db    0
.data:000000000021304B                 db    0
.data:000000000021304C                 db    0
.data:000000000021304D                 db    0
.data:000000000021304E                 db    0
.data:000000000021304F                 db    0
.data:0000000000213050                 db    0
.data:0000000000213051                 db    0
.data:0000000000213052                 db    0
.data:0000000000213053                 db    0
.data:0000000000213054                 db    0
.data:0000000000213055                 db    0
.data:0000000000213056                 db    0
.data:0000000000213057                 db    0
.data:0000000000213058                 db    0
.data:0000000000213059                 db    0
.data:000000000021305A                 db    0
.data:000000000021305B                 db    0
.data:000000000021305C                 db    0
.data:000000000021305D                 db    0
.data:000000000021305E                 db    0
.data:000000000021305F                 db    0
.data:0000000000213060                 db    0
.data:0000000000213061                 db    0
.data:0000000000213062                 db    0
.data:0000000000213063                 db    0
.data:0000000000213064                 db    0
.data:0000000000213065                 db    0
.data:0000000000213066                 db    0
.data:0000000000213067                 db    0
.data:0000000000213068                 db    0
.data:0000000000213069                 db    0
.data:000000000021306A                 db    0
.data:000000000021306B                 db    0
.data:000000000021306C                 db    0
.data:000000000021306D                 db    0
.data:000000000021306E                 db    0
.data:000000000021306F                 db    0
.data:0000000000213070                 db    0
.data:0000000000213071                 db    0
.data:0000000000213072                 db    0
.data:0000000000213073                 db    0
.data:0000000000213074                 db    0
.data:0000000000213075                 db    0
.data:0000000000213076                 db    0
.data:0000000000213077                 db    0
.data:0000000000213078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000213078                                         ; quotearg_n_options:loc_8C0D↑r ...
.data:000000000021307C                 align 20h
.data:0000000000213080 ; void *slotvec
.data:0000000000213080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000213080                                         ; quotearg_n_options+76↑w ...
.data:0000000000213088                 align 10h
.data:0000000000213090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000213090                                         ; quotearg_n_options+187↑r ...
.data:0000000000213098 off_213098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000213098 _data           ends
.data:0000000000213098
.bss:00000000002130A0 ; ===========================================================================
.bss:00000000002130A0
.bss:00000000002130A0 ; Segment type: Uninitialized
.bss:00000000002130A0 ; Segment permissions: Read/Write
.bss:00000000002130A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002130A0                 assume cs:_bss
.bss:00000000002130A0                 ;org 2130A0h
.bss:00000000002130A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002130A0                 public __bss_start ; weak
.bss:00000000002130A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000B80↑o
.bss:00000000002130A0                                         ; LOAD:0000000000000BC8↑o ...
.bss:00000000002130A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002130A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002130A0                                         ; _edata
.bss:00000000002130A0                                         ; Copy of shared data
.bss:00000000002130A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002130A8 ; _IO_FILE *stdout
.bss:00000000002130A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B68↑o
.bss:00000000002130A8                                         ; main+13C↑r ...
.bss:00000000002130A8                                         ; Alternative name is 'stdout'
.bss:00000000002130A8                                         ; Copy of shared data
.bss:00000000002130B0                 public optind@@GLIBC_2_2_5
.bss:00000000002130B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000BF8↑o
.bss:00000000002130B0                                         ; main:loc_241A↑r ...
.bss:00000000002130B0                                         ; Alternative name is 'optind'
.bss:00000000002130B0                                         ; Copy of shared data
.bss:00000000002130B4                 align 8
.bss:00000000002130B8                 public optarg@@GLIBC_2_2_5
.bss:00000000002130B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000C10↑o
.bss:00000000002130B8                                         ; main+187↑r ...
.bss:00000000002130B8                                         ; Alternative name is 'optarg'
.bss:00000000002130B8                                         ; Copy of shared data
.bss:00000000002130C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002130C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002130C0                                         ; DATA XREF: LOAD:0000000000000B98↑o
.bss:00000000002130C0                                         ; LOAD:0000000000000BB0↑o ...
.bss:00000000002130C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002130C0                                         ; Copy of shared data
.bss:00000000002130C8                 align 20h
.bss:00000000002130E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002130E0 ; FILE *stderr
.bss:00000000002130E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000BE0↑o
.bss:00000000002130E0                                         ; usage+3D↑r ...
.bss:00000000002130E0                                         ; Alternative name is 'stderr'
.bss:00000000002130E0                                         ; Copy of shared data
.bss:00000000002130E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002130E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002130E9                 align 20h
.bss:0000000000213100 str_7298        db    ? ;               ; DATA XREF: human_time+57↑o
.bss:0000000000213100                                         ; human_time+7C↑o ...
.bss:0000000000213101                 db    ? ;
.bss:0000000000213102                 db    ? ;
.bss:0000000000213103                 db    ? ;
.bss:0000000000213104                 db    ? ;
.bss:0000000000213105                 db    ? ;
.bss:0000000000213106                 db    ? ;
.bss:0000000000213107                 db    ? ;
.bss:0000000000213108                 db    ? ;
.bss:0000000000213109                 db    ? ;
.bss:000000000021310A                 db    ? ;
.bss:000000000021310B                 db    ? ;
.bss:000000000021310C                 db    ? ;
.bss:000000000021310D                 db    ? ;
.bss:000000000021310E                 db    ? ;
.bss:000000000021310F                 db    ? ;
.bss:0000000000213110                 db    ? ;
.bss:0000000000213111                 db    ? ;
.bss:0000000000213112                 db    ? ;
.bss:0000000000213113                 db    ? ;
.bss:0000000000213114                 db    ? ;
.bss:0000000000213115                 db    ? ;
.bss:0000000000213116                 db    ? ;
.bss:0000000000213117                 db    ? ;
.bss:0000000000213118                 db    ? ;
.bss:0000000000213119                 db    ? ;
.bss:000000000021311A                 db    ? ;
.bss:000000000021311B                 db    ? ;
.bss:000000000021311C                 db    ? ;
.bss:000000000021311D                 db    ? ;
.bss:000000000021311E                 db    ? ;
.bss:000000000021311F                 db    ? ;
.bss:0000000000213120                 db    ? ;
.bss:0000000000213121                 db    ? ;
.bss:0000000000213122                 db    ? ;
.bss:0000000000213123                 db    ? ;
.bss:0000000000213124                 db    ? ;
.bss:0000000000213125                 db    ? ;
.bss:0000000000213126                 db    ? ;
.bss:0000000000213127                 db    ? ;
.bss:0000000000213128                 db    ? ;
.bss:0000000000213129                 db    ? ;
.bss:000000000021312A                 db    ? ;
.bss:000000000021312B                 db    ? ;
.bss:000000000021312C                 db    ? ;
.bss:000000000021312D                 db    ? ;
.bss:000000000021312E                 db    ? ;
.bss:000000000021312F                 db    ? ;
.bss:0000000000213130                 db    ? ;
.bss:0000000000213131                 db    ? ;
.bss:0000000000213132                 db    ? ;
.bss:0000000000213133                 db    ? ;
.bss:0000000000213134                 db    ? ;
.bss:0000000000213135                 db    ? ;
.bss:0000000000213136                 db    ? ;
.bss:0000000000213137                 db    ? ;
.bss:0000000000213138                 db    ? ;
.bss:0000000000213139                 db    ? ;
.bss:000000000021313A                 db    ? ;
.bss:000000000021313B                 db    ? ;
.bss:000000000021313C                 db    ? ;
.bss:000000000021313D                 db    ? ;
.bss:000000000021313E                 db    ? ;
.bss:000000000021313F                 db    ? ;
.bss:0000000000213140 tz_7299         dq ?                    ; DATA XREF: human_time+A↑r
.bss:0000000000213140                                         ; human_time+49↑r ...
.bss:0000000000213148 mount_list_7428 dq ?                    ; DATA XREF: find_bind_mount+44↑r
.bss:0000000000213148                                         ; find_bind_mount+F2↑w
.bss:0000000000213150 tried_mount_list_7429 db ?              ; DATA XREF: find_bind_mount+23↑r
.bss:0000000000213150                                         ; find_bind_mount:loc_3E4B↑w
.bss:0000000000213151                 align 8
.bss:0000000000213158 modebuf_7294    db    ? ;               ; DATA XREF: print_stat:loc_47C8↑o
.bss:0000000000213158                                         ; print_stat+4BA↑o
.bss:0000000000213159                 db    ? ;
.bss:000000000021315A                 db    ? ;
.bss:000000000021315B                 db    ? ;
.bss:000000000021315C                 db    ? ;
.bss:000000000021315D                 db    ? ;
.bss:000000000021315E                 db    ? ;
.bss:000000000021315F                 db    ? ;
.bss:0000000000213160                 db    ? ;
.bss:0000000000213161                 db    ? ;
.bss:0000000000213162 byte_213162     db ?                    ; DATA XREF: print_stat+4C7↑w
.bss:0000000000213163                 align 10h
.bss:0000000000213170 buf_7290        db    ? ;               ; DATA XREF: print_statfs+104↑o
.bss:0000000000213170                                         ; print_statfs+11C↑o
.bss:0000000000213171                 db    ? ;
.bss:0000000000213172                 db    ? ;
.bss:0000000000213173                 db    ? ;
.bss:0000000000213174                 db    ? ;
.bss:0000000000213175                 db    ? ;
.bss:0000000000213176                 db    ? ;
.bss:0000000000213177                 db    ? ;
.bss:0000000000213178                 db    ? ;
.bss:0000000000213179                 db    ? ;
.bss:000000000021317A                 db    ? ;
.bss:000000000021317B                 db    ? ;
.bss:000000000021317C                 db    ? ;
.bss:000000000021317D                 db    ? ;
.bss:000000000021317E                 db    ? ;
.bss:000000000021317F                 db    ? ;
.bss:0000000000213180                 db    ? ;
.bss:0000000000213181                 db    ? ;
.bss:0000000000213182                 db    ? ;
.bss:0000000000213183                 db    ? ;
.bss:0000000000213184                 db    ? ;
.bss:0000000000213185                 db    ? ;
.bss:0000000000213186                 db    ? ;
.bss:0000000000213187                 db    ? ;
.bss:0000000000213188                 db    ? ;
.bss:0000000000213189                 db    ? ;
.bss:000000000021318A                 db    ? ;
.bss:000000000021318B                 db    ? ;
.bss:000000000021318C                 db    ? ;
.bss:000000000021318D                 db    ? ;
.bss:000000000021318E                 db    ? ;
.bss:000000000021318F                 db    ? ;
.bss:0000000000213190 decimal_point_len dq ?                  ; DATA XREF: main+9A↑w
.bss:0000000000213190                                         ; out_epoch_sec_isra_9+D1↑r ...
.bss:0000000000213198 decimal_point   dq ?                    ; DATA XREF: main+87↑w
.bss:0000000000213198                                         ; out_epoch_sec_isra_9:loc_40A6↑r
.bss:00000000002131A0 interpret_backslash_escapes db ?        ; DATA XREF: main+18E↑w
.bss:00000000002131A0                                         ; main+1B6↑w ...
.bss:00000000002131A1 follow_links    db ?                    ; DATA XREF: main:loc_23B0↑w
.bss:00000000002131A1                                         ; main+308↑r ...
.bss:00000000002131A2                 align 8
.bss:00000000002131A8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002131A8                                         ; close_stdout+1B↑r
.bss:00000000002131A9                 align 10h
.bss:00000000002131B0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002131B0                                         ; close_stdout+56↑r
.bss:00000000002131B8                 public program_name
.bss:00000000002131B8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002131B8                                         ; set_program_name:loc_782D↑w
.bss:00000000002131C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002131C0                                         ; quotearg_free+46↑o ...
.bss:00000000002131C1                 db    ? ;
.bss:00000000002131C2                 db    ? ;
.bss:00000000002131C3                 db    ? ;
.bss:00000000002131C4                 db    ? ;
.bss:00000000002131C5                 db    ? ;
.bss:00000000002131C6                 db    ? ;
.bss:00000000002131C7                 db    ? ;
.bss:00000000002131C8                 db    ? ;
.bss:00000000002131C9                 db    ? ;
.bss:00000000002131CA                 db    ? ;
.bss:00000000002131CB                 db    ? ;
.bss:00000000002131CC                 db    ? ;
.bss:00000000002131CD                 db    ? ;
.bss:00000000002131CE                 db    ? ;
.bss:00000000002131CF                 db    ? ;
.bss:00000000002131D0                 db    ? ;
.bss:00000000002131D1                 db    ? ;
.bss:00000000002131D2                 db    ? ;
.bss:00000000002131D3                 db    ? ;
.bss:00000000002131D4                 db    ? ;
.bss:00000000002131D5                 db    ? ;
.bss:00000000002131D6                 db    ? ;
.bss:00000000002131D7                 db    ? ;
.bss:00000000002131D8                 db    ? ;
.bss:00000000002131D9                 db    ? ;
.bss:00000000002131DA                 db    ? ;
.bss:00000000002131DB                 db    ? ;
.bss:00000000002131DC                 db    ? ;
.bss:00000000002131DD                 db    ? ;
.bss:00000000002131DE                 db    ? ;
.bss:00000000002131DF                 db    ? ;
.bss:00000000002131E0                 db    ? ;
.bss:00000000002131E1                 db    ? ;
.bss:00000000002131E2                 db    ? ;
.bss:00000000002131E3                 db    ? ;
.bss:00000000002131E4                 db    ? ;
.bss:00000000002131E5                 db    ? ;
.bss:00000000002131E6                 db    ? ;
.bss:00000000002131E7                 db    ? ;
.bss:00000000002131E8                 db    ? ;
.bss:00000000002131E9                 db    ? ;
.bss:00000000002131EA                 db    ? ;
.bss:00000000002131EB                 db    ? ;
.bss:00000000002131EC                 db    ? ;
.bss:00000000002131ED                 db    ? ;
.bss:00000000002131EE                 db    ? ;
.bss:00000000002131EF                 db    ? ;
.bss:00000000002131F0                 db    ? ;
.bss:00000000002131F1                 db    ? ;
.bss:00000000002131F2                 db    ? ;
.bss:00000000002131F3                 db    ? ;
.bss:00000000002131F4                 db    ? ;
.bss:00000000002131F5                 db    ? ;
.bss:00000000002131F6                 db    ? ;
.bss:00000000002131F7                 db    ? ;
.bss:00000000002131F8                 db    ? ;
.bss:00000000002131F9                 db    ? ;
.bss:00000000002131FA                 db    ? ;
.bss:00000000002131FB                 db    ? ;
.bss:00000000002131FC                 db    ? ;
.bss:00000000002131FD                 db    ? ;
.bss:00000000002131FE                 db    ? ;
.bss:00000000002131FF                 db    ? ;
.bss:0000000000213200                 db    ? ;
.bss:0000000000213201                 db    ? ;
.bss:0000000000213202                 db    ? ;
.bss:0000000000213203                 db    ? ;
.bss:0000000000213204                 db    ? ;
.bss:0000000000213205                 db    ? ;
.bss:0000000000213206                 db    ? ;
.bss:0000000000213207                 db    ? ;
.bss:0000000000213208                 db    ? ;
.bss:0000000000213209                 db    ? ;
.bss:000000000021320A                 db    ? ;
.bss:000000000021320B                 db    ? ;
.bss:000000000021320C                 db    ? ;
.bss:000000000021320D                 db    ? ;
.bss:000000000021320E                 db    ? ;
.bss:000000000021320F                 db    ? ;
.bss:0000000000213210                 db    ? ;
.bss:0000000000213211                 db    ? ;
.bss:0000000000213212                 db    ? ;
.bss:0000000000213213                 db    ? ;
.bss:0000000000213214                 db    ? ;
.bss:0000000000213215                 db    ? ;
.bss:0000000000213216                 db    ? ;
.bss:0000000000213217                 db    ? ;
.bss:0000000000213218                 db    ? ;
.bss:0000000000213219                 db    ? ;
.bss:000000000021321A                 db    ? ;
.bss:000000000021321B                 db    ? ;
.bss:000000000021321C                 db    ? ;
.bss:000000000021321D                 db    ? ;
.bss:000000000021321E                 db    ? ;
.bss:000000000021321F                 db    ? ;
.bss:0000000000213220                 db    ? ;
.bss:0000000000213221                 db    ? ;
.bss:0000000000213222                 db    ? ;
.bss:0000000000213223                 db    ? ;
.bss:0000000000213224                 db    ? ;
.bss:0000000000213225                 db    ? ;
.bss:0000000000213226                 db    ? ;
.bss:0000000000213227                 db    ? ;
.bss:0000000000213228                 db    ? ;
.bss:0000000000213229                 db    ? ;
.bss:000000000021322A                 db    ? ;
.bss:000000000021322B                 db    ? ;
.bss:000000000021322C                 db    ? ;
.bss:000000000021322D                 db    ? ;
.bss:000000000021322E                 db    ? ;
.bss:000000000021322F                 db    ? ;
.bss:0000000000213230                 db    ? ;
.bss:0000000000213231                 db    ? ;
.bss:0000000000213232                 db    ? ;
.bss:0000000000213233                 db    ? ;
.bss:0000000000213234                 db    ? ;
.bss:0000000000213235                 db    ? ;
.bss:0000000000213236                 db    ? ;
.bss:0000000000213237                 db    ? ;
.bss:0000000000213238                 db    ? ;
.bss:0000000000213239                 db    ? ;
.bss:000000000021323A                 db    ? ;
.bss:000000000021323B                 db    ? ;
.bss:000000000021323C                 db    ? ;
.bss:000000000021323D                 db    ? ;
.bss:000000000021323E                 db    ? ;
.bss:000000000021323F                 db    ? ;
.bss:0000000000213240                 db    ? ;
.bss:0000000000213241                 db    ? ;
.bss:0000000000213242                 db    ? ;
.bss:0000000000213243                 db    ? ;
.bss:0000000000213244                 db    ? ;
.bss:0000000000213245                 db    ? ;
.bss:0000000000213246                 db    ? ;
.bss:0000000000213247                 db    ? ;
.bss:0000000000213248                 db    ? ;
.bss:0000000000213249                 db    ? ;
.bss:000000000021324A                 db    ? ;
.bss:000000000021324B                 db    ? ;
.bss:000000000021324C                 db    ? ;
.bss:000000000021324D                 db    ? ;
.bss:000000000021324E                 db    ? ;
.bss:000000000021324F                 db    ? ;
.bss:0000000000213250                 db    ? ;
.bss:0000000000213251                 db    ? ;
.bss:0000000000213252                 db    ? ;
.bss:0000000000213253                 db    ? ;
.bss:0000000000213254                 db    ? ;
.bss:0000000000213255                 db    ? ;
.bss:0000000000213256                 db    ? ;
.bss:0000000000213257                 db    ? ;
.bss:0000000000213258                 db    ? ;
.bss:0000000000213259                 db    ? ;
.bss:000000000021325A                 db    ? ;
.bss:000000000021325B                 db    ? ;
.bss:000000000021325C                 db    ? ;
.bss:000000000021325D                 db    ? ;
.bss:000000000021325E                 db    ? ;
.bss:000000000021325F                 db    ? ;
.bss:0000000000213260                 db    ? ;
.bss:0000000000213261                 db    ? ;
.bss:0000000000213262                 db    ? ;
.bss:0000000000213263                 db    ? ;
.bss:0000000000213264                 db    ? ;
.bss:0000000000213265                 db    ? ;
.bss:0000000000213266                 db    ? ;
.bss:0000000000213267                 db    ? ;
.bss:0000000000213268                 db    ? ;
.bss:0000000000213269                 db    ? ;
.bss:000000000021326A                 db    ? ;
.bss:000000000021326B                 db    ? ;
.bss:000000000021326C                 db    ? ;
.bss:000000000021326D                 db    ? ;
.bss:000000000021326E                 db    ? ;
.bss:000000000021326F                 db    ? ;
.bss:0000000000213270                 db    ? ;
.bss:0000000000213271                 db    ? ;
.bss:0000000000213272                 db    ? ;
.bss:0000000000213273                 db    ? ;
.bss:0000000000213274                 db    ? ;
.bss:0000000000213275                 db    ? ;
.bss:0000000000213276                 db    ? ;
.bss:0000000000213277                 db    ? ;
.bss:0000000000213278                 db    ? ;
.bss:0000000000213279                 db    ? ;
.bss:000000000021327A                 db    ? ;
.bss:000000000021327B                 db    ? ;
.bss:000000000021327C                 db    ? ;
.bss:000000000021327D                 db    ? ;
.bss:000000000021327E                 db    ? ;
.bss:000000000021327F                 db    ? ;
.bss:0000000000213280                 db    ? ;
.bss:0000000000213281                 db    ? ;
.bss:0000000000213282                 db    ? ;
.bss:0000000000213283                 db    ? ;
.bss:0000000000213284                 db    ? ;
.bss:0000000000213285                 db    ? ;
.bss:0000000000213286                 db    ? ;
.bss:0000000000213287                 db    ? ;
.bss:0000000000213288                 db    ? ;
.bss:0000000000213289                 db    ? ;
.bss:000000000021328A                 db    ? ;
.bss:000000000021328B                 db    ? ;
.bss:000000000021328C                 db    ? ;
.bss:000000000021328D                 db    ? ;
.bss:000000000021328E                 db    ? ;
.bss:000000000021328F                 db    ? ;
.bss:0000000000213290                 db    ? ;
.bss:0000000000213291                 db    ? ;
.bss:0000000000213292                 db    ? ;
.bss:0000000000213293                 db    ? ;
.bss:0000000000213294                 db    ? ;
.bss:0000000000213295                 db    ? ;
.bss:0000000000213296                 db    ? ;
.bss:0000000000213297                 db    ? ;
.bss:0000000000213298                 db    ? ;
.bss:0000000000213299                 db    ? ;
.bss:000000000021329A                 db    ? ;
.bss:000000000021329B                 db    ? ;
.bss:000000000021329C                 db    ? ;
.bss:000000000021329D                 db    ? ;
.bss:000000000021329E                 db    ? ;
.bss:000000000021329F                 db    ? ;
.bss:00000000002132A0                 db    ? ;
.bss:00000000002132A1                 db    ? ;
.bss:00000000002132A2                 db    ? ;
.bss:00000000002132A3                 db    ? ;
.bss:00000000002132A4                 db    ? ;
.bss:00000000002132A5                 db    ? ;
.bss:00000000002132A6                 db    ? ;
.bss:00000000002132A7                 db    ? ;
.bss:00000000002132A8                 db    ? ;
.bss:00000000002132A9                 db    ? ;
.bss:00000000002132AA                 db    ? ;
.bss:00000000002132AB                 db    ? ;
.bss:00000000002132AC                 db    ? ;
.bss:00000000002132AD                 db    ? ;
.bss:00000000002132AE                 db    ? ;
.bss:00000000002132AF                 db    ? ;
.bss:00000000002132B0                 db    ? ;
.bss:00000000002132B1                 db    ? ;
.bss:00000000002132B2                 db    ? ;
.bss:00000000002132B3                 db    ? ;
.bss:00000000002132B4                 db    ? ;
.bss:00000000002132B5                 db    ? ;
.bss:00000000002132B6                 db    ? ;
.bss:00000000002132B7                 db    ? ;
.bss:00000000002132B8                 db    ? ;
.bss:00000000002132B9                 db    ? ;
.bss:00000000002132BA                 db    ? ;
.bss:00000000002132BB                 db    ? ;
.bss:00000000002132BC                 db    ? ;
.bss:00000000002132BD                 db    ? ;
.bss:00000000002132BE                 db    ? ;
.bss:00000000002132BF                 db    ? ;
.bss:00000000002132C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002132C0                                         ; get_quoting_style↑o ...
.bss:00000000002132D0 xmmword_2132D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002132D0                                         ; quotearg_n_custom_mem+39↑r
.bss:00000000002132E0 xmmword_2132E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:00000000002132E0                                         ; quotearg_n_custom_mem+46↑r
.bss:00000000002132F0 qword_2132F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:00000000002132F0                                         ; quotearg_n_custom_mem+7↑r
.bss:00000000002132F8 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:00000000002132F8                                         ; rpl_fcntl:loc_B7CF↑w ...
.bss:00000000002132FC                 align 20h
.bss:00000000002132FC _bss            ends
.bss:00000000002132FC
.prgend:0000000000213300 ; ===========================================================================
.prgend:0000000000213300
.prgend:0000000000213300 ; Segment type: Zero-length
.prgend:0000000000213300 _prgend         segment byte public '' use64
.prgend:0000000000213300 _end            label byte
.prgend:0000000000213300 _prgend         ends
.prgend:0000000000213300
extern:0000000000213308 ; ===========================================================================
extern:0000000000213308
extern:0000000000213308 ; Segment type: Externs
extern:0000000000213308 ; extern
extern:0000000000213308 ; const __int32_t **_ctype_toupper_loc(void)
extern:0000000000213308                 extrn __ctype_toupper_loc:near
extern:0000000000213308                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:0000000000213308                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:0000000000213310 ; char *getenv(const char *name)
extern:0000000000213310                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000213310                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000213318                 extrn __snprintf_chk:near
extern:0000000000213318                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000213318                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000213320 ; void free(void *ptr)
extern:0000000000213320                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000213320                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000213328 ; int endmntent(FILE *stream)
extern:0000000000213328                 extrn endmntent:near    ; CODE XREF: _endmntent↑j
extern:0000000000213328                                         ; DATA XREF: .got:endmntent_ptr↑o
extern:0000000000213330 ; void __noreturn abort(void)
extern:0000000000213330                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000213330                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000213338 ; int *_errno_location(void)
extern:0000000000213338                 extrn __errno_location:near
extern:0000000000213338                                         ; CODE XREF: ___errno_location↑j
extern:0000000000213338                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000213340 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000213340                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000213340                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000213348 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:0000000000213348                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:0000000000213348                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:0000000000213350 ; void __noreturn exit(int status)
extern:0000000000213350                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000213350                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000213358 ; char *strcpy(char *dest, const char *src)
extern:0000000000213358                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:0000000000213358                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:0000000000213360 ; size_t _fpending(FILE *fp)
extern:0000000000213360                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000213360                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000213368 ; struct lconv *localeconv(void)
extern:0000000000213368                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:0000000000213368                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:0000000000213370 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:0000000000213370                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:0000000000213370                                         ; DATA XREF: .got:readlink_ptr↑o
extern:0000000000213378 ; int fcntl(int fd, int cmd, ...)
extern:0000000000213378                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000213378                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000213380 ; int setenv(const char *name, const char *value, int replace)
extern:0000000000213380                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:0000000000213380                                         ; DATA XREF: .got:setenv_ptr↑o
extern:0000000000213388 ; char *textdomain(const char *domainname)
extern:0000000000213388                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000213388                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000213390 ; int fclose(FILE *stream)
extern:0000000000213390                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000213390                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000213398 ; struct passwd *getpwuid(__uid_t uid)
extern:0000000000213398                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:0000000000213398                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:00000000002133A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002133A0                 extrn bindtextdomain:near
extern:00000000002133A0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002133A0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002133A8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002133A8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002133A8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002133B0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002133B0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002133B0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002133B0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002133B8 ; size_t strlen(const char *s)
extern:00000000002133B8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002133B8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002133C0 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:00000000002133C0                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:00000000002133C0                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:00000000002133C8 ; int openat(int fd, const char *file, int oflag, ...)
extern:00000000002133C8                 extrn openat:near       ; CODE XREF: _openat↑j
extern:00000000002133C8                                         ; DATA XREF: .got:openat_ptr↑o
extern:00000000002133D0 ; int chdir(const char *path)
extern:00000000002133D0                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:00000000002133D0                                         ; DATA XREF: .got:chdir_ptr↑o
extern:00000000002133D8                 extrn __stack_chk_fail:near
extern:00000000002133D8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002133D8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002133E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002133E0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002133E0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002133E8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002133E8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002133E8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002133F0 ; char *strchr(const char *s, int c)
extern:00000000002133F0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002133F0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002133F8 ; struct group *getgrgid(__gid_t gid)
extern:00000000002133F8                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:00000000002133F8                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:0000000000213400 ; int _overflow(_IO_FILE *, int)
extern:0000000000213400                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000213400                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000213408 ; char *strrchr(const char *s, int c)
extern:0000000000213408                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000213408                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000213410 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:0000000000213410                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:0000000000213410                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:0000000000213418 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000213418                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000213418                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000213420 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000213420                 extrn __assert_fail:near
extern:0000000000213420                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000213420                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000213428 ; void *memset(void *s, int c, size_t n)
extern:0000000000213428                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000213428                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000213430 ; char *getcwd(char *buf, size_t size)
extern:0000000000213430                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:0000000000213430                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:0000000000213438 ; char *canonicalize_file_name(const char *name)
extern:0000000000213438                 extrn canonicalize_file_name:near
extern:0000000000213438                                         ; CODE XREF: _canonicalize_file_name↑j
extern:0000000000213438                                         ; DATA XREF: .got:canonicalize_file_name_ptr↑o
extern:0000000000213440 ; int close(int fd)
extern:0000000000213440                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000213440                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000213448 ; size_t strspn(const char *s, const char *accept)
extern:0000000000213448                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:0000000000213448                                         ; DATA XREF: .got:strspn_ptr↑o
extern:0000000000213450 ; void *memchr(const void *s, int c, size_t n)
extern:0000000000213450                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:0000000000213450                                         ; DATA XREF: .got:memchr_ptr↑o
extern:0000000000213458 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000213458                 extrn __libc_start_main:near
extern:0000000000213458                                         ; CODE XREF: start+24↑p
extern:0000000000213458                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000213460 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000213460                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000213460                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000213468 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000213468                 extrn fputs_unlocked:near
extern:0000000000213468                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000213468                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000213470 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000213470                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000213470                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000213478 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:0000000000213478                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:0000000000213478                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:0000000000213480 ; int strcmp(const char *s1, const char *s2)
extern:0000000000213480                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000213480                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000213488 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:0000000000213488                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:0000000000213488                                         ; DATA XREF: .got:strtol_ptr↑o
extern:0000000000213490 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000213490                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000213490                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000213498 ; void tzset(void)
extern:0000000000213498                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:0000000000213498                                         ; DATA XREF: .got:tzset_ptr↑o
extern:00000000002134A0 ; int fileno(FILE *stream)
extern:00000000002134A0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002134A0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002134A8 ; int statfs(const char *file, struct statfs *buf)
extern:00000000002134A8                 extrn statfs:near       ; CODE XREF: _statfs↑j
extern:00000000002134A8                                         ; DATA XREF: .got:statfs_ptr↑o
extern:00000000002134B0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:00000000002134B0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:00000000002134B0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:00000000002134B8 ; void *malloc(size_t size)
extern:00000000002134B8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002134B8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002134C0 ; int fflush(FILE *stream)
extern:00000000002134C0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002134C0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002134C8 ; struct mntent *getmntent(FILE *stream)
extern:00000000002134C8                 extrn getmntent:near    ; CODE XREF: _getmntent↑j
extern:00000000002134C8                                         ; DATA XREF: .got:getmntent_ptr↑o
extern:00000000002134D0 ; FILE *setmntent(const char *file, const char *mode)
extern:00000000002134D0                 extrn setmntent:near    ; CODE XREF: _setmntent↑j
extern:00000000002134D0                                         ; DATA XREF: .got:setmntent_ptr↑o
extern:00000000002134D8 ; char *nl_langinfo(nl_item item)
extern:00000000002134D8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002134D8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002134E0 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:00000000002134E0                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:00000000002134E0                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:00000000002134E8 ; int sscanf(const char *s, const char *format, ...)
extern:00000000002134E8                 extrn sscanf:near       ; CODE XREF: _sscanf↑j
extern:00000000002134E8                                         ; DATA XREF: .got:sscanf_ptr↑o
extern:00000000002134F0 ; time_t mktime(struct tm *tp)
extern:00000000002134F0                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:00000000002134F0                                         ; DATA XREF: .got:mktime_ptr↑o
extern:00000000002134F8 ; int _freading(FILE *fp)
extern:00000000002134F8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002134F8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000213500 ; int fchdir(int fd)
extern:0000000000213500                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:0000000000213500                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:0000000000213508 ; void *realloc(void *ptr, size_t size)
extern:0000000000213508                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000213508                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000213510 ; char *setlocale(int category, const char *locale)
extern:0000000000213510                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000213510                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000213518                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000213518                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000213520 ; time_t timegm(struct tm *tp)
extern:0000000000213520                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:0000000000213520                                         ; DATA XREF: .got:timegm_ptr↑o
extern:0000000000213528 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:0000000000213528                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:0000000000213528                                         ; DATA XREF: .got:strftime_ptr↑o
extern:0000000000213530 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000213530                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000213530                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000213538 ; void *memrchr(const void *s, int c, size_t n)
extern:0000000000213538                 extrn memrchr:near      ; CODE XREF: _memrchr↑j
extern:0000000000213538                                         ; DATA XREF: .got:memrchr_ptr↑o
extern:0000000000213540 ; int open(const char *file, int oflag, ...)
extern:0000000000213540                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000213540                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000213548 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000213548                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000213548                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000213550 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000213550                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000213550                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000213558 ; int unsetenv(const char *name)
extern:0000000000213558                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:0000000000213558                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:0000000000213560 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000213560                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000213560                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000213568 ; void __noreturn exit(int status)
extern:0000000000213568                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000213568                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000213570 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000213570                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000213570                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000213578                 extrn __fprintf_chk:near
extern:0000000000213578                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000213578                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000213580 ; int mbsinit(const mbstate_t *ps)
extern:0000000000213580                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000213580                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000213588 ; int iswprint(wint_t wc)
extern:0000000000213588                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000213588                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000213590 ; char *hasmntopt(const struct mntent *mnt, const char *opt)
extern:0000000000213590                 extrn hasmntopt:near    ; CODE XREF: _hasmntopt↑j
extern:0000000000213590                                         ; DATA XREF: .got:hasmntopt_ptr↑o
extern:0000000000213598 ; int __fastcall __cxa_finalize(void *)
extern:0000000000213598                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000213598                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000213598                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002135A0 ; char *strstr(const char *haystack, const char *needle)
extern:00000000002135A0                 extrn strstr:near       ; CODE XREF: _strstr↑j
extern:00000000002135A0                                         ; DATA XREF: .got:strstr_ptr↑o
extern:00000000002135A8 ; const __int32_t **_ctype_tolower_loc(void)
extern:00000000002135A8                 extrn __ctype_tolower_loc:near
extern:00000000002135A8                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:00000000002135A8                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:00000000002135B0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002135B0                 extrn __ctype_b_loc:near
extern:00000000002135B0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002135B0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002135B8                 extrn __sprintf_chk:near
extern:00000000002135B8                                         ; CODE XREF: ___sprintf_chk↑j
extern:00000000002135B8                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002135C0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002135C0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002135C8                 extrn __gmon_start__:near ; weak
extern:00000000002135C8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002135C8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002135D0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002135D0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002135D0
extern:00000000002135D0
extern:00000000002135D0                 end start
