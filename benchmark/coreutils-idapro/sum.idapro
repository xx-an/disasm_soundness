LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 297FC569DF1FB7690C1114204A172F61A0E690F57849A485377127FBFB7C0A4A
LOAD:0000000000000000 ; Input MD5    : FA68AAA9832E6A9A649162F3F03E08BC
LOAD:0000000000000000 ; Input CRC32  : 59EBFB90
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/sum
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'sum.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'human.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2FA30h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 82B8h                ; Size in file image
LOAD:00000000000000D8                 dq 82B8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 578h                 ; Size in file image
LOAD:0000000000000110                 dq 748h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8C18h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208C18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7194h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7194h                ; Physical address
LOAD:00000000000001B0                 dq 2B4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2B4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0AAh, 95h, 59h, 4Ah, 0FBh, 66h, 0E8h, 0B8h, 0EBh, 65h ; Desc
LOAD:0000000000000284                 db 0Ch, 0D1h, 85h, 56h, 0BEh, 0BBh, 6Ah, 0A0h, 4Ch, 60h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801A000614904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Dh, 3Eh, 44h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_958, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_958, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_958, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_958, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_958, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_958, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_958, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_958, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_958, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aLocaleconv - offset byte_958, 12h, 0, 0, \ ; "localeconv"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_958, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_958, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_958, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_958, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_958, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_958, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_958, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_958, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_958, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrchr - offset byte_958, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOverflow - offset byte_958, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_958, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_958, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aAssertFail - offset byte_958, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrtoulInterna - offset byte_958, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemset - offset byte_958, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFclose+1 - offset byte_958, 12h, 0, 0, \ ; "close"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aPosixFadvise - offset byte_958, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aRead - offset byte_958, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLibcStartMain - offset byte_958, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemcmp - offset byte_958, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFputsUnlocked - offset byte_958, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aCalloc - offset byte_958, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemcpyChk - offset byte_958, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aGmonStart - offset byte_958, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemcpy - offset byte_958, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFileno - offset byte_958, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMalloc - offset byte_958, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFflush - offset byte_958, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aNlLanginfo - offset byte_958, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFreading - offset byte_958, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aRealloc - offset byte_958, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aSetlocale - offset byte_958, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aPrintfChk - offset byte_958, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aSetvbuf - offset byte_958, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMemmove - offset byte_958, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aError - offset byte_958, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000748                            0>
LOAD:0000000000000760                 Elf64_Sym <offset aFopen+1 - offset byte_958, 12h, 0, 0, \ ; "open"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFseeko - offset byte_958, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFopen - offset byte_958, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000790                            0>
LOAD:00000000000007A8                 Elf64_Sym <offset aCxaAtexit - offset byte_958, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aExit+1 - offset byte_958, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFwrite - offset byte_958, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFprintfChk - offset byte_958, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aItmRegistertmc - offset byte_958, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aMbsinit - offset byte_958, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aIswprint - offset byte_958, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aCxaFinalize - offset byte_958, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aCtypeBLoc - offset byte_958, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aSprintfChk - offset byte_958, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aStdout - offset byte_958, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000898                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aProgname - offset byte_958, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008B0                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aStdin - offset byte_958, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000008C8                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aProgramInvocat - offset byte_958, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000008E0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aPrognameFull - offset byte_958, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008F8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_958, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000910                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aStderr - offset byte_958, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000928                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aOptind - offset byte_958, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000940                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000958 ; ELF String Table
LOAD:0000000000000958 byte_958        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000958                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000959 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000CF8↓o
LOAD:0000000000000963 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:000000000000096A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000977 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000981 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000989 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000989                                         ; LOAD:0000000000000760↑o
LOAD:000000000000098F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000997 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:000000000000099E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009A6 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009B0 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009B6 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009C7 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:00000000000009D0 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009D8 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009DE aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:00000000000009E4 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009E4                                         ; LOAD:00000000000007C0↑o
LOAD:00000000000009EA aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000009EA                                         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A02 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A10 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A10                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000A27 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A35 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A3C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A43 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A4A aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A55 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A66 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000A6B aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A72 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A80 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A87 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A8D aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A94 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A94                                         ; LOAD:0000000000000568↑o
LOAD:0000000000000A9B aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000AA2 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AAA aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AB2 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000ABE aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000ACC aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AD3 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000ADE aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000AE5 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AF1 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AF8 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000AFF aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000B0C aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B17 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B1E aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B1E                                         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B3C aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B4B aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B53 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B61 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B69 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B69                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000B78 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B78                                         ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B8A aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B91 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B9C aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000B9C                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000BAF aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BBE aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000BC3 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BCE aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000BDE aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BEB aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D08↓o
LOAD:0000000000000BF5 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000D18↓o
LOAD:0000000000000C00 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D28↓o
LOAD:0000000000000C0C aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000D38↓o
LOAD:0000000000000C16 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000D48↓o
LOAD:0000000000000C22 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C22                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000C3E aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C4D aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000C4D                                         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000C67                 align 8
LOAD:0000000000000C68 ; ELF GNU Symbol Version Table
LOAD:0000000000000C68                 dw 0
LOAD:0000000000000C6A                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C78                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C7A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 2                    ; localeconv@@GLIBC_2.2.5
LOAD:0000000000000C7E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C80                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C82                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C84                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C86                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C88                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C8A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C8C                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C94                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C98                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000C9C                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C9E                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000CA0                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000CA2                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000CA4                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000CA6                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000CA8                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CAA                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000CAC                 dw 4                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000CAE                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000CB0                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000CB2                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000CB4                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000CB6                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000CB8                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000CBA                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000CBC                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000CBE                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000CC0                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000CC2                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000CC4                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000CC6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000CC8                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000CCA                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000CCC                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000CCE                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000CD0                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000CD2                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000CD4                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CD6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000CD8                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000CDC                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000CDE                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000CE0                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CE2                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000CE4                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000CE6                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000CE8                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000CEA                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000CEC                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000CEE                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000CF0                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000CF2                 dw 0
LOAD:0000000000000CF4                 dw 0
LOAD:0000000000000CF6                 dw 0
LOAD:0000000000000CF8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000CF8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_958, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D08                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_958, \ ; "GLIBC_2.3"
LOAD:0000000000000D08                                10h>
LOAD:0000000000000D18                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_958, \ ; "GLIBC_2.14"
LOAD:0000000000000D18                                10h>
LOAD:0000000000000D28                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_958, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D28                                10h>
LOAD:0000000000000D38                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_958, \ ; "GLIBC_2.4"
LOAD:0000000000000D38                                10h>
LOAD:0000000000000D48                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_958, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000D58 ; ELF RELA Relocation Table
LOAD:0000000000000D58                 Elf64_Rela <208B10h, 8, 1C30h> ; R_X86_64_RELATIVE +1C30h
LOAD:0000000000000D70                 Elf64_Rela <208B18h, 8, 1BF0h> ; R_X86_64_RELATIVE +1BF0h
LOAD:0000000000000D88                 Elf64_Rela <208B20h, 8, 6473h> ; R_X86_64_RELATIVE +6473h
LOAD:0000000000000DA0                 Elf64_Rela <208B40h, 8, 6478h> ; R_X86_64_RELATIVE +6478h
LOAD:0000000000000DB8                 Elf64_Rela <208B60h, 8, 647Dh> ; R_X86_64_RELATIVE +647Dh
LOAD:0000000000000DD0                 Elf64_Rela <208BA0h, 8, 6728h> ; R_X86_64_RELATIVE +6728h
LOAD:0000000000000DE8                 Elf64_Rela <208BA8h, 8, 6737h> ; R_X86_64_RELATIVE +6737h
LOAD:0000000000000E00                 Elf64_Rela <208BC0h, 8, 67C9h> ; R_X86_64_RELATIVE +67C9h
LOAD:0000000000000E18                 Elf64_Rela <208BC8h, 8, 67D1h> ; R_X86_64_RELATIVE +67D1h
LOAD:0000000000000E30                 Elf64_Rela <208BD0h, 8, 67D7h> ; R_X86_64_RELATIVE +67D7h
LOAD:0000000000000E48                 Elf64_Rela <208BD8h, 8, 67E4h> ; R_X86_64_RELATIVE +67E4h
LOAD:0000000000000E60                 Elf64_Rela <208BE0h, 8, 67F1h> ; R_X86_64_RELATIVE +67F1h
LOAD:0000000000000E78                 Elf64_Rela <208BE8h, 8, 6805h> ; R_X86_64_RELATIVE +6805h
LOAD:0000000000000E90                 Elf64_Rela <208BF0h, 8, 6807h> ; R_X86_64_RELATIVE +6807h
LOAD:0000000000000EA8                 Elf64_Rela <208BF8h, 8, 67EAh> ; R_X86_64_RELATIVE +67EAh
LOAD:0000000000000EC0                 Elf64_Rela <208C00h, 8, 6447h> ; R_X86_64_RELATIVE +6447h
LOAD:0000000000000ED8                 Elf64_Rela <208C08h, 8, 680Fh> ; R_X86_64_RELATIVE +680Fh
LOAD:0000000000000EF0                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000F08                 Elf64_Rela <209010h, 8, 66CBh> ; R_X86_64_RELATIVE +66CBh
LOAD:0000000000000F20                 Elf64_Rela <209060h, 8, 209070h> ; R_X86_64_RELATIVE +209070h
LOAD:0000000000000F38                 Elf64_Rela <209078h, 8, 209120h> ; R_X86_64_RELATIVE +209120h
LOAD:0000000000000F50                 Elf64_Rela <209080h, 8, 5E30h> ; R_X86_64_RELATIVE +5E30h
LOAD:0000000000000F68                 Elf64_Rela <208FD8h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000F80                 Elf64_Rela <208FE0h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F98                 Elf64_Rela <208FE8h, 2300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000FB0                 Elf64_Rela <208FF0h, 3700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000FC8                 Elf64_Rela <208FF8h, 3A00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000FE0                 Elf64_Rela <2090A0h, 3E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000FF8                 Elf64_Rela <2090A8h, 3D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001010                 Elf64_Rela <2090B0h, 3F00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001028                 Elf64_Rela <2090B8h, 4400000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001040                 Elf64_Rela <2090C0h, 4100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001058                 Elf64_Rela <2090E0h, 4300000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001070 ; ELF JMPREL Relocation Table
LOAD:0000000000001070                 Elf64_Rela <208E20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001088                 Elf64_Rela <208E28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000010A0                 Elf64_Rela <208E30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000010B8                 Elf64_Rela <208E38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000010D0                 Elf64_Rela <208E40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000010E8                 Elf64_Rela <208E48h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001100                 Elf64_Rela <208E50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001118                 Elf64_Rela <208E58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001130                 Elf64_Rela <208E60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:0000000000001148                 Elf64_Rela <208E68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001160                 Elf64_Rela <208E70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001178                 Elf64_Rela <208E78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001190                 Elf64_Rela <208E80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000011A8                 Elf64_Rela <208E88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000011C0                 Elf64_Rela <208E90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000011D8                 Elf64_Rela <208E98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000011F0                 Elf64_Rela <208EA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001208                 Elf64_Rela <208EA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001220                 Elf64_Rela <208EB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001238                 Elf64_Rela <208EB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001250                 Elf64_Rela <208EC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001268                 Elf64_Rela <208EC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001280                 Elf64_Rela <208ED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001298                 Elf64_Rela <208ED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000012B0                 Elf64_Rela <208EE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000012C8                 Elf64_Rela <208EE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000012E0                 Elf64_Rela <208EF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000012F8                 Elf64_Rela <208EF8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001310                 Elf64_Rela <208F00h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001328                 Elf64_Rela <208F08h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001340                 Elf64_Rela <208F10h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001358                 Elf64_Rela <208F18h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000001370                 Elf64_Rela <208F20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001388                 Elf64_Rela <208F28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000013A0                 Elf64_Rela <208F30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000013B8                 Elf64_Rela <208F38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000013D0                 Elf64_Rela <208F40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000013E8                 Elf64_Rela <208F48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001400                 Elf64_Rela <208F50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001418                 Elf64_Rela <208F58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001430                 Elf64_Rela <208F60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001448                 Elf64_Rela <208F68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001460                 Elf64_Rela <208F70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001478                 Elf64_Rela <208F78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001490                 Elf64_Rela <208F80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000014A8                 Elf64_Rela <208F88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000014C0                 Elf64_Rela <208F90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000014D8                 Elf64_Rela <208F98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000014F0                 Elf64_Rela <208FA0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001508                 Elf64_Rela <208FA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001520                 Elf64_Rela <208FB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001538                 Elf64_Rela <208FB8h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001550                 Elf64_Rela <208FC0h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001568                 Elf64_Rela <208FC8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001580                 Elf64_Rela <208FD0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001580 LOAD            ends
LOAD:0000000000001580
.init:0000000000001598 ; ===========================================================================
.init:0000000000001598
.init:0000000000001598 ; Segment type: Pure code
.init:0000000000001598 ; Segment permissions: Read/Execute
.init:0000000000001598 _init           segment dword public 'CODE' use64
.init:0000000000001598                 assume cs:_init
.init:0000000000001598                 ;org 1598h
.init:0000000000001598                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001598
.init:0000000000001598 ; =============== S U B R O U T I N E =======================================
.init:0000000000001598
.init:0000000000001598
.init:0000000000001598                 public _init_proc
.init:0000000000001598 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001598                 sub     rsp, 8          ; _init
.init:000000000000159C                 mov     rax, cs:__gmon_start___ptr
.init:00000000000015A3                 test    rax, rax
.init:00000000000015A6                 jz      short loc_15AA
.init:00000000000015A8                 call    rax ; __gmon_start__
.init:00000000000015AA
.init:00000000000015AA loc_15AA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000015AA                 add     rsp, 8
.init:00000000000015AE                 retn
.init:00000000000015AE _init_proc      endp
.init:00000000000015AE
.init:00000000000015AE _init           ends
.init:00000000000015AE
LOAD:00000000000015AF ; ===========================================================================
LOAD:00000000000015AF
LOAD:00000000000015AF ; Segment type: Pure code
LOAD:00000000000015AF ; Segment permissions: Read/Execute
LOAD:00000000000015AF LOAD            segment byte public 'CODE' use64
LOAD:00000000000015AF                 assume cs:LOAD
LOAD:00000000000015AF                 ;org 15AFh
LOAD:00000000000015AF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000015AF                 align 10h
LOAD:00000000000015AF LOAD            ends
LOAD:00000000000015AF
.plt:00000000000015B0 ; ===========================================================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Segment type: Pure code
.plt:00000000000015B0 ; Segment permissions: Read/Execute
.plt:00000000000015B0 _plt            segment para public 'CODE' use64
.plt:00000000000015B0                 assume cs:_plt
.plt:00000000000015B0                 ;org 15B0h
.plt:00000000000015B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0
.plt:00000000000015B0 sub_15B0        proc near               ; CODE XREF: .plt:00000000000015CB↓j
.plt:00000000000015B0                                         ; .plt:00000000000015DB↓j ...
.plt:00000000000015B0 ; __unwind {
.plt:00000000000015B0                 push    cs:qword_208E10
.plt:00000000000015B6                 jmp     cs:qword_208E18
.plt:00000000000015B6 sub_15B0        endp
.plt:00000000000015B6
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015BC                 align 20h
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int __uflow(_IO_FILE *)
.plt:00000000000015C0 ___uflow        proc near               ; CODE XREF: bsd_sum_file+AB↓p
.plt:00000000000015C0                 jmp     cs:__uflow_ptr
.plt:00000000000015C0 ___uflow        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    0
.plt:00000000000015CB                 jmp     sub_15B0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *getenv(const char *name)
.plt:00000000000015D0 _getenv         proc near               ; CODE XREF: human_options+114↓p
.plt:00000000000015D0                                         ; human_options+147↓p ...
.plt:00000000000015D0                 jmp     cs:getenv_ptr
.plt:00000000000015D0 _getenv         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1
.plt:00000000000015DB                 jmp     sub_15B0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; void free(void *ptr)
.plt:00000000000015E0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000015E0                                         ; quotearg_free+37↓p ...
.plt:00000000000015E0                 jmp     cs:free_ptr
.plt:00000000000015E0 _free           endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    2
.plt:00000000000015EB                 jmp     sub_15B0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: noreturn thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void __noreturn abort(void)
.plt:00000000000015F0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000015F0                                         ; quotearg_buffer_restyled:def_3441↓p ...
.plt:00000000000015F0                 jmp     cs:abort_ptr
.plt:00000000000015F0 _abort          endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    3
.plt:00000000000015FB                 jmp     sub_15B0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int *__errno_location(void)
.plt:0000000000001600 ___errno_location proc near             ; CODE XREF: main+18B↓p
.plt:0000000000001600                                         ; sysv_sum_file+182↓p ...
.plt:0000000000001600                 jmp     cs:__errno_location_ptr
.plt:0000000000001600 ___errno_location endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    4
.plt:000000000000160B                 jmp     sub_15B0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001610 _strncmp        proc near               ; CODE XREF: usage+24C↓p
.plt:0000000000001610                                         ; usage+30D↓p ...
.plt:0000000000001610                 jmp     cs:strncmp_ptr
.plt:0000000000001610 _strncmp        endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    5
.plt:000000000000161B                 jmp     sub_15B0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: noreturn thunk
.plt:0000000000001620
.plt:0000000000001620 ; void __noreturn _exit(int status)
.plt:0000000000001620 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001620                 jmp     cs:_exit_ptr
.plt:0000000000001620 __exit          endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    6
.plt:000000000000162B                 jmp     sub_15B0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; size_t __fpending(FILE *fp)
.plt:0000000000001630 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001630                 jmp     cs:__fpending_ptr
.plt:0000000000001630 ___fpending     endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    7
.plt:000000000000163B                 jmp     sub_15B0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; struct lconv *localeconv(void)
.plt:0000000000001640 _localeconv     proc near               ; CODE XREF: human_readable+59↓p
.plt:0000000000001640                 jmp     cs:localeconv_ptr
.plt:0000000000001640 _localeconv     endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    8
.plt:000000000000164B                 jmp     sub_15B0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; char *textdomain(const char *domainname)
.plt:0000000000001650 _textdomain     proc near               ; CODE XREF: main+5E↓p
.plt:0000000000001650                 jmp     cs:textdomain_ptr
.plt:0000000000001650 _textdomain     endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    9
.plt:000000000000165B                 jmp     sub_15B0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int fclose(FILE *stream)
.plt:0000000000001660 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001660                                         ; rpl_fclose+6B↓j
.plt:0000000000001660                 jmp     cs:fclose_ptr
.plt:0000000000001660 _fclose         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    0Ah
.plt:000000000000166B                 jmp     sub_15B0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001670 _bindtextdomain proc near               ; CODE XREF: main+52↓p
.plt:0000000000001670                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001670 _bindtextdomain endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    0Bh
.plt:000000000000167B                 jmp     sub_15B0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001680 _dcgettext      proc near               ; CODE XREF: usage+38↓p
.plt:0000000000001680                                         ; usage+66↓p ...
.plt:0000000000001680                 jmp     cs:dcgettext_ptr
.plt:0000000000001680 _dcgettext      endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    0Ch
.plt:000000000000168B                 jmp     sub_15B0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001690 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001690                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001690 ___ctype_get_mb_cur_max endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    0Dh
.plt:000000000000169B                 jmp     sub_15B0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; size_t strlen(const char *s)
.plt:00000000000016A0 _strlen         proc near               ; CODE XREF: human_readable+67↓p
.plt:00000000000016A0                                         ; human_readable+9B↓p ...
.plt:00000000000016A0                 jmp     cs:strlen_ptr
.plt:00000000000016A0 _strlen         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    0Eh
.plt:00000000000016AB                 jmp     sub_15B0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: noreturn thunk
.plt:00000000000016B0
.plt:00000000000016B0 ___stack_chk_fail proc near             ; CODE XREF: sysv_sum_file:loc_1E69↓p
.plt:00000000000016B0                                         ; bsd_sum_file:loc_2097↓p ...
.plt:00000000000016B0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000016B0 ___stack_chk_fail endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    0Fh
.plt:00000000000016BB                 jmp     sub_15B0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000016C0 _getopt_long    proc near               ; CODE XREF: main+99↓p
.plt:00000000000016C0                 jmp     cs:getopt_long_ptr
.plt:00000000000016C0 _getopt_long    endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    10h
.plt:00000000000016CB                 jmp     sub_15B0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000016D0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000016D0                 jmp     cs:mbrtowc_ptr
.plt:00000000000016D0 _mbrtowc        endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    11h
.plt:00000000000016DB                 jmp     sub_15B0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *strchr(const char *s, int c)
.plt:00000000000016E0 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:00000000000016E0                                         ; xstrtoumax+143↓p ...
.plt:00000000000016E0                 jmp     cs:strchr_ptr
.plt:00000000000016E0 _strchr         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    12h
.plt:00000000000016EB                 jmp     sub_15B0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000016F0 ___overflow     proc near               ; CODE XREF: sysv_sum_file+21F↓p
.plt:00000000000016F0                                         ; bsd_sum_file+21D↓p ...
.plt:00000000000016F0                 jmp     cs:__overflow_ptr
.plt:00000000000016F0 ___overflow     endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    13h
.plt:00000000000016FB                 jmp     sub_15B0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; char *strrchr(const char *s, int c)
.plt:0000000000001700 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001700                 jmp     cs:strrchr_ptr
.plt:0000000000001700 _strrchr        endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    14h
.plt:000000000000170B                 jmp     sub_15B0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001710 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001710                                         ; rpl_fseeko+3B↓p
.plt:0000000000001710                 jmp     cs:lseek_ptr
.plt:0000000000001710 _lseek          endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    15h
.plt:000000000000171B                 jmp     sub_15B0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: noreturn thunk
.plt:0000000000001720
.plt:0000000000001720 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001720 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:0000000000001720                 jmp     cs:__assert_fail_ptr
.plt:0000000000001720 ___assert_fail  endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    16h
.plt:000000000000172B                 jmp     sub_15B0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001730 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001730                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001730 ___strtoul_internal endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    17h
.plt:000000000000173B                 jmp     sub_15B0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001740 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001740                                         ; xzalloc+12↓j
.plt:0000000000001740                 jmp     cs:memset_ptr
.plt:0000000000001740 _memset         endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    18h
.plt:000000000000174B                 jmp     sub_15B0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int close(int fd)
.plt:0000000000001750 _close          proc near               ; CODE XREF: sysv_sum_file+B7↓p
.plt:0000000000001750                                         ; sysv_sum_file+1A5↓p
.plt:0000000000001750                 jmp     cs:close_ptr
.plt:0000000000001750 _close          endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    19h
.plt:000000000000175B                 jmp     sub_15B0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001760 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001760                                         ; fadvise+16↓j
.plt:0000000000001760                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001760 _posix_fadvise  endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    1Ah
.plt:000000000000176B                 jmp     sub_15B0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001770 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001770                 jmp     cs:read_ptr
.plt:0000000000001770 _read           endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    1Bh
.plt:000000000000177B                 jmp     sub_15B0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001780 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001780                                         ; argmatch+6F↓p ...
.plt:0000000000001780                 jmp     cs:memcmp_ptr
.plt:0000000000001780 _memcmp         endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    1Ch
.plt:000000000000178B                 jmp     sub_15B0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001790 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001790                                         ; usage+C2↓p ...
.plt:0000000000001790                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001790 _fputs_unlocked endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    1Dh
.plt:000000000000179B                 jmp     sub_15B0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000017A0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000017A0                 jmp     cs:calloc_ptr
.plt:00000000000017A0 _calloc         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    1Eh
.plt:00000000000017AB                 jmp     sub_15B0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ___memcpy_chk   proc near               ; CODE XREF: human_readable+49C↓p
.plt:00000000000017B0                 jmp     cs:__memcpy_chk_ptr
.plt:00000000000017B0 ___memcpy_chk   endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    1Fh
.plt:00000000000017BB                 jmp     sub_15B0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000017C0 _memcpy         proc near               ; CODE XREF: human_readable+4DD↓p
.plt:00000000000017C0                                         ; human_readable+4FA↓p ...
.plt:00000000000017C0                 jmp     cs:memcpy_ptr
.plt:00000000000017C0 _memcpy         endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    20h ; ' '
.plt:00000000000017CB                 jmp     sub_15B0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int fileno(FILE *stream)
.plt:00000000000017D0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:00000000000017D0                                         ; rpl_fclose+7↓p ...
.plt:00000000000017D0                 jmp     cs:fileno_ptr
.plt:00000000000017D0 _fileno         endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    21h ; '!'
.plt:00000000000017DB                 jmp     sub_15B0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; void *malloc(size_t size)
.plt:00000000000017E0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000017E0                 jmp     cs:malloc_ptr
.plt:00000000000017E0 _malloc         endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    22h ; '"'
.plt:00000000000017EB                 jmp     sub_15B0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int fflush(FILE *stream)
.plt:00000000000017F0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000017F0                                         ; rpl_fflush+3B↓j
.plt:00000000000017F0                 jmp     cs:fflush_ptr
.plt:00000000000017F0 _fflush         endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    23h ; '#'
.plt:00000000000017FB                 jmp     sub_15B0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; char *nl_langinfo(nl_item item)
.plt:0000000000001800 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001800                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001800 _nl_langinfo    endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    24h ; '$'
.plt:000000000000180B                 jmp     sub_15B0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int __freading(FILE *fp)
.plt:0000000000001810 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001810                                         ; rpl_fflush+9↓p
.plt:0000000000001810                 jmp     cs:__freading_ptr
.plt:0000000000001810 ___freading     endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    25h ; '%'
.plt:000000000000181B                 jmp     sub_15B0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001820 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001820                 jmp     cs:realloc_ptr
.plt:0000000000001820 _realloc        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    26h ; '&'
.plt:000000000000182B                 jmp     sub_15B0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; char *setlocale(int category, const char *locale)
.plt:0000000000001830 _setlocale      proc near               ; CODE XREF: main+3F↓p
.plt:0000000000001830                                         ; usage+233↓p ...
.plt:0000000000001830                 jmp     cs:setlocale_ptr
.plt:0000000000001830 _setlocale      endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    27h ; '''
.plt:000000000000183B                 jmp     sub_15B0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ___printf_chk   proc near               ; CODE XREF: sysv_sum_file+108↓p
.plt:0000000000001840                                         ; sysv_sum_file+20B↓p ...
.plt:0000000000001840                 jmp     cs:__printf_chk_ptr
.plt:0000000000001840 ___printf_chk   endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    28h ; '('
.plt:000000000000184B                 jmp     sub_15B0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001850 _setvbuf        proc near               ; CODE XREF: main+7F↓p
.plt:0000000000001850                 jmp     cs:setvbuf_ptr
.plt:0000000000001850 _setvbuf        endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    29h ; ')'
.plt:000000000000185B                 jmp     sub_15B0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001860 _memmove        proc near               ; CODE XREF: human_readable+375↓p
.plt:0000000000001860                 jmp     cs:memmove_ptr
.plt:0000000000001860 _memmove        endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    2Ah ; '*'
.plt:000000000000186B                 jmp     sub_15B0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001870 _error          proc near               ; CODE XREF: main+1A3↓p
.plt:0000000000001870                                         ; sysv_sum_file+199↓p ...
.plt:0000000000001870                 jmp     cs:error_ptr
.plt:0000000000001870 _error          endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    2Bh ; '+'
.plt:000000000000187B                 jmp     sub_15B0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int open(const char *file, int oflag, ...)
.plt:0000000000001880 _open           proc near               ; CODE XREF: sysv_sum_file+1B7↓p
.plt:0000000000001880                 jmp     cs:open_ptr
.plt:0000000000001880 _open           endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    2Ch ; ','
.plt:000000000000188B                 jmp     sub_15B0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001890 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5D4A↓j
.plt:0000000000001890                 jmp     cs:fseeko_ptr
.plt:0000000000001890 _fseeko         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    2Dh ; '-'
.plt:000000000000189B                 jmp     sub_15B0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000018A0 _fopen          proc near               ; CODE XREF: bsd_sum_file+18A↓p
.plt:00000000000018A0                 jmp     cs:fopen_ptr
.plt:00000000000018A0 _fopen          endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    2Eh ; '.'
.plt:00000000000018AB                 jmp     sub_15B0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000018B0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000018B0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000018B0 ___cxa_atexit   endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    2Fh ; '/'
.plt:00000000000018BB                 jmp     sub_15B0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: noreturn thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; void __noreturn exit(int status)
.plt:00000000000018C0 _exit           proc near               ; CODE XREF: main+114↓p
.plt:00000000000018C0                                         ; usage+58↓p
.plt:00000000000018C0                 jmp     cs:exit_ptr
.plt:00000000000018C0 _exit           endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    30h ; '0'
.plt:00000000000018CB                 jmp     sub_15B0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000018D0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000018D0                 jmp     cs:fwrite_ptr
.plt:00000000000018D0 _fwrite         endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    31h ; '1'
.plt:00000000000018DB                 jmp     sub_15B0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000018E0                                         ; version_etc_arn+37↓p ...
.plt:00000000000018E0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000018E0 ___fprintf_chk  endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    32h ; '2'
.plt:00000000000018EB                 jmp     sub_15B0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000018F0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000018F0                 jmp     cs:mbsinit_ptr
.plt:00000000000018F0 _mbsinit        endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    33h ; '3'
.plt:00000000000018FB                 jmp     sub_15B0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int iswprint(wint_t wc)
.plt:0000000000001900 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001900                 jmp     cs:iswprint_ptr
.plt:0000000000001900 _iswprint       endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    34h ; '4'
.plt:000000000000190B                 jmp     sub_15B0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001910 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001910                                         ; xstrtoumax+55↓p
.plt:0000000000001910                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001910 ___ctype_b_loc  endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    35h ; '5'
.plt:000000000000191B                 jmp     sub_15B0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ___sprintf_chk  proc near               ; CODE XREF: human_readable+1C1↓p
.plt:0000000000001920                                         ; human_readable+332↓p ...
.plt:0000000000001920                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001920 ___sprintf_chk  endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    36h ; '6'
.plt:000000000000192B                 jmp     sub_15B0
.plt:000000000000192B ; } // starts at 15B0
.plt:000000000000192B _plt            ends
.plt:000000000000192B
.plt.got:0000000000001930 ; ===========================================================================
.plt.got:0000000000001930
.plt.got:0000000000001930 ; Segment type: Pure code
.plt.got:0000000000001930 ; Segment permissions: Read/Execute
.plt.got:0000000000001930 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001930                 assume cs:_plt_got
.plt.got:0000000000001930                 ;org 1930h
.plt.got:0000000000001930                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001930
.plt.got:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001930
.plt.got:0000000000001930 ; Attributes: thunk
.plt.got:0000000000001930
.plt.got:0000000000001930 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001930 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001930 ; __unwind {
.plt.got:0000000000001930                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001930 __cxa_finalize  endp
.plt.got:0000000000001930
.plt.got:0000000000001930 ; ---------------------------------------------------------------------------
.plt.got:0000000000001936                 align 8
.plt.got:0000000000001936 ; } // starts at 1930
.plt.got:0000000000001936 _plt_got        ends
.plt.got:0000000000001936
LOAD:0000000000001938 ; ===========================================================================
LOAD:0000000000001938
LOAD:0000000000001938 ; Segment type: Pure code
LOAD:0000000000001938 ; Segment permissions: Read/Execute
LOAD:0000000000001938 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001938                 assume cs:LOAD
LOAD:0000000000001938                 ;org 1938h
LOAD:0000000000001938                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001938                 align 20h
LOAD:0000000000001938 LOAD            ends
LOAD:0000000000001938
.text:0000000000001940 ; ===========================================================================
.text:0000000000001940
.text:0000000000001940 ; Segment type: Pure code
.text:0000000000001940 ; Segment permissions: Read/Execute
.text:0000000000001940 _text           segment para public 'CODE' use64
.text:0000000000001940                 assume cs:_text
.text:0000000000001940                 ;org 1940h
.text:0000000000001940                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001940
.text:0000000000001940 ; =============== S U B R O U T I N E =======================================
.text:0000000000001940
.text:0000000000001940
.text:0000000000001940 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001940                 public main
.text:0000000000001940 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001940 ; __unwind {
.text:0000000000001940                 push    r15
.text:0000000000001942                 push    r14
.text:0000000000001944                 lea     r14, longopts
.text:000000000000194B                 push    r13
.text:000000000000194D                 push    r12
.text:000000000000194F                 lea     r12, bsd_sum_file
.text:0000000000001956                 push    rbp
.text:0000000000001957                 push    rbx
.text:0000000000001958                 mov     ebp, edi
.text:000000000000195A                 mov     rbx, rsi
.text:000000000000195D                 lea     r13, shortopts  ; "rs"
.text:0000000000001964                 mov     r15, r12
.text:0000000000001967                 sub     rsp, 8
.text:000000000000196B                 mov     rdi, [rsi]
.text:000000000000196E                 call    set_program_name
.text:0000000000001973                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000197A                 mov     edi, 6          ; category
.text:000000000000197F                 call    _setlocale
.text:0000000000001984                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000198B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001992                 call    _bindtextdomain
.text:0000000000001997                 lea     rdi, domainname ; "coreutils"
.text:000000000000199E                 call    _textdomain
.text:00000000000019A3                 lea     rdi, close_stdout
.text:00000000000019AA                 call    atexit
.text:00000000000019AF                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000019B6                 xor     ecx, ecx        ; n
.text:00000000000019B8                 mov     edx, 1          ; modes
.text:00000000000019BD                 xor     esi, esi        ; buf
.text:00000000000019BF                 call    _setvbuf
.text:00000000000019C4                 mov     cs:have_read_stdin, 0
.text:00000000000019CB
.text:00000000000019CB loc_19CB:                               ; CODE XREF: main+C9↓j
.text:00000000000019CB                                         ; main+123↓j
.text:00000000000019CB                 xor     r8d, r8d        ; longind
.text:00000000000019CE                 mov     rcx, r14        ; longopts
.text:00000000000019D1                 mov     rdx, r13        ; shortopts
.text:00000000000019D4                 mov     rsi, rbx        ; argv
.text:00000000000019D7                 mov     edi, ebp        ; argc
.text:00000000000019D9                 call    _getopt_long
.text:00000000000019DE                 cmp     eax, 0FFFFFFFFh
.text:00000000000019E1                 jz      loc_1A68
.text:00000000000019E7                 cmp     eax, 0FFFFFF7Eh
.text:00000000000019EC                 jz      loc_1B1E
.text:00000000000019F2                 jle     short loc_1A10
.text:00000000000019F4                 cmp     eax, 72h ; 'r'
.text:00000000000019F7                 jz      short loc_1A60
.text:00000000000019F9                 cmp     eax, 73h ; 's'
.text:00000000000019FC                 jnz     loc_1B14
.text:0000000000001A02                 lea     r12, sysv_sum_file
.text:0000000000001A09                 jmp     short loc_19CB
.text:0000000000001A09 ; ---------------------------------------------------------------------------
.text:0000000000001A0B                 align 10h
.text:0000000000001A10
.text:0000000000001A10 loc_1A10:                               ; CODE XREF: main+B2↑j
.text:0000000000001A10                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001A15                 jnz     loc_1B14
.text:0000000000001A1B                 sub     rsp, 8
.text:0000000000001A1F                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A26                 mov     rcx, cs:Version
.text:0000000000001A2D                 push    0
.text:0000000000001A2F                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001A36                 lea     r8, aKayvanAghaiepo ; "Kayvan Aghaiepour"
.text:0000000000001A3D                 lea     rdx, unk_6409
.text:0000000000001A44                 lea     rsi, aSha512sum+6 ; "sum"
.text:0000000000001A4B                 xor     eax, eax
.text:0000000000001A4D                 call    version_etc
.text:0000000000001A52                 xor     edi, edi        ; status
.text:0000000000001A54                 call    _exit
.text:0000000000001A54 ; ---------------------------------------------------------------------------
.text:0000000000001A59                 align 20h
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: main+B7↑j
.text:0000000000001A60                 mov     r12, r15
.text:0000000000001A63                 jmp     loc_19CB
.text:0000000000001A68 ; ---------------------------------------------------------------------------
.text:0000000000001A68
.text:0000000000001A68 loc_1A68:                               ; CODE XREF: main+A1↑j
.text:0000000000001A68                 mov     r14d, ebp
.text:0000000000001A6B                 sub     r14d, cs:optind@@GLIBC_2_2_5
.text:0000000000001A72                 test    r14d, r14d
.text:0000000000001A75                 jg      short loc_1AE8
.text:0000000000001A77                 mov     esi, r14d
.text:0000000000001A7A                 lea     rdi, aLt+2      ; filename
.text:0000000000001A81                 call    r12 ; bsd_sum_file
.text:0000000000001A84                 mov     r13d, eax
.text:0000000000001A87
.text:0000000000001A87 loc_1A87:                               ; CODE XREF: main+1CF↓j
.text:0000000000001A87                 cmp     cs:have_read_stdin, 0
.text:0000000000001A8E                 jnz     short loc_1AA4
.text:0000000000001A90
.text:0000000000001A90 loc_1A90:                               ; CODE XREF: main+173↓j
.text:0000000000001A90                 xor     r13d, 1
.text:0000000000001A94                 pop     rdx
.text:0000000000001A95                 movzx   eax, r13b
.text:0000000000001A99                 pop     rbx
.text:0000000000001A9A                 pop     rbp
.text:0000000000001A9B                 pop     r12
.text:0000000000001A9D                 pop     r13
.text:0000000000001A9F                 pop     r14
.text:0000000000001AA1                 pop     r15
.text:0000000000001AA3                 retn
.text:0000000000001AA4 ; ---------------------------------------------------------------------------
.text:0000000000001AA4
.text:0000000000001AA4 loc_1AA4:                               ; CODE XREF: main+14E↑j
.text:0000000000001AA4                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000001AAB                 call    rpl_fclose
.text:0000000000001AB0                 add     eax, 1
.text:0000000000001AB3                 jnz     short loc_1A90
.text:0000000000001AB5                 lea     rdx, aLt+2      ; "-"
.text:0000000000001ABC                 mov     esi, 3
.text:0000000000001AC1                 xor     edi, edi
.text:0000000000001AC3                 call    quotearg_n_style_colon
.text:0000000000001AC8                 mov     rbx, rax
.text:0000000000001ACB                 call    ___errno_location
.text:0000000000001AD0                 mov     esi, [rax]      ; errnum
.text:0000000000001AD2                 lea     rdx, aS_0+2     ; format
.text:0000000000001AD9                 mov     rcx, rbx
.text:0000000000001ADC                 mov     edi, 1          ; status
.text:0000000000001AE1                 xor     eax, eax
.text:0000000000001AE3                 call    _error
.text:0000000000001AE8
.text:0000000000001AE8 loc_1AE8:                               ; CODE XREF: main+135↑j
.text:0000000000001AE8                 mov     r13d, 1
.text:0000000000001AEE                 jmp     short loc_1B04
.text:0000000000001AF0 ; ---------------------------------------------------------------------------
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: main+1CD↓j
.text:0000000000001AF0                 mov     rdi, [rbx+rax*8] ; filename
.text:0000000000001AF4                 mov     esi, r14d
.text:0000000000001AF7                 call    r12 ; bsd_sum_file
.text:0000000000001AFA                 add     cs:optind@@GLIBC_2_2_5, 1
.text:0000000000001B01                 and     r13d, eax
.text:0000000000001B04
.text:0000000000001B04 loc_1B04:                               ; CODE XREF: main+1AE↑j
.text:0000000000001B04                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001B0B                 cmp     eax, ebp
.text:0000000000001B0D                 jl      short loc_1AF0
.text:0000000000001B0F                 jmp     loc_1A87
.text:0000000000001B14 ; ---------------------------------------------------------------------------
.text:0000000000001B14
.text:0000000000001B14 loc_1B14:                               ; CODE XREF: main+BC↑j
.text:0000000000001B14                                         ; main+D5↑j
.text:0000000000001B14                 mov     edi, 1          ; status
.text:0000000000001B19                 call    usage
.text:0000000000001B1E ; ---------------------------------------------------------------------------
.text:0000000000001B1E
.text:0000000000001B1E loc_1B1E:                               ; CODE XREF: main+AC↑j
.text:0000000000001B1E                 xor     edi, edi        ; status
.text:0000000000001B20                 call    usage
.text:0000000000001B20 ; } // starts at 1940
.text:0000000000001B20 main            endp
.text:0000000000001B20
.text:0000000000001B20 ; ---------------------------------------------------------------------------
.text:0000000000001B25                 align 10h
.text:0000000000001B30
.text:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B30
.text:0000000000001B30 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001B30
.text:0000000000001B30 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001B30                 public start
.text:0000000000001B30 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001B30 ; __unwind {
.text:0000000000001B30                 xor     ebp, ebp
.text:0000000000001B32                 mov     r9, rdx         ; rtld_fini
.text:0000000000001B35                 pop     rsi             ; argc
.text:0000000000001B36                 mov     rdx, rsp        ; ubp_av
.text:0000000000001B39                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001B3D                 push    rax
.text:0000000000001B3E                 push    rsp             ; stack_end
.text:0000000000001B3F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001B46                 lea     rcx, __libc_csu_init ; init
.text:0000000000001B4D                 lea     rdi, main       ; main
.text:0000000000001B54                 call    cs:__libc_start_main_ptr
.text:0000000000001B5A                 hlt
.text:0000000000001B5A ; } // starts at 1B30
.text:0000000000001B5A start           endp
.text:0000000000001B5A
.text:0000000000001B5A ; ---------------------------------------------------------------------------
.text:0000000000001B5B                 align 20h
.text:0000000000001B60
.text:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B60
.text:0000000000001B60 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001B60
.text:0000000000001B60 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1C13↓p
.text:0000000000001B60                 lea     rdi, __bss_start
.text:0000000000001B67                 push    rbp
.text:0000000000001B68                 lea     rax, __bss_start
.text:0000000000001B6F                 cmp     rax, rdi
.text:0000000000001B72                 mov     rbp, rsp
.text:0000000000001B75                 jz      short loc_1B90
.text:0000000000001B77                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001B7E                 test    rax, rax
.text:0000000000001B81                 jz      short loc_1B90
.text:0000000000001B83                 pop     rbp
.text:0000000000001B84                 jmp     rax
.text:0000000000001B84 ; ---------------------------------------------------------------------------
.text:0000000000001B86                 align 10h
.text:0000000000001B90
.text:0000000000001B90 loc_1B90:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001B90                                         ; deregister_tm_clones+21↑j
.text:0000000000001B90                 pop     rbp
.text:0000000000001B91                 retn
.text:0000000000001B91 deregister_tm_clones endp
.text:0000000000001B91
.text:0000000000001B91 ; ---------------------------------------------------------------------------
.text:0000000000001B92                 align 20h
.text:0000000000001BA0
.text:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BA0
.text:0000000000001BA0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001BA0
.text:0000000000001BA0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001BA0                 lea     rdi, __bss_start
.text:0000000000001BA7                 lea     rsi, __bss_start
.text:0000000000001BAE                 push    rbp
.text:0000000000001BAF                 sub     rsi, rdi
.text:0000000000001BB2                 mov     rbp, rsp
.text:0000000000001BB5                 sar     rsi, 3
.text:0000000000001BB9                 mov     rax, rsi
.text:0000000000001BBC                 shr     rax, 3Fh
.text:0000000000001BC0                 add     rsi, rax
.text:0000000000001BC3                 sar     rsi, 1
.text:0000000000001BC6                 jz      short loc_1BE0
.text:0000000000001BC8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001BCF                 test    rax, rax
.text:0000000000001BD2                 jz      short loc_1BE0
.text:0000000000001BD4                 pop     rbp
.text:0000000000001BD5                 jmp     rax
.text:0000000000001BD5 ; ---------------------------------------------------------------------------
.text:0000000000001BD7                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001BE0                                         ; register_tm_clones+32↑j
.text:0000000000001BE0                 pop     rbp
.text:0000000000001BE1                 retn
.text:0000000000001BE1 register_tm_clones endp
.text:0000000000001BE1
.text:0000000000001BE1 ; ---------------------------------------------------------------------------
.text:0000000000001BE2                 align 10h
.text:0000000000001BF0
.text:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BF0
.text:0000000000001BF0 ; Attributes: info_from_lumina
.text:0000000000001BF0
.text:0000000000001BF0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001BF0                 cmp     cs:completed_7697, 0
.text:0000000000001BF7                 jnz     short locret_1C28
.text:0000000000001BF9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001C01                 push    rbp
.text:0000000000001C02                 mov     rbp, rsp
.text:0000000000001C05                 jz      short loc_1C13
.text:0000000000001C07                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001C0E                 call    __cxa_finalize
.text:0000000000001C13
.text:0000000000001C13 loc_1C13:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001C13                 call    deregister_tm_clones
.text:0000000000001C18                 mov     cs:completed_7697, 1
.text:0000000000001C1F                 pop     rbp
.text:0000000000001C20                 retn
.text:0000000000001C20 ; ---------------------------------------------------------------------------
.text:0000000000001C21                 align 8
.text:0000000000001C28
.text:0000000000001C28 locret_1C28:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001C28                 rep retn
.text:0000000000001C28 __do_global_dtors_aux endp
.text:0000000000001C28
.text:0000000000001C28 ; ---------------------------------------------------------------------------
.text:0000000000001C2A                 align 10h
.text:0000000000001C30
.text:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C30
.text:0000000000001C30 ; Attributes: bp-based frame
.text:0000000000001C30
.text:0000000000001C30 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001C30                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001C30                 push    rbp
.text:0000000000001C31                 mov     rbp, rsp
.text:0000000000001C34                 pop     rbp
.text:0000000000001C35                 jmp     register_tm_clones
.text:0000000000001C35 frame_dummy     endp
.text:0000000000001C35
.text:0000000000001C35 ; ---------------------------------------------------------------------------
.text:0000000000001C3A                 align 20h
.text:0000000000001C40
.text:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C40
.text:0000000000001C40
.text:0000000000001C40 ; __int64 __fastcall sysv_sum_file(char *file)
.text:0000000000001C40 sysv_sum_file   proc near               ; DATA XREF: main+C2↑o
.text:0000000000001C40
.text:0000000000001C40 var_22DC        = dword ptr -22DCh
.text:0000000000001C40 var_22D8        = byte ptr -22D8h
.text:0000000000001C40 buf             = byte ptr -2048h
.text:0000000000001C40 var_40          = qword ptr -40h
.text:0000000000001C40
.text:0000000000001C40 ; __unwind {
.text:0000000000001C40                 push    r15
.text:0000000000001C42                 push    r14
.text:0000000000001C44                 mov     ecx, 2
.text:0000000000001C49                 push    r13
.text:0000000000001C4B                 push    r12
.text:0000000000001C4D                 mov     r13, rdi
.text:0000000000001C50                 push    rbp
.text:0000000000001C51                 push    rbx
.text:0000000000001C52                 lea     rdi, aLt+2      ; "-"
.text:0000000000001C59                 sub     rsp, 22B8h
.text:0000000000001C60                 mov     [rsp+22E8h+var_22DC], esi
.text:0000000000001C64                 mov     rsi, r13
.text:0000000000001C67                 mov     rax, fs:28h
.text:0000000000001C70                 mov     [rsp+22E8h+var_40], rax
.text:0000000000001C78                 xor     eax, eax
.text:0000000000001C7A                 repe cmpsb
.text:0000000000001C7C                 setnbe  r12b
.text:0000000000001C80                 sbb     r12b, 0
.text:0000000000001C84                 movsx   r12d, r12b
.text:0000000000001C88                 test    r12d, r12d
.text:0000000000001C8B                 jnz     loc_1DF0
.text:0000000000001C91                 mov     cs:have_read_stdin, 1
.text:0000000000001C98                 xor     ebp, ebp
.text:0000000000001C9A
.text:0000000000001C9A loc_1C9A:                               ; CODE XREF: sysv_sum_file+1C1↓j
.text:0000000000001C9A                 lea     r14, [rsp+22E8h+buf]
.text:0000000000001CA2                 xor     r15d, r15d
.text:0000000000001CA5                 xor     ebx, ebx
.text:0000000000001CA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001CB0
.text:0000000000001CB0 loc_1CB0:                               ; CODE XREF: sysv_sum_file+AA↓j
.text:0000000000001CB0                 mov     edx, 2000h      ; nbytes
.text:0000000000001CB5                 mov     rsi, r14        ; buf
.text:0000000000001CB8                 mov     edi, ebp        ; fd
.text:0000000000001CBA                 call    safe_read
.text:0000000000001CBF                 test    rax, rax
.text:0000000000001CC2                 jz      short loc_1CF0
.text:0000000000001CC4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001CC8                 jz      loc_1DB0
.text:0000000000001CCE                 lea     rsi, [r14+rax]
.text:0000000000001CD2                 mov     rdx, r14
.text:0000000000001CD5                 nop     dword ptr [rax]
.text:0000000000001CD8
.text:0000000000001CD8 loc_1CD8:                               ; CODE XREF: sysv_sum_file+A5↓j
.text:0000000000001CD8                 movzx   ecx, byte ptr [rdx]
.text:0000000000001CDB                 add     rdx, 1
.text:0000000000001CDF                 add     r15d, ecx
.text:0000000000001CE2                 cmp     rsi, rdx
.text:0000000000001CE5                 jnz     short loc_1CD8
.text:0000000000001CE7                 add     rbx, rax
.text:0000000000001CEA                 jmp     short loc_1CB0
.text:0000000000001CEA ; ---------------------------------------------------------------------------
.text:0000000000001CEC                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: sysv_sum_file+82↑j
.text:0000000000001CF0                 test    r12d, r12d
.text:0000000000001CF3                 jz      short loc_1D04
.text:0000000000001CF5                 mov     edi, ebp        ; fd
.text:0000000000001CF7                 call    _close
.text:0000000000001CFC                 test    eax, eax
.text:0000000000001CFE                 jnz     loc_1E07
.text:0000000000001D04
.text:0000000000001D04 loc_1D04:                               ; CODE XREF: sysv_sum_file+B3↑j
.text:0000000000001D04                 movzx   eax, r15w
.text:0000000000001D08                 shr     r15d, 10h
.text:0000000000001D0C                 lea     rsi, [rsp+22E8h+var_22D8]
.text:0000000000001D11                 add     r15d, eax
.text:0000000000001D14                 xor     edx, edx
.text:0000000000001D16                 mov     r8d, 200h
.text:0000000000001D1C                 movzx   eax, r15w
.text:0000000000001D20                 mov     ecx, 1
.text:0000000000001D25                 sar     r15d, 10h
.text:0000000000001D29                 mov     rdi, rbx
.text:0000000000001D2C                 add     r15d, eax
.text:0000000000001D2F                 call    human_readable
.text:0000000000001D34                 lea     rsi, aDS        ; "%d %s"
.text:0000000000001D3B                 mov     rcx, rax
.text:0000000000001D3E                 mov     edx, r15d
.text:0000000000001D41                 xor     eax, eax
.text:0000000000001D43                 mov     edi, 1
.text:0000000000001D48                 call    ___printf_chk
.text:0000000000001D4D                 mov     eax, [rsp+22E8h+var_22DC]
.text:0000000000001D51                 test    eax, eax
.text:0000000000001D53                 jnz     loc_1E3A
.text:0000000000001D59
.text:0000000000001D59 loc_1D59:                               ; CODE XREF: sysv_sum_file+210↓j
.text:0000000000001D59                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001D60                 mov     rax, [rdi+28h]
.text:0000000000001D64                 cmp     rax, [rdi+30h]
.text:0000000000001D68                 jnb     loc_1E55
.text:0000000000001D6E                 lea     rdx, [rax+1]
.text:0000000000001D72                 mov     ebx, 1
.text:0000000000001D77                 mov     [rdi+28h], rdx
.text:0000000000001D7B                 mov     byte ptr [rax], 0Ah
.text:0000000000001D7E
.text:0000000000001D7E loc_1D7E:                               ; CODE XREF: sysv_sum_file+1A1↓j
.text:0000000000001D7E                                         ; sysv_sum_file+1AA↓j ...
.text:0000000000001D7E                 mov     eax, ebx
.text:0000000000001D80                 mov     rbx, [rsp+22E8h+var_40]
.text:0000000000001D88                 xor     rbx, fs:28h
.text:0000000000001D91                 jnz     loc_1E69
.text:0000000000001D97                 add     rsp, 22B8h
.text:0000000000001D9E                 pop     rbx
.text:0000000000001D9F                 pop     rbp
.text:0000000000001DA0                 pop     r12
.text:0000000000001DA2                 pop     r13
.text:0000000000001DA4                 pop     r14
.text:0000000000001DA6                 pop     r15
.text:0000000000001DA8                 retn
.text:0000000000001DA8 ; ---------------------------------------------------------------------------
.text:0000000000001DA9                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 loc_1DB0:                               ; CODE XREF: sysv_sum_file+88↑j
.text:0000000000001DB0                 xor     edi, edi
.text:0000000000001DB2                 mov     rdx, r13
.text:0000000000001DB5                 mov     esi, 3
.text:0000000000001DBA                 call    quotearg_n_style_colon
.text:0000000000001DBF                 mov     rbx, rax
.text:0000000000001DC2                 call    ___errno_location
.text:0000000000001DC7                 mov     esi, [rax]      ; errnum
.text:0000000000001DC9                 lea     rdx, aS_0+2     ; format
.text:0000000000001DD0                 mov     rcx, rbx
.text:0000000000001DD3                 xor     edi, edi        ; status
.text:0000000000001DD5                 xor     eax, eax
.text:0000000000001DD7                 xor     ebx, ebx
.text:0000000000001DD9                 call    _error
.text:0000000000001DDE                 test    r12d, r12d
.text:0000000000001DE1                 jz      short loc_1D7E
.text:0000000000001DE3                 mov     edi, ebp        ; fd
.text:0000000000001DE5                 call    _close
.text:0000000000001DEA                 jmp     short loc_1D7E
.text:0000000000001DEA ; ---------------------------------------------------------------------------
.text:0000000000001DEC                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: sysv_sum_file+4B↑j
.text:0000000000001DF0                 xor     esi, esi        ; oflag
.text:0000000000001DF2                 xor     eax, eax
.text:0000000000001DF4                 mov     rdi, r13        ; file
.text:0000000000001DF7                 call    _open
.text:0000000000001DFC                 cmp     eax, 0FFFFFFFFh
.text:0000000000001DFF                 mov     ebp, eax
.text:0000000000001E01                 jnz     loc_1C9A
.text:0000000000001E07
.text:0000000000001E07 loc_1E07:                               ; CODE XREF: sysv_sum_file+BE↑j
.text:0000000000001E07                 mov     rdx, r13
.text:0000000000001E0A                 mov     esi, 3
.text:0000000000001E0F                 xor     edi, edi
.text:0000000000001E11                 call    quotearg_n_style_colon
.text:0000000000001E16                 mov     rbx, rax
.text:0000000000001E19                 call    ___errno_location
.text:0000000000001E1E                 mov     esi, [rax]      ; errnum
.text:0000000000001E20                 lea     rdx, aS_0+2     ; format
.text:0000000000001E27                 mov     rcx, rbx
.text:0000000000001E2A                 xor     edi, edi        ; status
.text:0000000000001E2C                 xor     eax, eax
.text:0000000000001E2E                 xor     ebx, ebx
.text:0000000000001E30                 call    _error
.text:0000000000001E35                 jmp     loc_1D7E
.text:0000000000001E3A ; ---------------------------------------------------------------------------
.text:0000000000001E3A
.text:0000000000001E3A loc_1E3A:                               ; CODE XREF: sysv_sum_file+113↑j
.text:0000000000001E3A                 lea     rsi, aS_0+1     ; " %s"
.text:0000000000001E41                 mov     rdx, r13
.text:0000000000001E44                 mov     edi, 1
.text:0000000000001E49                 xor     eax, eax
.text:0000000000001E4B                 call    ___printf_chk
.text:0000000000001E50                 jmp     loc_1D59
.text:0000000000001E55 ; ---------------------------------------------------------------------------
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: sysv_sum_file+128↑j
.text:0000000000001E55                 mov     esi, 0Ah        ; int
.text:0000000000001E5A                 mov     ebx, 1
.text:0000000000001E5F                 call    ___overflow
.text:0000000000001E64                 jmp     loc_1D7E
.text:0000000000001E69 ; ---------------------------------------------------------------------------
.text:0000000000001E69
.text:0000000000001E69 loc_1E69:                               ; CODE XREF: sysv_sum_file+151↑j
.text:0000000000001E69                 call    ___stack_chk_fail
.text:0000000000001E69 ; } // starts at 1C40
.text:0000000000001E69 sysv_sum_file   endp
.text:0000000000001E69
.text:0000000000001E69 ; ---------------------------------------------------------------------------
.text:0000000000001E6E                 align 10h
.text:0000000000001E70
.text:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E70
.text:0000000000001E70
.text:0000000000001E70 ; __int64 __fastcall bsd_sum_file(char *filename)
.text:0000000000001E70 bsd_sum_file    proc near               ; CODE XREF: main+141↑p
.text:0000000000001E70                                         ; main+1B7↑p
.text:0000000000001E70                                         ; DATA XREF: ...
.text:0000000000001E70
.text:0000000000001E70 var_40          = qword ptr -40h
.text:0000000000001E70
.text:0000000000001E70 ; __unwind {
.text:0000000000001E70                 push    r15
.text:0000000000001E72                 push    r14
.text:0000000000001E74                 mov     ecx, 2
.text:0000000000001E79                 push    r13
.text:0000000000001E7B                 push    r12
.text:0000000000001E7D                 mov     r12, rdi
.text:0000000000001E80                 push    rbp
.text:0000000000001E81                 push    rbx
.text:0000000000001E82                 lea     rdi, aLt+2      ; "-"
.text:0000000000001E89                 mov     r13d, esi
.text:0000000000001E8C                 mov     rsi, r12
.text:0000000000001E8F                 sub     rsp, 2A8h
.text:0000000000001E96                 mov     rax, fs:28h
.text:0000000000001E9F                 mov     [rsp+2D8h+var_40], rax
.text:0000000000001EA7                 xor     eax, eax
.text:0000000000001EA9                 repe cmpsb
.text:0000000000001EAB                 setnbe  bpl
.text:0000000000001EAF                 sbb     bpl, 0
.text:0000000000001EB3                 movsx   ebp, bpl
.text:0000000000001EB7                 test    ebp, ebp
.text:0000000000001EB9                 jnz     loc_1FF0
.text:0000000000001EBF                 mov     r15, cs:stdin@@GLIBC_2_2_5
.text:0000000000001EC6                 mov     cs:have_read_stdin, 1
.text:0000000000001ECD
.text:0000000000001ECD loc_1ECD:                               ; CODE XREF: bsd_sum_file+195↓j
.text:0000000000001ECD                 mov     esi, 2
.text:0000000000001ED2                 mov     rdi, r15
.text:0000000000001ED5                 xor     r14d, r14d
.text:0000000000001ED8                 call    fadvise
.text:0000000000001EDD                 xor     ebx, ebx
.text:0000000000001EDF                 mov     rsi, [r15+10h]
.text:0000000000001EE3                 mov     rax, [r15+8]
.text:0000000000001EE7                 jmp     short loc_1F13
.text:0000000000001EE7 ; ---------------------------------------------------------------------------
.text:0000000000001EE9                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: bsd_sum_file+A6↓j
.text:0000000000001EF0                 lea     rcx, [rax+1]
.text:0000000000001EF4                 mov     [r15+8], rcx
.text:0000000000001EF8                 movzx   eax, byte ptr [rax]
.text:0000000000001EFB
.text:0000000000001EFB loc_1EFB:                               ; CODE XREF: bsd_sum_file+234↓j
.text:0000000000001EFB                 mov     edx, ebx
.text:0000000000001EFD                 shl     ebx, 0Fh
.text:0000000000001F00                 add     r14, 1
.text:0000000000001F04                 sar     edx, 1
.text:0000000000001F06                 movzx   ebx, bx
.text:0000000000001F09                 add     ebx, edx
.text:0000000000001F0B                 add     ebx, eax
.text:0000000000001F0D                 mov     rax, rcx
.text:0000000000001F10                 movzx   ebx, bx
.text:0000000000001F13
.text:0000000000001F13 loc_1F13:                               ; CODE XREF: bsd_sum_file+77↑j
.text:0000000000001F13                 cmp     rsi, rax
.text:0000000000001F16                 ja      short loc_1EF0
.text:0000000000001F18                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000001F1B                 call    ___uflow
.text:0000000000001F20                 cmp     eax, 0FFFFFFFFh
.text:0000000000001F23                 jnz     loc_209C
.text:0000000000001F29                 test    byte ptr [r15], 20h
.text:0000000000001F2D                 jnz     loc_2040
.text:0000000000001F33                 test    ebp, ebp
.text:0000000000001F35                 jz      short loc_1F47
.text:0000000000001F37                 mov     rdi, r15        ; stream
.text:0000000000001F3A                 call    rpl_fclose
.text:0000000000001F3F                 test    eax, eax
.text:0000000000001F41                 jnz     loc_200B
.text:0000000000001F47
.text:0000000000001F47 loc_1F47:                               ; CODE XREF: bsd_sum_file+C5↑j
.text:0000000000001F47                 xor     edx, edx
.text:0000000000001F49                 mov     rsi, rsp
.text:0000000000001F4C                 mov     r8d, 400h
.text:0000000000001F52                 mov     ecx, 1
.text:0000000000001F57                 mov     rdi, r14
.text:0000000000001F5A                 call    human_readable
.text:0000000000001F5F                 lea     rsi, a05d5s     ; "%05d %5s"
.text:0000000000001F66                 mov     rcx, rax
.text:0000000000001F69                 mov     edx, ebx
.text:0000000000001F6B                 xor     eax, eax
.text:0000000000001F6D                 mov     edi, 1
.text:0000000000001F72                 call    ___printf_chk
.text:0000000000001F77                 cmp     r13d, 1
.text:0000000000001F7B                 jg      short loc_1FD0
.text:0000000000001F7D
.text:0000000000001F7D loc_1F7D:                               ; CODE XREF: bsd_sum_file+176↓j
.text:0000000000001F7D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001F84                 mov     rax, [rdi+28h]
.text:0000000000001F88                 cmp     rax, [rdi+30h]
.text:0000000000001F8C                 jnb     loc_2083
.text:0000000000001F92                 lea     rdx, [rax+1]
.text:0000000000001F96                 mov     ebx, 1
.text:0000000000001F9B                 mov     [rdi+28h], rdx
.text:0000000000001F9F                 mov     byte ptr [rax], 0Ah
.text:0000000000001FA2
.text:0000000000001FA2 loc_1FA2:                               ; CODE XREF: bsd_sum_file+1C9↓j
.text:0000000000001FA2                                         ; bsd_sum_file+200↓j ...
.text:0000000000001FA2                 mov     rdi, [rsp+2D8h+var_40]
.text:0000000000001FAA                 xor     rdi, fs:28h
.text:0000000000001FB3                 mov     eax, ebx
.text:0000000000001FB5                 jnz     loc_2097
.text:0000000000001FBB                 add     rsp, 2A8h
.text:0000000000001FC2                 pop     rbx
.text:0000000000001FC3                 pop     rbp
.text:0000000000001FC4                 pop     r12
.text:0000000000001FC6                 pop     r13
.text:0000000000001FC8                 pop     r14
.text:0000000000001FCA                 pop     r15
.text:0000000000001FCC                 retn
.text:0000000000001FCC ; ---------------------------------------------------------------------------
.text:0000000000001FCD                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: bsd_sum_file+10B↑j
.text:0000000000001FD0                 lea     rsi, aS_0+1     ; " %s"
.text:0000000000001FD7                 mov     rdx, r12
.text:0000000000001FDA                 mov     edi, 1
.text:0000000000001FDF                 xor     eax, eax
.text:0000000000001FE1                 call    ___printf_chk
.text:0000000000001FE6                 jmp     short loc_1F7D
.text:0000000000001FE6 ; ---------------------------------------------------------------------------
.text:0000000000001FE8                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: bsd_sum_file+49↑j
.text:0000000000001FF0                 lea     rsi, aWriteError+0Ah ; modes
.text:0000000000001FF7                 mov     rdi, r12        ; filename
.text:0000000000001FFA                 call    _fopen
.text:0000000000001FFF                 test    rax, rax
.text:0000000000002002                 mov     r15, rax
.text:0000000000002005                 jnz     loc_1ECD
.text:000000000000200B
.text:000000000000200B loc_200B:                               ; CODE XREF: bsd_sum_file+D1↑j
.text:000000000000200B                 mov     rdx, r12
.text:000000000000200E                 mov     esi, 3
.text:0000000000002013                 xor     edi, edi
.text:0000000000002015                 call    quotearg_n_style_colon
.text:000000000000201A                 mov     rbx, rax
.text:000000000000201D                 call    ___errno_location
.text:0000000000002022                 mov     esi, [rax]      ; errnum
.text:0000000000002024                 lea     rdx, aS_0+2     ; format
.text:000000000000202B                 mov     rcx, rbx
.text:000000000000202E                 xor     edi, edi        ; status
.text:0000000000002030                 xor     eax, eax
.text:0000000000002032                 xor     ebx, ebx
.text:0000000000002034                 call    _error
.text:0000000000002039                 jmp     loc_1FA2
.text:0000000000002039 ; ---------------------------------------------------------------------------
.text:000000000000203E                 align 20h
.text:0000000000002040
.text:0000000000002040 loc_2040:                               ; CODE XREF: bsd_sum_file+BD↑j
.text:0000000000002040                 xor     edi, edi
.text:0000000000002042                 mov     rdx, r12
.text:0000000000002045                 mov     esi, 3
.text:000000000000204A                 call    quotearg_n_style_colon
.text:000000000000204F                 mov     rbx, rax
.text:0000000000002052                 call    ___errno_location
.text:0000000000002057                 mov     esi, [rax]      ; errnum
.text:0000000000002059                 lea     rdx, aS_0+2     ; format
.text:0000000000002060                 mov     rcx, rbx
.text:0000000000002063                 xor     edi, edi        ; status
.text:0000000000002065                 xor     eax, eax
.text:0000000000002067                 xor     ebx, ebx
.text:0000000000002069                 call    _error
.text:000000000000206E                 test    ebp, ebp
.text:0000000000002070                 jz      loc_1FA2
.text:0000000000002076                 mov     rdi, r15        ; stream
.text:0000000000002079                 call    rpl_fclose
.text:000000000000207E                 jmp     loc_1FA2
.text:0000000000002083 ; ---------------------------------------------------------------------------
.text:0000000000002083
.text:0000000000002083 loc_2083:                               ; CODE XREF: bsd_sum_file+11C↑j
.text:0000000000002083                 mov     esi, 0Ah        ; int
.text:0000000000002088                 mov     ebx, 1
.text:000000000000208D                 call    ___overflow
.text:0000000000002092                 jmp     loc_1FA2
.text:0000000000002097 ; ---------------------------------------------------------------------------
.text:0000000000002097
.text:0000000000002097 loc_2097:                               ; CODE XREF: bsd_sum_file+145↑j
.text:0000000000002097                 call    ___stack_chk_fail
.text:000000000000209C ; ---------------------------------------------------------------------------
.text:000000000000209C
.text:000000000000209C loc_209C:                               ; CODE XREF: bsd_sum_file+B3↑j
.text:000000000000209C                 mov     rsi, [r15+10h]
.text:00000000000020A0                 mov     rcx, [r15+8]
.text:00000000000020A4                 jmp     loc_1EFB
.text:00000000000020A4 ; } // starts at 1E70
.text:00000000000020A4 bsd_sum_file    endp
.text:00000000000020A4
.text:00000000000020A4 ; ---------------------------------------------------------------------------
.text:00000000000020A9                 align 10h
.text:00000000000020B0
.text:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020B0
.text:00000000000020B0 ; Attributes: noreturn
.text:00000000000020B0
.text:00000000000020B0 ; void __fastcall __noreturn usage(int status)
.text:00000000000020B0                 public usage
.text:00000000000020B0 usage           proc near               ; CODE XREF: main+1D9↑p
.text:00000000000020B0                                         ; main+1E0↑p ...
.text:00000000000020B0
.text:00000000000020B0 var_A8          = qword ptr -0A8h
.text:00000000000020B0 var_A0          = qword ptr -0A0h
.text:00000000000020B0 var_98          = qword ptr -98h
.text:00000000000020B0 var_90          = qword ptr -90h
.text:00000000000020B0 var_88          = qword ptr -88h
.text:00000000000020B0 var_80          = qword ptr -80h
.text:00000000000020B0 var_78          = qword ptr -78h
.text:00000000000020B0 var_70          = qword ptr -70h
.text:00000000000020B0 var_68          = qword ptr -68h
.text:00000000000020B0 var_60          = qword ptr -60h
.text:00000000000020B0 var_58          = qword ptr -58h
.text:00000000000020B0 var_50          = qword ptr -50h
.text:00000000000020B0 var_48          = qword ptr -48h
.text:00000000000020B0 var_40          = qword ptr -40h
.text:00000000000020B0 var_30          = qword ptr -30h
.text:00000000000020B0
.text:00000000000020B0 ; __unwind {
.text:00000000000020B0                 push    r13
.text:00000000000020B2                 push    r12
.text:00000000000020B4                 mov     edx, 5          ; category
.text:00000000000020B9                 push    rbp
.text:00000000000020BA                 push    rbx
.text:00000000000020BB                 mov     ebp, edi
.text:00000000000020BD                 sub     rsp, 88h
.text:00000000000020C4                 mov     rbx, cs:program_name
.text:00000000000020CB                 mov     rax, fs:28h
.text:00000000000020D4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000020D9                 xor     eax, eax
.text:00000000000020DB                 test    edi, edi
.text:00000000000020DD                 jz      short loc_210D
.text:00000000000020DF                 lea     rsi, msgid      ; "Try '%s --help' for more information.\n"
.text:00000000000020E6                 xor     edi, edi        ; domainname
.text:00000000000020E8                 call    _dcgettext
.text:00000000000020ED                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000020F4                 mov     rdx, rax
.text:00000000000020F7                 mov     rcx, rbx
.text:00000000000020FA                 mov     esi, 1
.text:00000000000020FF                 xor     eax, eax
.text:0000000000002101                 call    ___fprintf_chk
.text:0000000000002106
.text:0000000000002106 loc_2106:                               ; CODE XREF: usage+2C6↓j
.text:0000000000002106                 mov     edi, ebp        ; status
.text:0000000000002108                 call    _exit
.text:000000000000210D ; ---------------------------------------------------------------------------
.text:000000000000210D
.text:000000000000210D loc_210D:                               ; CODE XREF: usage+2D↑j
.text:000000000000210D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000002114                 xor     edi, edi        ; domainname
.text:0000000000002116                 call    _dcgettext
.text:000000000000211B                 mov     rdx, rbx
.text:000000000000211E                 mov     rsi, rax
.text:0000000000002121                 mov     edi, 1
.text:0000000000002126                 xor     eax, eax
.text:0000000000002128                 call    ___printf_chk
.text:000000000000212D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002134                 lea     rsi, aPrintChecksumA ; "Print checksum and block counts for eac"...
.text:000000000000213B                 mov     edx, 5          ; category
.text:0000000000002140                 xor     edi, edi        ; domainname
.text:0000000000002142                 call    _dcgettext
.text:0000000000002147                 mov     rsi, rbx        ; stream
.text:000000000000214A                 mov     rdi, rax        ; s
.text:000000000000214D                 call    _fputs_unlocked
.text:0000000000002152                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002159                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002160                 mov     edx, 5          ; category
.text:0000000000002165                 xor     edi, edi        ; domainname
.text:0000000000002167                 call    _dcgettext
.text:000000000000216C                 mov     rsi, rbx        ; stream
.text:000000000000216F                 mov     rdi, rax        ; s
.text:0000000000002172                 call    _fputs_unlocked
.text:0000000000002177                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000217E                 lea     rsi, aRUseBsdSumAlgo ; "\n  -r              use BSD sum algorit"...
.text:0000000000002185                 mov     edx, 5          ; category
.text:000000000000218A                 xor     edi, edi        ; domainname
.text:000000000000218C                 call    _dcgettext
.text:0000000000002191                 mov     rsi, rbx        ; stream
.text:0000000000002194                 mov     rdi, rax        ; s
.text:0000000000002197                 call    _fputs_unlocked
.text:000000000000219C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021A3                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000021AA                 mov     edx, 5          ; category
.text:00000000000021AF                 xor     edi, edi        ; domainname
.text:00000000000021B1                 call    _dcgettext
.text:00000000000021B6                 mov     rsi, rbx        ; stream
.text:00000000000021B9                 mov     rdi, rax        ; s
.text:00000000000021BC                 call    _fputs_unlocked
.text:00000000000021C1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000021C8                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000021CF                 mov     edx, 5          ; category
.text:00000000000021D4                 xor     edi, edi        ; domainname
.text:00000000000021D6                 call    _dcgettext
.text:00000000000021DB                 mov     rsi, rbx        ; stream
.text:00000000000021DE                 mov     rdi, rax        ; s
.text:00000000000021E1                 lea     rbx, aSha512sum+6 ; "sum"
.text:00000000000021E8                 call    _fputs_unlocked
.text:00000000000021ED                 lea     rax, asc_6393   ; "["
.text:00000000000021F4                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000021FB                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002204                 mov     [rsp+0A8h+var_40], 0
.text:000000000000220D                 mov     rdx, rsp
.text:0000000000002210                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002214                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000221B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002220                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002227                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000222C                 lea     rax, domainname ; "coreutils"
.text:0000000000002233                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002238                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000223F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002244                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000224B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002250                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002255                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000225C                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002261                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002268                 mov     [rsp+0A8h+var_80], rax
.text:000000000000226D                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002272                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002277                 mov     [rsp+0A8h+var_50], rax
.text:000000000000227C                 nop     dword ptr [rax+00h]
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: usage+1ED↓j
.text:0000000000002280                 add     rdx, 10h
.text:0000000000002284                 mov     rdi, [rdx]
.text:0000000000002287                 test    rdi, rdi
.text:000000000000228A                 jz      short loc_229F
.text:000000000000228C                 mov     ecx, 4
.text:0000000000002291                 mov     rsi, rbx
.text:0000000000002294                 repe cmpsb
.text:0000000000002296                 setnbe  al
.text:0000000000002299                 sbb     al, 0
.text:000000000000229B                 test    al, al
.text:000000000000229D                 jnz     short loc_2280
.text:000000000000229F
.text:000000000000229F loc_229F:                               ; CODE XREF: usage+1DA↑j
.text:000000000000229F                 mov     r12, [rdx+8]
.text:00000000000022A3                 xor     edi, edi        ; domainname
.text:00000000000022A5                 mov     edx, 5          ; category
.text:00000000000022AA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000022B1                 test    r12, r12
.text:00000000000022B4                 jz      loc_237B
.text:00000000000022BA                 call    _dcgettext
.text:00000000000022BF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000022C6                 lea     rdx, unk_6409
.text:00000000000022CD                 mov     rsi, rax
.text:00000000000022D0                 mov     edi, 1
.text:00000000000022D5                 xor     eax, eax
.text:00000000000022D7                 call    ___printf_chk
.text:00000000000022DC                 xor     esi, esi        ; locale
.text:00000000000022DE                 mov     edi, 5          ; category
.text:00000000000022E3                 call    _setlocale
.text:00000000000022E8                 test    rax, rax
.text:00000000000022EB                 jz      short loc_2309
.text:00000000000022ED                 lea     rsi, s2         ; "en_"
.text:00000000000022F4                 mov     edx, 3          ; n
.text:00000000000022F9                 mov     rdi, rax        ; s1
.text:00000000000022FC                 call    _strncmp
.text:0000000000002301                 test    eax, eax
.text:0000000000002303                 jnz     loc_2410
.text:0000000000002309
.text:0000000000002309 loc_2309:                               ; CODE XREF: usage+23B↑j
.text:0000000000002309                                         ; usage+385↓j
.text:0000000000002309                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002310                 xor     edi, edi        ; domainname
.text:0000000000002312                 mov     edx, 5          ; category
.text:0000000000002317                 call    _dcgettext
.text:000000000000231C                 lea     rcx, aSha512sum+6 ; "sum"
.text:0000000000002323                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000232A                 mov     rsi, rax
.text:000000000000232D                 mov     edi, 1
.text:0000000000002332                 xor     eax, eax
.text:0000000000002334                 call    ___printf_chk
.text:0000000000002339                 cmp     r12, rbx
.text:000000000000233C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002343                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000234A                 cmovz   rbx, rcx
.text:000000000000234E
.text:000000000000234E loc_234E:                               ; CODE XREF: usage+354↓j
.text:000000000000234E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002355                 xor     edi, edi        ; domainname
.text:0000000000002357                 mov     edx, 5          ; category
.text:000000000000235C                 call    _dcgettext
.text:0000000000002361                 mov     rcx, rbx
.text:0000000000002364                 mov     rsi, rax
.text:0000000000002367                 mov     rdx, r12
.text:000000000000236A                 mov     edi, 1
.text:000000000000236F                 xor     eax, eax
.text:0000000000002371                 call    ___printf_chk
.text:0000000000002376                 jmp     loc_2106
.text:000000000000237B ; ---------------------------------------------------------------------------
.text:000000000000237B
.text:000000000000237B loc_237B:                               ; CODE XREF: usage+204↑j
.text:000000000000237B                 call    _dcgettext
.text:0000000000002380                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002387                 lea     rdx, unk_6409
.text:000000000000238E                 mov     rsi, rax
.text:0000000000002391                 mov     edi, 1
.text:0000000000002396                 xor     eax, eax
.text:0000000000002398                 call    ___printf_chk
.text:000000000000239D                 xor     esi, esi        ; locale
.text:000000000000239F                 mov     edi, 5          ; category
.text:00000000000023A4                 call    _setlocale
.text:00000000000023A9                 test    rax, rax
.text:00000000000023AC                 jz      short loc_23C6
.text:00000000000023AE                 lea     rsi, s2         ; "en_"
.text:00000000000023B5                 mov     edx, 3          ; n
.text:00000000000023BA                 mov     rdi, rax        ; s1
.text:00000000000023BD                 call    _strncmp
.text:00000000000023C2                 test    eax, eax
.text:00000000000023C4                 jnz     short loc_2409
.text:00000000000023C6
.text:00000000000023C6 loc_23C6:                               ; CODE XREF: usage+2FC↑j
.text:00000000000023C6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000023CD                 mov     edx, 5          ; category
.text:00000000000023D2                 xor     edi, edi        ; domainname
.text:00000000000023D4                 lea     r12, aSha512sum+6 ; "sum"
.text:00000000000023DB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000023E2                 call    _dcgettext
.text:00000000000023E7                 lea     rcx, aSha512sum+6 ; "sum"
.text:00000000000023EE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000023F5                 mov     rsi, rax
.text:00000000000023F8                 mov     edi, 1
.text:00000000000023FD                 xor     eax, eax
.text:00000000000023FF                 call    ___printf_chk
.text:0000000000002404                 jmp     loc_234E
.text:0000000000002409 ; ---------------------------------------------------------------------------
.text:0000000000002409
.text:0000000000002409 loc_2409:                               ; CODE XREF: usage+314↑j
.text:0000000000002409                 lea     r12, aSha512sum+6 ; "sum"
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: usage+253↑j
.text:0000000000002410                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002417                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000241E                 xor     edi, edi        ; domainname
.text:0000000000002420                 mov     edx, 5          ; category
.text:0000000000002425                 call    _dcgettext
.text:000000000000242A                 mov     rsi, r13        ; stream
.text:000000000000242D                 mov     rdi, rax        ; s
.text:0000000000002430                 call    _fputs_unlocked
.text:0000000000002435                 jmp     loc_2309
.text:0000000000002435 ; } // starts at 20B0
.text:0000000000002435 usage           endp
.text:0000000000002435
.text:0000000000002435 ; ---------------------------------------------------------------------------
.text:000000000000243A                 align 20h
.text:0000000000002440
.text:0000000000002440 ; =============== S U B R O U T I N E =======================================
.text:0000000000002440
.text:0000000000002440
.text:0000000000002440                 public close_stdout_set_file_name
.text:0000000000002440 close_stdout_set_file_name proc near
.text:0000000000002440 ; __unwind {
.text:0000000000002440                 mov     cs:file_name, rdi
.text:0000000000002447                 retn
.text:0000000000002447 ; } // starts at 2440
.text:0000000000002447 close_stdout_set_file_name endp
.text:0000000000002447
.text:0000000000002447 ; ---------------------------------------------------------------------------
.text:0000000000002448                 align 10h
.text:0000000000002450
.text:0000000000002450 ; =============== S U B R O U T I N E =======================================
.text:0000000000002450
.text:0000000000002450
.text:0000000000002450                 public close_stdout_set_ignore_EPIPE
.text:0000000000002450 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002450 ; __unwind {
.text:0000000000002450                 mov     cs:ignore_EPIPE, dil
.text:0000000000002457                 retn
.text:0000000000002457 ; } // starts at 2450
.text:0000000000002457 close_stdout_set_ignore_EPIPE endp
.text:0000000000002457
.text:0000000000002457 ; ---------------------------------------------------------------------------
.text:0000000000002458                 align 20h
.text:0000000000002460
.text:0000000000002460 ; =============== S U B R O U T I N E =======================================
.text:0000000000002460
.text:0000000000002460 ; Attributes: info_from_lumina
.text:0000000000002460
.text:0000000000002460 ; void __cdecl close_stdout()
.text:0000000000002460                 public close_stdout
.text:0000000000002460 close_stdout    proc near               ; DATA XREF: main+63↑o
.text:0000000000002460 ; __unwind {
.text:0000000000002460                 push    rbp
.text:0000000000002461                 push    rbx
.text:0000000000002462                 sub     rsp, 8
.text:0000000000002466                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000246D                 call    close_stream
.text:0000000000002472                 test    eax, eax
.text:0000000000002474                 jz      short loc_248C
.text:0000000000002476                 call    ___errno_location
.text:000000000000247B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002482                 mov     rbx, rax
.text:0000000000002485                 jz      short loc_24A3
.text:0000000000002487                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000248A                 jnz     short loc_24A3
.text:000000000000248C
.text:000000000000248C loc_248C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000248C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002493                 call    close_stream
.text:0000000000002498                 test    eax, eax
.text:000000000000249A                 jnz     short loc_24E2
.text:000000000000249C                 add     rsp, 8
.text:00000000000024A0                 pop     rbx
.text:00000000000024A1                 pop     rbp
.text:00000000000024A2                 retn
.text:00000000000024A3 ; ---------------------------------------------------------------------------
.text:00000000000024A3
.text:00000000000024A3 loc_24A3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000024A3                                         ; close_stdout+2A↑j
.text:00000000000024A3                 lea     rsi, aWriteError ; "write error"
.text:00000000000024AA                 xor     edi, edi        ; domainname
.text:00000000000024AC                 mov     edx, 5          ; category
.text:00000000000024B1                 call    _dcgettext
.text:00000000000024B6                 mov     rdi, cs:file_name
.text:00000000000024BD                 mov     rbp, rax
.text:00000000000024C0                 test    rdi, rdi
.text:00000000000024C3                 jz      short loc_24ED
.text:00000000000024C5                 call    quotearg_colon
.text:00000000000024CA                 mov     esi, [rbx]      ; errnum
.text:00000000000024CC                 lea     rdx, format     ; "%s: %s"
.text:00000000000024D3                 mov     rcx, rax
.text:00000000000024D6                 mov     r8, rbp
.text:00000000000024D9                 xor     edi, edi        ; status
.text:00000000000024DB                 xor     eax, eax
.text:00000000000024DD                 call    _error
.text:00000000000024E2
.text:00000000000024E2 loc_24E2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000024E2                                         ; close_stdout+A2↓j
.text:00000000000024E2                 mov     edi, cs:exit_failure ; status
.text:00000000000024E8                 call    __exit
.text:00000000000024ED ; ---------------------------------------------------------------------------
.text:00000000000024ED
.text:00000000000024ED loc_24ED:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000024ED                 mov     esi, [rbx]      ; errnum
.text:00000000000024EF                 lea     rdx, aS_0+2     ; format
.text:00000000000024F6                 mov     rcx, rax
.text:00000000000024F9                 xor     edi, edi        ; status
.text:00000000000024FB                 xor     eax, eax
.text:00000000000024FD                 call    _error
.text:0000000000002502                 jmp     short loc_24E2
.text:0000000000002502 ; } // starts at 2460
.text:0000000000002502 close_stdout    endp
.text:0000000000002502
.text:0000000000002502 ; ---------------------------------------------------------------------------
.text:0000000000002504                 align 10h
.text:0000000000002510
.text:0000000000002510 ; =============== S U B R O U T I N E =======================================
.text:0000000000002510
.text:0000000000002510
.text:0000000000002510 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002510                 public fdadvise
.text:0000000000002510 fdadvise        proc near
.text:0000000000002510 ; __unwind {
.text:0000000000002510                 jmp     _posix_fadvise
.text:0000000000002510 ; } // starts at 2510
.text:0000000000002510 fdadvise        endp
.text:0000000000002510
.text:0000000000002510 ; ---------------------------------------------------------------------------
.text:0000000000002515                 align 20h
.text:0000000000002520
.text:0000000000002520 ; =============== S U B R O U T I N E =======================================
.text:0000000000002520
.text:0000000000002520
.text:0000000000002520                 public fadvise
.text:0000000000002520 fadvise         proc near               ; CODE XREF: bsd_sum_file+68↑p
.text:0000000000002520 ; __unwind {
.text:0000000000002520                 test    rdi, rdi
.text:0000000000002523                 jz      short locret_2540
.text:0000000000002525                 push    rbx
.text:0000000000002526                 mov     ebx, esi
.text:0000000000002528                 call    _fileno
.text:000000000000252D                 mov     ecx, ebx        ; advise
.text:000000000000252F                 xor     edx, edx        ; len
.text:0000000000002531                 xor     esi, esi        ; offset
.text:0000000000002533                 pop     rbx
.text:0000000000002534                 mov     edi, eax        ; fd
.text:0000000000002536                 jmp     _posix_fadvise
.text:0000000000002536 ; ---------------------------------------------------------------------------
.text:000000000000253B                 align 20h
.text:0000000000002540
.text:0000000000002540 locret_2540:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002540                 rep retn
.text:0000000000002540 ; } // starts at 2520
.text:0000000000002540 fadvise         endp
.text:0000000000002540
.text:0000000000002540 ; ---------------------------------------------------------------------------
.text:0000000000002542                 align 10h
.text:0000000000002550
.text:0000000000002550 ; =============== S U B R O U T I N E =======================================
.text:0000000000002550
.text:0000000000002550 ; Attributes: info_from_lumina
.text:0000000000002550
.text:0000000000002550 ; long double __usercall adjust_value@<st0>(int inexact_style@<edi>, long double value)
.text:0000000000002550 adjust_value    proc near               ; CODE XREF: human_readable+578↓p
.text:0000000000002550                                         ; human_readable+59A↓p ...
.text:0000000000002550
.text:0000000000002550 var_20          = qword ptr -20h
.text:0000000000002550 var_18          = qword ptr -18h
.text:0000000000002550 var_C           = word ptr -0Ch
.text:0000000000002550 var_A           = word ptr -0Ah
.text:0000000000002550 arg_0           = tbyte ptr  8
.text:0000000000002550
.text:0000000000002550 ; __unwind {
.text:0000000000002550                 fld     cs:flt_6754
.text:0000000000002556                 fld     [rsp+arg_0]
.text:000000000000255A                 fucomi  st, st(1)
.text:000000000000255C                 jnb     short loc_25D0
.text:000000000000255E                 fstp    st(1)
.text:0000000000002560                 fnstcw  [rsp+var_A]
.text:0000000000002564                 movzx   eax, [rsp+var_A]
.text:0000000000002569                 or      ah, 0Ch
.text:000000000000256C                 mov     [rsp+var_C], ax
.text:0000000000002571                 fld     st
.text:0000000000002573                 fldcw   [rsp+var_C]
.text:0000000000002577                 fistp   [rsp+var_18]
.text:000000000000257B                 fldcw   [rsp+var_A]
.text:000000000000257F                 mov     rax, [rsp+var_18]
.text:0000000000002584
.text:0000000000002584 loc_2584:                               ; CODE XREF: adjust_value+B3↓j
.text:0000000000002584                 mov     [rsp+var_20], rax
.text:0000000000002589                 test    rax, rax
.text:000000000000258C                 fild    [rsp+var_20]
.text:0000000000002590                 jns     short loc_2598
.text:0000000000002592                 fadd    cs:flt_6758
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: adjust_value+40↑j
.text:0000000000002598                 test    edi, edi
.text:000000000000259A                 jnz     short loc_25C8
.text:000000000000259C                 fxch    st(1)
.text:000000000000259E                 fucomip st, st(1)
.text:00000000000025A0                 jp      short loc_25A8
.text:00000000000025A2                 jz      short locret_25CA
.text:00000000000025A4                 fstp    st
.text:00000000000025A6                 jmp     short loc_25B0
.text:00000000000025A8 ; ---------------------------------------------------------------------------
.text:00000000000025A8
.text:00000000000025A8 loc_25A8:                               ; CODE XREF: adjust_value+50↑j
.text:00000000000025A8                 fstp    st
.text:00000000000025AA                 nop     word ptr [rax+rax+00h]
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: adjust_value+56↑j
.text:00000000000025B0                 add     rax, 1
.text:00000000000025B4                 mov     [rsp+var_20], rax
.text:00000000000025B9                 test    rax, rax
.text:00000000000025BC                 fild    [rsp+var_20]
.text:00000000000025C0                 js      short loc_2610
.text:00000000000025C2                 jmp     short locret_25CA
.text:00000000000025C2 ; ---------------------------------------------------------------------------
.text:00000000000025C4                 align 8
.text:00000000000025C8
.text:00000000000025C8 loc_25C8:                               ; CODE XREF: adjust_value+4A↑j
.text:00000000000025C8                 fstp    st(1)
.text:00000000000025CA
.text:00000000000025CA locret_25CA:                            ; CODE XREF: adjust_value+52↑j
.text:00000000000025CA                                         ; adjust_value+72↑j
.text:00000000000025CA                 rep retn
.text:00000000000025CA ; ---------------------------------------------------------------------------
.text:00000000000025CC                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: adjust_value+C↑j
.text:00000000000025D0                 fnstcw  [rsp+var_A]
.text:00000000000025D4                 movzx   eax, [rsp+var_A]
.text:00000000000025D9                 fsubr   st(1), st
.text:00000000000025DB                 fxch    st(1)
.text:00000000000025DD                 mov     rdx, 8000000000000000h
.text:00000000000025E7                 or      ah, 0Ch
.text:00000000000025EA                 mov     [rsp+var_C], ax
.text:00000000000025EF                 fldcw   [rsp+var_C]
.text:00000000000025F3                 fistp   [rsp+var_18]
.text:00000000000025F7                 fldcw   [rsp+var_A]
.text:00000000000025FB                 mov     rax, [rsp+var_18]
.text:0000000000002600                 xor     rax, rdx
.text:0000000000002603                 jmp     loc_2584
.text:0000000000002603 ; ---------------------------------------------------------------------------
.text:0000000000002608                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: adjust_value+70↑j
.text:0000000000002610                 fadd    cs:flt_6758
.text:0000000000002616                 retn
.text:0000000000002616 ; } // starts at 2550
.text:0000000000002616 adjust_value    endp
.text:0000000000002616
.text:0000000000002616 ; ---------------------------------------------------------------------------
.text:0000000000002617                 align 20h
.text:0000000000002620
.text:0000000000002620 ; =============== S U B R O U T I N E =======================================
.text:0000000000002620
.text:0000000000002620 ; Attributes: info_from_lumina
.text:0000000000002620
.text:0000000000002620 ; char *__fastcall human_readable(uintmax_t n, char *buf, int opts, uintmax_t from_block_size, uintmax_t to_block_size)
.text:0000000000002620                 public human_readable
.text:0000000000002620 human_readable  proc near               ; CODE XREF: sysv_sum_file+EF↑p
.text:0000000000002620                                         ; bsd_sum_file+EA↑p
.text:0000000000002620
.text:0000000000002620 var_D8          = tbyte ptr -0D8h
.text:0000000000002620 s               = qword ptr -0C8h
.text:0000000000002620 var_C0          = qword ptr -0C0h
.text:0000000000002620 var_B8          = qword ptr -0B8h
.text:0000000000002620 src             = qword ptr -0B0h
.text:0000000000002620 var_A8          = tbyte ptr -0A8h
.text:0000000000002620 var_98          = dword ptr -98h
.text:0000000000002620 var_94          = dword ptr -94h
.text:0000000000002620 var_90          = qword ptr -90h
.text:0000000000002620 n               = qword ptr -88h
.text:0000000000002620 var_80          = qword ptr -80h
.text:0000000000002620 var_78          = byte ptr -78h
.text:0000000000002620 var_40          = qword ptr -40h
.text:0000000000002620
.text:0000000000002620 ; __unwind {
.text:0000000000002620                 push    r15
.text:0000000000002622                 push    r14
.text:0000000000002624                 mov     eax, edx
.text:0000000000002626                 push    r13
.text:0000000000002628                 push    r12
.text:000000000000262A                 mov     r15d, edx
.text:000000000000262D                 push    rbp
.text:000000000000262E                 push    rbx
.text:000000000000262F                 and     eax, 20h
.text:0000000000002632                 and     r15d, 3
.text:0000000000002636                 mov     r12d, edx
.text:0000000000002639                 mov     rbx, rdi
.text:000000000000263C                 sub     rsp, 98h
.text:0000000000002643                 mov     [rsp+0C8h+src], rcx
.text:0000000000002648                 mov     [rsp+0C8h+var_98], eax
.text:000000000000264C                 mov     rcx, fs:28h
.text:0000000000002655                 mov     [rsp+0C8h+var_40], rcx
.text:000000000000265D                 xor     ecx, ecx
.text:000000000000265F                 cmp     eax, 1
.text:0000000000002662                 mov     [rsp+0C8h+s], rsi
.text:0000000000002666                 mov     [rsp+0C8h+var_B8], r8
.text:000000000000266B                 sbb     eax, eax
.text:000000000000266D                 and     eax, 0FFFFFFE8h
.text:0000000000002670                 add     eax, 400h
.text:0000000000002675                 mov     [rsp+0C8h+var_94], eax
.text:0000000000002679                 call    _localeconv
.text:000000000000267E                 mov     r14, [rax]
.text:0000000000002681                 mov     r13, rax
.text:0000000000002684                 mov     rdi, r14        ; s
.text:0000000000002687                 call    _strlen
.text:000000000000268C                 mov     rcx, [r13+10h]
.text:0000000000002690                 mov     r13, [r13+8]
.text:0000000000002694                 mov     rbp, rax
.text:0000000000002697                 sub     rax, 1
.text:000000000000269B                 mov     edx, 1
.text:00000000000026A0                 cmp     rax, 10h
.text:00000000000026A4                 lea     rax, asc_66E3   ; "."
.text:00000000000026AB                 mov     rdi, r13        ; s
.text:00000000000026AE                 cmovnb  rbp, rdx
.text:00000000000026B2                 mov     [rsp+0C8h+var_90], rcx
.text:00000000000026B7                 cmovnb  r14, rax
.text:00000000000026BB                 call    _strlen
.text:00000000000026C0                 cmp     rax, 11h
.text:00000000000026C4                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:00000000000026CB                 mov     rdi, [rsp+0C8h+var_B8]
.text:00000000000026D0                 mov     rcx, [rsp+0C8h+src]
.text:00000000000026D5                 cmovnb  r13, rax
.text:00000000000026D9                 mov     rax, [rsp+0C8h+s]
.text:00000000000026DD                 add     rax, 287h
.text:00000000000026E3                 cmp     rdi, rcx
.text:00000000000026E6                 mov     [rsp+0C8h+var_C0], rax
.text:00000000000026EB                 ja      loc_2838
.text:00000000000026F1                 xor     edx, edx
.text:00000000000026F3                 mov     rax, rcx
.text:00000000000026F6                 div     rdi
.text:00000000000026F9                 test    rdx, rdx
.text:00000000000026FC                 mov     rdi, rax
.text:00000000000026FF                 jz      loc_2A60
.text:0000000000002705
.text:0000000000002705 loc_2705:                               ; CODE XREF: human_readable+21B↓j
.text:0000000000002705                                         ; human_readable+231↓j ...
.text:0000000000002705                 mov     [rsp+0C8h+src], rcx
.text:000000000000270A                 test    rcx, rcx
.text:000000000000270D                 fild    [rsp+0C8h+src]
.text:0000000000002711                 jns     short loc_2719
.text:0000000000002713                 fadd    cs:flt_6758
.text:0000000000002719
.text:0000000000002719 loc_2719:                               ; CODE XREF: human_readable+F1↑j
.text:0000000000002719                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000271E                 mov     [rsp+0C8h+src], rax
.text:0000000000002723                 test    rax, rax
.text:0000000000002726                 fild    [rsp+0C8h+src]
.text:000000000000272A                 jns     short loc_2732
.text:000000000000272C                 fadd    cs:flt_6758
.text:0000000000002732
.text:0000000000002732 loc_2732:                               ; CODE XREF: human_readable+10A↑j
.text:0000000000002732                 fdivp   st(1), st
.text:0000000000002734                 mov     [rsp+0C8h+src], rbx
.text:0000000000002739                 test    rbx, rbx
.text:000000000000273C                 fild    [rsp+0C8h+src]
.text:0000000000002740                 jns     short loc_2748
.text:0000000000002742                 fadd    cs:flt_6758
.text:0000000000002748
.text:0000000000002748 loc_2748:                               ; CODE XREF: human_readable+120↑j
.text:0000000000002748                 test    r12b, 10h
.text:000000000000274C                 fmulp   st(1), st
.text:000000000000274E                 jz      loc_2918
.text:0000000000002754                 fild    [rsp+0C8h+var_94]
.text:0000000000002758                 xor     ebx, ebx
.text:000000000000275A                 fld     st
.text:000000000000275C                 jmp     short loc_2764
.text:000000000000275C ; ---------------------------------------------------------------------------
.text:000000000000275E                 align 20h
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: human_readable+154↓j
.text:0000000000002760                 fstp    st(1)
.text:0000000000002762                 fxch    st(2)
.text:0000000000002764
.text:0000000000002764 loc_2764:                               ; CODE XREF: human_readable+13C↑j
.text:0000000000002764                 fld     st
.text:0000000000002766                 add     ebx, 1
.text:0000000000002769                 fmul    st, st(2)
.text:000000000000276B                 fxch    st(3)
.text:000000000000276D                 fucomi  st, st(3)
.text:000000000000276F                 jb      short loc_2780
.text:0000000000002771                 cmp     ebx, 8
.text:0000000000002774                 jnz     short loc_2760
.text:0000000000002776                 fstp    st(2)
.text:0000000000002778                 fstp    st(2)
.text:000000000000277A                 jmp     short loc_2784
.text:000000000000277A ; ---------------------------------------------------------------------------
.text:000000000000277C                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: human_readable+14F↑j
.text:0000000000002780                 fstp    st(2)
.text:0000000000002782                 fstp    st(2)
.text:0000000000002784
.text:0000000000002784 loc_2784:                               ; CODE XREF: human_readable+15A↑j
.text:0000000000002784                 mov     ecx, [rsp+0C8h+var_98]
.text:0000000000002788                 add     rbp, 1
.text:000000000000278C                 xor     eax, eax
.text:000000000000278E                 fdivrp  st(1), st
.text:0000000000002790                 test    ecx, ecx
.text:0000000000002792                 setz    al
.text:0000000000002795                 cmp     r15d, 1
.text:0000000000002799                 lea     rax, [rbp+rax+1]
.text:000000000000279E                 mov     [rsp+0C8h+src], rax
.text:00000000000027A3                 jz      loc_2D10
.text:00000000000027A9                 fld     cs:tbyte_6760
.text:00000000000027AF                 fucomip st, st(1)
.text:00000000000027B1                 ja      loc_2B88
.text:00000000000027B7                 fld     st
.text:00000000000027B9
.text:00000000000027B9 loc_27B9:                               ; CODE XREF: human_readable+583↓j
.text:00000000000027B9                 fstp    [rsp+0C8h+var_A8]
.text:00000000000027BD                 sub     rsp, 10h
.text:00000000000027C1                 lea     rcx, a1lf       ; "%.1Lf"
.text:00000000000027C8                 mov     esi, 1
.text:00000000000027CD                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000027D4                 xor     eax, eax
.text:00000000000027D6                 mov     r14, [rsp+0D8h+s]
.text:00000000000027DB                 mov     rdi, r14
.text:00000000000027DE                 fstp    [rsp+0D8h+var_D8]
.text:00000000000027E1                 call    ___sprintf_chk
.text:00000000000027E6                 mov     rdi, r14        ; s
.text:00000000000027E9                 call    _strlen
.text:00000000000027EE                 pop     rcx
.text:00000000000027EF                 pop     rsi
.text:00000000000027F0                 cmp     rax, [rsp+0C8h+src]
.text:00000000000027F5                 mov     r14, rax
.text:00000000000027F8                 fld     [rsp+0C8h+var_A8]
.text:00000000000027FC                 ja      loc_2DA8
.text:0000000000002802
.text:0000000000002802 loc_2802:                               ; CODE XREF: human_readable+735↓j
.text:0000000000002802                 test    r12b, 8
.text:0000000000002806                 jz      loc_2970
.text:000000000000280C                 mov     rax, [rsp+0C8h+s]
.text:0000000000002810                 cmp     byte ptr [rax+r14-1], 30h ; '0'
.text:0000000000002816                 jnz     loc_2978
.text:000000000000281C                 fld     cs:flt_675C
.text:0000000000002822                 cmp     r15d, 1
.text:0000000000002826                 fmul    st(1), st
.text:0000000000002828                 jnz     loc_2DB0
.text:000000000000282E                 jmp     loc_2D63
.text:000000000000282E ; ---------------------------------------------------------------------------
.text:0000000000002833                 align 8
.text:0000000000002838
.text:0000000000002838 loc_2838:                               ; CODE XREF: human_readable+CB↑j
.text:0000000000002838                 test    rcx, rcx
.text:000000000000283B                 jz      loc_2705
.text:0000000000002841                 mov     rax, [rsp+0C8h+var_B8]
.text:0000000000002846                 xor     edx, edx
.text:0000000000002848                 div     rcx
.text:000000000000284B                 test    rdx, rdx
.text:000000000000284E                 mov     r8, rax
.text:0000000000002851                 jnz     loc_2705
.text:0000000000002857                 mov     rax, rbx
.text:000000000000285A                 xor     edx, edx
.text:000000000000285C                 div     r8
.text:000000000000285F                 mov     rbx, rax
.text:0000000000002862                 lea     rax, [rdx+rdx*4]
.text:0000000000002866                 xor     edx, edx
.text:0000000000002868                 mov     rsi, rbx
.text:000000000000286B                 add     rax, rax
.text:000000000000286E                 div     r8
.text:0000000000002871                 add     rdx, rdx
.text:0000000000002874                 mov     r9d, eax
.text:0000000000002877                 cmp     r8, rdx
.text:000000000000287A                 jbe     loc_2E08
.text:0000000000002880                 xor     edi, edi
.text:0000000000002882                 test    rdx, rdx
.text:0000000000002885                 setnz   dil
.text:0000000000002889
.text:0000000000002889 loc_2889:                               ; CODE XREF: human_readable+45D↓j
.text:0000000000002889                                         ; human_readable+7F3↓j
.text:0000000000002889                 mov     ecx, r12d
.text:000000000000288C                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000002891                 mov     ebx, 0FFFFFFFFh
.text:0000000000002896                 and     ecx, 10h
.text:0000000000002899                 jz      loc_2C60
.text:000000000000289F                 mov     r8d, [rsp+0C8h+var_94]
.text:00000000000028A4                 cmp     r8, rsi
.text:00000000000028A7                 mov     r11, r8
.text:00000000000028AA                 ja      loc_2E20
.text:00000000000028B0                 xor     ebx, ebx
.text:00000000000028B2                 jmp     short loc_28D7
.text:00000000000028B2 ; ---------------------------------------------------------------------------
.text:00000000000028B4                 align 8
.text:00000000000028B8
.text:00000000000028B8 loc_28B8:                               ; CODE XREF: human_readable+2E0↓j
.text:00000000000028B8                 test    edi, edi
.text:00000000000028BA                 setnz   dil
.text:00000000000028BE                 movzx   edi, dil
.text:00000000000028C2
.text:00000000000028C2 loc_28C2:                               ; CODE XREF: human_readable+2F0↓j
.text:00000000000028C2                 add     ebx, 1
.text:00000000000028C5                 cmp     r8, r10
.text:00000000000028C8                 ja      loc_2BDD
.text:00000000000028CE                 cmp     ebx, 8
.text:00000000000028D1                 jz      loc_2E78
.text:00000000000028D7
.text:00000000000028D7 loc_28D7:                               ; CODE XREF: human_readable+292↑j
.text:00000000000028D7                 mov     rax, rsi
.text:00000000000028DA                 xor     edx, edx
.text:00000000000028DC                 mov     esi, edi
.text:00000000000028DE                 div     r8
.text:00000000000028E1                 sar     esi, 1
.text:00000000000028E3                 mov     r10, rax
.text:00000000000028E6                 lea     eax, [rdx+rdx*4]
.text:00000000000028E9                 xor     edx, edx
.text:00000000000028EB                 lea     eax, [r9+rax*2]
.text:00000000000028EF                 div     r11d
.text:00000000000028F2                 lea     edx, [rsi+rdx*2]
.text:00000000000028F5                 mov     r9d, eax
.text:00000000000028F8                 mov     rsi, r10
.text:00000000000028FB                 add     edi, edx
.text:00000000000028FD                 cmp     r11d, edx
.text:0000000000002900                 ja      short loc_28B8
.text:0000000000002902                 cmp     r11d, edi
.text:0000000000002905                 setb    dil
.text:0000000000002909                 movzx   edi, dil
.text:000000000000290D                 add     edi, 2
.text:0000000000002910                 jmp     short loc_28C2
.text:0000000000002910 ; ---------------------------------------------------------------------------
.text:0000000000002912                 align 8
.text:0000000000002918
.text:0000000000002918 loc_2918:                               ; CODE XREF: human_readable+12E↑j
.text:0000000000002918                 cmp     r15d, 1
.text:000000000000291C                 jz      short loc_292C
.text:000000000000291E                 fld     cs:tbyte_6760
.text:0000000000002924                 fucomip st, st(1)
.text:0000000000002926                 ja      loc_2BB0
.text:000000000000292C
.text:000000000000292C loc_292C:                               ; CODE XREF: human_readable+2FC↑j
.text:000000000000292C                                         ; human_readable+5A3↓j
.text:000000000000292C                 sub     rsp, 10h
.text:0000000000002930                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000002937                 mov     esi, 1
.text:000000000000293C                 mov     rbx, [rsp+0D8h+s]
.text:0000000000002941                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002948                 xor     eax, eax
.text:000000000000294A                 fstp    [rsp+0D8h+var_D8]
.text:000000000000294D                 xor     ebp, ebp
.text:000000000000294F                 mov     rdi, rbx
.text:0000000000002952                 call    ___sprintf_chk
.text:0000000000002957                 mov     rdi, rbx        ; s
.text:000000000000295A                 mov     ebx, 0FFFFFFFFh
.text:000000000000295F                 call    _strlen
.text:0000000000002964                 pop     rsi
.text:0000000000002965                 pop     rdi
.text:0000000000002966                 mov     r14, rax
.text:0000000000002969                 jmp     short loc_2980
.text:0000000000002969 ; ---------------------------------------------------------------------------
.text:000000000000296B                 align 10h
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: human_readable+1E6↑j
.text:0000000000002970                 fstp    st
.text:0000000000002972                 jmp     short loc_2980
.text:0000000000002972 ; ---------------------------------------------------------------------------
.text:0000000000002974                 align 8
.text:0000000000002978
.text:0000000000002978 loc_2978:                               ; CODE XREF: human_readable+1F6↑j
.text:0000000000002978                 fstp    st
.text:000000000000297A                 nop     word ptr [rax+rax+00h]
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: human_readable+349↑j
.text:0000000000002980                                         ; human_readable+352↑j ...
.text:0000000000002980                 mov     r15, [rsp+0C8h+var_C0]
.text:0000000000002985                 mov     rsi, [rsp+0C8h+s] ; src
.text:0000000000002989                 mov     rdx, r14        ; n
.text:000000000000298C                 sub     r15, r14
.text:000000000000298F                 sub     r14, rbp
.text:0000000000002992                 mov     rdi, r15        ; dest
.text:0000000000002995                 call    _memmove
.text:000000000000299A                 mov     r8, r14
.text:000000000000299D                 add     r8, r15
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: human_readable+6A6↓j
.text:00000000000029A0                                         ; human_readable+84F↓j
.text:00000000000029A0                 test    r12b, 4
.text:00000000000029A4                 jnz     loc_2A88
.text:00000000000029AA
.text:00000000000029AA loc_29AA:                               ; CODE XREF: human_readable+53F↓j
.text:00000000000029AA                                         ; human_readable+A02↓j
.text:00000000000029AA                 test    r12b, 80h
.text:00000000000029AE                 jz      short loc_2A27
.text:00000000000029B0                 cmp     ebx, 0FFFFFFFFh
.text:00000000000029B3                 jz      loc_2CD0
.text:00000000000029B9
.text:00000000000029B9 loc_29B9:                               ; CODE XREF: human_readable+6D4↓j
.text:00000000000029B9                                         ; human_readable+6E2↓j ...
.text:00000000000029B9                 mov     eax, r12d
.text:00000000000029BC                 and     eax, 100h
.text:00000000000029C1                 mov     ecx, eax
.text:00000000000029C3                 or      ecx, ebx
.text:00000000000029C5                 jz      short loc_2A27
.text:00000000000029C7                 and     r12d, 40h
.text:00000000000029CB                 jnz     loc_2B68
.text:00000000000029D1
.text:00000000000029D1 loc_29D1:                               ; CODE XREF: human_readable+55F↓j
.text:00000000000029D1                 test    ebx, ebx
.text:00000000000029D3                 jz      loc_3006
.text:00000000000029D9                 cmp     ebx, 1
.text:00000000000029DC                 jnz     short loc_29EC
.text:00000000000029DE                 mov     r9d, [rsp+0C8h+var_98]
.text:00000000000029E3                 test    r9d, r9d
.text:00000000000029E6                 jz      loc_2E30
.text:00000000000029EC
.text:00000000000029EC loc_29EC:                               ; CODE XREF: human_readable+3BC↑j
.text:00000000000029EC                 lea     rcx, power_letter
.text:00000000000029F3                 movsxd  rbx, ebx
.text:00000000000029F6                 mov     rdi, [rsp+0C8h+var_C0]
.text:00000000000029FB                 test    eax, eax
.text:00000000000029FD                 movzx   ecx, byte ptr [rcx+rbx]
.text:0000000000002A01                 lea     rdx, [rdi+1]
.text:0000000000002A05                 mov     [rdi], cl
.text:0000000000002A07                 jz      loc_2E44
.text:0000000000002A0D                 mov     r8d, [rsp+0C8h+var_98]
.text:0000000000002A12                 test    r8d, r8d
.text:0000000000002A15                 jnz     loc_2BD0
.text:0000000000002A1B
.text:0000000000002A1B loc_2A1B:                               ; CODE XREF: human_readable+5B8↓j
.text:0000000000002A1B                                         ; human_readable+81E↓j ...
.text:0000000000002A1B                 lea     rax, [rdx+1]
.text:0000000000002A1F                 mov     byte ptr [rdx], 42h ; 'B'
.text:0000000000002A22                 mov     [rsp+0C8h+var_C0], rax
.text:0000000000002A27
.text:0000000000002A27 loc_2A27:                               ; CODE XREF: human_readable+38E↑j
.text:0000000000002A27                                         ; human_readable+3A5↑j ...
.text:0000000000002A27                 mov     rax, [rsp+0C8h+var_C0]
.text:0000000000002A2C                 mov     rcx, [rsp+0C8h+var_40]
.text:0000000000002A34                 xor     rcx, fs:28h
.text:0000000000002A3D                 mov     byte ptr [rax], 0
.text:0000000000002A40                 mov     rax, r15
.text:0000000000002A43                 jnz     loc_2FDB
.text:0000000000002A49                 add     rsp, 98h
.text:0000000000002A50                 pop     rbx
.text:0000000000002A51                 pop     rbp
.text:0000000000002A52                 pop     r12
.text:0000000000002A54                 pop     r13
.text:0000000000002A56                 pop     r14
.text:0000000000002A58                 pop     r15
.text:0000000000002A5A                 retn
.text:0000000000002A5A ; ---------------------------------------------------------------------------
.text:0000000000002A5B                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: human_readable+DF↑j
.text:0000000000002A60                 mov     rsi, rbx
.text:0000000000002A63                 xor     edx, edx
.text:0000000000002A65                 imul    rsi, rax
.text:0000000000002A69                 mov     rax, rsi
.text:0000000000002A6C                 div     rdi
.text:0000000000002A6F                 cmp     rax, rbx
.text:0000000000002A72                 jnz     loc_2705
.text:0000000000002A78                 xor     edi, edi
.text:0000000000002A7A                 xor     r9d, r9d
.text:0000000000002A7D                 jmp     loc_2889
.text:0000000000002A7D ; ---------------------------------------------------------------------------
.text:0000000000002A82                 align 8
.text:0000000000002A88
.text:0000000000002A88 loc_2A88:                               ; CODE XREF: human_readable+384↑j
.text:0000000000002A88                 mov     r14, r8
.text:0000000000002A8B                 mov     rdi, r13        ; s
.text:0000000000002A8E                 mov     [rsp+0C8h+var_80], r8
.text:0000000000002A93                 sub     r14, r15
.text:0000000000002A96                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A9D                 call    _strlen
.text:0000000000002AA2                 lea     rdi, [rsp+0C8h+var_78]
.text:0000000000002AA7                 mov     ecx, 29h ; ')'
.text:0000000000002AAC                 mov     rdx, r14
.text:0000000000002AAF                 mov     rsi, r15
.text:0000000000002AB2                 mov     [rsp+0C8h+n], rax
.text:0000000000002AB7                 mov     [rsp+0C8h+src], rdi
.text:0000000000002ABC                 call    ___memcpy_chk
.text:0000000000002AC1                 mov     ecx, r12d
.text:0000000000002AC4                 mov     dword ptr [rsp+0C8h+var_A8], ebx
.text:0000000000002AC8                 mov     r12, r14
.text:0000000000002ACB                 mov     rbx, r13
.text:0000000000002ACE                 mov     r8, [rsp+0C8h+var_80]
.text:0000000000002AD3                 mov     r15, [rsp+0C8h+var_90]
.text:0000000000002AD8                 mov     r13, [rsp+0C8h+n]
.text:0000000000002ADD                 mov     r14d, ecx
.text:0000000000002AE0                 jmp     short loc_2B22
.text:0000000000002AE0 ; ---------------------------------------------------------------------------
.text:0000000000002AE2                 align 8
.text:0000000000002AE8
.text:0000000000002AE8 loc_2AE8:                               ; CODE XREF: human_readable+51A↓j
.text:0000000000002AE8                 mov     rax, [rsp+0C8h+src]
.text:0000000000002AED                 sub     r12, rbp
.text:0000000000002AF0                 sub     r8, rbp
.text:0000000000002AF3                 mov     rdi, r8         ; dest
.text:0000000000002AF6                 mov     rdx, rbp        ; n
.text:0000000000002AF9                 lea     rsi, [rax+r12]  ; src
.text:0000000000002AFD                 call    _memcpy
.text:0000000000002B02                 test    r12, r12
.text:0000000000002B05                 mov     r8, rax
.text:0000000000002B08                 jz      loc_3018
.text:0000000000002B0E                 sub     r8, r13
.text:0000000000002B11                 mov     rdx, r13        ; n
.text:0000000000002B14                 mov     rsi, rbx        ; src
.text:0000000000002B17                 mov     rdi, r8         ; dest
.text:0000000000002B1A                 call    _memcpy
.text:0000000000002B1F                 mov     r8, rax
.text:0000000000002B22
.text:0000000000002B22 loc_2B22:                               ; CODE XREF: human_readable+4C0↑j
.text:0000000000002B22                 movzx   eax, byte ptr [r15]
.text:0000000000002B26                 test    al, al
.text:0000000000002B28                 jz      short loc_2B37
.text:0000000000002B2A                 cmp     al, 7Fh
.text:0000000000002B2C                 movzx   ebp, al
.text:0000000000002B2F                 cmovnb  rbp, r12
.text:0000000000002B33                 add     r15, 1
.text:0000000000002B37
.text:0000000000002B37 loc_2B37:                               ; CODE XREF: human_readable+508↑j
.text:0000000000002B37                 cmp     rbp, r12
.text:0000000000002B3A                 jbe     short loc_2AE8
.text:0000000000002B3C                 mov     eax, r14d
.text:0000000000002B3F                 mov     r15, r8
.text:0000000000002B42                 mov     r14, r12
.text:0000000000002B45                 mov     rsi, [rsp+0C8h+src] ; src
.text:0000000000002B4A                 sub     r15, r14
.text:0000000000002B4D                 mov     rdx, r14        ; n
.text:0000000000002B50                 mov     rdi, r15        ; dest
.text:0000000000002B53                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000002B57                 mov     r12d, eax
.text:0000000000002B5A                 call    _memcpy
.text:0000000000002B5F                 jmp     loc_29AA
.text:0000000000002B5F ; ---------------------------------------------------------------------------
.text:0000000000002B64                 align 8
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: human_readable+3AB↑j
.text:0000000000002B68                 mov     rcx, [rsp+0C8h+s]
.text:0000000000002B6C                 lea     rdi, [rcx+288h]
.text:0000000000002B73                 mov     byte ptr [rcx+287h], 20h ; ' '
.text:0000000000002B7A                 mov     [rsp+0C8h+var_C0], rdi
.text:0000000000002B7F                 jmp     loc_29D1
.text:0000000000002B7F ; ---------------------------------------------------------------------------
.text:0000000000002B84                 align 8
.text:0000000000002B88
.text:0000000000002B88 loc_2B88:                               ; CODE XREF: human_readable+191↑j
.text:0000000000002B88                 sub     rsp, 10h
.text:0000000000002B8C                 mov     edi, r15d
.text:0000000000002B8F                 fld     st
.text:0000000000002B91                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000002B94                 fstp    [rsp+0D8h+var_A8]
.text:0000000000002B98                 call    adjust_value
.text:0000000000002B9D                 pop     rax
.text:0000000000002B9E                 pop     rdx
.text:0000000000002B9F                 fld     [rsp+0C8h+var_A8]
.text:0000000000002BA3                 jmp     loc_27B9
.text:0000000000002BA3 ; ---------------------------------------------------------------------------
.text:0000000000002BA8                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: human_readable+306↑j
.text:0000000000002BB0                 sub     rsp, 10h
.text:0000000000002BB4                 mov     edi, r15d
.text:0000000000002BB7                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000002BBA                 call    adjust_value
.text:0000000000002BBF                 pop     r8
.text:0000000000002BC1                 pop     r9
.text:0000000000002BC3                 jmp     loc_292C
.text:0000000000002BC3 ; ---------------------------------------------------------------------------
.text:0000000000002BC8                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: human_readable+3F5↑j
.text:0000000000002BD0                 lea     rdx, [rdi+2]
.text:0000000000002BD4                 mov     byte ptr [rdi+1], 69h ; 'i'
.text:0000000000002BD8                 jmp     loc_2A1B
.text:0000000000002BDD ; ---------------------------------------------------------------------------
.text:0000000000002BDD
.text:0000000000002BDD loc_2BDD:                               ; CODE XREF: human_readable+2A8↑j
.text:0000000000002BDD                 cmp     r10, 9
.text:0000000000002BE1                 ja      loc_2E78
.text:0000000000002BE7                 cmp     r15d, 1
.text:0000000000002BEB                 jz      loc_2EA2
.text:0000000000002BF1                 test    r15d, r15d
.text:0000000000002BF4                 setz    dl
.text:0000000000002BF7                 test    edi, edi
.text:0000000000002BF9                 setnle  r8b
.text:0000000000002BFD                 and     edx, r8d
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: human_readable+88F↓j
.text:0000000000002C00                 test    dl, dl
.text:0000000000002C02                 jz      loc_2E89
.text:0000000000002C08                 lea     r9d, [rax+1]
.text:0000000000002C0C                 cmp     r9d, 0Ah
.text:0000000000002C10                 jz      loc_2F11
.text:0000000000002C16
.text:0000000000002C16 loc_2C16:                               ; CODE XREF: human_readable+86B↓j
.text:0000000000002C16                 add     r9d, 30h ; '0'
.text:0000000000002C1A
.text:0000000000002C1A loc_2C1A:                               ; CODE XREF: human_readable+87D↓j
.text:0000000000002C1A                 mov     rax, [rsp+0C8h+s]
.text:0000000000002C1E                 lea     r8, [rax+286h]
.text:0000000000002C25                 mov     [rax+286h], r9b
.text:0000000000002C2C                 mov     eax, ebp
.text:0000000000002C2E                 sub     r8, rbp
.text:0000000000002C31                 cmp     ebp, 8
.text:0000000000002C34                 jnb     loc_2EC1
.text:0000000000002C3A                 test    bpl, 4
.text:0000000000002C3E                 jnz     loc_2FC6
.text:0000000000002C44                 test    eax, eax
.text:0000000000002C46                 jz      short loc_2C57
.text:0000000000002C48                 movzx   edx, byte ptr [r14]
.text:0000000000002C4C                 test    al, 2
.text:0000000000002C4E                 mov     [r8], dl
.text:0000000000002C51                 jnz     loc_2FE0
.text:0000000000002C57
.text:0000000000002C57 loc_2C57:                               ; CODE XREF: human_readable+626↑j
.text:0000000000002C57                                         ; human_readable+8CF↓j ...
.text:0000000000002C57                 xor     edi, edi
.text:0000000000002C59                 xor     r9d, r9d
.text:0000000000002C5C                 nop     dword ptr [rax+00h]
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: human_readable+279↑j
.text:0000000000002C60                                         ; human_readable+807↓j ...
.text:0000000000002C60                 cmp     r15d, 1
.text:0000000000002C64                 jz      loc_2DE0
.text:0000000000002C6A                 test    r15d, r15d
.text:0000000000002C6D                 jnz     short loc_2C90
.text:0000000000002C6F                 add     edi, r9d
.text:0000000000002C72                 test    edi, edi
.text:0000000000002C74                 jle     short loc_2C90
.text:0000000000002C76
.text:0000000000002C76 loc_2C76:                               ; CODE XREF: human_readable+7D9↓j
.text:0000000000002C76                 add     rsi, 1
.text:0000000000002C7A                 test    ecx, ecx
.text:0000000000002C7C                 jz      short loc_2C90
.text:0000000000002C7E                 mov     eax, [rsp+0C8h+var_94]
.text:0000000000002C82                 cmp     rax, rsi
.text:0000000000002C85                 jz      loc_2E50
.text:0000000000002C8B                 nop     dword ptr [rax+rax+00h]
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: human_readable+64D↑j
.text:0000000000002C90                                         ; human_readable+654↑j ...
.text:0000000000002C90                 mov     r15, r8
.text:0000000000002C93                 mov     rcx, 0CCCCCCCCCCCCCCCDh
.text:0000000000002C9D                 nop     dword ptr [rax]
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: human_readable+6A4↓j
.text:0000000000002CA0                 mov     rax, rsi
.text:0000000000002CA3                 sub     r15, 1
.text:0000000000002CA7                 mul     rcx
.text:0000000000002CAA                 shr     rdx, 3
.text:0000000000002CAE                 lea     rax, [rdx+rdx*4]
.text:0000000000002CB2                 add     rax, rax
.text:0000000000002CB5                 sub     rsi, rax
.text:0000000000002CB8                 add     esi, 30h ; '0'
.text:0000000000002CBB                 test    rdx, rdx
.text:0000000000002CBE                 mov     [r15], sil
.text:0000000000002CC1                 mov     rsi, rdx
.text:0000000000002CC4                 jnz     short loc_2CA0
.text:0000000000002CC6                 jmp     loc_29A0
.text:0000000000002CC6 ; ---------------------------------------------------------------------------
.text:0000000000002CCB                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: human_readable+393↑j
.text:0000000000002CD0                 mov     rcx, [rsp+0C8h+var_B8]
.text:0000000000002CD5                 cmp     rcx, 1
.text:0000000000002CD9                 jbe     loc_2E82
.text:0000000000002CDF                 mov     edx, [rsp+0C8h+var_94]
.text:0000000000002CE3                 mov     ebx, 1
.text:0000000000002CE8                 mov     eax, 1
.text:0000000000002CED
.text:0000000000002CED loc_2CED:                               ; CODE XREF: human_readable+6E0↓j
.text:0000000000002CED                 imul    rax, rdx
.text:0000000000002CF1                 cmp     rcx, rax
.text:0000000000002CF4                 jbe     loc_29B9
.text:0000000000002CFA                 add     ebx, 1
.text:0000000000002CFD                 cmp     ebx, 8
.text:0000000000002D00                 jnz     short loc_2CED
.text:0000000000002D02                 jmp     loc_29B9
.text:0000000000002D02 ; ---------------------------------------------------------------------------
.text:0000000000002D07                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: human_readable+183↑j
.text:0000000000002D10                 sub     rsp, 10h
.text:0000000000002D14                 lea     rcx, a1lf       ; "%.1Lf"
.text:0000000000002D1B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D22                 fld     st
.text:0000000000002D24                 fstp    [rsp+0D8h+var_D8]
.text:0000000000002D27                 mov     r14, [rsp+0D8h+s]
.text:0000000000002D2C                 mov     esi, 1
.text:0000000000002D31                 xor     eax, eax
.text:0000000000002D33                 mov     rdi, r14
.text:0000000000002D36                 fstp    [rsp+0D8h+var_A8]
.text:0000000000002D3A                 call    ___sprintf_chk
.text:0000000000002D3F                 mov     rdi, r14        ; s
.text:0000000000002D42                 call    _strlen
.text:0000000000002D47                 mov     r14, rax
.text:0000000000002D4A                 pop     rax
.text:0000000000002D4B                 pop     rdx
.text:0000000000002D4C                 cmp     r14, [rsp+0C8h+src]
.text:0000000000002D51                 fld     [rsp+0C8h+var_A8]
.text:0000000000002D55                 jbe     loc_2802
.text:0000000000002D5B                 fld     cs:flt_675C
.text:0000000000002D61                 fmul    st(1), st
.text:0000000000002D63
.text:0000000000002D63 loc_2D63:                               ; CODE XREF: human_readable+20E↑j
.text:0000000000002D63                                         ; human_readable+798↓j ...
.text:0000000000002D63                 fdivp   st(1), st
.text:0000000000002D65                 sub     rsp, 10h
.text:0000000000002D69                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000002D70                 mov     r14, [rsp+0D8h+s]
.text:0000000000002D75                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D7C                 mov     esi, 1
.text:0000000000002D81                 xor     eax, eax
.text:0000000000002D83                 xor     ebp, ebp
.text:0000000000002D85                 mov     rdi, r14
.text:0000000000002D88                 fstp    [rsp+0D8h+var_D8]
.text:0000000000002D8B                 call    ___sprintf_chk
.text:0000000000002D90                 mov     rdi, r14        ; s
.text:0000000000002D93                 call    _strlen
.text:0000000000002D98                 pop     r10
.text:0000000000002D9A                 mov     r14, rax
.text:0000000000002D9D                 pop     r11
.text:0000000000002D9F                 jmp     loc_2980
.text:0000000000002D9F ; ---------------------------------------------------------------------------
.text:0000000000002DA4                 align 8
.text:0000000000002DA8
.text:0000000000002DA8 loc_2DA8:                               ; CODE XREF: human_readable+1DC↑j
.text:0000000000002DA8                 fld     cs:flt_675C
.text:0000000000002DAE                 fmul    st(1), st
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: human_readable+208↑j
.text:0000000000002DB0                 fld     cs:tbyte_6760
.text:0000000000002DB6                 fucomip st, st(2)
.text:0000000000002DB8                 jbe     short loc_2D63
.text:0000000000002DBA                 fstp    dword ptr [rsp+0C8h+src]
.text:0000000000002DBE                 sub     rsp, 10h
.text:0000000000002DC2                 mov     edi, r15d
.text:0000000000002DC5                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000002DC8                 call    adjust_value
.text:0000000000002DCD                 pop     rbp
.text:0000000000002DCE                 pop     r14
.text:0000000000002DD0                 fld     dword ptr [rsp+0C8h+src]
.text:0000000000002DD4                 jmp     short loc_2D63
.text:0000000000002DD4 ; ---------------------------------------------------------------------------
.text:0000000000002DD6                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: human_readable+644↑j
.text:0000000000002DE0                 mov     rax, rsi
.text:0000000000002DE3                 movsxd  rdi, edi
.text:0000000000002DE6                 and     eax, 1
.text:0000000000002DE9                 add     rax, rdi
.text:0000000000002DEC                 setnz   al
.text:0000000000002DEF                 movzx   eax, al
.text:0000000000002DF2                 add     r9d, eax
.text:0000000000002DF5                 cmp     r9d, 5
.text:0000000000002DF9                 jg      loc_2C76
.text:0000000000002DFF                 jmp     loc_2C90
.text:0000000000002DFF ; ---------------------------------------------------------------------------
.text:0000000000002E04                 align 8
.text:0000000000002E08
.text:0000000000002E08 loc_2E08:                               ; CODE XREF: human_readable+25A↑j
.text:0000000000002E08                 setb    dil
.text:0000000000002E0C                 movzx   edi, dil
.text:0000000000002E10                 add     edi, 2
.text:0000000000002E13                 jmp     loc_2889
.text:0000000000002E13 ; ---------------------------------------------------------------------------
.text:0000000000002E18                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: human_readable+28A↑j
.text:0000000000002E20                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000002E25                 xor     ebx, ebx
.text:0000000000002E27                 jmp     loc_2C60
.text:0000000000002E27 ; ---------------------------------------------------------------------------
.text:0000000000002E2C                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: human_readable+3C6↑j
.text:0000000000002E30                 mov     rbx, [rsp+0C8h+var_C0]
.text:0000000000002E35                 test    eax, eax
.text:0000000000002E37                 lea     rdx, [rbx+1]
.text:0000000000002E3B                 mov     byte ptr [rbx], 6Bh ; 'k'
.text:0000000000002E3E                 jnz     loc_2A1B
.text:0000000000002E44
.text:0000000000002E44 loc_2E44:                               ; CODE XREF: human_readable+3E7↑j
.text:0000000000002E44                 mov     [rsp+0C8h+var_C0], rdx
.text:0000000000002E49                 jmp     loc_2A27
.text:0000000000002E49 ; ---------------------------------------------------------------------------
.text:0000000000002E4E                 align 10h
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: human_readable+665↑j
.text:0000000000002E50                 cmp     ebx, 8
.text:0000000000002E53                 jz      loc_2C90
.text:0000000000002E59                 add     ebx, 1
.text:0000000000002E5C                 test    r12b, 8
.text:0000000000002E60                 jz      loc_2F22
.text:0000000000002E66
.text:0000000000002E66 loc_2E66:                               ; CODE XREF: human_readable+922↓j
.text:0000000000002E66                                         ; human_readable+931↓j ...
.text:0000000000002E66                 lea     r15, [r8-1]
.text:0000000000002E6A                 mov     byte ptr [r8-1], 31h ; '1'
.text:0000000000002E6F                 jmp     loc_29A0
.text:0000000000002E6F ; ---------------------------------------------------------------------------
.text:0000000000002E74                 align 8
.text:0000000000002E78
.text:0000000000002E78 loc_2E78:                               ; CODE XREF: human_readable+2B1↑j
.text:0000000000002E78                                         ; human_readable+5C1↑j
.text:0000000000002E78                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000002E7D                 jmp     loc_2C60
.text:0000000000002E82 ; ---------------------------------------------------------------------------
.text:0000000000002E82
.text:0000000000002E82 loc_2E82:                               ; CODE XREF: human_readable+6B9↑j
.text:0000000000002E82                 xor     ebx, ebx
.text:0000000000002E84                 jmp     loc_29B9
.text:0000000000002E89 ; ---------------------------------------------------------------------------
.text:0000000000002E89
.text:0000000000002E89 loc_2E89:                               ; CODE XREF: human_readable+5E2↑j
.text:0000000000002E89                 test    eax, eax
.text:0000000000002E8B                 jnz     loc_2C16
.text:0000000000002E91
.text:0000000000002E91 loc_2E91:                               ; CODE XREF: human_readable+8FD↓j
.text:0000000000002E91                 test    r12b, 8
.text:0000000000002E95                 jnz     short loc_2EB4
.text:0000000000002E97                 mov     r9d, 30h ; '0'
.text:0000000000002E9D                 jmp     loc_2C1A
.text:0000000000002EA2 ; ---------------------------------------------------------------------------
.text:0000000000002EA2
.text:0000000000002EA2 loc_2EA2:                               ; CODE XREF: human_readable+5CB↑j
.text:0000000000002EA2                 mov     edx, eax
.text:0000000000002EA4                 and     edx, 1
.text:0000000000002EA7                 add     edx, edi
.text:0000000000002EA9                 cmp     edx, 2
.text:0000000000002EAC                 setnle  dl
.text:0000000000002EAF                 jmp     loc_2C00
.text:0000000000002EB4 ; ---------------------------------------------------------------------------
.text:0000000000002EB4
.text:0000000000002EB4 loc_2EB4:                               ; CODE XREF: human_readable+875↑j
.text:0000000000002EB4                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000002EB9                 xor     r9d, r9d
.text:0000000000002EBC                 jmp     loc_2C60
.text:0000000000002EC1 ; ---------------------------------------------------------------------------
.text:0000000000002EC1
.text:0000000000002EC1 loc_2EC1:                               ; CODE XREF: human_readable+614↑j
.text:0000000000002EC1                 mov     rax, [r14]
.text:0000000000002EC4                 mov     r9, r14
.text:0000000000002EC7                 mov     [r8], rax
.text:0000000000002ECA                 mov     eax, ebp
.text:0000000000002ECC                 mov     rdx, [r14+rax-8]
.text:0000000000002ED1                 mov     [r8+rax-8], rdx
.text:0000000000002ED6                 lea     rdx, [r8+8]
.text:0000000000002EDA                 mov     rax, r8
.text:0000000000002EDD                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:0000000000002EE1                 sub     rax, rdx
.text:0000000000002EE4                 sub     r9, rax
.text:0000000000002EE7                 add     eax, ebp
.text:0000000000002EE9                 and     eax, 0FFFFFFF8h
.text:0000000000002EEC                 cmp     eax, 8
.text:0000000000002EEF                 jb      loc_2C57
.text:0000000000002EF5                 and     eax, 0FFFFFFF8h
.text:0000000000002EF8                 xor     edi, edi
.text:0000000000002EFA
.text:0000000000002EFA loc_2EFA:                               ; CODE XREF: human_readable+8EA↓j
.text:0000000000002EFA                 mov     r10d, edi
.text:0000000000002EFD                 add     edi, 8
.text:0000000000002F00                 mov     r11, [r9+r10]
.text:0000000000002F04                 cmp     edi, eax
.text:0000000000002F06                 mov     [rdx+r10], r11
.text:0000000000002F0A                 jb      short loc_2EFA
.text:0000000000002F0C                 jmp     loc_2C57
.text:0000000000002F11 ; ---------------------------------------------------------------------------
.text:0000000000002F11
.text:0000000000002F11 loc_2F11:                               ; CODE XREF: human_readable+5F0↑j
.text:0000000000002F11                 lea     rsi, [r10+1]
.text:0000000000002F15                 cmp     rsi, 0Ah
.text:0000000000002F19                 jz      short loc_2F70
.text:0000000000002F1B                 xor     edi, edi
.text:0000000000002F1D                 jmp     loc_2E91
.text:0000000000002F22 ; ---------------------------------------------------------------------------
.text:0000000000002F22
.text:0000000000002F22 loc_2F22:                               ; CODE XREF: human_readable+840↑j
.text:0000000000002F22                 mov     rax, rbp
.text:0000000000002F25                 mov     byte ptr [r8-1], 30h ; '0'
.text:0000000000002F2A                 not     rax
.text:0000000000002F2D                 add     r8, rax
.text:0000000000002F30                 cmp     ebp, 8
.text:0000000000002F33                 mov     eax, ebp
.text:0000000000002F35                 jnb     short loc_2F7A
.text:0000000000002F37                 and     ebp, 4
.text:0000000000002F3A                 jnz     loc_2FF1
.text:0000000000002F40                 test    eax, eax
.text:0000000000002F42                 jz      loc_2E66
.text:0000000000002F48                 movzx   edx, byte ptr [r14]
.text:0000000000002F4C                 test    al, 2
.text:0000000000002F4E                 mov     [r8], dl
.text:0000000000002F51                 jz      loc_2E66
.text:0000000000002F57                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000002F5D                 mov     [r8+rax-2], dx
.text:0000000000002F63                 jmp     loc_2E66
.text:0000000000002F63 ; ---------------------------------------------------------------------------
.text:0000000000002F68                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: human_readable+8F9↑j
.text:0000000000002F70                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000002F75                 jmp     loc_2C57
.text:0000000000002F7A ; ---------------------------------------------------------------------------
.text:0000000000002F7A
.text:0000000000002F7A loc_2F7A:                               ; CODE XREF: human_readable+915↑j
.text:0000000000002F7A                 mov     rax, [r14]
.text:0000000000002F7D                 lea     rcx, [r8+8]
.text:0000000000002F81                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000002F85                 mov     [r8], rax
.text:0000000000002F88                 mov     eax, ebp
.text:0000000000002F8A                 mov     rdx, [r14+rax-8]
.text:0000000000002F8F                 mov     [r8+rax-8], rdx
.text:0000000000002F94                 mov     rax, r8
.text:0000000000002F97                 sub     rax, rcx
.text:0000000000002F9A                 sub     r14, rax
.text:0000000000002F9D                 add     eax, ebp
.text:0000000000002F9F                 and     eax, 0FFFFFFF8h
.text:0000000000002FA2                 cmp     eax, 8
.text:0000000000002FA5                 jb      loc_2E66
.text:0000000000002FAB                 and     eax, 0FFFFFFF8h
.text:0000000000002FAE                 xor     edx, edx
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: human_readable+99F↓j
.text:0000000000002FB0                 mov     esi, edx
.text:0000000000002FB2                 add     edx, 8
.text:0000000000002FB5                 mov     rdi, [r14+rsi]
.text:0000000000002FB9                 cmp     edx, eax
.text:0000000000002FBB                 mov     [rcx+rsi], rdi
.text:0000000000002FBF                 jb      short loc_2FB0
.text:0000000000002FC1                 jmp     loc_2E66
.text:0000000000002FC6 ; ---------------------------------------------------------------------------
.text:0000000000002FC6
.text:0000000000002FC6 loc_2FC6:                               ; CODE XREF: human_readable+61E↑j
.text:0000000000002FC6                 mov     edx, [r14]
.text:0000000000002FC9                 mov     [r8], edx
.text:0000000000002FCC                 mov     edx, [r14+rax-4]
.text:0000000000002FD1                 mov     [r8+rax-4], edx
.text:0000000000002FD6                 jmp     loc_2C57
.text:0000000000002FDB ; ---------------------------------------------------------------------------
.text:0000000000002FDB
.text:0000000000002FDB loc_2FDB:                               ; CODE XREF: human_readable+423↑j
.text:0000000000002FDB                 call    ___stack_chk_fail
.text:0000000000002FE0 ; ---------------------------------------------------------------------------
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: human_readable+631↑j
.text:0000000000002FE0                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000002FE6                 mov     [r8+rax-2], dx
.text:0000000000002FEC                 jmp     loc_2C57
.text:0000000000002FF1 ; ---------------------------------------------------------------------------
.text:0000000000002FF1
.text:0000000000002FF1 loc_2FF1:                               ; CODE XREF: human_readable+91A↑j
.text:0000000000002FF1                 mov     edx, [r14]
.text:0000000000002FF4                 mov     [r8], edx
.text:0000000000002FF7                 mov     edx, [r14+rax-4]
.text:0000000000002FFC                 mov     [r8+rax-4], edx
.text:0000000000003001                 jmp     loc_2E66
.text:0000000000003006 ; ---------------------------------------------------------------------------
.text:0000000000003006
.text:0000000000003006 loc_3006:                               ; CODE XREF: human_readable+3B3↑j
.text:0000000000003006                 test    eax, eax
.text:0000000000003008                 mov     rdx, [rsp+0C8h+var_C0]
.text:000000000000300D                 jnz     loc_2A1B
.text:0000000000003013                 jmp     loc_2A27
.text:0000000000003018 ; ---------------------------------------------------------------------------
.text:0000000000003018
.text:0000000000003018 loc_3018:                               ; CODE XREF: human_readable+4E8↑j
.text:0000000000003018                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:000000000000301C                 mov     r15, rax
.text:000000000000301F                 mov     r12d, r14d
.text:0000000000003022                 jmp     loc_29AA
.text:0000000000003022 ; } // starts at 2620
.text:0000000000003022 human_readable  endp
.text:0000000000003022
.text:0000000000003022 ; ---------------------------------------------------------------------------
.text:0000000000003027                 align 10h
.text:0000000000003030
.text:0000000000003030 ; =============== S U B R O U T I N E =======================================
.text:0000000000003030
.text:0000000000003030 ; Attributes: info_from_lumina
.text:0000000000003030
.text:0000000000003030 ; strtol_error __fastcall human_options(const char *spec, int *opts, uintmax_t *block_size)
.text:0000000000003030                 public human_options
.text:0000000000003030 human_options   proc near
.text:0000000000003030
.text:0000000000003030 var_38          = qword ptr -38h
.text:0000000000003030 var_30          = qword ptr -30h
.text:0000000000003030
.text:0000000000003030 ; __unwind {
.text:0000000000003030                 push    r13
.text:0000000000003032                 push    r12
.text:0000000000003034                 mov     r13, rsi
.text:0000000000003037                 push    rbp
.text:0000000000003038                 push    rbx
.text:0000000000003039                 mov     r12, rdx
.text:000000000000303C                 mov     rbx, rdi
.text:000000000000303F                 sub     rsp, 18h
.text:0000000000003043                 mov     rax, fs:28h
.text:000000000000304C                 mov     [rsp+38h+var_30], rax
.text:0000000000003051                 xor     eax, eax
.text:0000000000003053                 test    rdi, rdi
.text:0000000000003056                 jz      loc_3170
.text:000000000000305C
.text:000000000000305C loc_305C:                               ; CODE XREF: human_options+152↓j
.text:000000000000305C                                         ; human_options+16A↓j
.text:000000000000305C                 xor     ebp, ebp
.text:000000000000305E                 cmp     byte ptr [rbx], 27h ; '''
.text:0000000000003061                 jnz     short loc_306C
.text:0000000000003063                 add     rbx, 1
.text:0000000000003067                 mov     ebp, 4
.text:000000000000306C
.text:000000000000306C loc_306C:                               ; CODE XREF: human_options+31↑j
.text:000000000000306C                 lea     rdx, block_size_opts
.text:0000000000003073                 lea     rsi, block_size_args
.text:000000000000307A                 mov     ecx, 4
.text:000000000000307F                 mov     rdi, rbx
.text:0000000000003082                 call    argmatch
.text:0000000000003087                 test    eax, eax
.text:0000000000003089                 js      short loc_30C8
.text:000000000000308B                 lea     rdx, block_size_opts
.text:0000000000003092                 cdqe
.text:0000000000003094                 mov     qword ptr [r12], 1
.text:000000000000309C                 or      ebp, [rdx+rax*4]
.text:000000000000309F                 xor     eax, eax
.text:00000000000030A1                 mov     [r13+0], ebp
.text:00000000000030A5
.text:00000000000030A5 loc_30A5:                               ; CODE XREF: human_options+107↓j
.text:00000000000030A5                                         ; human_options+134↓j ...
.text:00000000000030A5                 mov     rcx, [rsp+38h+var_30]
.text:00000000000030AA                 xor     rcx, fs:28h
.text:00000000000030B3                 jnz     loc_3211
.text:00000000000030B9                 add     rsp, 18h
.text:00000000000030BD                 pop     rbx
.text:00000000000030BE                 pop     rbp
.text:00000000000030BF                 pop     r12
.text:00000000000030C1                 pop     r13
.text:00000000000030C3                 retn
.text:00000000000030C3 ; ---------------------------------------------------------------------------
.text:00000000000030C4                 align 8
.text:00000000000030C8
.text:00000000000030C8 loc_30C8:                               ; CODE XREF: human_options+59↑j
.text:00000000000030C8                 lea     r8, aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:00000000000030CF                 xor     edx, edx
.text:00000000000030D1                 mov     rsi, rsp
.text:00000000000030D4                 mov     rcx, r12
.text:00000000000030D7                 mov     rdi, rbx        ; nptr
.text:00000000000030DA                 call    xstrtoumax
.text:00000000000030DF                 test    eax, eax
.text:00000000000030E1                 jnz     short loc_3128
.text:00000000000030E3                 movzx   esi, byte ptr [rbx]
.text:00000000000030E6                 lea     edx, [rsi-30h]
.text:00000000000030E9                 cmp     dl, 9
.text:00000000000030EC                 jbe     short loc_3118
.text:00000000000030EE                 mov     rcx, [rsp+38h+var_38]
.text:00000000000030F2                 cmp     rbx, rcx
.text:00000000000030F5                 jnz     short loc_3109
.text:00000000000030F7                 jmp     loc_31D0
.text:00000000000030F7 ; ---------------------------------------------------------------------------
.text:00000000000030FC                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: human_options+E6↓j
.text:0000000000003100                 cmp     rbx, rcx
.text:0000000000003103                 jz      loc_31D0
.text:0000000000003109
.text:0000000000003109 loc_3109:                               ; CODE XREF: human_options+C5↑j
.text:0000000000003109                 add     rbx, 1
.text:000000000000310D                 movzx   edi, byte ptr [rbx]
.text:0000000000003110                 lea     edx, [rdi-30h]
.text:0000000000003113                 cmp     dl, 9
.text:0000000000003116                 ja      short loc_3100
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: human_options+BC↑j
.text:0000000000003118                                         ; human_options+1AD↓j ...
.text:0000000000003118                 mov     rdx, [r12]
.text:000000000000311C                 mov     [r13+0], ebp
.text:0000000000003120                 jmp     short loc_3134
.text:0000000000003120 ; ---------------------------------------------------------------------------
.text:0000000000003122                 align 8
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: human_options+B1↑j
.text:0000000000003128                 mov     rdx, [r12]
.text:000000000000312C                 mov     dword ptr [r13+0], 0
.text:0000000000003134
.text:0000000000003134 loc_3134:                               ; CODE XREF: human_options+F0↑j
.text:0000000000003134                 test    rdx, rdx
.text:0000000000003137                 jnz     loc_30A5
.text:000000000000313D                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000003144                 call    _getenv
.text:0000000000003149                 cmp     rax, 1
.text:000000000000314D                 sbb     rax, rax
.text:0000000000003150                 and     eax, 200h
.text:0000000000003155                 add     rax, 200h
.text:000000000000315B                 mov     [r12], rax
.text:000000000000315F                 mov     eax, 4
.text:0000000000003164                 jmp     loc_30A5
.text:0000000000003164 ; ---------------------------------------------------------------------------
.text:0000000000003169                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: human_options+26↑j
.text:0000000000003170                 lea     rdi, aBlockSize ; "BLOCK_SIZE"
.text:0000000000003177                 call    _getenv
.text:000000000000317C                 test    rax, rax
.text:000000000000317F                 mov     rbx, rax
.text:0000000000003182                 jnz     loc_305C
.text:0000000000003188                 lea     rdi, aBlocksize ; "BLOCKSIZE"
.text:000000000000318F                 call    _getenv
.text:0000000000003194                 test    rax, rax
.text:0000000000003197                 mov     rbx, rax
.text:000000000000319A                 jnz     loc_305C
.text:00000000000031A0                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:00000000000031A7                 call    _getenv
.text:00000000000031AC                 test    rax, rax
.text:00000000000031AF                 jz      short loc_31FA
.text:00000000000031B1                 mov     qword ptr [r12], 200h
.text:00000000000031B9                 xor     eax, eax
.text:00000000000031BB                 mov     dword ptr [r13+0], 0
.text:00000000000031C3                 jmp     loc_30A5
.text:00000000000031C3 ; ---------------------------------------------------------------------------
.text:00000000000031C8                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: human_options+C7↑j
.text:00000000000031D0                                         ; human_options+D3↑j
.text:00000000000031D0                 cmp     byte ptr [rcx-1], 42h ; 'B'
.text:00000000000031D4                 jz      short loc_31E8
.text:00000000000031D6                 or      bpl, 80h
.text:00000000000031DA
.text:00000000000031DA loc_31DA:                               ; CODE XREF: human_options+1C8↓j
.text:00000000000031DA                 or      ebp, 20h
.text:00000000000031DD                 jmp     loc_3118
.text:00000000000031DD ; ---------------------------------------------------------------------------
.text:00000000000031E2                 align 8
.text:00000000000031E8
.text:00000000000031E8 loc_31E8:                               ; CODE XREF: human_options+1A4↑j
.text:00000000000031E8                 or      ebp, 180h
.text:00000000000031EE                 cmp     byte ptr [rcx-2], 69h ; 'i'
.text:00000000000031F2                 jnz     loc_3118
.text:00000000000031F8                 jmp     short loc_31DA
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FA
.text:00000000000031FA loc_31FA:                               ; CODE XREF: human_options+17F↑j
.text:00000000000031FA                 mov     qword ptr [r12], 400h
.text:0000000000003202                 xor     eax, eax
.text:0000000000003204                 mov     dword ptr [r13+0], 0
.text:000000000000320C                 jmp     loc_30A5
.text:0000000000003211 ; ---------------------------------------------------------------------------
.text:0000000000003211
.text:0000000000003211 loc_3211:                               ; CODE XREF: human_options+83↑j
.text:0000000000003211                 call    ___stack_chk_fail
.text:0000000000003211 ; } // starts at 3030
.text:0000000000003211 human_options   endp
.text:0000000000003211
.text:0000000000003211 ; ---------------------------------------------------------------------------
.text:0000000000003216                 align 20h
.text:0000000000003220
.text:0000000000003220 ; =============== S U B R O U T I N E =======================================
.text:0000000000003220
.text:0000000000003220
.text:0000000000003220                 public set_program_name
.text:0000000000003220 set_program_name proc near              ; CODE XREF: main+2E↑p
.text:0000000000003220 ; __unwind {
.text:0000000000003220                 test    rdi, rdi
.text:0000000000003223                 push    rbx
.text:0000000000003224                 jz      short loc_329D
.text:0000000000003226                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000322B                 mov     rbx, rdi
.text:000000000000322E                 call    _strrchr
.text:0000000000003233                 test    rax, rax
.text:0000000000003236                 jz      short loc_328D
.text:0000000000003238                 lea     r8, [rax+1]
.text:000000000000323C                 mov     rdx, r8
.text:000000000000323F                 sub     rdx, rbx
.text:0000000000003242                 cmp     rdx, 6
.text:0000000000003246                 jle     short loc_328D
.text:0000000000003248                 lea     rsi, [rax-6]
.text:000000000000324C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003253                 mov     ecx, 7
.text:0000000000003258                 repe cmpsb
.text:000000000000325A                 setnbe  dl
.text:000000000000325D                 sbb     dl, 0
.text:0000000000003260                 test    dl, dl
.text:0000000000003262                 jnz     short loc_328D
.text:0000000000003264                 lea     rdi, aLt        ; "lt-"
.text:000000000000326B                 mov     ecx, 3
.text:0000000000003270                 mov     rsi, r8
.text:0000000000003273                 mov     rbx, r8
.text:0000000000003276                 repe cmpsb
.text:0000000000003278                 setnbe  dl
.text:000000000000327B                 sbb     dl, 0
.text:000000000000327E                 test    dl, dl
.text:0000000000003280                 jnz     short loc_328D
.text:0000000000003282                 lea     rbx, [rax+4]
.text:0000000000003286                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000328D
.text:000000000000328D loc_328D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000328D                                         ; set_program_name+26↑j ...
.text:000000000000328D                 mov     cs:program_name, rbx
.text:0000000000003294                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000329B                 pop     rbx
.text:000000000000329C                 retn
.text:000000000000329D ; ---------------------------------------------------------------------------
.text:000000000000329D
.text:000000000000329D loc_329D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000329D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000032A4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000032AB                 mov     edx, 37h ; '7'  ; n
.text:00000000000032B0                 mov     esi, 1          ; size
.text:00000000000032B5                 call    _fwrite
.text:00000000000032BA                 call    _abort
.text:00000000000032BA ; } // starts at 3220
.text:00000000000032BA set_program_name endp
.text:00000000000032BA
.text:00000000000032BA ; ---------------------------------------------------------------------------
.text:00000000000032BF                 align 20h
.text:00000000000032C0
.text:00000000000032C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032C0
.text:00000000000032C0 ; Attributes: info_from_lumina
.text:00000000000032C0
.text:00000000000032C0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000032C0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000032C0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000032C0 ; __unwind {
.text:00000000000032C0                 push    rbp
.text:00000000000032C1                 push    rbx
.text:00000000000032C2                 mov     rbp, rdi
.text:00000000000032C5                 mov     ebx, esi
.text:00000000000032C7                 sub     rsp, 8
.text:00000000000032CB                 call    locale_charset
.text:00000000000032D0                 movzx   edx, byte ptr [rax]
.text:00000000000032D3                 and     edx, 0FFFFFFDFh
.text:00000000000032D6                 cmp     dl, 55h ; 'U'
.text:00000000000032D9                 jz      short loc_3350
.text:00000000000032DB                 cmp     dl, 47h ; 'G'
.text:00000000000032DE                 jz      short loc_3300
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000032E0                                         ; gettext_quote+50↓j ...
.text:00000000000032E0                 lea     rax, unk_67C3
.text:00000000000032E7                 lea     rdx, asc_67C5   ; "'"
.text:00000000000032EE                 cmp     ebx, 9
.text:00000000000032F1                 cmovnz  rax, rdx
.text:00000000000032F5                 add     rsp, 8
.text:00000000000032F9                 pop     rbx
.text:00000000000032FA                 pop     rbp
.text:00000000000032FB                 retn
.text:00000000000032FB ; ---------------------------------------------------------------------------
.text:00000000000032FC                 align 20h
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003300                 movzx   edx, byte ptr [rax+1]
.text:0000000000003304                 and     edx, 0FFFFFFDFh
.text:0000000000003307                 cmp     dl, 42h ; 'B'
.text:000000000000330A                 jnz     short loc_32E0
.text:000000000000330C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003310                 jnz     short loc_32E0
.text:0000000000003312                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003316                 jnz     short loc_32E0
.text:0000000000003318                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000331C                 jnz     short loc_32E0
.text:000000000000331E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003322                 jnz     short loc_32E0
.text:0000000000003324                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003328                 jnz     short loc_32E0
.text:000000000000332A                 cmp     byte ptr [rax+7], 0
.text:000000000000332E                 jnz     short loc_32E0
.text:0000000000003330                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003334                 lea     rax, unk_67BC
.text:000000000000333B                 lea     rdx, unk_67C0
.text:0000000000003342                 cmovnz  rax, rdx
.text:0000000000003346                 add     rsp, 8
.text:000000000000334A                 pop     rbx
.text:000000000000334B                 pop     rbp
.text:000000000000334C                 retn
.text:000000000000334C ; ---------------------------------------------------------------------------
.text:000000000000334D                 align 10h
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003350                 movzx   edx, byte ptr [rax+1]
.text:0000000000003354                 and     edx, 0FFFFFFDFh
.text:0000000000003357                 cmp     dl, 54h ; 'T'
.text:000000000000335A                 jnz     short loc_32E0
.text:000000000000335C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003360                 and     edx, 0FFFFFFDFh
.text:0000000000003363                 cmp     dl, 46h ; 'F'
.text:0000000000003366                 jnz     loc_32E0
.text:000000000000336C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003370                 jnz     loc_32E0
.text:0000000000003376                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000337A                 jnz     loc_32E0
.text:0000000000003380                 cmp     byte ptr [rax+5], 0
.text:0000000000003384                 jnz     loc_32E0
.text:000000000000338A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000338E                 lea     rax, unk_67B4
.text:0000000000003395                 lea     rdx, unk_67B8
.text:000000000000339C                 cmovnz  rax, rdx
.text:00000000000033A0                 add     rsp, 8
.text:00000000000033A4                 pop     rbx
.text:00000000000033A5                 pop     rbp
.text:00000000000033A6                 retn
.text:00000000000033A6 ; } // starts at 32C0
.text:00000000000033A6 gettext_quote   endp
.text:00000000000033A6
.text:00000000000033A6 ; ---------------------------------------------------------------------------
.text:00000000000033A7                 align 10h
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0 ; Attributes: info_from_lumina
.text:00000000000033B0
.text:00000000000033B0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000033B0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000033B0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000033B0
.text:00000000000033B0 var_E0          = dword ptr -0E0h
.text:00000000000033B0 var_DB          = byte ptr -0DBh
.text:00000000000033B0 var_DA          = byte ptr -0DAh
.text:00000000000033B0 var_D9          = byte ptr -0D9h
.text:00000000000033B0 s               = qword ptr -0D8h
.text:00000000000033B0 n               = qword ptr -0D0h
.text:00000000000033B0 var_C8          = qword ptr -0C8h
.text:00000000000033B0 ps              = qword ptr -0C0h
.text:00000000000033B0 var_B8          = qword ptr -0B8h
.text:00000000000033B0 var_B0          = qword ptr -0B0h
.text:00000000000033B0 var_A8          = qword ptr -0A8h
.text:00000000000033B0 s2              = qword ptr -0A0h
.text:00000000000033B0 var_98          = qword ptr -98h
.text:00000000000033B0 var_90          = qword ptr -90h
.text:00000000000033B0 var_88          = qword ptr -88h
.text:00000000000033B0 var_80          = qword ptr -80h
.text:00000000000033B0 var_78          = qword ptr -78h
.text:00000000000033B0 var_70          = dword ptr -70h
.text:00000000000033B0 var_6C          = byte ptr -6Ch
.text:00000000000033B0 var_6B          = byte ptr -6Bh
.text:00000000000033B0 var_6A          = byte ptr -6Ah
.text:00000000000033B0 var_69          = byte ptr -69h
.text:00000000000033B0 var_68          = qword ptr -68h
.text:00000000000033B0 var_60          = qword ptr -60h
.text:00000000000033B0 wc              = dword ptr -4Ch
.text:00000000000033B0 var_48          = qword ptr -48h
.text:00000000000033B0 var_40          = qword ptr -40h
.text:00000000000033B0 arg_0           = qword ptr  8
.text:00000000000033B0 arg_8           = qword ptr  10h
.text:00000000000033B0 arg_10          = qword ptr  18h
.text:00000000000033B0
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 push    r15
.text:00000000000033B2                 push    r14
.text:00000000000033B4                 mov     r15d, r8d
.text:00000000000033B7                 push    r13
.text:00000000000033B9                 push    r12
.text:00000000000033BB                 mov     r14, rdi
.text:00000000000033BE                 push    rbp
.text:00000000000033BF                 push    rbx
.text:00000000000033C0                 mov     ebx, r9d
.text:00000000000033C3                 mov     r13, rsi
.text:00000000000033C6                 mov     rbp, rcx
.text:00000000000033C9                 and     ebx, 2
.text:00000000000033CC                 sub     rsp, 0B8h
.text:00000000000033D3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000033DB                 mov     [rsp+0E8h+s], rdx
.text:00000000000033E0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000033E5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000033EA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000033EF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000033F7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000033FC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003404                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003409                 mov     rax, fs:28h
.text:0000000000003412                 mov     [rsp+0E8h+var_40], rax
.text:000000000000341A                 xor     eax, eax
.text:000000000000341C                 call    ___ctype_get_mb_cur_max
.text:0000000000003421                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003425                 mov     [rsp+0E8h+var_90], rax
.text:000000000000342A                 ja      def_3441        ; jumptable 00000000000121F1 default case
.text:0000000000003430                 lea     rcx, jpt_3441
.text:0000000000003437                 mov     edx, r15d
.text:000000000000343A                 movsxd  rax, ds:(jpt_3441 - 6820h)[rcx+rdx*4]
.text:000000000000343E                 add     rax, rcx
.text:0000000000003441                 jmp     rax             ; switch jump
.text:0000000000003443 ; ---------------------------------------------------------------------------
.text:0000000000003443
.text:0000000000003443 loc_3443:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003443                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003443                                         ; DATA XREF: ...
.text:0000000000003443                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003448                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000344D                 xor     r12d, r12d
.text:0000000000003450                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003459                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000345E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003463
.text:0000000000003463 loc_3463:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003463                 lea     rax, asc_67C5   ; "'"
.text:000000000000346A                 mov     [rsp+0E8h+n], 1
.text:0000000000003473                 xor     r15d, r15d
.text:0000000000003476                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000347E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003483
.text:0000000000003483 loc_3483:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003483                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003483                 xor     r11d, r11d
.text:0000000000003486                 mov     rax, rbp
.text:0000000000003489                 mov     r8d, r12d
.text:000000000000348C                 mov     rbp, r11
.text:000000000000348F                 mov     r11, rax
.text:0000000000003492                 nop     word ptr [rax+rax+00h]
.text:0000000000003498
.text:0000000000003498 loc_3498:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003498                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003498                 cmp     r11, rbp
.text:000000000000349B                 setnz   r12b
.text:000000000000349F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034A3                 jnz     short loc_34B2
.text:00000000000034A5                 mov     rax, [rsp+0E8h+s]
.text:00000000000034AA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000034AE                 setnz   r12b
.text:00000000000034B2
.text:00000000000034B2 loc_34B2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000034B2                 test    r12b, r12b
.text:00000000000034B5                 jz      loc_3B10
.text:00000000000034BB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034C0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000034C5                 lea     r9, [rdi+rbp]
.text:00000000000034C9                 setnz   al
.text:00000000000034CC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000034D0                 mov     r10d, eax
.text:00000000000034D3                 jz      loc_3580
.text:00000000000034D9                 mov     rax, [rsp+0E8h+n]
.text:00000000000034DE                 test    rax, rax
.text:00000000000034E1                 jz      loc_3910
.text:00000000000034E7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034EB                 lea     rbx, [rbp+rax+0]
.text:00000000000034F0                 jnz     short loc_3520
.text:00000000000034F2                 cmp     rax, 1
.text:00000000000034F6                 jbe     short loc_3520
.text:00000000000034F8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000034FD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003502                 mov     [rsp+0E8h+ps], r9
.text:0000000000003507                 call    _strlen
.text:000000000000350C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003512                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003518                 mov     r11, rax
.text:000000000000351B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003520                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003520                 cmp     rbx, r11
.text:0000000000003523                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003528                 ja      loc_3AE0
.text:000000000000352E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003533                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003538                 mov     rdi, r9         ; s1
.text:000000000000353B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003540                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003545                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000354A                 call    _memcmp
.text:000000000000354F                 test    eax, eax
.text:0000000000003551                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003556                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000355C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003561                 jnz     loc_3AE0
.text:0000000000003567                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000356C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003572                 jnz     loc_44F5
.text:0000000000003578                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003580                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003580                 movzx   ebx, byte ptr [r9]
.text:0000000000003584                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003587                 ja      def_359E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000358D                 lea     rcx, jpt_359E
.text:0000000000003594                 movzx   edx, bl
.text:0000000000003597                 movsxd  rax, ds:(jpt_359E - 684Ch)[rcx+rdx*4]
.text:000000000000359B                 add     rax, rcx
.text:000000000000359E                 jmp     rax             ; switch jump
.text:00000000000035A0 ; ---------------------------------------------------------------------------
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035A0                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:00000000000035A0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000035A3
.text:00000000000035A3 loc_35A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035A3                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:00000000000035A3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000035A7                 setnz   al
.text:00000000000035AA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000035AE                 jnz     short loc_35BC
.text:00000000000035B0                 mov     rax, [rsp+0E8h+s]
.text:00000000000035B5                 cmp     byte ptr [rax+1], 0
.text:00000000000035B9                 setnz   al
.text:00000000000035BC
.text:00000000000035BC loc_35BC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000035BC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035C1                 setz    dl
.text:00000000000035C4                 test    al, al
.text:00000000000035C6                 jz      loc_3818
.text:00000000000035CC
.text:00000000000035CC loc_35CC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000035CC                 xor     r12d, r12d
.text:00000000000035CF                 xor     eax, eax
.text:00000000000035D1                 nop     dword ptr [rax+00000000h]
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000035D8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000035D8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000035DD                 jnz     loc_36F2
.text:00000000000035E3                 test    dl, dl
.text:00000000000035E5                 jnz     loc_36F2
.text:00000000000035EB
.text:00000000000035EB loc_35EB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000035EB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000035F0                 test    rsi, rsi
.text:00000000000035F3                 jz      short loc_3609
.text:00000000000035F5                 mov     edx, ebx
.text:00000000000035F7                 shr     dl, 5
.text:00000000000035FA                 movzx   edx, dl
.text:00000000000035FD                 mov     edx, [rsi+rdx*4]
.text:0000000000003600                 bt      edx, ebx
.text:0000000000003603                 jb      loc_3753
.text:0000000000003609
.text:0000000000003609 loc_3609:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003609                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003609                 test    r10b, r10b
.text:000000000000360C                 jnz     loc_3753
.text:0000000000003612                 xor     eax, 1
.text:0000000000003615                 add     rbp, 1
.text:0000000000003619                 and     eax, r8d
.text:000000000000361C
.text:000000000000361C loc_361C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000361C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000361C                 test    al, al
.text:000000000000361E                 jz      short loc_3640
.text:0000000000003620                 cmp     r13, r15
.text:0000000000003623                 jbe     short loc_362A
.text:0000000000003625                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000362A
.text:000000000000362A loc_362A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000362A                 lea     rax, [r15+1]
.text:000000000000362E                 cmp     r13, rax
.text:0000000000003631                 jbe     short loc_3639
.text:0000000000003633                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003639
.text:0000000000003639 loc_3639:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003639                 add     r15, 2
.text:000000000000363D                 xor     r8d, r8d
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003640                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003640                 cmp     r15, r13
.text:0000000000003643                 jnb     short loc_3649
.text:0000000000003645                 mov     [r14+r15], bl
.text:0000000000003649
.text:0000000000003649 loc_3649:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003649                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000364E                 add     r15, 1
.text:0000000000003652                 mov     eax, 0
.text:0000000000003657                 test    r12b, r12b
.text:000000000000365A                 cmovz   edi, eax
.text:000000000000365D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003662                 jmp     loc_3498
.text:0000000000003662 ; ---------------------------------------------------------------------------
.text:0000000000003667                 align 10h
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003670                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003670                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003673
.text:0000000000003673 loc_3673:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003673                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003673                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003677                 cmp     eax, 2
.text:000000000000367A                 jz      loc_3C38
.text:0000000000003680                 cmp     eax, 5
.text:0000000000003683                 jz      loc_3BF8
.text:0000000000003689                 cmp     eax, 2
.text:000000000000368C                 mov     ebx, 3Fh ; '?'
.text:0000000000003691                 setz    dl
.text:0000000000003694                 xor     r12d, r12d
.text:0000000000003697                 xor     eax, eax
.text:0000000000003699                 jmp     loc_35D8
.text:0000000000003699 ; ---------------------------------------------------------------------------
.text:000000000000369E                 align 20h
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000036A0                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:00000000000036A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000036A3
.text:00000000000036A3 loc_36A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000036A3                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:00000000000036A3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000036A8                 jz      loc_3BB0
.text:00000000000036AE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000036B3                 xor     edx, edx
.text:00000000000036B5                 xor     eax, eax
.text:00000000000036B7                 mov     ebx, 27h ; '''
.text:00000000000036BC                 jmp     loc_35D8
.text:00000000000036BC ; ---------------------------------------------------------------------------
.text:00000000000036C1                 align 8
.text:00000000000036C8
.text:00000000000036C8 loc_36C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000036C8                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:00000000000036C8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000036CD                 mov     ebx, 74h ; 't'
.text:00000000000036D2
.text:00000000000036D2 loc_36D2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000036D2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000036D2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036D7                 setz    al
.text:00000000000036DA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000036DE                 jnz     loc_382E
.text:00000000000036E4
.text:00000000000036E4 loc_36E4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000036E4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000036E4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000036E9                 jnz     short loc_3750
.text:00000000000036EB
.text:00000000000036EB loc_36EB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000036EB                 mov     ebx, edx
.text:00000000000036ED                 xor     r12d, r12d
.text:00000000000036F0                 xor     eax, eax
.text:00000000000036F2
.text:00000000000036F2 loc_36F2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000036F2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000036F2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036F7                 jnz     loc_35EB
.text:00000000000036FD                 jmp     loc_3609
.text:00000000000036FD ; ---------------------------------------------------------------------------
.text:0000000000003702                 align 8
.text:0000000000003708
.text:0000000000003708 loc_3708:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003708                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003708                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000370D                 mov     ebx, 62h ; 'b'
.text:0000000000003712                 jmp     short loc_36E4
.text:0000000000003712 ; ---------------------------------------------------------------------------
.text:0000000000003714                 align 8
.text:0000000000003718
.text:0000000000003718 loc_3718:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003718                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003718                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000371D                 jz      loc_3AF0
.text:0000000000003723                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003728                 jz      loc_3940
.text:000000000000372E
.text:000000000000372E loc_372E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000372E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003733                 jz      loc_3940
.text:0000000000003739                 cmp     [rsp+0E8h+n], 0
.text:000000000000373F                 jnz     loc_3AFB
.text:0000000000003745                 mov     ebx, 5Ch ; '\'
.text:000000000000374A                 nop     word ptr [rax+rax+00h]
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003750                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003750                 xor     r12d, r12d
.text:0000000000003753
.text:0000000000003753 loc_3753:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003753                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003753                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003758                 setz    dl
.text:000000000000375B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003760                 mov     eax, edx
.text:0000000000003762                 jnz     loc_3FB8
.text:0000000000003768                 mov     eax, r8d
.text:000000000000376B                 xor     eax, 1
.text:000000000000376E                 and     al, dl
.text:0000000000003770                 jz      short loc_37A1
.text:0000000000003772                 cmp     r13, r15
.text:0000000000003775                 jbe     short loc_377C
.text:0000000000003777                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000377C
.text:000000000000377C loc_377C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000377C                 lea     rdx, [r15+1]
.text:0000000000003780                 cmp     r13, rdx
.text:0000000000003783                 jbe     short loc_378B
.text:0000000000003785                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000378B
.text:000000000000378B loc_378B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000378B                 lea     rdx, [r15+2]
.text:000000000000378F                 cmp     r13, rdx
.text:0000000000003792                 jbe     short loc_379A
.text:0000000000003794                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000379A
.text:000000000000379A loc_379A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000379A                 add     r15, 3
.text:000000000000379E                 mov     r8d, eax
.text:00000000000037A1
.text:00000000000037A1 loc_37A1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000037A1                 cmp     r13, r15
.text:00000000000037A4                 jbe     short loc_37AB
.text:00000000000037A6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000037AB
.text:00000000000037AB loc_37AB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000037AB                 add     r15, 1
.text:00000000000037AF                 add     rbp, 1
.text:00000000000037B3                 jmp     loc_3640
.text:00000000000037B3 ; ---------------------------------------------------------------------------
.text:00000000000037B8                 align 20h
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037C0                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:00000000000037C0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000037C5                 jnz     loc_3993
.text:00000000000037CB                 xor     edx, edx
.text:00000000000037CD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000037D2                 jz      loc_36EB
.text:00000000000037D8                 add     rbp, 1
.text:00000000000037DC                 jmp     loc_3498
.text:00000000000037DC ; ---------------------------------------------------------------------------
.text:00000000000037E1                 align 8
.text:00000000000037E8
.text:00000000000037E8 loc_37E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037E8                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:00000000000037E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000037ED                 setz    dl
.text:00000000000037F0                 xor     eax, eax
.text:00000000000037F2                 jmp     loc_35D8
.text:00000000000037F2 ; ---------------------------------------------------------------------------
.text:00000000000037F7                 align 20h
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003800                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003800                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003805                 mov     ebx, 61h ; 'a'
.text:000000000000380A                 jmp     loc_36E4
.text:000000000000380A ; ---------------------------------------------------------------------------
.text:000000000000380F                 align 10h
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003810                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003810                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003815                 setz    dl
.text:0000000000003818
.text:0000000000003818 loc_3818:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003818                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003818                 test    rbp, rbp
.text:000000000000381B                 jnz     loc_35CC
.text:0000000000003821
.text:0000000000003821 loc_3821:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003821                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003821                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003826                 and     al, dl
.text:0000000000003828                 jz      loc_35D8
.text:000000000000382E
.text:000000000000382E loc_382E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000382E                 mov     rbp, r11
.text:0000000000003831                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003839                 jmp     loc_3F39
.text:0000000000003839 ; ---------------------------------------------------------------------------
.text:000000000000383E                 align 20h
.text:0000000000003840
.text:0000000000003840 loc_3840:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003840                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003840                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003845                 setz    dl
.text:0000000000003848                 xor     r12d, r12d
.text:000000000000384B                 jmp     short loc_3821
.text:000000000000384B ; ---------------------------------------------------------------------------
.text:000000000000384D                 align 10h
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003850                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003850                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003855                 mov     ebx, 20h ; ' '
.text:000000000000385A                 setz    dl
.text:000000000000385D                 jmp     short loc_3821
.text:000000000000385D ; ---------------------------------------------------------------------------
.text:000000000000385F                 align 20h
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003860                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003860                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003865                 mov     ebx, 72h ; 'r'
.text:000000000000386A                 jmp     loc_36D2
.text:000000000000386A ; ---------------------------------------------------------------------------
.text:000000000000386F                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003870                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003870                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003875                 mov     ebx, 66h ; 'f'
.text:000000000000387A                 jmp     loc_36E4
.text:000000000000387A ; ---------------------------------------------------------------------------
.text:000000000000387F                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003880                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003880                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003885                 mov     ebx, 76h ; 'v'
.text:000000000000388A                 jmp     loc_36E4
.text:000000000000388A ; ---------------------------------------------------------------------------
.text:000000000000388F                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003890                                         ; DATA XREF: .rodata:jpt_359E↓o
.text:0000000000003890                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003895                 mov     ebx, 6Eh ; 'n'
.text:000000000000389A                 jmp     loc_36D2
.text:000000000000389A ; ---------------------------------------------------------------------------
.text:000000000000389F                 align 20h
.text:00000000000038A0
.text:00000000000038A0 def_392A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000038A0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000038A0                                         ; DATA XREF: ...
.text:00000000000038A0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000038A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000038A8
.text:00000000000038A8 def_359E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000038A8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000038A8                                         ; DATA XREF: ...
.text:00000000000038A8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000038AE                 jnz     loc_3C58
.text:00000000000038B4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000038B9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000038BE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000038C3                 call    ___ctype_b_loc
.text:00000000000038C8                 mov     rcx, [rax]
.text:00000000000038CB                 movzx   edx, bl
.text:00000000000038CE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000038D4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000038DA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000038DF                 mov     edi, 1
.text:00000000000038E4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000038E8                 and     ax, 4000h
.text:00000000000038EC                 setnz   r12b
.text:00000000000038F0                 setz    al
.text:00000000000038F3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000038F7
.text:00000000000038F7 loc_38F7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000038F7                 test    al, al
.text:00000000000038F9                 jnz     loc_4291
.text:00000000000038FF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003904                 setz    dl
.text:0000000000003907                 jmp     loc_35D8
.text:0000000000003907 ; ---------------------------------------------------------------------------
.text:000000000000390C                 align 10h
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003910                 movzx   ebx, byte ptr [r9]
.text:0000000000003914                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003917                 ja      short def_392A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003919                 lea     rcx, jpt_392A
.text:0000000000003920                 movzx   edx, bl
.text:0000000000003923                 movsxd  rax, ds:(jpt_392A - 6A48h)[rcx+rdx*4]
.text:0000000000003927                 add     rax, rcx
.text:000000000000392A                 jmp     rax             ; switch jump
.text:000000000000392A ; ---------------------------------------------------------------------------
.text:000000000000392C                 align 10h
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003930                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003930                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003933                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003938                 jnz     loc_372E
.text:000000000000393E                 xchg    ax, ax
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003940                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003940                 mov     edx, 5Ch ; '\'
.text:0000000000003945                 mov     ebx, 5Ch ; '\'
.text:000000000000394A                 jmp     loc_36E4
.text:000000000000394A ; ---------------------------------------------------------------------------
.text:000000000000394F                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003950                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003950                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003955                 xor     r10d, r10d
.text:0000000000003958                 mov     ebx, 66h ; 'f'
.text:000000000000395D                 jmp     loc_36E4
.text:000000000000395D ; ---------------------------------------------------------------------------
.text:0000000000003962                 align 8
.text:0000000000003968
.text:0000000000003968 loc_3968:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003968                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003968                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000396D                 xor     r10d, r10d
.text:0000000000003970                 mov     ebx, 6Eh ; 'n'
.text:0000000000003975                 jmp     loc_36D2
.text:0000000000003975 ; ---------------------------------------------------------------------------
.text:000000000000397A                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003980                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003980                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003985                 jmp     loc_3750
.text:0000000000003985 ; ---------------------------------------------------------------------------
.text:000000000000398A                 align 10h
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003990                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003990                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003993
.text:0000000000003993 loc_3993:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003993                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003998                 setz    dl
.text:000000000000399B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000039A0                 jnz     loc_453A
.text:00000000000039A6                 mov     eax, r8d
.text:00000000000039A9                 mov     rcx, r15
.text:00000000000039AC                 xor     eax, 1
.text:00000000000039AF                 and     al, dl
.text:00000000000039B1                 jz      short loc_39E0
.text:00000000000039B3                 cmp     r13, r15
.text:00000000000039B6                 jbe     short loc_39BD
.text:00000000000039B8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000039BD
.text:00000000000039BD loc_39BD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000039BD                 lea     rcx, [r15+1]
.text:00000000000039C1                 cmp     r13, rcx
.text:00000000000039C4                 jbe     short loc_39CC
.text:00000000000039C6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000039CC
.text:00000000000039CC loc_39CC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000039CC                 lea     rcx, [r15+2]
.text:00000000000039D0                 cmp     r13, rcx
.text:00000000000039D3                 ja      loc_4009
.text:00000000000039D9
.text:00000000000039D9 loc_39D9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000039D9                 lea     rcx, [r15+3]
.text:00000000000039DD                 mov     r8d, eax
.text:00000000000039E0
.text:00000000000039E0 loc_39E0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000039E0                 cmp     r13, rcx
.text:00000000000039E3                 jbe     short loc_39EA
.text:00000000000039E5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000039EA
.text:00000000000039EA loc_39EA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000039EA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039EF                 lea     r15, [rcx+1]
.text:00000000000039F3                 jz      loc_3FF9
.text:00000000000039F9                 lea     rax, [rbp+1]
.text:00000000000039FD                 cmp     rax, r11
.text:0000000000003A00                 jnb     short loc_3A1B
.text:0000000000003A02                 mov     rax, [rsp+0E8h+s]
.text:0000000000003A07                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003A0C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003A10                 sub     eax, 30h ; '0'
.text:0000000000003A13                 cmp     al, 9
.text:0000000000003A15                 jbe     loc_4249
.text:0000000000003A1B
.text:0000000000003A1B loc_3A1B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003A1B                 mov     eax, r12d
.text:0000000000003A1E                 mov     ebx, 30h ; '0'
.text:0000000000003A23                 xor     r12d, r12d
.text:0000000000003A26                 jmp     loc_35D8
.text:0000000000003A26 ; ---------------------------------------------------------------------------
.text:0000000000003A2B                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A30                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003A30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003A35                 mov     r12d, r10d
.text:0000000000003A38                 setz    dl
.text:0000000000003A3B                 xor     r10d, r10d
.text:0000000000003A3E                 xor     eax, eax
.text:0000000000003A40                 jmp     loc_35D8
.text:0000000000003A40 ; ---------------------------------------------------------------------------
.text:0000000000003A45                 align 8
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A48                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003A48                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003A4D                 setz    dl
.text:0000000000003A50                 xor     r10d, r10d
.text:0000000000003A53                 jmp     loc_3818
.text:0000000000003A53 ; ---------------------------------------------------------------------------
.text:0000000000003A58                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A60                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003A60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003A65                 setz    dl
.text:0000000000003A68                 xor     r10d, r10d
.text:0000000000003A6B                 xor     r12d, r12d
.text:0000000000003A6E                 jmp     loc_3821
.text:0000000000003A6E ; ---------------------------------------------------------------------------
.text:0000000000003A73                 align 8
.text:0000000000003A78
.text:0000000000003A78 loc_3A78:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A78                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003A78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003A7D                 mov     r12d, r10d
.text:0000000000003A80                 mov     ebx, 20h ; ' '
.text:0000000000003A85                 setz    dl
.text:0000000000003A88                 xor     r10d, r10d
.text:0000000000003A8B                 jmp     loc_3821
.text:0000000000003A90 ; ---------------------------------------------------------------------------
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A90                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003A90                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003A95                 xor     r10d, r10d
.text:0000000000003A98                 mov     ebx, 72h ; 'r'
.text:0000000000003A9D                 jmp     loc_36D2
.text:0000000000003A9D ; ---------------------------------------------------------------------------
.text:0000000000003AA2                 align 8
.text:0000000000003AA8
.text:0000000000003AA8 loc_3AA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AA8                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003AA8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003AAD                 jmp     loc_3750
.text:0000000000003AAD ; ---------------------------------------------------------------------------
.text:0000000000003AB2                 align 8
.text:0000000000003AB8
.text:0000000000003AB8 loc_3AB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AB8                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003AB8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003ABD                 xor     r10d, r10d
.text:0000000000003AC0                 mov     ebx, 74h ; 't'
.text:0000000000003AC5                 jmp     loc_36D2
.text:0000000000003AC5 ; ---------------------------------------------------------------------------
.text:0000000000003ACA                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AD0                                         ; DATA XREF: .rodata:jpt_392A↓o
.text:0000000000003AD0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003AD5                 jmp     loc_3750
.text:0000000000003AD5 ; ---------------------------------------------------------------------------
.text:0000000000003ADA                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003AE0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003AE0                 xor     r10d, r10d
.text:0000000000003AE3                 jmp     loc_3580
.text:0000000000003AE3 ; ---------------------------------------------------------------------------
.text:0000000000003AE8                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003AF0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003AF5                 jnz     loc_4460
.text:0000000000003AFB
.text:0000000000003AFB loc_3AFB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003AFB                 add     rbp, 1
.text:0000000000003AFF                 mov     eax, r8d
.text:0000000000003B02                 xor     r12d, r12d
.text:0000000000003B05                 mov     ebx, 5Ch ; '\'
.text:0000000000003B0A                 jmp     loc_361C
.text:0000000000003B0A ; ---------------------------------------------------------------------------
.text:0000000000003B0F                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003B10                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B15                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B1A                 mov     r12d, r8d
.text:0000000000003B1D                 mov     rbp, r11
.text:0000000000003B20                 setz    dl
.text:0000000000003B23                 mov     eax, ebx
.text:0000000000003B25                 test    r15, r15
.text:0000000000003B28                 setz    cl
.text:0000000000003B2B                 and     eax, edx
.text:0000000000003B2D                 and     al, cl
.text:0000000000003B2F                 jnz     loc_4596
.text:0000000000003B35                 mov     eax, ebx
.text:0000000000003B37                 xor     eax, 1
.text:0000000000003B3A                 and     dl, al
.text:0000000000003B3C                 jz      loc_44AC
.text:0000000000003B42                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003B47                 jz      loc_44AA
.text:0000000000003B4D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003B52                 jnz     loc_454D
.text:0000000000003B58                 test    r13, r13
.text:0000000000003B5B                 setz    al
.text:0000000000003B5E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003B64                 setnz   dl
.text:0000000000003B67                 and     al, dl
.text:0000000000003B69                 jz      loc_458C
.text:0000000000003B6F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003B74
.text:0000000000003B74 loc_3B74:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003B74                 lea     rbx, asc_67C5   ; "'"
.text:0000000000003B7B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003B7F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B87                 mov     r15d, 1
.text:0000000000003B8D                 mov     [rsp+0E8h+n], 1
.text:0000000000003B96                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003B9B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003BA0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003BA4                 jmp     loc_3483
.text:0000000000003BA4 ; ---------------------------------------------------------------------------
.text:0000000000003BA9                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003BB0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003BB5                 jnz     loc_4460
.text:0000000000003BBB                 test    r13, r13
.text:0000000000003BBE                 jz      loc_3FC0
.text:0000000000003BC4                 xor     edx, edx
.text:0000000000003BC6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003BCC                 jnz     loc_3FC0
.text:0000000000003BD2
.text:0000000000003BD2 loc_3BD2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003BD2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003BD2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003BD7                 add     r15, 3
.text:0000000000003BDB                 xor     eax, eax
.text:0000000000003BDD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003BE2                 xor     r8d, r8d
.text:0000000000003BE5                 mov     r13, rdx
.text:0000000000003BE8                 mov     ebx, 27h ; '''
.text:0000000000003BED                 jmp     loc_3609
.text:0000000000003BED ; ---------------------------------------------------------------------------
.text:0000000000003BF2                 align 8
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003BF8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003BFD                 jz      short loc_3C20
.text:0000000000003BFF                 lea     rcx, [rbp+2]
.text:0000000000003C03                 cmp     rcx, r11
.text:0000000000003C06                 jnb     short loc_3C20
.text:0000000000003C08                 mov     rax, [rsp+0E8h+s]
.text:0000000000003C0D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003C12                 jz      loc_43A2
.text:0000000000003C18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003C20                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003C20                 xor     edx, edx
.text:0000000000003C22                 xor     r12d, r12d
.text:0000000000003C25                 xor     eax, eax
.text:0000000000003C27                 mov     ebx, 3Fh ; '?'
.text:0000000000003C2C                 jmp     loc_35D8
.text:0000000000003C2C ; ---------------------------------------------------------------------------
.text:0000000000003C31                 align 8
.text:0000000000003C38
.text:0000000000003C38 loc_3C38:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003C38                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C3D                 jnz     loc_4460
.text:0000000000003C43                 xor     r12d, r12d
.text:0000000000003C46                 xor     eax, eax
.text:0000000000003C48                 mov     ebx, 3Fh ; '?'
.text:0000000000003C4D                 jmp     loc_3609
.text:0000000000003C4D ; ---------------------------------------------------------------------------
.text:0000000000003C52                 align 8
.text:0000000000003C58
.text:0000000000003C58 loc_3C58:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003C58                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003C60                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C64                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003C70                 mov     [rsp+0E8h+ps], rax
.text:0000000000003C75                 jnz     short loc_3CA4
.text:0000000000003C77                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003C7C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003C81                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003C86                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003C8B                 call    _strlen
.text:0000000000003C90                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003C96                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003C9C                 mov     r11, rax
.text:0000000000003C9F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003CA4
.text:0000000000003CA4 loc_3CA4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003CA4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003CAC                 xor     ecx, ecx
.text:0000000000003CAE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003CB2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003CB7                 mov     rbx, rcx
.text:0000000000003CBA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003CC2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003CC7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003CCC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003CD4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003CD9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003CDE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003CE3
.text:0000000000003CE3 loc_3CE3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003CE3                 mov     rax, [rsp+0E8h+s]
.text:0000000000003CE8                 lea     r14, [rbp+rbx+0]
.text:0000000000003CED                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003CF2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003CF7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003CFC                 lea     r13, [rax+r14]
.text:0000000000003D00                 sub     rdx, r14
.text:0000000000003D03                 mov     rsi, r13
.text:0000000000003D06                 call    rpl_mbrtowc
.text:0000000000003D0B                 test    rax, rax
.text:0000000000003D0E                 mov     r15, rax
.text:0000000000003D11                 jz      short loc_3D61
.text:0000000000003D13                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D17                 jz      loc_4335
.text:0000000000003D1D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003D21                 jz      loc_42C1
.text:0000000000003D27                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D2C                 setz    al
.text:0000000000003D2F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003D33                 jnz     loc_3ED0
.text:0000000000003D39
.text:0000000000003D39 loc_3D39:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003D39                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003D39                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003D40                 call    _iswprint
.text:0000000000003D45                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003D4A                 test    eax, eax
.text:0000000000003D4C                 mov     eax, 0
.text:0000000000003D51                 cmovz   r12d, eax
.text:0000000000003D55                 add     rbx, r15
.text:0000000000003D58                 call    _mbsinit
.text:0000000000003D5D                 test    eax, eax
.text:0000000000003D5F                 jz      short loc_3CE3
.text:0000000000003D61
.text:0000000000003D61 loc_3D61:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003D61                 mov     edx, r12d
.text:0000000000003D64                 mov     rdi, rbx
.text:0000000000003D67                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003D6D                 xor     edx, 1
.text:0000000000003D70                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003D75                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003D7B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003D7F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003D87                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003D8C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003D91                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003D96
.text:0000000000003D96 loc_3D96:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003D96                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003D96                 cmp     rdi, 1
.text:0000000000003D9A                 jbe     loc_439B
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003DA0                 mov     rcx, rdi
.text:0000000000003DA3                 xor     esi, esi
.text:0000000000003DA5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003DAB                 add     rcx, rbp
.text:0000000000003DAE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003DB3                 jmp     loc_3E6E
.text:0000000000003DB3 ; ---------------------------------------------------------------------------
.text:0000000000003DB8                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003DC0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DC5                 setz    al
.text:0000000000003DC8                 test    r9b, r9b
.text:0000000000003DCB                 jnz     loc_4280
.text:0000000000003DD1                 mov     esi, r8d
.text:0000000000003DD4                 xor     esi, 1
.text:0000000000003DD7                 and     al, sil
.text:0000000000003DDA                 jz      short loc_3E0B
.text:0000000000003DDC                 cmp     r13, r15
.text:0000000000003DDF                 jbe     short loc_3DE6
.text:0000000000003DE1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003DE6
.text:0000000000003DE6 loc_3DE6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003DE6                 lea     rsi, [r15+1]
.text:0000000000003DEA                 cmp     r13, rsi
.text:0000000000003DED                 jbe     short loc_3DF5
.text:0000000000003DEF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003DF5
.text:0000000000003DF5 loc_3DF5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003DF5                 lea     rsi, [r15+2]
.text:0000000000003DF9                 cmp     r13, rsi
.text:0000000000003DFC                 jbe     short loc_3E04
.text:0000000000003DFE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003E04
.text:0000000000003E04 loc_3E04:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003E04                 add     r15, 3
.text:0000000000003E08                 mov     r8d, eax
.text:0000000000003E0B
.text:0000000000003E0B loc_3E0B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003E0B                 cmp     r13, r15
.text:0000000000003E0E                 jbe     short loc_3E15
.text:0000000000003E10                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003E15
.text:0000000000003E15 loc_3E15:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003E15                 lea     rax, [r15+1]
.text:0000000000003E19                 cmp     r13, rax
.text:0000000000003E1C                 jbe     short loc_3E2B
.text:0000000000003E1E                 mov     eax, ebx
.text:0000000000003E20                 shr     al, 6
.text:0000000000003E23                 add     eax, 30h ; '0'
.text:0000000000003E26                 mov     [r14+r15+1], al
.text:0000000000003E2B
.text:0000000000003E2B loc_3E2B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003E2B                 lea     rax, [r15+2]
.text:0000000000003E2F                 cmp     r13, rax
.text:0000000000003E32                 jbe     short loc_3E44
.text:0000000000003E34                 mov     eax, ebx
.text:0000000000003E36                 shr     al, 3
.text:0000000000003E39                 and     eax, 7
.text:0000000000003E3C                 add     eax, 30h ; '0'
.text:0000000000003E3F                 mov     [r14+r15+2], al
.text:0000000000003E44
.text:0000000000003E44 loc_3E44:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003E44                 and     ebx, 7
.text:0000000000003E47                 add     rbp, 1
.text:0000000000003E4B                 add     r15, 3
.text:0000000000003E4F                 add     ebx, 30h ; '0'
.text:0000000000003E52                 cmp     rbp, rcx
.text:0000000000003E55                 jnb     loc_3640
.text:0000000000003E5B                 mov     esi, edx
.text:0000000000003E5D
.text:0000000000003E5D loc_3E5D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003E5D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003E5D                 cmp     r13, r15
.text:0000000000003E60                 jbe     short loc_3E66
.text:0000000000003E62                 mov     [r14+r15], bl
.text:0000000000003E66
.text:0000000000003E66 loc_3E66:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003E66                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003E6A                 add     r15, 1
.text:0000000000003E6E
.text:0000000000003E6E loc_3E6E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003E6E                 test    dl, dl
.text:0000000000003E70                 jnz     loc_3DC0
.text:0000000000003E76                 mov     eax, esi
.text:0000000000003E78                 xor     eax, 1
.text:0000000000003E7B                 and     eax, r8d
.text:0000000000003E7E                 test    r10b, r10b
.text:0000000000003E81                 jz      short loc_3E91
.text:0000000000003E83                 cmp     r13, r15
.text:0000000000003E86                 jbe     short loc_3E8D
.text:0000000000003E88                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003E8D
.text:0000000000003E8D loc_3E8D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003E8D                 add     r15, 1
.text:0000000000003E91
.text:0000000000003E91 loc_3E91:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003E91                 add     rbp, 1
.text:0000000000003E95                 cmp     rbp, rcx
.text:0000000000003E98                 jnb     loc_361C
.text:0000000000003E9E                 test    al, al
.text:0000000000003EA0                 jz      loc_429E
.text:0000000000003EA6                 cmp     r13, r15
.text:0000000000003EA9                 jbe     short loc_3EB0
.text:0000000000003EAB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003EB0                 lea     rax, [r15+1]
.text:0000000000003EB4                 cmp     r13, rax
.text:0000000000003EB7                 jbe     short loc_3EBF
.text:0000000000003EB9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003EBF
.text:0000000000003EBF loc_3EBF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003EBF                 add     r15, 2
.text:0000000000003EC3                 xor     r10d, r10d
.text:0000000000003EC6                 xor     r8d, r8d
.text:0000000000003EC9                 jmp     short loc_3E5D
.text:0000000000003EC9 ; ---------------------------------------------------------------------------
.text:0000000000003ECB                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003ED0                 cmp     r15, 1
.text:0000000000003ED4                 jz      loc_3D39
.text:0000000000003EDA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003EDF                 lea     rcx, [rdi+r15]
.text:0000000000003EE3                 lea     rdx, [rdi+r14+1]
.text:0000000000003EE8                 lea     r8, [rcx+r14]
.text:0000000000003EEC                 jmp     short loc_3EFD
.text:0000000000003EEC ; ---------------------------------------------------------------------------
.text:0000000000003EEE                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003EF0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003EF0                 add     rdx, 1
.text:0000000000003EF4                 cmp     r8, rdx
.text:0000000000003EF7                 jz      loc_3D39
.text:0000000000003EFD
.text:0000000000003EFD loc_3EFD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003EFD                 movzx   ecx, byte ptr [rdx]
.text:0000000000003F00                 sub     ecx, 5Bh ; '['
.text:0000000000003F03                 cmp     cl, 21h ; '!'
.text:0000000000003F06                 ja      short loc_3EF0
.text:0000000000003F08                 mov     esi, 1
.text:0000000000003F0D                 shl     rsi, cl
.text:0000000000003F10                 mov     rcx, rsi
.text:0000000000003F13                 mov     rsi, 20000002Bh
.text:0000000000003F1D                 test    rcx, rsi
.text:0000000000003F20                 jz      short loc_3EF0
.text:0000000000003F22                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F27                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F2C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003F31                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003F39                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003F39                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003F3E                 jz      short loc_3F50
.text:0000000000003F40                 test    al, al
.text:0000000000003F42                 mov     eax, 4
.text:0000000000003F47                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003F4C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003F50
.text:0000000000003F50 loc_3F50:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003F50                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003F50                 sub     rsp, 8
.text:0000000000003F54                 mov     rcx, rbp
.text:0000000000003F57                 mov     rsi, r13
.text:0000000000003F5A                 push    [rsp+0F0h+var_88]
.text:0000000000003F5E                 push    [rsp+0F8h+var_80]
.text:0000000000003F62                 mov     rdi, r14
.text:0000000000003F65                 push    0
.text:0000000000003F67                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003F6F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003F74                 mov     rdx, [rsp+108h+s]
.text:0000000000003F79                 and     r9d, 0FFFFFFFDh
.text:0000000000003F7D                 call    quotearg_buffer_restyled
.text:0000000000003F82                 add     rsp, 20h
.text:0000000000003F86                 mov     r15, rax
.text:0000000000003F89
.text:0000000000003F89 loc_3F89:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003F89                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003F89                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003F91                 xor     rbx, fs:28h
.text:0000000000003F9A                 mov     rax, r15
.text:0000000000003F9D                 jnz     loc_45A3
.text:0000000000003FA3                 add     rsp, 0B8h
.text:0000000000003FAA                 pop     rbx
.text:0000000000003FAB                 pop     rbp
.text:0000000000003FAC                 pop     r12
.text:0000000000003FAE                 pop     r13
.text:0000000000003FB0                 pop     r14
.text:0000000000003FB2                 pop     r15
.text:0000000000003FB4                 retn
.text:0000000000003FB4 ; ---------------------------------------------------------------------------
.text:0000000000003FB5                 align 8
.text:0000000000003FB8
.text:0000000000003FB8 loc_3FB8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003FB8                 mov     rbp, r11
.text:0000000000003FBB                 jmp     loc_3F39
.text:0000000000003FC0 ; ---------------------------------------------------------------------------
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003FC0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003FC0                 cmp     r13, r15
.text:0000000000003FC3                 jbe     short loc_3FCA
.text:0000000000003FC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003FCA
.text:0000000000003FCA loc_3FCA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003FCA                 lea     rax, [r15+1]
.text:0000000000003FCE                 cmp     r13, rax
.text:0000000000003FD1                 jbe     short loc_3FD9
.text:0000000000003FD3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003FD9
.text:0000000000003FD9 loc_3FD9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003FD9                 lea     rax, [r15+2]
.text:0000000000003FDD                 cmp     r13, rax
.text:0000000000003FE0                 jbe     loc_45D2
.text:0000000000003FE6                 mov     rdx, r13
.text:0000000000003FE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003FEF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003FF4                 jmp     loc_3BD2
.text:0000000000003FF9 ; ---------------------------------------------------------------------------
.text:0000000000003FF9
.text:0000000000003FF9 loc_3FF9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003FF9                 mov     eax, r12d
.text:0000000000003FFC                 mov     ebx, 30h ; '0'
.text:0000000000004001                 xor     r12d, r12d
.text:0000000000004004                 jmp     loc_3609
.text:0000000000004009 ; ---------------------------------------------------------------------------
.text:0000000000004009
.text:0000000000004009 loc_4009:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004009                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000400F                 jmp     loc_39D9
.text:0000000000004014 ; ---------------------------------------------------------------------------
.text:0000000000004014
.text:0000000000004014 loc_4014:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004014                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:0000000000004014                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004016                 jnz     loc_3443        ; jumptable 00000000000121F1 case 1
.text:000000000000401C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004021
.text:0000000000004021 loc_4021:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004021                 test    r13, r13
.text:0000000000004024                 jnz     loc_45BA
.text:000000000000402A                 lea     rax, asc_67C5   ; "'"
.text:0000000000004031                 mov     [rsp+0E8h+var_98], 0
.text:000000000000403A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000403F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004044                 xor     r12d, r12d
.text:0000000000004047                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000404C                 mov     [rsp+0E8h+n], 1
.text:0000000000004055                 mov     [rsp+0E8h+s2], rax
.text:000000000000405A                 mov     r15d, 1
.text:0000000000004060                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004068                 jmp     loc_3483
.text:0000000000004068 ; ---------------------------------------------------------------------------
.text:000000000000406D                 align 10h
.text:0000000000004070
.text:0000000000004070 loc_4070:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004070                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:0000000000004070                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004072                 jnz     loc_446D
.text:0000000000004078                 test    r13, r13
.text:000000000000407B                 jz      loc_42A6
.text:0000000000004081                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004085                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000408A                 xor     r12d, r12d
.text:000000000000408D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004092                 mov     [rsp+0E8h+var_98], 0
.text:000000000000409B
.text:000000000000409B loc_409B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000409B                 lea     rax, unk_67C3
.text:00000000000040A2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000040A7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000040AC                 mov     [rsp+0E8h+n], 1
.text:00000000000040B5                 mov     r15d, 1
.text:00000000000040BB                 mov     [rsp+0E8h+s2], rax
.text:00000000000040C0                 jmp     loc_3483
.text:00000000000040C5 ; ---------------------------------------------------------------------------
.text:00000000000040C5
.text:00000000000040C5 loc_40C5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000040C5                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:00000000000040C5                 lea     rax, unk_67C3   ; jumptable 00000000000121F1 case 6
.text:00000000000040CC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000040D1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000040D6                 xor     r12d, r12d
.text:00000000000040D9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000040E2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000040E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000040EC                 mov     [rsp+0E8h+n], 1
.text:00000000000040F5                 xor     r15d, r15d
.text:00000000000040F8                 mov     [rsp+0E8h+s2], rax
.text:00000000000040FD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004105                 jmp     loc_3483
.text:000000000000410A ; ---------------------------------------------------------------------------
.text:000000000000410A
.text:000000000000410A loc_410A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000410A                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:000000000000410A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000410F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004114                 xor     r12d, r12d
.text:0000000000004117                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004120                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004125                 xor     r15d, r15d
.text:0000000000004128                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000412D                 mov     [rsp+0E8h+n], 0
.text:0000000000004136                 mov     [rsp+0E8h+s2], 0
.text:000000000000413F                 jmp     loc_3483
.text:0000000000004144 ; ---------------------------------------------------------------------------
.text:0000000000004144
.text:0000000000004144 loc_4144:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004144                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:0000000000004144                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004149                 jz      short loc_41A1
.text:000000000000414B                 lea     rsi, asc_67C7   ; "`"
.text:0000000000004152                 xor     edi, edi        ; domainname
.text:0000000000004154                 mov     edx, 5          ; category
.text:0000000000004159                 call    _dcgettext
.text:000000000000415E                 mov     rcx, rax
.text:0000000000004161                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004166                 lea     rax, asc_67C7   ; "`"
.text:000000000000416D                 cmp     rcx, rax
.text:0000000000004170                 jz      loc_450E
.text:0000000000004176
.text:0000000000004176 loc_4176:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004176                 lea     rsi, asc_67C5   ; "'"
.text:000000000000417D                 xor     edi, edi        ; domainname
.text:000000000000417F                 mov     edx, 5          ; category
.text:0000000000004184                 call    _dcgettext
.text:0000000000004189                 mov     rcx, rax
.text:000000000000418C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004191                 lea     rax, asc_67C5   ; "'"
.text:0000000000004198                 cmp     rcx, rax
.text:000000000000419B                 jz      loc_4524
.text:00000000000041A1
.text:00000000000041A1 loc_41A1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000041A1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000041A1                 xor     r15d, r15d
.text:00000000000041A4                 test    ebx, ebx
.text:00000000000041A6                 jz      loc_436D
.text:00000000000041AC
.text:00000000000041AC loc_41AC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000041AC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000041AC                 test    ebx, ebx
.text:00000000000041AE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000041B3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000041B8                 xor     r12d, r12d
.text:00000000000041BB                 mov     rdi, rbx        ; s
.text:00000000000041BE                 call    _strlen
.text:00000000000041C3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000041C8                 mov     [rsp+0E8h+n], rax
.text:00000000000041CD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041D2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041E0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000041E5                 jmp     loc_3483
.text:00000000000041EA ; ---------------------------------------------------------------------------
.text:00000000000041EA
.text:00000000000041EA loc_41EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000041EA                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:00000000000041EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000041EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041F4                 xor     r12d, r12d
.text:00000000000041F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004200                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004205                 xor     r15d, r15d
.text:0000000000004208                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000420D                 mov     [rsp+0E8h+n], 0
.text:0000000000004216                 mov     [rsp+0E8h+s2], 0
.text:000000000000421F                 jmp     loc_3483
.text:0000000000004224 ; ---------------------------------------------------------------------------
.text:0000000000004224
.text:0000000000004224 loc_4224:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004224                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:0000000000004224                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004229                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000422E                 xor     r12d, r12d
.text:0000000000004231                 mov     [rsp+0E8h+var_98], 0
.text:000000000000423A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000423F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004244                 jmp     loc_3463
.text:0000000000004249 ; ---------------------------------------------------------------------------
.text:0000000000004249
.text:0000000000004249 loc_4249:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004249                 cmp     r13, r15
.text:000000000000424C                 jbe     short loc_4253
.text:000000000000424E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004253
.text:0000000000004253 loc_4253:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004253                 lea     rax, [rcx+2]
.text:0000000000004257                 cmp     r13, rax
.text:000000000000425A                 jbe     short loc_4262
.text:000000000000425C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004262
.text:0000000000004262 loc_4262:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004262                 mov     eax, r12d
.text:0000000000004265                 lea     r15, [rcx+3]
.text:0000000000004269                 xor     r12d, r12d
.text:000000000000426C                 mov     ebx, 30h ; '0'
.text:0000000000004271                 jmp     loc_35D8
.text:0000000000004271 ; ---------------------------------------------------------------------------
.text:0000000000004276                 align 20h
.text:0000000000004280
.text:0000000000004280 loc_4280:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004280                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004285                 mov     rbp, r11
.text:0000000000004288                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000428C                 jmp     loc_3F39
.text:0000000000004291 ; ---------------------------------------------------------------------------
.text:0000000000004291
.text:0000000000004291 loc_4291:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004291                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004296                 xor     r12d, r12d
.text:0000000000004299                 jmp     loc_3DA0
.text:000000000000429E ; ---------------------------------------------------------------------------
.text:000000000000429E
.text:000000000000429E loc_429E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000429E                 xor     r10d, r10d
.text:00000000000042A1                 jmp     loc_3E5D
.text:00000000000042A6 ; ---------------------------------------------------------------------------
.text:00000000000042A6
.text:00000000000042A6 loc_42A6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000042A6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000042AF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000042B4                 xor     r12d, r12d
.text:00000000000042B7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000042BC                 jmp     loc_409B
.text:00000000000042C1 ; ---------------------------------------------------------------------------
.text:00000000000042C1
.text:00000000000042C1 loc_42C1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000042C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000042C6                 mov     rsi, r14
.text:00000000000042C9                 mov     rcx, r13
.text:00000000000042CC                 mov     rax, rbx
.text:00000000000042CF                 mov     rdi, rbx
.text:00000000000042D2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000042D8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000042DD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000042E5                 cmp     rsi, r11
.text:00000000000042E8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000042EE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000042F6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000042FB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004300                 jnb     short loc_4328
.text:0000000000004302                 cmp     byte ptr [rcx], 0
.text:0000000000004305                 jnz     short loc_4317
.text:0000000000004307                 jmp     short loc_4328
.text:0000000000004307 ; ---------------------------------------------------------------------------
.text:0000000000004309                 align 10h
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004310                 cmp     byte ptr [r9+rax], 0
.text:0000000000004315                 jz      short loc_4325
.text:0000000000004317
.text:0000000000004317 loc_4317:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004317                 add     rax, 1
.text:000000000000431B                 lea     rdx, [rbp+rax+0]
.text:0000000000004320                 cmp     r11, rdx
.text:0000000000004323                 ja      short loc_4310
.text:0000000000004325
.text:0000000000004325 loc_4325:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004325                 mov     rdi, rax
.text:0000000000004328
.text:0000000000004328 loc_4328:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004328                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004328                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000432D                 xor     r12d, r12d
.text:0000000000004330                 jmp     loc_3D96
.text:0000000000004335 ; ---------------------------------------------------------------------------
.text:0000000000004335
.text:0000000000004335 loc_4335:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004335                 mov     rdi, rbx
.text:0000000000004338                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000433E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004343                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004349                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004351                 xor     r12d, r12d
.text:0000000000004354                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004359                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000435E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004363                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004368                 jmp     loc_3D96
.text:000000000000436D ; ---------------------------------------------------------------------------
.text:000000000000436D
.text:000000000000436D loc_436D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000436D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004372                 movzx   eax, byte ptr [rdx]
.text:0000000000004375                 test    al, al
.text:0000000000004377                 jz      loc_41AC
.text:000000000000437D                 nop     dword ptr [rax]
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004380                 cmp     r13, r15
.text:0000000000004383                 jbe     short loc_4389
.text:0000000000004385                 mov     [r14+r15], al
.text:0000000000004389
.text:0000000000004389 loc_4389:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004389                 add     r15, 1
.text:000000000000438D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004392                 test    al, al
.text:0000000000004394                 jnz     short loc_4380
.text:0000000000004396                 jmp     loc_41AC
.text:000000000000439B ; ---------------------------------------------------------------------------
.text:000000000000439B
.text:000000000000439B loc_439B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000439B                 mov     eax, edx
.text:000000000000439D                 jmp     loc_38F7
.text:00000000000043A2 ; ---------------------------------------------------------------------------
.text:00000000000043A2
.text:00000000000043A2 loc_43A2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000043A2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000043A6                 cmp     bl, 3Eh ; '>'
.text:00000000000043A9                 ja      loc_3C20
.text:00000000000043AF                 mov     rax, 7000A38200000000h
.text:00000000000043B9                 bt      rax, rbx
.text:00000000000043BD                 jnb     loc_3C20
.text:00000000000043C3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000043C8                 jnz     loc_45B2
.text:00000000000043CE                 cmp     r13, r15
.text:00000000000043D1                 jbe     short loc_43D8
.text:00000000000043D3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000043D8
.text:00000000000043D8 loc_43D8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000043D8                 lea     rax, [r15+1]
.text:00000000000043DC                 cmp     r13, rax
.text:00000000000043DF                 jbe     short loc_43E7
.text:00000000000043E1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000043E7
.text:00000000000043E7 loc_43E7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000043E7                 lea     rax, [r15+2]
.text:00000000000043EB                 cmp     r13, rax
.text:00000000000043EE                 jbe     short loc_43F6
.text:00000000000043F0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000043F6
.text:00000000000043F6 loc_43F6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000043F6                 lea     rax, [r15+3]
.text:00000000000043FA                 cmp     r13, rax
.text:00000000000043FD                 jbe     short loc_4405
.text:00000000000043FF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004405
.text:0000000000004405 loc_4405:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004405                 add     r15, 4
.text:0000000000004409                 xor     edx, edx
.text:000000000000440B                 xor     r12d, r12d
.text:000000000000440E                 xor     eax, eax
.text:0000000000004410                 mov     rbp, rcx
.text:0000000000004413                 jmp     loc_35D8
.text:0000000000004418 ; ---------------------------------------------------------------------------
.text:0000000000004418
.text:0000000000004418 loc_4418:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004418                                         ; DATA XREF: .rodata:jpt_3441↓o
.text:0000000000004418                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000441A                 jz      loc_45A8
.text:0000000000004420                 lea     rax, asc_67C5   ; "'"
.text:0000000000004427                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000442C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004431                 xor     r12d, r12d
.text:0000000000004434                 mov     [rsp+0E8h+var_98], 0
.text:000000000000443D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004442                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004447                 mov     [rsp+0E8h+n], 1
.text:0000000000004450                 xor     r15d, r15d
.text:0000000000004453                 mov     [rsp+0E8h+s2], rax
.text:0000000000004458                 jmp     loc_3483
.text:0000000000004458 ; ---------------------------------------------------------------------------
.text:000000000000445D                 align 20h
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004460                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004460                 mov     rbp, r11
.text:0000000000004463                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004468                 jmp     loc_3F39
.text:000000000000446D ; ---------------------------------------------------------------------------
.text:000000000000446D
.text:000000000000446D loc_446D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000446D                 lea     rax, unk_67C3
.text:0000000000004474                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004479                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000447E                 xor     r12d, r12d
.text:0000000000004481                 mov     [rsp+0E8h+var_98], 0
.text:000000000000448A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000448F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004494                 mov     [rsp+0E8h+n], 1
.text:000000000000449D                 xor     r15d, r15d
.text:00000000000044A0                 mov     [rsp+0E8h+s2], rax
.text:00000000000044A5                 jmp     loc_3483
.text:00000000000044AA ; ---------------------------------------------------------------------------
.text:00000000000044AA
.text:00000000000044AA loc_44AA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000044AA                 mov     eax, edx
.text:00000000000044AC
.text:00000000000044AC loc_44AC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000044AC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000044AC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000044B1                 test    rbx, rbx
.text:00000000000044B4                 jz      short loc_44E2
.text:00000000000044B6                 test    al, al
.text:00000000000044B8                 jz      short loc_44E2
.text:00000000000044BA                 movzx   ecx, byte ptr [rbx]
.text:00000000000044BD                 mov     rax, rbx
.text:00000000000044C0                 test    cl, cl
.text:00000000000044C2                 jz      short loc_44E2
.text:00000000000044C4                 mov     rdx, r15
.text:00000000000044C7                 sub     rax, r15
.text:00000000000044CA
.text:00000000000044CA loc_44CA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000044CA                 cmp     r13, rdx
.text:00000000000044CD                 jbe     short loc_44D3
.text:00000000000044CF                 mov     [r14+rdx], cl
.text:00000000000044D3
.text:00000000000044D3 loc_44D3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000044D3                 add     rdx, 1
.text:00000000000044D7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000044DB                 test    cl, cl
.text:00000000000044DD                 jnz     short loc_44CA
.text:00000000000044DF                 mov     r15, rdx
.text:00000000000044E2
.text:00000000000044E2 loc_44E2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000044E2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000044E2                 cmp     r13, r15
.text:00000000000044E5                 jbe     loc_3F89
.text:00000000000044EB                 mov     byte ptr [r14+r15], 0
.text:00000000000044F0                 jmp     loc_3F89
.text:00000000000044F5 ; ---------------------------------------------------------------------------
.text:00000000000044F5
.text:00000000000044F5 loc_44F5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000044F5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000044FF                 mov     rbp, r11
.text:0000000000004502                 setz    al
.text:0000000000004505                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004509                 jmp     loc_3F39
.text:000000000000450E ; ---------------------------------------------------------------------------
.text:000000000000450E
.text:000000000000450E loc_450E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000450E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004512                 mov     rdi, rcx
.text:0000000000004515                 call    gettext_quote
.text:000000000000451A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000451F                 jmp     loc_4176
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004524
.text:0000000000004524 loc_4524:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004524                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004528                 mov     rdi, rcx
.text:000000000000452B                 call    gettext_quote
.text:0000000000004530                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004535                 jmp     loc_41A1
.text:000000000000453A ; ---------------------------------------------------------------------------
.text:000000000000453A
.text:000000000000453A loc_453A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000453A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000453F                 mov     rbp, r11
.text:0000000000004542                 mov     eax, edx
.text:0000000000004544                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004548                 jmp     loc_3F39
.text:000000000000454D ; ---------------------------------------------------------------------------
.text:000000000000454D
.text:000000000000454D loc_454D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000454D                 sub     rsp, 8
.text:0000000000004551                 mov     r8d, 5
.text:0000000000004557                 mov     rcx, r11
.text:000000000000455A                 push    [rsp+0F0h+var_88]
.text:000000000000455E                 push    [rsp+0F8h+var_80]
.text:0000000000004562                 mov     rdi, r14
.text:0000000000004565                 push    [rsp+100h+var_C8]
.text:0000000000004569                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004571                 mov     rdx, [rsp+108h+s]
.text:0000000000004576                 mov     rsi, [rsp+108h+var_98]
.text:000000000000457B                 call    quotearg_buffer_restyled
.text:0000000000004580                 add     rsp, 20h
.text:0000000000004584                 mov     r15, rax
.text:0000000000004587                 jmp     loc_3F89
.text:000000000000458C ; ---------------------------------------------------------------------------
.text:000000000000458C
.text:000000000000458C loc_458C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000458C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004591                 jmp     loc_44AC
.text:0000000000004596 ; ---------------------------------------------------------------------------
.text:0000000000004596
.text:0000000000004596 loc_4596:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004596                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000459E                 jmp     loc_3F39
.text:00000000000045A3 ; ---------------------------------------------------------------------------
.text:00000000000045A3
.text:00000000000045A3 loc_45A3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000045A3                 call    ___stack_chk_fail
.text:00000000000045A8 ; ---------------------------------------------------------------------------
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000045A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000045AD                 jmp     loc_4021
.text:00000000000045B2 ; ---------------------------------------------------------------------------
.text:00000000000045B2
.text:00000000000045B2 loc_45B2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000045B2                 mov     rbp, r11
.text:00000000000045B5                 jmp     loc_3F50
.text:00000000000045BA ; ---------------------------------------------------------------------------
.text:00000000000045BA
.text:00000000000045BA loc_45BA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000045BA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045BF                 xor     eax, eax
.text:00000000000045C1                 xor     r12d, r12d
.text:00000000000045C4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000045CD                 jmp     loc_3B74
.text:00000000000045D2 ; ---------------------------------------------------------------------------
.text:00000000000045D2
.text:00000000000045D2 loc_45D2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000045D2                 mov     rdx, r13
.text:00000000000045D5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000045DA                 jmp     loc_3BD2
.text:00000000000045DF ; ---------------------------------------------------------------------------
.text:00000000000045DF
.text:00000000000045DF def_3441:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000045DF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000045DF ; } // starts at 33B0
.text:00000000000045DF quotearg_buffer_restyled endp
.text:00000000000045DF
.text:00000000000045DF ; ---------------------------------------------------------------------------
.text:00000000000045E4                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0
.text:00000000000045F0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000045F0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000045F0
.text:00000000000045F0 var_50          = qword ptr -50h
.text:00000000000045F0 var_48          = qword ptr -48h
.text:00000000000045F0 var_40          = dword ptr -40h
.text:00000000000045F0 var_3C          = dword ptr -3Ch
.text:00000000000045F0
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 push    r15
.text:00000000000045F2                 push    r14
.text:00000000000045F4                 movsxd  r15, edi
.text:00000000000045F7                 push    r13
.text:00000000000045F9                 push    r12
.text:00000000000045FB                 mov     r14, rdx
.text:00000000000045FE                 push    rbp
.text:00000000000045FF                 push    rbx
.text:0000000000004600                 mov     rbp, rcx
.text:0000000000004603                 sub     rsp, 28h
.text:0000000000004607                 mov     [rsp+58h+var_50], rsi
.text:000000000000460C                 call    ___errno_location
.text:0000000000004611                 mov     r13, rax
.text:0000000000004614                 mov     eax, [rax]
.text:0000000000004616                 test    r15d, r15d
.text:0000000000004619                 mov     rbx, cs:slotvec
.text:0000000000004620                 mov     [rsp+58h+var_40], eax
.text:0000000000004624                 js      loc_4791
.text:000000000000462A                 cmp     cs:nslots, r15d
.text:0000000000004631                 jg      short loc_4695
.text:0000000000004633                 cmp     r15d, 7FFFFFFFh
.text:000000000000463A                 jz      loc_4796
.text:0000000000004640                 lea     r12d, [r15+1]
.text:0000000000004644                 lea     rax, slotvec0
.text:000000000000464B                 movsxd  rsi, r12d
.text:000000000000464E                 shl     rsi, 4
.text:0000000000004652                 cmp     rbx, rax
.text:0000000000004655                 jz      loc_4770
.text:000000000000465B                 mov     rdi, rbx
.text:000000000000465E                 call    xrealloc
.text:0000000000004663                 mov     rbx, rax
.text:0000000000004666                 mov     cs:slotvec, rax
.text:000000000000466D
.text:000000000000466D loc_466D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000466D                 movsxd  rdi, cs:nslots
.text:0000000000004674                 mov     edx, r12d
.text:0000000000004677                 xor     esi, esi        ; c
.text:0000000000004679                 sub     edx, edi
.text:000000000000467B                 shl     rdi, 4
.text:000000000000467F                 movsxd  rdx, edx
.text:0000000000004682                 add     rdi, rbx        ; s
.text:0000000000004685                 shl     rdx, 4          ; n
.text:0000000000004689                 call    _memset
.text:000000000000468E                 mov     cs:nslots, r12d
.text:0000000000004695
.text:0000000000004695 loc_4695:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004695                 mov     eax, [rbp+4]
.text:0000000000004698                 shl     r15, 4
.text:000000000000469C                 sub     rsp, 8
.text:00000000000046A0                 add     rbx, r15
.text:00000000000046A3                 lea     r15, [rbp+8]
.text:00000000000046A7                 mov     r8d, [rbp+0]
.text:00000000000046AB                 mov     r11, [rbx]
.text:00000000000046AE                 mov     r12, [rbx+8]
.text:00000000000046B2                 mov     rcx, r14
.text:00000000000046B5                 or      eax, 1
.text:00000000000046B8                 mov     [rsp+60h+var_3C], eax
.text:00000000000046BC                 push    qword ptr [rbp+30h]
.text:00000000000046BF                 mov     r9d, eax
.text:00000000000046C2                 push    qword ptr [rbp+28h]
.text:00000000000046C5                 push    r15
.text:00000000000046C7                 mov     rsi, r11
.text:00000000000046CA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000046CF                 mov     rdi, r12
.text:00000000000046D2                 mov     [rsp+78h+var_48], r11
.text:00000000000046D7                 call    quotearg_buffer_restyled
.text:00000000000046DC                 add     rsp, 20h
.text:00000000000046E0                 mov     r11, [rsp+58h+var_48]
.text:00000000000046E5                 cmp     r11, rax
.text:00000000000046E8                 ja      short loc_4751
.text:00000000000046EA                 lea     rsi, [rax+1]
.text:00000000000046EE                 lea     rax, slot0
.text:00000000000046F5                 cmp     r12, rax
.text:00000000000046F8                 mov     [rbx], rsi
.text:00000000000046FB                 jz      short loc_470F
.text:00000000000046FD                 mov     rdi, r12        ; ptr
.text:0000000000004700                 mov     [rsp+58h+var_48], rsi
.text:0000000000004705                 call    _free
.text:000000000000470A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000470F
.text:000000000000470F loc_470F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000470F                 mov     rdi, rsi
.text:0000000000004712                 mov     [rsp+58h+var_48], rsi
.text:0000000000004717                 call    xmalloc
.text:000000000000471C                 sub     rsp, 8
.text:0000000000004720                 mov     [rbx+8], rax
.text:0000000000004724                 mov     r8d, [rbp+0]
.text:0000000000004728                 push    qword ptr [rbp+30h]
.text:000000000000472B                 push    qword ptr [rbp+28h]
.text:000000000000472E                 mov     rcx, r14
.text:0000000000004731                 push    r15
.text:0000000000004733                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004738                 mov     rdi, rax
.text:000000000000473B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004740                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004745                 mov     r12, rax
.text:0000000000004748                 call    quotearg_buffer_restyled
.text:000000000000474D                 add     rsp, 20h
.text:0000000000004751
.text:0000000000004751 loc_4751:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004751                 mov     eax, [rsp+58h+var_40]
.text:0000000000004755                 mov     [r13+0], eax
.text:0000000000004759                 add     rsp, 28h
.text:000000000000475D                 mov     rax, r12
.text:0000000000004760                 pop     rbx
.text:0000000000004761                 pop     rbp
.text:0000000000004762                 pop     r12
.text:0000000000004764                 pop     r13
.text:0000000000004766                 pop     r14
.text:0000000000004768                 pop     r15
.text:000000000000476A                 retn
.text:000000000000476A ; ---------------------------------------------------------------------------
.text:000000000000476B                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004770                 xor     edi, edi
.text:0000000000004772                 call    xrealloc
.text:0000000000004777                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000477F                 mov     rbx, rax
.text:0000000000004782                 mov     cs:slotvec, rax
.text:0000000000004789                 movups  xmmword ptr [rax], xmm0
.text:000000000000478C                 jmp     loc_466D
.text:0000000000004791 ; ---------------------------------------------------------------------------
.text:0000000000004791
.text:0000000000004791 loc_4791:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004791                 call    _abort
.text:0000000000004796 ; ---------------------------------------------------------------------------
.text:0000000000004796
.text:0000000000004796 loc_4796:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004796                 call    xalloc_die
.text:0000000000004796 ; } // starts at 45F0
.text:0000000000004796 quotearg_n_options endp
.text:0000000000004796
.text:0000000000004796 ; ---------------------------------------------------------------------------
.text:000000000000479B                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0 ; Attributes: info_from_lumina
.text:00000000000047A0
.text:00000000000047A0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000047A0                 public clone_quoting_options
.text:00000000000047A0 clone_quoting_options proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 push    r12
.text:00000000000047A2                 push    rbp
.text:00000000000047A3                 push    rbx
.text:00000000000047A4                 mov     rbx, rdi
.text:00000000000047A7                 call    ___errno_location
.text:00000000000047AC                 mov     r12d, [rax]
.text:00000000000047AF                 mov     rbp, rax
.text:00000000000047B2                 lea     rax, default_quoting_options
.text:00000000000047B9                 test    rbx, rbx
.text:00000000000047BC                 mov     esi, 38h ; '8'  ; n
.text:00000000000047C1                 cmovz   rbx, rax
.text:00000000000047C5                 mov     rdi, rbx        ; src
.text:00000000000047C8                 call    xmemdup
.text:00000000000047CD                 mov     [rbp+0], r12d
.text:00000000000047D1                 pop     rbx
.text:00000000000047D2                 pop     rbp
.text:00000000000047D3                 pop     r12
.text:00000000000047D5                 retn
.text:00000000000047D5 ; } // starts at 47A0
.text:00000000000047D5 clone_quoting_options endp
.text:00000000000047D5
.text:00000000000047D5 ; ---------------------------------------------------------------------------
.text:00000000000047D6                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0
.text:00000000000047E0                 public get_quoting_style
.text:00000000000047E0 get_quoting_style proc near
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 lea     rax, default_quoting_options
.text:00000000000047E7                 test    rdi, rdi
.text:00000000000047EA                 cmovz   rdi, rax
.text:00000000000047EE                 mov     eax, [rdi]
.text:00000000000047F0                 retn
.text:00000000000047F0 ; } // starts at 47E0
.text:00000000000047F0 get_quoting_style endp
.text:00000000000047F0
.text:00000000000047F0 ; ---------------------------------------------------------------------------
.text:00000000000047F1                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800
.text:0000000000004800                 public set_quoting_style
.text:0000000000004800 set_quoting_style proc near
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 lea     rax, default_quoting_options
.text:0000000000004807                 test    rdi, rdi
.text:000000000000480A                 cmovz   rdi, rax
.text:000000000000480E                 mov     [rdi], esi
.text:0000000000004810                 retn
.text:0000000000004810 ; } // starts at 4800
.text:0000000000004810 set_quoting_style endp
.text:0000000000004810
.text:0000000000004810 ; ---------------------------------------------------------------------------
.text:0000000000004811                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820 ; Attributes: info_from_lumina
.text:0000000000004820
.text:0000000000004820 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004820                 public set_char_quoting
.text:0000000000004820 set_char_quoting proc near
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 lea     rax, default_quoting_options
.text:0000000000004827                 test    rdi, rdi
.text:000000000000482A                 mov     ecx, esi
.text:000000000000482C                 cmovz   rdi, rax
.text:0000000000004830                 mov     eax, esi
.text:0000000000004832                 and     ecx, 1Fh
.text:0000000000004835                 shr     al, 5
.text:0000000000004838                 movzx   eax, al
.text:000000000000483B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004840                 mov     esi, [rdi]
.text:0000000000004842                 mov     eax, esi
.text:0000000000004844                 shr     eax, cl
.text:0000000000004846                 xor     edx, eax
.text:0000000000004848                 and     eax, 1
.text:000000000000484B                 and     edx, 1
.text:000000000000484E                 shl     edx, cl
.text:0000000000004850                 xor     edx, esi
.text:0000000000004852                 mov     [rdi], edx
.text:0000000000004854                 retn
.text:0000000000004854 ; } // starts at 4820
.text:0000000000004854 set_char_quoting endp
.text:0000000000004854
.text:0000000000004854 ; ---------------------------------------------------------------------------
.text:0000000000004855                 align 20h
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860
.text:0000000000004860                 public set_quoting_flags
.text:0000000000004860 set_quoting_flags proc near
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 lea     rax, default_quoting_options
.text:0000000000004867                 test    rdi, rdi
.text:000000000000486A                 cmovz   rdi, rax
.text:000000000000486E                 mov     eax, [rdi+4]
.text:0000000000004871                 mov     [rdi+4], esi
.text:0000000000004874                 retn
.text:0000000000004874 ; } // starts at 4860
.text:0000000000004874 set_quoting_flags endp
.text:0000000000004874
.text:0000000000004874 ; ---------------------------------------------------------------------------
.text:0000000000004875                 align 20h
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880 ; Attributes: info_from_lumina
.text:0000000000004880
.text:0000000000004880 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004880                 public set_custom_quoting
.text:0000000000004880 set_custom_quoting proc near
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 lea     rax, default_quoting_options
.text:0000000000004887                 test    rdi, rdi
.text:000000000000488A                 cmovz   rdi, rax
.text:000000000000488E                 test    rsi, rsi
.text:0000000000004891                 mov     dword ptr [rdi], 0Ah
.text:0000000000004897                 jz      short loc_48A7
.text:0000000000004899                 test    rdx, rdx
.text:000000000000489C                 jz      short loc_48A7
.text:000000000000489E                 mov     [rdi+28h], rsi
.text:00000000000048A2                 mov     [rdi+30h], rdx
.text:00000000000048A6                 retn
.text:00000000000048A7 ; ---------------------------------------------------------------------------
.text:00000000000048A7
.text:00000000000048A7 loc_48A7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000048A7                                         ; set_custom_quoting+1C↑j
.text:00000000000048A7                 sub     rsp, 8
.text:00000000000048AB                 call    _abort
.text:00000000000048AB ; } // starts at 4880
.text:00000000000048AB set_custom_quoting endp
.text:00000000000048AB
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000048B0                 public quotearg_buffer
.text:00000000000048B0 quotearg_buffer proc near
.text:00000000000048B0
.text:00000000000048B0 var_40          = qword ptr -40h
.text:00000000000048B0
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 push    r15
.text:00000000000048B2                 push    r14
.text:00000000000048B4                 lea     rax, default_quoting_options
.text:00000000000048BB                 push    r13
.text:00000000000048BD                 push    r12
.text:00000000000048BF                 mov     r13, rdi
.text:00000000000048C2                 push    rbp
.text:00000000000048C3                 push    rbx
.text:00000000000048C4                 mov     rbx, r8
.text:00000000000048C7                 mov     r14, rsi
.text:00000000000048CA                 mov     r15, rdx
.text:00000000000048CD                 sub     rsp, 18h
.text:00000000000048D1                 test    r8, r8
.text:00000000000048D4                 cmovz   rbx, rax
.text:00000000000048D8                 mov     [rsp+48h+var_40], rcx
.text:00000000000048DD                 call    ___errno_location
.text:00000000000048E2                 mov     r12d, [rax]
.text:00000000000048E5                 mov     rbp, rax
.text:00000000000048E8                 lea     rax, [rbx+8]
.text:00000000000048EC                 sub     rsp, 8
.text:00000000000048F0                 mov     r9d, [rbx+4]
.text:00000000000048F4                 push    qword ptr [rbx+30h]
.text:00000000000048F7                 mov     r8d, [rbx]
.text:00000000000048FA                 push    qword ptr [rbx+28h]
.text:00000000000048FD                 mov     rdx, r15
.text:0000000000004900                 push    rax
.text:0000000000004901                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004906                 mov     rsi, r14
.text:0000000000004909                 mov     rdi, r13
.text:000000000000490C                 call    quotearg_buffer_restyled
.text:0000000000004911                 mov     [rbp+0], r12d
.text:0000000000004915                 add     rsp, 38h
.text:0000000000004919                 pop     rbx
.text:000000000000491A                 pop     rbp
.text:000000000000491B                 pop     r12
.text:000000000000491D                 pop     r13
.text:000000000000491F                 pop     r14
.text:0000000000004921                 pop     r15
.text:0000000000004923                 retn
.text:0000000000004923 ; } // starts at 48B0
.text:0000000000004923 quotearg_buffer endp
.text:0000000000004923
.text:0000000000004923 ; ---------------------------------------------------------------------------
.text:0000000000004924                 align 10h
.text:0000000000004930
.text:0000000000004930 ; =============== S U B R O U T I N E =======================================
.text:0000000000004930
.text:0000000000004930 ; Attributes: info_from_lumina
.text:0000000000004930
.text:0000000000004930 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004930                 public quotearg_alloc_mem
.text:0000000000004930 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004930
.text:0000000000004930 var_5C          = dword ptr -5Ch
.text:0000000000004930 var_58          = qword ptr -58h
.text:0000000000004930 var_50          = qword ptr -50h
.text:0000000000004930 var_48          = qword ptr -48h
.text:0000000000004930 var_40          = qword ptr -40h
.text:0000000000004930
.text:0000000000004930 ; __unwind {
.text:0000000000004930                 push    r15
.text:0000000000004932                 push    r14
.text:0000000000004934                 lea     rax, default_quoting_options
.text:000000000000493B                 push    r13
.text:000000000000493D                 push    r12
.text:000000000000493F                 mov     r12, rdx
.text:0000000000004942                 push    rbp
.text:0000000000004943                 push    rbx
.text:0000000000004944                 mov     rbx, rcx
.text:0000000000004947                 mov     r14, rdi
.text:000000000000494A                 mov     r15, rsi
.text:000000000000494D                 sub     rsp, 38h
.text:0000000000004951                 test    rcx, rcx
.text:0000000000004954                 cmovz   rbx, rax
.text:0000000000004958                 xor     ebp, ebp
.text:000000000000495A                 call    ___errno_location
.text:000000000000495F                 test    r12, r12
.text:0000000000004962                 mov     r13, rax
.text:0000000000004965                 mov     eax, [rax]
.text:0000000000004967                 setz    bpl
.text:000000000000496B                 or      ebp, [rbx+4]
.text:000000000000496E                 lea     r10, [rbx+8]
.text:0000000000004972                 sub     rsp, 8
.text:0000000000004976                 mov     r8d, [rbx]
.text:0000000000004979                 mov     rcx, r15
.text:000000000000497C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004980                 push    qword ptr [rbx+30h]
.text:0000000000004983                 mov     rdx, r14
.text:0000000000004986                 push    qword ptr [rbx+28h]
.text:0000000000004989                 push    r10
.text:000000000000498B                 xor     esi, esi
.text:000000000000498D                 mov     r9d, ebp
.text:0000000000004990                 xor     edi, edi
.text:0000000000004992                 mov     [rsp+88h+var_48], r10
.text:0000000000004997                 call    quotearg_buffer_restyled
.text:000000000000499C                 lea     rsi, [rax+1]
.text:00000000000049A0                 mov     [rsp+88h+var_40], rax
.text:00000000000049A5                 add     rsp, 20h
.text:00000000000049A9                 mov     rdi, rsi
.text:00000000000049AC                 mov     [rsp+68h+var_50], rsi
.text:00000000000049B1                 call    xmalloc
.text:00000000000049B6                 mov     [rsp+68h+var_58], rax
.text:00000000000049BB                 sub     rsp, 8
.text:00000000000049BF                 push    qword ptr [rbx+30h]
.text:00000000000049C2                 push    qword ptr [rbx+28h]
.text:00000000000049C5                 mov     r10, [rsp+80h+var_48]
.text:00000000000049CA                 mov     r9d, ebp
.text:00000000000049CD                 mov     r8d, [rbx]
.text:00000000000049D0                 mov     rcx, r15
.text:00000000000049D3                 mov     rdx, r14
.text:00000000000049D6                 mov     rdi, rax
.text:00000000000049D9                 push    r10
.text:00000000000049DB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000049E0                 call    quotearg_buffer_restyled
.text:00000000000049E5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000049E9                 add     rsp, 20h
.text:00000000000049ED                 test    r12, r12
.text:00000000000049F0                 mov     [r13+0], eax
.text:00000000000049F4                 jz      short loc_49FF
.text:00000000000049F6                 mov     r11, [rsp+68h+var_40]
.text:00000000000049FB                 mov     [r12], r11
.text:00000000000049FF
.text:00000000000049FF loc_49FF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000049FF                 mov     rax, [rsp+68h+var_58]
.text:0000000000004A04                 add     rsp, 38h
.text:0000000000004A08                 pop     rbx
.text:0000000000004A09                 pop     rbp
.text:0000000000004A0A                 pop     r12
.text:0000000000004A0C                 pop     r13
.text:0000000000004A0E                 pop     r14
.text:0000000000004A10                 pop     r15
.text:0000000000004A12                 retn
.text:0000000000004A12 ; } // starts at 4930
.text:0000000000004A12 quotearg_alloc_mem endp
.text:0000000000004A12
.text:0000000000004A12 ; ---------------------------------------------------------------------------
.text:0000000000004A13                 align 20h
.text:0000000000004A20
.text:0000000000004A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A20
.text:0000000000004A20
.text:0000000000004A20                 public quotearg_alloc
.text:0000000000004A20 quotearg_alloc  proc near
.text:0000000000004A20 ; __unwind {
.text:0000000000004A20                 mov     rcx, rdx
.text:0000000000004A23                 xor     edx, edx
.text:0000000000004A25                 jmp     quotearg_alloc_mem
.text:0000000000004A25 ; } // starts at 4A20
.text:0000000000004A25 quotearg_alloc  endp
.text:0000000000004A25
.text:0000000000004A25 ; ---------------------------------------------------------------------------
.text:0000000000004A2A                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30 ; Attributes: info_from_lumina
.text:0000000000004A30
.text:0000000000004A30 ; void __cdecl quotearg_free()
.text:0000000000004A30                 public quotearg_free
.text:0000000000004A30 quotearg_free   proc near
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 mov     eax, cs:nslots
.text:0000000000004A36                 push    r12
.text:0000000000004A38                 mov     r12, cs:slotvec
.text:0000000000004A3F                 push    rbp
.text:0000000000004A40                 push    rbx
.text:0000000000004A41                 cmp     eax, 1
.text:0000000000004A44                 jle     short loc_4A71
.text:0000000000004A46                 sub     eax, 2
.text:0000000000004A49                 lea     rbx, [r12+18h]
.text:0000000000004A4E                 shl     rax, 4
.text:0000000000004A52                 lea     rbp, [r12+rax+28h]
.text:0000000000004A57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004A60                 mov     rdi, [rbx]      ; ptr
.text:0000000000004A63                 add     rbx, 10h
.text:0000000000004A67                 call    _free
.text:0000000000004A6C                 cmp     rbx, rbp
.text:0000000000004A6F                 jnz     short loc_4A60
.text:0000000000004A71
.text:0000000000004A71 loc_4A71:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004A71                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004A76                 lea     rbx, slot0
.text:0000000000004A7D                 cmp     rdi, rbx
.text:0000000000004A80                 jz      short loc_4A99
.text:0000000000004A82                 call    _free
.text:0000000000004A87                 mov     cs:slotvec0, 100h
.text:0000000000004A92                 mov     cs:off_209078, rbx
.text:0000000000004A99
.text:0000000000004A99 loc_4A99:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004A99                 lea     rbx, slotvec0
.text:0000000000004AA0                 cmp     r12, rbx
.text:0000000000004AA3                 jz      short loc_4AB4
.text:0000000000004AA5                 mov     rdi, r12        ; ptr
.text:0000000000004AA8                 call    _free
.text:0000000000004AAD                 mov     cs:slotvec, rbx
.text:0000000000004AB4
.text:0000000000004AB4 loc_4AB4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004AB4                 pop     rbx
.text:0000000000004AB5                 mov     cs:nslots, 1
.text:0000000000004ABF                 pop     rbp
.text:0000000000004AC0                 pop     r12
.text:0000000000004AC2                 retn
.text:0000000000004AC2 ; } // starts at 4A30
.text:0000000000004AC2 quotearg_free   endp
.text:0000000000004AC2
.text:0000000000004AC2 ; ---------------------------------------------------------------------------
.text:0000000000004AC3                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public quotearg_n
.text:0000000000004AD0 quotearg_n      proc near
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 lea     rcx, default_quoting_options
.text:0000000000004AD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ADE                 jmp     quotearg_n_options
.text:0000000000004ADE ; } // starts at 4AD0
.text:0000000000004ADE quotearg_n      endp
.text:0000000000004ADE
.text:0000000000004ADE ; ---------------------------------------------------------------------------
.text:0000000000004AE3                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0
.text:0000000000004AF0                 public quotearg_n_mem
.text:0000000000004AF0 quotearg_n_mem  proc near
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 lea     rcx, default_quoting_options
.text:0000000000004AF7                 jmp     quotearg_n_options
.text:0000000000004AF7 ; } // starts at 4AF0
.text:0000000000004AF7 quotearg_n_mem  endp
.text:0000000000004AF7
.text:0000000000004AF7 ; ---------------------------------------------------------------------------
.text:0000000000004AFC                 align 20h
.text:0000000000004B00
.text:0000000000004B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B00
.text:0000000000004B00
.text:0000000000004B00                 public quotearg
.text:0000000000004B00 quotearg        proc near
.text:0000000000004B00 ; __unwind {
.text:0000000000004B00                 lea     rcx, default_quoting_options
.text:0000000000004B07                 mov     rsi, rdi
.text:0000000000004B0A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B11                 xor     edi, edi
.text:0000000000004B13                 jmp     quotearg_n_options
.text:0000000000004B13 ; } // starts at 4B00
.text:0000000000004B13 quotearg        endp
.text:0000000000004B13
.text:0000000000004B13 ; ---------------------------------------------------------------------------
.text:0000000000004B18                 align 20h
.text:0000000000004B20
.text:0000000000004B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B20
.text:0000000000004B20
.text:0000000000004B20                 public quotearg_mem
.text:0000000000004B20 quotearg_mem    proc near
.text:0000000000004B20 ; __unwind {
.text:0000000000004B20                 lea     rcx, default_quoting_options
.text:0000000000004B27                 mov     rdx, rsi
.text:0000000000004B2A                 mov     rsi, rdi
.text:0000000000004B2D                 xor     edi, edi
.text:0000000000004B2F                 jmp     quotearg_n_options
.text:0000000000004B2F ; } // starts at 4B20
.text:0000000000004B2F quotearg_mem    endp
.text:0000000000004B2F
.text:0000000000004B2F ; ---------------------------------------------------------------------------
.text:0000000000004B34                 align 20h
.text:0000000000004B40
.text:0000000000004B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B40
.text:0000000000004B40 ; Attributes: info_from_lumina
.text:0000000000004B40
.text:0000000000004B40 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004B40                 public quotearg_n_style
.text:0000000000004B40 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004B40                                         ; argmatch_invalid+40↓p
.text:0000000000004B40
.text:0000000000004B40 var_48          = dword ptr -48h
.text:0000000000004B40 var_44          = qword ptr -44h
.text:0000000000004B40 var_3C          = qword ptr -3Ch
.text:0000000000004B40 var_34          = qword ptr -34h
.text:0000000000004B40 var_2C          = qword ptr -2Ch
.text:0000000000004B40 var_24          = qword ptr -24h
.text:0000000000004B40 var_1C          = qword ptr -1Ch
.text:0000000000004B40 var_14          = dword ptr -14h
.text:0000000000004B40 var_10          = qword ptr -10h
.text:0000000000004B40
.text:0000000000004B40 ; __unwind {
.text:0000000000004B40                 sub     rsp, 48h
.text:0000000000004B44                 mov     rax, rdx
.text:0000000000004B47                 mov     rdx, fs:28h
.text:0000000000004B50                 mov     [rsp+48h+var_10], rdx
.text:0000000000004B55                 xor     edx, edx
.text:0000000000004B57                 cmp     esi, 0Ah
.text:0000000000004B5A                 jz      short loc_4BC4
.text:0000000000004B5C                 mov     [rsp+48h+var_48], esi
.text:0000000000004B5F                 mov     rcx, rsp
.text:0000000000004B62                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B69                 mov     rsi, rax
.text:0000000000004B6C                 mov     [rsp+48h+var_44], 0
.text:0000000000004B75                 mov     [rsp+48h+var_3C], 0
.text:0000000000004B7E                 mov     [rsp+48h+var_34], 0
.text:0000000000004B87                 mov     [rsp+48h+var_2C], 0
.text:0000000000004B90                 mov     [rsp+48h+var_24], 0
.text:0000000000004B99                 mov     [rsp+48h+var_1C], 0
.text:0000000000004BA2                 mov     [rsp+48h+var_14], 0
.text:0000000000004BAA                 call    quotearg_n_options
.text:0000000000004BAF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004BB4                 xor     rcx, fs:28h
.text:0000000000004BBD                 jnz     short loc_4BC9
.text:0000000000004BBF                 add     rsp, 48h
.text:0000000000004BC3                 retn
.text:0000000000004BC4 ; ---------------------------------------------------------------------------
.text:0000000000004BC4
.text:0000000000004BC4 loc_4BC4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004BC4                 call    _abort
.text:0000000000004BC9 ; ---------------------------------------------------------------------------
.text:0000000000004BC9
.text:0000000000004BC9 loc_4BC9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004BC9                 call    ___stack_chk_fail
.text:0000000000004BC9 ; } // starts at 4B40
.text:0000000000004BC9 quotearg_n_style endp
.text:0000000000004BC9
.text:0000000000004BC9 ; ---------------------------------------------------------------------------
.text:0000000000004BCE                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004BD0                 public quotearg_n_style_mem
.text:0000000000004BD0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004BD0
.text:0000000000004BD0 var_48          = dword ptr -48h
.text:0000000000004BD0 var_44          = qword ptr -44h
.text:0000000000004BD0 var_3C          = qword ptr -3Ch
.text:0000000000004BD0 var_34          = qword ptr -34h
.text:0000000000004BD0 var_2C          = qword ptr -2Ch
.text:0000000000004BD0 var_24          = qword ptr -24h
.text:0000000000004BD0 var_1C          = qword ptr -1Ch
.text:0000000000004BD0 var_14          = dword ptr -14h
.text:0000000000004BD0 var_10          = qword ptr -10h
.text:0000000000004BD0
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 sub     rsp, 48h
.text:0000000000004BD4                 mov     rax, rdx
.text:0000000000004BD7                 mov     rdx, rcx
.text:0000000000004BDA                 mov     rcx, fs:28h
.text:0000000000004BE3                 mov     [rsp+48h+var_10], rcx
.text:0000000000004BE8                 xor     ecx, ecx
.text:0000000000004BEA                 cmp     esi, 0Ah
.text:0000000000004BED                 jz      short loc_4C50
.text:0000000000004BEF                 mov     [rsp+48h+var_48], esi
.text:0000000000004BF2                 mov     rcx, rsp
.text:0000000000004BF5                 mov     rsi, rax
.text:0000000000004BF8                 mov     [rsp+48h+var_44], 0
.text:0000000000004C01                 mov     [rsp+48h+var_3C], 0
.text:0000000000004C0A                 mov     [rsp+48h+var_34], 0
.text:0000000000004C13                 mov     [rsp+48h+var_2C], 0
.text:0000000000004C1C                 mov     [rsp+48h+var_24], 0
.text:0000000000004C25                 mov     [rsp+48h+var_1C], 0
.text:0000000000004C2E                 mov     [rsp+48h+var_14], 0
.text:0000000000004C36                 call    quotearg_n_options
.text:0000000000004C3B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004C40                 xor     rdx, fs:28h
.text:0000000000004C49                 jnz     short loc_4C55
.text:0000000000004C4B                 add     rsp, 48h
.text:0000000000004C4F                 retn
.text:0000000000004C50 ; ---------------------------------------------------------------------------
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004C50                 call    _abort
.text:0000000000004C55 ; ---------------------------------------------------------------------------
.text:0000000000004C55
.text:0000000000004C55 loc_4C55:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004C55                 call    ___stack_chk_fail
.text:0000000000004C55 ; } // starts at 4BD0
.text:0000000000004C55 quotearg_n_style_mem endp
.text:0000000000004C55
.text:0000000000004C55 ; ---------------------------------------------------------------------------
.text:0000000000004C5A                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60
.text:0000000000004C60                 public quotearg_style
.text:0000000000004C60 quotearg_style  proc near
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 mov     rdx, rsi
.text:0000000000004C63                 mov     esi, edi
.text:0000000000004C65                 xor     edi, edi
.text:0000000000004C67                 jmp     quotearg_n_style
.text:0000000000004C67 ; } // starts at 4C60
.text:0000000000004C67 quotearg_style  endp
.text:0000000000004C67
.text:0000000000004C67 ; ---------------------------------------------------------------------------
.text:0000000000004C6C                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70                 public quotearg_style_mem
.text:0000000000004C70 quotearg_style_mem proc near
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 mov     rcx, rdx
.text:0000000000004C73                 mov     rdx, rsi
.text:0000000000004C76                 mov     esi, edi
.text:0000000000004C78                 xor     edi, edi
.text:0000000000004C7A                 jmp     quotearg_n_style_mem
.text:0000000000004C7A ; } // starts at 4C70
.text:0000000000004C7A quotearg_style_mem endp
.text:0000000000004C7A
.text:0000000000004C7A ; ---------------------------------------------------------------------------
.text:0000000000004C7F                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80 ; Attributes: info_from_lumina
.text:0000000000004C80
.text:0000000000004C80 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004C80                 public quotearg_char_mem
.text:0000000000004C80 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004C80                                         ; quotearg_colon+C↓j ...
.text:0000000000004C80
.text:0000000000004C80 var_48          = xmmword ptr -48h
.text:0000000000004C80 var_38          = xmmword ptr -38h
.text:0000000000004C80 var_28          = xmmword ptr -28h
.text:0000000000004C80 var_18          = qword ptr -18h
.text:0000000000004C80 var_10          = qword ptr -10h
.text:0000000000004C80
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 sub     rsp, 48h
.text:0000000000004C84                 mov     ecx, edx
.text:0000000000004C86                 mov     rax, fs:28h
.text:0000000000004C8F                 mov     [rsp+48h+var_10], rax
.text:0000000000004C94                 xor     eax, eax
.text:0000000000004C96                 mov     rax, cs:qword_209250
.text:0000000000004C9D                 mov     r8, rsp
.text:0000000000004CA0                 and     ecx, 1Fh
.text:0000000000004CA3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004CAB                 mov     [rsp+48h+var_18], rax
.text:0000000000004CB0                 mov     eax, edx
.text:0000000000004CB2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004CB6                 shr     al, 5
.text:0000000000004CB9                 movzx   eax, al
.text:0000000000004CBC                 lea     r9, [r8+rax*4+8]
.text:0000000000004CC1                 movdqa  xmm0, cs:xmmword_209230
.text:0000000000004CC9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004CCE                 movdqa  xmm0, cs:xmmword_209240
.text:0000000000004CD6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004CDB                 mov     edx, [r9]
.text:0000000000004CDE                 mov     eax, edx
.text:0000000000004CE0                 shr     eax, cl
.text:0000000000004CE2                 not     eax
.text:0000000000004CE4                 and     eax, 1
.text:0000000000004CE7                 shl     eax, cl
.text:0000000000004CE9                 mov     rcx, r8
.text:0000000000004CEC                 xor     eax, edx
.text:0000000000004CEE                 mov     rdx, rsi
.text:0000000000004CF1                 mov     rsi, rdi
.text:0000000000004CF4                 mov     [r9], eax
.text:0000000000004CF7                 xor     edi, edi
.text:0000000000004CF9                 call    quotearg_n_options
.text:0000000000004CFE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004D03                 xor     rsi, fs:28h
.text:0000000000004D0C                 jnz     short loc_4D13
.text:0000000000004D0E                 add     rsp, 48h
.text:0000000000004D12                 retn
.text:0000000000004D13 ; ---------------------------------------------------------------------------
.text:0000000000004D13
.text:0000000000004D13 loc_4D13:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004D13                 call    ___stack_chk_fail
.text:0000000000004D13 ; } // starts at 4C80
.text:0000000000004D13 quotearg_char_mem endp
.text:0000000000004D13
.text:0000000000004D13 ; ---------------------------------------------------------------------------
.text:0000000000004D18                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20
.text:0000000000004D20                 public quotearg_char
.text:0000000000004D20 quotearg_char   proc near
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 movsx   edx, sil
.text:0000000000004D24                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D2B                 jmp     quotearg_char_mem
.text:0000000000004D2B ; } // starts at 4D20
.text:0000000000004D2B quotearg_char   endp
.text:0000000000004D2B
.text:0000000000004D30
.text:0000000000004D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D30
.text:0000000000004D30
.text:0000000000004D30                 public quotearg_colon
.text:0000000000004D30 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004D30 ; __unwind {
.text:0000000000004D30                 mov     edx, 3Ah ; ':'
.text:0000000000004D35                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D3C                 jmp     quotearg_char_mem
.text:0000000000004D3C ; } // starts at 4D30
.text:0000000000004D3C quotearg_colon  endp
.text:0000000000004D3C
.text:0000000000004D3C ; ---------------------------------------------------------------------------
.text:0000000000004D41                 align 10h
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50
.text:0000000000004D50                 public quotearg_colon_mem
.text:0000000000004D50 quotearg_colon_mem proc near
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 mov     edx, 3Ah ; ':'
.text:0000000000004D55                 jmp     quotearg_char_mem
.text:0000000000004D55 ; } // starts at 4D50
.text:0000000000004D55 quotearg_colon_mem endp
.text:0000000000004D55
.text:0000000000004D55 ; ---------------------------------------------------------------------------
.text:0000000000004D5A                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60 ; Attributes: info_from_lumina
.text:0000000000004D60
.text:0000000000004D60 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004D60                 public quotearg_n_style_colon
.text:0000000000004D60 quotearg_n_style_colon proc near        ; CODE XREF: main+183↑p
.text:0000000000004D60                                         ; sysv_sum_file+17A↑p ...
.text:0000000000004D60
.text:0000000000004D60 var_48          = dword ptr -48h
.text:0000000000004D60 var_44          = qword ptr -44h
.text:0000000000004D60 var_3C          = qword ptr -3Ch
.text:0000000000004D60 var_34          = qword ptr -34h
.text:0000000000004D60 var_2C          = qword ptr -2Ch
.text:0000000000004D60 var_24          = qword ptr -24h
.text:0000000000004D60 var_1C          = qword ptr -1Ch
.text:0000000000004D60 var_14          = dword ptr -14h
.text:0000000000004D60 var_10          = qword ptr -10h
.text:0000000000004D60
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 sub     rsp, 48h
.text:0000000000004D64                 mov     rax, rdx
.text:0000000000004D67                 mov     rdx, fs:28h
.text:0000000000004D70                 mov     [rsp+48h+var_10], rdx
.text:0000000000004D75                 xor     edx, edx
.text:0000000000004D77                 cmp     esi, 0Ah
.text:0000000000004D7A                 jz      short loc_4DE4
.text:0000000000004D7C                 mov     [rsp+48h+var_48], esi
.text:0000000000004D7F                 mov     rcx, rsp
.text:0000000000004D82                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D89                 mov     rsi, rax
.text:0000000000004D8C                 mov     [rsp+48h+var_44], 0
.text:0000000000004D95                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004D9E                 mov     [rsp+48h+var_34], 0
.text:0000000000004DA7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004DB0                 mov     [rsp+48h+var_24], 0
.text:0000000000004DB9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004DC2                 mov     [rsp+48h+var_14], 0
.text:0000000000004DCA                 call    quotearg_n_options
.text:0000000000004DCF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004DD4                 xor     rcx, fs:28h
.text:0000000000004DDD                 jnz     short loc_4DE9
.text:0000000000004DDF                 add     rsp, 48h
.text:0000000000004DE3                 retn
.text:0000000000004DE4 ; ---------------------------------------------------------------------------
.text:0000000000004DE4
.text:0000000000004DE4 loc_4DE4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004DE4                 call    _abort
.text:0000000000004DE9 ; ---------------------------------------------------------------------------
.text:0000000000004DE9
.text:0000000000004DE9 loc_4DE9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004DE9                 call    ___stack_chk_fail
.text:0000000000004DE9 ; } // starts at 4D60
.text:0000000000004DE9 quotearg_n_style_colon endp
.text:0000000000004DE9
.text:0000000000004DE9 ; ---------------------------------------------------------------------------
.text:0000000000004DEE                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0 ; Attributes: info_from_lumina
.text:0000000000004DF0
.text:0000000000004DF0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004DF0                 public quotearg_n_custom_mem
.text:0000000000004DF0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004DF0                                         ; quotearg_custom+12↓j ...
.text:0000000000004DF0
.text:0000000000004DF0 var_48          = xmmword ptr -48h
.text:0000000000004DF0 var_38          = xmmword ptr -38h
.text:0000000000004DF0 var_28          = xmmword ptr -28h
.text:0000000000004DF0 var_18          = qword ptr -18h
.text:0000000000004DF0 var_10          = qword ptr -10h
.text:0000000000004DF0
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 sub     rsp, 48h
.text:0000000000004DF4                 mov     r9, rcx
.text:0000000000004DF7                 mov     rcx, cs:qword_209250
.text:0000000000004DFE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004E06                 mov     rax, fs:28h
.text:0000000000004E0F                 mov     [rsp+48h+var_10], rax
.text:0000000000004E14                 xor     eax, eax
.text:0000000000004E16                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004E1A                 test    rsi, rsi
.text:0000000000004E1D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004E22                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004E29                 movdqa  xmm0, cs:xmmword_209230
.text:0000000000004E31                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004E36                 movdqa  xmm0, cs:xmmword_209240
.text:0000000000004E3E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004E43                 jz      short loc_4E77
.text:0000000000004E45                 test    rdx, rdx
.text:0000000000004E48                 jz      short loc_4E77
.text:0000000000004E4A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004E4F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004E54                 mov     rcx, rsp
.text:0000000000004E57                 mov     rdx, r8
.text:0000000000004E5A                 mov     rsi, r9
.text:0000000000004E5D                 call    quotearg_n_options
.text:0000000000004E62                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004E67                 xor     rdi, fs:28h
.text:0000000000004E70                 jnz     short loc_4E7C
.text:0000000000004E72                 add     rsp, 48h
.text:0000000000004E76                 retn
.text:0000000000004E77 ; ---------------------------------------------------------------------------
.text:0000000000004E77
.text:0000000000004E77 loc_4E77:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004E77                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004E77                 call    _abort
.text:0000000000004E7C ; ---------------------------------------------------------------------------
.text:0000000000004E7C
.text:0000000000004E7C loc_4E7C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004E7C                 call    ___stack_chk_fail
.text:0000000000004E7C ; } // starts at 4DF0
.text:0000000000004E7C quotearg_n_custom_mem endp
.text:0000000000004E7C
.text:0000000000004E7C ; ---------------------------------------------------------------------------
.text:0000000000004E81                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90
.text:0000000000004E90                 public quotearg_n_custom
.text:0000000000004E90 quotearg_n_custom proc near
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E97                 jmp     quotearg_n_custom_mem
.text:0000000000004E97 ; } // starts at 4E90
.text:0000000000004E97 quotearg_n_custom endp
.text:0000000000004E97
.text:0000000000004E97 ; ---------------------------------------------------------------------------
.text:0000000000004E9C                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0
.text:0000000000004EA0                 public quotearg_custom
.text:0000000000004EA0 quotearg_custom proc near
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 mov     rcx, rdx
.text:0000000000004EA3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EAA                 mov     rdx, rsi
.text:0000000000004EAD                 mov     rsi, rdi
.text:0000000000004EB0                 xor     edi, edi
.text:0000000000004EB2                 jmp     quotearg_n_custom_mem
.text:0000000000004EB2 ; } // starts at 4EA0
.text:0000000000004EB2 quotearg_custom endp
.text:0000000000004EB2
.text:0000000000004EB2 ; ---------------------------------------------------------------------------
.text:0000000000004EB7                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0
.text:0000000000004EC0                 public quotearg_custom_mem
.text:0000000000004EC0 quotearg_custom_mem proc near
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 mov     r8, rcx
.text:0000000000004EC3                 mov     rcx, rdx
.text:0000000000004EC6                 mov     rdx, rsi
.text:0000000000004EC9                 mov     rsi, rdi
.text:0000000000004ECC                 xor     edi, edi
.text:0000000000004ECE                 jmp     quotearg_n_custom_mem
.text:0000000000004ECE ; } // starts at 4EC0
.text:0000000000004ECE quotearg_custom_mem endp
.text:0000000000004ECE
.text:0000000000004ECE ; ---------------------------------------------------------------------------
.text:0000000000004ED3                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0
.text:0000000000004EE0                 public quote_n_mem
.text:0000000000004EE0 quote_n_mem     proc near
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 lea     rcx, quote_quoting_options
.text:0000000000004EE7                 jmp     quotearg_n_options
.text:0000000000004EE7 ; } // starts at 4EE0
.text:0000000000004EE7 quote_n_mem     endp
.text:0000000000004EE7
.text:0000000000004EE7 ; ---------------------------------------------------------------------------
.text:0000000000004EEC                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0                 public quote_mem
.text:0000000000004EF0 quote_mem       proc near
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 lea     rcx, quote_quoting_options
.text:0000000000004EF7                 mov     rdx, rsi
.text:0000000000004EFA                 mov     rsi, rdi
.text:0000000000004EFD                 xor     edi, edi
.text:0000000000004EFF                 jmp     quotearg_n_options
.text:0000000000004EFF ; } // starts at 4EF0
.text:0000000000004EFF quote_mem       endp
.text:0000000000004EFF
.text:0000000000004EFF ; ---------------------------------------------------------------------------
.text:0000000000004F04                 align 10h
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10
.text:0000000000004F10                 public quote_n
.text:0000000000004F10 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↓p
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 lea     rcx, quote_quoting_options
.text:0000000000004F17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F1E                 jmp     quotearg_n_options
.text:0000000000004F1E ; } // starts at 4F10
.text:0000000000004F1E quote_n         endp
.text:0000000000004F1E
.text:0000000000004F1E ; ---------------------------------------------------------------------------
.text:0000000000004F23                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30
.text:0000000000004F30                 public quote
.text:0000000000004F30 quote           proc near               ; CODE XREF: argmatch_valid+5A↓p
.text:0000000000004F30                                         ; argmatch_valid+A9↓p
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 lea     rcx, quote_quoting_options
.text:0000000000004F37                 mov     rsi, rdi
.text:0000000000004F3A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F41                 xor     edi, edi
.text:0000000000004F43                 jmp     quotearg_n_options
.text:0000000000004F43 ; } // starts at 4F30
.text:0000000000004F43 quote           endp
.text:0000000000004F43
.text:0000000000004F43 ; ---------------------------------------------------------------------------
.text:0000000000004F48                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50
.text:0000000000004F50 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000004F50                 public safe_read
.text:0000000000004F50 safe_read       proc near               ; CODE XREF: sysv_sum_file+7A↑p
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 push    r13
.text:0000000000004F52                 push    r12
.text:0000000000004F54                 mov     r13d, edi
.text:0000000000004F57                 push    rbp
.text:0000000000004F58                 push    rbx
.text:0000000000004F59                 mov     r12, rsi
.text:0000000000004F5C                 mov     rbx, rdx
.text:0000000000004F5F                 sub     rsp, 8
.text:0000000000004F63                 nop     dword ptr [rax+rax+00h]
.text:0000000000004F68
.text:0000000000004F68 loc_4F68:                               ; CODE XREF: safe_read+38↓j
.text:0000000000004F68                                         ; safe_read+4D↓j
.text:0000000000004F68                 mov     rdx, rbx        ; nbytes
.text:0000000000004F6B                 mov     rsi, r12        ; buf
.text:0000000000004F6E                 mov     edi, r13d       ; fd
.text:0000000000004F71                 call    _read
.text:0000000000004F76                 test    rax, rax
.text:0000000000004F79                 mov     rbp, rax
.text:0000000000004F7C                 jns     short loc_4FA0
.text:0000000000004F7E                 call    ___errno_location
.text:0000000000004F83                 mov     eax, [rax]
.text:0000000000004F85                 cmp     eax, 4
.text:0000000000004F88                 jz      short loc_4F68
.text:0000000000004F8A                 cmp     rbx, 7FF00000h
.text:0000000000004F91                 jbe     short loc_4FA0
.text:0000000000004F93                 cmp     eax, 16h
.text:0000000000004F96                 jnz     short loc_4FA0
.text:0000000000004F98                 mov     ebx, 7FF00000h
.text:0000000000004F9D                 jmp     short loc_4F68
.text:0000000000004F9D ; ---------------------------------------------------------------------------
.text:0000000000004F9F                 align 20h
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000004FA0                                         ; safe_read+41↑j ...
.text:0000000000004FA0                 add     rsp, 8
.text:0000000000004FA4                 mov     rax, rbp
.text:0000000000004FA7                 pop     rbx
.text:0000000000004FA8                 pop     rbp
.text:0000000000004FA9                 pop     r12
.text:0000000000004FAB                 pop     r13
.text:0000000000004FAD                 retn
.text:0000000000004FAD ; } // starts at 4F50
.text:0000000000004FAD safe_read       endp
.text:0000000000004FAD
.text:0000000000004FAD ; ---------------------------------------------------------------------------
.text:0000000000004FAE                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0
.text:0000000000004FB0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004FB0                 public version_etc_arn
.text:0000000000004FB0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_53EB↓j
.text:0000000000004FB0                                         ; version_etc_va:loc_543B↓p ...
.text:0000000000004FB0
.text:0000000000004FB0 var_58          = qword ptr -58h
.text:0000000000004FB0 var_50          = qword ptr -50h
.text:0000000000004FB0 var_48          = qword ptr -48h
.text:0000000000004FB0 var_40          = qword ptr -40h
.text:0000000000004FB0
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 push    r15
.text:0000000000004FB2                 push    r14
.text:0000000000004FB4                 push    r13
.text:0000000000004FB6                 push    r12
.text:0000000000004FB8                 mov     r12, r9
.text:0000000000004FBB                 push    rbp
.text:0000000000004FBC                 push    rbx
.text:0000000000004FBD                 mov     rbp, rdi
.text:0000000000004FC0                 mov     rbx, r8
.text:0000000000004FC3                 sub     rsp, 28h
.text:0000000000004FC7                 test    rsi, rsi
.text:0000000000004FCA                 jz      loc_50E8
.text:0000000000004FD0                 mov     r8, rdx
.text:0000000000004FD3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004FDA                 mov     r9, rcx
.text:0000000000004FDD                 xor     eax, eax
.text:0000000000004FDF                 mov     rcx, rsi
.text:0000000000004FE2                 mov     esi, 1
.text:0000000000004FE7                 call    ___fprintf_chk
.text:0000000000004FEC
.text:0000000000004FEC loc_4FEC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004FEC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004FF3                 xor     edi, edi        ; domainname
.text:0000000000004FF5                 mov     edx, 5          ; category
.text:0000000000004FFA                 call    _dcgettext
.text:0000000000004FFF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005006                 mov     rcx, rax
.text:0000000000005009                 mov     r8d, 7E3h
.text:000000000000500F                 mov     esi, 1
.text:0000000000005014                 mov     rdi, rbp
.text:0000000000005017                 xor     eax, eax
.text:0000000000005019                 call    ___fprintf_chk
.text:000000000000501E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005025                 xor     edi, edi        ; domainname
.text:0000000000005027                 mov     edx, 5          ; category
.text:000000000000502C                 call    _dcgettext
.text:0000000000005031                 mov     rsi, rbp        ; stream
.text:0000000000005034                 mov     rdi, rax        ; s
.text:0000000000005037                 call    _fputs_unlocked
.text:000000000000503C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005040                 ja      def_5054        ; jumptable 0000000000005054 default case
.text:0000000000005046                 lea     rdx, jpt_5054
.text:000000000000504D                 movsxd  rax, ds:(jpt_5054 - 6F84h)[rdx+r12*4]
.text:0000000000005051                 add     rax, rdx
.text:0000000000005054                 jmp     rax             ; switch jump
.text:0000000000005054 ; ---------------------------------------------------------------------------
.text:0000000000005056                 align 20h
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005060                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:0000000000005060                 mov     r9, [rbx+38h]   ; jumptable 0000000000005054 case 8
.text:0000000000005064                 mov     rax, [rbx+10h]
.text:0000000000005068                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000506F                 mov     r8, [rbx+8]
.text:0000000000005073                 mov     edx, 5          ; category
.text:0000000000005078                 xor     edi, edi        ; domainname
.text:000000000000507A                 mov     r13, [rbx+30h]
.text:000000000000507E                 mov     r12, [rbx+28h]
.text:0000000000005082                 mov     [rsp+58h+var_48], r9
.text:0000000000005087                 mov     r15, [rbx+20h]
.text:000000000000508B                 mov     r14, [rbx+18h]
.text:000000000000508F                 mov     [rsp+58h+var_58], rax
.text:0000000000005093                 mov     [rsp+58h+var_50], r8
.text:0000000000005098                 mov     rbx, [rbx]
.text:000000000000509B                 call    _dcgettext
.text:00000000000050A0                 sub     rsp, 8
.text:00000000000050A4
.text:00000000000050A4 loc_50A4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000050A4                 mov     r9, [rsp+60h+var_48]
.text:00000000000050A9                 mov     rdx, rax
.text:00000000000050AC                 mov     rcx, rbx
.text:00000000000050AF                 mov     esi, 1
.text:00000000000050B4                 mov     rdi, rbp
.text:00000000000050B7                 xor     eax, eax
.text:00000000000050B9                 push    r9
.text:00000000000050BB                 push    r13
.text:00000000000050BD                 push    r12
.text:00000000000050BF                 push    r15
.text:00000000000050C1                 push    r14
.text:00000000000050C3                 mov     r9, [rsp+88h+var_58]
.text:00000000000050C8                 mov     r8, [rsp+88h+var_50]
.text:00000000000050CD                 call    ___fprintf_chk
.text:00000000000050D2                 add     rsp, 30h
.text:00000000000050D6
.text:00000000000050D6 loc_50D6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050D6                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:00000000000050D6                 add     rsp, 28h        ; jumptable 0000000000005054 case 0
.text:00000000000050DA                 pop     rbx
.text:00000000000050DB                 pop     rbp
.text:00000000000050DC                 pop     r12
.text:00000000000050DE                 pop     r13
.text:00000000000050E0                 pop     r14
.text:00000000000050E2                 pop     r15
.text:00000000000050E4                 retn
.text:00000000000050E4 ; ---------------------------------------------------------------------------
.text:00000000000050E5                 align 8
.text:00000000000050E8
.text:00000000000050E8 loc_50E8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000050E8                 mov     r8, rcx
.text:00000000000050EB                 mov     rcx, rdx
.text:00000000000050EE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000050F5                 mov     esi, 1
.text:00000000000050FA                 xor     eax, eax
.text:00000000000050FC                 call    ___fprintf_chk
.text:0000000000005101                 jmp     loc_4FEC
.text:0000000000005101 ; ---------------------------------------------------------------------------
.text:0000000000005106                 align 10h
.text:0000000000005110
.text:0000000000005110 loc_5110:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005110                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:0000000000005110                 mov     r10, [rbx+40h]  ; jumptable 0000000000005054 case 9
.text:0000000000005114                 mov     r9, [rbx+38h]
.text:0000000000005118                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000511F                 mov     rax, [rbx+10h]
.text:0000000000005123                 mov     r8, [rbx+8]
.text:0000000000005127                 mov     edx, 5          ; category
.text:000000000000512C                 mov     r13, [rbx+30h]
.text:0000000000005130                 mov     r12, [rbx+28h]
.text:0000000000005134                 mov     r15, [rbx+20h]
.text:0000000000005138                 mov     r14, [rbx+18h]
.text:000000000000513C                 mov     rbx, [rbx]
.text:000000000000513F                 mov     [rsp+58h+var_40], r10
.text:0000000000005144                 mov     [rsp+58h+var_48], r9
.text:0000000000005149                 mov     [rsp+58h+var_58], rax
.text:000000000000514D                 mov     [rsp+58h+var_50], r8
.text:0000000000005152
.text:0000000000005152 loc_5152:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005152                 xor     edi, edi        ; domainname
.text:0000000000005154                 call    _dcgettext
.text:0000000000005159                 mov     r10, [rsp+58h+var_40]
.text:000000000000515E                 push    r10
.text:0000000000005160                 jmp     loc_50A4
.text:0000000000005160 ; ---------------------------------------------------------------------------
.text:0000000000005165                 align 8
.text:0000000000005168
.text:0000000000005168 loc_5168:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005168                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:0000000000005168                 mov     rbx, [rbx]      ; jumptable 0000000000005054 case 1
.text:000000000000516B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005172                 mov     edx, 5          ; category
.text:0000000000005177                 xor     edi, edi        ; domainname
.text:0000000000005179                 call    _dcgettext
.text:000000000000517E                 add     rsp, 28h
.text:0000000000005182                 mov     rcx, rbx
.text:0000000000005185                 mov     rdi, rbp
.text:0000000000005188                 pop     rbx
.text:0000000000005189                 pop     rbp
.text:000000000000518A                 pop     r12
.text:000000000000518C                 pop     r13
.text:000000000000518E                 pop     r14
.text:0000000000005190                 pop     r15
.text:0000000000005192                 mov     rdx, rax
.text:0000000000005195                 mov     esi, 1
.text:000000000000519A                 xor     eax, eax
.text:000000000000519C                 jmp     ___fprintf_chk
.text:000000000000519C ; ---------------------------------------------------------------------------
.text:00000000000051A1                 align 8
.text:00000000000051A8
.text:00000000000051A8 loc_51A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051A8                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:00000000000051A8                 mov     r12, [rbx+8]    ; jumptable 0000000000005054 case 2
.text:00000000000051AC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000051B3                 mov     rbx, [rbx]
.text:00000000000051B6                 mov     edx, 5          ; category
.text:00000000000051BB                 xor     edi, edi        ; domainname
.text:00000000000051BD                 call    _dcgettext
.text:00000000000051C2                 add     rsp, 28h
.text:00000000000051C6                 mov     r8, r12
.text:00000000000051C9                 mov     rcx, rbx
.text:00000000000051CC                 mov     rdi, rbp
.text:00000000000051CF                 mov     rdx, rax
.text:00000000000051D2                 mov     esi, 1
.text:00000000000051D7                 pop     rbx
.text:00000000000051D8                 pop     rbp
.text:00000000000051D9                 pop     r12
.text:00000000000051DB                 pop     r13
.text:00000000000051DD                 pop     r14
.text:00000000000051DF                 pop     r15
.text:00000000000051E1                 xor     eax, eax
.text:00000000000051E3                 jmp     ___fprintf_chk
.text:00000000000051E3 ; ---------------------------------------------------------------------------
.text:00000000000051E8                 align 10h
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051F0                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:00000000000051F0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005054 case 3
.text:00000000000051F4                 mov     r12, [rbx+8]
.text:00000000000051F8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000051FF                 mov     rbx, [rbx]
.text:0000000000005202                 mov     edx, 5          ; category
.text:0000000000005207                 xor     edi, edi        ; domainname
.text:0000000000005209                 call    _dcgettext
.text:000000000000520E                 add     rsp, 28h
.text:0000000000005212                 mov     r9, r13
.text:0000000000005215                 mov     r8, r12
.text:0000000000005218                 mov     rcx, rbx
.text:000000000000521B                 mov     rdi, rbp
.text:000000000000521E                 mov     rdx, rax
.text:0000000000005221                 pop     rbx
.text:0000000000005222                 pop     rbp
.text:0000000000005223                 pop     r12
.text:0000000000005225                 pop     r13
.text:0000000000005227                 pop     r14
.text:0000000000005229                 pop     r15
.text:000000000000522B                 mov     esi, 1
.text:0000000000005230                 xor     eax, eax
.text:0000000000005232                 jmp     ___fprintf_chk
.text:0000000000005232 ; ---------------------------------------------------------------------------
.text:0000000000005237                 align 20h
.text:0000000000005240
.text:0000000000005240 loc_5240:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005240                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:0000000000005240                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005054 case 4
.text:0000000000005247                 mov     edx, 5          ; category
.text:000000000000524C                 xor     edi, edi        ; domainname
.text:000000000000524E                 mov     r14, [rbx+18h]
.text:0000000000005252                 mov     r13, [rbx+10h]
.text:0000000000005256                 mov     r12, [rbx+8]
.text:000000000000525A                 mov     rbx, [rbx]
.text:000000000000525D                 call    _dcgettext
.text:0000000000005262                 sub     rsp, 8
.text:0000000000005266
.text:0000000000005266 loc_5266:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005266                 push    r14
.text:0000000000005268                 mov     rdx, rax
.text:000000000000526B                 mov     r9, r13
.text:000000000000526E                 mov     r8, r12
.text:0000000000005271                 mov     rcx, rbx
.text:0000000000005274                 mov     rdi, rbp
.text:0000000000005277                 mov     esi, 1
.text:000000000000527C                 xor     eax, eax
.text:000000000000527E                 call    ___fprintf_chk
.text:0000000000005283                 pop     rax
.text:0000000000005284                 pop     rdx
.text:0000000000005285                 add     rsp, 28h
.text:0000000000005289                 pop     rbx
.text:000000000000528A                 pop     rbp
.text:000000000000528B                 pop     r12
.text:000000000000528D                 pop     r13
.text:000000000000528F                 pop     r14
.text:0000000000005291                 pop     r15
.text:0000000000005293                 retn
.text:0000000000005293 ; ---------------------------------------------------------------------------
.text:0000000000005294                 align 8
.text:0000000000005298
.text:0000000000005298 loc_5298:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005298                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:0000000000005298                 mov     r15, [rbx+20h]  ; jumptable 0000000000005054 case 5
.text:000000000000529C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000052A3                 mov     edx, 5          ; category
.text:00000000000052A8                 xor     edi, edi        ; domainname
.text:00000000000052AA                 mov     r14, [rbx+18h]
.text:00000000000052AE                 mov     r13, [rbx+10h]
.text:00000000000052B2                 mov     r12, [rbx+8]
.text:00000000000052B6                 mov     rbx, [rbx]
.text:00000000000052B9                 call    _dcgettext
.text:00000000000052BE                 push    r15
.text:00000000000052C0                 jmp     short loc_5266
.text:00000000000052C0 ; ---------------------------------------------------------------------------
.text:00000000000052C2                 align 8
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000052C8                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:00000000000052C8                 mov     r8, [rbx+8]     ; jumptable 0000000000005054 case 6
.text:00000000000052CC                 mov     r12, [rbx+28h]
.text:00000000000052D0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000052D7                 mov     r15, [rbx+20h]
.text:00000000000052DB                 mov     r14, [rbx+18h]
.text:00000000000052DF                 mov     edx, 5          ; category
.text:00000000000052E4                 mov     r13, [rbx+10h]
.text:00000000000052E8                 xor     edi, edi        ; domainname
.text:00000000000052EA                 mov     rbx, [rbx]
.text:00000000000052ED                 mov     [rsp+58h+var_58], r8
.text:00000000000052F1                 call    _dcgettext
.text:00000000000052F6                 sub     rsp, 8
.text:00000000000052FA                 mov     r9, r13
.text:00000000000052FD                 push    r12
.text:00000000000052FF                 push    r15
.text:0000000000005301                 push    r14
.text:0000000000005303
.text:0000000000005303 loc_5303:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005303                 mov     r8, [rsp+78h+var_58]
.text:0000000000005308                 mov     rcx, rbx
.text:000000000000530B                 mov     rdx, rax
.text:000000000000530E                 mov     rdi, rbp
.text:0000000000005311                 mov     esi, 1
.text:0000000000005316                 xor     eax, eax
.text:0000000000005318                 call    ___fprintf_chk
.text:000000000000531D                 add     rsp, 20h
.text:0000000000005321                 add     rsp, 28h
.text:0000000000005325                 pop     rbx
.text:0000000000005326                 pop     rbp
.text:0000000000005327                 pop     r12
.text:0000000000005329                 pop     r13
.text:000000000000532B                 pop     r14
.text:000000000000532D                 pop     r15
.text:000000000000532F                 retn
.text:0000000000005330 ; ---------------------------------------------------------------------------
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005330                                         ; DATA XREF: .rodata:jpt_5054↓o
.text:0000000000005330                 mov     r9, [rbx+10h]   ; jumptable 0000000000005054 case 7
.text:0000000000005334                 mov     r13, [rbx+30h]
.text:0000000000005338                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000533F                 mov     r12, [rbx+28h]
.text:0000000000005343                 mov     r15, [rbx+20h]
.text:0000000000005347                 mov     edx, 5          ; category
.text:000000000000534C                 mov     r14, [rbx+18h]
.text:0000000000005350                 mov     r8, [rbx+8]
.text:0000000000005354                 xor     edi, edi        ; domainname
.text:0000000000005356                 mov     [rsp+58h+var_50], r9
.text:000000000000535B                 mov     rbx, [rbx]
.text:000000000000535E                 mov     [rsp+58h+var_58], r8
.text:0000000000005362                 call    _dcgettext
.text:0000000000005367                 push    r13
.text:0000000000005369                 push    r12
.text:000000000000536B                 push    r15
.text:000000000000536D                 push    r14
.text:000000000000536F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005374                 jmp     short loc_5303
.text:0000000000005374 ; ---------------------------------------------------------------------------
.text:0000000000005376                 align 20h
.text:0000000000005380
.text:0000000000005380 def_5054:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005380                 mov     r10, [rbx+40h]  ; jumptable 0000000000005054 default case
.text:0000000000005384                 mov     r9, [rbx+38h]
.text:0000000000005388                 mov     edx, 5
.text:000000000000538D                 mov     rax, [rbx+10h]
.text:0000000000005391                 mov     r8, [rbx+8]
.text:0000000000005395                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000539C                 mov     r13, [rbx+30h]
.text:00000000000053A0                 mov     r12, [rbx+28h]
.text:00000000000053A4                 mov     r15, [rbx+20h]
.text:00000000000053A8                 mov     r14, [rbx+18h]
.text:00000000000053AC                 mov     [rsp+58h+var_40], r10
.text:00000000000053B1                 mov     [rsp+58h+var_48], r9
.text:00000000000053B6                 mov     [rsp+58h+var_58], rax
.text:00000000000053BA                 mov     [rsp+58h+var_50], r8
.text:00000000000053BF                 mov     rbx, [rbx]
.text:00000000000053C2                 jmp     loc_5152
.text:00000000000053C2 ; } // starts at 4FB0
.text:00000000000053C2 version_etc_arn endp
.text:00000000000053C2
.text:00000000000053C2 ; ---------------------------------------------------------------------------
.text:00000000000053C7                 align 10h
.text:00000000000053D0
.text:00000000000053D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053D0
.text:00000000000053D0 ; Attributes: info_from_lumina
.text:00000000000053D0
.text:00000000000053D0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000053D0                 public version_etc_ar
.text:00000000000053D0 version_etc_ar  proc near
.text:00000000000053D0 ; __unwind {
.text:00000000000053D0                 xor     r9d, r9d
.text:00000000000053D3                 cmp     qword ptr [r8], 0
.text:00000000000053D7                 jz      short loc_53EB
.text:00000000000053D9                 nop     dword ptr [rax+00000000h]
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000053E0                 add     r9, 1
.text:00000000000053E4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000053E9                 jnz     short loc_53E0
.text:00000000000053EB
.text:00000000000053EB loc_53EB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000053EB                 jmp     version_etc_arn
.text:00000000000053EB ; } // starts at 53D0
.text:00000000000053EB version_etc_ar  endp
.text:00000000000053EB
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0 ; Attributes: info_from_lumina
.text:00000000000053F0
.text:00000000000053F0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000053F0                 public version_etc_va
.text:00000000000053F0 version_etc_va  proc near
.text:00000000000053F0
.text:00000000000053F0 authtab         = qword ptr -68h
.text:00000000000053F0 var_10          = qword ptr -10h
.text:00000000000053F0
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 sub     rsp, 68h
.text:00000000000053F4                 mov     r10, r8
.text:00000000000053F7                 xor     r9d, r9d
.text:00000000000053FA                 mov     rax, fs:28h
.text:0000000000005403                 mov     [rsp+68h+var_10], rax
.text:0000000000005408                 xor     eax, eax
.text:000000000000540A                 mov     r8, rsp
.text:000000000000540D                 nop     dword ptr [rax]
.text:0000000000005410
.text:0000000000005410 loc_5410:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005410                 mov     eax, [r10]
.text:0000000000005413                 cmp     eax, 2Fh ; '/'
.text:0000000000005416                 ja      short loc_545A
.text:0000000000005418                 mov     r11d, eax
.text:000000000000541B                 add     r11, [r10+10h]
.text:000000000000541F                 add     eax, 8
.text:0000000000005422                 mov     [r10], eax
.text:0000000000005425
.text:0000000000005425 loc_5425:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005425                 mov     rax, [r11]
.text:0000000000005428                 test    rax, rax
.text:000000000000542B                 mov     [r8+r9*8], rax
.text:000000000000542F                 jz      short loc_543B
.text:0000000000005431                 add     r9, 1
.text:0000000000005435                 cmp     r9, 0Ah
.text:0000000000005439                 jnz     short loc_5410
.text:000000000000543B
.text:000000000000543B loc_543B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000543B                 call    version_etc_arn
.text:0000000000005440                 mov     rax, [rsp+68h+var_10]
.text:0000000000005445                 xor     rax, fs:28h
.text:000000000000544E                 jnz     short loc_5455
.text:0000000000005450                 add     rsp, 68h
.text:0000000000005454                 retn
.text:0000000000005455 ; ---------------------------------------------------------------------------
.text:0000000000005455
.text:0000000000005455 loc_5455:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005455                 call    ___stack_chk_fail
.text:000000000000545A ; ---------------------------------------------------------------------------
.text:000000000000545A
.text:000000000000545A loc_545A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000545A                 mov     r11, [r10+8]
.text:000000000000545E                 lea     rax, [r11+8]
.text:0000000000005462                 mov     [r10+8], rax
.text:0000000000005466                 jmp     short loc_5425
.text:0000000000005466 ; } // starts at 53F0
.text:0000000000005466 version_etc_va  endp
.text:0000000000005466
.text:0000000000005466 ; ---------------------------------------------------------------------------
.text:0000000000005468                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470 ; Attributes: info_from_lumina
.text:0000000000005470
.text:0000000000005470 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005470                 public version_etc
.text:0000000000005470 version_etc     proc near               ; CODE XREF: main+10D↑p
.text:0000000000005470
.text:0000000000005470 var_C0          = dword ptr -0C0h
.text:0000000000005470 var_B8          = qword ptr -0B8h
.text:0000000000005470 var_B0          = qword ptr -0B0h
.text:0000000000005470 var_A8          = byte ptr -0A8h
.text:0000000000005470 var_50          = qword ptr -50h
.text:0000000000005470 var_48          = byte ptr -48h
.text:0000000000005470 var_28          = qword ptr -28h
.text:0000000000005470 var_20          = qword ptr -20h
.text:0000000000005470 arg_0           = byte ptr  8
.text:0000000000005470
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 push    rbp
.text:0000000000005471                 push    rbx
.text:0000000000005472                 mov     r10d, 20h ; ' '
.text:0000000000005478                 xor     r11d, r11d
.text:000000000000547B                 sub     rsp, 0B8h
.text:0000000000005482                 mov     rax, fs:28h
.text:000000000000548B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005490                 xor     eax, eax
.text:0000000000005492                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000549A                 mov     [rsp+0C8h+var_28], r8
.text:00000000000054A2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000054AA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000054AF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000054B7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000054BF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000054C4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000054CC                 xor     r9d, r9d
.text:00000000000054CF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000054D4                 mov     rbp, rax
.text:00000000000054D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000054E0
.text:00000000000054E0 loc_54E0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000054E0                 cmp     r10d, 2Fh ; '/'
.text:00000000000054E4                 ja      short loc_553C
.text:00000000000054E6                 mov     eax, r10d
.text:00000000000054E9                 mov     r11d, 1
.text:00000000000054EF                 add     r10d, 8
.text:00000000000054F3                 add     rax, rbp
.text:00000000000054F6
.text:00000000000054F6 loc_54F6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000054F6                 mov     rax, [rax]
.text:00000000000054F9                 test    rax, rax
.text:00000000000054FC                 mov     [r8+r9*8], rax
.text:0000000000005500                 jz      short loc_550C
.text:0000000000005502                 add     r9, 1
.text:0000000000005506                 cmp     r9, 0Ah
.text:000000000000550A                 jnz     short loc_54E0
.text:000000000000550C
.text:000000000000550C loc_550C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000550C                 test    r11b, r11b
.text:000000000000550F                 jnz     short loc_5535
.text:0000000000005511
.text:0000000000005511 loc_5511:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005511                 call    version_etc_arn
.text:0000000000005516                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000551B                 xor     rax, fs:28h
.text:0000000000005524                 jnz     short loc_5530
.text:0000000000005526                 add     rsp, 0B8h
.text:000000000000552D                 pop     rbx
.text:000000000000552E                 pop     rbp
.text:000000000000552F                 retn
.text:0000000000005530 ; ---------------------------------------------------------------------------
.text:0000000000005530
.text:0000000000005530 loc_5530:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005530                 call    ___stack_chk_fail
.text:0000000000005535 ; ---------------------------------------------------------------------------
.text:0000000000005535
.text:0000000000005535 loc_5535:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005535                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000553A                 jmp     short loc_5511
.text:000000000000553C ; ---------------------------------------------------------------------------
.text:000000000000553C
.text:000000000000553C loc_553C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000553C                 mov     rax, rbx
.text:000000000000553F                 add     rbx, 8
.text:0000000000005543                 jmp     short loc_54F6
.text:0000000000005543 ; } // starts at 5470
.text:0000000000005543 version_etc     endp
.text:0000000000005543
.text:0000000000005543 ; ---------------------------------------------------------------------------
.text:0000000000005545                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005550                 public emit_bug_reporting_address
.text:0000000000005550 emit_bug_reporting_address proc near
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 push    rbx
.text:0000000000005551                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005558                 mov     edx, 5          ; category
.text:000000000000555D                 xor     edi, edi        ; domainname
.text:000000000000555F                 call    _dcgettext
.text:0000000000005564                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000556B                 mov     rsi, rax
.text:000000000000556E                 mov     edi, 1
.text:0000000000005573                 xor     eax, eax
.text:0000000000005575                 call    ___printf_chk
.text:000000000000557A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005581                 mov     edx, 5          ; category
.text:0000000000005586                 xor     edi, edi        ; domainname
.text:0000000000005588                 call    _dcgettext
.text:000000000000558D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005594                 lea     rdx, unk_6409
.text:000000000000559B                 mov     rsi, rax
.text:000000000000559E                 mov     edi, 1
.text:00000000000055A3                 xor     eax, eax
.text:00000000000055A5                 call    ___printf_chk
.text:00000000000055AA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000055B1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000055B8                 xor     edi, edi        ; domainname
.text:00000000000055BA                 mov     edx, 5          ; category
.text:00000000000055BF                 call    _dcgettext
.text:00000000000055C4                 mov     rsi, rbx        ; stream
.text:00000000000055C7                 mov     rdi, rax        ; s
.text:00000000000055CA                 pop     rbx
.text:00000000000055CB                 jmp     _fputs_unlocked
.text:00000000000055CB ; } // starts at 5550
.text:00000000000055CB emit_bug_reporting_address endp
.text:00000000000055CB
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0
.text:00000000000055D0                 public xmalloc
.text:00000000000055D0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000055D0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 push    rbx
.text:00000000000055D1                 mov     rbx, rdi
.text:00000000000055D4                 call    _malloc
.text:00000000000055D9                 test    rax, rax
.text:00000000000055DC                 jnz     short loc_55E3
.text:00000000000055DE                 test    rbx, rbx
.text:00000000000055E1                 jnz     short loc_55E5
.text:00000000000055E3
.text:00000000000055E3 loc_55E3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000055E3                 pop     rbx
.text:00000000000055E4                 retn
.text:00000000000055E5 ; ---------------------------------------------------------------------------
.text:00000000000055E5
.text:00000000000055E5 loc_55E5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000055E5                 call    xalloc_die
.text:00000000000055E5 ; } // starts at 55D0
.text:00000000000055E5 xmalloc         endp
.text:00000000000055E5
.text:00000000000055E5 ; ---------------------------------------------------------------------------
.text:00000000000055EA                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0 ; Attributes: info_from_lumina
.text:00000000000055F0
.text:00000000000055F0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000055F0                 public xnmalloc
.text:00000000000055F0 xnmalloc        proc near
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 mov     rax, rdi
.text:00000000000055F3                 mul     rsi
.text:00000000000055F6                 mov     rdi, rax
.text:00000000000055F9                 seto    al
.text:00000000000055FC                 test    rdi, rdi
.text:00000000000055FF                 js      short loc_560B
.text:0000000000005601                 movzx   eax, al
.text:0000000000005604                 test    rax, rax
.text:0000000000005607                 jnz     short loc_560B
.text:0000000000005609                 jmp     short xmalloc
.text:000000000000560B ; ---------------------------------------------------------------------------
.text:000000000000560B
.text:000000000000560B loc_560B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000560B                                         ; xnmalloc+17↑j
.text:000000000000560B                 sub     rsp, 8
.text:000000000000560F                 call    xalloc_die
.text:000000000000560F ; } // starts at 55F0
.text:000000000000560F xnmalloc        endp
.text:000000000000560F
.text:000000000000560F ; ---------------------------------------------------------------------------
.text:0000000000005614                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public xcharalloc
.text:0000000000005620 xcharalloc      proc near
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 jmp     short xmalloc
.text:0000000000005620 ; } // starts at 5620
.text:0000000000005620 xcharalloc      endp
.text:0000000000005620
.text:0000000000005620 ; ---------------------------------------------------------------------------
.text:0000000000005622                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005630                 public xrealloc
.text:0000000000005630 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005630                                         ; quotearg_n_options+182↑p ...
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 test    rsi, rsi
.text:0000000000005633                 push    rbx
.text:0000000000005634                 mov     rbx, rsi
.text:0000000000005637                 jnz     short loc_563E
.text:0000000000005639                 test    rdi, rdi
.text:000000000000563C                 jnz     short loc_5658
.text:000000000000563E
.text:000000000000563E loc_563E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000563E                 mov     rsi, rbx        ; size
.text:0000000000005641                 call    _realloc
.text:0000000000005646                 test    rax, rax
.text:0000000000005649                 jnz     short loc_5650
.text:000000000000564B                 test    rbx, rbx
.text:000000000000564E                 jnz     short loc_5661
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005650                 pop     rbx
.text:0000000000005651                 retn
.text:0000000000005651 ; ---------------------------------------------------------------------------
.text:0000000000005652                 align 8
.text:0000000000005658
.text:0000000000005658 loc_5658:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005658                 call    _free
.text:000000000000565D                 xor     eax, eax
.text:000000000000565F                 pop     rbx
.text:0000000000005660                 retn
.text:0000000000005661 ; ---------------------------------------------------------------------------
.text:0000000000005661
.text:0000000000005661 loc_5661:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005661                 call    xalloc_die
.text:0000000000005661 ; } // starts at 5630
.text:0000000000005661 xrealloc        endp
.text:0000000000005661
.text:0000000000005661 ; ---------------------------------------------------------------------------
.text:0000000000005666                 align 10h
.text:0000000000005670
.text:0000000000005670 ; =============== S U B R O U T I N E =======================================
.text:0000000000005670
.text:0000000000005670 ; Attributes: info_from_lumina
.text:0000000000005670
.text:0000000000005670 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005670                 public xnrealloc
.text:0000000000005670 xnrealloc       proc near
.text:0000000000005670 ; __unwind {
.text:0000000000005670                 mov     rax, rsi
.text:0000000000005673                 mul     rdx
.text:0000000000005676                 mov     rsi, rax
.text:0000000000005679                 seto    al
.text:000000000000567C                 test    rsi, rsi
.text:000000000000567F                 js      short loc_568B
.text:0000000000005681                 movzx   eax, al
.text:0000000000005684                 test    rax, rax
.text:0000000000005687                 jnz     short loc_568B
.text:0000000000005689                 jmp     short xrealloc
.text:000000000000568B ; ---------------------------------------------------------------------------
.text:000000000000568B
.text:000000000000568B loc_568B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000568B                                         ; xnrealloc+17↑j
.text:000000000000568B                 sub     rsp, 8
.text:000000000000568F                 call    xalloc_die
.text:000000000000568F ; } // starts at 5670
.text:000000000000568F xnrealloc       endp
.text:000000000000568F
.text:000000000000568F ; ---------------------------------------------------------------------------
.text:0000000000005694                 align 20h
.text:00000000000056A0
.text:00000000000056A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056A0
.text:00000000000056A0 ; Attributes: info_from_lumina
.text:00000000000056A0
.text:00000000000056A0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000056A0                 public x2nrealloc
.text:00000000000056A0 x2nrealloc      proc near
.text:00000000000056A0 ; __unwind {
.text:00000000000056A0                 test    rdi, rdi
.text:00000000000056A3                 mov     r9, rdx
.text:00000000000056A6                 mov     rcx, [rsi]
.text:00000000000056A9                 jz      short loc_56E0
.text:00000000000056AB                 xor     edx, edx
.text:00000000000056AD                 mov     rax, 5555555555555554h
.text:00000000000056B7                 div     r9
.text:00000000000056BA                 cmp     rax, rcx
.text:00000000000056BD                 jbe     short loc_56FB
.text:00000000000056BF                 mov     rax, rcx
.text:00000000000056C2                 shr     rax, 1
.text:00000000000056C5                 lea     rcx, [rax+rcx+1]
.text:00000000000056CA
.text:00000000000056CA loc_56CA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000056CA                 mov     [rsi], rcx
.text:00000000000056CD                 imul    rcx, r9
.text:00000000000056D1                 mov     rsi, rcx
.text:00000000000056D4                 jmp     xrealloc
.text:00000000000056D4 ; ---------------------------------------------------------------------------
.text:00000000000056D9                 align 20h
.text:00000000000056E0
.text:00000000000056E0 loc_56E0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000056E0                 test    rcx, rcx
.text:00000000000056E3                 jz      short loc_5708
.text:00000000000056E5
.text:00000000000056E5 loc_56E5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000056E5                 mov     rax, rcx
.text:00000000000056E8                 mul     r9
.text:00000000000056EB                 seto    dl
.text:00000000000056EE                 test    rax, rax
.text:00000000000056F1                 movzx   edx, dl
.text:00000000000056F4                 js      short loc_56FB
.text:00000000000056F6                 test    rdx, rdx
.text:00000000000056F9                 jz      short loc_56CA
.text:00000000000056FB
.text:00000000000056FB loc_56FB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000056FB                                         ; x2nrealloc+54↑j
.text:00000000000056FB                 sub     rsp, 8
.text:00000000000056FF                 call    xalloc_die
.text:00000000000056FF ; ---------------------------------------------------------------------------
.text:0000000000005704                 align 8
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005708                 xor     edx, edx
.text:000000000000570A                 mov     eax, 80h
.text:000000000000570F                 xor     r8d, r8d
.text:0000000000005712                 div     r9
.text:0000000000005715                 test    rax, rax
.text:0000000000005718                 setz    r8b
.text:000000000000571C                 lea     rcx, [r8+rax]
.text:0000000000005720                 jmp     short loc_56E5
.text:0000000000005720 ; } // starts at 56A0
.text:0000000000005720 x2nrealloc      endp
.text:0000000000005720
.text:0000000000005720 ; ---------------------------------------------------------------------------
.text:0000000000005722                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730 ; Attributes: info_from_lumina
.text:0000000000005730
.text:0000000000005730 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005730                 public x2realloc
.text:0000000000005730 x2realloc       proc near
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 test    rdi, rdi
.text:0000000000005733                 mov     rax, [rsi]
.text:0000000000005736                 jz      short loc_5760
.text:0000000000005738                 mov     rdx, 5555555555555553h
.text:0000000000005742                 cmp     rax, rdx
.text:0000000000005745                 ja      short loc_5771
.text:0000000000005747                 mov     rdx, rax
.text:000000000000574A                 shr     rdx, 1
.text:000000000000574D                 lea     rax, [rdx+rax+1]
.text:0000000000005752
.text:0000000000005752 loc_5752:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005752                 mov     [rsi], rax
.text:0000000000005755                 mov     rsi, rax
.text:0000000000005758                 jmp     xrealloc
.text:0000000000005758 ; ---------------------------------------------------------------------------
.text:000000000000575D                 align 20h
.text:0000000000005760
.text:0000000000005760 loc_5760:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005760                 test    rax, rax
.text:0000000000005763                 mov     edx, 80h
.text:0000000000005768                 cmovz   rax, rdx
.text:000000000000576C                 test    rax, rax
.text:000000000000576F                 jns     short loc_5752
.text:0000000000005771
.text:0000000000005771 loc_5771:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005771                 sub     rsp, 8
.text:0000000000005775                 call    xalloc_die
.text:0000000000005775 ; } // starts at 5730
.text:0000000000005775 x2realloc       endp
.text:0000000000005775
.text:0000000000005775 ; ---------------------------------------------------------------------------
.text:000000000000577A                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780
.text:0000000000005780 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005780                 public xzalloc
.text:0000000000005780 xzalloc         proc near
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 push    rbx
.text:0000000000005781                 mov     rbx, rdi
.text:0000000000005784                 call    xmalloc
.text:0000000000005789                 mov     rdx, rbx        ; n
.text:000000000000578C                 xor     esi, esi        ; c
.text:000000000000578E                 mov     rdi, rax        ; s
.text:0000000000005791                 pop     rbx
.text:0000000000005792                 jmp     _memset
.text:0000000000005792 ; } // starts at 5780
.text:0000000000005792 xzalloc         endp
.text:0000000000005792
.text:0000000000005792 ; ---------------------------------------------------------------------------
.text:0000000000005797                 align 20h
.text:00000000000057A0
.text:00000000000057A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057A0
.text:00000000000057A0 ; Attributes: info_from_lumina
.text:00000000000057A0
.text:00000000000057A0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000057A0                 public xcalloc
.text:00000000000057A0 xcalloc         proc near
.text:00000000000057A0 ; __unwind {
.text:00000000000057A0                 mov     rax, rdi
.text:00000000000057A3                 sub     rsp, 8
.text:00000000000057A7                 mul     rsi
.text:00000000000057AA                 seto    dl
.text:00000000000057AD                 test    rax, rax
.text:00000000000057B0                 js      short loc_57C9
.text:00000000000057B2                 movzx   edx, dl
.text:00000000000057B5                 test    rdx, rdx
.text:00000000000057B8                 jnz     short loc_57C9
.text:00000000000057BA                 call    _calloc
.text:00000000000057BF                 test    rax, rax
.text:00000000000057C2                 jz      short loc_57C9
.text:00000000000057C4                 add     rsp, 8
.text:00000000000057C8                 retn
.text:00000000000057C9 ; ---------------------------------------------------------------------------
.text:00000000000057C9
.text:00000000000057C9 loc_57C9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000057C9                                         ; xcalloc+18↑j ...
.text:00000000000057C9                 call    xalloc_die
.text:00000000000057C9 ; } // starts at 57A0
.text:00000000000057C9 xcalloc         endp
.text:00000000000057C9
.text:00000000000057C9 ; ---------------------------------------------------------------------------
.text:00000000000057CE                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0 ; Attributes: info_from_lumina
.text:00000000000057D0
.text:00000000000057D0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000057D0                 public xmemdup
.text:00000000000057D0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000057D0                                         ; xstrdup+11↓j
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 push    rbp
.text:00000000000057D1                 push    rbx
.text:00000000000057D2                 mov     rbp, rdi
.text:00000000000057D5                 mov     rdi, rsi
.text:00000000000057D8                 mov     rbx, rsi
.text:00000000000057DB                 sub     rsp, 8
.text:00000000000057DF                 call    xmalloc
.text:00000000000057E4                 add     rsp, 8
.text:00000000000057E8                 mov     rdx, rbx        ; n
.text:00000000000057EB                 mov     rsi, rbp        ; src
.text:00000000000057EE                 pop     rbx
.text:00000000000057EF                 pop     rbp
.text:00000000000057F0                 mov     rdi, rax        ; dest
.text:00000000000057F3                 jmp     _memcpy
.text:00000000000057F3 ; } // starts at 57D0
.text:00000000000057F3 xmemdup         endp
.text:00000000000057F3
.text:00000000000057F3 ; ---------------------------------------------------------------------------
.text:00000000000057F8                 align 20h
.text:0000000000005800
.text:0000000000005800 ; =============== S U B R O U T I N E =======================================
.text:0000000000005800
.text:0000000000005800
.text:0000000000005800 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005800                 public xstrdup
.text:0000000000005800 xstrdup         proc near
.text:0000000000005800 ; __unwind {
.text:0000000000005800                 push    rbx
.text:0000000000005801                 mov     rbx, rdi
.text:0000000000005804                 call    _strlen
.text:0000000000005809                 mov     rdi, rbx        ; src
.text:000000000000580C                 lea     rsi, [rax+1]    ; n
.text:0000000000005810                 pop     rbx
.text:0000000000005811                 jmp     short xmemdup
.text:0000000000005811 ; } // starts at 5800
.text:0000000000005811 xstrdup         endp
.text:0000000000005811
.text:0000000000005811 ; ---------------------------------------------------------------------------
.text:0000000000005813                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820 ; Attributes: noreturn info_from_lumina
.text:0000000000005820
.text:0000000000005820 ; void __cdecl xalloc_die()
.text:0000000000005820                 public xalloc_die
.text:0000000000005820 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4796↑p
.text:0000000000005820                                         ; xmalloc:loc_55E5↑p ...
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005827                 sub     rsp, 8
.text:000000000000582B                 mov     edx, 5          ; category
.text:0000000000005830                 xor     edi, edi        ; domainname
.text:0000000000005832                 call    _dcgettext
.text:0000000000005837                 mov     edi, cs:exit_failure ; status
.text:000000000000583D                 lea     rdx, aS_0+2     ; format
.text:0000000000005844                 mov     rcx, rax
.text:0000000000005847                 xor     esi, esi        ; errnum
.text:0000000000005849                 xor     eax, eax
.text:000000000000584B                 call    _error
.text:0000000000005850                 call    _abort
.text:0000000000005850 ; } // starts at 5820
.text:0000000000005850 xalloc_die      endp
.text:0000000000005850
.text:0000000000005850 ; ---------------------------------------------------------------------------
.text:0000000000005855                 align 20h
.text:0000000000005860
.text:0000000000005860 ; =============== S U B R O U T I N E =======================================
.text:0000000000005860
.text:0000000000005860
.text:0000000000005860 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000005860                 public xstrtoumax
.text:0000000000005860 xstrtoumax      proc near               ; CODE XREF: human_options+AA↑p
.text:0000000000005860
.text:0000000000005860 base            = dword ptr -50h
.text:0000000000005860 endptr          = qword ptr -48h
.text:0000000000005860 var_40          = qword ptr -40h
.text:0000000000005860
.text:0000000000005860 ; __unwind {
.text:0000000000005860                 push    r15
.text:0000000000005862                 push    r14
.text:0000000000005864                 push    r13
.text:0000000000005866                 push    r12
.text:0000000000005868                 push    rbp
.text:0000000000005869                 push    rbx
.text:000000000000586A                 sub     rsp, 28h
.text:000000000000586E                 mov     rax, fs:28h
.text:0000000000005877                 mov     [rsp+58h+var_40], rax
.text:000000000000587C                 xor     eax, eax
.text:000000000000587E                 cmp     edx, 24h ; '$'
.text:0000000000005881                 ja      loc_5BE5
.text:0000000000005887                 lea     rax, [rsp+58h+endptr]
.text:000000000000588C                 mov     r15, rsi
.text:000000000000588F                 test    rsi, rsi
.text:0000000000005892                 mov     rbp, rdi
.text:0000000000005895                 mov     [rsp+58h+base], edx
.text:0000000000005899                 mov     r14, rcx
.text:000000000000589C                 mov     r13, r8
.text:000000000000589F                 cmovz   r15, rax
.text:00000000000058A3                 call    ___errno_location
.text:00000000000058A8                 mov     dword ptr [rax], 0
.text:00000000000058AE                 mov     r12, rax
.text:00000000000058B1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000058B5                 call    ___ctype_b_loc
.text:00000000000058BA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000058BE                 mov     rsi, [rax]
.text:00000000000058C1                 mov     rax, rbp
.text:00000000000058C4                 jmp     short loc_58D7
.text:00000000000058C4 ; ---------------------------------------------------------------------------
.text:00000000000058C6                 align 10h
.text:00000000000058D0
.text:00000000000058D0 loc_58D0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:00000000000058D0                 add     rax, 1
.text:00000000000058D4                 movzx   ebx, byte ptr [rax]
.text:00000000000058D7
.text:00000000000058D7 loc_58D7:                               ; CODE XREF: xstrtoumax+64↑j
.text:00000000000058D7                 movzx   ecx, bl
.text:00000000000058DA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000058DF                 jnz     short loc_58D0
.text:00000000000058E1                 cmp     bl, 2Dh ; '-'
.text:00000000000058E4                 jz      short loc_5938
.text:00000000000058E6                 xor     ecx, ecx        ; group
.text:00000000000058E8                 mov     rsi, r15        ; endptr
.text:00000000000058EB                 mov     rdi, rbp        ; nptr
.text:00000000000058EE                 call    ___strtoul_internal
.text:00000000000058F3                 mov     rcx, [r15]
.text:00000000000058F6                 mov     rbx, rax
.text:00000000000058F9                 cmp     rcx, rbp
.text:00000000000058FC                 jz      short loc_5928
.text:00000000000058FE                 mov     eax, [r12]
.text:0000000000005902                 test    eax, eax
.text:0000000000005904                 jz      short loc_5968
.text:0000000000005906                 cmp     eax, 22h ; '"'
.text:0000000000005909                 mov     ebp, 1
.text:000000000000590E                 jnz     short loc_5938
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000005910                 test    r13, r13
.text:0000000000005913                 jz      short loc_591E
.text:0000000000005915                 movzx   r12d, byte ptr [rcx]
.text:0000000000005919                 test    r12b, r12b
.text:000000000000591C                 jnz     short loc_5997
.text:000000000000591E
.text:000000000000591E loc_591E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000591E                 mov     [r14], rbx
.text:0000000000005921                 jmp     short loc_593D
.text:0000000000005921 ; ---------------------------------------------------------------------------
.text:0000000000005923                 align 8
.text:0000000000005928
.text:0000000000005928 loc_5928:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000005928                 test    r13, r13
.text:000000000000592B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005930                 jnz     short loc_5970
.text:0000000000005932                 nop     word ptr [rax+rax+00h]
.text:0000000000005938
.text:0000000000005938 loc_5938:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000005938                                         ; xstrtoumax+AE↑j ...
.text:0000000000005938                 mov     ebp, 4
.text:000000000000593D
.text:000000000000593D loc_593D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000593D                                         ; xstrtoumax+217↓j ...
.text:000000000000593D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000005942                 xor     rdi, fs:28h
.text:000000000000594B                 mov     eax, ebp
.text:000000000000594D                 jnz     loc_5BE0
.text:0000000000005953                 add     rsp, 28h
.text:0000000000005957                 pop     rbx
.text:0000000000005958                 pop     rbp
.text:0000000000005959                 pop     r12
.text:000000000000595B                 pop     r13
.text:000000000000595D                 pop     r14
.text:000000000000595F                 pop     r15
.text:0000000000005961                 retn
.text:0000000000005961 ; ---------------------------------------------------------------------------
.text:0000000000005962                 align 8
.text:0000000000005968
.text:0000000000005968 loc_5968:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000005968                 xor     ebp, ebp
.text:000000000000596A                 jmp     short loc_5910
.text:000000000000596A ; ---------------------------------------------------------------------------
.text:000000000000596C                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000005970                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000005975                 test    r12b, r12b
.text:0000000000005978                 jz      short loc_5938
.text:000000000000597A                 movsx   esi, r12b       ; c
.text:000000000000597E                 mov     rdi, r13        ; s
.text:0000000000005981                 xor     ebp, ebp
.text:0000000000005983                 call    _strchr
.text:0000000000005988                 test    rax, rax
.text:000000000000598B                 mov     ebx, 1
.text:0000000000005990                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005995                 jz      short loc_5938
.text:0000000000005997
.text:0000000000005997 loc_5997:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000005997                 movsx   esi, r12b       ; c
.text:000000000000599B                 mov     rdi, r13        ; s
.text:000000000000599E                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000059A3                 call    _strchr
.text:00000000000059A8                 test    rax, rax
.text:00000000000059AB                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000059B0                 jz      def_5A36        ; jumptable 0000000000005A36 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000059B6                 lea     eax, [r12-45h]
.text:00000000000059BB                 cmp     al, 2Fh ; '/'
.text:00000000000059BD                 ja      short loc_5A10
.text:00000000000059BF                 mov     rdx, 814400308945h
.text:00000000000059C9                 bt      rdx, rax
.text:00000000000059CD                 jnb     short loc_5A10
.text:00000000000059CF                 mov     esi, 30h ; '0'  ; c
.text:00000000000059D4                 mov     rdi, r13        ; s
.text:00000000000059D7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000059DC                 call    _strchr
.text:00000000000059E1                 test    rax, rax
.text:00000000000059E4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000059E9                 jz      short loc_5A10
.text:00000000000059EB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000059EF                 cmp     al, 44h ; 'D'
.text:00000000000059F1                 jz      short loc_59FF
.text:00000000000059F3                 cmp     al, 69h ; 'i'
.text:00000000000059F5                 jz      loc_5BC8
.text:00000000000059FB                 cmp     al, 42h ; 'B'
.text:00000000000059FD                 jnz     short loc_5A10
.text:00000000000059FF
.text:00000000000059FF loc_59FF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000059FF                 mov     edi, 2
.text:0000000000005A04                 mov     esi, 3E8h
.text:0000000000005A09                 jmp     short loc_5A1A
.text:0000000000005A09 ; ---------------------------------------------------------------------------
.text:0000000000005A0B                 align 10h
.text:0000000000005A10
.text:0000000000005A10 loc_5A10:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000005A10                                         ; xstrtoumax+16D↑j ...
.text:0000000000005A10                 mov     edi, 1
.text:0000000000005A15                 mov     esi, 400h
.text:0000000000005A1A
.text:0000000000005A1A loc_5A1A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:0000000000005A1A                                         ; xstrtoumax+37B↓j
.text:0000000000005A1A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000005A1E                 cmp     r12b, 35h
.text:0000000000005A22                 ja      short def_5A36  ; jumptable 0000000000005A36 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005A24                 lea     rdx, jpt_5A36
.text:0000000000005A2B                 movzx   r12d, r12b
.text:0000000000005A2F                 movsxd  rax, ds:(jpt_5A36 - 7048h)[rdx+r12*4]
.text:0000000000005A33                 add     rax, rdx
.text:0000000000005A36                 jmp     rax             ; switch jump
.text:0000000000005A38 ; ---------------------------------------------------------------------------
.text:0000000000005A38
.text:0000000000005A38 loc_5A38:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005A38                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005A38                 mov     rax, rbx        ; jumptable 0000000000005A36 cases 77,109
.text:0000000000005A3B                 mul     rsi
.text:0000000000005A3E                 jo      loc_5C31
.text:0000000000005A44                 xor     r8d, r8d
.text:0000000000005A47
.text:0000000000005A47 loc_5A47:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000005A47                                         ; xstrtoumax+35E↓j ...
.text:0000000000005A47                 mul     rsi
.text:0000000000005A4A                 jo      loc_5C22
.text:0000000000005A50                 mov     rbx, rax
.text:0000000000005A53
.text:0000000000005A53 loc_5A53:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000005A53                 or      ebp, r8d
.text:0000000000005A56                 db      2Eh
.text:0000000000005A56                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005A60                                         ; xstrtoumax+23B↓j ...
.text:0000000000005A60                 movsxd  rdi, edi        ; jumptable 0000000000005A36 case 99
.text:0000000000005A63                 mov     eax, ebp
.text:0000000000005A65                 add     rcx, rdi
.text:0000000000005A68                 or      eax, 2
.text:0000000000005A6B                 mov     [r15], rcx
.text:0000000000005A6E                 cmp     byte ptr [rcx], 0
.text:0000000000005A71                 mov     [r14], rbx
.text:0000000000005A74                 cmovnz  ebp, eax
.text:0000000000005A77                 jmp     loc_593D
.text:0000000000005A7C ; ---------------------------------------------------------------------------
.text:0000000000005A7C
.text:0000000000005A7C def_5A36:                               ; CODE XREF: xstrtoumax+150↑j
.text:0000000000005A7C                                         ; xstrtoumax+1C2↑j ...
.text:0000000000005A7C                 mov     [r14], rbx      ; jumptable 0000000000005A36 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005A7F                 or      ebp, 2
.text:0000000000005A82                 jmp     loc_593D
.text:0000000000005A87 ; ---------------------------------------------------------------------------
.text:0000000000005A87
.text:0000000000005A87 loc_5A87:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005A87                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005A87                 mov     edx, 2          ; jumptable 0000000000005A36 case 119
.text:0000000000005A8C                 mov     rax, rdx
.text:0000000000005A8F                 mul     rbx
.text:0000000000005A92                 jo      loc_5B2E
.text:0000000000005A98                 add     rbx, rbx
.text:0000000000005A9B                 jmp     short loc_5A60  ; jumptable 0000000000005A36 case 99
.text:0000000000005A9D ; ---------------------------------------------------------------------------
.text:0000000000005A9D
.text:0000000000005A9D loc_5A9D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005A9D                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005A9D                 mov     edx, 200h       ; jumptable 0000000000005A36 case 98
.text:0000000000005AA2                 mov     rax, rdx
.text:0000000000005AA5                 mul     rbx
.text:0000000000005AA8                 jo      loc_5B2E
.text:0000000000005AAE                 shl     rbx, 9
.text:0000000000005AB2                 jmp     short loc_5A60  ; jumptable 0000000000005A36 case 99
.text:0000000000005AB4 ; ---------------------------------------------------------------------------
.text:0000000000005AB4
.text:0000000000005AB4 loc_5AB4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005AB4                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005AB4                 mov     r8d, 7          ; jumptable 0000000000005A36 case 90
.text:0000000000005ABA                 xor     r9d, r9d
.text:0000000000005ABD                 nop     dword ptr [rax]
.text:0000000000005AC0
.text:0000000000005AC0 loc_5AC0:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000005AC0                 mov     rax, rbx
.text:0000000000005AC3                 mul     rsi
.text:0000000000005AC6                 mov     rbx, rax
.text:0000000000005AC9                 jo      loc_5C5E
.text:0000000000005ACF
.text:0000000000005ACF loc_5ACF:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000005ACF                 sub     r8d, 1
.text:0000000000005AD3                 jnz     short loc_5AC0
.text:0000000000005AD5
.text:0000000000005AD5 loc_5AD5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000005AD5                                         ; xstrtoumax+2BD↓j ...
.text:0000000000005AD5                 or      ebp, r9d
.text:0000000000005AD8                 jmp     short loc_5A60  ; jumptable 0000000000005A36 case 99
.text:0000000000005ADA ; ---------------------------------------------------------------------------
.text:0000000000005ADA
.text:0000000000005ADA loc_5ADA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005ADA                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005ADA                 mov     r8d, 8          ; jumptable 0000000000005A36 case 89
.text:0000000000005AE0                 xor     r9d, r9d
.text:0000000000005AE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000005AE8
.text:0000000000005AE8 loc_5AE8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000005AE8                 mov     rax, rbx
.text:0000000000005AEB                 mul     rsi
.text:0000000000005AEE                 mov     rbx, rax
.text:0000000000005AF1                 jo      loc_5C40
.text:0000000000005AF7
.text:0000000000005AF7 loc_5AF7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000005AF7                 sub     r8d, 1
.text:0000000000005AFB                 jnz     short loc_5AE8
.text:0000000000005AFD                 jmp     short loc_5AD5
.text:0000000000005AFF ; ---------------------------------------------------------------------------
.text:0000000000005AFF
.text:0000000000005AFF loc_5AFF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005AFF                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005AFF                 mov     r8d, 4          ; jumptable 0000000000005A36 cases 84,116
.text:0000000000005B05                 xor     r9d, r9d
.text:0000000000005B08
.text:0000000000005B08 loc_5B08:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000005B08                 mov     rax, rbx
.text:0000000000005B0B                 mul     rsi
.text:0000000000005B0E                 mov     rbx, rax
.text:0000000000005B11                 jo      loc_5C13
.text:0000000000005B17
.text:0000000000005B17 loc_5B17:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000005B17                 sub     r8d, 1
.text:0000000000005B1B                 jnz     short loc_5B08
.text:0000000000005B1D                 jmp     short loc_5AD5
.text:0000000000005B1F ; ---------------------------------------------------------------------------
.text:0000000000005B1F
.text:0000000000005B1F loc_5B1F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005B1F                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005B1F                 mov     rax, rbx        ; jumptable 0000000000005A36 cases 75,107
.text:0000000000005B22                 mul     rsi
.text:0000000000005B25                 mov     rbx, rax
.text:0000000000005B28                 jno     loc_5A60        ; jumptable 0000000000005A36 case 99
.text:0000000000005B2E
.text:0000000000005B2E loc_5B2E:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000005B2E                                         ; xstrtoumax+248↑j ...
.text:0000000000005B2E                 mov     ebp, 1
.text:0000000000005B33                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B37                 jmp     loc_5A60        ; jumptable 0000000000005A36 case 99
.text:0000000000005B37 ; ---------------------------------------------------------------------------
.text:0000000000005B3C                 align 20h
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005B40                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005B40                 mov     r8d, 5          ; jumptable 0000000000005A36 case 80
.text:0000000000005B46                 xor     r9d, r9d
.text:0000000000005B49
.text:0000000000005B49 loc_5B49:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000005B49                 mov     rax, rbx
.text:0000000000005B4C                 mul     rsi
.text:0000000000005B4F                 mov     rbx, rax
.text:0000000000005B52                 jo      loc_5C4F
.text:0000000000005B58
.text:0000000000005B58 loc_5B58:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000005B58                 sub     r8d, 1
.text:0000000000005B5C                 jnz     short loc_5B49
.text:0000000000005B5E                 jmp     loc_5AD5
.text:0000000000005B63 ; ---------------------------------------------------------------------------
.text:0000000000005B63
.text:0000000000005B63 loc_5B63:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005B63                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005B63                 mov     r8d, 6          ; jumptable 0000000000005A36 case 69
.text:0000000000005B69                 xor     r9d, r9d
.text:0000000000005B6C
.text:0000000000005B6C loc_5B6C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000005B6C                 mov     rax, rbx
.text:0000000000005B6F                 mul     rsi
.text:0000000000005B72                 mov     rbx, rax
.text:0000000000005B75                 jo      loc_5C04
.text:0000000000005B7B
.text:0000000000005B7B loc_5B7B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000005B7B                 sub     r8d, 1
.text:0000000000005B7F                 jnz     short loc_5B6C
.text:0000000000005B81                 jmp     loc_5AD5
.text:0000000000005B86 ; ---------------------------------------------------------------------------
.text:0000000000005B86
.text:0000000000005B86 loc_5B86:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005B86                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005B86                 mov     edx, 400h       ; jumptable 0000000000005A36 case 66
.text:0000000000005B8B                 mov     rax, rdx
.text:0000000000005B8E                 mul     rbx
.text:0000000000005B91                 jo      short loc_5B2E
.text:0000000000005B93                 shl     rbx, 0Ah
.text:0000000000005B97                 jmp     loc_5A60        ; jumptable 0000000000005A36 case 99
.text:0000000000005B9C ; ---------------------------------------------------------------------------
.text:0000000000005B9C
.text:0000000000005B9C loc_5B9C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000005B9C                                         ; DATA XREF: .rodata:jpt_5A36↓o
.text:0000000000005B9C                 mov     rax, rbx        ; jumptable 0000000000005A36 cases 71,103
.text:0000000000005B9F                 mul     rsi
.text:0000000000005BA2                 jo      loc_5C6D
.text:0000000000005BA8                 xor     r8d, r8d
.text:0000000000005BAB
.text:0000000000005BAB loc_5BAB:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000005BAB                 mul     rsi
.text:0000000000005BAE                 jno     loc_5A47
.text:0000000000005BB4                 mov     r8d, 1
.text:0000000000005BBA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BBE                 jmp     loc_5A47
.text:0000000000005BBE ; ---------------------------------------------------------------------------
.text:0000000000005BC3                 align 8
.text:0000000000005BC8
.text:0000000000005BC8 loc_5BC8:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000005BC8                 xor     edi, edi
.text:0000000000005BCA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000005BCE                 mov     esi, 400h
.text:0000000000005BD3                 setz    dil
.text:0000000000005BD7                 lea     edi, [rdi+rdi+1]
.text:0000000000005BDB                 jmp     loc_5A1A
.text:0000000000005BE0 ; ---------------------------------------------------------------------------
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000005BE0                 call    ___stack_chk_fail
.text:0000000000005BE5 ; ---------------------------------------------------------------------------
.text:0000000000005BE5
.text:0000000000005BE5 loc_5BE5:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000005BE5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:0000000000005BEC                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000005BF3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000005BFA                 mov     edx, 54h ; 'T'  ; line
.text:0000000000005BFF                 call    ___assert_fail
.text:0000000000005C04 ; ---------------------------------------------------------------------------
.text:0000000000005C04
.text:0000000000005C04 loc_5C04:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000005C04                 mov     r9d, 1
.text:0000000000005C0A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C0E                 jmp     loc_5B7B
.text:0000000000005C13 ; ---------------------------------------------------------------------------
.text:0000000000005C13
.text:0000000000005C13 loc_5C13:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000005C13                 mov     r9d, 1
.text:0000000000005C19                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C1D                 jmp     loc_5B17
.text:0000000000005C22 ; ---------------------------------------------------------------------------
.text:0000000000005C22
.text:0000000000005C22 loc_5C22:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000005C22                 mov     r8d, 1
.text:0000000000005C28                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C2C                 jmp     loc_5A53
.text:0000000000005C31 ; ---------------------------------------------------------------------------
.text:0000000000005C31
.text:0000000000005C31 loc_5C31:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000005C31                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C35                 mov     r8d, 1
.text:0000000000005C3B                 jmp     loc_5A47
.text:0000000000005C40 ; ---------------------------------------------------------------------------
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000005C40                 mov     r9d, 1
.text:0000000000005C46                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C4A                 jmp     loc_5AF7
.text:0000000000005C4F ; ---------------------------------------------------------------------------
.text:0000000000005C4F
.text:0000000000005C4F loc_5C4F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000005C4F                 mov     r9d, 1
.text:0000000000005C55                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C59                 jmp     loc_5B58
.text:0000000000005C5E ; ---------------------------------------------------------------------------
.text:0000000000005C5E
.text:0000000000005C5E loc_5C5E:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000005C5E                 mov     r9d, 1
.text:0000000000005C64                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C68                 jmp     loc_5ACF
.text:0000000000005C6D ; ---------------------------------------------------------------------------
.text:0000000000005C6D
.text:0000000000005C6D loc_5C6D:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000005C6D                 mov     r8d, 1
.text:0000000000005C73                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C77                 jmp     loc_5BAB
.text:0000000000005C77 ; } // starts at 5860
.text:0000000000005C77 xstrtoumax      endp
.text:0000000000005C77
.text:0000000000005C77 ; ---------------------------------------------------------------------------
.text:0000000000005C7C                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80 ; Attributes: info_from_lumina
.text:0000000000005C80
.text:0000000000005C80 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005C80                 public rpl_fclose
.text:0000000000005C80 rpl_fclose      proc near               ; CODE XREF: main+16B↑p
.text:0000000000005C80                                         ; bsd_sum_file+CA↑p ...
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 push    r12
.text:0000000000005C82                 push    rbp
.text:0000000000005C83                 push    rbx
.text:0000000000005C84                 mov     rbx, rdi
.text:0000000000005C87                 call    _fileno
.text:0000000000005C8C                 test    eax, eax
.text:0000000000005C8E                 mov     rdi, rbx        ; fp
.text:0000000000005C91                 js      short loc_5CE7
.text:0000000000005C93                 call    ___freading
.text:0000000000005C98                 test    eax, eax
.text:0000000000005C9A                 jnz     short loc_5CC8
.text:0000000000005C9C
.text:0000000000005C9C loc_5C9C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005C9C                 mov     rdi, rbx        ; stream
.text:0000000000005C9F                 call    rpl_fflush
.text:0000000000005CA4                 test    eax, eax
.text:0000000000005CA6                 jz      short loc_5CE4
.text:0000000000005CA8                 call    ___errno_location
.text:0000000000005CAD                 mov     r12d, [rax]
.text:0000000000005CB0                 mov     rdi, rbx        ; stream
.text:0000000000005CB3                 mov     rbp, rax
.text:0000000000005CB6                 call    _fclose
.text:0000000000005CBB                 test    r12d, r12d
.text:0000000000005CBE                 jnz     short loc_5CF0
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005CC0                 pop     rbx
.text:0000000000005CC1                 pop     rbp
.text:0000000000005CC2                 pop     r12
.text:0000000000005CC4                 retn
.text:0000000000005CC4 ; ---------------------------------------------------------------------------
.text:0000000000005CC5                 align 8
.text:0000000000005CC8
.text:0000000000005CC8 loc_5CC8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005CC8                 mov     rdi, rbx        ; stream
.text:0000000000005CCB                 call    _fileno
.text:0000000000005CD0                 xor     esi, esi        ; offset
.text:0000000000005CD2                 mov     edx, 1          ; whence
.text:0000000000005CD7                 mov     edi, eax        ; fd
.text:0000000000005CD9                 call    _lseek
.text:0000000000005CDE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CE2                 jnz     short loc_5C9C
.text:0000000000005CE4
.text:0000000000005CE4 loc_5CE4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005CE4                 mov     rdi, rbx        ; stream
.text:0000000000005CE7
.text:0000000000005CE7 loc_5CE7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005CE7                 pop     rbx
.text:0000000000005CE8                 pop     rbp
.text:0000000000005CE9                 pop     r12
.text:0000000000005CEB                 jmp     _fclose
.text:0000000000005CF0 ; ---------------------------------------------------------------------------
.text:0000000000005CF0
.text:0000000000005CF0 loc_5CF0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005CF0                 mov     [rbp+0], r12d
.text:0000000000005CF4                 mov     eax, 0FFFFFFFFh
.text:0000000000005CF9                 jmp     short loc_5CC0
.text:0000000000005CF9 ; } // starts at 5C80
.text:0000000000005CF9 rpl_fclose      endp
.text:0000000000005CF9
.text:0000000000005CF9 ; ---------------------------------------------------------------------------
.text:0000000000005CFB                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00 ; Attributes: info_from_lumina
.text:0000000000005D00
.text:0000000000005D00 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005D00                 public rpl_fflush
.text:0000000000005D00 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 test    rdi, rdi
.text:0000000000005D03                 push    rbx
.text:0000000000005D04                 mov     rbx, rdi
.text:0000000000005D07                 jz      short loc_5D1A
.text:0000000000005D09                 call    ___freading
.text:0000000000005D0E                 test    eax, eax
.text:0000000000005D10                 jz      short loc_5D1A
.text:0000000000005D12                 test    dword ptr [rbx], 100h
.text:0000000000005D18                 jnz     short loc_5D28
.text:0000000000005D1A
.text:0000000000005D1A loc_5D1A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005D1A                                         ; rpl_fflush+10↑j
.text:0000000000005D1A                 mov     rdi, rbx        ; stream
.text:0000000000005D1D                 pop     rbx
.text:0000000000005D1E                 jmp     _fflush
.text:0000000000005D1E ; ---------------------------------------------------------------------------
.text:0000000000005D23                 align 8
.text:0000000000005D28
.text:0000000000005D28 loc_5D28:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005D28                 mov     rdi, rbx
.text:0000000000005D2B                 mov     edx, 1
.text:0000000000005D30                 xor     esi, esi
.text:0000000000005D32                 call    rpl_fseeko
.text:0000000000005D37                 mov     rdi, rbx        ; stream
.text:0000000000005D3A                 pop     rbx
.text:0000000000005D3B                 jmp     _fflush
.text:0000000000005D3B ; } // starts at 5D00
.text:0000000000005D3B rpl_fflush      endp
.text:0000000000005D3B
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40 ; Attributes: info_from_lumina
.text:0000000000005D40
.text:0000000000005D40 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005D40                 public rpl_fseeko
.text:0000000000005D40 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 mov     rax, [rdi+8]
.text:0000000000005D44                 cmp     [rdi+10h], rax
.text:0000000000005D48                 jz      short loc_5D50
.text:0000000000005D4A
.text:0000000000005D4A loc_5D4A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005D4A                                         ; rpl_fseeko+1F↓j
.text:0000000000005D4A                 jmp     _fseeko
.text:0000000000005D4A ; ---------------------------------------------------------------------------
.text:0000000000005D4F                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005D50                 mov     rax, [rdi+20h]
.text:0000000000005D54                 cmp     [rdi+28h], rax
.text:0000000000005D58                 jnz     short loc_5D4A
.text:0000000000005D5A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005D5F                 jnz     short loc_5D4A
.text:0000000000005D61                 push    r12
.text:0000000000005D63                 push    rbp
.text:0000000000005D64                 mov     r12d, edx
.text:0000000000005D67                 push    rbx
.text:0000000000005D68                 mov     rbp, rsi
.text:0000000000005D6B                 mov     rbx, rdi
.text:0000000000005D6E                 call    _fileno
.text:0000000000005D73                 mov     edx, r12d       ; whence
.text:0000000000005D76                 mov     rsi, rbp        ; offset
.text:0000000000005D79                 mov     edi, eax        ; fd
.text:0000000000005D7B                 call    _lseek
.text:0000000000005D80                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D84                 jz      short loc_5D92
.text:0000000000005D86                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005D89                 mov     [rbx+90h], rax
.text:0000000000005D90                 xor     eax, eax
.text:0000000000005D92
.text:0000000000005D92 loc_5D92:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005D92                 pop     rbx
.text:0000000000005D93                 pop     rbp
.text:0000000000005D94                 pop     r12
.text:0000000000005D96                 retn
.text:0000000000005D96 ; } // starts at 5D40
.text:0000000000005D96 rpl_fseeko      endp
.text:0000000000005D96
.text:0000000000005D96 ; ---------------------------------------------------------------------------
.text:0000000000005D97                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DA0
.text:0000000000005DA0 ; Attributes: info_from_lumina
.text:0000000000005DA0
.text:0000000000005DA0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005DA0                 public rpl_mbrtowc
.text:0000000000005DA0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005DA0
.text:0000000000005DA0 pwc             = dword ptr -34h
.text:0000000000005DA0 var_30          = qword ptr -30h
.text:0000000000005DA0
.text:0000000000005DA0 ; __unwind {
.text:0000000000005DA0                 push    r13
.text:0000000000005DA2                 push    r12
.text:0000000000005DA4                 mov     r13, rsi
.text:0000000000005DA7                 push    rbp
.text:0000000000005DA8                 push    rbx
.text:0000000000005DA9                 mov     rbx, rdi
.text:0000000000005DAC                 mov     r12, rdx
.text:0000000000005DAF                 sub     rsp, 18h
.text:0000000000005DB3                 mov     rax, fs:28h
.text:0000000000005DBC                 mov     [rsp+38h+var_30], rax
.text:0000000000005DC1                 xor     eax, eax
.text:0000000000005DC3                 lea     rax, [rsp+38h+pwc]
.text:0000000000005DC8                 test    rdi, rdi
.text:0000000000005DCB                 cmovz   rbx, rax
.text:0000000000005DCF                 mov     rdi, rbx        ; pwc
.text:0000000000005DD2                 call    _mbrtowc
.text:0000000000005DD7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005DDB                 mov     rbp, rax
.text:0000000000005DDE                 jbe     short loc_5E00
.text:0000000000005DE0                 test    r12, r12
.text:0000000000005DE3                 jz      short loc_5E00
.text:0000000000005DE5                 xor     edi, edi
.text:0000000000005DE7                 call    hard_locale
.text:0000000000005DEC                 test    al, al
.text:0000000000005DEE                 jnz     short loc_5E00
.text:0000000000005DF0                 movzx   eax, byte ptr [r13+0]
.text:0000000000005DF5                 mov     ebp, 1
.text:0000000000005DFA                 mov     [rbx], eax
.text:0000000000005DFC                 nop     dword ptr [rax+00h]
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005E00                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005E00                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005E05                 xor     rdx, fs:28h
.text:0000000000005E0E                 mov     rax, rbp
.text:0000000000005E11                 jnz     short loc_5E1E
.text:0000000000005E13                 add     rsp, 18h
.text:0000000000005E17                 pop     rbx
.text:0000000000005E18                 pop     rbp
.text:0000000000005E19                 pop     r12
.text:0000000000005E1B                 pop     r13
.text:0000000000005E1D                 retn
.text:0000000000005E1E ; ---------------------------------------------------------------------------
.text:0000000000005E1E
.text:0000000000005E1E loc_5E1E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005E1E                 call    ___stack_chk_fail
.text:0000000000005E1E ; } // starts at 5DA0
.text:0000000000005E1E rpl_mbrtowc     endp
.text:0000000000005E1E
.text:0000000000005E1E ; ---------------------------------------------------------------------------
.text:0000000000005E23                 align 10h
.text:0000000000005E30
.text:0000000000005E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E30
.text:0000000000005E30 ; Attributes: noreturn
.text:0000000000005E30
.text:0000000000005E30 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000005E30 ; __unwind {
.text:0000000000005E30                 mov     edi, 1          ; status
.text:0000000000005E35                 jmp     usage
.text:0000000000005E35 ; } // starts at 5E30
.text:0000000000005E35 __argmatch_die  endp
.text:0000000000005E35
.text:0000000000005E35 ; ---------------------------------------------------------------------------
.text:0000000000005E3A                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40 ; Attributes: info_from_lumina
.text:0000000000005E40
.text:0000000000005E40 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005E40                 public argmatch
.text:0000000000005E40 argmatch        proc near               ; CODE XREF: human_options+52↑p
.text:0000000000005E40                                         ; __xargmatch_internal+2C↓p
.text:0000000000005E40
.text:0000000000005E40 var_58          = qword ptr -58h
.text:0000000000005E40 s2              = qword ptr -50h
.text:0000000000005E40 var_41          = byte ptr -41h
.text:0000000000005E40 var_40          = qword ptr -40h
.text:0000000000005E40
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 push    r15
.text:0000000000005E42                 push    r14
.text:0000000000005E44                 mov     r15, rsi
.text:0000000000005E47                 push    r13
.text:0000000000005E49                 push    r12
.text:0000000000005E4B                 mov     r13, rcx
.text:0000000000005E4E                 push    rbp
.text:0000000000005E4F                 push    rbx
.text:0000000000005E50                 mov     rbp, rdx
.text:0000000000005E53                 sub     rsp, 28h
.text:0000000000005E57                 mov     [rsp+58h+s2], rdi
.text:0000000000005E5C                 mov     [rsp+58h+var_40], rdx
.text:0000000000005E61                 call    _strlen
.text:0000000000005E66                 mov     r14, [r15]
.text:0000000000005E69                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000005E71                 test    r14, r14
.text:0000000000005E74                 jz      loc_5F2D
.text:0000000000005E7A                 mov     r12, rax
.text:0000000000005E7D                 mov     [rsp+58h+var_41], 0
.text:0000000000005E82                 xor     ebx, ebx
.text:0000000000005E84                 jmp     short loc_5ED7
.text:0000000000005E84 ; ---------------------------------------------------------------------------
.text:0000000000005E86                 align 10h
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000005E90                 mov     rax, [rsp+58h+var_40]
.text:0000000000005E95                 test    rax, rax
.text:0000000000005E98                 jz      loc_5F40
.text:0000000000005E9E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000005EA2                 mov     rdx, r13        ; n
.text:0000000000005EA5                 mov     rsi, rbp        ; s2
.text:0000000000005EA8                 imul    rdi, r13
.text:0000000000005EAC                 add     rdi, rax        ; s1
.text:0000000000005EAF                 call    _memcmp
.text:0000000000005EB4                 test    eax, eax
.text:0000000000005EB6                 movzx   eax, [rsp+58h+var_41]
.text:0000000000005EBB                 mov     ecx, 1
.text:0000000000005EC0                 cmovnz  eax, ecx
.text:0000000000005EC3                 mov     [rsp+58h+var_41], al
.text:0000000000005EC7
.text:0000000000005EC7 loc_5EC7:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000005EC7                                         ; argmatch+105↓j
.text:0000000000005EC7                 add     rbx, 1
.text:0000000000005ECB                 add     rbp, r13
.text:0000000000005ECE                 mov     r14, [r15+rbx*8]
.text:0000000000005ED2                 test    r14, r14
.text:0000000000005ED5                 jz      short loc_5F18
.text:0000000000005ED7
.text:0000000000005ED7 loc_5ED7:                               ; CODE XREF: argmatch+44↑j
.text:0000000000005ED7                                         ; argmatch+D1↓j
.text:0000000000005ED7                 mov     rsi, [rsp+58h+s2] ; s2
.text:0000000000005EDC                 mov     rdx, r12        ; n
.text:0000000000005EDF                 mov     rdi, r14        ; s1
.text:0000000000005EE2                 call    _strncmp
.text:0000000000005EE7                 test    eax, eax
.text:0000000000005EE9                 jnz     short loc_5EC7
.text:0000000000005EEB                 mov     rdi, r14        ; s
.text:0000000000005EEE                 call    _strlen
.text:0000000000005EF3                 cmp     rax, r12
.text:0000000000005EF6                 jz      short loc_5F50
.text:0000000000005EF8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000005EFD                 jnz     short loc_5E90
.text:0000000000005EFF                 mov     [rsp+58h+var_58], rbx
.text:0000000000005F03                 add     rbx, 1
.text:0000000000005F07                 add     rbp, r13
.text:0000000000005F0A                 mov     r14, [r15+rbx*8]
.text:0000000000005F0E                 test    r14, r14
.text:0000000000005F11                 jnz     short loc_5ED7
.text:0000000000005F13                 nop     dword ptr [rax+rax+00h]
.text:0000000000005F18
.text:0000000000005F18 loc_5F18:                               ; CODE XREF: argmatch+95↑j
.text:0000000000005F18                 cmp     [rsp+58h+var_41], 0
.text:0000000000005F1D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005F24                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000005F29                 mov     [rsp+58h+var_58], rax
.text:0000000000005F2D
.text:0000000000005F2D loc_5F2D:                               ; CODE XREF: argmatch+34↑j
.text:0000000000005F2D                                         ; argmatch+114↓j
.text:0000000000005F2D                 mov     rax, [rsp+58h+var_58]
.text:0000000000005F31                 add     rsp, 28h
.text:0000000000005F35                 pop     rbx
.text:0000000000005F36                 pop     rbp
.text:0000000000005F37                 pop     r12
.text:0000000000005F39                 pop     r13
.text:0000000000005F3B                 pop     r14
.text:0000000000005F3D                 pop     r15
.text:0000000000005F3F                 retn
.text:0000000000005F40 ; ---------------------------------------------------------------------------
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: argmatch+58↑j
.text:0000000000005F40                 mov     [rsp+58h+var_41], 1
.text:0000000000005F45                 jmp     short loc_5EC7
.text:0000000000005F45 ; ---------------------------------------------------------------------------
.text:0000000000005F47                 align 10h
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000005F50                 mov     [rsp+58h+var_58], rbx
.text:0000000000005F54                 jmp     short loc_5F2D
.text:0000000000005F54 ; } // starts at 5E40
.text:0000000000005F54 argmatch        endp
.text:0000000000005F54
.text:0000000000005F54 ; ---------------------------------------------------------------------------
.text:0000000000005F56                 align 20h
.text:0000000000005F60
.text:0000000000005F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F60
.text:0000000000005F60 ; Attributes: info_from_lumina
.text:0000000000005F60
.text:0000000000005F60 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000005F60                 public argmatch_invalid
.text:0000000000005F60 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000005F60 ; __unwind {
.text:0000000000005F60                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F64                 push    r12
.text:0000000000005F66                 mov     edx, 5          ; category
.text:0000000000005F6B                 push    rbp
.text:0000000000005F6C                 mov     r12, rsi
.text:0000000000005F6F                 push    rbx
.text:0000000000005F70                 mov     rbp, rdi
.text:0000000000005F73                 jz      short loc_5FC0
.text:0000000000005F75                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000005F7C                 xor     edi, edi        ; domainname
.text:0000000000005F7E                 call    _dcgettext
.text:0000000000005F83                 mov     rbx, rax
.text:0000000000005F86
.text:0000000000005F86 loc_5F86:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000005F86                 mov     rsi, rbp
.text:0000000000005F89                 mov     edi, 1
.text:0000000000005F8E                 call    quote_n
.text:0000000000005F93                 mov     rdx, r12
.text:0000000000005F96                 mov     rbp, rax
.text:0000000000005F99                 mov     esi, 8
.text:0000000000005F9E                 xor     edi, edi
.text:0000000000005FA0                 call    quotearg_n_style
.text:0000000000005FA5                 mov     r8, rbp
.text:0000000000005FA8                 mov     rdx, rbx        ; format
.text:0000000000005FAB                 mov     rcx, rax
.text:0000000000005FAE                 pop     rbx
.text:0000000000005FAF                 pop     rbp
.text:0000000000005FB0                 pop     r12
.text:0000000000005FB2                 xor     esi, esi        ; errnum
.text:0000000000005FB4                 xor     edi, edi        ; status
.text:0000000000005FB6                 xor     eax, eax
.text:0000000000005FB8                 jmp     _error
.text:0000000000005FB8 ; ---------------------------------------------------------------------------
.text:0000000000005FBD                 align 20h
.text:0000000000005FC0
.text:0000000000005FC0 loc_5FC0:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000005FC0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000005FC7                 xor     edi, edi        ; domainname
.text:0000000000005FC9                 call    _dcgettext
.text:0000000000005FCE                 mov     rbx, rax
.text:0000000000005FD1                 jmp     short loc_5F86
.text:0000000000005FD1 ; } // starts at 5F60
.text:0000000000005FD1 argmatch_invalid endp
.text:0000000000005FD1
.text:0000000000005FD1 ; ---------------------------------------------------------------------------
.text:0000000000005FD3                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FE0
.text:0000000000005FE0 ; Attributes: info_from_lumina
.text:0000000000005FE0
.text:0000000000005FE0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005FE0                 public argmatch_valid
.text:0000000000005FE0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000005FE0 ; __unwind {
.text:0000000000005FE0                 push    r15
.text:0000000000005FE2                 push    r14
.text:0000000000005FE4                 mov     r14, rdi
.text:0000000000005FE7                 push    r13
.text:0000000000005FE9                 push    r12
.text:0000000000005FEB                 xor     edi, edi        ; domainname
.text:0000000000005FED                 push    rbp
.text:0000000000005FEE                 push    rbx
.text:0000000000005FEF                 mov     rbp, rsi
.text:0000000000005FF2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000005FF9                 mov     r12, rdx
.text:0000000000005FFC                 mov     edx, 5          ; category
.text:0000000000006001                 sub     rsp, 8
.text:0000000000006005                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000600C                 call    _dcgettext
.text:0000000000006011                 mov     rdi, rax        ; s
.text:0000000000006014                 mov     rsi, rbx        ; stream
.text:0000000000006017                 call    _fputs_unlocked
.text:000000000000601C                 mov     r15, [r14]
.text:000000000000601F                 test    r15, r15
.text:0000000000006022                 jz      loc_60B8
.text:0000000000006028                 xor     r13d, r13d
.text:000000000000602B                 xor     ebx, ebx
.text:000000000000602D                 jmp     short loc_6068
.text:000000000000602D ; ---------------------------------------------------------------------------
.text:000000000000602F                 align 10h
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000006030                                         ; argmatch_valid+9D↓j
.text:0000000000006030                 mov     rdi, r15
.text:0000000000006033                 add     rbx, 1
.text:0000000000006037                 mov     r13, rbp
.text:000000000000603A                 call    quote
.text:000000000000603F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006046                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000604D                 mov     rcx, rax
.text:0000000000006050                 mov     esi, 1
.text:0000000000006055                 xor     eax, eax
.text:0000000000006057                 add     rbp, r12
.text:000000000000605A                 call    ___fprintf_chk
.text:000000000000605F                 mov     r15, [r14+rbx*8]
.text:0000000000006063                 test    r15, r15
.text:0000000000006066                 jz      short loc_60B8
.text:0000000000006068
.text:0000000000006068 loc_6068:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000006068                                         ; argmatch_valid+D2↓j
.text:0000000000006068                 test    rbx, rbx
.text:000000000000606B                 jz      short loc_6030
.text:000000000000606D                 mov     rdx, r12        ; n
.text:0000000000006070                 mov     rsi, rbp        ; s2
.text:0000000000006073                 mov     rdi, r13        ; s1
.text:0000000000006076                 call    _memcmp
.text:000000000000607B                 test    eax, eax
.text:000000000000607D                 jnz     short loc_6030
.text:000000000000607F                 mov     rdi, r15
.text:0000000000006082                 add     rbx, 1
.text:0000000000006086                 add     rbp, r12
.text:0000000000006089                 call    quote
.text:000000000000608E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006095                 lea     rdx, aS_0       ; ", %s"
.text:000000000000609C                 mov     rcx, rax
.text:000000000000609F                 mov     esi, 1
.text:00000000000060A4                 xor     eax, eax
.text:00000000000060A6                 call    ___fprintf_chk
.text:00000000000060AB                 mov     r15, [r14+rbx*8]
.text:00000000000060AF                 test    r15, r15
.text:00000000000060B2                 jnz     short loc_6068
.text:00000000000060B4                 nop     dword ptr [rax+00h]
.text:00000000000060B8
.text:00000000000060B8 loc_60B8:                               ; CODE XREF: argmatch_valid+42↑j
.text:00000000000060B8                                         ; argmatch_valid+86↑j
.text:00000000000060B8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000060BF                 mov     rax, [rdi+28h]
.text:00000000000060C3                 cmp     rax, [rdi+30h]
.text:00000000000060C7                 jnb     short loc_60E8
.text:00000000000060C9                 lea     rdx, [rax+1]
.text:00000000000060CD                 mov     [rdi+28h], rdx
.text:00000000000060D1                 mov     byte ptr [rax], 0Ah
.text:00000000000060D4                 add     rsp, 8
.text:00000000000060D8                 pop     rbx
.text:00000000000060D9                 pop     rbp
.text:00000000000060DA                 pop     r12
.text:00000000000060DC                 pop     r13
.text:00000000000060DE                 pop     r14
.text:00000000000060E0                 pop     r15
.text:00000000000060E2                 retn
.text:00000000000060E2 ; ---------------------------------------------------------------------------
.text:00000000000060E3                 align 8
.text:00000000000060E8
.text:00000000000060E8 loc_60E8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:00000000000060E8                 add     rsp, 8
.text:00000000000060EC                 mov     esi, 0Ah        ; int
.text:00000000000060F1                 pop     rbx
.text:00000000000060F2                 pop     rbp
.text:00000000000060F3                 pop     r12
.text:00000000000060F5                 pop     r13
.text:00000000000060F7                 pop     r14
.text:00000000000060F9                 pop     r15
.text:00000000000060FB                 jmp     ___overflow
.text:00000000000060FB ; } // starts at 5FE0
.text:00000000000060FB argmatch_valid  endp
.text:00000000000060FB
.text:0000000000006100
.text:0000000000006100 ; =============== S U B R O U T I N E =======================================
.text:0000000000006100
.text:0000000000006100 ; Attributes: info_from_lumina
.text:0000000000006100
.text:0000000000006100 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000006100                 public __xargmatch_internal
.text:0000000000006100 __xargmatch_internal proc near
.text:0000000000006100 ; __unwind {
.text:0000000000006100                 push    r15
.text:0000000000006102                 push    r14
.text:0000000000006104                 mov     r14, rdi
.text:0000000000006107                 push    r13
.text:0000000000006109                 push    r12
.text:000000000000610B                 mov     r12, rsi
.text:000000000000610E                 push    rbp
.text:000000000000610F                 push    rbx
.text:0000000000006110                 mov     rbp, rcx
.text:0000000000006113                 mov     rbx, rdx
.text:0000000000006116                 mov     rcx, r8
.text:0000000000006119                 mov     rdx, rbp
.text:000000000000611C                 sub     rsp, 8
.text:0000000000006120                 mov     rsi, rbx
.text:0000000000006123                 mov     rdi, r12
.text:0000000000006126                 mov     r15, r8
.text:0000000000006129                 mov     r13, r9
.text:000000000000612C                 call    argmatch
.text:0000000000006131                 test    rax, rax
.text:0000000000006134                 js      short loc_6145
.text:0000000000006136
.text:0000000000006136 loc_6136:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000006136                 add     rsp, 8
.text:000000000000613A                 pop     rbx
.text:000000000000613B                 pop     rbp
.text:000000000000613C                 pop     r12
.text:000000000000613E                 pop     r13
.text:0000000000006140                 pop     r14
.text:0000000000006142                 pop     r15
.text:0000000000006144                 retn
.text:0000000000006145 ; ---------------------------------------------------------------------------
.text:0000000000006145
.text:0000000000006145 loc_6145:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000006145                 mov     rdx, rax
.text:0000000000006148                 mov     rsi, r12
.text:000000000000614B                 mov     rdi, r14
.text:000000000000614E                 call    argmatch_invalid
.text:0000000000006153                 mov     rdx, r15
.text:0000000000006156                 mov     rsi, rbp
.text:0000000000006159                 mov     rdi, rbx
.text:000000000000615C                 call    argmatch_valid
.text:0000000000006161                 call    r13
.text:0000000000006164                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000616B                 jmp     short loc_6136
.text:000000000000616B ; } // starts at 6100
.text:000000000000616B __xargmatch_internal endp
.text:000000000000616B
.text:000000000000616B ; ---------------------------------------------------------------------------
.text:000000000000616D                 align 10h
.text:0000000000006170
.text:0000000000006170 ; =============== S U B R O U T I N E =======================================
.text:0000000000006170
.text:0000000000006170 ; Attributes: info_from_lumina
.text:0000000000006170
.text:0000000000006170 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000006170                 public argmatch_to_argument
.text:0000000000006170 argmatch_to_argument proc near
.text:0000000000006170 ; __unwind {
.text:0000000000006170                 push    r14
.text:0000000000006172                 push    r13
.text:0000000000006174                 push    r12
.text:0000000000006176                 push    rbp
.text:0000000000006177                 push    rbx
.text:0000000000006178                 mov     r14, [rsi]
.text:000000000000617B                 test    r14, r14
.text:000000000000617E                 jz      short loc_61B1
.text:0000000000006180                 mov     r12, rcx
.text:0000000000006183                 mov     r13, rdi
.text:0000000000006186                 mov     rbp, rdx
.text:0000000000006189                 lea     rbx, [rsi+8]
.text:000000000000618D                 jmp     short loc_619F
.text:000000000000618D ; ---------------------------------------------------------------------------
.text:000000000000618F                 align 10h
.text:0000000000006190
.text:0000000000006190 loc_6190:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000006190                 mov     r14, [rbx]
.text:0000000000006193                 add     rbp, r12
.text:0000000000006196                 add     rbx, 8
.text:000000000000619A                 test    r14, r14
.text:000000000000619D                 jz      short loc_61B1
.text:000000000000619F
.text:000000000000619F loc_619F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000619F                 mov     rdx, r12        ; n
.text:00000000000061A2                 mov     rsi, rbp        ; s2
.text:00000000000061A5                 mov     rdi, r13        ; s1
.text:00000000000061A8                 call    _memcmp
.text:00000000000061AD                 test    eax, eax
.text:00000000000061AF                 jnz     short loc_6190
.text:00000000000061B1
.text:00000000000061B1 loc_61B1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:00000000000061B1                                         ; argmatch_to_argument+2D↑j
.text:00000000000061B1                 pop     rbx
.text:00000000000061B2                 mov     rax, r14
.text:00000000000061B5                 pop     rbp
.text:00000000000061B6                 pop     r12
.text:00000000000061B8                 pop     r13
.text:00000000000061BA                 pop     r14
.text:00000000000061BC                 retn
.text:00000000000061BC ; } // starts at 6170
.text:00000000000061BC argmatch_to_argument endp
.text:00000000000061BC
.text:00000000000061BC ; ---------------------------------------------------------------------------
.text:00000000000061BD                 align 20h
.text:00000000000061C0
.text:00000000000061C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061C0
.text:00000000000061C0 ; Attributes: info_from_lumina
.text:00000000000061C0
.text:00000000000061C0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000061C0                 public close_stream
.text:00000000000061C0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000061C0                                         ; close_stdout+33↑p
.text:00000000000061C0 ; __unwind {
.text:00000000000061C0                 push    r12
.text:00000000000061C2                 push    rbp
.text:00000000000061C3                 mov     rbp, rdi
.text:00000000000061C6                 push    rbx
.text:00000000000061C7                 call    ___fpending
.text:00000000000061CC                 mov     ebx, [rbp+0]
.text:00000000000061CF                 mov     rdi, rbp        ; stream
.text:00000000000061D2                 mov     r12, rax
.text:00000000000061D5                 call    rpl_fclose
.text:00000000000061DA                 and     ebx, 20h
.text:00000000000061DD                 test    ebx, ebx
.text:00000000000061DF                 jnz     short loc_61F8
.text:00000000000061E1                 test    eax, eax
.text:00000000000061E3                 jz      short loc_61EF
.text:00000000000061E5                 test    r12, r12
.text:00000000000061E8                 mov     eax, 0FFFFFFFFh
.text:00000000000061ED                 jz      short loc_6228
.text:00000000000061EF
.text:00000000000061EF loc_61EF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000061EF                 pop     rbx
.text:00000000000061F0                 pop     rbp
.text:00000000000061F1                 pop     r12
.text:00000000000061F3                 retn
.text:00000000000061F3 ; ---------------------------------------------------------------------------
.text:00000000000061F4                 align 8
.text:00000000000061F8
.text:00000000000061F8 loc_61F8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000061F8                 test    eax, eax
.text:00000000000061FA                 jnz     short loc_6218
.text:00000000000061FC                 call    ___errno_location
.text:0000000000006201                 mov     dword ptr [rax], 0
.text:0000000000006207                 mov     eax, 0FFFFFFFFh
.text:000000000000620C                 pop     rbx
.text:000000000000620D                 pop     rbp
.text:000000000000620E                 pop     r12
.text:0000000000006210                 retn
.text:0000000000006210 ; ---------------------------------------------------------------------------
.text:0000000000006211                 align 8
.text:0000000000006218
.text:0000000000006218 loc_6218:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006218                 pop     rbx
.text:0000000000006219                 mov     eax, 0FFFFFFFFh
.text:000000000000621E                 pop     rbp
.text:000000000000621F                 pop     r12
.text:0000000000006221                 retn
.text:0000000000006221 ; ---------------------------------------------------------------------------
.text:0000000000006222                 align 8
.text:0000000000006228
.text:0000000000006228 loc_6228:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006228                 call    ___errno_location
.text:000000000000622D                 cmp     dword ptr [rax], 9
.text:0000000000006230                 pop     rbx
.text:0000000000006231                 pop     rbp
.text:0000000000006232                 pop     r12
.text:0000000000006234                 setnz   al
.text:0000000000006237                 movzx   eax, al
.text:000000000000623A                 neg     eax
.text:000000000000623C                 retn
.text:000000000000623C ; } // starts at 61C0
.text:000000000000623C close_stream    endp
.text:000000000000623C
.text:000000000000623C ; ---------------------------------------------------------------------------
.text:000000000000623D                 align 20h
.text:0000000000006240
.text:0000000000006240 ; =============== S U B R O U T I N E =======================================
.text:0000000000006240
.text:0000000000006240
.text:0000000000006240                 public hard_locale
.text:0000000000006240 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006240 ; __unwind {
.text:0000000000006240                 sub     rsp, 8
.text:0000000000006244                 xor     esi, esi        ; locale
.text:0000000000006246                 call    _setlocale
.text:000000000000624B                 mov     rdx, rax
.text:000000000000624E                 mov     eax, 1
.text:0000000000006253                 test    rdx, rdx
.text:0000000000006256                 jz      short loc_6275
.text:0000000000006258                 lea     rdi, aC         ; "C"
.text:000000000000625F                 mov     ecx, 2
.text:0000000000006264                 mov     rsi, rdx
.text:0000000000006267                 repe cmpsb
.text:0000000000006269                 setnbe  cl
.text:000000000000626C                 sbb     cl, 0
.text:000000000000626F                 xor     eax, eax
.text:0000000000006271                 test    cl, cl
.text:0000000000006273                 jnz     short loc_6280
.text:0000000000006275
.text:0000000000006275 loc_6275:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006275                 add     rsp, 8
.text:0000000000006279                 retn
.text:0000000000006279 ; ---------------------------------------------------------------------------
.text:000000000000627A                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006280                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006287                 mov     ecx, 6
.text:000000000000628C                 mov     rsi, rdx
.text:000000000000628F                 repe cmpsb
.text:0000000000006291                 setnbe  al
.text:0000000000006294                 sbb     al, 0
.text:0000000000006296                 test    al, al
.text:0000000000006298                 setnz   al
.text:000000000000629B                 add     rsp, 8
.text:000000000000629F                 retn
.text:000000000000629F ; } // starts at 6240
.text:000000000000629F hard_locale     endp
.text:000000000000629F
.text:00000000000062A0
.text:00000000000062A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062A0
.text:00000000000062A0
.text:00000000000062A0                 public locale_charset
.text:00000000000062A0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000062A0 ; __unwind {
.text:00000000000062A0                 sub     rsp, 8
.text:00000000000062A4                 mov     edi, 0Eh        ; item
.text:00000000000062A9                 call    _nl_langinfo
.text:00000000000062AE                 test    rax, rax
.text:00000000000062B1                 jz      short loc_62D0
.text:00000000000062B3                 cmp     byte ptr [rax], 0
.text:00000000000062B6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000062BD                 cmovz   rax, rdx
.text:00000000000062C1                 add     rsp, 8
.text:00000000000062C5                 retn
.text:00000000000062C5 ; ---------------------------------------------------------------------------
.text:00000000000062C6                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000062D0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000062D7                 add     rsp, 8
.text:00000000000062DB                 retn
.text:00000000000062DB ; } // starts at 62A0
.text:00000000000062DB locale_charset  endp
.text:00000000000062DB
.text:00000000000062DB ; ---------------------------------------------------------------------------
.text:00000000000062DC                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0 ; Attributes: info_from_lumina
.text:00000000000062E0
.text:00000000000062E0 ; void _libc_csu_init(void)
.text:00000000000062E0                 public __libc_csu_init
.text:00000000000062E0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 push    r15
.text:00000000000062E2                 push    r14
.text:00000000000062E4                 mov     r15, rdx
.text:00000000000062E7                 push    r13
.text:00000000000062E9                 push    r12
.text:00000000000062EB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000062F2                 push    rbp
.text:00000000000062F3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000062FA                 push    rbx
.text:00000000000062FB                 mov     r13d, edi
.text:00000000000062FE                 mov     r14, rsi
.text:0000000000006301                 sub     rbp, r12
.text:0000000000006304                 sub     rsp, 8
.text:0000000000006308                 sar     rbp, 3
.text:000000000000630C                 call    _init_proc
.text:0000000000006311                 test    rbp, rbp
.text:0000000000006314                 jz      short loc_6336
.text:0000000000006316                 xor     ebx, ebx
.text:0000000000006318                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006320
.text:0000000000006320 loc_6320:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006320                 mov     rdx, r15
.text:0000000000006323                 mov     rsi, r14
.text:0000000000006326                 mov     edi, r13d
.text:0000000000006329                 call    ds:(__frame_dummy_init_array_entry - 208B10h)[r12+rbx*8]
.text:000000000000632D                 add     rbx, 1
.text:0000000000006331                 cmp     rbp, rbx
.text:0000000000006334                 jnz     short loc_6320
.text:0000000000006336
.text:0000000000006336 loc_6336:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006336                 add     rsp, 8
.text:000000000000633A                 pop     rbx
.text:000000000000633B                 pop     rbp
.text:000000000000633C                 pop     r12
.text:000000000000633E                 pop     r13
.text:0000000000006340                 pop     r14
.text:0000000000006342                 pop     r15
.text:0000000000006344                 retn
.text:0000000000006344 ; } // starts at 62E0
.text:0000000000006344 __libc_csu_init endp
.text:0000000000006344
.text:0000000000006344 ; ---------------------------------------------------------------------------
.text:0000000000006345                 align 10h
.text:0000000000006350
.text:0000000000006350 ; =============== S U B R O U T I N E =======================================
.text:0000000000006350
.text:0000000000006350
.text:0000000000006350 ; void _libc_csu_fini(void)
.text:0000000000006350                 public __libc_csu_fini
.text:0000000000006350 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006350 ; __unwind {
.text:0000000000006350                 rep retn
.text:0000000000006350 ; } // starts at 6350
.text:0000000000006350 __libc_csu_fini endp
.text:0000000000006350
.text:0000000000006350 ; ---------------------------------------------------------------------------
.text:0000000000006352                 align 20h
.text:0000000000006360
.text:0000000000006360 ; =============== S U B R O U T I N E =======================================
.text:0000000000006360
.text:0000000000006360
.text:0000000000006360 atexit          proc near               ; CODE XREF: main+6A↑p
.text:0000000000006360 ; __unwind {
.text:0000000000006360                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006367                 xor     esi, esi        ; obj
.text:0000000000006369                 jmp     ___cxa_atexit
.text:0000000000006369 ; } // starts at 6360
.text:0000000000006369 atexit          endp
.text:0000000000006369
.text:0000000000006369 _text           ends
.text:0000000000006369
LOAD:000000000000636E ; ===========================================================================
LOAD:000000000000636E
LOAD:000000000000636E ; Segment type: Pure code
LOAD:000000000000636E ; Segment permissions: Read/Execute
LOAD:000000000000636E LOAD            segment byte public 'CODE' use64
LOAD:000000000000636E                 assume cs:LOAD
LOAD:000000000000636E                 ;org 636Eh
LOAD:000000000000636E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000636E                 align 10h
LOAD:000000000000636E LOAD            ends
LOAD:000000000000636E
.fini:0000000000006370 ; ===========================================================================
.fini:0000000000006370
.fini:0000000000006370 ; Segment type: Pure code
.fini:0000000000006370 ; Segment permissions: Read/Execute
.fini:0000000000006370 _fini           segment dword public 'CODE' use64
.fini:0000000000006370                 assume cs:_fini
.fini:0000000000006370                 ;org 6370h
.fini:0000000000006370                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006370
.fini:0000000000006370 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006370
.fini:0000000000006370
.fini:0000000000006370                 public _term_proc
.fini:0000000000006370 _term_proc      proc near
.fini:0000000000006370                 sub     rsp, 8          ; _fini
.fini:0000000000006374                 add     rsp, 8
.fini:0000000000006378                 retn
.fini:0000000000006378 _term_proc      endp
.fini:0000000000006378
.fini:0000000000006378 _fini           ends
.fini:0000000000006378
LOAD:0000000000006379 ; ===========================================================================
LOAD:0000000000006379
LOAD:0000000000006379 ; Segment type: Pure code
LOAD:0000000000006379 ; Segment permissions: Read/Execute
LOAD:0000000000006379 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006379                 assume cs:LOAD
LOAD:0000000000006379                 ;org 6379h
LOAD:0000000000006379                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006379                 align 20h
LOAD:0000000000006379 LOAD            ends
LOAD:0000000000006379
.rodata:0000000000006380 ; ===========================================================================
.rodata:0000000000006380
.rodata:0000000000006380 ; Segment type: Pure data
.rodata:0000000000006380 ; Segment permissions: Read
.rodata:0000000000006380 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006380                 assume cs:_rodata
.rodata:0000000000006380                 ;org 6380h
.rodata:0000000000006380                 public _IO_stdin_used
.rodata:0000000000006380 _IO_stdin_used  db    1
.rodata:0000000000006381                 db    0
.rodata:0000000000006382                 db    2
.rodata:0000000000006383                 db    0
.rodata:0000000000006384 aDS             db '%d %s',0            ; DATA XREF: sysv_sum_file+F4↑o
.rodata:000000000000638A a05d5s          db '%05d %5s',0         ; DATA XREF: bsd_sum_file+EF↑o
.rodata:0000000000006393 asc_6393        db '[',0                ; DATA XREF: usage+13D↑o
.rodata:0000000000006395 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+164↑o
.rodata:00000000000063A5 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000063A5                                         ; DATA XREF: usage+194↑o
.rodata:00000000000063A5                                         ; usage+28C↑o ...
.rodata:00000000000063BB aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A5↑o
.rodata:00000000000063C5 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B1↑o
.rodata:00000000000063D4 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+144↑o
.rodata:00000000000063DE aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+170↑o
.rodata:00000000000063E8 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+188↑o
.rodata:00000000000063E8                                         ; main+104↑o ...
.rodata:00000000000063F2 ; const char aSOnlineHelpS[]
.rodata:00000000000063F2 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:00000000000063F2                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006409 unk_6409        db  47h ; G             ; DATA XREF: main+FD↑o
.rodata:0000000000006409                                         ; usage+216↑o ...
.rodata:000000000000640A                 db  4Eh ; N
.rodata:000000000000640B                 db  55h ; U
.rodata:000000000000640C                 db  20h
.rodata:000000000000640D ; const char domainname[]
.rodata:000000000000640D domainname      db 'coreutils',0        ; DATA XREF: main+4B↑o
.rodata:000000000000640D                                         ; main+57↑o ...
.rodata:0000000000006417 ; const char s2[]
.rodata:0000000000006417 s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:0000000000006417                                         ; usage+2FE↑o
.rodata:000000000000641B ; const char aFullDocumentat[]
.rodata:000000000000641B aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000641B                                         ; DATA XREF: usage:loc_2309↑o
.rodata:000000000000641B                                         ; usage:loc_23C6↑o
.rodata:0000000000006436 ; const char dirname[]
.rodata:0000000000006436 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006436                                         ; DATA XREF: main+44↑o
.rodata:000000000000644E aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+EF↑o
.rodata:000000000000645E aKayvanAghaiepo db 'Kayvan Aghaiepour',0
.rodata:000000000000645E                                         ; DATA XREF: main+F6↑o
.rodata:0000000000006470 ; const char shortopts[]
.rodata:0000000000006470 shortopts       db 'rs',0               ; DATA XREF: main+1D↑o
.rodata:0000000000006473 aSysv           db 'sysv',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000006478 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B40↓o
.rodata:000000000000647D aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:0000000000006485                 align 8
.rodata:0000000000006488 ; const char msgid[]
.rodata:0000000000006488 msgid           db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006488                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000064AF                 align 10h
.rodata:00000000000064B0 ; const char aUsageSOptionFi[]
.rodata:00000000000064B0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:00000000000064B0                                         ; DATA XREF: usage:loc_210D↑o
.rodata:00000000000064D1                 align 8
.rodata:00000000000064D8 ; const char aPrintChecksumA[]
.rodata:00000000000064D8 aPrintChecksumA db 'Print checksum and block counts for each FILE.',0Ah,0
.rodata:00000000000064D8                                         ; DATA XREF: usage+84↑o
.rodata:0000000000006508 ; const char aWithNoFileOrWh[]
.rodata:0000000000006508 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000006508                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000006540 ; const char aRUseBsdSumAlgo[]
.rodata:0000000000006540 aRUseBsdSumAlgo db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000006540                 db '  -r              use BSD sum algorithm, use 1K blocks',0Ah
.rodata:0000000000006540                 db '  -s, --sysv      use System V sum algorithm, use 512 bytes block'
.rodata:0000000000006540                 db 's',0Ah,0
.rodata:00000000000065BC                 align 20h
.rodata:00000000000065C0 ; const char aHelpDisplayThi[]
.rodata:00000000000065C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000065C0                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000065ED                 align 10h
.rodata:00000000000065F0 ; const char aVersionOutputV[]
.rodata:00000000000065F0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000065F0                                         ; DATA XREF: usage+118↑o
.rodata:0000000000006626                 align 8
.rodata:0000000000006628 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006628                                         ; DATA XREF: usage+20F↑o
.rodata:0000000000006628                                         ; usage+273↑o ...
.rodata:0000000000006650 ; const char aReportAnyTrans[]
.rodata:0000000000006650 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006650                                         ; DATA XREF: usage+367↑o
.rodata:0000000000006650                 db 'am/>',0Ah,0
.rodata:0000000000006697                 align 8
.rodata:0000000000006698 ; const char aOrAvailableLoc[]
.rodata:0000000000006698 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006698                                         ; DATA XREF: usage:loc_234E↑o
.rodata:00000000000066CB a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000066D0 ; const char aWriteError[]
.rodata:00000000000066D0 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_24A3↑o
.rodata:00000000000066D0                                         ; bsd_sum_file:loc_1FF0↑o
.rodata:00000000000066DC ; const char format[]
.rodata:00000000000066DC format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000066E3 asc_66E3        db '.',0                ; DATA XREF: human_readable+84↑o
.rodata:00000000000066E5 a0lf            db '%.0Lf',0            ; DATA XREF: human_readable+310↑o
.rodata:00000000000066E5                                         ; human_readable+749↑o
.rodata:00000000000066EB a1lf            db '%.1Lf',0            ; DATA XREF: human_readable+1A1↑o
.rodata:00000000000066EB                                         ; human_readable+6F4↑o
.rodata:00000000000066F1 ; const char aBlockSize[]
.rodata:00000000000066F1 aBlockSize      db 'BLOCK_SIZE',0       ; DATA XREF: human_options:loc_3170↑o
.rodata:00000000000066FC ; const char aBlocksize[]
.rodata:00000000000066FC aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: human_options+158↑o
.rodata:0000000000006706 ; const char name[]
.rodata:0000000000006706 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: human_options+10D↑o
.rodata:0000000000006706                                         ; human_options+170↑o
.rodata:0000000000006716 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.rodata:0000000000006716                                         ; DATA XREF: human_options:loc_30C8↑o
.rodata:0000000000006728 aHumanReadable  db 'human-readable',0   ; DATA XREF: .data.rel.ro:block_size_args↓o
.rodata:0000000000006737 off_6737        dd offset jpt_359E+127h ; DATA XREF: .data.rel.ro:0000000000208BA8↓o
.rodata:000000000000673B                 align 20h
.rodata:0000000000006740 block_size_opts db 0B0h                 ; DATA XREF: human_options:loc_306C↑o
.rodata:0000000000006740                                         ; human_options+5B↑o
.rodata:0000000000006741                 db    0
.rodata:0000000000006742                 db    0
.rodata:0000000000006743                 db    0
.rodata:0000000000006744                 db  90h
.rodata:0000000000006745                 db    0
.rodata:0000000000006746                 db    0
.rodata:0000000000006747                 db    0
.rodata:0000000000006748 power_letter    db    0                 ; DATA XREF: human_readable:loc_29EC↑o
.rodata:0000000000006749                 db  4Bh ; K
.rodata:000000000000674A                 db  4Dh ; M
.rodata:000000000000674B                 db  47h ; G
.rodata:000000000000674C                 db  54h ; T
.rodata:000000000000674D                 db  50h ; P
.rodata:000000000000674E                 db  45h ; E
.rodata:000000000000674F                 db  5Ah ; Z
.rodata:0000000000006750                 db  59h ; Y
.rodata:0000000000006751                 db    0
.rodata:0000000000006752                 db    0
.rodata:0000000000006753                 db    0
.rodata:0000000000006754 flt_6754        dd 9.223372e18          ; DATA XREF: adjust_value↑r
.rodata:0000000000006758 flt_6758        dd 1.8446744e19         ; DATA XREF: adjust_value+42↑r
.rodata:0000000000006758                                         ; adjust_value:loc_2610↑r ...
.rodata:000000000000675C flt_675C        dd 10.0                 ; DATA XREF: human_readable+1FC↑r
.rodata:000000000000675C                                         ; human_readable+73B↑r ...
.rodata:0000000000006760 tbyte_6760      dt 1.8446744073709551615e19
.rodata:0000000000006760                                         ; DATA XREF: human_readable+189↑r
.rodata:0000000000006760                                         ; human_readable+2FE↑r ...
.rodata:000000000000676A                 align 10h
.rodata:0000000000006770 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006770                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000067A8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000067B0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000067B0                                         ; main+13A↑o ...
.rodata:00000000000067B4 unk_67B4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000067B5                 db  80h
.rodata:00000000000067B6                 db  98h
.rodata:00000000000067B7                 db    0
.rodata:00000000000067B8 unk_67B8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000067B9                 db  80h
.rodata:00000000000067BA                 db  99h
.rodata:00000000000067BB                 db    0
.rodata:00000000000067BC unk_67BC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000067BD                 db    7
.rodata:00000000000067BE                 db  65h ; e
.rodata:00000000000067BF                 db    0
.rodata:00000000000067C0 unk_67C0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000067C1                 db 0AFh
.rodata:00000000000067C2                 db    0
.rodata:00000000000067C3 unk_67C3        db  22h ; "             ; DATA XREF: gettext_quote:loc_32E0↑o
.rodata:00000000000067C3                                         ; quotearg_buffer_restyled:loc_409B↑o ...
.rodata:00000000000067C4                 db    0
.rodata:00000000000067C5 ; const char asc_67C5[2]
.rodata:00000000000067C5 asc_67C5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000067C5                                         ; quotearg_buffer_restyled:loc_3463↑o ...
.rodata:00000000000067C7 ; const char asc_67C7[2]
.rodata:00000000000067C7 asc_67C7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000067C7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000067C9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000067D1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208BC8↓o
.rodata:00000000000067D7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208BD0↓o
.rodata:00000000000067E4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208BD8↓o
.rodata:00000000000067E4                                         ; .data.rel.ro:0000000000208BF8↓o
.rodata:00000000000067F1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000067F1                                         ; DATA XREF: .data.rel.ro:0000000000208BE0↓o
.rodata:0000000000006805 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000208BE8↓o
.rodata:0000000000006807 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208BF0↓o
.rodata:000000000000680F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208C08↓o
.rodata:0000000000006817                 align 20h
.rodata:0000000000006820 jpt_3441        dd offset loc_41EA - 6820h
.rodata:0000000000006820                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000006820                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000006820                 dd offset loc_3443 - 6820h ; jump table for switch statement
.rodata:0000000000006820                 dd offset loc_4418 - 6820h
.rodata:0000000000006820                 dd offset loc_4224 - 6820h
.rodata:0000000000006820                 dd offset loc_4014 - 6820h
.rodata:0000000000006820                 dd offset loc_4070 - 6820h
.rodata:0000000000006820                 dd offset loc_40C5 - 6820h
.rodata:0000000000006820                 dd offset loc_410A - 6820h
.rodata:0000000000006820                 dd offset loc_4144 - 6820h
.rodata:0000000000006820                 dd offset loc_4144 - 6820h
.rodata:0000000000006820                 dd offset loc_4144 - 6820h
.rodata:000000000000684C jpt_359E        dd offset loc_37C0 - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000684C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch ; jump table for switch statement
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset loc_3800 - 684Ch, offset loc_3708 - 684Ch
.rodata:000000000000684C                 dd offset loc_36C8 - 684Ch, offset loc_3890 - 684Ch, offset loc_3880 - 684Ch
.rodata:000000000000684C                 dd offset loc_3870 - 684Ch, offset loc_3860 - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset def_359E - 684Ch
.rodata:000000000000684C                 dd offset def_359E - 684Ch, offset def_359E - 684Ch, offset loc_3850 - 684Ch
.rodata:000000000000684C                 dd offset loc_3840 - 684Ch, offset loc_3840 - 684Ch, offset loc_3810 - 684Ch
.rodata:000000000000684C                 dd offset loc_3840 - 684Ch, offset loc_37E8 - 684Ch, offset loc_3840 - 684Ch
.rodata:000000000000684C                 dd offset loc_36A3 - 684Ch, offset loc_3840 - 684Ch, offset loc_3840 - 684Ch
.rodata:000000000000684C                 dd offset loc_3840 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_3840 - 684Ch
.rodata:000000000000684C                 dd offset loc_3840 - 684Ch, offset loc_3840 - 684Ch, offset loc_3840 - 684Ch
.rodata:000000000000684C                 dd offset loc_3673 - 684Ch, offset def_359E - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_3840 - 684Ch, offset loc_3718 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_3840 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_3840 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch, offset loc_37E8 - 684Ch
.rodata:000000000000684C                 dd offset loc_35A3 - 684Ch, offset loc_3840 - 684Ch, offset loc_35A3 - 684Ch
.rodata:000000000000684C                 dd offset loc_3810 - 684Ch
.rodata:0000000000006A48 jpt_392A        dd offset loc_3990 - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006A48                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h ; jump table for switch statement
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset loc_3980 - 6A48h, offset loc_3AD0 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3AB8 - 6A48h, offset loc_3968 - 6A48h, offset loc_3AA8 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3950 - 6A48h, offset loc_3A90 - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset def_392A - 6A48h
.rodata:0000000000006A48                 dd offset def_392A - 6A48h, offset def_392A - 6A48h, offset loc_3A78 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A60 - 6A48h, offset loc_3A60 - 6A48h, offset loc_3A48 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A60 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A60 - 6A48h
.rodata:0000000000006A48                 dd offset loc_36A0 - 6A48h, offset loc_3A60 - 6A48h, offset loc_3A60 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A60 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A60 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A60 - 6A48h, offset loc_3A60 - 6A48h, offset loc_3A60 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3670 - 6A48h, offset def_392A - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A60 - 6A48h, offset loc_3930 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A60 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A60 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h, offset loc_3A30 - 6A48h
.rodata:0000000000006A48                 dd offset loc_35A0 - 6A48h, offset loc_3A60 - 6A48h, offset loc_35A0 - 6A48h
.rodata:0000000000006A48                 dd offset loc_3A48 - 6A48h
.rodata:0000000000006C44                 align 20h
.rodata:0000000000006C60                 public quoting_style_vals
.rodata:0000000000006C60 quoting_style_vals db    0
.rodata:0000000000006C61                 db    0
.rodata:0000000000006C62                 db    0
.rodata:0000000000006C63                 db    0
.rodata:0000000000006C64                 db    1
.rodata:0000000000006C65                 db    0
.rodata:0000000000006C66                 db    0
.rodata:0000000000006C67                 db    0
.rodata:0000000000006C68                 db    2
.rodata:0000000000006C69                 db    0
.rodata:0000000000006C6A                 db    0
.rodata:0000000000006C6B                 db    0
.rodata:0000000000006C6C                 db    3
.rodata:0000000000006C6D                 db    0
.rodata:0000000000006C6E                 db    0
.rodata:0000000000006C6F                 db    0
.rodata:0000000000006C70                 db    4
.rodata:0000000000006C71                 db    0
.rodata:0000000000006C72                 db    0
.rodata:0000000000006C73                 db    0
.rodata:0000000000006C74                 db    5
.rodata:0000000000006C75                 db    0
.rodata:0000000000006C76                 db    0
.rodata:0000000000006C77                 db    0
.rodata:0000000000006C78                 db    6
.rodata:0000000000006C79                 db    0
.rodata:0000000000006C7A                 db    0
.rodata:0000000000006C7B                 db    0
.rodata:0000000000006C7C                 db    7
.rodata:0000000000006C7D                 db    0
.rodata:0000000000006C7E                 db    0
.rodata:0000000000006C7F                 db    0
.rodata:0000000000006C80                 db    8
.rodata:0000000000006C81                 db    0
.rodata:0000000000006C82                 db    0
.rodata:0000000000006C83                 db    0
.rodata:0000000000006C84                 db    9
.rodata:0000000000006C85                 db    0
.rodata:0000000000006C86                 db    0
.rodata:0000000000006C87                 db    0
.rodata:0000000000006C88 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006C94 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000006C9B ; const char aC_0[]
.rodata:0000000000006C9B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4FEC↑o
.rodata:0000000000006C9F ; const char aWrittenByS[]
.rodata:0000000000006C9F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000006C9F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000006CAF ; const char aWrittenBySAndS[]
.rodata:0000000000006CAF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000006CAF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006CC6 ; const char aWrittenBySSAnd[]
.rodata:0000000000006CC6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006CC6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006CE2 ; const char aReportBugsToS[]
.rodata:0000000000006CE2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006CE2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006CF7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006CF7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000006D0D ; const char aSHomePageS[]
.rodata:0000000000006D0D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000006D0D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006D21                 align 8
.rodata:0000000000006D28 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006D28 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006D28                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006D28                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006D28                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006D28                 db '.',0Ah
.rodata:0000000000006D28                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006D28                 db 0Ah,0
.rodata:0000000000006DF4                 align 8
.rodata:0000000000006DF8 ; const char aWrittenBySSSAn[]
.rodata:0000000000006DF8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006DF8                                         ; DATA XREF: version_etc_arn:loc_5240↑o
.rodata:0000000000006DF8                 db 'and %s.',0Ah,0
.rodata:0000000000006E18 ; const char aWrittenBySSSSA[]
.rodata:0000000000006E18 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006E18                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006E18                 db '%s, and %s.',0Ah,0
.rodata:0000000000006E3C                 align 20h
.rodata:0000000000006E40 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006E40 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006E40                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006E40                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006E68 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006E68 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006E68                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006E68                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006E94                 align 8
.rodata:0000000000006E98 ; const char aWrittenBySSSSS[]
.rodata:0000000000006E98 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006E98                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006E98                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006E98                 db 'and %s.',0Ah,0
.rodata:0000000000006EC8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006EC8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006EC8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006EC8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006EC8                 db '%s, and %s.',0Ah,0
.rodata:0000000000006EFC                 align 20h
.rodata:0000000000006F00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006F00                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006F00                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006F00                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000006F3C                 align 20h
.rodata:0000000000006F40 ; const char aGeneralHelpUsi[]
.rodata:0000000000006F40 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006F40                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006F40                 db 0
.rodata:0000000000006F81                 align 4
.rodata:0000000000006F84 jpt_5054        dd offset loc_50D6 - 6F84h
.rodata:0000000000006F84                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006F84                                         ; version_etc_arn+9D↑r
.rodata:0000000000006F84                 dd offset loc_5168 - 6F84h ; jump table for switch statement
.rodata:0000000000006F84                 dd offset loc_51A8 - 6F84h
.rodata:0000000000006F84                 dd offset loc_51F0 - 6F84h
.rodata:0000000000006F84                 dd offset loc_5240 - 6F84h
.rodata:0000000000006F84                 dd offset loc_5298 - 6F84h
.rodata:0000000000006F84                 dd offset loc_52C8 - 6F84h
.rodata:0000000000006F84                 dd offset loc_5330 - 6F84h
.rodata:0000000000006F84                 dd offset loc_5060 - 6F84h
.rodata:0000000000006F84                 dd offset loc_5110 - 6F84h
.rodata:0000000000006FAC                 align 20h
.rodata:0000000000006FC0                 public version_etc_copyright
.rodata:0000000000006FC0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006FC0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000006FEF ; const char aMemoryExhauste[]
.rodata:0000000000006FEF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007000 ; const char file[]
.rodata:0000000000007000 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000007000                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000007020 ; const char assertion[]
.rodata:0000000000007020 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000007020                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000007046                 align 8
.rodata:0000000000007048 jpt_5A36        dd offset loc_5B86 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000007048                                         ; xstrtoumax+1CF↑r
.rodata:0000000000007048                 dd offset loc_5B63 - 7048h, offset def_5A36 - 7048h, offset loc_5B9C - 7048h ; jump table for switch statement
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset loc_5B1F - 7048h, offset def_5A36 - 7048h, offset loc_5A38 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset loc_5B40 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset loc_5AFF - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset loc_5ADA - 7048h
.rodata:0000000000007048                 dd offset loc_5AB4 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset loc_5A9D - 7048h
.rodata:0000000000007048                 dd offset loc_5A60 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset loc_5B9C - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset loc_5B1F - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset loc_5A38 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset def_5A36 - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset loc_5AFF - 7048h
.rodata:0000000000007048                 dd offset def_5A36 - 7048h, offset def_5A36 - 7048h, offset loc_5A87 - 7048h
.rodata:0000000000007120 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000007120 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000007120                                         ; DATA XREF: xstrtoumax:loc_5BE5↑o
.rodata:000000000000712B ; const char aInvalidArgumen[]
.rodata:000000000000712B aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000712B                                         ; DATA XREF: argmatch_invalid:loc_5FC0↑o
.rodata:0000000000007146 ; const char aAmbiguousArgum[]
.rodata:0000000000007146 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000007146                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000007163 ; const char aValidArguments[]
.rodata:0000000000007163 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000007163                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000007178 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000007178                 db '  - %s',0
.rodata:0000000000007180 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000007180                                         ; sysv_sum_file:loc_1E3A↑o ...
.rodata:0000000000007185 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007187 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6280↑o
.rodata:000000000000718D aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000718D                                         ; locale_charset:loc_62D0↑o
.rodata:000000000000718D _rodata         ends
.rodata:000000000000718D
LOAD:0000000000007193 ; ===========================================================================
LOAD:0000000000007193
LOAD:0000000000007193 ; Segment type: Pure code
LOAD:0000000000007193 ; Segment permissions: Read/Execute
LOAD:0000000000007193 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007193                 assume cs:LOAD
LOAD:0000000000007193                 ;org 7193h
LOAD:0000000000007193                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007193                 align 4
LOAD:0000000000007193 LOAD            ends
LOAD:0000000000007193
.eh_frame_hdr:0000000000007194 ; ===========================================================================
.eh_frame_hdr:0000000000007194
.eh_frame_hdr:0000000000007194 ; Segment type: Pure data
.eh_frame_hdr:0000000000007194 ; Segment permissions: Read
.eh_frame_hdr:0000000000007194 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007194                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007194                 ;org 7194h
.eh_frame_hdr:0000000000007194 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007195                 db  1Bh
.eh_frame_hdr:0000000000007196                 db    3
.eh_frame_hdr:0000000000007197                 db  3Bh ; ;
.eh_frame_hdr:0000000000007198                 db 0B0h
.eh_frame_hdr:0000000000007199                 db    2
.eh_frame_hdr:000000000000719A                 db    0
.eh_frame_hdr:000000000000719B                 db    0
.eh_frame_hdr:000000000000719C                 db  55h ; U
.eh_frame_hdr:000000000000719D                 db    0
.eh_frame_hdr:000000000000719E                 db    0
.eh_frame_hdr:000000000000719F                 db    0
.eh_frame_hdr:00000000000071A0                 db  1Ch
.eh_frame_hdr:00000000000071A1                 db 0A4h
.eh_frame_hdr:00000000000071A2                 db 0FFh
.eh_frame_hdr:00000000000071A3                 db 0FFh
.eh_frame_hdr:00000000000071A4                 db 0FCh
.eh_frame_hdr:00000000000071A5                 db    2
.eh_frame_hdr:00000000000071A6                 db    0
.eh_frame_hdr:00000000000071A7                 db    0
.eh_frame_hdr:00000000000071A8                 db  9Ch
.eh_frame_hdr:00000000000071A9                 db 0A7h
.eh_frame_hdr:00000000000071AA                 db 0FFh
.eh_frame_hdr:00000000000071AB                 db 0FFh
.eh_frame_hdr:00000000000071AC                 db  24h ; $
.eh_frame_hdr:00000000000071AD                 db    3
.eh_frame_hdr:00000000000071AE                 db    0
.eh_frame_hdr:00000000000071AF                 db    0
.eh_frame_hdr:00000000000071B0                 db 0ACh
.eh_frame_hdr:00000000000071B1                 db 0A7h
.eh_frame_hdr:00000000000071B2                 db 0FFh
.eh_frame_hdr:00000000000071B3                 db 0FFh
.eh_frame_hdr:00000000000071B4                 db    8
.eh_frame_hdr:00000000000071B5                 db    4
.eh_frame_hdr:00000000000071B6                 db    0
.eh_frame_hdr:00000000000071B7                 db    0
.eh_frame_hdr:00000000000071B8                 db  9Ch
.eh_frame_hdr:00000000000071B9                 db 0A9h
.eh_frame_hdr:00000000000071BA                 db 0FFh
.eh_frame_hdr:00000000000071BB                 db 0FFh
.eh_frame_hdr:00000000000071BC                 db 0CCh
.eh_frame_hdr:00000000000071BD                 db    2
.eh_frame_hdr:00000000000071BE                 db    0
.eh_frame_hdr:00000000000071BF                 db    0
.eh_frame_hdr:00000000000071C0                 db 0ACh
.eh_frame_hdr:00000000000071C1                 db 0AAh
.eh_frame_hdr:00000000000071C2                 db 0FFh
.eh_frame_hdr:00000000000071C3                 db 0FFh
.eh_frame_hdr:00000000000071C4                 db  3Ch ; <
.eh_frame_hdr:00000000000071C5                 db    3
.eh_frame_hdr:00000000000071C6                 db    0
.eh_frame_hdr:00000000000071C7                 db    0
.eh_frame_hdr:00000000000071C8                 db 0DCh
.eh_frame_hdr:00000000000071C9                 db 0ACh
.eh_frame_hdr:00000000000071CA                 db 0FFh
.eh_frame_hdr:00000000000071CB                 db 0FFh
.eh_frame_hdr:00000000000071CC                 db  8Ch
.eh_frame_hdr:00000000000071CD                 db    3
.eh_frame_hdr:00000000000071CE                 db    0
.eh_frame_hdr:00000000000071CF                 db    0
.eh_frame_hdr:00000000000071D0                 db  1Ch
.eh_frame_hdr:00000000000071D1                 db 0AFh
.eh_frame_hdr:00000000000071D2                 db 0FFh
.eh_frame_hdr:00000000000071D3                 db 0FFh
.eh_frame_hdr:00000000000071D4                 db 0DCh
.eh_frame_hdr:00000000000071D5                 db    3
.eh_frame_hdr:00000000000071D6                 db    0
.eh_frame_hdr:00000000000071D7                 db    0
.eh_frame_hdr:00000000000071D8                 db 0ACh
.eh_frame_hdr:00000000000071D9                 db 0B2h
.eh_frame_hdr:00000000000071DA                 db 0FFh
.eh_frame_hdr:00000000000071DB                 db 0FFh
.eh_frame_hdr:00000000000071DC                 db  5Ch ; \
.eh_frame_hdr:00000000000071DD                 db    4
.eh_frame_hdr:00000000000071DE                 db    0
.eh_frame_hdr:00000000000071DF                 db    0
.eh_frame_hdr:00000000000071E0                 db 0BCh
.eh_frame_hdr:00000000000071E1                 db 0B2h
.eh_frame_hdr:00000000000071E2                 db 0FFh
.eh_frame_hdr:00000000000071E3                 db 0FFh
.eh_frame_hdr:00000000000071E4                 db  70h ; p
.eh_frame_hdr:00000000000071E5                 db    4
.eh_frame_hdr:00000000000071E6                 db    0
.eh_frame_hdr:00000000000071E7                 db    0
.eh_frame_hdr:00000000000071E8                 db 0CCh
.eh_frame_hdr:00000000000071E9                 db 0B2h
.eh_frame_hdr:00000000000071EA                 db 0FFh
.eh_frame_hdr:00000000000071EB                 db 0FFh
.eh_frame_hdr:00000000000071EC                 db  84h
.eh_frame_hdr:00000000000071ED                 db    4
.eh_frame_hdr:00000000000071EE                 db    0
.eh_frame_hdr:00000000000071EF                 db    0
.eh_frame_hdr:00000000000071F0                 db  7Ch ; |
.eh_frame_hdr:00000000000071F1                 db 0B3h
.eh_frame_hdr:00000000000071F2                 db 0FFh
.eh_frame_hdr:00000000000071F3                 db 0FFh
.eh_frame_hdr:00000000000071F4                 db 0B4h
.eh_frame_hdr:00000000000071F5                 db    4
.eh_frame_hdr:00000000000071F6                 db    0
.eh_frame_hdr:00000000000071F7                 db    0
.eh_frame_hdr:00000000000071F8                 db  8Ch
.eh_frame_hdr:00000000000071F9                 db 0B3h
.eh_frame_hdr:00000000000071FA                 db 0FFh
.eh_frame_hdr:00000000000071FB                 db 0FFh
.eh_frame_hdr:00000000000071FC                 db 0C8h
.eh_frame_hdr:00000000000071FD                 db    4
.eh_frame_hdr:00000000000071FE                 db    0
.eh_frame_hdr:00000000000071FF                 db    0
.eh_frame_hdr:0000000000007200                 db 0BCh
.eh_frame_hdr:0000000000007201                 db 0B3h
.eh_frame_hdr:0000000000007202                 db 0FFh
.eh_frame_hdr:0000000000007203                 db 0FFh
.eh_frame_hdr:0000000000007204                 db 0E4h
.eh_frame_hdr:0000000000007205                 db    4
.eh_frame_hdr:0000000000007206                 db    0
.eh_frame_hdr:0000000000007207                 db    0
.eh_frame_hdr:0000000000007208                 db  8Ch
.eh_frame_hdr:0000000000007209                 db 0B4h
.eh_frame_hdr:000000000000720A                 db 0FFh
.eh_frame_hdr:000000000000720B                 db 0FFh
.eh_frame_hdr:000000000000720C                 db 0F8h
.eh_frame_hdr:000000000000720D                 db    4
.eh_frame_hdr:000000000000720E                 db    0
.eh_frame_hdr:000000000000720F                 db    0
.eh_frame_hdr:0000000000007210                 db  9Ch
.eh_frame_hdr:0000000000007211                 db 0BEh
.eh_frame_hdr:0000000000007212                 db 0FFh
.eh_frame_hdr:0000000000007213                 db 0FFh
.eh_frame_hdr:0000000000007214                 db 0A0h
.eh_frame_hdr:0000000000007215                 db    5
.eh_frame_hdr:0000000000007216                 db    0
.eh_frame_hdr:0000000000007217                 db    0
.eh_frame_hdr:0000000000007218                 db  8Ch
.eh_frame_hdr:0000000000007219                 db 0C0h
.eh_frame_hdr:000000000000721A                 db 0FFh
.eh_frame_hdr:000000000000721B                 db 0FFh
.eh_frame_hdr:000000000000721C                 db 0DCh
.eh_frame_hdr:000000000000721D                 db    5
.eh_frame_hdr:000000000000721E                 db    0
.eh_frame_hdr:000000000000721F                 db    0
.eh_frame_hdr:0000000000007220                 db  2Ch ; ,
.eh_frame_hdr:0000000000007221                 db 0C1h
.eh_frame_hdr:0000000000007222                 db 0FFh
.eh_frame_hdr:0000000000007223                 db 0FFh
.eh_frame_hdr:0000000000007224                 db 0FCh
.eh_frame_hdr:0000000000007225                 db    5
.eh_frame_hdr:0000000000007226                 db    0
.eh_frame_hdr:0000000000007227                 db    0
.eh_frame_hdr:0000000000007228                 db  1Ch
.eh_frame_hdr:0000000000007229                 db 0C2h
.eh_frame_hdr:000000000000722A                 db 0FFh
.eh_frame_hdr:000000000000722B                 db 0FFh
.eh_frame_hdr:000000000000722C                 db  40h ; @
.eh_frame_hdr:000000000000722D                 db    6
.eh_frame_hdr:000000000000722E                 db    0
.eh_frame_hdr:000000000000722F                 db    0
.eh_frame_hdr:0000000000007230                 db  5Ch ; \
.eh_frame_hdr:0000000000007231                 db 0D4h
.eh_frame_hdr:0000000000007232                 db 0FFh
.eh_frame_hdr:0000000000007233                 db 0FFh
.eh_frame_hdr:0000000000007234                 db 0B8h
.eh_frame_hdr:0000000000007235                 db    6
.eh_frame_hdr:0000000000007236                 db    0
.eh_frame_hdr:0000000000007237                 db    0
.eh_frame_hdr:0000000000007238                 db  0Ch
.eh_frame_hdr:0000000000007239                 db 0D6h
.eh_frame_hdr:000000000000723A                 db 0FFh
.eh_frame_hdr:000000000000723B                 db 0FFh
.eh_frame_hdr:000000000000723C                 db  24h ; $
.eh_frame_hdr:000000000000723D                 db    7
.eh_frame_hdr:000000000000723E                 db    0
.eh_frame_hdr:000000000000723F                 db    0
.eh_frame_hdr:0000000000007240                 db  4Ch ; L
.eh_frame_hdr:0000000000007241                 db 0D6h
.eh_frame_hdr:0000000000007242                 db 0FFh
.eh_frame_hdr:0000000000007243                 db 0FFh
.eh_frame_hdr:0000000000007244                 db  50h ; P
.eh_frame_hdr:0000000000007245                 db    7
.eh_frame_hdr:0000000000007246                 db    0
.eh_frame_hdr:0000000000007247                 db    0
.eh_frame_hdr:0000000000007248                 db  6Ch ; l
.eh_frame_hdr:0000000000007249                 db 0D6h
.eh_frame_hdr:000000000000724A                 db 0FFh
.eh_frame_hdr:000000000000724B                 db 0FFh
.eh_frame_hdr:000000000000724C                 db  64h ; d
.eh_frame_hdr:000000000000724D                 db    7
.eh_frame_hdr:000000000000724E                 db    0
.eh_frame_hdr:000000000000724F                 db    0
.eh_frame_hdr:0000000000007250                 db  8Ch
.eh_frame_hdr:0000000000007251                 db 0D6h
.eh_frame_hdr:0000000000007252                 db 0FFh
.eh_frame_hdr:0000000000007253                 db 0FFh
.eh_frame_hdr:0000000000007254                 db  78h ; x
.eh_frame_hdr:0000000000007255                 db    7
.eh_frame_hdr:0000000000007256                 db    0
.eh_frame_hdr:0000000000007257                 db    0
.eh_frame_hdr:0000000000007258                 db 0CCh
.eh_frame_hdr:0000000000007259                 db 0D6h
.eh_frame_hdr:000000000000725A                 db 0FFh
.eh_frame_hdr:000000000000725B                 db 0FFh
.eh_frame_hdr:000000000000725C                 db  8Ch
.eh_frame_hdr:000000000000725D                 db    7
.eh_frame_hdr:000000000000725E                 db    0
.eh_frame_hdr:000000000000725F                 db    0
.eh_frame_hdr:0000000000007260                 db 0ECh
.eh_frame_hdr:0000000000007261                 db 0D6h
.eh_frame_hdr:0000000000007262                 db 0FFh
.eh_frame_hdr:0000000000007263                 db 0FFh
.eh_frame_hdr:0000000000007264                 db 0A0h
.eh_frame_hdr:0000000000007265                 db    7
.eh_frame_hdr:0000000000007266                 db    0
.eh_frame_hdr:0000000000007267                 db    0
.eh_frame_hdr:0000000000007268                 db  1Ch
.eh_frame_hdr:0000000000007269                 db 0D7h
.eh_frame_hdr:000000000000726A                 db 0FFh
.eh_frame_hdr:000000000000726B                 db 0FFh
.eh_frame_hdr:000000000000726C                 db 0B4h
.eh_frame_hdr:000000000000726D                 db    7
.eh_frame_hdr:000000000000726E                 db    0
.eh_frame_hdr:000000000000726F                 db    0
.eh_frame_hdr:0000000000007270                 db  9Ch
.eh_frame_hdr:0000000000007271                 db 0D7h
.eh_frame_hdr:0000000000007272                 db 0FFh
.eh_frame_hdr:0000000000007273                 db 0FFh
.eh_frame_hdr:0000000000007274                 db    8
.eh_frame_hdr:0000000000007275                 db    8
.eh_frame_hdr:0000000000007276                 db    0
.eh_frame_hdr:0000000000007277                 db    0
.eh_frame_hdr:0000000000007278                 db  8Ch
.eh_frame_hdr:0000000000007279                 db 0D8h
.eh_frame_hdr:000000000000727A                 db 0FFh
.eh_frame_hdr:000000000000727B                 db 0FFh
.eh_frame_hdr:000000000000727C                 db  74h ; t
.eh_frame_hdr:000000000000727D                 db    8
.eh_frame_hdr:000000000000727E                 db    0
.eh_frame_hdr:000000000000727F                 db    0
.eh_frame_hdr:0000000000007280                 db  9Ch
.eh_frame_hdr:0000000000007281                 db 0D8h
.eh_frame_hdr:0000000000007282                 db 0FFh
.eh_frame_hdr:0000000000007283                 db 0FFh
.eh_frame_hdr:0000000000007284                 db  88h
.eh_frame_hdr:0000000000007285                 db    8
.eh_frame_hdr:0000000000007286                 db    0
.eh_frame_hdr:0000000000007287                 db    0
.eh_frame_hdr:0000000000007288                 db  3Ch ; <
.eh_frame_hdr:0000000000007289                 db 0D9h
.eh_frame_hdr:000000000000728A                 db 0FFh
.eh_frame_hdr:000000000000728B                 db 0FFh
.eh_frame_hdr:000000000000728C                 db 0B4h
.eh_frame_hdr:000000000000728D                 db    8
.eh_frame_hdr:000000000000728E                 db    0
.eh_frame_hdr:000000000000728F                 db    0
.eh_frame_hdr:0000000000007290                 db  5Ch ; \
.eh_frame_hdr:0000000000007291                 db 0D9h
.eh_frame_hdr:0000000000007292                 db 0FFh
.eh_frame_hdr:0000000000007293                 db 0FFh
.eh_frame_hdr:0000000000007294                 db 0C8h
.eh_frame_hdr:0000000000007295                 db    8
.eh_frame_hdr:0000000000007296                 db    0
.eh_frame_hdr:0000000000007297                 db    0
.eh_frame_hdr:0000000000007298                 db  6Ch ; l
.eh_frame_hdr:0000000000007299                 db 0D9h
.eh_frame_hdr:000000000000729A                 db 0FFh
.eh_frame_hdr:000000000000729B                 db 0FFh
.eh_frame_hdr:000000000000729C                 db 0DCh
.eh_frame_hdr:000000000000729D                 db    8
.eh_frame_hdr:000000000000729E                 db    0
.eh_frame_hdr:000000000000729F                 db    0
.eh_frame_hdr:00000000000072A0                 db  8Ch
.eh_frame_hdr:00000000000072A1                 db 0D9h
.eh_frame_hdr:00000000000072A2                 db 0FFh
.eh_frame_hdr:00000000000072A3                 db 0FFh
.eh_frame_hdr:00000000000072A4                 db 0F0h
.eh_frame_hdr:00000000000072A5                 db    8
.eh_frame_hdr:00000000000072A6                 db    0
.eh_frame_hdr:00000000000072A7                 db    0
.eh_frame_hdr:00000000000072A8                 db 0ACh
.eh_frame_hdr:00000000000072A9                 db 0D9h
.eh_frame_hdr:00000000000072AA                 db 0FFh
.eh_frame_hdr:00000000000072AB                 db 0FFh
.eh_frame_hdr:00000000000072AC                 db    4
.eh_frame_hdr:00000000000072AD                 db    9
.eh_frame_hdr:00000000000072AE                 db    0
.eh_frame_hdr:00000000000072AF                 db    0
.eh_frame_hdr:00000000000072B0                 db  3Ch ; <
.eh_frame_hdr:00000000000072B1                 db 0DAh
.eh_frame_hdr:00000000000072B2                 db 0FFh
.eh_frame_hdr:00000000000072B3                 db 0FFh
.eh_frame_hdr:00000000000072B4                 db  20h
.eh_frame_hdr:00000000000072B5                 db    9
.eh_frame_hdr:00000000000072B6                 db    0
.eh_frame_hdr:00000000000072B7                 db    0
.eh_frame_hdr:00000000000072B8                 db 0CCh
.eh_frame_hdr:00000000000072B9                 db 0DAh
.eh_frame_hdr:00000000000072BA                 db 0FFh
.eh_frame_hdr:00000000000072BB                 db 0FFh
.eh_frame_hdr:00000000000072BC                 db  3Ch ; <
.eh_frame_hdr:00000000000072BD                 db    9
.eh_frame_hdr:00000000000072BE                 db    0
.eh_frame_hdr:00000000000072BF                 db    0
.eh_frame_hdr:00000000000072C0                 db 0DCh
.eh_frame_hdr:00000000000072C1                 db 0DAh
.eh_frame_hdr:00000000000072C2                 db 0FFh
.eh_frame_hdr:00000000000072C3                 db 0FFh
.eh_frame_hdr:00000000000072C4                 db  50h ; P
.eh_frame_hdr:00000000000072C5                 db    9
.eh_frame_hdr:00000000000072C6                 db    0
.eh_frame_hdr:00000000000072C7                 db    0
.eh_frame_hdr:00000000000072C8                 db 0ECh
.eh_frame_hdr:00000000000072C9                 db 0DAh
.eh_frame_hdr:00000000000072CA                 db 0FFh
.eh_frame_hdr:00000000000072CB                 db 0FFh
.eh_frame_hdr:00000000000072CC                 db  64h ; d
.eh_frame_hdr:00000000000072CD                 db    9
.eh_frame_hdr:00000000000072CE                 db    0
.eh_frame_hdr:00000000000072CF                 db    0
.eh_frame_hdr:00000000000072D0                 db  8Ch
.eh_frame_hdr:00000000000072D1                 db 0DBh
.eh_frame_hdr:00000000000072D2                 db 0FFh
.eh_frame_hdr:00000000000072D3                 db 0FFh
.eh_frame_hdr:00000000000072D4                 db  80h
.eh_frame_hdr:00000000000072D5                 db    9
.eh_frame_hdr:00000000000072D6                 db    0
.eh_frame_hdr:00000000000072D7                 db    0
.eh_frame_hdr:00000000000072D8                 db  9Ch
.eh_frame_hdr:00000000000072D9                 db 0DBh
.eh_frame_hdr:00000000000072DA                 db 0FFh
.eh_frame_hdr:00000000000072DB                 db 0FFh
.eh_frame_hdr:00000000000072DC                 db  94h
.eh_frame_hdr:00000000000072DD                 db    9
.eh_frame_hdr:00000000000072DE                 db    0
.eh_frame_hdr:00000000000072DF                 db    0
.eh_frame_hdr:00000000000072E0                 db 0BCh
.eh_frame_hdr:00000000000072E1                 db 0DBh
.eh_frame_hdr:00000000000072E2                 db 0FFh
.eh_frame_hdr:00000000000072E3                 db 0FFh
.eh_frame_hdr:00000000000072E4                 db 0A8h
.eh_frame_hdr:00000000000072E5                 db    9
.eh_frame_hdr:00000000000072E6                 db    0
.eh_frame_hdr:00000000000072E7                 db    0
.eh_frame_hdr:00000000000072E8                 db 0CCh
.eh_frame_hdr:00000000000072E9                 db 0DBh
.eh_frame_hdr:00000000000072EA                 db 0FFh
.eh_frame_hdr:00000000000072EB                 db 0FFh
.eh_frame_hdr:00000000000072EC                 db 0BCh
.eh_frame_hdr:00000000000072ED                 db    9
.eh_frame_hdr:00000000000072EE                 db    0
.eh_frame_hdr:00000000000072EF                 db    0
.eh_frame_hdr:00000000000072F0                 db  5Ch ; \
.eh_frame_hdr:00000000000072F1                 db 0DCh
.eh_frame_hdr:00000000000072F2                 db 0FFh
.eh_frame_hdr:00000000000072F3                 db 0FFh
.eh_frame_hdr:00000000000072F4                 db 0D8h
.eh_frame_hdr:00000000000072F5                 db    9
.eh_frame_hdr:00000000000072F6                 db    0
.eh_frame_hdr:00000000000072F7                 db    0
.eh_frame_hdr:00000000000072F8                 db 0FCh
.eh_frame_hdr:00000000000072F9                 db 0DCh
.eh_frame_hdr:00000000000072FA                 db 0FFh
.eh_frame_hdr:00000000000072FB                 db 0FFh
.eh_frame_hdr:00000000000072FC                 db 0F4h
.eh_frame_hdr:00000000000072FD                 db    9
.eh_frame_hdr:00000000000072FE                 db    0
.eh_frame_hdr:00000000000072FF                 db    0
.eh_frame_hdr:0000000000007300                 db  0Ch
.eh_frame_hdr:0000000000007301                 db 0DDh
.eh_frame_hdr:0000000000007302                 db 0FFh
.eh_frame_hdr:0000000000007303                 db 0FFh
.eh_frame_hdr:0000000000007304                 db    8
.eh_frame_hdr:0000000000007305                 db  0Ah
.eh_frame_hdr:0000000000007306                 db    0
.eh_frame_hdr:0000000000007307                 db    0
.eh_frame_hdr:0000000000007308                 db  2Ch ; ,
.eh_frame_hdr:0000000000007309                 db 0DDh
.eh_frame_hdr:000000000000730A                 db 0FFh
.eh_frame_hdr:000000000000730B                 db 0FFh
.eh_frame_hdr:000000000000730C                 db  1Ch
.eh_frame_hdr:000000000000730D                 db  0Ah
.eh_frame_hdr:000000000000730E                 db    0
.eh_frame_hdr:000000000000730F                 db    0
.eh_frame_hdr:0000000000007310                 db  4Ch ; L
.eh_frame_hdr:0000000000007311                 db 0DDh
.eh_frame_hdr:0000000000007312                 db 0FFh
.eh_frame_hdr:0000000000007313                 db 0FFh
.eh_frame_hdr:0000000000007314                 db  30h ; 0
.eh_frame_hdr:0000000000007315                 db  0Ah
.eh_frame_hdr:0000000000007316                 db    0
.eh_frame_hdr:0000000000007317                 db    0
.eh_frame_hdr:0000000000007318                 db  5Ch ; \
.eh_frame_hdr:0000000000007319                 db 0DDh
.eh_frame_hdr:000000000000731A                 db 0FFh
.eh_frame_hdr:000000000000731B                 db 0FFh
.eh_frame_hdr:000000000000731C                 db  44h ; D
.eh_frame_hdr:000000000000731D                 db  0Ah
.eh_frame_hdr:000000000000731E                 db    0
.eh_frame_hdr:000000000000731F                 db    0
.eh_frame_hdr:0000000000007320                 db  7Ch ; |
.eh_frame_hdr:0000000000007321                 db 0DDh
.eh_frame_hdr:0000000000007322                 db 0FFh
.eh_frame_hdr:0000000000007323                 db 0FFh
.eh_frame_hdr:0000000000007324                 db  58h ; X
.eh_frame_hdr:0000000000007325                 db  0Ah
.eh_frame_hdr:0000000000007326                 db    0
.eh_frame_hdr:0000000000007327                 db    0
.eh_frame_hdr:0000000000007328                 db  9Ch
.eh_frame_hdr:0000000000007329                 db 0DDh
.eh_frame_hdr:000000000000732A                 db 0FFh
.eh_frame_hdr:000000000000732B                 db 0FFh
.eh_frame_hdr:000000000000732C                 db  6Ch ; l
.eh_frame_hdr:000000000000732D                 db  0Ah
.eh_frame_hdr:000000000000732E                 db    0
.eh_frame_hdr:000000000000732F                 db    0
.eh_frame_hdr:0000000000007330                 db 0BCh
.eh_frame_hdr:0000000000007331                 db 0DDh
.eh_frame_hdr:0000000000007332                 db 0FFh
.eh_frame_hdr:0000000000007333                 db 0FFh
.eh_frame_hdr:0000000000007334                 db  84h
.eh_frame_hdr:0000000000007335                 db  0Ah
.eh_frame_hdr:0000000000007336                 db    0
.eh_frame_hdr:0000000000007337                 db    0
.eh_frame_hdr:0000000000007338                 db  1Ch
.eh_frame_hdr:0000000000007339                 db 0DEh
.eh_frame_hdr:000000000000733A                 db 0FFh
.eh_frame_hdr:000000000000733B                 db 0FFh
.eh_frame_hdr:000000000000733C                 db 0BCh
.eh_frame_hdr:000000000000733D                 db  0Ah
.eh_frame_hdr:000000000000733E                 db    0
.eh_frame_hdr:000000000000733F                 db    0
.eh_frame_hdr:0000000000007340                 db  3Ch ; <
.eh_frame_hdr:0000000000007341                 db 0E2h
.eh_frame_hdr:0000000000007342                 db 0FFh
.eh_frame_hdr:0000000000007343                 db 0FFh
.eh_frame_hdr:0000000000007344                 db 0D0h
.eh_frame_hdr:0000000000007345                 db  0Bh
.eh_frame_hdr:0000000000007346                 db    0
.eh_frame_hdr:0000000000007347                 db    0
.eh_frame_hdr:0000000000007348                 db  5Ch ; \
.eh_frame_hdr:0000000000007349                 db 0E2h
.eh_frame_hdr:000000000000734A                 db 0FFh
.eh_frame_hdr:000000000000734B                 db 0FFh
.eh_frame_hdr:000000000000734C                 db 0E4h
.eh_frame_hdr:000000000000734D                 db  0Bh
.eh_frame_hdr:000000000000734E                 db    0
.eh_frame_hdr:000000000000734F                 db    0
.eh_frame_hdr:0000000000007350                 db 0DCh
.eh_frame_hdr:0000000000007351                 db 0E2h
.eh_frame_hdr:0000000000007352                 db 0FFh
.eh_frame_hdr:0000000000007353                 db 0FFh
.eh_frame_hdr:0000000000007354                 db    0
.eh_frame_hdr:0000000000007355                 db  0Ch
.eh_frame_hdr:0000000000007356                 db    0
.eh_frame_hdr:0000000000007357                 db    0
.eh_frame_hdr:0000000000007358                 db 0BCh
.eh_frame_hdr:0000000000007359                 db 0E3h
.eh_frame_hdr:000000000000735A                 db 0FFh
.eh_frame_hdr:000000000000735B                 db 0FFh
.eh_frame_hdr:000000000000735C                 db  2Ch ; ,
.eh_frame_hdr:000000000000735D                 db  0Ch
.eh_frame_hdr:000000000000735E                 db    0
.eh_frame_hdr:000000000000735F                 db    0
.eh_frame_hdr:0000000000007360                 db  3Ch ; <
.eh_frame_hdr:0000000000007361                 db 0E4h
.eh_frame_hdr:0000000000007362                 db 0FFh
.eh_frame_hdr:0000000000007363                 db 0FFh
.eh_frame_hdr:0000000000007364                 db  4Ch ; L
.eh_frame_hdr:0000000000007365                 db  0Ch
.eh_frame_hdr:0000000000007366                 db    0
.eh_frame_hdr:0000000000007367                 db    0
.eh_frame_hdr:0000000000007368                 db  5Ch ; \
.eh_frame_hdr:0000000000007369                 db 0E4h
.eh_frame_hdr:000000000000736A                 db 0FFh
.eh_frame_hdr:000000000000736B                 db 0FFh
.eh_frame_hdr:000000000000736C                 db  68h ; h
.eh_frame_hdr:000000000000736D                 db  0Ch
.eh_frame_hdr:000000000000736E                 db    0
.eh_frame_hdr:000000000000736F                 db    0
.eh_frame_hdr:0000000000007370                 db  8Ch
.eh_frame_hdr:0000000000007371                 db 0E4h
.eh_frame_hdr:0000000000007372                 db 0FFh
.eh_frame_hdr:0000000000007373                 db 0FFh
.eh_frame_hdr:0000000000007374                 db  7Ch ; |
.eh_frame_hdr:0000000000007375                 db  0Ch
.eh_frame_hdr:0000000000007376                 db    0
.eh_frame_hdr:0000000000007377                 db    0
.eh_frame_hdr:0000000000007378                 db  9Ch
.eh_frame_hdr:0000000000007379                 db 0E4h
.eh_frame_hdr:000000000000737A                 db 0FFh
.eh_frame_hdr:000000000000737B                 db 0FFh
.eh_frame_hdr:000000000000737C                 db  90h
.eh_frame_hdr:000000000000737D                 db  0Ch
.eh_frame_hdr:000000000000737E                 db    0
.eh_frame_hdr:000000000000737F                 db    0
.eh_frame_hdr:0000000000007380                 db 0DCh
.eh_frame_hdr:0000000000007381                 db 0E4h
.eh_frame_hdr:0000000000007382                 db 0FFh
.eh_frame_hdr:0000000000007383                 db 0FFh
.eh_frame_hdr:0000000000007384                 db 0B4h
.eh_frame_hdr:0000000000007385                 db  0Ch
.eh_frame_hdr:0000000000007386                 db    0
.eh_frame_hdr:0000000000007387                 db    0
.eh_frame_hdr:0000000000007388                 db  0Ch
.eh_frame_hdr:0000000000007389                 db 0E5h
.eh_frame_hdr:000000000000738A                 db 0FFh
.eh_frame_hdr:000000000000738B                 db 0FFh
.eh_frame_hdr:000000000000738C                 db 0C8h
.eh_frame_hdr:000000000000738D                 db  0Ch
.eh_frame_hdr:000000000000738E                 db    0
.eh_frame_hdr:000000000000738F                 db    0
.eh_frame_hdr:0000000000007390                 db  9Ch
.eh_frame_hdr:0000000000007391                 db 0E5h
.eh_frame_hdr:0000000000007392                 db 0FFh
.eh_frame_hdr:0000000000007393                 db 0FFh
.eh_frame_hdr:0000000000007394                 db 0E0h
.eh_frame_hdr:0000000000007395                 db  0Ch
.eh_frame_hdr:0000000000007396                 db    0
.eh_frame_hdr:0000000000007397                 db    0
.eh_frame_hdr:0000000000007398                 db 0ECh
.eh_frame_hdr:0000000000007399                 db 0E5h
.eh_frame_hdr:000000000000739A                 db 0FFh
.eh_frame_hdr:000000000000739B                 db 0FFh
.eh_frame_hdr:000000000000739C                 db 0F8h
.eh_frame_hdr:000000000000739D                 db  0Ch
.eh_frame_hdr:000000000000739E                 db    0
.eh_frame_hdr:000000000000739F                 db    0
.eh_frame_hdr:00000000000073A0                 db  0Ch
.eh_frame_hdr:00000000000073A1                 db 0E6h
.eh_frame_hdr:00000000000073A2                 db 0FFh
.eh_frame_hdr:00000000000073A3                 db 0FFh
.eh_frame_hdr:00000000000073A4                 db  14h
.eh_frame_hdr:00000000000073A5                 db  0Dh
.eh_frame_hdr:00000000000073A6                 db    0
.eh_frame_hdr:00000000000073A7                 db    0
.eh_frame_hdr:00000000000073A8                 db  3Ch ; <
.eh_frame_hdr:00000000000073A9                 db 0E6h
.eh_frame_hdr:00000000000073AA                 db 0FFh
.eh_frame_hdr:00000000000073AB                 db 0FFh
.eh_frame_hdr:00000000000073AC                 db  30h ; 0
.eh_frame_hdr:00000000000073AD                 db  0Dh
.eh_frame_hdr:00000000000073AE                 db    0
.eh_frame_hdr:00000000000073AF                 db    0
.eh_frame_hdr:00000000000073B0                 db  6Ch ; l
.eh_frame_hdr:00000000000073B1                 db 0E6h
.eh_frame_hdr:00000000000073B2                 db 0FFh
.eh_frame_hdr:00000000000073B3                 db 0FFh
.eh_frame_hdr:00000000000073B4                 db  58h ; X
.eh_frame_hdr:00000000000073B5                 db  0Dh
.eh_frame_hdr:00000000000073B6                 db    0
.eh_frame_hdr:00000000000073B7                 db    0
.eh_frame_hdr:00000000000073B8                 db  8Ch
.eh_frame_hdr:00000000000073B9                 db 0E6h
.eh_frame_hdr:00000000000073BA                 db 0FFh
.eh_frame_hdr:00000000000073BB                 db 0FFh
.eh_frame_hdr:00000000000073BC                 db  74h ; t
.eh_frame_hdr:00000000000073BD                 db  0Dh
.eh_frame_hdr:00000000000073BE                 db    0
.eh_frame_hdr:00000000000073BF                 db    0
.eh_frame_hdr:00000000000073C0                 db 0CCh
.eh_frame_hdr:00000000000073C1                 db 0E6h
.eh_frame_hdr:00000000000073C2                 db 0FFh
.eh_frame_hdr:00000000000073C3                 db 0FFh
.eh_frame_hdr:00000000000073C4                 db  8Ch
.eh_frame_hdr:00000000000073C5                 db  0Dh
.eh_frame_hdr:00000000000073C6                 db    0
.eh_frame_hdr:00000000000073C7                 db    0
.eh_frame_hdr:00000000000073C8                 db 0ECh
.eh_frame_hdr:00000000000073C9                 db 0EAh
.eh_frame_hdr:00000000000073CA                 db 0FFh
.eh_frame_hdr:00000000000073CB                 db 0FFh
.eh_frame_hdr:00000000000073CC                 db 0DCh
.eh_frame_hdr:00000000000073CD                 db  0Dh
.eh_frame_hdr:00000000000073CE                 db    0
.eh_frame_hdr:00000000000073CF                 db    0
.eh_frame_hdr:00000000000073D0                 db  6Ch ; l
.eh_frame_hdr:00000000000073D1                 db 0EBh
.eh_frame_hdr:00000000000073D2                 db 0FFh
.eh_frame_hdr:00000000000073D3                 db 0FFh
.eh_frame_hdr:00000000000073D4                 db  14h
.eh_frame_hdr:00000000000073D5                 db  0Eh
.eh_frame_hdr:00000000000073D6                 db    0
.eh_frame_hdr:00000000000073D7                 db    0
.eh_frame_hdr:00000000000073D8                 db 0ACh
.eh_frame_hdr:00000000000073D9                 db 0EBh
.eh_frame_hdr:00000000000073DA                 db 0FFh
.eh_frame_hdr:00000000000073DB                 db 0FFh
.eh_frame_hdr:00000000000073DC                 db  34h ; 4
.eh_frame_hdr:00000000000073DD                 db  0Eh
.eh_frame_hdr:00000000000073DE                 db    0
.eh_frame_hdr:00000000000073DF                 db    0
.eh_frame_hdr:00000000000073E0                 db  0Ch
.eh_frame_hdr:00000000000073E1                 db 0ECh
.eh_frame_hdr:00000000000073E2                 db 0FFh
.eh_frame_hdr:00000000000073E3                 db 0FFh
.eh_frame_hdr:00000000000073E4                 db  64h ; d
.eh_frame_hdr:00000000000073E5                 db  0Eh
.eh_frame_hdr:00000000000073E6                 db    0
.eh_frame_hdr:00000000000073E7                 db    0
.eh_frame_hdr:00000000000073E8                 db  9Ch
.eh_frame_hdr:00000000000073E9                 db 0ECh
.eh_frame_hdr:00000000000073EA                 db 0FFh
.eh_frame_hdr:00000000000073EB                 db 0FFh
.eh_frame_hdr:00000000000073EC                 db 0A4h
.eh_frame_hdr:00000000000073ED                 db  0Eh
.eh_frame_hdr:00000000000073EE                 db    0
.eh_frame_hdr:00000000000073EF                 db    0
.eh_frame_hdr:00000000000073F0                 db 0ACh
.eh_frame_hdr:00000000000073F1                 db 0ECh
.eh_frame_hdr:00000000000073F2                 db 0FFh
.eh_frame_hdr:00000000000073F3                 db 0FFh
.eh_frame_hdr:00000000000073F4                 db 0B8h
.eh_frame_hdr:00000000000073F5                 db  0Eh
.eh_frame_hdr:00000000000073F6                 db    0
.eh_frame_hdr:00000000000073F7                 db    0
.eh_frame_hdr:00000000000073F8                 db 0CCh
.eh_frame_hdr:00000000000073F9                 db 0EDh
.eh_frame_hdr:00000000000073FA                 db 0FFh
.eh_frame_hdr:00000000000073FB                 db 0FFh
.eh_frame_hdr:00000000000073FC                 db    4
.eh_frame_hdr:00000000000073FD                 db  0Fh
.eh_frame_hdr:00000000000073FE                 db    0
.eh_frame_hdr:00000000000073FF                 db    0
.eh_frame_hdr:0000000000007400                 db  4Ch ; L
.eh_frame_hdr:0000000000007401                 db 0EEh
.eh_frame_hdr:0000000000007402                 db 0FFh
.eh_frame_hdr:0000000000007403                 db 0FFh
.eh_frame_hdr:0000000000007404                 db  30h ; 0
.eh_frame_hdr:0000000000007405                 db  0Fh
.eh_frame_hdr:0000000000007406                 db    0
.eh_frame_hdr:0000000000007407                 db    0
.eh_frame_hdr:0000000000007408                 db  6Ch ; l
.eh_frame_hdr:0000000000007409                 db 0EFh
.eh_frame_hdr:000000000000740A                 db 0FFh
.eh_frame_hdr:000000000000740B                 db 0FFh
.eh_frame_hdr:000000000000740C                 db  90h
.eh_frame_hdr:000000000000740D                 db  0Fh
.eh_frame_hdr:000000000000740E                 db    0
.eh_frame_hdr:000000000000740F                 db    0
.eh_frame_hdr:0000000000007410                 db 0DCh
.eh_frame_hdr:0000000000007411                 db 0EFh
.eh_frame_hdr:0000000000007412                 db 0FFh
.eh_frame_hdr:0000000000007413                 db 0FFh
.eh_frame_hdr:0000000000007414                 db 0DCh
.eh_frame_hdr:0000000000007415                 db  0Fh
.eh_frame_hdr:0000000000007416                 db    0
.eh_frame_hdr:0000000000007417                 db    0
.eh_frame_hdr:0000000000007418                 db  2Ch ; ,
.eh_frame_hdr:0000000000007419                 db 0F0h
.eh_frame_hdr:000000000000741A                 db 0FFh
.eh_frame_hdr:000000000000741B                 db 0FFh
.eh_frame_hdr:000000000000741C                 db  1Ch
.eh_frame_hdr:000000000000741D                 db  10h
.eh_frame_hdr:000000000000741E                 db    0
.eh_frame_hdr:000000000000741F                 db    0
.eh_frame_hdr:0000000000007420                 db 0ACh
.eh_frame_hdr:0000000000007421                 db 0F0h
.eh_frame_hdr:0000000000007422                 db 0FFh
.eh_frame_hdr:0000000000007423                 db 0FFh
.eh_frame_hdr:0000000000007424                 db  6Ch ; l
.eh_frame_hdr:0000000000007425                 db  10h
.eh_frame_hdr:0000000000007426                 db    0
.eh_frame_hdr:0000000000007427                 db    0
.eh_frame_hdr:0000000000007428                 db  0Ch
.eh_frame_hdr:0000000000007429                 db 0F1h
.eh_frame_hdr:000000000000742A                 db 0FFh
.eh_frame_hdr:000000000000742B                 db 0FFh
.eh_frame_hdr:000000000000742C                 db  8Ch
.eh_frame_hdr:000000000000742D                 db  10h
.eh_frame_hdr:000000000000742E                 db    0
.eh_frame_hdr:000000000000742F                 db    0
.eh_frame_hdr:0000000000007430                 db  4Ch ; L
.eh_frame_hdr:0000000000007431                 db 0F1h
.eh_frame_hdr:0000000000007432                 db 0FFh
.eh_frame_hdr:0000000000007433                 db 0FFh
.eh_frame_hdr:0000000000007434                 db 0ACh
.eh_frame_hdr:0000000000007435                 db  10h
.eh_frame_hdr:0000000000007436                 db    0
.eh_frame_hdr:0000000000007437                 db    0
.eh_frame_hdr:0000000000007438                 db 0BCh
.eh_frame_hdr:0000000000007439                 db 0F1h
.eh_frame_hdr:000000000000743A                 db 0FFh
.eh_frame_hdr:000000000000743B                 db 0FFh
.eh_frame_hdr:000000000000743C                 db 0F4h
.eh_frame_hdr:000000000000743D                 db  10h
.eh_frame_hdr:000000000000743E                 db    0
.eh_frame_hdr:000000000000743F                 db    0
.eh_frame_hdr:0000000000007440                 db 0CCh
.eh_frame_hdr:0000000000007441                 db 0F1h
.eh_frame_hdr:0000000000007442                 db 0FFh
.eh_frame_hdr:0000000000007443                 db 0FFh
.eh_frame_hdr:0000000000007444                 db  0Ch
.eh_frame_hdr:0000000000007445                 db  11h
.eh_frame_hdr:0000000000007446                 db    0
.eh_frame_hdr:0000000000007447                 db    0
.eh_frame_hdr:0000000000007447 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007447
.eh_frame:0000000000007448 ; ===========================================================================
.eh_frame:0000000000007448
.eh_frame:0000000000007448 ; Segment type: Pure data
.eh_frame:0000000000007448 ; Segment permissions: Read
.eh_frame:0000000000007448 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007448                 assume cs:_eh_frame
.eh_frame:0000000000007448                 ;org 7448h
.eh_frame:0000000000007448                 db  14h
.eh_frame:0000000000007449                 db    0
.eh_frame:000000000000744A                 db    0
.eh_frame:000000000000744B                 db    0
.eh_frame:000000000000744C                 db    0
.eh_frame:000000000000744D                 db    0
.eh_frame:000000000000744E                 db    0
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db    1
.eh_frame:0000000000007451                 db  7Ah ; z
.eh_frame:0000000000007452                 db  52h ; R
.eh_frame:0000000000007453                 db    0
.eh_frame:0000000000007454                 db    1
.eh_frame:0000000000007455                 db  78h ; x
.eh_frame:0000000000007456                 db  10h
.eh_frame:0000000000007457                 db    1
.eh_frame:0000000000007458                 db  1Bh
.eh_frame:0000000000007459                 db  0Ch
.eh_frame:000000000000745A                 db    7
.eh_frame:000000000000745B                 db    8
.eh_frame:000000000000745C                 db  90h
.eh_frame:000000000000745D                 db    1
.eh_frame:000000000000745E                 db    7
.eh_frame:000000000000745F                 db  10h
.eh_frame:0000000000007460                 db  14h
.eh_frame:0000000000007461                 db    0
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db  1Ch
.eh_frame:0000000000007465                 db    0
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db 0C8h
.eh_frame:0000000000007469                 db 0A6h
.eh_frame:000000000000746A                 db 0FFh
.eh_frame:000000000000746B                 db 0FFh
.eh_frame:000000000000746C                 db  2Bh ; +
.eh_frame:000000000000746D                 db    0
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db    0
.eh_frame:0000000000007471                 db    0
.eh_frame:0000000000007472                 db    0
.eh_frame:0000000000007473                 db    0
.eh_frame:0000000000007474                 db    0
.eh_frame:0000000000007475                 db    0
.eh_frame:0000000000007476                 db    0
.eh_frame:0000000000007477                 db    0
.eh_frame:0000000000007478                 db  14h
.eh_frame:0000000000007479                 db    0
.eh_frame:000000000000747A                 db    0
.eh_frame:000000000000747B                 db    0
.eh_frame:000000000000747C                 db    0
.eh_frame:000000000000747D                 db    0
.eh_frame:000000000000747E                 db    0
.eh_frame:000000000000747F                 db    0
.eh_frame:0000000000007480                 db    1
.eh_frame:0000000000007481                 db  7Ah ; z
.eh_frame:0000000000007482                 db  52h ; R
.eh_frame:0000000000007483                 db    0
.eh_frame:0000000000007484                 db    1
.eh_frame:0000000000007485                 db  78h ; x
.eh_frame:0000000000007486                 db  10h
.eh_frame:0000000000007487                 db    1
.eh_frame:0000000000007488                 db  1Bh
.eh_frame:0000000000007489                 db  0Ch
.eh_frame:000000000000748A                 db    7
.eh_frame:000000000000748B                 db    8
.eh_frame:000000000000748C                 db  90h
.eh_frame:000000000000748D                 db    1
.eh_frame:000000000000748E                 db    0
.eh_frame:000000000000748F                 db    0
.eh_frame:0000000000007490                 db  24h ; $
.eh_frame:0000000000007491                 db    0
.eh_frame:0000000000007492                 db    0
.eh_frame:0000000000007493                 db    0
.eh_frame:0000000000007494                 db  1Ch
.eh_frame:0000000000007495                 db    0
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db  18h
.eh_frame:0000000000007499                 db 0A1h
.eh_frame:000000000000749A                 db 0FFh
.eh_frame:000000000000749B                 db 0FFh
.eh_frame:000000000000749C                 db  80h
.eh_frame:000000000000749D                 db    3
.eh_frame:000000000000749E                 db    0
.eh_frame:000000000000749F                 db    0
.eh_frame:00000000000074A0                 db    0
.eh_frame:00000000000074A1                 db  0Eh
.eh_frame:00000000000074A2                 db  10h
.eh_frame:00000000000074A3                 db  46h ; F
.eh_frame:00000000000074A4                 db  0Eh
.eh_frame:00000000000074A5                 db  18h
.eh_frame:00000000000074A6                 db  4Ah ; J
.eh_frame:00000000000074A7                 db  0Fh
.eh_frame:00000000000074A8                 db  0Bh
.eh_frame:00000000000074A9                 db  77h ; w
.eh_frame:00000000000074AA                 db    8
.eh_frame:00000000000074AB                 db  80h
.eh_frame:00000000000074AC                 db    0
.eh_frame:00000000000074AD                 db  3Fh ; ?
.eh_frame:00000000000074AE                 db  1Ah
.eh_frame:00000000000074AF                 db  3Bh ; ;
.eh_frame:00000000000074B0                 db  2Ah ; *
.eh_frame:00000000000074B1                 db  33h ; 3
.eh_frame:00000000000074B2                 db  24h ; $
.eh_frame:00000000000074B3                 db  22h ; "
.eh_frame:00000000000074B4                 db    0
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db  14h
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db  44h ; D
.eh_frame:00000000000074BD                 db    0
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db  70h ; p
.eh_frame:00000000000074C1                 db 0A4h
.eh_frame:00000000000074C2                 db 0FFh
.eh_frame:00000000000074C3                 db 0FFh
.eh_frame:00000000000074C4                 db    8
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db    0
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db    0
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db  4Ch ; L
.eh_frame:00000000000074D1                 db    0
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db  5Ch ; \
.eh_frame:00000000000074D5                 db    0
.eh_frame:00000000000074D6                 db    0
.eh_frame:00000000000074D7                 db    0
.eh_frame:00000000000074D8                 db  68h ; h
.eh_frame:00000000000074D9                 db 0A7h
.eh_frame:00000000000074DA                 db 0FFh
.eh_frame:00000000000074DB                 db 0FFh
.eh_frame:00000000000074DC                 db  2Eh ; .
.eh_frame:00000000000074DD                 db    2
.eh_frame:00000000000074DE                 db    0
.eh_frame:00000000000074DF                 db    0
.eh_frame:00000000000074E0                 db    0
.eh_frame:00000000000074E1                 db  42h ; B
.eh_frame:00000000000074E2                 db  0Eh
.eh_frame:00000000000074E3                 db  10h
.eh_frame:00000000000074E4                 db  8Fh
.eh_frame:00000000000074E5                 db    2
.eh_frame:00000000000074E6                 db  42h ; B
.eh_frame:00000000000074E7                 db  0Eh
.eh_frame:00000000000074E8                 db  18h
.eh_frame:00000000000074E9                 db  8Eh
.eh_frame:00000000000074EA                 db    3
.eh_frame:00000000000074EB                 db  47h ; G
.eh_frame:00000000000074EC                 db  0Eh
.eh_frame:00000000000074ED                 db  20h
.eh_frame:00000000000074EE                 db  8Dh
.eh_frame:00000000000074EF                 db    4
.eh_frame:00000000000074F0                 db  42h ; B
.eh_frame:00000000000074F1                 db  0Eh
.eh_frame:00000000000074F2                 db  28h ; (
.eh_frame:00000000000074F3                 db  8Ch
.eh_frame:00000000000074F4                 db    5
.eh_frame:00000000000074F5                 db  44h ; D
.eh_frame:00000000000074F6                 db  0Eh
.eh_frame:00000000000074F7                 db  30h ; 0
.eh_frame:00000000000074F8                 db  86h
.eh_frame:00000000000074F9                 db    6
.eh_frame:00000000000074FA                 db  41h ; A
.eh_frame:00000000000074FB                 db  0Eh
.eh_frame:00000000000074FC                 db  38h ; 8
.eh_frame:00000000000074FD                 db  83h
.eh_frame:00000000000074FE                 db    7
.eh_frame:00000000000074FF                 db  4Eh ; N
.eh_frame:0000000000007500                 db  0Eh
.eh_frame:0000000000007501                 db 0F0h
.eh_frame:0000000000007502                 db  45h ; E
.eh_frame:0000000000007503                 db    3
.eh_frame:0000000000007504                 db  3Eh ; >
.eh_frame:0000000000007505                 db    1
.eh_frame:0000000000007506                 db  0Ah
.eh_frame:0000000000007507                 db  0Eh
.eh_frame:0000000000007508                 db  38h ; 8
.eh_frame:0000000000007509                 db  41h ; A
.eh_frame:000000000000750A                 db  0Eh
.eh_frame:000000000000750B                 db  30h ; 0
.eh_frame:000000000000750C                 db  41h ; A
.eh_frame:000000000000750D                 db  0Eh
.eh_frame:000000000000750E                 db  28h ; (
.eh_frame:000000000000750F                 db  42h ; B
.eh_frame:0000000000007510                 db  0Eh
.eh_frame:0000000000007511                 db  20h
.eh_frame:0000000000007512                 db  42h ; B
.eh_frame:0000000000007513                 db  0Eh
.eh_frame:0000000000007514                 db  18h
.eh_frame:0000000000007515                 db  42h ; B
.eh_frame:0000000000007516                 db  0Eh
.eh_frame:0000000000007517                 db  10h
.eh_frame:0000000000007518                 db  42h ; B
.eh_frame:0000000000007519                 db  0Eh
.eh_frame:000000000000751A                 db    8
.eh_frame:000000000000751B                 db  48h ; H
.eh_frame:000000000000751C                 db  0Bh
.eh_frame:000000000000751D                 db    0
.eh_frame:000000000000751E                 db    0
.eh_frame:000000000000751F                 db    0
.eh_frame:0000000000007520                 db  4Ch ; L
.eh_frame:0000000000007521                 db    0
.eh_frame:0000000000007522                 db    0
.eh_frame:0000000000007523                 db    0
.eh_frame:0000000000007524                 db 0ACh
.eh_frame:0000000000007525                 db    0
.eh_frame:0000000000007526                 db    0
.eh_frame:0000000000007527                 db    0
.eh_frame:0000000000007528                 db  48h ; H
.eh_frame:0000000000007529                 db 0A9h
.eh_frame:000000000000752A                 db 0FFh
.eh_frame:000000000000752B                 db 0FFh
.eh_frame:000000000000752C                 db  39h ; 9
.eh_frame:000000000000752D                 db    2
.eh_frame:000000000000752E                 db    0
.eh_frame:000000000000752F                 db    0
.eh_frame:0000000000007530                 db    0
.eh_frame:0000000000007531                 db  42h ; B
.eh_frame:0000000000007532                 db  0Eh
.eh_frame:0000000000007533                 db  10h
.eh_frame:0000000000007534                 db  8Fh
.eh_frame:0000000000007535                 db    2
.eh_frame:0000000000007536                 db  42h ; B
.eh_frame:0000000000007537                 db  0Eh
.eh_frame:0000000000007538                 db  18h
.eh_frame:0000000000007539                 db  8Eh
.eh_frame:000000000000753A                 db    3
.eh_frame:000000000000753B                 db  47h ; G
.eh_frame:000000000000753C                 db  0Eh
.eh_frame:000000000000753D                 db  20h
.eh_frame:000000000000753E                 db  8Dh
.eh_frame:000000000000753F                 db    4
.eh_frame:0000000000007540                 db  42h ; B
.eh_frame:0000000000007541                 db  0Eh
.eh_frame:0000000000007542                 db  28h ; (
.eh_frame:0000000000007543                 db  8Ch
.eh_frame:0000000000007544                 db    5
.eh_frame:0000000000007545                 db  44h ; D
.eh_frame:0000000000007546                 db  0Eh
.eh_frame:0000000000007547                 db  30h ; 0
.eh_frame:0000000000007548                 db  86h
.eh_frame:0000000000007549                 db    6
.eh_frame:000000000000754A                 db  41h ; A
.eh_frame:000000000000754B                 db  0Eh
.eh_frame:000000000000754C                 db  38h ; 8
.eh_frame:000000000000754D                 db  83h
.eh_frame:000000000000754E                 db    7
.eh_frame:000000000000754F                 db  54h ; T
.eh_frame:0000000000007550                 db  0Eh
.eh_frame:0000000000007551                 db 0E0h
.eh_frame:0000000000007552                 db    5
.eh_frame:0000000000007553                 db    3
.eh_frame:0000000000007554                 db  2Ch ; ,
.eh_frame:0000000000007555                 db    1
.eh_frame:0000000000007556                 db  0Ah
.eh_frame:0000000000007557                 db  0Eh
.eh_frame:0000000000007558                 db  38h ; 8
.eh_frame:0000000000007559                 db  41h ; A
.eh_frame:000000000000755A                 db  0Eh
.eh_frame:000000000000755B                 db  30h ; 0
.eh_frame:000000000000755C                 db  41h ; A
.eh_frame:000000000000755D                 db  0Eh
.eh_frame:000000000000755E                 db  28h ; (
.eh_frame:000000000000755F                 db  42h ; B
.eh_frame:0000000000007560                 db  0Eh
.eh_frame:0000000000007561                 db  20h
.eh_frame:0000000000007562                 db  42h ; B
.eh_frame:0000000000007563                 db  0Eh
.eh_frame:0000000000007564                 db  18h
.eh_frame:0000000000007565                 db  42h ; B
.eh_frame:0000000000007566                 db  0Eh
.eh_frame:0000000000007567                 db  10h
.eh_frame:0000000000007568                 db  42h ; B
.eh_frame:0000000000007569                 db  0Eh
.eh_frame:000000000000756A                 db    8
.eh_frame:000000000000756B                 db  44h ; D
.eh_frame:000000000000756C                 db  0Bh
.eh_frame:000000000000756D                 db    0
.eh_frame:000000000000756E                 db    0
.eh_frame:000000000000756F                 db    0
.eh_frame:0000000000007570                 db  28h ; (
.eh_frame:0000000000007571                 db    0
.eh_frame:0000000000007572                 db    0
.eh_frame:0000000000007573                 db    0
.eh_frame:0000000000007574                 db 0FCh
.eh_frame:0000000000007575                 db    0
.eh_frame:0000000000007576                 db    0
.eh_frame:0000000000007577                 db    0
.eh_frame:0000000000007578                 db  38h ; 8
.eh_frame:0000000000007579                 db 0ABh
.eh_frame:000000000000757A                 db 0FFh
.eh_frame:000000000000757B                 db 0FFh
.eh_frame:000000000000757C                 db  8Ah
.eh_frame:000000000000757D                 db    3
.eh_frame:000000000000757E                 db    0
.eh_frame:000000000000757F                 db    0
.eh_frame:0000000000007580                 db    0
.eh_frame:0000000000007581                 db  42h ; B
.eh_frame:0000000000007582                 db  0Eh
.eh_frame:0000000000007583                 db  10h
.eh_frame:0000000000007584                 db  8Dh
.eh_frame:0000000000007585                 db    2
.eh_frame:0000000000007586                 db  42h ; B
.eh_frame:0000000000007587                 db  0Eh
.eh_frame:0000000000007588                 db  18h
.eh_frame:0000000000007589                 db  8Ch
.eh_frame:000000000000758A                 db    3
.eh_frame:000000000000758B                 db  46h ; F
.eh_frame:000000000000758C                 db  0Eh
.eh_frame:000000000000758D                 db  20h
.eh_frame:000000000000758E                 db  86h
.eh_frame:000000000000758F                 db    4
.eh_frame:0000000000007590                 db  41h ; A
.eh_frame:0000000000007591                 db  0Eh
.eh_frame:0000000000007592                 db  28h ; (
.eh_frame:0000000000007593                 db  83h
.eh_frame:0000000000007594                 db    5
.eh_frame:0000000000007595                 db  49h ; I
.eh_frame:0000000000007596                 db  0Eh
.eh_frame:0000000000007597                 db 0B0h
.eh_frame:0000000000007598                 db    1
.eh_frame:0000000000007599                 db    0
.eh_frame:000000000000759A                 db    0
.eh_frame:000000000000759B                 db    0
.eh_frame:000000000000759C                 db  50h ; P
.eh_frame:000000000000759D                 db    0
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db  28h ; (
.eh_frame:00000000000075A1                 db    1
.eh_frame:00000000000075A2                 db    0
.eh_frame:00000000000075A3                 db    0
.eh_frame:00000000000075A4                 db  9Ch
.eh_frame:00000000000075A5                 db 0A3h
.eh_frame:00000000000075A6                 db 0FFh
.eh_frame:00000000000075A7                 db 0FFh
.eh_frame:00000000000075A8                 db 0E5h
.eh_frame:00000000000075A9                 db    1
.eh_frame:00000000000075AA                 db    0
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC                 db    0
.eh_frame:00000000000075AD                 db  42h ; B
.eh_frame:00000000000075AE                 db  0Eh
.eh_frame:00000000000075AF                 db  10h
.eh_frame:00000000000075B0                 db  8Fh
.eh_frame:00000000000075B1                 db    2
.eh_frame:00000000000075B2                 db  42h ; B
.eh_frame:00000000000075B3                 db  0Eh
.eh_frame:00000000000075B4                 db  18h
.eh_frame:00000000000075B5                 db  8Eh
.eh_frame:00000000000075B6                 db    3
.eh_frame:00000000000075B7                 db  49h ; I
.eh_frame:00000000000075B8                 db  0Eh
.eh_frame:00000000000075B9                 db  20h
.eh_frame:00000000000075BA                 db  8Dh
.eh_frame:00000000000075BB                 db    4
.eh_frame:00000000000075BC                 db  42h ; B
.eh_frame:00000000000075BD                 db  0Eh
.eh_frame:00000000000075BE                 db  28h ; (
.eh_frame:00000000000075BF                 db  8Ch
.eh_frame:00000000000075C0                 db    5
.eh_frame:00000000000075C1                 db  48h ; H
.eh_frame:00000000000075C2                 db  0Eh
.eh_frame:00000000000075C3                 db  30h ; 0
.eh_frame:00000000000075C4                 db  86h
.eh_frame:00000000000075C5                 db    6
.eh_frame:00000000000075C6                 db  41h ; A
.eh_frame:00000000000075C7                 db  0Eh
.eh_frame:00000000000075C8                 db  38h ; 8
.eh_frame:00000000000075C9                 db  83h
.eh_frame:00000000000075CA                 db    7
.eh_frame:00000000000075CB                 db  53h ; S
.eh_frame:00000000000075CC                 db  0Eh
.eh_frame:00000000000075CD                 db  40h ; @
.eh_frame:00000000000075CE                 db    2
.eh_frame:00000000000075CF                 db 0B4h
.eh_frame:00000000000075D0                 db  0Ah
.eh_frame:00000000000075D1                 db  0Eh
.eh_frame:00000000000075D2                 db  48h ; H
.eh_frame:00000000000075D3                 db  50h ; P
.eh_frame:00000000000075D4                 db  0Eh
.eh_frame:00000000000075D5                 db  50h ; P
.eh_frame:00000000000075D6                 db  71h ; q
.eh_frame:00000000000075D7                 db  0Bh
.eh_frame:00000000000075D8                 db  75h ; u
.eh_frame:00000000000075D9                 db  0Ah
.eh_frame:00000000000075DA                 db  0Eh
.eh_frame:00000000000075DB                 db  38h ; 8
.eh_frame:00000000000075DC                 db  45h ; E
.eh_frame:00000000000075DD                 db  0Eh
.eh_frame:00000000000075DE                 db  30h ; 0
.eh_frame:00000000000075DF                 db  41h ; A
.eh_frame:00000000000075E0                 db  0Eh
.eh_frame:00000000000075E1                 db  28h ; (
.eh_frame:00000000000075E2                 db  42h ; B
.eh_frame:00000000000075E3                 db  0Eh
.eh_frame:00000000000075E4                 db  20h
.eh_frame:00000000000075E5                 db  42h ; B
.eh_frame:00000000000075E6                 db  0Eh
.eh_frame:00000000000075E7                 db  18h
.eh_frame:00000000000075E8                 db  42h ; B
.eh_frame:00000000000075E9                 db  0Eh
.eh_frame:00000000000075EA                 db  10h
.eh_frame:00000000000075EB                 db  42h ; B
.eh_frame:00000000000075EC                 db  0Eh
.eh_frame:00000000000075ED                 db    8
.eh_frame:00000000000075EE                 db  41h ; A
.eh_frame:00000000000075EF                 db  0Bh
.eh_frame:00000000000075F0                 db  10h
.eh_frame:00000000000075F1                 db    0
.eh_frame:00000000000075F2                 db    0
.eh_frame:00000000000075F3                 db    0
.eh_frame:00000000000075F4                 db  7Ch ; |
.eh_frame:00000000000075F5                 db    1
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db  48h ; H
.eh_frame:00000000000075F9                 db 0AEh
.eh_frame:00000000000075FA                 db 0FFh
.eh_frame:00000000000075FB                 db 0FFh
.eh_frame:00000000000075FC                 db    8
.eh_frame:00000000000075FD                 db    0
.eh_frame:00000000000075FE                 db    0
.eh_frame:00000000000075FF                 db    0
.eh_frame:0000000000007600                 db    0
.eh_frame:0000000000007601                 db    0
.eh_frame:0000000000007602                 db    0
.eh_frame:0000000000007603                 db    0
.eh_frame:0000000000007604                 db  10h
.eh_frame:0000000000007605                 db    0
.eh_frame:0000000000007606                 db    0
.eh_frame:0000000000007607                 db    0
.eh_frame:0000000000007608                 db  90h
.eh_frame:0000000000007609                 db    1
.eh_frame:000000000000760A                 db    0
.eh_frame:000000000000760B                 db    0
.eh_frame:000000000000760C                 db  44h ; D
.eh_frame:000000000000760D                 db 0AEh
.eh_frame:000000000000760E                 db 0FFh
.eh_frame:000000000000760F                 db 0FFh
.eh_frame:0000000000007610                 db    8
.eh_frame:0000000000007611                 db    0
.eh_frame:0000000000007612                 db    0
.eh_frame:0000000000007613                 db    0
.eh_frame:0000000000007614                 db    0
.eh_frame:0000000000007615                 db    0
.eh_frame:0000000000007616                 db    0
.eh_frame:0000000000007617                 db    0
.eh_frame:0000000000007618                 db  2Ch ; ,
.eh_frame:0000000000007619                 db    0
.eh_frame:000000000000761A                 db    0
.eh_frame:000000000000761B                 db    0
.eh_frame:000000000000761C                 db 0A4h
.eh_frame:000000000000761D                 db    1
.eh_frame:000000000000761E                 db    0
.eh_frame:000000000000761F                 db    0
.eh_frame:0000000000007620                 db  40h ; @
.eh_frame:0000000000007621                 db 0AEh
.eh_frame:0000000000007622                 db 0FFh
.eh_frame:0000000000007623                 db 0FFh
.eh_frame:0000000000007624                 db 0A4h
.eh_frame:0000000000007625                 db    0
.eh_frame:0000000000007626                 db    0
.eh_frame:0000000000007627                 db    0
.eh_frame:0000000000007628                 db    0
.eh_frame:0000000000007629                 db  41h ; A
.eh_frame:000000000000762A                 db  0Eh
.eh_frame:000000000000762B                 db  10h
.eh_frame:000000000000762C                 db  86h
.eh_frame:000000000000762D                 db    2
.eh_frame:000000000000762E                 db  41h ; A
.eh_frame:000000000000762F                 db  0Eh
.eh_frame:0000000000007630                 db  18h
.eh_frame:0000000000007631                 db  83h
.eh_frame:0000000000007632                 db    3
.eh_frame:0000000000007633                 db  44h ; D
.eh_frame:0000000000007634                 db  0Eh
.eh_frame:0000000000007635                 db  20h
.eh_frame:0000000000007636                 db  7Ah ; z
.eh_frame:0000000000007637                 db  0Ah
.eh_frame:0000000000007638                 db  0Eh
.eh_frame:0000000000007639                 db  18h
.eh_frame:000000000000763A                 db  41h ; A
.eh_frame:000000000000763B                 db  0Eh
.eh_frame:000000000000763C                 db  10h
.eh_frame:000000000000763D                 db  41h ; A
.eh_frame:000000000000763E                 db  0Eh
.eh_frame:000000000000763F                 db    8
.eh_frame:0000000000007640                 db  41h ; A
.eh_frame:0000000000007641                 db  0Bh
.eh_frame:0000000000007642                 db    0
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db    0
.eh_frame:0000000000007645                 db    0
.eh_frame:0000000000007646                 db    0
.eh_frame:0000000000007647                 db    0
.eh_frame:0000000000007648                 db  10h
.eh_frame:0000000000007649                 db    0
.eh_frame:000000000000764A                 db    0
.eh_frame:000000000000764B                 db    0
.eh_frame:000000000000764C                 db 0D4h
.eh_frame:000000000000764D                 db    1
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db 0C0h
.eh_frame:0000000000007651                 db 0AEh
.eh_frame:0000000000007652                 db 0FFh
.eh_frame:0000000000007653                 db 0FFh
.eh_frame:0000000000007654                 db    5
.eh_frame:0000000000007655                 db    0
.eh_frame:0000000000007656                 db    0
.eh_frame:0000000000007657                 db    0
.eh_frame:0000000000007658                 db    0
.eh_frame:0000000000007659                 db    0
.eh_frame:000000000000765A                 db    0
.eh_frame:000000000000765B                 db    0
.eh_frame:000000000000765C                 db  18h
.eh_frame:000000000000765D                 db    0
.eh_frame:000000000000765E                 db    0
.eh_frame:000000000000765F                 db    0
.eh_frame:0000000000007660                 db 0E8h
.eh_frame:0000000000007661                 db    1
.eh_frame:0000000000007662                 db    0
.eh_frame:0000000000007663                 db    0
.eh_frame:0000000000007664                 db 0BCh
.eh_frame:0000000000007665                 db 0AEh
.eh_frame:0000000000007666                 db 0FFh
.eh_frame:0000000000007667                 db 0FFh
.eh_frame:0000000000007668                 db  22h ; "
.eh_frame:0000000000007669                 db    0
.eh_frame:000000000000766A                 db    0
.eh_frame:000000000000766B                 db    0
.eh_frame:000000000000766C                 db    0
.eh_frame:000000000000766D                 db  46h ; F
.eh_frame:000000000000766E                 db  0Eh
.eh_frame:000000000000766F                 db  10h
.eh_frame:0000000000007670                 db  83h
.eh_frame:0000000000007671                 db    2
.eh_frame:0000000000007672                 db  4Eh ; N
.eh_frame:0000000000007673                 db 0C3h
.eh_frame:0000000000007674                 db  0Eh
.eh_frame:0000000000007675                 db    8
.eh_frame:0000000000007676                 db    0
.eh_frame:0000000000007677                 db    0
.eh_frame:0000000000007678                 db  10h
.eh_frame:0000000000007679                 db    0
.eh_frame:000000000000767A                 db    0
.eh_frame:000000000000767B                 db    0
.eh_frame:000000000000767C                 db    4
.eh_frame:000000000000767D                 db    2
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db 0D0h
.eh_frame:0000000000007681                 db 0AEh
.eh_frame:0000000000007682                 db 0FFh
.eh_frame:0000000000007683                 db 0FFh
.eh_frame:0000000000007684                 db 0C7h
.eh_frame:0000000000007685                 db    0
.eh_frame:0000000000007686                 db    0
.eh_frame:0000000000007687                 db    0
.eh_frame:0000000000007688                 db    0
.eh_frame:0000000000007689                 db    0
.eh_frame:000000000000768A                 db    0
.eh_frame:000000000000768B                 db    0
.eh_frame:000000000000768C                 db 0A4h
.eh_frame:000000000000768D                 db    0
.eh_frame:000000000000768E                 db    0
.eh_frame:000000000000768F                 db    0
.eh_frame:0000000000007690                 db  18h
.eh_frame:0000000000007691                 db    2
.eh_frame:0000000000007692                 db    0
.eh_frame:0000000000007693                 db    0
.eh_frame:0000000000007694                 db  8Ch
.eh_frame:0000000000007695                 db 0AFh
.eh_frame:0000000000007696                 db 0FFh
.eh_frame:0000000000007697                 db 0FFh
.eh_frame:0000000000007698                 db    7
.eh_frame:0000000000007699                 db  0Ah
.eh_frame:000000000000769A                 db    0
.eh_frame:000000000000769B                 db    0
.eh_frame:000000000000769C                 db    0
.eh_frame:000000000000769D                 db  42h ; B
.eh_frame:000000000000769E                 db  0Eh
.eh_frame:000000000000769F                 db  10h
.eh_frame:00000000000076A0                 db  8Fh
.eh_frame:00000000000076A1                 db    2
.eh_frame:00000000000076A2                 db  42h ; B
.eh_frame:00000000000076A3                 db  0Eh
.eh_frame:00000000000076A4                 db  18h
.eh_frame:00000000000076A5                 db  8Eh
.eh_frame:00000000000076A6                 db    3
.eh_frame:00000000000076A7                 db  44h ; D
.eh_frame:00000000000076A8                 db  0Eh
.eh_frame:00000000000076A9                 db  20h
.eh_frame:00000000000076AA                 db  8Dh
.eh_frame:00000000000076AB                 db    4
.eh_frame:00000000000076AC                 db  42h ; B
.eh_frame:00000000000076AD                 db  0Eh
.eh_frame:00000000000076AE                 db  28h ; (
.eh_frame:00000000000076AF                 db  8Ch
.eh_frame:00000000000076B0                 db    5
.eh_frame:00000000000076B1                 db  44h ; D
.eh_frame:00000000000076B2                 db  0Eh
.eh_frame:00000000000076B3                 db  30h ; 0
.eh_frame:00000000000076B4                 db  86h
.eh_frame:00000000000076B5                 db    6
.eh_frame:00000000000076B6                 db  41h ; A
.eh_frame:00000000000076B7                 db  0Eh
.eh_frame:00000000000076B8                 db  38h ; 8
.eh_frame:00000000000076B9                 db  83h
.eh_frame:00000000000076BA                 db    7
.eh_frame:00000000000076BB                 db  54h ; T
.eh_frame:00000000000076BC                 db  0Eh
.eh_frame:00000000000076BD                 db 0D0h
.eh_frame:00000000000076BE                 db    1
.eh_frame:00000000000076BF                 db    3
.eh_frame:00000000000076C0                 db  7Eh ; ~
.eh_frame:00000000000076C1                 db    1
.eh_frame:00000000000076C2                 db  0Eh
.eh_frame:00000000000076C3                 db 0E0h
.eh_frame:00000000000076C4                 db    1
.eh_frame:00000000000076C5                 db  6Eh ; n
.eh_frame:00000000000076C6                 db  0Eh
.eh_frame:00000000000076C7                 db 0D8h
.eh_frame:00000000000076C8                 db    1
.eh_frame:00000000000076C9                 db  41h ; A
.eh_frame:00000000000076CA                 db  0Eh
.eh_frame:00000000000076CB                 db 0D0h
.eh_frame:00000000000076CC                 db    1
.eh_frame:00000000000076CD                 db    3
.eh_frame:00000000000076CE                 db  40h ; @
.eh_frame:00000000000076CF                 db    1
.eh_frame:00000000000076D0                 db  0Eh
.eh_frame:00000000000076D1                 db 0E0h
.eh_frame:00000000000076D2                 db    1
.eh_frame:00000000000076D3                 db  75h ; u
.eh_frame:00000000000076D4                 db  0Eh
.eh_frame:00000000000076D5                 db 0D8h
.eh_frame:00000000000076D6                 db    1
.eh_frame:00000000000076D7                 db  41h ; A
.eh_frame:00000000000076D8                 db  0Eh
.eh_frame:00000000000076D9                 db 0D0h
.eh_frame:00000000000076DA                 db    1
.eh_frame:00000000000076DB                 db    2
.eh_frame:00000000000076DC                 db 0EAh
.eh_frame:00000000000076DD                 db  0Ah
.eh_frame:00000000000076DE                 db  0Eh
.eh_frame:00000000000076DF                 db  38h ; 8
.eh_frame:00000000000076E0                 db  41h ; A
.eh_frame:00000000000076E1                 db  0Eh
.eh_frame:00000000000076E2                 db  30h ; 0
.eh_frame:00000000000076E3                 db  41h ; A
.eh_frame:00000000000076E4                 db  0Eh
.eh_frame:00000000000076E5                 db  28h ; (
.eh_frame:00000000000076E6                 db  42h ; B
.eh_frame:00000000000076E7                 db  0Eh
.eh_frame:00000000000076E8                 db  20h
.eh_frame:00000000000076E9                 db  42h ; B
.eh_frame:00000000000076EA                 db  0Eh
.eh_frame:00000000000076EB                 db  18h
.eh_frame:00000000000076EC                 db  42h ; B
.eh_frame:00000000000076ED                 db  0Eh
.eh_frame:00000000000076EE                 db  10h
.eh_frame:00000000000076EF                 db  42h ; B
.eh_frame:00000000000076F0                 db  0Eh
.eh_frame:00000000000076F1                 db    8
.eh_frame:00000000000076F2                 db  46h ; F
.eh_frame:00000000000076F3                 db  0Bh
.eh_frame:00000000000076F4                 db    3
.eh_frame:00000000000076F5                 db  2Ch ; ,
.eh_frame:00000000000076F6                 db    1
.eh_frame:00000000000076F7                 db  0Eh
.eh_frame:00000000000076F8                 db 0E0h
.eh_frame:00000000000076F9                 db    1
.eh_frame:00000000000076FA                 db  52h ; R
.eh_frame:00000000000076FB                 db  0Eh
.eh_frame:00000000000076FC                 db 0D8h
.eh_frame:00000000000076FD                 db    1
.eh_frame:00000000000076FE                 db  41h ; A
.eh_frame:00000000000076FF                 db  0Eh
.eh_frame:0000000000007700                 db 0D0h
.eh_frame:0000000000007701                 db    1
.eh_frame:0000000000007702                 db  55h ; U
.eh_frame:0000000000007703                 db  0Eh
.eh_frame:0000000000007704                 db 0E0h
.eh_frame:0000000000007705                 db    1
.eh_frame:0000000000007706                 db  4Dh ; M
.eh_frame:0000000000007707                 db  0Eh
.eh_frame:0000000000007708                 db 0D8h
.eh_frame:0000000000007709                 db    1
.eh_frame:000000000000770A                 db  42h ; B
.eh_frame:000000000000770B                 db  0Eh
.eh_frame:000000000000770C                 db 0D0h
.eh_frame:000000000000770D                 db    1
.eh_frame:000000000000770E                 db    3
.eh_frame:000000000000770F                 db  51h ; Q
.eh_frame:0000000000007710                 db    1
.eh_frame:0000000000007711                 db  0Eh
.eh_frame:0000000000007712                 db 0E0h
.eh_frame:0000000000007713                 db    1
.eh_frame:0000000000007714                 db  77h ; w
.eh_frame:0000000000007715                 db  0Eh
.eh_frame:0000000000007716                 db 0D8h
.eh_frame:0000000000007717                 db    1
.eh_frame:0000000000007718                 db  41h ; A
.eh_frame:0000000000007719                 db  0Eh
.eh_frame:000000000000771A                 db 0D0h
.eh_frame:000000000000771B                 db    1
.eh_frame:000000000000771C                 db  5Dh ; ]
.eh_frame:000000000000771D                 db  0Eh
.eh_frame:000000000000771E                 db 0E0h
.eh_frame:000000000000771F                 db    1
.eh_frame:0000000000007720                 db  71h ; q
.eh_frame:0000000000007721                 db  0Eh
.eh_frame:0000000000007722                 db 0D8h
.eh_frame:0000000000007723                 db    1
.eh_frame:0000000000007724                 db  45h ; E
.eh_frame:0000000000007725                 db  0Eh
.eh_frame:0000000000007726                 db 0D0h
.eh_frame:0000000000007727                 db    1
.eh_frame:0000000000007728                 db  63h ; c
.eh_frame:0000000000007729                 db  0Eh
.eh_frame:000000000000772A                 db 0E0h
.eh_frame:000000000000772B                 db    1
.eh_frame:000000000000772C                 db  4Ch ; L
.eh_frame:000000000000772D                 db  0Eh
.eh_frame:000000000000772E                 db 0D8h
.eh_frame:000000000000772F                 db    1
.eh_frame:0000000000007730                 db  42h ; B
.eh_frame:0000000000007731                 db  0Eh
.eh_frame:0000000000007732                 db 0D0h
.eh_frame:0000000000007733                 db    1
.eh_frame:0000000000007734                 db  38h ; 8
.eh_frame:0000000000007735                 db    0
.eh_frame:0000000000007736                 db    0
.eh_frame:0000000000007737                 db    0
.eh_frame:0000000000007738                 db 0C0h
.eh_frame:0000000000007739                 db    2
.eh_frame:000000000000773A                 db    0
.eh_frame:000000000000773B                 db    0
.eh_frame:000000000000773C                 db 0F4h
.eh_frame:000000000000773D                 db 0B8h
.eh_frame:000000000000773E                 db 0FFh
.eh_frame:000000000000773F                 db 0FFh
.eh_frame:0000000000007740                 db 0E6h
.eh_frame:0000000000007741                 db    1
.eh_frame:0000000000007742                 db    0
.eh_frame:0000000000007743                 db    0
.eh_frame:0000000000007744                 db    0
.eh_frame:0000000000007745                 db  42h ; B
.eh_frame:0000000000007746                 db  0Eh
.eh_frame:0000000000007747                 db  10h
.eh_frame:0000000000007748                 db  8Dh
.eh_frame:0000000000007749                 db    2
.eh_frame:000000000000774A                 db  42h ; B
.eh_frame:000000000000774B                 db  0Eh
.eh_frame:000000000000774C                 db  18h
.eh_frame:000000000000774D                 db  8Ch
.eh_frame:000000000000774E                 db    3
.eh_frame:000000000000774F                 db  44h ; D
.eh_frame:0000000000007750                 db  0Eh
.eh_frame:0000000000007751                 db  20h
.eh_frame:0000000000007752                 db  86h
.eh_frame:0000000000007753                 db    4
.eh_frame:0000000000007754                 db  41h ; A
.eh_frame:0000000000007755                 db  0Eh
.eh_frame:0000000000007756                 db  28h ; (
.eh_frame:0000000000007757                 db  83h
.eh_frame:0000000000007758                 db    5
.eh_frame:0000000000007759                 db  4Ah ; J
.eh_frame:000000000000775A                 db  0Eh
.eh_frame:000000000000775B                 db  40h ; @
.eh_frame:000000000000775C                 db    2
.eh_frame:000000000000775D                 db  7Ah ; z
.eh_frame:000000000000775E                 db  0Ah
.eh_frame:000000000000775F                 db  0Eh
.eh_frame:0000000000007760                 db  28h ; (
.eh_frame:0000000000007761                 db  41h ; A
.eh_frame:0000000000007762                 db  0Eh
.eh_frame:0000000000007763                 db  20h
.eh_frame:0000000000007764                 db  41h ; A
.eh_frame:0000000000007765                 db  0Eh
.eh_frame:0000000000007766                 db  18h
.eh_frame:0000000000007767                 db  42h ; B
.eh_frame:0000000000007768                 db  0Eh
.eh_frame:0000000000007769                 db  10h
.eh_frame:000000000000776A                 db  42h ; B
.eh_frame:000000000000776B                 db  0Eh
.eh_frame:000000000000776C                 db    8
.eh_frame:000000000000776D                 db  45h ; E
.eh_frame:000000000000776E                 db  0Bh
.eh_frame:000000000000776F                 db    0
.eh_frame:0000000000007770                 db  1Ch
.eh_frame:0000000000007771                 db    0
.eh_frame:0000000000007772                 db    0
.eh_frame:0000000000007773                 db    0
.eh_frame:0000000000007774                 db 0FCh
.eh_frame:0000000000007775                 db    2
.eh_frame:0000000000007776                 db    0
.eh_frame:0000000000007777                 db    0
.eh_frame:0000000000007778                 db 0A8h
.eh_frame:0000000000007779                 db 0BAh
.eh_frame:000000000000777A                 db 0FFh
.eh_frame:000000000000777B                 db 0FFh
.eh_frame:000000000000777C                 db  9Fh
.eh_frame:000000000000777D                 db    0
.eh_frame:000000000000777E                 db    0
.eh_frame:000000000000777F                 db    0
.eh_frame:0000000000007780                 db    0
.eh_frame:0000000000007781                 db  44h ; D
.eh_frame:0000000000007782                 db  0Eh
.eh_frame:0000000000007783                 db  10h
.eh_frame:0000000000007784                 db  83h
.eh_frame:0000000000007785                 db    2
.eh_frame:0000000000007786                 db    2
.eh_frame:0000000000007787                 db  78h ; x
.eh_frame:0000000000007788                 db  0Ah
.eh_frame:0000000000007789                 db  0Eh
.eh_frame:000000000000778A                 db    8
.eh_frame:000000000000778B                 db  41h ; A
.eh_frame:000000000000778C                 db  0Bh
.eh_frame:000000000000778D                 db    0
.eh_frame:000000000000778E                 db    0
.eh_frame:000000000000778F                 db    0
.eh_frame:0000000000007790                 db  40h ; @
.eh_frame:0000000000007791                 db    0
.eh_frame:0000000000007792                 db    0
.eh_frame:0000000000007793                 db    0
.eh_frame:0000000000007794                 db  1Ch
.eh_frame:0000000000007795                 db    3
.eh_frame:0000000000007796                 db    0
.eh_frame:0000000000007797                 db    0
.eh_frame:0000000000007798                 db  28h ; (
.eh_frame:0000000000007799                 db 0BBh
.eh_frame:000000000000779A                 db 0FFh
.eh_frame:000000000000779B                 db 0FFh
.eh_frame:000000000000779C                 db 0E7h
.eh_frame:000000000000779D                 db    0
.eh_frame:000000000000779E                 db    0
.eh_frame:000000000000779F                 db    0
.eh_frame:00000000000077A0                 db    0
.eh_frame:00000000000077A1                 db  41h ; A
.eh_frame:00000000000077A2                 db  0Eh
.eh_frame:00000000000077A3                 db  10h
.eh_frame:00000000000077A4                 db  86h
.eh_frame:00000000000077A5                 db    2
.eh_frame:00000000000077A6                 db  41h ; A
.eh_frame:00000000000077A7                 db  0Eh
.eh_frame:00000000000077A8                 db  18h
.eh_frame:00000000000077A9                 db  83h
.eh_frame:00000000000077AA                 db    3
.eh_frame:00000000000077AB                 db  49h ; I
.eh_frame:00000000000077AC                 db  0Eh
.eh_frame:00000000000077AD                 db  20h
.eh_frame:00000000000077AE                 db  6Eh ; n
.eh_frame:00000000000077AF                 db  0Ah
.eh_frame:00000000000077B0                 db  0Eh
.eh_frame:00000000000077B1                 db  18h
.eh_frame:00000000000077B2                 db  41h ; A
.eh_frame:00000000000077B3                 db  0Eh
.eh_frame:00000000000077B4                 db  10h
.eh_frame:00000000000077B5                 db  41h ; A
.eh_frame:00000000000077B6                 db  0Eh
.eh_frame:00000000000077B7                 db    8
.eh_frame:00000000000077B8                 db  45h ; E
.eh_frame:00000000000077B9                 db  0Bh
.eh_frame:00000000000077BA                 db    2
.eh_frame:00000000000077BB                 db  4Ah ; J
.eh_frame:00000000000077BC                 db  0Ah
.eh_frame:00000000000077BD                 db  0Eh
.eh_frame:00000000000077BE                 db  18h
.eh_frame:00000000000077BF                 db  41h ; A
.eh_frame:00000000000077C0                 db  0Eh
.eh_frame:00000000000077C1                 db  10h
.eh_frame:00000000000077C2                 db  41h ; A
.eh_frame:00000000000077C3                 db  0Eh
.eh_frame:00000000000077C4                 db    8
.eh_frame:00000000000077C5                 db  44h ; D
.eh_frame:00000000000077C6                 db  0Bh
.eh_frame:00000000000077C7                 db    2
.eh_frame:00000000000077C8                 db  54h ; T
.eh_frame:00000000000077C9                 db  0Eh
.eh_frame:00000000000077CA                 db  18h
.eh_frame:00000000000077CB                 db  41h ; A
.eh_frame:00000000000077CC                 db  0Eh
.eh_frame:00000000000077CD                 db  10h
.eh_frame:00000000000077CE                 db  41h ; A
.eh_frame:00000000000077CF                 db  0Eh
.eh_frame:00000000000077D0                 db    8
.eh_frame:00000000000077D1                 db    0
.eh_frame:00000000000077D2                 db    0
.eh_frame:00000000000077D3                 db    0
.eh_frame:00000000000077D4                 db  74h ; t
.eh_frame:00000000000077D5                 db    0
.eh_frame:00000000000077D6                 db    0
.eh_frame:00000000000077D7                 db    0
.eh_frame:00000000000077D8                 db  60h ; `
.eh_frame:00000000000077D9                 db    3
.eh_frame:00000000000077DA                 db    0
.eh_frame:00000000000077DB                 db    0
.eh_frame:00000000000077DC                 db 0D4h
.eh_frame:00000000000077DD                 db 0BBh
.eh_frame:00000000000077DE                 db 0FFh
.eh_frame:00000000000077DF                 db 0FFh
.eh_frame:00000000000077E0                 db  34h ; 4
.eh_frame:00000000000077E1                 db  12h
.eh_frame:00000000000077E2                 db    0
.eh_frame:00000000000077E3                 db    0
.eh_frame:00000000000077E4                 db    0
.eh_frame:00000000000077E5                 db  42h ; B
.eh_frame:00000000000077E6                 db  0Eh
.eh_frame:00000000000077E7                 db  10h
.eh_frame:00000000000077E8                 db  8Fh
.eh_frame:00000000000077E9                 db    2
.eh_frame:00000000000077EA                 db  42h ; B
.eh_frame:00000000000077EB                 db  0Eh
.eh_frame:00000000000077EC                 db  18h
.eh_frame:00000000000077ED                 db  8Eh
.eh_frame:00000000000077EE                 db    3
.eh_frame:00000000000077EF                 db  45h ; E
.eh_frame:00000000000077F0                 db  0Eh
.eh_frame:00000000000077F1                 db  20h
.eh_frame:00000000000077F2                 db  8Dh
.eh_frame:00000000000077F3                 db    4
.eh_frame:00000000000077F4                 db  42h ; B
.eh_frame:00000000000077F5                 db  0Eh
.eh_frame:00000000000077F6                 db  28h ; (
.eh_frame:00000000000077F7                 db  8Ch
.eh_frame:00000000000077F8                 db    5
.eh_frame:00000000000077F9                 db  44h ; D
.eh_frame:00000000000077FA                 db  0Eh
.eh_frame:00000000000077FB                 db  30h ; 0
.eh_frame:00000000000077FC                 db  86h
.eh_frame:00000000000077FD                 db    6
.eh_frame:00000000000077FE                 db  41h ; A
.eh_frame:00000000000077FF                 db  0Eh
.eh_frame:0000000000007800                 db  38h ; 8
.eh_frame:0000000000007801                 db  83h
.eh_frame:0000000000007802                 db    7
.eh_frame:0000000000007803                 db  53h ; S
.eh_frame:0000000000007804                 db  0Eh
.eh_frame:0000000000007805                 db 0F0h
.eh_frame:0000000000007806                 db    1
.eh_frame:0000000000007807                 db    3
.eh_frame:0000000000007808                 db  81h
.eh_frame:0000000000007809                 db  0Bh
.eh_frame:000000000000780A                 db  0Eh
.eh_frame:000000000000780B                 db 0F8h
.eh_frame:000000000000780C                 db    1
.eh_frame:000000000000780D                 db  4Ah ; J
.eh_frame:000000000000780E                 db  0Eh
.eh_frame:000000000000780F                 db  80h
.eh_frame:0000000000007810                 db    2
.eh_frame:0000000000007811                 db  44h ; D
.eh_frame:0000000000007812                 db  0Eh
.eh_frame:0000000000007813                 db  88h
.eh_frame:0000000000007814                 db    2
.eh_frame:0000000000007815                 db  45h ; E
.eh_frame:0000000000007816                 db  0Eh
.eh_frame:0000000000007817                 db  90h
.eh_frame:0000000000007818                 db    2
.eh_frame:0000000000007819                 db  5Fh ; _
.eh_frame:000000000000781A                 db  0Eh
.eh_frame:000000000000781B                 db 0F0h
.eh_frame:000000000000781C                 db    1
.eh_frame:000000000000781D                 db  64h ; d
.eh_frame:000000000000781E                 db  0Ah
.eh_frame:000000000000781F                 db  0Eh
.eh_frame:0000000000007820                 db  38h ; 8
.eh_frame:0000000000007821                 db  41h ; A
.eh_frame:0000000000007822                 db  0Eh
.eh_frame:0000000000007823                 db  30h ; 0
.eh_frame:0000000000007824                 db  41h ; A
.eh_frame:0000000000007825                 db  0Eh
.eh_frame:0000000000007826                 db  28h ; (
.eh_frame:0000000000007827                 db  42h ; B
.eh_frame:0000000000007828                 db  0Eh
.eh_frame:0000000000007829                 db  20h
.eh_frame:000000000000782A                 db  42h ; B
.eh_frame:000000000000782B                 db  0Eh
.eh_frame:000000000000782C                 db  18h
.eh_frame:000000000000782D                 db  42h ; B
.eh_frame:000000000000782E                 db  0Eh
.eh_frame:000000000000782F                 db  10h
.eh_frame:0000000000007830                 db  42h ; B
.eh_frame:0000000000007831                 db  0Eh
.eh_frame:0000000000007832                 db    8
.eh_frame:0000000000007833                 db  44h ; D
.eh_frame:0000000000007834                 db  0Bh
.eh_frame:0000000000007835                 db    3
.eh_frame:0000000000007836                 db  99h
.eh_frame:0000000000007837                 db    5
.eh_frame:0000000000007838                 db  0Eh
.eh_frame:0000000000007839                 db 0F8h
.eh_frame:000000000000783A                 db    1
.eh_frame:000000000000783B                 db  4Dh ; M
.eh_frame:000000000000783C                 db  0Eh
.eh_frame:000000000000783D                 db  80h
.eh_frame:000000000000783E                 db    2
.eh_frame:000000000000783F                 db  44h ; D
.eh_frame:0000000000007840                 db  0Eh
.eh_frame:0000000000007841                 db  88h
.eh_frame:0000000000007842                 db    2
.eh_frame:0000000000007843                 db  47h ; G
.eh_frame:0000000000007844                 db  0Eh
.eh_frame:0000000000007845                 db  90h
.eh_frame:0000000000007846                 db    2
.eh_frame:0000000000007847                 db  5Bh ; [
.eh_frame:0000000000007848                 db  0Eh
.eh_frame:0000000000007849                 db 0F0h
.eh_frame:000000000000784A                 db    1
.eh_frame:000000000000784B                 db    0
.eh_frame:000000000000784C                 db  68h ; h
.eh_frame:000000000000784D                 db    0
.eh_frame:000000000000784E                 db    0
.eh_frame:000000000000784F                 db    0
.eh_frame:0000000000007850                 db 0D8h
.eh_frame:0000000000007851                 db    3
.eh_frame:0000000000007852                 db    0
.eh_frame:0000000000007853                 db    0
.eh_frame:0000000000007854                 db  9Ch
.eh_frame:0000000000007855                 db 0CDh
.eh_frame:0000000000007856                 db 0FFh
.eh_frame:0000000000007857                 db 0FFh
.eh_frame:0000000000007858                 db 0ABh
.eh_frame:0000000000007859                 db    1
.eh_frame:000000000000785A                 db    0
.eh_frame:000000000000785B                 db    0
.eh_frame:000000000000785C                 db    0
.eh_frame:000000000000785D                 db  42h ; B
.eh_frame:000000000000785E                 db  0Eh
.eh_frame:000000000000785F                 db  10h
.eh_frame:0000000000007860                 db  8Fh
.eh_frame:0000000000007861                 db    2
.eh_frame:0000000000007862                 db  42h ; B
.eh_frame:0000000000007863                 db  0Eh
.eh_frame:0000000000007864                 db  18h
.eh_frame:0000000000007865                 db  8Eh
.eh_frame:0000000000007866                 db    3
.eh_frame:0000000000007867                 db  45h ; E
.eh_frame:0000000000007868                 db  0Eh
.eh_frame:0000000000007869                 db  20h
.eh_frame:000000000000786A                 db  8Dh
.eh_frame:000000000000786B                 db    4
.eh_frame:000000000000786C                 db  42h ; B
.eh_frame:000000000000786D                 db  0Eh
.eh_frame:000000000000786E                 db  28h ; (
.eh_frame:000000000000786F                 db  8Ch
.eh_frame:0000000000007870                 db    5
.eh_frame:0000000000007871                 db  44h ; D
.eh_frame:0000000000007872                 db  0Eh
.eh_frame:0000000000007873                 db  30h ; 0
.eh_frame:0000000000007874                 db  86h
.eh_frame:0000000000007875                 db    6
.eh_frame:0000000000007876                 db  41h ; A
.eh_frame:0000000000007877                 db  0Eh
.eh_frame:0000000000007878                 db  38h ; 8
.eh_frame:0000000000007879                 db  83h
.eh_frame:000000000000787A                 db    7
.eh_frame:000000000000787B                 db  47h ; G
.eh_frame:000000000000787C                 db  0Eh
.eh_frame:000000000000787D                 db  60h ; `
.eh_frame:000000000000787E                 db    2
.eh_frame:000000000000787F                 db  99h
.eh_frame:0000000000007880                 db  0Eh
.eh_frame:0000000000007881                 db  68h ; h
.eh_frame:0000000000007882                 db  5Fh ; _
.eh_frame:0000000000007883                 db  0Eh
.eh_frame:0000000000007884                 db  70h ; p
.eh_frame:0000000000007885                 db  46h ; F
.eh_frame:0000000000007886                 db  0Eh
.eh_frame:0000000000007887                 db  78h ; x
.eh_frame:0000000000007888                 db  42h ; B
.eh_frame:0000000000007889                 db  0Eh
.eh_frame:000000000000788A                 db  80h
.eh_frame:000000000000788B                 db    1
.eh_frame:000000000000788C                 db  59h ; Y
.eh_frame:000000000000788D                 db  0Eh
.eh_frame:000000000000788E                 db  60h ; `
.eh_frame:000000000000788F                 db    2
.eh_frame:0000000000007890                 db  40h ; @
.eh_frame:0000000000007891                 db  0Eh
.eh_frame:0000000000007892                 db  68h ; h
.eh_frame:0000000000007893                 db  4Bh ; K
.eh_frame:0000000000007894                 db  0Eh
.eh_frame:0000000000007895                 db  70h ; p
.eh_frame:0000000000007896                 db  43h ; C
.eh_frame:0000000000007897                 db  0Eh
.eh_frame:0000000000007898                 db  78h ; x
.eh_frame:0000000000007899                 db  45h ; E
.eh_frame:000000000000789A                 db  0Eh
.eh_frame:000000000000789B                 db  80h
.eh_frame:000000000000789C                 db    1
.eh_frame:000000000000789D                 db  5Eh ; ^
.eh_frame:000000000000789E                 db  0Eh
.eh_frame:000000000000789F                 db  60h ; `
.eh_frame:00000000000078A0                 db  4Ch ; L
.eh_frame:00000000000078A1                 db  0Ah
.eh_frame:00000000000078A2                 db  0Eh
.eh_frame:00000000000078A3                 db  38h ; 8
.eh_frame:00000000000078A4                 db  44h ; D
.eh_frame:00000000000078A5                 db  0Eh
.eh_frame:00000000000078A6                 db  30h ; 0
.eh_frame:00000000000078A7                 db  41h ; A
.eh_frame:00000000000078A8                 db  0Eh
.eh_frame:00000000000078A9                 db  28h ; (
.eh_frame:00000000000078AA                 db  42h ; B
.eh_frame:00000000000078AB                 db  0Eh
.eh_frame:00000000000078AC                 db  20h
.eh_frame:00000000000078AD                 db  42h ; B
.eh_frame:00000000000078AE                 db  0Eh
.eh_frame:00000000000078AF                 db  18h
.eh_frame:00000000000078B0                 db  42h ; B
.eh_frame:00000000000078B1                 db  0Eh
.eh_frame:00000000000078B2                 db  10h
.eh_frame:00000000000078B3                 db  42h ; B
.eh_frame:00000000000078B4                 db  0Eh
.eh_frame:00000000000078B5                 db    8
.eh_frame:00000000000078B6                 db  46h ; F
.eh_frame:00000000000078B7                 db  0Bh
.eh_frame:00000000000078B8                 db  28h ; (
.eh_frame:00000000000078B9                 db    0
.eh_frame:00000000000078BA                 db    0
.eh_frame:00000000000078BB                 db    0
.eh_frame:00000000000078BC                 db  44h ; D
.eh_frame:00000000000078BD                 db    4
.eh_frame:00000000000078BE                 db    0
.eh_frame:00000000000078BF                 db    0
.eh_frame:00000000000078C0                 db 0E0h
.eh_frame:00000000000078C1                 db 0CEh
.eh_frame:00000000000078C2                 db 0FFh
.eh_frame:00000000000078C3                 db 0FFh
.eh_frame:00000000000078C4                 db  36h ; 6
.eh_frame:00000000000078C5                 db    0
.eh_frame:00000000000078C6                 db    0
.eh_frame:00000000000078C7                 db    0
.eh_frame:00000000000078C8                 db    0
.eh_frame:00000000000078C9                 db  42h ; B
.eh_frame:00000000000078CA                 db  0Eh
.eh_frame:00000000000078CB                 db  10h
.eh_frame:00000000000078CC                 db  8Ch
.eh_frame:00000000000078CD                 db    2
.eh_frame:00000000000078CE                 db  41h ; A
.eh_frame:00000000000078CF                 db  0Eh
.eh_frame:00000000000078D0                 db  18h
.eh_frame:00000000000078D1                 db  86h
.eh_frame:00000000000078D2                 db    3
.eh_frame:00000000000078D3                 db  41h ; A
.eh_frame:00000000000078D4                 db  0Eh
.eh_frame:00000000000078D5                 db  20h
.eh_frame:00000000000078D6                 db  83h
.eh_frame:00000000000078D7                 db    4
.eh_frame:00000000000078D8                 db  6Eh ; n
.eh_frame:00000000000078D9                 db  0Eh
.eh_frame:00000000000078DA                 db  18h
.eh_frame:00000000000078DB                 db  41h ; A
.eh_frame:00000000000078DC                 db  0Eh
.eh_frame:00000000000078DD                 db  10h
.eh_frame:00000000000078DE                 db  42h ; B
.eh_frame:00000000000078DF                 db  0Eh
.eh_frame:00000000000078E0                 db    8
.eh_frame:00000000000078E1                 db    0
.eh_frame:00000000000078E2                 db    0
.eh_frame:00000000000078E3                 db    0
.eh_frame:00000000000078E4                 db  10h
.eh_frame:00000000000078E5                 db    0
.eh_frame:00000000000078E6                 db    0
.eh_frame:00000000000078E7                 db    0
.eh_frame:00000000000078E8                 db  70h ; p
.eh_frame:00000000000078E9                 db    4
.eh_frame:00000000000078EA                 db    0
.eh_frame:00000000000078EB                 db    0
.eh_frame:00000000000078EC                 db 0F4h
.eh_frame:00000000000078ED                 db 0CEh
.eh_frame:00000000000078EE                 db 0FFh
.eh_frame:00000000000078EF                 db 0FFh
.eh_frame:00000000000078F0                 db  11h
.eh_frame:00000000000078F1                 db    0
.eh_frame:00000000000078F2                 db    0
.eh_frame:00000000000078F3                 db    0
.eh_frame:00000000000078F4                 db    0
.eh_frame:00000000000078F5                 db    0
.eh_frame:00000000000078F6                 db    0
.eh_frame:00000000000078F7                 db    0
.eh_frame:00000000000078F8                 db  10h
.eh_frame:00000000000078F9                 db    0
.eh_frame:00000000000078FA                 db    0
.eh_frame:00000000000078FB                 db    0
.eh_frame:00000000000078FC                 db  84h
.eh_frame:00000000000078FD                 db    4
.eh_frame:00000000000078FE                 db    0
.eh_frame:00000000000078FF                 db    0
.eh_frame:0000000000007900                 db    0
.eh_frame:0000000000007901                 db 0CFh
.eh_frame:0000000000007902                 db 0FFh
.eh_frame:0000000000007903                 db 0FFh
.eh_frame:0000000000007904                 db  11h
.eh_frame:0000000000007905                 db    0
.eh_frame:0000000000007906                 db    0
.eh_frame:0000000000007907                 db    0
.eh_frame:0000000000007908                 db    0
.eh_frame:0000000000007909                 db    0
.eh_frame:000000000000790A                 db    0
.eh_frame:000000000000790B                 db    0
.eh_frame:000000000000790C                 db  10h
.eh_frame:000000000000790D                 db    0
.eh_frame:000000000000790E                 db    0
.eh_frame:000000000000790F                 db    0
.eh_frame:0000000000007910                 db  98h
.eh_frame:0000000000007911                 db    4
.eh_frame:0000000000007912                 db    0
.eh_frame:0000000000007913                 db    0
.eh_frame:0000000000007914                 db  0Ch
.eh_frame:0000000000007915                 db 0CFh
.eh_frame:0000000000007916                 db 0FFh
.eh_frame:0000000000007917                 db 0FFh
.eh_frame:0000000000007918                 db  35h ; 5
.eh_frame:0000000000007919                 db    0
.eh_frame:000000000000791A                 db    0
.eh_frame:000000000000791B                 db    0
.eh_frame:000000000000791C                 db    0
.eh_frame:000000000000791D                 db    0
.eh_frame:000000000000791E                 db    0
.eh_frame:000000000000791F                 db    0
.eh_frame:0000000000007920                 db  10h
.eh_frame:0000000000007921                 db    0
.eh_frame:0000000000007922                 db    0
.eh_frame:0000000000007923                 db    0
.eh_frame:0000000000007924                 db 0ACh
.eh_frame:0000000000007925                 db    4
.eh_frame:0000000000007926                 db    0
.eh_frame:0000000000007927                 db    0
.eh_frame:0000000000007928                 db  38h ; 8
.eh_frame:0000000000007929                 db 0CFh
.eh_frame:000000000000792A                 db 0FFh
.eh_frame:000000000000792B                 db 0FFh
.eh_frame:000000000000792C                 db  15h
.eh_frame:000000000000792D                 db    0
.eh_frame:000000000000792E                 db    0
.eh_frame:000000000000792F                 db    0
.eh_frame:0000000000007930                 db    0
.eh_frame:0000000000007931                 db    0
.eh_frame:0000000000007932                 db    0
.eh_frame:0000000000007933                 db    0
.eh_frame:0000000000007934                 db  10h
.eh_frame:0000000000007935                 db    0
.eh_frame:0000000000007936                 db    0
.eh_frame:0000000000007937                 db    0
.eh_frame:0000000000007938                 db 0C0h
.eh_frame:0000000000007939                 db    4
.eh_frame:000000000000793A                 db    0
.eh_frame:000000000000793B                 db    0
.eh_frame:000000000000793C                 db  44h ; D
.eh_frame:000000000000793D                 db 0CFh
.eh_frame:000000000000793E                 db 0FFh
.eh_frame:000000000000793F                 db 0FFh
.eh_frame:0000000000007940                 db  30h ; 0
.eh_frame:0000000000007941                 db    0
.eh_frame:0000000000007942                 db    0
.eh_frame:0000000000007943                 db    0
.eh_frame:0000000000007944                 db    0
.eh_frame:0000000000007945                 db  6Bh ; k
.eh_frame:0000000000007946                 db  0Eh
.eh_frame:0000000000007947                 db  10h
.eh_frame:0000000000007948                 db  50h ; P
.eh_frame:0000000000007949                 db    0
.eh_frame:000000000000794A                 db    0
.eh_frame:000000000000794B                 db    0
.eh_frame:000000000000794C                 db 0D4h
.eh_frame:000000000000794D                 db    4
.eh_frame:000000000000794E                 db    0
.eh_frame:000000000000794F                 db    0
.eh_frame:0000000000007950                 db  60h ; `
.eh_frame:0000000000007951                 db 0CFh
.eh_frame:0000000000007952                 db 0FFh
.eh_frame:0000000000007953                 db 0FFh
.eh_frame:0000000000007954                 db  74h ; t
.eh_frame:0000000000007955                 db    0
.eh_frame:0000000000007956                 db    0
.eh_frame:0000000000007957                 db    0
.eh_frame:0000000000007958                 db    0
.eh_frame:0000000000007959                 db  42h ; B
.eh_frame:000000000000795A                 db  0Eh
.eh_frame:000000000000795B                 db  10h
.eh_frame:000000000000795C                 db  8Fh
.eh_frame:000000000000795D                 db    2
.eh_frame:000000000000795E                 db  42h ; B
.eh_frame:000000000000795F                 db  0Eh
.eh_frame:0000000000007960                 db  18h
.eh_frame:0000000000007961                 db  8Eh
.eh_frame:0000000000007962                 db    3
.eh_frame:0000000000007963                 db  49h ; I
.eh_frame:0000000000007964                 db  0Eh
.eh_frame:0000000000007965                 db  20h
.eh_frame:0000000000007966                 db  8Dh
.eh_frame:0000000000007967                 db    4
.eh_frame:0000000000007968                 db  42h ; B
.eh_frame:0000000000007969                 db  0Eh
.eh_frame:000000000000796A                 db  28h ; (
.eh_frame:000000000000796B                 db  8Ch
.eh_frame:000000000000796C                 db    5
.eh_frame:000000000000796D                 db  44h ; D
.eh_frame:000000000000796E                 db  0Eh
.eh_frame:000000000000796F                 db  30h ; 0
.eh_frame:0000000000007970                 db  86h
.eh_frame:0000000000007971                 db    6
.eh_frame:0000000000007972                 db  41h ; A
.eh_frame:0000000000007973                 db  0Eh
.eh_frame:0000000000007974                 db  38h ; 8
.eh_frame:0000000000007975                 db  83h
.eh_frame:0000000000007976                 db    7
.eh_frame:0000000000007977                 db  4Dh ; M
.eh_frame:0000000000007978                 db  0Eh
.eh_frame:0000000000007979                 db  50h ; P
.eh_frame:000000000000797A                 db  5Fh ; _
.eh_frame:000000000000797B                 db  0Eh
.eh_frame:000000000000797C                 db  58h ; X
.eh_frame:000000000000797D                 db  47h ; G
.eh_frame:000000000000797E                 db  0Eh
.eh_frame:000000000000797F                 db  60h ; `
.eh_frame:0000000000007980                 db  46h ; F
.eh_frame:0000000000007981                 db  0Eh
.eh_frame:0000000000007982                 db  68h ; h
.eh_frame:0000000000007983                 db  44h ; D
.eh_frame:0000000000007984                 db  0Eh
.eh_frame:0000000000007985                 db  70h ; p
.eh_frame:0000000000007986                 db  58h ; X
.eh_frame:0000000000007987                 db  0Eh
.eh_frame:0000000000007988                 db  38h ; 8
.eh_frame:0000000000007989                 db  41h ; A
.eh_frame:000000000000798A                 db  0Eh
.eh_frame:000000000000798B                 db  30h ; 0
.eh_frame:000000000000798C                 db  41h ; A
.eh_frame:000000000000798D                 db  0Eh
.eh_frame:000000000000798E                 db  28h ; (
.eh_frame:000000000000798F                 db  42h ; B
.eh_frame:0000000000007990                 db  0Eh
.eh_frame:0000000000007991                 db  20h
.eh_frame:0000000000007992                 db  42h ; B
.eh_frame:0000000000007993                 db  0Eh
.eh_frame:0000000000007994                 db  18h
.eh_frame:0000000000007995                 db  42h ; B
.eh_frame:0000000000007996                 db  0Eh
.eh_frame:0000000000007997                 db  10h
.eh_frame:0000000000007998                 db  42h ; B
.eh_frame:0000000000007999                 db  0Eh
.eh_frame:000000000000799A                 db    8
.eh_frame:000000000000799B                 db    0
.eh_frame:000000000000799C                 db  68h ; h
.eh_frame:000000000000799D                 db    0
.eh_frame:000000000000799E                 db    0
.eh_frame:000000000000799F                 db    0
.eh_frame:00000000000079A0                 db  28h ; (
.eh_frame:00000000000079A1                 db    5
.eh_frame:00000000000079A2                 db    0
.eh_frame:00000000000079A3                 db    0
.eh_frame:00000000000079A4                 db  8Ch
.eh_frame:00000000000079A5                 db 0CFh
.eh_frame:00000000000079A6                 db 0FFh
.eh_frame:00000000000079A7                 db 0FFh
.eh_frame:00000000000079A8                 db 0E3h
.eh_frame:00000000000079A9                 db    0
.eh_frame:00000000000079AA                 db    0
.eh_frame:00000000000079AB                 db    0
.eh_frame:00000000000079AC                 db    0
.eh_frame:00000000000079AD                 db  42h ; B
.eh_frame:00000000000079AE                 db  0Eh
.eh_frame:00000000000079AF                 db  10h
.eh_frame:00000000000079B0                 db  8Fh
.eh_frame:00000000000079B1                 db    2
.eh_frame:00000000000079B2                 db  42h ; B
.eh_frame:00000000000079B3                 db  0Eh
.eh_frame:00000000000079B4                 db  18h
.eh_frame:00000000000079B5                 db  8Eh
.eh_frame:00000000000079B6                 db    3
.eh_frame:00000000000079B7                 db  49h ; I
.eh_frame:00000000000079B8                 db  0Eh
.eh_frame:00000000000079B9                 db  20h
.eh_frame:00000000000079BA                 db  8Dh
.eh_frame:00000000000079BB                 db    4
.eh_frame:00000000000079BC                 db  42h ; B
.eh_frame:00000000000079BD                 db  0Eh
.eh_frame:00000000000079BE                 db  28h ; (
.eh_frame:00000000000079BF                 db  8Ch
.eh_frame:00000000000079C0                 db    5
.eh_frame:00000000000079C1                 db  44h ; D
.eh_frame:00000000000079C2                 db  0Eh
.eh_frame:00000000000079C3                 db  30h ; 0
.eh_frame:00000000000079C4                 db  86h
.eh_frame:00000000000079C5                 db    6
.eh_frame:00000000000079C6                 db  41h ; A
.eh_frame:00000000000079C7                 db  0Eh
.eh_frame:00000000000079C8                 db  38h ; 8
.eh_frame:00000000000079C9                 db  83h
.eh_frame:00000000000079CA                 db    7
.eh_frame:00000000000079CB                 db  4Dh ; M
.eh_frame:00000000000079CC                 db  0Eh
.eh_frame:00000000000079CD                 db  70h ; p
.eh_frame:00000000000079CE                 db  65h ; e
.eh_frame:00000000000079CF                 db  0Eh
.eh_frame:00000000000079D0                 db  78h ; x
.eh_frame:00000000000079D1                 db  4Dh ; M
.eh_frame:00000000000079D2                 db  0Eh
.eh_frame:00000000000079D3                 db  80h
.eh_frame:00000000000079D4                 db    1
.eh_frame:00000000000079D5                 db  46h ; F
.eh_frame:00000000000079D6                 db  0Eh
.eh_frame:00000000000079D7                 db  88h
.eh_frame:00000000000079D8                 db    1
.eh_frame:00000000000079D9                 db  42h ; B
.eh_frame:00000000000079DA                 db  0Eh
.eh_frame:00000000000079DB                 db  90h
.eh_frame:00000000000079DC                 db    1
.eh_frame:00000000000079DD                 db  5Eh ; ^
.eh_frame:00000000000079DE                 db  0Eh
.eh_frame:00000000000079DF                 db  70h ; p
.eh_frame:00000000000079E0                 db  56h ; V
.eh_frame:00000000000079E1                 db  0Eh
.eh_frame:00000000000079E2                 db  78h ; x
.eh_frame:00000000000079E3                 db  43h ; C
.eh_frame:00000000000079E4                 db  0Eh
.eh_frame:00000000000079E5                 db  80h
.eh_frame:00000000000079E6                 db    1
.eh_frame:00000000000079E7                 db  43h ; C
.eh_frame:00000000000079E8                 db  0Eh
.eh_frame:00000000000079E9                 db  88h
.eh_frame:00000000000079EA                 db    1
.eh_frame:00000000000079EB                 db  56h ; V
.eh_frame:00000000000079EC                 db  0Eh
.eh_frame:00000000000079ED                 db  90h
.eh_frame:00000000000079EE                 db    1
.eh_frame:00000000000079EF                 db  52h ; R
.eh_frame:00000000000079F0                 db  0Eh
.eh_frame:00000000000079F1                 db  70h ; p
.eh_frame:00000000000079F2                 db  5Bh ; [
.eh_frame:00000000000079F3                 db  0Eh
.eh_frame:00000000000079F4                 db  38h ; 8
.eh_frame:00000000000079F5                 db  41h ; A
.eh_frame:00000000000079F6                 db  0Eh
.eh_frame:00000000000079F7                 db  30h ; 0
.eh_frame:00000000000079F8                 db  41h ; A
.eh_frame:00000000000079F9                 db  0Eh
.eh_frame:00000000000079FA                 db  28h ; (
.eh_frame:00000000000079FB                 db  42h ; B
.eh_frame:00000000000079FC                 db  0Eh
.eh_frame:00000000000079FD                 db  20h
.eh_frame:00000000000079FE                 db  42h ; B
.eh_frame:00000000000079FF                 db  0Eh
.eh_frame:0000000000007A00                 db  18h
.eh_frame:0000000000007A01                 db  42h ; B
.eh_frame:0000000000007A02                 db  0Eh
.eh_frame:0000000000007A03                 db  10h
.eh_frame:0000000000007A04                 db  42h ; B
.eh_frame:0000000000007A05                 db  0Eh
.eh_frame:0000000000007A06                 db    8
.eh_frame:0000000000007A07                 db    0
.eh_frame:0000000000007A08                 db  10h
.eh_frame:0000000000007A09                 db    0
.eh_frame:0000000000007A0A                 db    0
.eh_frame:0000000000007A0B                 db    0
.eh_frame:0000000000007A0C                 db  94h
.eh_frame:0000000000007A0D                 db    5
.eh_frame:0000000000007A0E                 db    0
.eh_frame:0000000000007A0F                 db    0
.eh_frame:0000000000007A10                 db  10h
.eh_frame:0000000000007A11                 db 0D0h
.eh_frame:0000000000007A12                 db 0FFh
.eh_frame:0000000000007A13                 db 0FFh
.eh_frame:0000000000007A14                 db  0Ah
.eh_frame:0000000000007A15                 db    0
.eh_frame:0000000000007A16                 db    0
.eh_frame:0000000000007A17                 db    0
.eh_frame:0000000000007A18                 db    0
.eh_frame:0000000000007A19                 db    0
.eh_frame:0000000000007A1A                 db    0
.eh_frame:0000000000007A1B                 db    0
.eh_frame:0000000000007A1C                 db  28h ; (
.eh_frame:0000000000007A1D                 db    0
.eh_frame:0000000000007A1E                 db    0
.eh_frame:0000000000007A1F                 db    0
.eh_frame:0000000000007A20                 db 0A8h
.eh_frame:0000000000007A21                 db    5
.eh_frame:0000000000007A22                 db    0
.eh_frame:0000000000007A23                 db    0
.eh_frame:0000000000007A24                 db  0Ch
.eh_frame:0000000000007A25                 db 0D0h
.eh_frame:0000000000007A26                 db 0FFh
.eh_frame:0000000000007A27                 db 0FFh
.eh_frame:0000000000007A28                 db  93h
.eh_frame:0000000000007A29                 db    0
.eh_frame:0000000000007A2A                 db    0
.eh_frame:0000000000007A2B                 db    0
.eh_frame:0000000000007A2C                 db    0
.eh_frame:0000000000007A2D                 db  48h ; H
.eh_frame:0000000000007A2E                 db  0Eh
.eh_frame:0000000000007A2F                 db  10h
.eh_frame:0000000000007A30                 db  8Ch
.eh_frame:0000000000007A31                 db    2
.eh_frame:0000000000007A32                 db  48h ; H
.eh_frame:0000000000007A33                 db  0Eh
.eh_frame:0000000000007A34                 db  18h
.eh_frame:0000000000007A35                 db  86h
.eh_frame:0000000000007A36                 db    3
.eh_frame:0000000000007A37                 db  41h ; A
.eh_frame:0000000000007A38                 db  0Eh
.eh_frame:0000000000007A39                 db  20h
.eh_frame:0000000000007A3A                 db  83h
.eh_frame:0000000000007A3B                 db    4
.eh_frame:0000000000007A3C                 db    2
.eh_frame:0000000000007A3D                 db  74h ; t
.eh_frame:0000000000007A3E                 db  0Eh
.eh_frame:0000000000007A3F                 db  18h
.eh_frame:0000000000007A40                 db  4Bh ; K
.eh_frame:0000000000007A41                 db  0Eh
.eh_frame:0000000000007A42                 db  10h
.eh_frame:0000000000007A43                 db  42h ; B
.eh_frame:0000000000007A44                 db  0Eh
.eh_frame:0000000000007A45                 db    8
.eh_frame:0000000000007A46                 db    0
.eh_frame:0000000000007A47                 db    0
.eh_frame:0000000000007A48                 db  10h
.eh_frame:0000000000007A49                 db    0
.eh_frame:0000000000007A4A                 db    0
.eh_frame:0000000000007A4B                 db    0
.eh_frame:0000000000007A4C                 db 0D4h
.eh_frame:0000000000007A4D                 db    5
.eh_frame:0000000000007A4E                 db    0
.eh_frame:0000000000007A4F                 db    0
.eh_frame:0000000000007A50                 db  80h
.eh_frame:0000000000007A51                 db 0D0h
.eh_frame:0000000000007A52                 db 0FFh
.eh_frame:0000000000007A53                 db 0FFh
.eh_frame:0000000000007A54                 db  13h
.eh_frame:0000000000007A55                 db    0
.eh_frame:0000000000007A56                 db    0
.eh_frame:0000000000007A57                 db    0
.eh_frame:0000000000007A58                 db    0
.eh_frame:0000000000007A59                 db    0
.eh_frame:0000000000007A5A                 db    0
.eh_frame:0000000000007A5B                 db    0
.eh_frame:0000000000007A5C                 db  10h
.eh_frame:0000000000007A5D                 db    0
.eh_frame:0000000000007A5E                 db    0
.eh_frame:0000000000007A5F                 db    0
.eh_frame:0000000000007A60                 db 0E8h
.eh_frame:0000000000007A61                 db    5
.eh_frame:0000000000007A62                 db    0
.eh_frame:0000000000007A63                 db    0
.eh_frame:0000000000007A64                 db  8Ch
.eh_frame:0000000000007A65                 db 0D0h
.eh_frame:0000000000007A66                 db 0FFh
.eh_frame:0000000000007A67                 db 0FFh
.eh_frame:0000000000007A68                 db  0Ch
.eh_frame:0000000000007A69                 db    0
.eh_frame:0000000000007A6A                 db    0
.eh_frame:0000000000007A6B                 db    0
.eh_frame:0000000000007A6C                 db    0
.eh_frame:0000000000007A6D                 db    0
.eh_frame:0000000000007A6E                 db    0
.eh_frame:0000000000007A6F                 db    0
.eh_frame:0000000000007A70                 db  10h
.eh_frame:0000000000007A71                 db    0
.eh_frame:0000000000007A72                 db    0
.eh_frame:0000000000007A73                 db    0
.eh_frame:0000000000007A74                 db 0FCh
.eh_frame:0000000000007A75                 db    5
.eh_frame:0000000000007A76                 db    0
.eh_frame:0000000000007A77                 db    0
.eh_frame:0000000000007A78                 db  88h
.eh_frame:0000000000007A79                 db 0D0h
.eh_frame:0000000000007A7A                 db 0FFh
.eh_frame:0000000000007A7B                 db 0FFh
.eh_frame:0000000000007A7C                 db  18h
.eh_frame:0000000000007A7D                 db    0
.eh_frame:0000000000007A7E                 db    0
.eh_frame:0000000000007A7F                 db    0
.eh_frame:0000000000007A80                 db    0
.eh_frame:0000000000007A81                 db    0
.eh_frame:0000000000007A82                 db    0
.eh_frame:0000000000007A83                 db    0
.eh_frame:0000000000007A84                 db  10h
.eh_frame:0000000000007A85                 db    0
.eh_frame:0000000000007A86                 db    0
.eh_frame:0000000000007A87                 db    0
.eh_frame:0000000000007A88                 db  10h
.eh_frame:0000000000007A89                 db    6
.eh_frame:0000000000007A8A                 db    0
.eh_frame:0000000000007A8B                 db    0
.eh_frame:0000000000007A8C                 db  94h
.eh_frame:0000000000007A8D                 db 0D0h
.eh_frame:0000000000007A8E                 db 0FFh
.eh_frame:0000000000007A8F                 db 0FFh
.eh_frame:0000000000007A90                 db  14h
.eh_frame:0000000000007A91                 db    0
.eh_frame:0000000000007A92                 db    0
.eh_frame:0000000000007A93                 db    0
.eh_frame:0000000000007A94                 db    0
.eh_frame:0000000000007A95                 db    0
.eh_frame:0000000000007A96                 db    0
.eh_frame:0000000000007A97                 db    0
.eh_frame:0000000000007A98                 db  18h
.eh_frame:0000000000007A99                 db    0
.eh_frame:0000000000007A9A                 db    0
.eh_frame:0000000000007A9B                 db    0
.eh_frame:0000000000007A9C                 db  24h ; $
.eh_frame:0000000000007A9D                 db    6
.eh_frame:0000000000007A9E                 db    0
.eh_frame:0000000000007A9F                 db    0
.eh_frame:0000000000007AA0                 db 0A0h
.eh_frame:0000000000007AA1                 db 0D0h
.eh_frame:0000000000007AA2                 db 0FFh
.eh_frame:0000000000007AA3                 db 0FFh
.eh_frame:0000000000007AA4                 db  8Eh
.eh_frame:0000000000007AA5                 db    0
.eh_frame:0000000000007AA6                 db    0
.eh_frame:0000000000007AA7                 db    0
.eh_frame:0000000000007AA8                 db    0
.eh_frame:0000000000007AA9                 db  44h ; D
.eh_frame:0000000000007AAA                 db  0Eh
.eh_frame:0000000000007AAB                 db  50h ; P
.eh_frame:0000000000007AAC                 db    2
.eh_frame:0000000000007AAD                 db  7Fh ; 
.eh_frame:0000000000007AAE                 db  0Ah
.eh_frame:0000000000007AAF                 db  0Eh
.eh_frame:0000000000007AB0                 db    8
.eh_frame:0000000000007AB1                 db  41h ; A
.eh_frame:0000000000007AB2                 db  0Bh
.eh_frame:0000000000007AB3                 db    0
.eh_frame:0000000000007AB4                 db  18h
.eh_frame:0000000000007AB5                 db    0
.eh_frame:0000000000007AB6                 db    0
.eh_frame:0000000000007AB7                 db    0
.eh_frame:0000000000007AB8                 db  40h ; @
.eh_frame:0000000000007AB9                 db    6
.eh_frame:0000000000007ABA                 db    0
.eh_frame:0000000000007ABB                 db    0
.eh_frame:0000000000007ABC                 db  14h
.eh_frame:0000000000007ABD                 db 0D1h
.eh_frame:0000000000007ABE                 db 0FFh
.eh_frame:0000000000007ABF                 db 0FFh
.eh_frame:0000000000007AC0                 db  8Ah
.eh_frame:0000000000007AC1                 db    0
.eh_frame:0000000000007AC2                 db    0
.eh_frame:0000000000007AC3                 db    0
.eh_frame:0000000000007AC4                 db    0
.eh_frame:0000000000007AC5                 db  44h ; D
.eh_frame:0000000000007AC6                 db  0Eh
.eh_frame:0000000000007AC7                 db  50h ; P
.eh_frame:0000000000007AC8                 db    2
.eh_frame:0000000000007AC9                 db  7Bh ; {
.eh_frame:0000000000007ACA                 db  0Ah
.eh_frame:0000000000007ACB                 db  0Eh
.eh_frame:0000000000007ACC                 db    8
.eh_frame:0000000000007ACD                 db  41h ; A
.eh_frame:0000000000007ACE                 db  0Bh
.eh_frame:0000000000007ACF                 db    0
.eh_frame:0000000000007AD0                 db  10h
.eh_frame:0000000000007AD1                 db    0
.eh_frame:0000000000007AD2                 db    0
.eh_frame:0000000000007AD3                 db    0
.eh_frame:0000000000007AD4                 db  5Ch ; \
.eh_frame:0000000000007AD5                 db    6
.eh_frame:0000000000007AD6                 db    0
.eh_frame:0000000000007AD7                 db    0
.eh_frame:0000000000007AD8                 db  88h
.eh_frame:0000000000007AD9                 db 0D1h
.eh_frame:0000000000007ADA                 db 0FFh
.eh_frame:0000000000007ADB                 db 0FFh
.eh_frame:0000000000007ADC                 db  0Ch
.eh_frame:0000000000007ADD                 db    0
.eh_frame:0000000000007ADE                 db    0
.eh_frame:0000000000007ADF                 db    0
.eh_frame:0000000000007AE0                 db    0
.eh_frame:0000000000007AE1                 db    0
.eh_frame:0000000000007AE2                 db    0
.eh_frame:0000000000007AE3                 db    0
.eh_frame:0000000000007AE4                 db  10h
.eh_frame:0000000000007AE5                 db    0
.eh_frame:0000000000007AE6                 db    0
.eh_frame:0000000000007AE7                 db    0
.eh_frame:0000000000007AE8                 db  70h ; p
.eh_frame:0000000000007AE9                 db    6
.eh_frame:0000000000007AEA                 db    0
.eh_frame:0000000000007AEB                 db    0
.eh_frame:0000000000007AEC                 db  84h
.eh_frame:0000000000007AED                 db 0D1h
.eh_frame:0000000000007AEE                 db 0FFh
.eh_frame:0000000000007AEF                 db 0FFh
.eh_frame:0000000000007AF0                 db  0Fh
.eh_frame:0000000000007AF1                 db    0
.eh_frame:0000000000007AF2                 db    0
.eh_frame:0000000000007AF3                 db    0
.eh_frame:0000000000007AF4                 db    0
.eh_frame:0000000000007AF5                 db    0
.eh_frame:0000000000007AF6                 db    0
.eh_frame:0000000000007AF7                 db    0
.eh_frame:0000000000007AF8                 db  18h
.eh_frame:0000000000007AF9                 db    0
.eh_frame:0000000000007AFA                 db    0
.eh_frame:0000000000007AFB                 db    0
.eh_frame:0000000000007AFC                 db  84h
.eh_frame:0000000000007AFD                 db    6
.eh_frame:0000000000007AFE                 db    0
.eh_frame:0000000000007AFF                 db    0
.eh_frame:0000000000007B00                 db  80h
.eh_frame:0000000000007B01                 db 0D1h
.eh_frame:0000000000007B02                 db 0FFh
.eh_frame:0000000000007B03                 db 0FFh
.eh_frame:0000000000007B04                 db  98h
.eh_frame:0000000000007B05                 db    0
.eh_frame:0000000000007B06                 db    0
.eh_frame:0000000000007B07                 db    0
.eh_frame:0000000000007B08                 db    0
.eh_frame:0000000000007B09                 db  44h ; D
.eh_frame:0000000000007B0A                 db  0Eh
.eh_frame:0000000000007B0B                 db  50h ; P
.eh_frame:0000000000007B0C                 db    2
.eh_frame:0000000000007B0D                 db  8Eh
.eh_frame:0000000000007B0E                 db  0Ah
.eh_frame:0000000000007B0F                 db  0Eh
.eh_frame:0000000000007B10                 db    8
.eh_frame:0000000000007B11                 db  41h ; A
.eh_frame:0000000000007B12                 db  0Bh
.eh_frame:0000000000007B13                 db    0
.eh_frame:0000000000007B14                 db  10h
.eh_frame:0000000000007B15                 db    0
.eh_frame:0000000000007B16                 db    0
.eh_frame:0000000000007B17                 db    0
.eh_frame:0000000000007B18                 db 0A0h
.eh_frame:0000000000007B19                 db    6
.eh_frame:0000000000007B1A                 db    0
.eh_frame:0000000000007B1B                 db    0
.eh_frame:0000000000007B1C                 db    4
.eh_frame:0000000000007B1D                 db 0D2h
.eh_frame:0000000000007B1E                 db 0FFh
.eh_frame:0000000000007B1F                 db 0FFh
.eh_frame:0000000000007B20                 db  10h
.eh_frame:0000000000007B21                 db    0
.eh_frame:0000000000007B22                 db    0
.eh_frame:0000000000007B23                 db    0
.eh_frame:0000000000007B24                 db    0
.eh_frame:0000000000007B25                 db    0
.eh_frame:0000000000007B26                 db    0
.eh_frame:0000000000007B27                 db    0
.eh_frame:0000000000007B28                 db  10h
.eh_frame:0000000000007B29                 db    0
.eh_frame:0000000000007B2A                 db    0
.eh_frame:0000000000007B2B                 db    0
.eh_frame:0000000000007B2C                 db 0B4h
.eh_frame:0000000000007B2D                 db    6
.eh_frame:0000000000007B2E                 db    0
.eh_frame:0000000000007B2F                 db    0
.eh_frame:0000000000007B30                 db    0
.eh_frame:0000000000007B31                 db 0D2h
.eh_frame:0000000000007B32                 db 0FFh
.eh_frame:0000000000007B33                 db 0FFh
.eh_frame:0000000000007B34                 db  11h
.eh_frame:0000000000007B35                 db    0
.eh_frame:0000000000007B36                 db    0
.eh_frame:0000000000007B37                 db    0
.eh_frame:0000000000007B38                 db    0
.eh_frame:0000000000007B39                 db    0
.eh_frame:0000000000007B3A                 db    0
.eh_frame:0000000000007B3B                 db    0
.eh_frame:0000000000007B3C                 db  10h
.eh_frame:0000000000007B3D                 db    0
.eh_frame:0000000000007B3E                 db    0
.eh_frame:0000000000007B3F                 db    0
.eh_frame:0000000000007B40                 db 0C8h
.eh_frame:0000000000007B41                 db    6
.eh_frame:0000000000007B42                 db    0
.eh_frame:0000000000007B43                 db    0
.eh_frame:0000000000007B44                 db  0Ch
.eh_frame:0000000000007B45                 db 0D2h
.eh_frame:0000000000007B46                 db 0FFh
.eh_frame:0000000000007B47                 db 0FFh
.eh_frame:0000000000007B48                 db  0Ah
.eh_frame:0000000000007B49                 db    0
.eh_frame:0000000000007B4A                 db    0
.eh_frame:0000000000007B4B                 db    0
.eh_frame:0000000000007B4C                 db    0
.eh_frame:0000000000007B4D                 db    0
.eh_frame:0000000000007B4E                 db    0
.eh_frame:0000000000007B4F                 db    0
.eh_frame:0000000000007B50                 db  18h
.eh_frame:0000000000007B51                 db    0
.eh_frame:0000000000007B52                 db    0
.eh_frame:0000000000007B53                 db    0
.eh_frame:0000000000007B54                 db 0DCh
.eh_frame:0000000000007B55                 db    6
.eh_frame:0000000000007B56                 db    0
.eh_frame:0000000000007B57                 db    0
.eh_frame:0000000000007B58                 db    8
.eh_frame:0000000000007B59                 db 0D2h
.eh_frame:0000000000007B5A                 db 0FFh
.eh_frame:0000000000007B5B                 db 0FFh
.eh_frame:0000000000007B5C                 db  8Eh
.eh_frame:0000000000007B5D                 db    0
.eh_frame:0000000000007B5E                 db    0
.eh_frame:0000000000007B5F                 db    0
.eh_frame:0000000000007B60                 db    0
.eh_frame:0000000000007B61                 db  44h ; D
.eh_frame:0000000000007B62                 db  0Eh
.eh_frame:0000000000007B63                 db  50h ; P
.eh_frame:0000000000007B64                 db    2
.eh_frame:0000000000007B65                 db  7Fh ; 
.eh_frame:0000000000007B66                 db  0Ah
.eh_frame:0000000000007B67                 db  0Eh
.eh_frame:0000000000007B68                 db    8
.eh_frame:0000000000007B69                 db  41h ; A
.eh_frame:0000000000007B6A                 db  0Bh
.eh_frame:0000000000007B6B                 db    0
.eh_frame:0000000000007B6C                 db  18h
.eh_frame:0000000000007B6D                 db    0
.eh_frame:0000000000007B6E                 db    0
.eh_frame:0000000000007B6F                 db    0
.eh_frame:0000000000007B70                 db 0F8h
.eh_frame:0000000000007B71                 db    6
.eh_frame:0000000000007B72                 db    0
.eh_frame:0000000000007B73                 db    0
.eh_frame:0000000000007B74                 db  7Ch ; |
.eh_frame:0000000000007B75                 db 0D2h
.eh_frame:0000000000007B76                 db 0FFh
.eh_frame:0000000000007B77                 db 0FFh
.eh_frame:0000000000007B78                 db  91h
.eh_frame:0000000000007B79                 db    0
.eh_frame:0000000000007B7A                 db    0
.eh_frame:0000000000007B7B                 db    0
.eh_frame:0000000000007B7C                 db    0
.eh_frame:0000000000007B7D                 db  44h ; D
.eh_frame:0000000000007B7E                 db  0Eh
.eh_frame:0000000000007B7F                 db  50h ; P
.eh_frame:0000000000007B80                 db    2
.eh_frame:0000000000007B81                 db  82h
.eh_frame:0000000000007B82                 db  0Ah
.eh_frame:0000000000007B83                 db  0Eh
.eh_frame:0000000000007B84                 db    8
.eh_frame:0000000000007B85                 db  41h ; A
.eh_frame:0000000000007B86                 db  0Bh
.eh_frame:0000000000007B87                 db    0
.eh_frame:0000000000007B88                 db  10h
.eh_frame:0000000000007B89                 db    0
.eh_frame:0000000000007B8A                 db    0
.eh_frame:0000000000007B8B                 db    0
.eh_frame:0000000000007B8C                 db  14h
.eh_frame:0000000000007B8D                 db    7
.eh_frame:0000000000007B8E                 db    0
.eh_frame:0000000000007B8F                 db    0
.eh_frame:0000000000007B90                 db    0
.eh_frame:0000000000007B91                 db 0D3h
.eh_frame:0000000000007B92                 db 0FFh
.eh_frame:0000000000007B93                 db 0FFh
.eh_frame:0000000000007B94                 db  0Ch
.eh_frame:0000000000007B95                 db    0
.eh_frame:0000000000007B96                 db    0
.eh_frame:0000000000007B97                 db    0
.eh_frame:0000000000007B98                 db    0
.eh_frame:0000000000007B99                 db    0
.eh_frame:0000000000007B9A                 db    0
.eh_frame:0000000000007B9B                 db    0
.eh_frame:0000000000007B9C                 db  10h
.eh_frame:0000000000007B9D                 db    0
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db  28h ; (
.eh_frame:0000000000007BA1                 db    7
.eh_frame:0000000000007BA2                 db    0
.eh_frame:0000000000007BA3                 db    0
.eh_frame:0000000000007BA4                 db 0FCh
.eh_frame:0000000000007BA5                 db 0D2h
.eh_frame:0000000000007BA6                 db 0FFh
.eh_frame:0000000000007BA7                 db 0FFh
.eh_frame:0000000000007BA8                 db  17h
.eh_frame:0000000000007BA9                 db    0
.eh_frame:0000000000007BAA                 db    0
.eh_frame:0000000000007BAB                 db    0
.eh_frame:0000000000007BAC                 db    0
.eh_frame:0000000000007BAD                 db    0
.eh_frame:0000000000007BAE                 db    0
.eh_frame:0000000000007BAF                 db    0
.eh_frame:0000000000007BB0                 db  10h
.eh_frame:0000000000007BB1                 db    0
.eh_frame:0000000000007BB2                 db    0
.eh_frame:0000000000007BB3                 db    0
.eh_frame:0000000000007BB4                 db  3Ch ; <
.eh_frame:0000000000007BB5                 db    7
.eh_frame:0000000000007BB6                 db    0
.eh_frame:0000000000007BB7                 db    0
.eh_frame:0000000000007BB8                 db    8
.eh_frame:0000000000007BB9                 db 0D3h
.eh_frame:0000000000007BBA                 db 0FFh
.eh_frame:0000000000007BBB                 db 0FFh
.eh_frame:0000000000007BBC                 db  13h
.eh_frame:0000000000007BBD                 db    0
.eh_frame:0000000000007BBE                 db    0
.eh_frame:0000000000007BBF                 db    0
.eh_frame:0000000000007BC0                 db    0
.eh_frame:0000000000007BC1                 db    0
.eh_frame:0000000000007BC2                 db    0
.eh_frame:0000000000007BC3                 db    0
.eh_frame:0000000000007BC4                 db  10h
.eh_frame:0000000000007BC5                 db    0
.eh_frame:0000000000007BC6                 db    0
.eh_frame:0000000000007BC7                 db    0
.eh_frame:0000000000007BC8                 db  50h ; P
.eh_frame:0000000000007BC9                 db    7
.eh_frame:0000000000007BCA                 db    0
.eh_frame:0000000000007BCB                 db    0
.eh_frame:0000000000007BCC                 db  14h
.eh_frame:0000000000007BCD                 db 0D3h
.eh_frame:0000000000007BCE                 db 0FFh
.eh_frame:0000000000007BCF                 db 0FFh
.eh_frame:0000000000007BD0                 db  0Ch
.eh_frame:0000000000007BD1                 db    0
.eh_frame:0000000000007BD2                 db    0
.eh_frame:0000000000007BD3                 db    0
.eh_frame:0000000000007BD4                 db    0
.eh_frame:0000000000007BD5                 db    0
.eh_frame:0000000000007BD6                 db    0
.eh_frame:0000000000007BD7                 db    0
.eh_frame:0000000000007BD8                 db  10h
.eh_frame:0000000000007BD9                 db    0
.eh_frame:0000000000007BDA                 db    0
.eh_frame:0000000000007BDB                 db    0
.eh_frame:0000000000007BDC                 db  64h ; d
.eh_frame:0000000000007BDD                 db    7
.eh_frame:0000000000007BDE                 db    0
.eh_frame:0000000000007BDF                 db    0
.eh_frame:0000000000007BE0                 db  10h
.eh_frame:0000000000007BE1                 db 0D3h
.eh_frame:0000000000007BE2                 db 0FFh
.eh_frame:0000000000007BE3                 db 0FFh
.eh_frame:0000000000007BE4                 db  14h
.eh_frame:0000000000007BE5                 db    0
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db    0
.eh_frame:0000000000007BE9                 db    0
.eh_frame:0000000000007BEA                 db    0
.eh_frame:0000000000007BEB                 db    0
.eh_frame:0000000000007BEC                 db  10h
.eh_frame:0000000000007BED                 db    0
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db  78h ; x
.eh_frame:0000000000007BF1                 db    7
.eh_frame:0000000000007BF2                 db    0
.eh_frame:0000000000007BF3                 db    0
.eh_frame:0000000000007BF4                 db  1Ch
.eh_frame:0000000000007BF5                 db 0D3h
.eh_frame:0000000000007BF6                 db 0FFh
.eh_frame:0000000000007BF7                 db 0FFh
.eh_frame:0000000000007BF8                 db  13h
.eh_frame:0000000000007BF9                 db    0
.eh_frame:0000000000007BFA                 db    0
.eh_frame:0000000000007BFB                 db    0
.eh_frame:0000000000007BFC                 db    0
.eh_frame:0000000000007BFD                 db    0
.eh_frame:0000000000007BFE                 db    0
.eh_frame:0000000000007BFF                 db    0
.eh_frame:0000000000007C00                 db  14h
.eh_frame:0000000000007C01                 db    0
.eh_frame:0000000000007C02                 db    0
.eh_frame:0000000000007C03                 db    0
.eh_frame:0000000000007C04                 db  8Ch
.eh_frame:0000000000007C05                 db    7
.eh_frame:0000000000007C06                 db    0
.eh_frame:0000000000007C07                 db    0
.eh_frame:0000000000007C08                 db  28h ; (
.eh_frame:0000000000007C09                 db 0D3h
.eh_frame:0000000000007C0A                 db 0FFh
.eh_frame:0000000000007C0B                 db 0FFh
.eh_frame:0000000000007C0C                 db  18h
.eh_frame:0000000000007C0D                 db    0
.eh_frame:0000000000007C0E                 db    0
.eh_frame:0000000000007C0F                 db    0
.eh_frame:0000000000007C10                 db    0
.eh_frame:0000000000007C11                 db    0
.eh_frame:0000000000007C12                 db    0
.eh_frame:0000000000007C13                 db    0
.eh_frame:0000000000007C14                 db    0
.eh_frame:0000000000007C15                 db    0
.eh_frame:0000000000007C16                 db    0
.eh_frame:0000000000007C17                 db    0
.eh_frame:0000000000007C18                 db  34h ; 4
.eh_frame:0000000000007C19                 db    0
.eh_frame:0000000000007C1A                 db    0
.eh_frame:0000000000007C1B                 db    0
.eh_frame:0000000000007C1C                 db 0A4h
.eh_frame:0000000000007C1D                 db    7
.eh_frame:0000000000007C1E                 db    0
.eh_frame:0000000000007C1F                 db    0
.eh_frame:0000000000007C20                 db  30h ; 0
.eh_frame:0000000000007C21                 db 0D3h
.eh_frame:0000000000007C22                 db 0FFh
.eh_frame:0000000000007C23                 db 0FFh
.eh_frame:0000000000007C24                 db  5Eh ; ^
.eh_frame:0000000000007C25                 db    0
.eh_frame:0000000000007C26                 db    0
.eh_frame:0000000000007C27                 db    0
.eh_frame:0000000000007C28                 db    0
.eh_frame:0000000000007C29                 db  42h ; B
.eh_frame:0000000000007C2A                 db  0Eh
.eh_frame:0000000000007C2B                 db  10h
.eh_frame:0000000000007C2C                 db  8Dh
.eh_frame:0000000000007C2D                 db    2
.eh_frame:0000000000007C2E                 db  42h ; B
.eh_frame:0000000000007C2F                 db  0Eh
.eh_frame:0000000000007C30                 db  18h
.eh_frame:0000000000007C31                 db  8Ch
.eh_frame:0000000000007C32                 db    3
.eh_frame:0000000000007C33                 db  44h ; D
.eh_frame:0000000000007C34                 db  0Eh
.eh_frame:0000000000007C35                 db  20h
.eh_frame:0000000000007C36                 db  86h
.eh_frame:0000000000007C37                 db    4
.eh_frame:0000000000007C38                 db  41h ; A
.eh_frame:0000000000007C39                 db  0Eh
.eh_frame:0000000000007C3A                 db  28h ; (
.eh_frame:0000000000007C3B                 db  83h
.eh_frame:0000000000007C3C                 db    5
.eh_frame:0000000000007C3D                 db  4Ah ; J
.eh_frame:0000000000007C3E                 db  0Eh
.eh_frame:0000000000007C3F                 db  30h ; 0
.eh_frame:0000000000007C40                 db    2
.eh_frame:0000000000007C41                 db  41h ; A
.eh_frame:0000000000007C42                 db  0Eh
.eh_frame:0000000000007C43                 db  28h ; (
.eh_frame:0000000000007C44                 db  44h ; D
.eh_frame:0000000000007C45                 db  0Eh
.eh_frame:0000000000007C46                 db  20h
.eh_frame:0000000000007C47                 db  41h ; A
.eh_frame:0000000000007C48                 db  0Eh
.eh_frame:0000000000007C49                 db  18h
.eh_frame:0000000000007C4A                 db  42h ; B
.eh_frame:0000000000007C4B                 db  0Eh
.eh_frame:0000000000007C4C                 db  10h
.eh_frame:0000000000007C4D                 db  42h ; B
.eh_frame:0000000000007C4E                 db  0Eh
.eh_frame:0000000000007C4F                 db    8
.eh_frame:0000000000007C50                 db  10h
.eh_frame:0000000000007C51                 db    1
.eh_frame:0000000000007C52                 db    0
.eh_frame:0000000000007C53                 db    0
.eh_frame:0000000000007C54                 db 0DCh
.eh_frame:0000000000007C55                 db    7
.eh_frame:0000000000007C56                 db    0
.eh_frame:0000000000007C57                 db    0
.eh_frame:0000000000007C58                 db  58h ; X
.eh_frame:0000000000007C59                 db 0D3h
.eh_frame:0000000000007C5A                 db 0FFh
.eh_frame:0000000000007C5B                 db 0FFh
.eh_frame:0000000000007C5C                 db  17h
.eh_frame:0000000000007C5D                 db    4
.eh_frame:0000000000007C5E                 db    0
.eh_frame:0000000000007C5F                 db    0
.eh_frame:0000000000007C60                 db    0
.eh_frame:0000000000007C61                 db  42h ; B
.eh_frame:0000000000007C62                 db  0Eh
.eh_frame:0000000000007C63                 db  10h
.eh_frame:0000000000007C64                 db  8Fh
.eh_frame:0000000000007C65                 db    2
.eh_frame:0000000000007C66                 db  42h ; B
.eh_frame:0000000000007C67                 db  0Eh
.eh_frame:0000000000007C68                 db  18h
.eh_frame:0000000000007C69                 db  8Eh
.eh_frame:0000000000007C6A                 db    3
.eh_frame:0000000000007C6B                 db  42h ; B
.eh_frame:0000000000007C6C                 db  0Eh
.eh_frame:0000000000007C6D                 db  20h
.eh_frame:0000000000007C6E                 db  8Dh
.eh_frame:0000000000007C6F                 db    4
.eh_frame:0000000000007C70                 db  42h ; B
.eh_frame:0000000000007C71                 db  0Eh
.eh_frame:0000000000007C72                 db  28h ; (
.eh_frame:0000000000007C73                 db  8Ch
.eh_frame:0000000000007C74                 db    5
.eh_frame:0000000000007C75                 db  44h ; D
.eh_frame:0000000000007C76                 db  0Eh
.eh_frame:0000000000007C77                 db  30h ; 0
.eh_frame:0000000000007C78                 db  86h
.eh_frame:0000000000007C79                 db    6
.eh_frame:0000000000007C7A                 db  41h ; A
.eh_frame:0000000000007C7B                 db  0Eh
.eh_frame:0000000000007C7C                 db  38h ; 8
.eh_frame:0000000000007C7D                 db  83h
.eh_frame:0000000000007C7E                 db    7
.eh_frame:0000000000007C7F                 db  4Ah ; J
.eh_frame:0000000000007C80                 db  0Eh
.eh_frame:0000000000007C81                 db  60h ; `
.eh_frame:0000000000007C82                 db    2
.eh_frame:0000000000007C83                 db 0DDh
.eh_frame:0000000000007C84                 db  0Eh
.eh_frame:0000000000007C85                 db  68h ; h
.eh_frame:0000000000007C86                 db  57h ; W
.eh_frame:0000000000007C87                 db  0Eh
.eh_frame:0000000000007C88                 db  70h ; p
.eh_frame:0000000000007C89                 db  42h ; B
.eh_frame:0000000000007C8A                 db  0Eh
.eh_frame:0000000000007C8B                 db  78h ; x
.eh_frame:0000000000007C8C                 db  42h ; B
.eh_frame:0000000000007C8D                 db  0Eh
.eh_frame:0000000000007C8E                 db  80h
.eh_frame:0000000000007C8F                 db    1
.eh_frame:0000000000007C90                 db  42h ; B
.eh_frame:0000000000007C91                 db  0Eh
.eh_frame:0000000000007C92                 db  88h
.eh_frame:0000000000007C93                 db    1
.eh_frame:0000000000007C94                 db  42h ; B
.eh_frame:0000000000007C95                 db  0Eh
.eh_frame:0000000000007C96                 db  90h
.eh_frame:0000000000007C97                 db    1
.eh_frame:0000000000007C98                 db  53h ; S
.eh_frame:0000000000007C99                 db  0Eh
.eh_frame:0000000000007C9A                 db  60h ; `
.eh_frame:0000000000007C9B                 db  44h ; D
.eh_frame:0000000000007C9C                 db  0Ah
.eh_frame:0000000000007C9D                 db  0Eh
.eh_frame:0000000000007C9E                 db  38h ; 8
.eh_frame:0000000000007C9F                 db  41h ; A
.eh_frame:0000000000007CA0                 db  0Eh
.eh_frame:0000000000007CA1                 db  30h ; 0
.eh_frame:0000000000007CA2                 db  41h ; A
.eh_frame:0000000000007CA3                 db  0Eh
.eh_frame:0000000000007CA4                 db  28h ; (
.eh_frame:0000000000007CA5                 db  42h ; B
.eh_frame:0000000000007CA6                 db  0Eh
.eh_frame:0000000000007CA7                 db  20h
.eh_frame:0000000000007CA8                 db  42h ; B
.eh_frame:0000000000007CA9                 db  0Eh
.eh_frame:0000000000007CAA                 db  18h
.eh_frame:0000000000007CAB                 db  42h ; B
.eh_frame:0000000000007CAC                 db  0Eh
.eh_frame:0000000000007CAD                 db  10h
.eh_frame:0000000000007CAE                 db  42h ; B
.eh_frame:0000000000007CAF                 db  0Eh
.eh_frame:0000000000007CB0                 db    8
.eh_frame:0000000000007CB1                 db  44h ; D
.eh_frame:0000000000007CB2                 db  0Bh
.eh_frame:0000000000007CB3                 db    2
.eh_frame:0000000000007CB4                 db  78h ; x
.eh_frame:0000000000007CB5                 db  0Ah
.eh_frame:0000000000007CB6                 db  0Eh
.eh_frame:0000000000007CB7                 db  68h ; h
.eh_frame:0000000000007CB8                 db  48h ; H
.eh_frame:0000000000007CB9                 db  0Bh
.eh_frame:0000000000007CBA                 db  5Ah ; Z
.eh_frame:0000000000007CBB                 db  0Ah
.eh_frame:0000000000007CBC                 db  0Eh
.eh_frame:0000000000007CBD                 db  38h ; 8
.eh_frame:0000000000007CBE                 db  47h ; G
.eh_frame:0000000000007CBF                 db  0Eh
.eh_frame:0000000000007CC0                 db  30h ; 0
.eh_frame:0000000000007CC1                 db  41h ; A
.eh_frame:0000000000007CC2                 db  0Eh
.eh_frame:0000000000007CC3                 db  28h ; (
.eh_frame:0000000000007CC4                 db  42h ; B
.eh_frame:0000000000007CC5                 db  0Eh
.eh_frame:0000000000007CC6                 db  20h
.eh_frame:0000000000007CC7                 db  42h ; B
.eh_frame:0000000000007CC8                 db  0Eh
.eh_frame:0000000000007CC9                 db  18h
.eh_frame:0000000000007CCA                 db  42h ; B
.eh_frame:0000000000007CCB                 db  0Eh
.eh_frame:0000000000007CCC                 db  10h
.eh_frame:0000000000007CCD                 db  42h ; B
.eh_frame:0000000000007CCE                 db  0Eh
.eh_frame:0000000000007CCF                 db    8
.eh_frame:0000000000007CD0                 db  56h ; V
.eh_frame:0000000000007CD1                 db  0Bh
.eh_frame:0000000000007CD2                 db  5Eh ; ^
.eh_frame:0000000000007CD3                 db  0Ah
.eh_frame:0000000000007CD4                 db  0Eh
.eh_frame:0000000000007CD5                 db  38h ; 8
.eh_frame:0000000000007CD6                 db  52h ; R
.eh_frame:0000000000007CD7                 db  0Eh
.eh_frame:0000000000007CD8                 db  30h ; 0
.eh_frame:0000000000007CD9                 db  41h ; A
.eh_frame:0000000000007CDA                 db  0Eh
.eh_frame:0000000000007CDB                 db  28h ; (
.eh_frame:0000000000007CDC                 db  42h ; B
.eh_frame:0000000000007CDD                 db  0Eh
.eh_frame:0000000000007CDE                 db  20h
.eh_frame:0000000000007CDF                 db  42h ; B
.eh_frame:0000000000007CE0                 db  0Eh
.eh_frame:0000000000007CE1                 db  18h
.eh_frame:0000000000007CE2                 db  42h ; B
.eh_frame:0000000000007CE3                 db  0Eh
.eh_frame:0000000000007CE4                 db  10h
.eh_frame:0000000000007CE5                 db  42h ; B
.eh_frame:0000000000007CE6                 db  0Eh
.eh_frame:0000000000007CE7                 db    8
.eh_frame:0000000000007CE8                 db  4Fh ; O
.eh_frame:0000000000007CE9                 db  0Bh
.eh_frame:0000000000007CEA                 db  62h ; b
.eh_frame:0000000000007CEB                 db  0Ah
.eh_frame:0000000000007CEC                 db  0Eh
.eh_frame:0000000000007CED                 db  38h ; 8
.eh_frame:0000000000007CEE                 db  50h ; P
.eh_frame:0000000000007CEF                 db  0Eh
.eh_frame:0000000000007CF0                 db  30h ; 0
.eh_frame:0000000000007CF1                 db  41h ; A
.eh_frame:0000000000007CF2                 db  0Eh
.eh_frame:0000000000007CF3                 db  28h ; (
.eh_frame:0000000000007CF4                 db  42h ; B
.eh_frame:0000000000007CF5                 db  0Eh
.eh_frame:0000000000007CF6                 db  20h
.eh_frame:0000000000007CF7                 db  42h ; B
.eh_frame:0000000000007CF8                 db  0Eh
.eh_frame:0000000000007CF9                 db  18h
.eh_frame:0000000000007CFA                 db  42h ; B
.eh_frame:0000000000007CFB                 db  0Eh
.eh_frame:0000000000007CFC                 db  10h
.eh_frame:0000000000007CFD                 db  42h ; B
.eh_frame:0000000000007CFE                 db  0Eh
.eh_frame:0000000000007CFF                 db    8
.eh_frame:0000000000007D00                 db  55h ; U
.eh_frame:0000000000007D01                 db  0Bh
.eh_frame:0000000000007D02                 db  66h ; f
.eh_frame:0000000000007D03                 db  0Eh
.eh_frame:0000000000007D04                 db  68h ; h
.eh_frame:0000000000007D05                 db  42h ; B
.eh_frame:0000000000007D06                 db  0Eh
.eh_frame:0000000000007D07                 db  70h ; p
.eh_frame:0000000000007D08                 db  5Ch ; \
.eh_frame:0000000000007D09                 db  0Eh
.eh_frame:0000000000007D0A                 db  68h ; h
.eh_frame:0000000000007D0B                 db  41h ; A
.eh_frame:0000000000007D0C                 db  0Eh
.eh_frame:0000000000007D0D                 db  60h ; `
.eh_frame:0000000000007D0E                 db  44h ; D
.eh_frame:0000000000007D0F                 db  0Ah
.eh_frame:0000000000007D10                 db  0Eh
.eh_frame:0000000000007D11                 db  38h ; 8
.eh_frame:0000000000007D12                 db  41h ; A
.eh_frame:0000000000007D13                 db  0Eh
.eh_frame:0000000000007D14                 db  30h ; 0
.eh_frame:0000000000007D15                 db  41h ; A
.eh_frame:0000000000007D16                 db  0Eh
.eh_frame:0000000000007D17                 db  28h ; (
.eh_frame:0000000000007D18                 db  42h ; B
.eh_frame:0000000000007D19                 db  0Eh
.eh_frame:0000000000007D1A                 db  20h
.eh_frame:0000000000007D1B                 db  42h ; B
.eh_frame:0000000000007D1C                 db  0Eh
.eh_frame:0000000000007D1D                 db  18h
.eh_frame:0000000000007D1E                 db  42h ; B
.eh_frame:0000000000007D1F                 db  0Eh
.eh_frame:0000000000007D20                 db  10h
.eh_frame:0000000000007D21                 db  42h ; B
.eh_frame:0000000000007D22                 db  0Eh
.eh_frame:0000000000007D23                 db    8
.eh_frame:0000000000007D24                 db  45h ; E
.eh_frame:0000000000007D25                 db  0Bh
.eh_frame:0000000000007D26                 db  68h ; h
.eh_frame:0000000000007D27                 db  0Ah
.eh_frame:0000000000007D28                 db  0Eh
.eh_frame:0000000000007D29                 db  68h ; h
.eh_frame:0000000000007D2A                 db  48h ; H
.eh_frame:0000000000007D2B                 db  0Bh
.eh_frame:0000000000007D2C                 db  72h ; r
.eh_frame:0000000000007D2D                 db  0Eh
.eh_frame:0000000000007D2E                 db  68h ; h
.eh_frame:0000000000007D2F                 db  45h ; E
.eh_frame:0000000000007D30                 db  0Eh
.eh_frame:0000000000007D31                 db  70h ; p
.eh_frame:0000000000007D32                 db  42h ; B
.eh_frame:0000000000007D33                 db  0Eh
.eh_frame:0000000000007D34                 db  78h ; x
.eh_frame:0000000000007D35                 db  42h ; B
.eh_frame:0000000000007D36                 db  0Eh
.eh_frame:0000000000007D37                 db  80h
.eh_frame:0000000000007D38                 db    1
.eh_frame:0000000000007D39                 db  5Eh ; ^
.eh_frame:0000000000007D3A                 db  0Eh
.eh_frame:0000000000007D3B                 db  60h ; `
.eh_frame:0000000000007D3C                 db  44h ; D
.eh_frame:0000000000007D3D                 db  0Ah
.eh_frame:0000000000007D3E                 db  0Eh
.eh_frame:0000000000007D3F                 db  38h ; 8
.eh_frame:0000000000007D40                 db  41h ; A
.eh_frame:0000000000007D41                 db  0Eh
.eh_frame:0000000000007D42                 db  30h ; 0
.eh_frame:0000000000007D43                 db  41h ; A
.eh_frame:0000000000007D44                 db  0Eh
.eh_frame:0000000000007D45                 db  28h ; (
.eh_frame:0000000000007D46                 db  42h ; B
.eh_frame:0000000000007D47                 db  0Eh
.eh_frame:0000000000007D48                 db  20h
.eh_frame:0000000000007D49                 db  42h ; B
.eh_frame:0000000000007D4A                 db  0Eh
.eh_frame:0000000000007D4B                 db  18h
.eh_frame:0000000000007D4C                 db  42h ; B
.eh_frame:0000000000007D4D                 db  0Eh
.eh_frame:0000000000007D4E                 db  10h
.eh_frame:0000000000007D4F                 db  42h ; B
.eh_frame:0000000000007D50                 db  0Eh
.eh_frame:0000000000007D51                 db    8
.eh_frame:0000000000007D52                 db  41h ; A
.eh_frame:0000000000007D53                 db  0Bh
.eh_frame:0000000000007D54                 db  79h ; y
.eh_frame:0000000000007D55                 db  0Ah
.eh_frame:0000000000007D56                 db  0Eh
.eh_frame:0000000000007D57                 db  68h ; h
.eh_frame:0000000000007D58                 db  42h ; B
.eh_frame:0000000000007D59                 db  0Eh
.eh_frame:0000000000007D5A                 db  70h ; p
.eh_frame:0000000000007D5B                 db  42h ; B
.eh_frame:0000000000007D5C                 db  0Eh
.eh_frame:0000000000007D5D                 db  78h ; x
.eh_frame:0000000000007D5E                 db  42h ; B
.eh_frame:0000000000007D5F                 db  0Eh
.eh_frame:0000000000007D60                 db  80h
.eh_frame:0000000000007D61                 db    1
.eh_frame:0000000000007D62                 db  51h ; Q
.eh_frame:0000000000007D63                 db  0Bh
.eh_frame:0000000000007D64                 db  10h
.eh_frame:0000000000007D65                 db    0
.eh_frame:0000000000007D66                 db    0
.eh_frame:0000000000007D67                 db    0
.eh_frame:0000000000007D68                 db 0F0h
.eh_frame:0000000000007D69                 db    8
.eh_frame:0000000000007D6A                 db    0
.eh_frame:0000000000007D6B                 db    0
.eh_frame:0000000000007D6C                 db  64h ; d
.eh_frame:0000000000007D6D                 db 0D6h
.eh_frame:0000000000007D6E                 db 0FFh
.eh_frame:0000000000007D6F                 db 0FFh
.eh_frame:0000000000007D70                 db  20h
.eh_frame:0000000000007D71                 db    0
.eh_frame:0000000000007D72                 db    0
.eh_frame:0000000000007D73                 db    0
.eh_frame:0000000000007D74                 db    0
.eh_frame:0000000000007D75                 db    0
.eh_frame:0000000000007D76                 db    0
.eh_frame:0000000000007D77                 db    0
.eh_frame:0000000000007D78                 db  18h
.eh_frame:0000000000007D79                 db    0
.eh_frame:0000000000007D7A                 db    0
.eh_frame:0000000000007D7B                 db    0
.eh_frame:0000000000007D7C                 db    4
.eh_frame:0000000000007D7D                 db    9
.eh_frame:0000000000007D7E                 db    0
.eh_frame:0000000000007D7F                 db    0
.eh_frame:0000000000007D80                 db  70h ; p
.eh_frame:0000000000007D81                 db 0D6h
.eh_frame:0000000000007D82                 db 0FFh
.eh_frame:0000000000007D83                 db 0FFh
.eh_frame:0000000000007D84                 db  78h ; x
.eh_frame:0000000000007D85                 db    0
.eh_frame:0000000000007D86                 db    0
.eh_frame:0000000000007D87                 db    0
.eh_frame:0000000000007D88                 db    0
.eh_frame:0000000000007D89                 db  44h ; D
.eh_frame:0000000000007D8A                 db  0Eh
.eh_frame:0000000000007D8B                 db  70h ; p
.eh_frame:0000000000007D8C                 db    2
.eh_frame:0000000000007D8D                 db  60h ; `
.eh_frame:0000000000007D8E                 db  0Ah
.eh_frame:0000000000007D8F                 db  0Eh
.eh_frame:0000000000007D90                 db    8
.eh_frame:0000000000007D91                 db  41h ; A
.eh_frame:0000000000007D92                 db  0Bh
.eh_frame:0000000000007D93                 db    0
.eh_frame:0000000000007D94                 db  28h ; (
.eh_frame:0000000000007D95                 db    0
.eh_frame:0000000000007D96                 db    0
.eh_frame:0000000000007D97                 db    0
.eh_frame:0000000000007D98                 db  20h
.eh_frame:0000000000007D99                 db    9
.eh_frame:0000000000007D9A                 db    0
.eh_frame:0000000000007D9B                 db    0
.eh_frame:0000000000007D9C                 db 0D4h
.eh_frame:0000000000007D9D                 db 0D6h
.eh_frame:0000000000007D9E                 db 0FFh
.eh_frame:0000000000007D9F                 db 0FFh
.eh_frame:0000000000007DA0                 db 0D5h
.eh_frame:0000000000007DA1                 db    0
.eh_frame:0000000000007DA2                 db    0
.eh_frame:0000000000007DA3                 db    0
.eh_frame:0000000000007DA4                 db    0
.eh_frame:0000000000007DA5                 db  41h ; A
.eh_frame:0000000000007DA6                 db  0Eh
.eh_frame:0000000000007DA7                 db  10h
.eh_frame:0000000000007DA8                 db  86h
.eh_frame:0000000000007DA9                 db    2
.eh_frame:0000000000007DAA                 db  41h ; A
.eh_frame:0000000000007DAB                 db  0Eh
.eh_frame:0000000000007DAC                 db  18h
.eh_frame:0000000000007DAD                 db  83h
.eh_frame:0000000000007DAE                 db    3
.eh_frame:0000000000007DAF                 db  50h ; P
.eh_frame:0000000000007DB0                 db  0Eh
.eh_frame:0000000000007DB1                 db 0D0h
.eh_frame:0000000000007DB2                 db    1
.eh_frame:0000000000007DB3                 db    2
.eh_frame:0000000000007DB4                 db 0ABh
.eh_frame:0000000000007DB5                 db  0Ah
.eh_frame:0000000000007DB6                 db  0Eh
.eh_frame:0000000000007DB7                 db  18h
.eh_frame:0000000000007DB8                 db  41h ; A
.eh_frame:0000000000007DB9                 db  0Eh
.eh_frame:0000000000007DBA                 db  10h
.eh_frame:0000000000007DBB                 db  41h ; A
.eh_frame:0000000000007DBC                 db  0Eh
.eh_frame:0000000000007DBD                 db    8
.eh_frame:0000000000007DBE                 db  41h ; A
.eh_frame:0000000000007DBF                 db  0Bh
.eh_frame:0000000000007DC0                 db  1Ch
.eh_frame:0000000000007DC1                 db    0
.eh_frame:0000000000007DC2                 db    0
.eh_frame:0000000000007DC3                 db    0
.eh_frame:0000000000007DC4                 db  4Ch ; L
.eh_frame:0000000000007DC5                 db    9
.eh_frame:0000000000007DC6                 db    0
.eh_frame:0000000000007DC7                 db    0
.eh_frame:0000000000007DC8                 db  88h
.eh_frame:0000000000007DC9                 db 0D7h
.eh_frame:0000000000007DCA                 db 0FFh
.eh_frame:0000000000007DCB                 db 0FFh
.eh_frame:0000000000007DCC                 db  80h
.eh_frame:0000000000007DCD                 db    0
.eh_frame:0000000000007DCE                 db    0
.eh_frame:0000000000007DCF                 db    0
.eh_frame:0000000000007DD0                 db    0
.eh_frame:0000000000007DD1                 db  41h ; A
.eh_frame:0000000000007DD2                 db  0Eh
.eh_frame:0000000000007DD3                 db  10h
.eh_frame:0000000000007DD4                 db  83h
.eh_frame:0000000000007DD5                 db    2
.eh_frame:0000000000007DD6                 db    2
.eh_frame:0000000000007DD7                 db  7Ah ; z
.eh_frame:0000000000007DD8                 db  0Eh
.eh_frame:0000000000007DD9                 db    8
.eh_frame:0000000000007DDA                 db    0
.eh_frame:0000000000007DDB                 db    0
.eh_frame:0000000000007DDC                 db    0
.eh_frame:0000000000007DDD                 db    0
.eh_frame:0000000000007DDE                 db    0
.eh_frame:0000000000007DDF                 db    0
.eh_frame:0000000000007DE0                 db  18h
.eh_frame:0000000000007DE1                 db    0
.eh_frame:0000000000007DE2                 db    0
.eh_frame:0000000000007DE3                 db    0
.eh_frame:0000000000007DE4                 db  6Ch ; l
.eh_frame:0000000000007DE5                 db    9
.eh_frame:0000000000007DE6                 db    0
.eh_frame:0000000000007DE7                 db    0
.eh_frame:0000000000007DE8                 db 0E8h
.eh_frame:0000000000007DE9                 db 0D7h
.eh_frame:0000000000007DEA                 db 0FFh
.eh_frame:0000000000007DEB                 db 0FFh
.eh_frame:0000000000007DEC                 db  1Ah
.eh_frame:0000000000007DED                 db    0
.eh_frame:0000000000007DEE                 db    0
.eh_frame:0000000000007DEF                 db    0
.eh_frame:0000000000007DF0                 db    0
.eh_frame:0000000000007DF1                 db  41h ; A
.eh_frame:0000000000007DF2                 db  0Eh
.eh_frame:0000000000007DF3                 db  10h
.eh_frame:0000000000007DF4                 db  83h
.eh_frame:0000000000007DF5                 db    2
.eh_frame:0000000000007DF6                 db  53h ; S
.eh_frame:0000000000007DF7                 db  0Ah
.eh_frame:0000000000007DF8                 db  0Eh
.eh_frame:0000000000007DF9                 db    8
.eh_frame:0000000000007DFA                 db  41h ; A
.eh_frame:0000000000007DFB                 db  0Bh
.eh_frame:0000000000007DFC                 db  10h
.eh_frame:0000000000007DFD                 db    0
.eh_frame:0000000000007DFE                 db    0
.eh_frame:0000000000007DFF                 db    0
.eh_frame:0000000000007E00                 db  88h
.eh_frame:0000000000007E01                 db    9
.eh_frame:0000000000007E02                 db    0
.eh_frame:0000000000007E03                 db    0
.eh_frame:0000000000007E04                 db 0ECh
.eh_frame:0000000000007E05                 db 0D7h
.eh_frame:0000000000007E06                 db 0FFh
.eh_frame:0000000000007E07                 db 0FFh
.eh_frame:0000000000007E08                 db  24h ; $
.eh_frame:0000000000007E09                 db    0
.eh_frame:0000000000007E0A                 db    0
.eh_frame:0000000000007E0B                 db    0
.eh_frame:0000000000007E0C                 db    0
.eh_frame:0000000000007E0D                 db  5Fh ; _
.eh_frame:0000000000007E0E                 db  0Eh
.eh_frame:0000000000007E0F                 db  10h
.eh_frame:0000000000007E10                 db  10h
.eh_frame:0000000000007E11                 db    0
.eh_frame:0000000000007E12                 db    0
.eh_frame:0000000000007E13                 db    0
.eh_frame:0000000000007E14                 db  9Ch
.eh_frame:0000000000007E15                 db    9
.eh_frame:0000000000007E16                 db    0
.eh_frame:0000000000007E17                 db    0
.eh_frame:0000000000007E18                 db    8
.eh_frame:0000000000007E19                 db 0D8h
.eh_frame:0000000000007E1A                 db 0FFh
.eh_frame:0000000000007E1B                 db 0FFh
.eh_frame:0000000000007E1C                 db    2
.eh_frame:0000000000007E1D                 db    0
.eh_frame:0000000000007E1E                 db    0
.eh_frame:0000000000007E1F                 db    0
.eh_frame:0000000000007E20                 db    0
.eh_frame:0000000000007E21                 db    0
.eh_frame:0000000000007E22                 db    0
.eh_frame:0000000000007E23                 db    0
.eh_frame:0000000000007E24                 db  20h
.eh_frame:0000000000007E25                 db    0
.eh_frame:0000000000007E26                 db    0
.eh_frame:0000000000007E27                 db    0
.eh_frame:0000000000007E28                 db 0B0h
.eh_frame:0000000000007E29                 db    9
.eh_frame:0000000000007E2A                 db    0
.eh_frame:0000000000007E2B                 db    0
.eh_frame:0000000000007E2C                 db    4
.eh_frame:0000000000007E2D                 db 0D8h
.eh_frame:0000000000007E2E                 db 0FFh
.eh_frame:0000000000007E2F                 db 0FFh
.eh_frame:0000000000007E30                 db  36h ; 6
.eh_frame:0000000000007E31                 db    0
.eh_frame:0000000000007E32                 db    0
.eh_frame:0000000000007E33                 db    0
.eh_frame:0000000000007E34                 db    0
.eh_frame:0000000000007E35                 db  44h ; D
.eh_frame:0000000000007E36                 db  0Eh
.eh_frame:0000000000007E37                 db  10h
.eh_frame:0000000000007E38                 db  83h
.eh_frame:0000000000007E39                 db    2
.eh_frame:0000000000007E3A                 db  5Dh ; ]
.eh_frame:0000000000007E3B                 db  0Ah
.eh_frame:0000000000007E3C                 db  0Eh
.eh_frame:0000000000007E3D                 db    8
.eh_frame:0000000000007E3E                 db  47h ; G
.eh_frame:0000000000007E3F                 db  0Bh
.eh_frame:0000000000007E40                 db  48h ; H
.eh_frame:0000000000007E41                 db  0Ah
.eh_frame:0000000000007E42                 db  0Eh
.eh_frame:0000000000007E43                 db    8
.eh_frame:0000000000007E44                 db  41h ; A
.eh_frame:0000000000007E45                 db  0Bh
.eh_frame:0000000000007E46                 db    0
.eh_frame:0000000000007E47                 db    0
.eh_frame:0000000000007E48                 db  10h
.eh_frame:0000000000007E49                 db    0
.eh_frame:0000000000007E4A                 db    0
.eh_frame:0000000000007E4B                 db    0
.eh_frame:0000000000007E4C                 db 0D4h
.eh_frame:0000000000007E4D                 db    9
.eh_frame:0000000000007E4E                 db    0
.eh_frame:0000000000007E4F                 db    0
.eh_frame:0000000000007E50                 db  20h
.eh_frame:0000000000007E51                 db 0D8h
.eh_frame:0000000000007E52                 db 0FFh
.eh_frame:0000000000007E53                 db 0FFh
.eh_frame:0000000000007E54                 db  24h ; $
.eh_frame:0000000000007E55                 db    0
.eh_frame:0000000000007E56                 db    0
.eh_frame:0000000000007E57                 db    0
.eh_frame:0000000000007E58                 db    0
.eh_frame:0000000000007E59                 db  5Fh ; _
.eh_frame:0000000000007E5A                 db  0Eh
.eh_frame:0000000000007E5B                 db  10h
.eh_frame:0000000000007E5C                 db  14h
.eh_frame:0000000000007E5D                 db    0
.eh_frame:0000000000007E5E                 db    0
.eh_frame:0000000000007E5F                 db    0
.eh_frame:0000000000007E60                 db 0E8h
.eh_frame:0000000000007E61                 db    9
.eh_frame:0000000000007E62                 db    0
.eh_frame:0000000000007E63                 db    0
.eh_frame:0000000000007E64                 db  3Ch ; <
.eh_frame:0000000000007E65                 db 0D8h
.eh_frame:0000000000007E66                 db 0FFh
.eh_frame:0000000000007E67                 db 0FFh
.eh_frame:0000000000007E68                 db  82h
.eh_frame:0000000000007E69                 db    0
.eh_frame:0000000000007E6A                 db    0
.eh_frame:0000000000007E6B                 db    0
.eh_frame:0000000000007E6C                 db    0
.eh_frame:0000000000007E6D                 db    2
.eh_frame:0000000000007E6E                 db  5Fh ; _
.eh_frame:0000000000007E6F                 db  0Eh
.eh_frame:0000000000007E70                 db  10h
.eh_frame:0000000000007E71                 db  49h ; I
.eh_frame:0000000000007E72                 db  0Eh
.eh_frame:0000000000007E73                 db    8
.eh_frame:0000000000007E74                 db  14h
.eh_frame:0000000000007E75                 db    0
.eh_frame:0000000000007E76                 db    0
.eh_frame:0000000000007E77                 db    0
.eh_frame:0000000000007E78                 db    0
.eh_frame:0000000000007E79                 db  0Ah
.eh_frame:0000000000007E7A                 db    0
.eh_frame:0000000000007E7B                 db    0
.eh_frame:0000000000007E7C                 db 0B4h
.eh_frame:0000000000007E7D                 db 0D8h
.eh_frame:0000000000007E7E                 db 0FFh
.eh_frame:0000000000007E7F                 db 0FFh
.eh_frame:0000000000007E80                 db  4Ah ; J
.eh_frame:0000000000007E81                 db    0
.eh_frame:0000000000007E82                 db    0
.eh_frame:0000000000007E83                 db    0
.eh_frame:0000000000007E84                 db    0
.eh_frame:0000000000007E85                 db    2
.eh_frame:0000000000007E86                 db  45h ; E
.eh_frame:0000000000007E87                 db  0Eh
.eh_frame:0000000000007E88                 db  10h
.eh_frame:0000000000007E89                 db    0
.eh_frame:0000000000007E8A                 db    0
.eh_frame:0000000000007E8B                 db    0
.eh_frame:0000000000007E8C                 db  18h
.eh_frame:0000000000007E8D                 db    0
.eh_frame:0000000000007E8E                 db    0
.eh_frame:0000000000007E8F                 db    0
.eh_frame:0000000000007E90                 db  18h
.eh_frame:0000000000007E91                 db  0Ah
.eh_frame:0000000000007E92                 db    0
.eh_frame:0000000000007E93                 db    0
.eh_frame:0000000000007E94                 db 0ECh
.eh_frame:0000000000007E95                 db 0D8h
.eh_frame:0000000000007E96                 db 0FFh
.eh_frame:0000000000007E97                 db 0FFh
.eh_frame:0000000000007E98                 db  17h
.eh_frame:0000000000007E99                 db    0
.eh_frame:0000000000007E9A                 db    0
.eh_frame:0000000000007E9B                 db    0
.eh_frame:0000000000007E9C                 db    0
.eh_frame:0000000000007E9D                 db  41h ; A
.eh_frame:0000000000007E9E                 db  0Eh
.eh_frame:0000000000007E9F                 db  10h
.eh_frame:0000000000007EA0                 db  83h
.eh_frame:0000000000007EA1                 db    2
.eh_frame:0000000000007EA2                 db  51h ; Q
.eh_frame:0000000000007EA3                 db  0Eh
.eh_frame:0000000000007EA4                 db    8
.eh_frame:0000000000007EA5                 db    0
.eh_frame:0000000000007EA6                 db    0
.eh_frame:0000000000007EA7                 db    0
.eh_frame:0000000000007EA8                 db  18h
.eh_frame:0000000000007EA9                 db    0
.eh_frame:0000000000007EAA                 db    0
.eh_frame:0000000000007EAB                 db    0
.eh_frame:0000000000007EAC                 db  34h ; 4
.eh_frame:0000000000007EAD                 db  0Ah
.eh_frame:0000000000007EAE                 db    0
.eh_frame:0000000000007EAF                 db    0
.eh_frame:0000000000007EB0                 db 0F0h
.eh_frame:0000000000007EB1                 db 0D8h
.eh_frame:0000000000007EB2                 db 0FFh
.eh_frame:0000000000007EB3                 db 0FFh
.eh_frame:0000000000007EB4                 db  2Eh ; .
.eh_frame:0000000000007EB5                 db    0
.eh_frame:0000000000007EB6                 db    0
.eh_frame:0000000000007EB7                 db    0
.eh_frame:0000000000007EB8                 db    0
.eh_frame:0000000000007EB9                 db  47h ; G
.eh_frame:0000000000007EBA                 db  0Eh
.eh_frame:0000000000007EBB                 db  10h
.eh_frame:0000000000007EBC                 db  61h ; a
.eh_frame:0000000000007EBD                 db  0Ah
.eh_frame:0000000000007EBE                 db  0Eh
.eh_frame:0000000000007EBF                 db    8
.eh_frame:0000000000007EC0                 db  41h ; A
.eh_frame:0000000000007EC1                 db  0Bh
.eh_frame:0000000000007EC2                 db    0
.eh_frame:0000000000007EC3                 db    0
.eh_frame:0000000000007EC4                 db  24h ; $
.eh_frame:0000000000007EC5                 db    0
.eh_frame:0000000000007EC6                 db    0
.eh_frame:0000000000007EC7                 db    0
.eh_frame:0000000000007EC8                 db  50h ; P
.eh_frame:0000000000007EC9                 db  0Ah
.eh_frame:0000000000007ECA                 db    0
.eh_frame:0000000000007ECB                 db    0
.eh_frame:0000000000007ECC                 db    4
.eh_frame:0000000000007ECD                 db 0D9h
.eh_frame:0000000000007ECE                 db 0FFh
.eh_frame:0000000000007ECF                 db 0FFh
.eh_frame:0000000000007ED0                 db  28h ; (
.eh_frame:0000000000007ED1                 db    0
.eh_frame:0000000000007ED2                 db    0
.eh_frame:0000000000007ED3                 db    0
.eh_frame:0000000000007ED4                 db    0
.eh_frame:0000000000007ED5                 db  41h ; A
.eh_frame:0000000000007ED6                 db  0Eh
.eh_frame:0000000000007ED7                 db  10h
.eh_frame:0000000000007ED8                 db  86h
.eh_frame:0000000000007ED9                 db    2
.eh_frame:0000000000007EDA                 db  41h ; A
.eh_frame:0000000000007EDB                 db  0Eh
.eh_frame:0000000000007EDC                 db  18h
.eh_frame:0000000000007EDD                 db  83h
.eh_frame:0000000000007EDE                 db    3
.eh_frame:0000000000007EDF                 db  4Dh ; M
.eh_frame:0000000000007EE0                 db  0Eh
.eh_frame:0000000000007EE1                 db  20h
.eh_frame:0000000000007EE2                 db  49h ; I
.eh_frame:0000000000007EE3                 db  0Eh
.eh_frame:0000000000007EE4                 db  18h
.eh_frame:0000000000007EE5                 db  47h ; G
.eh_frame:0000000000007EE6                 db  0Eh
.eh_frame:0000000000007EE7                 db  10h
.eh_frame:0000000000007EE8                 db  41h ; A
.eh_frame:0000000000007EE9                 db  0Eh
.eh_frame:0000000000007EEA                 db    8
.eh_frame:0000000000007EEB                 db    0
.eh_frame:0000000000007EEC                 db  18h
.eh_frame:0000000000007EED                 db    0
.eh_frame:0000000000007EEE                 db    0
.eh_frame:0000000000007EEF                 db    0
.eh_frame:0000000000007EF0                 db  78h ; x
.eh_frame:0000000000007EF1                 db  0Ah
.eh_frame:0000000000007EF2                 db    0
.eh_frame:0000000000007EF3                 db    0
.eh_frame:0000000000007EF4                 db  0Ch
.eh_frame:0000000000007EF5                 db 0D9h
.eh_frame:0000000000007EF6                 db 0FFh
.eh_frame:0000000000007EF7                 db 0FFh
.eh_frame:0000000000007EF8                 db  13h
.eh_frame:0000000000007EF9                 db    0
.eh_frame:0000000000007EFA                 db    0
.eh_frame:0000000000007EFB                 db    0
.eh_frame:0000000000007EFC                 db    0
.eh_frame:0000000000007EFD                 db  41h ; A
.eh_frame:0000000000007EFE                 db  0Eh
.eh_frame:0000000000007EFF                 db  10h
.eh_frame:0000000000007F00                 db  83h
.eh_frame:0000000000007F01                 db    2
.eh_frame:0000000000007F02                 db  50h ; P
.eh_frame:0000000000007F03                 db  0Eh
.eh_frame:0000000000007F04                 db    8
.eh_frame:0000000000007F05                 db    0
.eh_frame:0000000000007F06                 db    0
.eh_frame:0000000000007F07                 db    0
.eh_frame:0000000000007F08                 db  14h
.eh_frame:0000000000007F09                 db    0
.eh_frame:0000000000007F0A                 db    0
.eh_frame:0000000000007F0B                 db    0
.eh_frame:0000000000007F0C                 db  94h
.eh_frame:0000000000007F0D                 db  0Ah
.eh_frame:0000000000007F0E                 db    0
.eh_frame:0000000000007F0F                 db    0
.eh_frame:0000000000007F10                 db  10h
.eh_frame:0000000000007F11                 db 0D9h
.eh_frame:0000000000007F12                 db 0FFh
.eh_frame:0000000000007F13                 db 0FFh
.eh_frame:0000000000007F14                 db  35h ; 5
.eh_frame:0000000000007F15                 db    0
.eh_frame:0000000000007F16                 db    0
.eh_frame:0000000000007F17                 db    0
.eh_frame:0000000000007F18                 db    0
.eh_frame:0000000000007F19                 db  4Bh ; K
.eh_frame:0000000000007F1A                 db  0Eh
.eh_frame:0000000000007F1B                 db  10h
.eh_frame:0000000000007F1C                 db    0
.eh_frame:0000000000007F1D                 db    0
.eh_frame:0000000000007F1E                 db    0
.eh_frame:0000000000007F1F                 db    0
.eh_frame:0000000000007F20                 db  4Ch ; L
.eh_frame:0000000000007F21                 db    0
.eh_frame:0000000000007F22                 db    0
.eh_frame:0000000000007F23                 db    0
.eh_frame:0000000000007F24                 db 0ACh
.eh_frame:0000000000007F25                 db  0Ah
.eh_frame:0000000000007F26                 db    0
.eh_frame:0000000000007F27                 db    0
.eh_frame:0000000000007F28                 db  38h ; 8
.eh_frame:0000000000007F29                 db 0D9h
.eh_frame:0000000000007F2A                 db 0FFh
.eh_frame:0000000000007F2B                 db 0FFh
.eh_frame:0000000000007F2C                 db  1Ch
.eh_frame:0000000000007F2D                 db    4
.eh_frame:0000000000007F2E                 db    0
.eh_frame:0000000000007F2F                 db    0
.eh_frame:0000000000007F30                 db    0
.eh_frame:0000000000007F31                 db  42h ; B
.eh_frame:0000000000007F32                 db  0Eh
.eh_frame:0000000000007F33                 db  10h
.eh_frame:0000000000007F34                 db  8Fh
.eh_frame:0000000000007F35                 db    2
.eh_frame:0000000000007F36                 db  42h ; B
.eh_frame:0000000000007F37                 db  0Eh
.eh_frame:0000000000007F38                 db  18h
.eh_frame:0000000000007F39                 db  8Eh
.eh_frame:0000000000007F3A                 db    3
.eh_frame:0000000000007F3B                 db  42h ; B
.eh_frame:0000000000007F3C                 db  0Eh
.eh_frame:0000000000007F3D                 db  20h
.eh_frame:0000000000007F3E                 db  8Dh
.eh_frame:0000000000007F3F                 db    4
.eh_frame:0000000000007F40                 db  42h ; B
.eh_frame:0000000000007F41                 db  0Eh
.eh_frame:0000000000007F42                 db  28h ; (
.eh_frame:0000000000007F43                 db  8Ch
.eh_frame:0000000000007F44                 db    5
.eh_frame:0000000000007F45                 db  41h ; A
.eh_frame:0000000000007F46                 db  0Eh
.eh_frame:0000000000007F47                 db  30h ; 0
.eh_frame:0000000000007F48                 db  86h
.eh_frame:0000000000007F49                 db    6
.eh_frame:0000000000007F4A                 db  41h ; A
.eh_frame:0000000000007F4B                 db  0Eh
.eh_frame:0000000000007F4C                 db  38h ; 8
.eh_frame:0000000000007F4D                 db  83h
.eh_frame:0000000000007F4E                 db    7
.eh_frame:0000000000007F4F                 db  44h ; D
.eh_frame:0000000000007F50                 db  0Eh
.eh_frame:0000000000007F51                 db  60h ; `
.eh_frame:0000000000007F52                 db    2
.eh_frame:0000000000007F53                 db 0E9h
.eh_frame:0000000000007F54                 db  0Ah
.eh_frame:0000000000007F55                 db  0Eh
.eh_frame:0000000000007F56                 db  38h ; 8
.eh_frame:0000000000007F57                 db  41h ; A
.eh_frame:0000000000007F58                 db  0Eh
.eh_frame:0000000000007F59                 db  30h ; 0
.eh_frame:0000000000007F5A                 db  41h ; A
.eh_frame:0000000000007F5B                 db  0Eh
.eh_frame:0000000000007F5C                 db  28h ; (
.eh_frame:0000000000007F5D                 db  42h ; B
.eh_frame:0000000000007F5E                 db  0Eh
.eh_frame:0000000000007F5F                 db  20h
.eh_frame:0000000000007F60                 db  42h ; B
.eh_frame:0000000000007F61                 db  0Eh
.eh_frame:0000000000007F62                 db  18h
.eh_frame:0000000000007F63                 db  42h ; B
.eh_frame:0000000000007F64                 db  0Eh
.eh_frame:0000000000007F65                 db  10h
.eh_frame:0000000000007F66                 db  42h ; B
.eh_frame:0000000000007F67                 db  0Eh
.eh_frame:0000000000007F68                 db    8
.eh_frame:0000000000007F69                 db  47h ; G
.eh_frame:0000000000007F6A                 db  0Bh
.eh_frame:0000000000007F6B                 db    0
.eh_frame:0000000000007F6C                 db    0
.eh_frame:0000000000007F6D                 db    0
.eh_frame:0000000000007F6E                 db    0
.eh_frame:0000000000007F6F                 db    0
.eh_frame:0000000000007F70                 db  34h ; 4
.eh_frame:0000000000007F71                 db    0
.eh_frame:0000000000007F72                 db    0
.eh_frame:0000000000007F73                 db    0
.eh_frame:0000000000007F74                 db 0FCh
.eh_frame:0000000000007F75                 db  0Ah
.eh_frame:0000000000007F76                 db    0
.eh_frame:0000000000007F77                 db    0
.eh_frame:0000000000007F78                 db    8
.eh_frame:0000000000007F79                 db 0DDh
.eh_frame:0000000000007F7A                 db 0FFh
.eh_frame:0000000000007F7B                 db 0FFh
.eh_frame:0000000000007F7C                 db  7Bh ; {
.eh_frame:0000000000007F7D                 db    0
.eh_frame:0000000000007F7E                 db    0
.eh_frame:0000000000007F7F                 db    0
.eh_frame:0000000000007F80                 db    0
.eh_frame:0000000000007F81                 db  42h ; B
.eh_frame:0000000000007F82                 db  0Eh
.eh_frame:0000000000007F83                 db  10h
.eh_frame:0000000000007F84                 db  8Ch
.eh_frame:0000000000007F85                 db    2
.eh_frame:0000000000007F86                 db  41h ; A
.eh_frame:0000000000007F87                 db  0Eh
.eh_frame:0000000000007F88                 db  18h
.eh_frame:0000000000007F89                 db  86h
.eh_frame:0000000000007F8A                 db    3
.eh_frame:0000000000007F8B                 db  41h ; A
.eh_frame:0000000000007F8C                 db  0Eh
.eh_frame:0000000000007F8D                 db  20h
.eh_frame:0000000000007F8E                 db  83h
.eh_frame:0000000000007F8F                 db    4
.eh_frame:0000000000007F90                 db  7Dh ; }
.eh_frame:0000000000007F91                 db  0Ah
.eh_frame:0000000000007F92                 db  0Eh
.eh_frame:0000000000007F93                 db  18h
.eh_frame:0000000000007F94                 db  41h ; A
.eh_frame:0000000000007F95                 db  0Eh
.eh_frame:0000000000007F96                 db  10h
.eh_frame:0000000000007F97                 db  42h ; B
.eh_frame:0000000000007F98                 db  0Eh
.eh_frame:0000000000007F99                 db    8
.eh_frame:0000000000007F9A                 db  44h ; D
.eh_frame:0000000000007F9B                 db  0Bh
.eh_frame:0000000000007F9C                 db  60h ; `
.eh_frame:0000000000007F9D                 db  0Ah
.eh_frame:0000000000007F9E                 db  0Eh
.eh_frame:0000000000007F9F                 db  18h
.eh_frame:0000000000007FA0                 db  41h ; A
.eh_frame:0000000000007FA1                 db  0Eh
.eh_frame:0000000000007FA2                 db  10h
.eh_frame:0000000000007FA3                 db  42h ; B
.eh_frame:0000000000007FA4                 db  0Eh
.eh_frame:0000000000007FA5                 db    8
.eh_frame:0000000000007FA6                 db  45h ; E
.eh_frame:0000000000007FA7                 db  0Bh
.eh_frame:0000000000007FA8                 db  1Ch
.eh_frame:0000000000007FA9                 db    0
.eh_frame:0000000000007FAA                 db    0
.eh_frame:0000000000007FAB                 db    0
.eh_frame:0000000000007FAC                 db  34h ; 4
.eh_frame:0000000000007FAD                 db  0Bh
.eh_frame:0000000000007FAE                 db    0
.eh_frame:0000000000007FAF                 db    0
.eh_frame:0000000000007FB0                 db  50h ; P
.eh_frame:0000000000007FB1                 db 0DDh
.eh_frame:0000000000007FB2                 db 0FFh
.eh_frame:0000000000007FB3                 db 0FFh
.eh_frame:0000000000007FB4                 db  40h ; @
.eh_frame:0000000000007FB5                 db    0
.eh_frame:0000000000007FB6                 db    0
.eh_frame:0000000000007FB7                 db    0
.eh_frame:0000000000007FB8                 db    0
.eh_frame:0000000000007FB9                 db  44h ; D
.eh_frame:0000000000007FBA                 db  0Eh
.eh_frame:0000000000007FBB                 db  10h
.eh_frame:0000000000007FBC                 db  83h
.eh_frame:0000000000007FBD                 db    2
.eh_frame:0000000000007FBE                 db  5Ah ; Z
.eh_frame:0000000000007FBF                 db  0Ah
.eh_frame:0000000000007FC0                 db  0Eh
.eh_frame:0000000000007FC1                 db    8
.eh_frame:0000000000007FC2                 db  4Ah ; J
.eh_frame:0000000000007FC3                 db  0Bh
.eh_frame:0000000000007FC4                 db  53h ; S
.eh_frame:0000000000007FC5                 db  0Eh
.eh_frame:0000000000007FC6                 db    8
.eh_frame:0000000000007FC7                 db    0
.eh_frame:0000000000007FC8                 db  2Ch ; ,
.eh_frame:0000000000007FC9                 db    0
.eh_frame:0000000000007FCA                 db    0
.eh_frame:0000000000007FCB                 db    0
.eh_frame:0000000000007FCC                 db  54h ; T
.eh_frame:0000000000007FCD                 db  0Bh
.eh_frame:0000000000007FCE                 db    0
.eh_frame:0000000000007FCF                 db    0
.eh_frame:0000000000007FD0                 db  70h ; p
.eh_frame:0000000000007FD1                 db 0DDh
.eh_frame:0000000000007FD2                 db 0FFh
.eh_frame:0000000000007FD3                 db 0FFh
.eh_frame:0000000000007FD4                 db  57h ; W
.eh_frame:0000000000007FD5                 db    0
.eh_frame:0000000000007FD6                 db    0
.eh_frame:0000000000007FD7                 db    0
.eh_frame:0000000000007FD8                 db    0
.eh_frame:0000000000007FD9                 db  63h ; c
.eh_frame:0000000000007FDA                 db  0Eh
.eh_frame:0000000000007FDB                 db  10h
.eh_frame:0000000000007FDC                 db  8Ch
.eh_frame:0000000000007FDD                 db    2
.eh_frame:0000000000007FDE                 db  41h ; A
.eh_frame:0000000000007FDF                 db  0Eh
.eh_frame:0000000000007FE0                 db  18h
.eh_frame:0000000000007FE1                 db  86h
.eh_frame:0000000000007FE2                 db    3
.eh_frame:0000000000007FE3                 db  44h ; D
.eh_frame:0000000000007FE4                 db  0Eh
.eh_frame:0000000000007FE5                 db  20h
.eh_frame:0000000000007FE6                 db  83h
.eh_frame:0000000000007FE7                 db    4
.eh_frame:0000000000007FE8                 db  6Bh ; k
.eh_frame:0000000000007FE9                 db  0Eh
.eh_frame:0000000000007FEA                 db  18h
.eh_frame:0000000000007FEB                 db  41h ; A
.eh_frame:0000000000007FEC                 db  0Eh
.eh_frame:0000000000007FED                 db  10h
.eh_frame:0000000000007FEE                 db  42h ; B
.eh_frame:0000000000007FEF                 db  0Eh
.eh_frame:0000000000007FF0                 db    8
.eh_frame:0000000000007FF1                 db    0
.eh_frame:0000000000007FF2                 db    0
.eh_frame:0000000000007FF3                 db    0
.eh_frame:0000000000007FF4                 db    0
.eh_frame:0000000000007FF5                 db    0
.eh_frame:0000000000007FF6                 db    0
.eh_frame:0000000000007FF7                 db    0
.eh_frame:0000000000007FF8                 db  3Ch ; <
.eh_frame:0000000000007FF9                 db    0
.eh_frame:0000000000007FFA                 db    0
.eh_frame:0000000000007FFB                 db    0
.eh_frame:0000000000007FFC                 db  84h
.eh_frame:0000000000007FFD                 db  0Bh
.eh_frame:0000000000007FFE                 db    0
.eh_frame:0000000000007FFF                 db    0
.eh_frame:0000000000008000                 db 0A0h
.eh_frame:0000000000008001                 db 0DDh
.eh_frame:0000000000008002                 db 0FFh
.eh_frame:0000000000008003                 db 0FFh
.eh_frame:0000000000008004                 db  83h
.eh_frame:0000000000008005                 db    0
.eh_frame:0000000000008006                 db    0
.eh_frame:0000000000008007                 db    0
.eh_frame:0000000000008008                 db    0
.eh_frame:0000000000008009                 db  42h ; B
.eh_frame:000000000000800A                 db  0Eh
.eh_frame:000000000000800B                 db  10h
.eh_frame:000000000000800C                 db  8Dh
.eh_frame:000000000000800D                 db    2
.eh_frame:000000000000800E                 db  42h ; B
.eh_frame:000000000000800F                 db  0Eh
.eh_frame:0000000000008010                 db  18h
.eh_frame:0000000000008011                 db  8Ch
.eh_frame:0000000000008012                 db    3
.eh_frame:0000000000008013                 db  44h ; D
.eh_frame:0000000000008014                 db  0Eh
.eh_frame:0000000000008015                 db  20h
.eh_frame:0000000000008016                 db  86h
.eh_frame:0000000000008017                 db    4
.eh_frame:0000000000008018                 db  41h ; A
.eh_frame:0000000000008019                 db  0Eh
.eh_frame:000000000000801A                 db  28h ; (
.eh_frame:000000000000801B                 db  83h
.eh_frame:000000000000801C                 db    5
.eh_frame:000000000000801D                 db  4Ah ; J
.eh_frame:000000000000801E                 db  0Eh
.eh_frame:000000000000801F                 db  40h ; @
.eh_frame:0000000000008020                 db    2
.eh_frame:0000000000008021                 db  64h ; d
.eh_frame:0000000000008022                 db  0Ah
.eh_frame:0000000000008023                 db  0Eh
.eh_frame:0000000000008024                 db  28h ; (
.eh_frame:0000000000008025                 db  41h ; A
.eh_frame:0000000000008026                 db  0Eh
.eh_frame:0000000000008027                 db  20h
.eh_frame:0000000000008028                 db  41h ; A
.eh_frame:0000000000008029                 db  0Eh
.eh_frame:000000000000802A                 db  18h
.eh_frame:000000000000802B                 db  42h ; B
.eh_frame:000000000000802C                 db  0Eh
.eh_frame:000000000000802D                 db  10h
.eh_frame:000000000000802E                 db  42h ; B
.eh_frame:000000000000802F                 db  0Eh
.eh_frame:0000000000008030                 db    8
.eh_frame:0000000000008031                 db  41h ; A
.eh_frame:0000000000008032                 db  0Bh
.eh_frame:0000000000008033                 db    0
.eh_frame:0000000000008034                 db    0
.eh_frame:0000000000008035                 db    0
.eh_frame:0000000000008036                 db    0
.eh_frame:0000000000008037                 db    0
.eh_frame:0000000000008038                 db  10h
.eh_frame:0000000000008039                 db    0
.eh_frame:000000000000803A                 db    0
.eh_frame:000000000000803B                 db    0
.eh_frame:000000000000803C                 db 0C4h
.eh_frame:000000000000803D                 db  0Bh
.eh_frame:000000000000803E                 db    0
.eh_frame:000000000000803F                 db    0
.eh_frame:0000000000008040                 db 0F0h
.eh_frame:0000000000008041                 db 0DDh
.eh_frame:0000000000008042                 db 0FFh
.eh_frame:0000000000008043                 db 0FFh
.eh_frame:0000000000008044                 db  0Ah
.eh_frame:0000000000008045                 db    0
.eh_frame:0000000000008046                 db    0
.eh_frame:0000000000008047                 db    0
.eh_frame:0000000000008048                 db    0
.eh_frame:0000000000008049                 db    0
.eh_frame:000000000000804A                 db    0
.eh_frame:000000000000804B                 db    0
.eh_frame:000000000000804C                 db  48h ; H
.eh_frame:000000000000804D                 db    0
.eh_frame:000000000000804E                 db    0
.eh_frame:000000000000804F                 db    0
.eh_frame:0000000000008050                 db 0D8h
.eh_frame:0000000000008051                 db  0Bh
.eh_frame:0000000000008052                 db    0
.eh_frame:0000000000008053                 db    0
.eh_frame:0000000000008054                 db 0ECh
.eh_frame:0000000000008055                 db 0DDh
.eh_frame:0000000000008056                 db 0FFh
.eh_frame:0000000000008057                 db 0FFh
.eh_frame:0000000000008058                 db  16h
.eh_frame:0000000000008059                 db    1
.eh_frame:000000000000805A                 db    0
.eh_frame:000000000000805B                 db    0
.eh_frame:000000000000805C                 db    0
.eh_frame:000000000000805D                 db  42h ; B
.eh_frame:000000000000805E                 db  0Eh
.eh_frame:000000000000805F                 db  10h
.eh_frame:0000000000008060                 db  8Fh
.eh_frame:0000000000008061                 db    2
.eh_frame:0000000000008062                 db  42h ; B
.eh_frame:0000000000008063                 db  0Eh
.eh_frame:0000000000008064                 db  18h
.eh_frame:0000000000008065                 db  8Eh
.eh_frame:0000000000008066                 db    3
.eh_frame:0000000000008067                 db  45h ; E
.eh_frame:0000000000008068                 db  0Eh
.eh_frame:0000000000008069                 db  20h
.eh_frame:000000000000806A                 db  8Dh
.eh_frame:000000000000806B                 db    4
.eh_frame:000000000000806C                 db  42h ; B
.eh_frame:000000000000806D                 db  0Eh
.eh_frame:000000000000806E                 db  28h ; (
.eh_frame:000000000000806F                 db  8Ch
.eh_frame:0000000000008070                 db    5
.eh_frame:0000000000008071                 db  44h ; D
.eh_frame:0000000000008072                 db  0Eh
.eh_frame:0000000000008073                 db  30h ; 0
.eh_frame:0000000000008074                 db  86h
.eh_frame:0000000000008075                 db    6
.eh_frame:0000000000008076                 db  41h ; A
.eh_frame:0000000000008077                 db  0Eh
.eh_frame:0000000000008078                 db  38h ; 8
.eh_frame:0000000000008079                 db  83h
.eh_frame:000000000000807A                 db    7
.eh_frame:000000000000807B                 db  47h ; G
.eh_frame:000000000000807C                 db  0Eh
.eh_frame:000000000000807D                 db  60h ; `
.eh_frame:000000000000807E                 db    2
.eh_frame:000000000000807F                 db 0DEh
.eh_frame:0000000000008080                 db  0Ah
.eh_frame:0000000000008081                 db  0Eh
.eh_frame:0000000000008082                 db  38h ; 8
.eh_frame:0000000000008083                 db  41h ; A
.eh_frame:0000000000008084                 db  0Eh
.eh_frame:0000000000008085                 db  30h ; 0
.eh_frame:0000000000008086                 db  41h ; A
.eh_frame:0000000000008087                 db  0Eh
.eh_frame:0000000000008088                 db  28h ; (
.eh_frame:0000000000008089                 db  42h ; B
.eh_frame:000000000000808A                 db  0Eh
.eh_frame:000000000000808B                 db  20h
.eh_frame:000000000000808C                 db  42h ; B
.eh_frame:000000000000808D                 db  0Eh
.eh_frame:000000000000808E                 db  18h
.eh_frame:000000000000808F                 db  42h ; B
.eh_frame:0000000000008090                 db  0Eh
.eh_frame:0000000000008091                 db  10h
.eh_frame:0000000000008092                 db  42h ; B
.eh_frame:0000000000008093                 db  0Eh
.eh_frame:0000000000008094                 db    8
.eh_frame:0000000000008095                 db  41h ; A
.eh_frame:0000000000008096                 db  0Bh
.eh_frame:0000000000008097                 db    0
.eh_frame:0000000000008098                 db  28h ; (
.eh_frame:0000000000008099                 db    0
.eh_frame:000000000000809A                 db    0
.eh_frame:000000000000809B                 db    0
.eh_frame:000000000000809C                 db  24h ; $
.eh_frame:000000000000809D                 db  0Ch
.eh_frame:000000000000809E                 db    0
.eh_frame:000000000000809F                 db    0
.eh_frame:00000000000080A0                 db 0C0h
.eh_frame:00000000000080A1                 db 0DEh
.eh_frame:00000000000080A2                 db 0FFh
.eh_frame:00000000000080A3                 db 0FFh
.eh_frame:00000000000080A4                 db  73h ; s
.eh_frame:00000000000080A5                 db    0
.eh_frame:00000000000080A6                 db    0
.eh_frame:00000000000080A7                 db    0
.eh_frame:00000000000080A8                 db    0
.eh_frame:00000000000080A9                 db  46h ; F
.eh_frame:00000000000080AA                 db  0Eh
.eh_frame:00000000000080AB                 db  10h
.eh_frame:00000000000080AC                 db  8Ch
.eh_frame:00000000000080AD                 db    2
.eh_frame:00000000000080AE                 db  46h ; F
.eh_frame:00000000000080AF                 db  0Eh
.eh_frame:00000000000080B0                 db  18h
.eh_frame:00000000000080B1                 db  86h
.eh_frame:00000000000080B2                 db    3
.eh_frame:00000000000080B3                 db  44h ; D
.eh_frame:00000000000080B4                 db  0Eh
.eh_frame:00000000000080B5                 db  20h
.eh_frame:00000000000080B6                 db  83h
.eh_frame:00000000000080B7                 db    4
.eh_frame:00000000000080B8                 db  7Fh ; 
.eh_frame:00000000000080B9                 db  0Ah
.eh_frame:00000000000080BA                 db  0Eh
.eh_frame:00000000000080BB                 db  18h
.eh_frame:00000000000080BC                 db  41h ; A
.eh_frame:00000000000080BD                 db  0Eh
.eh_frame:00000000000080BE                 db  10h
.eh_frame:00000000000080BF                 db  42h ; B
.eh_frame:00000000000080C0                 db  0Eh
.eh_frame:00000000000080C1                 db    8
.eh_frame:00000000000080C2                 db  4Eh ; N
.eh_frame:00000000000080C3                 db  0Bh
.eh_frame:00000000000080C4                 db  5Ch ; \
.eh_frame:00000000000080C5                 db    0
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  50h ; P
.eh_frame:00000000000080C9                 db  0Ch
.eh_frame:00000000000080CA                 db    0
.eh_frame:00000000000080CB                 db    0
.eh_frame:00000000000080CC                 db  14h
.eh_frame:00000000000080CD                 db 0DFh
.eh_frame:00000000000080CE                 db 0FFh
.eh_frame:00000000000080CF                 db 0FFh
.eh_frame:00000000000080D0                 db  20h
.eh_frame:00000000000080D1                 db    1
.eh_frame:00000000000080D2                 db    0
.eh_frame:00000000000080D3                 db    0
.eh_frame:00000000000080D4                 db    0
.eh_frame:00000000000080D5                 db  42h ; B
.eh_frame:00000000000080D6                 db  0Eh
.eh_frame:00000000000080D7                 db  10h
.eh_frame:00000000000080D8                 db  8Fh
.eh_frame:00000000000080D9                 db    2
.eh_frame:00000000000080DA                 db  42h ; B
.eh_frame:00000000000080DB                 db  0Eh
.eh_frame:00000000000080DC                 db  18h
.eh_frame:00000000000080DD                 db  8Eh
.eh_frame:00000000000080DE                 db    3
.eh_frame:00000000000080DF                 db  45h ; E
.eh_frame:00000000000080E0                 db  0Eh
.eh_frame:00000000000080E1                 db  20h
.eh_frame:00000000000080E2                 db  8Dh
.eh_frame:00000000000080E3                 db    4
.eh_frame:00000000000080E4                 db  42h ; B
.eh_frame:00000000000080E5                 db  0Eh
.eh_frame:00000000000080E6                 db  28h ; (
.eh_frame:00000000000080E7                 db  8Ch
.eh_frame:00000000000080E8                 db    5
.eh_frame:00000000000080E9                 db  43h ; C
.eh_frame:00000000000080EA                 db  0Eh
.eh_frame:00000000000080EB                 db  30h ; 0
.eh_frame:00000000000080EC                 db  86h
.eh_frame:00000000000080ED                 db    6
.eh_frame:00000000000080EE                 db  41h ; A
.eh_frame:00000000000080EF                 db  0Eh
.eh_frame:00000000000080F0                 db  38h ; 8
.eh_frame:00000000000080F1                 db  83h
.eh_frame:00000000000080F2                 db    7
.eh_frame:00000000000080F3                 db  56h ; V
.eh_frame:00000000000080F4                 db  0Eh
.eh_frame:00000000000080F5                 db  40h ; @
.eh_frame:00000000000080F6                 db    2
.eh_frame:00000000000080F7                 db 0D3h
.eh_frame:00000000000080F8                 db  0Ah
.eh_frame:00000000000080F9                 db  0Eh
.eh_frame:00000000000080FA                 db  38h ; 8
.eh_frame:00000000000080FB                 db  41h ; A
.eh_frame:00000000000080FC                 db  0Eh
.eh_frame:00000000000080FD                 db  30h ; 0
.eh_frame:00000000000080FE                 db  41h ; A
.eh_frame:00000000000080FF                 db  0Eh
.eh_frame:0000000000008100                 db  28h ; (
.eh_frame:0000000000008101                 db  42h ; B
.eh_frame:0000000000008102                 db  0Eh
.eh_frame:0000000000008103                 db  20h
.eh_frame:0000000000008104                 db  42h ; B
.eh_frame:0000000000008105                 db  0Eh
.eh_frame:0000000000008106                 db  18h
.eh_frame:0000000000008107                 db  42h ; B
.eh_frame:0000000000008108                 db  0Eh
.eh_frame:0000000000008109                 db  10h
.eh_frame:000000000000810A                 db  42h ; B
.eh_frame:000000000000810B                 db  0Eh
.eh_frame:000000000000810C                 db    8
.eh_frame:000000000000810D                 db  46h ; F
.eh_frame:000000000000810E                 db  0Bh
.eh_frame:000000000000810F                 db  44h ; D
.eh_frame:0000000000008110                 db  0Eh
.eh_frame:0000000000008111                 db  38h ; 8
.eh_frame:0000000000008112                 db  46h ; F
.eh_frame:0000000000008113                 db  0Eh
.eh_frame:0000000000008114                 db  30h ; 0
.eh_frame:0000000000008115                 db  41h ; A
.eh_frame:0000000000008116                 db  0Eh
.eh_frame:0000000000008117                 db  28h ; (
.eh_frame:0000000000008118                 db  42h ; B
.eh_frame:0000000000008119                 db  0Eh
.eh_frame:000000000000811A                 db  20h
.eh_frame:000000000000811B                 db  42h ; B
.eh_frame:000000000000811C                 db  0Eh
.eh_frame:000000000000811D                 db  18h
.eh_frame:000000000000811E                 db  42h ; B
.eh_frame:000000000000811F                 db  0Eh
.eh_frame:0000000000008120                 db  10h
.eh_frame:0000000000008121                 db  42h ; B
.eh_frame:0000000000008122                 db  0Eh
.eh_frame:0000000000008123                 db    8
.eh_frame:0000000000008124                 db  48h ; H
.eh_frame:0000000000008125                 db    0
.eh_frame:0000000000008126                 db    0
.eh_frame:0000000000008127                 db    0
.eh_frame:0000000000008128                 db 0B0h
.eh_frame:0000000000008129                 db  0Ch
.eh_frame:000000000000812A                 db    0
.eh_frame:000000000000812B                 db    0
.eh_frame:000000000000812C                 db 0D4h
.eh_frame:000000000000812D                 db 0DFh
.eh_frame:000000000000812E                 db 0FFh
.eh_frame:000000000000812F                 db 0FFh
.eh_frame:0000000000008130                 db  6Dh ; m
.eh_frame:0000000000008131                 db    0
.eh_frame:0000000000008132                 db    0
.eh_frame:0000000000008133                 db    0
.eh_frame:0000000000008134                 db    0
.eh_frame:0000000000008135                 db  42h ; B
.eh_frame:0000000000008136                 db  0Eh
.eh_frame:0000000000008137                 db  10h
.eh_frame:0000000000008138                 db  8Fh
.eh_frame:0000000000008139                 db    2
.eh_frame:000000000000813A                 db  42h ; B
.eh_frame:000000000000813B                 db  0Eh
.eh_frame:000000000000813C                 db  18h
.eh_frame:000000000000813D                 db  8Eh
.eh_frame:000000000000813E                 db    3
.eh_frame:000000000000813F                 db  45h ; E
.eh_frame:0000000000008140                 db  0Eh
.eh_frame:0000000000008141                 db  20h
.eh_frame:0000000000008142                 db  8Dh
.eh_frame:0000000000008143                 db    4
.eh_frame:0000000000008144                 db  42h ; B
.eh_frame:0000000000008145                 db  0Eh
.eh_frame:0000000000008146                 db  28h ; (
.eh_frame:0000000000008147                 db  8Ch
.eh_frame:0000000000008148                 db    5
.eh_frame:0000000000008149                 db  44h ; D
.eh_frame:000000000000814A                 db  0Eh
.eh_frame:000000000000814B                 db  30h ; 0
.eh_frame:000000000000814C                 db  86h
.eh_frame:000000000000814D                 db    6
.eh_frame:000000000000814E                 db  41h ; A
.eh_frame:000000000000814F                 db  0Eh
.eh_frame:0000000000008150                 db  38h ; 8
.eh_frame:0000000000008151                 db  83h
.eh_frame:0000000000008152                 db    7
.eh_frame:0000000000008153                 db  50h ; P
.eh_frame:0000000000008154                 db  0Eh
.eh_frame:0000000000008155                 db  40h ; @
.eh_frame:0000000000008156                 db  5Ah ; Z
.eh_frame:0000000000008157                 db  0Ah
.eh_frame:0000000000008158                 db  0Eh
.eh_frame:0000000000008159                 db  38h ; 8
.eh_frame:000000000000815A                 db  41h ; A
.eh_frame:000000000000815B                 db  0Eh
.eh_frame:000000000000815C                 db  30h ; 0
.eh_frame:000000000000815D                 db  41h ; A
.eh_frame:000000000000815E                 db  0Eh
.eh_frame:000000000000815F                 db  28h ; (
.eh_frame:0000000000008160                 db  42h ; B
.eh_frame:0000000000008161                 db  0Eh
.eh_frame:0000000000008162                 db  20h
.eh_frame:0000000000008163                 db  42h ; B
.eh_frame:0000000000008164                 db  0Eh
.eh_frame:0000000000008165                 db  18h
.eh_frame:0000000000008166                 db  42h ; B
.eh_frame:0000000000008167                 db  0Eh
.eh_frame:0000000000008168                 db  10h
.eh_frame:0000000000008169                 db  42h ; B
.eh_frame:000000000000816A                 db  0Eh
.eh_frame:000000000000816B                 db    8
.eh_frame:000000000000816C                 db  41h ; A
.eh_frame:000000000000816D                 db  0Bh
.eh_frame:000000000000816E                 db    0
.eh_frame:000000000000816F                 db    0
.eh_frame:0000000000008170                 db  3Ch ; <
.eh_frame:0000000000008171                 db    0
.eh_frame:0000000000008172                 db    0
.eh_frame:0000000000008173                 db    0
.eh_frame:0000000000008174                 db 0FCh
.eh_frame:0000000000008175                 db  0Ch
.eh_frame:0000000000008176                 db    0
.eh_frame:0000000000008177                 db    0
.eh_frame:0000000000008178                 db 0F8h
.eh_frame:0000000000008179                 db 0DFh
.eh_frame:000000000000817A                 db 0FFh
.eh_frame:000000000000817B                 db 0FFh
.eh_frame:000000000000817C                 db  4Dh ; M
.eh_frame:000000000000817D                 db    0
.eh_frame:000000000000817E                 db    0
.eh_frame:000000000000817F                 db    0
.eh_frame:0000000000008180                 db    0
.eh_frame:0000000000008181                 db  42h ; B
.eh_frame:0000000000008182                 db  0Eh
.eh_frame:0000000000008183                 db  10h
.eh_frame:0000000000008184                 db  8Eh
.eh_frame:0000000000008185                 db    2
.eh_frame:0000000000008186                 db  42h ; B
.eh_frame:0000000000008187                 db  0Eh
.eh_frame:0000000000008188                 db  18h
.eh_frame:0000000000008189                 db  8Dh
.eh_frame:000000000000818A                 db    3
.eh_frame:000000000000818B                 db  42h ; B
.eh_frame:000000000000818C                 db  0Eh
.eh_frame:000000000000818D                 db  20h
.eh_frame:000000000000818E                 db  8Ch
.eh_frame:000000000000818F                 db    4
.eh_frame:0000000000008190                 db  41h ; A
.eh_frame:0000000000008191                 db  0Eh
.eh_frame:0000000000008192                 db  28h ; (
.eh_frame:0000000000008193                 db  86h
.eh_frame:0000000000008194                 db    5
.eh_frame:0000000000008195                 db  41h ; A
.eh_frame:0000000000008196                 db  0Eh
.eh_frame:0000000000008197                 db  30h ; 0
.eh_frame:0000000000008198                 db  83h
.eh_frame:0000000000008199                 db    6
.eh_frame:000000000000819A                 db  7Ah ; z
.eh_frame:000000000000819B                 db  0Eh
.eh_frame:000000000000819C                 db  28h ; (
.eh_frame:000000000000819D                 db  44h ; D
.eh_frame:000000000000819E                 db  0Eh
.eh_frame:000000000000819F                 db  20h
.eh_frame:00000000000081A0                 db  42h ; B
.eh_frame:00000000000081A1                 db  0Eh
.eh_frame:00000000000081A2                 db  18h
.eh_frame:00000000000081A3                 db  42h ; B
.eh_frame:00000000000081A4                 db  0Eh
.eh_frame:00000000000081A5                 db  10h
.eh_frame:00000000000081A6                 db  42h ; B
.eh_frame:00000000000081A7                 db  0Eh
.eh_frame:00000000000081A8                 db    8
.eh_frame:00000000000081A9                 db    0
.eh_frame:00000000000081AA                 db    0
.eh_frame:00000000000081AB                 db    0
.eh_frame:00000000000081AC                 db    0
.eh_frame:00000000000081AD                 db    0
.eh_frame:00000000000081AE                 db    0
.eh_frame:00000000000081AF                 db    0
.eh_frame:00000000000081B0                 db  4Ch ; L
.eh_frame:00000000000081B1                 db    0
.eh_frame:00000000000081B2                 db    0
.eh_frame:00000000000081B3                 db    0
.eh_frame:00000000000081B4                 db  3Ch ; <
.eh_frame:00000000000081B5                 db  0Dh
.eh_frame:00000000000081B6                 db    0
.eh_frame:00000000000081B7                 db    0
.eh_frame:00000000000081B8                 db    8
.eh_frame:00000000000081B9                 db 0E0h
.eh_frame:00000000000081BA                 db 0FFh
.eh_frame:00000000000081BB                 db 0FFh
.eh_frame:00000000000081BC                 db  7Dh ; }
.eh_frame:00000000000081BD                 db    0
.eh_frame:00000000000081BE                 db    0
.eh_frame:00000000000081BF                 db    0
.eh_frame:00000000000081C0                 db    0
.eh_frame:00000000000081C1                 db  42h ; B
.eh_frame:00000000000081C2                 db  0Eh
.eh_frame:00000000000081C3                 db  10h
.eh_frame:00000000000081C4                 db  8Ch
.eh_frame:00000000000081C5                 db    2
.eh_frame:00000000000081C6                 db  41h ; A
.eh_frame:00000000000081C7                 db  0Eh
.eh_frame:00000000000081C8                 db  18h
.eh_frame:00000000000081C9                 db  86h
.eh_frame:00000000000081CA                 db    3
.eh_frame:00000000000081CB                 db  44h ; D
.eh_frame:00000000000081CC                 db  0Eh
.eh_frame:00000000000081CD                 db  20h
.eh_frame:00000000000081CE                 db  83h
.eh_frame:00000000000081CF                 db    4
.eh_frame:00000000000081D0                 db  69h ; i
.eh_frame:00000000000081D1                 db  0Ah
.eh_frame:00000000000081D2                 db  0Eh
.eh_frame:00000000000081D3                 db  18h
.eh_frame:00000000000081D4                 db  41h ; A
.eh_frame:00000000000081D5                 db  0Eh
.eh_frame:00000000000081D6                 db  10h
.eh_frame:00000000000081D7                 db  42h ; B
.eh_frame:00000000000081D8                 db  0Eh
.eh_frame:00000000000081D9                 db    8
.eh_frame:00000000000081DA                 db  45h ; E
.eh_frame:00000000000081DB                 db  0Bh
.eh_frame:00000000000081DC                 db  55h ; U
.eh_frame:00000000000081DD                 db  0Ah
.eh_frame:00000000000081DE                 db  0Eh
.eh_frame:00000000000081DF                 db  18h
.eh_frame:00000000000081E0                 db  41h ; A
.eh_frame:00000000000081E1                 db  0Eh
.eh_frame:00000000000081E2                 db  10h
.eh_frame:00000000000081E3                 db  42h ; B
.eh_frame:00000000000081E4                 db  0Eh
.eh_frame:00000000000081E5                 db    8
.eh_frame:00000000000081E6                 db  48h ; H
.eh_frame:00000000000081E7                 db  0Bh
.eh_frame:00000000000081E8                 db  41h ; A
.eh_frame:00000000000081E9                 db  0Ah
.eh_frame:00000000000081EA                 db  0Eh
.eh_frame:00000000000081EB                 db  18h
.eh_frame:00000000000081EC                 db  46h ; F
.eh_frame:00000000000081ED                 db  0Eh
.eh_frame:00000000000081EE                 db  10h
.eh_frame:00000000000081EF                 db  42h ; B
.eh_frame:00000000000081F0                 db  0Eh
.eh_frame:00000000000081F1                 db    8
.eh_frame:00000000000081F2                 db  47h ; G
.eh_frame:00000000000081F3                 db  0Bh
.eh_frame:00000000000081F4                 db  49h ; I
.eh_frame:00000000000081F5                 db  0Eh
.eh_frame:00000000000081F6                 db  18h
.eh_frame:00000000000081F7                 db  41h ; A
.eh_frame:00000000000081F8                 db  0Eh
.eh_frame:00000000000081F9                 db  10h
.eh_frame:00000000000081FA                 db  42h ; B
.eh_frame:00000000000081FB                 db  0Eh
.eh_frame:00000000000081FC                 db    8
.eh_frame:00000000000081FD                 db    0
.eh_frame:00000000000081FE                 db    0
.eh_frame:00000000000081FF                 db    0
.eh_frame:0000000000008200                 db  1Ch
.eh_frame:0000000000008201                 db    0
.eh_frame:0000000000008202                 db    0
.eh_frame:0000000000008203                 db    0
.eh_frame:0000000000008204                 db  8Ch
.eh_frame:0000000000008205                 db  0Dh
.eh_frame:0000000000008206                 db    0
.eh_frame:0000000000008207                 db    0
.eh_frame:0000000000008208                 db  38h ; 8
.eh_frame:0000000000008209                 db 0E0h
.eh_frame:000000000000820A                 db 0FFh
.eh_frame:000000000000820B                 db 0FFh
.eh_frame:000000000000820C                 db  60h ; `
.eh_frame:000000000000820D                 db    0
.eh_frame:000000000000820E                 db    0
.eh_frame:000000000000820F                 db    0
.eh_frame:0000000000008210                 db    0
.eh_frame:0000000000008211                 db  44h ; D
.eh_frame:0000000000008212                 db  0Eh
.eh_frame:0000000000008213                 db  10h
.eh_frame:0000000000008214                 db  75h ; u
.eh_frame:0000000000008215                 db  0Ah
.eh_frame:0000000000008216                 db  0Eh
.eh_frame:0000000000008217                 db    8
.eh_frame:0000000000008218                 db  47h ; G
.eh_frame:0000000000008219                 db  0Bh
.eh_frame:000000000000821A                 db  5Fh ; _
.eh_frame:000000000000821B                 db  0Eh
.eh_frame:000000000000821C                 db    8
.eh_frame:000000000000821D                 db    0
.eh_frame:000000000000821E                 db    0
.eh_frame:000000000000821F                 db    0
.eh_frame:0000000000008220                 db  1Ch
.eh_frame:0000000000008221                 db    0
.eh_frame:0000000000008222                 db    0
.eh_frame:0000000000008223                 db    0
.eh_frame:0000000000008224                 db 0ACh
.eh_frame:0000000000008225                 db  0Dh
.eh_frame:0000000000008226                 db    0
.eh_frame:0000000000008227                 db    0
.eh_frame:0000000000008228                 db  78h ; x
.eh_frame:0000000000008229                 db 0E0h
.eh_frame:000000000000822A                 db 0FFh
.eh_frame:000000000000822B                 db 0FFh
.eh_frame:000000000000822C                 db  3Ch ; <
.eh_frame:000000000000822D                 db    0
.eh_frame:000000000000822E                 db    0
.eh_frame:000000000000822F                 db    0
.eh_frame:0000000000008230                 db    0
.eh_frame:0000000000008231                 db  44h ; D
.eh_frame:0000000000008232                 db  0Eh
.eh_frame:0000000000008233                 db  10h
.eh_frame:0000000000008234                 db  61h ; a
.eh_frame:0000000000008235                 db  0Ah
.eh_frame:0000000000008236                 db  0Eh
.eh_frame:0000000000008237                 db    8
.eh_frame:0000000000008238                 db  4Bh ; K
.eh_frame:0000000000008239                 db  0Bh
.eh_frame:000000000000823A                 db  4Bh ; K
.eh_frame:000000000000823B                 db  0Eh
.eh_frame:000000000000823C                 db    8
.eh_frame:000000000000823D                 db    0
.eh_frame:000000000000823E                 db    0
.eh_frame:000000000000823F                 db    0
.eh_frame:0000000000008240                 db  44h ; D
.eh_frame:0000000000008241                 db    0
.eh_frame:0000000000008242                 db    0
.eh_frame:0000000000008243                 db    0
.eh_frame:0000000000008244                 db 0CCh
.eh_frame:0000000000008245                 db  0Dh
.eh_frame:0000000000008246                 db    0
.eh_frame:0000000000008247                 db    0
.eh_frame:0000000000008248                 db  98h
.eh_frame:0000000000008249                 db 0E0h
.eh_frame:000000000000824A                 db 0FFh
.eh_frame:000000000000824B                 db 0FFh
.eh_frame:000000000000824C                 db  65h ; e
.eh_frame:000000000000824D                 db    0
.eh_frame:000000000000824E                 db    0
.eh_frame:000000000000824F                 db    0
.eh_frame:0000000000008250                 db    0
.eh_frame:0000000000008251                 db  42h ; B
.eh_frame:0000000000008252                 db  0Eh
.eh_frame:0000000000008253                 db  10h
.eh_frame:0000000000008254                 db  8Fh
.eh_frame:0000000000008255                 db    2
.eh_frame:0000000000008256                 db  42h ; B
.eh_frame:0000000000008257                 db  0Eh
.eh_frame:0000000000008258                 db  18h
.eh_frame:0000000000008259                 db  8Eh
.eh_frame:000000000000825A                 db    3
.eh_frame:000000000000825B                 db  45h ; E
.eh_frame:000000000000825C                 db  0Eh
.eh_frame:000000000000825D                 db  20h
.eh_frame:000000000000825E                 db  8Dh
.eh_frame:000000000000825F                 db    4
.eh_frame:0000000000008260                 db  42h ; B
.eh_frame:0000000000008261                 db  0Eh
.eh_frame:0000000000008262                 db  28h ; (
.eh_frame:0000000000008263                 db  8Ch
.eh_frame:0000000000008264                 db    5
.eh_frame:0000000000008265                 db  48h ; H
.eh_frame:0000000000008266                 db  0Eh
.eh_frame:0000000000008267                 db  30h ; 0
.eh_frame:0000000000008268                 db  86h
.eh_frame:0000000000008269                 db    6
.eh_frame:000000000000826A                 db  48h ; H
.eh_frame:000000000000826B                 db  0Eh
.eh_frame:000000000000826C                 db  38h ; 8
.eh_frame:000000000000826D                 db  83h
.eh_frame:000000000000826E                 db    7
.eh_frame:000000000000826F                 db  4Dh ; M
.eh_frame:0000000000008270                 db  0Eh
.eh_frame:0000000000008271                 db  40h ; @
.eh_frame:0000000000008272                 db  72h ; r
.eh_frame:0000000000008273                 db  0Eh
.eh_frame:0000000000008274                 db  38h ; 8
.eh_frame:0000000000008275                 db  41h ; A
.eh_frame:0000000000008276                 db  0Eh
.eh_frame:0000000000008277                 db  30h ; 0
.eh_frame:0000000000008278                 db  41h ; A
.eh_frame:0000000000008279                 db  0Eh
.eh_frame:000000000000827A                 db  28h ; (
.eh_frame:000000000000827B                 db  42h ; B
.eh_frame:000000000000827C                 db  0Eh
.eh_frame:000000000000827D                 db  20h
.eh_frame:000000000000827E                 db  42h ; B
.eh_frame:000000000000827F                 db  0Eh
.eh_frame:0000000000008280                 db  18h
.eh_frame:0000000000008281                 db  42h ; B
.eh_frame:0000000000008282                 db  0Eh
.eh_frame:0000000000008283                 db  10h
.eh_frame:0000000000008284                 db  42h ; B
.eh_frame:0000000000008285                 db  0Eh
.eh_frame:0000000000008286                 db    8
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db  14h
.eh_frame:0000000000008289                 db    0
.eh_frame:000000000000828A                 db    0
.eh_frame:000000000000828B                 db    0
.eh_frame:000000000000828C                 db  14h
.eh_frame:000000000000828D                 db  0Eh
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db 0C0h
.eh_frame:0000000000008291                 db 0E0h
.eh_frame:0000000000008292                 db 0FFh
.eh_frame:0000000000008293                 db 0FFh
.eh_frame:0000000000008294                 db    2
.eh_frame:0000000000008295                 db    0
.eh_frame:0000000000008296                 db    0
.eh_frame:0000000000008297                 db    0
.eh_frame:0000000000008298                 db    0
.eh_frame:0000000000008299                 db    0
.eh_frame:000000000000829A                 db    0
.eh_frame:000000000000829B                 db    0
.eh_frame:000000000000829C                 db    0
.eh_frame:000000000000829D                 db    0
.eh_frame:000000000000829E                 db    0
.eh_frame:000000000000829F                 db    0
.eh_frame:00000000000082A0                 db  10h
.eh_frame:00000000000082A1                 db    0
.eh_frame:00000000000082A2                 db    0
.eh_frame:00000000000082A3                 db    0
.eh_frame:00000000000082A4                 db  2Ch ; ,
.eh_frame:00000000000082A5                 db  0Eh
.eh_frame:00000000000082A6                 db    0
.eh_frame:00000000000082A7                 db    0
.eh_frame:00000000000082A8                 db 0B8h
.eh_frame:00000000000082A9                 db 0E0h
.eh_frame:00000000000082AA                 db 0FFh
.eh_frame:00000000000082AB                 db 0FFh
.eh_frame:00000000000082AC                 db  0Eh
.eh_frame:00000000000082AD                 db    0
.eh_frame:00000000000082AE                 db    0
.eh_frame:00000000000082AF                 db    0
.eh_frame:00000000000082B0                 db    0
.eh_frame:00000000000082B1                 db    0
.eh_frame:00000000000082B2                 db    0
.eh_frame:00000000000082B3                 db    0
.eh_frame:00000000000082B4 __FRAME_END__   db    0
.eh_frame:00000000000082B5                 db    0
.eh_frame:00000000000082B6                 db    0
.eh_frame:00000000000082B7                 db    0
.eh_frame:00000000000082B7 _eh_frame       ends
.eh_frame:00000000000082B7
.init_array:0000000000208B10 ; ELF Initialization Function Table
.init_array:0000000000208B10 ; ===========================================================================
.init_array:0000000000208B10
.init_array:0000000000208B10 ; Segment type: Pure data
.init_array:0000000000208B10 ; Segment permissions: Read/Write
.init_array:0000000000208B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208B10                 assume cs:_init_array
.init_array:0000000000208B10                 ;org 208B10h
.init_array:0000000000208B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208B10
.fini_array:0000000000208B18 ; ELF Termination Function Table
.fini_array:0000000000208B18 ; ===========================================================================
.fini_array:0000000000208B18
.fini_array:0000000000208B18 ; Segment type: Pure data
.fini_array:0000000000208B18 ; Segment permissions: Read/Write
.fini_array:0000000000208B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208B18                 assume cs:_fini_array
.fini_array:0000000000208B18                 ;org 208B18h
.fini_array:0000000000208B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208B18
.data.rel.ro:0000000000208B20 ; ===========================================================================
.data.rel.ro:0000000000208B20
.data.rel.ro:0000000000208B20 ; Segment type: Pure data
.data.rel.ro:0000000000208B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208B20                 ;org 208B20h
.data.rel.ro:0000000000208B20 ; struct option longopts
.data.rel.ro:0000000000208B20 longopts        dq offset aSysv         ; name
.data.rel.ro:0000000000208B20                                         ; DATA XREF: main+4↑o
.data.rel.ro:0000000000208B20                 dd 0                    ; has_arg ; "sysv"
.data.rel.ro:0000000000208B20                 db 4 dup(0)
.data.rel.ro:0000000000208B20                 dq 0                    ; flag
.data.rel.ro:0000000000208B20                 dd 73h                  ; val
.data.rel.ro:0000000000208B20                 db 4 dup(0)
.data.rel.ro:0000000000208B40                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B48                 db    0
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  7Eh ; ~
.data.rel.ro:0000000000208B59                 db 0FFh
.data.rel.ro:0000000000208B5A                 db 0FFh
.data.rel.ro:0000000000208B5B                 db 0FFh
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db  7Dh ; }
.data.rel.ro:0000000000208B79                 db 0FFh
.data.rel.ro:0000000000208B7A                 db 0FFh
.data.rel.ro:0000000000208B7B                 db 0FFh
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 db    0
.data.rel.ro:0000000000208B81                 db    0
.data.rel.ro:0000000000208B82                 db    0
.data.rel.ro:0000000000208B83                 db    0
.data.rel.ro:0000000000208B84                 db    0
.data.rel.ro:0000000000208B85                 db    0
.data.rel.ro:0000000000208B86                 db    0
.data.rel.ro:0000000000208B87                 db    0
.data.rel.ro:0000000000208B88                 db    0
.data.rel.ro:0000000000208B89                 db    0
.data.rel.ro:0000000000208B8A                 db    0
.data.rel.ro:0000000000208B8B                 db    0
.data.rel.ro:0000000000208B8C                 db    0
.data.rel.ro:0000000000208B8D                 db    0
.data.rel.ro:0000000000208B8E                 db    0
.data.rel.ro:0000000000208B8F                 db    0
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B98                 db    0
.data.rel.ro:0000000000208B99                 db    0
.data.rel.ro:0000000000208B9A                 db    0
.data.rel.ro:0000000000208B9B                 db    0
.data.rel.ro:0000000000208B9C                 db    0
.data.rel.ro:0000000000208B9D                 db    0
.data.rel.ro:0000000000208B9E                 db    0
.data.rel.ro:0000000000208B9F                 db    0
.data.rel.ro:0000000000208BA0 block_size_args dq offset aHumanReadable
.data.rel.ro:0000000000208BA0                                         ; DATA XREF: human_options+43↑o
.data.rel.ro:0000000000208BA0                                         ; "human-readable"
.data.rel.ro:0000000000208BA8                 dq offset off_6737
.data.rel.ro:0000000000208BB0                 align 20h
.data.rel.ro:0000000000208BC0                 public quoting_style_args
.data.rel.ro:0000000000208BC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208BC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208BD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208BD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208BE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208BE8                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000208BF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208BF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208C00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208C08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208C10                 db    0
.data.rel.ro:0000000000208C11                 db    0
.data.rel.ro:0000000000208C12                 db    0
.data.rel.ro:0000000000208C13                 db    0
.data.rel.ro:0000000000208C14                 db    0
.data.rel.ro:0000000000208C15                 db    0
.data.rel.ro:0000000000208C16                 db    0
.data.rel.ro:0000000000208C17                 db    0
.data.rel.ro:0000000000208C17 _data_rel_ro    ends
.data.rel.ro:0000000000208C17
LOAD:0000000000208C18 ; ELF Dynamic Information
LOAD:0000000000208C18 ; ===========================================================================
LOAD:0000000000208C18
LOAD:0000000000208C18 ; Segment type: Pure data
LOAD:0000000000208C18 ; Segment permissions: Read/Write
LOAD:0000000000208C18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208C18                 assume cs:LOAD
LOAD:0000000000208C18                 ;org 208C18h
LOAD:0000000000208C18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208C18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208C18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208C28                 Elf64_Dyn <0Ch, 1598h>  ; DT_INIT
LOAD:0000000000208C38                 Elf64_Dyn <0Dh, 6370h>  ; DT_FINI
LOAD:0000000000208C48                 Elf64_Dyn <19h, 208B10h> ; DT_INIT_ARRAY
LOAD:0000000000208C58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C68                 Elf64_Dyn <1Ah, 208B18h> ; DT_FINI_ARRAY
LOAD:0000000000208C78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208C88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208C98                 Elf64_Dyn <5, 958h>     ; DT_STRTAB
LOAD:0000000000208CA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208CB8                 Elf64_Dyn <0Ah, 30Fh>   ; DT_STRSZ
LOAD:0000000000208CC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208CD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208CE8                 Elf64_Dyn <3, 208E08h>  ; DT_PLTGOT
LOAD:0000000000208CF8                 Elf64_Dyn <2, 528h>     ; DT_PLTRELSZ
LOAD:0000000000208D08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208D18                 Elf64_Dyn <17h, 1070h>  ; DT_JMPREL
LOAD:0000000000208D28                 Elf64_Dyn <7, 0D58h>    ; DT_RELA
LOAD:0000000000208D38                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000208D48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D78                 Elf64_Dyn <6FFFFFFEh, 0CF8h> ; DT_VERNEED
LOAD:0000000000208D88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208D98                 Elf64_Dyn <6FFFFFF0h, 0C68h> ; DT_VERSYM
LOAD:0000000000208DA8                 Elf64_Dyn <6FFFFFF9h, 16h> ; DT_RELACOUNT
LOAD:0000000000208DB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208DC8                 db    0
LOAD:0000000000208DC9                 db    0
LOAD:0000000000208DCA                 db    0
LOAD:0000000000208DCB                 db    0
LOAD:0000000000208DCC                 db    0
LOAD:0000000000208DCD                 db    0
LOAD:0000000000208DCE                 db    0
LOAD:0000000000208DCF                 db    0
LOAD:0000000000208DD0                 db    0
LOAD:0000000000208DD1                 db    0
LOAD:0000000000208DD2                 db    0
LOAD:0000000000208DD3                 db    0
LOAD:0000000000208DD4                 db    0
LOAD:0000000000208DD5                 db    0
LOAD:0000000000208DD6                 db    0
LOAD:0000000000208DD7                 db    0
LOAD:0000000000208DD8                 db    0
LOAD:0000000000208DD9                 db    0
LOAD:0000000000208DDA                 db    0
LOAD:0000000000208DDB                 db    0
LOAD:0000000000208DDC                 db    0
LOAD:0000000000208DDD                 db    0
LOAD:0000000000208DDE                 db    0
LOAD:0000000000208DDF                 db    0
LOAD:0000000000208DE0                 db    0
LOAD:0000000000208DE1                 db    0
LOAD:0000000000208DE2                 db    0
LOAD:0000000000208DE3                 db    0
LOAD:0000000000208DE4                 db    0
LOAD:0000000000208DE5                 db    0
LOAD:0000000000208DE6                 db    0
LOAD:0000000000208DE7                 db    0
LOAD:0000000000208DE8                 db    0
LOAD:0000000000208DE9                 db    0
LOAD:0000000000208DEA                 db    0
LOAD:0000000000208DEB                 db    0
LOAD:0000000000208DEC                 db    0
LOAD:0000000000208DED                 db    0
LOAD:0000000000208DEE                 db    0
LOAD:0000000000208DEF                 db    0
LOAD:0000000000208DF0                 db    0
LOAD:0000000000208DF1                 db    0
LOAD:0000000000208DF2                 db    0
LOAD:0000000000208DF3                 db    0
LOAD:0000000000208DF4                 db    0
LOAD:0000000000208DF5                 db    0
LOAD:0000000000208DF6                 db    0
LOAD:0000000000208DF7                 db    0
LOAD:0000000000208DF8                 db    0
LOAD:0000000000208DF9                 db    0
LOAD:0000000000208DFA                 db    0
LOAD:0000000000208DFB                 db    0
LOAD:0000000000208DFC                 db    0
LOAD:0000000000208DFD                 db    0
LOAD:0000000000208DFE                 db    0
LOAD:0000000000208DFF                 db    0
LOAD:0000000000208E00                 db    0
LOAD:0000000000208E01                 db    0
LOAD:0000000000208E02                 db    0
LOAD:0000000000208E03                 db    0
LOAD:0000000000208E04                 db    0
LOAD:0000000000208E05                 db    0
LOAD:0000000000208E06                 db    0
LOAD:0000000000208E07                 db    0
LOAD:0000000000208E07 LOAD            ends
LOAD:0000000000208E07
.got:0000000000208E08 ; ===========================================================================
.got:0000000000208E08
.got:0000000000208E08 ; Segment type: Pure data
.got:0000000000208E08 ; Segment permissions: Read/Write
.got:0000000000208E08 _got            segment qword public 'DATA' use64
.got:0000000000208E08                 assume cs:_got
.got:0000000000208E08                 ;org 208E08h
.got:0000000000208E08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208E10 qword_208E10    dq 0                    ; DATA XREF: sub_15B0↑r
.got:0000000000208E18 qword_208E18    dq 0                    ; DATA XREF: sub_15B0+6↑r
.got:0000000000208E20 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000208E28 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000208E30 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208E38 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E40 __errno_location_ptr dq offset __errno_location
.got:0000000000208E40                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E48 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E50 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E58 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E60 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:0000000000208E68 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E70 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E78 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E78                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E80 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E88 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E88                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208E90 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208E98 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208E98                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208EA0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208EA8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208EB0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000208EB8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000208EC0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208EC8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208ED0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000208ED0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000208ED8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000208ED8                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000208EE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208EE8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000208EF0 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000208EF0                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000208EF8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000208F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208F18 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:0000000000208F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F68 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:0000000000208F70 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000208F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F80 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000208F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F90 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000208F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FD0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000208FD0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000208FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FE0                                         ; DATA XREF: start+24↑r
.got:0000000000208FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FF8 _got            ends
.got:0000000000208FF8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010                 public Version
.data:0000000000209010 Version         dq offset a831          ; DATA XREF: main+E6↑r
.data:0000000000209010                                         ; "8.31"
.data:0000000000209018                 public exit_failure
.data:0000000000209018 ; int exit_failure
.data:0000000000209018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_24E2↑r
.data:0000000000209018                                         ; xalloc_die+17↑r
.data:000000000020901C                 align 20h
.data:0000000000209020                 public quote_quoting_options
.data:0000000000209020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209020                                         ; quote_mem↑o ...
.data:0000000000209021                 db    0
.data:0000000000209022                 db    0
.data:0000000000209023                 db    0
.data:0000000000209024                 db    0
.data:0000000000209025                 db    0
.data:0000000000209026                 db    0
.data:0000000000209027                 db    0
.data:0000000000209028                 db    0
.data:0000000000209029                 db    0
.data:000000000020902A                 db    0
.data:000000000020902B                 db    0
.data:000000000020902C                 db    0
.data:000000000020902D                 db    0
.data:000000000020902E                 db    0
.data:000000000020902F                 db    0
.data:0000000000209030                 db    0
.data:0000000000209031                 db    0
.data:0000000000209032                 db    0
.data:0000000000209033                 db    0
.data:0000000000209034                 db    0
.data:0000000000209035                 db    0
.data:0000000000209036                 db    0
.data:0000000000209037                 db    0
.data:0000000000209038                 db    0
.data:0000000000209039                 db    0
.data:000000000020903A                 db    0
.data:000000000020903B                 db    0
.data:000000000020903C                 db    0
.data:000000000020903D                 db    0
.data:000000000020903E                 db    0
.data:000000000020903F                 db    0
.data:0000000000209040                 db    0
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209058                                         ; quotearg_n_options:loc_466D↑r ...
.data:000000000020905C                 align 20h
.data:0000000000209060 ; void *slotvec
.data:0000000000209060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209060                                         ; quotearg_n_options+76↑w ...
.data:0000000000209068                 align 10h
.data:0000000000209070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209070                                         ; quotearg_n_options+187↑r ...
.data:0000000000209078 off_209078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209080                 public argmatch_die
.data:0000000000209080 argmatch_die    dq offset __argmatch_die
.data:0000000000209080 _data           ends
.data:0000000000209080
LOAD:0000000000209088 ; ===========================================================================
LOAD:0000000000209088
LOAD:0000000000209088 ; Segment type: Pure data
LOAD:0000000000209088 ; Segment permissions: Read/Write
LOAD:0000000000209088 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209088                 assume cs:LOAD
LOAD:0000000000209088                 ;org 209088h
LOAD:0000000000209088                 public __bss_start
LOAD:0000000000209088 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:0000000000209088                                         ; deregister_tm_clones+8↑o ...
LOAD:0000000000209088                                         ; Alternative name is '_edata'
LOAD:0000000000209088                                         ; __TMC_END__
LOAD:0000000000209088                                         ; _edata
LOAD:0000000000209089                 db    ? ;
LOAD:000000000020908A                 db    ? ;
LOAD:000000000020908B                 db    ? ;
LOAD:000000000020908C                 db    ? ;
LOAD:000000000020908D                 db    ? ;
LOAD:000000000020908E                 db    ? ;
LOAD:000000000020908F                 db    ? ;
LOAD:0000000000209090                 db    ? ;
LOAD:0000000000209091                 db    ? ;
LOAD:0000000000209092                 db    ? ;
LOAD:0000000000209093                 db    ? ;
LOAD:0000000000209094                 db    ? ;
LOAD:0000000000209095                 db    ? ;
LOAD:0000000000209096                 db    ? ;
LOAD:0000000000209097                 db    ? ;
LOAD:0000000000209098                 db    ? ;
LOAD:0000000000209099                 db    ? ;
LOAD:000000000020909A                 db    ? ;
LOAD:000000000020909B                 db    ? ;
LOAD:000000000020909C                 db    ? ;
LOAD:000000000020909D                 db    ? ;
LOAD:000000000020909E                 db    ? ;
LOAD:000000000020909F                 db    ? ;
LOAD:000000000020909F LOAD            ends
LOAD:000000000020909F
.bss:00000000002090A0 ; ===========================================================================
.bss:00000000002090A0
.bss:00000000002090A0 ; Segment type: Uninitialized
.bss:00000000002090A0 ; Segment permissions: Read/Write
.bss:00000000002090A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002090A0                 assume cs:_bss
.bss:00000000002090A0                 ;org 2090A0h
.bss:00000000002090A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002090A0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090A0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090A0                                         ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002090A0                                         ; LOAD:0000000000000910↑o ...
.bss:00000000002090A0                                         ; Alternative name is '__progname'
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002090A8 ; FILE *stdout
.bss:00000000002090A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002090A8                                         ; main+6F↑r ...
.bss:00000000002090A8                                         ; Alternative name is 'stdout'
.bss:00000000002090A8                                         ; Copy of shared data
.bss:00000000002090B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002090B0 ; _IO_FILE *stdin
.bss:00000000002090B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000008C8↑o
.bss:00000000002090B0                                         ; main:loc_1AA4↑r ...
.bss:00000000002090B0                                         ; Alternative name is 'stdin'
.bss:00000000002090B0                                         ; Copy of shared data
.bss:00000000002090B8                 public optind@@GLIBC_2_2_5
.bss:00000000002090B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000940↑o
.bss:00000000002090B8                                         ; main+12B↑r ...
.bss:00000000002090B8                                         ; Alternative name is 'optind'
.bss:00000000002090B8                                         ; Copy of shared data
.bss:00000000002090BC                 align 20h
.bss:00000000002090C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090C0                                         ; DATA XREF: LOAD:00000000000008E0↑o
.bss:00000000002090C0                                         ; LOAD:00000000000008F8↑o ...
.bss:00000000002090C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8                 align 20h
.bss:00000000002090E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090E0 ; FILE *stderr
.bss:00000000002090E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:00000000002090E0                                         ; usage+3D↑r ...
.bss:00000000002090E0                                         ; Alternative name is 'stderr'
.bss:00000000002090E0                                         ; Copy of shared data
.bss:00000000002090E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090E9 have_read_stdin db ?                    ; DATA XREF: main+84↑w
.bss:00000000002090E9                                         ; main:loc_1A87↑r ...
.bss:00000000002090EA                 align 10h
.bss:00000000002090F0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002090F0                                         ; close_stdout+1B↑r
.bss:00000000002090F1                 align 8
.bss:00000000002090F8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002090F8                                         ; close_stdout+56↑r
.bss:0000000000209100                 public program_name
.bss:0000000000209100 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000209100                                         ; set_program_name:loc_328D↑w
.bss:0000000000209108                 align 20h
.bss:0000000000209120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209120                                         ; quotearg_free+46↑o ...
.bss:0000000000209121                 db    ? ;
.bss:0000000000209122                 db    ? ;
.bss:0000000000209123                 db    ? ;
.bss:0000000000209124                 db    ? ;
.bss:0000000000209125                 db    ? ;
.bss:0000000000209126                 db    ? ;
.bss:0000000000209127                 db    ? ;
.bss:0000000000209128                 db    ? ;
.bss:0000000000209129                 db    ? ;
.bss:000000000020912A                 db    ? ;
.bss:000000000020912B                 db    ? ;
.bss:000000000020912C                 db    ? ;
.bss:000000000020912D                 db    ? ;
.bss:000000000020912E                 db    ? ;
.bss:000000000020912F                 db    ? ;
.bss:0000000000209130                 db    ? ;
.bss:0000000000209131                 db    ? ;
.bss:0000000000209132                 db    ? ;
.bss:0000000000209133                 db    ? ;
.bss:0000000000209134                 db    ? ;
.bss:0000000000209135                 db    ? ;
.bss:0000000000209136                 db    ? ;
.bss:0000000000209137                 db    ? ;
.bss:0000000000209138                 db    ? ;
.bss:0000000000209139                 db    ? ;
.bss:000000000020913A                 db    ? ;
.bss:000000000020913B                 db    ? ;
.bss:000000000020913C                 db    ? ;
.bss:000000000020913D                 db    ? ;
.bss:000000000020913E                 db    ? ;
.bss:000000000020913F                 db    ? ;
.bss:0000000000209140                 db    ? ;
.bss:0000000000209141                 db    ? ;
.bss:0000000000209142                 db    ? ;
.bss:0000000000209143                 db    ? ;
.bss:0000000000209144                 db    ? ;
.bss:0000000000209145                 db    ? ;
.bss:0000000000209146                 db    ? ;
.bss:0000000000209147                 db    ? ;
.bss:0000000000209148                 db    ? ;
.bss:0000000000209149                 db    ? ;
.bss:000000000020914A                 db    ? ;
.bss:000000000020914B                 db    ? ;
.bss:000000000020914C                 db    ? ;
.bss:000000000020914D                 db    ? ;
.bss:000000000020914E                 db    ? ;
.bss:000000000020914F                 db    ? ;
.bss:0000000000209150                 db    ? ;
.bss:0000000000209151                 db    ? ;
.bss:0000000000209152                 db    ? ;
.bss:0000000000209153                 db    ? ;
.bss:0000000000209154                 db    ? ;
.bss:0000000000209155                 db    ? ;
.bss:0000000000209156                 db    ? ;
.bss:0000000000209157                 db    ? ;
.bss:0000000000209158                 db    ? ;
.bss:0000000000209159                 db    ? ;
.bss:000000000020915A                 db    ? ;
.bss:000000000020915B                 db    ? ;
.bss:000000000020915C                 db    ? ;
.bss:000000000020915D                 db    ? ;
.bss:000000000020915E                 db    ? ;
.bss:000000000020915F                 db    ? ;
.bss:0000000000209160                 db    ? ;
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200                 db    ? ;
.bss:0000000000209201                 db    ? ;
.bss:0000000000209202                 db    ? ;
.bss:0000000000209203                 db    ? ;
.bss:0000000000209204                 db    ? ;
.bss:0000000000209205                 db    ? ;
.bss:0000000000209206                 db    ? ;
.bss:0000000000209207                 db    ? ;
.bss:0000000000209208                 db    ? ;
.bss:0000000000209209                 db    ? ;
.bss:000000000020920A                 db    ? ;
.bss:000000000020920B                 db    ? ;
.bss:000000000020920C                 db    ? ;
.bss:000000000020920D                 db    ? ;
.bss:000000000020920E                 db    ? ;
.bss:000000000020920F                 db    ? ;
.bss:0000000000209210                 db    ? ;
.bss:0000000000209211                 db    ? ;
.bss:0000000000209212                 db    ? ;
.bss:0000000000209213                 db    ? ;
.bss:0000000000209214                 db    ? ;
.bss:0000000000209215                 db    ? ;
.bss:0000000000209216                 db    ? ;
.bss:0000000000209217                 db    ? ;
.bss:0000000000209218                 db    ? ;
.bss:0000000000209219                 db    ? ;
.bss:000000000020921A                 db    ? ;
.bss:000000000020921B                 db    ? ;
.bss:000000000020921C                 db    ? ;
.bss:000000000020921D                 db    ? ;
.bss:000000000020921E                 db    ? ;
.bss:000000000020921F                 db    ? ;
.bss:0000000000209220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209220                                         ; get_quoting_style↑o ...
.bss:0000000000209230 xmmword_209230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209230                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209240 xmmword_209240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209240                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209250 qword_209250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209250                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209250 _bss            ends
.bss:0000000000209250
.prgend:0000000000209258 ; ===========================================================================
.prgend:0000000000209258
.prgend:0000000000209258 ; Segment type: Zero-length
.prgend:0000000000209258 _prgend         segment byte public '' use64
.prgend:0000000000209258 _end            label byte
.prgend:0000000000209258 _prgend         ends
.prgend:0000000000209258
extern:0000000000209260 ; ===========================================================================
extern:0000000000209260
extern:0000000000209260 ; Segment type: Externs
extern:0000000000209260 ; extern
extern:0000000000209260 ; int _uflow(_IO_FILE *)
extern:0000000000209260                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:0000000000209260                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:0000000000209268 ; char *getenv(const char *name)
extern:0000000000209268                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000209268                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000209270 ; void free(void *ptr)
extern:0000000000209270                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000209270                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000209278 ; void __noreturn abort(void)
extern:0000000000209278                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000209278                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000209280 ; int *_errno_location(void)
extern:0000000000209280                 extrn __errno_location:near
extern:0000000000209280                                         ; CODE XREF: ___errno_location↑j
extern:0000000000209280                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000209288 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000209288                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000209288                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000209290 ; void __noreturn exit(int status)
extern:0000000000209290                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000209290                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000209298 ; size_t _fpending(FILE *fp)
extern:0000000000209298                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000209298                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002092A0 ; struct lconv *localeconv(void)
extern:00000000002092A0                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:00000000002092A0                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:00000000002092A8 ; char *textdomain(const char *domainname)
extern:00000000002092A8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002092A8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002092B0 ; int fclose(FILE *stream)
extern:00000000002092B0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002092B0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002092B8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002092B8                 extrn bindtextdomain:near
extern:00000000002092B8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002092B8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002092C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002092C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002092C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002092C8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002092C8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002092C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002092C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002092D0 ; size_t strlen(const char *s)
extern:00000000002092D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002092D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002092D8                 extrn __stack_chk_fail:near
extern:00000000002092D8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002092D8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002092E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002092E0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002092E0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002092E8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002092E8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002092E8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002092F0 ; char *strchr(const char *s, int c)
extern:00000000002092F0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002092F0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002092F8 ; int _overflow(_IO_FILE *, int)
extern:00000000002092F8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002092F8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000209300 ; char *strrchr(const char *s, int c)
extern:0000000000209300                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000209300                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000209308 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000209308                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000209308                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000209310 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000209310                 extrn __assert_fail:near
extern:0000000000209310                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000209310                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000209318 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000209318                 extrn __strtoul_internal:near
extern:0000000000209318                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000209318                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:0000000000209320 ; void *memset(void *s, int c, size_t n)
extern:0000000000209320                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000209320                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000209328 ; int close(int fd)
extern:0000000000209328                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000209328                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000209330 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000209330                 extrn posix_fadvise:near
extern:0000000000209330                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000209330                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000209338 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:0000000000209338                 extrn read:near         ; CODE XREF: _read↑j
extern:0000000000209338                                         ; DATA XREF: .got:read_ptr↑o
extern:0000000000209340 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209340                 extrn __libc_start_main:near
extern:0000000000209340                                         ; CODE XREF: start+24↑p
extern:0000000000209340                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209348 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209348                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209348                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209350 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209350                 extrn fputs_unlocked:near
extern:0000000000209350                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209350                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209358 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209358                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209358                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209360                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:0000000000209360                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:0000000000209368 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000209368                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000209368                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000209370 ; int fileno(FILE *stream)
extern:0000000000209370                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000209370                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000209378 ; void *malloc(size_t size)
extern:0000000000209378                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000209378                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000209380 ; int fflush(FILE *stream)
extern:0000000000209380                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000209380                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000209388 ; char *nl_langinfo(nl_item item)
extern:0000000000209388                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000209388                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000209390 ; int _freading(FILE *fp)
extern:0000000000209390                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000209390                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000209398 ; void *realloc(void *ptr, size_t size)
extern:0000000000209398                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000209398                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002093A0 ; char *setlocale(int category, const char *locale)
extern:00000000002093A0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002093A0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002093A8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002093A8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002093B0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:00000000002093B0                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:00000000002093B0                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:00000000002093B8 ; void *memmove(void *dest, const void *src, size_t n)
extern:00000000002093B8                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:00000000002093B8                                         ; DATA XREF: .got:memmove_ptr↑o
extern:00000000002093C0 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002093C0                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002093C0                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002093C8 ; int open(const char *file, int oflag, ...)
extern:00000000002093C8                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002093C8                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002093D0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002093D0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002093D0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002093D8 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002093D8                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002093D8                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002093E0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002093E0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002093E0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002093E8 ; void __noreturn exit(int status)
extern:00000000002093E8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002093E8                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002093F0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002093F0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002093F0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002093F8                 extrn __fprintf_chk:near
extern:00000000002093F8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002093F8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000209400 ; int mbsinit(const mbstate_t *ps)
extern:0000000000209400                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000209400                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000209408 ; int iswprint(wint_t wc)
extern:0000000000209408                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000209408                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000209410 ; int __fastcall __cxa_finalize(void *)
extern:0000000000209410                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000209410                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000209410                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000209418 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000209418                 extrn __ctype_b_loc:near
extern:0000000000209418                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000209418                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000209420                 extrn __sprintf_chk:near
extern:0000000000209420                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000209420                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000209428                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000209428                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000209430                 extrn __gmon_start__:near ; weak
extern:0000000000209430                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000209430                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000209438                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000209438                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000209438
extern:0000000000209438
extern:0000000000209438                 end start
