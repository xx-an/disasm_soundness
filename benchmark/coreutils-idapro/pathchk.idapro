LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A39DD8CD8830E533F43019E266241CD29D8EAD632BAFB0738FCEA44FE56EC5DB
LOAD:0000000000000000 ; Input MD5    : F22A064D1F64E24AE604E2834AB074D4
LOAD:0000000000000000 ; Input CRC32  : ADD8D214
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/pathchk
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'pathchk.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrlen.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 23AE0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6540h                ; Size in file image
LOAD:00000000000000D8                 dq 6540h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B90h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4F0h                 ; Size in file image
LOAD:0000000000000110                 dq 690h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5830h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5830h                ; Physical address
LOAD:00000000000001B0                 dq 244h                 ; Size in file image
LOAD:00000000000001B8                 dq 244h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B90h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B90h              ; Physical address
LOAD:0000000000000220                 dq 470h                 ; Size in file image
LOAD:0000000000000228                 dq 470h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0F2h, 7Bh, 2 dup(5), 0B2h, 1Bh, 0C0h, 15h, 9Ah, 0B3h ; Desc
LOAD:0000000000000284                 db 0F2h, 0C3h, 0ABh, 5Eh, 0Ah, 0F5h, 9Ah, 8Bh, 0Dh, 78h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 31h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 31h, 32h, 37h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_818, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_818, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_818, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_818, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_818, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_818, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_818, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_818, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aPathconf - offset byte_818, 12h, 0, 0, \ ; "pathconf"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aFclose - offset byte_818, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain - offset byte_818, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aDcgettext - offset byte_818, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_818, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStrlen - offset byte_818, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aLxstat - offset byte_818, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStackChkFail - offset byte_818, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aGetoptLong - offset byte_818, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aMbrtowc - offset byte_818, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aStrchr - offset byte_818, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStrrchr - offset byte_818, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aLseek - offset byte_818, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D0                            0>
LOAD:00000000000004E8                 Elf64_Sym <offset aMemset - offset byte_818, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aStrspn - offset byte_818, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aLibcStartMain - offset byte_818, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aMemcmp - offset byte_818, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aFputsUnlocked - offset byte_818, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aCalloc - offset byte_818, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aGmonStart - offset byte_818, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aMemcpy - offset byte_818, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aFileno - offset byte_818, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMalloc - offset byte_818, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFflush - offset byte_818, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aNlLanginfo - offset byte_818, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aFreading - offset byte_818, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aRealloc - offset byte_818, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aSetlocale - offset byte_818, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aPrintfChk - offset byte_818, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aError - offset byte_818, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000668                            0>
LOAD:0000000000000680                 Elf64_Sym <offset aFseeko - offset byte_818, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aCxaAtexit - offset byte_818, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aExit+1 - offset byte_818, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFwrite - offset byte_818, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aFprintfChk - offset byte_818, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aItmRegistertmc - offset byte_818, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aMbsinit - offset byte_818, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aIswprint - offset byte_818, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aCxaFinalize - offset byte_818, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aCtypeBLoc - offset byte_818, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aStdout - offset byte_818, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000770                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000788                 Elf64_Sym <offset aProgname - offset byte_818, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000788                            offset __bss_start, 8>
LOAD:00000000000007A0                 Elf64_Sym <offset aProgramInvocat - offset byte_818, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007A0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007B8                 Elf64_Sym <offset aPrognameFull - offset byte_818, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007B8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007D0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_818, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007D0                            offset __bss_start, 8>
LOAD:00000000000007E8                 Elf64_Sym <offset aStderr - offset byte_818, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007E8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aOptind - offset byte_818, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000800                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000818 ; ELF String Table
LOAD:0000000000000818 byte_818        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000818                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000819 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B20↓o
LOAD:0000000000000823 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:000000000000082A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000837 aPathconf       db 'pathconf',0         ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000840 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000638↑o
LOAD:000000000000084A aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000852 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:000000000000085A aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000861 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000869 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000873 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000879 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000458↑o
LOAD:000000000000088A aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000893 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000728↑o
LOAD:000000000000089C aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000620↑o
LOAD:00000000000008A4 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:00000000000008AA aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:00000000000008AA                                         ; LOAD:00000000000006B0↑o
LOAD:00000000000008B0 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:00000000000008B7 aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008B7                                         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000008CF aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008CF                                         ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008E6 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:00000000000008ED aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000008F4 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000008FB aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:000000000000090C aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000913 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000921 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000928 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:000000000000092E aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000935 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:000000000000093C aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000943 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000710↑o
LOAD:000000000000094B aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000957 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000965 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000970 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000977 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000983 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:000000000000098A aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000991 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:000000000000099C aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000009A3 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000009A3                                         ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:00000000000009C1 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000740↑o
LOAD:00000000000009D0 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:00000000000009D0                                         ; LOAD:0000000000000398↑o
LOAD:00000000000009DF aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009DF                                         ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000009F1 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000680↑o
LOAD:00000000000009F8 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A07 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000A0C aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000A17 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000A27 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000A34 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B30↓o
LOAD:0000000000000A3E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B40↓o
LOAD:0000000000000A4A aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B50↓o
LOAD:0000000000000A55 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B60↓o
LOAD:0000000000000A5F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B70↓o
LOAD:0000000000000A6B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A6B                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A87 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000A96 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A96                                         ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000AB0 ; ELF GNU Symbol Version Table
LOAD:0000000000000AB0                 dw 0
LOAD:0000000000000AB2                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000ABC                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; pathconf@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AD2                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AE8                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AEA                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AEC                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AF0                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AFC                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B04                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B06                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B08                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B0A                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B0C                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B0E                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B10                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B12                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B14                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B16                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B18                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B1A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B1C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B1E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B20 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B20                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_818, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B30                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_818, \ ; "GLIBC_2.3"
LOAD:0000000000000B30                                10h>
LOAD:0000000000000B40                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_818, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B40                                10h>
LOAD:0000000000000B50                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_818, \ ; "GLIBC_2.14"
LOAD:0000000000000B50                                10h>
LOAD:0000000000000B60                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_818, \ ; "GLIBC_2.4"
LOAD:0000000000000B60                                10h>
LOAD:0000000000000B70                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_818, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B80 ; ELF RELA Relocation Table
LOAD:0000000000000B80                 Elf64_Rela <206B90h, 8, 1CF0h> ; R_X86_64_RELATIVE +1CF0h
LOAD:0000000000000B98                 Elf64_Rela <206B98h, 8, 1CB0h> ; R_X86_64_RELATIVE +1CB0h
LOAD:0000000000000BB0                 Elf64_Rela <206BA0h, 8, 4BB6h> ; R_X86_64_RELATIVE +4BB6h
LOAD:0000000000000BC8                 Elf64_Rela <206BC0h, 8, 4BC2h> ; R_X86_64_RELATIVE +4BC2h
LOAD:0000000000000BE0                 Elf64_Rela <206BE0h, 8, 4BC7h> ; R_X86_64_RELATIVE +4BC7h
LOAD:0000000000000BF8                 Elf64_Rela <206C20h, 8, 4FD9h> ; R_X86_64_RELATIVE +4FD9h
LOAD:0000000000000C10                 Elf64_Rela <206C28h, 8, 4FE1h> ; R_X86_64_RELATIVE +4FE1h
LOAD:0000000000000C28                 Elf64_Rela <206C30h, 8, 4FE7h> ; R_X86_64_RELATIVE +4FE7h
LOAD:0000000000000C40                 Elf64_Rela <206C38h, 8, 4FF4h> ; R_X86_64_RELATIVE +4FF4h
LOAD:0000000000000C58                 Elf64_Rela <206C40h, 8, 5001h> ; R_X86_64_RELATIVE +5001h
LOAD:0000000000000C70                 Elf64_Rela <206C48h, 8, 5015h> ; R_X86_64_RELATIVE +5015h
LOAD:0000000000000C88                 Elf64_Rela <206C50h, 8, 5017h> ; R_X86_64_RELATIVE +5017h
LOAD:0000000000000CA0                 Elf64_Rela <206C58h, 8, 4FFAh> ; R_X86_64_RELATIVE +4FFAh
LOAD:0000000000000CB8                 Elf64_Rela <206C60h, 8, 4B62h> ; R_X86_64_RELATIVE +4B62h
LOAD:0000000000000CD0                 Elf64_Rela <206C68h, 8, 501Fh> ; R_X86_64_RELATIVE +501Fh
LOAD:0000000000000CE8                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D00                 Elf64_Rela <207010h, 8, 4F63h> ; R_X86_64_RELATIVE +4F63h
LOAD:0000000000000D18                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D30                 Elf64_Rela <207078h, 8, 2070E0h> ; R_X86_64_RELATIVE +2070E0h
LOAD:0000000000000D48                 Elf64_Rela <206FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D60                 Elf64_Rela <206FE0h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D78                 Elf64_Rela <206FE8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D90                 Elf64_Rela <206FF0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DA8                 Elf64_Rela <206FF8h, 2F00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DC0                 Elf64_Rela <207080h, 3200000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DD8                 Elf64_Rela <207088h, 3100000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DF0                 Elf64_Rela <207090h, 3700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E08                 Elf64_Rela <207098h, 3400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E20                 Elf64_Rela <2070A0h, 3600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E38 ; ELF JMPREL Relocation Table
LOAD:0000000000000E38                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E50                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E68                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E80                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E98                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000EB0                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EC8                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000EE0                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT pathconf
LOAD:0000000000000EF8                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F10                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F28                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F40                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F58                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F70                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000000F88                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000FA0                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FB8                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FD0                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000000FE8                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001000                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001018                 Elf64_Rela <206F20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001030                 Elf64_Rela <206F28h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001048                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001060                 Elf64_Rela <206F38h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001078                 Elf64_Rela <206F40h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001090                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000010A8                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000010C0                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000010D8                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000010F0                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001108                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001120                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001138                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001150                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001168                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001180                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001198                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000011B0                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000011C8                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000011E0                 Elf64_Rela <206FB8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011F8                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001210                 Elf64_Rela <206FC8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001228                 Elf64_Rela <206FD0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001228 LOAD            ends
LOAD:0000000000001228
.init:0000000000001240 ; ===========================================================================
.init:0000000000001240
.init:0000000000001240 ; Segment type: Pure code
.init:0000000000001240 ; Segment permissions: Read/Execute
.init:0000000000001240 _init           segment dword public 'CODE' use64
.init:0000000000001240                 assume cs:_init
.init:0000000000001240                 ;org 1240h
.init:0000000000001240                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001240
.init:0000000000001240 ; =============== S U B R O U T I N E =======================================
.init:0000000000001240
.init:0000000000001240
.init:0000000000001240                 public _init_proc
.init:0000000000001240 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001240                 sub     rsp, 8          ; _init
.init:0000000000001244                 mov     rax, cs:__gmon_start___ptr
.init:000000000000124B                 test    rax, rax
.init:000000000000124E                 jz      short loc_1252
.init:0000000000001250                 call    rax ; __gmon_start__
.init:0000000000001252
.init:0000000000001252 loc_1252:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001252                 add     rsp, 8
.init:0000000000001256                 retn
.init:0000000000001256 _init_proc      endp
.init:0000000000001256
.init:0000000000001256 _init           ends
.init:0000000000001256
LOAD:0000000000001257 ; ===========================================================================
LOAD:0000000000001257
LOAD:0000000000001257 ; Segment type: Pure code
LOAD:0000000000001257 ; Segment permissions: Read/Execute
LOAD:0000000000001257 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001257                 assume cs:LOAD
LOAD:0000000000001257                 ;org 1257h
LOAD:0000000000001257                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001257                 align 20h
LOAD:0000000000001257 LOAD            ends
LOAD:0000000000001257
.plt:0000000000001260 ; ===========================================================================
.plt:0000000000001260
.plt:0000000000001260 ; Segment type: Pure code
.plt:0000000000001260 ; Segment permissions: Read/Execute
.plt:0000000000001260 _plt            segment para public 'CODE' use64
.plt:0000000000001260                 assume cs:_plt
.plt:0000000000001260                 ;org 1260h
.plt:0000000000001260                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260
.plt:0000000000001260 sub_1260        proc near               ; CODE XREF: .plt:000000000000127B↓j
.plt:0000000000001260                                         ; .plt:000000000000128B↓j ...
.plt:0000000000001260 ; __unwind {
.plt:0000000000001260                 push    cs:qword_206E70
.plt:0000000000001266                 jmp     cs:qword_206E78
.plt:0000000000001266 sub_1260        endp
.plt:0000000000001266
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:000000000000126C                 align 10h
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; void free(void *ptr)
.plt:0000000000001270 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001270                                         ; quotearg_free+37↓p ...
.plt:0000000000001270                 jmp     cs:free_ptr
.plt:0000000000001270 _free           endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    0
.plt:000000000000127B                 jmp     sub_1260
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: noreturn thunk
.plt:0000000000001280
.plt:0000000000001280 ; void __noreturn abort(void)
.plt:0000000000001280 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001280                                         ; quotearg_buffer_restyled:def_2341↓p ...
.plt:0000000000001280                 jmp     cs:abort_ptr
.plt:0000000000001280 _abort          endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    1
.plt:000000000000128B                 jmp     sub_1260
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; int *__errno_location(void)
.plt:0000000000001290 ___errno_location proc near             ; CODE XREF: main+179↓p
.plt:0000000000001290                                         ; main+2C4↓p ...
.plt:0000000000001290                 jmp     cs:__errno_location_ptr
.plt:0000000000001290 ___errno_location endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    2
.plt:000000000000129B                 jmp     sub_1260
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000012A0 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:00000000000012A0                                         ; usage+2C5↓p
.plt:00000000000012A0                 jmp     cs:strncmp_ptr
.plt:00000000000012A0 _strncmp        endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    3
.plt:00000000000012AB                 jmp     sub_1260
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: noreturn thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; void __noreturn _exit(int status)
.plt:00000000000012B0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000012B0                 jmp     cs:_exit_ptr
.plt:00000000000012B0 __exit          endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    4
.plt:00000000000012BB                 jmp     sub_1260
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; size_t __fpending(FILE *fp)
.plt:00000000000012C0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000012C0                 jmp     cs:__fpending_ptr
.plt:00000000000012C0 ___fpending     endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    5
.plt:00000000000012CB                 jmp     sub_1260
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; char *textdomain(const char *domainname)
.plt:00000000000012D0 _textdomain     proc near               ; CODE XREF: main+60↓p
.plt:00000000000012D0                 jmp     cs:textdomain_ptr
.plt:00000000000012D0 _textdomain     endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    6
.plt:00000000000012DB                 jmp     sub_1260
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; __int64 pathconf(const char *path, int name)
.plt:00000000000012E0 _pathconf       proc near               ; CODE XREF: main+2E0↓p
.plt:00000000000012E0                                         ; main+51E↓p
.plt:00000000000012E0                 jmp     cs:pathconf_ptr
.plt:00000000000012E0 _pathconf       endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    7
.plt:00000000000012EB                 jmp     sub_1260
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; int fclose(FILE *stream)
.plt:00000000000012F0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012F0                                         ; rpl_fclose+6B↓j
.plt:00000000000012F0                 jmp     cs:fclose_ptr
.plt:00000000000012F0 _fclose         endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    8
.plt:00000000000012FB                 jmp     sub_1260
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001300 _bindtextdomain proc near               ; CODE XREF: main+54↓p
.plt:0000000000001300                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001300 _bindtextdomain endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    9
.plt:000000000000130B                 jmp     sub_1260
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001310 _dcgettext      proc near               ; CODE XREF: main+361↓p
.plt:0000000000001310                                         ; main+39A↓p ...
.plt:0000000000001310                 jmp     cs:dcgettext_ptr
.plt:0000000000001310 _dcgettext      endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Ah
.plt:000000000000131B                 jmp     sub_1260
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001320 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001320                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001320 ___ctype_get_mb_cur_max endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0Bh
.plt:000000000000132B                 jmp     sub_1260
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; size_t strlen(const char *s)
.plt:0000000000001330 _strlen         proc near               ; CODE XREF: main+1EA↓p
.plt:0000000000001330                                         ; quotearg_buffer_restyled+157↓p ...
.plt:0000000000001330                 jmp     cs:strlen_ptr
.plt:0000000000001330 _strlen         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    0Ch
.plt:000000000000133B                 jmp     sub_1260
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001340 ___lxstat       proc near               ; CODE XREF: main+16C↓p
.plt:0000000000001340                 jmp     cs:__lxstat_ptr
.plt:0000000000001340 ___lxstat       endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    0Dh
.plt:000000000000134B                 jmp     sub_1260
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: noreturn thunk
.plt:0000000000001350
.plt:0000000000001350 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1BE6↓p
.plt:0000000000001350                                         ; quotearg_buffer_restyled:loc_34A3↓p ...
.plt:0000000000001350                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001350 ___stack_chk_fail endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    0Eh
.plt:000000000000135B                 jmp     sub_1260
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001360 _getopt_long    proc near               ; CODE XREF: main+8C↓p
.plt:0000000000001360                 jmp     cs:getopt_long_ptr
.plt:0000000000001360 _getopt_long    endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    0Fh
.plt:000000000000136B                 jmp     sub_1260
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001370 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001370                 jmp     cs:mbrtowc_ptr
.plt:0000000000001370 _mbrtowc        endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    10h
.plt:000000000000137B                 jmp     sub_1260
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; char *strchr(const char *s, int c)
.plt:0000000000001380 _strchr         proc near               ; CODE XREF: main+21C↓p
.plt:0000000000001380                 jmp     cs:strchr_ptr
.plt:0000000000001380 _strchr         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    11h
.plt:000000000000138B                 jmp     sub_1260
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; char *strrchr(const char *s, int c)
.plt:0000000000001390 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001390                 jmp     cs:strrchr_ptr
.plt:0000000000001390 _strrchr        endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    12h
.plt:000000000000139B                 jmp     sub_1260
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000013A0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000013A0                                         ; rpl_fseeko+3B↓p
.plt:00000000000013A0                 jmp     cs:lseek_ptr
.plt:00000000000013A0 _lseek          endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    13h
.plt:00000000000013AB                 jmp     sub_1260
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000013B0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000013B0                                         ; xzalloc+12↓j
.plt:00000000000013B0                 jmp     cs:memset_ptr
.plt:00000000000013B0 _memset         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    14h
.plt:00000000000013BB                 jmp     sub_1260
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; size_t strspn(const char *s, const char *accept)
.plt:00000000000013C0 _strspn         proc near               ; CODE XREF: main+243↓p
.plt:00000000000013C0                 jmp     cs:strspn_ptr
.plt:00000000000013C0 _strspn         endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    15h
.plt:00000000000013CB                 jmp     sub_1260
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000013D0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000013D0                 jmp     cs:memcmp_ptr
.plt:00000000000013D0 _memcmp         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    16h
.plt:00000000000013DB                 jmp     sub_1260
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000013E0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000013E0                                         ; usage+C2↓p ...
.plt:00000000000013E0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000013E0 _fputs_unlocked endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    17h
.plt:00000000000013EB                 jmp     sub_1260
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000013F0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000013F0                 jmp     cs:calloc_ptr
.plt:00000000000013F0 _calloc         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    18h
.plt:00000000000013FB                 jmp     sub_1260
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001400 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001400                 jmp     cs:memcpy_ptr
.plt:0000000000001400 _memcpy         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    19h
.plt:000000000000140B                 jmp     sub_1260
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int fileno(FILE *stream)
.plt:0000000000001410 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001410                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001410                 jmp     cs:fileno_ptr
.plt:0000000000001410 _fileno         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Ah
.plt:000000000000141B                 jmp     sub_1260
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; void *malloc(size_t size)
.plt:0000000000001420 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001420                 jmp     cs:malloc_ptr
.plt:0000000000001420 _malloc         endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1Bh
.plt:000000000000142B                 jmp     sub_1260
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int fflush(FILE *stream)
.plt:0000000000001430 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001430                                         ; rpl_fflush+3B↓j
.plt:0000000000001430                 jmp     cs:fflush_ptr
.plt:0000000000001430 _fflush         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    1Ch
.plt:000000000000143B                 jmp     sub_1260
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *nl_langinfo(nl_item item)
.plt:0000000000001440 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001440                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001440 _nl_langinfo    endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    1Dh
.plt:000000000000144B                 jmp     sub_1260
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int __freading(FILE *fp)
.plt:0000000000001450 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001450                                         ; rpl_fflush+9↓p
.plt:0000000000001450                 jmp     cs:__freading_ptr
.plt:0000000000001450 ___freading     endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    1Eh
.plt:000000000000145B                 jmp     sub_1260
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001460 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001460                 jmp     cs:realloc_ptr
.plt:0000000000001460 _realloc        endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    1Fh
.plt:000000000000146B                 jmp     sub_1260
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; char *setlocale(int category, const char *locale)
.plt:0000000000001470 _setlocale      proc near               ; CODE XREF: main+41↓p
.plt:0000000000001470                                         ; usage+1EB↓p ...
.plt:0000000000001470                 jmp     cs:setlocale_ptr
.plt:0000000000001470 _setlocale      endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    20h ; ' '
.plt:000000000000147B                 jmp     sub_1260
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001480                                         ; usage+1DF↓p ...
.plt:0000000000001480                 jmp     cs:__printf_chk_ptr
.plt:0000000000001480 ___printf_chk   endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    21h ; '!'
.plt:000000000000148B                 jmp     sub_1260
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001490 _error          proc near               ; CODE XREF: main+1B6↓p
.plt:0000000000001490                                         ; main+36F↓p ...
.plt:0000000000001490                 jmp     cs:error_ptr
.plt:0000000000001490 _error          endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    22h ; '"'
.plt:000000000000149B                 jmp     sub_1260
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000014A0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_499A↓j
.plt:00000000000014A0                 jmp     cs:fseeko_ptr
.plt:00000000000014A0 _fseeko         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    23h ; '#'
.plt:00000000000014AB                 jmp     sub_1260
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000014B0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000014B0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000014B0 ___cxa_atexit   endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    24h ; '$'
.plt:00000000000014BB                 jmp     sub_1260
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: noreturn thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; void __noreturn exit(int status)
.plt:00000000000014C0 _exit           proc near               ; CODE XREF: main+108↓p
.plt:00000000000014C0                                         ; usage+58↓p
.plt:00000000000014C0                 jmp     cs:exit_ptr
.plt:00000000000014C0 _exit           endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    25h ; '%'
.plt:00000000000014CB                 jmp     sub_1260
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000014D0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000014D0                 jmp     cs:fwrite_ptr
.plt:00000000000014D0 _fwrite         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    26h ; '&'
.plt:00000000000014DB                 jmp     sub_1260
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000014E0                                         ; version_etc_arn+37↓p ...
.plt:00000000000014E0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000014E0 ___fprintf_chk  endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    27h ; '''
.plt:00000000000014EB                 jmp     sub_1260
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000014F0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000014F0                 jmp     cs:mbsinit_ptr
.plt:00000000000014F0 _mbsinit        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    28h ; '('
.plt:00000000000014FB                 jmp     sub_1260
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int iswprint(wint_t wc)
.plt:0000000000001500 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001500                 jmp     cs:iswprint_ptr
.plt:0000000000001500 _iswprint       endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    29h ; ')'
.plt:000000000000150B                 jmp     sub_1260
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001510 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001510                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001510 ___ctype_b_loc  endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    2Ah ; '*'
.plt:000000000000151B                 jmp     sub_1260
.plt:000000000000151B ; } // starts at 1260
.plt:000000000000151B _plt            ends
.plt:000000000000151B
.plt.got:0000000000001520 ; ===========================================================================
.plt.got:0000000000001520
.plt.got:0000000000001520 ; Segment type: Pure code
.plt.got:0000000000001520 ; Segment permissions: Read/Execute
.plt.got:0000000000001520 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001520                 assume cs:_plt_got
.plt.got:0000000000001520                 ;org 1520h
.plt.got:0000000000001520                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001520
.plt.got:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001520
.plt.got:0000000000001520 ; Attributes: thunk
.plt.got:0000000000001520
.plt.got:0000000000001520 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001520 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001520 ; __unwind {
.plt.got:0000000000001520                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001520 __cxa_finalize  endp
.plt.got:0000000000001520
.plt.got:0000000000001520 ; ---------------------------------------------------------------------------
.plt.got:0000000000001526                 align 8
.plt.got:0000000000001526 ; } // starts at 1520
.plt.got:0000000000001526 _plt_got        ends
.plt.got:0000000000001526
LOAD:0000000000001528 ; ===========================================================================
LOAD:0000000000001528
LOAD:0000000000001528 ; Segment type: Pure code
LOAD:0000000000001528 ; Segment permissions: Read/Execute
LOAD:0000000000001528 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001528                 assume cs:LOAD
LOAD:0000000000001528                 ;org 1528h
LOAD:0000000000001528                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001528                 align 10h
LOAD:0000000000001528 LOAD            ends
LOAD:0000000000001528
.text:0000000000001530 ; ===========================================================================
.text:0000000000001530
.text:0000000000001530 ; Segment type: Pure code
.text:0000000000001530 ; Segment permissions: Read/Execute
.text:0000000000001530 _text           segment para public 'CODE' use64
.text:0000000000001530                 assume cs:_text
.text:0000000000001530                 ;org 1530h
.text:0000000000001530                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001530
.text:0000000000001530 ; =============== S U B R O U T I N E =======================================
.text:0000000000001530
.text:0000000000001530
.text:0000000000001530 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001530                 public main
.text:0000000000001530 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001530
.text:0000000000001530 var_108         = qword ptr -108h
.text:0000000000001530 path            = qword ptr -100h
.text:0000000000001530 var_F4          = dword ptr -0F4h
.text:0000000000001530 var_F0          = qword ptr -0F0h
.text:0000000000001530 var_E8          = qword ptr -0E8h
.text:0000000000001530 var_E0          = qword ptr -0E0h
.text:0000000000001530 stat_buf        = stat ptr -0D8h
.text:0000000000001530 var_40          = qword ptr -40h
.text:0000000000001530
.text:0000000000001530 ; __unwind {
.text:0000000000001530                 push    r15
.text:0000000000001532                 push    r14
.text:0000000000001534                 push    r13
.text:0000000000001536                 push    r12
.text:0000000000001538                 mov     r12d, edi
.text:000000000000153B                 push    rbp
.text:000000000000153C                 push    rbx
.text:000000000000153D                 mov     rbx, rsi
.text:0000000000001540                 xor     r13d, r13d
.text:0000000000001543                 sub     rsp, 0D8h
.text:000000000000154A                 mov     rdi, [rsi]
.text:000000000000154D                 mov     rax, fs:28h
.text:0000000000001556                 mov     [rsp+108h+var_40], rax
.text:000000000000155E                 xor     eax, eax
.text:0000000000001560                 call    set_program_name
.text:0000000000001565                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000156C                 mov     edi, 6          ; category
.text:0000000000001571                 call    _setlocale
.text:0000000000001576                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000157D                 lea     rdi, domainname ; "coreutils"
.text:0000000000001584                 call    _bindtextdomain
.text:0000000000001589                 lea     rdi, domainname ; "coreutils"
.text:0000000000001590                 call    _textdomain
.text:0000000000001595                 lea     rdi, close_stdout
.text:000000000000159C                 call    atexit
.text:00000000000015A1                 mov     byte ptr [rsp+108h+var_108], 0
.text:00000000000015A5
.text:00000000000015A5 loc_15A5:                               ; CODE XREF: main+B9↓j
.text:00000000000015A5                                         ; main+116↓j ...
.text:00000000000015A5                 lea     rcx, longopts   ; longopts
.text:00000000000015AC                 lea     rdx, shortopts  ; "+pP"
.text:00000000000015B3                 xor     r8d, r8d        ; longind
.text:00000000000015B6                 mov     rsi, rbx        ; argv
.text:00000000000015B9                 mov     edi, r12d       ; argc
.text:00000000000015BC                 call    _getopt_long
.text:00000000000015C1                 cmp     eax, 0FFFFFFFFh
.text:00000000000015C4                 jz      loc_1659
.text:00000000000015CA                 cmp     eax, 50h ; 'P'
.text:00000000000015CD                 jz      short loc_1640
.text:00000000000015CF                 jle     short loc_15F0
.text:00000000000015D1                 cmp     eax, 70h ; 'p'
.text:00000000000015D4                 jz      short loc_1650
.text:00000000000015D6                 add     eax, 0FFFFFF80h
.text:00000000000015D9                 jnz     loc_1BDC
.text:00000000000015DF                 mov     r13d, 1
.text:00000000000015E5                 mov     byte ptr [rsp+108h+var_108], 1
.text:00000000000015E9                 jmp     short loc_15A5
.text:00000000000015E9 ; ---------------------------------------------------------------------------
.text:00000000000015EB                 align 10h
.text:00000000000015F0
.text:00000000000015F0 loc_15F0:                               ; CODE XREF: main+9F↑j
.text:00000000000015F0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000015F5                 jnz     loc_1BAD
.text:00000000000015FB                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:0000000000001602                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001609                 mov     rcx, cs:Version
.text:0000000000001610                 push    0
.text:0000000000001612                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001619                 lea     r8, aPaulEggert ; "Paul Eggert"
.text:0000000000001620                 push    rax
.text:0000000000001621                 lea     rdx, unk_4B22
.text:0000000000001628                 lea     rsi, aPathchk   ; "pathchk"
.text:000000000000162F                 xor     eax, eax
.text:0000000000001631                 call    version_etc
.text:0000000000001636                 xor     edi, edi        ; status
.text:0000000000001638                 call    _exit
.text:0000000000001638 ; ---------------------------------------------------------------------------
.text:000000000000163D                 align 20h
.text:0000000000001640
.text:0000000000001640 loc_1640:                               ; CODE XREF: main+9D↑j
.text:0000000000001640                 mov     r13d, 1
.text:0000000000001646                 jmp     loc_15A5
.text:0000000000001646 ; ---------------------------------------------------------------------------
.text:000000000000164B                 align 10h
.text:0000000000001650
.text:0000000000001650 loc_1650:                               ; CODE XREF: main+A4↑j
.text:0000000000001650                 mov     byte ptr [rsp+108h+var_108], 1
.text:0000000000001654                 jmp     loc_15A5
.text:0000000000001659 ; ---------------------------------------------------------------------------
.text:0000000000001659
.text:0000000000001659 loc_1659:                               ; CODE XREF: main+94↑j
.text:0000000000001659                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000165F                 cmp     eax, r12d
.text:0000000000001662                 jz      loc_1BBB
.text:0000000000001668                 mov     ecx, 1
.text:000000000000166D                 jge     loc_1957
.text:0000000000001673                 mov     [rsp+108h+var_F4], r12d
.text:0000000000001678                 mov     [rsp+108h+var_F0], rbx
.text:000000000000167D                 mov     r12d, ecx
.text:0000000000001680                 jmp     loc_170C
.text:0000000000001685 ; ---------------------------------------------------------------------------
.text:0000000000001685
.text:0000000000001685 loc_1685:                               ; CODE XREF: main+1F5↓j
.text:0000000000001685                 cmp     byte ptr [rsp+108h+var_108], 0
.text:0000000000001689                 jnz     loc_187A
.text:000000000000168F
.text:000000000000168F loc_168F:                               ; CODE XREF: main+233↓j
.text:000000000000168F                 lea     rdx, [rsp+108h+stat_buf] ; stat_buf
.text:0000000000001694                 mov     rsi, r14        ; filename
.text:0000000000001697                 mov     edi, 1          ; ver
.text:000000000000169C                 call    ___lxstat
.text:00000000000016A1                 test    eax, eax
.text:00000000000016A3                 jz      loc_1949
.text:00000000000016A9                 call    ___errno_location
.text:00000000000016AE                 cmp     dword ptr [rax], 2
.text:00000000000016B1                 mov     rbx, rax
.text:00000000000016B4                 setnz   r8b
.text:00000000000016B8                 test    rbp, rbp
.text:00000000000016BB                 setz    al
.text:00000000000016BE                 or      r8b, al
.text:00000000000016C1                 jz      loc_1A1C
.text:00000000000016C7                 mov     rdx, r14
.text:00000000000016CA                 mov     esi, 3
.text:00000000000016CF                 xor     edi, edi
.text:00000000000016D1                 call    quotearg_n_style_colon
.text:00000000000016D6                 mov     esi, [rbx]      ; errnum
.text:00000000000016D8                 lea     rdx, format+4   ; format
.text:00000000000016DF                 mov     rcx, rax
.text:00000000000016E2                 xor     edi, edi        ; status
.text:00000000000016E4                 xor     eax, eax
.text:00000000000016E6                 call    _error
.text:00000000000016EB                 xor     r8d, r8d
.text:00000000000016EE                 xchg    ax, ax
.text:00000000000016F0
.text:00000000000016F0 loc_16F0:                               ; CODE XREF: main+377↓j
.text:00000000000016F0                                         ; main+3B3↓j ...
.text:00000000000016F0                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000016F6                 and     r12d, r8d
.text:00000000000016F9                 add     eax, 1
.text:00000000000016FC                 cmp     eax, [rsp+108h+var_F4]
.text:0000000000001700                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001706                 jge     loc_1954
.text:000000000000170C
.text:000000000000170C loc_170C:                               ; CODE XREF: main+150↑j
.text:000000000000170C                 mov     rcx, [rsp+108h+var_F0]
.text:0000000000001711                 cdqe
.text:0000000000001713                 mov     r14, [rcx+rax*8]
.text:0000000000001717                 mov     rdi, r14        ; s
.text:000000000000171A                 call    _strlen
.text:000000000000171F                 test    r13b, r13b
.text:0000000000001722                 mov     rbp, rax
.text:0000000000001725                 jz      loc_1685
.text:000000000000172B                 mov     rdi, r14
.text:000000000000172E                 jmp     short loc_1747
.text:0000000000001730 ; ---------------------------------------------------------------------------
.text:0000000000001730
.text:0000000000001730 loc_1730:                               ; CODE XREF: main+224↓j
.text:0000000000001730                 cmp     r14, rax
.text:0000000000001733                 jz      loc_18AC
.text:0000000000001739                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:000000000000173D                 jz      loc_18AC
.text:0000000000001743                 lea     rdi, [rax+1]    ; s
.text:0000000000001747
.text:0000000000001747 loc_1747:                               ; CODE XREF: main+1FE↑j
.text:0000000000001747                 mov     esi, 2Dh ; '-'  ; c
.text:000000000000174C                 call    _strchr
.text:0000000000001751                 test    rax, rax
.text:0000000000001754                 jnz     short loc_1730
.text:0000000000001756                 test    rbp, rbp
.text:0000000000001759                 jz      loc_1883
.text:000000000000175F                 cmp     byte ptr [rsp+108h+var_108], 0
.text:0000000000001763                 jz      loc_168F
.text:0000000000001769
.text:0000000000001769 loc_1769:                               ; CODE XREF: main+34D↓j
.text:0000000000001769                 lea     rsi, accept     ; "/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl"...
.text:0000000000001770                 mov     rdi, r14        ; s
.text:0000000000001773                 call    _strspn
.text:0000000000001778                 lea     r15, [r14+rax]
.text:000000000000177C                 cmp     byte ptr [r15], 0
.text:0000000000001780                 jnz     loc_1988
.text:0000000000001786                 cmp     rbp, 0FFh
.text:000000000000178D                 ja      loc_1AC4
.text:0000000000001793                 mov     rdx, [rsp+108h+var_108]
.text:0000000000001797                 shl     rdx, 3Fh
.text:000000000000179B                 sar     rdx, 3Fh
.text:000000000000179F                 and     edx, 0Eh
.text:00000000000017A2
.text:00000000000017A2 loc_17A2:                               ; CODE XREF: main+58A↓j
.text:00000000000017A2                 mov     ecx, 0Eh
.text:00000000000017A7                 mov     byte ptr [rsp+108h+var_E8], r13b
.text:00000000000017AC                 mov     byte ptr [rsp+108h+var_E0], r12b
.text:00000000000017B1                 mov     rbp, r14
.text:00000000000017B4                 mov     r12, rdx
.text:00000000000017B7                 mov     r13, rcx
.text:00000000000017BA                 jmp     short loc_17C4
.text:00000000000017BA ; ---------------------------------------------------------------------------
.text:00000000000017BC                 align 20h
.text:00000000000017C0
.text:00000000000017C0 loc_17C0:                               ; CODE XREF: main+29D↓j
.text:00000000000017C0                 add     rbp, 1
.text:00000000000017C4
.text:00000000000017C4 loc_17C4:                               ; CODE XREF: main+28A↑j
.text:00000000000017C4                                         ; main+334↓j
.text:00000000000017C4                 movzx   r15d, byte ptr [rbp+0]
.text:00000000000017C9                 cmp     r15b, 2Fh ; '/'
.text:00000000000017CD                 jz      short loc_17C0
.text:00000000000017CF                 test    r15b, r15b
.text:00000000000017D2                 jz      loc_193D
.text:00000000000017D8                 test    r12, r12
.text:00000000000017DB                 jnz     loc_1875
.text:00000000000017E1                 lea     rax, path       ; "."
.text:00000000000017E8                 cmp     r14, rbp
.text:00000000000017EB                 cmovnz  rax, r14
.text:00000000000017EF                 mov     [rsp+108h+path], rax
.text:00000000000017F4                 call    ___errno_location
.text:00000000000017F9                 mov     rdi, [rsp+108h+path] ; path
.text:00000000000017FE                 mov     dword ptr [rax], 0
.text:0000000000001804                 mov     esi, 3          ; name
.text:0000000000001809                 mov     byte ptr [rbp+0], 0
.text:000000000000180D                 mov     rbx, rax
.text:0000000000001810                 call    _pathconf
.text:0000000000001815                 test    rax, rax
.text:0000000000001818                 mov     [rbp+0], r15b
.text:000000000000181C                 js      loc_18E8
.text:0000000000001822                 mov     r13, rax
.text:0000000000001825
.text:0000000000001825 loc_1825:                               ; CODE XREF: main+348↓j
.text:0000000000001825                                         ; main+4DE↓j ...
.text:0000000000001825                 movzx   r15d, byte ptr [rbp+1]
.text:000000000000182A                 cmp     r15b, 2Fh ; '/'
.text:000000000000182E                 jz      short loc_1869
.text:0000000000001830                 test    r15b, r15b
.text:0000000000001833                 jz      short loc_1869
.text:0000000000001835                 lea     rax, [rbp+2]
.text:0000000000001839
.text:0000000000001839 loc_1839:                               ; CODE XREF: main+323↓j
.text:0000000000001839                 movzx   r15d, byte ptr [rax]
.text:000000000000183D                 mov     r8, rax
.text:0000000000001840                 mov     r10, rax
.text:0000000000001843                 sub     r8, rbp
.text:0000000000001846                 add     rax, 1
.text:000000000000184A                 cmp     r15b, 2Fh ; '/'
.text:000000000000184E                 jz      short loc_1858
.text:0000000000001850                 test    r15b, r15b
.text:0000000000001853                 jnz     short loc_1839
.text:0000000000001855                 nop     dword ptr [rax]
.text:0000000000001858
.text:0000000000001858 loc_1858:                               ; CODE XREF: main+31E↑j
.text:0000000000001858                                         ; main+343↓j
.text:0000000000001858                 cmp     r13, r8
.text:000000000000185B                 jb      loc_1B45
.text:0000000000001861                 mov     rbp, r10
.text:0000000000001864                 jmp     loc_17C4
.text:0000000000001869 ; ---------------------------------------------------------------------------
.text:0000000000001869
.text:0000000000001869 loc_1869:                               ; CODE XREF: main+2FE↑j
.text:0000000000001869                                         ; main+303↑j
.text:0000000000001869                 lea     r10, [rbp+1]
.text:000000000000186D                 mov     r8d, 1
.text:0000000000001873                 jmp     short loc_1858
.text:0000000000001875 ; ---------------------------------------------------------------------------
.text:0000000000001875
.text:0000000000001875 loc_1875:                               ; CODE XREF: main+2AB↑j
.text:0000000000001875                 mov     r13, r12
.text:0000000000001878                 jmp     short loc_1825
.text:000000000000187A ; ---------------------------------------------------------------------------
.text:000000000000187A
.text:000000000000187A loc_187A:                               ; CODE XREF: main+159↑j
.text:000000000000187A                 test    rax, rax
.text:000000000000187D                 jnz     loc_1769
.text:0000000000001883
.text:0000000000001883 loc_1883:                               ; CODE XREF: main+229↑j
.text:0000000000001883                 lea     rsi, msgid      ; "empty file name"
.text:000000000000188A                 mov     edx, 5          ; category
.text:000000000000188F                 xor     edi, edi        ; domainname
.text:0000000000001891                 call    _dcgettext
.text:0000000000001896                 xor     esi, esi        ; errnum
.text:0000000000001898                 mov     rdx, rax        ; format
.text:000000000000189B                 xor     edi, edi        ; status
.text:000000000000189D                 xor     eax, eax
.text:000000000000189F                 call    _error
.text:00000000000018A4                 xor     r8d, r8d
.text:00000000000018A7                 jmp     loc_16F0
.text:00000000000018AC ; ---------------------------------------------------------------------------
.text:00000000000018AC
.text:00000000000018AC loc_18AC:                               ; CODE XREF: main+203↑j
.text:00000000000018AC                                         ; main+20D↑j
.text:00000000000018AC                 mov     rsi, r14
.text:00000000000018AF                 mov     edi, 4
.text:00000000000018B4                 call    quotearg_style
.text:00000000000018B9                 lea     rsi, aLeadingInAComp ; "leading '-' in a component of file name"...
.text:00000000000018C0                 mov     rbp, rax
.text:00000000000018C3                 mov     edx, 5          ; category
.text:00000000000018C8                 xor     edi, edi        ; domainname
.text:00000000000018CA                 call    _dcgettext
.text:00000000000018CF                 mov     rcx, rbp
.text:00000000000018D2                 mov     rdx, rax        ; format
.text:00000000000018D5                 xor     esi, esi        ; errnum
.text:00000000000018D7                 xor     edi, edi        ; status
.text:00000000000018D9                 xor     eax, eax
.text:00000000000018DB                 call    _error
.text:00000000000018E0                 xor     r8d, r8d
.text:00000000000018E3                 jmp     loc_16F0
.text:00000000000018E8 ; ---------------------------------------------------------------------------
.text:00000000000018E8
.text:00000000000018E8 loc_18E8:                               ; CODE XREF: main+2EC↑j
.text:00000000000018E8                 mov     eax, [rbx]
.text:00000000000018EA                 test    eax, eax
.text:00000000000018EC                 jz      loc_1A13
.text:00000000000018F2                 cmp     eax, 2
.text:00000000000018F5                 jz      loc_1A0B
.text:00000000000018FB                 mov     rdx, [rsp+108h+path]
.text:0000000000001900                 mov     esi, 3
.text:0000000000001905                 xor     edi, edi
.text:0000000000001907                 mov     byte ptr [rbp+0], 0
.text:000000000000190B                 movzx   r13d, byte ptr [rsp+108h+var_E8]
.text:0000000000001911                 movzx   r12d, byte ptr [rsp+108h+var_E0]
.text:0000000000001917                 call    quotearg_n_style_colon
.text:000000000000191C                 mov     esi, [rbx]      ; errnum
.text:000000000000191E                 lea     rdx, format+4   ; format
.text:0000000000001925                 mov     rcx, rax
.text:0000000000001928                 xor     edi, edi        ; status
.text:000000000000192A                 xor     eax, eax
.text:000000000000192C                 call    _error
.text:0000000000001931                 mov     [rbp+0], r15b
.text:0000000000001935                 xor     r8d, r8d
.text:0000000000001938                 jmp     loc_16F0
.text:000000000000193D ; ---------------------------------------------------------------------------
.text:000000000000193D
.text:000000000000193D loc_193D:                               ; CODE XREF: main+2A2↑j
.text:000000000000193D                 movzx   r13d, byte ptr [rsp+108h+var_E8]
.text:0000000000001943                 movzx   r12d, byte ptr [rsp+108h+var_E0]
.text:0000000000001949
.text:0000000000001949 loc_1949:                               ; CODE XREF: main+173↑j
.text:0000000000001949                                         ; main+54E↓j
.text:0000000000001949                 mov     r8d, 1
.text:000000000000194F                 jmp     loc_16F0
.text:0000000000001954 ; ---------------------------------------------------------------------------
.text:0000000000001954
.text:0000000000001954 loc_1954:                               ; CODE XREF: main+1D6↑j
.text:0000000000001954                 mov     ecx, r12d
.text:0000000000001957
.text:0000000000001957 loc_1957:                               ; CODE XREF: main+13D↑j
.text:0000000000001957                 mov     eax, ecx
.text:0000000000001959                 xor     eax, 1
.text:000000000000195C                 mov     rbx, [rsp+108h+var_40]
.text:0000000000001964                 xor     rbx, fs:28h
.text:000000000000196D                 movzx   eax, al
.text:0000000000001970                 jnz     loc_1BE6
.text:0000000000001976                 add     rsp, 0D8h
.text:000000000000197D                 pop     rbx
.text:000000000000197E                 pop     rbp
.text:000000000000197F                 pop     r12
.text:0000000000001981                 pop     r13
.text:0000000000001983                 pop     r14
.text:0000000000001985                 pop     r15
.text:0000000000001987                 retn
.text:0000000000001988 ; ---------------------------------------------------------------------------
.text:0000000000001988
.text:0000000000001988 loc_1988:                               ; CODE XREF: main+250↑j
.text:0000000000001988                 lea     rdx, [rsp+108h+stat_buf]
.text:000000000000198D                 mov     rsi, rbp
.text:0000000000001990                 mov     rdi, r15
.text:0000000000001993                 sub     rsi, rax
.text:0000000000001996                 mov     [rsp+108h+stat_buf.st_dev], 0
.text:000000000000199F                 call    rpl_mbrlen
.text:00000000000019A4                 xor     edi, edi
.text:00000000000019A6                 mov     rbx, rax
.text:00000000000019A9                 mov     rdx, r14
.text:00000000000019AC                 mov     esi, 4
.text:00000000000019B1                 call    quotearg_n_style
.text:00000000000019B6                 cmp     rbx, 10h
.text:00000000000019BA                 mov     rbp, rax
.text:00000000000019BD                 jbe     short loc_19C4
.text:00000000000019BF                 mov     ebx, 1
.text:00000000000019C4
.text:00000000000019C4 loc_19C4:                               ; CODE XREF: main+48D↑j
.text:00000000000019C4                 mov     rcx, rbx
.text:00000000000019C7                 mov     rdx, r15
.text:00000000000019CA                 mov     esi, 8
.text:00000000000019CF                 mov     edi, 1
.text:00000000000019D4                 call    quotearg_n_style_mem
.text:00000000000019D9                 lea     rsi, aNonportableCha ; "nonportable character %s in file name %"...
.text:00000000000019E0                 mov     r14, rax
.text:00000000000019E3                 mov     edx, 5          ; category
.text:00000000000019E8                 xor     edi, edi        ; domainname
.text:00000000000019EA                 call    _dcgettext
.text:00000000000019EF                 mov     r8, rbp
.text:00000000000019F2                 mov     rdx, rax        ; format
.text:00000000000019F5                 mov     rcx, r14
.text:00000000000019F8                 xor     esi, esi        ; errnum
.text:00000000000019FA                 xor     edi, edi        ; status
.text:00000000000019FC                 xor     eax, eax
.text:00000000000019FE                 call    _error
.text:0000000000001A03                 xor     r8d, r8d
.text:0000000000001A06                 jmp     loc_16F0
.text:0000000000001A0B ; ---------------------------------------------------------------------------
.text:0000000000001A0B
.text:0000000000001A0B loc_1A0B:                               ; CODE XREF: main+3C5↑j
.text:0000000000001A0B                 mov     r12, r13
.text:0000000000001A0E                 jmp     loc_1825
.text:0000000000001A13 ; ---------------------------------------------------------------------------
.text:0000000000001A13
.text:0000000000001A13 loc_1A13:                               ; CODE XREF: main+3BC↑j
.text:0000000000001A13                 or      r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000001A17                 jmp     loc_1825
.text:0000000000001A1C ; ---------------------------------------------------------------------------
.text:0000000000001A1C
.text:0000000000001A1C loc_1A1C:                               ; CODE XREF: main+191↑j
.text:0000000000001A1C                 cmp     rbp, 0FFh
.text:0000000000001A23                 mov     byte ptr [rsp+108h+path], r8b
.text:0000000000001A28                 jbe     short loc_1A64
.text:0000000000001A2A                 cmp     byte ptr [r14], 2Fh ; '/'
.text:0000000000001A2E                 lea     rax, path       ; "."
.text:0000000000001A35                 lea     r15, aLibs+6    ; "/"
.text:0000000000001A3C                 mov     dword ptr [rbx], 0
.text:0000000000001A42                 mov     esi, 4          ; name
.text:0000000000001A47                 cmovnz  r15, rax
.text:0000000000001A4B                 mov     rdi, r15        ; path
.text:0000000000001A4E                 call    _pathconf
.text:0000000000001A53                 test    rax, rax
.text:0000000000001A56                 js      loc_1B0D
.text:0000000000001A5C
.text:0000000000001A5C loc_1A5C:                               ; CODE XREF: main+5E0↓j
.text:0000000000001A5C                 cmp     rbp, rax
.text:0000000000001A5F                 mov     r15, rax
.text:0000000000001A62                 jnb     short loc_1ACA
.text:0000000000001A64
.text:0000000000001A64 loc_1A64:                               ; CODE XREF: main+4F8↑j
.text:0000000000001A64                 mov     rsi, r14
.text:0000000000001A67
.text:0000000000001A67 loc_1A67:                               ; CODE XREF: main+586↓j
.text:0000000000001A67                 mov     rax, rsi
.text:0000000000001A6A                 jmp     short loc_1A74
.text:0000000000001A6A ; ---------------------------------------------------------------------------
.text:0000000000001A6C                 align 10h
.text:0000000000001A70
.text:0000000000001A70 loc_1A70:                               ; CODE XREF: main+54A↓j
.text:0000000000001A70                 add     rax, 1
.text:0000000000001A74
.text:0000000000001A74 loc_1A74:                               ; CODE XREF: main+53A↑j
.text:0000000000001A74                                         ; main+592↓j
.text:0000000000001A74                 movzx   edx, byte ptr [rax]
.text:0000000000001A77                 cmp     dl, 2Fh ; '/'
.text:0000000000001A7A                 jz      short loc_1A70
.text:0000000000001A7C                 test    dl, dl
.text:0000000000001A7E                 jz      loc_1949
.text:0000000000001A84                 movzx   edx, byte ptr [rax+1]
.text:0000000000001A88                 lea     rcx, [rax+1]
.text:0000000000001A8C                 cmp     dl, 2Fh ; '/'
.text:0000000000001A8F                 jz      short loc_1ABF
.text:0000000000001A91                 test    dl, dl
.text:0000000000001A93                 jz      short loc_1ABF
.text:0000000000001A95                 lea     rdx, [rax+2]
.text:0000000000001A99
.text:0000000000001A99 loc_1A99:                               ; CODE XREF: main+580↓j
.text:0000000000001A99                 movzx   ecx, byte ptr [rdx]
.text:0000000000001A9C                 mov     rdi, rdx
.text:0000000000001A9F                 mov     rsi, rdx
.text:0000000000001AA2                 sub     rdi, rax
.text:0000000000001AA5                 add     rdx, 1
.text:0000000000001AA9                 cmp     cl, 2Fh ; '/'
.text:0000000000001AAC                 jz      short loc_1AB2
.text:0000000000001AAE                 test    cl, cl
.text:0000000000001AB0                 jnz     short loc_1A99
.text:0000000000001AB2
.text:0000000000001AB2 loc_1AB2:                               ; CODE XREF: main+57C↑j
.text:0000000000001AB2                 cmp     rdi, 0Eh
.text:0000000000001AB6                 jbe     short loc_1A67
.text:0000000000001AB8                 xor     edx, edx
.text:0000000000001ABA                 jmp     loc_17A2
.text:0000000000001ABF ; ---------------------------------------------------------------------------
.text:0000000000001ABF
.text:0000000000001ABF loc_1ABF:                               ; CODE XREF: main+55F↑j
.text:0000000000001ABF                                         ; main+563↑j
.text:0000000000001ABF                 mov     rax, rcx
.text:0000000000001AC2                 jmp     short loc_1A74
.text:0000000000001AC4 ; ---------------------------------------------------------------------------
.text:0000000000001AC4
.text:0000000000001AC4 loc_1AC4:                               ; CODE XREF: main+25D↑j
.text:0000000000001AC4                 mov     r15d, 100h
.text:0000000000001ACA
.text:0000000000001ACA loc_1ACA:                               ; CODE XREF: main+532↑j
.text:0000000000001ACA                 mov     rsi, r14
.text:0000000000001ACD                 mov     edi, 4
.text:0000000000001AD2                 call    quotearg_style
.text:0000000000001AD7                 lea     rsi, aLimitLuExceede ; "limit %lu exceeded by length %lu of fil"...
.text:0000000000001ADE                 mov     edx, 5          ; category
.text:0000000000001AE3                 xor     edi, edi        ; domainname
.text:0000000000001AE5                 mov     r14, rax
.text:0000000000001AE8                 call    _dcgettext
.text:0000000000001AED                 lea     rcx, [r15-1]
.text:0000000000001AF1                 mov     r8, rbp
.text:0000000000001AF4                 mov     rdx, rax        ; format
.text:0000000000001AF7                 mov     r9, r14
.text:0000000000001AFA                 xor     esi, esi        ; errnum
.text:0000000000001AFC                 xor     edi, edi        ; status
.text:0000000000001AFE                 xor     eax, eax
.text:0000000000001B00                 call    _error
.text:0000000000001B05                 xor     r8d, r8d
.text:0000000000001B08                 jmp     loc_16F0
.text:0000000000001B0D ; ---------------------------------------------------------------------------
.text:0000000000001B0D
.text:0000000000001B0D loc_1B0D:                               ; CODE XREF: main+526↑j
.text:0000000000001B0D                 cmp     dword ptr [rbx], 0
.text:0000000000001B10                 jz      loc_1A5C
.text:0000000000001B16                 lea     rsi, aSUnableToDeter ; "%s: unable to determine maximum file na"...
.text:0000000000001B1D                 mov     edx, 5          ; category
.text:0000000000001B22                 xor     edi, edi        ; domainname
.text:0000000000001B24                 call    _dcgettext
.text:0000000000001B29                 mov     esi, [rbx]      ; errnum
.text:0000000000001B2B                 mov     rdx, rax        ; format
.text:0000000000001B2E                 mov     rcx, r15
.text:0000000000001B31                 xor     edi, edi        ; status
.text:0000000000001B33                 xor     eax, eax
.text:0000000000001B35                 call    _error
.text:0000000000001B3A                 movzx   r8d, byte ptr [rsp+108h+path]
.text:0000000000001B40                 jmp     loc_16F0
.text:0000000000001B45 ; ---------------------------------------------------------------------------
.text:0000000000001B45
.text:0000000000001B45 loc_1B45:                               ; CODE XREF: main+32B↑j
.text:0000000000001B45                 mov     byte ptr [r10], 0
.text:0000000000001B49                 mov     rdi, rbp
.text:0000000000001B4C                 mov     [rsp+108h+path], r10
.text:0000000000001B51                 movzx   r12d, byte ptr [rsp+108h+var_E0]
.text:0000000000001B57                 mov     [rsp+108h+var_E0], r13
.text:0000000000001B5C                 movzx   r13d, byte ptr [rsp+108h+var_E8]
.text:0000000000001B62                 mov     [rsp+108h+var_E8], r8
.text:0000000000001B67                 call    quote
.text:0000000000001B6C                 lea     rsi, aLimitLuExceede_0 ; "limit %lu exceeded by length %lu of fil"...
.text:0000000000001B73                 mov     edx, 5          ; category
.text:0000000000001B78                 xor     edi, edi        ; domainname
.text:0000000000001B7A                 mov     rbp, rax
.text:0000000000001B7D                 call    _dcgettext
.text:0000000000001B82                 mov     r8, [rsp+108h+var_E8]
.text:0000000000001B87                 mov     rcx, [rsp+108h+var_E0]
.text:0000000000001B8C                 mov     rdx, rax        ; format
.text:0000000000001B8F                 mov     r9, rbp
.text:0000000000001B92                 xor     esi, esi        ; errnum
.text:0000000000001B94                 xor     edi, edi        ; status
.text:0000000000001B96                 xor     eax, eax
.text:0000000000001B98                 call    _error
.text:0000000000001B9D                 mov     r10, [rsp+108h+path]
.text:0000000000001BA2                 xor     r8d, r8d
.text:0000000000001BA5                 mov     [r10], r15b
.text:0000000000001BA8                 jmp     loc_16F0
.text:0000000000001BAD ; ---------------------------------------------------------------------------
.text:0000000000001BAD
.text:0000000000001BAD loc_1BAD:                               ; CODE XREF: main+C5↑j
.text:0000000000001BAD                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001BB2                 jnz     short loc_1BDC
.text:0000000000001BB4                 xor     edi, edi        ; status
.text:0000000000001BB6                 call    usage
.text:0000000000001BBB ; ---------------------------------------------------------------------------
.text:0000000000001BBB
.text:0000000000001BBB loc_1BBB:                               ; CODE XREF: main+132↑j
.text:0000000000001BBB                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001BC2                 mov     edx, 5          ; category
.text:0000000000001BC7                 xor     edi, edi        ; domainname
.text:0000000000001BC9                 call    _dcgettext
.text:0000000000001BCE                 xor     esi, esi        ; errnum
.text:0000000000001BD0                 mov     rdx, rax        ; format
.text:0000000000001BD3                 xor     edi, edi        ; status
.text:0000000000001BD5                 xor     eax, eax
.text:0000000000001BD7                 call    _error
.text:0000000000001BDC
.text:0000000000001BDC loc_1BDC:                               ; CODE XREF: main+A9↑j
.text:0000000000001BDC                                         ; main+682↑j
.text:0000000000001BDC                 mov     edi, 1          ; status
.text:0000000000001BE1                 call    usage
.text:0000000000001BE6 ; ---------------------------------------------------------------------------
.text:0000000000001BE6
.text:0000000000001BE6 loc_1BE6:                               ; CODE XREF: main+440↑j
.text:0000000000001BE6                 call    ___stack_chk_fail
.text:0000000000001BE6 ; } // starts at 1530
.text:0000000000001BE6 main            endp
.text:0000000000001BE6
.text:0000000000001BE6 ; ---------------------------------------------------------------------------
.text:0000000000001BEB                 align 10h
.text:0000000000001BF0
.text:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BF0
.text:0000000000001BF0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001BF0
.text:0000000000001BF0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001BF0                 public start
.text:0000000000001BF0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001BF0 ; __unwind {
.text:0000000000001BF0                 xor     ebp, ebp
.text:0000000000001BF2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001BF5                 pop     rsi             ; argc
.text:0000000000001BF6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001BF9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001BFD                 push    rax
.text:0000000000001BFE                 push    rsp             ; stack_end
.text:0000000000001BFF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001C06                 lea     rcx, __libc_csu_init ; init
.text:0000000000001C0D                 lea     rdi, main       ; main
.text:0000000000001C14                 call    cs:__libc_start_main_ptr
.text:0000000000001C1A                 hlt
.text:0000000000001C1A ; } // starts at 1BF0
.text:0000000000001C1A start           endp
.text:0000000000001C1A
.text:0000000000001C1A ; ---------------------------------------------------------------------------
.text:0000000000001C1B                 align 20h
.text:0000000000001C20
.text:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C20
.text:0000000000001C20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001C20
.text:0000000000001C20 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1CD3↓p
.text:0000000000001C20                 lea     rdi, __bss_start
.text:0000000000001C27                 push    rbp
.text:0000000000001C28                 lea     rax, __bss_start
.text:0000000000001C2F                 cmp     rax, rdi
.text:0000000000001C32                 mov     rbp, rsp
.text:0000000000001C35                 jz      short loc_1C50
.text:0000000000001C37                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001C3E                 test    rax, rax
.text:0000000000001C41                 jz      short loc_1C50
.text:0000000000001C43                 pop     rbp
.text:0000000000001C44                 jmp     rax
.text:0000000000001C44 ; ---------------------------------------------------------------------------
.text:0000000000001C46                 align 10h
.text:0000000000001C50
.text:0000000000001C50 loc_1C50:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001C50                                         ; deregister_tm_clones+21↑j
.text:0000000000001C50                 pop     rbp
.text:0000000000001C51                 retn
.text:0000000000001C51 deregister_tm_clones endp
.text:0000000000001C51
.text:0000000000001C51 ; ---------------------------------------------------------------------------
.text:0000000000001C52                 align 20h
.text:0000000000001C60
.text:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C60
.text:0000000000001C60 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001C60
.text:0000000000001C60 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001C60                 lea     rdi, __bss_start
.text:0000000000001C67                 lea     rsi, __bss_start
.text:0000000000001C6E                 push    rbp
.text:0000000000001C6F                 sub     rsi, rdi
.text:0000000000001C72                 mov     rbp, rsp
.text:0000000000001C75                 sar     rsi, 3
.text:0000000000001C79                 mov     rax, rsi
.text:0000000000001C7C                 shr     rax, 3Fh
.text:0000000000001C80                 add     rsi, rax
.text:0000000000001C83                 sar     rsi, 1
.text:0000000000001C86                 jz      short loc_1CA0
.text:0000000000001C88                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001C8F                 test    rax, rax
.text:0000000000001C92                 jz      short loc_1CA0
.text:0000000000001C94                 pop     rbp
.text:0000000000001C95                 jmp     rax
.text:0000000000001C95 ; ---------------------------------------------------------------------------
.text:0000000000001C97                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001CA0                                         ; register_tm_clones+32↑j
.text:0000000000001CA0                 pop     rbp
.text:0000000000001CA1                 retn
.text:0000000000001CA1 register_tm_clones endp
.text:0000000000001CA1
.text:0000000000001CA1 ; ---------------------------------------------------------------------------
.text:0000000000001CA2                 align 10h
.text:0000000000001CB0
.text:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CB0
.text:0000000000001CB0 ; Attributes: info_from_lumina
.text:0000000000001CB0
.text:0000000000001CB0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001CB0                 cmp     cs:completed_7697, 0
.text:0000000000001CB7                 jnz     short locret_1CE8
.text:0000000000001CB9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001CC1                 push    rbp
.text:0000000000001CC2                 mov     rbp, rsp
.text:0000000000001CC5                 jz      short loc_1CD3
.text:0000000000001CC7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001CCE                 call    __cxa_finalize
.text:0000000000001CD3
.text:0000000000001CD3 loc_1CD3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001CD3                 call    deregister_tm_clones
.text:0000000000001CD8                 mov     cs:completed_7697, 1
.text:0000000000001CDF                 pop     rbp
.text:0000000000001CE0                 retn
.text:0000000000001CE0 ; ---------------------------------------------------------------------------
.text:0000000000001CE1                 align 8
.text:0000000000001CE8
.text:0000000000001CE8 locret_1CE8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001CE8                 rep retn
.text:0000000000001CE8 __do_global_dtors_aux endp
.text:0000000000001CE8
.text:0000000000001CE8 ; ---------------------------------------------------------------------------
.text:0000000000001CEA                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CF0
.text:0000000000001CF0 ; Attributes: bp-based frame
.text:0000000000001CF0
.text:0000000000001CF0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001CF0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001CF0                 push    rbp
.text:0000000000001CF1                 mov     rbp, rsp
.text:0000000000001CF4                 pop     rbp
.text:0000000000001CF5                 jmp     register_tm_clones
.text:0000000000001CF5 frame_dummy     endp
.text:0000000000001CF5
.text:0000000000001CF5 ; ---------------------------------------------------------------------------
.text:0000000000001CFA                 align 20h
.text:0000000000001D00
.text:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D00
.text:0000000000001D00 ; Attributes: noreturn
.text:0000000000001D00
.text:0000000000001D00 ; void __fastcall __noreturn usage(int status)
.text:0000000000001D00                 public usage
.text:0000000000001D00 usage           proc near               ; CODE XREF: main+686↑p
.text:0000000000001D00                                         ; main+6B1↑p
.text:0000000000001D00
.text:0000000000001D00 var_A8          = qword ptr -0A8h
.text:0000000000001D00 var_A0          = qword ptr -0A0h
.text:0000000000001D00 var_98          = qword ptr -98h
.text:0000000000001D00 var_90          = qword ptr -90h
.text:0000000000001D00 var_88          = qword ptr -88h
.text:0000000000001D00 var_80          = qword ptr -80h
.text:0000000000001D00 var_78          = qword ptr -78h
.text:0000000000001D00 var_70          = qword ptr -70h
.text:0000000000001D00 var_68          = qword ptr -68h
.text:0000000000001D00 var_60          = qword ptr -60h
.text:0000000000001D00 var_58          = qword ptr -58h
.text:0000000000001D00 var_50          = qword ptr -50h
.text:0000000000001D00 var_48          = qword ptr -48h
.text:0000000000001D00 var_40          = qword ptr -40h
.text:0000000000001D00 var_30          = qword ptr -30h
.text:0000000000001D00
.text:0000000000001D00 ; __unwind {
.text:0000000000001D00                 push    r13
.text:0000000000001D02                 push    r12
.text:0000000000001D04                 mov     edx, 5          ; category
.text:0000000000001D09                 push    rbp
.text:0000000000001D0A                 push    rbx
.text:0000000000001D0B                 mov     ebp, edi
.text:0000000000001D0D                 sub     rsp, 88h
.text:0000000000001D14                 mov     rbx, cs:program_name
.text:0000000000001D1B                 mov     rax, fs:28h
.text:0000000000001D24                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001D29                 xor     eax, eax
.text:0000000000001D2B                 test    edi, edi
.text:0000000000001D2D                 jz      short loc_1D5D
.text:0000000000001D2F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001D36                 xor     edi, edi        ; domainname
.text:0000000000001D38                 call    _dcgettext
.text:0000000000001D3D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001D44                 mov     rdx, rax
.text:0000000000001D47                 mov     rcx, rbx
.text:0000000000001D4A                 mov     esi, 1
.text:0000000000001D4F                 xor     eax, eax
.text:0000000000001D51                 call    ___fprintf_chk
.text:0000000000001D56
.text:0000000000001D56 loc_1D56:                               ; CODE XREF: usage+27E↓j
.text:0000000000001D56                 mov     edi, ebp        ; status
.text:0000000000001D58                 call    _exit
.text:0000000000001D5D ; ---------------------------------------------------------------------------
.text:0000000000001D5D
.text:0000000000001D5D loc_1D5D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001D5D                 lea     rsi, aUsageSOptionNa ; "Usage: %s [OPTION]... NAME...\n"
.text:0000000000001D64                 xor     edi, edi        ; domainname
.text:0000000000001D66                 call    _dcgettext
.text:0000000000001D6B                 mov     rdx, rbx
.text:0000000000001D6E                 mov     rsi, rax
.text:0000000000001D71                 mov     edi, 1
.text:0000000000001D76                 xor     eax, eax
.text:0000000000001D78                 call    ___printf_chk
.text:0000000000001D7D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D84                 lea     rsi, aDiagnoseInvali ; "Diagnose invalid or unportable file nam"...
.text:0000000000001D8B                 mov     edx, 5          ; category
.text:0000000000001D90                 xor     edi, edi        ; domainname
.text:0000000000001D92                 call    _dcgettext
.text:0000000000001D97                 mov     rsi, rbx        ; stream
.text:0000000000001D9A                 mov     rdi, rax        ; s
.text:0000000000001D9D                 call    _fputs_unlocked
.text:0000000000001DA2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001DA9                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001DB0                 mov     edx, 5          ; category
.text:0000000000001DB5                 xor     edi, edi        ; domainname
.text:0000000000001DB7                 call    _dcgettext
.text:0000000000001DBC                 mov     rsi, rbx        ; stream
.text:0000000000001DBF                 mov     rdi, rax        ; s
.text:0000000000001DC2                 call    _fputs_unlocked
.text:0000000000001DC7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001DCE                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001DD5                 mov     edx, 5          ; category
.text:0000000000001DDA                 xor     edi, edi        ; domainname
.text:0000000000001DDC                 call    _dcgettext
.text:0000000000001DE1                 mov     rsi, rbx        ; stream
.text:0000000000001DE4                 mov     rdi, rax        ; s
.text:0000000000001DE7                 lea     rbx, aPathchk   ; "pathchk"
.text:0000000000001DEE                 call    _fputs_unlocked
.text:0000000000001DF3                 lea     rax, asc_4AAC   ; "["
.text:0000000000001DFA                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001E01                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001E0A                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001E13                 mov     rdx, rsp
.text:0000000000001E16                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001E1A                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001E21                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001E26                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001E2D                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001E32                 lea     rax, domainname ; "coreutils"
.text:0000000000001E39                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001E3E                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001E45                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001E4A                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001E51                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001E56                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001E5B                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001E62                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001E67                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001E6E                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001E73                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001E78                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001E7D                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001E82                 nop     word ptr [rax+rax+00h]
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: usage+1A5↓j
.text:0000000000001E88                 add     rdx, 10h
.text:0000000000001E8C                 mov     rdi, [rdx]
.text:0000000000001E8F                 test    rdi, rdi
.text:0000000000001E92                 jz      short loc_1EA7
.text:0000000000001E94                 mov     ecx, 8
.text:0000000000001E99                 mov     rsi, rbx
.text:0000000000001E9C                 repe cmpsb
.text:0000000000001E9E                 setnbe  al
.text:0000000000001EA1                 sbb     al, 0
.text:0000000000001EA3                 test    al, al
.text:0000000000001EA5                 jnz     short loc_1E88
.text:0000000000001EA7
.text:0000000000001EA7 loc_1EA7:                               ; CODE XREF: usage+192↑j
.text:0000000000001EA7                 mov     r12, [rdx+8]
.text:0000000000001EAB                 xor     edi, edi        ; domainname
.text:0000000000001EAD                 mov     edx, 5          ; category
.text:0000000000001EB2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001EB9                 test    r12, r12
.text:0000000000001EBC                 jz      loc_1F83
.text:0000000000001EC2                 call    _dcgettext
.text:0000000000001EC7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001ECE                 lea     rdx, unk_4B22
.text:0000000000001ED5                 mov     rsi, rax
.text:0000000000001ED8                 mov     edi, 1
.text:0000000000001EDD                 xor     eax, eax
.text:0000000000001EDF                 call    ___printf_chk
.text:0000000000001EE4                 xor     esi, esi        ; locale
.text:0000000000001EE6                 mov     edi, 5          ; category
.text:0000000000001EEB                 call    _setlocale
.text:0000000000001EF0                 test    rax, rax
.text:0000000000001EF3                 jz      short loc_1F11
.text:0000000000001EF5                 lea     rsi, s2         ; "en_"
.text:0000000000001EFC                 mov     edx, 3          ; n
.text:0000000000001F01                 mov     rdi, rax        ; s1
.text:0000000000001F04                 call    _strncmp
.text:0000000000001F09                 test    eax, eax
.text:0000000000001F0B                 jnz     loc_2018
.text:0000000000001F11
.text:0000000000001F11 loc_1F11:                               ; CODE XREF: usage+1F3↑j
.text:0000000000001F11                                         ; usage+33D↓j
.text:0000000000001F11                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001F18                 xor     edi, edi        ; domainname
.text:0000000000001F1A                 mov     edx, 5          ; category
.text:0000000000001F1F                 call    _dcgettext
.text:0000000000001F24                 lea     rcx, aPathchk   ; "pathchk"
.text:0000000000001F2B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001F32                 mov     rsi, rax
.text:0000000000001F35                 mov     edi, 1
.text:0000000000001F3A                 xor     eax, eax
.text:0000000000001F3C                 call    ___printf_chk
.text:0000000000001F41                 cmp     r12, rbx
.text:0000000000001F44                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001F4B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001F52                 cmovz   rbx, rcx
.text:0000000000001F56
.text:0000000000001F56 loc_1F56:                               ; CODE XREF: usage+30C↓j
.text:0000000000001F56                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001F5D                 xor     edi, edi        ; domainname
.text:0000000000001F5F                 mov     edx, 5          ; category
.text:0000000000001F64                 call    _dcgettext
.text:0000000000001F69                 mov     rcx, rbx
.text:0000000000001F6C                 mov     rsi, rax
.text:0000000000001F6F                 mov     rdx, r12
.text:0000000000001F72                 mov     edi, 1
.text:0000000000001F77                 xor     eax, eax
.text:0000000000001F79                 call    ___printf_chk
.text:0000000000001F7E                 jmp     loc_1D56
.text:0000000000001F83 ; ---------------------------------------------------------------------------
.text:0000000000001F83
.text:0000000000001F83 loc_1F83:                               ; CODE XREF: usage+1BC↑j
.text:0000000000001F83                 call    _dcgettext
.text:0000000000001F88                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001F8F                 lea     rdx, unk_4B22
.text:0000000000001F96                 mov     rsi, rax
.text:0000000000001F99                 mov     edi, 1
.text:0000000000001F9E                 xor     eax, eax
.text:0000000000001FA0                 call    ___printf_chk
.text:0000000000001FA5                 xor     esi, esi        ; locale
.text:0000000000001FA7                 mov     edi, 5          ; category
.text:0000000000001FAC                 call    _setlocale
.text:0000000000001FB1                 test    rax, rax
.text:0000000000001FB4                 jz      short loc_1FCE
.text:0000000000001FB6                 lea     rsi, s2         ; "en_"
.text:0000000000001FBD                 mov     edx, 3          ; n
.text:0000000000001FC2                 mov     rdi, rax        ; s1
.text:0000000000001FC5                 call    _strncmp
.text:0000000000001FCA                 test    eax, eax
.text:0000000000001FCC                 jnz     short loc_2011
.text:0000000000001FCE
.text:0000000000001FCE loc_1FCE:                               ; CODE XREF: usage+2B4↑j
.text:0000000000001FCE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001FD5                 mov     edx, 5          ; category
.text:0000000000001FDA                 xor     edi, edi        ; domainname
.text:0000000000001FDC                 lea     r12, aPathchk   ; "pathchk"
.text:0000000000001FE3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001FEA                 call    _dcgettext
.text:0000000000001FEF                 lea     rcx, aPathchk   ; "pathchk"
.text:0000000000001FF6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001FFD                 mov     rsi, rax
.text:0000000000002000                 mov     edi, 1
.text:0000000000002005                 xor     eax, eax
.text:0000000000002007                 call    ___printf_chk
.text:000000000000200C                 jmp     loc_1F56
.text:0000000000002011 ; ---------------------------------------------------------------------------
.text:0000000000002011
.text:0000000000002011 loc_2011:                               ; CODE XREF: usage+2CC↑j
.text:0000000000002011                 lea     r12, aPathchk   ; "pathchk"
.text:0000000000002018
.text:0000000000002018 loc_2018:                               ; CODE XREF: usage+20B↑j
.text:0000000000002018                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000201F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002026                 xor     edi, edi        ; domainname
.text:0000000000002028                 mov     edx, 5          ; category
.text:000000000000202D                 call    _dcgettext
.text:0000000000002032                 mov     rsi, r13        ; stream
.text:0000000000002035                 mov     rdi, rax        ; s
.text:0000000000002038                 call    _fputs_unlocked
.text:000000000000203D                 jmp     loc_1F11
.text:000000000000203D ; } // starts at 1D00
.text:000000000000203D usage           endp
.text:000000000000203D
.text:000000000000203D ; ---------------------------------------------------------------------------
.text:0000000000002042                 align 10h
.text:0000000000002050
.text:0000000000002050 ; =============== S U B R O U T I N E =======================================
.text:0000000000002050
.text:0000000000002050
.text:0000000000002050                 public close_stdout_set_file_name
.text:0000000000002050 close_stdout_set_file_name proc near
.text:0000000000002050 ; __unwind {
.text:0000000000002050                 mov     cs:file_name, rdi
.text:0000000000002057                 retn
.text:0000000000002057 ; } // starts at 2050
.text:0000000000002057 close_stdout_set_file_name endp
.text:0000000000002057
.text:0000000000002057 ; ---------------------------------------------------------------------------
.text:0000000000002058                 align 20h
.text:0000000000002060
.text:0000000000002060 ; =============== S U B R O U T I N E =======================================
.text:0000000000002060
.text:0000000000002060
.text:0000000000002060                 public close_stdout_set_ignore_EPIPE
.text:0000000000002060 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002060 ; __unwind {
.text:0000000000002060                 mov     cs:ignore_EPIPE, dil
.text:0000000000002067                 retn
.text:0000000000002067 ; } // starts at 2060
.text:0000000000002067 close_stdout_set_ignore_EPIPE endp
.text:0000000000002067
.text:0000000000002067 ; ---------------------------------------------------------------------------
.text:0000000000002068                 align 10h
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070 ; Attributes: info_from_lumina
.text:0000000000002070
.text:0000000000002070 ; void __cdecl close_stdout()
.text:0000000000002070                 public close_stdout
.text:0000000000002070 close_stdout    proc near               ; DATA XREF: main+65↑o
.text:0000000000002070 ; __unwind {
.text:0000000000002070                 push    rbp
.text:0000000000002071                 push    rbx
.text:0000000000002072                 sub     rsp, 8
.text:0000000000002076                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000207D                 call    close_stream
.text:0000000000002082                 test    eax, eax
.text:0000000000002084                 jz      short loc_209C
.text:0000000000002086                 call    ___errno_location
.text:000000000000208B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002092                 mov     rbx, rax
.text:0000000000002095                 jz      short loc_20B3
.text:0000000000002097                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000209A                 jnz     short loc_20B3
.text:000000000000209C
.text:000000000000209C loc_209C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000209C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000020A3                 call    close_stream
.text:00000000000020A8                 test    eax, eax
.text:00000000000020AA                 jnz     short loc_20F2
.text:00000000000020AC                 add     rsp, 8
.text:00000000000020B0                 pop     rbx
.text:00000000000020B1                 pop     rbp
.text:00000000000020B2                 retn
.text:00000000000020B3 ; ---------------------------------------------------------------------------
.text:00000000000020B3
.text:00000000000020B3 loc_20B3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000020B3                                         ; close_stdout+2A↑j
.text:00000000000020B3                 lea     rsi, aWriteError ; "write error"
.text:00000000000020BA                 xor     edi, edi        ; domainname
.text:00000000000020BC                 mov     edx, 5          ; category
.text:00000000000020C1                 call    _dcgettext
.text:00000000000020C6                 mov     rdi, cs:file_name
.text:00000000000020CD                 mov     rbp, rax
.text:00000000000020D0                 test    rdi, rdi
.text:00000000000020D3                 jz      short loc_20FD
.text:00000000000020D5                 call    quotearg_colon
.text:00000000000020DA                 mov     esi, [rbx]      ; errnum
.text:00000000000020DC                 lea     rdx, format     ; "%s: %s"
.text:00000000000020E3                 mov     rcx, rax
.text:00000000000020E6                 mov     r8, rbp
.text:00000000000020E9                 xor     edi, edi        ; status
.text:00000000000020EB                 xor     eax, eax
.text:00000000000020ED                 call    _error
.text:00000000000020F2
.text:00000000000020F2 loc_20F2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000020F2                                         ; close_stdout+A2↓j
.text:00000000000020F2                 mov     edi, cs:exit_failure ; status
.text:00000000000020F8                 call    __exit
.text:00000000000020FD ; ---------------------------------------------------------------------------
.text:00000000000020FD
.text:00000000000020FD loc_20FD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000020FD                 mov     esi, [rbx]      ; errnum
.text:00000000000020FF                 lea     rdx, format+4   ; format
.text:0000000000002106                 mov     rcx, rax
.text:0000000000002109                 xor     edi, edi        ; status
.text:000000000000210B                 xor     eax, eax
.text:000000000000210D                 call    _error
.text:0000000000002112                 jmp     short loc_20F2
.text:0000000000002112 ; } // starts at 2070
.text:0000000000002112 close_stdout    endp
.text:0000000000002112
.text:0000000000002112 ; ---------------------------------------------------------------------------
.text:0000000000002114                 align 20h
.text:0000000000002120
.text:0000000000002120 ; =============== S U B R O U T I N E =======================================
.text:0000000000002120
.text:0000000000002120
.text:0000000000002120                 public set_program_name
.text:0000000000002120 set_program_name proc near              ; CODE XREF: main+30↑p
.text:0000000000002120 ; __unwind {
.text:0000000000002120                 test    rdi, rdi
.text:0000000000002123                 push    rbx
.text:0000000000002124                 jz      short loc_219D
.text:0000000000002126                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000212B                 mov     rbx, rdi
.text:000000000000212E                 call    _strrchr
.text:0000000000002133                 test    rax, rax
.text:0000000000002136                 jz      short loc_218D
.text:0000000000002138                 lea     r8, [rax+1]
.text:000000000000213C                 mov     rdx, r8
.text:000000000000213F                 sub     rdx, rbx
.text:0000000000002142                 cmp     rdx, 6
.text:0000000000002146                 jle     short loc_218D
.text:0000000000002148                 lea     rsi, [rax-6]
.text:000000000000214C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002153                 mov     ecx, 7
.text:0000000000002158                 repe cmpsb
.text:000000000000215A                 setnbe  dl
.text:000000000000215D                 sbb     dl, 0
.text:0000000000002160                 test    dl, dl
.text:0000000000002162                 jnz     short loc_218D
.text:0000000000002164                 lea     rdi, aLt        ; "lt-"
.text:000000000000216B                 mov     ecx, 3
.text:0000000000002170                 mov     rsi, r8
.text:0000000000002173                 mov     rbx, r8
.text:0000000000002176                 repe cmpsb
.text:0000000000002178                 setnbe  dl
.text:000000000000217B                 sbb     dl, 0
.text:000000000000217E                 test    dl, dl
.text:0000000000002180                 jnz     short loc_218D
.text:0000000000002182                 lea     rbx, [rax+4]
.text:0000000000002186                 mov     cs:__bss_start, rbx
.text:000000000000218D
.text:000000000000218D loc_218D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000218D                                         ; set_program_name+26↑j ...
.text:000000000000218D                 mov     cs:program_name, rbx
.text:0000000000002194                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000219B                 pop     rbx
.text:000000000000219C                 retn
.text:000000000000219D ; ---------------------------------------------------------------------------
.text:000000000000219D
.text:000000000000219D loc_219D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000219D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000021A4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000021AB                 mov     edx, 37h ; '7'  ; n
.text:00000000000021B0                 mov     esi, 1          ; size
.text:00000000000021B5                 call    _fwrite
.text:00000000000021BA                 call    _abort
.text:00000000000021BA ; } // starts at 2120
.text:00000000000021BA set_program_name endp
.text:00000000000021BA
.text:00000000000021BA ; ---------------------------------------------------------------------------
.text:00000000000021BF                 align 20h
.text:00000000000021C0
.text:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021C0
.text:00000000000021C0 ; Attributes: info_from_lumina
.text:00000000000021C0
.text:00000000000021C0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000021C0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000021C0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000021C0 ; __unwind {
.text:00000000000021C0                 push    rbp
.text:00000000000021C1                 push    rbx
.text:00000000000021C2                 mov     rbp, rdi
.text:00000000000021C5                 mov     ebx, esi
.text:00000000000021C7                 sub     rsp, 8
.text:00000000000021CB                 call    locale_charset
.text:00000000000021D0                 movzx   edx, byte ptr [rax]
.text:00000000000021D3                 and     edx, 0FFFFFFDFh
.text:00000000000021D6                 cmp     dl, 55h ; 'U'
.text:00000000000021D9                 jz      short loc_2250
.text:00000000000021DB                 cmp     dl, 47h ; 'G'
.text:00000000000021DE                 jz      short loc_2200
.text:00000000000021E0
.text:00000000000021E0 loc_21E0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000021E0                                         ; gettext_quote+50↓j ...
.text:00000000000021E0                 lea     rax, unk_4FD3
.text:00000000000021E7                 lea     rdx, asc_4FD5   ; "'"
.text:00000000000021EE                 cmp     ebx, 9
.text:00000000000021F1                 cmovnz  rax, rdx
.text:00000000000021F5                 add     rsp, 8
.text:00000000000021F9                 pop     rbx
.text:00000000000021FA                 pop     rbp
.text:00000000000021FB                 retn
.text:00000000000021FB ; ---------------------------------------------------------------------------
.text:00000000000021FC                 align 20h
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002200                 movzx   edx, byte ptr [rax+1]
.text:0000000000002204                 and     edx, 0FFFFFFDFh
.text:0000000000002207                 cmp     dl, 42h ; 'B'
.text:000000000000220A                 jnz     short loc_21E0
.text:000000000000220C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002210                 jnz     short loc_21E0
.text:0000000000002212                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002216                 jnz     short loc_21E0
.text:0000000000002218                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000221C                 jnz     short loc_21E0
.text:000000000000221E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002222                 jnz     short loc_21E0
.text:0000000000002224                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002228                 jnz     short loc_21E0
.text:000000000000222A                 cmp     byte ptr [rax+7], 0
.text:000000000000222E                 jnz     short loc_21E0
.text:0000000000002230                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002234                 lea     rax, unk_4FCC
.text:000000000000223B                 lea     rdx, unk_4FD0
.text:0000000000002242                 cmovnz  rax, rdx
.text:0000000000002246                 add     rsp, 8
.text:000000000000224A                 pop     rbx
.text:000000000000224B                 pop     rbp
.text:000000000000224C                 retn
.text:000000000000224C ; ---------------------------------------------------------------------------
.text:000000000000224D                 align 10h
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002250                 movzx   edx, byte ptr [rax+1]
.text:0000000000002254                 and     edx, 0FFFFFFDFh
.text:0000000000002257                 cmp     dl, 54h ; 'T'
.text:000000000000225A                 jnz     short loc_21E0
.text:000000000000225C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002260                 and     edx, 0FFFFFFDFh
.text:0000000000002263                 cmp     dl, 46h ; 'F'
.text:0000000000002266                 jnz     loc_21E0
.text:000000000000226C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002270                 jnz     loc_21E0
.text:0000000000002276                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000227A                 jnz     loc_21E0
.text:0000000000002280                 cmp     byte ptr [rax+5], 0
.text:0000000000002284                 jnz     loc_21E0
.text:000000000000228A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000228E                 lea     rax, unk_4FC4
.text:0000000000002295                 lea     rdx, unk_4FC8
.text:000000000000229C                 cmovnz  rax, rdx
.text:00000000000022A0                 add     rsp, 8
.text:00000000000022A4                 pop     rbx
.text:00000000000022A5                 pop     rbp
.text:00000000000022A6                 retn
.text:00000000000022A6 ; } // starts at 21C0
.text:00000000000022A6 gettext_quote   endp
.text:00000000000022A6
.text:00000000000022A6 ; ---------------------------------------------------------------------------
.text:00000000000022A7                 align 10h
.text:00000000000022B0
.text:00000000000022B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022B0
.text:00000000000022B0 ; Attributes: info_from_lumina
.text:00000000000022B0
.text:00000000000022B0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000022B0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000022B0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000022B0
.text:00000000000022B0 var_E0          = dword ptr -0E0h
.text:00000000000022B0 var_DB          = byte ptr -0DBh
.text:00000000000022B0 var_DA          = byte ptr -0DAh
.text:00000000000022B0 var_D9          = byte ptr -0D9h
.text:00000000000022B0 s               = qword ptr -0D8h
.text:00000000000022B0 n               = qword ptr -0D0h
.text:00000000000022B0 var_C8          = qword ptr -0C8h
.text:00000000000022B0 ps              = qword ptr -0C0h
.text:00000000000022B0 var_B8          = qword ptr -0B8h
.text:00000000000022B0 var_B0          = qword ptr -0B0h
.text:00000000000022B0 var_A8          = qword ptr -0A8h
.text:00000000000022B0 s2              = qword ptr -0A0h
.text:00000000000022B0 var_98          = qword ptr -98h
.text:00000000000022B0 var_90          = qword ptr -90h
.text:00000000000022B0 var_88          = qword ptr -88h
.text:00000000000022B0 var_80          = qword ptr -80h
.text:00000000000022B0 var_78          = qword ptr -78h
.text:00000000000022B0 var_70          = dword ptr -70h
.text:00000000000022B0 var_6C          = byte ptr -6Ch
.text:00000000000022B0 var_6B          = byte ptr -6Bh
.text:00000000000022B0 var_6A          = byte ptr -6Ah
.text:00000000000022B0 var_69          = byte ptr -69h
.text:00000000000022B0 var_68          = qword ptr -68h
.text:00000000000022B0 var_60          = qword ptr -60h
.text:00000000000022B0 wc              = dword ptr -4Ch
.text:00000000000022B0 var_48          = qword ptr -48h
.text:00000000000022B0 var_40          = qword ptr -40h
.text:00000000000022B0 arg_0           = qword ptr  8
.text:00000000000022B0 arg_8           = qword ptr  10h
.text:00000000000022B0 arg_10          = qword ptr  18h
.text:00000000000022B0
.text:00000000000022B0 ; __unwind {
.text:00000000000022B0                 push    r15
.text:00000000000022B2                 push    r14
.text:00000000000022B4                 mov     r15d, r8d
.text:00000000000022B7                 push    r13
.text:00000000000022B9                 push    r12
.text:00000000000022BB                 mov     r14, rdi
.text:00000000000022BE                 push    rbp
.text:00000000000022BF                 push    rbx
.text:00000000000022C0                 mov     ebx, r9d
.text:00000000000022C3                 mov     r13, rsi
.text:00000000000022C6                 mov     rbp, rcx
.text:00000000000022C9                 and     ebx, 2
.text:00000000000022CC                 sub     rsp, 0B8h
.text:00000000000022D3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000022DB                 mov     [rsp+0E8h+s], rdx
.text:00000000000022E0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000022E5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000022EA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000022EF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000022F7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000022FC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002304                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002309                 mov     rax, fs:28h
.text:0000000000002312                 mov     [rsp+0E8h+var_40], rax
.text:000000000000231A                 xor     eax, eax
.text:000000000000231C                 call    ___ctype_get_mb_cur_max
.text:0000000000002321                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002325                 mov     [rsp+0E8h+var_90], rax
.text:000000000000232A                 ja      def_2341        ; jumptable 00000000000121F1 default case
.text:0000000000002330                 lea     rcx, jpt_2341
.text:0000000000002337                 mov     edx, r15d
.text:000000000000233A                 movsxd  rax, ds:(jpt_2341 - 5040h)[rcx+rdx*4]
.text:000000000000233E                 add     rax, rcx
.text:0000000000002341                 jmp     rax             ; switch jump
.text:0000000000002343 ; ---------------------------------------------------------------------------
.text:0000000000002343
.text:0000000000002343 loc_2343:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002343                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002343                                         ; DATA XREF: ...
.text:0000000000002343                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002348                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000234D                 xor     r12d, r12d
.text:0000000000002350                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002359                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000235E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002363
.text:0000000000002363 loc_2363:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002363                 lea     rax, asc_4FD5   ; "'"
.text:000000000000236A                 mov     [rsp+0E8h+n], 1
.text:0000000000002373                 xor     r15d, r15d
.text:0000000000002376                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000237E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002383
.text:0000000000002383 loc_2383:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002383                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002383                 xor     r11d, r11d
.text:0000000000002386                 mov     rax, rbp
.text:0000000000002389                 mov     r8d, r12d
.text:000000000000238C                 mov     rbp, r11
.text:000000000000238F                 mov     r11, rax
.text:0000000000002392                 nop     word ptr [rax+rax+00h]
.text:0000000000002398
.text:0000000000002398 loc_2398:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002398                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002398                 cmp     r11, rbp
.text:000000000000239B                 setnz   r12b
.text:000000000000239F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000023A3                 jnz     short loc_23B2
.text:00000000000023A5                 mov     rax, [rsp+0E8h+s]
.text:00000000000023AA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000023AE                 setnz   r12b
.text:00000000000023B2
.text:00000000000023B2 loc_23B2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000023B2                 test    r12b, r12b
.text:00000000000023B5                 jz      loc_2A10
.text:00000000000023BB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023C0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000023C5                 lea     r9, [rdi+rbp]
.text:00000000000023C9                 setnz   al
.text:00000000000023CC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000023D0                 mov     r10d, eax
.text:00000000000023D3                 jz      loc_2480
.text:00000000000023D9                 mov     rax, [rsp+0E8h+n]
.text:00000000000023DE                 test    rax, rax
.text:00000000000023E1                 jz      loc_2810
.text:00000000000023E7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000023EB                 lea     rbx, [rbp+rax+0]
.text:00000000000023F0                 jnz     short loc_2420
.text:00000000000023F2                 cmp     rax, 1
.text:00000000000023F6                 jbe     short loc_2420
.text:00000000000023F8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000023FD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002402                 mov     [rsp+0E8h+ps], r9
.text:0000000000002407                 call    _strlen
.text:000000000000240C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002412                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002418                 mov     r11, rax
.text:000000000000241B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002420                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002420                 cmp     rbx, r11
.text:0000000000002423                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002428                 ja      loc_29E0
.text:000000000000242E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002433                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002438                 mov     rdi, r9         ; s1
.text:000000000000243B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002440                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002445                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000244A                 call    _memcmp
.text:000000000000244F                 test    eax, eax
.text:0000000000002451                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002456                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000245C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002461                 jnz     loc_29E0
.text:0000000000002467                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000246C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002472                 jnz     loc_33F5
.text:0000000000002478                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002480                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002480                 movzx   ebx, byte ptr [r9]
.text:0000000000002484                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002487                 ja      def_249E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000248D                 lea     rcx, jpt_249E
.text:0000000000002494                 movzx   edx, bl
.text:0000000000002497                 movsxd  rax, ds:(jpt_249E - 506Ch)[rcx+rdx*4]
.text:000000000000249B                 add     rax, rcx
.text:000000000000249E                 jmp     rax             ; switch jump
.text:00000000000024A0 ; ---------------------------------------------------------------------------
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000024A0                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:00000000000024A0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000024A3
.text:00000000000024A3 loc_24A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024A3                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:00000000000024A3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000024A7                 setnz   al
.text:00000000000024AA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000024AE                 jnz     short loc_24BC
.text:00000000000024B0                 mov     rax, [rsp+0E8h+s]
.text:00000000000024B5                 cmp     byte ptr [rax+1], 0
.text:00000000000024B9                 setnz   al
.text:00000000000024BC
.text:00000000000024BC loc_24BC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000024BC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024C1                 setz    dl
.text:00000000000024C4                 test    al, al
.text:00000000000024C6                 jz      loc_2718
.text:00000000000024CC
.text:00000000000024CC loc_24CC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000024CC                 xor     r12d, r12d
.text:00000000000024CF                 xor     eax, eax
.text:00000000000024D1                 nop     dword ptr [rax+00000000h]
.text:00000000000024D8
.text:00000000000024D8 loc_24D8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000024D8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000024D8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000024DD                 jnz     loc_25F2
.text:00000000000024E3                 test    dl, dl
.text:00000000000024E5                 jnz     loc_25F2
.text:00000000000024EB
.text:00000000000024EB loc_24EB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000024EB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000024F0                 test    rsi, rsi
.text:00000000000024F3                 jz      short loc_2509
.text:00000000000024F5                 mov     edx, ebx
.text:00000000000024F7                 shr     dl, 5
.text:00000000000024FA                 movzx   edx, dl
.text:00000000000024FD                 mov     edx, [rsi+rdx*4]
.text:0000000000002500                 bt      edx, ebx
.text:0000000000002503                 jb      loc_2653
.text:0000000000002509
.text:0000000000002509 loc_2509:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002509                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002509                 test    r10b, r10b
.text:000000000000250C                 jnz     loc_2653
.text:0000000000002512                 xor     eax, 1
.text:0000000000002515                 add     rbp, 1
.text:0000000000002519                 and     eax, r8d
.text:000000000000251C
.text:000000000000251C loc_251C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000251C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000251C                 test    al, al
.text:000000000000251E                 jz      short loc_2540
.text:0000000000002520                 cmp     r13, r15
.text:0000000000002523                 jbe     short loc_252A
.text:0000000000002525                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000252A
.text:000000000000252A loc_252A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000252A                 lea     rax, [r15+1]
.text:000000000000252E                 cmp     r13, rax
.text:0000000000002531                 jbe     short loc_2539
.text:0000000000002533                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002539
.text:0000000000002539 loc_2539:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002539                 add     r15, 2
.text:000000000000253D                 xor     r8d, r8d
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002540                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002540                 cmp     r15, r13
.text:0000000000002543                 jnb     short loc_2549
.text:0000000000002545                 mov     [r14+r15], bl
.text:0000000000002549
.text:0000000000002549 loc_2549:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002549                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000254E                 add     r15, 1
.text:0000000000002552                 mov     eax, 0
.text:0000000000002557                 test    r12b, r12b
.text:000000000000255A                 cmovz   edi, eax
.text:000000000000255D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002562                 jmp     loc_2398
.text:0000000000002562 ; ---------------------------------------------------------------------------
.text:0000000000002567                 align 10h
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002570                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002570                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002573
.text:0000000000002573 loc_2573:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002573                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002573                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002577                 cmp     eax, 2
.text:000000000000257A                 jz      loc_2B38
.text:0000000000002580                 cmp     eax, 5
.text:0000000000002583                 jz      loc_2AF8
.text:0000000000002589                 cmp     eax, 2
.text:000000000000258C                 mov     ebx, 3Fh ; '?'
.text:0000000000002591                 setz    dl
.text:0000000000002594                 xor     r12d, r12d
.text:0000000000002597                 xor     eax, eax
.text:0000000000002599                 jmp     loc_24D8
.text:0000000000002599 ; ---------------------------------------------------------------------------
.text:000000000000259E                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000025A0                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:00000000000025A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000025A3
.text:00000000000025A3 loc_25A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025A3                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:00000000000025A3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000025A8                 jz      loc_2AB0
.text:00000000000025AE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000025B3                 xor     edx, edx
.text:00000000000025B5                 xor     eax, eax
.text:00000000000025B7                 mov     ebx, 27h ; '''
.text:00000000000025BC                 jmp     loc_24D8
.text:00000000000025BC ; ---------------------------------------------------------------------------
.text:00000000000025C1                 align 8
.text:00000000000025C8
.text:00000000000025C8 loc_25C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025C8                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:00000000000025C8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000025CD                 mov     ebx, 74h ; 't'
.text:00000000000025D2
.text:00000000000025D2 loc_25D2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000025D2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000025D2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000025D7                 setz    al
.text:00000000000025DA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000025DE                 jnz     loc_272E
.text:00000000000025E4
.text:00000000000025E4 loc_25E4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000025E4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000025E4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000025E9                 jnz     short loc_2650
.text:00000000000025EB
.text:00000000000025EB loc_25EB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000025EB                 mov     ebx, edx
.text:00000000000025ED                 xor     r12d, r12d
.text:00000000000025F0                 xor     eax, eax
.text:00000000000025F2
.text:00000000000025F2 loc_25F2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000025F2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000025F2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025F7                 jnz     loc_24EB
.text:00000000000025FD                 jmp     loc_2509
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:0000000000002602                 align 8
.text:0000000000002608
.text:0000000000002608 loc_2608:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002608                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002608                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000260D                 mov     ebx, 62h ; 'b'
.text:0000000000002612                 jmp     short loc_25E4
.text:0000000000002612 ; ---------------------------------------------------------------------------
.text:0000000000002614                 align 8
.text:0000000000002618
.text:0000000000002618 loc_2618:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002618                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002618                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000261D                 jz      loc_29F0
.text:0000000000002623                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002628                 jz      loc_2840
.text:000000000000262E
.text:000000000000262E loc_262E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000262E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002633                 jz      loc_2840
.text:0000000000002639                 cmp     [rsp+0E8h+n], 0
.text:000000000000263F                 jnz     loc_29FB
.text:0000000000002645                 mov     ebx, 5Ch ; '\'
.text:000000000000264A                 nop     word ptr [rax+rax+00h]
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002650                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002650                 xor     r12d, r12d
.text:0000000000002653
.text:0000000000002653 loc_2653:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002653                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002653                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002658                 setz    dl
.text:000000000000265B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002660                 mov     eax, edx
.text:0000000000002662                 jnz     loc_2EB8
.text:0000000000002668                 mov     eax, r8d
.text:000000000000266B                 xor     eax, 1
.text:000000000000266E                 and     al, dl
.text:0000000000002670                 jz      short loc_26A1
.text:0000000000002672                 cmp     r13, r15
.text:0000000000002675                 jbe     short loc_267C
.text:0000000000002677                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000267C
.text:000000000000267C loc_267C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000267C                 lea     rdx, [r15+1]
.text:0000000000002680                 cmp     r13, rdx
.text:0000000000002683                 jbe     short loc_268B
.text:0000000000002685                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000268B
.text:000000000000268B loc_268B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000268B                 lea     rdx, [r15+2]
.text:000000000000268F                 cmp     r13, rdx
.text:0000000000002692                 jbe     short loc_269A
.text:0000000000002694                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000269A
.text:000000000000269A loc_269A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000269A                 add     r15, 3
.text:000000000000269E                 mov     r8d, eax
.text:00000000000026A1
.text:00000000000026A1 loc_26A1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000026A1                 cmp     r13, r15
.text:00000000000026A4                 jbe     short loc_26AB
.text:00000000000026A6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000026AB
.text:00000000000026AB loc_26AB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000026AB                 add     r15, 1
.text:00000000000026AF                 add     rbp, 1
.text:00000000000026B3                 jmp     loc_2540
.text:00000000000026B3 ; ---------------------------------------------------------------------------
.text:00000000000026B8                 align 20h
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026C0                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:00000000000026C0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000026C5                 jnz     loc_2893
.text:00000000000026CB                 xor     edx, edx
.text:00000000000026CD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000026D2                 jz      loc_25EB
.text:00000000000026D8                 add     rbp, 1
.text:00000000000026DC                 jmp     loc_2398
.text:00000000000026DC ; ---------------------------------------------------------------------------
.text:00000000000026E1                 align 8
.text:00000000000026E8
.text:00000000000026E8 loc_26E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026E8                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:00000000000026E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000026ED                 setz    dl
.text:00000000000026F0                 xor     eax, eax
.text:00000000000026F2                 jmp     loc_24D8
.text:00000000000026F2 ; ---------------------------------------------------------------------------
.text:00000000000026F7                 align 20h
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002700                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002700                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002705                 mov     ebx, 61h ; 'a'
.text:000000000000270A                 jmp     loc_25E4
.text:000000000000270A ; ---------------------------------------------------------------------------
.text:000000000000270F                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002710                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002710                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002715                 setz    dl
.text:0000000000002718
.text:0000000000002718 loc_2718:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002718                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002718                 test    rbp, rbp
.text:000000000000271B                 jnz     loc_24CC
.text:0000000000002721
.text:0000000000002721 loc_2721:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002721                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002721                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002726                 and     al, dl
.text:0000000000002728                 jz      loc_24D8
.text:000000000000272E
.text:000000000000272E loc_272E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000272E                 mov     rbp, r11
.text:0000000000002731                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002739                 jmp     loc_2E39
.text:0000000000002739 ; ---------------------------------------------------------------------------
.text:000000000000273E                 align 20h
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002740                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002740                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002745                 setz    dl
.text:0000000000002748                 xor     r12d, r12d
.text:000000000000274B                 jmp     short loc_2721
.text:000000000000274B ; ---------------------------------------------------------------------------
.text:000000000000274D                 align 10h
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002750                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002750                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002755                 mov     ebx, 20h ; ' '
.text:000000000000275A                 setz    dl
.text:000000000000275D                 jmp     short loc_2721
.text:000000000000275D ; ---------------------------------------------------------------------------
.text:000000000000275F                 align 20h
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002760                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002760                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002765                 mov     ebx, 72h ; 'r'
.text:000000000000276A                 jmp     loc_25D2
.text:000000000000276A ; ---------------------------------------------------------------------------
.text:000000000000276F                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002770                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002770                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002775                 mov     ebx, 66h ; 'f'
.text:000000000000277A                 jmp     loc_25E4
.text:000000000000277A ; ---------------------------------------------------------------------------
.text:000000000000277F                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002780                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002780                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002785                 mov     ebx, 76h ; 'v'
.text:000000000000278A                 jmp     loc_25E4
.text:000000000000278A ; ---------------------------------------------------------------------------
.text:000000000000278F                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002790                                         ; DATA XREF: .rodata:jpt_249E↓o
.text:0000000000002790                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002795                 mov     ebx, 6Eh ; 'n'
.text:000000000000279A                 jmp     loc_25D2
.text:000000000000279A ; ---------------------------------------------------------------------------
.text:000000000000279F                 align 20h
.text:00000000000027A0
.text:00000000000027A0 def_282A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000027A0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000027A0                                         ; DATA XREF: ...
.text:00000000000027A0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000027A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000027A8
.text:00000000000027A8 def_249E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000027A8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000027A8                                         ; DATA XREF: ...
.text:00000000000027A8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000027AE                 jnz     loc_2B58
.text:00000000000027B4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000027B9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000027BE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000027C3                 call    ___ctype_b_loc
.text:00000000000027C8                 mov     rcx, [rax]
.text:00000000000027CB                 movzx   edx, bl
.text:00000000000027CE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000027D4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000027DA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000027DF                 mov     edi, 1
.text:00000000000027E4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000027E8                 and     ax, 4000h
.text:00000000000027EC                 setnz   r12b
.text:00000000000027F0                 setz    al
.text:00000000000027F3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000027F7
.text:00000000000027F7 loc_27F7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000027F7                 test    al, al
.text:00000000000027F9                 jnz     loc_3191
.text:00000000000027FF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002804                 setz    dl
.text:0000000000002807                 jmp     loc_24D8
.text:0000000000002807 ; ---------------------------------------------------------------------------
.text:000000000000280C                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002810                 movzx   ebx, byte ptr [r9]
.text:0000000000002814                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002817                 ja      short def_282A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002819                 lea     rcx, jpt_282A
.text:0000000000002820                 movzx   edx, bl
.text:0000000000002823                 movsxd  rax, ds:(jpt_282A - 5268h)[rcx+rdx*4]
.text:0000000000002827                 add     rax, rcx
.text:000000000000282A                 jmp     rax             ; switch jump
.text:000000000000282A ; ---------------------------------------------------------------------------
.text:000000000000282C                 align 10h
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002830                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002830                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002833                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002838                 jnz     loc_262E
.text:000000000000283E                 xchg    ax, ax
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002840                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002840                 mov     edx, 5Ch ; '\'
.text:0000000000002845                 mov     ebx, 5Ch ; '\'
.text:000000000000284A                 jmp     loc_25E4
.text:000000000000284A ; ---------------------------------------------------------------------------
.text:000000000000284F                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002850                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002850                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002855                 xor     r10d, r10d
.text:0000000000002858                 mov     ebx, 66h ; 'f'
.text:000000000000285D                 jmp     loc_25E4
.text:000000000000285D ; ---------------------------------------------------------------------------
.text:0000000000002862                 align 8
.text:0000000000002868
.text:0000000000002868 loc_2868:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002868                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002868                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000286D                 xor     r10d, r10d
.text:0000000000002870                 mov     ebx, 6Eh ; 'n'
.text:0000000000002875                 jmp     loc_25D2
.text:0000000000002875 ; ---------------------------------------------------------------------------
.text:000000000000287A                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002880                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002880                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002885                 jmp     loc_2650
.text:0000000000002885 ; ---------------------------------------------------------------------------
.text:000000000000288A                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002890                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002890                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002893
.text:0000000000002893 loc_2893:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002893                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002898                 setz    dl
.text:000000000000289B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028A0                 jnz     loc_343A
.text:00000000000028A6                 mov     eax, r8d
.text:00000000000028A9                 mov     rcx, r15
.text:00000000000028AC                 xor     eax, 1
.text:00000000000028AF                 and     al, dl
.text:00000000000028B1                 jz      short loc_28E0
.text:00000000000028B3                 cmp     r13, r15
.text:00000000000028B6                 jbe     short loc_28BD
.text:00000000000028B8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000028BD
.text:00000000000028BD loc_28BD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000028BD                 lea     rcx, [r15+1]
.text:00000000000028C1                 cmp     r13, rcx
.text:00000000000028C4                 jbe     short loc_28CC
.text:00000000000028C6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000028CC
.text:00000000000028CC loc_28CC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000028CC                 lea     rcx, [r15+2]
.text:00000000000028D0                 cmp     r13, rcx
.text:00000000000028D3                 ja      loc_2F09
.text:00000000000028D9
.text:00000000000028D9 loc_28D9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000028D9                 lea     rcx, [r15+3]
.text:00000000000028DD                 mov     r8d, eax
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000028E0                 cmp     r13, rcx
.text:00000000000028E3                 jbe     short loc_28EA
.text:00000000000028E5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000028EA
.text:00000000000028EA loc_28EA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000028EA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028EF                 lea     r15, [rcx+1]
.text:00000000000028F3                 jz      loc_2EF9
.text:00000000000028F9                 lea     rax, [rbp+1]
.text:00000000000028FD                 cmp     rax, r11
.text:0000000000002900                 jnb     short loc_291B
.text:0000000000002902                 mov     rax, [rsp+0E8h+s]
.text:0000000000002907                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000290C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002910                 sub     eax, 30h ; '0'
.text:0000000000002913                 cmp     al, 9
.text:0000000000002915                 jbe     loc_3149
.text:000000000000291B
.text:000000000000291B loc_291B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000291B                 mov     eax, r12d
.text:000000000000291E                 mov     ebx, 30h ; '0'
.text:0000000000002923                 xor     r12d, r12d
.text:0000000000002926                 jmp     loc_24D8
.text:0000000000002926 ; ---------------------------------------------------------------------------
.text:000000000000292B                 align 10h
.text:0000000000002930
.text:0000000000002930 loc_2930:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002930                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002930                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002935                 mov     r12d, r10d
.text:0000000000002938                 setz    dl
.text:000000000000293B                 xor     r10d, r10d
.text:000000000000293E                 xor     eax, eax
.text:0000000000002940                 jmp     loc_24D8
.text:0000000000002940 ; ---------------------------------------------------------------------------
.text:0000000000002945                 align 8
.text:0000000000002948
.text:0000000000002948 loc_2948:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002948                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002948                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000294D                 setz    dl
.text:0000000000002950                 xor     r10d, r10d
.text:0000000000002953                 jmp     loc_2718
.text:0000000000002953 ; ---------------------------------------------------------------------------
.text:0000000000002958                 align 20h
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002960                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002960                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002965                 setz    dl
.text:0000000000002968                 xor     r10d, r10d
.text:000000000000296B                 xor     r12d, r12d
.text:000000000000296E                 jmp     loc_2721
.text:000000000000296E ; ---------------------------------------------------------------------------
.text:0000000000002973                 align 8
.text:0000000000002978
.text:0000000000002978 loc_2978:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002978                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002978                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000297D                 mov     r12d, r10d
.text:0000000000002980                 mov     ebx, 20h ; ' '
.text:0000000000002985                 setz    dl
.text:0000000000002988                 xor     r10d, r10d
.text:000000000000298B                 jmp     loc_2721
.text:0000000000002990 ; ---------------------------------------------------------------------------
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002990                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:0000000000002990                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002995                 xor     r10d, r10d
.text:0000000000002998                 mov     ebx, 72h ; 'r'
.text:000000000000299D                 jmp     loc_25D2
.text:000000000000299D ; ---------------------------------------------------------------------------
.text:00000000000029A2                 align 8
.text:00000000000029A8
.text:00000000000029A8 loc_29A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029A8                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:00000000000029A8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000029AD                 jmp     loc_2650
.text:00000000000029AD ; ---------------------------------------------------------------------------
.text:00000000000029B2                 align 8
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029B8                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:00000000000029B8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000029BD                 xor     r10d, r10d
.text:00000000000029C0                 mov     ebx, 74h ; 't'
.text:00000000000029C5                 jmp     loc_25D2
.text:00000000000029C5 ; ---------------------------------------------------------------------------
.text:00000000000029CA                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029D0                                         ; DATA XREF: .rodata:jpt_282A↓o
.text:00000000000029D0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000029D5                 jmp     loc_2650
.text:00000000000029D5 ; ---------------------------------------------------------------------------
.text:00000000000029DA                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000029E0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000029E0                 xor     r10d, r10d
.text:00000000000029E3                 jmp     loc_2480
.text:00000000000029E3 ; ---------------------------------------------------------------------------
.text:00000000000029E8                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000029F0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000029F5                 jnz     loc_3360
.text:00000000000029FB
.text:00000000000029FB loc_29FB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000029FB                 add     rbp, 1
.text:00000000000029FF                 mov     eax, r8d
.text:0000000000002A02                 xor     r12d, r12d
.text:0000000000002A05                 mov     ebx, 5Ch ; '\'
.text:0000000000002A0A                 jmp     loc_251C
.text:0000000000002A0A ; ---------------------------------------------------------------------------
.text:0000000000002A0F                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002A10                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A15                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002A1A                 mov     r12d, r8d
.text:0000000000002A1D                 mov     rbp, r11
.text:0000000000002A20                 setz    dl
.text:0000000000002A23                 mov     eax, ebx
.text:0000000000002A25                 test    r15, r15
.text:0000000000002A28                 setz    cl
.text:0000000000002A2B                 and     eax, edx
.text:0000000000002A2D                 and     al, cl
.text:0000000000002A2F                 jnz     loc_3496
.text:0000000000002A35                 mov     eax, ebx
.text:0000000000002A37                 xor     eax, 1
.text:0000000000002A3A                 and     dl, al
.text:0000000000002A3C                 jz      loc_33AC
.text:0000000000002A42                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002A47                 jz      loc_33AA
.text:0000000000002A4D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002A52                 jnz     loc_344D
.text:0000000000002A58                 test    r13, r13
.text:0000000000002A5B                 setz    al
.text:0000000000002A5E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002A64                 setnz   dl
.text:0000000000002A67                 and     al, dl
.text:0000000000002A69                 jz      loc_348C
.text:0000000000002A6F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002A74
.text:0000000000002A74 loc_2A74:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002A74                 lea     rbx, asc_4FD5   ; "'"
.text:0000000000002A7B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002A7F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A87                 mov     r15d, 1
.text:0000000000002A8D                 mov     [rsp+0E8h+n], 1
.text:0000000000002A96                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002A9B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002AA0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002AA4                 jmp     loc_2383
.text:0000000000002AA4 ; ---------------------------------------------------------------------------
.text:0000000000002AA9                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002AB0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002AB5                 jnz     loc_3360
.text:0000000000002ABB                 test    r13, r13
.text:0000000000002ABE                 jz      loc_2EC0
.text:0000000000002AC4                 xor     edx, edx
.text:0000000000002AC6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002ACC                 jnz     loc_2EC0
.text:0000000000002AD2
.text:0000000000002AD2 loc_2AD2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002AD2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002AD2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002AD7                 add     r15, 3
.text:0000000000002ADB                 xor     eax, eax
.text:0000000000002ADD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002AE2                 xor     r8d, r8d
.text:0000000000002AE5                 mov     r13, rdx
.text:0000000000002AE8                 mov     ebx, 27h ; '''
.text:0000000000002AED                 jmp     loc_2509
.text:0000000000002AED ; ---------------------------------------------------------------------------
.text:0000000000002AF2                 align 8
.text:0000000000002AF8
.text:0000000000002AF8 loc_2AF8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002AF8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002AFD                 jz      short loc_2B20
.text:0000000000002AFF                 lea     rcx, [rbp+2]
.text:0000000000002B03                 cmp     rcx, r11
.text:0000000000002B06                 jnb     short loc_2B20
.text:0000000000002B08                 mov     rax, [rsp+0E8h+s]
.text:0000000000002B0D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002B12                 jz      loc_32A2
.text:0000000000002B18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002B20                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002B20                 xor     edx, edx
.text:0000000000002B22                 xor     r12d, r12d
.text:0000000000002B25                 xor     eax, eax
.text:0000000000002B27                 mov     ebx, 3Fh ; '?'
.text:0000000000002B2C                 jmp     loc_24D8
.text:0000000000002B2C ; ---------------------------------------------------------------------------
.text:0000000000002B31                 align 8
.text:0000000000002B38
.text:0000000000002B38 loc_2B38:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002B38                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B3D                 jnz     loc_3360
.text:0000000000002B43                 xor     r12d, r12d
.text:0000000000002B46                 xor     eax, eax
.text:0000000000002B48                 mov     ebx, 3Fh ; '?'
.text:0000000000002B4D                 jmp     loc_2509
.text:0000000000002B4D ; ---------------------------------------------------------------------------
.text:0000000000002B52                 align 8
.text:0000000000002B58
.text:0000000000002B58 loc_2B58:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002B58                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002B60                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B64                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002B70                 mov     [rsp+0E8h+ps], rax
.text:0000000000002B75                 jnz     short loc_2BA4
.text:0000000000002B77                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002B7C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002B81                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002B86                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002B8B                 call    _strlen
.text:0000000000002B90                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002B96                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002B9C                 mov     r11, rax
.text:0000000000002B9F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002BA4
.text:0000000000002BA4 loc_2BA4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002BA4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002BAC                 xor     ecx, ecx
.text:0000000000002BAE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002BB2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002BB7                 mov     rbx, rcx
.text:0000000000002BBA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002BC2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002BC7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002BCC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002BD4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002BD9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002BDE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002BE3
.text:0000000000002BE3 loc_2BE3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002BE3                 mov     rax, [rsp+0E8h+s]
.text:0000000000002BE8                 lea     r14, [rbp+rbx+0]
.text:0000000000002BED                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002BF2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002BF7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002BFC                 lea     r13, [rax+r14]
.text:0000000000002C00                 sub     rdx, r14
.text:0000000000002C03                 mov     rsi, r13
.text:0000000000002C06                 call    rpl_mbrtowc
.text:0000000000002C0B                 test    rax, rax
.text:0000000000002C0E                 mov     r15, rax
.text:0000000000002C11                 jz      short loc_2C61
.text:0000000000002C13                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C17                 jz      loc_3235
.text:0000000000002C1D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002C21                 jz      loc_31C1
.text:0000000000002C27                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C2C                 setz    al
.text:0000000000002C2F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002C33                 jnz     loc_2DD0
.text:0000000000002C39
.text:0000000000002C39 loc_2C39:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002C39                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002C39                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002C40                 call    _iswprint
.text:0000000000002C45                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002C4A                 test    eax, eax
.text:0000000000002C4C                 mov     eax, 0
.text:0000000000002C51                 cmovz   r12d, eax
.text:0000000000002C55                 add     rbx, r15
.text:0000000000002C58                 call    _mbsinit
.text:0000000000002C5D                 test    eax, eax
.text:0000000000002C5F                 jz      short loc_2BE3
.text:0000000000002C61
.text:0000000000002C61 loc_2C61:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002C61                 mov     edx, r12d
.text:0000000000002C64                 mov     rdi, rbx
.text:0000000000002C67                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002C6D                 xor     edx, 1
.text:0000000000002C70                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002C75                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002C7B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002C7F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002C87                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002C8C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002C91                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002C96
.text:0000000000002C96 loc_2C96:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002C96                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002C96                 cmp     rdi, 1
.text:0000000000002C9A                 jbe     loc_329B
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002CA0                 mov     rcx, rdi
.text:0000000000002CA3                 xor     esi, esi
.text:0000000000002CA5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002CAB                 add     rcx, rbp
.text:0000000000002CAE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002CB3                 jmp     loc_2D6E
.text:0000000000002CB3 ; ---------------------------------------------------------------------------
.text:0000000000002CB8                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002CC0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CC5                 setz    al
.text:0000000000002CC8                 test    r9b, r9b
.text:0000000000002CCB                 jnz     loc_3180
.text:0000000000002CD1                 mov     esi, r8d
.text:0000000000002CD4                 xor     esi, 1
.text:0000000000002CD7                 and     al, sil
.text:0000000000002CDA                 jz      short loc_2D0B
.text:0000000000002CDC                 cmp     r13, r15
.text:0000000000002CDF                 jbe     short loc_2CE6
.text:0000000000002CE1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002CE6
.text:0000000000002CE6 loc_2CE6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002CE6                 lea     rsi, [r15+1]
.text:0000000000002CEA                 cmp     r13, rsi
.text:0000000000002CED                 jbe     short loc_2CF5
.text:0000000000002CEF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002CF5
.text:0000000000002CF5 loc_2CF5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002CF5                 lea     rsi, [r15+2]
.text:0000000000002CF9                 cmp     r13, rsi
.text:0000000000002CFC                 jbe     short loc_2D04
.text:0000000000002CFE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D04
.text:0000000000002D04 loc_2D04:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002D04                 add     r15, 3
.text:0000000000002D08                 mov     r8d, eax
.text:0000000000002D0B
.text:0000000000002D0B loc_2D0B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002D0B                 cmp     r13, r15
.text:0000000000002D0E                 jbe     short loc_2D15
.text:0000000000002D10                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002D15
.text:0000000000002D15 loc_2D15:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002D15                 lea     rax, [r15+1]
.text:0000000000002D19                 cmp     r13, rax
.text:0000000000002D1C                 jbe     short loc_2D2B
.text:0000000000002D1E                 mov     eax, ebx
.text:0000000000002D20                 shr     al, 6
.text:0000000000002D23                 add     eax, 30h ; '0'
.text:0000000000002D26                 mov     [r14+r15+1], al
.text:0000000000002D2B
.text:0000000000002D2B loc_2D2B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002D2B                 lea     rax, [r15+2]
.text:0000000000002D2F                 cmp     r13, rax
.text:0000000000002D32                 jbe     short loc_2D44
.text:0000000000002D34                 mov     eax, ebx
.text:0000000000002D36                 shr     al, 3
.text:0000000000002D39                 and     eax, 7
.text:0000000000002D3C                 add     eax, 30h ; '0'
.text:0000000000002D3F                 mov     [r14+r15+2], al
.text:0000000000002D44
.text:0000000000002D44 loc_2D44:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002D44                 and     ebx, 7
.text:0000000000002D47                 add     rbp, 1
.text:0000000000002D4B                 add     r15, 3
.text:0000000000002D4F                 add     ebx, 30h ; '0'
.text:0000000000002D52                 cmp     rbp, rcx
.text:0000000000002D55                 jnb     loc_2540
.text:0000000000002D5B                 mov     esi, edx
.text:0000000000002D5D
.text:0000000000002D5D loc_2D5D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002D5D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002D5D                 cmp     r13, r15
.text:0000000000002D60                 jbe     short loc_2D66
.text:0000000000002D62                 mov     [r14+r15], bl
.text:0000000000002D66
.text:0000000000002D66 loc_2D66:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002D66                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002D6A                 add     r15, 1
.text:0000000000002D6E
.text:0000000000002D6E loc_2D6E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002D6E                 test    dl, dl
.text:0000000000002D70                 jnz     loc_2CC0
.text:0000000000002D76                 mov     eax, esi
.text:0000000000002D78                 xor     eax, 1
.text:0000000000002D7B                 and     eax, r8d
.text:0000000000002D7E                 test    r10b, r10b
.text:0000000000002D81                 jz      short loc_2D91
.text:0000000000002D83                 cmp     r13, r15
.text:0000000000002D86                 jbe     short loc_2D8D
.text:0000000000002D88                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002D8D
.text:0000000000002D8D loc_2D8D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002D8D                 add     r15, 1
.text:0000000000002D91
.text:0000000000002D91 loc_2D91:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002D91                 add     rbp, 1
.text:0000000000002D95                 cmp     rbp, rcx
.text:0000000000002D98                 jnb     loc_251C
.text:0000000000002D9E                 test    al, al
.text:0000000000002DA0                 jz      loc_319E
.text:0000000000002DA6                 cmp     r13, r15
.text:0000000000002DA9                 jbe     short loc_2DB0
.text:0000000000002DAB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002DB0                 lea     rax, [r15+1]
.text:0000000000002DB4                 cmp     r13, rax
.text:0000000000002DB7                 jbe     short loc_2DBF
.text:0000000000002DB9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002DBF
.text:0000000000002DBF loc_2DBF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002DBF                 add     r15, 2
.text:0000000000002DC3                 xor     r10d, r10d
.text:0000000000002DC6                 xor     r8d, r8d
.text:0000000000002DC9                 jmp     short loc_2D5D
.text:0000000000002DC9 ; ---------------------------------------------------------------------------
.text:0000000000002DCB                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002DD0                 cmp     r15, 1
.text:0000000000002DD4                 jz      loc_2C39
.text:0000000000002DDA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002DDF                 lea     rcx, [rdi+r15]
.text:0000000000002DE3                 lea     rdx, [rdi+r14+1]
.text:0000000000002DE8                 lea     r8, [rcx+r14]
.text:0000000000002DEC                 jmp     short loc_2DFD
.text:0000000000002DEC ; ---------------------------------------------------------------------------
.text:0000000000002DEE                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002DF0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002DF0                 add     rdx, 1
.text:0000000000002DF4                 cmp     r8, rdx
.text:0000000000002DF7                 jz      loc_2C39
.text:0000000000002DFD
.text:0000000000002DFD loc_2DFD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002DFD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002E00                 sub     ecx, 5Bh ; '['
.text:0000000000002E03                 cmp     cl, 21h ; '!'
.text:0000000000002E06                 ja      short loc_2DF0
.text:0000000000002E08                 mov     esi, 1
.text:0000000000002E0D                 shl     rsi, cl
.text:0000000000002E10                 mov     rcx, rsi
.text:0000000000002E13                 mov     rsi, 20000002Bh
.text:0000000000002E1D                 test    rcx, rsi
.text:0000000000002E20                 jz      short loc_2DF0
.text:0000000000002E22                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E27                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E2C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002E31                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E39
.text:0000000000002E39 loc_2E39:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002E39                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002E39                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002E3E                 jz      short loc_2E50
.text:0000000000002E40                 test    al, al
.text:0000000000002E42                 mov     eax, 4
.text:0000000000002E47                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002E4C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002E50                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002E50                 sub     rsp, 8
.text:0000000000002E54                 mov     rcx, rbp
.text:0000000000002E57                 mov     rsi, r13
.text:0000000000002E5A                 push    [rsp+0F0h+var_88]
.text:0000000000002E5E                 push    [rsp+0F8h+var_80]
.text:0000000000002E62                 mov     rdi, r14
.text:0000000000002E65                 push    0
.text:0000000000002E67                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002E6F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002E74                 mov     rdx, [rsp+108h+s]
.text:0000000000002E79                 and     r9d, 0FFFFFFFDh
.text:0000000000002E7D                 call    quotearg_buffer_restyled
.text:0000000000002E82                 add     rsp, 20h
.text:0000000000002E86                 mov     r15, rax
.text:0000000000002E89
.text:0000000000002E89 loc_2E89:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002E89                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002E89                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002E91                 xor     rbx, fs:28h
.text:0000000000002E9A                 mov     rax, r15
.text:0000000000002E9D                 jnz     loc_34A3
.text:0000000000002EA3                 add     rsp, 0B8h
.text:0000000000002EAA                 pop     rbx
.text:0000000000002EAB                 pop     rbp
.text:0000000000002EAC                 pop     r12
.text:0000000000002EAE                 pop     r13
.text:0000000000002EB0                 pop     r14
.text:0000000000002EB2                 pop     r15
.text:0000000000002EB4                 retn
.text:0000000000002EB4 ; ---------------------------------------------------------------------------
.text:0000000000002EB5                 align 8
.text:0000000000002EB8
.text:0000000000002EB8 loc_2EB8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002EB8                 mov     rbp, r11
.text:0000000000002EBB                 jmp     loc_2E39
.text:0000000000002EC0 ; ---------------------------------------------------------------------------
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002EC0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002EC0                 cmp     r13, r15
.text:0000000000002EC3                 jbe     short loc_2ECA
.text:0000000000002EC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002ECA
.text:0000000000002ECA loc_2ECA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002ECA                 lea     rax, [r15+1]
.text:0000000000002ECE                 cmp     r13, rax
.text:0000000000002ED1                 jbe     short loc_2ED9
.text:0000000000002ED3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002ED9
.text:0000000000002ED9 loc_2ED9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002ED9                 lea     rax, [r15+2]
.text:0000000000002EDD                 cmp     r13, rax
.text:0000000000002EE0                 jbe     loc_34D2
.text:0000000000002EE6                 mov     rdx, r13
.text:0000000000002EE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002EEF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002EF4                 jmp     loc_2AD2
.text:0000000000002EF9 ; ---------------------------------------------------------------------------
.text:0000000000002EF9
.text:0000000000002EF9 loc_2EF9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002EF9                 mov     eax, r12d
.text:0000000000002EFC                 mov     ebx, 30h ; '0'
.text:0000000000002F01                 xor     r12d, r12d
.text:0000000000002F04                 jmp     loc_2509
.text:0000000000002F09 ; ---------------------------------------------------------------------------
.text:0000000000002F09
.text:0000000000002F09 loc_2F09:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002F09                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002F0F                 jmp     loc_28D9
.text:0000000000002F14 ; ---------------------------------------------------------------------------
.text:0000000000002F14
.text:0000000000002F14 loc_2F14:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F14                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:0000000000002F14                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002F16                 jnz     loc_2343        ; jumptable 00000000000121F1 case 1
.text:0000000000002F1C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F21
.text:0000000000002F21 loc_2F21:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002F21                 test    r13, r13
.text:0000000000002F24                 jnz     loc_34BA
.text:0000000000002F2A                 lea     rax, asc_4FD5   ; "'"
.text:0000000000002F31                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F3A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F44                 xor     r12d, r12d
.text:0000000000002F47                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002F4C                 mov     [rsp+0E8h+n], 1
.text:0000000000002F55                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F5A                 mov     r15d, 1
.text:0000000000002F60                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002F68                 jmp     loc_2383
.text:0000000000002F68 ; ---------------------------------------------------------------------------
.text:0000000000002F6D                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F70                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:0000000000002F70                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002F72                 jnz     loc_336D
.text:0000000000002F78                 test    r13, r13
.text:0000000000002F7B                 jz      loc_31A6
.text:0000000000002F81                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002F85                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F8A                 xor     r12d, r12d
.text:0000000000002F8D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F92                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F9B
.text:0000000000002F9B loc_2F9B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002F9B                 lea     rax, unk_4FD3
.text:0000000000002FA2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002FA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FAC                 mov     [rsp+0E8h+n], 1
.text:0000000000002FB5                 mov     r15d, 1
.text:0000000000002FBB                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FC0                 jmp     loc_2383
.text:0000000000002FC5 ; ---------------------------------------------------------------------------
.text:0000000000002FC5
.text:0000000000002FC5 loc_2FC5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FC5                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:0000000000002FC5                 lea     rax, unk_4FD3   ; jumptable 00000000000121F1 case 6
.text:0000000000002FCC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FD1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FD6                 xor     r12d, r12d
.text:0000000000002FD9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FE2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002FE7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FEC                 mov     [rsp+0E8h+n], 1
.text:0000000000002FF5                 xor     r15d, r15d
.text:0000000000002FF8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FFD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003005                 jmp     loc_2383
.text:000000000000300A ; ---------------------------------------------------------------------------
.text:000000000000300A
.text:000000000000300A loc_300A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000300A                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:000000000000300A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000300F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003014                 xor     r12d, r12d
.text:0000000000003017                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003020                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003025                 xor     r15d, r15d
.text:0000000000003028                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000302D                 mov     [rsp+0E8h+n], 0
.text:0000000000003036                 mov     [rsp+0E8h+s2], 0
.text:000000000000303F                 jmp     loc_2383
.text:0000000000003044 ; ---------------------------------------------------------------------------
.text:0000000000003044
.text:0000000000003044 loc_3044:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003044                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:0000000000003044                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003049                 jz      short loc_30A1
.text:000000000000304B                 lea     rsi, asc_4FD7   ; "`"
.text:0000000000003052                 xor     edi, edi        ; domainname
.text:0000000000003054                 mov     edx, 5          ; category
.text:0000000000003059                 call    _dcgettext
.text:000000000000305E                 mov     rcx, rax
.text:0000000000003061                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003066                 lea     rax, asc_4FD7   ; "`"
.text:000000000000306D                 cmp     rcx, rax
.text:0000000000003070                 jz      loc_340E
.text:0000000000003076
.text:0000000000003076 loc_3076:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003076                 lea     rsi, asc_4FD5   ; "'"
.text:000000000000307D                 xor     edi, edi        ; domainname
.text:000000000000307F                 mov     edx, 5          ; category
.text:0000000000003084                 call    _dcgettext
.text:0000000000003089                 mov     rcx, rax
.text:000000000000308C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003091                 lea     rax, asc_4FD5   ; "'"
.text:0000000000003098                 cmp     rcx, rax
.text:000000000000309B                 jz      loc_3424
.text:00000000000030A1
.text:00000000000030A1 loc_30A1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000030A1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000030A1                 xor     r15d, r15d
.text:00000000000030A4                 test    ebx, ebx
.text:00000000000030A6                 jz      loc_326D
.text:00000000000030AC
.text:00000000000030AC loc_30AC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000030AC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000030AC                 test    ebx, ebx
.text:00000000000030AE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000030B3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000030B8                 xor     r12d, r12d
.text:00000000000030BB                 mov     rdi, rbx        ; s
.text:00000000000030BE                 call    _strlen
.text:00000000000030C3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000030C8                 mov     [rsp+0E8h+n], rax
.text:00000000000030CD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000030D2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030E0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000030E5                 jmp     loc_2383
.text:00000000000030EA ; ---------------------------------------------------------------------------
.text:00000000000030EA
.text:00000000000030EA loc_30EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030EA                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:00000000000030EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000030EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030F4                 xor     r12d, r12d
.text:00000000000030F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003100                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003105                 xor     r15d, r15d
.text:0000000000003108                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000310D                 mov     [rsp+0E8h+n], 0
.text:0000000000003116                 mov     [rsp+0E8h+s2], 0
.text:000000000000311F                 jmp     loc_2383
.text:0000000000003124 ; ---------------------------------------------------------------------------
.text:0000000000003124
.text:0000000000003124 loc_3124:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003124                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:0000000000003124                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003129                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000312E                 xor     r12d, r12d
.text:0000000000003131                 mov     [rsp+0E8h+var_98], 0
.text:000000000000313A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000313F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003144                 jmp     loc_2363
.text:0000000000003149 ; ---------------------------------------------------------------------------
.text:0000000000003149
.text:0000000000003149 loc_3149:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003149                 cmp     r13, r15
.text:000000000000314C                 jbe     short loc_3153
.text:000000000000314E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003153
.text:0000000000003153 loc_3153:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003153                 lea     rax, [rcx+2]
.text:0000000000003157                 cmp     r13, rax
.text:000000000000315A                 jbe     short loc_3162
.text:000000000000315C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003162
.text:0000000000003162 loc_3162:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003162                 mov     eax, r12d
.text:0000000000003165                 lea     r15, [rcx+3]
.text:0000000000003169                 xor     r12d, r12d
.text:000000000000316C                 mov     ebx, 30h ; '0'
.text:0000000000003171                 jmp     loc_24D8
.text:0000000000003171 ; ---------------------------------------------------------------------------
.text:0000000000003176                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003180                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003185                 mov     rbp, r11
.text:0000000000003188                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000318C                 jmp     loc_2E39
.text:0000000000003191 ; ---------------------------------------------------------------------------
.text:0000000000003191
.text:0000000000003191 loc_3191:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003191                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003196                 xor     r12d, r12d
.text:0000000000003199                 jmp     loc_2CA0
.text:000000000000319E ; ---------------------------------------------------------------------------
.text:000000000000319E
.text:000000000000319E loc_319E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000319E                 xor     r10d, r10d
.text:00000000000031A1                 jmp     loc_2D5D
.text:00000000000031A6 ; ---------------------------------------------------------------------------
.text:00000000000031A6
.text:00000000000031A6 loc_31A6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000031A6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031AF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000031B4                 xor     r12d, r12d
.text:00000000000031B7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031BC                 jmp     loc_2F9B
.text:00000000000031C1 ; ---------------------------------------------------------------------------
.text:00000000000031C1
.text:00000000000031C1 loc_31C1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000031C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000031C6                 mov     rsi, r14
.text:00000000000031C9                 mov     rcx, r13
.text:00000000000031CC                 mov     rax, rbx
.text:00000000000031CF                 mov     rdi, rbx
.text:00000000000031D2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000031D8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000031DD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000031E5                 cmp     rsi, r11
.text:00000000000031E8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000031EE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000031F6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000031FB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003200                 jnb     short loc_3228
.text:0000000000003202                 cmp     byte ptr [rcx], 0
.text:0000000000003205                 jnz     short loc_3217
.text:0000000000003207                 jmp     short loc_3228
.text:0000000000003207 ; ---------------------------------------------------------------------------
.text:0000000000003209                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003210                 cmp     byte ptr [r9+rax], 0
.text:0000000000003215                 jz      short loc_3225
.text:0000000000003217
.text:0000000000003217 loc_3217:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003217                 add     rax, 1
.text:000000000000321B                 lea     rdx, [rbp+rax+0]
.text:0000000000003220                 cmp     r11, rdx
.text:0000000000003223                 ja      short loc_3210
.text:0000000000003225
.text:0000000000003225 loc_3225:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003225                 mov     rdi, rax
.text:0000000000003228
.text:0000000000003228 loc_3228:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003228                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003228                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000322D                 xor     r12d, r12d
.text:0000000000003230                 jmp     loc_2C96
.text:0000000000003235 ; ---------------------------------------------------------------------------
.text:0000000000003235
.text:0000000000003235 loc_3235:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003235                 mov     rdi, rbx
.text:0000000000003238                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000323E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003243                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003249                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003251                 xor     r12d, r12d
.text:0000000000003254                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003259                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000325E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003263                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003268                 jmp     loc_2C96
.text:000000000000326D ; ---------------------------------------------------------------------------
.text:000000000000326D
.text:000000000000326D loc_326D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000326D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003272                 movzx   eax, byte ptr [rdx]
.text:0000000000003275                 test    al, al
.text:0000000000003277                 jz      loc_30AC
.text:000000000000327D                 nop     dword ptr [rax]
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003280                 cmp     r13, r15
.text:0000000000003283                 jbe     short loc_3289
.text:0000000000003285                 mov     [r14+r15], al
.text:0000000000003289
.text:0000000000003289 loc_3289:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003289                 add     r15, 1
.text:000000000000328D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003292                 test    al, al
.text:0000000000003294                 jnz     short loc_3280
.text:0000000000003296                 jmp     loc_30AC
.text:000000000000329B ; ---------------------------------------------------------------------------
.text:000000000000329B
.text:000000000000329B loc_329B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000329B                 mov     eax, edx
.text:000000000000329D                 jmp     loc_27F7
.text:00000000000032A2 ; ---------------------------------------------------------------------------
.text:00000000000032A2
.text:00000000000032A2 loc_32A2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000032A2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000032A6                 cmp     bl, 3Eh ; '>'
.text:00000000000032A9                 ja      loc_2B20
.text:00000000000032AF                 mov     rax, 7000A38200000000h
.text:00000000000032B9                 bt      rax, rbx
.text:00000000000032BD                 jnb     loc_2B20
.text:00000000000032C3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032C8                 jnz     loc_34B2
.text:00000000000032CE                 cmp     r13, r15
.text:00000000000032D1                 jbe     short loc_32D8
.text:00000000000032D3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000032D8                 lea     rax, [r15+1]
.text:00000000000032DC                 cmp     r13, rax
.text:00000000000032DF                 jbe     short loc_32E7
.text:00000000000032E1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000032E7
.text:00000000000032E7 loc_32E7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000032E7                 lea     rax, [r15+2]
.text:00000000000032EB                 cmp     r13, rax
.text:00000000000032EE                 jbe     short loc_32F6
.text:00000000000032F0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000032F6
.text:00000000000032F6 loc_32F6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000032F6                 lea     rax, [r15+3]
.text:00000000000032FA                 cmp     r13, rax
.text:00000000000032FD                 jbe     short loc_3305
.text:00000000000032FF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003305
.text:0000000000003305 loc_3305:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003305                 add     r15, 4
.text:0000000000003309                 xor     edx, edx
.text:000000000000330B                 xor     r12d, r12d
.text:000000000000330E                 xor     eax, eax
.text:0000000000003310                 mov     rbp, rcx
.text:0000000000003313                 jmp     loc_24D8
.text:0000000000003318 ; ---------------------------------------------------------------------------
.text:0000000000003318
.text:0000000000003318 loc_3318:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003318                                         ; DATA XREF: .rodata:jpt_2341↓o
.text:0000000000003318                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000331A                 jz      loc_34A8
.text:0000000000003320                 lea     rax, asc_4FD5   ; "'"
.text:0000000000003327                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000332C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003331                 xor     r12d, r12d
.text:0000000000003334                 mov     [rsp+0E8h+var_98], 0
.text:000000000000333D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003342                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003347                 mov     [rsp+0E8h+n], 1
.text:0000000000003350                 xor     r15d, r15d
.text:0000000000003353                 mov     [rsp+0E8h+s2], rax
.text:0000000000003358                 jmp     loc_2383
.text:0000000000003358 ; ---------------------------------------------------------------------------
.text:000000000000335D                 align 20h
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003360                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003360                 mov     rbp, r11
.text:0000000000003363                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003368                 jmp     loc_2E39
.text:000000000000336D ; ---------------------------------------------------------------------------
.text:000000000000336D
.text:000000000000336D loc_336D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000336D                 lea     rax, unk_4FD3
.text:0000000000003374                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003379                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000337E                 xor     r12d, r12d
.text:0000000000003381                 mov     [rsp+0E8h+var_98], 0
.text:000000000000338A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000338F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003394                 mov     [rsp+0E8h+n], 1
.text:000000000000339D                 xor     r15d, r15d
.text:00000000000033A0                 mov     [rsp+0E8h+s2], rax
.text:00000000000033A5                 jmp     loc_2383
.text:00000000000033AA ; ---------------------------------------------------------------------------
.text:00000000000033AA
.text:00000000000033AA loc_33AA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000033AA                 mov     eax, edx
.text:00000000000033AC
.text:00000000000033AC loc_33AC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000033AC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000033AC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000033B1                 test    rbx, rbx
.text:00000000000033B4                 jz      short loc_33E2
.text:00000000000033B6                 test    al, al
.text:00000000000033B8                 jz      short loc_33E2
.text:00000000000033BA                 movzx   ecx, byte ptr [rbx]
.text:00000000000033BD                 mov     rax, rbx
.text:00000000000033C0                 test    cl, cl
.text:00000000000033C2                 jz      short loc_33E2
.text:00000000000033C4                 mov     rdx, r15
.text:00000000000033C7                 sub     rax, r15
.text:00000000000033CA
.text:00000000000033CA loc_33CA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000033CA                 cmp     r13, rdx
.text:00000000000033CD                 jbe     short loc_33D3
.text:00000000000033CF                 mov     [r14+rdx], cl
.text:00000000000033D3
.text:00000000000033D3 loc_33D3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000033D3                 add     rdx, 1
.text:00000000000033D7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000033DB                 test    cl, cl
.text:00000000000033DD                 jnz     short loc_33CA
.text:00000000000033DF                 mov     r15, rdx
.text:00000000000033E2
.text:00000000000033E2 loc_33E2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000033E2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000033E2                 cmp     r13, r15
.text:00000000000033E5                 jbe     loc_2E89
.text:00000000000033EB                 mov     byte ptr [r14+r15], 0
.text:00000000000033F0                 jmp     loc_2E89
.text:00000000000033F5 ; ---------------------------------------------------------------------------
.text:00000000000033F5
.text:00000000000033F5 loc_33F5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000033F5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000033FF                 mov     rbp, r11
.text:0000000000003402                 setz    al
.text:0000000000003405                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003409                 jmp     loc_2E39
.text:000000000000340E ; ---------------------------------------------------------------------------
.text:000000000000340E
.text:000000000000340E loc_340E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000340E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003412                 mov     rdi, rcx
.text:0000000000003415                 call    gettext_quote
.text:000000000000341A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000341F                 jmp     loc_3076
.text:0000000000003424 ; ---------------------------------------------------------------------------
.text:0000000000003424
.text:0000000000003424 loc_3424:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003424                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003428                 mov     rdi, rcx
.text:000000000000342B                 call    gettext_quote
.text:0000000000003430                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003435                 jmp     loc_30A1
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000343A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000343F                 mov     rbp, r11
.text:0000000000003442                 mov     eax, edx
.text:0000000000003444                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003448                 jmp     loc_2E39
.text:000000000000344D ; ---------------------------------------------------------------------------
.text:000000000000344D
.text:000000000000344D loc_344D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000344D                 sub     rsp, 8
.text:0000000000003451                 mov     r8d, 5
.text:0000000000003457                 mov     rcx, r11
.text:000000000000345A                 push    [rsp+0F0h+var_88]
.text:000000000000345E                 push    [rsp+0F8h+var_80]
.text:0000000000003462                 mov     rdi, r14
.text:0000000000003465                 push    [rsp+100h+var_C8]
.text:0000000000003469                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003471                 mov     rdx, [rsp+108h+s]
.text:0000000000003476                 mov     rsi, [rsp+108h+var_98]
.text:000000000000347B                 call    quotearg_buffer_restyled
.text:0000000000003480                 add     rsp, 20h
.text:0000000000003484                 mov     r15, rax
.text:0000000000003487                 jmp     loc_2E89
.text:000000000000348C ; ---------------------------------------------------------------------------
.text:000000000000348C
.text:000000000000348C loc_348C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000348C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003491                 jmp     loc_33AC
.text:0000000000003496 ; ---------------------------------------------------------------------------
.text:0000000000003496
.text:0000000000003496 loc_3496:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003496                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000349E                 jmp     loc_2E39
.text:00000000000034A3 ; ---------------------------------------------------------------------------
.text:00000000000034A3
.text:00000000000034A3 loc_34A3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000034A3                 call    ___stack_chk_fail
.text:00000000000034A8 ; ---------------------------------------------------------------------------
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000034A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000034AD                 jmp     loc_2F21
.text:00000000000034B2 ; ---------------------------------------------------------------------------
.text:00000000000034B2
.text:00000000000034B2 loc_34B2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000034B2                 mov     rbp, r11
.text:00000000000034B5                 jmp     loc_2E50
.text:00000000000034BA ; ---------------------------------------------------------------------------
.text:00000000000034BA
.text:00000000000034BA loc_34BA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000034BA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000034BF                 xor     eax, eax
.text:00000000000034C1                 xor     r12d, r12d
.text:00000000000034C4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000034CD                 jmp     loc_2A74
.text:00000000000034D2 ; ---------------------------------------------------------------------------
.text:00000000000034D2
.text:00000000000034D2 loc_34D2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000034D2                 mov     rdx, r13
.text:00000000000034D5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000034DA                 jmp     loc_2AD2
.text:00000000000034DF ; ---------------------------------------------------------------------------
.text:00000000000034DF
.text:00000000000034DF def_2341:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000034DF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000034DF ; } // starts at 22B0
.text:00000000000034DF quotearg_buffer_restyled endp
.text:00000000000034DF
.text:00000000000034DF ; ---------------------------------------------------------------------------
.text:00000000000034E4                 align 10h
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0
.text:00000000000034F0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000034F0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000034F0
.text:00000000000034F0 var_50          = qword ptr -50h
.text:00000000000034F0 var_48          = qword ptr -48h
.text:00000000000034F0 var_40          = dword ptr -40h
.text:00000000000034F0 var_3C          = dword ptr -3Ch
.text:00000000000034F0
.text:00000000000034F0 ; __unwind {
.text:00000000000034F0                 push    r15
.text:00000000000034F2                 push    r14
.text:00000000000034F4                 movsxd  r15, edi
.text:00000000000034F7                 push    r13
.text:00000000000034F9                 push    r12
.text:00000000000034FB                 mov     r14, rdx
.text:00000000000034FE                 push    rbp
.text:00000000000034FF                 push    rbx
.text:0000000000003500                 mov     rbp, rcx
.text:0000000000003503                 sub     rsp, 28h
.text:0000000000003507                 mov     [rsp+58h+var_50], rsi
.text:000000000000350C                 call    ___errno_location
.text:0000000000003511                 mov     r13, rax
.text:0000000000003514                 mov     eax, [rax]
.text:0000000000003516                 test    r15d, r15d
.text:0000000000003519                 mov     rbx, cs:slotvec
.text:0000000000003520                 mov     [rsp+58h+var_40], eax
.text:0000000000003524                 js      loc_3691
.text:000000000000352A                 cmp     cs:nslots, r15d
.text:0000000000003531                 jg      short loc_3595
.text:0000000000003533                 cmp     r15d, 7FFFFFFFh
.text:000000000000353A                 jz      loc_3696
.text:0000000000003540                 lea     r12d, [r15+1]
.text:0000000000003544                 lea     rax, slotvec0
.text:000000000000354B                 movsxd  rsi, r12d
.text:000000000000354E                 shl     rsi, 4
.text:0000000000003552                 cmp     rbx, rax
.text:0000000000003555                 jz      loc_3670
.text:000000000000355B                 mov     rdi, rbx
.text:000000000000355E                 call    xrealloc
.text:0000000000003563                 mov     rbx, rax
.text:0000000000003566                 mov     cs:slotvec, rax
.text:000000000000356D
.text:000000000000356D loc_356D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000356D                 movsxd  rdi, cs:nslots
.text:0000000000003574                 mov     edx, r12d
.text:0000000000003577                 xor     esi, esi        ; c
.text:0000000000003579                 sub     edx, edi
.text:000000000000357B                 shl     rdi, 4
.text:000000000000357F                 movsxd  rdx, edx
.text:0000000000003582                 add     rdi, rbx        ; s
.text:0000000000003585                 shl     rdx, 4          ; n
.text:0000000000003589                 call    _memset
.text:000000000000358E                 mov     cs:nslots, r12d
.text:0000000000003595
.text:0000000000003595 loc_3595:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003595                 mov     eax, [rbp+4]
.text:0000000000003598                 shl     r15, 4
.text:000000000000359C                 sub     rsp, 8
.text:00000000000035A0                 add     rbx, r15
.text:00000000000035A3                 lea     r15, [rbp+8]
.text:00000000000035A7                 mov     r8d, [rbp+0]
.text:00000000000035AB                 mov     r11, [rbx]
.text:00000000000035AE                 mov     r12, [rbx+8]
.text:00000000000035B2                 mov     rcx, r14
.text:00000000000035B5                 or      eax, 1
.text:00000000000035B8                 mov     [rsp+60h+var_3C], eax
.text:00000000000035BC                 push    qword ptr [rbp+30h]
.text:00000000000035BF                 mov     r9d, eax
.text:00000000000035C2                 push    qword ptr [rbp+28h]
.text:00000000000035C5                 push    r15
.text:00000000000035C7                 mov     rsi, r11
.text:00000000000035CA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000035CF                 mov     rdi, r12
.text:00000000000035D2                 mov     [rsp+78h+var_48], r11
.text:00000000000035D7                 call    quotearg_buffer_restyled
.text:00000000000035DC                 add     rsp, 20h
.text:00000000000035E0                 mov     r11, [rsp+58h+var_48]
.text:00000000000035E5                 cmp     r11, rax
.text:00000000000035E8                 ja      short loc_3651
.text:00000000000035EA                 lea     rsi, [rax+1]
.text:00000000000035EE                 lea     rax, slot0
.text:00000000000035F5                 cmp     r12, rax
.text:00000000000035F8                 mov     [rbx], rsi
.text:00000000000035FB                 jz      short loc_360F
.text:00000000000035FD                 mov     rdi, r12        ; ptr
.text:0000000000003600                 mov     [rsp+58h+var_48], rsi
.text:0000000000003605                 call    _free
.text:000000000000360A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000360F
.text:000000000000360F loc_360F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000360F                 mov     rdi, rsi
.text:0000000000003612                 mov     [rsp+58h+var_48], rsi
.text:0000000000003617                 call    xmalloc
.text:000000000000361C                 sub     rsp, 8
.text:0000000000003620                 mov     [rbx+8], rax
.text:0000000000003624                 mov     r8d, [rbp+0]
.text:0000000000003628                 push    qword ptr [rbp+30h]
.text:000000000000362B                 push    qword ptr [rbp+28h]
.text:000000000000362E                 mov     rcx, r14
.text:0000000000003631                 push    r15
.text:0000000000003633                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003638                 mov     rdi, rax
.text:000000000000363B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003640                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003645                 mov     r12, rax
.text:0000000000003648                 call    quotearg_buffer_restyled
.text:000000000000364D                 add     rsp, 20h
.text:0000000000003651
.text:0000000000003651 loc_3651:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003651                 mov     eax, [rsp+58h+var_40]
.text:0000000000003655                 mov     [r13+0], eax
.text:0000000000003659                 add     rsp, 28h
.text:000000000000365D                 mov     rax, r12
.text:0000000000003660                 pop     rbx
.text:0000000000003661                 pop     rbp
.text:0000000000003662                 pop     r12
.text:0000000000003664                 pop     r13
.text:0000000000003666                 pop     r14
.text:0000000000003668                 pop     r15
.text:000000000000366A                 retn
.text:000000000000366A ; ---------------------------------------------------------------------------
.text:000000000000366B                 align 10h
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003670                 xor     edi, edi
.text:0000000000003672                 call    xrealloc
.text:0000000000003677                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000367F                 mov     rbx, rax
.text:0000000000003682                 mov     cs:slotvec, rax
.text:0000000000003689                 movups  xmmword ptr [rax], xmm0
.text:000000000000368C                 jmp     loc_356D
.text:0000000000003691 ; ---------------------------------------------------------------------------
.text:0000000000003691
.text:0000000000003691 loc_3691:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003691                 call    _abort
.text:0000000000003696 ; ---------------------------------------------------------------------------
.text:0000000000003696
.text:0000000000003696 loc_3696:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003696                 call    xalloc_die
.text:0000000000003696 ; } // starts at 34F0
.text:0000000000003696 quotearg_n_options endp
.text:0000000000003696
.text:0000000000003696 ; ---------------------------------------------------------------------------
.text:000000000000369B                 align 20h
.text:00000000000036A0
.text:00000000000036A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036A0
.text:00000000000036A0 ; Attributes: info_from_lumina
.text:00000000000036A0
.text:00000000000036A0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000036A0                 public clone_quoting_options
.text:00000000000036A0 clone_quoting_options proc near
.text:00000000000036A0 ; __unwind {
.text:00000000000036A0                 push    r12
.text:00000000000036A2                 push    rbp
.text:00000000000036A3                 push    rbx
.text:00000000000036A4                 mov     rbx, rdi
.text:00000000000036A7                 call    ___errno_location
.text:00000000000036AC                 mov     r12d, [rax]
.text:00000000000036AF                 mov     rbp, rax
.text:00000000000036B2                 lea     rax, default_quoting_options
.text:00000000000036B9                 test    rbx, rbx
.text:00000000000036BC                 mov     esi, 38h ; '8'  ; n
.text:00000000000036C1                 cmovz   rbx, rax
.text:00000000000036C5                 mov     rdi, rbx        ; src
.text:00000000000036C8                 call    xmemdup
.text:00000000000036CD                 mov     [rbp+0], r12d
.text:00000000000036D1                 pop     rbx
.text:00000000000036D2                 pop     rbp
.text:00000000000036D3                 pop     r12
.text:00000000000036D5                 retn
.text:00000000000036D5 ; } // starts at 36A0
.text:00000000000036D5 clone_quoting_options endp
.text:00000000000036D5
.text:00000000000036D5 ; ---------------------------------------------------------------------------
.text:00000000000036D6                 align 20h
.text:00000000000036E0
.text:00000000000036E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036E0
.text:00000000000036E0
.text:00000000000036E0                 public get_quoting_style
.text:00000000000036E0 get_quoting_style proc near
.text:00000000000036E0 ; __unwind {
.text:00000000000036E0                 lea     rax, default_quoting_options
.text:00000000000036E7                 test    rdi, rdi
.text:00000000000036EA                 cmovz   rdi, rax
.text:00000000000036EE                 mov     eax, [rdi]
.text:00000000000036F0                 retn
.text:00000000000036F0 ; } // starts at 36E0
.text:00000000000036F0 get_quoting_style endp
.text:00000000000036F0
.text:00000000000036F0 ; ---------------------------------------------------------------------------
.text:00000000000036F1                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700
.text:0000000000003700                 public set_quoting_style
.text:0000000000003700 set_quoting_style proc near
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 lea     rax, default_quoting_options
.text:0000000000003707                 test    rdi, rdi
.text:000000000000370A                 cmovz   rdi, rax
.text:000000000000370E                 mov     [rdi], esi
.text:0000000000003710                 retn
.text:0000000000003710 ; } // starts at 3700
.text:0000000000003710 set_quoting_style endp
.text:0000000000003710
.text:0000000000003710 ; ---------------------------------------------------------------------------
.text:0000000000003711                 align 20h
.text:0000000000003720
.text:0000000000003720 ; =============== S U B R O U T I N E =======================================
.text:0000000000003720
.text:0000000000003720 ; Attributes: info_from_lumina
.text:0000000000003720
.text:0000000000003720 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003720                 public set_char_quoting
.text:0000000000003720 set_char_quoting proc near
.text:0000000000003720 ; __unwind {
.text:0000000000003720                 lea     rax, default_quoting_options
.text:0000000000003727                 test    rdi, rdi
.text:000000000000372A                 mov     ecx, esi
.text:000000000000372C                 cmovz   rdi, rax
.text:0000000000003730                 mov     eax, esi
.text:0000000000003732                 and     ecx, 1Fh
.text:0000000000003735                 shr     al, 5
.text:0000000000003738                 movzx   eax, al
.text:000000000000373B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003740                 mov     esi, [rdi]
.text:0000000000003742                 mov     eax, esi
.text:0000000000003744                 shr     eax, cl
.text:0000000000003746                 xor     edx, eax
.text:0000000000003748                 and     eax, 1
.text:000000000000374B                 and     edx, 1
.text:000000000000374E                 shl     edx, cl
.text:0000000000003750                 xor     edx, esi
.text:0000000000003752                 mov     [rdi], edx
.text:0000000000003754                 retn
.text:0000000000003754 ; } // starts at 3720
.text:0000000000003754 set_char_quoting endp
.text:0000000000003754
.text:0000000000003754 ; ---------------------------------------------------------------------------
.text:0000000000003755                 align 20h
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760
.text:0000000000003760                 public set_quoting_flags
.text:0000000000003760 set_quoting_flags proc near
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 lea     rax, default_quoting_options
.text:0000000000003767                 test    rdi, rdi
.text:000000000000376A                 cmovz   rdi, rax
.text:000000000000376E                 mov     eax, [rdi+4]
.text:0000000000003771                 mov     [rdi+4], esi
.text:0000000000003774                 retn
.text:0000000000003774 ; } // starts at 3760
.text:0000000000003774 set_quoting_flags endp
.text:0000000000003774
.text:0000000000003774 ; ---------------------------------------------------------------------------
.text:0000000000003775                 align 20h
.text:0000000000003780
.text:0000000000003780 ; =============== S U B R O U T I N E =======================================
.text:0000000000003780
.text:0000000000003780 ; Attributes: info_from_lumina
.text:0000000000003780
.text:0000000000003780 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003780                 public set_custom_quoting
.text:0000000000003780 set_custom_quoting proc near
.text:0000000000003780 ; __unwind {
.text:0000000000003780                 lea     rax, default_quoting_options
.text:0000000000003787                 test    rdi, rdi
.text:000000000000378A                 cmovz   rdi, rax
.text:000000000000378E                 test    rsi, rsi
.text:0000000000003791                 mov     dword ptr [rdi], 0Ah
.text:0000000000003797                 jz      short loc_37A7
.text:0000000000003799                 test    rdx, rdx
.text:000000000000379C                 jz      short loc_37A7
.text:000000000000379E                 mov     [rdi+28h], rsi
.text:00000000000037A2                 mov     [rdi+30h], rdx
.text:00000000000037A6                 retn
.text:00000000000037A7 ; ---------------------------------------------------------------------------
.text:00000000000037A7
.text:00000000000037A7 loc_37A7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000037A7                                         ; set_custom_quoting+1C↑j
.text:00000000000037A7                 sub     rsp, 8
.text:00000000000037AB                 call    _abort
.text:00000000000037AB ; } // starts at 3780
.text:00000000000037AB set_custom_quoting endp
.text:00000000000037AB
.text:00000000000037B0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0
.text:00000000000037B0 ; Attributes: info_from_lumina
.text:00000000000037B0
.text:00000000000037B0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000037B0                 public quotearg_buffer
.text:00000000000037B0 quotearg_buffer proc near
.text:00000000000037B0
.text:00000000000037B0 var_40          = qword ptr -40h
.text:00000000000037B0
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 push    r15
.text:00000000000037B2                 push    r14
.text:00000000000037B4                 lea     rax, default_quoting_options
.text:00000000000037BB                 push    r13
.text:00000000000037BD                 push    r12
.text:00000000000037BF                 mov     r13, rdi
.text:00000000000037C2                 push    rbp
.text:00000000000037C3                 push    rbx
.text:00000000000037C4                 mov     rbx, r8
.text:00000000000037C7                 mov     r14, rsi
.text:00000000000037CA                 mov     r15, rdx
.text:00000000000037CD                 sub     rsp, 18h
.text:00000000000037D1                 test    r8, r8
.text:00000000000037D4                 cmovz   rbx, rax
.text:00000000000037D8                 mov     [rsp+48h+var_40], rcx
.text:00000000000037DD                 call    ___errno_location
.text:00000000000037E2                 mov     r12d, [rax]
.text:00000000000037E5                 mov     rbp, rax
.text:00000000000037E8                 lea     rax, [rbx+8]
.text:00000000000037EC                 sub     rsp, 8
.text:00000000000037F0                 mov     r9d, [rbx+4]
.text:00000000000037F4                 push    qword ptr [rbx+30h]
.text:00000000000037F7                 mov     r8d, [rbx]
.text:00000000000037FA                 push    qword ptr [rbx+28h]
.text:00000000000037FD                 mov     rdx, r15
.text:0000000000003800                 push    rax
.text:0000000000003801                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003806                 mov     rsi, r14
.text:0000000000003809                 mov     rdi, r13
.text:000000000000380C                 call    quotearg_buffer_restyled
.text:0000000000003811                 mov     [rbp+0], r12d
.text:0000000000003815                 add     rsp, 38h
.text:0000000000003819                 pop     rbx
.text:000000000000381A                 pop     rbp
.text:000000000000381B                 pop     r12
.text:000000000000381D                 pop     r13
.text:000000000000381F                 pop     r14
.text:0000000000003821                 pop     r15
.text:0000000000003823                 retn
.text:0000000000003823 ; } // starts at 37B0
.text:0000000000003823 quotearg_buffer endp
.text:0000000000003823
.text:0000000000003823 ; ---------------------------------------------------------------------------
.text:0000000000003824                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830 ; Attributes: info_from_lumina
.text:0000000000003830
.text:0000000000003830 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003830                 public quotearg_alloc_mem
.text:0000000000003830 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003830
.text:0000000000003830 var_5C          = dword ptr -5Ch
.text:0000000000003830 var_58          = qword ptr -58h
.text:0000000000003830 var_50          = qword ptr -50h
.text:0000000000003830 var_48          = qword ptr -48h
.text:0000000000003830 var_40          = qword ptr -40h
.text:0000000000003830
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 push    r15
.text:0000000000003832                 push    r14
.text:0000000000003834                 lea     rax, default_quoting_options
.text:000000000000383B                 push    r13
.text:000000000000383D                 push    r12
.text:000000000000383F                 mov     r12, rdx
.text:0000000000003842                 push    rbp
.text:0000000000003843                 push    rbx
.text:0000000000003844                 mov     rbx, rcx
.text:0000000000003847                 mov     r14, rdi
.text:000000000000384A                 mov     r15, rsi
.text:000000000000384D                 sub     rsp, 38h
.text:0000000000003851                 test    rcx, rcx
.text:0000000000003854                 cmovz   rbx, rax
.text:0000000000003858                 xor     ebp, ebp
.text:000000000000385A                 call    ___errno_location
.text:000000000000385F                 test    r12, r12
.text:0000000000003862                 mov     r13, rax
.text:0000000000003865                 mov     eax, [rax]
.text:0000000000003867                 setz    bpl
.text:000000000000386B                 or      ebp, [rbx+4]
.text:000000000000386E                 lea     r10, [rbx+8]
.text:0000000000003872                 sub     rsp, 8
.text:0000000000003876                 mov     r8d, [rbx]
.text:0000000000003879                 mov     rcx, r15
.text:000000000000387C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003880                 push    qword ptr [rbx+30h]
.text:0000000000003883                 mov     rdx, r14
.text:0000000000003886                 push    qword ptr [rbx+28h]
.text:0000000000003889                 push    r10
.text:000000000000388B                 xor     esi, esi
.text:000000000000388D                 mov     r9d, ebp
.text:0000000000003890                 xor     edi, edi
.text:0000000000003892                 mov     [rsp+88h+var_48], r10
.text:0000000000003897                 call    quotearg_buffer_restyled
.text:000000000000389C                 lea     rsi, [rax+1]
.text:00000000000038A0                 mov     [rsp+88h+var_40], rax
.text:00000000000038A5                 add     rsp, 20h
.text:00000000000038A9                 mov     rdi, rsi
.text:00000000000038AC                 mov     [rsp+68h+var_50], rsi
.text:00000000000038B1                 call    xmalloc
.text:00000000000038B6                 mov     [rsp+68h+var_58], rax
.text:00000000000038BB                 sub     rsp, 8
.text:00000000000038BF                 push    qword ptr [rbx+30h]
.text:00000000000038C2                 push    qword ptr [rbx+28h]
.text:00000000000038C5                 mov     r10, [rsp+80h+var_48]
.text:00000000000038CA                 mov     r9d, ebp
.text:00000000000038CD                 mov     r8d, [rbx]
.text:00000000000038D0                 mov     rcx, r15
.text:00000000000038D3                 mov     rdx, r14
.text:00000000000038D6                 mov     rdi, rax
.text:00000000000038D9                 push    r10
.text:00000000000038DB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000038E0                 call    quotearg_buffer_restyled
.text:00000000000038E5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000038E9                 add     rsp, 20h
.text:00000000000038ED                 test    r12, r12
.text:00000000000038F0                 mov     [r13+0], eax
.text:00000000000038F4                 jz      short loc_38FF
.text:00000000000038F6                 mov     r11, [rsp+68h+var_40]
.text:00000000000038FB                 mov     [r12], r11
.text:00000000000038FF
.text:00000000000038FF loc_38FF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000038FF                 mov     rax, [rsp+68h+var_58]
.text:0000000000003904                 add     rsp, 38h
.text:0000000000003908                 pop     rbx
.text:0000000000003909                 pop     rbp
.text:000000000000390A                 pop     r12
.text:000000000000390C                 pop     r13
.text:000000000000390E                 pop     r14
.text:0000000000003910                 pop     r15
.text:0000000000003912                 retn
.text:0000000000003912 ; } // starts at 3830
.text:0000000000003912 quotearg_alloc_mem endp
.text:0000000000003912
.text:0000000000003912 ; ---------------------------------------------------------------------------
.text:0000000000003913                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920
.text:0000000000003920                 public quotearg_alloc
.text:0000000000003920 quotearg_alloc  proc near
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 mov     rcx, rdx
.text:0000000000003923                 xor     edx, edx
.text:0000000000003925                 jmp     quotearg_alloc_mem
.text:0000000000003925 ; } // starts at 3920
.text:0000000000003925 quotearg_alloc  endp
.text:0000000000003925
.text:0000000000003925 ; ---------------------------------------------------------------------------
.text:000000000000392A                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930 ; Attributes: info_from_lumina
.text:0000000000003930
.text:0000000000003930 ; void __cdecl quotearg_free()
.text:0000000000003930                 public quotearg_free
.text:0000000000003930 quotearg_free   proc near
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 mov     eax, cs:nslots
.text:0000000000003936                 push    r12
.text:0000000000003938                 mov     r12, cs:slotvec
.text:000000000000393F                 push    rbp
.text:0000000000003940                 push    rbx
.text:0000000000003941                 cmp     eax, 1
.text:0000000000003944                 jle     short loc_3971
.text:0000000000003946                 sub     eax, 2
.text:0000000000003949                 lea     rbx, [r12+18h]
.text:000000000000394E                 shl     rax, 4
.text:0000000000003952                 lea     rbp, [r12+rax+28h]
.text:0000000000003957                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003960                 mov     rdi, [rbx]      ; ptr
.text:0000000000003963                 add     rbx, 10h
.text:0000000000003967                 call    _free
.text:000000000000396C                 cmp     rbx, rbp
.text:000000000000396F                 jnz     short loc_3960
.text:0000000000003971
.text:0000000000003971 loc_3971:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003971                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003976                 lea     rbx, slot0
.text:000000000000397D                 cmp     rdi, rbx
.text:0000000000003980                 jz      short loc_3999
.text:0000000000003982                 call    _free
.text:0000000000003987                 mov     cs:slotvec0, 100h
.text:0000000000003992                 mov     cs:off_207078, rbx
.text:0000000000003999
.text:0000000000003999 loc_3999:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003999                 lea     rbx, slotvec0
.text:00000000000039A0                 cmp     r12, rbx
.text:00000000000039A3                 jz      short loc_39B4
.text:00000000000039A5                 mov     rdi, r12        ; ptr
.text:00000000000039A8                 call    _free
.text:00000000000039AD                 mov     cs:slotvec, rbx
.text:00000000000039B4
.text:00000000000039B4 loc_39B4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000039B4                 pop     rbx
.text:00000000000039B5                 mov     cs:nslots, 1
.text:00000000000039BF                 pop     rbp
.text:00000000000039C0                 pop     r12
.text:00000000000039C2                 retn
.text:00000000000039C2 ; } // starts at 3930
.text:00000000000039C2 quotearg_free   endp
.text:00000000000039C2
.text:00000000000039C2 ; ---------------------------------------------------------------------------
.text:00000000000039C3                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0
.text:00000000000039D0                 public quotearg_n
.text:00000000000039D0 quotearg_n      proc near
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 lea     rcx, default_quoting_options
.text:00000000000039D7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000039DE                 jmp     quotearg_n_options
.text:00000000000039DE ; } // starts at 39D0
.text:00000000000039DE quotearg_n      endp
.text:00000000000039DE
.text:00000000000039DE ; ---------------------------------------------------------------------------
.text:00000000000039E3                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0                 public quotearg_n_mem
.text:00000000000039F0 quotearg_n_mem  proc near
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 lea     rcx, default_quoting_options
.text:00000000000039F7                 jmp     quotearg_n_options
.text:00000000000039F7 ; } // starts at 39F0
.text:00000000000039F7 quotearg_n_mem  endp
.text:00000000000039F7
.text:00000000000039F7 ; ---------------------------------------------------------------------------
.text:00000000000039FC                 align 20h
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00
.text:0000000000003A00                 public quotearg
.text:0000000000003A00 quotearg        proc near
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 lea     rcx, default_quoting_options
.text:0000000000003A07                 mov     rsi, rdi
.text:0000000000003A0A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A11                 xor     edi, edi
.text:0000000000003A13                 jmp     quotearg_n_options
.text:0000000000003A13 ; } // starts at 3A00
.text:0000000000003A13 quotearg        endp
.text:0000000000003A13
.text:0000000000003A13 ; ---------------------------------------------------------------------------
.text:0000000000003A18                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20
.text:0000000000003A20                 public quotearg_mem
.text:0000000000003A20 quotearg_mem    proc near
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 lea     rcx, default_quoting_options
.text:0000000000003A27                 mov     rdx, rsi
.text:0000000000003A2A                 mov     rsi, rdi
.text:0000000000003A2D                 xor     edi, edi
.text:0000000000003A2F                 jmp     quotearg_n_options
.text:0000000000003A2F ; } // starts at 3A20
.text:0000000000003A2F quotearg_mem    endp
.text:0000000000003A2F
.text:0000000000003A2F ; ---------------------------------------------------------------------------
.text:0000000000003A34                 align 20h
.text:0000000000003A40
.text:0000000000003A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A40
.text:0000000000003A40 ; Attributes: info_from_lumina
.text:0000000000003A40
.text:0000000000003A40 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003A40                 public quotearg_n_style
.text:0000000000003A40 quotearg_n_style proc near              ; CODE XREF: main+481↑p
.text:0000000000003A40                                         ; quotearg_style+7↓j
.text:0000000000003A40
.text:0000000000003A40 var_48          = dword ptr -48h
.text:0000000000003A40 var_44          = qword ptr -44h
.text:0000000000003A40 var_3C          = qword ptr -3Ch
.text:0000000000003A40 var_34          = qword ptr -34h
.text:0000000000003A40 var_2C          = qword ptr -2Ch
.text:0000000000003A40 var_24          = qword ptr -24h
.text:0000000000003A40 var_1C          = qword ptr -1Ch
.text:0000000000003A40 var_14          = dword ptr -14h
.text:0000000000003A40 var_10          = qword ptr -10h
.text:0000000000003A40
.text:0000000000003A40 ; __unwind {
.text:0000000000003A40                 sub     rsp, 48h
.text:0000000000003A44                 mov     rax, rdx
.text:0000000000003A47                 mov     rdx, fs:28h
.text:0000000000003A50                 mov     [rsp+48h+var_10], rdx
.text:0000000000003A55                 xor     edx, edx
.text:0000000000003A57                 cmp     esi, 0Ah
.text:0000000000003A5A                 jz      short loc_3AC4
.text:0000000000003A5C                 mov     [rsp+48h+var_48], esi
.text:0000000000003A5F                 mov     rcx, rsp
.text:0000000000003A62                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A69                 mov     rsi, rax
.text:0000000000003A6C                 mov     [rsp+48h+var_44], 0
.text:0000000000003A75                 mov     [rsp+48h+var_3C], 0
.text:0000000000003A7E                 mov     [rsp+48h+var_34], 0
.text:0000000000003A87                 mov     [rsp+48h+var_2C], 0
.text:0000000000003A90                 mov     [rsp+48h+var_24], 0
.text:0000000000003A99                 mov     [rsp+48h+var_1C], 0
.text:0000000000003AA2                 mov     [rsp+48h+var_14], 0
.text:0000000000003AAA                 call    quotearg_n_options
.text:0000000000003AAF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003AB4                 xor     rcx, fs:28h
.text:0000000000003ABD                 jnz     short loc_3AC9
.text:0000000000003ABF                 add     rsp, 48h
.text:0000000000003AC3                 retn
.text:0000000000003AC4 ; ---------------------------------------------------------------------------
.text:0000000000003AC4
.text:0000000000003AC4 loc_3AC4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003AC4                 call    _abort
.text:0000000000003AC9 ; ---------------------------------------------------------------------------
.text:0000000000003AC9
.text:0000000000003AC9 loc_3AC9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003AC9                 call    ___stack_chk_fail
.text:0000000000003AC9 ; } // starts at 3A40
.text:0000000000003AC9 quotearg_n_style endp
.text:0000000000003AC9
.text:0000000000003AC9 ; ---------------------------------------------------------------------------
.text:0000000000003ACE                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0 ; Attributes: info_from_lumina
.text:0000000000003AD0
.text:0000000000003AD0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003AD0                 public quotearg_n_style_mem
.text:0000000000003AD0 quotearg_n_style_mem proc near          ; CODE XREF: main+4A4↑p
.text:0000000000003AD0                                         ; quotearg_style_mem+A↓j
.text:0000000000003AD0
.text:0000000000003AD0 var_48          = dword ptr -48h
.text:0000000000003AD0 var_44          = qword ptr -44h
.text:0000000000003AD0 var_3C          = qword ptr -3Ch
.text:0000000000003AD0 var_34          = qword ptr -34h
.text:0000000000003AD0 var_2C          = qword ptr -2Ch
.text:0000000000003AD0 var_24          = qword ptr -24h
.text:0000000000003AD0 var_1C          = qword ptr -1Ch
.text:0000000000003AD0 var_14          = dword ptr -14h
.text:0000000000003AD0 var_10          = qword ptr -10h
.text:0000000000003AD0
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 sub     rsp, 48h
.text:0000000000003AD4                 mov     rax, rdx
.text:0000000000003AD7                 mov     rdx, rcx
.text:0000000000003ADA                 mov     rcx, fs:28h
.text:0000000000003AE3                 mov     [rsp+48h+var_10], rcx
.text:0000000000003AE8                 xor     ecx, ecx
.text:0000000000003AEA                 cmp     esi, 0Ah
.text:0000000000003AED                 jz      short loc_3B50
.text:0000000000003AEF                 mov     [rsp+48h+var_48], esi
.text:0000000000003AF2                 mov     rcx, rsp
.text:0000000000003AF5                 mov     rsi, rax
.text:0000000000003AF8                 mov     [rsp+48h+var_44], 0
.text:0000000000003B01                 mov     [rsp+48h+var_3C], 0
.text:0000000000003B0A                 mov     [rsp+48h+var_34], 0
.text:0000000000003B13                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B1C                 mov     [rsp+48h+var_24], 0
.text:0000000000003B25                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B2E                 mov     [rsp+48h+var_14], 0
.text:0000000000003B36                 call    quotearg_n_options
.text:0000000000003B3B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003B40                 xor     rdx, fs:28h
.text:0000000000003B49                 jnz     short loc_3B55
.text:0000000000003B4B                 add     rsp, 48h
.text:0000000000003B4F                 retn
.text:0000000000003B50 ; ---------------------------------------------------------------------------
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003B50                 call    _abort
.text:0000000000003B55 ; ---------------------------------------------------------------------------
.text:0000000000003B55
.text:0000000000003B55 loc_3B55:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003B55                 call    ___stack_chk_fail
.text:0000000000003B55 ; } // starts at 3AD0
.text:0000000000003B55 quotearg_n_style_mem endp
.text:0000000000003B55
.text:0000000000003B55 ; ---------------------------------------------------------------------------
.text:0000000000003B5A                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60
.text:0000000000003B60                 public quotearg_style
.text:0000000000003B60 quotearg_style  proc near               ; CODE XREF: main+384↑p
.text:0000000000003B60                                         ; main+5A2↑p
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 mov     rdx, rsi
.text:0000000000003B63                 mov     esi, edi
.text:0000000000003B65                 xor     edi, edi
.text:0000000000003B67                 jmp     quotearg_n_style
.text:0000000000003B67 ; } // starts at 3B60
.text:0000000000003B67 quotearg_style  endp
.text:0000000000003B67
.text:0000000000003B67 ; ---------------------------------------------------------------------------
.text:0000000000003B6C                 align 10h
.text:0000000000003B70
.text:0000000000003B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B70
.text:0000000000003B70
.text:0000000000003B70                 public quotearg_style_mem
.text:0000000000003B70 quotearg_style_mem proc near
.text:0000000000003B70 ; __unwind {
.text:0000000000003B70                 mov     rcx, rdx
.text:0000000000003B73                 mov     rdx, rsi
.text:0000000000003B76                 mov     esi, edi
.text:0000000000003B78                 xor     edi, edi
.text:0000000000003B7A                 jmp     quotearg_n_style_mem
.text:0000000000003B7A ; } // starts at 3B70
.text:0000000000003B7A quotearg_style_mem endp
.text:0000000000003B7A
.text:0000000000003B7A ; ---------------------------------------------------------------------------
.text:0000000000003B7F                 align 20h
.text:0000000000003B80
.text:0000000000003B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B80
.text:0000000000003B80 ; Attributes: info_from_lumina
.text:0000000000003B80
.text:0000000000003B80 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003B80                 public quotearg_char_mem
.text:0000000000003B80 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003B80                                         ; quotearg_colon+C↓j ...
.text:0000000000003B80
.text:0000000000003B80 var_48          = xmmword ptr -48h
.text:0000000000003B80 var_38          = xmmword ptr -38h
.text:0000000000003B80 var_28          = xmmword ptr -28h
.text:0000000000003B80 var_18          = qword ptr -18h
.text:0000000000003B80 var_10          = qword ptr -10h
.text:0000000000003B80
.text:0000000000003B80 ; __unwind {
.text:0000000000003B80                 sub     rsp, 48h
.text:0000000000003B84                 mov     ecx, edx
.text:0000000000003B86                 mov     rax, fs:28h
.text:0000000000003B8F                 mov     [rsp+48h+var_10], rax
.text:0000000000003B94                 xor     eax, eax
.text:0000000000003B96                 mov     rax, cs:qword_207210
.text:0000000000003B9D                 mov     r8, rsp
.text:0000000000003BA0                 and     ecx, 1Fh
.text:0000000000003BA3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003BAB                 mov     [rsp+48h+var_18], rax
.text:0000000000003BB0                 mov     eax, edx
.text:0000000000003BB2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003BB6                 shr     al, 5
.text:0000000000003BB9                 movzx   eax, al
.text:0000000000003BBC                 lea     r9, [r8+rax*4+8]
.text:0000000000003BC1                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003BC9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003BCE                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003BD6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003BDB                 mov     edx, [r9]
.text:0000000000003BDE                 mov     eax, edx
.text:0000000000003BE0                 shr     eax, cl
.text:0000000000003BE2                 not     eax
.text:0000000000003BE4                 and     eax, 1
.text:0000000000003BE7                 shl     eax, cl
.text:0000000000003BE9                 mov     rcx, r8
.text:0000000000003BEC                 xor     eax, edx
.text:0000000000003BEE                 mov     rdx, rsi
.text:0000000000003BF1                 mov     rsi, rdi
.text:0000000000003BF4                 mov     [r9], eax
.text:0000000000003BF7                 xor     edi, edi
.text:0000000000003BF9                 call    quotearg_n_options
.text:0000000000003BFE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003C03                 xor     rsi, fs:28h
.text:0000000000003C0C                 jnz     short loc_3C13
.text:0000000000003C0E                 add     rsp, 48h
.text:0000000000003C12                 retn
.text:0000000000003C13 ; ---------------------------------------------------------------------------
.text:0000000000003C13
.text:0000000000003C13 loc_3C13:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003C13                 call    ___stack_chk_fail
.text:0000000000003C13 ; } // starts at 3B80
.text:0000000000003C13 quotearg_char_mem endp
.text:0000000000003C13
.text:0000000000003C13 ; ---------------------------------------------------------------------------
.text:0000000000003C18                 align 20h
.text:0000000000003C20
.text:0000000000003C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C20
.text:0000000000003C20
.text:0000000000003C20                 public quotearg_char
.text:0000000000003C20 quotearg_char   proc near
.text:0000000000003C20 ; __unwind {
.text:0000000000003C20                 movsx   edx, sil
.text:0000000000003C24                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C2B                 jmp     quotearg_char_mem
.text:0000000000003C2B ; } // starts at 3C20
.text:0000000000003C2B quotearg_char   endp
.text:0000000000003C2B
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30
.text:0000000000003C30                 public quotearg_colon
.text:0000000000003C30 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 mov     edx, 3Ah ; ':'
.text:0000000000003C35                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C3C                 jmp     quotearg_char_mem
.text:0000000000003C3C ; } // starts at 3C30
.text:0000000000003C3C quotearg_colon  endp
.text:0000000000003C3C
.text:0000000000003C3C ; ---------------------------------------------------------------------------
.text:0000000000003C41                 align 10h
.text:0000000000003C50
.text:0000000000003C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C50
.text:0000000000003C50
.text:0000000000003C50                 public quotearg_colon_mem
.text:0000000000003C50 quotearg_colon_mem proc near
.text:0000000000003C50 ; __unwind {
.text:0000000000003C50                 mov     edx, 3Ah ; ':'
.text:0000000000003C55                 jmp     quotearg_char_mem
.text:0000000000003C55 ; } // starts at 3C50
.text:0000000000003C55 quotearg_colon_mem endp
.text:0000000000003C55
.text:0000000000003C55 ; ---------------------------------------------------------------------------
.text:0000000000003C5A                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60 ; Attributes: info_from_lumina
.text:0000000000003C60
.text:0000000000003C60 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003C60                 public quotearg_n_style_colon
.text:0000000000003C60 quotearg_n_style_colon proc near        ; CODE XREF: main+1A1↑p
.text:0000000000003C60                                         ; main+3E7↑p
.text:0000000000003C60
.text:0000000000003C60 var_48          = dword ptr -48h
.text:0000000000003C60 var_44          = qword ptr -44h
.text:0000000000003C60 var_3C          = qword ptr -3Ch
.text:0000000000003C60 var_34          = qword ptr -34h
.text:0000000000003C60 var_2C          = qword ptr -2Ch
.text:0000000000003C60 var_24          = qword ptr -24h
.text:0000000000003C60 var_1C          = qword ptr -1Ch
.text:0000000000003C60 var_14          = dword ptr -14h
.text:0000000000003C60 var_10          = qword ptr -10h
.text:0000000000003C60
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 sub     rsp, 48h
.text:0000000000003C64                 mov     rax, rdx
.text:0000000000003C67                 mov     rdx, fs:28h
.text:0000000000003C70                 mov     [rsp+48h+var_10], rdx
.text:0000000000003C75                 xor     edx, edx
.text:0000000000003C77                 cmp     esi, 0Ah
.text:0000000000003C7A                 jz      short loc_3CE4
.text:0000000000003C7C                 mov     [rsp+48h+var_48], esi
.text:0000000000003C7F                 mov     rcx, rsp
.text:0000000000003C82                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C89                 mov     rsi, rax
.text:0000000000003C8C                 mov     [rsp+48h+var_44], 0
.text:0000000000003C95                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003C9E                 mov     [rsp+48h+var_34], 0
.text:0000000000003CA7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003CB0                 mov     [rsp+48h+var_24], 0
.text:0000000000003CB9                 mov     [rsp+48h+var_1C], 0
.text:0000000000003CC2                 mov     [rsp+48h+var_14], 0
.text:0000000000003CCA                 call    quotearg_n_options
.text:0000000000003CCF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003CD4                 xor     rcx, fs:28h
.text:0000000000003CDD                 jnz     short loc_3CE9
.text:0000000000003CDF                 add     rsp, 48h
.text:0000000000003CE3                 retn
.text:0000000000003CE4 ; ---------------------------------------------------------------------------
.text:0000000000003CE4
.text:0000000000003CE4 loc_3CE4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003CE4                 call    _abort
.text:0000000000003CE9 ; ---------------------------------------------------------------------------
.text:0000000000003CE9
.text:0000000000003CE9 loc_3CE9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003CE9                 call    ___stack_chk_fail
.text:0000000000003CE9 ; } // starts at 3C60
.text:0000000000003CE9 quotearg_n_style_colon endp
.text:0000000000003CE9
.text:0000000000003CE9 ; ---------------------------------------------------------------------------
.text:0000000000003CEE                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0 ; Attributes: info_from_lumina
.text:0000000000003CF0
.text:0000000000003CF0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003CF0                 public quotearg_n_custom_mem
.text:0000000000003CF0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003CF0                                         ; quotearg_custom+12↓j ...
.text:0000000000003CF0
.text:0000000000003CF0 var_48          = xmmword ptr -48h
.text:0000000000003CF0 var_38          = xmmword ptr -38h
.text:0000000000003CF0 var_28          = xmmword ptr -28h
.text:0000000000003CF0 var_18          = qword ptr -18h
.text:0000000000003CF0 var_10          = qword ptr -10h
.text:0000000000003CF0
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 sub     rsp, 48h
.text:0000000000003CF4                 mov     r9, rcx
.text:0000000000003CF7                 mov     rcx, cs:qword_207210
.text:0000000000003CFE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003D06                 mov     rax, fs:28h
.text:0000000000003D0F                 mov     [rsp+48h+var_10], rax
.text:0000000000003D14                 xor     eax, eax
.text:0000000000003D16                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003D1A                 test    rsi, rsi
.text:0000000000003D1D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003D22                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003D29                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003D31                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003D36                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003D3E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003D43                 jz      short loc_3D77
.text:0000000000003D45                 test    rdx, rdx
.text:0000000000003D48                 jz      short loc_3D77
.text:0000000000003D4A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003D4F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003D54                 mov     rcx, rsp
.text:0000000000003D57                 mov     rdx, r8
.text:0000000000003D5A                 mov     rsi, r9
.text:0000000000003D5D                 call    quotearg_n_options
.text:0000000000003D62                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003D67                 xor     rdi, fs:28h
.text:0000000000003D70                 jnz     short loc_3D7C
.text:0000000000003D72                 add     rsp, 48h
.text:0000000000003D76                 retn
.text:0000000000003D77 ; ---------------------------------------------------------------------------
.text:0000000000003D77
.text:0000000000003D77 loc_3D77:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003D77                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003D77                 call    _abort
.text:0000000000003D7C ; ---------------------------------------------------------------------------
.text:0000000000003D7C
.text:0000000000003D7C loc_3D7C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003D7C                 call    ___stack_chk_fail
.text:0000000000003D7C ; } // starts at 3CF0
.text:0000000000003D7C quotearg_n_custom_mem endp
.text:0000000000003D7C
.text:0000000000003D7C ; ---------------------------------------------------------------------------
.text:0000000000003D81                 align 10h
.text:0000000000003D90
.text:0000000000003D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D90
.text:0000000000003D90
.text:0000000000003D90                 public quotearg_n_custom
.text:0000000000003D90 quotearg_n_custom proc near
.text:0000000000003D90 ; __unwind {
.text:0000000000003D90                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D97                 jmp     quotearg_n_custom_mem
.text:0000000000003D97 ; } // starts at 3D90
.text:0000000000003D97 quotearg_n_custom endp
.text:0000000000003D97
.text:0000000000003D97 ; ---------------------------------------------------------------------------
.text:0000000000003D9C                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DA0
.text:0000000000003DA0
.text:0000000000003DA0                 public quotearg_custom
.text:0000000000003DA0 quotearg_custom proc near
.text:0000000000003DA0 ; __unwind {
.text:0000000000003DA0                 mov     rcx, rdx
.text:0000000000003DA3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DAA                 mov     rdx, rsi
.text:0000000000003DAD                 mov     rsi, rdi
.text:0000000000003DB0                 xor     edi, edi
.text:0000000000003DB2                 jmp     quotearg_n_custom_mem
.text:0000000000003DB2 ; } // starts at 3DA0
.text:0000000000003DB2 quotearg_custom endp
.text:0000000000003DB2
.text:0000000000003DB2 ; ---------------------------------------------------------------------------
.text:0000000000003DB7                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DC0
.text:0000000000003DC0
.text:0000000000003DC0                 public quotearg_custom_mem
.text:0000000000003DC0 quotearg_custom_mem proc near
.text:0000000000003DC0 ; __unwind {
.text:0000000000003DC0                 mov     r8, rcx
.text:0000000000003DC3                 mov     rcx, rdx
.text:0000000000003DC6                 mov     rdx, rsi
.text:0000000000003DC9                 mov     rsi, rdi
.text:0000000000003DCC                 xor     edi, edi
.text:0000000000003DCE                 jmp     quotearg_n_custom_mem
.text:0000000000003DCE ; } // starts at 3DC0
.text:0000000000003DCE quotearg_custom_mem endp
.text:0000000000003DCE
.text:0000000000003DCE ; ---------------------------------------------------------------------------
.text:0000000000003DD3                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DE0
.text:0000000000003DE0
.text:0000000000003DE0                 public quote_n_mem
.text:0000000000003DE0 quote_n_mem     proc near
.text:0000000000003DE0 ; __unwind {
.text:0000000000003DE0                 lea     rcx, quote_quoting_options
.text:0000000000003DE7                 jmp     quotearg_n_options
.text:0000000000003DE7 ; } // starts at 3DE0
.text:0000000000003DE7 quote_n_mem     endp
.text:0000000000003DE7
.text:0000000000003DE7 ; ---------------------------------------------------------------------------
.text:0000000000003DEC                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DF0
.text:0000000000003DF0
.text:0000000000003DF0                 public quote_mem
.text:0000000000003DF0 quote_mem       proc near
.text:0000000000003DF0 ; __unwind {
.text:0000000000003DF0                 lea     rcx, quote_quoting_options
.text:0000000000003DF7                 mov     rdx, rsi
.text:0000000000003DFA                 mov     rsi, rdi
.text:0000000000003DFD                 xor     edi, edi
.text:0000000000003DFF                 jmp     quotearg_n_options
.text:0000000000003DFF ; } // starts at 3DF0
.text:0000000000003DFF quote_mem       endp
.text:0000000000003DFF
.text:0000000000003DFF ; ---------------------------------------------------------------------------
.text:0000000000003E04                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10
.text:0000000000003E10                 public quote_n
.text:0000000000003E10 quote_n         proc near
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 lea     rcx, quote_quoting_options
.text:0000000000003E17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E1E                 jmp     quotearg_n_options
.text:0000000000003E1E ; } // starts at 3E10
.text:0000000000003E1E quote_n         endp
.text:0000000000003E1E
.text:0000000000003E1E ; ---------------------------------------------------------------------------
.text:0000000000003E23                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30                 public quote
.text:0000000000003E30 quote           proc near               ; CODE XREF: main+637↑p
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 lea     rcx, quote_quoting_options
.text:0000000000003E37                 mov     rsi, rdi
.text:0000000000003E3A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E41                 xor     edi, edi
.text:0000000000003E43                 jmp     quotearg_n_options
.text:0000000000003E43 ; } // starts at 3E30
.text:0000000000003E43 quote           endp
.text:0000000000003E43
.text:0000000000003E43 ; ---------------------------------------------------------------------------
.text:0000000000003E48                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003E50                 public version_etc_arn
.text:0000000000003E50 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_428B↓j
.text:0000000000003E50                                         ; version_etc_va:loc_42DB↓p ...
.text:0000000000003E50
.text:0000000000003E50 var_58          = qword ptr -58h
.text:0000000000003E50 var_50          = qword ptr -50h
.text:0000000000003E50 var_48          = qword ptr -48h
.text:0000000000003E50 var_40          = qword ptr -40h
.text:0000000000003E50
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 push    r15
.text:0000000000003E52                 push    r14
.text:0000000000003E54                 push    r13
.text:0000000000003E56                 push    r12
.text:0000000000003E58                 mov     r12, r9
.text:0000000000003E5B                 push    rbp
.text:0000000000003E5C                 push    rbx
.text:0000000000003E5D                 mov     rbp, rdi
.text:0000000000003E60                 mov     rbx, r8
.text:0000000000003E63                 sub     rsp, 28h
.text:0000000000003E67                 test    rsi, rsi
.text:0000000000003E6A                 jz      loc_3F88
.text:0000000000003E70                 mov     r8, rdx
.text:0000000000003E73                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003E7A                 mov     r9, rcx
.text:0000000000003E7D                 xor     eax, eax
.text:0000000000003E7F                 mov     rcx, rsi
.text:0000000000003E82                 mov     esi, 1
.text:0000000000003E87                 call    ___fprintf_chk
.text:0000000000003E8C
.text:0000000000003E8C loc_3E8C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003E8C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003E93                 xor     edi, edi        ; domainname
.text:0000000000003E95                 mov     edx, 5          ; category
.text:0000000000003E9A                 call    _dcgettext
.text:0000000000003E9F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003EA6                 mov     rcx, rax
.text:0000000000003EA9                 mov     r8d, 7E3h
.text:0000000000003EAF                 mov     esi, 1
.text:0000000000003EB4                 mov     rdi, rbp
.text:0000000000003EB7                 xor     eax, eax
.text:0000000000003EB9                 call    ___fprintf_chk
.text:0000000000003EBE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003EC5                 xor     edi, edi        ; domainname
.text:0000000000003EC7                 mov     edx, 5          ; category
.text:0000000000003ECC                 call    _dcgettext
.text:0000000000003ED1                 mov     rsi, rbp        ; stream
.text:0000000000003ED4                 mov     rdi, rax        ; s
.text:0000000000003ED7                 call    _fputs_unlocked
.text:0000000000003EDC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003EE0                 ja      def_3EF4        ; jumptable 0000000000003EF4 default case
.text:0000000000003EE6                 lea     rdx, jpt_3EF4
.text:0000000000003EED                 movsxd  rax, ds:(jpt_3EF4 - 57A8h)[rdx+r12*4]
.text:0000000000003EF1                 add     rax, rdx
.text:0000000000003EF4                 jmp     rax             ; switch jump
.text:0000000000003EF4 ; ---------------------------------------------------------------------------
.text:0000000000003EF6                 align 20h
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F00                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000003F00                 mov     r9, [rbx+38h]   ; jumptable 0000000000003EF4 case 8
.text:0000000000003F04                 mov     rax, [rbx+10h]
.text:0000000000003F08                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003F0F                 mov     r8, [rbx+8]
.text:0000000000003F13                 mov     edx, 5          ; category
.text:0000000000003F18                 xor     edi, edi        ; domainname
.text:0000000000003F1A                 mov     r13, [rbx+30h]
.text:0000000000003F1E                 mov     r12, [rbx+28h]
.text:0000000000003F22                 mov     [rsp+58h+var_48], r9
.text:0000000000003F27                 mov     r15, [rbx+20h]
.text:0000000000003F2B                 mov     r14, [rbx+18h]
.text:0000000000003F2F                 mov     [rsp+58h+var_58], rax
.text:0000000000003F33                 mov     [rsp+58h+var_50], r8
.text:0000000000003F38                 mov     rbx, [rbx]
.text:0000000000003F3B                 call    _dcgettext
.text:0000000000003F40                 sub     rsp, 8
.text:0000000000003F44
.text:0000000000003F44 loc_3F44:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003F44                 mov     r9, [rsp+60h+var_48]
.text:0000000000003F49                 mov     rdx, rax
.text:0000000000003F4C                 mov     rcx, rbx
.text:0000000000003F4F                 mov     esi, 1
.text:0000000000003F54                 mov     rdi, rbp
.text:0000000000003F57                 xor     eax, eax
.text:0000000000003F59                 push    r9
.text:0000000000003F5B                 push    r13
.text:0000000000003F5D                 push    r12
.text:0000000000003F5F                 push    r15
.text:0000000000003F61                 push    r14
.text:0000000000003F63                 mov     r9, [rsp+88h+var_58]
.text:0000000000003F68                 mov     r8, [rsp+88h+var_50]
.text:0000000000003F6D                 call    ___fprintf_chk
.text:0000000000003F72                 add     rsp, 30h
.text:0000000000003F76
.text:0000000000003F76 loc_3F76:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F76                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000003F76                 add     rsp, 28h        ; jumptable 0000000000003EF4 case 0
.text:0000000000003F7A                 pop     rbx
.text:0000000000003F7B                 pop     rbp
.text:0000000000003F7C                 pop     r12
.text:0000000000003F7E                 pop     r13
.text:0000000000003F80                 pop     r14
.text:0000000000003F82                 pop     r15
.text:0000000000003F84                 retn
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F85                 align 8
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003F88                 mov     r8, rcx
.text:0000000000003F8B                 mov     rcx, rdx
.text:0000000000003F8E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003F95                 mov     esi, 1
.text:0000000000003F9A                 xor     eax, eax
.text:0000000000003F9C                 call    ___fprintf_chk
.text:0000000000003FA1                 jmp     loc_3E8C
.text:0000000000003FA1 ; ---------------------------------------------------------------------------
.text:0000000000003FA6                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FB0                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000003FB0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003EF4 case 9
.text:0000000000003FB4                 mov     r9, [rbx+38h]
.text:0000000000003FB8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003FBF                 mov     rax, [rbx+10h]
.text:0000000000003FC3                 mov     r8, [rbx+8]
.text:0000000000003FC7                 mov     edx, 5          ; category
.text:0000000000003FCC                 mov     r13, [rbx+30h]
.text:0000000000003FD0                 mov     r12, [rbx+28h]
.text:0000000000003FD4                 mov     r15, [rbx+20h]
.text:0000000000003FD8                 mov     r14, [rbx+18h]
.text:0000000000003FDC                 mov     rbx, [rbx]
.text:0000000000003FDF                 mov     [rsp+58h+var_40], r10
.text:0000000000003FE4                 mov     [rsp+58h+var_48], r9
.text:0000000000003FE9                 mov     [rsp+58h+var_58], rax
.text:0000000000003FED                 mov     [rsp+58h+var_50], r8
.text:0000000000003FF2
.text:0000000000003FF2 loc_3FF2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003FF2                 xor     edi, edi        ; domainname
.text:0000000000003FF4                 call    _dcgettext
.text:0000000000003FF9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003FFE                 push    r10
.text:0000000000004000                 jmp     loc_3F44
.text:0000000000004000 ; ---------------------------------------------------------------------------
.text:0000000000004005                 align 8
.text:0000000000004008
.text:0000000000004008 loc_4008:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004008                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000004008                 mov     rbx, [rbx]      ; jumptable 0000000000003EF4 case 1
.text:000000000000400B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004012                 mov     edx, 5          ; category
.text:0000000000004017                 xor     edi, edi        ; domainname
.text:0000000000004019                 call    _dcgettext
.text:000000000000401E                 add     rsp, 28h
.text:0000000000004022                 mov     rcx, rbx
.text:0000000000004025                 mov     rdi, rbp
.text:0000000000004028                 pop     rbx
.text:0000000000004029                 pop     rbp
.text:000000000000402A                 pop     r12
.text:000000000000402C                 pop     r13
.text:000000000000402E                 pop     r14
.text:0000000000004030                 pop     r15
.text:0000000000004032                 mov     rdx, rax
.text:0000000000004035                 mov     esi, 1
.text:000000000000403A                 xor     eax, eax
.text:000000000000403C                 jmp     ___fprintf_chk
.text:000000000000403C ; ---------------------------------------------------------------------------
.text:0000000000004041                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004048                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000004048                 mov     r12, [rbx+8]    ; jumptable 0000000000003EF4 case 2
.text:000000000000404C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004053                 mov     rbx, [rbx]
.text:0000000000004056                 mov     edx, 5          ; category
.text:000000000000405B                 xor     edi, edi        ; domainname
.text:000000000000405D                 call    _dcgettext
.text:0000000000004062                 add     rsp, 28h
.text:0000000000004066                 mov     r8, r12
.text:0000000000004069                 mov     rcx, rbx
.text:000000000000406C                 mov     rdi, rbp
.text:000000000000406F                 mov     rdx, rax
.text:0000000000004072                 mov     esi, 1
.text:0000000000004077                 pop     rbx
.text:0000000000004078                 pop     rbp
.text:0000000000004079                 pop     r12
.text:000000000000407B                 pop     r13
.text:000000000000407D                 pop     r14
.text:000000000000407F                 pop     r15
.text:0000000000004081                 xor     eax, eax
.text:0000000000004083                 jmp     ___fprintf_chk
.text:0000000000004083 ; ---------------------------------------------------------------------------
.text:0000000000004088                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004090                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000004090                 mov     r13, [rbx+10h]  ; jumptable 0000000000003EF4 case 3
.text:0000000000004094                 mov     r12, [rbx+8]
.text:0000000000004098                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000409F                 mov     rbx, [rbx]
.text:00000000000040A2                 mov     edx, 5          ; category
.text:00000000000040A7                 xor     edi, edi        ; domainname
.text:00000000000040A9                 call    _dcgettext
.text:00000000000040AE                 add     rsp, 28h
.text:00000000000040B2                 mov     r9, r13
.text:00000000000040B5                 mov     r8, r12
.text:00000000000040B8                 mov     rcx, rbx
.text:00000000000040BB                 mov     rdi, rbp
.text:00000000000040BE                 mov     rdx, rax
.text:00000000000040C1                 pop     rbx
.text:00000000000040C2                 pop     rbp
.text:00000000000040C3                 pop     r12
.text:00000000000040C5                 pop     r13
.text:00000000000040C7                 pop     r14
.text:00000000000040C9                 pop     r15
.text:00000000000040CB                 mov     esi, 1
.text:00000000000040D0                 xor     eax, eax
.text:00000000000040D2                 jmp     ___fprintf_chk
.text:00000000000040D2 ; ---------------------------------------------------------------------------
.text:00000000000040D7                 align 20h
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040E0                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:00000000000040E0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003EF4 case 4
.text:00000000000040E7                 mov     edx, 5          ; category
.text:00000000000040EC                 xor     edi, edi        ; domainname
.text:00000000000040EE                 mov     r14, [rbx+18h]
.text:00000000000040F2                 mov     r13, [rbx+10h]
.text:00000000000040F6                 mov     r12, [rbx+8]
.text:00000000000040FA                 mov     rbx, [rbx]
.text:00000000000040FD                 call    _dcgettext
.text:0000000000004102                 sub     rsp, 8
.text:0000000000004106
.text:0000000000004106 loc_4106:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004106                 push    r14
.text:0000000000004108                 mov     rdx, rax
.text:000000000000410B                 mov     r9, r13
.text:000000000000410E                 mov     r8, r12
.text:0000000000004111                 mov     rcx, rbx
.text:0000000000004114                 mov     rdi, rbp
.text:0000000000004117                 mov     esi, 1
.text:000000000000411C                 xor     eax, eax
.text:000000000000411E                 call    ___fprintf_chk
.text:0000000000004123                 pop     rax
.text:0000000000004124                 pop     rdx
.text:0000000000004125                 add     rsp, 28h
.text:0000000000004129                 pop     rbx
.text:000000000000412A                 pop     rbp
.text:000000000000412B                 pop     r12
.text:000000000000412D                 pop     r13
.text:000000000000412F                 pop     r14
.text:0000000000004131                 pop     r15
.text:0000000000004133                 retn
.text:0000000000004133 ; ---------------------------------------------------------------------------
.text:0000000000004134                 align 8
.text:0000000000004138
.text:0000000000004138 loc_4138:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004138                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000004138                 mov     r15, [rbx+20h]  ; jumptable 0000000000003EF4 case 5
.text:000000000000413C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004143                 mov     edx, 5          ; category
.text:0000000000004148                 xor     edi, edi        ; domainname
.text:000000000000414A                 mov     r14, [rbx+18h]
.text:000000000000414E                 mov     r13, [rbx+10h]
.text:0000000000004152                 mov     r12, [rbx+8]
.text:0000000000004156                 mov     rbx, [rbx]
.text:0000000000004159                 call    _dcgettext
.text:000000000000415E                 push    r15
.text:0000000000004160                 jmp     short loc_4106
.text:0000000000004160 ; ---------------------------------------------------------------------------
.text:0000000000004162                 align 8
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004168                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:0000000000004168                 mov     r8, [rbx+8]     ; jumptable 0000000000003EF4 case 6
.text:000000000000416C                 mov     r12, [rbx+28h]
.text:0000000000004170                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004177                 mov     r15, [rbx+20h]
.text:000000000000417B                 mov     r14, [rbx+18h]
.text:000000000000417F                 mov     edx, 5          ; category
.text:0000000000004184                 mov     r13, [rbx+10h]
.text:0000000000004188                 xor     edi, edi        ; domainname
.text:000000000000418A                 mov     rbx, [rbx]
.text:000000000000418D                 mov     [rsp+58h+var_58], r8
.text:0000000000004191                 call    _dcgettext
.text:0000000000004196                 sub     rsp, 8
.text:000000000000419A                 mov     r9, r13
.text:000000000000419D                 push    r12
.text:000000000000419F                 push    r15
.text:00000000000041A1                 push    r14
.text:00000000000041A3
.text:00000000000041A3 loc_41A3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000041A3                 mov     r8, [rsp+78h+var_58]
.text:00000000000041A8                 mov     rcx, rbx
.text:00000000000041AB                 mov     rdx, rax
.text:00000000000041AE                 mov     rdi, rbp
.text:00000000000041B1                 mov     esi, 1
.text:00000000000041B6                 xor     eax, eax
.text:00000000000041B8                 call    ___fprintf_chk
.text:00000000000041BD                 add     rsp, 20h
.text:00000000000041C1                 add     rsp, 28h
.text:00000000000041C5                 pop     rbx
.text:00000000000041C6                 pop     rbp
.text:00000000000041C7                 pop     r12
.text:00000000000041C9                 pop     r13
.text:00000000000041CB                 pop     r14
.text:00000000000041CD                 pop     r15
.text:00000000000041CF                 retn
.text:00000000000041D0 ; ---------------------------------------------------------------------------
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041D0                                         ; DATA XREF: .rodata:jpt_3EF4↓o
.text:00000000000041D0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003EF4 case 7
.text:00000000000041D4                 mov     r13, [rbx+30h]
.text:00000000000041D8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000041DF                 mov     r12, [rbx+28h]
.text:00000000000041E3                 mov     r15, [rbx+20h]
.text:00000000000041E7                 mov     edx, 5          ; category
.text:00000000000041EC                 mov     r14, [rbx+18h]
.text:00000000000041F0                 mov     r8, [rbx+8]
.text:00000000000041F4                 xor     edi, edi        ; domainname
.text:00000000000041F6                 mov     [rsp+58h+var_50], r9
.text:00000000000041FB                 mov     rbx, [rbx]
.text:00000000000041FE                 mov     [rsp+58h+var_58], r8
.text:0000000000004202                 call    _dcgettext
.text:0000000000004207                 push    r13
.text:0000000000004209                 push    r12
.text:000000000000420B                 push    r15
.text:000000000000420D                 push    r14
.text:000000000000420F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004214                 jmp     short loc_41A3
.text:0000000000004214 ; ---------------------------------------------------------------------------
.text:0000000000004216                 align 20h
.text:0000000000004220
.text:0000000000004220 def_3EF4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004220                 mov     r10, [rbx+40h]  ; jumptable 0000000000003EF4 default case
.text:0000000000004224                 mov     r9, [rbx+38h]
.text:0000000000004228                 mov     edx, 5
.text:000000000000422D                 mov     rax, [rbx+10h]
.text:0000000000004231                 mov     r8, [rbx+8]
.text:0000000000004235                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000423C                 mov     r13, [rbx+30h]
.text:0000000000004240                 mov     r12, [rbx+28h]
.text:0000000000004244                 mov     r15, [rbx+20h]
.text:0000000000004248                 mov     r14, [rbx+18h]
.text:000000000000424C                 mov     [rsp+58h+var_40], r10
.text:0000000000004251                 mov     [rsp+58h+var_48], r9
.text:0000000000004256                 mov     [rsp+58h+var_58], rax
.text:000000000000425A                 mov     [rsp+58h+var_50], r8
.text:000000000000425F                 mov     rbx, [rbx]
.text:0000000000004262                 jmp     loc_3FF2
.text:0000000000004262 ; } // starts at 3E50
.text:0000000000004262 version_etc_arn endp
.text:0000000000004262
.text:0000000000004262 ; ---------------------------------------------------------------------------
.text:0000000000004267                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270 ; Attributes: info_from_lumina
.text:0000000000004270
.text:0000000000004270 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004270                 public version_etc_ar
.text:0000000000004270 version_etc_ar  proc near
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 xor     r9d, r9d
.text:0000000000004273                 cmp     qword ptr [r8], 0
.text:0000000000004277                 jz      short loc_428B
.text:0000000000004279                 nop     dword ptr [rax+00000000h]
.text:0000000000004280
.text:0000000000004280 loc_4280:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004280                 add     r9, 1
.text:0000000000004284                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004289                 jnz     short loc_4280
.text:000000000000428B
.text:000000000000428B loc_428B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000428B                 jmp     version_etc_arn
.text:000000000000428B ; } // starts at 4270
.text:000000000000428B version_etc_ar  endp
.text:000000000000428B
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004290                 public version_etc_va
.text:0000000000004290 version_etc_va  proc near
.text:0000000000004290
.text:0000000000004290 authtab         = qword ptr -68h
.text:0000000000004290 var_10          = qword ptr -10h
.text:0000000000004290
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 sub     rsp, 68h
.text:0000000000004294                 mov     r10, r8
.text:0000000000004297                 xor     r9d, r9d
.text:000000000000429A                 mov     rax, fs:28h
.text:00000000000042A3                 mov     [rsp+68h+var_10], rax
.text:00000000000042A8                 xor     eax, eax
.text:00000000000042AA                 mov     r8, rsp
.text:00000000000042AD                 nop     dword ptr [rax]
.text:00000000000042B0
.text:00000000000042B0 loc_42B0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000042B0                 mov     eax, [r10]
.text:00000000000042B3                 cmp     eax, 2Fh ; '/'
.text:00000000000042B6                 ja      short loc_42FA
.text:00000000000042B8                 mov     r11d, eax
.text:00000000000042BB                 add     r11, [r10+10h]
.text:00000000000042BF                 add     eax, 8
.text:00000000000042C2                 mov     [r10], eax
.text:00000000000042C5
.text:00000000000042C5 loc_42C5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000042C5                 mov     rax, [r11]
.text:00000000000042C8                 test    rax, rax
.text:00000000000042CB                 mov     [r8+r9*8], rax
.text:00000000000042CF                 jz      short loc_42DB
.text:00000000000042D1                 add     r9, 1
.text:00000000000042D5                 cmp     r9, 0Ah
.text:00000000000042D9                 jnz     short loc_42B0
.text:00000000000042DB
.text:00000000000042DB loc_42DB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000042DB                 call    version_etc_arn
.text:00000000000042E0                 mov     rax, [rsp+68h+var_10]
.text:00000000000042E5                 xor     rax, fs:28h
.text:00000000000042EE                 jnz     short loc_42F5
.text:00000000000042F0                 add     rsp, 68h
.text:00000000000042F4                 retn
.text:00000000000042F5 ; ---------------------------------------------------------------------------
.text:00000000000042F5
.text:00000000000042F5 loc_42F5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000042F5                 call    ___stack_chk_fail
.text:00000000000042FA ; ---------------------------------------------------------------------------
.text:00000000000042FA
.text:00000000000042FA loc_42FA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000042FA                 mov     r11, [r10+8]
.text:00000000000042FE                 lea     rax, [r11+8]
.text:0000000000004302                 mov     [r10+8], rax
.text:0000000000004306                 jmp     short loc_42C5
.text:0000000000004306 ; } // starts at 4290
.text:0000000000004306 version_etc_va  endp
.text:0000000000004306
.text:0000000000004306 ; ---------------------------------------------------------------------------
.text:0000000000004308                 align 10h
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310 ; Attributes: info_from_lumina
.text:0000000000004310
.text:0000000000004310 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004310                 public version_etc
.text:0000000000004310 version_etc     proc near               ; CODE XREF: main+101↑p
.text:0000000000004310
.text:0000000000004310 var_C0          = dword ptr -0C0h
.text:0000000000004310 var_B8          = qword ptr -0B8h
.text:0000000000004310 var_B0          = qword ptr -0B0h
.text:0000000000004310 var_A8          = byte ptr -0A8h
.text:0000000000004310 var_50          = qword ptr -50h
.text:0000000000004310 var_48          = byte ptr -48h
.text:0000000000004310 var_28          = qword ptr -28h
.text:0000000000004310 var_20          = qword ptr -20h
.text:0000000000004310 arg_0           = byte ptr  8
.text:0000000000004310
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 push    rbp
.text:0000000000004311                 push    rbx
.text:0000000000004312                 mov     r10d, 20h ; ' '
.text:0000000000004318                 xor     r11d, r11d
.text:000000000000431B                 sub     rsp, 0B8h
.text:0000000000004322                 mov     rax, fs:28h
.text:000000000000432B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004330                 xor     eax, eax
.text:0000000000004332                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000433A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004342                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000434A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000434F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004357                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000435F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004364                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000436C                 xor     r9d, r9d
.text:000000000000436F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004374                 mov     rbp, rax
.text:0000000000004377                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004380                 cmp     r10d, 2Fh ; '/'
.text:0000000000004384                 ja      short loc_43DC
.text:0000000000004386                 mov     eax, r10d
.text:0000000000004389                 mov     r11d, 1
.text:000000000000438F                 add     r10d, 8
.text:0000000000004393                 add     rax, rbp
.text:0000000000004396
.text:0000000000004396 loc_4396:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004396                 mov     rax, [rax]
.text:0000000000004399                 test    rax, rax
.text:000000000000439C                 mov     [r8+r9*8], rax
.text:00000000000043A0                 jz      short loc_43AC
.text:00000000000043A2                 add     r9, 1
.text:00000000000043A6                 cmp     r9, 0Ah
.text:00000000000043AA                 jnz     short loc_4380
.text:00000000000043AC
.text:00000000000043AC loc_43AC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000043AC                 test    r11b, r11b
.text:00000000000043AF                 jnz     short loc_43D5
.text:00000000000043B1
.text:00000000000043B1 loc_43B1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000043B1                 call    version_etc_arn
.text:00000000000043B6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000043BB                 xor     rax, fs:28h
.text:00000000000043C4                 jnz     short loc_43D0
.text:00000000000043C6                 add     rsp, 0B8h
.text:00000000000043CD                 pop     rbx
.text:00000000000043CE                 pop     rbp
.text:00000000000043CF                 retn
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000043D0                 call    ___stack_chk_fail
.text:00000000000043D5 ; ---------------------------------------------------------------------------
.text:00000000000043D5
.text:00000000000043D5 loc_43D5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000043D5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000043DA                 jmp     short loc_43B1
.text:00000000000043DC ; ---------------------------------------------------------------------------
.text:00000000000043DC
.text:00000000000043DC loc_43DC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000043DC                 mov     rax, rbx
.text:00000000000043DF                 add     rbx, 8
.text:00000000000043E3                 jmp     short loc_4396
.text:00000000000043E3 ; } // starts at 4310
.text:00000000000043E3 version_etc     endp
.text:00000000000043E3
.text:00000000000043E3 ; ---------------------------------------------------------------------------
.text:00000000000043E5                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0 ; Attributes: info_from_lumina
.text:00000000000043F0
.text:00000000000043F0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000043F0                 public emit_bug_reporting_address
.text:00000000000043F0 emit_bug_reporting_address proc near
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 push    rbx
.text:00000000000043F1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000043F8                 mov     edx, 5          ; category
.text:00000000000043FD                 xor     edi, edi        ; domainname
.text:00000000000043FF                 call    _dcgettext
.text:0000000000004404                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000440B                 mov     rsi, rax
.text:000000000000440E                 mov     edi, 1
.text:0000000000004413                 xor     eax, eax
.text:0000000000004415                 call    ___printf_chk
.text:000000000000441A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004421                 mov     edx, 5          ; category
.text:0000000000004426                 xor     edi, edi        ; domainname
.text:0000000000004428                 call    _dcgettext
.text:000000000000442D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004434                 lea     rdx, unk_4B22
.text:000000000000443B                 mov     rsi, rax
.text:000000000000443E                 mov     edi, 1
.text:0000000000004443                 xor     eax, eax
.text:0000000000004445                 call    ___printf_chk
.text:000000000000444A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004451                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004458                 xor     edi, edi        ; domainname
.text:000000000000445A                 mov     edx, 5          ; category
.text:000000000000445F                 call    _dcgettext
.text:0000000000004464                 mov     rsi, rbx        ; stream
.text:0000000000004467                 mov     rdi, rax        ; s
.text:000000000000446A                 pop     rbx
.text:000000000000446B                 jmp     _fputs_unlocked
.text:000000000000446B ; } // starts at 43F0
.text:000000000000446B emit_bug_reporting_address endp
.text:000000000000446B
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470                 public xmalloc
.text:0000000000004470 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004470                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    rbx
.text:0000000000004471                 mov     rbx, rdi
.text:0000000000004474                 call    _malloc
.text:0000000000004479                 test    rax, rax
.text:000000000000447C                 jnz     short loc_4483
.text:000000000000447E                 test    rbx, rbx
.text:0000000000004481                 jnz     short loc_4485
.text:0000000000004483
.text:0000000000004483 loc_4483:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004483                 pop     rbx
.text:0000000000004484                 retn
.text:0000000000004485 ; ---------------------------------------------------------------------------
.text:0000000000004485
.text:0000000000004485 loc_4485:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004485                 call    xalloc_die
.text:0000000000004485 ; } // starts at 4470
.text:0000000000004485 xmalloc         endp
.text:0000000000004485
.text:0000000000004485 ; ---------------------------------------------------------------------------
.text:000000000000448A                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004490                 public xnmalloc
.text:0000000000004490 xnmalloc        proc near
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 mov     rax, rdi
.text:0000000000004493                 mul     rsi
.text:0000000000004496                 mov     rdi, rax
.text:0000000000004499                 seto    al
.text:000000000000449C                 test    rdi, rdi
.text:000000000000449F                 js      short loc_44AB
.text:00000000000044A1                 movzx   eax, al
.text:00000000000044A4                 test    rax, rax
.text:00000000000044A7                 jnz     short loc_44AB
.text:00000000000044A9                 jmp     short xmalloc
.text:00000000000044AB ; ---------------------------------------------------------------------------
.text:00000000000044AB
.text:00000000000044AB loc_44AB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000044AB                                         ; xnmalloc+17↑j
.text:00000000000044AB                 sub     rsp, 8
.text:00000000000044AF                 call    xalloc_die
.text:00000000000044AF ; } // starts at 4490
.text:00000000000044AF xnmalloc        endp
.text:00000000000044AF
.text:00000000000044AF ; ---------------------------------------------------------------------------
.text:00000000000044B4                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0
.text:00000000000044C0                 public xcharalloc
.text:00000000000044C0 xcharalloc      proc near
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 jmp     short xmalloc
.text:00000000000044C0 ; } // starts at 44C0
.text:00000000000044C0 xcharalloc      endp
.text:00000000000044C0
.text:00000000000044C0 ; ---------------------------------------------------------------------------
.text:00000000000044C2                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0 ; Attributes: info_from_lumina
.text:00000000000044D0
.text:00000000000044D0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000044D0                 public xrealloc
.text:00000000000044D0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000044D0                                         ; quotearg_n_options+182↑p ...
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 test    rsi, rsi
.text:00000000000044D3                 push    rbx
.text:00000000000044D4                 mov     rbx, rsi
.text:00000000000044D7                 jnz     short loc_44DE
.text:00000000000044D9                 test    rdi, rdi
.text:00000000000044DC                 jnz     short loc_44F8
.text:00000000000044DE
.text:00000000000044DE loc_44DE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000044DE                 mov     rsi, rbx        ; size
.text:00000000000044E1                 call    _realloc
.text:00000000000044E6                 test    rax, rax
.text:00000000000044E9                 jnz     short loc_44F0
.text:00000000000044EB                 test    rbx, rbx
.text:00000000000044EE                 jnz     short loc_4501
.text:00000000000044F0
.text:00000000000044F0 loc_44F0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000044F0                 pop     rbx
.text:00000000000044F1                 retn
.text:00000000000044F1 ; ---------------------------------------------------------------------------
.text:00000000000044F2                 align 8
.text:00000000000044F8
.text:00000000000044F8 loc_44F8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000044F8                 call    _free
.text:00000000000044FD                 xor     eax, eax
.text:00000000000044FF                 pop     rbx
.text:0000000000004500                 retn
.text:0000000000004501 ; ---------------------------------------------------------------------------
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004501                 call    xalloc_die
.text:0000000000004501 ; } // starts at 44D0
.text:0000000000004501 xrealloc        endp
.text:0000000000004501
.text:0000000000004501 ; ---------------------------------------------------------------------------
.text:0000000000004506                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004510                 public xnrealloc
.text:0000000000004510 xnrealloc       proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 mov     rax, rsi
.text:0000000000004513                 mul     rdx
.text:0000000000004516                 mov     rsi, rax
.text:0000000000004519                 seto    al
.text:000000000000451C                 test    rsi, rsi
.text:000000000000451F                 js      short loc_452B
.text:0000000000004521                 movzx   eax, al
.text:0000000000004524                 test    rax, rax
.text:0000000000004527                 jnz     short loc_452B
.text:0000000000004529                 jmp     short xrealloc
.text:000000000000452B ; ---------------------------------------------------------------------------
.text:000000000000452B
.text:000000000000452B loc_452B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000452B                                         ; xnrealloc+17↑j
.text:000000000000452B                 sub     rsp, 8
.text:000000000000452F                 call    xalloc_die
.text:000000000000452F ; } // starts at 4510
.text:000000000000452F xnrealloc       endp
.text:000000000000452F
.text:000000000000452F ; ---------------------------------------------------------------------------
.text:0000000000004534                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540 ; Attributes: info_from_lumina
.text:0000000000004540
.text:0000000000004540 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004540                 public x2nrealloc
.text:0000000000004540 x2nrealloc      proc near
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 test    rdi, rdi
.text:0000000000004543                 mov     r9, rdx
.text:0000000000004546                 mov     rcx, [rsi]
.text:0000000000004549                 jz      short loc_4580
.text:000000000000454B                 xor     edx, edx
.text:000000000000454D                 mov     rax, 5555555555555554h
.text:0000000000004557                 div     r9
.text:000000000000455A                 cmp     rax, rcx
.text:000000000000455D                 jbe     short loc_459B
.text:000000000000455F                 mov     rax, rcx
.text:0000000000004562                 shr     rax, 1
.text:0000000000004565                 lea     rcx, [rax+rcx+1]
.text:000000000000456A
.text:000000000000456A loc_456A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000456A                 mov     [rsi], rcx
.text:000000000000456D                 imul    rcx, r9
.text:0000000000004571                 mov     rsi, rcx
.text:0000000000004574                 jmp     xrealloc
.text:0000000000004574 ; ---------------------------------------------------------------------------
.text:0000000000004579                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004580                 test    rcx, rcx
.text:0000000000004583                 jz      short loc_45A8
.text:0000000000004585
.text:0000000000004585 loc_4585:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004585                 mov     rax, rcx
.text:0000000000004588                 mul     r9
.text:000000000000458B                 seto    dl
.text:000000000000458E                 test    rax, rax
.text:0000000000004591                 movzx   edx, dl
.text:0000000000004594                 js      short loc_459B
.text:0000000000004596                 test    rdx, rdx
.text:0000000000004599                 jz      short loc_456A
.text:000000000000459B
.text:000000000000459B loc_459B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000459B                                         ; x2nrealloc+54↑j
.text:000000000000459B                 sub     rsp, 8
.text:000000000000459F                 call    xalloc_die
.text:000000000000459F ; ---------------------------------------------------------------------------
.text:00000000000045A4                 align 8
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000045A8                 xor     edx, edx
.text:00000000000045AA                 mov     eax, 80h
.text:00000000000045AF                 xor     r8d, r8d
.text:00000000000045B2                 div     r9
.text:00000000000045B5                 test    rax, rax
.text:00000000000045B8                 setz    r8b
.text:00000000000045BC                 lea     rcx, [r8+rax]
.text:00000000000045C0                 jmp     short loc_4585
.text:00000000000045C0 ; } // starts at 4540
.text:00000000000045C0 x2nrealloc      endp
.text:00000000000045C0
.text:00000000000045C0 ; ---------------------------------------------------------------------------
.text:00000000000045C2                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000045D0                 public x2realloc
.text:00000000000045D0 x2realloc       proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 test    rdi, rdi
.text:00000000000045D3                 mov     rax, [rsi]
.text:00000000000045D6                 jz      short loc_4600
.text:00000000000045D8                 mov     rdx, 5555555555555553h
.text:00000000000045E2                 cmp     rax, rdx
.text:00000000000045E5                 ja      short loc_4611
.text:00000000000045E7                 mov     rdx, rax
.text:00000000000045EA                 shr     rdx, 1
.text:00000000000045ED                 lea     rax, [rdx+rax+1]
.text:00000000000045F2
.text:00000000000045F2 loc_45F2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000045F2                 mov     [rsi], rax
.text:00000000000045F5                 mov     rsi, rax
.text:00000000000045F8                 jmp     xrealloc
.text:00000000000045F8 ; ---------------------------------------------------------------------------
.text:00000000000045FD                 align 20h
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004600                 test    rax, rax
.text:0000000000004603                 mov     edx, 80h
.text:0000000000004608                 cmovz   rax, rdx
.text:000000000000460C                 test    rax, rax
.text:000000000000460F                 jns     short loc_45F2
.text:0000000000004611
.text:0000000000004611 loc_4611:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004611                 sub     rsp, 8
.text:0000000000004615                 call    xalloc_die
.text:0000000000004615 ; } // starts at 45D0
.text:0000000000004615 x2realloc       endp
.text:0000000000004615
.text:0000000000004615 ; ---------------------------------------------------------------------------
.text:000000000000461A                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620
.text:0000000000004620 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004620                 public xzalloc
.text:0000000000004620 xzalloc         proc near
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 push    rbx
.text:0000000000004621                 mov     rbx, rdi
.text:0000000000004624                 call    xmalloc
.text:0000000000004629                 mov     rdx, rbx        ; n
.text:000000000000462C                 xor     esi, esi        ; c
.text:000000000000462E                 mov     rdi, rax        ; s
.text:0000000000004631                 pop     rbx
.text:0000000000004632                 jmp     _memset
.text:0000000000004632 ; } // starts at 4620
.text:0000000000004632 xzalloc         endp
.text:0000000000004632
.text:0000000000004632 ; ---------------------------------------------------------------------------
.text:0000000000004637                 align 20h
.text:0000000000004640
.text:0000000000004640 ; =============== S U B R O U T I N E =======================================
.text:0000000000004640
.text:0000000000004640 ; Attributes: info_from_lumina
.text:0000000000004640
.text:0000000000004640 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004640                 public xcalloc
.text:0000000000004640 xcalloc         proc near
.text:0000000000004640 ; __unwind {
.text:0000000000004640                 mov     rax, rdi
.text:0000000000004643                 sub     rsp, 8
.text:0000000000004647                 mul     rsi
.text:000000000000464A                 seto    dl
.text:000000000000464D                 test    rax, rax
.text:0000000000004650                 js      short loc_4669
.text:0000000000004652                 movzx   edx, dl
.text:0000000000004655                 test    rdx, rdx
.text:0000000000004658                 jnz     short loc_4669
.text:000000000000465A                 call    _calloc
.text:000000000000465F                 test    rax, rax
.text:0000000000004662                 jz      short loc_4669
.text:0000000000004664                 add     rsp, 8
.text:0000000000004668                 retn
.text:0000000000004669 ; ---------------------------------------------------------------------------
.text:0000000000004669
.text:0000000000004669 loc_4669:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004669                                         ; xcalloc+18↑j ...
.text:0000000000004669                 call    xalloc_die
.text:0000000000004669 ; } // starts at 4640
.text:0000000000004669 xcalloc         endp
.text:0000000000004669
.text:0000000000004669 ; ---------------------------------------------------------------------------
.text:000000000000466E                 align 10h
.text:0000000000004670
.text:0000000000004670 ; =============== S U B R O U T I N E =======================================
.text:0000000000004670
.text:0000000000004670 ; Attributes: info_from_lumina
.text:0000000000004670
.text:0000000000004670 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004670                 public xmemdup
.text:0000000000004670 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004670                                         ; xstrdup+11↓j
.text:0000000000004670 ; __unwind {
.text:0000000000004670                 push    rbp
.text:0000000000004671                 push    rbx
.text:0000000000004672                 mov     rbp, rdi
.text:0000000000004675                 mov     rdi, rsi
.text:0000000000004678                 mov     rbx, rsi
.text:000000000000467B                 sub     rsp, 8
.text:000000000000467F                 call    xmalloc
.text:0000000000004684                 add     rsp, 8
.text:0000000000004688                 mov     rdx, rbx        ; n
.text:000000000000468B                 mov     rsi, rbp        ; src
.text:000000000000468E                 pop     rbx
.text:000000000000468F                 pop     rbp
.text:0000000000004690                 mov     rdi, rax        ; dest
.text:0000000000004693                 jmp     _memcpy
.text:0000000000004693 ; } // starts at 4670
.text:0000000000004693 xmemdup         endp
.text:0000000000004693
.text:0000000000004693 ; ---------------------------------------------------------------------------
.text:0000000000004698                 align 20h
.text:00000000000046A0
.text:00000000000046A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046A0
.text:00000000000046A0
.text:00000000000046A0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000046A0                 public xstrdup
.text:00000000000046A0 xstrdup         proc near
.text:00000000000046A0 ; __unwind {
.text:00000000000046A0                 push    rbx
.text:00000000000046A1                 mov     rbx, rdi
.text:00000000000046A4                 call    _strlen
.text:00000000000046A9                 mov     rdi, rbx        ; src
.text:00000000000046AC                 lea     rsi, [rax+1]    ; n
.text:00000000000046B0                 pop     rbx
.text:00000000000046B1                 jmp     short xmemdup
.text:00000000000046B1 ; } // starts at 46A0
.text:00000000000046B1 xstrdup         endp
.text:00000000000046B1
.text:00000000000046B1 ; ---------------------------------------------------------------------------
.text:00000000000046B3                 align 20h
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0 ; Attributes: noreturn info_from_lumina
.text:00000000000046C0
.text:00000000000046C0 ; void __cdecl xalloc_die()
.text:00000000000046C0                 public xalloc_die
.text:00000000000046C0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3696↑p
.text:00000000000046C0                                         ; xmalloc:loc_4485↑p ...
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000046C7                 sub     rsp, 8
.text:00000000000046CB                 mov     edx, 5          ; category
.text:00000000000046D0                 xor     edi, edi        ; domainname
.text:00000000000046D2                 call    _dcgettext
.text:00000000000046D7                 mov     edi, cs:exit_failure ; status
.text:00000000000046DD                 lea     rdx, format+4   ; format
.text:00000000000046E4                 mov     rcx, rax
.text:00000000000046E7                 xor     esi, esi        ; errnum
.text:00000000000046E9                 xor     eax, eax
.text:00000000000046EB                 call    _error
.text:00000000000046F0                 call    _abort
.text:00000000000046F0 ; } // starts at 46C0
.text:00000000000046F0 xalloc_die      endp
.text:00000000000046F0
.text:00000000000046F0 ; ---------------------------------------------------------------------------
.text:00000000000046F5                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700
.text:0000000000004700                 public rpl_mbrlen
.text:0000000000004700 rpl_mbrlen      proc near               ; CODE XREF: main+46F↑p
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 lea     rax, internal_state
.text:0000000000004707                 test    rdx, rdx
.text:000000000000470A                 cmovz   rdx, rax
.text:000000000000470E                 mov     rcx, rdx
.text:0000000000004711                 mov     rdx, rsi
.text:0000000000004714                 mov     rsi, rdi
.text:0000000000004717                 xor     edi, edi
.text:0000000000004719                 jmp     rpl_mbrtowc
.text:0000000000004719 ; } // starts at 4700
.text:0000000000004719 rpl_mbrlen      endp
.text:0000000000004719
.text:0000000000004719 ; ---------------------------------------------------------------------------
.text:000000000000471E                 align 20h
.text:0000000000004720
.text:0000000000004720 ; =============== S U B R O U T I N E =======================================
.text:0000000000004720
.text:0000000000004720 ; Attributes: info_from_lumina
.text:0000000000004720
.text:0000000000004720 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004720                 public rpl_mbrtowc
.text:0000000000004720 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004720                                         ; rpl_mbrlen+19↑j
.text:0000000000004720
.text:0000000000004720 pwc             = dword ptr -34h
.text:0000000000004720 var_30          = qword ptr -30h
.text:0000000000004720
.text:0000000000004720 ; __unwind {
.text:0000000000004720                 push    r13
.text:0000000000004722                 push    r12
.text:0000000000004724                 mov     r13, rsi
.text:0000000000004727                 push    rbp
.text:0000000000004728                 push    rbx
.text:0000000000004729                 mov     rbx, rdi
.text:000000000000472C                 mov     r12, rdx
.text:000000000000472F                 sub     rsp, 18h
.text:0000000000004733                 mov     rax, fs:28h
.text:000000000000473C                 mov     [rsp+38h+var_30], rax
.text:0000000000004741                 xor     eax, eax
.text:0000000000004743                 lea     rax, [rsp+38h+pwc]
.text:0000000000004748                 test    rdi, rdi
.text:000000000000474B                 cmovz   rbx, rax
.text:000000000000474F                 mov     rdi, rbx        ; pwc
.text:0000000000004752                 call    _mbrtowc
.text:0000000000004757                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000475B                 mov     rbp, rax
.text:000000000000475E                 jbe     short loc_4780
.text:0000000000004760                 test    r12, r12
.text:0000000000004763                 jz      short loc_4780
.text:0000000000004765                 xor     edi, edi
.text:0000000000004767                 call    hard_locale
.text:000000000000476C                 test    al, al
.text:000000000000476E                 jnz     short loc_4780
.text:0000000000004770                 movzx   eax, byte ptr [r13+0]
.text:0000000000004775                 mov     ebp, 1
.text:000000000000477A                 mov     [rbx], eax
.text:000000000000477C                 nop     dword ptr [rax+00h]
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004780                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004780                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004785                 xor     rdx, fs:28h
.text:000000000000478E                 mov     rax, rbp
.text:0000000000004791                 jnz     short loc_479E
.text:0000000000004793                 add     rsp, 18h
.text:0000000000004797                 pop     rbx
.text:0000000000004798                 pop     rbp
.text:0000000000004799                 pop     r12
.text:000000000000479B                 pop     r13
.text:000000000000479D                 retn
.text:000000000000479E ; ---------------------------------------------------------------------------
.text:000000000000479E
.text:000000000000479E loc_479E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000479E                 call    ___stack_chk_fail
.text:000000000000479E ; } // starts at 4720
.text:000000000000479E rpl_mbrtowc     endp
.text:000000000000479E
.text:000000000000479E ; ---------------------------------------------------------------------------
.text:00000000000047A3                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000047B0                 public close_stream
.text:00000000000047B0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000047B0                                         ; close_stdout+33↑p
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 push    r12
.text:00000000000047B2                 push    rbp
.text:00000000000047B3                 mov     rbp, rdi
.text:00000000000047B6                 push    rbx
.text:00000000000047B7                 call    ___fpending
.text:00000000000047BC                 mov     ebx, [rbp+0]
.text:00000000000047BF                 mov     rdi, rbp        ; stream
.text:00000000000047C2                 mov     r12, rax
.text:00000000000047C5                 call    rpl_fclose
.text:00000000000047CA                 and     ebx, 20h
.text:00000000000047CD                 test    ebx, ebx
.text:00000000000047CF                 jnz     short loc_47E8
.text:00000000000047D1                 test    eax, eax
.text:00000000000047D3                 jz      short loc_47DF
.text:00000000000047D5                 test    r12, r12
.text:00000000000047D8                 mov     eax, 0FFFFFFFFh
.text:00000000000047DD                 jz      short loc_4818
.text:00000000000047DF
.text:00000000000047DF loc_47DF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000047DF                 pop     rbx
.text:00000000000047E0                 pop     rbp
.text:00000000000047E1                 pop     r12
.text:00000000000047E3                 retn
.text:00000000000047E3 ; ---------------------------------------------------------------------------
.text:00000000000047E4                 align 8
.text:00000000000047E8
.text:00000000000047E8 loc_47E8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000047E8                 test    eax, eax
.text:00000000000047EA                 jnz     short loc_4808
.text:00000000000047EC                 call    ___errno_location
.text:00000000000047F1                 mov     dword ptr [rax], 0
.text:00000000000047F7                 mov     eax, 0FFFFFFFFh
.text:00000000000047FC                 pop     rbx
.text:00000000000047FD                 pop     rbp
.text:00000000000047FE                 pop     r12
.text:0000000000004800                 retn
.text:0000000000004800 ; ---------------------------------------------------------------------------
.text:0000000000004801                 align 8
.text:0000000000004808
.text:0000000000004808 loc_4808:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004808                 pop     rbx
.text:0000000000004809                 mov     eax, 0FFFFFFFFh
.text:000000000000480E                 pop     rbp
.text:000000000000480F                 pop     r12
.text:0000000000004811                 retn
.text:0000000000004811 ; ---------------------------------------------------------------------------
.text:0000000000004812                 align 8
.text:0000000000004818
.text:0000000000004818 loc_4818:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004818                 call    ___errno_location
.text:000000000000481D                 cmp     dword ptr [rax], 9
.text:0000000000004820                 pop     rbx
.text:0000000000004821                 pop     rbp
.text:0000000000004822                 pop     r12
.text:0000000000004824                 setnz   al
.text:0000000000004827                 movzx   eax, al
.text:000000000000482A                 neg     eax
.text:000000000000482C                 retn
.text:000000000000482C ; } // starts at 47B0
.text:000000000000482C close_stream    endp
.text:000000000000482C
.text:000000000000482C ; ---------------------------------------------------------------------------
.text:000000000000482D                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830
.text:0000000000004830                 public hard_locale
.text:0000000000004830 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 sub     rsp, 8
.text:0000000000004834                 xor     esi, esi        ; locale
.text:0000000000004836                 call    _setlocale
.text:000000000000483B                 mov     rdx, rax
.text:000000000000483E                 mov     eax, 1
.text:0000000000004843                 test    rdx, rdx
.text:0000000000004846                 jz      short loc_4865
.text:0000000000004848                 lea     rdi, aC         ; "C"
.text:000000000000484F                 mov     ecx, 2
.text:0000000000004854                 mov     rsi, rdx
.text:0000000000004857                 repe cmpsb
.text:0000000000004859                 setnbe  cl
.text:000000000000485C                 sbb     cl, 0
.text:000000000000485F                 xor     eax, eax
.text:0000000000004861                 test    cl, cl
.text:0000000000004863                 jnz     short loc_4870
.text:0000000000004865
.text:0000000000004865 loc_4865:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004865                 add     rsp, 8
.text:0000000000004869                 retn
.text:0000000000004869 ; ---------------------------------------------------------------------------
.text:000000000000486A                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004870                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004877                 mov     ecx, 6
.text:000000000000487C                 mov     rsi, rdx
.text:000000000000487F                 repe cmpsb
.text:0000000000004881                 setnbe  al
.text:0000000000004884                 sbb     al, 0
.text:0000000000004886                 test    al, al
.text:0000000000004888                 setnz   al
.text:000000000000488B                 add     rsp, 8
.text:000000000000488F                 retn
.text:000000000000488F ; } // starts at 4830
.text:000000000000488F hard_locale     endp
.text:000000000000488F
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890
.text:0000000000004890                 public locale_charset
.text:0000000000004890 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 sub     rsp, 8
.text:0000000000004894                 mov     edi, 0Eh        ; item
.text:0000000000004899                 call    _nl_langinfo
.text:000000000000489E                 test    rax, rax
.text:00000000000048A1                 jz      short loc_48C0
.text:00000000000048A3                 cmp     byte ptr [rax], 0
.text:00000000000048A6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000048AD                 cmovz   rax, rdx
.text:00000000000048B1                 add     rsp, 8
.text:00000000000048B5                 retn
.text:00000000000048B5 ; ---------------------------------------------------------------------------
.text:00000000000048B6                 align 20h
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000048C0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000048C7                 add     rsp, 8
.text:00000000000048CB                 retn
.text:00000000000048CB ; } // starts at 4890
.text:00000000000048CB locale_charset  endp
.text:00000000000048CB
.text:00000000000048CB ; ---------------------------------------------------------------------------
.text:00000000000048CC                 align 10h
.text:00000000000048D0
.text:00000000000048D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048D0
.text:00000000000048D0 ; Attributes: info_from_lumina
.text:00000000000048D0
.text:00000000000048D0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000048D0                 public rpl_fclose
.text:00000000000048D0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000048D0 ; __unwind {
.text:00000000000048D0                 push    r12
.text:00000000000048D2                 push    rbp
.text:00000000000048D3                 push    rbx
.text:00000000000048D4                 mov     rbx, rdi
.text:00000000000048D7                 call    _fileno
.text:00000000000048DC                 test    eax, eax
.text:00000000000048DE                 mov     rdi, rbx        ; fp
.text:00000000000048E1                 js      short loc_4937
.text:00000000000048E3                 call    ___freading
.text:00000000000048E8                 test    eax, eax
.text:00000000000048EA                 jnz     short loc_4918
.text:00000000000048EC
.text:00000000000048EC loc_48EC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000048EC                 mov     rdi, rbx        ; stream
.text:00000000000048EF                 call    rpl_fflush
.text:00000000000048F4                 test    eax, eax
.text:00000000000048F6                 jz      short loc_4934
.text:00000000000048F8                 call    ___errno_location
.text:00000000000048FD                 mov     r12d, [rax]
.text:0000000000004900                 mov     rdi, rbx        ; stream
.text:0000000000004903                 mov     rbp, rax
.text:0000000000004906                 call    _fclose
.text:000000000000490B                 test    r12d, r12d
.text:000000000000490E                 jnz     short loc_4940
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004910                 pop     rbx
.text:0000000000004911                 pop     rbp
.text:0000000000004912                 pop     r12
.text:0000000000004914                 retn
.text:0000000000004914 ; ---------------------------------------------------------------------------
.text:0000000000004915                 align 8
.text:0000000000004918
.text:0000000000004918 loc_4918:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004918                 mov     rdi, rbx        ; stream
.text:000000000000491B                 call    _fileno
.text:0000000000004920                 xor     esi, esi        ; offset
.text:0000000000004922                 mov     edx, 1          ; whence
.text:0000000000004927                 mov     edi, eax        ; fd
.text:0000000000004929                 call    _lseek
.text:000000000000492E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004932                 jnz     short loc_48EC
.text:0000000000004934
.text:0000000000004934 loc_4934:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004934                 mov     rdi, rbx        ; stream
.text:0000000000004937
.text:0000000000004937 loc_4937:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004937                 pop     rbx
.text:0000000000004938                 pop     rbp
.text:0000000000004939                 pop     r12
.text:000000000000493B                 jmp     _fclose
.text:0000000000004940 ; ---------------------------------------------------------------------------
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004940                 mov     [rbp+0], r12d
.text:0000000000004944                 mov     eax, 0FFFFFFFFh
.text:0000000000004949                 jmp     short loc_4910
.text:0000000000004949 ; } // starts at 48D0
.text:0000000000004949 rpl_fclose      endp
.text:0000000000004949
.text:0000000000004949 ; ---------------------------------------------------------------------------
.text:000000000000494B                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950 ; Attributes: info_from_lumina
.text:0000000000004950
.text:0000000000004950 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004950                 public rpl_fflush
.text:0000000000004950 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 test    rdi, rdi
.text:0000000000004953                 push    rbx
.text:0000000000004954                 mov     rbx, rdi
.text:0000000000004957                 jz      short loc_496A
.text:0000000000004959                 call    ___freading
.text:000000000000495E                 test    eax, eax
.text:0000000000004960                 jz      short loc_496A
.text:0000000000004962                 test    dword ptr [rbx], 100h
.text:0000000000004968                 jnz     short loc_4978
.text:000000000000496A
.text:000000000000496A loc_496A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000496A                                         ; rpl_fflush+10↑j
.text:000000000000496A                 mov     rdi, rbx        ; stream
.text:000000000000496D                 pop     rbx
.text:000000000000496E                 jmp     _fflush
.text:000000000000496E ; ---------------------------------------------------------------------------
.text:0000000000004973                 align 8
.text:0000000000004978
.text:0000000000004978 loc_4978:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004978                 mov     rdi, rbx
.text:000000000000497B                 mov     edx, 1
.text:0000000000004980                 xor     esi, esi
.text:0000000000004982                 call    rpl_fseeko
.text:0000000000004987                 mov     rdi, rbx        ; stream
.text:000000000000498A                 pop     rbx
.text:000000000000498B                 jmp     _fflush
.text:000000000000498B ; } // starts at 4950
.text:000000000000498B rpl_fflush      endp
.text:000000000000498B
.text:0000000000004990
.text:0000000000004990 ; =============== S U B R O U T I N E =======================================
.text:0000000000004990
.text:0000000000004990 ; Attributes: info_from_lumina
.text:0000000000004990
.text:0000000000004990 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004990                 public rpl_fseeko
.text:0000000000004990 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004990 ; __unwind {
.text:0000000000004990                 mov     rax, [rdi+8]
.text:0000000000004994                 cmp     [rdi+10h], rax
.text:0000000000004998                 jz      short loc_49A0
.text:000000000000499A
.text:000000000000499A loc_499A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000499A                                         ; rpl_fseeko+1F↓j
.text:000000000000499A                 jmp     _fseeko
.text:000000000000499A ; ---------------------------------------------------------------------------
.text:000000000000499F                 align 20h
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000049A0                 mov     rax, [rdi+20h]
.text:00000000000049A4                 cmp     [rdi+28h], rax
.text:00000000000049A8                 jnz     short loc_499A
.text:00000000000049AA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000049AF                 jnz     short loc_499A
.text:00000000000049B1                 push    r12
.text:00000000000049B3                 push    rbp
.text:00000000000049B4                 mov     r12d, edx
.text:00000000000049B7                 push    rbx
.text:00000000000049B8                 mov     rbp, rsi
.text:00000000000049BB                 mov     rbx, rdi
.text:00000000000049BE                 call    _fileno
.text:00000000000049C3                 mov     edx, r12d       ; whence
.text:00000000000049C6                 mov     rsi, rbp        ; offset
.text:00000000000049C9                 mov     edi, eax        ; fd
.text:00000000000049CB                 call    _lseek
.text:00000000000049D0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000049D4                 jz      short loc_49E2
.text:00000000000049D6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000049D9                 mov     [rbx+90h], rax
.text:00000000000049E0                 xor     eax, eax
.text:00000000000049E2
.text:00000000000049E2 loc_49E2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000049E2                 pop     rbx
.text:00000000000049E3                 pop     rbp
.text:00000000000049E4                 pop     r12
.text:00000000000049E6                 retn
.text:00000000000049E6 ; } // starts at 4990
.text:00000000000049E6 rpl_fseeko      endp
.text:00000000000049E6
.text:00000000000049E6 ; ---------------------------------------------------------------------------
.text:00000000000049E7                 align 10h
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0 ; Attributes: info_from_lumina
.text:00000000000049F0
.text:00000000000049F0 ; void _libc_csu_init(void)
.text:00000000000049F0                 public __libc_csu_init
.text:00000000000049F0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 push    r15
.text:00000000000049F2                 push    r14
.text:00000000000049F4                 mov     r15, rdx
.text:00000000000049F7                 push    r13
.text:00000000000049F9                 push    r12
.text:00000000000049FB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004A02                 push    rbp
.text:0000000000004A03                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004A0A                 push    rbx
.text:0000000000004A0B                 mov     r13d, edi
.text:0000000000004A0E                 mov     r14, rsi
.text:0000000000004A11                 sub     rbp, r12
.text:0000000000004A14                 sub     rsp, 8
.text:0000000000004A18                 sar     rbp, 3
.text:0000000000004A1C                 call    _init_proc
.text:0000000000004A21                 test    rbp, rbp
.text:0000000000004A24                 jz      short loc_4A46
.text:0000000000004A26                 xor     ebx, ebx
.text:0000000000004A28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004A30
.text:0000000000004A30 loc_4A30:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004A30                 mov     rdx, r15
.text:0000000000004A33                 mov     rsi, r14
.text:0000000000004A36                 mov     edi, r13d
.text:0000000000004A39                 call    ds:(__frame_dummy_init_array_entry - 206B90h)[r12+rbx*8]
.text:0000000000004A3D                 add     rbx, 1
.text:0000000000004A41                 cmp     rbp, rbx
.text:0000000000004A44                 jnz     short loc_4A30
.text:0000000000004A46
.text:0000000000004A46 loc_4A46:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004A46                 add     rsp, 8
.text:0000000000004A4A                 pop     rbx
.text:0000000000004A4B                 pop     rbp
.text:0000000000004A4C                 pop     r12
.text:0000000000004A4E                 pop     r13
.text:0000000000004A50                 pop     r14
.text:0000000000004A52                 pop     r15
.text:0000000000004A54                 retn
.text:0000000000004A54 ; } // starts at 49F0
.text:0000000000004A54 __libc_csu_init endp
.text:0000000000004A54
.text:0000000000004A54 ; ---------------------------------------------------------------------------
.text:0000000000004A55                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60 ; void _libc_csu_fini(void)
.text:0000000000004A60                 public __libc_csu_fini
.text:0000000000004A60 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 rep retn
.text:0000000000004A60 ; } // starts at 4A60
.text:0000000000004A60 __libc_csu_fini endp
.text:0000000000004A60
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A62                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70 atexit          proc near               ; CODE XREF: main+6C↑p
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004A77                 xor     esi, esi        ; obj
.text:0000000000004A79                 jmp     ___cxa_atexit
.text:0000000000004A79 ; } // starts at 4A70
.text:0000000000004A79 atexit          endp
.text:0000000000004A79
.text:0000000000004A79 _text           ends
.text:0000000000004A79
LOAD:0000000000004A7E ; ===========================================================================
LOAD:0000000000004A7E
LOAD:0000000000004A7E ; Segment type: Pure code
LOAD:0000000000004A7E ; Segment permissions: Read/Execute
LOAD:0000000000004A7E LOAD            segment byte public 'CODE' use64
LOAD:0000000000004A7E                 assume cs:LOAD
LOAD:0000000000004A7E                 ;org 4A7Eh
LOAD:0000000000004A7E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004A7E                 align 20h
LOAD:0000000000004A7E LOAD            ends
LOAD:0000000000004A7E
.fini:0000000000004A80 ; ===========================================================================
.fini:0000000000004A80
.fini:0000000000004A80 ; Segment type: Pure code
.fini:0000000000004A80 ; Segment permissions: Read/Execute
.fini:0000000000004A80 _fini           segment dword public 'CODE' use64
.fini:0000000000004A80                 assume cs:_fini
.fini:0000000000004A80                 ;org 4A80h
.fini:0000000000004A80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004A80
.fini:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004A80
.fini:0000000000004A80
.fini:0000000000004A80                 public _term_proc
.fini:0000000000004A80 _term_proc      proc near
.fini:0000000000004A80                 sub     rsp, 8          ; _fini
.fini:0000000000004A84                 add     rsp, 8
.fini:0000000000004A88                 retn
.fini:0000000000004A88 _term_proc      endp
.fini:0000000000004A88
.fini:0000000000004A88 _fini           ends
.fini:0000000000004A88
LOAD:0000000000004A89 ; ===========================================================================
LOAD:0000000000004A89
LOAD:0000000000004A89 ; Segment type: Pure code
LOAD:0000000000004A89 ; Segment permissions: Read/Execute
LOAD:0000000000004A89 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004A89                 assume cs:LOAD
LOAD:0000000000004A89                 ;org 4A89h
LOAD:0000000000004A89                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004A89                 align 20h
LOAD:0000000000004A89 LOAD            ends
LOAD:0000000000004A89
.rodata:0000000000004AA0 ; ===========================================================================
.rodata:0000000000004AA0
.rodata:0000000000004AA0 ; Segment type: Pure data
.rodata:0000000000004AA0 ; Segment permissions: Read
.rodata:0000000000004AA0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004AA0                 assume cs:_rodata
.rodata:0000000000004AA0                 ;org 4AA0h
.rodata:0000000000004AA0                 public _IO_stdin_used
.rodata:0000000000004AA0 _IO_stdin_used  db    1
.rodata:0000000000004AA1                 db    0
.rodata:0000000000004AA2                 db    2
.rodata:0000000000004AA3                 db    0
.rodata:0000000000004AA4 aPathchk        db 'pathchk',0          ; DATA XREF: main+F8↑o
.rodata:0000000000004AA4                                         ; usage+E7↑o ...
.rodata:0000000000004AAC asc_4AAC        db '[',0                ; DATA XREF: usage+F3↑o
.rodata:0000000000004AAE aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11A↑o
.rodata:0000000000004ABE aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004ABE                                         ; DATA XREF: usage+14A↑o
.rodata:0000000000004ABE                                         ; usage+244↑o ...
.rodata:0000000000004AD4 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15B↑o
.rodata:0000000000004ADE aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+167↑o
.rodata:0000000000004AED aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FA↑o
.rodata:0000000000004AF7 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+126↑o
.rodata:0000000000004B01 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13E↑o
.rodata:0000000000004B0B ; const char aSOnlineHelpS[]
.rodata:0000000000004B0B aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:0000000000004B0B                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004B22 unk_4B22        db  47h ; G             ; DATA XREF: main+F1↑o
.rodata:0000000000004B22                                         ; usage+1CE↑o ...
.rodata:0000000000004B23                 db  4Eh ; N
.rodata:0000000000004B24                 db  55h ; U
.rodata:0000000000004B25                 db  20h
.rodata:0000000000004B26 ; const char domainname[]
.rodata:0000000000004B26 domainname      db 'coreutils',0        ; DATA XREF: main+4D↑o
.rodata:0000000000004B26                                         ; main+59↑o ...
.rodata:0000000000004B30 ; const char s2[]
.rodata:0000000000004B30 s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:0000000000004B30                                         ; usage+2B6↑o
.rodata:0000000000004B34 ; const char aFullDocumentat[]
.rodata:0000000000004B34 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004B34                                         ; DATA XREF: usage:loc_1F11↑o
.rodata:0000000000004B34                                         ; usage:loc_1FCE↑o
.rodata:0000000000004B4F ; const char path[]
.rodata:0000000000004B4F path            db '.',0                ; DATA XREF: main+2B1↑o
.rodata:0000000000004B4F                                         ; main+4FE↑o
.rodata:0000000000004B51 ; const char dirname[]
.rodata:0000000000004B51 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004B51                                         ; DATA XREF: main+46↑o
.rodata:0000000000004B69 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+E2↑o
.rodata:0000000000004B79 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+E9↑o
.rodata:0000000000004B85 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+CB↑o
.rodata:0000000000004B92 ; const char shortopts[]
.rodata:0000000000004B92 shortopts       db '+pP',0              ; DATA XREF: main+7C↑o
.rodata:0000000000004B96 ; const char aMissingOperand[]
.rodata:0000000000004B96 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1BBB↑o
.rodata:0000000000004BA6 ; const char msgid[]
.rodata:0000000000004BA6 msgid           db 'empty file name',0  ; DATA XREF: main:loc_1883↑o
.rodata:0000000000004BB6 aPortability    db 'portability',0      ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000004BC2 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:0000000000004BC7 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004BCF                 align 10h
.rodata:0000000000004BD0 ; const char aTrySHelpForMor[]
.rodata:0000000000004BD0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004BD0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004BF7                 align 8
.rodata:0000000000004BF8 ; const char aUsageSOptionNa[]
.rodata:0000000000004BF8 aUsageSOptionNa db 'Usage: %s [OPTION]... NAME...',0Ah,0
.rodata:0000000000004BF8                                         ; DATA XREF: usage:loc_1D5D↑o
.rodata:0000000000004C17                 align 8
.rodata:0000000000004C18 ; const char aDiagnoseInvali[]
.rodata:0000000000004C18 aDiagnoseInvali db 'Diagnose invalid or unportable file names.',0Ah
.rodata:0000000000004C18                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004C18                 db 0Ah
.rodata:0000000000004C18                 db '  -p                  check for most POSIX systems',0Ah
.rodata:0000000000004C18                 db '  -P                  check for empty names and leading "-"',0Ah
.rodata:0000000000004C18                 db '      --portability   check for all POSIX systems (equivalent to '
.rodata:0000000000004C18                 db '-p -P)',0Ah,0
.rodata:0000000000004CFC                 align 20h
.rodata:0000000000004D00 ; const char aHelpDisplayThi[]
.rodata:0000000000004D00 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004D00                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000004D2D                 align 10h
.rodata:0000000000004D30 ; const char aVersionOutputV[]
.rodata:0000000000004D30 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004D30                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000004D66                 align 8
.rodata:0000000000004D68 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004D68                                         ; DATA XREF: usage+1C7↑o
.rodata:0000000000004D68                                         ; usage+22B↑o ...
.rodata:0000000000004D90 ; const char aReportAnyTrans[]
.rodata:0000000000004D90 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004D90                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000004D90                 db 'am/>',0Ah,0
.rodata:0000000000004DD7                 align 8
.rodata:0000000000004DD8 ; const char aOrAvailableLoc[]
.rodata:0000000000004DD8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004DD8                                         ; DATA XREF: usage:loc_1F56↑o
.rodata:0000000000004E0B                 align 10h
.rodata:0000000000004E10 ; const char aLeadingInAComp[]
.rodata:0000000000004E10 aLeadingInAComp db 'leading ',27h,'-',27h,' in a component of file name %s',0
.rodata:0000000000004E10                                         ; DATA XREF: main+389↑o
.rodata:0000000000004E3B                 align 20h
.rodata:0000000000004E40 ; const char accept[]
.rodata:0000000000004E40 accept          db '/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._'
.rodata:0000000000004E40                                         ; DATA XREF: main:loc_1769↑o
.rodata:0000000000004E40                 db '-',0
.rodata:0000000000004E83                 align 8
.rodata:0000000000004E88 ; const char aNonportableCha[]
.rodata:0000000000004E88 aNonportableCha db 'nonportable character %s in file name %s',0
.rodata:0000000000004E88                                         ; DATA XREF: main+4A9↑o
.rodata:0000000000004EB1                 align 8
.rodata:0000000000004EB8 ; const char aSUnableToDeter[]
.rodata:0000000000004EB8 aSUnableToDeter db '%s: unable to determine maximum file name length',0
.rodata:0000000000004EB8                                         ; DATA XREF: main+5E6↑o
.rodata:0000000000004EE9                 align 10h
.rodata:0000000000004EF0 ; const char aLimitLuExceede[]
.rodata:0000000000004EF0 aLimitLuExceede db 'limit %lu exceeded by length %lu of file name %s',0
.rodata:0000000000004EF0                                         ; DATA XREF: main+5A7↑o
.rodata:0000000000004F21                 align 8
.rodata:0000000000004F28 ; const char aLimitLuExceede_0[]
.rodata:0000000000004F28 aLimitLuExceede_0 db 'limit %lu exceeded by length %lu of file name component %s',0
.rodata:0000000000004F28                                         ; DATA XREF: main+63C↑o
.rodata:0000000000004F63 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004F68 ; const char aWriteError[]
.rodata:0000000000004F68 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_20B3↑o
.rodata:0000000000004F74 ; const char format[]
.rodata:0000000000004F74 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004F74                                         ; main+1A8↑o ...
.rodata:0000000000004F7B                 align 20h
.rodata:0000000000004F80 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004F80                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004FB8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004FB8                                         ; main+505↑o
.rodata:0000000000004FC0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004FC4 unk_4FC4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004FC5                 db  80h
.rodata:0000000000004FC6                 db  98h
.rodata:0000000000004FC7                 db    0
.rodata:0000000000004FC8 unk_4FC8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004FC9                 db  80h
.rodata:0000000000004FCA                 db  99h
.rodata:0000000000004FCB                 db    0
.rodata:0000000000004FCC unk_4FCC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004FCD                 db    7
.rodata:0000000000004FCE                 db  65h ; e
.rodata:0000000000004FCF                 db    0
.rodata:0000000000004FD0 unk_4FD0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004FD1                 db 0AFh
.rodata:0000000000004FD2                 db    0
.rodata:0000000000004FD3 unk_4FD3        db  22h ; "             ; DATA XREF: gettext_quote:loc_21E0↑o
.rodata:0000000000004FD3                                         ; quotearg_buffer_restyled:loc_2F9B↑o ...
.rodata:0000000000004FD4                 db    0
.rodata:0000000000004FD5 ; const char asc_4FD5[2]
.rodata:0000000000004FD5 asc_4FD5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004FD5                                         ; quotearg_buffer_restyled:loc_2363↑o ...
.rodata:0000000000004FD7 ; const char asc_4FD7[2]
.rodata:0000000000004FD7 asc_4FD7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004FD7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004FD9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004FE1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004FE7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004FF4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004FF4                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000005001 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005001                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000005015 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000005017 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:000000000000501F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000005027                 align 20h
.rodata:0000000000005040 jpt_2341        dd offset loc_30EA - 5040h
.rodata:0000000000005040                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005040                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005040                 dd offset loc_2343 - 5040h ; jump table for switch statement
.rodata:0000000000005040                 dd offset loc_3318 - 5040h
.rodata:0000000000005040                 dd offset loc_3124 - 5040h
.rodata:0000000000005040                 dd offset loc_2F14 - 5040h
.rodata:0000000000005040                 dd offset loc_2F70 - 5040h
.rodata:0000000000005040                 dd offset loc_2FC5 - 5040h
.rodata:0000000000005040                 dd offset loc_300A - 5040h
.rodata:0000000000005040                 dd offset loc_3044 - 5040h
.rodata:0000000000005040                 dd offset loc_3044 - 5040h
.rodata:0000000000005040                 dd offset loc_3044 - 5040h
.rodata:000000000000506C jpt_249E        dd offset loc_26C0 - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000506C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch ; jump table for switch statement
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset loc_2700 - 506Ch, offset loc_2608 - 506Ch
.rodata:000000000000506C                 dd offset loc_25C8 - 506Ch, offset loc_2790 - 506Ch, offset loc_2780 - 506Ch
.rodata:000000000000506C                 dd offset loc_2770 - 506Ch, offset loc_2760 - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset def_249E - 506Ch
.rodata:000000000000506C                 dd offset def_249E - 506Ch, offset def_249E - 506Ch, offset loc_2750 - 506Ch
.rodata:000000000000506C                 dd offset loc_2740 - 506Ch, offset loc_2740 - 506Ch, offset loc_2710 - 506Ch
.rodata:000000000000506C                 dd offset loc_2740 - 506Ch, offset loc_26E8 - 506Ch, offset loc_2740 - 506Ch
.rodata:000000000000506C                 dd offset loc_25A3 - 506Ch, offset loc_2740 - 506Ch, offset loc_2740 - 506Ch
.rodata:000000000000506C                 dd offset loc_2740 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_2740 - 506Ch
.rodata:000000000000506C                 dd offset loc_2740 - 506Ch, offset loc_2740 - 506Ch, offset loc_2740 - 506Ch
.rodata:000000000000506C                 dd offset loc_2573 - 506Ch, offset def_249E - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_2740 - 506Ch, offset loc_2618 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_2740 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_2740 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch, offset loc_26E8 - 506Ch
.rodata:000000000000506C                 dd offset loc_24A3 - 506Ch, offset loc_2740 - 506Ch, offset loc_24A3 - 506Ch
.rodata:000000000000506C                 dd offset loc_2710 - 506Ch
.rodata:0000000000005268 jpt_282A        dd offset loc_2890 - 5268h, offset def_282A - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005268                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset def_282A - 5268h ; jump table for switch statement
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset loc_2880 - 5268h, offset loc_29D0 - 5268h
.rodata:0000000000005268                 dd offset loc_29B8 - 5268h, offset loc_2868 - 5268h, offset loc_29A8 - 5268h
.rodata:0000000000005268                 dd offset loc_2850 - 5268h, offset loc_2990 - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset def_282A - 5268h
.rodata:0000000000005268                 dd offset def_282A - 5268h, offset def_282A - 5268h, offset loc_2978 - 5268h
.rodata:0000000000005268                 dd offset loc_2960 - 5268h, offset loc_2960 - 5268h, offset loc_2948 - 5268h
.rodata:0000000000005268                 dd offset loc_2960 - 5268h, offset loc_2930 - 5268h, offset loc_2960 - 5268h
.rodata:0000000000005268                 dd offset loc_25A0 - 5268h, offset loc_2960 - 5268h, offset loc_2960 - 5268h
.rodata:0000000000005268                 dd offset loc_2960 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2960 - 5268h
.rodata:0000000000005268                 dd offset loc_2960 - 5268h, offset loc_2960 - 5268h, offset loc_2960 - 5268h
.rodata:0000000000005268                 dd offset loc_2570 - 5268h, offset def_282A - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2960 - 5268h, offset loc_2830 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2960 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2960 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_2930 - 5268h, offset loc_2930 - 5268h, offset loc_2930 - 5268h
.rodata:0000000000005268                 dd offset loc_24A0 - 5268h, offset loc_2960 - 5268h, offset loc_24A0 - 5268h
.rodata:0000000000005268                 dd offset loc_2948 - 5268h
.rodata:0000000000005464                 align 20h
.rodata:0000000000005480                 public quoting_style_vals
.rodata:0000000000005480 quoting_style_vals db    0
.rodata:0000000000005481                 db    0
.rodata:0000000000005482                 db    0
.rodata:0000000000005483                 db    0
.rodata:0000000000005484                 db    1
.rodata:0000000000005485                 db    0
.rodata:0000000000005486                 db    0
.rodata:0000000000005487                 db    0
.rodata:0000000000005488                 db    2
.rodata:0000000000005489                 db    0
.rodata:000000000000548A                 db    0
.rodata:000000000000548B                 db    0
.rodata:000000000000548C                 db    3
.rodata:000000000000548D                 db    0
.rodata:000000000000548E                 db    0
.rodata:000000000000548F                 db    0
.rodata:0000000000005490                 db    4
.rodata:0000000000005491                 db    0
.rodata:0000000000005492                 db    0
.rodata:0000000000005493                 db    0
.rodata:0000000000005494                 db    5
.rodata:0000000000005495                 db    0
.rodata:0000000000005496                 db    0
.rodata:0000000000005497                 db    0
.rodata:0000000000005498                 db    6
.rodata:0000000000005499                 db    0
.rodata:000000000000549A                 db    0
.rodata:000000000000549B                 db    0
.rodata:000000000000549C                 db    7
.rodata:000000000000549D                 db    0
.rodata:000000000000549E                 db    0
.rodata:000000000000549F                 db    0
.rodata:00000000000054A0                 db    8
.rodata:00000000000054A1                 db    0
.rodata:00000000000054A2                 db    0
.rodata:00000000000054A3                 db    0
.rodata:00000000000054A4                 db    9
.rodata:00000000000054A5                 db    0
.rodata:00000000000054A6                 db    0
.rodata:00000000000054A7                 db    0
.rodata:00000000000054A8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000054B4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000054BB ; const char aC_0[]
.rodata:00000000000054BB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3E8C↑o
.rodata:00000000000054BF ; const char aWrittenByS[]
.rodata:00000000000054BF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000054BF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000054CF ; const char aWrittenBySAndS[]
.rodata:00000000000054CF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000054CF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000054E6 ; const char aWrittenBySSAnd[]
.rodata:00000000000054E6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000054E6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005502 ; const char aReportBugsToS[]
.rodata:0000000000005502 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005502                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005517 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005517                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000552D ; const char aSHomePageS[]
.rodata:000000000000552D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000552D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005541                 align 8
.rodata:0000000000005548 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005548 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005548                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005548                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005548                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005548                 db '.',0Ah
.rodata:0000000000005548                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005548                 db 0Ah,0
.rodata:0000000000005614                 align 8
.rodata:0000000000005618 ; const char aWrittenBySSSAn[]
.rodata:0000000000005618 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005618                                         ; DATA XREF: version_etc_arn:loc_40E0↑o
.rodata:0000000000005618                 db 'and %s.',0Ah,0
.rodata:0000000000005638 ; const char aWrittenBySSSSA[]
.rodata:0000000000005638 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005638                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005638                 db '%s, and %s.',0Ah,0
.rodata:000000000000565C                 align 20h
.rodata:0000000000005660 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005660 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005660                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005660                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005688 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005688 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005688                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005688                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000056B4                 align 8
.rodata:00000000000056B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000056B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000056B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000056B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000056B8                 db 'and %s.',0Ah,0
.rodata:00000000000056E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000056E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000056E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000056E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000056E8                 db '%s, and %s.',0Ah,0
.rodata:000000000000571C                 align 20h
.rodata:0000000000005720 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005720                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005720                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005720                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000575C                 align 20h
.rodata:0000000000005760 ; const char aGeneralHelpUsi[]
.rodata:0000000000005760 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005760                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005760                 db 0
.rodata:00000000000057A1                 align 8
.rodata:00000000000057A8 jpt_3EF4        dd offset loc_3F76 - 57A8h
.rodata:00000000000057A8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000057A8                                         ; version_etc_arn+9D↑r
.rodata:00000000000057A8                 dd offset loc_4008 - 57A8h ; jump table for switch statement
.rodata:00000000000057A8                 dd offset loc_4048 - 57A8h
.rodata:00000000000057A8                 dd offset loc_4090 - 57A8h
.rodata:00000000000057A8                 dd offset loc_40E0 - 57A8h
.rodata:00000000000057A8                 dd offset loc_4138 - 57A8h
.rodata:00000000000057A8                 dd offset loc_4168 - 57A8h
.rodata:00000000000057A8                 dd offset loc_41D0 - 57A8h
.rodata:00000000000057A8                 dd offset loc_3F00 - 57A8h
.rodata:00000000000057A8                 dd offset loc_3FB0 - 57A8h
.rodata:00000000000057D0                 align 20h
.rodata:00000000000057E0                 public version_etc_copyright
.rodata:00000000000057E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000057E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000580F ; const char aMemoryExhauste[]
.rodata:000000000000580F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005820 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005822 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4870↑o
.rodata:0000000000005828 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005828                                         ; locale_charset:loc_48C0↑o
.rodata:0000000000005828 _rodata         ends
.rodata:0000000000005828
LOAD:000000000000582E ; ===========================================================================
LOAD:000000000000582E
LOAD:000000000000582E ; Segment type: Pure code
LOAD:000000000000582E ; Segment permissions: Read/Execute
LOAD:000000000000582E LOAD            segment byte public 'CODE' use64
LOAD:000000000000582E                 assume cs:LOAD
LOAD:000000000000582E                 ;org 582Eh
LOAD:000000000000582E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000582E                 align 10h
LOAD:000000000000582E LOAD            ends
LOAD:000000000000582E
.eh_frame_hdr:0000000000005830 ; ===========================================================================
.eh_frame_hdr:0000000000005830
.eh_frame_hdr:0000000000005830 ; Segment type: Pure data
.eh_frame_hdr:0000000000005830 ; Segment permissions: Read
.eh_frame_hdr:0000000000005830 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005830                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005830                 ;org 5830h
.eh_frame_hdr:0000000000005830 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005831                 db  1Bh
.eh_frame_hdr:0000000000005832                 db    3
.eh_frame_hdr:0000000000005833                 db  3Bh ; ;
.eh_frame_hdr:0000000000005834                 db  44h ; D
.eh_frame_hdr:0000000000005835                 db    2
.eh_frame_hdr:0000000000005836                 db    0
.eh_frame_hdr:0000000000005837                 db    0
.eh_frame_hdr:0000000000005838                 db  47h ; G
.eh_frame_hdr:0000000000005839                 db    0
.eh_frame_hdr:000000000000583A                 db    0
.eh_frame_hdr:000000000000583B                 db    0
.eh_frame_hdr:000000000000583C                 db  30h ; 0
.eh_frame_hdr:000000000000583D                 db 0BAh
.eh_frame_hdr:000000000000583E                 db 0FFh
.eh_frame_hdr:000000000000583F                 db 0FFh
.eh_frame_hdr:0000000000005840                 db  90h
.eh_frame_hdr:0000000000005841                 db    2
.eh_frame_hdr:0000000000005842                 db    0
.eh_frame_hdr:0000000000005843                 db    0
.eh_frame_hdr:0000000000005844                 db 0F0h
.eh_frame_hdr:0000000000005845                 db 0BCh
.eh_frame_hdr:0000000000005846                 db 0FFh
.eh_frame_hdr:0000000000005847                 db 0FFh
.eh_frame_hdr:0000000000005848                 db 0B8h
.eh_frame_hdr:0000000000005849                 db    2
.eh_frame_hdr:000000000000584A                 db    0
.eh_frame_hdr:000000000000584B                 db    0
.eh_frame_hdr:000000000000584C                 db    0
.eh_frame_hdr:000000000000584D                 db 0BDh
.eh_frame_hdr:000000000000584E                 db 0FFh
.eh_frame_hdr:000000000000584F                 db 0FFh
.eh_frame_hdr:0000000000005850                 db 0FCh
.eh_frame_hdr:0000000000005851                 db    2
.eh_frame_hdr:0000000000005852                 db    0
.eh_frame_hdr:0000000000005853                 db    0
.eh_frame_hdr:0000000000005854                 db 0C0h
.eh_frame_hdr:0000000000005855                 db 0C3h
.eh_frame_hdr:0000000000005856                 db 0FFh
.eh_frame_hdr:0000000000005857                 db 0FFh
.eh_frame_hdr:0000000000005858                 db  60h ; `
.eh_frame_hdr:0000000000005859                 db    2
.eh_frame_hdr:000000000000585A                 db    0
.eh_frame_hdr:000000000000585B                 db    0
.eh_frame_hdr:000000000000585C                 db 0D0h
.eh_frame_hdr:000000000000585D                 db 0C4h
.eh_frame_hdr:000000000000585E                 db 0FFh
.eh_frame_hdr:000000000000585F                 db 0FFh
.eh_frame_hdr:0000000000005860                 db 0D0h
.eh_frame_hdr:0000000000005861                 db    2
.eh_frame_hdr:0000000000005862                 db    0
.eh_frame_hdr:0000000000005863                 db    0
.eh_frame_hdr:0000000000005864                 db  20h
.eh_frame_hdr:0000000000005865                 db 0C8h
.eh_frame_hdr:0000000000005866                 db 0FFh
.eh_frame_hdr:0000000000005867                 db 0FFh
.eh_frame_hdr:0000000000005868                 db  58h ; X
.eh_frame_hdr:0000000000005869                 db    3
.eh_frame_hdr:000000000000586A                 db    0
.eh_frame_hdr:000000000000586B                 db    0
.eh_frame_hdr:000000000000586C                 db  30h ; 0
.eh_frame_hdr:000000000000586D                 db 0C8h
.eh_frame_hdr:000000000000586E                 db 0FFh
.eh_frame_hdr:000000000000586F                 db 0FFh
.eh_frame_hdr:0000000000005870                 db  6Ch ; l
.eh_frame_hdr:0000000000005871                 db    3
.eh_frame_hdr:0000000000005872                 db    0
.eh_frame_hdr:0000000000005873                 db    0
.eh_frame_hdr:0000000000005874                 db  40h ; @
.eh_frame_hdr:0000000000005875                 db 0C8h
.eh_frame_hdr:0000000000005876                 db 0FFh
.eh_frame_hdr:0000000000005877                 db 0FFh
.eh_frame_hdr:0000000000005878                 db  80h
.eh_frame_hdr:0000000000005879                 db    3
.eh_frame_hdr:000000000000587A                 db    0
.eh_frame_hdr:000000000000587B                 db    0
.eh_frame_hdr:000000000000587C                 db 0F0h
.eh_frame_hdr:000000000000587D                 db 0C8h
.eh_frame_hdr:000000000000587E                 db 0FFh
.eh_frame_hdr:000000000000587F                 db 0FFh
.eh_frame_hdr:0000000000005880                 db 0B0h
.eh_frame_hdr:0000000000005881                 db    3
.eh_frame_hdr:0000000000005882                 db    0
.eh_frame_hdr:0000000000005883                 db    0
.eh_frame_hdr:0000000000005884                 db  90h
.eh_frame_hdr:0000000000005885                 db 0C9h
.eh_frame_hdr:0000000000005886                 db 0FFh
.eh_frame_hdr:0000000000005887                 db 0FFh
.eh_frame_hdr:0000000000005888                 db 0D0h
.eh_frame_hdr:0000000000005889                 db    3
.eh_frame_hdr:000000000000588A                 db    0
.eh_frame_hdr:000000000000588B                 db    0
.eh_frame_hdr:000000000000588C                 db  80h
.eh_frame_hdr:000000000000588D                 db 0CAh
.eh_frame_hdr:000000000000588E                 db 0FFh
.eh_frame_hdr:000000000000588F                 db 0FFh
.eh_frame_hdr:0000000000005890                 db  14h
.eh_frame_hdr:0000000000005891                 db    4
.eh_frame_hdr:0000000000005892                 db    0
.eh_frame_hdr:0000000000005893                 db    0
.eh_frame_hdr:0000000000005894                 db 0C0h
.eh_frame_hdr:0000000000005895                 db 0DCh
.eh_frame_hdr:0000000000005896                 db 0FFh
.eh_frame_hdr:0000000000005897                 db 0FFh
.eh_frame_hdr:0000000000005898                 db  8Ch
.eh_frame_hdr:0000000000005899                 db    4
.eh_frame_hdr:000000000000589A                 db    0
.eh_frame_hdr:000000000000589B                 db    0
.eh_frame_hdr:000000000000589C                 db  70h ; p
.eh_frame_hdr:000000000000589D                 db 0DEh
.eh_frame_hdr:000000000000589E                 db 0FFh
.eh_frame_hdr:000000000000589F                 db 0FFh
.eh_frame_hdr:00000000000058A0                 db 0F8h
.eh_frame_hdr:00000000000058A1                 db    4
.eh_frame_hdr:00000000000058A2                 db    0
.eh_frame_hdr:00000000000058A3                 db    0
.eh_frame_hdr:00000000000058A4                 db 0B0h
.eh_frame_hdr:00000000000058A5                 db 0DEh
.eh_frame_hdr:00000000000058A6                 db 0FFh
.eh_frame_hdr:00000000000058A7                 db 0FFh
.eh_frame_hdr:00000000000058A8                 db  24h ; $
.eh_frame_hdr:00000000000058A9                 db    5
.eh_frame_hdr:00000000000058AA                 db    0
.eh_frame_hdr:00000000000058AB                 db    0
.eh_frame_hdr:00000000000058AC                 db 0D0h
.eh_frame_hdr:00000000000058AD                 db 0DEh
.eh_frame_hdr:00000000000058AE                 db 0FFh
.eh_frame_hdr:00000000000058AF                 db 0FFh
.eh_frame_hdr:00000000000058B0                 db  38h ; 8
.eh_frame_hdr:00000000000058B1                 db    5
.eh_frame_hdr:00000000000058B2                 db    0
.eh_frame_hdr:00000000000058B3                 db    0
.eh_frame_hdr:00000000000058B4                 db 0F0h
.eh_frame_hdr:00000000000058B5                 db 0DEh
.eh_frame_hdr:00000000000058B6                 db 0FFh
.eh_frame_hdr:00000000000058B7                 db 0FFh
.eh_frame_hdr:00000000000058B8                 db  4Ch ; L
.eh_frame_hdr:00000000000058B9                 db    5
.eh_frame_hdr:00000000000058BA                 db    0
.eh_frame_hdr:00000000000058BB                 db    0
.eh_frame_hdr:00000000000058BC                 db  30h ; 0
.eh_frame_hdr:00000000000058BD                 db 0DFh
.eh_frame_hdr:00000000000058BE                 db 0FFh
.eh_frame_hdr:00000000000058BF                 db 0FFh
.eh_frame_hdr:00000000000058C0                 db  60h ; `
.eh_frame_hdr:00000000000058C1                 db    5
.eh_frame_hdr:00000000000058C2                 db    0
.eh_frame_hdr:00000000000058C3                 db    0
.eh_frame_hdr:00000000000058C4                 db  50h ; P
.eh_frame_hdr:00000000000058C5                 db 0DFh
.eh_frame_hdr:00000000000058C6                 db 0FFh
.eh_frame_hdr:00000000000058C7                 db 0FFh
.eh_frame_hdr:00000000000058C8                 db  74h ; t
.eh_frame_hdr:00000000000058C9                 db    5
.eh_frame_hdr:00000000000058CA                 db    0
.eh_frame_hdr:00000000000058CB                 db    0
.eh_frame_hdr:00000000000058CC                 db  80h
.eh_frame_hdr:00000000000058CD                 db 0DFh
.eh_frame_hdr:00000000000058CE                 db 0FFh
.eh_frame_hdr:00000000000058CF                 db 0FFh
.eh_frame_hdr:00000000000058D0                 db  88h
.eh_frame_hdr:00000000000058D1                 db    5
.eh_frame_hdr:00000000000058D2                 db    0
.eh_frame_hdr:00000000000058D3                 db    0
.eh_frame_hdr:00000000000058D4                 db    0
.eh_frame_hdr:00000000000058D5                 db 0E0h
.eh_frame_hdr:00000000000058D6                 db 0FFh
.eh_frame_hdr:00000000000058D7                 db 0FFh
.eh_frame_hdr:00000000000058D8                 db 0DCh
.eh_frame_hdr:00000000000058D9                 db    5
.eh_frame_hdr:00000000000058DA                 db    0
.eh_frame_hdr:00000000000058DB                 db    0
.eh_frame_hdr:00000000000058DC                 db 0F0h
.eh_frame_hdr:00000000000058DD                 db 0E0h
.eh_frame_hdr:00000000000058DE                 db 0FFh
.eh_frame_hdr:00000000000058DF                 db 0FFh
.eh_frame_hdr:00000000000058E0                 db  48h ; H
.eh_frame_hdr:00000000000058E1                 db    6
.eh_frame_hdr:00000000000058E2                 db    0
.eh_frame_hdr:00000000000058E3                 db    0
.eh_frame_hdr:00000000000058E4                 db    0
.eh_frame_hdr:00000000000058E5                 db 0E1h
.eh_frame_hdr:00000000000058E6                 db 0FFh
.eh_frame_hdr:00000000000058E7                 db 0FFh
.eh_frame_hdr:00000000000058E8                 db  5Ch ; \
.eh_frame_hdr:00000000000058E9                 db    6
.eh_frame_hdr:00000000000058EA                 db    0
.eh_frame_hdr:00000000000058EB                 db    0
.eh_frame_hdr:00000000000058EC                 db 0A0h
.eh_frame_hdr:00000000000058ED                 db 0E1h
.eh_frame_hdr:00000000000058EE                 db 0FFh
.eh_frame_hdr:00000000000058EF                 db 0FFh
.eh_frame_hdr:00000000000058F0                 db  88h
.eh_frame_hdr:00000000000058F1                 db    6
.eh_frame_hdr:00000000000058F2                 db    0
.eh_frame_hdr:00000000000058F3                 db    0
.eh_frame_hdr:00000000000058F4                 db 0C0h
.eh_frame_hdr:00000000000058F5                 db 0E1h
.eh_frame_hdr:00000000000058F6                 db 0FFh
.eh_frame_hdr:00000000000058F7                 db 0FFh
.eh_frame_hdr:00000000000058F8                 db  9Ch
.eh_frame_hdr:00000000000058F9                 db    6
.eh_frame_hdr:00000000000058FA                 db    0
.eh_frame_hdr:00000000000058FB                 db    0
.eh_frame_hdr:00000000000058FC                 db 0D0h
.eh_frame_hdr:00000000000058FD                 db 0E1h
.eh_frame_hdr:00000000000058FE                 db 0FFh
.eh_frame_hdr:00000000000058FF                 db 0FFh
.eh_frame_hdr:0000000000005900                 db 0B0h
.eh_frame_hdr:0000000000005901                 db    6
.eh_frame_hdr:0000000000005902                 db    0
.eh_frame_hdr:0000000000005903                 db    0
.eh_frame_hdr:0000000000005904                 db 0F0h
.eh_frame_hdr:0000000000005905                 db 0E1h
.eh_frame_hdr:0000000000005906                 db 0FFh
.eh_frame_hdr:0000000000005907                 db 0FFh
.eh_frame_hdr:0000000000005908                 db 0C4h
.eh_frame_hdr:0000000000005909                 db    6
.eh_frame_hdr:000000000000590A                 db    0
.eh_frame_hdr:000000000000590B                 db    0
.eh_frame_hdr:000000000000590C                 db  10h
.eh_frame_hdr:000000000000590D                 db 0E2h
.eh_frame_hdr:000000000000590E                 db 0FFh
.eh_frame_hdr:000000000000590F                 db 0FFh
.eh_frame_hdr:0000000000005910                 db 0D8h
.eh_frame_hdr:0000000000005911                 db    6
.eh_frame_hdr:0000000000005912                 db    0
.eh_frame_hdr:0000000000005913                 db    0
.eh_frame_hdr:0000000000005914                 db 0A0h
.eh_frame_hdr:0000000000005915                 db 0E2h
.eh_frame_hdr:0000000000005916                 db 0FFh
.eh_frame_hdr:0000000000005917                 db 0FFh
.eh_frame_hdr:0000000000005918                 db 0F4h
.eh_frame_hdr:0000000000005919                 db    6
.eh_frame_hdr:000000000000591A                 db    0
.eh_frame_hdr:000000000000591B                 db    0
.eh_frame_hdr:000000000000591C                 db  30h ; 0
.eh_frame_hdr:000000000000591D                 db 0E3h
.eh_frame_hdr:000000000000591E                 db 0FFh
.eh_frame_hdr:000000000000591F                 db 0FFh
.eh_frame_hdr:0000000000005920                 db  10h
.eh_frame_hdr:0000000000005921                 db    7
.eh_frame_hdr:0000000000005922                 db    0
.eh_frame_hdr:0000000000005923                 db    0
.eh_frame_hdr:0000000000005924                 db  40h ; @
.eh_frame_hdr:0000000000005925                 db 0E3h
.eh_frame_hdr:0000000000005926                 db 0FFh
.eh_frame_hdr:0000000000005927                 db 0FFh
.eh_frame_hdr:0000000000005928                 db  24h ; $
.eh_frame_hdr:0000000000005929                 db    7
.eh_frame_hdr:000000000000592A                 db    0
.eh_frame_hdr:000000000000592B                 db    0
.eh_frame_hdr:000000000000592C                 db  50h ; P
.eh_frame_hdr:000000000000592D                 db 0E3h
.eh_frame_hdr:000000000000592E                 db 0FFh
.eh_frame_hdr:000000000000592F                 db 0FFh
.eh_frame_hdr:0000000000005930                 db  38h ; 8
.eh_frame_hdr:0000000000005931                 db    7
.eh_frame_hdr:0000000000005932                 db    0
.eh_frame_hdr:0000000000005933                 db    0
.eh_frame_hdr:0000000000005934                 db 0F0h
.eh_frame_hdr:0000000000005935                 db 0E3h
.eh_frame_hdr:0000000000005936                 db 0FFh
.eh_frame_hdr:0000000000005937                 db 0FFh
.eh_frame_hdr:0000000000005938                 db  54h ; T
.eh_frame_hdr:0000000000005939                 db    7
.eh_frame_hdr:000000000000593A                 db    0
.eh_frame_hdr:000000000000593B                 db    0
.eh_frame_hdr:000000000000593C                 db    0
.eh_frame_hdr:000000000000593D                 db 0E4h
.eh_frame_hdr:000000000000593E                 db 0FFh
.eh_frame_hdr:000000000000593F                 db 0FFh
.eh_frame_hdr:0000000000005940                 db  68h ; h
.eh_frame_hdr:0000000000005941                 db    7
.eh_frame_hdr:0000000000005942                 db    0
.eh_frame_hdr:0000000000005943                 db    0
.eh_frame_hdr:0000000000005944                 db  20h
.eh_frame_hdr:0000000000005945                 db 0E4h
.eh_frame_hdr:0000000000005946                 db 0FFh
.eh_frame_hdr:0000000000005947                 db 0FFh
.eh_frame_hdr:0000000000005948                 db  7Ch ; |
.eh_frame_hdr:0000000000005949                 db    7
.eh_frame_hdr:000000000000594A                 db    0
.eh_frame_hdr:000000000000594B                 db    0
.eh_frame_hdr:000000000000594C                 db  30h ; 0
.eh_frame_hdr:000000000000594D                 db 0E4h
.eh_frame_hdr:000000000000594E                 db 0FFh
.eh_frame_hdr:000000000000594F                 db 0FFh
.eh_frame_hdr:0000000000005950                 db  90h
.eh_frame_hdr:0000000000005951                 db    7
.eh_frame_hdr:0000000000005952                 db    0
.eh_frame_hdr:0000000000005953                 db    0
.eh_frame_hdr:0000000000005954                 db 0C0h
.eh_frame_hdr:0000000000005955                 db 0E4h
.eh_frame_hdr:0000000000005956                 db 0FFh
.eh_frame_hdr:0000000000005957                 db 0FFh
.eh_frame_hdr:0000000000005958                 db 0ACh
.eh_frame_hdr:0000000000005959                 db    7
.eh_frame_hdr:000000000000595A                 db    0
.eh_frame_hdr:000000000000595B                 db    0
.eh_frame_hdr:000000000000595C                 db  60h ; `
.eh_frame_hdr:000000000000595D                 db 0E5h
.eh_frame_hdr:000000000000595E                 db 0FFh
.eh_frame_hdr:000000000000595F                 db 0FFh
.eh_frame_hdr:0000000000005960                 db 0C8h
.eh_frame_hdr:0000000000005961                 db    7
.eh_frame_hdr:0000000000005962                 db    0
.eh_frame_hdr:0000000000005963                 db    0
.eh_frame_hdr:0000000000005964                 db  70h ; p
.eh_frame_hdr:0000000000005965                 db 0E5h
.eh_frame_hdr:0000000000005966                 db 0FFh
.eh_frame_hdr:0000000000005967                 db 0FFh
.eh_frame_hdr:0000000000005968                 db 0DCh
.eh_frame_hdr:0000000000005969                 db    7
.eh_frame_hdr:000000000000596A                 db    0
.eh_frame_hdr:000000000000596B                 db    0
.eh_frame_hdr:000000000000596C                 db  90h
.eh_frame_hdr:000000000000596D                 db 0E5h
.eh_frame_hdr:000000000000596E                 db 0FFh
.eh_frame_hdr:000000000000596F                 db 0FFh
.eh_frame_hdr:0000000000005970                 db 0F0h
.eh_frame_hdr:0000000000005971                 db    7
.eh_frame_hdr:0000000000005972                 db    0
.eh_frame_hdr:0000000000005973                 db    0
.eh_frame_hdr:0000000000005974                 db 0B0h
.eh_frame_hdr:0000000000005975                 db 0E5h
.eh_frame_hdr:0000000000005976                 db 0FFh
.eh_frame_hdr:0000000000005977                 db 0FFh
.eh_frame_hdr:0000000000005978                 db    4
.eh_frame_hdr:0000000000005979                 db    8
.eh_frame_hdr:000000000000597A                 db    0
.eh_frame_hdr:000000000000597B                 db    0
.eh_frame_hdr:000000000000597C                 db 0C0h
.eh_frame_hdr:000000000000597D                 db 0E5h
.eh_frame_hdr:000000000000597E                 db 0FFh
.eh_frame_hdr:000000000000597F                 db 0FFh
.eh_frame_hdr:0000000000005980                 db  18h
.eh_frame_hdr:0000000000005981                 db    8
.eh_frame_hdr:0000000000005982                 db    0
.eh_frame_hdr:0000000000005983                 db    0
.eh_frame_hdr:0000000000005984                 db 0E0h
.eh_frame_hdr:0000000000005985                 db 0E5h
.eh_frame_hdr:0000000000005986                 db 0FFh
.eh_frame_hdr:0000000000005987                 db 0FFh
.eh_frame_hdr:0000000000005988                 db  2Ch ; ,
.eh_frame_hdr:0000000000005989                 db    8
.eh_frame_hdr:000000000000598A                 db    0
.eh_frame_hdr:000000000000598B                 db    0
.eh_frame_hdr:000000000000598C                 db    0
.eh_frame_hdr:000000000000598D                 db 0E6h
.eh_frame_hdr:000000000000598E                 db 0FFh
.eh_frame_hdr:000000000000598F                 db 0FFh
.eh_frame_hdr:0000000000005990                 db  40h ; @
.eh_frame_hdr:0000000000005991                 db    8
.eh_frame_hdr:0000000000005992                 db    0
.eh_frame_hdr:0000000000005993                 db    0
.eh_frame_hdr:0000000000005994                 db  20h
.eh_frame_hdr:0000000000005995                 db 0E6h
.eh_frame_hdr:0000000000005996                 db 0FFh
.eh_frame_hdr:0000000000005997                 db 0FFh
.eh_frame_hdr:0000000000005998                 db  58h ; X
.eh_frame_hdr:0000000000005999                 db    8
.eh_frame_hdr:000000000000599A                 db    0
.eh_frame_hdr:000000000000599B                 db    0
.eh_frame_hdr:000000000000599C                 db  40h ; @
.eh_frame_hdr:000000000000599D                 db 0EAh
.eh_frame_hdr:000000000000599E                 db 0FFh
.eh_frame_hdr:000000000000599F                 db 0FFh
.eh_frame_hdr:00000000000059A0                 db  6Ch ; l
.eh_frame_hdr:00000000000059A1                 db    9
.eh_frame_hdr:00000000000059A2                 db    0
.eh_frame_hdr:00000000000059A3                 db    0
.eh_frame_hdr:00000000000059A4                 db  60h ; `
.eh_frame_hdr:00000000000059A5                 db 0EAh
.eh_frame_hdr:00000000000059A6                 db 0FFh
.eh_frame_hdr:00000000000059A7                 db 0FFh
.eh_frame_hdr:00000000000059A8                 db  80h
.eh_frame_hdr:00000000000059A9                 db    9
.eh_frame_hdr:00000000000059AA                 db    0
.eh_frame_hdr:00000000000059AB                 db    0
.eh_frame_hdr:00000000000059AC                 db 0E0h
.eh_frame_hdr:00000000000059AD                 db 0EAh
.eh_frame_hdr:00000000000059AE                 db 0FFh
.eh_frame_hdr:00000000000059AF                 db 0FFh
.eh_frame_hdr:00000000000059B0                 db  9Ch
.eh_frame_hdr:00000000000059B1                 db    9
.eh_frame_hdr:00000000000059B2                 db    0
.eh_frame_hdr:00000000000059B3                 db    0
.eh_frame_hdr:00000000000059B4                 db 0C0h
.eh_frame_hdr:00000000000059B5                 db 0EBh
.eh_frame_hdr:00000000000059B6                 db 0FFh
.eh_frame_hdr:00000000000059B7                 db 0FFh
.eh_frame_hdr:00000000000059B8                 db 0C8h
.eh_frame_hdr:00000000000059B9                 db    9
.eh_frame_hdr:00000000000059BA                 db    0
.eh_frame_hdr:00000000000059BB                 db    0
.eh_frame_hdr:00000000000059BC                 db  40h ; @
.eh_frame_hdr:00000000000059BD                 db 0ECh
.eh_frame_hdr:00000000000059BE                 db 0FFh
.eh_frame_hdr:00000000000059BF                 db 0FFh
.eh_frame_hdr:00000000000059C0                 db 0E8h
.eh_frame_hdr:00000000000059C1                 db    9
.eh_frame_hdr:00000000000059C2                 db    0
.eh_frame_hdr:00000000000059C3                 db    0
.eh_frame_hdr:00000000000059C4                 db  60h ; `
.eh_frame_hdr:00000000000059C5                 db 0ECh
.eh_frame_hdr:00000000000059C6                 db 0FFh
.eh_frame_hdr:00000000000059C7                 db 0FFh
.eh_frame_hdr:00000000000059C8                 db    4
.eh_frame_hdr:00000000000059C9                 db  0Ah
.eh_frame_hdr:00000000000059CA                 db    0
.eh_frame_hdr:00000000000059CB                 db    0
.eh_frame_hdr:00000000000059CC                 db  90h
.eh_frame_hdr:00000000000059CD                 db 0ECh
.eh_frame_hdr:00000000000059CE                 db 0FFh
.eh_frame_hdr:00000000000059CF                 db 0FFh
.eh_frame_hdr:00000000000059D0                 db  18h
.eh_frame_hdr:00000000000059D1                 db  0Ah
.eh_frame_hdr:00000000000059D2                 db    0
.eh_frame_hdr:00000000000059D3                 db    0
.eh_frame_hdr:00000000000059D4                 db 0A0h
.eh_frame_hdr:00000000000059D5                 db 0ECh
.eh_frame_hdr:00000000000059D6                 db 0FFh
.eh_frame_hdr:00000000000059D7                 db 0FFh
.eh_frame_hdr:00000000000059D8                 db  2Ch ; ,
.eh_frame_hdr:00000000000059D9                 db  0Ah
.eh_frame_hdr:00000000000059DA                 db    0
.eh_frame_hdr:00000000000059DB                 db    0
.eh_frame_hdr:00000000000059DC                 db 0E0h
.eh_frame_hdr:00000000000059DD                 db 0ECh
.eh_frame_hdr:00000000000059DE                 db 0FFh
.eh_frame_hdr:00000000000059DF                 db 0FFh
.eh_frame_hdr:00000000000059E0                 db  50h ; P
.eh_frame_hdr:00000000000059E1                 db  0Ah
.eh_frame_hdr:00000000000059E2                 db    0
.eh_frame_hdr:00000000000059E3                 db    0
.eh_frame_hdr:00000000000059E4                 db  10h
.eh_frame_hdr:00000000000059E5                 db 0EDh
.eh_frame_hdr:00000000000059E6                 db 0FFh
.eh_frame_hdr:00000000000059E7                 db 0FFh
.eh_frame_hdr:00000000000059E8                 db  64h ; d
.eh_frame_hdr:00000000000059E9                 db  0Ah
.eh_frame_hdr:00000000000059EA                 db    0
.eh_frame_hdr:00000000000059EB                 db    0
.eh_frame_hdr:00000000000059EC                 db 0A0h
.eh_frame_hdr:00000000000059ED                 db 0EDh
.eh_frame_hdr:00000000000059EE                 db 0FFh
.eh_frame_hdr:00000000000059EF                 db 0FFh
.eh_frame_hdr:00000000000059F0                 db  7Ch ; |
.eh_frame_hdr:00000000000059F1                 db  0Ah
.eh_frame_hdr:00000000000059F2                 db    0
.eh_frame_hdr:00000000000059F3                 db    0
.eh_frame_hdr:00000000000059F4                 db 0F0h
.eh_frame_hdr:00000000000059F5                 db 0EDh
.eh_frame_hdr:00000000000059F6                 db 0FFh
.eh_frame_hdr:00000000000059F7                 db 0FFh
.eh_frame_hdr:00000000000059F8                 db  94h
.eh_frame_hdr:00000000000059F9                 db  0Ah
.eh_frame_hdr:00000000000059FA                 db    0
.eh_frame_hdr:00000000000059FB                 db    0
.eh_frame_hdr:00000000000059FC                 db  10h
.eh_frame_hdr:00000000000059FD                 db 0EEh
.eh_frame_hdr:00000000000059FE                 db 0FFh
.eh_frame_hdr:00000000000059FF                 db 0FFh
.eh_frame_hdr:0000000000005A00                 db 0B0h
.eh_frame_hdr:0000000000005A01                 db  0Ah
.eh_frame_hdr:0000000000005A02                 db    0
.eh_frame_hdr:0000000000005A03                 db    0
.eh_frame_hdr:0000000000005A04                 db  40h ; @
.eh_frame_hdr:0000000000005A05                 db 0EEh
.eh_frame_hdr:0000000000005A06                 db 0FFh
.eh_frame_hdr:0000000000005A07                 db 0FFh
.eh_frame_hdr:0000000000005A08                 db 0CCh
.eh_frame_hdr:0000000000005A09                 db  0Ah
.eh_frame_hdr:0000000000005A0A                 db    0
.eh_frame_hdr:0000000000005A0B                 db    0
.eh_frame_hdr:0000000000005A0C                 db  70h ; p
.eh_frame_hdr:0000000000005A0D                 db 0EEh
.eh_frame_hdr:0000000000005A0E                 db 0FFh
.eh_frame_hdr:0000000000005A0F                 db 0FFh
.eh_frame_hdr:0000000000005A10                 db 0F4h
.eh_frame_hdr:0000000000005A11                 db  0Ah
.eh_frame_hdr:0000000000005A12                 db    0
.eh_frame_hdr:0000000000005A13                 db    0
.eh_frame_hdr:0000000000005A14                 db  90h
.eh_frame_hdr:0000000000005A15                 db 0EEh
.eh_frame_hdr:0000000000005A16                 db 0FFh
.eh_frame_hdr:0000000000005A17                 db 0FFh
.eh_frame_hdr:0000000000005A18                 db  10h
.eh_frame_hdr:0000000000005A19                 db  0Bh
.eh_frame_hdr:0000000000005A1A                 db    0
.eh_frame_hdr:0000000000005A1B                 db    0
.eh_frame_hdr:0000000000005A1C                 db 0D0h
.eh_frame_hdr:0000000000005A1D                 db 0EEh
.eh_frame_hdr:0000000000005A1E                 db 0FFh
.eh_frame_hdr:0000000000005A1F                 db 0FFh
.eh_frame_hdr:0000000000005A20                 db  28h ; (
.eh_frame_hdr:0000000000005A21                 db  0Bh
.eh_frame_hdr:0000000000005A22                 db    0
.eh_frame_hdr:0000000000005A23                 db    0
.eh_frame_hdr:0000000000005A24                 db 0F0h
.eh_frame_hdr:0000000000005A25                 db 0EEh
.eh_frame_hdr:0000000000005A26                 db 0FFh
.eh_frame_hdr:0000000000005A27                 db 0FFh
.eh_frame_hdr:0000000000005A28                 db  40h ; @
.eh_frame_hdr:0000000000005A29                 db  0Bh
.eh_frame_hdr:0000000000005A2A                 db    0
.eh_frame_hdr:0000000000005A2B                 db    0
.eh_frame_hdr:0000000000005A2C                 db  80h
.eh_frame_hdr:0000000000005A2D                 db 0EFh
.eh_frame_hdr:0000000000005A2E                 db 0FFh
.eh_frame_hdr:0000000000005A2F                 db 0FFh
.eh_frame_hdr:0000000000005A30                 db  80h
.eh_frame_hdr:0000000000005A31                 db  0Bh
.eh_frame_hdr:0000000000005A32                 db    0
.eh_frame_hdr:0000000000005A33                 db    0
.eh_frame_hdr:0000000000005A34                 db    0
.eh_frame_hdr:0000000000005A35                 db 0F0h
.eh_frame_hdr:0000000000005A36                 db 0FFh
.eh_frame_hdr:0000000000005A37                 db 0FFh
.eh_frame_hdr:0000000000005A38                 db 0D0h
.eh_frame_hdr:0000000000005A39                 db  0Bh
.eh_frame_hdr:0000000000005A3A                 db    0
.eh_frame_hdr:0000000000005A3B                 db    0
.eh_frame_hdr:0000000000005A3C                 db  60h ; `
.eh_frame_hdr:0000000000005A3D                 db 0F0h
.eh_frame_hdr:0000000000005A3E                 db 0FFh
.eh_frame_hdr:0000000000005A3F                 db 0FFh
.eh_frame_hdr:0000000000005A40                 db 0F0h
.eh_frame_hdr:0000000000005A41                 db  0Bh
.eh_frame_hdr:0000000000005A42                 db    0
.eh_frame_hdr:0000000000005A43                 db    0
.eh_frame_hdr:0000000000005A44                 db 0A0h
.eh_frame_hdr:0000000000005A45                 db 0F0h
.eh_frame_hdr:0000000000005A46                 db 0FFh
.eh_frame_hdr:0000000000005A47                 db 0FFh
.eh_frame_hdr:0000000000005A48                 db  10h
.eh_frame_hdr:0000000000005A49                 db  0Ch
.eh_frame_hdr:0000000000005A4A                 db    0
.eh_frame_hdr:0000000000005A4B                 db    0
.eh_frame_hdr:0000000000005A4C                 db  20h
.eh_frame_hdr:0000000000005A4D                 db 0F1h
.eh_frame_hdr:0000000000005A4E                 db 0FFh
.eh_frame_hdr:0000000000005A4F                 db 0FFh
.eh_frame_hdr:0000000000005A50                 db  48h ; H
.eh_frame_hdr:0000000000005A51                 db  0Ch
.eh_frame_hdr:0000000000005A52                 db    0
.eh_frame_hdr:0000000000005A53                 db    0
.eh_frame_hdr:0000000000005A54                 db  60h ; `
.eh_frame_hdr:0000000000005A55                 db 0F1h
.eh_frame_hdr:0000000000005A56                 db 0FFh
.eh_frame_hdr:0000000000005A57                 db 0FFh
.eh_frame_hdr:0000000000005A58                 db  68h ; h
.eh_frame_hdr:0000000000005A59                 db  0Ch
.eh_frame_hdr:0000000000005A5A                 db    0
.eh_frame_hdr:0000000000005A5B                 db    0
.eh_frame_hdr:0000000000005A5C                 db 0C0h
.eh_frame_hdr:0000000000005A5D                 db 0F1h
.eh_frame_hdr:0000000000005A5E                 db 0FFh
.eh_frame_hdr:0000000000005A5F                 db 0FFh
.eh_frame_hdr:0000000000005A60                 db  98h
.eh_frame_hdr:0000000000005A61                 db  0Ch
.eh_frame_hdr:0000000000005A62                 db    0
.eh_frame_hdr:0000000000005A63                 db    0
.eh_frame_hdr:0000000000005A64                 db  30h ; 0
.eh_frame_hdr:0000000000005A65                 db 0F2h
.eh_frame_hdr:0000000000005A66                 db 0FFh
.eh_frame_hdr:0000000000005A67                 db 0FFh
.eh_frame_hdr:0000000000005A68                 db 0E0h
.eh_frame_hdr:0000000000005A69                 db  0Ch
.eh_frame_hdr:0000000000005A6A                 db    0
.eh_frame_hdr:0000000000005A6B                 db    0
.eh_frame_hdr:0000000000005A6C                 db  40h ; @
.eh_frame_hdr:0000000000005A6D                 db 0F2h
.eh_frame_hdr:0000000000005A6E                 db 0FFh
.eh_frame_hdr:0000000000005A6F                 db 0FFh
.eh_frame_hdr:0000000000005A70                 db 0F8h
.eh_frame_hdr:0000000000005A71                 db  0Ch
.eh_frame_hdr:0000000000005A72                 db    0
.eh_frame_hdr:0000000000005A73                 db    0
.eh_frame_hdr:0000000000005A73 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005A73
LOAD:0000000000005A74 ; ===========================================================================
LOAD:0000000000005A74
LOAD:0000000000005A74 ; Segment type: Pure code
LOAD:0000000000005A74 ; Segment permissions: Read/Execute
LOAD:0000000000005A74 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005A74                 assume cs:LOAD
LOAD:0000000000005A74                 ;org 5A74h
LOAD:0000000000005A74                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005A74                 align 8
LOAD:0000000000005A74 LOAD            ends
LOAD:0000000000005A74
.eh_frame:0000000000005A78 ; ===========================================================================
.eh_frame:0000000000005A78
.eh_frame:0000000000005A78 ; Segment type: Pure data
.eh_frame:0000000000005A78 ; Segment permissions: Read
.eh_frame:0000000000005A78 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005A78                 assume cs:_eh_frame
.eh_frame:0000000000005A78                 ;org 5A78h
.eh_frame:0000000000005A78                 db  14h
.eh_frame:0000000000005A79                 db    0
.eh_frame:0000000000005A7A                 db    0
.eh_frame:0000000000005A7B                 db    0
.eh_frame:0000000000005A7C                 db    0
.eh_frame:0000000000005A7D                 db    0
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db    1
.eh_frame:0000000000005A81                 db  7Ah ; z
.eh_frame:0000000000005A82                 db  52h ; R
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db    1
.eh_frame:0000000000005A85                 db  78h ; x
.eh_frame:0000000000005A86                 db  10h
.eh_frame:0000000000005A87                 db    1
.eh_frame:0000000000005A88                 db  1Bh
.eh_frame:0000000000005A89                 db  0Ch
.eh_frame:0000000000005A8A                 db    7
.eh_frame:0000000000005A8B                 db    8
.eh_frame:0000000000005A8C                 db  90h
.eh_frame:0000000000005A8D                 db    1
.eh_frame:0000000000005A8E                 db    7
.eh_frame:0000000000005A8F                 db  10h
.eh_frame:0000000000005A90                 db  14h
.eh_frame:0000000000005A91                 db    0
.eh_frame:0000000000005A92                 db    0
.eh_frame:0000000000005A93                 db    0
.eh_frame:0000000000005A94                 db  1Ch
.eh_frame:0000000000005A95                 db    0
.eh_frame:0000000000005A96                 db    0
.eh_frame:0000000000005A97                 db    0
.eh_frame:0000000000005A98                 db  58h ; X
.eh_frame:0000000000005A99                 db 0C1h
.eh_frame:0000000000005A9A                 db 0FFh
.eh_frame:0000000000005A9B                 db 0FFh
.eh_frame:0000000000005A9C                 db  2Bh ; +
.eh_frame:0000000000005A9D                 db    0
.eh_frame:0000000000005A9E                 db    0
.eh_frame:0000000000005A9F                 db    0
.eh_frame:0000000000005AA0                 db    0
.eh_frame:0000000000005AA1                 db    0
.eh_frame:0000000000005AA2                 db    0
.eh_frame:0000000000005AA3                 db    0
.eh_frame:0000000000005AA4                 db    0
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db  14h
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db    0
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db    1
.eh_frame:0000000000005AB1                 db  7Ah ; z
.eh_frame:0000000000005AB2                 db  52h ; R
.eh_frame:0000000000005AB3                 db    0
.eh_frame:0000000000005AB4                 db    1
.eh_frame:0000000000005AB5                 db  78h ; x
.eh_frame:0000000000005AB6                 db  10h
.eh_frame:0000000000005AB7                 db    1
.eh_frame:0000000000005AB8                 db  1Bh
.eh_frame:0000000000005AB9                 db  0Ch
.eh_frame:0000000000005ABA                 db    7
.eh_frame:0000000000005ABB                 db    8
.eh_frame:0000000000005ABC                 db  90h
.eh_frame:0000000000005ABD                 db    1
.eh_frame:0000000000005ABE                 db    0
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db  24h ; $
.eh_frame:0000000000005AC1                 db    0
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db  1Ch
.eh_frame:0000000000005AC5                 db    0
.eh_frame:0000000000005AC6                 db    0
.eh_frame:0000000000005AC7                 db    0
.eh_frame:0000000000005AC8                 db  98h
.eh_frame:0000000000005AC9                 db 0B7h
.eh_frame:0000000000005ACA                 db 0FFh
.eh_frame:0000000000005ACB                 db 0FFh
.eh_frame:0000000000005ACC                 db 0C0h
.eh_frame:0000000000005ACD                 db    2
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db    0
.eh_frame:0000000000005AD1                 db  0Eh
.eh_frame:0000000000005AD2                 db  10h
.eh_frame:0000000000005AD3                 db  46h ; F
.eh_frame:0000000000005AD4                 db  0Eh
.eh_frame:0000000000005AD5                 db  18h
.eh_frame:0000000000005AD6                 db  4Ah ; J
.eh_frame:0000000000005AD7                 db  0Fh
.eh_frame:0000000000005AD8                 db  0Bh
.eh_frame:0000000000005AD9                 db  77h ; w
.eh_frame:0000000000005ADA                 db    8
.eh_frame:0000000000005ADB                 db  80h
.eh_frame:0000000000005ADC                 db    0
.eh_frame:0000000000005ADD                 db  3Fh ; ?
.eh_frame:0000000000005ADE                 db  1Ah
.eh_frame:0000000000005ADF                 db  3Bh ; ;
.eh_frame:0000000000005AE0                 db  2Ah ; *
.eh_frame:0000000000005AE1                 db  33h ; 3
.eh_frame:0000000000005AE2                 db  24h ; $
.eh_frame:0000000000005AE3                 db  22h ; "
.eh_frame:0000000000005AE4                 db    0
.eh_frame:0000000000005AE5                 db    0
.eh_frame:0000000000005AE6                 db    0
.eh_frame:0000000000005AE7                 db    0
.eh_frame:0000000000005AE8                 db  14h
.eh_frame:0000000000005AE9                 db    0
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db  44h ; D
.eh_frame:0000000000005AED                 db    0
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db  30h ; 0
.eh_frame:0000000000005AF1                 db 0BAh
.eh_frame:0000000000005AF2                 db 0FFh
.eh_frame:0000000000005AF3                 db 0FFh
.eh_frame:0000000000005AF4                 db    8
.eh_frame:0000000000005AF5                 db    0
.eh_frame:0000000000005AF6                 db    0
.eh_frame:0000000000005AF7                 db    0
.eh_frame:0000000000005AF8                 db    0
.eh_frame:0000000000005AF9                 db    0
.eh_frame:0000000000005AFA                 db    0
.eh_frame:0000000000005AFB                 db    0
.eh_frame:0000000000005AFC                 db    0
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db  28h ; (
.eh_frame:0000000000005B01                 db    0
.eh_frame:0000000000005B02                 db    0
.eh_frame:0000000000005B03                 db    0
.eh_frame:0000000000005B04                 db  5Ch ; \
.eh_frame:0000000000005B05                 db    0
.eh_frame:0000000000005B06                 db    0
.eh_frame:0000000000005B07                 db    0
.eh_frame:0000000000005B08                 db 0F8h
.eh_frame:0000000000005B09                 db 0C1h
.eh_frame:0000000000005B0A                 db 0FFh
.eh_frame:0000000000005B0B                 db 0FFh
.eh_frame:0000000000005B0C                 db  42h ; B
.eh_frame:0000000000005B0D                 db    3
.eh_frame:0000000000005B0E                 db    0
.eh_frame:0000000000005B0F                 db    0
.eh_frame:0000000000005B10                 db    0
.eh_frame:0000000000005B11                 db  42h ; B
.eh_frame:0000000000005B12                 db  0Eh
.eh_frame:0000000000005B13                 db  10h
.eh_frame:0000000000005B14                 db  8Dh
.eh_frame:0000000000005B15                 db    2
.eh_frame:0000000000005B16                 db  42h ; B
.eh_frame:0000000000005B17                 db  0Eh
.eh_frame:0000000000005B18                 db  18h
.eh_frame:0000000000005B19                 db  8Ch
.eh_frame:0000000000005B1A                 db    3
.eh_frame:0000000000005B1B                 db  46h ; F
.eh_frame:0000000000005B1C                 db  0Eh
.eh_frame:0000000000005B1D                 db  20h
.eh_frame:0000000000005B1E                 db  86h
.eh_frame:0000000000005B1F                 db    4
.eh_frame:0000000000005B20                 db  41h ; A
.eh_frame:0000000000005B21                 db  0Eh
.eh_frame:0000000000005B22                 db  28h ; (
.eh_frame:0000000000005B23                 db  83h
.eh_frame:0000000000005B24                 db    5
.eh_frame:0000000000005B25                 db  49h ; I
.eh_frame:0000000000005B26                 db  0Eh
.eh_frame:0000000000005B27                 db 0B0h
.eh_frame:0000000000005B28                 db    1
.eh_frame:0000000000005B29                 db    0
.eh_frame:0000000000005B2A                 db    0
.eh_frame:0000000000005B2B                 db    0
.eh_frame:0000000000005B2C                 db  58h ; X
.eh_frame:0000000000005B2D                 db    0
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db  88h
.eh_frame:0000000000005B31                 db    0
.eh_frame:0000000000005B32                 db    0
.eh_frame:0000000000005B33                 db    0
.eh_frame:0000000000005B34                 db 0FCh
.eh_frame:0000000000005B35                 db 0B9h
.eh_frame:0000000000005B36                 db 0FFh
.eh_frame:0000000000005B37                 db 0FFh
.eh_frame:0000000000005B38                 db 0BBh
.eh_frame:0000000000005B39                 db    6
.eh_frame:0000000000005B3A                 db    0
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db    0
.eh_frame:0000000000005B3D                 db  42h ; B
.eh_frame:0000000000005B3E                 db  0Eh
.eh_frame:0000000000005B3F                 db  10h
.eh_frame:0000000000005B40                 db  8Fh
.eh_frame:0000000000005B41                 db    2
.eh_frame:0000000000005B42                 db  42h ; B
.eh_frame:0000000000005B43                 db  0Eh
.eh_frame:0000000000005B44                 db  18h
.eh_frame:0000000000005B45                 db  8Eh
.eh_frame:0000000000005B46                 db    3
.eh_frame:0000000000005B47                 db  42h ; B
.eh_frame:0000000000005B48                 db  0Eh
.eh_frame:0000000000005B49                 db  20h
.eh_frame:0000000000005B4A                 db  8Dh
.eh_frame:0000000000005B4B                 db    4
.eh_frame:0000000000005B4C                 db  42h ; B
.eh_frame:0000000000005B4D                 db  0Eh
.eh_frame:0000000000005B4E                 db  28h ; (
.eh_frame:0000000000005B4F                 db  8Ch
.eh_frame:0000000000005B50                 db    5
.eh_frame:0000000000005B51                 db  44h ; D
.eh_frame:0000000000005B52                 db  0Eh
.eh_frame:0000000000005B53                 db  30h ; 0
.eh_frame:0000000000005B54                 db  86h
.eh_frame:0000000000005B55                 db    6
.eh_frame:0000000000005B56                 db  41h ; A
.eh_frame:0000000000005B57                 db  0Eh
.eh_frame:0000000000005B58                 db  38h ; 8
.eh_frame:0000000000005B59                 db  83h
.eh_frame:0000000000005B5A                 db    7
.eh_frame:0000000000005B5B                 db  4Dh ; M
.eh_frame:0000000000005B5C                 db  0Eh
.eh_frame:0000000000005B5D                 db  90h
.eh_frame:0000000000005B5E                 db    2
.eh_frame:0000000000005B5F                 db    2
.eh_frame:0000000000005B60                 db 0C8h
.eh_frame:0000000000005B61                 db  0Ah
.eh_frame:0000000000005B62                 db  0Eh
.eh_frame:0000000000005B63                 db  98h
.eh_frame:0000000000005B64                 db    2
.eh_frame:0000000000005B65                 db  4Fh ; O
.eh_frame:0000000000005B66                 db  0Eh
.eh_frame:0000000000005B67                 db 0A0h
.eh_frame:0000000000005B68                 db    2
.eh_frame:0000000000005B69                 db  5Fh ; _
.eh_frame:0000000000005B6A                 db  0Bh
.eh_frame:0000000000005B6B                 db    3
.eh_frame:0000000000005B6C                 db  3Dh ; =
.eh_frame:0000000000005B6D                 db    3
.eh_frame:0000000000005B6E                 db  0Ah
.eh_frame:0000000000005B6F                 db  0Eh
.eh_frame:0000000000005B70                 db  38h ; 8
.eh_frame:0000000000005B71                 db  41h ; A
.eh_frame:0000000000005B72                 db  0Eh
.eh_frame:0000000000005B73                 db  30h ; 0
.eh_frame:0000000000005B74                 db  41h ; A
.eh_frame:0000000000005B75                 db  0Eh
.eh_frame:0000000000005B76                 db  28h ; (
.eh_frame:0000000000005B77                 db  42h ; B
.eh_frame:0000000000005B78                 db  0Eh
.eh_frame:0000000000005B79                 db  20h
.eh_frame:0000000000005B7A                 db  42h ; B
.eh_frame:0000000000005B7B                 db  0Eh
.eh_frame:0000000000005B7C                 db  18h
.eh_frame:0000000000005B7D                 db  42h ; B
.eh_frame:0000000000005B7E                 db  0Eh
.eh_frame:0000000000005B7F                 db  10h
.eh_frame:0000000000005B80                 db  42h ; B
.eh_frame:0000000000005B81                 db  0Eh
.eh_frame:0000000000005B82                 db    8
.eh_frame:0000000000005B83                 db  41h ; A
.eh_frame:0000000000005B84                 db  0Bh
.eh_frame:0000000000005B85                 db    0
.eh_frame:0000000000005B86                 db    0
.eh_frame:0000000000005B87                 db    0
.eh_frame:0000000000005B88                 db  10h
.eh_frame:0000000000005B89                 db    0
.eh_frame:0000000000005B8A                 db    0
.eh_frame:0000000000005B8B                 db    0
.eh_frame:0000000000005B8C                 db 0E4h
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db 0C0h
.eh_frame:0000000000005B91                 db 0C4h
.eh_frame:0000000000005B92                 db 0FFh
.eh_frame:0000000000005B93                 db 0FFh
.eh_frame:0000000000005B94                 db    8
.eh_frame:0000000000005B95                 db    0
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db    0
.eh_frame:0000000000005B99                 db    0
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db  10h
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db 0F8h
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db 0BCh
.eh_frame:0000000000005BA5                 db 0C4h
.eh_frame:0000000000005BA6                 db 0FFh
.eh_frame:0000000000005BA7                 db 0FFh
.eh_frame:0000000000005BA8                 db    8
.eh_frame:0000000000005BA9                 db    0
.eh_frame:0000000000005BAA                 db    0
.eh_frame:0000000000005BAB                 db    0
.eh_frame:0000000000005BAC                 db    0
.eh_frame:0000000000005BAD                 db    0
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db  2Ch ; ,
.eh_frame:0000000000005BB1                 db    0
.eh_frame:0000000000005BB2                 db    0
.eh_frame:0000000000005BB3                 db    0
.eh_frame:0000000000005BB4                 db  0Ch
.eh_frame:0000000000005BB5                 db    1
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db 0B8h
.eh_frame:0000000000005BB9                 db 0C4h
.eh_frame:0000000000005BBA                 db 0FFh
.eh_frame:0000000000005BBB                 db 0FFh
.eh_frame:0000000000005BBC                 db 0A4h
.eh_frame:0000000000005BBD                 db    0
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db    0
.eh_frame:0000000000005BC1                 db  41h ; A
.eh_frame:0000000000005BC2                 db  0Eh
.eh_frame:0000000000005BC3                 db  10h
.eh_frame:0000000000005BC4                 db  86h
.eh_frame:0000000000005BC5                 db    2
.eh_frame:0000000000005BC6                 db  41h ; A
.eh_frame:0000000000005BC7                 db  0Eh
.eh_frame:0000000000005BC8                 db  18h
.eh_frame:0000000000005BC9                 db  83h
.eh_frame:0000000000005BCA                 db    3
.eh_frame:0000000000005BCB                 db  44h ; D
.eh_frame:0000000000005BCC                 db  0Eh
.eh_frame:0000000000005BCD                 db  20h
.eh_frame:0000000000005BCE                 db  7Ah ; z
.eh_frame:0000000000005BCF                 db  0Ah
.eh_frame:0000000000005BD0                 db  0Eh
.eh_frame:0000000000005BD1                 db  18h
.eh_frame:0000000000005BD2                 db  41h ; A
.eh_frame:0000000000005BD3                 db  0Eh
.eh_frame:0000000000005BD4                 db  10h
.eh_frame:0000000000005BD5                 db  41h ; A
.eh_frame:0000000000005BD6                 db  0Eh
.eh_frame:0000000000005BD7                 db    8
.eh_frame:0000000000005BD8                 db  41h ; A
.eh_frame:0000000000005BD9                 db  0Bh
.eh_frame:0000000000005BDA                 db    0
.eh_frame:0000000000005BDB                 db    0
.eh_frame:0000000000005BDC                 db    0
.eh_frame:0000000000005BDD                 db    0
.eh_frame:0000000000005BDE                 db    0
.eh_frame:0000000000005BDF                 db    0
.eh_frame:0000000000005BE0                 db  1Ch
.eh_frame:0000000000005BE1                 db    0
.eh_frame:0000000000005BE2                 db    0
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db  3Ch ; <
.eh_frame:0000000000005BE5                 db    1
.eh_frame:0000000000005BE6                 db    0
.eh_frame:0000000000005BE7                 db    0
.eh_frame:0000000000005BE8                 db  38h ; 8
.eh_frame:0000000000005BE9                 db 0C5h
.eh_frame:0000000000005BEA                 db 0FFh
.eh_frame:0000000000005BEB                 db 0FFh
.eh_frame:0000000000005BEC                 db  9Fh
.eh_frame:0000000000005BED                 db    0
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db    0
.eh_frame:0000000000005BF1                 db  44h ; D
.eh_frame:0000000000005BF2                 db  0Eh
.eh_frame:0000000000005BF3                 db  10h
.eh_frame:0000000000005BF4                 db  83h
.eh_frame:0000000000005BF5                 db    2
.eh_frame:0000000000005BF6                 db    2
.eh_frame:0000000000005BF7                 db  78h ; x
.eh_frame:0000000000005BF8                 db  0Ah
.eh_frame:0000000000005BF9                 db  0Eh
.eh_frame:0000000000005BFA                 db    8
.eh_frame:0000000000005BFB                 db  41h ; A
.eh_frame:0000000000005BFC                 db  0Bh
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db  40h ; @
.eh_frame:0000000000005C01                 db    0
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db  5Ch ; \
.eh_frame:0000000000005C05                 db    1
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db 0B8h
.eh_frame:0000000000005C09                 db 0C5h
.eh_frame:0000000000005C0A                 db 0FFh
.eh_frame:0000000000005C0B                 db 0FFh
.eh_frame:0000000000005C0C                 db 0E7h
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db    0
.eh_frame:0000000000005C11                 db  41h ; A
.eh_frame:0000000000005C12                 db  0Eh
.eh_frame:0000000000005C13                 db  10h
.eh_frame:0000000000005C14                 db  86h
.eh_frame:0000000000005C15                 db    2
.eh_frame:0000000000005C16                 db  41h ; A
.eh_frame:0000000000005C17                 db  0Eh
.eh_frame:0000000000005C18                 db  18h
.eh_frame:0000000000005C19                 db  83h
.eh_frame:0000000000005C1A                 db    3
.eh_frame:0000000000005C1B                 db  49h ; I
.eh_frame:0000000000005C1C                 db  0Eh
.eh_frame:0000000000005C1D                 db  20h
.eh_frame:0000000000005C1E                 db  6Eh ; n
.eh_frame:0000000000005C1F                 db  0Ah
.eh_frame:0000000000005C20                 db  0Eh
.eh_frame:0000000000005C21                 db  18h
.eh_frame:0000000000005C22                 db  41h ; A
.eh_frame:0000000000005C23                 db  0Eh
.eh_frame:0000000000005C24                 db  10h
.eh_frame:0000000000005C25                 db  41h ; A
.eh_frame:0000000000005C26                 db  0Eh
.eh_frame:0000000000005C27                 db    8
.eh_frame:0000000000005C28                 db  45h ; E
.eh_frame:0000000000005C29                 db  0Bh
.eh_frame:0000000000005C2A                 db    2
.eh_frame:0000000000005C2B                 db  4Ah ; J
.eh_frame:0000000000005C2C                 db  0Ah
.eh_frame:0000000000005C2D                 db  0Eh
.eh_frame:0000000000005C2E                 db  18h
.eh_frame:0000000000005C2F                 db  41h ; A
.eh_frame:0000000000005C30                 db  0Eh
.eh_frame:0000000000005C31                 db  10h
.eh_frame:0000000000005C32                 db  41h ; A
.eh_frame:0000000000005C33                 db  0Eh
.eh_frame:0000000000005C34                 db    8
.eh_frame:0000000000005C35                 db  44h ; D
.eh_frame:0000000000005C36                 db  0Bh
.eh_frame:0000000000005C37                 db    2
.eh_frame:0000000000005C38                 db  54h ; T
.eh_frame:0000000000005C39                 db  0Eh
.eh_frame:0000000000005C3A                 db  18h
.eh_frame:0000000000005C3B                 db  41h ; A
.eh_frame:0000000000005C3C                 db  0Eh
.eh_frame:0000000000005C3D                 db  10h
.eh_frame:0000000000005C3E                 db  41h ; A
.eh_frame:0000000000005C3F                 db  0Eh
.eh_frame:0000000000005C40                 db    8
.eh_frame:0000000000005C41                 db    0
.eh_frame:0000000000005C42                 db    0
.eh_frame:0000000000005C43                 db    0
.eh_frame:0000000000005C44                 db  74h ; t
.eh_frame:0000000000005C45                 db    0
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db 0A0h
.eh_frame:0000000000005C49                 db    1
.eh_frame:0000000000005C4A                 db    0
.eh_frame:0000000000005C4B                 db    0
.eh_frame:0000000000005C4C                 db  64h ; d
.eh_frame:0000000000005C4D                 db 0C6h
.eh_frame:0000000000005C4E                 db 0FFh
.eh_frame:0000000000005C4F                 db 0FFh
.eh_frame:0000000000005C50                 db  34h ; 4
.eh_frame:0000000000005C51                 db  12h
.eh_frame:0000000000005C52                 db    0
.eh_frame:0000000000005C53                 db    0
.eh_frame:0000000000005C54                 db    0
.eh_frame:0000000000005C55                 db  42h ; B
.eh_frame:0000000000005C56                 db  0Eh
.eh_frame:0000000000005C57                 db  10h
.eh_frame:0000000000005C58                 db  8Fh
.eh_frame:0000000000005C59                 db    2
.eh_frame:0000000000005C5A                 db  42h ; B
.eh_frame:0000000000005C5B                 db  0Eh
.eh_frame:0000000000005C5C                 db  18h
.eh_frame:0000000000005C5D                 db  8Eh
.eh_frame:0000000000005C5E                 db    3
.eh_frame:0000000000005C5F                 db  45h ; E
.eh_frame:0000000000005C60                 db  0Eh
.eh_frame:0000000000005C61                 db  20h
.eh_frame:0000000000005C62                 db  8Dh
.eh_frame:0000000000005C63                 db    4
.eh_frame:0000000000005C64                 db  42h ; B
.eh_frame:0000000000005C65                 db  0Eh
.eh_frame:0000000000005C66                 db  28h ; (
.eh_frame:0000000000005C67                 db  8Ch
.eh_frame:0000000000005C68                 db    5
.eh_frame:0000000000005C69                 db  44h ; D
.eh_frame:0000000000005C6A                 db  0Eh
.eh_frame:0000000000005C6B                 db  30h ; 0
.eh_frame:0000000000005C6C                 db  86h
.eh_frame:0000000000005C6D                 db    6
.eh_frame:0000000000005C6E                 db  41h ; A
.eh_frame:0000000000005C6F                 db  0Eh
.eh_frame:0000000000005C70                 db  38h ; 8
.eh_frame:0000000000005C71                 db  83h
.eh_frame:0000000000005C72                 db    7
.eh_frame:0000000000005C73                 db  53h ; S
.eh_frame:0000000000005C74                 db  0Eh
.eh_frame:0000000000005C75                 db 0F0h
.eh_frame:0000000000005C76                 db    1
.eh_frame:0000000000005C77                 db    3
.eh_frame:0000000000005C78                 db  81h
.eh_frame:0000000000005C79                 db  0Bh
.eh_frame:0000000000005C7A                 db  0Eh
.eh_frame:0000000000005C7B                 db 0F8h
.eh_frame:0000000000005C7C                 db    1
.eh_frame:0000000000005C7D                 db  4Ah ; J
.eh_frame:0000000000005C7E                 db  0Eh
.eh_frame:0000000000005C7F                 db  80h
.eh_frame:0000000000005C80                 db    2
.eh_frame:0000000000005C81                 db  44h ; D
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  88h
.eh_frame:0000000000005C84                 db    2
.eh_frame:0000000000005C85                 db  45h ; E
.eh_frame:0000000000005C86                 db  0Eh
.eh_frame:0000000000005C87                 db  90h
.eh_frame:0000000000005C88                 db    2
.eh_frame:0000000000005C89                 db  5Fh ; _
.eh_frame:0000000000005C8A                 db  0Eh
.eh_frame:0000000000005C8B                 db 0F0h
.eh_frame:0000000000005C8C                 db    1
.eh_frame:0000000000005C8D                 db  64h ; d
.eh_frame:0000000000005C8E                 db  0Ah
.eh_frame:0000000000005C8F                 db  0Eh
.eh_frame:0000000000005C90                 db  38h ; 8
.eh_frame:0000000000005C91                 db  41h ; A
.eh_frame:0000000000005C92                 db  0Eh
.eh_frame:0000000000005C93                 db  30h ; 0
.eh_frame:0000000000005C94                 db  41h ; A
.eh_frame:0000000000005C95                 db  0Eh
.eh_frame:0000000000005C96                 db  28h ; (
.eh_frame:0000000000005C97                 db  42h ; B
.eh_frame:0000000000005C98                 db  0Eh
.eh_frame:0000000000005C99                 db  20h
.eh_frame:0000000000005C9A                 db  42h ; B
.eh_frame:0000000000005C9B                 db  0Eh
.eh_frame:0000000000005C9C                 db  18h
.eh_frame:0000000000005C9D                 db  42h ; B
.eh_frame:0000000000005C9E                 db  0Eh
.eh_frame:0000000000005C9F                 db  10h
.eh_frame:0000000000005CA0                 db  42h ; B
.eh_frame:0000000000005CA1                 db  0Eh
.eh_frame:0000000000005CA2                 db    8
.eh_frame:0000000000005CA3                 db  44h ; D
.eh_frame:0000000000005CA4                 db  0Bh
.eh_frame:0000000000005CA5                 db    3
.eh_frame:0000000000005CA6                 db  99h
.eh_frame:0000000000005CA7                 db    5
.eh_frame:0000000000005CA8                 db  0Eh
.eh_frame:0000000000005CA9                 db 0F8h
.eh_frame:0000000000005CAA                 db    1
.eh_frame:0000000000005CAB                 db  4Dh ; M
.eh_frame:0000000000005CAC                 db  0Eh
.eh_frame:0000000000005CAD                 db  80h
.eh_frame:0000000000005CAE                 db    2
.eh_frame:0000000000005CAF                 db  44h ; D
.eh_frame:0000000000005CB0                 db  0Eh
.eh_frame:0000000000005CB1                 db  88h
.eh_frame:0000000000005CB2                 db    2
.eh_frame:0000000000005CB3                 db  47h ; G
.eh_frame:0000000000005CB4                 db  0Eh
.eh_frame:0000000000005CB5                 db  90h
.eh_frame:0000000000005CB6                 db    2
.eh_frame:0000000000005CB7                 db  5Bh ; [
.eh_frame:0000000000005CB8                 db  0Eh
.eh_frame:0000000000005CB9                 db 0F0h
.eh_frame:0000000000005CBA                 db    1
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db  68h ; h
.eh_frame:0000000000005CBD                 db    0
.eh_frame:0000000000005CBE                 db    0
.eh_frame:0000000000005CBF                 db    0
.eh_frame:0000000000005CC0                 db  18h
.eh_frame:0000000000005CC1                 db    2
.eh_frame:0000000000005CC2                 db    0
.eh_frame:0000000000005CC3                 db    0
.eh_frame:0000000000005CC4                 db  2Ch ; ,
.eh_frame:0000000000005CC5                 db 0D8h
.eh_frame:0000000000005CC6                 db 0FFh
.eh_frame:0000000000005CC7                 db 0FFh
.eh_frame:0000000000005CC8                 db 0ABh
.eh_frame:0000000000005CC9                 db    1
.eh_frame:0000000000005CCA                 db    0
.eh_frame:0000000000005CCB                 db    0
.eh_frame:0000000000005CCC                 db    0
.eh_frame:0000000000005CCD                 db  42h ; B
.eh_frame:0000000000005CCE                 db  0Eh
.eh_frame:0000000000005CCF                 db  10h
.eh_frame:0000000000005CD0                 db  8Fh
.eh_frame:0000000000005CD1                 db    2
.eh_frame:0000000000005CD2                 db  42h ; B
.eh_frame:0000000000005CD3                 db  0Eh
.eh_frame:0000000000005CD4                 db  18h
.eh_frame:0000000000005CD5                 db  8Eh
.eh_frame:0000000000005CD6                 db    3
.eh_frame:0000000000005CD7                 db  45h ; E
.eh_frame:0000000000005CD8                 db  0Eh
.eh_frame:0000000000005CD9                 db  20h
.eh_frame:0000000000005CDA                 db  8Dh
.eh_frame:0000000000005CDB                 db    4
.eh_frame:0000000000005CDC                 db  42h ; B
.eh_frame:0000000000005CDD                 db  0Eh
.eh_frame:0000000000005CDE                 db  28h ; (
.eh_frame:0000000000005CDF                 db  8Ch
.eh_frame:0000000000005CE0                 db    5
.eh_frame:0000000000005CE1                 db  44h ; D
.eh_frame:0000000000005CE2                 db  0Eh
.eh_frame:0000000000005CE3                 db  30h ; 0
.eh_frame:0000000000005CE4                 db  86h
.eh_frame:0000000000005CE5                 db    6
.eh_frame:0000000000005CE6                 db  41h ; A
.eh_frame:0000000000005CE7                 db  0Eh
.eh_frame:0000000000005CE8                 db  38h ; 8
.eh_frame:0000000000005CE9                 db  83h
.eh_frame:0000000000005CEA                 db    7
.eh_frame:0000000000005CEB                 db  47h ; G
.eh_frame:0000000000005CEC                 db  0Eh
.eh_frame:0000000000005CED                 db  60h ; `
.eh_frame:0000000000005CEE                 db    2
.eh_frame:0000000000005CEF                 db  99h
.eh_frame:0000000000005CF0                 db  0Eh
.eh_frame:0000000000005CF1                 db  68h ; h
.eh_frame:0000000000005CF2                 db  5Fh ; _
.eh_frame:0000000000005CF3                 db  0Eh
.eh_frame:0000000000005CF4                 db  70h ; p
.eh_frame:0000000000005CF5                 db  46h ; F
.eh_frame:0000000000005CF6                 db  0Eh
.eh_frame:0000000000005CF7                 db  78h ; x
.eh_frame:0000000000005CF8                 db  42h ; B
.eh_frame:0000000000005CF9                 db  0Eh
.eh_frame:0000000000005CFA                 db  80h
.eh_frame:0000000000005CFB                 db    1
.eh_frame:0000000000005CFC                 db  59h ; Y
.eh_frame:0000000000005CFD                 db  0Eh
.eh_frame:0000000000005CFE                 db  60h ; `
.eh_frame:0000000000005CFF                 db    2
.eh_frame:0000000000005D00                 db  40h ; @
.eh_frame:0000000000005D01                 db  0Eh
.eh_frame:0000000000005D02                 db  68h ; h
.eh_frame:0000000000005D03                 db  4Bh ; K
.eh_frame:0000000000005D04                 db  0Eh
.eh_frame:0000000000005D05                 db  70h ; p
.eh_frame:0000000000005D06                 db  43h ; C
.eh_frame:0000000000005D07                 db  0Eh
.eh_frame:0000000000005D08                 db  78h ; x
.eh_frame:0000000000005D09                 db  45h ; E
.eh_frame:0000000000005D0A                 db  0Eh
.eh_frame:0000000000005D0B                 db  80h
.eh_frame:0000000000005D0C                 db    1
.eh_frame:0000000000005D0D                 db  5Eh ; ^
.eh_frame:0000000000005D0E                 db  0Eh
.eh_frame:0000000000005D0F                 db  60h ; `
.eh_frame:0000000000005D10                 db  4Ch ; L
.eh_frame:0000000000005D11                 db  0Ah
.eh_frame:0000000000005D12                 db  0Eh
.eh_frame:0000000000005D13                 db  38h ; 8
.eh_frame:0000000000005D14                 db  44h ; D
.eh_frame:0000000000005D15                 db  0Eh
.eh_frame:0000000000005D16                 db  30h ; 0
.eh_frame:0000000000005D17                 db  41h ; A
.eh_frame:0000000000005D18                 db  0Eh
.eh_frame:0000000000005D19                 db  28h ; (
.eh_frame:0000000000005D1A                 db  42h ; B
.eh_frame:0000000000005D1B                 db  0Eh
.eh_frame:0000000000005D1C                 db  20h
.eh_frame:0000000000005D1D                 db  42h ; B
.eh_frame:0000000000005D1E                 db  0Eh
.eh_frame:0000000000005D1F                 db  18h
.eh_frame:0000000000005D20                 db  42h ; B
.eh_frame:0000000000005D21                 db  0Eh
.eh_frame:0000000000005D22                 db  10h
.eh_frame:0000000000005D23                 db  42h ; B
.eh_frame:0000000000005D24                 db  0Eh
.eh_frame:0000000000005D25                 db    8
.eh_frame:0000000000005D26                 db  46h ; F
.eh_frame:0000000000005D27                 db  0Bh
.eh_frame:0000000000005D28                 db  28h ; (
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db  84h
.eh_frame:0000000000005D2D                 db    2
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  70h ; p
.eh_frame:0000000000005D31                 db 0D9h
.eh_frame:0000000000005D32                 db 0FFh
.eh_frame:0000000000005D33                 db 0FFh
.eh_frame:0000000000005D34                 db  36h ; 6
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db    0
.eh_frame:0000000000005D39                 db  42h ; B
.eh_frame:0000000000005D3A                 db  0Eh
.eh_frame:0000000000005D3B                 db  10h
.eh_frame:0000000000005D3C                 db  8Ch
.eh_frame:0000000000005D3D                 db    2
.eh_frame:0000000000005D3E                 db  41h ; A
.eh_frame:0000000000005D3F                 db  0Eh
.eh_frame:0000000000005D40                 db  18h
.eh_frame:0000000000005D41                 db  86h
.eh_frame:0000000000005D42                 db    3
.eh_frame:0000000000005D43                 db  41h ; A
.eh_frame:0000000000005D44                 db  0Eh
.eh_frame:0000000000005D45                 db  20h
.eh_frame:0000000000005D46                 db  83h
.eh_frame:0000000000005D47                 db    4
.eh_frame:0000000000005D48                 db  6Eh ; n
.eh_frame:0000000000005D49                 db  0Eh
.eh_frame:0000000000005D4A                 db  18h
.eh_frame:0000000000005D4B                 db  41h ; A
.eh_frame:0000000000005D4C                 db  0Eh
.eh_frame:0000000000005D4D                 db  10h
.eh_frame:0000000000005D4E                 db  42h ; B
.eh_frame:0000000000005D4F                 db  0Eh
.eh_frame:0000000000005D50                 db    8
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db  10h
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db 0B0h
.eh_frame:0000000000005D59                 db    2
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db  84h
.eh_frame:0000000000005D5D                 db 0D9h
.eh_frame:0000000000005D5E                 db 0FFh
.eh_frame:0000000000005D5F                 db 0FFh
.eh_frame:0000000000005D60                 db  11h
.eh_frame:0000000000005D61                 db    0
.eh_frame:0000000000005D62                 db    0
.eh_frame:0000000000005D63                 db    0
.eh_frame:0000000000005D64                 db    0
.eh_frame:0000000000005D65                 db    0
.eh_frame:0000000000005D66                 db    0
.eh_frame:0000000000005D67                 db    0
.eh_frame:0000000000005D68                 db  10h
.eh_frame:0000000000005D69                 db    0
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db 0C4h
.eh_frame:0000000000005D6D                 db    2
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db  90h
.eh_frame:0000000000005D71                 db 0D9h
.eh_frame:0000000000005D72                 db 0FFh
.eh_frame:0000000000005D73                 db 0FFh
.eh_frame:0000000000005D74                 db  11h
.eh_frame:0000000000005D75                 db    0
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db    0
.eh_frame:0000000000005D79                 db    0
.eh_frame:0000000000005D7A                 db    0
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db  10h
.eh_frame:0000000000005D7D                 db    0
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db 0D8h
.eh_frame:0000000000005D81                 db    2
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db  9Ch
.eh_frame:0000000000005D85                 db 0D9h
.eh_frame:0000000000005D86                 db 0FFh
.eh_frame:0000000000005D87                 db 0FFh
.eh_frame:0000000000005D88                 db  35h ; 5
.eh_frame:0000000000005D89                 db    0
.eh_frame:0000000000005D8A                 db    0
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db    0
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  10h
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db 0ECh
.eh_frame:0000000000005D95                 db    2
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db 0C8h
.eh_frame:0000000000005D99                 db 0D9h
.eh_frame:0000000000005D9A                 db 0FFh
.eh_frame:0000000000005D9B                 db 0FFh
.eh_frame:0000000000005D9C                 db  15h
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db    0
.eh_frame:0000000000005DA1                 db    0
.eh_frame:0000000000005DA2                 db    0
.eh_frame:0000000000005DA3                 db    0
.eh_frame:0000000000005DA4                 db  10h
.eh_frame:0000000000005DA5                 db    0
.eh_frame:0000000000005DA6                 db    0
.eh_frame:0000000000005DA7                 db    0
.eh_frame:0000000000005DA8                 db    0
.eh_frame:0000000000005DA9                 db    3
.eh_frame:0000000000005DAA                 db    0
.eh_frame:0000000000005DAB                 db    0
.eh_frame:0000000000005DAC                 db 0D4h
.eh_frame:0000000000005DAD                 db 0D9h
.eh_frame:0000000000005DAE                 db 0FFh
.eh_frame:0000000000005DAF                 db 0FFh
.eh_frame:0000000000005DB0                 db  30h ; 0
.eh_frame:0000000000005DB1                 db    0
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db    0
.eh_frame:0000000000005DB5                 db  6Bh ; k
.eh_frame:0000000000005DB6                 db  0Eh
.eh_frame:0000000000005DB7                 db  10h
.eh_frame:0000000000005DB8                 db  50h ; P
.eh_frame:0000000000005DB9                 db    0
.eh_frame:0000000000005DBA                 db    0
.eh_frame:0000000000005DBB                 db    0
.eh_frame:0000000000005DBC                 db  14h
.eh_frame:0000000000005DBD                 db    3
.eh_frame:0000000000005DBE                 db    0
.eh_frame:0000000000005DBF                 db    0
.eh_frame:0000000000005DC0                 db 0F0h
.eh_frame:0000000000005DC1                 db 0D9h
.eh_frame:0000000000005DC2                 db 0FFh
.eh_frame:0000000000005DC3                 db 0FFh
.eh_frame:0000000000005DC4                 db  74h ; t
.eh_frame:0000000000005DC5                 db    0
.eh_frame:0000000000005DC6                 db    0
.eh_frame:0000000000005DC7                 db    0
.eh_frame:0000000000005DC8                 db    0
.eh_frame:0000000000005DC9                 db  42h ; B
.eh_frame:0000000000005DCA                 db  0Eh
.eh_frame:0000000000005DCB                 db  10h
.eh_frame:0000000000005DCC                 db  8Fh
.eh_frame:0000000000005DCD                 db    2
.eh_frame:0000000000005DCE                 db  42h ; B
.eh_frame:0000000000005DCF                 db  0Eh
.eh_frame:0000000000005DD0                 db  18h
.eh_frame:0000000000005DD1                 db  8Eh
.eh_frame:0000000000005DD2                 db    3
.eh_frame:0000000000005DD3                 db  49h ; I
.eh_frame:0000000000005DD4                 db  0Eh
.eh_frame:0000000000005DD5                 db  20h
.eh_frame:0000000000005DD6                 db  8Dh
.eh_frame:0000000000005DD7                 db    4
.eh_frame:0000000000005DD8                 db  42h ; B
.eh_frame:0000000000005DD9                 db  0Eh
.eh_frame:0000000000005DDA                 db  28h ; (
.eh_frame:0000000000005DDB                 db  8Ch
.eh_frame:0000000000005DDC                 db    5
.eh_frame:0000000000005DDD                 db  44h ; D
.eh_frame:0000000000005DDE                 db  0Eh
.eh_frame:0000000000005DDF                 db  30h ; 0
.eh_frame:0000000000005DE0                 db  86h
.eh_frame:0000000000005DE1                 db    6
.eh_frame:0000000000005DE2                 db  41h ; A
.eh_frame:0000000000005DE3                 db  0Eh
.eh_frame:0000000000005DE4                 db  38h ; 8
.eh_frame:0000000000005DE5                 db  83h
.eh_frame:0000000000005DE6                 db    7
.eh_frame:0000000000005DE7                 db  4Dh ; M
.eh_frame:0000000000005DE8                 db  0Eh
.eh_frame:0000000000005DE9                 db  50h ; P
.eh_frame:0000000000005DEA                 db  5Fh ; _
.eh_frame:0000000000005DEB                 db  0Eh
.eh_frame:0000000000005DEC                 db  58h ; X
.eh_frame:0000000000005DED                 db  47h ; G
.eh_frame:0000000000005DEE                 db  0Eh
.eh_frame:0000000000005DEF                 db  60h ; `
.eh_frame:0000000000005DF0                 db  46h ; F
.eh_frame:0000000000005DF1                 db  0Eh
.eh_frame:0000000000005DF2                 db  68h ; h
.eh_frame:0000000000005DF3                 db  44h ; D
.eh_frame:0000000000005DF4                 db  0Eh
.eh_frame:0000000000005DF5                 db  70h ; p
.eh_frame:0000000000005DF6                 db  58h ; X
.eh_frame:0000000000005DF7                 db  0Eh
.eh_frame:0000000000005DF8                 db  38h ; 8
.eh_frame:0000000000005DF9                 db  41h ; A
.eh_frame:0000000000005DFA                 db  0Eh
.eh_frame:0000000000005DFB                 db  30h ; 0
.eh_frame:0000000000005DFC                 db  41h ; A
.eh_frame:0000000000005DFD                 db  0Eh
.eh_frame:0000000000005DFE                 db  28h ; (
.eh_frame:0000000000005DFF                 db  42h ; B
.eh_frame:0000000000005E00                 db  0Eh
.eh_frame:0000000000005E01                 db  20h
.eh_frame:0000000000005E02                 db  42h ; B
.eh_frame:0000000000005E03                 db  0Eh
.eh_frame:0000000000005E04                 db  18h
.eh_frame:0000000000005E05                 db  42h ; B
.eh_frame:0000000000005E06                 db  0Eh
.eh_frame:0000000000005E07                 db  10h
.eh_frame:0000000000005E08                 db  42h ; B
.eh_frame:0000000000005E09                 db  0Eh
.eh_frame:0000000000005E0A                 db    8
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db  68h ; h
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db  68h ; h
.eh_frame:0000000000005E11                 db    3
.eh_frame:0000000000005E12                 db    0
.eh_frame:0000000000005E13                 db    0
.eh_frame:0000000000005E14                 db  1Ch
.eh_frame:0000000000005E15                 db 0DAh
.eh_frame:0000000000005E16                 db 0FFh
.eh_frame:0000000000005E17                 db 0FFh
.eh_frame:0000000000005E18                 db 0E3h
.eh_frame:0000000000005E19                 db    0
.eh_frame:0000000000005E1A                 db    0
.eh_frame:0000000000005E1B                 db    0
.eh_frame:0000000000005E1C                 db    0
.eh_frame:0000000000005E1D                 db  42h ; B
.eh_frame:0000000000005E1E                 db  0Eh
.eh_frame:0000000000005E1F                 db  10h
.eh_frame:0000000000005E20                 db  8Fh
.eh_frame:0000000000005E21                 db    2
.eh_frame:0000000000005E22                 db  42h ; B
.eh_frame:0000000000005E23                 db  0Eh
.eh_frame:0000000000005E24                 db  18h
.eh_frame:0000000000005E25                 db  8Eh
.eh_frame:0000000000005E26                 db    3
.eh_frame:0000000000005E27                 db  49h ; I
.eh_frame:0000000000005E28                 db  0Eh
.eh_frame:0000000000005E29                 db  20h
.eh_frame:0000000000005E2A                 db  8Dh
.eh_frame:0000000000005E2B                 db    4
.eh_frame:0000000000005E2C                 db  42h ; B
.eh_frame:0000000000005E2D                 db  0Eh
.eh_frame:0000000000005E2E                 db  28h ; (
.eh_frame:0000000000005E2F                 db  8Ch
.eh_frame:0000000000005E30                 db    5
.eh_frame:0000000000005E31                 db  44h ; D
.eh_frame:0000000000005E32                 db  0Eh
.eh_frame:0000000000005E33                 db  30h ; 0
.eh_frame:0000000000005E34                 db  86h
.eh_frame:0000000000005E35                 db    6
.eh_frame:0000000000005E36                 db  41h ; A
.eh_frame:0000000000005E37                 db  0Eh
.eh_frame:0000000000005E38                 db  38h ; 8
.eh_frame:0000000000005E39                 db  83h
.eh_frame:0000000000005E3A                 db    7
.eh_frame:0000000000005E3B                 db  4Dh ; M
.eh_frame:0000000000005E3C                 db  0Eh
.eh_frame:0000000000005E3D                 db  70h ; p
.eh_frame:0000000000005E3E                 db  65h ; e
.eh_frame:0000000000005E3F                 db  0Eh
.eh_frame:0000000000005E40                 db  78h ; x
.eh_frame:0000000000005E41                 db  4Dh ; M
.eh_frame:0000000000005E42                 db  0Eh
.eh_frame:0000000000005E43                 db  80h
.eh_frame:0000000000005E44                 db    1
.eh_frame:0000000000005E45                 db  46h ; F
.eh_frame:0000000000005E46                 db  0Eh
.eh_frame:0000000000005E47                 db  88h
.eh_frame:0000000000005E48                 db    1
.eh_frame:0000000000005E49                 db  42h ; B
.eh_frame:0000000000005E4A                 db  0Eh
.eh_frame:0000000000005E4B                 db  90h
.eh_frame:0000000000005E4C                 db    1
.eh_frame:0000000000005E4D                 db  5Eh ; ^
.eh_frame:0000000000005E4E                 db  0Eh
.eh_frame:0000000000005E4F                 db  70h ; p
.eh_frame:0000000000005E50                 db  56h ; V
.eh_frame:0000000000005E51                 db  0Eh
.eh_frame:0000000000005E52                 db  78h ; x
.eh_frame:0000000000005E53                 db  43h ; C
.eh_frame:0000000000005E54                 db  0Eh
.eh_frame:0000000000005E55                 db  80h
.eh_frame:0000000000005E56                 db    1
.eh_frame:0000000000005E57                 db  43h ; C
.eh_frame:0000000000005E58                 db  0Eh
.eh_frame:0000000000005E59                 db  88h
.eh_frame:0000000000005E5A                 db    1
.eh_frame:0000000000005E5B                 db  56h ; V
.eh_frame:0000000000005E5C                 db  0Eh
.eh_frame:0000000000005E5D                 db  90h
.eh_frame:0000000000005E5E                 db    1
.eh_frame:0000000000005E5F                 db  52h ; R
.eh_frame:0000000000005E60                 db  0Eh
.eh_frame:0000000000005E61                 db  70h ; p
.eh_frame:0000000000005E62                 db  5Bh ; [
.eh_frame:0000000000005E63                 db  0Eh
.eh_frame:0000000000005E64                 db  38h ; 8
.eh_frame:0000000000005E65                 db  41h ; A
.eh_frame:0000000000005E66                 db  0Eh
.eh_frame:0000000000005E67                 db  30h ; 0
.eh_frame:0000000000005E68                 db  41h ; A
.eh_frame:0000000000005E69                 db  0Eh
.eh_frame:0000000000005E6A                 db  28h ; (
.eh_frame:0000000000005E6B                 db  42h ; B
.eh_frame:0000000000005E6C                 db  0Eh
.eh_frame:0000000000005E6D                 db  20h
.eh_frame:0000000000005E6E                 db  42h ; B
.eh_frame:0000000000005E6F                 db  0Eh
.eh_frame:0000000000005E70                 db  18h
.eh_frame:0000000000005E71                 db  42h ; B
.eh_frame:0000000000005E72                 db  0Eh
.eh_frame:0000000000005E73                 db  10h
.eh_frame:0000000000005E74                 db  42h ; B
.eh_frame:0000000000005E75                 db  0Eh
.eh_frame:0000000000005E76                 db    8
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db  10h
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db 0D4h
.eh_frame:0000000000005E7D                 db    3
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db 0A0h
.eh_frame:0000000000005E81                 db 0DAh
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db  0Ah
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  28h ; (
.eh_frame:0000000000005E8D                 db    0
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db 0E8h
.eh_frame:0000000000005E91                 db    3
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db  9Ch
.eh_frame:0000000000005E95                 db 0DAh
.eh_frame:0000000000005E96                 db 0FFh
.eh_frame:0000000000005E97                 db 0FFh
.eh_frame:0000000000005E98                 db  93h
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db    0
.eh_frame:0000000000005E9D                 db  48h ; H
.eh_frame:0000000000005E9E                 db  0Eh
.eh_frame:0000000000005E9F                 db  10h
.eh_frame:0000000000005EA0                 db  8Ch
.eh_frame:0000000000005EA1                 db    2
.eh_frame:0000000000005EA2                 db  48h ; H
.eh_frame:0000000000005EA3                 db  0Eh
.eh_frame:0000000000005EA4                 db  18h
.eh_frame:0000000000005EA5                 db  86h
.eh_frame:0000000000005EA6                 db    3
.eh_frame:0000000000005EA7                 db  41h ; A
.eh_frame:0000000000005EA8                 db  0Eh
.eh_frame:0000000000005EA9                 db  20h
.eh_frame:0000000000005EAA                 db  83h
.eh_frame:0000000000005EAB                 db    4
.eh_frame:0000000000005EAC                 db    2
.eh_frame:0000000000005EAD                 db  74h ; t
.eh_frame:0000000000005EAE                 db  0Eh
.eh_frame:0000000000005EAF                 db  18h
.eh_frame:0000000000005EB0                 db  4Bh ; K
.eh_frame:0000000000005EB1                 db  0Eh
.eh_frame:0000000000005EB2                 db  10h
.eh_frame:0000000000005EB3                 db  42h ; B
.eh_frame:0000000000005EB4                 db  0Eh
.eh_frame:0000000000005EB5                 db    8
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  10h
.eh_frame:0000000000005EB9                 db    0
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db  14h
.eh_frame:0000000000005EBD                 db    4
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db  10h
.eh_frame:0000000000005EC1                 db 0DBh
.eh_frame:0000000000005EC2                 db 0FFh
.eh_frame:0000000000005EC3                 db 0FFh
.eh_frame:0000000000005EC4                 db  13h
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db    0
.eh_frame:0000000000005EC9                 db    0
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  10h
.eh_frame:0000000000005ECD                 db    0
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db  28h ; (
.eh_frame:0000000000005ED1                 db    4
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db  1Ch
.eh_frame:0000000000005ED5                 db 0DBh
.eh_frame:0000000000005ED6                 db 0FFh
.eh_frame:0000000000005ED7                 db 0FFh
.eh_frame:0000000000005ED8                 db  0Ch
.eh_frame:0000000000005ED9                 db    0
.eh_frame:0000000000005EDA                 db    0
.eh_frame:0000000000005EDB                 db    0
.eh_frame:0000000000005EDC                 db    0
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db  10h
.eh_frame:0000000000005EE1                 db    0
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db  3Ch ; <
.eh_frame:0000000000005EE5                 db    4
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db  18h
.eh_frame:0000000000005EE9                 db 0DBh
.eh_frame:0000000000005EEA                 db 0FFh
.eh_frame:0000000000005EEB                 db 0FFh
.eh_frame:0000000000005EEC                 db  18h
.eh_frame:0000000000005EED                 db    0
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db    0
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db  10h
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db  50h ; P
.eh_frame:0000000000005EF9                 db    4
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db  24h ; $
.eh_frame:0000000000005EFD                 db 0DBh
.eh_frame:0000000000005EFE                 db 0FFh
.eh_frame:0000000000005EFF                 db 0FFh
.eh_frame:0000000000005F00                 db  14h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db    0
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  18h
.eh_frame:0000000000005F09                 db    0
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db  64h ; d
.eh_frame:0000000000005F0D                 db    4
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db  30h ; 0
.eh_frame:0000000000005F11                 db 0DBh
.eh_frame:0000000000005F12                 db 0FFh
.eh_frame:0000000000005F13                 db 0FFh
.eh_frame:0000000000005F14                 db  8Eh
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db    0
.eh_frame:0000000000005F19                 db  44h ; D
.eh_frame:0000000000005F1A                 db  0Eh
.eh_frame:0000000000005F1B                 db  50h ; P
.eh_frame:0000000000005F1C                 db    2
.eh_frame:0000000000005F1D                 db  7Fh ; 
.eh_frame:0000000000005F1E                 db  0Ah
.eh_frame:0000000000005F1F                 db  0Eh
.eh_frame:0000000000005F20                 db    8
.eh_frame:0000000000005F21                 db  41h ; A
.eh_frame:0000000000005F22                 db  0Bh
.eh_frame:0000000000005F23                 db    0
.eh_frame:0000000000005F24                 db  18h
.eh_frame:0000000000005F25                 db    0
.eh_frame:0000000000005F26                 db    0
.eh_frame:0000000000005F27                 db    0
.eh_frame:0000000000005F28                 db  80h
.eh_frame:0000000000005F29                 db    4
.eh_frame:0000000000005F2A                 db    0
.eh_frame:0000000000005F2B                 db    0
.eh_frame:0000000000005F2C                 db 0A4h
.eh_frame:0000000000005F2D                 db 0DBh
.eh_frame:0000000000005F2E                 db 0FFh
.eh_frame:0000000000005F2F                 db 0FFh
.eh_frame:0000000000005F30                 db  8Ah
.eh_frame:0000000000005F31                 db    0
.eh_frame:0000000000005F32                 db    0
.eh_frame:0000000000005F33                 db    0
.eh_frame:0000000000005F34                 db    0
.eh_frame:0000000000005F35                 db  44h ; D
.eh_frame:0000000000005F36                 db  0Eh
.eh_frame:0000000000005F37                 db  50h ; P
.eh_frame:0000000000005F38                 db    2
.eh_frame:0000000000005F39                 db  7Bh ; {
.eh_frame:0000000000005F3A                 db  0Ah
.eh_frame:0000000000005F3B                 db  0Eh
.eh_frame:0000000000005F3C                 db    8
.eh_frame:0000000000005F3D                 db  41h ; A
.eh_frame:0000000000005F3E                 db  0Bh
.eh_frame:0000000000005F3F                 db    0
.eh_frame:0000000000005F40                 db  10h
.eh_frame:0000000000005F41                 db    0
.eh_frame:0000000000005F42                 db    0
.eh_frame:0000000000005F43                 db    0
.eh_frame:0000000000005F44                 db  9Ch
.eh_frame:0000000000005F45                 db    4
.eh_frame:0000000000005F46                 db    0
.eh_frame:0000000000005F47                 db    0
.eh_frame:0000000000005F48                 db  18h
.eh_frame:0000000000005F49                 db 0DCh
.eh_frame:0000000000005F4A                 db 0FFh
.eh_frame:0000000000005F4B                 db 0FFh
.eh_frame:0000000000005F4C                 db  0Ch
.eh_frame:0000000000005F4D                 db    0
.eh_frame:0000000000005F4E                 db    0
.eh_frame:0000000000005F4F                 db    0
.eh_frame:0000000000005F50                 db    0
.eh_frame:0000000000005F51                 db    0
.eh_frame:0000000000005F52                 db    0
.eh_frame:0000000000005F53                 db    0
.eh_frame:0000000000005F54                 db  10h
.eh_frame:0000000000005F55                 db    0
.eh_frame:0000000000005F56                 db    0
.eh_frame:0000000000005F57                 db    0
.eh_frame:0000000000005F58                 db 0B0h
.eh_frame:0000000000005F59                 db    4
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db  14h
.eh_frame:0000000000005F5D                 db 0DCh
.eh_frame:0000000000005F5E                 db 0FFh
.eh_frame:0000000000005F5F                 db 0FFh
.eh_frame:0000000000005F60                 db  0Fh
.eh_frame:0000000000005F61                 db    0
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db    0
.eh_frame:0000000000005F65                 db    0
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db  18h
.eh_frame:0000000000005F69                 db    0
.eh_frame:0000000000005F6A                 db    0
.eh_frame:0000000000005F6B                 db    0
.eh_frame:0000000000005F6C                 db 0C4h
.eh_frame:0000000000005F6D                 db    4
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db  10h
.eh_frame:0000000000005F71                 db 0DCh
.eh_frame:0000000000005F72                 db 0FFh
.eh_frame:0000000000005F73                 db 0FFh
.eh_frame:0000000000005F74                 db  98h
.eh_frame:0000000000005F75                 db    0
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db    0
.eh_frame:0000000000005F79                 db  44h ; D
.eh_frame:0000000000005F7A                 db  0Eh
.eh_frame:0000000000005F7B                 db  50h ; P
.eh_frame:0000000000005F7C                 db    2
.eh_frame:0000000000005F7D                 db  8Eh
.eh_frame:0000000000005F7E                 db  0Ah
.eh_frame:0000000000005F7F                 db  0Eh
.eh_frame:0000000000005F80                 db    8
.eh_frame:0000000000005F81                 db  41h ; A
.eh_frame:0000000000005F82                 db  0Bh
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db  10h
.eh_frame:0000000000005F85                 db    0
.eh_frame:0000000000005F86                 db    0
.eh_frame:0000000000005F87                 db    0
.eh_frame:0000000000005F88                 db 0E0h
.eh_frame:0000000000005F89                 db    4
.eh_frame:0000000000005F8A                 db    0
.eh_frame:0000000000005F8B                 db    0
.eh_frame:0000000000005F8C                 db  94h
.eh_frame:0000000000005F8D                 db 0DCh
.eh_frame:0000000000005F8E                 db 0FFh
.eh_frame:0000000000005F8F                 db 0FFh
.eh_frame:0000000000005F90                 db  10h
.eh_frame:0000000000005F91                 db    0
.eh_frame:0000000000005F92                 db    0
.eh_frame:0000000000005F93                 db    0
.eh_frame:0000000000005F94                 db    0
.eh_frame:0000000000005F95                 db    0
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db  10h
.eh_frame:0000000000005F99                 db    0
.eh_frame:0000000000005F9A                 db    0
.eh_frame:0000000000005F9B                 db    0
.eh_frame:0000000000005F9C                 db 0F4h
.eh_frame:0000000000005F9D                 db    4
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db  90h
.eh_frame:0000000000005FA1                 db 0DCh
.eh_frame:0000000000005FA2                 db 0FFh
.eh_frame:0000000000005FA3                 db 0FFh
.eh_frame:0000000000005FA4                 db  11h
.eh_frame:0000000000005FA5                 db    0
.eh_frame:0000000000005FA6                 db    0
.eh_frame:0000000000005FA7                 db    0
.eh_frame:0000000000005FA8                 db    0
.eh_frame:0000000000005FA9                 db    0
.eh_frame:0000000000005FAA                 db    0
.eh_frame:0000000000005FAB                 db    0
.eh_frame:0000000000005FAC                 db  10h
.eh_frame:0000000000005FAD                 db    0
.eh_frame:0000000000005FAE                 db    0
.eh_frame:0000000000005FAF                 db    0
.eh_frame:0000000000005FB0                 db    8
.eh_frame:0000000000005FB1                 db    5
.eh_frame:0000000000005FB2                 db    0
.eh_frame:0000000000005FB3                 db    0
.eh_frame:0000000000005FB4                 db  9Ch
.eh_frame:0000000000005FB5                 db 0DCh
.eh_frame:0000000000005FB6                 db 0FFh
.eh_frame:0000000000005FB7                 db 0FFh
.eh_frame:0000000000005FB8                 db  0Ah
.eh_frame:0000000000005FB9                 db    0
.eh_frame:0000000000005FBA                 db    0
.eh_frame:0000000000005FBB                 db    0
.eh_frame:0000000000005FBC                 db    0
.eh_frame:0000000000005FBD                 db    0
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db  18h
.eh_frame:0000000000005FC1                 db    0
.eh_frame:0000000000005FC2                 db    0
.eh_frame:0000000000005FC3                 db    0
.eh_frame:0000000000005FC4                 db  1Ch
.eh_frame:0000000000005FC5                 db    5
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db  98h
.eh_frame:0000000000005FC9                 db 0DCh
.eh_frame:0000000000005FCA                 db 0FFh
.eh_frame:0000000000005FCB                 db 0FFh
.eh_frame:0000000000005FCC                 db  8Eh
.eh_frame:0000000000005FCD                 db    0
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db    0
.eh_frame:0000000000005FD1                 db  44h ; D
.eh_frame:0000000000005FD2                 db  0Eh
.eh_frame:0000000000005FD3                 db  50h ; P
.eh_frame:0000000000005FD4                 db    2
.eh_frame:0000000000005FD5                 db  7Fh ; 
.eh_frame:0000000000005FD6                 db  0Ah
.eh_frame:0000000000005FD7                 db  0Eh
.eh_frame:0000000000005FD8                 db    8
.eh_frame:0000000000005FD9                 db  41h ; A
.eh_frame:0000000000005FDA                 db  0Bh
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db  18h
.eh_frame:0000000000005FDD                 db    0
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db  38h ; 8
.eh_frame:0000000000005FE1                 db    5
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db  0Ch
.eh_frame:0000000000005FE5                 db 0DDh
.eh_frame:0000000000005FE6                 db 0FFh
.eh_frame:0000000000005FE7                 db 0FFh
.eh_frame:0000000000005FE8                 db  91h
.eh_frame:0000000000005FE9                 db    0
.eh_frame:0000000000005FEA                 db    0
.eh_frame:0000000000005FEB                 db    0
.eh_frame:0000000000005FEC                 db    0
.eh_frame:0000000000005FED                 db  44h ; D
.eh_frame:0000000000005FEE                 db  0Eh
.eh_frame:0000000000005FEF                 db  50h ; P
.eh_frame:0000000000005FF0                 db    2
.eh_frame:0000000000005FF1                 db  82h
.eh_frame:0000000000005FF2                 db  0Ah
.eh_frame:0000000000005FF3                 db  0Eh
.eh_frame:0000000000005FF4                 db    8
.eh_frame:0000000000005FF5                 db  41h ; A
.eh_frame:0000000000005FF6                 db  0Bh
.eh_frame:0000000000005FF7                 db    0
.eh_frame:0000000000005FF8                 db  10h
.eh_frame:0000000000005FF9                 db    0
.eh_frame:0000000000005FFA                 db    0
.eh_frame:0000000000005FFB                 db    0
.eh_frame:0000000000005FFC                 db  54h ; T
.eh_frame:0000000000005FFD                 db    5
.eh_frame:0000000000005FFE                 db    0
.eh_frame:0000000000005FFF                 db    0
.eh_frame:0000000000006000                 db  90h
.eh_frame:0000000000006001                 db 0DDh
.eh_frame:0000000000006002                 db 0FFh
.eh_frame:0000000000006003                 db 0FFh
.eh_frame:0000000000006004                 db  0Ch
.eh_frame:0000000000006005                 db    0
.eh_frame:0000000000006006                 db    0
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db    0
.eh_frame:0000000000006009                 db    0
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db  10h
.eh_frame:000000000000600D                 db    0
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db  68h ; h
.eh_frame:0000000000006011                 db    5
.eh_frame:0000000000006012                 db    0
.eh_frame:0000000000006013                 db    0
.eh_frame:0000000000006014                 db  8Ch
.eh_frame:0000000000006015                 db 0DDh
.eh_frame:0000000000006016                 db 0FFh
.eh_frame:0000000000006017                 db 0FFh
.eh_frame:0000000000006018                 db  17h
.eh_frame:0000000000006019                 db    0
.eh_frame:000000000000601A                 db    0
.eh_frame:000000000000601B                 db    0
.eh_frame:000000000000601C                 db    0
.eh_frame:000000000000601D                 db    0
.eh_frame:000000000000601E                 db    0
.eh_frame:000000000000601F                 db    0
.eh_frame:0000000000006020                 db  10h
.eh_frame:0000000000006021                 db    0
.eh_frame:0000000000006022                 db    0
.eh_frame:0000000000006023                 db    0
.eh_frame:0000000000006024                 db  7Ch ; |
.eh_frame:0000000000006025                 db    5
.eh_frame:0000000000006026                 db    0
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db  98h
.eh_frame:0000000000006029                 db 0DDh
.eh_frame:000000000000602A                 db 0FFh
.eh_frame:000000000000602B                 db 0FFh
.eh_frame:000000000000602C                 db  13h
.eh_frame:000000000000602D                 db    0
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db    0
.eh_frame:0000000000006031                 db    0
.eh_frame:0000000000006032                 db    0
.eh_frame:0000000000006033                 db    0
.eh_frame:0000000000006034                 db  10h
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db  90h
.eh_frame:0000000000006039                 db    5
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db 0A4h
.eh_frame:000000000000603D                 db 0DDh
.eh_frame:000000000000603E                 db 0FFh
.eh_frame:000000000000603F                 db 0FFh
.eh_frame:0000000000006040                 db  0Ch
.eh_frame:0000000000006041                 db    0
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db    0
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db  10h
.eh_frame:0000000000006049                 db    0
.eh_frame:000000000000604A                 db    0
.eh_frame:000000000000604B                 db    0
.eh_frame:000000000000604C                 db 0A4h
.eh_frame:000000000000604D                 db    5
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db 0A0h
.eh_frame:0000000000006051                 db 0DDh
.eh_frame:0000000000006052                 db 0FFh
.eh_frame:0000000000006053                 db 0FFh
.eh_frame:0000000000006054                 db  14h
.eh_frame:0000000000006055                 db    0
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db    0
.eh_frame:0000000000006059                 db    0
.eh_frame:000000000000605A                 db    0
.eh_frame:000000000000605B                 db    0
.eh_frame:000000000000605C                 db  10h
.eh_frame:000000000000605D                 db    0
.eh_frame:000000000000605E                 db    0
.eh_frame:000000000000605F                 db    0
.eh_frame:0000000000006060                 db 0B8h
.eh_frame:0000000000006061                 db    5
.eh_frame:0000000000006062                 db    0
.eh_frame:0000000000006063                 db    0
.eh_frame:0000000000006064                 db 0ACh
.eh_frame:0000000000006065                 db 0DDh
.eh_frame:0000000000006066                 db 0FFh
.eh_frame:0000000000006067                 db 0FFh
.eh_frame:0000000000006068                 db  13h
.eh_frame:0000000000006069                 db    0
.eh_frame:000000000000606A                 db    0
.eh_frame:000000000000606B                 db    0
.eh_frame:000000000000606C                 db    0
.eh_frame:000000000000606D                 db    0
.eh_frame:000000000000606E                 db    0
.eh_frame:000000000000606F                 db    0
.eh_frame:0000000000006070                 db  14h
.eh_frame:0000000000006071                 db    0
.eh_frame:0000000000006072                 db    0
.eh_frame:0000000000006073                 db    0
.eh_frame:0000000000006074                 db 0CCh
.eh_frame:0000000000006075                 db    5
.eh_frame:0000000000006076                 db    0
.eh_frame:0000000000006077                 db    0
.eh_frame:0000000000006078                 db 0B8h
.eh_frame:0000000000006079                 db 0DDh
.eh_frame:000000000000607A                 db 0FFh
.eh_frame:000000000000607B                 db 0FFh
.eh_frame:000000000000607C                 db  18h
.eh_frame:000000000000607D                 db    0
.eh_frame:000000000000607E                 db    0
.eh_frame:000000000000607F                 db    0
.eh_frame:0000000000006080                 db    0
.eh_frame:0000000000006081                 db    0
.eh_frame:0000000000006082                 db    0
.eh_frame:0000000000006083                 db    0
.eh_frame:0000000000006084                 db    0
.eh_frame:0000000000006085                 db    0
.eh_frame:0000000000006086                 db    0
.eh_frame:0000000000006087                 db    0
.eh_frame:0000000000006088                 db  10h
.eh_frame:0000000000006089                 db    1
.eh_frame:000000000000608A                 db    0
.eh_frame:000000000000608B                 db    0
.eh_frame:000000000000608C                 db 0E4h
.eh_frame:000000000000608D                 db    5
.eh_frame:000000000000608E                 db    0
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db 0C0h
.eh_frame:0000000000006091                 db 0DDh
.eh_frame:0000000000006092                 db 0FFh
.eh_frame:0000000000006093                 db 0FFh
.eh_frame:0000000000006094                 db  17h
.eh_frame:0000000000006095                 db    4
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db    0
.eh_frame:0000000000006099                 db  42h ; B
.eh_frame:000000000000609A                 db  0Eh
.eh_frame:000000000000609B                 db  10h
.eh_frame:000000000000609C                 db  8Fh
.eh_frame:000000000000609D                 db    2
.eh_frame:000000000000609E                 db  42h ; B
.eh_frame:000000000000609F                 db  0Eh
.eh_frame:00000000000060A0                 db  18h
.eh_frame:00000000000060A1                 db  8Eh
.eh_frame:00000000000060A2                 db    3
.eh_frame:00000000000060A3                 db  42h ; B
.eh_frame:00000000000060A4                 db  0Eh
.eh_frame:00000000000060A5                 db  20h
.eh_frame:00000000000060A6                 db  8Dh
.eh_frame:00000000000060A7                 db    4
.eh_frame:00000000000060A8                 db  42h ; B
.eh_frame:00000000000060A9                 db  0Eh
.eh_frame:00000000000060AA                 db  28h ; (
.eh_frame:00000000000060AB                 db  8Ch
.eh_frame:00000000000060AC                 db    5
.eh_frame:00000000000060AD                 db  44h ; D
.eh_frame:00000000000060AE                 db  0Eh
.eh_frame:00000000000060AF                 db  30h ; 0
.eh_frame:00000000000060B0                 db  86h
.eh_frame:00000000000060B1                 db    6
.eh_frame:00000000000060B2                 db  41h ; A
.eh_frame:00000000000060B3                 db  0Eh
.eh_frame:00000000000060B4                 db  38h ; 8
.eh_frame:00000000000060B5                 db  83h
.eh_frame:00000000000060B6                 db    7
.eh_frame:00000000000060B7                 db  4Ah ; J
.eh_frame:00000000000060B8                 db  0Eh
.eh_frame:00000000000060B9                 db  60h ; `
.eh_frame:00000000000060BA                 db    2
.eh_frame:00000000000060BB                 db 0DDh
.eh_frame:00000000000060BC                 db  0Eh
.eh_frame:00000000000060BD                 db  68h ; h
.eh_frame:00000000000060BE                 db  57h ; W
.eh_frame:00000000000060BF                 db  0Eh
.eh_frame:00000000000060C0                 db  70h ; p
.eh_frame:00000000000060C1                 db  42h ; B
.eh_frame:00000000000060C2                 db  0Eh
.eh_frame:00000000000060C3                 db  78h ; x
.eh_frame:00000000000060C4                 db  42h ; B
.eh_frame:00000000000060C5                 db  0Eh
.eh_frame:00000000000060C6                 db  80h
.eh_frame:00000000000060C7                 db    1
.eh_frame:00000000000060C8                 db  42h ; B
.eh_frame:00000000000060C9                 db  0Eh
.eh_frame:00000000000060CA                 db  88h
.eh_frame:00000000000060CB                 db    1
.eh_frame:00000000000060CC                 db  42h ; B
.eh_frame:00000000000060CD                 db  0Eh
.eh_frame:00000000000060CE                 db  90h
.eh_frame:00000000000060CF                 db    1
.eh_frame:00000000000060D0                 db  53h ; S
.eh_frame:00000000000060D1                 db  0Eh
.eh_frame:00000000000060D2                 db  60h ; `
.eh_frame:00000000000060D3                 db  44h ; D
.eh_frame:00000000000060D4                 db  0Ah
.eh_frame:00000000000060D5                 db  0Eh
.eh_frame:00000000000060D6                 db  38h ; 8
.eh_frame:00000000000060D7                 db  41h ; A
.eh_frame:00000000000060D8                 db  0Eh
.eh_frame:00000000000060D9                 db  30h ; 0
.eh_frame:00000000000060DA                 db  41h ; A
.eh_frame:00000000000060DB                 db  0Eh
.eh_frame:00000000000060DC                 db  28h ; (
.eh_frame:00000000000060DD                 db  42h ; B
.eh_frame:00000000000060DE                 db  0Eh
.eh_frame:00000000000060DF                 db  20h
.eh_frame:00000000000060E0                 db  42h ; B
.eh_frame:00000000000060E1                 db  0Eh
.eh_frame:00000000000060E2                 db  18h
.eh_frame:00000000000060E3                 db  42h ; B
.eh_frame:00000000000060E4                 db  0Eh
.eh_frame:00000000000060E5                 db  10h
.eh_frame:00000000000060E6                 db  42h ; B
.eh_frame:00000000000060E7                 db  0Eh
.eh_frame:00000000000060E8                 db    8
.eh_frame:00000000000060E9                 db  44h ; D
.eh_frame:00000000000060EA                 db  0Bh
.eh_frame:00000000000060EB                 db    2
.eh_frame:00000000000060EC                 db  78h ; x
.eh_frame:00000000000060ED                 db  0Ah
.eh_frame:00000000000060EE                 db  0Eh
.eh_frame:00000000000060EF                 db  68h ; h
.eh_frame:00000000000060F0                 db  48h ; H
.eh_frame:00000000000060F1                 db  0Bh
.eh_frame:00000000000060F2                 db  5Ah ; Z
.eh_frame:00000000000060F3                 db  0Ah
.eh_frame:00000000000060F4                 db  0Eh
.eh_frame:00000000000060F5                 db  38h ; 8
.eh_frame:00000000000060F6                 db  47h ; G
.eh_frame:00000000000060F7                 db  0Eh
.eh_frame:00000000000060F8                 db  30h ; 0
.eh_frame:00000000000060F9                 db  41h ; A
.eh_frame:00000000000060FA                 db  0Eh
.eh_frame:00000000000060FB                 db  28h ; (
.eh_frame:00000000000060FC                 db  42h ; B
.eh_frame:00000000000060FD                 db  0Eh
.eh_frame:00000000000060FE                 db  20h
.eh_frame:00000000000060FF                 db  42h ; B
.eh_frame:0000000000006100                 db  0Eh
.eh_frame:0000000000006101                 db  18h
.eh_frame:0000000000006102                 db  42h ; B
.eh_frame:0000000000006103                 db  0Eh
.eh_frame:0000000000006104                 db  10h
.eh_frame:0000000000006105                 db  42h ; B
.eh_frame:0000000000006106                 db  0Eh
.eh_frame:0000000000006107                 db    8
.eh_frame:0000000000006108                 db  56h ; V
.eh_frame:0000000000006109                 db  0Bh
.eh_frame:000000000000610A                 db  5Eh ; ^
.eh_frame:000000000000610B                 db  0Ah
.eh_frame:000000000000610C                 db  0Eh
.eh_frame:000000000000610D                 db  38h ; 8
.eh_frame:000000000000610E                 db  52h ; R
.eh_frame:000000000000610F                 db  0Eh
.eh_frame:0000000000006110                 db  30h ; 0
.eh_frame:0000000000006111                 db  41h ; A
.eh_frame:0000000000006112                 db  0Eh
.eh_frame:0000000000006113                 db  28h ; (
.eh_frame:0000000000006114                 db  42h ; B
.eh_frame:0000000000006115                 db  0Eh
.eh_frame:0000000000006116                 db  20h
.eh_frame:0000000000006117                 db  42h ; B
.eh_frame:0000000000006118                 db  0Eh
.eh_frame:0000000000006119                 db  18h
.eh_frame:000000000000611A                 db  42h ; B
.eh_frame:000000000000611B                 db  0Eh
.eh_frame:000000000000611C                 db  10h
.eh_frame:000000000000611D                 db  42h ; B
.eh_frame:000000000000611E                 db  0Eh
.eh_frame:000000000000611F                 db    8
.eh_frame:0000000000006120                 db  4Fh ; O
.eh_frame:0000000000006121                 db  0Bh
.eh_frame:0000000000006122                 db  62h ; b
.eh_frame:0000000000006123                 db  0Ah
.eh_frame:0000000000006124                 db  0Eh
.eh_frame:0000000000006125                 db  38h ; 8
.eh_frame:0000000000006126                 db  50h ; P
.eh_frame:0000000000006127                 db  0Eh
.eh_frame:0000000000006128                 db  30h ; 0
.eh_frame:0000000000006129                 db  41h ; A
.eh_frame:000000000000612A                 db  0Eh
.eh_frame:000000000000612B                 db  28h ; (
.eh_frame:000000000000612C                 db  42h ; B
.eh_frame:000000000000612D                 db  0Eh
.eh_frame:000000000000612E                 db  20h
.eh_frame:000000000000612F                 db  42h ; B
.eh_frame:0000000000006130                 db  0Eh
.eh_frame:0000000000006131                 db  18h
.eh_frame:0000000000006132                 db  42h ; B
.eh_frame:0000000000006133                 db  0Eh
.eh_frame:0000000000006134                 db  10h
.eh_frame:0000000000006135                 db  42h ; B
.eh_frame:0000000000006136                 db  0Eh
.eh_frame:0000000000006137                 db    8
.eh_frame:0000000000006138                 db  55h ; U
.eh_frame:0000000000006139                 db  0Bh
.eh_frame:000000000000613A                 db  66h ; f
.eh_frame:000000000000613B                 db  0Eh
.eh_frame:000000000000613C                 db  68h ; h
.eh_frame:000000000000613D                 db  42h ; B
.eh_frame:000000000000613E                 db  0Eh
.eh_frame:000000000000613F                 db  70h ; p
.eh_frame:0000000000006140                 db  5Ch ; \
.eh_frame:0000000000006141                 db  0Eh
.eh_frame:0000000000006142                 db  68h ; h
.eh_frame:0000000000006143                 db  41h ; A
.eh_frame:0000000000006144                 db  0Eh
.eh_frame:0000000000006145                 db  60h ; `
.eh_frame:0000000000006146                 db  44h ; D
.eh_frame:0000000000006147                 db  0Ah
.eh_frame:0000000000006148                 db  0Eh
.eh_frame:0000000000006149                 db  38h ; 8
.eh_frame:000000000000614A                 db  41h ; A
.eh_frame:000000000000614B                 db  0Eh
.eh_frame:000000000000614C                 db  30h ; 0
.eh_frame:000000000000614D                 db  41h ; A
.eh_frame:000000000000614E                 db  0Eh
.eh_frame:000000000000614F                 db  28h ; (
.eh_frame:0000000000006150                 db  42h ; B
.eh_frame:0000000000006151                 db  0Eh
.eh_frame:0000000000006152                 db  20h
.eh_frame:0000000000006153                 db  42h ; B
.eh_frame:0000000000006154                 db  0Eh
.eh_frame:0000000000006155                 db  18h
.eh_frame:0000000000006156                 db  42h ; B
.eh_frame:0000000000006157                 db  0Eh
.eh_frame:0000000000006158                 db  10h
.eh_frame:0000000000006159                 db  42h ; B
.eh_frame:000000000000615A                 db  0Eh
.eh_frame:000000000000615B                 db    8
.eh_frame:000000000000615C                 db  45h ; E
.eh_frame:000000000000615D                 db  0Bh
.eh_frame:000000000000615E                 db  68h ; h
.eh_frame:000000000000615F                 db  0Ah
.eh_frame:0000000000006160                 db  0Eh
.eh_frame:0000000000006161                 db  68h ; h
.eh_frame:0000000000006162                 db  48h ; H
.eh_frame:0000000000006163                 db  0Bh
.eh_frame:0000000000006164                 db  72h ; r
.eh_frame:0000000000006165                 db  0Eh
.eh_frame:0000000000006166                 db  68h ; h
.eh_frame:0000000000006167                 db  45h ; E
.eh_frame:0000000000006168                 db  0Eh
.eh_frame:0000000000006169                 db  70h ; p
.eh_frame:000000000000616A                 db  42h ; B
.eh_frame:000000000000616B                 db  0Eh
.eh_frame:000000000000616C                 db  78h ; x
.eh_frame:000000000000616D                 db  42h ; B
.eh_frame:000000000000616E                 db  0Eh
.eh_frame:000000000000616F                 db  80h
.eh_frame:0000000000006170                 db    1
.eh_frame:0000000000006171                 db  5Eh ; ^
.eh_frame:0000000000006172                 db  0Eh
.eh_frame:0000000000006173                 db  60h ; `
.eh_frame:0000000000006174                 db  44h ; D
.eh_frame:0000000000006175                 db  0Ah
.eh_frame:0000000000006176                 db  0Eh
.eh_frame:0000000000006177                 db  38h ; 8
.eh_frame:0000000000006178                 db  41h ; A
.eh_frame:0000000000006179                 db  0Eh
.eh_frame:000000000000617A                 db  30h ; 0
.eh_frame:000000000000617B                 db  41h ; A
.eh_frame:000000000000617C                 db  0Eh
.eh_frame:000000000000617D                 db  28h ; (
.eh_frame:000000000000617E                 db  42h ; B
.eh_frame:000000000000617F                 db  0Eh
.eh_frame:0000000000006180                 db  20h
.eh_frame:0000000000006181                 db  42h ; B
.eh_frame:0000000000006182                 db  0Eh
.eh_frame:0000000000006183                 db  18h
.eh_frame:0000000000006184                 db  42h ; B
.eh_frame:0000000000006185                 db  0Eh
.eh_frame:0000000000006186                 db  10h
.eh_frame:0000000000006187                 db  42h ; B
.eh_frame:0000000000006188                 db  0Eh
.eh_frame:0000000000006189                 db    8
.eh_frame:000000000000618A                 db  41h ; A
.eh_frame:000000000000618B                 db  0Bh
.eh_frame:000000000000618C                 db  79h ; y
.eh_frame:000000000000618D                 db  0Ah
.eh_frame:000000000000618E                 db  0Eh
.eh_frame:000000000000618F                 db  68h ; h
.eh_frame:0000000000006190                 db  42h ; B
.eh_frame:0000000000006191                 db  0Eh
.eh_frame:0000000000006192                 db  70h ; p
.eh_frame:0000000000006193                 db  42h ; B
.eh_frame:0000000000006194                 db  0Eh
.eh_frame:0000000000006195                 db  78h ; x
.eh_frame:0000000000006196                 db  42h ; B
.eh_frame:0000000000006197                 db  0Eh
.eh_frame:0000000000006198                 db  80h
.eh_frame:0000000000006199                 db    1
.eh_frame:000000000000619A                 db  51h ; Q
.eh_frame:000000000000619B                 db  0Bh
.eh_frame:000000000000619C                 db  10h
.eh_frame:000000000000619D                 db    0
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db 0F8h
.eh_frame:00000000000061A1                 db    6
.eh_frame:00000000000061A2                 db    0
.eh_frame:00000000000061A3                 db    0
.eh_frame:00000000000061A4                 db 0CCh
.eh_frame:00000000000061A5                 db 0E0h
.eh_frame:00000000000061A6                 db 0FFh
.eh_frame:00000000000061A7                 db 0FFh
.eh_frame:00000000000061A8                 db  20h
.eh_frame:00000000000061A9                 db    0
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db    0
.eh_frame:00000000000061AD                 db    0
.eh_frame:00000000000061AE                 db    0
.eh_frame:00000000000061AF                 db    0
.eh_frame:00000000000061B0                 db  18h
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db  0Ch
.eh_frame:00000000000061B5                 db    7
.eh_frame:00000000000061B6                 db    0
.eh_frame:00000000000061B7                 db    0
.eh_frame:00000000000061B8                 db 0D8h
.eh_frame:00000000000061B9                 db 0E0h
.eh_frame:00000000000061BA                 db 0FFh
.eh_frame:00000000000061BB                 db 0FFh
.eh_frame:00000000000061BC                 db  78h ; x
.eh_frame:00000000000061BD                 db    0
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db    0
.eh_frame:00000000000061C1                 db  44h ; D
.eh_frame:00000000000061C2                 db  0Eh
.eh_frame:00000000000061C3                 db  70h ; p
.eh_frame:00000000000061C4                 db    2
.eh_frame:00000000000061C5                 db  60h ; `
.eh_frame:00000000000061C6                 db  0Ah
.eh_frame:00000000000061C7                 db  0Eh
.eh_frame:00000000000061C8                 db    8
.eh_frame:00000000000061C9                 db  41h ; A
.eh_frame:00000000000061CA                 db  0Bh
.eh_frame:00000000000061CB                 db    0
.eh_frame:00000000000061CC                 db  28h ; (
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db  28h ; (
.eh_frame:00000000000061D1                 db    7
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db  3Ch ; <
.eh_frame:00000000000061D5                 db 0E1h
.eh_frame:00000000000061D6                 db 0FFh
.eh_frame:00000000000061D7                 db 0FFh
.eh_frame:00000000000061D8                 db 0D5h
.eh_frame:00000000000061D9                 db    0
.eh_frame:00000000000061DA                 db    0
.eh_frame:00000000000061DB                 db    0
.eh_frame:00000000000061DC                 db    0
.eh_frame:00000000000061DD                 db  41h ; A
.eh_frame:00000000000061DE                 db  0Eh
.eh_frame:00000000000061DF                 db  10h
.eh_frame:00000000000061E0                 db  86h
.eh_frame:00000000000061E1                 db    2
.eh_frame:00000000000061E2                 db  41h ; A
.eh_frame:00000000000061E3                 db  0Eh
.eh_frame:00000000000061E4                 db  18h
.eh_frame:00000000000061E5                 db  83h
.eh_frame:00000000000061E6                 db    3
.eh_frame:00000000000061E7                 db  50h ; P
.eh_frame:00000000000061E8                 db  0Eh
.eh_frame:00000000000061E9                 db 0D0h
.eh_frame:00000000000061EA                 db    1
.eh_frame:00000000000061EB                 db    2
.eh_frame:00000000000061EC                 db 0ABh
.eh_frame:00000000000061ED                 db  0Ah
.eh_frame:00000000000061EE                 db  0Eh
.eh_frame:00000000000061EF                 db  18h
.eh_frame:00000000000061F0                 db  41h ; A
.eh_frame:00000000000061F1                 db  0Eh
.eh_frame:00000000000061F2                 db  10h
.eh_frame:00000000000061F3                 db  41h ; A
.eh_frame:00000000000061F4                 db  0Eh
.eh_frame:00000000000061F5                 db    8
.eh_frame:00000000000061F6                 db  41h ; A
.eh_frame:00000000000061F7                 db  0Bh
.eh_frame:00000000000061F8                 db  1Ch
.eh_frame:00000000000061F9                 db    0
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db  54h ; T
.eh_frame:00000000000061FD                 db    7
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db 0F0h
.eh_frame:0000000000006201                 db 0E1h
.eh_frame:0000000000006202                 db 0FFh
.eh_frame:0000000000006203                 db 0FFh
.eh_frame:0000000000006204                 db  80h
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db  41h ; A
.eh_frame:000000000000620A                 db  0Eh
.eh_frame:000000000000620B                 db  10h
.eh_frame:000000000000620C                 db  83h
.eh_frame:000000000000620D                 db    2
.eh_frame:000000000000620E                 db    2
.eh_frame:000000000000620F                 db  7Ah ; z
.eh_frame:0000000000006210                 db  0Eh
.eh_frame:0000000000006211                 db    8
.eh_frame:0000000000006212                 db    0
.eh_frame:0000000000006213                 db    0
.eh_frame:0000000000006214                 db    0
.eh_frame:0000000000006215                 db    0
.eh_frame:0000000000006216                 db    0
.eh_frame:0000000000006217                 db    0
.eh_frame:0000000000006218                 db  18h
.eh_frame:0000000000006219                 db    0
.eh_frame:000000000000621A                 db    0
.eh_frame:000000000000621B                 db    0
.eh_frame:000000000000621C                 db  74h ; t
.eh_frame:000000000000621D                 db    7
.eh_frame:000000000000621E                 db    0
.eh_frame:000000000000621F                 db    0
.eh_frame:0000000000006220                 db  50h ; P
.eh_frame:0000000000006221                 db 0E2h
.eh_frame:0000000000006222                 db 0FFh
.eh_frame:0000000000006223                 db 0FFh
.eh_frame:0000000000006224                 db  1Ah
.eh_frame:0000000000006225                 db    0
.eh_frame:0000000000006226                 db    0
.eh_frame:0000000000006227                 db    0
.eh_frame:0000000000006228                 db    0
.eh_frame:0000000000006229                 db  41h ; A
.eh_frame:000000000000622A                 db  0Eh
.eh_frame:000000000000622B                 db  10h
.eh_frame:000000000000622C                 db  83h
.eh_frame:000000000000622D                 db    2
.eh_frame:000000000000622E                 db  53h ; S
.eh_frame:000000000000622F                 db  0Ah
.eh_frame:0000000000006230                 db  0Eh
.eh_frame:0000000000006231                 db    8
.eh_frame:0000000000006232                 db  41h ; A
.eh_frame:0000000000006233                 db  0Bh
.eh_frame:0000000000006234                 db  10h
.eh_frame:0000000000006235                 db    0
.eh_frame:0000000000006236                 db    0
.eh_frame:0000000000006237                 db    0
.eh_frame:0000000000006238                 db  90h
.eh_frame:0000000000006239                 db    7
.eh_frame:000000000000623A                 db    0
.eh_frame:000000000000623B                 db    0
.eh_frame:000000000000623C                 db  54h ; T
.eh_frame:000000000000623D                 db 0E2h
.eh_frame:000000000000623E                 db 0FFh
.eh_frame:000000000000623F                 db 0FFh
.eh_frame:0000000000006240                 db  24h ; $
.eh_frame:0000000000006241                 db    0
.eh_frame:0000000000006242                 db    0
.eh_frame:0000000000006243                 db    0
.eh_frame:0000000000006244                 db    0
.eh_frame:0000000000006245                 db  5Fh ; _
.eh_frame:0000000000006246                 db  0Eh
.eh_frame:0000000000006247                 db  10h
.eh_frame:0000000000006248                 db  10h
.eh_frame:0000000000006249                 db    0
.eh_frame:000000000000624A                 db    0
.eh_frame:000000000000624B                 db    0
.eh_frame:000000000000624C                 db 0A4h
.eh_frame:000000000000624D                 db    7
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db  70h ; p
.eh_frame:0000000000006251                 db 0E2h
.eh_frame:0000000000006252                 db 0FFh
.eh_frame:0000000000006253                 db 0FFh
.eh_frame:0000000000006254                 db    2
.eh_frame:0000000000006255                 db    0
.eh_frame:0000000000006256                 db    0
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db    0
.eh_frame:0000000000006259                 db    0
.eh_frame:000000000000625A                 db    0
.eh_frame:000000000000625B                 db    0
.eh_frame:000000000000625C                 db  20h
.eh_frame:000000000000625D                 db    0
.eh_frame:000000000000625E                 db    0
.eh_frame:000000000000625F                 db    0
.eh_frame:0000000000006260                 db 0B8h
.eh_frame:0000000000006261                 db    7
.eh_frame:0000000000006262                 db    0
.eh_frame:0000000000006263                 db    0
.eh_frame:0000000000006264                 db  6Ch ; l
.eh_frame:0000000000006265                 db 0E2h
.eh_frame:0000000000006266                 db 0FFh
.eh_frame:0000000000006267                 db 0FFh
.eh_frame:0000000000006268                 db  36h ; 6
.eh_frame:0000000000006269                 db    0
.eh_frame:000000000000626A                 db    0
.eh_frame:000000000000626B                 db    0
.eh_frame:000000000000626C                 db    0
.eh_frame:000000000000626D                 db  44h ; D
.eh_frame:000000000000626E                 db  0Eh
.eh_frame:000000000000626F                 db  10h
.eh_frame:0000000000006270                 db  83h
.eh_frame:0000000000006271                 db    2
.eh_frame:0000000000006272                 db  5Dh ; ]
.eh_frame:0000000000006273                 db  0Ah
.eh_frame:0000000000006274                 db  0Eh
.eh_frame:0000000000006275                 db    8
.eh_frame:0000000000006276                 db  47h ; G
.eh_frame:0000000000006277                 db  0Bh
.eh_frame:0000000000006278                 db  48h ; H
.eh_frame:0000000000006279                 db  0Ah
.eh_frame:000000000000627A                 db  0Eh
.eh_frame:000000000000627B                 db    8
.eh_frame:000000000000627C                 db  41h ; A
.eh_frame:000000000000627D                 db  0Bh
.eh_frame:000000000000627E                 db    0
.eh_frame:000000000000627F                 db    0
.eh_frame:0000000000006280                 db  10h
.eh_frame:0000000000006281                 db    0
.eh_frame:0000000000006282                 db    0
.eh_frame:0000000000006283                 db    0
.eh_frame:0000000000006284                 db 0DCh
.eh_frame:0000000000006285                 db    7
.eh_frame:0000000000006286                 db    0
.eh_frame:0000000000006287                 db    0
.eh_frame:0000000000006288                 db  88h
.eh_frame:0000000000006289                 db 0E2h
.eh_frame:000000000000628A                 db 0FFh
.eh_frame:000000000000628B                 db 0FFh
.eh_frame:000000000000628C                 db  24h ; $
.eh_frame:000000000000628D                 db    0
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db    0
.eh_frame:0000000000006291                 db  5Fh ; _
.eh_frame:0000000000006292                 db  0Eh
.eh_frame:0000000000006293                 db  10h
.eh_frame:0000000000006294                 db  14h
.eh_frame:0000000000006295                 db    0
.eh_frame:0000000000006296                 db    0
.eh_frame:0000000000006297                 db    0
.eh_frame:0000000000006298                 db 0F0h
.eh_frame:0000000000006299                 db    7
.eh_frame:000000000000629A                 db    0
.eh_frame:000000000000629B                 db    0
.eh_frame:000000000000629C                 db 0A4h
.eh_frame:000000000000629D                 db 0E2h
.eh_frame:000000000000629E                 db 0FFh
.eh_frame:000000000000629F                 db 0FFh
.eh_frame:00000000000062A0                 db  82h
.eh_frame:00000000000062A1                 db    0
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db    0
.eh_frame:00000000000062A5                 db    2
.eh_frame:00000000000062A6                 db  5Fh ; _
.eh_frame:00000000000062A7                 db  0Eh
.eh_frame:00000000000062A8                 db  10h
.eh_frame:00000000000062A9                 db  49h ; I
.eh_frame:00000000000062AA                 db  0Eh
.eh_frame:00000000000062AB                 db    8
.eh_frame:00000000000062AC                 db  14h
.eh_frame:00000000000062AD                 db    0
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db    8
.eh_frame:00000000000062B1                 db    8
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db  1Ch
.eh_frame:00000000000062B5                 db 0E3h
.eh_frame:00000000000062B6                 db 0FFh
.eh_frame:00000000000062B7                 db 0FFh
.eh_frame:00000000000062B8                 db  4Ah ; J
.eh_frame:00000000000062B9                 db    0
.eh_frame:00000000000062BA                 db    0
.eh_frame:00000000000062BB                 db    0
.eh_frame:00000000000062BC                 db    0
.eh_frame:00000000000062BD                 db    2
.eh_frame:00000000000062BE                 db  45h ; E
.eh_frame:00000000000062BF                 db  0Eh
.eh_frame:00000000000062C0                 db  10h
.eh_frame:00000000000062C1                 db    0
.eh_frame:00000000000062C2                 db    0
.eh_frame:00000000000062C3                 db    0
.eh_frame:00000000000062C4                 db  18h
.eh_frame:00000000000062C5                 db    0
.eh_frame:00000000000062C6                 db    0
.eh_frame:00000000000062C7                 db    0
.eh_frame:00000000000062C8                 db  20h
.eh_frame:00000000000062C9                 db    8
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db  54h ; T
.eh_frame:00000000000062CD                 db 0E3h
.eh_frame:00000000000062CE                 db 0FFh
.eh_frame:00000000000062CF                 db 0FFh
.eh_frame:00000000000062D0                 db  17h
.eh_frame:00000000000062D1                 db    0
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db    0
.eh_frame:00000000000062D5                 db  41h ; A
.eh_frame:00000000000062D6                 db  0Eh
.eh_frame:00000000000062D7                 db  10h
.eh_frame:00000000000062D8                 db  83h
.eh_frame:00000000000062D9                 db    2
.eh_frame:00000000000062DA                 db  51h ; Q
.eh_frame:00000000000062DB                 db  0Eh
.eh_frame:00000000000062DC                 db    8
.eh_frame:00000000000062DD                 db    0
.eh_frame:00000000000062DE                 db    0
.eh_frame:00000000000062DF                 db    0
.eh_frame:00000000000062E0                 db  18h
.eh_frame:00000000000062E1                 db    0
.eh_frame:00000000000062E2                 db    0
.eh_frame:00000000000062E3                 db    0
.eh_frame:00000000000062E4                 db  3Ch ; <
.eh_frame:00000000000062E5                 db    8
.eh_frame:00000000000062E6                 db    0
.eh_frame:00000000000062E7                 db    0
.eh_frame:00000000000062E8                 db  58h ; X
.eh_frame:00000000000062E9                 db 0E3h
.eh_frame:00000000000062EA                 db 0FFh
.eh_frame:00000000000062EB                 db 0FFh
.eh_frame:00000000000062EC                 db  2Eh ; .
.eh_frame:00000000000062ED                 db    0
.eh_frame:00000000000062EE                 db    0
.eh_frame:00000000000062EF                 db    0
.eh_frame:00000000000062F0                 db    0
.eh_frame:00000000000062F1                 db  47h ; G
.eh_frame:00000000000062F2                 db  0Eh
.eh_frame:00000000000062F3                 db  10h
.eh_frame:00000000000062F4                 db  61h ; a
.eh_frame:00000000000062F5                 db  0Ah
.eh_frame:00000000000062F6                 db  0Eh
.eh_frame:00000000000062F7                 db    8
.eh_frame:00000000000062F8                 db  41h ; A
.eh_frame:00000000000062F9                 db  0Bh
.eh_frame:00000000000062FA                 db    0
.eh_frame:00000000000062FB                 db    0
.eh_frame:00000000000062FC                 db  24h ; $
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db  58h ; X
.eh_frame:0000000000006301                 db    8
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db  6Ch ; l
.eh_frame:0000000000006305                 db 0E3h
.eh_frame:0000000000006306                 db 0FFh
.eh_frame:0000000000006307                 db 0FFh
.eh_frame:0000000000006308                 db  28h ; (
.eh_frame:0000000000006309                 db    0
.eh_frame:000000000000630A                 db    0
.eh_frame:000000000000630B                 db    0
.eh_frame:000000000000630C                 db    0
.eh_frame:000000000000630D                 db  41h ; A
.eh_frame:000000000000630E                 db  0Eh
.eh_frame:000000000000630F                 db  10h
.eh_frame:0000000000006310                 db  86h
.eh_frame:0000000000006311                 db    2
.eh_frame:0000000000006312                 db  41h ; A
.eh_frame:0000000000006313                 db  0Eh
.eh_frame:0000000000006314                 db  18h
.eh_frame:0000000000006315                 db  83h
.eh_frame:0000000000006316                 db    3
.eh_frame:0000000000006317                 db  4Dh ; M
.eh_frame:0000000000006318                 db  0Eh
.eh_frame:0000000000006319                 db  20h
.eh_frame:000000000000631A                 db  49h ; I
.eh_frame:000000000000631B                 db  0Eh
.eh_frame:000000000000631C                 db  18h
.eh_frame:000000000000631D                 db  47h ; G
.eh_frame:000000000000631E                 db  0Eh
.eh_frame:000000000000631F                 db  10h
.eh_frame:0000000000006320                 db  41h ; A
.eh_frame:0000000000006321                 db  0Eh
.eh_frame:0000000000006322                 db    8
.eh_frame:0000000000006323                 db    0
.eh_frame:0000000000006324                 db  18h
.eh_frame:0000000000006325                 db    0
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db  80h
.eh_frame:0000000000006329                 db    8
.eh_frame:000000000000632A                 db    0
.eh_frame:000000000000632B                 db    0
.eh_frame:000000000000632C                 db  74h ; t
.eh_frame:000000000000632D                 db 0E3h
.eh_frame:000000000000632E                 db 0FFh
.eh_frame:000000000000632F                 db 0FFh
.eh_frame:0000000000006330                 db  13h
.eh_frame:0000000000006331                 db    0
.eh_frame:0000000000006332                 db    0
.eh_frame:0000000000006333                 db    0
.eh_frame:0000000000006334                 db    0
.eh_frame:0000000000006335                 db  41h ; A
.eh_frame:0000000000006336                 db  0Eh
.eh_frame:0000000000006337                 db  10h
.eh_frame:0000000000006338                 db  83h
.eh_frame:0000000000006339                 db    2
.eh_frame:000000000000633A                 db  50h ; P
.eh_frame:000000000000633B                 db  0Eh
.eh_frame:000000000000633C                 db    8
.eh_frame:000000000000633D                 db    0
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db  14h
.eh_frame:0000000000006341                 db    0
.eh_frame:0000000000006342                 db    0
.eh_frame:0000000000006343                 db    0
.eh_frame:0000000000006344                 db  9Ch
.eh_frame:0000000000006345                 db    8
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db  78h ; x
.eh_frame:0000000000006349                 db 0E3h
.eh_frame:000000000000634A                 db 0FFh
.eh_frame:000000000000634B                 db 0FFh
.eh_frame:000000000000634C                 db  35h ; 5
.eh_frame:000000000000634D                 db    0
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db    0
.eh_frame:0000000000006351                 db  4Bh ; K
.eh_frame:0000000000006352                 db  0Eh
.eh_frame:0000000000006353                 db  10h
.eh_frame:0000000000006354                 db    0
.eh_frame:0000000000006355                 db    0
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db  14h
.eh_frame:0000000000006359                 db    0
.eh_frame:000000000000635A                 db    0
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db 0B4h
.eh_frame:000000000000635D                 db    8
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db 0A0h
.eh_frame:0000000000006361                 db 0E3h
.eh_frame:0000000000006362                 db 0FFh
.eh_frame:0000000000006363                 db 0FFh
.eh_frame:0000000000006364                 db  1Eh
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db    0
.eh_frame:0000000000006369                 db    0
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db    0
.eh_frame:000000000000636D                 db    0
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db  3Ch ; <
.eh_frame:0000000000006371                 db    0
.eh_frame:0000000000006372                 db    0
.eh_frame:0000000000006373                 db    0
.eh_frame:0000000000006374                 db 0CCh
.eh_frame:0000000000006375                 db    8
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db 0A8h
.eh_frame:0000000000006379                 db 0E3h
.eh_frame:000000000000637A                 db 0FFh
.eh_frame:000000000000637B                 db 0FFh
.eh_frame:000000000000637C                 db  83h
.eh_frame:000000000000637D                 db    0
.eh_frame:000000000000637E                 db    0
.eh_frame:000000000000637F                 db    0
.eh_frame:0000000000006380                 db    0
.eh_frame:0000000000006381                 db  42h ; B
.eh_frame:0000000000006382                 db  0Eh
.eh_frame:0000000000006383                 db  10h
.eh_frame:0000000000006384                 db  8Dh
.eh_frame:0000000000006385                 db    2
.eh_frame:0000000000006386                 db  42h ; B
.eh_frame:0000000000006387                 db  0Eh
.eh_frame:0000000000006388                 db  18h
.eh_frame:0000000000006389                 db  8Ch
.eh_frame:000000000000638A                 db    3
.eh_frame:000000000000638B                 db  44h ; D
.eh_frame:000000000000638C                 db  0Eh
.eh_frame:000000000000638D                 db  20h
.eh_frame:000000000000638E                 db  86h
.eh_frame:000000000000638F                 db    4
.eh_frame:0000000000006390                 db  41h ; A
.eh_frame:0000000000006391                 db  0Eh
.eh_frame:0000000000006392                 db  28h ; (
.eh_frame:0000000000006393                 db  83h
.eh_frame:0000000000006394                 db    5
.eh_frame:0000000000006395                 db  4Ah ; J
.eh_frame:0000000000006396                 db  0Eh
.eh_frame:0000000000006397                 db  40h ; @
.eh_frame:0000000000006398                 db    2
.eh_frame:0000000000006399                 db  64h ; d
.eh_frame:000000000000639A                 db  0Ah
.eh_frame:000000000000639B                 db  0Eh
.eh_frame:000000000000639C                 db  28h ; (
.eh_frame:000000000000639D                 db  41h ; A
.eh_frame:000000000000639E                 db  0Eh
.eh_frame:000000000000639F                 db  20h
.eh_frame:00000000000063A0                 db  41h ; A
.eh_frame:00000000000063A1                 db  0Eh
.eh_frame:00000000000063A2                 db  18h
.eh_frame:00000000000063A3                 db  42h ; B
.eh_frame:00000000000063A4                 db  0Eh
.eh_frame:00000000000063A5                 db  10h
.eh_frame:00000000000063A6                 db  42h ; B
.eh_frame:00000000000063A7                 db  0Eh
.eh_frame:00000000000063A8                 db    8
.eh_frame:00000000000063A9                 db  41h ; A
.eh_frame:00000000000063AA                 db  0Bh
.eh_frame:00000000000063AB                 db    0
.eh_frame:00000000000063AC                 db    0
.eh_frame:00000000000063AD                 db    0
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db  4Ch ; L
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db  0Ch
.eh_frame:00000000000063B5                 db    9
.eh_frame:00000000000063B6                 db    0
.eh_frame:00000000000063B7                 db    0
.eh_frame:00000000000063B8                 db 0F8h
.eh_frame:00000000000063B9                 db 0E3h
.eh_frame:00000000000063BA                 db 0FFh
.eh_frame:00000000000063BB                 db 0FFh
.eh_frame:00000000000063BC                 db  7Dh ; }
.eh_frame:00000000000063BD                 db    0
.eh_frame:00000000000063BE                 db    0
.eh_frame:00000000000063BF                 db    0
.eh_frame:00000000000063C0                 db    0
.eh_frame:00000000000063C1                 db  42h ; B
.eh_frame:00000000000063C2                 db  0Eh
.eh_frame:00000000000063C3                 db  10h
.eh_frame:00000000000063C4                 db  8Ch
.eh_frame:00000000000063C5                 db    2
.eh_frame:00000000000063C6                 db  41h ; A
.eh_frame:00000000000063C7                 db  0Eh
.eh_frame:00000000000063C8                 db  18h
.eh_frame:00000000000063C9                 db  86h
.eh_frame:00000000000063CA                 db    3
.eh_frame:00000000000063CB                 db  44h ; D
.eh_frame:00000000000063CC                 db  0Eh
.eh_frame:00000000000063CD                 db  20h
.eh_frame:00000000000063CE                 db  83h
.eh_frame:00000000000063CF                 db    4
.eh_frame:00000000000063D0                 db  69h ; i
.eh_frame:00000000000063D1                 db  0Ah
.eh_frame:00000000000063D2                 db  0Eh
.eh_frame:00000000000063D3                 db  18h
.eh_frame:00000000000063D4                 db  41h ; A
.eh_frame:00000000000063D5                 db  0Eh
.eh_frame:00000000000063D6                 db  10h
.eh_frame:00000000000063D7                 db  42h ; B
.eh_frame:00000000000063D8                 db  0Eh
.eh_frame:00000000000063D9                 db    8
.eh_frame:00000000000063DA                 db  45h ; E
.eh_frame:00000000000063DB                 db  0Bh
.eh_frame:00000000000063DC                 db  55h ; U
.eh_frame:00000000000063DD                 db  0Ah
.eh_frame:00000000000063DE                 db  0Eh
.eh_frame:00000000000063DF                 db  18h
.eh_frame:00000000000063E0                 db  41h ; A
.eh_frame:00000000000063E1                 db  0Eh
.eh_frame:00000000000063E2                 db  10h
.eh_frame:00000000000063E3                 db  42h ; B
.eh_frame:00000000000063E4                 db  0Eh
.eh_frame:00000000000063E5                 db    8
.eh_frame:00000000000063E6                 db  48h ; H
.eh_frame:00000000000063E7                 db  0Bh
.eh_frame:00000000000063E8                 db  41h ; A
.eh_frame:00000000000063E9                 db  0Ah
.eh_frame:00000000000063EA                 db  0Eh
.eh_frame:00000000000063EB                 db  18h
.eh_frame:00000000000063EC                 db  46h ; F
.eh_frame:00000000000063ED                 db  0Eh
.eh_frame:00000000000063EE                 db  10h
.eh_frame:00000000000063EF                 db  42h ; B
.eh_frame:00000000000063F0                 db  0Eh
.eh_frame:00000000000063F1                 db    8
.eh_frame:00000000000063F2                 db  47h ; G
.eh_frame:00000000000063F3                 db  0Bh
.eh_frame:00000000000063F4                 db  49h ; I
.eh_frame:00000000000063F5                 db  0Eh
.eh_frame:00000000000063F6                 db  18h
.eh_frame:00000000000063F7                 db  41h ; A
.eh_frame:00000000000063F8                 db  0Eh
.eh_frame:00000000000063F9                 db  10h
.eh_frame:00000000000063FA                 db  42h ; B
.eh_frame:00000000000063FB                 db  0Eh
.eh_frame:00000000000063FC                 db    8
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db  1Ch
.eh_frame:0000000000006401                 db    0
.eh_frame:0000000000006402                 db    0
.eh_frame:0000000000006403                 db    0
.eh_frame:0000000000006404                 db  5Ch ; \
.eh_frame:0000000000006405                 db    9
.eh_frame:0000000000006406                 db    0
.eh_frame:0000000000006407                 db    0
.eh_frame:0000000000006408                 db  28h ; (
.eh_frame:0000000000006409                 db 0E4h
.eh_frame:000000000000640A                 db 0FFh
.eh_frame:000000000000640B                 db 0FFh
.eh_frame:000000000000640C                 db  60h ; `
.eh_frame:000000000000640D                 db    0
.eh_frame:000000000000640E                 db    0
.eh_frame:000000000000640F                 db    0
.eh_frame:0000000000006410                 db    0
.eh_frame:0000000000006411                 db  44h ; D
.eh_frame:0000000000006412                 db  0Eh
.eh_frame:0000000000006413                 db  10h
.eh_frame:0000000000006414                 db  75h ; u
.eh_frame:0000000000006415                 db  0Ah
.eh_frame:0000000000006416                 db  0Eh
.eh_frame:0000000000006417                 db    8
.eh_frame:0000000000006418                 db  47h ; G
.eh_frame:0000000000006419                 db  0Bh
.eh_frame:000000000000641A                 db  5Fh ; _
.eh_frame:000000000000641B                 db  0Eh
.eh_frame:000000000000641C                 db    8
.eh_frame:000000000000641D                 db    0
.eh_frame:000000000000641E                 db    0
.eh_frame:000000000000641F                 db    0
.eh_frame:0000000000006420                 db  1Ch
.eh_frame:0000000000006421                 db    0
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db  7Ch ; |
.eh_frame:0000000000006425                 db    9
.eh_frame:0000000000006426                 db    0
.eh_frame:0000000000006427                 db    0
.eh_frame:0000000000006428                 db  68h ; h
.eh_frame:0000000000006429                 db 0E4h
.eh_frame:000000000000642A                 db 0FFh
.eh_frame:000000000000642B                 db 0FFh
.eh_frame:000000000000642C                 db  3Ch ; <
.eh_frame:000000000000642D                 db    0
.eh_frame:000000000000642E                 db    0
.eh_frame:000000000000642F                 db    0
.eh_frame:0000000000006430                 db    0
.eh_frame:0000000000006431                 db  44h ; D
.eh_frame:0000000000006432                 db  0Eh
.eh_frame:0000000000006433                 db  10h
.eh_frame:0000000000006434                 db  61h ; a
.eh_frame:0000000000006435                 db  0Ah
.eh_frame:0000000000006436                 db  0Eh
.eh_frame:0000000000006437                 db    8
.eh_frame:0000000000006438                 db  4Bh ; K
.eh_frame:0000000000006439                 db  0Bh
.eh_frame:000000000000643A                 db  4Bh ; K
.eh_frame:000000000000643B                 db  0Eh
.eh_frame:000000000000643C                 db    8
.eh_frame:000000000000643D                 db    0
.eh_frame:000000000000643E                 db    0
.eh_frame:000000000000643F                 db    0
.eh_frame:0000000000006440                 db  34h ; 4
.eh_frame:0000000000006441                 db    0
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db  9Ch
.eh_frame:0000000000006445                 db    9
.eh_frame:0000000000006446                 db    0
.eh_frame:0000000000006447                 db    0
.eh_frame:0000000000006448                 db  88h
.eh_frame:0000000000006449                 db 0E4h
.eh_frame:000000000000644A                 db 0FFh
.eh_frame:000000000000644B                 db 0FFh
.eh_frame:000000000000644C                 db  7Bh ; {
.eh_frame:000000000000644D                 db    0
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db    0
.eh_frame:0000000000006451                 db  42h ; B
.eh_frame:0000000000006452                 db  0Eh
.eh_frame:0000000000006453                 db  10h
.eh_frame:0000000000006454                 db  8Ch
.eh_frame:0000000000006455                 db    2
.eh_frame:0000000000006456                 db  41h ; A
.eh_frame:0000000000006457                 db  0Eh
.eh_frame:0000000000006458                 db  18h
.eh_frame:0000000000006459                 db  86h
.eh_frame:000000000000645A                 db    3
.eh_frame:000000000000645B                 db  41h ; A
.eh_frame:000000000000645C                 db  0Eh
.eh_frame:000000000000645D                 db  20h
.eh_frame:000000000000645E                 db  83h
.eh_frame:000000000000645F                 db    4
.eh_frame:0000000000006460                 db  7Dh ; }
.eh_frame:0000000000006461                 db  0Ah
.eh_frame:0000000000006462                 db  0Eh
.eh_frame:0000000000006463                 db  18h
.eh_frame:0000000000006464                 db  41h ; A
.eh_frame:0000000000006465                 db  0Eh
.eh_frame:0000000000006466                 db  10h
.eh_frame:0000000000006467                 db  42h ; B
.eh_frame:0000000000006468                 db  0Eh
.eh_frame:0000000000006469                 db    8
.eh_frame:000000000000646A                 db  44h ; D
.eh_frame:000000000000646B                 db  0Bh
.eh_frame:000000000000646C                 db  60h ; `
.eh_frame:000000000000646D                 db  0Ah
.eh_frame:000000000000646E                 db  0Eh
.eh_frame:000000000000646F                 db  18h
.eh_frame:0000000000006470                 db  41h ; A
.eh_frame:0000000000006471                 db  0Eh
.eh_frame:0000000000006472                 db  10h
.eh_frame:0000000000006473                 db  42h ; B
.eh_frame:0000000000006474                 db  0Eh
.eh_frame:0000000000006475                 db    8
.eh_frame:0000000000006476                 db  45h ; E
.eh_frame:0000000000006477                 db  0Bh
.eh_frame:0000000000006478                 db  1Ch
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db 0D4h
.eh_frame:000000000000647D                 db    9
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db 0D0h
.eh_frame:0000000000006481                 db 0E4h
.eh_frame:0000000000006482                 db 0FFh
.eh_frame:0000000000006483                 db 0FFh
.eh_frame:0000000000006484                 db  40h ; @
.eh_frame:0000000000006485                 db    0
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db    0
.eh_frame:0000000000006489                 db  44h ; D
.eh_frame:000000000000648A                 db  0Eh
.eh_frame:000000000000648B                 db  10h
.eh_frame:000000000000648C                 db  83h
.eh_frame:000000000000648D                 db    2
.eh_frame:000000000000648E                 db  5Ah ; Z
.eh_frame:000000000000648F                 db  0Ah
.eh_frame:0000000000006490                 db  0Eh
.eh_frame:0000000000006491                 db    8
.eh_frame:0000000000006492                 db  4Ah ; J
.eh_frame:0000000000006493                 db  0Bh
.eh_frame:0000000000006494                 db  53h ; S
.eh_frame:0000000000006495                 db  0Eh
.eh_frame:0000000000006496                 db    8
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db  2Ch ; ,
.eh_frame:0000000000006499                 db    0
.eh_frame:000000000000649A                 db    0
.eh_frame:000000000000649B                 db    0
.eh_frame:000000000000649C                 db 0F4h
.eh_frame:000000000000649D                 db    9
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db 0F0h
.eh_frame:00000000000064A1                 db 0E4h
.eh_frame:00000000000064A2                 db 0FFh
.eh_frame:00000000000064A3                 db 0FFh
.eh_frame:00000000000064A4                 db  57h ; W
.eh_frame:00000000000064A5                 db    0
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db    0
.eh_frame:00000000000064A9                 db  63h ; c
.eh_frame:00000000000064AA                 db  0Eh
.eh_frame:00000000000064AB                 db  10h
.eh_frame:00000000000064AC                 db  8Ch
.eh_frame:00000000000064AD                 db    2
.eh_frame:00000000000064AE                 db  41h ; A
.eh_frame:00000000000064AF                 db  0Eh
.eh_frame:00000000000064B0                 db  18h
.eh_frame:00000000000064B1                 db  86h
.eh_frame:00000000000064B2                 db    3
.eh_frame:00000000000064B3                 db  44h ; D
.eh_frame:00000000000064B4                 db  0Eh
.eh_frame:00000000000064B5                 db  20h
.eh_frame:00000000000064B6                 db  83h
.eh_frame:00000000000064B7                 db    4
.eh_frame:00000000000064B8                 db  6Bh ; k
.eh_frame:00000000000064B9                 db  0Eh
.eh_frame:00000000000064BA                 db  18h
.eh_frame:00000000000064BB                 db  41h ; A
.eh_frame:00000000000064BC                 db  0Eh
.eh_frame:00000000000064BD                 db  10h
.eh_frame:00000000000064BE                 db  42h ; B
.eh_frame:00000000000064BF                 db  0Eh
.eh_frame:00000000000064C0                 db    8
.eh_frame:00000000000064C1                 db    0
.eh_frame:00000000000064C2                 db    0
.eh_frame:00000000000064C3                 db    0
.eh_frame:00000000000064C4                 db    0
.eh_frame:00000000000064C5                 db    0
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db  44h ; D
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db  24h ; $
.eh_frame:00000000000064CD                 db  0Ah
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db  20h
.eh_frame:00000000000064D1                 db 0E5h
.eh_frame:00000000000064D2                 db 0FFh
.eh_frame:00000000000064D3                 db 0FFh
.eh_frame:00000000000064D4                 db  65h ; e
.eh_frame:00000000000064D5                 db    0
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    0
.eh_frame:00000000000064D9                 db  42h ; B
.eh_frame:00000000000064DA                 db  0Eh
.eh_frame:00000000000064DB                 db  10h
.eh_frame:00000000000064DC                 db  8Fh
.eh_frame:00000000000064DD                 db    2
.eh_frame:00000000000064DE                 db  42h ; B
.eh_frame:00000000000064DF                 db  0Eh
.eh_frame:00000000000064E0                 db  18h
.eh_frame:00000000000064E1                 db  8Eh
.eh_frame:00000000000064E2                 db    3
.eh_frame:00000000000064E3                 db  45h ; E
.eh_frame:00000000000064E4                 db  0Eh
.eh_frame:00000000000064E5                 db  20h
.eh_frame:00000000000064E6                 db  8Dh
.eh_frame:00000000000064E7                 db    4
.eh_frame:00000000000064E8                 db  42h ; B
.eh_frame:00000000000064E9                 db  0Eh
.eh_frame:00000000000064EA                 db  28h ; (
.eh_frame:00000000000064EB                 db  8Ch
.eh_frame:00000000000064EC                 db    5
.eh_frame:00000000000064ED                 db  48h ; H
.eh_frame:00000000000064EE                 db  0Eh
.eh_frame:00000000000064EF                 db  30h ; 0
.eh_frame:00000000000064F0                 db  86h
.eh_frame:00000000000064F1                 db    6
.eh_frame:00000000000064F2                 db  48h ; H
.eh_frame:00000000000064F3                 db  0Eh
.eh_frame:00000000000064F4                 db  38h ; 8
.eh_frame:00000000000064F5                 db  83h
.eh_frame:00000000000064F6                 db    7
.eh_frame:00000000000064F7                 db  4Dh ; M
.eh_frame:00000000000064F8                 db  0Eh
.eh_frame:00000000000064F9                 db  40h ; @
.eh_frame:00000000000064FA                 db  72h ; r
.eh_frame:00000000000064FB                 db  0Eh
.eh_frame:00000000000064FC                 db  38h ; 8
.eh_frame:00000000000064FD                 db  41h ; A
.eh_frame:00000000000064FE                 db  0Eh
.eh_frame:00000000000064FF                 db  30h ; 0
.eh_frame:0000000000006500                 db  41h ; A
.eh_frame:0000000000006501                 db  0Eh
.eh_frame:0000000000006502                 db  28h ; (
.eh_frame:0000000000006503                 db  42h ; B
.eh_frame:0000000000006504                 db  0Eh
.eh_frame:0000000000006505                 db  20h
.eh_frame:0000000000006506                 db  42h ; B
.eh_frame:0000000000006507                 db  0Eh
.eh_frame:0000000000006508                 db  18h
.eh_frame:0000000000006509                 db  42h ; B
.eh_frame:000000000000650A                 db  0Eh
.eh_frame:000000000000650B                 db  10h
.eh_frame:000000000000650C                 db  42h ; B
.eh_frame:000000000000650D                 db  0Eh
.eh_frame:000000000000650E                 db    8
.eh_frame:000000000000650F                 db    0
.eh_frame:0000000000006510                 db  14h
.eh_frame:0000000000006511                 db    0
.eh_frame:0000000000006512                 db    0
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db  6Ch ; l
.eh_frame:0000000000006515                 db  0Ah
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db  48h ; H
.eh_frame:0000000000006519                 db 0E5h
.eh_frame:000000000000651A                 db 0FFh
.eh_frame:000000000000651B                 db 0FFh
.eh_frame:000000000000651C                 db    2
.eh_frame:000000000000651D                 db    0
.eh_frame:000000000000651E                 db    0
.eh_frame:000000000000651F                 db    0
.eh_frame:0000000000006520                 db    0
.eh_frame:0000000000006521                 db    0
.eh_frame:0000000000006522                 db    0
.eh_frame:0000000000006523                 db    0
.eh_frame:0000000000006524                 db    0
.eh_frame:0000000000006525                 db    0
.eh_frame:0000000000006526                 db    0
.eh_frame:0000000000006527                 db    0
.eh_frame:0000000000006528                 db  10h
.eh_frame:0000000000006529                 db    0
.eh_frame:000000000000652A                 db    0
.eh_frame:000000000000652B                 db    0
.eh_frame:000000000000652C                 db  84h
.eh_frame:000000000000652D                 db  0Ah
.eh_frame:000000000000652E                 db    0
.eh_frame:000000000000652F                 db    0
.eh_frame:0000000000006530                 db  40h ; @
.eh_frame:0000000000006531                 db 0E5h
.eh_frame:0000000000006532                 db 0FFh
.eh_frame:0000000000006533                 db 0FFh
.eh_frame:0000000000006534                 db  0Eh
.eh_frame:0000000000006535                 db    0
.eh_frame:0000000000006536                 db    0
.eh_frame:0000000000006537                 db    0
.eh_frame:0000000000006538                 db    0
.eh_frame:0000000000006539                 db    0
.eh_frame:000000000000653A                 db    0
.eh_frame:000000000000653B                 db    0
.eh_frame:000000000000653C __FRAME_END__   db    0
.eh_frame:000000000000653D                 db    0
.eh_frame:000000000000653E                 db    0
.eh_frame:000000000000653F                 db    0
.eh_frame:000000000000653F _eh_frame       ends
.eh_frame:000000000000653F
.init_array:0000000000206B90 ; ELF Initialization Function Table
.init_array:0000000000206B90 ; ===========================================================================
.init_array:0000000000206B90
.init_array:0000000000206B90 ; Segment type: Pure data
.init_array:0000000000206B90 ; Segment permissions: Read/Write
.init_array:0000000000206B90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B90                 assume cs:_init_array
.init_array:0000000000206B90                 ;org 206B90h
.init_array:0000000000206B90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B90
.fini_array:0000000000206B98 ; ELF Termination Function Table
.fini_array:0000000000206B98 ; ===========================================================================
.fini_array:0000000000206B98
.fini_array:0000000000206B98 ; Segment type: Pure data
.fini_array:0000000000206B98 ; Segment permissions: Read/Write
.fini_array:0000000000206B98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B98                 assume cs:_fini_array
.fini_array:0000000000206B98                 ;org 206B98h
.fini_array:0000000000206B98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B98
.data.rel.ro:0000000000206BA0 ; ===========================================================================
.data.rel.ro:0000000000206BA0
.data.rel.ro:0000000000206BA0 ; Segment type: Pure data
.data.rel.ro:0000000000206BA0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BA0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BA0                 ;org 206BA0h
.data.rel.ro:0000000000206BA0 ; struct option longopts
.data.rel.ro:0000000000206BA0 longopts        dq offset aPortability  ; name
.data.rel.ro:0000000000206BA0                                         ; DATA XREF: main:loc_15A5↑o
.data.rel.ro:0000000000206BA0                 dd 0                    ; has_arg ; "portability"
.data.rel.ro:0000000000206BA0                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq 0                    ; flag
.data.rel.ro:0000000000206BA0                 dd 80h                  ; val
.data.rel.ro:0000000000206BA0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1240h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4A80h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206B90h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206B98h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 818h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 298h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 408h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E38h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B80h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B20h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0AB0h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 13h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1260↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1260+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 pathconf_ptr    dq offset pathconf      ; DATA XREF: _pathconf↑r
.got:0000000000206EC0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000206EF0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EF0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206F00 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F08 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000206F10 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F18 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F20 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F28 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000206F30 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F38 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F38                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F40 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F48 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F50 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F58 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F60 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F68 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F70 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F78 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F80 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F88 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F90 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FE0                                         ; DATA XREF: start+24↑r
.got:0000000000206FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF8 _got            ends
.got:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+D9↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_20F2↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_356D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000788↑o
.bss:0000000000207080                                         ; LOAD:00000000000007D0↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000770↑o
.bss:0000000000207088                                         ; main+D2↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000800↑o
.bss:0000000000207090                                         ; main:loc_1659↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:00000000000007A0↑o
.bss:0000000000207098                                         ; LOAD:00000000000007B8↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070A0 ; FILE *stderr
.bss:00000000002070A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:00000000002070A0                                         ; usage+3D↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'stderr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070A9                 align 10h
.bss:00000000002070B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070B0                                         ; close_stdout+1B↑r
.bss:00000000002070B1                 align 8
.bss:00000000002070B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070B8                                         ; close_stdout+56↑r
.bss:00000000002070C0                 public program_name
.bss:00000000002070C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070C0                                         ; set_program_name:loc_218D↑w
.bss:00000000002070C8                 align 20h
.bss:00000000002070E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002070E0                                         ; quotearg_free+46↑o ...
.bss:00000000002070E1                 db    ? ;
.bss:00000000002070E2                 db    ? ;
.bss:00000000002070E3                 db    ? ;
.bss:00000000002070E4                 db    ? ;
.bss:00000000002070E5                 db    ? ;
.bss:00000000002070E6                 db    ? ;
.bss:00000000002070E7                 db    ? ;
.bss:00000000002070E8                 db    ? ;
.bss:00000000002070E9                 db    ? ;
.bss:00000000002070EA                 db    ? ;
.bss:00000000002070EB                 db    ? ;
.bss:00000000002070EC                 db    ? ;
.bss:00000000002070ED                 db    ? ;
.bss:00000000002070EE                 db    ? ;
.bss:00000000002070EF                 db    ? ;
.bss:00000000002070F0                 db    ? ;
.bss:00000000002070F1                 db    ? ;
.bss:00000000002070F2                 db    ? ;
.bss:00000000002070F3                 db    ? ;
.bss:00000000002070F4                 db    ? ;
.bss:00000000002070F5                 db    ? ;
.bss:00000000002070F6                 db    ? ;
.bss:00000000002070F7                 db    ? ;
.bss:00000000002070F8                 db    ? ;
.bss:00000000002070F9                 db    ? ;
.bss:00000000002070FA                 db    ? ;
.bss:00000000002070FB                 db    ? ;
.bss:00000000002070FC                 db    ? ;
.bss:00000000002070FD                 db    ? ;
.bss:00000000002070FE                 db    ? ;
.bss:00000000002070FF                 db    ? ;
.bss:0000000000207100                 db    ? ;
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002071E0                                         ; get_quoting_style↑o ...
.bss:00000000002071F0 xmmword_2071F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002071F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207200 xmmword_207200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207210 qword_207210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207218 internal_state  db    ? ;               ; DATA XREF: rpl_mbrlen↑o
.bss:0000000000207219                 db    ? ;
.bss:000000000020721A                 db    ? ;
.bss:000000000020721B                 db    ? ;
.bss:000000000020721C                 db    ? ;
.bss:000000000020721D                 db    ? ;
.bss:000000000020721E                 db    ? ;
.bss:000000000020721F                 db    ? ;
.bss:000000000020721F _bss            ends
.bss:000000000020721F
.prgend:0000000000207220 ; ===========================================================================
.prgend:0000000000207220
.prgend:0000000000207220 ; Segment type: Zero-length
.prgend:0000000000207220 _prgend         segment byte public '' use64
.prgend:0000000000207220 _end            label byte
.prgend:0000000000207220 _prgend         ends
.prgend:0000000000207220
extern:0000000000207228 ; ===========================================================================
extern:0000000000207228
extern:0000000000207228 ; Segment type: Externs
extern:0000000000207228 ; extern
extern:0000000000207228 ; void free(void *ptr)
extern:0000000000207228                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207228                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207230 ; void __noreturn abort(void)
extern:0000000000207230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207230                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207238 ; int *_errno_location(void)
extern:0000000000207238                 extrn __errno_location:near
extern:0000000000207238                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207240 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207240                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207240                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207248 ; void __noreturn exit(int status)
extern:0000000000207248                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207248                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207250 ; size_t _fpending(FILE *fp)
extern:0000000000207250                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207250                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207258 ; char *textdomain(const char *domainname)
extern:0000000000207258                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207258                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207260 ; __int64 pathconf(const char *path, int name)
extern:0000000000207260                 extrn pathconf:near     ; CODE XREF: _pathconf↑j
extern:0000000000207260                                         ; DATA XREF: .got:pathconf_ptr↑o
extern:0000000000207268 ; int fclose(FILE *stream)
extern:0000000000207268                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207268                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207270 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207270                 extrn bindtextdomain:near
extern:0000000000207270                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207278 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207278                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207278                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207280 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207280                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207280                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207280                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207288 ; size_t strlen(const char *s)
extern:0000000000207288                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207288                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000207290 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000207290                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000207290                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:0000000000207298                 extrn __stack_chk_fail:near
extern:0000000000207298                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000207298                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072A8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072A8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072A8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B0 ; char *strchr(const char *s, int c)
extern:00000000002072B0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002072B0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002072B8 ; char *strrchr(const char *s, int c)
extern:00000000002072B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D0 ; size_t strspn(const char *s, const char *accept)
extern:00000000002072D0                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:00000000002072D0                                         ; DATA XREF: .got:strspn_ptr↑o
extern:00000000002072D8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D8                 extrn __libc_start_main:near
extern:00000000002072D8                                         ; CODE XREF: start+24↑p
extern:00000000002072D8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E8                 extrn fputs_unlocked:near
extern:00000000002072E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; void *malloc(size_t size)
extern:0000000000207308                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207308                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207310 ; int fflush(FILE *stream)
extern:0000000000207310                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207310                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207318 ; char *nl_langinfo(nl_item item)
extern:0000000000207318                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207318                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207320 ; int _freading(FILE *fp)
extern:0000000000207320                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207320                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207328 ; void *realloc(void *ptr, size_t size)
extern:0000000000207328                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207328                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207330 ; char *setlocale(int category, const char *locale)
extern:0000000000207330                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207330                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207338                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207338                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207340 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207340                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207340                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207348 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207348                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207348                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207350 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207350                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207350                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207358 ; void __noreturn exit(int status)
extern:0000000000207358                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207358                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207360 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207360                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207360                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207368                 extrn __fprintf_chk:near
extern:0000000000207368                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207368                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207370 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207370                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207370                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207378 ; int iswprint(wint_t wc)
extern:0000000000207378                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207378                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207380 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207380                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207380                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207380                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207388 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207388                 extrn __ctype_b_loc:near
extern:0000000000207388                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207388                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207390                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207398                 extrn __gmon_start__:near ; weak
extern:0000000000207398                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207398                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A0
extern:00000000002073A0
extern:00000000002073A0                 end start
