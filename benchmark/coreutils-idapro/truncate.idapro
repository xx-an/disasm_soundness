LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7A780FFCE44716334060F6C9032B28EF56254A4C7BE4D25FBC641DB9161982E1
LOAD:0000000000000000 ; Input MD5    : A2502646D211DA3D7F9C343C2D1FEB4F
LOAD:0000000000000000 ; Input CRC32  : B77027ED
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/truncate
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'truncate.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoimax.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 28098h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7830h                ; Size in file image
LOAD:00000000000000D8                 dq 7830h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 570h                 ; Size in file image
LOAD:0000000000000110                 dq 728h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6A7Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6A7Ch                ; Physical address
LOAD:00000000000001B0                 dq 254h                 ; Size in file image
LOAD:00000000000001B8                 dq 254h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 61h, 0A9h, 26h, 4Bh, 83h, 0B9h, 17h, 0DEh, 96h, 47h ; Desc
LOAD:0000000000000284                 db 0B9h, 1, 1Eh, 0EEh, 7Dh, 0BDh, 0EEh, 0CFh, 0D2h, 2Dh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 35h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 35h, 36h, 3Bh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_898, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_898, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_898, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_898, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_898, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aStrtolInternal - offset byte_898, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_898, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_898, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_898, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_898, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_898, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_898, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_898, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_898, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_898, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrrchr - offset byte_898, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aFtruncate - offset byte_898, 12h, 0, 0, \ ; "ftruncate"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_898, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_898, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFclose+1 - offset byte_898, 12h, 0, 0, \ ; "close"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLibcStartMain - offset byte_898, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcmp - offset byte_898, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFputsUnlocked - offset byte_898, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aCalloc - offset byte_898, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGmonStart - offset byte_898, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcpy - offset byte_898, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFileno - offset byte_898, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aXstat - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000005E0                            0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMalloc - offset byte_898, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFflush - offset byte_898, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aNlLanginfo - offset byte_898, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFxstat - offset byte_898, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_898, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aRealloc - offset byte_898, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aSetlocale - offset byte_898, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPrintfChk - offset byte_898, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aError - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006B8                            0>
LOAD:00000000000006D0                 Elf64_Sym <offset aOpen - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFseeko - offset byte_898, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaAtexit - offset byte_898, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aExit+1 - offset byte_898, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFwrite - offset byte_898, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFprintfChk - offset byte_898, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aItmRegistertmc - offset byte_898, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMbsinit - offset byte_898, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aIswprint - offset byte_898, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aCxaFinalize - offset byte_898, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCtypeBLoc - offset byte_898, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aStdout - offset byte_898, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007D8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aProgname - offset byte_898, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007F0                            offset __bss_start, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgramInvocat - offset byte_898, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000808                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aPrognameFull - offset byte_898, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000820                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_898, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStderr - offset byte_898, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000850                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aOptind - offset byte_898, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000868                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000880                 Elf64_Sym <offset aOptarg - offset byte_898, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000880                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000898 ; ELF String Table
LOAD:0000000000000898 byte_898        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000898                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000899 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:00000000000008A3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000008AA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008B7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008C1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000008C9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000008D1 aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008DB aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000008E2 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008EA aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000008F4 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008FA aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:000000000000090B aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000914 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:000000000000091C aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000922 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000922                                         ; LOAD:0000000000000718↑o
LOAD:0000000000000928 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000928                                         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000940 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:000000000000094E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000094E                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000965 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:000000000000096C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000973 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:000000000000097A aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000098B aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000992 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009A0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009A7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009AD aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009B4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000009B4                                         ; LOAD:0000000000000520↑o
LOAD:00000000000009BB aStrtolInternal db '__strtol_internal',0
LOAD:00000000000009BB                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000009CD aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000009D4 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009DC aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000009E8 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000009F6 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:00000000000009FD aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A08 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A0F aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A1B aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A24 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A2B aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000A32 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A3D aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000A42 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A49 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A49                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A67 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A76 aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A7E aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A7E                                         ; LOAD:00000000000003A0↑o
LOAD:0000000000000A8D aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A8D                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A9F aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AA6 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AB5 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000ABA aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AC5 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AD5 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AE2 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000AEC aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:0000000000000AF8 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000B03 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B0D aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B19 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B19                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000B35 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B44 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B44                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000B5E ; ELF GNU Symbol Version Table
LOAD:0000000000000B5E                 dw 0
LOAD:0000000000000B60                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B62                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B6A                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B7C                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B7E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; ftruncate@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B9A                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B9C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BB0                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BBE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BC0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BC8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000BD8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BD8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_898, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BE8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_898, \ ; "GLIBC_2.3"
LOAD:0000000000000BE8                                10h>
LOAD:0000000000000BF8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_898, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BF8                                10h>
LOAD:0000000000000C08                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_898, \ ; "GLIBC_2.14"
LOAD:0000000000000C08                                10h>
LOAD:0000000000000C18                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_898, \ ; "GLIBC_2.4"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_898, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C38 ; ELF RELA Relocation Table
LOAD:0000000000000C38                 Elf64_Rela <207B10h, 8, 21C0h> ; R_X86_64_RELATIVE +21C0h
LOAD:0000000000000C50                 Elf64_Rela <207B18h, 8, 2180h> ; R_X86_64_RELATIVE +2180h
LOAD:0000000000000C68                 Elf64_Rela <207B20h, 8, 59E3h> ; R_X86_64_RELATIVE +59E3h
LOAD:0000000000000C80                 Elf64_Rela <207B40h, 8, 595Dh> ; R_X86_64_RELATIVE +595Dh
LOAD:0000000000000C98                 Elf64_Rela <207B60h, 8, 594Ah> ; R_X86_64_RELATIVE +594Ah
LOAD:0000000000000CB0                 Elf64_Rela <207B80h, 8, 5956h> ; R_X86_64_RELATIVE +5956h
LOAD:0000000000000CC8                 Elf64_Rela <207BA0h, 8, 59EDh> ; R_X86_64_RELATIVE +59EDh
LOAD:0000000000000CE0                 Elf64_Rela <207BC0h, 8, 59F2h> ; R_X86_64_RELATIVE +59F2h
LOAD:0000000000000CF8                 Elf64_Rela <207C00h, 8, 6109h> ; R_X86_64_RELATIVE +6109h
LOAD:0000000000000D10                 Elf64_Rela <207C08h, 8, 6111h> ; R_X86_64_RELATIVE +6111h
LOAD:0000000000000D28                 Elf64_Rela <207C10h, 8, 6117h> ; R_X86_64_RELATIVE +6117h
LOAD:0000000000000D40                 Elf64_Rela <207C18h, 8, 6124h> ; R_X86_64_RELATIVE +6124h
LOAD:0000000000000D58                 Elf64_Rela <207C20h, 8, 6131h> ; R_X86_64_RELATIVE +6131h
LOAD:0000000000000D70                 Elf64_Rela <207C28h, 8, 6145h> ; R_X86_64_RELATIVE +6145h
LOAD:0000000000000D88                 Elf64_Rela <207C30h, 8, 6147h> ; R_X86_64_RELATIVE +6147h
LOAD:0000000000000DA0                 Elf64_Rela <207C38h, 8, 612Ah> ; R_X86_64_RELATIVE +612Ah
LOAD:0000000000000DB8                 Elf64_Rela <207C40h, 8, 58FEh> ; R_X86_64_RELATIVE +58FEh
LOAD:0000000000000DD0                 Elf64_Rela <207C48h, 8, 614Fh> ; R_X86_64_RELATIVE +614Fh
LOAD:0000000000000DE8                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E00                 Elf64_Rela <208010h, 8, 6093h> ; R_X86_64_RELATIVE +6093h
LOAD:0000000000000E18                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000E30                 Elf64_Rela <208078h, 8, 208100h> ; R_X86_64_RELATIVE +208100h
LOAD:0000000000000E48                 Elf64_Rela <207FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E60                 Elf64_Rela <207FE0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E78                 Elf64_Rela <207FE8h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E90                 Elf64_Rela <207FF0h, 3000000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EA8                 Elf64_Rela <207FF8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000EC0                 Elf64_Rela <208080h, 3600000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000ED8                 Elf64_Rela <208088h, 3500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EF0                 Elf64_Rela <208090h, 3B00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F08                 Elf64_Rela <208098h, 3C00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F20                 Elf64_Rela <2080A0h, 3800000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F38                 Elf64_Rela <2080C0h, 3A00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F50 ; ELF JMPREL Relocation Table
LOAD:0000000000000F50                 Elf64_Rela <207E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F68                 Elf64_Rela <207E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F80                 Elf64_Rela <207E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F98                 Elf64_Rela <207E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FB0                 Elf64_Rela <207E80h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FC8                 Elf64_Rela <207E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FE0                 Elf64_Rela <207E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000FF8                 Elf64_Rela <207E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:0000000000001010                 Elf64_Rela <207EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001028                 Elf64_Rela <207EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001040                 Elf64_Rela <207EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001058                 Elf64_Rela <207EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001070                 Elf64_Rela <207EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001088                 Elf64_Rela <207EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010A0                 Elf64_Rela <207ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010B8                 Elf64_Rela <207ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010D0                 Elf64_Rela <207EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000010E8                 Elf64_Rela <207EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001100                 Elf64_Rela <207EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000001118                 Elf64_Rela <207EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001130                 Elf64_Rela <207F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001148                 Elf64_Rela <207F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001160                 Elf64_Rela <207F10h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001178                 Elf64_Rela <207F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001190                 Elf64_Rela <207F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000011A8                 Elf64_Rela <207F28h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000011C0                 Elf64_Rela <207F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011D8                 Elf64_Rela <207F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011F0                 Elf64_Rela <207F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001208                 Elf64_Rela <207F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001220                 Elf64_Rela <207F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001238                 Elf64_Rela <207F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001250                 Elf64_Rela <207F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001268                 Elf64_Rela <207F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001280                 Elf64_Rela <207F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001298                 Elf64_Rela <207F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000012B0                 Elf64_Rela <207F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012C8                 Elf64_Rela <207F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012E0                 Elf64_Rela <207F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000012F8                 Elf64_Rela <207F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001310                 Elf64_Rela <207FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001328                 Elf64_Rela <207FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001340                 Elf64_Rela <207FB0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001358                 Elf64_Rela <207FB8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001370                 Elf64_Rela <207FC0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001388                 Elf64_Rela <207FC8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013A0                 Elf64_Rela <207FD0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013A0 LOAD            ends
LOAD:00000000000013A0
.init:00000000000013B8 ; ===========================================================================
.init:00000000000013B8
.init:00000000000013B8 ; Segment type: Pure code
.init:00000000000013B8 ; Segment permissions: Read/Execute
.init:00000000000013B8 _init           segment dword public 'CODE' use64
.init:00000000000013B8                 assume cs:_init
.init:00000000000013B8                 ;org 13B8h
.init:00000000000013B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013B8
.init:00000000000013B8 ; =============== S U B R O U T I N E =======================================
.init:00000000000013B8
.init:00000000000013B8
.init:00000000000013B8                 public _init_proc
.init:00000000000013B8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013B8                 sub     rsp, 8          ; _init
.init:00000000000013BC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013C3                 test    rax, rax
.init:00000000000013C6                 jz      short loc_13CA
.init:00000000000013C8                 call    rax ; __gmon_start__
.init:00000000000013CA
.init:00000000000013CA loc_13CA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013CA                 add     rsp, 8
.init:00000000000013CE                 retn
.init:00000000000013CE _init_proc      endp
.init:00000000000013CE
.init:00000000000013CE _init           ends
.init:00000000000013CE
LOAD:00000000000013CF ; ===========================================================================
LOAD:00000000000013CF
LOAD:00000000000013CF ; Segment type: Pure code
LOAD:00000000000013CF ; Segment permissions: Read/Execute
LOAD:00000000000013CF LOAD            segment byte public 'CODE' use64
LOAD:00000000000013CF                 assume cs:LOAD
LOAD:00000000000013CF                 ;org 13CFh
LOAD:00000000000013CF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013CF                 align 10h
LOAD:00000000000013CF LOAD            ends
LOAD:00000000000013CF
.plt:00000000000013D0 ; ===========================================================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Segment type: Pure code
.plt:00000000000013D0 ; Segment permissions: Read/Execute
.plt:00000000000013D0 _plt            segment para public 'CODE' use64
.plt:00000000000013D0                 assume cs:_plt
.plt:00000000000013D0                 ;org 13D0h
.plt:00000000000013D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0
.plt:00000000000013D0 sub_13D0        proc near               ; CODE XREF: .plt:00000000000013EB↓j
.plt:00000000000013D0                                         ; .plt:00000000000013FB↓j ...
.plt:00000000000013D0 ; __unwind {
.plt:00000000000013D0                 push    cs:qword_207E50
.plt:00000000000013D6                 jmp     cs:qword_207E58
.plt:00000000000013D6 sub_13D0        endp
.plt:00000000000013D6
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013DC                 align 20h
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void free(void *ptr)
.plt:00000000000013E0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000013E0                                         ; quotearg_free+37↓p ...
.plt:00000000000013E0                 jmp     cs:free_ptr
.plt:00000000000013E0 _free           endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0
.plt:00000000000013EB                 jmp     sub_13D0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: noreturn thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void __noreturn abort(void)
.plt:00000000000013F0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000013F0                                         ; quotearg_buffer_restyled:def_28E1↓p ...
.plt:00000000000013F0                 jmp     cs:abort_ptr
.plt:00000000000013F0 _abort          endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1
.plt:00000000000013FB                 jmp     sub_13D0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; int *__errno_location(void)
.plt:0000000000001400 ___errno_location proc near             ; CODE XREF: main+4A0↓p
.plt:0000000000001400                                         ; main+4E6↓p ...
.plt:0000000000001400                 jmp     cs:__errno_location_ptr
.plt:0000000000001400 ___errno_location endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    2
.plt:000000000000140B                 jmp     sub_13D0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001410 _strncmp        proc near               ; CODE XREF: usage+2DC↓p
.plt:0000000000001410                                         ; usage+39D↓p
.plt:0000000000001410                 jmp     cs:strncmp_ptr
.plt:0000000000001410 _strncmp        endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    3
.plt:000000000000141B                 jmp     sub_13D0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: noreturn thunk
.plt:0000000000001420
.plt:0000000000001420 ; void __noreturn _exit(int status)
.plt:0000000000001420 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001420                 jmp     cs:_exit_ptr
.plt:0000000000001420 __exit          endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    4
.plt:000000000000142B                 jmp     sub_13D0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; size_t __fpending(FILE *fp)
.plt:0000000000001430 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001430                 jmp     cs:__fpending_ptr
.plt:0000000000001430 ___fpending     endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    5
.plt:000000000000143B                 jmp     sub_13D0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *textdomain(const char *domainname)
.plt:0000000000001440 _textdomain     proc near               ; CODE XREF: main+62↓p
.plt:0000000000001440                 jmp     cs:textdomain_ptr
.plt:0000000000001440 _textdomain     endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    6
.plt:000000000000144B                 jmp     sub_13D0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001450 ___strtol_internal proc near            ; CODE XREF: xstrtoimax+59↓p
.plt:0000000000001450                 jmp     cs:__strtol_internal_ptr
.plt:0000000000001450 ___strtol_internal endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    7
.plt:000000000000145B                 jmp     sub_13D0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int fclose(FILE *stream)
.plt:0000000000001460 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001460                                         ; rpl_fclose+6B↓j
.plt:0000000000001460                 jmp     cs:fclose_ptr
.plt:0000000000001460 _fclose         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    8
.plt:000000000000146B                 jmp     sub_13D0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001470 _bindtextdomain proc near               ; CODE XREF: main+56↓p
.plt:0000000000001470                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001470 _bindtextdomain endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    9
.plt:000000000000147B                 jmp     sub_13D0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001480 _dcgettext      proc near               ; CODE XREF: main+1D8↓p
.plt:0000000000001480                                         ; main+253↓p ...
.plt:0000000000001480                 jmp     cs:dcgettext_ptr
.plt:0000000000001480 _dcgettext      endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Ah
.plt:000000000000148B                 jmp     sub_13D0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001490 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001490                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001490 ___ctype_get_mb_cur_max endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Bh
.plt:000000000000149B                 jmp     sub_13D0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t strlen(const char *s)
.plt:00000000000014A0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000014A0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000014A0                 jmp     cs:strlen_ptr
.plt:00000000000014A0 _strlen         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Ch
.plt:00000000000014AB                 jmp     sub_13D0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: noreturn thunk
.plt:00000000000014B0
.plt:00000000000014B0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_200F↓p
.plt:00000000000014B0                                         ; quotearg_buffer_restyled:loc_3A43↓p ...
.plt:00000000000014B0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014B0 ___stack_chk_fail endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Dh
.plt:00000000000014BB                 jmp     sub_13D0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000014C0 _getopt_long    proc near               ; CODE XREF: main+8A↓p
.plt:00000000000014C0                 jmp     cs:getopt_long_ptr
.plt:00000000000014C0 _getopt_long    endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Eh
.plt:00000000000014CB                 jmp     sub_13D0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014D0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014D0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014D0 _mbrtowc        endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Fh
.plt:00000000000014DB                 jmp     sub_13D0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; char *strchr(const char *s, int c)
.plt:00000000000014E0 _strchr         proc near               ; CODE XREF: xstrtoimax+EC↓p
.plt:00000000000014E0                                         ; xstrtoimax+10F↓p ...
.plt:00000000000014E0                 jmp     cs:strchr_ptr
.plt:00000000000014E0 _strchr         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    10h
.plt:00000000000014EB                 jmp     sub_13D0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; char *strrchr(const char *s, int c)
.plt:00000000000014F0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000014F0                 jmp     cs:strrchr_ptr
.plt:00000000000014F0 _strrchr        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    11h
.plt:00000000000014FB                 jmp     sub_13D0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int ftruncate(int fd, __off_t length)
.plt:0000000000001500 _ftruncate      proc near               ; CODE XREF: main+5EB↓p
.plt:0000000000001500                 jmp     cs:ftruncate_ptr
.plt:0000000000001500 _ftruncate      endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    12h
.plt:000000000000150B                 jmp     sub_13D0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001510 _lseek          proc near               ; CODE XREF: main+4FD↓p
.plt:0000000000001510                                         ; main+895↓p ...
.plt:0000000000001510                 jmp     cs:lseek_ptr
.plt:0000000000001510 _lseek          endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    13h
.plt:000000000000151B                 jmp     sub_13D0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: noreturn thunk
.plt:0000000000001520
.plt:0000000000001520 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001520 ___assert_fail  proc near               ; CODE XREF: xstrtoimax+6A9↓p
.plt:0000000000001520                 jmp     cs:__assert_fail_ptr
.plt:0000000000001520 ___assert_fail  endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    14h
.plt:000000000000152B                 jmp     sub_13D0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001530 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001530                                         ; xzalloc+12↓j
.plt:0000000000001530                 jmp     cs:memset_ptr
.plt:0000000000001530 _memset         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    15h
.plt:000000000000153B                 jmp     sub_13D0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int close(int fd)
.plt:0000000000001540 _close          proc near               ; CODE XREF: main+4BC↓p
.plt:0000000000001540                                         ; main+511↓p
.plt:0000000000001540                 jmp     cs:close_ptr
.plt:0000000000001540 _close          endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    16h
.plt:000000000000154B                 jmp     sub_13D0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001550 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001550                 jmp     cs:memcmp_ptr
.plt:0000000000001550 _memcmp         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    17h
.plt:000000000000155B                 jmp     sub_13D0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001560 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001560                                         ; usage+C2↓p ...
.plt:0000000000001560                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001560 _fputs_unlocked endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    18h
.plt:000000000000156B                 jmp     sub_13D0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001570 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001570                 jmp     cs:calloc_ptr
.plt:0000000000001570 _calloc         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    19h
.plt:000000000000157B                 jmp     sub_13D0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001580 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001580                 jmp     cs:memcpy_ptr
.plt:0000000000001580 _memcpy         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Ah
.plt:000000000000158B                 jmp     sub_13D0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int fileno(FILE *stream)
.plt:0000000000001590 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001590                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001590                 jmp     cs:fileno_ptr
.plt:0000000000001590 _fileno         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Bh
.plt:000000000000159B                 jmp     sub_13D0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000015A0 ___xstat        proc near               ; CODE XREF: main+39E↓p
.plt:00000000000015A0                 jmp     cs:__xstat_ptr
.plt:00000000000015A0 ___xstat        endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Ch
.plt:00000000000015AB                 jmp     sub_13D0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *malloc(size_t size)
.plt:00000000000015B0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015B0                 jmp     cs:malloc_ptr
.plt:00000000000015B0 _malloc         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Dh
.plt:00000000000015BB                 jmp     sub_13D0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int fflush(FILE *stream)
.plt:00000000000015C0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015C0                                         ; rpl_fflush+3B↓j
.plt:00000000000015C0                 jmp     cs:fflush_ptr
.plt:00000000000015C0 _fflush         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Eh
.plt:00000000000015CB                 jmp     sub_13D0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015D0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015D0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015D0 _nl_langinfo    endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Fh
.plt:00000000000015DB                 jmp     sub_13D0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:00000000000015E0 ___fxstat       proc near               ; CODE XREF: main+46D↓p
.plt:00000000000015E0                                         ; main+650↓p
.plt:00000000000015E0                 jmp     cs:__fxstat_ptr
.plt:00000000000015E0 ___fxstat       endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    20h ; ' '
.plt:00000000000015EB                 jmp     sub_13D0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int __freading(FILE *fp)
.plt:00000000000015F0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015F0                                         ; rpl_fflush+9↓p
.plt:00000000000015F0                 jmp     cs:__freading_ptr
.plt:00000000000015F0 ___freading     endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    21h ; '!'
.plt:00000000000015FB                 jmp     sub_13D0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001600 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001600                 jmp     cs:realloc_ptr
.plt:0000000000001600 _realloc        endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    22h ; '"'
.plt:000000000000160B                 jmp     sub_13D0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *setlocale(int category, const char *locale)
.plt:0000000000001610 _setlocale      proc near               ; CODE XREF: main+43↓p
.plt:0000000000001610                                         ; usage+2C3↓p ...
.plt:0000000000001610                 jmp     cs:setlocale_ptr
.plt:0000000000001610 _setlocale      endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    23h ; '#'
.plt:000000000000161B                 jmp     sub_13D0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001620                                         ; usage+2B7↓p ...
.plt:0000000000001620                 jmp     cs:__printf_chk_ptr
.plt:0000000000001620 ___printf_chk   endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    24h ; '$'
.plt:000000000000162B                 jmp     sub_13D0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001630 _error          proc near               ; CODE XREF: main+33D↓p
.plt:0000000000001630                                         ; main+4B4↓p ...
.plt:0000000000001630                 jmp     cs:error_ptr
.plt:0000000000001630 _error          endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    25h ; '%'
.plt:000000000000163B                 jmp     sub_13D0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int open(const char *file, int oflag, ...)
.plt:0000000000001640 _open           proc near               ; CODE XREF: main+42F↓p
.plt:0000000000001640                                         ; main+4DE↓p
.plt:0000000000001640                 jmp     cs:open_ptr
.plt:0000000000001640 _open           endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    26h ; '&'
.plt:000000000000164B                 jmp     sub_13D0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001650 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_572A↓j
.plt:0000000000001650                 jmp     cs:fseeko_ptr
.plt:0000000000001650 _fseeko         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    27h ; '''
.plt:000000000000165B                 jmp     sub_13D0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001660 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001660                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001660 ___cxa_atexit   endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    28h ; '('
.plt:000000000000166B                 jmp     sub_13D0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: noreturn thunk
.plt:0000000000001670
.plt:0000000000001670 ; void __noreturn exit(int status)
.plt:0000000000001670 _exit           proc near               ; CODE XREF: main+10A↓p
.plt:0000000000001670                                         ; usage+58↓p
.plt:0000000000001670                 jmp     cs:exit_ptr
.plt:0000000000001670 _exit           endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    29h ; ')'
.plt:000000000000167B                 jmp     sub_13D0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001680 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001680                 jmp     cs:fwrite_ptr
.plt:0000000000001680 _fwrite         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    2Ah ; '*'
.plt:000000000000168B                 jmp     sub_13D0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001690                                         ; version_etc_arn+37↓p ...
.plt:0000000000001690                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001690 ___fprintf_chk  endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Bh ; '+'
.plt:000000000000169B                 jmp     sub_13D0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000016A0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000016A0                 jmp     cs:mbsinit_ptr
.plt:00000000000016A0 _mbsinit        endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Ch ; ','
.plt:00000000000016AB                 jmp     sub_13D0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int iswprint(wint_t wc)
.plt:00000000000016B0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016B0                 jmp     cs:iswprint_ptr
.plt:00000000000016B0 _iswprint       endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Dh ; '-'
.plt:00000000000016BB                 jmp     sub_13D0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016C0 ___ctype_b_loc  proc near               ; CODE XREF: main:loc_1800↓p
.plt:00000000000016C0                                         ; quotearg_buffer_restyled+513↓p
.plt:00000000000016C0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016C0 ___ctype_b_loc  endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Eh ; '.'
.plt:00000000000016CB                 jmp     sub_13D0
.plt:00000000000016CB ; } // starts at 13D0
.plt:00000000000016CB _plt            ends
.plt:00000000000016CB
.plt.got:00000000000016D0 ; ===========================================================================
.plt.got:00000000000016D0
.plt.got:00000000000016D0 ; Segment type: Pure code
.plt.got:00000000000016D0 ; Segment permissions: Read/Execute
.plt.got:00000000000016D0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016D0                 assume cs:_plt_got
.plt.got:00000000000016D0                 ;org 16D0h
.plt.got:00000000000016D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016D0
.plt.got:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016D0
.plt.got:00000000000016D0 ; Attributes: thunk
.plt.got:00000000000016D0
.plt.got:00000000000016D0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016D0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016D0 ; __unwind {
.plt.got:00000000000016D0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016D0 __cxa_finalize  endp
.plt.got:00000000000016D0
.plt.got:00000000000016D0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016D6                 align 8
.plt.got:00000000000016D6 ; } // starts at 16D0
.plt.got:00000000000016D6 _plt_got        ends
.plt.got:00000000000016D6
LOAD:00000000000016D8 ; ===========================================================================
LOAD:00000000000016D8
LOAD:00000000000016D8 ; Segment type: Pure code
LOAD:00000000000016D8 ; Segment permissions: Read/Execute
LOAD:00000000000016D8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016D8                 assume cs:LOAD
LOAD:00000000000016D8                 ;org 16D8h
LOAD:00000000000016D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016D8                 align 20h
LOAD:00000000000016D8 LOAD            ends
LOAD:00000000000016D8
.text:00000000000016E0 ; ===========================================================================
.text:00000000000016E0
.text:00000000000016E0 ; Segment type: Pure code
.text:00000000000016E0 ; Segment permissions: Read/Execute
.text:00000000000016E0 _text           segment para public 'CODE' use64
.text:00000000000016E0                 assume cs:_text
.text:00000000000016E0                 ;org 16E0h
.text:00000000000016E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000016E0
.text:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016E0
.text:00000000000016E0
.text:00000000000016E0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016E0                 public main
.text:00000000000016E0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016E0
.text:00000000000016E0 var_100         = qword ptr -100h
.text:00000000000016E0 var_F8          = dword ptr -0F8h
.text:00000000000016E0 oflag           = dword ptr -0F4h
.text:00000000000016E0 var_F0          = qword ptr -0F0h
.text:00000000000016E0 var_E8          = qword ptr -0E8h
.text:00000000000016E0 format          = qword ptr -0E0h
.text:00000000000016E0 stat_buf        = stat ptr -0D8h
.text:00000000000016E0 var_40          = qword ptr -40h
.text:00000000000016E0
.text:00000000000016E0 ; __unwind {
.text:00000000000016E0                 push    r15
.text:00000000000016E2                 push    r14
.text:00000000000016E4                 push    r13
.text:00000000000016E6                 push    r12
.text:00000000000016E8                 mov     r13d, edi
.text:00000000000016EB                 push    rbp
.text:00000000000016EC                 push    rbx
.text:00000000000016ED                 mov     rbp, rsi
.text:00000000000016F0                 xor     ebx, ebx
.text:00000000000016F2                 xor     r12d, r12d
.text:00000000000016F5                 sub     rsp, 0D8h
.text:00000000000016FC                 mov     rdi, [rsi]
.text:00000000000016FF                 mov     rax, fs:28h
.text:0000000000001708                 mov     [rsp+108h+var_40], rax
.text:0000000000001710                 xor     eax, eax
.text:0000000000001712                 call    set_program_name
.text:0000000000001717                 lea     rsi, aUsageSOptionFi+1Ch ; locale
.text:000000000000171E                 mov     edi, 6          ; category
.text:0000000000001723                 call    _setlocale
.text:0000000000001728                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000172F                 lea     rdi, domainname ; "coreutils"
.text:0000000000001736                 call    _bindtextdomain
.text:000000000000173B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001742                 call    _textdomain
.text:0000000000001747                 lea     rdi, close_stdout
.text:000000000000174E                 call    atexit
.text:0000000000001753
.text:0000000000001753 loc_1753:                               ; CODE XREF: main+C7↓j
.text:0000000000001753                                         ; main+117↓j ...
.text:0000000000001753                 lea     rcx, longopts   ; longopts
.text:000000000000175A                 lea     rdx, shortopts  ; "cor:s:"
.text:0000000000001761                 xor     r8d, r8d        ; longind
.text:0000000000001764                 mov     rsi, rbp        ; argv
.text:0000000000001767                 mov     edi, r13d       ; argc
.text:000000000000176A                 call    _getopt_long
.text:000000000000176F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001772                 jz      loc_19AE
.text:0000000000001778                 cmp     eax, 63h ; 'c'
.text:000000000000177B                 jz      short loc_17F0
.text:000000000000177D                 jle     short loc_17B0
.text:000000000000177F                 cmp     eax, 72h ; 'r'
.text:0000000000001782                 jz      loc_18F8
.text:0000000000001788                 cmp     eax, 73h ; 's'
.text:000000000000178B                 jz      short loc_1800
.text:000000000000178D                 cmp     eax, 6Fh ; 'o'
.text:0000000000001790                 jz      short loc_17A0
.text:0000000000001792
.text:0000000000001792 loc_1792:                               ; CODE XREF: main+342↓j
.text:0000000000001792                                         ; main+922↓j
.text:0000000000001792                 mov     edi, 1          ; status
.text:0000000000001797                 call    usage
.text:0000000000001797 ; ---------------------------------------------------------------------------
.text:000000000000179C                 align 20h
.text:00000000000017A0
.text:00000000000017A0 loc_17A0:                               ; CODE XREF: main+B0↑j
.text:00000000000017A0                 mov     cs:block_mode, 1
.text:00000000000017A7                 jmp     short loc_1753
.text:00000000000017A7 ; ---------------------------------------------------------------------------
.text:00000000000017A9                 align 10h
.text:00000000000017B0
.text:00000000000017B0 loc_17B0:                               ; CODE XREF: main+9D↑j
.text:00000000000017B0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000017B5                 jnz     loc_1FFD
.text:00000000000017BB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000017C2                 mov     rcx, cs:Version
.text:00000000000017C9                 lea     r8, aPadraigBrady ; "Padraig Brady"
.text:00000000000017D0                 lea     rdx, unk_58C0
.text:00000000000017D7                 lea     rsi, aTruncate  ; "truncate"
.text:00000000000017DE                 xor     r9d, r9d
.text:00000000000017E1                 xor     eax, eax
.text:00000000000017E3                 call    version_etc
.text:00000000000017E8                 xor     edi, edi        ; status
.text:00000000000017EA                 call    _exit
.text:00000000000017EA ; ---------------------------------------------------------------------------
.text:00000000000017EF                 align 10h
.text:00000000000017F0
.text:00000000000017F0 loc_17F0:                               ; CODE XREF: main+9B↑j
.text:00000000000017F0                 mov     cs:no_create, 1
.text:00000000000017F7                 jmp     loc_1753
.text:00000000000017F7 ; ---------------------------------------------------------------------------
.text:00000000000017FC                 align 20h
.text:0000000000001800
.text:0000000000001800 loc_1800:                               ; CODE XREF: main+AB↑j
.text:0000000000001800                 call    ___ctype_b_loc
.text:0000000000001805                 mov     rcx, [rax]
.text:0000000000001808                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:000000000000180F                 jmp     short loc_181F
.text:000000000000180F ; ---------------------------------------------------------------------------
.text:0000000000001811                 align 8
.text:0000000000001818
.text:0000000000001818 loc_1818:                               ; CODE XREF: main+14E↓j
.text:0000000000001818                 mov     cs:optarg@@GLIBC_2_2_5, rax
.text:000000000000181F
.text:000000000000181F loc_181F:                               ; CODE XREF: main+12F↑j
.text:000000000000181F                 movzx   esi, byte ptr [rax]
.text:0000000000001822                 mov     rdi, rax
.text:0000000000001825                 add     rax, 1
.text:0000000000001829                 test    byte ptr [rcx+rsi*2+1], 20h
.text:000000000000182E                 jnz     short loc_1818
.text:0000000000001830                 cmp     sil, 2Fh ; '/'
.text:0000000000001834                 jz      loc_1984
.text:000000000000183A                 jle     loc_190B
.text:0000000000001840                 cmp     sil, 3Ch ; '<'
.text:0000000000001844                 jz      loc_1999
.text:000000000000184A                 cmp     sil, 3Eh ; '>'
.text:000000000000184E                 jnz     short loc_1860
.text:0000000000001850                 add     rdi, 1
.text:0000000000001854                 mov     ebx, 2
.text:0000000000001859                 mov     cs:optarg@@GLIBC_2_2_5, rdi
.text:0000000000001860
.text:0000000000001860 loc_1860:                               ; CODE XREF: main+16E↑j
.text:0000000000001860                                         ; main+22F↓j ...
.text:0000000000001860                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001867                 jmp     short loc_1877
.text:0000000000001867 ; ---------------------------------------------------------------------------
.text:0000000000001869                 align 10h
.text:0000000000001870
.text:0000000000001870 loc_1870:                               ; CODE XREF: main+1A6↓j
.text:0000000000001870                 mov     cs:optarg@@GLIBC_2_2_5, rax
.text:0000000000001877
.text:0000000000001877 loc_1877:                               ; CODE XREF: main+187↑j
.text:0000000000001877                 movzx   esi, byte ptr [rax]
.text:000000000000187A                 add     rax, 1
.text:000000000000187E                 test    byte ptr [rcx+rsi*2+1], 20h
.text:0000000000001883                 mov     rdx, rsi
.text:0000000000001886                 jnz     short loc_1870
.text:0000000000001888                 sub     edx, 2Bh ; '+'
.text:000000000000188B                 and     edx, 0FDh
.text:0000000000001891                 mov     edx, 5          ; category
.text:0000000000001896                 jnz     loc_192A
.text:000000000000189C                 test    ebx, ebx
.text:000000000000189E                 jnz     loc_20AD
.text:00000000000018A4                 lea     rsi, msgid      ; "Invalid number"
.text:00000000000018AB                 xor     edi, edi        ; domainname
.text:00000000000018AD                 mov     ebx, 1
.text:00000000000018B2                 mov     r12d, 1
.text:00000000000018B8                 call    _dcgettext
.text:00000000000018BD                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000018C4                 lea     rcx, aEggkkmmpttyz0 ; "EgGkKmMPtTYZ0"
.text:00000000000018CB                 mov     r8, rax
.text:00000000000018CE                 xor     r9d, r9d
.text:00000000000018D1                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:00000000000018DB                 mov     rsi, 8000000000000000h
.text:00000000000018E5                 call    xdectoumax
.text:00000000000018EA                 mov     r15, rax
.text:00000000000018ED                 jmp     loc_1753
.text:00000000000018ED ; ---------------------------------------------------------------------------
.text:00000000000018F2                 align 8
.text:00000000000018F8
.text:00000000000018F8 loc_18F8:                               ; CODE XREF: main+A2↑j
.text:00000000000018F8                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000018FF                 mov     cs:ref_file, rax
.text:0000000000001906                 jmp     loc_1753
.text:000000000000190B ; ---------------------------------------------------------------------------
.text:000000000000190B
.text:000000000000190B loc_190B:                               ; CODE XREF: main+15A↑j
.text:000000000000190B                 cmp     sil, 25h ; '%'
.text:000000000000190F                 jnz     loc_1860
.text:0000000000001915                 add     rdi, 1
.text:0000000000001919                 mov     ebx, 5
.text:000000000000191E                 mov     cs:optarg@@GLIBC_2_2_5, rdi
.text:0000000000001925                 jmp     loc_1860
.text:000000000000192A ; ---------------------------------------------------------------------------
.text:000000000000192A
.text:000000000000192A loc_192A:                               ; CODE XREF: main+1B6↑j
.text:000000000000192A                 lea     rsi, msgid      ; "Invalid number"
.text:0000000000001931                 xor     edi, edi        ; domainname
.text:0000000000001933                 call    _dcgettext
.text:0000000000001938                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000193F                 lea     rcx, aEggkkmmpttyz0 ; "EgGkKmMPtTYZ0"
.text:0000000000001946                 xor     r9d, r9d
.text:0000000000001949                 mov     r8, rax
.text:000000000000194C                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:0000000000001956                 mov     rsi, 8000000000000000h
.text:0000000000001960                 call    xdectoumax
.text:0000000000001965                 mov     r15, rax
.text:0000000000001968                 lea     eax, [rbx-4]
.text:000000000000196B                 cmp     eax, 1
.text:000000000000196E                 ja      short loc_1979
.text:0000000000001970                 test    r15, r15
.text:0000000000001973                 jz      loc_204A
.text:0000000000001979
.text:0000000000001979 loc_1979:                               ; CODE XREF: main+28E↑j
.text:0000000000001979                 mov     r12d, 1
.text:000000000000197F                 jmp     loc_1753
.text:0000000000001984 ; ---------------------------------------------------------------------------
.text:0000000000001984
.text:0000000000001984 loc_1984:                               ; CODE XREF: main+154↑j
.text:0000000000001984                 add     rdi, 1
.text:0000000000001988                 mov     ebx, 4
.text:000000000000198D                 mov     cs:optarg@@GLIBC_2_2_5, rdi
.text:0000000000001994                 jmp     loc_1860
.text:0000000000001999 ; ---------------------------------------------------------------------------
.text:0000000000001999
.text:0000000000001999 loc_1999:                               ; CODE XREF: main+164↑j
.text:0000000000001999                 add     rdi, 1
.text:000000000000199D                 mov     ebx, 3
.text:00000000000019A2                 mov     cs:optarg@@GLIBC_2_2_5, rdi
.text:00000000000019A9                 jmp     loc_1860
.text:00000000000019AE ; ---------------------------------------------------------------------------
.text:00000000000019AE
.text:00000000000019AE loc_19AE:                               ; CODE XREF: main+92↑j
.text:00000000000019AE                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:00000000000019B5                 mov     r14, cs:ref_file
.text:00000000000019BC                 sub     r13d, edx
.text:00000000000019BF                 test    r14, r14
.text:00000000000019C2                 lea     rbp, [rbp+rdx*8+0]
.text:00000000000019C7                 jz      loc_1F14
.text:00000000000019CD                 test    ebx, ebx
.text:00000000000019CF                 jnz     short loc_1A27
.text:00000000000019D1                 test    r12b, r12b
.text:00000000000019D4                 jz      short loc_1A27
.text:00000000000019D6                 lea     rsi, aReference ; "--reference"
.text:00000000000019DD                 mov     edi, 1
.text:00000000000019E2                 call    quote_n
.text:00000000000019E7                 lea     rsi, aSize      ; "--size"
.text:00000000000019EE                 xor     edi, edi
.text:00000000000019F0                 mov     rbp, rax
.text:00000000000019F3                 call    quote_n
.text:00000000000019F8                 lea     rsi, aYouMustSpecify ; "you must specify a relative %s with %s"
.text:00000000000019FF                 mov     rbx, rax
.text:0000000000001A02                 mov     edx, 5          ; category
.text:0000000000001A07
.text:0000000000001A07 loc_1A07:                               ; CODE XREF: main+386↓j
.text:0000000000001A07                                         ; main+965↓j
.text:0000000000001A07                 xor     edi, edi        ; domainname
.text:0000000000001A09                 call    _dcgettext
.text:0000000000001A0E                 mov     r8, rbp
.text:0000000000001A11                 mov     rdx, rax        ; format
.text:0000000000001A14                 mov     rcx, rbx
.text:0000000000001A17                 xor     esi, esi        ; errnum
.text:0000000000001A19                 xor     edi, edi        ; status
.text:0000000000001A1B                 xor     eax, eax
.text:0000000000001A1D                 call    _error
.text:0000000000001A22                 jmp     loc_1792
.text:0000000000001A27 ; ---------------------------------------------------------------------------
.text:0000000000001A27
.text:0000000000001A27 loc_1A27:                               ; CODE XREF: main+2EF↑j
.text:0000000000001A27                                         ; main+2F4↑j
.text:0000000000001A27                 cmp     cs:block_mode, 1
.text:0000000000001A2E                 jnz     short loc_1A68
.text:0000000000001A30                 test    r12b, r12b
.text:0000000000001A33                 jnz     short loc_1A68
.text:0000000000001A35                 lea     rsi, aSize      ; "--size"
.text:0000000000001A3C                 mov     edi, 1
.text:0000000000001A41                 call    quote_n
.text:0000000000001A46                 lea     rsi, aIoBlocks  ; "--io-blocks"
.text:0000000000001A4D                 xor     edi, edi
.text:0000000000001A4F                 mov     rbp, rax
.text:0000000000001A52                 call    quote_n
.text:0000000000001A57                 mov     edx, 5
.text:0000000000001A5C                 mov     rbx, rax
.text:0000000000001A5F                 lea     rsi, aSWasSpecifiedB ; "%s was specified but %s was not"
.text:0000000000001A66                 jmp     short loc_1A07
.text:0000000000001A68 ; ---------------------------------------------------------------------------
.text:0000000000001A68
.text:0000000000001A68 loc_1A68:                               ; CODE XREF: main+34E↑j
.text:0000000000001A68                                         ; main+353↑j
.text:0000000000001A68                 test    r13d, r13d
.text:0000000000001A6B                 jle     loc_1F26
.text:0000000000001A71                 lea     rdx, [rsp+108h+stat_buf] ; stat_buf
.text:0000000000001A76                 mov     rsi, r14        ; filename
.text:0000000000001A79                 mov     edi, 1          ; ver
.text:0000000000001A7E                 call    ___xstat
.text:0000000000001A83                 test    eax, eax
.text:0000000000001A85                 jnz     loc_206E
.text:0000000000001A8B                 mov     eax, [rsp+108h+stat_buf.st_mode]
.text:0000000000001A8F                 and     eax, 0D000h
.text:0000000000001A94                 cmp     eax, 8000h
.text:0000000000001A99                 jnz     loc_1BB7
.text:0000000000001A9F                 mov     rax, [rsp+108h+stat_buf.st_size]
.text:0000000000001AA4                 test    rax, rax
.text:0000000000001AA7                 mov     [rsp+108h+var_F0], rax
.text:0000000000001AAC                 js      loc_1C09
.text:0000000000001AB2
.text:0000000000001AB2 loc_1AB2:                               ; CODE XREF: main+51C↓j
.text:0000000000001AB2                 test    r12b, r12b
.text:0000000000001AB5                 jnz     short loc_1AC5
.text:0000000000001AB7                 mov     r15, [rsp+108h+var_F0]
.text:0000000000001ABC
.text:0000000000001ABC loc_1ABC:                               ; CODE XREF: main+840↓j
.text:0000000000001ABC                 mov     [rsp+108h+var_F0], 0FFFFFFFFFFFFFFFFh
.text:0000000000001AC5
.text:0000000000001AC5 loc_1AC5:                               ; CODE XREF: main+3D5↑j
.text:0000000000001AC5                 cmp     cs:no_create, 1
.text:0000000000001ACC                 mov     byte ptr [rsp+108h+var_F8], 0
.text:0000000000001AD1                 mov     [rsp+108h+var_100], r15
.text:0000000000001AD6                 sbb     eax, eax
.text:0000000000001AD8                 and     eax, 40h
.text:0000000000001ADB                 add     eax, 801h
.text:0000000000001AE0                 mov     [rsp+108h+oflag], eax
.text:0000000000001AE4                 lea     rax, [rsp+108h+stat_buf]
.text:0000000000001AE9                 mov     [rsp+108h+var_E8], rax
.text:0000000000001AEE                 xchg    ax, ax
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: main+4D2↓j
.text:0000000000001AF0                                         ; main+580↓j ...
.text:0000000000001AF0                 add     rbp, 8
.text:0000000000001AF4                 mov     r13, [rbp-8]
.text:0000000000001AF8                 test    r13, r13
.text:0000000000001AFB                 jz      loc_1E38
.text:0000000000001B01                 mov     esi, [rsp+108h+oflag] ; oflag
.text:0000000000001B05                 xor     eax, eax
.text:0000000000001B07                 mov     edx, 1B6h
.text:0000000000001B0C                 mov     rdi, r13        ; file
.text:0000000000001B0F                 call    _open
.text:0000000000001B14                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B17                 mov     r15d, eax
.text:0000000000001B1A                 jz      loc_1C4C
.text:0000000000001B20                 cmp     cs:block_mode, 0
.text:0000000000001B27                 jnz     loc_1D24
.text:0000000000001B2D                 test    ebx, ebx
.text:0000000000001B2F                 jz      loc_1CA6
.text:0000000000001B35                 cmp     [rsp+108h+var_F0], 0
.text:0000000000001B3B                 jns     loc_1CA6
.text:0000000000001B41                 mov     rdx, [rsp+108h+var_E8] ; stat_buf
.text:0000000000001B46                 mov     esi, eax        ; fildes
.text:0000000000001B48                 mov     edi, 1          ; ver
.text:0000000000001B4D                 call    ___fxstat
.text:0000000000001B52                 test    eax, eax
.text:0000000000001B54                 jz      loc_1DE2
.text:0000000000001B5A
.text:0000000000001B5A loc_1B5A:                               ; CODE XREF: main+657↓j
.text:0000000000001B5A                 mov     rsi, r13
.text:0000000000001B5D                 mov     edi, 4
.text:0000000000001B62                 call    quotearg_style
.text:0000000000001B67                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:0000000000001B6E                 mov     r12, rax
.text:0000000000001B71                 mov     edx, 5          ; category
.text:0000000000001B76
.text:0000000000001B76 loc_1B76:                               ; CODE XREF: main+8BF↓j
.text:0000000000001B76                 xor     edi, edi        ; domainname
.text:0000000000001B78                 call    _dcgettext
.text:0000000000001B7D                 mov     r14, rax
.text:0000000000001B80                 call    ___errno_location
.text:0000000000001B85                 mov     esi, [rax]      ; errnum
.text:0000000000001B87                 mov     rdx, r14        ; format
.text:0000000000001B8A                 mov     rcx, r12
.text:0000000000001B8D                 xor     edi, edi        ; status
.text:0000000000001B8F                 xor     eax, eax
.text:0000000000001B91                 xor     r14d, r14d
.text:0000000000001B94                 call    _error
.text:0000000000001B99
.text:0000000000001B99 loc_1B99:                               ; CODE XREF: main+5F3↓j
.text:0000000000001B99                                         ; main+63F↓j ...
.text:0000000000001B99                 mov     edi, r15d       ; fd
.text:0000000000001B9C                 call    _close
.text:0000000000001BA1                 test    eax, eax
.text:0000000000001BA3                 jnz     loc_1D9C
.text:0000000000001BA9                 xor     r14d, 1
.text:0000000000001BAD                 or      byte ptr [rsp+108h+var_F8], r14b
.text:0000000000001BB2                 jmp     loc_1AF0
.text:0000000000001BB7 ; ---------------------------------------------------------------------------
.text:0000000000001BB7
.text:0000000000001BB7 loc_1BB7:                               ; CODE XREF: main+3B9↑j
.text:0000000000001BB7                 xor     esi, esi        ; oflag
.text:0000000000001BB9                 mov     rdi, r14        ; file
.text:0000000000001BBC                 xor     eax, eax
.text:0000000000001BBE                 call    _open
.text:0000000000001BC3                 mov     r13d, eax
.text:0000000000001BC6                 call    ___errno_location
.text:0000000000001BCB                 test    r13d, r13d
.text:0000000000001BCE                 mov     r14, rax
.text:0000000000001BD1                 js      short loc_1C09
.text:0000000000001BD3                 xor     esi, esi        ; offset
.text:0000000000001BD5                 mov     edx, 2          ; whence
.text:0000000000001BDA                 mov     edi, r13d       ; fd
.text:0000000000001BDD                 call    _lseek
.text:0000000000001BE2                 mov     ecx, [r14]
.text:0000000000001BE5                 mov     edi, r13d       ; fd
.text:0000000000001BE8                 mov     [rsp+108h+var_F0], rax
.text:0000000000001BED                 mov     [rsp+108h+var_F8], ecx
.text:0000000000001BF1                 call    _close
.text:0000000000001BF6                 cmp     [rsp+108h+var_F0], 0
.text:0000000000001BFC                 jns     loc_1AB2
.text:0000000000001C02                 mov     eax, [rsp+108h+var_F8]
.text:0000000000001C06                 mov     [r14], eax
.text:0000000000001C09
.text:0000000000001C09 loc_1C09:                               ; CODE XREF: main+3CC↑j
.text:0000000000001C09                                         ; main+4F1↑j
.text:0000000000001C09                 mov     rsi, cs:ref_file
.text:0000000000001C10                 mov     edi, 4
.text:0000000000001C15                 call    quotearg_style
.text:0000000000001C1A                 lea     rsi, aCannotGetTheSi ; "cannot get the size of %s"
.text:0000000000001C21                 mov     edx, 5          ; category
.text:0000000000001C26                 xor     edi, edi        ; domainname
.text:0000000000001C28                 mov     rbp, rax
.text:0000000000001C2B                 call    _dcgettext
.text:0000000000001C30                 mov     rbx, rax
.text:0000000000001C33                 call    ___errno_location
.text:0000000000001C38                 mov     esi, [rax]      ; errnum
.text:0000000000001C3A                 mov     rcx, rbp
.text:0000000000001C3D                 mov     rdx, rbx        ; format
.text:0000000000001C40                 mov     edi, 1          ; status
.text:0000000000001C45                 xor     eax, eax
.text:0000000000001C47                 call    _error
.text:0000000000001C4C
.text:0000000000001C4C loc_1C4C:                               ; CODE XREF: main+43A↑j
.text:0000000000001C4C                 call    ___errno_location
.text:0000000000001C51                 cmp     cs:no_create, 0
.text:0000000000001C58                 mov     r12, rax
.text:0000000000001C5B                 jz      short loc_1C66
.text:0000000000001C5D                 cmp     dword ptr [rax], 2
.text:0000000000001C60                 jz      loc_1AF0
.text:0000000000001C66
.text:0000000000001C66 loc_1C66:                               ; CODE XREF: main+57B↑j
.text:0000000000001C66                 mov     rsi, r13
.text:0000000000001C69                 mov     edi, 4
.text:0000000000001C6E                 call    quotearg_style
.text:0000000000001C73                 lea     rsi, aCannotOpenSFor ; "cannot open %s for writing"
.text:0000000000001C7A                 mov     edx, 5          ; category
.text:0000000000001C7F                 xor     edi, edi        ; domainname
.text:0000000000001C81                 mov     r13, rax
.text:0000000000001C84                 call    _dcgettext
.text:0000000000001C89                 mov     esi, [r12]      ; errnum
.text:0000000000001C8D                 mov     rdx, rax        ; format
.text:0000000000001C90                 mov     rcx, r13
.text:0000000000001C93                 xor     edi, edi        ; status
.text:0000000000001C95                 xor     eax, eax
.text:0000000000001C97                 call    _error
.text:0000000000001C9C                 mov     byte ptr [rsp+108h+var_F8], 1
.text:0000000000001CA1                 jmp     loc_1AF0
.text:0000000000001CA6 ; ---------------------------------------------------------------------------
.text:0000000000001CA6
.text:0000000000001CA6 loc_1CA6:                               ; CODE XREF: main+44F↑j
.text:0000000000001CA6                                         ; main+45B↑j
.text:0000000000001CA6                 mov     r12, [rsp+108h+var_100]
.text:0000000000001CAB
.text:0000000000001CAB loc_1CAB:                               ; CODE XREF: main+6B7↓j
.text:0000000000001CAB                 test    ebx, ebx
.text:0000000000001CAD                 jnz     loc_1DE7
.text:0000000000001CB3
.text:0000000000001CB3 loc_1CB3:                               ; CODE XREF: main+753↓j
.text:0000000000001CB3                                         ; main+82F↓j ...
.text:0000000000001CB3                 test    r12, r12
.text:0000000000001CB6                 mov     eax, 0
.text:0000000000001CBB                 cmovs   r12, rax
.text:0000000000001CBF
.text:0000000000001CBF loc_1CBF:                               ; CODE XREF: main+878↓j
.text:0000000000001CBF                                         ; main+8D5↓j
.text:0000000000001CBF                 mov     rsi, r12        ; length
.text:0000000000001CC2                 mov     edi, r15d       ; fd
.text:0000000000001CC5                 mov     r14d, 1
.text:0000000000001CCB                 call    _ftruncate
.text:0000000000001CD0                 add     eax, 1
.text:0000000000001CD3                 jnz     loc_1B99
.text:0000000000001CD9                 mov     rsi, r13
.text:0000000000001CDC                 mov     edi, 4
.text:0000000000001CE1                 call    quotearg_style
.text:0000000000001CE6                 lea     rsi, aFailedToTrunca ; "failed to truncate %s at %ld bytes"
.text:0000000000001CED                 mov     edx, 5          ; category
.text:0000000000001CF2                 xor     edi, edi        ; domainname
.text:0000000000001CF4                 mov     r14, rax
.text:0000000000001CF7                 call    _dcgettext
.text:0000000000001CFC                 mov     [rsp+108h+format], rax
.text:0000000000001D01                 call    ___errno_location
.text:0000000000001D06                 mov     rdx, [rsp+108h+format] ; format
.text:0000000000001D0B                 mov     esi, [rax]      ; errnum
.text:0000000000001D0D                 mov     rcx, r14
.text:0000000000001D10                 mov     r8, r12
.text:0000000000001D13                 xor     edi, edi        ; status
.text:0000000000001D15                 xor     eax, eax
.text:0000000000001D17                 xor     r14d, r14d
.text:0000000000001D1A                 call    _error
.text:0000000000001D1F                 jmp     loc_1B99
.text:0000000000001D24 ; ---------------------------------------------------------------------------
.text:0000000000001D24
.text:0000000000001D24 loc_1D24:                               ; CODE XREF: main+447↑j
.text:0000000000001D24                 mov     rdx, [rsp+108h+var_E8] ; stat_buf
.text:0000000000001D29                 mov     esi, eax        ; fildes
.text:0000000000001D2B                 mov     edi, 1          ; ver
.text:0000000000001D30                 call    ___fxstat
.text:0000000000001D35                 test    eax, eax
.text:0000000000001D37                 jnz     loc_1B5A
.text:0000000000001D3D                 mov     r12, [rsp+108h+stat_buf.st_blksize]
.text:0000000000001D42                 mov     rcx, 1FFFFFFFFFFFFFFFh
.text:0000000000001D4C                 lea     rax, [r12-1]
.text:0000000000001D51                 cmp     rax, rcx
.text:0000000000001D54                 mov     eax, 200h
.text:0000000000001D59                 cmova   r12, rax
.text:0000000000001D5D                 mov     rax, 8000000000000000h
.text:0000000000001D67                 cqo
.text:0000000000001D69                 idiv    r12
.text:0000000000001D6C                 cmp     [rsp+108h+var_100], rax
.text:0000000000001D71                 jl      loc_1E66
.text:0000000000001D77                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000001D81                 cqo
.text:0000000000001D83                 idiv    r12
.text:0000000000001D86                 cmp     [rsp+108h+var_100], rax
.text:0000000000001D8B                 jg      loc_1E66
.text:0000000000001D91                 imul    r12, [rsp+108h+var_100]
.text:0000000000001D97                 jmp     loc_1CAB
.text:0000000000001D9C ; ---------------------------------------------------------------------------
.text:0000000000001D9C
.text:0000000000001D9C loc_1D9C:                               ; CODE XREF: main+4C3↑j
.text:0000000000001D9C                 mov     rsi, r13
.text:0000000000001D9F                 mov     edi, 4
.text:0000000000001DA4                 call    quotearg_style
.text:0000000000001DA9                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:0000000000001DB0                 mov     edx, 5          ; category
.text:0000000000001DB5                 xor     edi, edi        ; domainname
.text:0000000000001DB7                 mov     r13, rax
.text:0000000000001DBA                 call    _dcgettext
.text:0000000000001DBF                 mov     r12, rax
.text:0000000000001DC2                 call    ___errno_location
.text:0000000000001DC7                 mov     esi, [rax]      ; errnum
.text:0000000000001DC9                 mov     rcx, r13
.text:0000000000001DCC                 mov     rdx, r12        ; format
.text:0000000000001DCF                 xor     edi, edi        ; status
.text:0000000000001DD1                 xor     eax, eax
.text:0000000000001DD3                 call    _error
.text:0000000000001DD8                 mov     byte ptr [rsp+108h+var_F8], 1
.text:0000000000001DDD                 jmp     loc_1AF0
.text:0000000000001DE2 ; ---------------------------------------------------------------------------
.text:0000000000001DE2
.text:0000000000001DE2 loc_1DE2:                               ; CODE XREF: main+474↑j
.text:0000000000001DE2                 mov     r12, [rsp+108h+var_100]
.text:0000000000001DE7
.text:0000000000001DE7 loc_1DE7:                               ; CODE XREF: main+5CD↑j
.text:0000000000001DE7                 mov     rax, [rsp+108h+var_F0]
.text:0000000000001DEC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001DF0                 jz      loc_1EAA
.text:0000000000001DF6
.text:0000000000001DF6 loc_1DF6:                               ; CODE XREF: main+7E6↓j
.text:0000000000001DF6                                         ; main+89D↓j
.text:0000000000001DF6                 cmp     ebx, 2
.text:0000000000001DF9                 jz      loc_1F08
.text:0000000000001DFF                 cmp     ebx, 3
.text:0000000000001E02                 jz      loc_1F51
.text:0000000000001E08                 cmp     ebx, 4
.text:0000000000001E0B                 jz      loc_1F5D
.text:0000000000001E11                 cmp     ebx, 5
.text:0000000000001E14                 jz      loc_1FA4
.text:0000000000001E1A                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:0000000000001E24                 sub     rdx, rax
.text:0000000000001E27                 cmp     r12, rdx
.text:0000000000001E2A                 jg      loc_1FDC
.text:0000000000001E30                 add     r12, rax
.text:0000000000001E33                 jmp     loc_1CB3
.text:0000000000001E38 ; ---------------------------------------------------------------------------
.text:0000000000001E38
.text:0000000000001E38 loc_1E38:                               ; CODE XREF: main+41B↑j
.text:0000000000001E38                 mov     rbx, [rsp+108h+var_40]
.text:0000000000001E40                 xor     rbx, fs:28h
.text:0000000000001E49                 movzx   eax, byte ptr [rsp+108h+var_F8]
.text:0000000000001E4E                 jnz     loc_200F
.text:0000000000001E54                 add     rsp, 0D8h
.text:0000000000001E5B                 pop     rbx
.text:0000000000001E5C                 pop     rbp
.text:0000000000001E5D                 pop     r12
.text:0000000000001E5F                 pop     r13
.text:0000000000001E61                 pop     r14
.text:0000000000001E63                 pop     r15
.text:0000000000001E65                 retn
.text:0000000000001E66 ; ---------------------------------------------------------------------------
.text:0000000000001E66
.text:0000000000001E66 loc_1E66:                               ; CODE XREF: main+691↑j
.text:0000000000001E66                                         ; main+6AB↑j
.text:0000000000001E66                 mov     rsi, r13
.text:0000000000001E69                 mov     edi, 4
.text:0000000000001E6E                 call    quotearg_style
.text:0000000000001E73                 lea     rsi, aOverflowInLdLd ; "overflow in %ld * %ld byte blocks for f"...
.text:0000000000001E7A                 mov     edx, 5          ; category
.text:0000000000001E7F                 xor     edi, edi        ; domainname
.text:0000000000001E81                 mov     r14, rax
.text:0000000000001E84                 call    _dcgettext
.text:0000000000001E89                 mov     rcx, [rsp+108h+var_100]
.text:0000000000001E8E                 mov     r9, r14
.text:0000000000001E91                 mov     rdx, rax        ; format
.text:0000000000001E94                 mov     r8, r12
.text:0000000000001E97                 xor     esi, esi        ; errnum
.text:0000000000001E99                 xor     edi, edi        ; status
.text:0000000000001E9B                 xor     eax, eax
.text:0000000000001E9D                 xor     r14d, r14d
.text:0000000000001EA0                 call    _error
.text:0000000000001EA5                 jmp     loc_1B99
.text:0000000000001EAA ; ---------------------------------------------------------------------------
.text:0000000000001EAA
.text:0000000000001EAA loc_1EAA:                               ; CODE XREF: main+710↑j
.text:0000000000001EAA                 mov     eax, [rsp+108h+stat_buf.st_mode]
.text:0000000000001EAE                 and     eax, 0D000h
.text:0000000000001EB3                 cmp     eax, 8000h
.text:0000000000001EB8                 jnz     loc_1F6B
.text:0000000000001EBE                 mov     rax, [rsp+108h+stat_buf.st_size]
.text:0000000000001EC3                 test    rax, rax
.text:0000000000001EC6                 jns     loc_1DF6
.text:0000000000001ECC                 mov     rsi, r13
.text:0000000000001ECF                 mov     edi, 4
.text:0000000000001ED4                 call    quotearg_style
.text:0000000000001ED9                 lea     rsi, aSHasUnusableAp ; "%s has unusable, apparently negative si"...
.text:0000000000001EE0                 mov     r12, rax
.text:0000000000001EE3                 mov     edx, 5          ; category
.text:0000000000001EE8
.text:0000000000001EE8 loc_1EE8:                               ; CODE XREF: main+8F7↓j
.text:0000000000001EE8                                         ; main+918↓j
.text:0000000000001EE8                 xor     edi, edi        ; domainname
.text:0000000000001EEA                 xor     r14d, r14d
.text:0000000000001EED                 call    _dcgettext
.text:0000000000001EF2                 mov     rcx, r12
.text:0000000000001EF5                 mov     rdx, rax        ; format
.text:0000000000001EF8                 xor     esi, esi        ; errnum
.text:0000000000001EFA                 xor     edi, edi        ; status
.text:0000000000001EFC                 xor     eax, eax
.text:0000000000001EFE                 call    _error
.text:0000000000001F03                 jmp     loc_1B99
.text:0000000000001F08 ; ---------------------------------------------------------------------------
.text:0000000000001F08
.text:0000000000001F08 loc_1F08:                               ; CODE XREF: main+719↑j
.text:0000000000001F08                 cmp     r12, rax
.text:0000000000001F0B                 cmovb   r12, rax
.text:0000000000001F0F                 jmp     loc_1CB3
.text:0000000000001F14 ; ---------------------------------------------------------------------------
.text:0000000000001F14
.text:0000000000001F14 loc_1F14:                               ; CODE XREF: main+2E7↑j
.text:0000000000001F14                 test    r12b, r12b
.text:0000000000001F17                 jz      loc_2014
.text:0000000000001F1D                 test    r13d, r13d
.text:0000000000001F20                 jg      loc_1ABC
.text:0000000000001F26
.text:0000000000001F26 loc_1F26:                               ; CODE XREF: main+38B↑j
.text:0000000000001F26                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:0000000000001F2D                 mov     edx, 5          ; category
.text:0000000000001F32
.text:0000000000001F32 loc_1F32:                               ; CODE XREF: main+9D4↓j
.text:0000000000001F32                 xor     edi, edi        ; domainname
.text:0000000000001F34                 call    _dcgettext
.text:0000000000001F39                 xor     edi, edi        ; status
.text:0000000000001F3B                 mov     rdx, rax        ; format
.text:0000000000001F3E                 xor     esi, esi        ; errnum
.text:0000000000001F40                 xor     eax, eax
.text:0000000000001F42                 call    _error
.text:0000000000001F47                 mov     edi, 1          ; status
.text:0000000000001F4C                 call    usage
.text:0000000000001F51 ; ---------------------------------------------------------------------------
.text:0000000000001F51
.text:0000000000001F51 loc_1F51:                               ; CODE XREF: main+722↑j
.text:0000000000001F51                 cmp     r12, rax
.text:0000000000001F54                 cmova   r12, rax
.text:0000000000001F58                 jmp     loc_1CBF
.text:0000000000001F5D ; ---------------------------------------------------------------------------
.text:0000000000001F5D
.text:0000000000001F5D loc_1F5D:                               ; CODE XREF: main+72B↑j
.text:0000000000001F5D                 xor     edx, edx
.text:0000000000001F5F                 div     r12
.text:0000000000001F62                 imul    r12, rax
.text:0000000000001F66                 jmp     loc_1CB3
.text:0000000000001F6B ; ---------------------------------------------------------------------------
.text:0000000000001F6B
.text:0000000000001F6B loc_1F6B:                               ; CODE XREF: main+7D8↑j
.text:0000000000001F6B                 xor     esi, esi        ; offset
.text:0000000000001F6D                 mov     edx, 2          ; whence
.text:0000000000001F72                 mov     edi, r15d       ; fd
.text:0000000000001F75                 call    _lseek
.text:0000000000001F7A                 test    rax, rax
.text:0000000000001F7D                 jns     loc_1DF6
.text:0000000000001F83                 mov     rsi, r13
.text:0000000000001F86                 mov     edi, 4
.text:0000000000001F8B                 call    quotearg_style
.text:0000000000001F90                 mov     edx, 5
.text:0000000000001F95                 mov     r12, rax
.text:0000000000001F98                 lea     rsi, aCannotGetTheSi ; "cannot get the size of %s"
.text:0000000000001F9F                 jmp     loc_1B76
.text:0000000000001FA4 ; ---------------------------------------------------------------------------
.text:0000000000001FA4
.text:0000000000001FA4 loc_1FA4:                               ; CODE XREF: main+734↑j
.text:0000000000001FA4                 lea     rax, [r12+rax-1]
.text:0000000000001FA9                 xor     edx, edx
.text:0000000000001FAB                 div     r12
.text:0000000000001FAE                 imul    r12, rax
.text:0000000000001FB2                 test    r12, r12
.text:0000000000001FB5                 jns     loc_1CBF
.text:0000000000001FBB                 mov     rsi, r13
.text:0000000000001FBE                 mov     edi, 4
.text:0000000000001FC3                 call    quotearg_style
.text:0000000000001FC8                 mov     edx, 5
.text:0000000000001FCD                 mov     r12, rax
.text:0000000000001FD0                 lea     rsi, aOverflowRoundi ; "overflow rounding up size of file %s"
.text:0000000000001FD7                 jmp     loc_1EE8
.text:0000000000001FDC ; ---------------------------------------------------------------------------
.text:0000000000001FDC
.text:0000000000001FDC loc_1FDC:                               ; CODE XREF: main+74A↑j
.text:0000000000001FDC                 mov     rsi, r13
.text:0000000000001FDF                 mov     edi, 4
.text:0000000000001FE4                 call    quotearg_style
.text:0000000000001FE9                 mov     edx, 5
.text:0000000000001FEE                 mov     r12, rax
.text:0000000000001FF1                 lea     rsi, aOverflowExtend ; "overflow extending size of file %s"
.text:0000000000001FF8                 jmp     loc_1EE8
.text:0000000000001FFD ; ---------------------------------------------------------------------------
.text:0000000000001FFD
.text:0000000000001FFD loc_1FFD:                               ; CODE XREF: main+D5↑j
.text:0000000000001FFD                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002002                 jnz     loc_1792
.text:0000000000002008                 xor     edi, edi        ; status
.text:000000000000200A                 call    usage
.text:000000000000200F ; ---------------------------------------------------------------------------
.text:000000000000200F
.text:000000000000200F loc_200F:                               ; CODE XREF: main+76E↑j
.text:000000000000200F                 call    ___stack_chk_fail
.text:0000000000002014 ; ---------------------------------------------------------------------------
.text:0000000000002014
.text:0000000000002014 loc_2014:                               ; CODE XREF: main+837↑j
.text:0000000000002014                 lea     rsi, aReference ; "--reference"
.text:000000000000201B                 mov     edi, 1
.text:0000000000002020                 call    quote_n
.text:0000000000002025                 lea     rsi, aSize      ; "--size"
.text:000000000000202C                 xor     edi, edi
.text:000000000000202E                 mov     rbp, rax
.text:0000000000002031                 call    quote_n
.text:0000000000002036                 mov     edx, 5
.text:000000000000203B                 mov     rbx, rax
.text:000000000000203E                 lea     rsi, aYouMustSpecify_0 ; "you must specify either %s or %s"
.text:0000000000002045                 jmp     loc_1A07
.text:000000000000204A ; ---------------------------------------------------------------------------
.text:000000000000204A
.text:000000000000204A loc_204A:                               ; CODE XREF: main+293↑j
.text:000000000000204A                 lea     rsi, aDivisionByZero ; "division by zero"
.text:0000000000002051                 mov     edx, 5          ; category
.text:0000000000002056                 xor     edi, edi        ; domainname
.text:0000000000002058                 call    _dcgettext
.text:000000000000205D                 xor     esi, esi        ; errnum
.text:000000000000205F                 mov     rdx, rax        ; format
.text:0000000000002062                 mov     edi, 1          ; status
.text:0000000000002067                 xor     eax, eax
.text:0000000000002069                 call    _error
.text:000000000000206E
.text:000000000000206E loc_206E:                               ; CODE XREF: main+3A5↑j
.text:000000000000206E                 mov     rsi, r14
.text:0000000000002071                 mov     edi, 4
.text:0000000000002076                 call    quotearg_style
.text:000000000000207B                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000002082                 mov     edx, 5          ; category
.text:0000000000002087                 xor     edi, edi        ; domainname
.text:0000000000002089                 mov     rbp, rax
.text:000000000000208C                 call    _dcgettext
.text:0000000000002091                 mov     rbx, rax
.text:0000000000002094                 call    ___errno_location
.text:0000000000002099                 mov     esi, [rax]      ; errnum
.text:000000000000209B                 mov     rcx, rbp
.text:000000000000209E                 mov     rdx, rbx        ; format
.text:00000000000020A1                 mov     edi, 1          ; status
.text:00000000000020A6                 xor     eax, eax
.text:00000000000020A8                 call    _error
.text:00000000000020AD
.text:00000000000020AD loc_20AD:                               ; CODE XREF: main+1BE↑j
.text:00000000000020AD                 lea     rsi, aMultipleRelati ; "multiple relative modifiers specified"
.text:00000000000020B4                 jmp     loc_1F32
.text:00000000000020B4 ; } // starts at 16E0
.text:00000000000020B4 main            endp
.text:00000000000020B4
.text:00000000000020B4 ; ---------------------------------------------------------------------------
.text:00000000000020B9                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000020C0
.text:00000000000020C0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000020C0                 public start
.text:00000000000020C0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000020C0 ; __unwind {
.text:00000000000020C0                 xor     ebp, ebp
.text:00000000000020C2                 mov     r9, rdx         ; rtld_fini
.text:00000000000020C5                 pop     rsi             ; argc
.text:00000000000020C6                 mov     rdx, rsp        ; ubp_av
.text:00000000000020C9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000020CD                 push    rax
.text:00000000000020CE                 push    rsp             ; stack_end
.text:00000000000020CF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000020D6                 lea     rcx, __libc_csu_init ; init
.text:00000000000020DD                 lea     rdi, main       ; main
.text:00000000000020E4                 call    cs:__libc_start_main_ptr
.text:00000000000020EA                 hlt
.text:00000000000020EA ; } // starts at 20C0
.text:00000000000020EA start           endp
.text:00000000000020EA
.text:00000000000020EA ; ---------------------------------------------------------------------------
.text:00000000000020EB                 align 10h
.text:00000000000020F0
.text:00000000000020F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020F0
.text:00000000000020F0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000020F0
.text:00000000000020F0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_21A3↓p
.text:00000000000020F0                 lea     rdi, __bss_start
.text:00000000000020F7                 push    rbp
.text:00000000000020F8                 lea     rax, __bss_start
.text:00000000000020FF                 cmp     rax, rdi
.text:0000000000002102                 mov     rbp, rsp
.text:0000000000002105                 jz      short loc_2120
.text:0000000000002107                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000210E                 test    rax, rax
.text:0000000000002111                 jz      short loc_2120
.text:0000000000002113                 pop     rbp
.text:0000000000002114                 jmp     rax
.text:0000000000002114 ; ---------------------------------------------------------------------------
.text:0000000000002116                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002120                                         ; deregister_tm_clones+21↑j
.text:0000000000002120                 pop     rbp
.text:0000000000002121                 retn
.text:0000000000002121 deregister_tm_clones endp
.text:0000000000002121
.text:0000000000002121 ; ---------------------------------------------------------------------------
.text:0000000000002122                 align 10h
.text:0000000000002130
.text:0000000000002130 ; =============== S U B R O U T I N E =======================================
.text:0000000000002130
.text:0000000000002130 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002130
.text:0000000000002130 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002130                 lea     rdi, __bss_start
.text:0000000000002137                 lea     rsi, __bss_start
.text:000000000000213E                 push    rbp
.text:000000000000213F                 sub     rsi, rdi
.text:0000000000002142                 mov     rbp, rsp
.text:0000000000002145                 sar     rsi, 3
.text:0000000000002149                 mov     rax, rsi
.text:000000000000214C                 shr     rax, 3Fh
.text:0000000000002150                 add     rsi, rax
.text:0000000000002153                 sar     rsi, 1
.text:0000000000002156                 jz      short loc_2170
.text:0000000000002158                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000215F                 test    rax, rax
.text:0000000000002162                 jz      short loc_2170
.text:0000000000002164                 pop     rbp
.text:0000000000002165                 jmp     rax
.text:0000000000002165 ; ---------------------------------------------------------------------------
.text:0000000000002167                 align 10h
.text:0000000000002170
.text:0000000000002170 loc_2170:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002170                                         ; register_tm_clones+32↑j
.text:0000000000002170                 pop     rbp
.text:0000000000002171                 retn
.text:0000000000002171 register_tm_clones endp
.text:0000000000002171
.text:0000000000002171 ; ---------------------------------------------------------------------------
.text:0000000000002172                 align 20h
.text:0000000000002180
.text:0000000000002180 ; =============== S U B R O U T I N E =======================================
.text:0000000000002180
.text:0000000000002180 ; Attributes: info_from_lumina
.text:0000000000002180
.text:0000000000002180 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002180                 cmp     cs:completed_7697, 0
.text:0000000000002187                 jnz     short locret_21B8
.text:0000000000002189                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002191                 push    rbp
.text:0000000000002192                 mov     rbp, rsp
.text:0000000000002195                 jz      short loc_21A3
.text:0000000000002197                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000219E                 call    __cxa_finalize
.text:00000000000021A3
.text:00000000000021A3 loc_21A3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000021A3                 call    deregister_tm_clones
.text:00000000000021A8                 mov     cs:completed_7697, 1
.text:00000000000021AF                 pop     rbp
.text:00000000000021B0                 retn
.text:00000000000021B0 ; ---------------------------------------------------------------------------
.text:00000000000021B1                 align 8
.text:00000000000021B8
.text:00000000000021B8 locret_21B8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000021B8                 rep retn
.text:00000000000021B8 __do_global_dtors_aux endp
.text:00000000000021B8
.text:00000000000021B8 ; ---------------------------------------------------------------------------
.text:00000000000021BA                 align 20h
.text:00000000000021C0
.text:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021C0
.text:00000000000021C0 ; Attributes: bp-based frame
.text:00000000000021C0
.text:00000000000021C0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000021C0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000021C0                 push    rbp
.text:00000000000021C1                 mov     rbp, rsp
.text:00000000000021C4                 pop     rbp
.text:00000000000021C5                 jmp     register_tm_clones
.text:00000000000021C5 frame_dummy     endp
.text:00000000000021C5
.text:00000000000021C5 ; ---------------------------------------------------------------------------
.text:00000000000021CA                 align 10h
.text:00000000000021D0
.text:00000000000021D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021D0
.text:00000000000021D0 ; Attributes: noreturn
.text:00000000000021D0
.text:00000000000021D0 ; void __fastcall __noreturn usage(int status)
.text:00000000000021D0                 public usage
.text:00000000000021D0 usage           proc near               ; CODE XREF: main+B7↑p
.text:00000000000021D0                                         ; main+86C↑p ...
.text:00000000000021D0
.text:00000000000021D0 var_A8          = qword ptr -0A8h
.text:00000000000021D0 var_A0          = qword ptr -0A0h
.text:00000000000021D0 var_98          = qword ptr -98h
.text:00000000000021D0 var_90          = qword ptr -90h
.text:00000000000021D0 var_88          = qword ptr -88h
.text:00000000000021D0 var_80          = qword ptr -80h
.text:00000000000021D0 var_78          = qword ptr -78h
.text:00000000000021D0 var_70          = qword ptr -70h
.text:00000000000021D0 var_68          = qword ptr -68h
.text:00000000000021D0 var_60          = qword ptr -60h
.text:00000000000021D0 var_58          = qword ptr -58h
.text:00000000000021D0 var_50          = qword ptr -50h
.text:00000000000021D0 var_48          = qword ptr -48h
.text:00000000000021D0 var_40          = qword ptr -40h
.text:00000000000021D0 var_30          = qword ptr -30h
.text:00000000000021D0
.text:00000000000021D0 ; __unwind {
.text:00000000000021D0                 push    r13
.text:00000000000021D2                 push    r12
.text:00000000000021D4                 mov     edx, 5          ; category
.text:00000000000021D9                 push    rbp
.text:00000000000021DA                 push    rbx
.text:00000000000021DB                 mov     ebp, edi
.text:00000000000021DD                 sub     rsp, 88h
.text:00000000000021E4                 mov     rbx, cs:program_name
.text:00000000000021EB                 mov     rax, fs:28h
.text:00000000000021F4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000021F9                 xor     eax, eax
.text:00000000000021FB                 test    edi, edi
.text:00000000000021FD                 jz      short loc_222D
.text:00000000000021FF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002206                 xor     edi, edi        ; domainname
.text:0000000000002208                 call    _dcgettext
.text:000000000000220D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002214                 mov     rdx, rax
.text:0000000000002217                 mov     rcx, rbx
.text:000000000000221A                 mov     esi, 1
.text:000000000000221F                 xor     eax, eax
.text:0000000000002221                 call    ___fprintf_chk
.text:0000000000002226
.text:0000000000002226 loc_2226:                               ; CODE XREF: usage+356↓j
.text:0000000000002226                 mov     edi, ebp        ; status
.text:0000000000002228                 call    _exit
.text:000000000000222D ; ---------------------------------------------------------------------------
.text:000000000000222D
.text:000000000000222D loc_222D:                               ; CODE XREF: usage+2D↑j
.text:000000000000222D                 lea     rsi, aUsageSOptionFi ; "Usage: %s OPTION... FILE...\n"
.text:0000000000002234                 xor     edi, edi        ; domainname
.text:0000000000002236                 call    _dcgettext
.text:000000000000223B                 mov     rdx, rbx
.text:000000000000223E                 mov     rsi, rax
.text:0000000000002241                 mov     edi, 1
.text:0000000000002246                 xor     eax, eax
.text:0000000000002248                 call    ___printf_chk
.text:000000000000224D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002254                 lea     rsi, aShrinkOrExtend ; "Shrink or extend the size of each FILE "...
.text:000000000000225B                 mov     edx, 5          ; category
.text:0000000000002260                 xor     edi, edi        ; domainname
.text:0000000000002262                 call    _dcgettext
.text:0000000000002267                 mov     rsi, rbx        ; stream
.text:000000000000226A                 mov     rdi, rax        ; s
.text:000000000000226D                 call    _fputs_unlocked
.text:0000000000002272                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002279                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002280                 mov     edx, 5          ; category
.text:0000000000002285                 xor     edi, edi        ; domainname
.text:0000000000002287                 call    _dcgettext
.text:000000000000228C                 mov     rsi, rbx        ; stream
.text:000000000000228F                 mov     rdi, rax        ; s
.text:0000000000002292                 call    _fputs_unlocked
.text:0000000000002297                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000229E                 lea     rsi, aCNoCreateDoNot ; "  -c, --no-create        do not create "...
.text:00000000000022A5                 mov     edx, 5          ; category
.text:00000000000022AA                 xor     edi, edi        ; domainname
.text:00000000000022AC                 call    _dcgettext
.text:00000000000022B1                 mov     rsi, rbx        ; stream
.text:00000000000022B4                 mov     rdi, rax        ; s
.text:00000000000022B7                 call    _fputs_unlocked
.text:00000000000022BC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000022C3                 lea     rsi, aOIoBlocksTreat ; "  -o, --io-blocks        treat SIZE as "...
.text:00000000000022CA                 mov     edx, 5          ; category
.text:00000000000022CF                 xor     edi, edi        ; domainname
.text:00000000000022D1                 call    _dcgettext
.text:00000000000022D6                 mov     rsi, rbx        ; stream
.text:00000000000022D9                 mov     rdi, rax        ; s
.text:00000000000022DC                 call    _fputs_unlocked
.text:00000000000022E1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000022E8                 lea     rsi, aRReferenceRfil ; "  -r, --reference=RFILE  base size on R"...
.text:00000000000022EF                 mov     edx, 5          ; category
.text:00000000000022F4                 xor     edi, edi        ; domainname
.text:00000000000022F6                 call    _dcgettext
.text:00000000000022FB                 mov     rsi, rbx        ; stream
.text:00000000000022FE                 mov     rdi, rax        ; s
.text:0000000000002301                 call    _fputs_unlocked
.text:0000000000002306                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000230D                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002314                 mov     edx, 5          ; category
.text:0000000000002319                 xor     edi, edi        ; domainname
.text:000000000000231B                 call    _dcgettext
.text:0000000000002320                 mov     rsi, rbx        ; stream
.text:0000000000002323                 mov     rdi, rax        ; s
.text:0000000000002326                 call    _fputs_unlocked
.text:000000000000232B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002332                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002339                 mov     edx, 5          ; category
.text:000000000000233E                 xor     edi, edi        ; domainname
.text:0000000000002340                 call    _dcgettext
.text:0000000000002345                 mov     rsi, rbx        ; stream
.text:0000000000002348                 mov     rdi, rax        ; s
.text:000000000000234B                 call    _fputs_unlocked
.text:0000000000002350                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002357                 lea     rsi, aTheSizeArgumen ; "\nThe SIZE argument is an integer and o"...
.text:000000000000235E                 mov     edx, 5          ; category
.text:0000000000002363                 xor     edi, edi        ; domainname
.text:0000000000002365                 call    _dcgettext
.text:000000000000236A                 mov     rsi, rbx        ; stream
.text:000000000000236D                 mov     rdi, rax        ; s
.text:0000000000002370                 call    _fputs_unlocked
.text:0000000000002375                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000237C                 lea     rsi, aSizeMayAlsoBeP ; "\nSIZE may also be prefixed by one of t"...
.text:0000000000002383                 mov     edx, 5          ; category
.text:0000000000002388                 xor     edi, edi        ; domainname
.text:000000000000238A                 call    _dcgettext
.text:000000000000238F                 mov     rsi, rbx        ; stream
.text:0000000000002392                 mov     rdi, rax        ; s
.text:0000000000002395                 lea     rbx, aTruncate  ; "truncate"
.text:000000000000239C                 call    _fputs_unlocked
.text:00000000000023A1                 lea     rax, asc_584A   ; "["
.text:00000000000023A8                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000023AF                 mov     [rsp+0A8h+var_48], 0
.text:00000000000023B8                 mov     [rsp+0A8h+var_40], 0
.text:00000000000023C1                 mov     rdx, rsp
.text:00000000000023C4                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000023C8                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000023CF                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000023D4                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000023DB                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000023E0                 lea     rax, domainname ; "coreutils"
.text:00000000000023E7                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000023EC                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000023F3                 mov     [rsp+0A8h+var_98], rax
.text:00000000000023F8                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000023FF                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002404                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002409                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002410                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002415                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000241C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002421                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002426                 mov     [rsp+0A8h+var_60], rax
.text:000000000000242B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: usage+27D↓j
.text:0000000000002430                 add     rdx, 10h
.text:0000000000002434                 mov     rdi, [rdx]
.text:0000000000002437                 test    rdi, rdi
.text:000000000000243A                 jz      short loc_244F
.text:000000000000243C                 mov     ecx, 9
.text:0000000000002441                 mov     rsi, rbx
.text:0000000000002444                 repe cmpsb
.text:0000000000002446                 setnbe  al
.text:0000000000002449                 sbb     al, 0
.text:000000000000244B                 test    al, al
.text:000000000000244D                 jnz     short loc_2430
.text:000000000000244F
.text:000000000000244F loc_244F:                               ; CODE XREF: usage+26A↑j
.text:000000000000244F                 mov     r12, [rdx+8]
.text:0000000000002453                 xor     edi, edi        ; domainname
.text:0000000000002455                 mov     edx, 5          ; category
.text:000000000000245A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002461                 test    r12, r12
.text:0000000000002464                 jz      loc_252B
.text:000000000000246A                 call    _dcgettext
.text:000000000000246F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002476                 lea     rdx, unk_58C0
.text:000000000000247D                 mov     rsi, rax
.text:0000000000002480                 mov     edi, 1
.text:0000000000002485                 xor     eax, eax
.text:0000000000002487                 call    ___printf_chk
.text:000000000000248C                 xor     esi, esi        ; locale
.text:000000000000248E                 mov     edi, 5          ; category
.text:0000000000002493                 call    _setlocale
.text:0000000000002498                 test    rax, rax
.text:000000000000249B                 jz      short loc_24B9
.text:000000000000249D                 lea     rsi, s2         ; "en_"
.text:00000000000024A4                 mov     edx, 3          ; n
.text:00000000000024A9                 mov     rdi, rax        ; s1
.text:00000000000024AC                 call    _strncmp
.text:00000000000024B1                 test    eax, eax
.text:00000000000024B3                 jnz     loc_25C0
.text:00000000000024B9
.text:00000000000024B9 loc_24B9:                               ; CODE XREF: usage+2CB↑j
.text:00000000000024B9                                         ; usage+415↓j
.text:00000000000024B9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000024C0                 xor     edi, edi        ; domainname
.text:00000000000024C2                 mov     edx, 5          ; category
.text:00000000000024C7                 call    _dcgettext
.text:00000000000024CC                 lea     rcx, aTruncate  ; "truncate"
.text:00000000000024D3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000024DA                 mov     rsi, rax
.text:00000000000024DD                 mov     edi, 1
.text:00000000000024E2                 xor     eax, eax
.text:00000000000024E4                 call    ___printf_chk
.text:00000000000024E9                 cmp     r12, rbx
.text:00000000000024EC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000024F3                 lea     rbx, aUsageSOptionFi+1Ch ; ""
.text:00000000000024FA                 cmovz   rbx, rcx
.text:00000000000024FE
.text:00000000000024FE loc_24FE:                               ; CODE XREF: usage+3E4↓j
.text:00000000000024FE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002505                 xor     edi, edi        ; domainname
.text:0000000000002507                 mov     edx, 5          ; category
.text:000000000000250C                 call    _dcgettext
.text:0000000000002511                 mov     rcx, rbx
.text:0000000000002514                 mov     rsi, rax
.text:0000000000002517                 mov     rdx, r12
.text:000000000000251A                 mov     edi, 1
.text:000000000000251F                 xor     eax, eax
.text:0000000000002521                 call    ___printf_chk
.text:0000000000002526                 jmp     loc_2226
.text:000000000000252B ; ---------------------------------------------------------------------------
.text:000000000000252B
.text:000000000000252B loc_252B:                               ; CODE XREF: usage+294↑j
.text:000000000000252B                 call    _dcgettext
.text:0000000000002530                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002537                 lea     rdx, unk_58C0
.text:000000000000253E                 mov     rsi, rax
.text:0000000000002541                 mov     edi, 1
.text:0000000000002546                 xor     eax, eax
.text:0000000000002548                 call    ___printf_chk
.text:000000000000254D                 xor     esi, esi        ; locale
.text:000000000000254F                 mov     edi, 5          ; category
.text:0000000000002554                 call    _setlocale
.text:0000000000002559                 test    rax, rax
.text:000000000000255C                 jz      short loc_2576
.text:000000000000255E                 lea     rsi, s2         ; "en_"
.text:0000000000002565                 mov     edx, 3          ; n
.text:000000000000256A                 mov     rdi, rax        ; s1
.text:000000000000256D                 call    _strncmp
.text:0000000000002572                 test    eax, eax
.text:0000000000002574                 jnz     short loc_25B9
.text:0000000000002576
.text:0000000000002576 loc_2576:                               ; CODE XREF: usage+38C↑j
.text:0000000000002576                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000257D                 mov     edx, 5          ; category
.text:0000000000002582                 xor     edi, edi        ; domainname
.text:0000000000002584                 lea     r12, aTruncate  ; "truncate"
.text:000000000000258B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002592                 call    _dcgettext
.text:0000000000002597                 lea     rcx, aTruncate  ; "truncate"
.text:000000000000259E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000025A5                 mov     rsi, rax
.text:00000000000025A8                 mov     edi, 1
.text:00000000000025AD                 xor     eax, eax
.text:00000000000025AF                 call    ___printf_chk
.text:00000000000025B4                 jmp     loc_24FE
.text:00000000000025B9 ; ---------------------------------------------------------------------------
.text:00000000000025B9
.text:00000000000025B9 loc_25B9:                               ; CODE XREF: usage+3A4↑j
.text:00000000000025B9                 lea     r12, aTruncate  ; "truncate"
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: usage+2E3↑j
.text:00000000000025C0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000025C7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000025CE                 xor     edi, edi        ; domainname
.text:00000000000025D0                 mov     edx, 5          ; category
.text:00000000000025D5                 call    _dcgettext
.text:00000000000025DA                 mov     rsi, r13        ; stream
.text:00000000000025DD                 mov     rdi, rax        ; s
.text:00000000000025E0                 call    _fputs_unlocked
.text:00000000000025E5                 jmp     loc_24B9
.text:00000000000025E5 ; } // starts at 21D0
.text:00000000000025E5 usage           endp
.text:00000000000025E5
.text:00000000000025E5 ; ---------------------------------------------------------------------------
.text:00000000000025EA                 align 10h
.text:00000000000025F0
.text:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025F0
.text:00000000000025F0
.text:00000000000025F0                 public close_stdout_set_file_name
.text:00000000000025F0 close_stdout_set_file_name proc near
.text:00000000000025F0 ; __unwind {
.text:00000000000025F0                 mov     cs:file_name, rdi
.text:00000000000025F7                 retn
.text:00000000000025F7 ; } // starts at 25F0
.text:00000000000025F7 close_stdout_set_file_name endp
.text:00000000000025F7
.text:00000000000025F7 ; ---------------------------------------------------------------------------
.text:00000000000025F8                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600
.text:0000000000002600                 public close_stdout_set_ignore_EPIPE
.text:0000000000002600 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 mov     cs:ignore_EPIPE, dil
.text:0000000000002607                 retn
.text:0000000000002607 ; } // starts at 2600
.text:0000000000002607 close_stdout_set_ignore_EPIPE endp
.text:0000000000002607
.text:0000000000002607 ; ---------------------------------------------------------------------------
.text:0000000000002608                 align 10h
.text:0000000000002610
.text:0000000000002610 ; =============== S U B R O U T I N E =======================================
.text:0000000000002610
.text:0000000000002610 ; Attributes: info_from_lumina
.text:0000000000002610
.text:0000000000002610 ; void __cdecl close_stdout()
.text:0000000000002610                 public close_stdout
.text:0000000000002610 close_stdout    proc near               ; DATA XREF: main+67↑o
.text:0000000000002610 ; __unwind {
.text:0000000000002610                 push    rbp
.text:0000000000002611                 push    rbx
.text:0000000000002612                 sub     rsp, 8
.text:0000000000002616                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000261D                 call    close_stream
.text:0000000000002622                 test    eax, eax
.text:0000000000002624                 jz      short loc_263C
.text:0000000000002626                 call    ___errno_location
.text:000000000000262B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002632                 mov     rbx, rax
.text:0000000000002635                 jz      short loc_2653
.text:0000000000002637                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000263A                 jnz     short loc_2653
.text:000000000000263C
.text:000000000000263C loc_263C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000263C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002643                 call    close_stream
.text:0000000000002648                 test    eax, eax
.text:000000000000264A                 jnz     short loc_2692
.text:000000000000264C                 add     rsp, 8
.text:0000000000002650                 pop     rbx
.text:0000000000002651                 pop     rbp
.text:0000000000002652                 retn
.text:0000000000002653 ; ---------------------------------------------------------------------------
.text:0000000000002653
.text:0000000000002653 loc_2653:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002653                                         ; close_stdout+2A↑j
.text:0000000000002653                 lea     rsi, aWriteError ; "write error"
.text:000000000000265A                 xor     edi, edi        ; domainname
.text:000000000000265C                 mov     edx, 5          ; category
.text:0000000000002661                 call    _dcgettext
.text:0000000000002666                 mov     rdi, cs:file_name
.text:000000000000266D                 mov     rbp, rax
.text:0000000000002670                 test    rdi, rdi
.text:0000000000002673                 jz      short loc_269D
.text:0000000000002675                 call    quotearg_colon
.text:000000000000267A                 mov     esi, [rbx]      ; errnum
.text:000000000000267C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002683                 mov     rcx, rax
.text:0000000000002686                 mov     r8, rbp
.text:0000000000002689                 xor     edi, edi        ; status
.text:000000000000268B                 xor     eax, eax
.text:000000000000268D                 call    _error
.text:0000000000002692
.text:0000000000002692 loc_2692:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002692                                         ; close_stdout+A2↓j
.text:0000000000002692                 mov     edi, cs:exit_failure ; status
.text:0000000000002698                 call    __exit
.text:000000000000269D ; ---------------------------------------------------------------------------
.text:000000000000269D
.text:000000000000269D loc_269D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000269D                 mov     esi, [rbx]      ; errnum
.text:000000000000269F                 lea     rdx, format+4   ; format
.text:00000000000026A6                 mov     rcx, rax
.text:00000000000026A9                 xor     edi, edi        ; status
.text:00000000000026AB                 xor     eax, eax
.text:00000000000026AD                 call    _error
.text:00000000000026B2                 jmp     short loc_2692
.text:00000000000026B2 ; } // starts at 2610
.text:00000000000026B2 close_stdout    endp
.text:00000000000026B2
.text:00000000000026B2 ; ---------------------------------------------------------------------------
.text:00000000000026B4                 align 20h
.text:00000000000026C0
.text:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026C0
.text:00000000000026C0
.text:00000000000026C0                 public set_program_name
.text:00000000000026C0 set_program_name proc near              ; CODE XREF: main+32↑p
.text:00000000000026C0 ; __unwind {
.text:00000000000026C0                 test    rdi, rdi
.text:00000000000026C3                 push    rbx
.text:00000000000026C4                 jz      short loc_273D
.text:00000000000026C6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000026CB                 mov     rbx, rdi
.text:00000000000026CE                 call    _strrchr
.text:00000000000026D3                 test    rax, rax
.text:00000000000026D6                 jz      short loc_272D
.text:00000000000026D8                 lea     r8, [rax+1]
.text:00000000000026DC                 mov     rdx, r8
.text:00000000000026DF                 sub     rdx, rbx
.text:00000000000026E2                 cmp     rdx, 6
.text:00000000000026E6                 jle     short loc_272D
.text:00000000000026E8                 lea     rsi, [rax-6]
.text:00000000000026EC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000026F3                 mov     ecx, 7
.text:00000000000026F8                 repe cmpsb
.text:00000000000026FA                 setnbe  dl
.text:00000000000026FD                 sbb     dl, 0
.text:0000000000002700                 test    dl, dl
.text:0000000000002702                 jnz     short loc_272D
.text:0000000000002704                 lea     rdi, aLt        ; "lt-"
.text:000000000000270B                 mov     ecx, 3
.text:0000000000002710                 mov     rsi, r8
.text:0000000000002713                 mov     rbx, r8
.text:0000000000002716                 repe cmpsb
.text:0000000000002718                 setnbe  dl
.text:000000000000271B                 sbb     dl, 0
.text:000000000000271E                 test    dl, dl
.text:0000000000002720                 jnz     short loc_272D
.text:0000000000002722                 lea     rbx, [rax+4]
.text:0000000000002726                 mov     cs:__bss_start, rbx
.text:000000000000272D
.text:000000000000272D loc_272D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000272D                                         ; set_program_name+26↑j ...
.text:000000000000272D                 mov     cs:program_name, rbx
.text:0000000000002734                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000273B                 pop     rbx
.text:000000000000273C                 retn
.text:000000000000273D ; ---------------------------------------------------------------------------
.text:000000000000273D
.text:000000000000273D loc_273D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000273D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002744                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000274B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002750                 mov     esi, 1          ; size
.text:0000000000002755                 call    _fwrite
.text:000000000000275A                 call    _abort
.text:000000000000275A ; } // starts at 26C0
.text:000000000000275A set_program_name endp
.text:000000000000275A
.text:000000000000275A ; ---------------------------------------------------------------------------
.text:000000000000275F                 align 20h
.text:0000000000002760
.text:0000000000002760 ; =============== S U B R O U T I N E =======================================
.text:0000000000002760
.text:0000000000002760 ; Attributes: info_from_lumina
.text:0000000000002760
.text:0000000000002760 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002760 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002760                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002760 ; __unwind {
.text:0000000000002760                 push    rbp
.text:0000000000002761                 push    rbx
.text:0000000000002762                 mov     rbp, rdi
.text:0000000000002765                 mov     ebx, esi
.text:0000000000002767                 sub     rsp, 8
.text:000000000000276B                 call    locale_charset
.text:0000000000002770                 movzx   edx, byte ptr [rax]
.text:0000000000002773                 and     edx, 0FFFFFFDFh
.text:0000000000002776                 cmp     dl, 55h ; 'U'
.text:0000000000002779                 jz      short loc_27F0
.text:000000000000277B                 cmp     dl, 47h ; 'G'
.text:000000000000277E                 jz      short loc_27A0
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002780                                         ; gettext_quote+50↓j ...
.text:0000000000002780                 lea     rax, unk_6103
.text:0000000000002787                 lea     rdx, asc_6105   ; "'"
.text:000000000000278E                 cmp     ebx, 9
.text:0000000000002791                 cmovnz  rax, rdx
.text:0000000000002795                 add     rsp, 8
.text:0000000000002799                 pop     rbx
.text:000000000000279A                 pop     rbp
.text:000000000000279B                 retn
.text:000000000000279B ; ---------------------------------------------------------------------------
.text:000000000000279C                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000027A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000027A4                 and     edx, 0FFFFFFDFh
.text:00000000000027A7                 cmp     dl, 42h ; 'B'
.text:00000000000027AA                 jnz     short loc_2780
.text:00000000000027AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000027B0                 jnz     short loc_2780
.text:00000000000027B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000027B6                 jnz     short loc_2780
.text:00000000000027B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000027BC                 jnz     short loc_2780
.text:00000000000027BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000027C2                 jnz     short loc_2780
.text:00000000000027C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000027C8                 jnz     short loc_2780
.text:00000000000027CA                 cmp     byte ptr [rax+7], 0
.text:00000000000027CE                 jnz     short loc_2780
.text:00000000000027D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000027D4                 lea     rax, unk_60FC
.text:00000000000027DB                 lea     rdx, unk_6100
.text:00000000000027E2                 cmovnz  rax, rdx
.text:00000000000027E6                 add     rsp, 8
.text:00000000000027EA                 pop     rbx
.text:00000000000027EB                 pop     rbp
.text:00000000000027EC                 retn
.text:00000000000027EC ; ---------------------------------------------------------------------------
.text:00000000000027ED                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000027F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000027F4                 and     edx, 0FFFFFFDFh
.text:00000000000027F7                 cmp     dl, 54h ; 'T'
.text:00000000000027FA                 jnz     short loc_2780
.text:00000000000027FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002800                 and     edx, 0FFFFFFDFh
.text:0000000000002803                 cmp     dl, 46h ; 'F'
.text:0000000000002806                 jnz     loc_2780
.text:000000000000280C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002810                 jnz     loc_2780
.text:0000000000002816                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000281A                 jnz     loc_2780
.text:0000000000002820                 cmp     byte ptr [rax+5], 0
.text:0000000000002824                 jnz     loc_2780
.text:000000000000282A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000282E                 lea     rax, unk_60F4
.text:0000000000002835                 lea     rdx, unk_60F8
.text:000000000000283C                 cmovnz  rax, rdx
.text:0000000000002840                 add     rsp, 8
.text:0000000000002844                 pop     rbx
.text:0000000000002845                 pop     rbp
.text:0000000000002846                 retn
.text:0000000000002846 ; } // starts at 2760
.text:0000000000002846 gettext_quote   endp
.text:0000000000002846
.text:0000000000002846 ; ---------------------------------------------------------------------------
.text:0000000000002847                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850 ; Attributes: info_from_lumina
.text:0000000000002850
.text:0000000000002850 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002850 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002850                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002850
.text:0000000000002850 var_E0          = dword ptr -0E0h
.text:0000000000002850 var_DB          = byte ptr -0DBh
.text:0000000000002850 var_DA          = byte ptr -0DAh
.text:0000000000002850 var_D9          = byte ptr -0D9h
.text:0000000000002850 s               = qword ptr -0D8h
.text:0000000000002850 n               = qword ptr -0D0h
.text:0000000000002850 var_C8          = qword ptr -0C8h
.text:0000000000002850 ps              = qword ptr -0C0h
.text:0000000000002850 var_B8          = qword ptr -0B8h
.text:0000000000002850 var_B0          = qword ptr -0B0h
.text:0000000000002850 var_A8          = qword ptr -0A8h
.text:0000000000002850 s2              = qword ptr -0A0h
.text:0000000000002850 var_98          = qword ptr -98h
.text:0000000000002850 var_90          = qword ptr -90h
.text:0000000000002850 var_88          = qword ptr -88h
.text:0000000000002850 var_80          = qword ptr -80h
.text:0000000000002850 var_78          = qword ptr -78h
.text:0000000000002850 var_70          = dword ptr -70h
.text:0000000000002850 var_6C          = byte ptr -6Ch
.text:0000000000002850 var_6B          = byte ptr -6Bh
.text:0000000000002850 var_6A          = byte ptr -6Ah
.text:0000000000002850 var_69          = byte ptr -69h
.text:0000000000002850 var_68          = qword ptr -68h
.text:0000000000002850 var_60          = qword ptr -60h
.text:0000000000002850 wc              = dword ptr -4Ch
.text:0000000000002850 var_48          = qword ptr -48h
.text:0000000000002850 var_40          = qword ptr -40h
.text:0000000000002850 arg_0           = qword ptr  8
.text:0000000000002850 arg_8           = qword ptr  10h
.text:0000000000002850 arg_10          = qword ptr  18h
.text:0000000000002850
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 push    r15
.text:0000000000002852                 push    r14
.text:0000000000002854                 mov     r15d, r8d
.text:0000000000002857                 push    r13
.text:0000000000002859                 push    r12
.text:000000000000285B                 mov     r14, rdi
.text:000000000000285E                 push    rbp
.text:000000000000285F                 push    rbx
.text:0000000000002860                 mov     ebx, r9d
.text:0000000000002863                 mov     r13, rsi
.text:0000000000002866                 mov     rbp, rcx
.text:0000000000002869                 and     ebx, 2
.text:000000000000286C                 sub     rsp, 0B8h
.text:0000000000002873                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000287B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002880                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002885                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000288A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000288F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002897                 mov     [rsp+0E8h+var_80], rax
.text:000000000000289C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000028A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000028A9                 mov     rax, fs:28h
.text:00000000000028B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000028BA                 xor     eax, eax
.text:00000000000028BC                 call    ___ctype_get_mb_cur_max
.text:00000000000028C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000028C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000028CA                 ja      def_28E1        ; jumptable 00000000000121F1 default case
.text:00000000000028D0                 lea     rcx, jpt_28E1
.text:00000000000028D7                 mov     edx, r15d
.text:00000000000028DA                 movsxd  rax, ds:(jpt_28E1 - 6160h)[rcx+rdx*4]
.text:00000000000028DE                 add     rax, rcx
.text:00000000000028E1                 jmp     rax             ; switch jump
.text:00000000000028E3 ; ---------------------------------------------------------------------------
.text:00000000000028E3
.text:00000000000028E3 loc_28E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000028E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000028E3                                         ; DATA XREF: ...
.text:00000000000028E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000028E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000028ED                 xor     r12d, r12d
.text:00000000000028F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000028F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000028FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002903
.text:0000000000002903 loc_2903:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002903                 lea     rax, asc_6105   ; "'"
.text:000000000000290A                 mov     [rsp+0E8h+n], 1
.text:0000000000002913                 xor     r15d, r15d
.text:0000000000002916                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000291E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002923
.text:0000000000002923 loc_2923:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002923                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002923                 xor     r11d, r11d
.text:0000000000002926                 mov     rax, rbp
.text:0000000000002929                 mov     r8d, r12d
.text:000000000000292C                 mov     rbp, r11
.text:000000000000292F                 mov     r11, rax
.text:0000000000002932                 nop     word ptr [rax+rax+00h]
.text:0000000000002938
.text:0000000000002938 loc_2938:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002938                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002938                 cmp     r11, rbp
.text:000000000000293B                 setnz   r12b
.text:000000000000293F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002943                 jnz     short loc_2952
.text:0000000000002945                 mov     rax, [rsp+0E8h+s]
.text:000000000000294A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000294E                 setnz   r12b
.text:0000000000002952
.text:0000000000002952 loc_2952:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002952                 test    r12b, r12b
.text:0000000000002955                 jz      loc_2FB0
.text:000000000000295B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002960                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002965                 lea     r9, [rdi+rbp]
.text:0000000000002969                 setnz   al
.text:000000000000296C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002970                 mov     r10d, eax
.text:0000000000002973                 jz      loc_2A20
.text:0000000000002979                 mov     rax, [rsp+0E8h+n]
.text:000000000000297E                 test    rax, rax
.text:0000000000002981                 jz      loc_2DB0
.text:0000000000002987                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000298B                 lea     rbx, [rbp+rax+0]
.text:0000000000002990                 jnz     short loc_29C0
.text:0000000000002992                 cmp     rax, 1
.text:0000000000002996                 jbe     short loc_29C0
.text:0000000000002998                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000299D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000029A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000029A7                 call    _strlen
.text:00000000000029AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000029B8                 mov     r11, rax
.text:00000000000029BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000029C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000029C0                 cmp     rbx, r11
.text:00000000000029C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000029C8                 ja      loc_2F80
.text:00000000000029CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000029D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000029D8                 mov     rdi, r9         ; s1
.text:00000000000029DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000029E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000029E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000029EA                 call    _memcmp
.text:00000000000029EF                 test    eax, eax
.text:00000000000029F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000029F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002A01                 jnz     loc_2F80
.text:0000000000002A07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002A12                 jnz     loc_3995
.text:0000000000002A18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002A20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002A20                 movzx   ebx, byte ptr [r9]
.text:0000000000002A24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002A27                 ja      def_2A3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002A2D                 lea     rcx, jpt_2A3E
.text:0000000000002A34                 movzx   edx, bl
.text:0000000000002A37                 movsxd  rax, ds:(jpt_2A3E - 618Ch)[rcx+rdx*4]
.text:0000000000002A3B                 add     rax, rcx
.text:0000000000002A3E                 jmp     rax             ; switch jump
.text:0000000000002A40 ; ---------------------------------------------------------------------------
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002A40                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002A40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002A43
.text:0000000000002A43 loc_2A43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A43                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002A43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002A47                 setnz   al
.text:0000000000002A4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A4E                 jnz     short loc_2A5C
.text:0000000000002A50                 mov     rax, [rsp+0E8h+s]
.text:0000000000002A55                 cmp     byte ptr [rax+1], 0
.text:0000000000002A59                 setnz   al
.text:0000000000002A5C
.text:0000000000002A5C loc_2A5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002A5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A61                 setz    dl
.text:0000000000002A64                 test    al, al
.text:0000000000002A66                 jz      loc_2CB8
.text:0000000000002A6C
.text:0000000000002A6C loc_2A6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002A6C                 xor     r12d, r12d
.text:0000000000002A6F                 xor     eax, eax
.text:0000000000002A71                 nop     dword ptr [rax+00000000h]
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002A78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002A78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002A7D                 jnz     loc_2B92
.text:0000000000002A83                 test    dl, dl
.text:0000000000002A85                 jnz     loc_2B92
.text:0000000000002A8B
.text:0000000000002A8B loc_2A8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002A8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002A90                 test    rsi, rsi
.text:0000000000002A93                 jz      short loc_2AA9
.text:0000000000002A95                 mov     edx, ebx
.text:0000000000002A97                 shr     dl, 5
.text:0000000000002A9A                 movzx   edx, dl
.text:0000000000002A9D                 mov     edx, [rsi+rdx*4]
.text:0000000000002AA0                 bt      edx, ebx
.text:0000000000002AA3                 jb      loc_2BF3
.text:0000000000002AA9
.text:0000000000002AA9 loc_2AA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002AA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002AA9                 test    r10b, r10b
.text:0000000000002AAC                 jnz     loc_2BF3
.text:0000000000002AB2                 xor     eax, 1
.text:0000000000002AB5                 add     rbp, 1
.text:0000000000002AB9                 and     eax, r8d
.text:0000000000002ABC
.text:0000000000002ABC loc_2ABC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002ABC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002ABC                 test    al, al
.text:0000000000002ABE                 jz      short loc_2AE0
.text:0000000000002AC0                 cmp     r13, r15
.text:0000000000002AC3                 jbe     short loc_2ACA
.text:0000000000002AC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002ACA
.text:0000000000002ACA loc_2ACA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002ACA                 lea     rax, [r15+1]
.text:0000000000002ACE                 cmp     r13, rax
.text:0000000000002AD1                 jbe     short loc_2AD9
.text:0000000000002AD3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002AD9                 add     r15, 2
.text:0000000000002ADD                 xor     r8d, r8d
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002AE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002AE0                 cmp     r15, r13
.text:0000000000002AE3                 jnb     short loc_2AE9
.text:0000000000002AE5                 mov     [r14+r15], bl
.text:0000000000002AE9
.text:0000000000002AE9 loc_2AE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002AE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002AEE                 add     r15, 1
.text:0000000000002AF2                 mov     eax, 0
.text:0000000000002AF7                 test    r12b, r12b
.text:0000000000002AFA                 cmovz   edi, eax
.text:0000000000002AFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002B02                 jmp     loc_2938
.text:0000000000002B02 ; ---------------------------------------------------------------------------
.text:0000000000002B07                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002B10                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002B10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002B13
.text:0000000000002B13 loc_2B13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B13                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B13                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002B17                 cmp     eax, 2
.text:0000000000002B1A                 jz      loc_30D8
.text:0000000000002B20                 cmp     eax, 5
.text:0000000000002B23                 jz      loc_3098
.text:0000000000002B29                 cmp     eax, 2
.text:0000000000002B2C                 mov     ebx, 3Fh ; '?'
.text:0000000000002B31                 setz    dl
.text:0000000000002B34                 xor     r12d, r12d
.text:0000000000002B37                 xor     eax, eax
.text:0000000000002B39                 jmp     loc_2A78
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B3E                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002B40                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002B40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002B43
.text:0000000000002B43 loc_2B43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B43                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B43                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002B48                 jz      loc_3050
.text:0000000000002B4E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002B53                 xor     edx, edx
.text:0000000000002B55                 xor     eax, eax
.text:0000000000002B57                 mov     ebx, 27h ; '''
.text:0000000000002B5C                 jmp     loc_2A78
.text:0000000000002B5C ; ---------------------------------------------------------------------------
.text:0000000000002B61                 align 8
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B68                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B68                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002B6D                 mov     ebx, 74h ; 't'
.text:0000000000002B72
.text:0000000000002B72 loc_2B72:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002B72                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002B72                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B77                 setz    al
.text:0000000000002B7A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002B7E                 jnz     loc_2CCE
.text:0000000000002B84
.text:0000000000002B84 loc_2B84:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002B84                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002B84                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002B89                 jnz     short loc_2BF0
.text:0000000000002B8B
.text:0000000000002B8B loc_2B8B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002B8B                 mov     ebx, edx
.text:0000000000002B8D                 xor     r12d, r12d
.text:0000000000002B90                 xor     eax, eax
.text:0000000000002B92
.text:0000000000002B92 loc_2B92:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002B92                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002B92                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B97                 jnz     loc_2A8B
.text:0000000000002B9D                 jmp     loc_2AA9
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002BA2                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BA8                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002BA8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002BAD                 mov     ebx, 62h ; 'b'
.text:0000000000002BB2                 jmp     short loc_2B84
.text:0000000000002BB2 ; ---------------------------------------------------------------------------
.text:0000000000002BB4                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BB8                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002BB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002BBD                 jz      loc_2F90
.text:0000000000002BC3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002BC8                 jz      loc_2DE0
.text:0000000000002BCE
.text:0000000000002BCE loc_2BCE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002BCE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BD3                 jz      loc_2DE0
.text:0000000000002BD9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002BDF                 jnz     loc_2F9B
.text:0000000000002BE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002BEA                 nop     word ptr [rax+rax+00h]
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002BF0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002BF0                 xor     r12d, r12d
.text:0000000000002BF3
.text:0000000000002BF3 loc_2BF3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002BF3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002BF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002BF8                 setz    dl
.text:0000000000002BFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002C00                 mov     eax, edx
.text:0000000000002C02                 jnz     loc_3458
.text:0000000000002C08                 mov     eax, r8d
.text:0000000000002C0B                 xor     eax, 1
.text:0000000000002C0E                 and     al, dl
.text:0000000000002C10                 jz      short loc_2C41
.text:0000000000002C12                 cmp     r13, r15
.text:0000000000002C15                 jbe     short loc_2C1C
.text:0000000000002C17                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C1C
.text:0000000000002C1C loc_2C1C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002C1C                 lea     rdx, [r15+1]
.text:0000000000002C20                 cmp     r13, rdx
.text:0000000000002C23                 jbe     short loc_2C2B
.text:0000000000002C25                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002C2B
.text:0000000000002C2B loc_2C2B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002C2B                 lea     rdx, [r15+2]
.text:0000000000002C2F                 cmp     r13, rdx
.text:0000000000002C32                 jbe     short loc_2C3A
.text:0000000000002C34                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002C3A
.text:0000000000002C3A loc_2C3A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002C3A                 add     r15, 3
.text:0000000000002C3E                 mov     r8d, eax
.text:0000000000002C41
.text:0000000000002C41 loc_2C41:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002C41                 cmp     r13, r15
.text:0000000000002C44                 jbe     short loc_2C4B
.text:0000000000002C46                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C4B
.text:0000000000002C4B loc_2C4B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002C4B                 add     r15, 1
.text:0000000000002C4F                 add     rbp, 1
.text:0000000000002C53                 jmp     loc_2AE0
.text:0000000000002C53 ; ---------------------------------------------------------------------------
.text:0000000000002C58                 align 20h
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C60                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002C60                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002C65                 jnz     loc_2E33
.text:0000000000002C6B                 xor     edx, edx
.text:0000000000002C6D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002C72                 jz      loc_2B8B
.text:0000000000002C78                 add     rbp, 1
.text:0000000000002C7C                 jmp     loc_2938
.text:0000000000002C7C ; ---------------------------------------------------------------------------
.text:0000000000002C81                 align 8
.text:0000000000002C88
.text:0000000000002C88 loc_2C88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C88                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002C88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002C8D                 setz    dl
.text:0000000000002C90                 xor     eax, eax
.text:0000000000002C92                 jmp     loc_2A78
.text:0000000000002C92 ; ---------------------------------------------------------------------------
.text:0000000000002C97                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CA0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CA0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002CA5                 mov     ebx, 61h ; 'a'
.text:0000000000002CAA                 jmp     loc_2B84
.text:0000000000002CAA ; ---------------------------------------------------------------------------
.text:0000000000002CAF                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CB0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002CB5                 setz    dl
.text:0000000000002CB8
.text:0000000000002CB8 loc_2CB8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002CB8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002CB8                 test    rbp, rbp
.text:0000000000002CBB                 jnz     loc_2A6C
.text:0000000000002CC1
.text:0000000000002CC1 loc_2CC1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002CC1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002CC1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002CC6                 and     al, dl
.text:0000000000002CC8                 jz      loc_2A78
.text:0000000000002CCE
.text:0000000000002CCE loc_2CCE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002CCE                 mov     rbp, r11
.text:0000000000002CD1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CD9                 jmp     loc_33D9
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CDE                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CE0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002CE5                 setz    dl
.text:0000000000002CE8                 xor     r12d, r12d
.text:0000000000002CEB                 jmp     short loc_2CC1
.text:0000000000002CEB ; ---------------------------------------------------------------------------
.text:0000000000002CED                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CF0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002CF5                 mov     ebx, 20h ; ' '
.text:0000000000002CFA                 setz    dl
.text:0000000000002CFD                 jmp     short loc_2CC1
.text:0000000000002CFD ; ---------------------------------------------------------------------------
.text:0000000000002CFF                 align 20h
.text:0000000000002D00
.text:0000000000002D00 loc_2D00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D00                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D00                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002D05                 mov     ebx, 72h ; 'r'
.text:0000000000002D0A                 jmp     loc_2B72
.text:0000000000002D0A ; ---------------------------------------------------------------------------
.text:0000000000002D0F                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D10                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D10                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002D15                 mov     ebx, 66h ; 'f'
.text:0000000000002D1A                 jmp     loc_2B84
.text:0000000000002D1A ; ---------------------------------------------------------------------------
.text:0000000000002D1F                 align 20h
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D20                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D20                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002D25                 mov     ebx, 76h ; 'v'
.text:0000000000002D2A                 jmp     loc_2B84
.text:0000000000002D2A ; ---------------------------------------------------------------------------
.text:0000000000002D2F                 align 10h
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D30                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D30                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002D35                 mov     ebx, 6Eh ; 'n'
.text:0000000000002D3A                 jmp     loc_2B72
.text:0000000000002D3A ; ---------------------------------------------------------------------------
.text:0000000000002D3F                 align 20h
.text:0000000000002D40
.text:0000000000002D40 def_2DCA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002D40                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002D40                                         ; DATA XREF: ...
.text:0000000000002D40                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002D43                 nop     dword ptr [rax+rax+00h]
.text:0000000000002D48
.text:0000000000002D48 def_2A3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002D48                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002D48                                         ; DATA XREF: ...
.text:0000000000002D48                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002D4E                 jnz     loc_30F8
.text:0000000000002D54                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002D59                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002D5E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002D63                 call    ___ctype_b_loc
.text:0000000000002D68                 mov     rcx, [rax]
.text:0000000000002D6B                 movzx   edx, bl
.text:0000000000002D6E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002D74                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002D7A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002D7F                 mov     edi, 1
.text:0000000000002D84                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002D88                 and     ax, 4000h
.text:0000000000002D8C                 setnz   r12b
.text:0000000000002D90                 setz    al
.text:0000000000002D93                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D97
.text:0000000000002D97 loc_2D97:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002D97                 test    al, al
.text:0000000000002D99                 jnz     loc_3731
.text:0000000000002D9F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002DA4                 setz    dl
.text:0000000000002DA7                 jmp     loc_2A78
.text:0000000000002DA7 ; ---------------------------------------------------------------------------
.text:0000000000002DAC                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002DB0                 movzx   ebx, byte ptr [r9]
.text:0000000000002DB4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002DB7                 ja      short def_2DCA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002DB9                 lea     rcx, jpt_2DCA
.text:0000000000002DC0                 movzx   edx, bl
.text:0000000000002DC3                 movsxd  rax, ds:(jpt_2DCA - 6388h)[rcx+rdx*4]
.text:0000000000002DC7                 add     rax, rcx
.text:0000000000002DCA                 jmp     rax             ; switch jump
.text:0000000000002DCA ; ---------------------------------------------------------------------------
.text:0000000000002DCC                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DD0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002DD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002DD3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002DD8                 jnz     loc_2BCE
.text:0000000000002DDE                 xchg    ax, ax
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002DE0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002DE0                 mov     edx, 5Ch ; '\'
.text:0000000000002DE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002DEA                 jmp     loc_2B84
.text:0000000000002DEA ; ---------------------------------------------------------------------------
.text:0000000000002DEF                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DF0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002DF0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002DF5                 xor     r10d, r10d
.text:0000000000002DF8                 mov     ebx, 66h ; 'f'
.text:0000000000002DFD                 jmp     loc_2B84
.text:0000000000002DFD ; ---------------------------------------------------------------------------
.text:0000000000002E02                 align 8
.text:0000000000002E08
.text:0000000000002E08 loc_2E08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E08                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E08                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002E0D                 xor     r10d, r10d
.text:0000000000002E10                 mov     ebx, 6Eh ; 'n'
.text:0000000000002E15                 jmp     loc_2B72
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E1A                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E20                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E20                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002E25                 jmp     loc_2BF0
.text:0000000000002E25 ; ---------------------------------------------------------------------------
.text:0000000000002E2A                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E30                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002E33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E38                 setz    dl
.text:0000000000002E3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E40                 jnz     loc_39DA
.text:0000000000002E46                 mov     eax, r8d
.text:0000000000002E49                 mov     rcx, r15
.text:0000000000002E4C                 xor     eax, 1
.text:0000000000002E4F                 and     al, dl
.text:0000000000002E51                 jz      short loc_2E80
.text:0000000000002E53                 cmp     r13, r15
.text:0000000000002E56                 jbe     short loc_2E5D
.text:0000000000002E58                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E5D
.text:0000000000002E5D loc_2E5D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002E5D                 lea     rcx, [r15+1]
.text:0000000000002E61                 cmp     r13, rcx
.text:0000000000002E64                 jbe     short loc_2E6C
.text:0000000000002E66                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002E6C
.text:0000000000002E6C loc_2E6C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000002E6C                 lea     rcx, [r15+2]
.text:0000000000002E70                 cmp     r13, rcx
.text:0000000000002E73                 ja      loc_34A9
.text:0000000000002E79
.text:0000000000002E79 loc_2E79:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002E79                 lea     rcx, [r15+3]
.text:0000000000002E7D                 mov     r8d, eax
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002E80                 cmp     r13, rcx
.text:0000000000002E83                 jbe     short loc_2E8A
.text:0000000000002E85                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000002E8A
.text:0000000000002E8A loc_2E8A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000002E8A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E8F                 lea     r15, [rcx+1]
.text:0000000000002E93                 jz      loc_3499
.text:0000000000002E99                 lea     rax, [rbp+1]
.text:0000000000002E9D                 cmp     rax, r11
.text:0000000000002EA0                 jnb     short loc_2EBB
.text:0000000000002EA2                 mov     rax, [rsp+0E8h+s]
.text:0000000000002EA7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000002EAC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002EB0                 sub     eax, 30h ; '0'
.text:0000000000002EB3                 cmp     al, 9
.text:0000000000002EB5                 jbe     loc_36E9
.text:0000000000002EBB
.text:0000000000002EBB loc_2EBB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000002EBB                 mov     eax, r12d
.text:0000000000002EBE                 mov     ebx, 30h ; '0'
.text:0000000000002EC3                 xor     r12d, r12d
.text:0000000000002EC6                 jmp     loc_2A78
.text:0000000000002EC6 ; ---------------------------------------------------------------------------
.text:0000000000002ECB                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002ED0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002ED5                 mov     r12d, r10d
.text:0000000000002ED8                 setz    dl
.text:0000000000002EDB                 xor     r10d, r10d
.text:0000000000002EDE                 xor     eax, eax
.text:0000000000002EE0                 jmp     loc_2A78
.text:0000000000002EE0 ; ---------------------------------------------------------------------------
.text:0000000000002EE5                 align 8
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002EE8                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002EE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002EED                 setz    dl
.text:0000000000002EF0                 xor     r10d, r10d
.text:0000000000002EF3                 jmp     loc_2CB8
.text:0000000000002EF3 ; ---------------------------------------------------------------------------
.text:0000000000002EF8                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F00                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002F05                 setz    dl
.text:0000000000002F08                 xor     r10d, r10d
.text:0000000000002F0B                 xor     r12d, r12d
.text:0000000000002F0E                 jmp     loc_2CC1
.text:0000000000002F0E ; ---------------------------------------------------------------------------
.text:0000000000002F13                 align 8
.text:0000000000002F18
.text:0000000000002F18 loc_2F18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F18                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002F1D                 mov     r12d, r10d
.text:0000000000002F20                 mov     ebx, 20h ; ' '
.text:0000000000002F25                 setz    dl
.text:0000000000002F28                 xor     r10d, r10d
.text:0000000000002F2B                 jmp     loc_2CC1
.text:0000000000002F30 ; ---------------------------------------------------------------------------
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F30                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F30                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002F35                 xor     r10d, r10d
.text:0000000000002F38                 mov     ebx, 72h ; 'r'
.text:0000000000002F3D                 jmp     loc_2B72
.text:0000000000002F3D ; ---------------------------------------------------------------------------
.text:0000000000002F42                 align 8
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F48                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F48                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002F4D                 jmp     loc_2BF0
.text:0000000000002F4D ; ---------------------------------------------------------------------------
.text:0000000000002F52                 align 8
.text:0000000000002F58
.text:0000000000002F58 loc_2F58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F58                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F58                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002F5D                 xor     r10d, r10d
.text:0000000000002F60                 mov     ebx, 74h ; 't'
.text:0000000000002F65                 jmp     loc_2B72
.text:0000000000002F65 ; ---------------------------------------------------------------------------
.text:0000000000002F6A                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F70                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F70                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002F75                 jmp     loc_2BF0
.text:0000000000002F75 ; ---------------------------------------------------------------------------
.text:0000000000002F7A                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002F80                 xor     r10d, r10d
.text:0000000000002F83                 jmp     loc_2A20
.text:0000000000002F83 ; ---------------------------------------------------------------------------
.text:0000000000002F88                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002F90                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F95                 jnz     loc_3900
.text:0000000000002F9B
.text:0000000000002F9B loc_2F9B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002F9B                 add     rbp, 1
.text:0000000000002F9F                 mov     eax, r8d
.text:0000000000002FA2                 xor     r12d, r12d
.text:0000000000002FA5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FAA                 jmp     loc_2ABC
.text:0000000000002FAA ; ---------------------------------------------------------------------------
.text:0000000000002FAF                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002FB0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FB5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002FBA                 mov     r12d, r8d
.text:0000000000002FBD                 mov     rbp, r11
.text:0000000000002FC0                 setz    dl
.text:0000000000002FC3                 mov     eax, ebx
.text:0000000000002FC5                 test    r15, r15
.text:0000000000002FC8                 setz    cl
.text:0000000000002FCB                 and     eax, edx
.text:0000000000002FCD                 and     al, cl
.text:0000000000002FCF                 jnz     loc_3A36
.text:0000000000002FD5                 mov     eax, ebx
.text:0000000000002FD7                 xor     eax, 1
.text:0000000000002FDA                 and     dl, al
.text:0000000000002FDC                 jz      loc_394C
.text:0000000000002FE2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002FE7                 jz      loc_394A
.text:0000000000002FED                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002FF2                 jnz     loc_39ED
.text:0000000000002FF8                 test    r13, r13
.text:0000000000002FFB                 setz    al
.text:0000000000002FFE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003004                 setnz   dl
.text:0000000000003007                 and     al, dl
.text:0000000000003009                 jz      loc_3A2C
.text:000000000000300F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003014
.text:0000000000003014 loc_3014:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003014                 lea     rbx, asc_6105   ; "'"
.text:000000000000301B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000301F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003027                 mov     r15d, 1
.text:000000000000302D                 mov     [rsp+0E8h+n], 1
.text:0000000000003036                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000303B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003040                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003044                 jmp     loc_2923
.text:0000000000003044 ; ---------------------------------------------------------------------------
.text:0000000000003049                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003050                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003055                 jnz     loc_3900
.text:000000000000305B                 test    r13, r13
.text:000000000000305E                 jz      loc_3460
.text:0000000000003064                 xor     edx, edx
.text:0000000000003066                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000306C                 jnz     loc_3460
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003072                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003072                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003077                 add     r15, 3
.text:000000000000307B                 xor     eax, eax
.text:000000000000307D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003082                 xor     r8d, r8d
.text:0000000000003085                 mov     r13, rdx
.text:0000000000003088                 mov     ebx, 27h ; '''
.text:000000000000308D                 jmp     loc_2AA9
.text:000000000000308D ; ---------------------------------------------------------------------------
.text:0000000000003092                 align 8
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003098                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000309D                 jz      short loc_30C0
.text:000000000000309F                 lea     rcx, [rbp+2]
.text:00000000000030A3                 cmp     rcx, r11
.text:00000000000030A6                 jnb     short loc_30C0
.text:00000000000030A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000030AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000030B2                 jz      loc_3842
.text:00000000000030B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000030C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000030C0                 xor     edx, edx
.text:00000000000030C2                 xor     r12d, r12d
.text:00000000000030C5                 xor     eax, eax
.text:00000000000030C7                 mov     ebx, 3Fh ; '?'
.text:00000000000030CC                 jmp     loc_2A78
.text:00000000000030CC ; ---------------------------------------------------------------------------
.text:00000000000030D1                 align 8
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000030D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000030DD                 jnz     loc_3900
.text:00000000000030E3                 xor     r12d, r12d
.text:00000000000030E6                 xor     eax, eax
.text:00000000000030E8                 mov     ebx, 3Fh ; '?'
.text:00000000000030ED                 jmp     loc_2AA9
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030F2                 align 8
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000030F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003100                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003104                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003110                 mov     [rsp+0E8h+ps], rax
.text:0000000000003115                 jnz     short loc_3144
.text:0000000000003117                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000311C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003121                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003126                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000312B                 call    _strlen
.text:0000000000003130                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003136                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000313C                 mov     r11, rax
.text:000000000000313F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003144
.text:0000000000003144 loc_3144:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003144                 lea     rax, [rsp+0E8h+wc]
.text:000000000000314C                 xor     ecx, ecx
.text:000000000000314E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003152                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003157                 mov     rbx, rcx
.text:000000000000315A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003162                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003167                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000316C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003174                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003179                 mov     [rsp+0E8h+var_78], r13
.text:000000000000317E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003183
.text:0000000000003183 loc_3183:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003183                 mov     rax, [rsp+0E8h+s]
.text:0000000000003188                 lea     r14, [rbp+rbx+0]
.text:000000000000318D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003192                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003197                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000319C                 lea     r13, [rax+r14]
.text:00000000000031A0                 sub     rdx, r14
.text:00000000000031A3                 mov     rsi, r13
.text:00000000000031A6                 call    rpl_mbrtowc
.text:00000000000031AB                 test    rax, rax
.text:00000000000031AE                 mov     r15, rax
.text:00000000000031B1                 jz      short loc_3201
.text:00000000000031B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000031B7                 jz      loc_37D5
.text:00000000000031BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000031C1                 jz      loc_3761
.text:00000000000031C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031CC                 setz    al
.text:00000000000031CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000031D3                 jnz     loc_3370
.text:00000000000031D9
.text:00000000000031D9 loc_31D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000031D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000031D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000031E0                 call    _iswprint
.text:00000000000031E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000031EA                 test    eax, eax
.text:00000000000031EC                 mov     eax, 0
.text:00000000000031F1                 cmovz   r12d, eax
.text:00000000000031F5                 add     rbx, r15
.text:00000000000031F8                 call    _mbsinit
.text:00000000000031FD                 test    eax, eax
.text:00000000000031FF                 jz      short loc_3183
.text:0000000000003201
.text:0000000000003201 loc_3201:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003201                 mov     edx, r12d
.text:0000000000003204                 mov     rdi, rbx
.text:0000000000003207                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000320D                 xor     edx, 1
.text:0000000000003210                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003215                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000321B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000321F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003227                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000322C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003231                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003236
.text:0000000000003236 loc_3236:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003236                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003236                 cmp     rdi, 1
.text:000000000000323A                 jbe     loc_383B
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003240                 mov     rcx, rdi
.text:0000000000003243                 xor     esi, esi
.text:0000000000003245                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000324B                 add     rcx, rbp
.text:000000000000324E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003253                 jmp     loc_330E
.text:0000000000003253 ; ---------------------------------------------------------------------------
.text:0000000000003258                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003260                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003265                 setz    al
.text:0000000000003268                 test    r9b, r9b
.text:000000000000326B                 jnz     loc_3720
.text:0000000000003271                 mov     esi, r8d
.text:0000000000003274                 xor     esi, 1
.text:0000000000003277                 and     al, sil
.text:000000000000327A                 jz      short loc_32AB
.text:000000000000327C                 cmp     r13, r15
.text:000000000000327F                 jbe     short loc_3286
.text:0000000000003281                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003286
.text:0000000000003286 loc_3286:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003286                 lea     rsi, [r15+1]
.text:000000000000328A                 cmp     r13, rsi
.text:000000000000328D                 jbe     short loc_3295
.text:000000000000328F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003295
.text:0000000000003295 loc_3295:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003295                 lea     rsi, [r15+2]
.text:0000000000003299                 cmp     r13, rsi
.text:000000000000329C                 jbe     short loc_32A4
.text:000000000000329E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000032A4
.text:00000000000032A4 loc_32A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000032A4                 add     r15, 3
.text:00000000000032A8                 mov     r8d, eax
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000032AB                 cmp     r13, r15
.text:00000000000032AE                 jbe     short loc_32B5
.text:00000000000032B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000032B5
.text:00000000000032B5 loc_32B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000032B5                 lea     rax, [r15+1]
.text:00000000000032B9                 cmp     r13, rax
.text:00000000000032BC                 jbe     short loc_32CB
.text:00000000000032BE                 mov     eax, ebx
.text:00000000000032C0                 shr     al, 6
.text:00000000000032C3                 add     eax, 30h ; '0'
.text:00000000000032C6                 mov     [r14+r15+1], al
.text:00000000000032CB
.text:00000000000032CB loc_32CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000032CB                 lea     rax, [r15+2]
.text:00000000000032CF                 cmp     r13, rax
.text:00000000000032D2                 jbe     short loc_32E4
.text:00000000000032D4                 mov     eax, ebx
.text:00000000000032D6                 shr     al, 3
.text:00000000000032D9                 and     eax, 7
.text:00000000000032DC                 add     eax, 30h ; '0'
.text:00000000000032DF                 mov     [r14+r15+2], al
.text:00000000000032E4
.text:00000000000032E4 loc_32E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000032E4                 and     ebx, 7
.text:00000000000032E7                 add     rbp, 1
.text:00000000000032EB                 add     r15, 3
.text:00000000000032EF                 add     ebx, 30h ; '0'
.text:00000000000032F2                 cmp     rbp, rcx
.text:00000000000032F5                 jnb     loc_2AE0
.text:00000000000032FB                 mov     esi, edx
.text:00000000000032FD
.text:00000000000032FD loc_32FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000032FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000032FD                 cmp     r13, r15
.text:0000000000003300                 jbe     short loc_3306
.text:0000000000003302                 mov     [r14+r15], bl
.text:0000000000003306
.text:0000000000003306 loc_3306:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003306                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000330A                 add     r15, 1
.text:000000000000330E
.text:000000000000330E loc_330E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000330E                 test    dl, dl
.text:0000000000003310                 jnz     loc_3260
.text:0000000000003316                 mov     eax, esi
.text:0000000000003318                 xor     eax, 1
.text:000000000000331B                 and     eax, r8d
.text:000000000000331E                 test    r10b, r10b
.text:0000000000003321                 jz      short loc_3331
.text:0000000000003323                 cmp     r13, r15
.text:0000000000003326                 jbe     short loc_332D
.text:0000000000003328                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000332D
.text:000000000000332D loc_332D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000332D                 add     r15, 1
.text:0000000000003331
.text:0000000000003331 loc_3331:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003331                 add     rbp, 1
.text:0000000000003335                 cmp     rbp, rcx
.text:0000000000003338                 jnb     loc_2ABC
.text:000000000000333E                 test    al, al
.text:0000000000003340                 jz      loc_373E
.text:0000000000003346                 cmp     r13, r15
.text:0000000000003349                 jbe     short loc_3350
.text:000000000000334B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003350                 lea     rax, [r15+1]
.text:0000000000003354                 cmp     r13, rax
.text:0000000000003357                 jbe     short loc_335F
.text:0000000000003359                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000335F
.text:000000000000335F loc_335F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000335F                 add     r15, 2
.text:0000000000003363                 xor     r10d, r10d
.text:0000000000003366                 xor     r8d, r8d
.text:0000000000003369                 jmp     short loc_32FD
.text:0000000000003369 ; ---------------------------------------------------------------------------
.text:000000000000336B                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003370                 cmp     r15, 1
.text:0000000000003374                 jz      loc_31D9
.text:000000000000337A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000337F                 lea     rcx, [rdi+r15]
.text:0000000000003383                 lea     rdx, [rdi+r14+1]
.text:0000000000003388                 lea     r8, [rcx+r14]
.text:000000000000338C                 jmp     short loc_339D
.text:000000000000338C ; ---------------------------------------------------------------------------
.text:000000000000338E                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003390                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003390                 add     rdx, 1
.text:0000000000003394                 cmp     r8, rdx
.text:0000000000003397                 jz      loc_31D9
.text:000000000000339D
.text:000000000000339D loc_339D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000339D                 movzx   ecx, byte ptr [rdx]
.text:00000000000033A0                 sub     ecx, 5Bh ; '['
.text:00000000000033A3                 cmp     cl, 21h ; '!'
.text:00000000000033A6                 ja      short loc_3390
.text:00000000000033A8                 mov     esi, 1
.text:00000000000033AD                 shl     rsi, cl
.text:00000000000033B0                 mov     rcx, rsi
.text:00000000000033B3                 mov     rsi, 20000002Bh
.text:00000000000033BD                 test    rcx, rsi
.text:00000000000033C0                 jz      short loc_3390
.text:00000000000033C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000033C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000033CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000033D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033D9
.text:00000000000033D9 loc_33D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000033D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000033D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000033DE                 jz      short loc_33F0
.text:00000000000033E0                 test    al, al
.text:00000000000033E2                 mov     eax, 4
.text:00000000000033E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000033EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000033F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000033F0                 sub     rsp, 8
.text:00000000000033F4                 mov     rcx, rbp
.text:00000000000033F7                 mov     rsi, r13
.text:00000000000033FA                 push    [rsp+0F0h+var_88]
.text:00000000000033FE                 push    [rsp+0F8h+var_80]
.text:0000000000003402                 mov     rdi, r14
.text:0000000000003405                 push    0
.text:0000000000003407                 mov     r9d, [rsp+108h+var_70]
.text:000000000000340F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003414                 mov     rdx, [rsp+108h+s]
.text:0000000000003419                 and     r9d, 0FFFFFFFDh
.text:000000000000341D                 call    quotearg_buffer_restyled
.text:0000000000003422                 add     rsp, 20h
.text:0000000000003426                 mov     r15, rax
.text:0000000000003429
.text:0000000000003429 loc_3429:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003429                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003429                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003431                 xor     rbx, fs:28h
.text:000000000000343A                 mov     rax, r15
.text:000000000000343D                 jnz     loc_3A43
.text:0000000000003443                 add     rsp, 0B8h
.text:000000000000344A                 pop     rbx
.text:000000000000344B                 pop     rbp
.text:000000000000344C                 pop     r12
.text:000000000000344E                 pop     r13
.text:0000000000003450                 pop     r14
.text:0000000000003452                 pop     r15
.text:0000000000003454                 retn
.text:0000000000003454 ; ---------------------------------------------------------------------------
.text:0000000000003455                 align 8
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003458                 mov     rbp, r11
.text:000000000000345B                 jmp     loc_33D9
.text:0000000000003460 ; ---------------------------------------------------------------------------
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003460                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003460                 cmp     r13, r15
.text:0000000000003463                 jbe     short loc_346A
.text:0000000000003465                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000346A
.text:000000000000346A loc_346A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000346A                 lea     rax, [r15+1]
.text:000000000000346E                 cmp     r13, rax
.text:0000000000003471                 jbe     short loc_3479
.text:0000000000003473                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003479
.text:0000000000003479 loc_3479:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003479                 lea     rax, [r15+2]
.text:000000000000347D                 cmp     r13, rax
.text:0000000000003480                 jbe     loc_3A72
.text:0000000000003486                 mov     rdx, r13
.text:0000000000003489                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000348F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003494                 jmp     loc_3072
.text:0000000000003499 ; ---------------------------------------------------------------------------
.text:0000000000003499
.text:0000000000003499 loc_3499:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003499                 mov     eax, r12d
.text:000000000000349C                 mov     ebx, 30h ; '0'
.text:00000000000034A1                 xor     r12d, r12d
.text:00000000000034A4                 jmp     loc_2AA9
.text:00000000000034A9 ; ---------------------------------------------------------------------------
.text:00000000000034A9
.text:00000000000034A9 loc_34A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000034A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000034AF                 jmp     loc_2E79
.text:00000000000034B4 ; ---------------------------------------------------------------------------
.text:00000000000034B4
.text:00000000000034B4 loc_34B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000034B4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000034B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000034B6                 jnz     loc_28E3        ; jumptable 00000000000121F1 case 1
.text:00000000000034BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000034C1
.text:00000000000034C1 loc_34C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000034C1                 test    r13, r13
.text:00000000000034C4                 jnz     loc_3A5A
.text:00000000000034CA                 lea     rax, asc_6105   ; "'"
.text:00000000000034D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000034DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000034DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000034E4                 xor     r12d, r12d
.text:00000000000034E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000034EC                 mov     [rsp+0E8h+n], 1
.text:00000000000034F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000034FA                 mov     r15d, 1
.text:0000000000003500                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003508                 jmp     loc_2923
.text:0000000000003508 ; ---------------------------------------------------------------------------
.text:000000000000350D                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:0000000000003510                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003512                 jnz     loc_390D
.text:0000000000003518                 test    r13, r13
.text:000000000000351B                 jz      loc_3746
.text:0000000000003521                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003525                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000352A                 xor     r12d, r12d
.text:000000000000352D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003532                 mov     [rsp+0E8h+var_98], 0
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000353B                 lea     rax, unk_6103
.text:0000000000003542                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003547                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000354C                 mov     [rsp+0E8h+n], 1
.text:0000000000003555                 mov     r15d, 1
.text:000000000000355B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003560                 jmp     loc_2923
.text:0000000000003565 ; ---------------------------------------------------------------------------
.text:0000000000003565
.text:0000000000003565 loc_3565:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003565                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:0000000000003565                 lea     rax, unk_6103   ; jumptable 00000000000121F1 case 6
.text:000000000000356C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003571                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003576                 xor     r12d, r12d
.text:0000000000003579                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003582                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003587                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000358C                 mov     [rsp+0E8h+n], 1
.text:0000000000003595                 xor     r15d, r15d
.text:0000000000003598                 mov     [rsp+0E8h+s2], rax
.text:000000000000359D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000035A5                 jmp     loc_2923
.text:00000000000035AA ; ---------------------------------------------------------------------------
.text:00000000000035AA
.text:00000000000035AA loc_35AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035AA                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000035AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000035AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035B4                 xor     r12d, r12d
.text:00000000000035B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000035C5                 xor     r15d, r15d
.text:00000000000035C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000035CD                 mov     [rsp+0E8h+n], 0
.text:00000000000035D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000035DF                 jmp     loc_2923
.text:00000000000035E4 ; ---------------------------------------------------------------------------
.text:00000000000035E4
.text:00000000000035E4 loc_35E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035E4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000035E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000035E9                 jz      short loc_3641
.text:00000000000035EB                 lea     rsi, asc_6107   ; "`"
.text:00000000000035F2                 xor     edi, edi        ; domainname
.text:00000000000035F4                 mov     edx, 5          ; category
.text:00000000000035F9                 call    _dcgettext
.text:00000000000035FE                 mov     rcx, rax
.text:0000000000003601                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003606                 lea     rax, asc_6107   ; "`"
.text:000000000000360D                 cmp     rcx, rax
.text:0000000000003610                 jz      loc_39AE
.text:0000000000003616
.text:0000000000003616 loc_3616:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003616                 lea     rsi, asc_6105   ; "'"
.text:000000000000361D                 xor     edi, edi        ; domainname
.text:000000000000361F                 mov     edx, 5          ; category
.text:0000000000003624                 call    _dcgettext
.text:0000000000003629                 mov     rcx, rax
.text:000000000000362C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003631                 lea     rax, asc_6105   ; "'"
.text:0000000000003638                 cmp     rcx, rax
.text:000000000000363B                 jz      loc_39C4
.text:0000000000003641
.text:0000000000003641 loc_3641:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003641                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003641                 xor     r15d, r15d
.text:0000000000003644                 test    ebx, ebx
.text:0000000000003646                 jz      loc_380D
.text:000000000000364C
.text:000000000000364C loc_364C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000364C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000364C                 test    ebx, ebx
.text:000000000000364E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003653                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003658                 xor     r12d, r12d
.text:000000000000365B                 mov     rdi, rbx        ; s
.text:000000000000365E                 call    _strlen
.text:0000000000003663                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003668                 mov     [rsp+0E8h+n], rax
.text:000000000000366D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003672                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003677                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003680                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003685                 jmp     loc_2923
.text:000000000000368A ; ---------------------------------------------------------------------------
.text:000000000000368A
.text:000000000000368A loc_368A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000368A                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:000000000000368A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000368F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003694                 xor     r12d, r12d
.text:0000000000003697                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036A5                 xor     r15d, r15d
.text:00000000000036A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000036AD                 mov     [rsp+0E8h+n], 0
.text:00000000000036B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000036BF                 jmp     loc_2923
.text:00000000000036C4 ; ---------------------------------------------------------------------------
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036C4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000036C4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000036C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000036CE                 xor     r12d, r12d
.text:00000000000036D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000036DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000036E4                 jmp     loc_2903
.text:00000000000036E9 ; ---------------------------------------------------------------------------
.text:00000000000036E9
.text:00000000000036E9 loc_36E9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000036E9                 cmp     r13, r15
.text:00000000000036EC                 jbe     short loc_36F3
.text:00000000000036EE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000036F3
.text:00000000000036F3 loc_36F3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000036F3                 lea     rax, [rcx+2]
.text:00000000000036F7                 cmp     r13, rax
.text:00000000000036FA                 jbe     short loc_3702
.text:00000000000036FC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003702
.text:0000000000003702 loc_3702:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003702                 mov     eax, r12d
.text:0000000000003705                 lea     r15, [rcx+3]
.text:0000000000003709                 xor     r12d, r12d
.text:000000000000370C                 mov     ebx, 30h ; '0'
.text:0000000000003711                 jmp     loc_2A78
.text:0000000000003711 ; ---------------------------------------------------------------------------
.text:0000000000003716                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003720                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003725                 mov     rbp, r11
.text:0000000000003728                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000372C                 jmp     loc_33D9
.text:0000000000003731 ; ---------------------------------------------------------------------------
.text:0000000000003731
.text:0000000000003731 loc_3731:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003731                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003736                 xor     r12d, r12d
.text:0000000000003739                 jmp     loc_3240
.text:000000000000373E ; ---------------------------------------------------------------------------
.text:000000000000373E
.text:000000000000373E loc_373E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000373E                 xor     r10d, r10d
.text:0000000000003741                 jmp     loc_32FD
.text:0000000000003746 ; ---------------------------------------------------------------------------
.text:0000000000003746
.text:0000000000003746 loc_3746:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003746                 mov     [rsp+0E8h+var_98], 0
.text:000000000000374F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003754                 xor     r12d, r12d
.text:0000000000003757                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000375C                 jmp     loc_353B
.text:0000000000003761 ; ---------------------------------------------------------------------------
.text:0000000000003761
.text:0000000000003761 loc_3761:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003761                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003766                 mov     rsi, r14
.text:0000000000003769                 mov     rcx, r13
.text:000000000000376C                 mov     rax, rbx
.text:000000000000376F                 mov     rdi, rbx
.text:0000000000003772                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003778                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000377D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003785                 cmp     rsi, r11
.text:0000000000003788                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000378E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003796                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000379B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037A0                 jnb     short loc_37C8
.text:00000000000037A2                 cmp     byte ptr [rcx], 0
.text:00000000000037A5                 jnz     short loc_37B7
.text:00000000000037A7                 jmp     short loc_37C8
.text:00000000000037A7 ; ---------------------------------------------------------------------------
.text:00000000000037A9                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000037B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000037B5                 jz      short loc_37C5
.text:00000000000037B7
.text:00000000000037B7 loc_37B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000037B7                 add     rax, 1
.text:00000000000037BB                 lea     rdx, [rbp+rax+0]
.text:00000000000037C0                 cmp     r11, rdx
.text:00000000000037C3                 ja      short loc_37B0
.text:00000000000037C5
.text:00000000000037C5 loc_37C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000037C5                 mov     rdi, rax
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000037C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000037C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000037CD                 xor     r12d, r12d
.text:00000000000037D0                 jmp     loc_3236
.text:00000000000037D5 ; ---------------------------------------------------------------------------
.text:00000000000037D5
.text:00000000000037D5 loc_37D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000037D5                 mov     rdi, rbx
.text:00000000000037D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000037DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000037E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000037E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000037F1                 xor     r12d, r12d
.text:00000000000037F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003803                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003808                 jmp     loc_3236
.text:000000000000380D ; ---------------------------------------------------------------------------
.text:000000000000380D
.text:000000000000380D loc_380D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000380D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003812                 movzx   eax, byte ptr [rdx]
.text:0000000000003815                 test    al, al
.text:0000000000003817                 jz      loc_364C
.text:000000000000381D                 nop     dword ptr [rax]
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003820                 cmp     r13, r15
.text:0000000000003823                 jbe     short loc_3829
.text:0000000000003825                 mov     [r14+r15], al
.text:0000000000003829
.text:0000000000003829 loc_3829:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003829                 add     r15, 1
.text:000000000000382D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003832                 test    al, al
.text:0000000000003834                 jnz     short loc_3820
.text:0000000000003836                 jmp     loc_364C
.text:000000000000383B ; ---------------------------------------------------------------------------
.text:000000000000383B
.text:000000000000383B loc_383B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000383B                 mov     eax, edx
.text:000000000000383D                 jmp     loc_2D97
.text:0000000000003842 ; ---------------------------------------------------------------------------
.text:0000000000003842
.text:0000000000003842 loc_3842:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003842                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003846                 cmp     bl, 3Eh ; '>'
.text:0000000000003849                 ja      loc_30C0
.text:000000000000384F                 mov     rax, 7000A38200000000h
.text:0000000000003859                 bt      rax, rbx
.text:000000000000385D                 jnb     loc_30C0
.text:0000000000003863                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003868                 jnz     loc_3A52
.text:000000000000386E                 cmp     r13, r15
.text:0000000000003871                 jbe     short loc_3878
.text:0000000000003873                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003878
.text:0000000000003878 loc_3878:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003878                 lea     rax, [r15+1]
.text:000000000000387C                 cmp     r13, rax
.text:000000000000387F                 jbe     short loc_3887
.text:0000000000003881                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003887
.text:0000000000003887 loc_3887:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003887                 lea     rax, [r15+2]
.text:000000000000388B                 cmp     r13, rax
.text:000000000000388E                 jbe     short loc_3896
.text:0000000000003890                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003896
.text:0000000000003896 loc_3896:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003896                 lea     rax, [r15+3]
.text:000000000000389A                 cmp     r13, rax
.text:000000000000389D                 jbe     short loc_38A5
.text:000000000000389F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000038A5
.text:00000000000038A5 loc_38A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000038A5                 add     r15, 4
.text:00000000000038A9                 xor     edx, edx
.text:00000000000038AB                 xor     r12d, r12d
.text:00000000000038AE                 xor     eax, eax
.text:00000000000038B0                 mov     rbp, rcx
.text:00000000000038B3                 jmp     loc_2A78
.text:00000000000038B8 ; ---------------------------------------------------------------------------
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038B8                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000038B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000038BA                 jz      loc_3A48
.text:00000000000038C0                 lea     rax, asc_6105   ; "'"
.text:00000000000038C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038D1                 xor     r12d, r12d
.text:00000000000038D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000038E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000038E7                 mov     [rsp+0E8h+n], 1
.text:00000000000038F0                 xor     r15d, r15d
.text:00000000000038F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000038F8                 jmp     loc_2923
.text:00000000000038F8 ; ---------------------------------------------------------------------------
.text:00000000000038FD                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003900                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003900                 mov     rbp, r11
.text:0000000000003903                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003908                 jmp     loc_33D9
.text:000000000000390D ; ---------------------------------------------------------------------------
.text:000000000000390D
.text:000000000000390D loc_390D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000390D                 lea     rax, unk_6103
.text:0000000000003914                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003919                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000391E                 xor     r12d, r12d
.text:0000000000003921                 mov     [rsp+0E8h+var_98], 0
.text:000000000000392A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000392F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003934                 mov     [rsp+0E8h+n], 1
.text:000000000000393D                 xor     r15d, r15d
.text:0000000000003940                 mov     [rsp+0E8h+s2], rax
.text:0000000000003945                 jmp     loc_2923
.text:000000000000394A ; ---------------------------------------------------------------------------
.text:000000000000394A
.text:000000000000394A loc_394A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000394A                 mov     eax, edx
.text:000000000000394C
.text:000000000000394C loc_394C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000394C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000394C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003951                 test    rbx, rbx
.text:0000000000003954                 jz      short loc_3982
.text:0000000000003956                 test    al, al
.text:0000000000003958                 jz      short loc_3982
.text:000000000000395A                 movzx   ecx, byte ptr [rbx]
.text:000000000000395D                 mov     rax, rbx
.text:0000000000003960                 test    cl, cl
.text:0000000000003962                 jz      short loc_3982
.text:0000000000003964                 mov     rdx, r15
.text:0000000000003967                 sub     rax, r15
.text:000000000000396A
.text:000000000000396A loc_396A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000396A                 cmp     r13, rdx
.text:000000000000396D                 jbe     short loc_3973
.text:000000000000396F                 mov     [r14+rdx], cl
.text:0000000000003973
.text:0000000000003973 loc_3973:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003973                 add     rdx, 1
.text:0000000000003977                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000397B                 test    cl, cl
.text:000000000000397D                 jnz     short loc_396A
.text:000000000000397F                 mov     r15, rdx
.text:0000000000003982
.text:0000000000003982 loc_3982:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003982                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003982                 cmp     r13, r15
.text:0000000000003985                 jbe     loc_3429
.text:000000000000398B                 mov     byte ptr [r14+r15], 0
.text:0000000000003990                 jmp     loc_3429
.text:0000000000003995 ; ---------------------------------------------------------------------------
.text:0000000000003995
.text:0000000000003995 loc_3995:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003995                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000399A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000399F                 mov     rbp, r11
.text:00000000000039A2                 setz    al
.text:00000000000039A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000039A9                 jmp     loc_33D9
.text:00000000000039AE ; ---------------------------------------------------------------------------
.text:00000000000039AE
.text:00000000000039AE loc_39AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000039AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000039B2                 mov     rdi, rcx
.text:00000000000039B5                 call    gettext_quote
.text:00000000000039BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039BF                 jmp     loc_3616
.text:00000000000039C4 ; ---------------------------------------------------------------------------
.text:00000000000039C4
.text:00000000000039C4 loc_39C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000039C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000039C8                 mov     rdi, rcx
.text:00000000000039CB                 call    gettext_quote
.text:00000000000039D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000039D5                 jmp     loc_3641
.text:00000000000039DA ; ---------------------------------------------------------------------------
.text:00000000000039DA
.text:00000000000039DA loc_39DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000039DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000039DF                 mov     rbp, r11
.text:00000000000039E2                 mov     eax, edx
.text:00000000000039E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000039E8                 jmp     loc_33D9
.text:00000000000039ED ; ---------------------------------------------------------------------------
.text:00000000000039ED
.text:00000000000039ED loc_39ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000039ED                 sub     rsp, 8
.text:00000000000039F1                 mov     r8d, 5
.text:00000000000039F7                 mov     rcx, r11
.text:00000000000039FA                 push    [rsp+0F0h+var_88]
.text:00000000000039FE                 push    [rsp+0F8h+var_80]
.text:0000000000003A02                 mov     rdi, r14
.text:0000000000003A05                 push    [rsp+100h+var_C8]
.text:0000000000003A09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003A11                 mov     rdx, [rsp+108h+s]
.text:0000000000003A16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003A1B                 call    quotearg_buffer_restyled
.text:0000000000003A20                 add     rsp, 20h
.text:0000000000003A24                 mov     r15, rax
.text:0000000000003A27                 jmp     loc_3429
.text:0000000000003A2C ; ---------------------------------------------------------------------------
.text:0000000000003A2C
.text:0000000000003A2C loc_3A2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003A2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003A31                 jmp     loc_394C
.text:0000000000003A36 ; ---------------------------------------------------------------------------
.text:0000000000003A36
.text:0000000000003A36 loc_3A36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003A36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A3E                 jmp     loc_33D9
.text:0000000000003A43 ; ---------------------------------------------------------------------------
.text:0000000000003A43
.text:0000000000003A43 loc_3A43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003A43                 call    ___stack_chk_fail
.text:0000000000003A48 ; ---------------------------------------------------------------------------
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003A48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A4D                 jmp     loc_34C1
.text:0000000000003A52 ; ---------------------------------------------------------------------------
.text:0000000000003A52
.text:0000000000003A52 loc_3A52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003A52                 mov     rbp, r11
.text:0000000000003A55                 jmp     loc_33F0
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5A
.text:0000000000003A5A loc_3A5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003A5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A5F                 xor     eax, eax
.text:0000000000003A61                 xor     r12d, r12d
.text:0000000000003A64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A6D                 jmp     loc_3014
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A72
.text:0000000000003A72 loc_3A72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003A72                 mov     rdx, r13
.text:0000000000003A75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003A7A                 jmp     loc_3072
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A7F
.text:0000000000003A7F def_28E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003A7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003A7F ; } // starts at 2850
.text:0000000000003A7F quotearg_buffer_restyled endp
.text:0000000000003A7F
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A84                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90
.text:0000000000003A90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003A90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003A90
.text:0000000000003A90 var_50          = qword ptr -50h
.text:0000000000003A90 var_48          = qword ptr -48h
.text:0000000000003A90 var_40          = dword ptr -40h
.text:0000000000003A90 var_3C          = dword ptr -3Ch
.text:0000000000003A90
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 push    r15
.text:0000000000003A92                 push    r14
.text:0000000000003A94                 movsxd  r15, edi
.text:0000000000003A97                 push    r13
.text:0000000000003A99                 push    r12
.text:0000000000003A9B                 mov     r14, rdx
.text:0000000000003A9E                 push    rbp
.text:0000000000003A9F                 push    rbx
.text:0000000000003AA0                 mov     rbp, rcx
.text:0000000000003AA3                 sub     rsp, 28h
.text:0000000000003AA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003AAC                 call    ___errno_location
.text:0000000000003AB1                 mov     r13, rax
.text:0000000000003AB4                 mov     eax, [rax]
.text:0000000000003AB6                 test    r15d, r15d
.text:0000000000003AB9                 mov     rbx, cs:slotvec
.text:0000000000003AC0                 mov     [rsp+58h+var_40], eax
.text:0000000000003AC4                 js      loc_3C31
.text:0000000000003ACA                 cmp     cs:nslots, r15d
.text:0000000000003AD1                 jg      short loc_3B35
.text:0000000000003AD3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003ADA                 jz      loc_3C36
.text:0000000000003AE0                 lea     r12d, [r15+1]
.text:0000000000003AE4                 lea     rax, slotvec0
.text:0000000000003AEB                 movsxd  rsi, r12d
.text:0000000000003AEE                 shl     rsi, 4
.text:0000000000003AF2                 cmp     rbx, rax
.text:0000000000003AF5                 jz      loc_3C10
.text:0000000000003AFB                 mov     rdi, rbx
.text:0000000000003AFE                 call    xrealloc
.text:0000000000003B03                 mov     rbx, rax
.text:0000000000003B06                 mov     cs:slotvec, rax
.text:0000000000003B0D
.text:0000000000003B0D loc_3B0D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003B0D                 movsxd  rdi, cs:nslots
.text:0000000000003B14                 mov     edx, r12d
.text:0000000000003B17                 xor     esi, esi        ; c
.text:0000000000003B19                 sub     edx, edi
.text:0000000000003B1B                 shl     rdi, 4
.text:0000000000003B1F                 movsxd  rdx, edx
.text:0000000000003B22                 add     rdi, rbx        ; s
.text:0000000000003B25                 shl     rdx, 4          ; n
.text:0000000000003B29                 call    _memset
.text:0000000000003B2E                 mov     cs:nslots, r12d
.text:0000000000003B35
.text:0000000000003B35 loc_3B35:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003B35                 mov     eax, [rbp+4]
.text:0000000000003B38                 shl     r15, 4
.text:0000000000003B3C                 sub     rsp, 8
.text:0000000000003B40                 add     rbx, r15
.text:0000000000003B43                 lea     r15, [rbp+8]
.text:0000000000003B47                 mov     r8d, [rbp+0]
.text:0000000000003B4B                 mov     r11, [rbx]
.text:0000000000003B4E                 mov     r12, [rbx+8]
.text:0000000000003B52                 mov     rcx, r14
.text:0000000000003B55                 or      eax, 1
.text:0000000000003B58                 mov     [rsp+60h+var_3C], eax
.text:0000000000003B5C                 push    qword ptr [rbp+30h]
.text:0000000000003B5F                 mov     r9d, eax
.text:0000000000003B62                 push    qword ptr [rbp+28h]
.text:0000000000003B65                 push    r15
.text:0000000000003B67                 mov     rsi, r11
.text:0000000000003B6A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003B6F                 mov     rdi, r12
.text:0000000000003B72                 mov     [rsp+78h+var_48], r11
.text:0000000000003B77                 call    quotearg_buffer_restyled
.text:0000000000003B7C                 add     rsp, 20h
.text:0000000000003B80                 mov     r11, [rsp+58h+var_48]
.text:0000000000003B85                 cmp     r11, rax
.text:0000000000003B88                 ja      short loc_3BF1
.text:0000000000003B8A                 lea     rsi, [rax+1]
.text:0000000000003B8E                 lea     rax, slot0
.text:0000000000003B95                 cmp     r12, rax
.text:0000000000003B98                 mov     [rbx], rsi
.text:0000000000003B9B                 jz      short loc_3BAF
.text:0000000000003B9D                 mov     rdi, r12        ; ptr
.text:0000000000003BA0                 mov     [rsp+58h+var_48], rsi
.text:0000000000003BA5                 call    _free
.text:0000000000003BAA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003BAF
.text:0000000000003BAF loc_3BAF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003BAF                 mov     rdi, rsi
.text:0000000000003BB2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003BB7                 call    xmalloc
.text:0000000000003BBC                 sub     rsp, 8
.text:0000000000003BC0                 mov     [rbx+8], rax
.text:0000000000003BC4                 mov     r8d, [rbp+0]
.text:0000000000003BC8                 push    qword ptr [rbp+30h]
.text:0000000000003BCB                 push    qword ptr [rbp+28h]
.text:0000000000003BCE                 mov     rcx, r14
.text:0000000000003BD1                 push    r15
.text:0000000000003BD3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003BD8                 mov     rdi, rax
.text:0000000000003BDB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003BE0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003BE5                 mov     r12, rax
.text:0000000000003BE8                 call    quotearg_buffer_restyled
.text:0000000000003BED                 add     rsp, 20h
.text:0000000000003BF1
.text:0000000000003BF1 loc_3BF1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003BF1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003BF5                 mov     [r13+0], eax
.text:0000000000003BF9                 add     rsp, 28h
.text:0000000000003BFD                 mov     rax, r12
.text:0000000000003C00                 pop     rbx
.text:0000000000003C01                 pop     rbp
.text:0000000000003C02                 pop     r12
.text:0000000000003C04                 pop     r13
.text:0000000000003C06                 pop     r14
.text:0000000000003C08                 pop     r15
.text:0000000000003C0A                 retn
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0B                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003C10                 xor     edi, edi
.text:0000000000003C12                 call    xrealloc
.text:0000000000003C17                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003C1F                 mov     rbx, rax
.text:0000000000003C22                 mov     cs:slotvec, rax
.text:0000000000003C29                 movups  xmmword ptr [rax], xmm0
.text:0000000000003C2C                 jmp     loc_3B0D
.text:0000000000003C31 ; ---------------------------------------------------------------------------
.text:0000000000003C31
.text:0000000000003C31 loc_3C31:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003C31                 call    _abort
.text:0000000000003C36 ; ---------------------------------------------------------------------------
.text:0000000000003C36
.text:0000000000003C36 loc_3C36:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003C36                 call    xalloc_die
.text:0000000000003C36 ; } // starts at 3A90
.text:0000000000003C36 quotearg_n_options endp
.text:0000000000003C36
.text:0000000000003C36 ; ---------------------------------------------------------------------------
.text:0000000000003C3B                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003C40                 public clone_quoting_options
.text:0000000000003C40 clone_quoting_options proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    r12
.text:0000000000003C42                 push    rbp
.text:0000000000003C43                 push    rbx
.text:0000000000003C44                 mov     rbx, rdi
.text:0000000000003C47                 call    ___errno_location
.text:0000000000003C4C                 mov     r12d, [rax]
.text:0000000000003C4F                 mov     rbp, rax
.text:0000000000003C52                 lea     rax, default_quoting_options
.text:0000000000003C59                 test    rbx, rbx
.text:0000000000003C5C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003C61                 cmovz   rbx, rax
.text:0000000000003C65                 mov     rdi, rbx        ; src
.text:0000000000003C68                 call    xmemdup
.text:0000000000003C6D                 mov     [rbp+0], r12d
.text:0000000000003C71                 pop     rbx
.text:0000000000003C72                 pop     rbp
.text:0000000000003C73                 pop     r12
.text:0000000000003C75                 retn
.text:0000000000003C75 ; } // starts at 3C40
.text:0000000000003C75 clone_quoting_options endp
.text:0000000000003C75
.text:0000000000003C75 ; ---------------------------------------------------------------------------
.text:0000000000003C76                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80                 public get_quoting_style
.text:0000000000003C80 get_quoting_style proc near
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 lea     rax, default_quoting_options
.text:0000000000003C87                 test    rdi, rdi
.text:0000000000003C8A                 cmovz   rdi, rax
.text:0000000000003C8E                 mov     eax, [rdi]
.text:0000000000003C90                 retn
.text:0000000000003C90 ; } // starts at 3C80
.text:0000000000003C90 get_quoting_style endp
.text:0000000000003C90
.text:0000000000003C90 ; ---------------------------------------------------------------------------
.text:0000000000003C91                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public set_quoting_style
.text:0000000000003CA0 set_quoting_style proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 lea     rax, default_quoting_options
.text:0000000000003CA7                 test    rdi, rdi
.text:0000000000003CAA                 cmovz   rdi, rax
.text:0000000000003CAE                 mov     [rdi], esi
.text:0000000000003CB0                 retn
.text:0000000000003CB0 ; } // starts at 3CA0
.text:0000000000003CB0 set_quoting_style endp
.text:0000000000003CB0
.text:0000000000003CB0 ; ---------------------------------------------------------------------------
.text:0000000000003CB1                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0 ; Attributes: info_from_lumina
.text:0000000000003CC0
.text:0000000000003CC0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003CC0                 public set_char_quoting
.text:0000000000003CC0 set_char_quoting proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 lea     rax, default_quoting_options
.text:0000000000003CC7                 test    rdi, rdi
.text:0000000000003CCA                 mov     ecx, esi
.text:0000000000003CCC                 cmovz   rdi, rax
.text:0000000000003CD0                 mov     eax, esi
.text:0000000000003CD2                 and     ecx, 1Fh
.text:0000000000003CD5                 shr     al, 5
.text:0000000000003CD8                 movzx   eax, al
.text:0000000000003CDB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003CE0                 mov     esi, [rdi]
.text:0000000000003CE2                 mov     eax, esi
.text:0000000000003CE4                 shr     eax, cl
.text:0000000000003CE6                 xor     edx, eax
.text:0000000000003CE8                 and     eax, 1
.text:0000000000003CEB                 and     edx, 1
.text:0000000000003CEE                 shl     edx, cl
.text:0000000000003CF0                 xor     edx, esi
.text:0000000000003CF2                 mov     [rdi], edx
.text:0000000000003CF4                 retn
.text:0000000000003CF4 ; } // starts at 3CC0
.text:0000000000003CF4 set_char_quoting endp
.text:0000000000003CF4
.text:0000000000003CF4 ; ---------------------------------------------------------------------------
.text:0000000000003CF5                 align 20h
.text:0000000000003D00
.text:0000000000003D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D00
.text:0000000000003D00
.text:0000000000003D00                 public set_quoting_flags
.text:0000000000003D00 set_quoting_flags proc near
.text:0000000000003D00 ; __unwind {
.text:0000000000003D00                 lea     rax, default_quoting_options
.text:0000000000003D07                 test    rdi, rdi
.text:0000000000003D0A                 cmovz   rdi, rax
.text:0000000000003D0E                 mov     eax, [rdi+4]
.text:0000000000003D11                 mov     [rdi+4], esi
.text:0000000000003D14                 retn
.text:0000000000003D14 ; } // starts at 3D00
.text:0000000000003D14 set_quoting_flags endp
.text:0000000000003D14
.text:0000000000003D14 ; ---------------------------------------------------------------------------
.text:0000000000003D15                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20 ; Attributes: info_from_lumina
.text:0000000000003D20
.text:0000000000003D20 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003D20                 public set_custom_quoting
.text:0000000000003D20 set_custom_quoting proc near
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 lea     rax, default_quoting_options
.text:0000000000003D27                 test    rdi, rdi
.text:0000000000003D2A                 cmovz   rdi, rax
.text:0000000000003D2E                 test    rsi, rsi
.text:0000000000003D31                 mov     dword ptr [rdi], 0Ah
.text:0000000000003D37                 jz      short loc_3D47
.text:0000000000003D39                 test    rdx, rdx
.text:0000000000003D3C                 jz      short loc_3D47
.text:0000000000003D3E                 mov     [rdi+28h], rsi
.text:0000000000003D42                 mov     [rdi+30h], rdx
.text:0000000000003D46                 retn
.text:0000000000003D47 ; ---------------------------------------------------------------------------
.text:0000000000003D47
.text:0000000000003D47 loc_3D47:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003D47                                         ; set_custom_quoting+1C↑j
.text:0000000000003D47                 sub     rsp, 8
.text:0000000000003D4B                 call    _abort
.text:0000000000003D4B ; } // starts at 3D20
.text:0000000000003D4B set_custom_quoting endp
.text:0000000000003D4B
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50 ; Attributes: info_from_lumina
.text:0000000000003D50
.text:0000000000003D50 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003D50                 public quotearg_buffer
.text:0000000000003D50 quotearg_buffer proc near
.text:0000000000003D50
.text:0000000000003D50 var_40          = qword ptr -40h
.text:0000000000003D50
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 push    r15
.text:0000000000003D52                 push    r14
.text:0000000000003D54                 lea     rax, default_quoting_options
.text:0000000000003D5B                 push    r13
.text:0000000000003D5D                 push    r12
.text:0000000000003D5F                 mov     r13, rdi
.text:0000000000003D62                 push    rbp
.text:0000000000003D63                 push    rbx
.text:0000000000003D64                 mov     rbx, r8
.text:0000000000003D67                 mov     r14, rsi
.text:0000000000003D6A                 mov     r15, rdx
.text:0000000000003D6D                 sub     rsp, 18h
.text:0000000000003D71                 test    r8, r8
.text:0000000000003D74                 cmovz   rbx, rax
.text:0000000000003D78                 mov     [rsp+48h+var_40], rcx
.text:0000000000003D7D                 call    ___errno_location
.text:0000000000003D82                 mov     r12d, [rax]
.text:0000000000003D85                 mov     rbp, rax
.text:0000000000003D88                 lea     rax, [rbx+8]
.text:0000000000003D8C                 sub     rsp, 8
.text:0000000000003D90                 mov     r9d, [rbx+4]
.text:0000000000003D94                 push    qword ptr [rbx+30h]
.text:0000000000003D97                 mov     r8d, [rbx]
.text:0000000000003D9A                 push    qword ptr [rbx+28h]
.text:0000000000003D9D                 mov     rdx, r15
.text:0000000000003DA0                 push    rax
.text:0000000000003DA1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003DA6                 mov     rsi, r14
.text:0000000000003DA9                 mov     rdi, r13
.text:0000000000003DAC                 call    quotearg_buffer_restyled
.text:0000000000003DB1                 mov     [rbp+0], r12d
.text:0000000000003DB5                 add     rsp, 38h
.text:0000000000003DB9                 pop     rbx
.text:0000000000003DBA                 pop     rbp
.text:0000000000003DBB                 pop     r12
.text:0000000000003DBD                 pop     r13
.text:0000000000003DBF                 pop     r14
.text:0000000000003DC1                 pop     r15
.text:0000000000003DC3                 retn
.text:0000000000003DC3 ; } // starts at 3D50
.text:0000000000003DC3 quotearg_buffer endp
.text:0000000000003DC3
.text:0000000000003DC3 ; ---------------------------------------------------------------------------
.text:0000000000003DC4                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DD0
.text:0000000000003DD0 ; Attributes: info_from_lumina
.text:0000000000003DD0
.text:0000000000003DD0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003DD0                 public quotearg_alloc_mem
.text:0000000000003DD0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003DD0
.text:0000000000003DD0 var_5C          = dword ptr -5Ch
.text:0000000000003DD0 var_58          = qword ptr -58h
.text:0000000000003DD0 var_50          = qword ptr -50h
.text:0000000000003DD0 var_48          = qword ptr -48h
.text:0000000000003DD0 var_40          = qword ptr -40h
.text:0000000000003DD0
.text:0000000000003DD0 ; __unwind {
.text:0000000000003DD0                 push    r15
.text:0000000000003DD2                 push    r14
.text:0000000000003DD4                 lea     rax, default_quoting_options
.text:0000000000003DDB                 push    r13
.text:0000000000003DDD                 push    r12
.text:0000000000003DDF                 mov     r12, rdx
.text:0000000000003DE2                 push    rbp
.text:0000000000003DE3                 push    rbx
.text:0000000000003DE4                 mov     rbx, rcx
.text:0000000000003DE7                 mov     r14, rdi
.text:0000000000003DEA                 mov     r15, rsi
.text:0000000000003DED                 sub     rsp, 38h
.text:0000000000003DF1                 test    rcx, rcx
.text:0000000000003DF4                 cmovz   rbx, rax
.text:0000000000003DF8                 xor     ebp, ebp
.text:0000000000003DFA                 call    ___errno_location
.text:0000000000003DFF                 test    r12, r12
.text:0000000000003E02                 mov     r13, rax
.text:0000000000003E05                 mov     eax, [rax]
.text:0000000000003E07                 setz    bpl
.text:0000000000003E0B                 or      ebp, [rbx+4]
.text:0000000000003E0E                 lea     r10, [rbx+8]
.text:0000000000003E12                 sub     rsp, 8
.text:0000000000003E16                 mov     r8d, [rbx]
.text:0000000000003E19                 mov     rcx, r15
.text:0000000000003E1C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003E20                 push    qword ptr [rbx+30h]
.text:0000000000003E23                 mov     rdx, r14
.text:0000000000003E26                 push    qword ptr [rbx+28h]
.text:0000000000003E29                 push    r10
.text:0000000000003E2B                 xor     esi, esi
.text:0000000000003E2D                 mov     r9d, ebp
.text:0000000000003E30                 xor     edi, edi
.text:0000000000003E32                 mov     [rsp+88h+var_48], r10
.text:0000000000003E37                 call    quotearg_buffer_restyled
.text:0000000000003E3C                 lea     rsi, [rax+1]
.text:0000000000003E40                 mov     [rsp+88h+var_40], rax
.text:0000000000003E45                 add     rsp, 20h
.text:0000000000003E49                 mov     rdi, rsi
.text:0000000000003E4C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003E51                 call    xmalloc
.text:0000000000003E56                 mov     [rsp+68h+var_58], rax
.text:0000000000003E5B                 sub     rsp, 8
.text:0000000000003E5F                 push    qword ptr [rbx+30h]
.text:0000000000003E62                 push    qword ptr [rbx+28h]
.text:0000000000003E65                 mov     r10, [rsp+80h+var_48]
.text:0000000000003E6A                 mov     r9d, ebp
.text:0000000000003E6D                 mov     r8d, [rbx]
.text:0000000000003E70                 mov     rcx, r15
.text:0000000000003E73                 mov     rdx, r14
.text:0000000000003E76                 mov     rdi, rax
.text:0000000000003E79                 push    r10
.text:0000000000003E7B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003E80                 call    quotearg_buffer_restyled
.text:0000000000003E85                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003E89                 add     rsp, 20h
.text:0000000000003E8D                 test    r12, r12
.text:0000000000003E90                 mov     [r13+0], eax
.text:0000000000003E94                 jz      short loc_3E9F
.text:0000000000003E96                 mov     r11, [rsp+68h+var_40]
.text:0000000000003E9B                 mov     [r12], r11
.text:0000000000003E9F
.text:0000000000003E9F loc_3E9F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000003E9F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003EA4                 add     rsp, 38h
.text:0000000000003EA8                 pop     rbx
.text:0000000000003EA9                 pop     rbp
.text:0000000000003EAA                 pop     r12
.text:0000000000003EAC                 pop     r13
.text:0000000000003EAE                 pop     r14
.text:0000000000003EB0                 pop     r15
.text:0000000000003EB2                 retn
.text:0000000000003EB2 ; } // starts at 3DD0
.text:0000000000003EB2 quotearg_alloc_mem endp
.text:0000000000003EB2
.text:0000000000003EB2 ; ---------------------------------------------------------------------------
.text:0000000000003EB3                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public quotearg_alloc
.text:0000000000003EC0 quotearg_alloc  proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 mov     rcx, rdx
.text:0000000000003EC3                 xor     edx, edx
.text:0000000000003EC5                 jmp     quotearg_alloc_mem
.text:0000000000003EC5 ; } // starts at 3EC0
.text:0000000000003EC5 quotearg_alloc  endp
.text:0000000000003EC5
.text:0000000000003EC5 ; ---------------------------------------------------------------------------
.text:0000000000003ECA                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0 ; Attributes: info_from_lumina
.text:0000000000003ED0
.text:0000000000003ED0 ; void __cdecl quotearg_free()
.text:0000000000003ED0                 public quotearg_free
.text:0000000000003ED0 quotearg_free   proc near
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 mov     eax, cs:nslots
.text:0000000000003ED6                 push    r12
.text:0000000000003ED8                 mov     r12, cs:slotvec
.text:0000000000003EDF                 push    rbp
.text:0000000000003EE0                 push    rbx
.text:0000000000003EE1                 cmp     eax, 1
.text:0000000000003EE4                 jle     short loc_3F11
.text:0000000000003EE6                 sub     eax, 2
.text:0000000000003EE9                 lea     rbx, [r12+18h]
.text:0000000000003EEE                 shl     rax, 4
.text:0000000000003EF2                 lea     rbp, [r12+rax+28h]
.text:0000000000003EF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003F00                 mov     rdi, [rbx]      ; ptr
.text:0000000000003F03                 add     rbx, 10h
.text:0000000000003F07                 call    _free
.text:0000000000003F0C                 cmp     rbx, rbp
.text:0000000000003F0F                 jnz     short loc_3F00
.text:0000000000003F11
.text:0000000000003F11 loc_3F11:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003F11                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003F16                 lea     rbx, slot0
.text:0000000000003F1D                 cmp     rdi, rbx
.text:0000000000003F20                 jz      short loc_3F39
.text:0000000000003F22                 call    _free
.text:0000000000003F27                 mov     cs:slotvec0, 100h
.text:0000000000003F32                 mov     cs:off_208078, rbx
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003F39                 lea     rbx, slotvec0
.text:0000000000003F40                 cmp     r12, rbx
.text:0000000000003F43                 jz      short loc_3F54
.text:0000000000003F45                 mov     rdi, r12        ; ptr
.text:0000000000003F48                 call    _free
.text:0000000000003F4D                 mov     cs:slotvec, rbx
.text:0000000000003F54
.text:0000000000003F54 loc_3F54:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003F54                 pop     rbx
.text:0000000000003F55                 mov     cs:nslots, 1
.text:0000000000003F5F                 pop     rbp
.text:0000000000003F60                 pop     r12
.text:0000000000003F62                 retn
.text:0000000000003F62 ; } // starts at 3ED0
.text:0000000000003F62 quotearg_free   endp
.text:0000000000003F62
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F63                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70
.text:0000000000003F70                 public quotearg_n
.text:0000000000003F70 quotearg_n      proc near
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 lea     rcx, default_quoting_options
.text:0000000000003F77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F7E                 jmp     quotearg_n_options
.text:0000000000003F7E ; } // starts at 3F70
.text:0000000000003F7E quotearg_n      endp
.text:0000000000003F7E
.text:0000000000003F7E ; ---------------------------------------------------------------------------
.text:0000000000003F83                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90
.text:0000000000003F90                 public quotearg_n_mem
.text:0000000000003F90 quotearg_n_mem  proc near
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 lea     rcx, default_quoting_options
.text:0000000000003F97                 jmp     quotearg_n_options
.text:0000000000003F97 ; } // starts at 3F90
.text:0000000000003F97 quotearg_n_mem  endp
.text:0000000000003F97
.text:0000000000003F97 ; ---------------------------------------------------------------------------
.text:0000000000003F9C                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FA0
.text:0000000000003FA0
.text:0000000000003FA0                 public quotearg
.text:0000000000003FA0 quotearg        proc near
.text:0000000000003FA0 ; __unwind {
.text:0000000000003FA0                 lea     rcx, default_quoting_options
.text:0000000000003FA7                 mov     rsi, rdi
.text:0000000000003FAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003FB1                 xor     edi, edi
.text:0000000000003FB3                 jmp     quotearg_n_options
.text:0000000000003FB3 ; } // starts at 3FA0
.text:0000000000003FB3 quotearg        endp
.text:0000000000003FB3
.text:0000000000003FB3 ; ---------------------------------------------------------------------------
.text:0000000000003FB8                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0
.text:0000000000003FC0                 public quotearg_mem
.text:0000000000003FC0 quotearg_mem    proc near
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 lea     rcx, default_quoting_options
.text:0000000000003FC7                 mov     rdx, rsi
.text:0000000000003FCA                 mov     rsi, rdi
.text:0000000000003FCD                 xor     edi, edi
.text:0000000000003FCF                 jmp     quotearg_n_options
.text:0000000000003FCF ; } // starts at 3FC0
.text:0000000000003FCF quotearg_mem    endp
.text:0000000000003FCF
.text:0000000000003FCF ; ---------------------------------------------------------------------------
.text:0000000000003FD4                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003FE0                 public quotearg_n_style
.text:0000000000003FE0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003FE0
.text:0000000000003FE0 var_48          = dword ptr -48h
.text:0000000000003FE0 var_44          = qword ptr -44h
.text:0000000000003FE0 var_3C          = qword ptr -3Ch
.text:0000000000003FE0 var_34          = qword ptr -34h
.text:0000000000003FE0 var_2C          = qword ptr -2Ch
.text:0000000000003FE0 var_24          = qword ptr -24h
.text:0000000000003FE0 var_1C          = qword ptr -1Ch
.text:0000000000003FE0 var_14          = dword ptr -14h
.text:0000000000003FE0 var_10          = qword ptr -10h
.text:0000000000003FE0
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 sub     rsp, 48h
.text:0000000000003FE4                 mov     rax, rdx
.text:0000000000003FE7                 mov     rdx, fs:28h
.text:0000000000003FF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003FF5                 xor     edx, edx
.text:0000000000003FF7                 cmp     esi, 0Ah
.text:0000000000003FFA                 jz      short loc_4064
.text:0000000000003FFC                 mov     [rsp+48h+var_48], esi
.text:0000000000003FFF                 mov     rcx, rsp
.text:0000000000004002                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004009                 mov     rsi, rax
.text:000000000000400C                 mov     [rsp+48h+var_44], 0
.text:0000000000004015                 mov     [rsp+48h+var_3C], 0
.text:000000000000401E                 mov     [rsp+48h+var_34], 0
.text:0000000000004027                 mov     [rsp+48h+var_2C], 0
.text:0000000000004030                 mov     [rsp+48h+var_24], 0
.text:0000000000004039                 mov     [rsp+48h+var_1C], 0
.text:0000000000004042                 mov     [rsp+48h+var_14], 0
.text:000000000000404A                 call    quotearg_n_options
.text:000000000000404F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004054                 xor     rcx, fs:28h
.text:000000000000405D                 jnz     short loc_4069
.text:000000000000405F                 add     rsp, 48h
.text:0000000000004063                 retn
.text:0000000000004064 ; ---------------------------------------------------------------------------
.text:0000000000004064
.text:0000000000004064 loc_4064:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004064                 call    _abort
.text:0000000000004069 ; ---------------------------------------------------------------------------
.text:0000000000004069
.text:0000000000004069 loc_4069:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004069                 call    ___stack_chk_fail
.text:0000000000004069 ; } // starts at 3FE0
.text:0000000000004069 quotearg_n_style endp
.text:0000000000004069
.text:0000000000004069 ; ---------------------------------------------------------------------------
.text:000000000000406E                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070 ; Attributes: info_from_lumina
.text:0000000000004070
.text:0000000000004070 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004070                 public quotearg_n_style_mem
.text:0000000000004070 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004070
.text:0000000000004070 var_48          = dword ptr -48h
.text:0000000000004070 var_44          = qword ptr -44h
.text:0000000000004070 var_3C          = qword ptr -3Ch
.text:0000000000004070 var_34          = qword ptr -34h
.text:0000000000004070 var_2C          = qword ptr -2Ch
.text:0000000000004070 var_24          = qword ptr -24h
.text:0000000000004070 var_1C          = qword ptr -1Ch
.text:0000000000004070 var_14          = dword ptr -14h
.text:0000000000004070 var_10          = qword ptr -10h
.text:0000000000004070
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 sub     rsp, 48h
.text:0000000000004074                 mov     rax, rdx
.text:0000000000004077                 mov     rdx, rcx
.text:000000000000407A                 mov     rcx, fs:28h
.text:0000000000004083                 mov     [rsp+48h+var_10], rcx
.text:0000000000004088                 xor     ecx, ecx
.text:000000000000408A                 cmp     esi, 0Ah
.text:000000000000408D                 jz      short loc_40F0
.text:000000000000408F                 mov     [rsp+48h+var_48], esi
.text:0000000000004092                 mov     rcx, rsp
.text:0000000000004095                 mov     rsi, rax
.text:0000000000004098                 mov     [rsp+48h+var_44], 0
.text:00000000000040A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000040AA                 mov     [rsp+48h+var_34], 0
.text:00000000000040B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000040BC                 mov     [rsp+48h+var_24], 0
.text:00000000000040C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000040CE                 mov     [rsp+48h+var_14], 0
.text:00000000000040D6                 call    quotearg_n_options
.text:00000000000040DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000040E0                 xor     rdx, fs:28h
.text:00000000000040E9                 jnz     short loc_40F5
.text:00000000000040EB                 add     rsp, 48h
.text:00000000000040EF                 retn
.text:00000000000040F0 ; ---------------------------------------------------------------------------
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000040F0                 call    _abort
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000040F5                 call    ___stack_chk_fail
.text:00000000000040F5 ; } // starts at 4070
.text:00000000000040F5 quotearg_n_style_mem endp
.text:00000000000040F5
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040FA                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100
.text:0000000000004100                 public quotearg_style
.text:0000000000004100 quotearg_style  proc near               ; CODE XREF: main+482↑p
.text:0000000000004100                                         ; main+535↑p ...
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 mov     rdx, rsi
.text:0000000000004103                 mov     esi, edi
.text:0000000000004105                 xor     edi, edi
.text:0000000000004107                 jmp     quotearg_n_style
.text:0000000000004107 ; } // starts at 4100
.text:0000000000004107 quotearg_style  endp
.text:0000000000004107
.text:0000000000004107 ; ---------------------------------------------------------------------------
.text:000000000000410C                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110
.text:0000000000004110                 public quotearg_style_mem
.text:0000000000004110 quotearg_style_mem proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 mov     rcx, rdx
.text:0000000000004113                 mov     rdx, rsi
.text:0000000000004116                 mov     esi, edi
.text:0000000000004118                 xor     edi, edi
.text:000000000000411A                 jmp     quotearg_n_style_mem
.text:000000000000411A ; } // starts at 4110
.text:000000000000411A quotearg_style_mem endp
.text:000000000000411A
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411F                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120 ; Attributes: info_from_lumina
.text:0000000000004120
.text:0000000000004120 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004120                 public quotearg_char_mem
.text:0000000000004120 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004120                                         ; quotearg_colon+C↓j ...
.text:0000000000004120
.text:0000000000004120 var_48          = xmmword ptr -48h
.text:0000000000004120 var_38          = xmmword ptr -38h
.text:0000000000004120 var_28          = xmmword ptr -28h
.text:0000000000004120 var_18          = qword ptr -18h
.text:0000000000004120 var_10          = qword ptr -10h
.text:0000000000004120
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 sub     rsp, 48h
.text:0000000000004124                 mov     ecx, edx
.text:0000000000004126                 mov     rax, fs:28h
.text:000000000000412F                 mov     [rsp+48h+var_10], rax
.text:0000000000004134                 xor     eax, eax
.text:0000000000004136                 mov     rax, cs:qword_208230
.text:000000000000413D                 mov     r8, rsp
.text:0000000000004140                 and     ecx, 1Fh
.text:0000000000004143                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000414B                 mov     [rsp+48h+var_18], rax
.text:0000000000004150                 mov     eax, edx
.text:0000000000004152                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004156                 shr     al, 5
.text:0000000000004159                 movzx   eax, al
.text:000000000000415C                 lea     r9, [r8+rax*4+8]
.text:0000000000004161                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000004169                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000416E                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000004176                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000417B                 mov     edx, [r9]
.text:000000000000417E                 mov     eax, edx
.text:0000000000004180                 shr     eax, cl
.text:0000000000004182                 not     eax
.text:0000000000004184                 and     eax, 1
.text:0000000000004187                 shl     eax, cl
.text:0000000000004189                 mov     rcx, r8
.text:000000000000418C                 xor     eax, edx
.text:000000000000418E                 mov     rdx, rsi
.text:0000000000004191                 mov     rsi, rdi
.text:0000000000004194                 mov     [r9], eax
.text:0000000000004197                 xor     edi, edi
.text:0000000000004199                 call    quotearg_n_options
.text:000000000000419E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000041A3                 xor     rsi, fs:28h
.text:00000000000041AC                 jnz     short loc_41B3
.text:00000000000041AE                 add     rsp, 48h
.text:00000000000041B2                 retn
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B3
.text:00000000000041B3 loc_41B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000041B3                 call    ___stack_chk_fail
.text:00000000000041B3 ; } // starts at 4120
.text:00000000000041B3 quotearg_char_mem endp
.text:00000000000041B3
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B8                 align 20h
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0
.text:00000000000041C0                 public quotearg_char
.text:00000000000041C0 quotearg_char   proc near
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 movsx   edx, sil
.text:00000000000041C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000041CB                 jmp     quotearg_char_mem
.text:00000000000041CB ; } // starts at 41C0
.text:00000000000041CB quotearg_char   endp
.text:00000000000041CB
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0                 public quotearg_colon
.text:00000000000041D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 mov     edx, 3Ah ; ':'
.text:00000000000041D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000041DC                 jmp     quotearg_char_mem
.text:00000000000041DC ; } // starts at 41D0
.text:00000000000041DC quotearg_colon  endp
.text:00000000000041DC
.text:00000000000041DC ; ---------------------------------------------------------------------------
.text:00000000000041E1                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0
.text:00000000000041F0                 public quotearg_colon_mem
.text:00000000000041F0 quotearg_colon_mem proc near
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 mov     edx, 3Ah ; ':'
.text:00000000000041F5                 jmp     quotearg_char_mem
.text:00000000000041F5 ; } // starts at 41F0
.text:00000000000041F5 quotearg_colon_mem endp
.text:00000000000041F5
.text:00000000000041F5 ; ---------------------------------------------------------------------------
.text:00000000000041FA                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004200                 public quotearg_n_style_colon
.text:0000000000004200 quotearg_n_style_colon proc near
.text:0000000000004200
.text:0000000000004200 var_48          = dword ptr -48h
.text:0000000000004200 var_44          = qword ptr -44h
.text:0000000000004200 var_3C          = qword ptr -3Ch
.text:0000000000004200 var_34          = qword ptr -34h
.text:0000000000004200 var_2C          = qword ptr -2Ch
.text:0000000000004200 var_24          = qword ptr -24h
.text:0000000000004200 var_1C          = qword ptr -1Ch
.text:0000000000004200 var_14          = dword ptr -14h
.text:0000000000004200 var_10          = qword ptr -10h
.text:0000000000004200
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 sub     rsp, 48h
.text:0000000000004204                 mov     rax, rdx
.text:0000000000004207                 mov     rdx, fs:28h
.text:0000000000004210                 mov     [rsp+48h+var_10], rdx
.text:0000000000004215                 xor     edx, edx
.text:0000000000004217                 cmp     esi, 0Ah
.text:000000000000421A                 jz      short loc_4284
.text:000000000000421C                 mov     [rsp+48h+var_48], esi
.text:000000000000421F                 mov     rcx, rsp
.text:0000000000004222                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004229                 mov     rsi, rax
.text:000000000000422C                 mov     [rsp+48h+var_44], 0
.text:0000000000004235                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000423E                 mov     [rsp+48h+var_34], 0
.text:0000000000004247                 mov     [rsp+48h+var_2C], 0
.text:0000000000004250                 mov     [rsp+48h+var_24], 0
.text:0000000000004259                 mov     [rsp+48h+var_1C], 0
.text:0000000000004262                 mov     [rsp+48h+var_14], 0
.text:000000000000426A                 call    quotearg_n_options
.text:000000000000426F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004274                 xor     rcx, fs:28h
.text:000000000000427D                 jnz     short loc_4289
.text:000000000000427F                 add     rsp, 48h
.text:0000000000004283                 retn
.text:0000000000004284 ; ---------------------------------------------------------------------------
.text:0000000000004284
.text:0000000000004284 loc_4284:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004284                 call    _abort
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:0000000000004289
.text:0000000000004289 loc_4289:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004289                 call    ___stack_chk_fail
.text:0000000000004289 ; } // starts at 4200
.text:0000000000004289 quotearg_n_style_colon endp
.text:0000000000004289
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:000000000000428E                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004290                 public quotearg_n_custom_mem
.text:0000000000004290 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004290                                         ; quotearg_custom+12↓j ...
.text:0000000000004290
.text:0000000000004290 var_48          = xmmword ptr -48h
.text:0000000000004290 var_38          = xmmword ptr -38h
.text:0000000000004290 var_28          = xmmword ptr -28h
.text:0000000000004290 var_18          = qword ptr -18h
.text:0000000000004290 var_10          = qword ptr -10h
.text:0000000000004290
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 sub     rsp, 48h
.text:0000000000004294                 mov     r9, rcx
.text:0000000000004297                 mov     rcx, cs:qword_208230
.text:000000000000429E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000042A6                 mov     rax, fs:28h
.text:00000000000042AF                 mov     [rsp+48h+var_10], rax
.text:00000000000042B4                 xor     eax, eax
.text:00000000000042B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000042BA                 test    rsi, rsi
.text:00000000000042BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000042C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000042C9                 movdqa  xmm0, cs:xmmword_208210
.text:00000000000042D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000042D6                 movdqa  xmm0, cs:xmmword_208220
.text:00000000000042DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000042E3                 jz      short loc_4317
.text:00000000000042E5                 test    rdx, rdx
.text:00000000000042E8                 jz      short loc_4317
.text:00000000000042EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000042EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000042F4                 mov     rcx, rsp
.text:00000000000042F7                 mov     rdx, r8
.text:00000000000042FA                 mov     rsi, r9
.text:00000000000042FD                 call    quotearg_n_options
.text:0000000000004302                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004307                 xor     rdi, fs:28h
.text:0000000000004310                 jnz     short loc_431C
.text:0000000000004312                 add     rsp, 48h
.text:0000000000004316                 retn
.text:0000000000004317 ; ---------------------------------------------------------------------------
.text:0000000000004317
.text:0000000000004317 loc_4317:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004317                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004317                 call    _abort
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:000000000000431C
.text:000000000000431C loc_431C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000431C                 call    ___stack_chk_fail
.text:000000000000431C ; } // starts at 4290
.text:000000000000431C quotearg_n_custom_mem endp
.text:000000000000431C
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:0000000000004321                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330
.text:0000000000004330                 public quotearg_n_custom
.text:0000000000004330 quotearg_n_custom proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004337                 jmp     quotearg_n_custom_mem
.text:0000000000004337 ; } // starts at 4330
.text:0000000000004337 quotearg_n_custom endp
.text:0000000000004337
.text:0000000000004337 ; ---------------------------------------------------------------------------
.text:000000000000433C                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public quotearg_custom
.text:0000000000004340 quotearg_custom proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 mov     rcx, rdx
.text:0000000000004343                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000434A                 mov     rdx, rsi
.text:000000000000434D                 mov     rsi, rdi
.text:0000000000004350                 xor     edi, edi
.text:0000000000004352                 jmp     quotearg_n_custom_mem
.text:0000000000004352 ; } // starts at 4340
.text:0000000000004352 quotearg_custom endp
.text:0000000000004352
.text:0000000000004352 ; ---------------------------------------------------------------------------
.text:0000000000004357                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_custom_mem
.text:0000000000004360 quotearg_custom_mem proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 mov     r8, rcx
.text:0000000000004363                 mov     rcx, rdx
.text:0000000000004366                 mov     rdx, rsi
.text:0000000000004369                 mov     rsi, rdi
.text:000000000000436C                 xor     edi, edi
.text:000000000000436E                 jmp     quotearg_n_custom_mem
.text:000000000000436E ; } // starts at 4360
.text:000000000000436E quotearg_custom_mem endp
.text:000000000000436E
.text:000000000000436E ; ---------------------------------------------------------------------------
.text:0000000000004373                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public quote_n_mem
.text:0000000000004380 quote_n_mem     proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 lea     rcx, quote_quoting_options
.text:0000000000004387                 jmp     quotearg_n_options
.text:0000000000004387 ; } // starts at 4380
.text:0000000000004387 quote_n_mem     endp
.text:0000000000004387
.text:0000000000004387 ; ---------------------------------------------------------------------------
.text:000000000000438C                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quote_mem
.text:0000000000004390 quote_mem       proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rcx, quote_quoting_options
.text:0000000000004397                 mov     rdx, rsi
.text:000000000000439A                 mov     rsi, rdi
.text:000000000000439D                 xor     edi, edi
.text:000000000000439F                 jmp     quotearg_n_options
.text:000000000000439F ; } // starts at 4390
.text:000000000000439F quote_mem       endp
.text:000000000000439F
.text:000000000000439F ; ---------------------------------------------------------------------------
.text:00000000000043A4                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0                 public quote_n
.text:00000000000043B0 quote_n         proc near               ; CODE XREF: main+302↑p
.text:00000000000043B0                                         ; main+313↑p ...
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rcx, quote_quoting_options
.text:00000000000043B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043BE                 jmp     quotearg_n_options
.text:00000000000043BE ; } // starts at 43B0
.text:00000000000043BE quote_n         endp
.text:00000000000043BE
.text:00000000000043BE ; ---------------------------------------------------------------------------
.text:00000000000043C3                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0
.text:00000000000043D0                 public quote
.text:00000000000043D0 quote           proc near               ; CODE XREF: xnumtoimax+6F↓p
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 lea     rcx, quote_quoting_options
.text:00000000000043D7                 mov     rsi, rdi
.text:00000000000043DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043E1                 xor     edi, edi
.text:00000000000043E3                 jmp     quotearg_n_options
.text:00000000000043E3 ; } // starts at 43D0
.text:00000000000043E3 quote           endp
.text:00000000000043E3
.text:00000000000043E3 ; ---------------------------------------------------------------------------
.text:00000000000043E8                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0
.text:00000000000043F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000043F0                 public version_etc_arn
.text:00000000000043F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_482B↓j
.text:00000000000043F0                                         ; version_etc_va:loc_487B↓p ...
.text:00000000000043F0
.text:00000000000043F0 var_58          = qword ptr -58h
.text:00000000000043F0 var_50          = qword ptr -50h
.text:00000000000043F0 var_48          = qword ptr -48h
.text:00000000000043F0 var_40          = qword ptr -40h
.text:00000000000043F0
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 push    r15
.text:00000000000043F2                 push    r14
.text:00000000000043F4                 push    r13
.text:00000000000043F6                 push    r12
.text:00000000000043F8                 mov     r12, r9
.text:00000000000043FB                 push    rbp
.text:00000000000043FC                 push    rbx
.text:00000000000043FD                 mov     rbp, rdi
.text:0000000000004400                 mov     rbx, r8
.text:0000000000004403                 sub     rsp, 28h
.text:0000000000004407                 test    rsi, rsi
.text:000000000000440A                 jz      loc_4528
.text:0000000000004410                 mov     r8, rdx
.text:0000000000004413                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000441A                 mov     r9, rcx
.text:000000000000441D                 xor     eax, eax
.text:000000000000441F                 mov     rcx, rsi
.text:0000000000004422                 mov     esi, 1
.text:0000000000004427                 call    ___fprintf_chk
.text:000000000000442C
.text:000000000000442C loc_442C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000442C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004433                 xor     edi, edi        ; domainname
.text:0000000000004435                 mov     edx, 5          ; category
.text:000000000000443A                 call    _dcgettext
.text:000000000000443F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004446                 mov     rcx, rax
.text:0000000000004449                 mov     r8d, 7E3h
.text:000000000000444F                 mov     esi, 1
.text:0000000000004454                 mov     rdi, rbp
.text:0000000000004457                 xor     eax, eax
.text:0000000000004459                 call    ___fprintf_chk
.text:000000000000445E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004465                 xor     edi, edi        ; domainname
.text:0000000000004467                 mov     edx, 5          ; category
.text:000000000000446C                 call    _dcgettext
.text:0000000000004471                 mov     rsi, rbp        ; stream
.text:0000000000004474                 mov     rdi, rax        ; s
.text:0000000000004477                 call    _fputs_unlocked
.text:000000000000447C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004480                 ja      def_4494        ; jumptable 0000000000004494 default case
.text:0000000000004486                 lea     rdx, jpt_4494
.text:000000000000448D                 movsxd  rax, ds:(jpt_4494 - 68C4h)[rdx+r12*4]
.text:0000000000004491                 add     rax, rdx
.text:0000000000004494                 jmp     rax             ; switch jump
.text:0000000000004494 ; ---------------------------------------------------------------------------
.text:0000000000004496                 align 20h
.text:00000000000044A0
.text:00000000000044A0 loc_44A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000044A0                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000044A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004494 case 8
.text:00000000000044A4                 mov     rax, [rbx+10h]
.text:00000000000044A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000044AF                 mov     r8, [rbx+8]
.text:00000000000044B3                 mov     edx, 5          ; category
.text:00000000000044B8                 xor     edi, edi        ; domainname
.text:00000000000044BA                 mov     r13, [rbx+30h]
.text:00000000000044BE                 mov     r12, [rbx+28h]
.text:00000000000044C2                 mov     [rsp+58h+var_48], r9
.text:00000000000044C7                 mov     r15, [rbx+20h]
.text:00000000000044CB                 mov     r14, [rbx+18h]
.text:00000000000044CF                 mov     [rsp+58h+var_58], rax
.text:00000000000044D3                 mov     [rsp+58h+var_50], r8
.text:00000000000044D8                 mov     rbx, [rbx]
.text:00000000000044DB                 call    _dcgettext
.text:00000000000044E0                 sub     rsp, 8
.text:00000000000044E4
.text:00000000000044E4 loc_44E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000044E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000044E9                 mov     rdx, rax
.text:00000000000044EC                 mov     rcx, rbx
.text:00000000000044EF                 mov     esi, 1
.text:00000000000044F4                 mov     rdi, rbp
.text:00000000000044F7                 xor     eax, eax
.text:00000000000044F9                 push    r9
.text:00000000000044FB                 push    r13
.text:00000000000044FD                 push    r12
.text:00000000000044FF                 push    r15
.text:0000000000004501                 push    r14
.text:0000000000004503                 mov     r9, [rsp+88h+var_58]
.text:0000000000004508                 mov     r8, [rsp+88h+var_50]
.text:000000000000450D                 call    ___fprintf_chk
.text:0000000000004512                 add     rsp, 30h
.text:0000000000004516
.text:0000000000004516 loc_4516:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004516                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004516                 add     rsp, 28h        ; jumptable 0000000000004494 case 0
.text:000000000000451A                 pop     rbx
.text:000000000000451B                 pop     rbp
.text:000000000000451C                 pop     r12
.text:000000000000451E                 pop     r13
.text:0000000000004520                 pop     r14
.text:0000000000004522                 pop     r15
.text:0000000000004524                 retn
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004525                 align 8
.text:0000000000004528
.text:0000000000004528 loc_4528:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004528                 mov     r8, rcx
.text:000000000000452B                 mov     rcx, rdx
.text:000000000000452E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004535                 mov     esi, 1
.text:000000000000453A                 xor     eax, eax
.text:000000000000453C                 call    ___fprintf_chk
.text:0000000000004541                 jmp     loc_442C
.text:0000000000004541 ; ---------------------------------------------------------------------------
.text:0000000000004546                 align 10h
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004550                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004550                 mov     r10, [rbx+40h]  ; jumptable 0000000000004494 case 9
.text:0000000000004554                 mov     r9, [rbx+38h]
.text:0000000000004558                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000455F                 mov     rax, [rbx+10h]
.text:0000000000004563                 mov     r8, [rbx+8]
.text:0000000000004567                 mov     edx, 5          ; category
.text:000000000000456C                 mov     r13, [rbx+30h]
.text:0000000000004570                 mov     r12, [rbx+28h]
.text:0000000000004574                 mov     r15, [rbx+20h]
.text:0000000000004578                 mov     r14, [rbx+18h]
.text:000000000000457C                 mov     rbx, [rbx]
.text:000000000000457F                 mov     [rsp+58h+var_40], r10
.text:0000000000004584                 mov     [rsp+58h+var_48], r9
.text:0000000000004589                 mov     [rsp+58h+var_58], rax
.text:000000000000458D                 mov     [rsp+58h+var_50], r8
.text:0000000000004592
.text:0000000000004592 loc_4592:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004592                 xor     edi, edi        ; domainname
.text:0000000000004594                 call    _dcgettext
.text:0000000000004599                 mov     r10, [rsp+58h+var_40]
.text:000000000000459E                 push    r10
.text:00000000000045A0                 jmp     loc_44E4
.text:00000000000045A0 ; ---------------------------------------------------------------------------
.text:00000000000045A5                 align 8
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000045A8                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000045A8                 mov     rbx, [rbx]      ; jumptable 0000000000004494 case 1
.text:00000000000045AB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000045B2                 mov     edx, 5          ; category
.text:00000000000045B7                 xor     edi, edi        ; domainname
.text:00000000000045B9                 call    _dcgettext
.text:00000000000045BE                 add     rsp, 28h
.text:00000000000045C2                 mov     rcx, rbx
.text:00000000000045C5                 mov     rdi, rbp
.text:00000000000045C8                 pop     rbx
.text:00000000000045C9                 pop     rbp
.text:00000000000045CA                 pop     r12
.text:00000000000045CC                 pop     r13
.text:00000000000045CE                 pop     r14
.text:00000000000045D0                 pop     r15
.text:00000000000045D2                 mov     rdx, rax
.text:00000000000045D5                 mov     esi, 1
.text:00000000000045DA                 xor     eax, eax
.text:00000000000045DC                 jmp     ___fprintf_chk
.text:00000000000045DC ; ---------------------------------------------------------------------------
.text:00000000000045E1                 align 8
.text:00000000000045E8
.text:00000000000045E8 loc_45E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000045E8                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000045E8                 mov     r12, [rbx+8]    ; jumptable 0000000000004494 case 2
.text:00000000000045EC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000045F3                 mov     rbx, [rbx]
.text:00000000000045F6                 mov     edx, 5          ; category
.text:00000000000045FB                 xor     edi, edi        ; domainname
.text:00000000000045FD                 call    _dcgettext
.text:0000000000004602                 add     rsp, 28h
.text:0000000000004606                 mov     r8, r12
.text:0000000000004609                 mov     rcx, rbx
.text:000000000000460C                 mov     rdi, rbp
.text:000000000000460F                 mov     rdx, rax
.text:0000000000004612                 mov     esi, 1
.text:0000000000004617                 pop     rbx
.text:0000000000004618                 pop     rbp
.text:0000000000004619                 pop     r12
.text:000000000000461B                 pop     r13
.text:000000000000461D                 pop     r14
.text:000000000000461F                 pop     r15
.text:0000000000004621                 xor     eax, eax
.text:0000000000004623                 jmp     ___fprintf_chk
.text:0000000000004623 ; ---------------------------------------------------------------------------
.text:0000000000004628                 align 10h
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004630                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004630                 mov     r13, [rbx+10h]  ; jumptable 0000000000004494 case 3
.text:0000000000004634                 mov     r12, [rbx+8]
.text:0000000000004638                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000463F                 mov     rbx, [rbx]
.text:0000000000004642                 mov     edx, 5          ; category
.text:0000000000004647                 xor     edi, edi        ; domainname
.text:0000000000004649                 call    _dcgettext
.text:000000000000464E                 add     rsp, 28h
.text:0000000000004652                 mov     r9, r13
.text:0000000000004655                 mov     r8, r12
.text:0000000000004658                 mov     rcx, rbx
.text:000000000000465B                 mov     rdi, rbp
.text:000000000000465E                 mov     rdx, rax
.text:0000000000004661                 pop     rbx
.text:0000000000004662                 pop     rbp
.text:0000000000004663                 pop     r12
.text:0000000000004665                 pop     r13
.text:0000000000004667                 pop     r14
.text:0000000000004669                 pop     r15
.text:000000000000466B                 mov     esi, 1
.text:0000000000004670                 xor     eax, eax
.text:0000000000004672                 jmp     ___fprintf_chk
.text:0000000000004672 ; ---------------------------------------------------------------------------
.text:0000000000004677                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004680                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004680                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004494 case 4
.text:0000000000004687                 mov     edx, 5          ; category
.text:000000000000468C                 xor     edi, edi        ; domainname
.text:000000000000468E                 mov     r14, [rbx+18h]
.text:0000000000004692                 mov     r13, [rbx+10h]
.text:0000000000004696                 mov     r12, [rbx+8]
.text:000000000000469A                 mov     rbx, [rbx]
.text:000000000000469D                 call    _dcgettext
.text:00000000000046A2                 sub     rsp, 8
.text:00000000000046A6
.text:00000000000046A6 loc_46A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000046A6                 push    r14
.text:00000000000046A8                 mov     rdx, rax
.text:00000000000046AB                 mov     r9, r13
.text:00000000000046AE                 mov     r8, r12
.text:00000000000046B1                 mov     rcx, rbx
.text:00000000000046B4                 mov     rdi, rbp
.text:00000000000046B7                 mov     esi, 1
.text:00000000000046BC                 xor     eax, eax
.text:00000000000046BE                 call    ___fprintf_chk
.text:00000000000046C3                 pop     rax
.text:00000000000046C4                 pop     rdx
.text:00000000000046C5                 add     rsp, 28h
.text:00000000000046C9                 pop     rbx
.text:00000000000046CA                 pop     rbp
.text:00000000000046CB                 pop     r12
.text:00000000000046CD                 pop     r13
.text:00000000000046CF                 pop     r14
.text:00000000000046D1                 pop     r15
.text:00000000000046D3                 retn
.text:00000000000046D3 ; ---------------------------------------------------------------------------
.text:00000000000046D4                 align 8
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046D8                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000046D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004494 case 5
.text:00000000000046DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000046E3                 mov     edx, 5          ; category
.text:00000000000046E8                 xor     edi, edi        ; domainname
.text:00000000000046EA                 mov     r14, [rbx+18h]
.text:00000000000046EE                 mov     r13, [rbx+10h]
.text:00000000000046F2                 mov     r12, [rbx+8]
.text:00000000000046F6                 mov     rbx, [rbx]
.text:00000000000046F9                 call    _dcgettext
.text:00000000000046FE                 push    r15
.text:0000000000004700                 jmp     short loc_46A6
.text:0000000000004700 ; ---------------------------------------------------------------------------
.text:0000000000004702                 align 8
.text:0000000000004708
.text:0000000000004708 loc_4708:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004708                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004708                 mov     r8, [rbx+8]     ; jumptable 0000000000004494 case 6
.text:000000000000470C                 mov     r12, [rbx+28h]
.text:0000000000004710                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004717                 mov     r15, [rbx+20h]
.text:000000000000471B                 mov     r14, [rbx+18h]
.text:000000000000471F                 mov     edx, 5          ; category
.text:0000000000004724                 mov     r13, [rbx+10h]
.text:0000000000004728                 xor     edi, edi        ; domainname
.text:000000000000472A                 mov     rbx, [rbx]
.text:000000000000472D                 mov     [rsp+58h+var_58], r8
.text:0000000000004731                 call    _dcgettext
.text:0000000000004736                 sub     rsp, 8
.text:000000000000473A                 mov     r9, r13
.text:000000000000473D                 push    r12
.text:000000000000473F                 push    r15
.text:0000000000004741                 push    r14
.text:0000000000004743
.text:0000000000004743 loc_4743:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004743                 mov     r8, [rsp+78h+var_58]
.text:0000000000004748                 mov     rcx, rbx
.text:000000000000474B                 mov     rdx, rax
.text:000000000000474E                 mov     rdi, rbp
.text:0000000000004751                 mov     esi, 1
.text:0000000000004756                 xor     eax, eax
.text:0000000000004758                 call    ___fprintf_chk
.text:000000000000475D                 add     rsp, 20h
.text:0000000000004761                 add     rsp, 28h
.text:0000000000004765                 pop     rbx
.text:0000000000004766                 pop     rbp
.text:0000000000004767                 pop     r12
.text:0000000000004769                 pop     r13
.text:000000000000476B                 pop     r14
.text:000000000000476D                 pop     r15
.text:000000000000476F                 retn
.text:0000000000004770 ; ---------------------------------------------------------------------------
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004770                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004770                 mov     r9, [rbx+10h]   ; jumptable 0000000000004494 case 7
.text:0000000000004774                 mov     r13, [rbx+30h]
.text:0000000000004778                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000477F                 mov     r12, [rbx+28h]
.text:0000000000004783                 mov     r15, [rbx+20h]
.text:0000000000004787                 mov     edx, 5          ; category
.text:000000000000478C                 mov     r14, [rbx+18h]
.text:0000000000004790                 mov     r8, [rbx+8]
.text:0000000000004794                 xor     edi, edi        ; domainname
.text:0000000000004796                 mov     [rsp+58h+var_50], r9
.text:000000000000479B                 mov     rbx, [rbx]
.text:000000000000479E                 mov     [rsp+58h+var_58], r8
.text:00000000000047A2                 call    _dcgettext
.text:00000000000047A7                 push    r13
.text:00000000000047A9                 push    r12
.text:00000000000047AB                 push    r15
.text:00000000000047AD                 push    r14
.text:00000000000047AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000047B4                 jmp     short loc_4743
.text:00000000000047B4 ; ---------------------------------------------------------------------------
.text:00000000000047B6                 align 20h
.text:00000000000047C0
.text:00000000000047C0 def_4494:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000047C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004494 default case
.text:00000000000047C4                 mov     r9, [rbx+38h]
.text:00000000000047C8                 mov     edx, 5
.text:00000000000047CD                 mov     rax, [rbx+10h]
.text:00000000000047D1                 mov     r8, [rbx+8]
.text:00000000000047D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000047DC                 mov     r13, [rbx+30h]
.text:00000000000047E0                 mov     r12, [rbx+28h]
.text:00000000000047E4                 mov     r15, [rbx+20h]
.text:00000000000047E8                 mov     r14, [rbx+18h]
.text:00000000000047EC                 mov     [rsp+58h+var_40], r10
.text:00000000000047F1                 mov     [rsp+58h+var_48], r9
.text:00000000000047F6                 mov     [rsp+58h+var_58], rax
.text:00000000000047FA                 mov     [rsp+58h+var_50], r8
.text:00000000000047FF                 mov     rbx, [rbx]
.text:0000000000004802                 jmp     loc_4592
.text:0000000000004802 ; } // starts at 43F0
.text:0000000000004802 version_etc_arn endp
.text:0000000000004802
.text:0000000000004802 ; ---------------------------------------------------------------------------
.text:0000000000004807                 align 10h
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810 ; Attributes: info_from_lumina
.text:0000000000004810
.text:0000000000004810 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004810                 public version_etc_ar
.text:0000000000004810 version_etc_ar  proc near
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 xor     r9d, r9d
.text:0000000000004813                 cmp     qword ptr [r8], 0
.text:0000000000004817                 jz      short loc_482B
.text:0000000000004819                 nop     dword ptr [rax+00000000h]
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004820                 add     r9, 1
.text:0000000000004824                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004829                 jnz     short loc_4820
.text:000000000000482B
.text:000000000000482B loc_482B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000482B                 jmp     version_etc_arn
.text:000000000000482B ; } // starts at 4810
.text:000000000000482B version_etc_ar  endp
.text:000000000000482B
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830 ; Attributes: info_from_lumina
.text:0000000000004830
.text:0000000000004830 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004830                 public version_etc_va
.text:0000000000004830 version_etc_va  proc near
.text:0000000000004830
.text:0000000000004830 authtab         = qword ptr -68h
.text:0000000000004830 var_10          = qword ptr -10h
.text:0000000000004830
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 sub     rsp, 68h
.text:0000000000004834                 mov     r10, r8
.text:0000000000004837                 xor     r9d, r9d
.text:000000000000483A                 mov     rax, fs:28h
.text:0000000000004843                 mov     [rsp+68h+var_10], rax
.text:0000000000004848                 xor     eax, eax
.text:000000000000484A                 mov     r8, rsp
.text:000000000000484D                 nop     dword ptr [rax]
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004850                 mov     eax, [r10]
.text:0000000000004853                 cmp     eax, 2Fh ; '/'
.text:0000000000004856                 ja      short loc_489A
.text:0000000000004858                 mov     r11d, eax
.text:000000000000485B                 add     r11, [r10+10h]
.text:000000000000485F                 add     eax, 8
.text:0000000000004862                 mov     [r10], eax
.text:0000000000004865
.text:0000000000004865 loc_4865:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004865                 mov     rax, [r11]
.text:0000000000004868                 test    rax, rax
.text:000000000000486B                 mov     [r8+r9*8], rax
.text:000000000000486F                 jz      short loc_487B
.text:0000000000004871                 add     r9, 1
.text:0000000000004875                 cmp     r9, 0Ah
.text:0000000000004879                 jnz     short loc_4850
.text:000000000000487B
.text:000000000000487B loc_487B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000487B                 call    version_etc_arn
.text:0000000000004880                 mov     rax, [rsp+68h+var_10]
.text:0000000000004885                 xor     rax, fs:28h
.text:000000000000488E                 jnz     short loc_4895
.text:0000000000004890                 add     rsp, 68h
.text:0000000000004894                 retn
.text:0000000000004895 ; ---------------------------------------------------------------------------
.text:0000000000004895
.text:0000000000004895 loc_4895:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004895                 call    ___stack_chk_fail
.text:000000000000489A ; ---------------------------------------------------------------------------
.text:000000000000489A
.text:000000000000489A loc_489A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000489A                 mov     r11, [r10+8]
.text:000000000000489E                 lea     rax, [r11+8]
.text:00000000000048A2                 mov     [r10+8], rax
.text:00000000000048A6                 jmp     short loc_4865
.text:00000000000048A6 ; } // starts at 4830
.text:00000000000048A6 version_etc_va  endp
.text:00000000000048A6
.text:00000000000048A6 ; ---------------------------------------------------------------------------
.text:00000000000048A8                 align 10h
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000048B0                 public version_etc
.text:00000000000048B0 version_etc     proc near               ; CODE XREF: main+103↑p
.text:00000000000048B0
.text:00000000000048B0 var_C0          = dword ptr -0C0h
.text:00000000000048B0 var_B8          = qword ptr -0B8h
.text:00000000000048B0 var_B0          = qword ptr -0B0h
.text:00000000000048B0 var_A8          = byte ptr -0A8h
.text:00000000000048B0 var_50          = qword ptr -50h
.text:00000000000048B0 var_48          = byte ptr -48h
.text:00000000000048B0 var_28          = qword ptr -28h
.text:00000000000048B0 var_20          = qword ptr -20h
.text:00000000000048B0 arg_0           = byte ptr  8
.text:00000000000048B0
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 push    rbp
.text:00000000000048B1                 push    rbx
.text:00000000000048B2                 mov     r10d, 20h ; ' '
.text:00000000000048B8                 xor     r11d, r11d
.text:00000000000048BB                 sub     rsp, 0B8h
.text:00000000000048C2                 mov     rax, fs:28h
.text:00000000000048CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000048D0                 xor     eax, eax
.text:00000000000048D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000048DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000048E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000048EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000048EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000048F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000048FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004904                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000490C                 xor     r9d, r9d
.text:000000000000490F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004914                 mov     rbp, rax
.text:0000000000004917                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004920
.text:0000000000004920 loc_4920:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004920                 cmp     r10d, 2Fh ; '/'
.text:0000000000004924                 ja      short loc_497C
.text:0000000000004926                 mov     eax, r10d
.text:0000000000004929                 mov     r11d, 1
.text:000000000000492F                 add     r10d, 8
.text:0000000000004933                 add     rax, rbp
.text:0000000000004936
.text:0000000000004936 loc_4936:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004936                 mov     rax, [rax]
.text:0000000000004939                 test    rax, rax
.text:000000000000493C                 mov     [r8+r9*8], rax
.text:0000000000004940                 jz      short loc_494C
.text:0000000000004942                 add     r9, 1
.text:0000000000004946                 cmp     r9, 0Ah
.text:000000000000494A                 jnz     short loc_4920
.text:000000000000494C
.text:000000000000494C loc_494C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000494C                 test    r11b, r11b
.text:000000000000494F                 jnz     short loc_4975
.text:0000000000004951
.text:0000000000004951 loc_4951:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004951                 call    version_etc_arn
.text:0000000000004956                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000495B                 xor     rax, fs:28h
.text:0000000000004964                 jnz     short loc_4970
.text:0000000000004966                 add     rsp, 0B8h
.text:000000000000496D                 pop     rbx
.text:000000000000496E                 pop     rbp
.text:000000000000496F                 retn
.text:0000000000004970 ; ---------------------------------------------------------------------------
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004970                 call    ___stack_chk_fail
.text:0000000000004975 ; ---------------------------------------------------------------------------
.text:0000000000004975
.text:0000000000004975 loc_4975:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004975                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000497A                 jmp     short loc_4951
.text:000000000000497C ; ---------------------------------------------------------------------------
.text:000000000000497C
.text:000000000000497C loc_497C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000497C                 mov     rax, rbx
.text:000000000000497F                 add     rbx, 8
.text:0000000000004983                 jmp     short loc_4936
.text:0000000000004983 ; } // starts at 48B0
.text:0000000000004983 version_etc     endp
.text:0000000000004983
.text:0000000000004983 ; ---------------------------------------------------------------------------
.text:0000000000004985                 align 10h
.text:0000000000004990
.text:0000000000004990 ; =============== S U B R O U T I N E =======================================
.text:0000000000004990
.text:0000000000004990 ; Attributes: info_from_lumina
.text:0000000000004990
.text:0000000000004990 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004990                 public emit_bug_reporting_address
.text:0000000000004990 emit_bug_reporting_address proc near
.text:0000000000004990 ; __unwind {
.text:0000000000004990                 push    rbx
.text:0000000000004991                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004998                 mov     edx, 5          ; category
.text:000000000000499D                 xor     edi, edi        ; domainname
.text:000000000000499F                 call    _dcgettext
.text:00000000000049A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000049AB                 mov     rsi, rax
.text:00000000000049AE                 mov     edi, 1
.text:00000000000049B3                 xor     eax, eax
.text:00000000000049B5                 call    ___printf_chk
.text:00000000000049BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000049C1                 mov     edx, 5          ; category
.text:00000000000049C6                 xor     edi, edi        ; domainname
.text:00000000000049C8                 call    _dcgettext
.text:00000000000049CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000049D4                 lea     rdx, unk_58C0
.text:00000000000049DB                 mov     rsi, rax
.text:00000000000049DE                 mov     edi, 1
.text:00000000000049E3                 xor     eax, eax
.text:00000000000049E5                 call    ___printf_chk
.text:00000000000049EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000049F8                 xor     edi, edi        ; domainname
.text:00000000000049FA                 mov     edx, 5          ; category
.text:00000000000049FF                 call    _dcgettext
.text:0000000000004A04                 mov     rsi, rbx        ; stream
.text:0000000000004A07                 mov     rdi, rax        ; s
.text:0000000000004A0A                 pop     rbx
.text:0000000000004A0B                 jmp     _fputs_unlocked
.text:0000000000004A0B ; } // starts at 4990
.text:0000000000004A0B emit_bug_reporting_address endp
.text:0000000000004A0B
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10
.text:0000000000004A10                 public xmalloc
.text:0000000000004A10 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004A10                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 push    rbx
.text:0000000000004A11                 mov     rbx, rdi
.text:0000000000004A14                 call    _malloc
.text:0000000000004A19                 test    rax, rax
.text:0000000000004A1C                 jnz     short loc_4A23
.text:0000000000004A1E                 test    rbx, rbx
.text:0000000000004A21                 jnz     short loc_4A25
.text:0000000000004A23
.text:0000000000004A23 loc_4A23:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004A23                 pop     rbx
.text:0000000000004A24                 retn
.text:0000000000004A25 ; ---------------------------------------------------------------------------
.text:0000000000004A25
.text:0000000000004A25 loc_4A25:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004A25                 call    xalloc_die
.text:0000000000004A25 ; } // starts at 4A10
.text:0000000000004A25 xmalloc         endp
.text:0000000000004A25
.text:0000000000004A25 ; ---------------------------------------------------------------------------
.text:0000000000004A2A                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30 ; Attributes: info_from_lumina
.text:0000000000004A30
.text:0000000000004A30 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004A30                 public xnmalloc
.text:0000000000004A30 xnmalloc        proc near
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 mov     rax, rdi
.text:0000000000004A33                 mul     rsi
.text:0000000000004A36                 mov     rdi, rax
.text:0000000000004A39                 seto    al
.text:0000000000004A3C                 test    rdi, rdi
.text:0000000000004A3F                 js      short loc_4A4B
.text:0000000000004A41                 movzx   eax, al
.text:0000000000004A44                 test    rax, rax
.text:0000000000004A47                 jnz     short loc_4A4B
.text:0000000000004A49                 jmp     short xmalloc
.text:0000000000004A4B ; ---------------------------------------------------------------------------
.text:0000000000004A4B
.text:0000000000004A4B loc_4A4B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004A4B                                         ; xnmalloc+17↑j
.text:0000000000004A4B                 sub     rsp, 8
.text:0000000000004A4F                 call    xalloc_die
.text:0000000000004A4F ; } // starts at 4A30
.text:0000000000004A4F xnmalloc        endp
.text:0000000000004A4F
.text:0000000000004A4F ; ---------------------------------------------------------------------------
.text:0000000000004A54                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public xcharalloc
.text:0000000000004A60 xcharalloc      proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 jmp     short xmalloc
.text:0000000000004A60 ; } // starts at 4A60
.text:0000000000004A60 xcharalloc      endp
.text:0000000000004A60
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A62                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70 ; Attributes: info_from_lumina
.text:0000000000004A70
.text:0000000000004A70 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004A70                 public xrealloc
.text:0000000000004A70 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004A70                                         ; quotearg_n_options+182↑p ...
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 test    rsi, rsi
.text:0000000000004A73                 push    rbx
.text:0000000000004A74                 mov     rbx, rsi
.text:0000000000004A77                 jnz     short loc_4A7E
.text:0000000000004A79                 test    rdi, rdi
.text:0000000000004A7C                 jnz     short loc_4A98
.text:0000000000004A7E
.text:0000000000004A7E loc_4A7E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004A7E                 mov     rsi, rbx        ; size
.text:0000000000004A81                 call    _realloc
.text:0000000000004A86                 test    rax, rax
.text:0000000000004A89                 jnz     short loc_4A90
.text:0000000000004A8B                 test    rbx, rbx
.text:0000000000004A8E                 jnz     short loc_4AA1
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004A90                 pop     rbx
.text:0000000000004A91                 retn
.text:0000000000004A91 ; ---------------------------------------------------------------------------
.text:0000000000004A92                 align 8
.text:0000000000004A98
.text:0000000000004A98 loc_4A98:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004A98                 call    _free
.text:0000000000004A9D                 xor     eax, eax
.text:0000000000004A9F                 pop     rbx
.text:0000000000004AA0                 retn
.text:0000000000004AA1 ; ---------------------------------------------------------------------------
.text:0000000000004AA1
.text:0000000000004AA1 loc_4AA1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004AA1                 call    xalloc_die
.text:0000000000004AA1 ; } // starts at 4A70
.text:0000000000004AA1 xrealloc        endp
.text:0000000000004AA1
.text:0000000000004AA1 ; ---------------------------------------------------------------------------
.text:0000000000004AA6                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0 ; Attributes: info_from_lumina
.text:0000000000004AB0
.text:0000000000004AB0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004AB0                 public xnrealloc
.text:0000000000004AB0 xnrealloc       proc near
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 mov     rax, rsi
.text:0000000000004AB3                 mul     rdx
.text:0000000000004AB6                 mov     rsi, rax
.text:0000000000004AB9                 seto    al
.text:0000000000004ABC                 test    rsi, rsi
.text:0000000000004ABF                 js      short loc_4ACB
.text:0000000000004AC1                 movzx   eax, al
.text:0000000000004AC4                 test    rax, rax
.text:0000000000004AC7                 jnz     short loc_4ACB
.text:0000000000004AC9                 jmp     short xrealloc
.text:0000000000004ACB ; ---------------------------------------------------------------------------
.text:0000000000004ACB
.text:0000000000004ACB loc_4ACB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004ACB                                         ; xnrealloc+17↑j
.text:0000000000004ACB                 sub     rsp, 8
.text:0000000000004ACF                 call    xalloc_die
.text:0000000000004ACF ; } // starts at 4AB0
.text:0000000000004ACF xnrealloc       endp
.text:0000000000004ACF
.text:0000000000004ACF ; ---------------------------------------------------------------------------
.text:0000000000004AD4                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0 ; Attributes: info_from_lumina
.text:0000000000004AE0
.text:0000000000004AE0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004AE0                 public x2nrealloc
.text:0000000000004AE0 x2nrealloc      proc near
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 test    rdi, rdi
.text:0000000000004AE3                 mov     r9, rdx
.text:0000000000004AE6                 mov     rcx, [rsi]
.text:0000000000004AE9                 jz      short loc_4B20
.text:0000000000004AEB                 xor     edx, edx
.text:0000000000004AED                 mov     rax, 5555555555555554h
.text:0000000000004AF7                 div     r9
.text:0000000000004AFA                 cmp     rax, rcx
.text:0000000000004AFD                 jbe     short loc_4B3B
.text:0000000000004AFF                 mov     rax, rcx
.text:0000000000004B02                 shr     rax, 1
.text:0000000000004B05                 lea     rcx, [rax+rcx+1]
.text:0000000000004B0A
.text:0000000000004B0A loc_4B0A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004B0A                 mov     [rsi], rcx
.text:0000000000004B0D                 imul    rcx, r9
.text:0000000000004B11                 mov     rsi, rcx
.text:0000000000004B14                 jmp     xrealloc
.text:0000000000004B14 ; ---------------------------------------------------------------------------
.text:0000000000004B19                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004B20                 test    rcx, rcx
.text:0000000000004B23                 jz      short loc_4B48
.text:0000000000004B25
.text:0000000000004B25 loc_4B25:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004B25                 mov     rax, rcx
.text:0000000000004B28                 mul     r9
.text:0000000000004B2B                 seto    dl
.text:0000000000004B2E                 test    rax, rax
.text:0000000000004B31                 movzx   edx, dl
.text:0000000000004B34                 js      short loc_4B3B
.text:0000000000004B36                 test    rdx, rdx
.text:0000000000004B39                 jz      short loc_4B0A
.text:0000000000004B3B
.text:0000000000004B3B loc_4B3B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004B3B                                         ; x2nrealloc+54↑j
.text:0000000000004B3B                 sub     rsp, 8
.text:0000000000004B3F                 call    xalloc_die
.text:0000000000004B3F ; ---------------------------------------------------------------------------
.text:0000000000004B44                 align 8
.text:0000000000004B48
.text:0000000000004B48 loc_4B48:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004B48                 xor     edx, edx
.text:0000000000004B4A                 mov     eax, 80h
.text:0000000000004B4F                 xor     r8d, r8d
.text:0000000000004B52                 div     r9
.text:0000000000004B55                 test    rax, rax
.text:0000000000004B58                 setz    r8b
.text:0000000000004B5C                 lea     rcx, [r8+rax]
.text:0000000000004B60                 jmp     short loc_4B25
.text:0000000000004B60 ; } // starts at 4AE0
.text:0000000000004B60 x2nrealloc      endp
.text:0000000000004B60
.text:0000000000004B60 ; ---------------------------------------------------------------------------
.text:0000000000004B62                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004B70                 public x2realloc
.text:0000000000004B70 x2realloc       proc near
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 test    rdi, rdi
.text:0000000000004B73                 mov     rax, [rsi]
.text:0000000000004B76                 jz      short loc_4BA0
.text:0000000000004B78                 mov     rdx, 5555555555555553h
.text:0000000000004B82                 cmp     rax, rdx
.text:0000000000004B85                 ja      short loc_4BB1
.text:0000000000004B87                 mov     rdx, rax
.text:0000000000004B8A                 shr     rdx, 1
.text:0000000000004B8D                 lea     rax, [rdx+rax+1]
.text:0000000000004B92
.text:0000000000004B92 loc_4B92:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004B92                 mov     [rsi], rax
.text:0000000000004B95                 mov     rsi, rax
.text:0000000000004B98                 jmp     xrealloc
.text:0000000000004B98 ; ---------------------------------------------------------------------------
.text:0000000000004B9D                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004BA0                 test    rax, rax
.text:0000000000004BA3                 mov     edx, 80h
.text:0000000000004BA8                 cmovz   rax, rdx
.text:0000000000004BAC                 test    rax, rax
.text:0000000000004BAF                 jns     short loc_4B92
.text:0000000000004BB1
.text:0000000000004BB1 loc_4BB1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004BB1                 sub     rsp, 8
.text:0000000000004BB5                 call    xalloc_die
.text:0000000000004BB5 ; } // starts at 4B70
.text:0000000000004BB5 x2realloc       endp
.text:0000000000004BB5
.text:0000000000004BB5 ; ---------------------------------------------------------------------------
.text:0000000000004BBA                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BC0
.text:0000000000004BC0
.text:0000000000004BC0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004BC0                 public xzalloc
.text:0000000000004BC0 xzalloc         proc near
.text:0000000000004BC0 ; __unwind {
.text:0000000000004BC0                 push    rbx
.text:0000000000004BC1                 mov     rbx, rdi
.text:0000000000004BC4                 call    xmalloc
.text:0000000000004BC9                 mov     rdx, rbx        ; n
.text:0000000000004BCC                 xor     esi, esi        ; c
.text:0000000000004BCE                 mov     rdi, rax        ; s
.text:0000000000004BD1                 pop     rbx
.text:0000000000004BD2                 jmp     _memset
.text:0000000000004BD2 ; } // starts at 4BC0
.text:0000000000004BD2 xzalloc         endp
.text:0000000000004BD2
.text:0000000000004BD2 ; ---------------------------------------------------------------------------
.text:0000000000004BD7                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0 ; Attributes: info_from_lumina
.text:0000000000004BE0
.text:0000000000004BE0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004BE0                 public xcalloc
.text:0000000000004BE0 xcalloc         proc near
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 mov     rax, rdi
.text:0000000000004BE3                 sub     rsp, 8
.text:0000000000004BE7                 mul     rsi
.text:0000000000004BEA                 seto    dl
.text:0000000000004BED                 test    rax, rax
.text:0000000000004BF0                 js      short loc_4C09
.text:0000000000004BF2                 movzx   edx, dl
.text:0000000000004BF5                 test    rdx, rdx
.text:0000000000004BF8                 jnz     short loc_4C09
.text:0000000000004BFA                 call    _calloc
.text:0000000000004BFF                 test    rax, rax
.text:0000000000004C02                 jz      short loc_4C09
.text:0000000000004C04                 add     rsp, 8
.text:0000000000004C08                 retn
.text:0000000000004C09 ; ---------------------------------------------------------------------------
.text:0000000000004C09
.text:0000000000004C09 loc_4C09:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004C09                                         ; xcalloc+18↑j ...
.text:0000000000004C09                 call    xalloc_die
.text:0000000000004C09 ; } // starts at 4BE0
.text:0000000000004C09 xcalloc         endp
.text:0000000000004C09
.text:0000000000004C09 ; ---------------------------------------------------------------------------
.text:0000000000004C0E                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004C10                 public xmemdup
.text:0000000000004C10 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004C10                                         ; xstrdup+11↓j
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 push    rbp
.text:0000000000004C11                 push    rbx
.text:0000000000004C12                 mov     rbp, rdi
.text:0000000000004C15                 mov     rdi, rsi
.text:0000000000004C18                 mov     rbx, rsi
.text:0000000000004C1B                 sub     rsp, 8
.text:0000000000004C1F                 call    xmalloc
.text:0000000000004C24                 add     rsp, 8
.text:0000000000004C28                 mov     rdx, rbx        ; n
.text:0000000000004C2B                 mov     rsi, rbp        ; src
.text:0000000000004C2E                 pop     rbx
.text:0000000000004C2F                 pop     rbp
.text:0000000000004C30                 mov     rdi, rax        ; dest
.text:0000000000004C33                 jmp     _memcpy
.text:0000000000004C33 ; } // starts at 4C10
.text:0000000000004C33 xmemdup         endp
.text:0000000000004C33
.text:0000000000004C33 ; ---------------------------------------------------------------------------
.text:0000000000004C38                 align 20h
.text:0000000000004C40
.text:0000000000004C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C40
.text:0000000000004C40
.text:0000000000004C40 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004C40                 public xstrdup
.text:0000000000004C40 xstrdup         proc near
.text:0000000000004C40 ; __unwind {
.text:0000000000004C40                 push    rbx
.text:0000000000004C41                 mov     rbx, rdi
.text:0000000000004C44                 call    _strlen
.text:0000000000004C49                 mov     rdi, rbx        ; src
.text:0000000000004C4C                 lea     rsi, [rax+1]    ; n
.text:0000000000004C50                 pop     rbx
.text:0000000000004C51                 jmp     short xmemdup
.text:0000000000004C51 ; } // starts at 4C40
.text:0000000000004C51 xstrdup         endp
.text:0000000000004C51
.text:0000000000004C51 ; ---------------------------------------------------------------------------
.text:0000000000004C53                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60 ; Attributes: noreturn info_from_lumina
.text:0000000000004C60
.text:0000000000004C60 ; void __cdecl xalloc_die()
.text:0000000000004C60                 public xalloc_die
.text:0000000000004C60 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3C36↑p
.text:0000000000004C60                                         ; xmalloc:loc_4A25↑p ...
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004C67                 sub     rsp, 8
.text:0000000000004C6B                 mov     edx, 5          ; category
.text:0000000000004C70                 xor     edi, edi        ; domainname
.text:0000000000004C72                 call    _dcgettext
.text:0000000000004C77                 mov     edi, cs:exit_failure ; status
.text:0000000000004C7D                 lea     rdx, format+4   ; format
.text:0000000000004C84                 mov     rcx, rax
.text:0000000000004C87                 xor     esi, esi        ; errnum
.text:0000000000004C89                 xor     eax, eax
.text:0000000000004C8B                 call    _error
.text:0000000000004C90                 call    _abort
.text:0000000000004C90 ; } // starts at 4C60
.text:0000000000004C90 xalloc_die      endp
.text:0000000000004C90
.text:0000000000004C90 ; ---------------------------------------------------------------------------
.text:0000000000004C95                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0                 public xnumtoimax
.text:0000000000004CA0 xnumtoimax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000004CA0
.text:0000000000004CA0 var_48          = qword ptr -48h
.text:0000000000004CA0 var_40          = qword ptr -40h
.text:0000000000004CA0 arg_0           = dword ptr  8
.text:0000000000004CA0
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 push    r15
.text:0000000000004CA2                 push    r14
.text:0000000000004CA4                 mov     r15, rcx
.text:0000000000004CA7                 push    r13
.text:0000000000004CA9                 push    r12
.text:0000000000004CAB                 mov     r14, rdx
.text:0000000000004CAE                 push    rbp
.text:0000000000004CAF                 push    rbx
.text:0000000000004CB0                 mov     edx, esi
.text:0000000000004CB2                 xor     esi, esi
.text:0000000000004CB4                 mov     r12, rdi
.text:0000000000004CB7                 mov     r13, r9
.text:0000000000004CBA                 sub     rsp, 18h
.text:0000000000004CBE                 mov     rcx, rsp
.text:0000000000004CC1                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000004CC5                 mov     rax, fs:28h
.text:0000000000004CCE                 mov     [rsp+48h+var_40], rax
.text:0000000000004CD3                 xor     eax, eax
.text:0000000000004CD5                 call    xstrtoimax
.text:0000000000004CDA                 test    eax, eax
.text:0000000000004CDC                 jnz     loc_4D70
.text:0000000000004CE2                 mov     rbp, [rsp+48h+var_48]
.text:0000000000004CE6                 cmp     rbp, r14
.text:0000000000004CE9                 jl      short loc_4CF0
.text:0000000000004CEB                 cmp     rbp, r15
.text:0000000000004CEE                 jle     short loc_4D46
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: xnumtoimax+49↑j
.text:0000000000004CF0                 call    ___errno_location
.text:0000000000004CF5                 cmp     rbp, 3FFFFFFFh
.text:0000000000004CFC                 mov     r14, rax
.text:0000000000004CFF                 jle     loc_4D90
.text:0000000000004D05
.text:0000000000004D05 loc_4D05:                               ; CODE XREF: xnumtoimax+DD↓j
.text:0000000000004D05                 mov     dword ptr [r14], 4Bh ; 'K'
.text:0000000000004D0C
.text:0000000000004D0C loc_4D0C:                               ; CODE XREF: xnumtoimax+E2↓j
.text:0000000000004D0C                                         ; xnumtoimax+EA↓j ...
.text:0000000000004D0C                 mov     rdi, r12
.text:0000000000004D0F                 call    quote
.text:0000000000004D14                 mov     esi, [r14]
.text:0000000000004D17                 mov     r8, rax
.text:0000000000004D1A                 mov     eax, 0
.text:0000000000004D1F                 lea     rdx, format     ; "%s: %s"
.text:0000000000004D26                 mov     rcx, r13
.text:0000000000004D29                 cmp     esi, 16h
.text:0000000000004D2C                 cmovz   esi, eax        ; errnum
.text:0000000000004D2F                 test    ebx, ebx
.text:0000000000004D31                 mov     eax, 1
.text:0000000000004D36                 cmovz   ebx, eax
.text:0000000000004D39                 xor     eax, eax
.text:0000000000004D3B                 mov     edi, ebx        ; status
.text:0000000000004D3D                 call    _error
.text:0000000000004D42                 mov     rbp, [rsp+48h+var_48]
.text:0000000000004D46
.text:0000000000004D46 loc_4D46:                               ; CODE XREF: xnumtoimax+4E↑j
.text:0000000000004D46                 mov     rdx, [rsp+48h+var_40]
.text:0000000000004D4B                 xor     rdx, fs:28h
.text:0000000000004D54                 mov     rax, rbp
.text:0000000000004D57                 jnz     short loc_4DAC
.text:0000000000004D59                 add     rsp, 18h
.text:0000000000004D5D                 pop     rbx
.text:0000000000004D5E                 pop     rbp
.text:0000000000004D5F                 pop     r12
.text:0000000000004D61                 pop     r13
.text:0000000000004D63                 pop     r14
.text:0000000000004D65                 pop     r15
.text:0000000000004D67                 retn
.text:0000000000004D67 ; ---------------------------------------------------------------------------
.text:0000000000004D68                 align 10h
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: xnumtoimax+3C↑j
.text:0000000000004D70                 mov     ebp, eax
.text:0000000000004D72                 call    ___errno_location
.text:0000000000004D77                 cmp     ebp, 1
.text:0000000000004D7A                 mov     r14, rax
.text:0000000000004D7D                 jz      short loc_4D05
.text:0000000000004D7F                 cmp     ebp, 3
.text:0000000000004D82                 jnz     short loc_4D0C
.text:0000000000004D84                 mov     dword ptr [rax], 0
.text:0000000000004D8A                 jmp     short loc_4D0C
.text:0000000000004D8A ; ---------------------------------------------------------------------------
.text:0000000000004D8C                 align 10h
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: xnumtoimax+5F↑j
.text:0000000000004D90                 cmp     rbp, 0FFFFFFFFBFFFFFFFh
.text:0000000000004D97                 mov     eax, 22h ; '"'
.text:0000000000004D9C                 mov     edx, 4Bh ; 'K'
.text:0000000000004DA1                 cmovle  eax, edx
.text:0000000000004DA4                 mov     [r14], eax
.text:0000000000004DA7                 jmp     loc_4D0C
.text:0000000000004DAC ; ---------------------------------------------------------------------------
.text:0000000000004DAC
.text:0000000000004DAC loc_4DAC:                               ; CODE XREF: xnumtoimax+B7↑j
.text:0000000000004DAC                 call    ___stack_chk_fail
.text:0000000000004DAC ; } // starts at 4CA0
.text:0000000000004DAC xnumtoimax      endp
.text:0000000000004DAC
.text:0000000000004DAC ; ---------------------------------------------------------------------------
.text:0000000000004DB1                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DC0
.text:0000000000004DC0 ; Attributes: info_from_lumina
.text:0000000000004DC0
.text:0000000000004DC0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000004DC0                 public xdectoumax
.text:0000000000004DC0 xdectoumax      proc near               ; CODE XREF: main+205↑p
.text:0000000000004DC0                                         ; main+280↑p
.text:0000000000004DC0 ; __unwind {
.text:0000000000004DC0                 sub     rsp, 10h
.text:0000000000004DC4                 push    r9
.text:0000000000004DC6                 mov     r9, r8
.text:0000000000004DC9                 mov     r8, rcx
.text:0000000000004DCC                 mov     rcx, rdx
.text:0000000000004DCF                 mov     rdx, rsi
.text:0000000000004DD2                 mov     esi, 0Ah
.text:0000000000004DD7                 call    xnumtoimax
.text:0000000000004DDC                 add     rsp, 18h
.text:0000000000004DE0                 retn
.text:0000000000004DE0 ; } // starts at 4DC0
.text:0000000000004DE0 xdectoumax      endp
.text:0000000000004DE0
.text:0000000000004DE0 ; ---------------------------------------------------------------------------
.text:0000000000004DE1                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0 ; __int64 __fastcall xstrtoimax(char *nptr)
.text:0000000000004DF0                 public xstrtoimax
.text:0000000000004DF0 xstrtoimax      proc near               ; CODE XREF: xnumtoimax+35↑p
.text:0000000000004DF0
.text:0000000000004DF0 var_50          = qword ptr -50h
.text:0000000000004DF0 endptr          = qword ptr -48h
.text:0000000000004DF0 var_40          = qword ptr -40h
.text:0000000000004DF0
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 push    r15
.text:0000000000004DF2                 push    r14
.text:0000000000004DF4                 push    r13
.text:0000000000004DF6                 push    r12
.text:0000000000004DF8                 push    rbp
.text:0000000000004DF9                 push    rbx
.text:0000000000004DFA                 sub     rsp, 28h
.text:0000000000004DFE                 mov     rax, fs:28h
.text:0000000000004E07                 mov     [rsp+58h+var_40], rax
.text:0000000000004E0C                 xor     eax, eax
.text:0000000000004E0E                 cmp     edx, 24h ; '$'
.text:0000000000004E11                 ja      loc_547F
.text:0000000000004E17                 lea     rax, [rsp+58h+endptr]
.text:0000000000004E1C                 test    rsi, rsi
.text:0000000000004E1F                 mov     rbx, rsi
.text:0000000000004E22                 mov     r12, rdi
.text:0000000000004E25                 mov     ebp, edx
.text:0000000000004E27                 mov     r14, rcx
.text:0000000000004E2A                 cmovz   rbx, rax
.text:0000000000004E2E                 mov     r15, r8
.text:0000000000004E31                 call    ___errno_location
.text:0000000000004E36                 xor     ecx, ecx        ; group
.text:0000000000004E38                 mov     edx, ebp        ; base
.text:0000000000004E3A                 mov     dword ptr [rax], 0
.text:0000000000004E40                 mov     rsi, rbx        ; endptr
.text:0000000000004E43                 mov     rdi, r12        ; nptr
.text:0000000000004E46                 mov     r13, rax
.text:0000000000004E49                 call    ___strtol_internal
.text:0000000000004E4E                 mov     rcx, [rbx]
.text:0000000000004E51                 mov     rbp, rax
.text:0000000000004E54                 cmp     rcx, r12
.text:0000000000004E57                 jz      short loc_4EB8
.text:0000000000004E59                 mov     eax, [r13+0]
.text:0000000000004E5D                 test    eax, eax
.text:0000000000004E5F                 jnz     short loc_4EA0
.text:0000000000004E61                 xor     r12d, r12d
.text:0000000000004E64
.text:0000000000004E64 loc_4E64:                               ; CODE XREF: xstrtoimax+C1↓j
.text:0000000000004E64                 test    r15, r15
.text:0000000000004E67                 jz      short loc_4E76
.text:0000000000004E69                 movzx   r13d, byte ptr [rcx]
.text:0000000000004E6D                 test    r13b, r13b
.text:0000000000004E70                 jnz     loc_4EF3
.text:0000000000004E76
.text:0000000000004E76 loc_4E76:                               ; CODE XREF: xstrtoimax+77↑j
.text:0000000000004E76                                         ; xstrtoimax+226↓j
.text:0000000000004E76                 mov     [r14], rbp
.text:0000000000004E79
.text:0000000000004E79 loc_4E79:                               ; CODE XREF: xstrtoimax+B9↓j
.text:0000000000004E79                                         ; xstrtoimax+E3↓j ...
.text:0000000000004E79                 mov     rdi, [rsp+58h+var_40]
.text:0000000000004E7E                 xor     rdi, fs:28h
.text:0000000000004E87                 mov     eax, r12d
.text:0000000000004E8A                 jnz     loc_549E
.text:0000000000004E90                 add     rsp, 28h
.text:0000000000004E94                 pop     rbx
.text:0000000000004E95                 pop     rbp
.text:0000000000004E96                 pop     r12
.text:0000000000004E98                 pop     r13
.text:0000000000004E9A                 pop     r14
.text:0000000000004E9C                 pop     r15
.text:0000000000004E9E                 retn
.text:0000000000004E9E ; ---------------------------------------------------------------------------
.text:0000000000004E9F                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 loc_4EA0:                               ; CODE XREF: xstrtoimax+6F↑j
.text:0000000000004EA0                 cmp     eax, 22h ; '"'
.text:0000000000004EA3                 mov     r12d, 4
.text:0000000000004EA9                 jnz     short loc_4E79
.text:0000000000004EAB                 mov     r12d, 1
.text:0000000000004EB1                 jmp     short loc_4E64
.text:0000000000004EB1 ; ---------------------------------------------------------------------------
.text:0000000000004EB3                 align 8
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: xstrtoimax+67↑j
.text:0000000000004EB8                 test    r15, r15
.text:0000000000004EBB                 jz      loc_5350
.text:0000000000004EC1                 movzx   r13d, byte ptr [rcx]
.text:0000000000004EC5                 mov     [rsp+58h+var_50], rcx
.text:0000000000004ECA                 mov     r12d, 4
.text:0000000000004ED0                 test    r13b, r13b
.text:0000000000004ED3                 jz      short loc_4E79
.text:0000000000004ED5                 movsx   esi, r13b       ; c
.text:0000000000004ED9                 mov     rdi, r15        ; s
.text:0000000000004EDC                 call    _strchr
.text:0000000000004EE1                 test    rax, rax
.text:0000000000004EE4                 mov     rcx, [rsp+58h+var_50]
.text:0000000000004EE9                 jz      short loc_4E79
.text:0000000000004EEB                 mov     ebp, 1
.text:0000000000004EF0                 xor     r12d, r12d
.text:0000000000004EF3
.text:0000000000004EF3 loc_4EF3:                               ; CODE XREF: xstrtoimax+80↑j
.text:0000000000004EF3                 movsx   esi, r13b       ; c
.text:0000000000004EF7                 mov     rdi, r15        ; s
.text:0000000000004EFA                 mov     [rsp+58h+var_50], rcx
.text:0000000000004EFF                 call    _strchr
.text:0000000000004F04                 test    rax, rax
.text:0000000000004F07                 mov     rcx, [rsp+58h+var_50]
.text:0000000000004F0C                 jz      short def_4F9E  ; jumptable 0000000000004F9E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004F0E                 lea     eax, [r13-45h]
.text:0000000000004F12                 cmp     al, 2Fh ; '/'
.text:0000000000004F14                 ja      short loc_4F78
.text:0000000000004F16                 mov     rdx, 814400308945h
.text:0000000000004F20                 bt      rdx, rax
.text:0000000000004F24                 jnb     short loc_4F78
.text:0000000000004F26                 mov     esi, 30h ; '0'  ; c
.text:0000000000004F2B                 mov     rdi, r15        ; s
.text:0000000000004F2E                 mov     [rsp+58h+var_50], rcx
.text:0000000000004F33                 call    _strchr
.text:0000000000004F38                 test    rax, rax
.text:0000000000004F3B                 mov     rcx, [rsp+58h+var_50]
.text:0000000000004F40                 jz      short loc_4F78
.text:0000000000004F42                 movzx   eax, byte ptr [rcx+1]
.text:0000000000004F46                 cmp     al, 44h ; 'D'
.text:0000000000004F48                 jz      short loc_4F56
.text:0000000000004F4A                 cmp     al, 69h ; 'i'
.text:0000000000004F4C                 jz      loc_5438
.text:0000000000004F52                 cmp     al, 42h ; 'B'
.text:0000000000004F54                 jnz     short loc_4F78
.text:0000000000004F56
.text:0000000000004F56 loc_4F56:                               ; CODE XREF: xstrtoimax+158↑j
.text:0000000000004F56                 mov     edi, 2
.text:0000000000004F5B                 mov     eax, 3E8h
.text:0000000000004F60                 jmp     short loc_4F82
.text:0000000000004F60 ; ---------------------------------------------------------------------------
.text:0000000000004F62                 align 8
.text:0000000000004F68
.text:0000000000004F68 def_4F9E:                               ; CODE XREF: xstrtoimax+11C↑j
.text:0000000000004F68                                         ; xstrtoimax+19A↓j ...
.text:0000000000004F68                 mov     [r14], rbp      ; jumptable 0000000000004F9E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004F6B                 or      r12d, 2
.text:0000000000004F6F                 jmp     loc_4E79
.text:0000000000004F6F ; ---------------------------------------------------------------------------
.text:0000000000004F74                 align 8
.text:0000000000004F78
.text:0000000000004F78 loc_4F78:                               ; CODE XREF: xstrtoimax+124↑j
.text:0000000000004F78                                         ; xstrtoimax+134↑j ...
.text:0000000000004F78                 mov     edi, 1
.text:0000000000004F7D                 mov     eax, 400h
.text:0000000000004F82
.text:0000000000004F82 loc_4F82:                               ; CODE XREF: xstrtoimax+170↑j
.text:0000000000004F82                                         ; xstrtoimax+65B↓j
.text:0000000000004F82                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:0000000000004F86                 cmp     r13b, 35h
.text:0000000000004F8A                 ja      short def_4F9E  ; jumptable 0000000000004F9E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004F8C                 lea     rsi, jpt_4F9E
.text:0000000000004F93                 movzx   r13d, r13b
.text:0000000000004F97                 movsxd  rdx, ds:(jpt_4F9E - 6988h)[rsi+r13*4]
.text:0000000000004F9B                 add     rdx, rsi
.text:0000000000004F9E                 jmp     rdx             ; switch jump
.text:0000000000004FA0 ; ---------------------------------------------------------------------------
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000004FA0                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000004FA0                 mov     r8, 8000000000000000h ; jumptable 0000000000004F9E cases 77,109
.text:0000000000004FAA                 movsxd  rsi, eax
.text:0000000000004FAD                 mov     rax, r8
.text:0000000000004FB0                 cqo
.text:0000000000004FB2                 idiv    rsi
.text:0000000000004FB5                 cmp     rbp, rax
.text:0000000000004FB8                 mov     r9, rax
.text:0000000000004FBB                 jl      loc_5465
.text:0000000000004FC1                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:0000000000004FCB                 mov     rax, r10
.text:0000000000004FCE                 cqo
.text:0000000000004FD0                 idiv    rsi
.text:0000000000004FD3                 cmp     rbp, rax
.text:0000000000004FD6                 jg      loc_5472
.text:0000000000004FDC                 imul    rbp, rsi
.text:0000000000004FE0                 cmp     r9, rbp
.text:0000000000004FE3                 jg      loc_5465
.text:0000000000004FE9                 cmp     rax, rbp
.text:0000000000004FEC                 jl      loc_5472
.text:0000000000004FF2                 imul    rbp, rsi
.text:0000000000004FF6                 xor     eax, eax
.text:0000000000004FF8
.text:0000000000004FF8 loc_4FF8:                               ; CODE XREF: xstrtoimax+67D↓j
.text:0000000000004FF8                                         ; xstrtoimax+68A↓j
.text:0000000000004FF8                 or      r12d, eax
.text:0000000000004FFB                 nop     dword ptr [rax+rax+00h]
.text:0000000000005000
.text:0000000000005000 loc_5000:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005000                                         ; xstrtoimax+259↓j ...
.text:0000000000005000                 movsxd  rax, edi        ; jumptable 0000000000004F9E case 99
.text:0000000000005003                 add     rcx, rax
.text:0000000000005006                 mov     eax, r12d
.text:0000000000005009                 or      eax, 2
.text:000000000000500C                 mov     [rbx], rcx
.text:000000000000500F                 cmp     byte ptr [rcx], 0
.text:0000000000005012                 cmovnz  r12d, eax
.text:0000000000005016                 jmp     loc_4E76
.text:0000000000005016 ; ---------------------------------------------------------------------------
.text:000000000000501B                 align 20h
.text:0000000000005020
.text:0000000000005020 loc_5020:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005020                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005020                 mov     rax, 0C000000000000000h ; jumptable 0000000000004F9E case 119
.text:000000000000502A                 cmp     rbp, rax
.text:000000000000502D                 jl      loc_5360
.text:0000000000005033                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:000000000000503D                 cmp     rbp, rax
.text:0000000000005040                 jg      loc_5420
.text:0000000000005046                 add     rbp, rbp
.text:0000000000005049                 jmp     short loc_5000  ; jumptable 0000000000004F9E case 99
.text:0000000000005049 ; ---------------------------------------------------------------------------
.text:000000000000504B                 align 10h
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005050                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005050                 mov     rax, 0FFC0000000000000h ; jumptable 0000000000004F9E case 98
.text:000000000000505A                 cmp     rbp, rax
.text:000000000000505D                 jl      loc_5360
.text:0000000000005063                 mov     rax, 3FFFFFFFFFFFFFh
.text:000000000000506D                 cmp     rbp, rax
.text:0000000000005070                 jg      loc_5420
.text:0000000000005076                 shl     rbp, 9
.text:000000000000507A                 jmp     short loc_5000  ; jumptable 0000000000004F9E case 99
.text:000000000000507A ; ---------------------------------------------------------------------------
.text:000000000000507C                 align 20h
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005080                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005080                 movsxd  rsi, eax        ; jumptable 0000000000004F9E case 90
.text:0000000000005083                 mov     rax, 8000000000000000h
.text:000000000000508D                 mov     r8d, 7
.text:0000000000005093                 cqo
.text:0000000000005095                 xor     r11d, r11d
.text:0000000000005098                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000050A2                 idiv    rsi
.text:00000000000050A5                 mov     r10, rax
.text:00000000000050A8                 jmp     short loc_50CF
.text:00000000000050A8 ; ---------------------------------------------------------------------------
.text:00000000000050AA                 align 10h
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: xstrtoimax+2E2↓j
.text:00000000000050B0                 mov     rax, r9
.text:00000000000050B3                 cqo
.text:00000000000050B5                 idiv    rsi
.text:00000000000050B8                 cmp     rax, rbp
.text:00000000000050BB                 jl      loc_53A8
.text:00000000000050C1                 imul    rbp, rsi
.text:00000000000050C5
.text:00000000000050C5 loc_50C5:                               ; CODE XREF: xstrtoimax+2F4↓j
.text:00000000000050C5                                         ; xstrtoimax+5C8↓j
.text:00000000000050C5                 sub     r8d, 1
.text:00000000000050C9                 jz      loc_51F0
.text:00000000000050CF
.text:00000000000050CF loc_50CF:                               ; CODE XREF: xstrtoimax+2B8↑j
.text:00000000000050CF                 cmp     r10, rbp
.text:00000000000050D2                 jle     short loc_50B0
.text:00000000000050D4                 mov     r11d, 1
.text:00000000000050DA                 mov     rbp, 8000000000000000h
.text:00000000000050E4                 jmp     short loc_50C5
.text:00000000000050E4 ; ---------------------------------------------------------------------------
.text:00000000000050E6                 align 10h
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000050F0                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:00000000000050F0                 movsxd  rsi, eax        ; jumptable 0000000000004F9E case 89
.text:00000000000050F3                 mov     rax, 8000000000000000h
.text:00000000000050FD                 mov     r8d, 8
.text:0000000000005103                 cqo
.text:0000000000005105                 xor     r11d, r11d
.text:0000000000005108                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005112                 idiv    rsi
.text:0000000000005115                 mov     r10, rax
.text:0000000000005118                 jmp     short loc_513F
.text:0000000000005118 ; ---------------------------------------------------------------------------
.text:000000000000511A                 align 20h
.text:0000000000005120
.text:0000000000005120 loc_5120:                               ; CODE XREF: xstrtoimax+352↓j
.text:0000000000005120                 mov     rax, r9
.text:0000000000005123                 cqo
.text:0000000000005125                 idiv    rsi
.text:0000000000005128                 cmp     rax, rbp
.text:000000000000512B                 jl      loc_5378
.text:0000000000005131                 imul    rbp, rsi
.text:0000000000005135
.text:0000000000005135 loc_5135:                               ; CODE XREF: xstrtoimax+364↓j
.text:0000000000005135                                         ; xstrtoimax+598↓j
.text:0000000000005135                 sub     r8d, 1
.text:0000000000005139                 jz      loc_51F0
.text:000000000000513F
.text:000000000000513F loc_513F:                               ; CODE XREF: xstrtoimax+328↑j
.text:000000000000513F                 cmp     r10, rbp
.text:0000000000005142                 jle     short loc_5120
.text:0000000000005144                 mov     r11d, 1
.text:000000000000514A                 mov     rbp, 8000000000000000h
.text:0000000000005154                 jmp     short loc_5135
.text:0000000000005154 ; ---------------------------------------------------------------------------
.text:0000000000005156                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005160                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005160                 mov     r8, 8000000000000000h ; jumptable 0000000000004F9E cases 75,107
.text:000000000000516A                 movsxd  rsi, eax
.text:000000000000516D                 mov     rax, r8
.text:0000000000005170                 cqo
.text:0000000000005172                 idiv    rsi
.text:0000000000005175                 cmp     rbp, rax
.text:0000000000005178                 jl      loc_5360
.text:000000000000517E                 sub     r8, 1
.text:0000000000005182                 mov     rax, r8
.text:0000000000005185                 cqo
.text:0000000000005187                 idiv    rsi
.text:000000000000518A                 cmp     rbp, rax
.text:000000000000518D                 jg      loc_5420
.text:0000000000005193                 imul    rbp, rsi
.text:0000000000005197                 jmp     loc_5000        ; jumptable 0000000000004F9E case 99
.text:0000000000005197 ; ---------------------------------------------------------------------------
.text:000000000000519C                 align 20h
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000051A0                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:00000000000051A0                 movsxd  rsi, eax        ; jumptable 0000000000004F9E cases 71,103
.text:00000000000051A3                 mov     rax, 8000000000000000h
.text:00000000000051AD                 mov     r8d, 3
.text:00000000000051B3                 cqo
.text:00000000000051B5                 xor     r11d, r11d
.text:00000000000051B8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000051C2                 idiv    rsi
.text:00000000000051C5                 mov     r10, rax
.text:00000000000051C8
.text:00000000000051C8 loc_51C8:                               ; CODE XREF: xstrtoimax+3FA↓j
.text:00000000000051C8                 cmp     r10, rbp
.text:00000000000051CB                 jg      loc_53C0
.text:00000000000051D1                 mov     rax, r9
.text:00000000000051D4                 cqo
.text:00000000000051D6                 idiv    rsi
.text:00000000000051D9                 cmp     rax, rbp
.text:00000000000051DC                 jl      loc_5450
.text:00000000000051E2                 imul    rbp, rsi
.text:00000000000051E6
.text:00000000000051E6 loc_51E6:                               ; CODE XREF: xstrtoimax+5E0↓j
.text:00000000000051E6                                         ; xstrtoimax+670↓j
.text:00000000000051E6                 sub     r8d, 1
.text:00000000000051EA                 jnz     short loc_51C8
.text:00000000000051EC                 nop     dword ptr [rax+00h]
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: xstrtoimax+2D9↑j
.text:00000000000051F0                                         ; xstrtoimax+349↑j ...
.text:00000000000051F0                 or      r12d, r11d
.text:00000000000051F3                 jmp     loc_5000        ; jumptable 0000000000004F9E case 99
.text:00000000000051F3 ; ---------------------------------------------------------------------------
.text:00000000000051F8                 align 20h
.text:0000000000005200
.text:0000000000005200 loc_5200:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005200                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005200                 movsxd  rsi, eax        ; jumptable 0000000000004F9E case 69
.text:0000000000005203                 mov     rax, 8000000000000000h
.text:000000000000520D                 mov     r8d, 6
.text:0000000000005213                 cqo
.text:0000000000005215                 xor     r11d, r11d
.text:0000000000005218                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005222                 idiv    rsi
.text:0000000000005225                 mov     r10, rax
.text:0000000000005228                 jmp     short loc_524B
.text:0000000000005228 ; ---------------------------------------------------------------------------
.text:000000000000522A                 align 10h
.text:0000000000005230
.text:0000000000005230 loc_5230:                               ; CODE XREF: xstrtoimax+45E↓j
.text:0000000000005230                 mov     rax, r9
.text:0000000000005233                 cqo
.text:0000000000005235                 idiv    rsi
.text:0000000000005238                 cmp     rax, rbp
.text:000000000000523B                 jl      loc_53D8
.text:0000000000005241                 imul    rbp, rsi
.text:0000000000005245
.text:0000000000005245 loc_5245:                               ; CODE XREF: xstrtoimax+470↓j
.text:0000000000005245                                         ; xstrtoimax+5F8↓j
.text:0000000000005245                 sub     r8d, 1
.text:0000000000005249                 jz      short loc_51F0
.text:000000000000524B
.text:000000000000524B loc_524B:                               ; CODE XREF: xstrtoimax+438↑j
.text:000000000000524B                 cmp     r10, rbp
.text:000000000000524E                 jle     short loc_5230
.text:0000000000005250                 mov     r11d, 1
.text:0000000000005256                 mov     rbp, 8000000000000000h
.text:0000000000005260                 jmp     short loc_5245
.text:0000000000005260 ; ---------------------------------------------------------------------------
.text:0000000000005262                 align 8
.text:0000000000005268
.text:0000000000005268 loc_5268:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005268                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005268                 movsxd  rsi, eax        ; jumptable 0000000000004F9E case 80
.text:000000000000526B                 mov     rax, 8000000000000000h
.text:0000000000005275                 mov     r8d, 5
.text:000000000000527B                 cqo
.text:000000000000527D                 xor     r11d, r11d
.text:0000000000005280                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000528A                 idiv    rsi
.text:000000000000528D                 mov     r10, rax
.text:0000000000005290                 jmp     short loc_52B7
.text:0000000000005290 ; ---------------------------------------------------------------------------
.text:0000000000005292                 align 8
.text:0000000000005298
.text:0000000000005298 loc_5298:                               ; CODE XREF: xstrtoimax+4CA↓j
.text:0000000000005298                 mov     rax, r9
.text:000000000000529B                 cqo
.text:000000000000529D                 idiv    rsi
.text:00000000000052A0                 cmp     rax, rbp
.text:00000000000052A3                 jl      loc_53F0
.text:00000000000052A9                 imul    rbp, rsi
.text:00000000000052AD
.text:00000000000052AD loc_52AD:                               ; CODE XREF: xstrtoimax+4DC↓j
.text:00000000000052AD                                         ; xstrtoimax+610↓j
.text:00000000000052AD                 sub     r8d, 1
.text:00000000000052B1                 jz      loc_51F0
.text:00000000000052B7
.text:00000000000052B7 loc_52B7:                               ; CODE XREF: xstrtoimax+4A0↑j
.text:00000000000052B7                 cmp     r10, rbp
.text:00000000000052BA                 jle     short loc_5298
.text:00000000000052BC                 mov     r11d, 1
.text:00000000000052C2                 mov     rbp, 8000000000000000h
.text:00000000000052CC                 jmp     short loc_52AD
.text:00000000000052CC ; ---------------------------------------------------------------------------
.text:00000000000052CE                 align 10h
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000052D0                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:00000000000052D0                 mov     rax, 0FFE0000000000000h ; jumptable 0000000000004F9E case 66
.text:00000000000052DA                 cmp     rbp, rax
.text:00000000000052DD                 jl      loc_5360
.text:00000000000052E3                 mov     rax, 1FFFFFFFFFFFFFh
.text:00000000000052ED                 cmp     rbp, rax
.text:00000000000052F0                 jg      loc_5420
.text:00000000000052F6                 shl     rbp, 0Ah
.text:00000000000052FA                 jmp     loc_5000        ; jumptable 0000000000004F9E case 99
.text:00000000000052FA ; ---------------------------------------------------------------------------
.text:00000000000052FF                 align 20h
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005300                                         ; DATA XREF: .rodata:jpt_4F9E↓o
.text:0000000000005300                 movsxd  rsi, eax        ; jumptable 0000000000004F9E cases 84,116
.text:0000000000005303                 mov     rax, 8000000000000000h
.text:000000000000530D                 mov     r8d, 4
.text:0000000000005313                 cqo
.text:0000000000005315                 xor     r11d, r11d
.text:0000000000005318                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005322                 idiv    rsi
.text:0000000000005325                 mov     r10, rax
.text:0000000000005328
.text:0000000000005328 loc_5328:                               ; CODE XREF: xstrtoimax+556↓j
.text:0000000000005328                 cmp     r10, rbp
.text:000000000000532B                 jg      short loc_5390
.text:000000000000532D                 mov     rax, r9
.text:0000000000005330                 cqo
.text:0000000000005332                 idiv    rsi
.text:0000000000005335                 cmp     rax, rbp
.text:0000000000005338                 jl      loc_5408
.text:000000000000533E                 imul    rbp, rsi
.text:0000000000005342
.text:0000000000005342 loc_5342:                               ; CODE XREF: xstrtoimax+5B0↓j
.text:0000000000005342                                         ; xstrtoimax+628↓j
.text:0000000000005342                 sub     r8d, 1
.text:0000000000005346                 jnz     short loc_5328
.text:0000000000005348                 jmp     loc_51F0
.text:0000000000005348 ; ---------------------------------------------------------------------------
.text:000000000000534D                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: xstrtoimax+CB↑j
.text:0000000000005350                 mov     r12d, 4
.text:0000000000005356                 jmp     loc_4E79
.text:0000000000005356 ; ---------------------------------------------------------------------------
.text:000000000000535B                 align 20h
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: xstrtoimax+23D↑j
.text:0000000000005360                                         ; xstrtoimax+26D↑j ...
.text:0000000000005360                 mov     r12d, 1
.text:0000000000005366                 mov     rbp, 8000000000000000h
.text:0000000000005370                 jmp     loc_5000        ; jumptable 0000000000004F9E case 99
.text:0000000000005370 ; ---------------------------------------------------------------------------
.text:0000000000005375                 align 8
.text:0000000000005378
.text:0000000000005378 loc_5378:                               ; CODE XREF: xstrtoimax+33B↑j
.text:0000000000005378                 mov     r11d, 1
.text:000000000000537E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005388                 jmp     loc_5135
.text:0000000000005388 ; ---------------------------------------------------------------------------
.text:000000000000538D                 align 10h
.text:0000000000005390
.text:0000000000005390 loc_5390:                               ; CODE XREF: xstrtoimax+53B↑j
.text:0000000000005390                 mov     r11d, 1
.text:0000000000005396                 mov     rbp, 8000000000000000h
.text:00000000000053A0                 jmp     short loc_5342
.text:00000000000053A0 ; ---------------------------------------------------------------------------
.text:00000000000053A2                 align 8
.text:00000000000053A8
.text:00000000000053A8 loc_53A8:                               ; CODE XREF: xstrtoimax+2CB↑j
.text:00000000000053A8                 mov     r11d, 1
.text:00000000000053AE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000053B8                 jmp     loc_50C5
.text:00000000000053B8 ; ---------------------------------------------------------------------------
.text:00000000000053BD                 align 20h
.text:00000000000053C0
.text:00000000000053C0 loc_53C0:                               ; CODE XREF: xstrtoimax+3DB↑j
.text:00000000000053C0                 mov     r11d, 1
.text:00000000000053C6                 mov     rbp, 8000000000000000h
.text:00000000000053D0                 jmp     loc_51E6
.text:00000000000053D0 ; ---------------------------------------------------------------------------
.text:00000000000053D5                 align 8
.text:00000000000053D8
.text:00000000000053D8 loc_53D8:                               ; CODE XREF: xstrtoimax+44B↑j
.text:00000000000053D8                 mov     r11d, 1
.text:00000000000053DE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000053E8                 jmp     loc_5245
.text:00000000000053E8 ; ---------------------------------------------------------------------------
.text:00000000000053ED                 align 10h
.text:00000000000053F0
.text:00000000000053F0 loc_53F0:                               ; CODE XREF: xstrtoimax+4B3↑j
.text:00000000000053F0                 mov     r11d, 1
.text:00000000000053F6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005400                 jmp     loc_52AD
.text:0000000000005400 ; ---------------------------------------------------------------------------
.text:0000000000005405                 align 8
.text:0000000000005408
.text:0000000000005408 loc_5408:                               ; CODE XREF: xstrtoimax+548↑j
.text:0000000000005408                 mov     r11d, 1
.text:000000000000540E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005418                 jmp     loc_5342
.text:0000000000005418 ; ---------------------------------------------------------------------------
.text:000000000000541D                 align 20h
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: xstrtoimax+250↑j
.text:0000000000005420                                         ; xstrtoimax+280↑j ...
.text:0000000000005420                 mov     r12d, 1
.text:0000000000005426                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005430                 jmp     loc_5000        ; jumptable 0000000000004F9E case 99
.text:0000000000005430 ; ---------------------------------------------------------------------------
.text:0000000000005435                 align 8
.text:0000000000005438
.text:0000000000005438 loc_5438:                               ; CODE XREF: xstrtoimax+15C↑j
.text:0000000000005438                 xor     edi, edi
.text:000000000000543A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000543E                 mov     eax, 400h
.text:0000000000005443                 setz    dil
.text:0000000000005447                 lea     edi, [rdi+rdi+1]
.text:000000000000544B                 jmp     loc_4F82
.text:0000000000005450 ; ---------------------------------------------------------------------------
.text:0000000000005450
.text:0000000000005450 loc_5450:                               ; CODE XREF: xstrtoimax+3EC↑j
.text:0000000000005450                 mov     r11d, 1
.text:0000000000005456                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005460                 jmp     loc_51E6
.text:0000000000005465 ; ---------------------------------------------------------------------------
.text:0000000000005465
.text:0000000000005465 loc_5465:                               ; CODE XREF: xstrtoimax+1CB↑j
.text:0000000000005465                                         ; xstrtoimax+1F3↑j
.text:0000000000005465                 mov     eax, 1
.text:000000000000546A                 mov     rbp, r8
.text:000000000000546D                 jmp     loc_4FF8
.text:0000000000005472 ; ---------------------------------------------------------------------------
.text:0000000000005472
.text:0000000000005472 loc_5472:                               ; CODE XREF: xstrtoimax+1E6↑j
.text:0000000000005472                                         ; xstrtoimax+1FC↑j
.text:0000000000005472                 mov     eax, 1
.text:0000000000005477                 mov     rbp, r10
.text:000000000000547A                 jmp     loc_4FF8
.text:000000000000547F ; ---------------------------------------------------------------------------
.text:000000000000547F
.text:000000000000547F loc_547F:                               ; CODE XREF: xstrtoimax+21↑j
.text:000000000000547F                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoimax"
.text:0000000000005486                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000548D                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000005494                 mov     edx, 54h ; 'T'  ; line
.text:0000000000005499                 call    ___assert_fail
.text:000000000000549E ; ---------------------------------------------------------------------------
.text:000000000000549E
.text:000000000000549E loc_549E:                               ; CODE XREF: xstrtoimax+9A↑j
.text:000000000000549E                 call    ___stack_chk_fail
.text:000000000000549E ; } // starts at 4DF0
.text:000000000000549E xstrtoimax      endp
.text:000000000000549E
.text:000000000000549E ; ---------------------------------------------------------------------------
.text:00000000000054A3                 align 10h
.text:00000000000054B0
.text:00000000000054B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054B0
.text:00000000000054B0 ; Attributes: info_from_lumina
.text:00000000000054B0
.text:00000000000054B0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000054B0                 public rpl_mbrtowc
.text:00000000000054B0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000054B0
.text:00000000000054B0 pwc             = dword ptr -34h
.text:00000000000054B0 var_30          = qword ptr -30h
.text:00000000000054B0
.text:00000000000054B0 ; __unwind {
.text:00000000000054B0                 push    r13
.text:00000000000054B2                 push    r12
.text:00000000000054B4                 mov     r13, rsi
.text:00000000000054B7                 push    rbp
.text:00000000000054B8                 push    rbx
.text:00000000000054B9                 mov     rbx, rdi
.text:00000000000054BC                 mov     r12, rdx
.text:00000000000054BF                 sub     rsp, 18h
.text:00000000000054C3                 mov     rax, fs:28h
.text:00000000000054CC                 mov     [rsp+38h+var_30], rax
.text:00000000000054D1                 xor     eax, eax
.text:00000000000054D3                 lea     rax, [rsp+38h+pwc]
.text:00000000000054D8                 test    rdi, rdi
.text:00000000000054DB                 cmovz   rbx, rax
.text:00000000000054DF                 mov     rdi, rbx        ; pwc
.text:00000000000054E2                 call    _mbrtowc
.text:00000000000054E7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000054EB                 mov     rbp, rax
.text:00000000000054EE                 jbe     short loc_5510
.text:00000000000054F0                 test    r12, r12
.text:00000000000054F3                 jz      short loc_5510
.text:00000000000054F5                 xor     edi, edi
.text:00000000000054F7                 call    hard_locale
.text:00000000000054FC                 test    al, al
.text:00000000000054FE                 jnz     short loc_5510
.text:0000000000005500                 movzx   eax, byte ptr [r13+0]
.text:0000000000005505                 mov     ebp, 1
.text:000000000000550A                 mov     [rbx], eax
.text:000000000000550C                 nop     dword ptr [rax+00h]
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005510                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005510                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005515                 xor     rdx, fs:28h
.text:000000000000551E                 mov     rax, rbp
.text:0000000000005521                 jnz     short loc_552E
.text:0000000000005523                 add     rsp, 18h
.text:0000000000005527                 pop     rbx
.text:0000000000005528                 pop     rbp
.text:0000000000005529                 pop     r12
.text:000000000000552B                 pop     r13
.text:000000000000552D                 retn
.text:000000000000552E ; ---------------------------------------------------------------------------
.text:000000000000552E
.text:000000000000552E loc_552E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000552E                 call    ___stack_chk_fail
.text:000000000000552E ; } // starts at 54B0
.text:000000000000552E rpl_mbrtowc     endp
.text:000000000000552E
.text:000000000000552E ; ---------------------------------------------------------------------------
.text:0000000000005533                 align 20h
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540 ; Attributes: info_from_lumina
.text:0000000000005540
.text:0000000000005540 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005540                 public close_stream
.text:0000000000005540 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005540                                         ; close_stdout+33↑p
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 push    r12
.text:0000000000005542                 push    rbp
.text:0000000000005543                 mov     rbp, rdi
.text:0000000000005546                 push    rbx
.text:0000000000005547                 call    ___fpending
.text:000000000000554C                 mov     ebx, [rbp+0]
.text:000000000000554F                 mov     rdi, rbp        ; stream
.text:0000000000005552                 mov     r12, rax
.text:0000000000005555                 call    rpl_fclose
.text:000000000000555A                 and     ebx, 20h
.text:000000000000555D                 test    ebx, ebx
.text:000000000000555F                 jnz     short loc_5578
.text:0000000000005561                 test    eax, eax
.text:0000000000005563                 jz      short loc_556F
.text:0000000000005565                 test    r12, r12
.text:0000000000005568                 mov     eax, 0FFFFFFFFh
.text:000000000000556D                 jz      short loc_55A8
.text:000000000000556F
.text:000000000000556F loc_556F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000556F                 pop     rbx
.text:0000000000005570                 pop     rbp
.text:0000000000005571                 pop     r12
.text:0000000000005573                 retn
.text:0000000000005573 ; ---------------------------------------------------------------------------
.text:0000000000005574                 align 8
.text:0000000000005578
.text:0000000000005578 loc_5578:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005578                 test    eax, eax
.text:000000000000557A                 jnz     short loc_5598
.text:000000000000557C                 call    ___errno_location
.text:0000000000005581                 mov     dword ptr [rax], 0
.text:0000000000005587                 mov     eax, 0FFFFFFFFh
.text:000000000000558C                 pop     rbx
.text:000000000000558D                 pop     rbp
.text:000000000000558E                 pop     r12
.text:0000000000005590                 retn
.text:0000000000005590 ; ---------------------------------------------------------------------------
.text:0000000000005591                 align 8
.text:0000000000005598
.text:0000000000005598 loc_5598:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005598                 pop     rbx
.text:0000000000005599                 mov     eax, 0FFFFFFFFh
.text:000000000000559E                 pop     rbp
.text:000000000000559F                 pop     r12
.text:00000000000055A1                 retn
.text:00000000000055A1 ; ---------------------------------------------------------------------------
.text:00000000000055A2                 align 8
.text:00000000000055A8
.text:00000000000055A8 loc_55A8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000055A8                 call    ___errno_location
.text:00000000000055AD                 cmp     dword ptr [rax], 9
.text:00000000000055B0                 pop     rbx
.text:00000000000055B1                 pop     rbp
.text:00000000000055B2                 pop     r12
.text:00000000000055B4                 setnz   al
.text:00000000000055B7                 movzx   eax, al
.text:00000000000055BA                 neg     eax
.text:00000000000055BC                 retn
.text:00000000000055BC ; } // starts at 5540
.text:00000000000055BC close_stream    endp
.text:00000000000055BC
.text:00000000000055BC ; ---------------------------------------------------------------------------
.text:00000000000055BD                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0
.text:00000000000055C0                 public hard_locale
.text:00000000000055C0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 sub     rsp, 8
.text:00000000000055C4                 xor     esi, esi        ; locale
.text:00000000000055C6                 call    _setlocale
.text:00000000000055CB                 mov     rdx, rax
.text:00000000000055CE                 mov     eax, 1
.text:00000000000055D3                 test    rdx, rdx
.text:00000000000055D6                 jz      short loc_55F5
.text:00000000000055D8                 lea     rdi, aC         ; "C"
.text:00000000000055DF                 mov     ecx, 2
.text:00000000000055E4                 mov     rsi, rdx
.text:00000000000055E7                 repe cmpsb
.text:00000000000055E9                 setnbe  cl
.text:00000000000055EC                 sbb     cl, 0
.text:00000000000055EF                 xor     eax, eax
.text:00000000000055F1                 test    cl, cl
.text:00000000000055F3                 jnz     short loc_5600
.text:00000000000055F5
.text:00000000000055F5 loc_55F5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000055F5                 add     rsp, 8
.text:00000000000055F9                 retn
.text:00000000000055F9 ; ---------------------------------------------------------------------------
.text:00000000000055FA                 align 20h
.text:0000000000005600
.text:0000000000005600 loc_5600:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005600                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005607                 mov     ecx, 6
.text:000000000000560C                 mov     rsi, rdx
.text:000000000000560F                 repe cmpsb
.text:0000000000005611                 setnbe  al
.text:0000000000005614                 sbb     al, 0
.text:0000000000005616                 test    al, al
.text:0000000000005618                 setnz   al
.text:000000000000561B                 add     rsp, 8
.text:000000000000561F                 retn
.text:000000000000561F ; } // starts at 55C0
.text:000000000000561F hard_locale     endp
.text:000000000000561F
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public locale_charset
.text:0000000000005620 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 sub     rsp, 8
.text:0000000000005624                 mov     edi, 0Eh        ; item
.text:0000000000005629                 call    _nl_langinfo
.text:000000000000562E                 test    rax, rax
.text:0000000000005631                 jz      short loc_5650
.text:0000000000005633                 cmp     byte ptr [rax], 0
.text:0000000000005636                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000563D                 cmovz   rax, rdx
.text:0000000000005641                 add     rsp, 8
.text:0000000000005645                 retn
.text:0000000000005645 ; ---------------------------------------------------------------------------
.text:0000000000005646                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005650                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005657                 add     rsp, 8
.text:000000000000565B                 retn
.text:000000000000565B ; } // starts at 5620
.text:000000000000565B locale_charset  endp
.text:000000000000565B
.text:000000000000565B ; ---------------------------------------------------------------------------
.text:000000000000565C                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660 ; Attributes: info_from_lumina
.text:0000000000005660
.text:0000000000005660 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005660                 public rpl_fclose
.text:0000000000005660 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 push    r12
.text:0000000000005662                 push    rbp
.text:0000000000005663                 push    rbx
.text:0000000000005664                 mov     rbx, rdi
.text:0000000000005667                 call    _fileno
.text:000000000000566C                 test    eax, eax
.text:000000000000566E                 mov     rdi, rbx        ; fp
.text:0000000000005671                 js      short loc_56C7
.text:0000000000005673                 call    ___freading
.text:0000000000005678                 test    eax, eax
.text:000000000000567A                 jnz     short loc_56A8
.text:000000000000567C
.text:000000000000567C loc_567C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000567C                 mov     rdi, rbx        ; stream
.text:000000000000567F                 call    rpl_fflush
.text:0000000000005684                 test    eax, eax
.text:0000000000005686                 jz      short loc_56C4
.text:0000000000005688                 call    ___errno_location
.text:000000000000568D                 mov     r12d, [rax]
.text:0000000000005690                 mov     rdi, rbx        ; stream
.text:0000000000005693                 mov     rbp, rax
.text:0000000000005696                 call    _fclose
.text:000000000000569B                 test    r12d, r12d
.text:000000000000569E                 jnz     short loc_56D0
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000056A0                 pop     rbx
.text:00000000000056A1                 pop     rbp
.text:00000000000056A2                 pop     r12
.text:00000000000056A4                 retn
.text:00000000000056A4 ; ---------------------------------------------------------------------------
.text:00000000000056A5                 align 8
.text:00000000000056A8
.text:00000000000056A8 loc_56A8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000056A8                 mov     rdi, rbx        ; stream
.text:00000000000056AB                 call    _fileno
.text:00000000000056B0                 xor     esi, esi        ; offset
.text:00000000000056B2                 mov     edx, 1          ; whence
.text:00000000000056B7                 mov     edi, eax        ; fd
.text:00000000000056B9                 call    _lseek
.text:00000000000056BE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000056C2                 jnz     short loc_567C
.text:00000000000056C4
.text:00000000000056C4 loc_56C4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000056C4                 mov     rdi, rbx        ; stream
.text:00000000000056C7
.text:00000000000056C7 loc_56C7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000056C7                 pop     rbx
.text:00000000000056C8                 pop     rbp
.text:00000000000056C9                 pop     r12
.text:00000000000056CB                 jmp     _fclose
.text:00000000000056D0 ; ---------------------------------------------------------------------------
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000056D0                 mov     [rbp+0], r12d
.text:00000000000056D4                 mov     eax, 0FFFFFFFFh
.text:00000000000056D9                 jmp     short loc_56A0
.text:00000000000056D9 ; } // starts at 5660
.text:00000000000056D9 rpl_fclose      endp
.text:00000000000056D9
.text:00000000000056D9 ; ---------------------------------------------------------------------------
.text:00000000000056DB                 align 20h
.text:00000000000056E0
.text:00000000000056E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056E0
.text:00000000000056E0 ; Attributes: info_from_lumina
.text:00000000000056E0
.text:00000000000056E0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000056E0                 public rpl_fflush
.text:00000000000056E0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000056E0 ; __unwind {
.text:00000000000056E0                 test    rdi, rdi
.text:00000000000056E3                 push    rbx
.text:00000000000056E4                 mov     rbx, rdi
.text:00000000000056E7                 jz      short loc_56FA
.text:00000000000056E9                 call    ___freading
.text:00000000000056EE                 test    eax, eax
.text:00000000000056F0                 jz      short loc_56FA
.text:00000000000056F2                 test    dword ptr [rbx], 100h
.text:00000000000056F8                 jnz     short loc_5708
.text:00000000000056FA
.text:00000000000056FA loc_56FA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000056FA                                         ; rpl_fflush+10↑j
.text:00000000000056FA                 mov     rdi, rbx        ; stream
.text:00000000000056FD                 pop     rbx
.text:00000000000056FE                 jmp     _fflush
.text:00000000000056FE ; ---------------------------------------------------------------------------
.text:0000000000005703                 align 8
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005708                 mov     rdi, rbx
.text:000000000000570B                 mov     edx, 1
.text:0000000000005710                 xor     esi, esi
.text:0000000000005712                 call    rpl_fseeko
.text:0000000000005717                 mov     rdi, rbx        ; stream
.text:000000000000571A                 pop     rbx
.text:000000000000571B                 jmp     _fflush
.text:000000000000571B ; } // starts at 56E0
.text:000000000000571B rpl_fflush      endp
.text:000000000000571B
.text:0000000000005720
.text:0000000000005720 ; =============== S U B R O U T I N E =======================================
.text:0000000000005720
.text:0000000000005720 ; Attributes: info_from_lumina
.text:0000000000005720
.text:0000000000005720 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005720                 public rpl_fseeko
.text:0000000000005720 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005720 ; __unwind {
.text:0000000000005720                 mov     rax, [rdi+8]
.text:0000000000005724                 cmp     [rdi+10h], rax
.text:0000000000005728                 jz      short loc_5730
.text:000000000000572A
.text:000000000000572A loc_572A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000572A                                         ; rpl_fseeko+1F↓j
.text:000000000000572A                 jmp     _fseeko
.text:000000000000572A ; ---------------------------------------------------------------------------
.text:000000000000572F                 align 10h
.text:0000000000005730
.text:0000000000005730 loc_5730:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005730                 mov     rax, [rdi+20h]
.text:0000000000005734                 cmp     [rdi+28h], rax
.text:0000000000005738                 jnz     short loc_572A
.text:000000000000573A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000573F                 jnz     short loc_572A
.text:0000000000005741                 push    r12
.text:0000000000005743                 push    rbp
.text:0000000000005744                 mov     r12d, edx
.text:0000000000005747                 push    rbx
.text:0000000000005748                 mov     rbp, rsi
.text:000000000000574B                 mov     rbx, rdi
.text:000000000000574E                 call    _fileno
.text:0000000000005753                 mov     edx, r12d       ; whence
.text:0000000000005756                 mov     rsi, rbp        ; offset
.text:0000000000005759                 mov     edi, eax        ; fd
.text:000000000000575B                 call    _lseek
.text:0000000000005760                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005764                 jz      short loc_5772
.text:0000000000005766                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005769                 mov     [rbx+90h], rax
.text:0000000000005770                 xor     eax, eax
.text:0000000000005772
.text:0000000000005772 loc_5772:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005772                 pop     rbx
.text:0000000000005773                 pop     rbp
.text:0000000000005774                 pop     r12
.text:0000000000005776                 retn
.text:0000000000005776 ; } // starts at 5720
.text:0000000000005776 rpl_fseeko      endp
.text:0000000000005776
.text:0000000000005776 ; ---------------------------------------------------------------------------
.text:0000000000005777                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780 ; Attributes: info_from_lumina
.text:0000000000005780
.text:0000000000005780 ; void _libc_csu_init(void)
.text:0000000000005780                 public __libc_csu_init
.text:0000000000005780 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 push    r15
.text:0000000000005782                 push    r14
.text:0000000000005784                 mov     r15, rdx
.text:0000000000005787                 push    r13
.text:0000000000005789                 push    r12
.text:000000000000578B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005792                 push    rbp
.text:0000000000005793                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000579A                 push    rbx
.text:000000000000579B                 mov     r13d, edi
.text:000000000000579E                 mov     r14, rsi
.text:00000000000057A1                 sub     rbp, r12
.text:00000000000057A4                 sub     rsp, 8
.text:00000000000057A8                 sar     rbp, 3
.text:00000000000057AC                 call    _init_proc
.text:00000000000057B1                 test    rbp, rbp
.text:00000000000057B4                 jz      short loc_57D6
.text:00000000000057B6                 xor     ebx, ebx
.text:00000000000057B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000057C0                 mov     rdx, r15
.text:00000000000057C3                 mov     rsi, r14
.text:00000000000057C6                 mov     edi, r13d
.text:00000000000057C9                 call    ds:(__frame_dummy_init_array_entry - 207B10h)[r12+rbx*8]
.text:00000000000057CD                 add     rbx, 1
.text:00000000000057D1                 cmp     rbp, rbx
.text:00000000000057D4                 jnz     short loc_57C0
.text:00000000000057D6
.text:00000000000057D6 loc_57D6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000057D6                 add     rsp, 8
.text:00000000000057DA                 pop     rbx
.text:00000000000057DB                 pop     rbp
.text:00000000000057DC                 pop     r12
.text:00000000000057DE                 pop     r13
.text:00000000000057E0                 pop     r14
.text:00000000000057E2                 pop     r15
.text:00000000000057E4                 retn
.text:00000000000057E4 ; } // starts at 5780
.text:00000000000057E4 __libc_csu_init endp
.text:00000000000057E4
.text:00000000000057E4 ; ---------------------------------------------------------------------------
.text:00000000000057E5                 align 10h
.text:00000000000057F0
.text:00000000000057F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057F0
.text:00000000000057F0
.text:00000000000057F0 ; void _libc_csu_fini(void)
.text:00000000000057F0                 public __libc_csu_fini
.text:00000000000057F0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000057F0 ; __unwind {
.text:00000000000057F0                 rep retn
.text:00000000000057F0 ; } // starts at 57F0
.text:00000000000057F0 __libc_csu_fini endp
.text:00000000000057F0
.text:00000000000057F0 ; ---------------------------------------------------------------------------
.text:00000000000057F2                 align 20h
.text:0000000000005800
.text:0000000000005800 ; =============== S U B R O U T I N E =======================================
.text:0000000000005800
.text:0000000000005800
.text:0000000000005800 atexit          proc near               ; CODE XREF: main+6E↑p
.text:0000000000005800 ; __unwind {
.text:0000000000005800                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005807                 xor     esi, esi        ; obj
.text:0000000000005809                 jmp     ___cxa_atexit
.text:0000000000005809 ; } // starts at 5800
.text:0000000000005809 atexit          endp
.text:0000000000005809
.text:0000000000005809 _text           ends
.text:0000000000005809
LOAD:000000000000580E ; ===========================================================================
LOAD:000000000000580E
LOAD:000000000000580E ; Segment type: Pure code
LOAD:000000000000580E ; Segment permissions: Read/Execute
LOAD:000000000000580E LOAD            segment byte public 'CODE' use64
LOAD:000000000000580E                 assume cs:LOAD
LOAD:000000000000580E                 ;org 580Eh
LOAD:000000000000580E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000580E                 align 10h
LOAD:000000000000580E LOAD            ends
LOAD:000000000000580E
.fini:0000000000005810 ; ===========================================================================
.fini:0000000000005810
.fini:0000000000005810 ; Segment type: Pure code
.fini:0000000000005810 ; Segment permissions: Read/Execute
.fini:0000000000005810 _fini           segment dword public 'CODE' use64
.fini:0000000000005810                 assume cs:_fini
.fini:0000000000005810                 ;org 5810h
.fini:0000000000005810                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005810
.fini:0000000000005810 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005810
.fini:0000000000005810
.fini:0000000000005810                 public _term_proc
.fini:0000000000005810 _term_proc      proc near
.fini:0000000000005810                 sub     rsp, 8          ; _fini
.fini:0000000000005814                 add     rsp, 8
.fini:0000000000005818                 retn
.fini:0000000000005818 _term_proc      endp
.fini:0000000000005818
.fini:0000000000005818 _fini           ends
.fini:0000000000005818
LOAD:0000000000005819 ; ===========================================================================
LOAD:0000000000005819
LOAD:0000000000005819 ; Segment type: Pure code
LOAD:0000000000005819 ; Segment permissions: Read/Execute
LOAD:0000000000005819 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005819                 assume cs:LOAD
LOAD:0000000000005819                 ;org 5819h
LOAD:0000000000005819                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005819                 align 20h
LOAD:0000000000005819 LOAD            ends
LOAD:0000000000005819
.rodata:0000000000005820 ; ===========================================================================
.rodata:0000000000005820
.rodata:0000000000005820 ; Segment type: Pure data
.rodata:0000000000005820 ; Segment permissions: Read
.rodata:0000000000005820 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005820                 assume cs:_rodata
.rodata:0000000000005820                 ;org 5820h
.rodata:0000000000005820                 public _IO_stdin_used
.rodata:0000000000005820 _IO_stdin_used  db    1
.rodata:0000000000005821                 db    0
.rodata:0000000000005822                 db    2
.rodata:0000000000005823                 db    0
.rodata:0000000000005824 aTruncate       db 'truncate',0         ; DATA XREF: main+F7↑o
.rodata:0000000000005824                                         ; usage+1C5↑o ...
.rodata:000000000000582D ; const char aUsageSOptionFi[]
.rodata:000000000000582D aUsageSOptionFi db 'Usage: %s OPTION... FILE...',0Ah,0
.rodata:000000000000582D                                         ; DATA XREF: usage:loc_222D↑o
.rodata:000000000000584A asc_584A        db '[',0                ; DATA XREF: usage+1D1↑o
.rodata:000000000000584C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1F8↑o
.rodata:000000000000585C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000585C                                         ; DATA XREF: usage+228↑o
.rodata:000000000000585C                                         ; usage+31C↑o ...
.rodata:0000000000005872 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+239↑o
.rodata:000000000000587C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+245↑o
.rodata:000000000000588B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1D8↑o
.rodata:0000000000005895 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+204↑o
.rodata:000000000000589F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+21C↑o
.rodata:00000000000058A9 ; const char aSOnlineHelpS[]
.rodata:00000000000058A9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+28A↑o
.rodata:00000000000058A9                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000058C0 unk_58C0        db  47h ; G             ; DATA XREF: main+F0↑o
.rodata:00000000000058C0                                         ; usage+2A6↑o ...
.rodata:00000000000058C1                 db  4Eh ; N
.rodata:00000000000058C2                 db  55h ; U
.rodata:00000000000058C3                 db  20h
.rodata:00000000000058C4 ; const char domainname[]
.rodata:00000000000058C4 domainname      db 'coreutils',0        ; DATA XREF: main+4F↑o
.rodata:00000000000058C4                                         ; main+5B↑o ...
.rodata:00000000000058CE ; const char s2[]
.rodata:00000000000058CE s2              db 'en_',0              ; DATA XREF: usage+2CD↑o
.rodata:00000000000058CE                                         ; usage+38E↑o
.rodata:00000000000058D2 ; const char aFullDocumentat[]
.rodata:00000000000058D2 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000058D2                                         ; DATA XREF: usage:loc_24B9↑o
.rodata:00000000000058D2                                         ; usage:loc_2576↑o
.rodata:00000000000058ED ; const char dirname[]
.rodata:00000000000058ED dirname         db '/usr/local/share/locale',0
.rodata:00000000000058ED                                         ; DATA XREF: main+48↑o
.rodata:0000000000005905 ; const char msgid[]
.rodata:0000000000005905 msgid           db 'Invalid number',0   ; DATA XREF: main+1C4↑o
.rodata:0000000000005905                                         ; main:loc_192A↑o
.rodata:0000000000005914 aEggkkmmpttyz0  db 'EgGkKmMPtTYZ0',0    ; DATA XREF: main+1E4↑o
.rodata:0000000000005914                                         ; main+25F↑o
.rodata:0000000000005922 ; const char aDivisionByZero[]
.rodata:0000000000005922 aDivisionByZero db 'division by zero',0 ; DATA XREF: main:loc_204A↑o
.rodata:0000000000005933 aPadraigBrady   db 'Padraig Brady',0    ; DATA XREF: main+E9↑o
.rodata:0000000000005941 ; const char shortopts[]
.rodata:0000000000005941 shortopts       db 'cor:s:',0           ; DATA XREF: main+7A↑o
.rodata:0000000000005948 aReference      db '--reference',0      ; DATA XREF: main+2F6↑o
.rodata:0000000000005948                                         ; main:loc_2014↑o ...
.rodata:0000000000005954 aSize           db '--size',0           ; DATA XREF: main+307↑o
.rodata:0000000000005954                                         ; main+355↑o ...
.rodata:000000000000595B aIoBlocks       db '--io-blocks',0      ; DATA XREF: main+366↑o
.rodata:000000000000595B                                         ; .data.rel.ro:0000000000207B40↓o
.rodata:0000000000005967 ; const char aMissingFileOpe[]
.rodata:0000000000005967 aMissingFileOpe db 'missing file operand',0
.rodata:0000000000005967                                         ; DATA XREF: main:loc_1F26↑o
.rodata:000000000000597C ; const char aCannotStatS[]
.rodata:000000000000597C aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: main+99B↑o
.rodata:000000000000598B ; const char aCannotGetTheSi[]
.rodata:000000000000598B aCannotGetTheSi db 'cannot get the size of %s',0
.rodata:000000000000598B                                         ; DATA XREF: main+53A↑o
.rodata:000000000000598B                                         ; main+8B8↑o
.rodata:00000000000059A5 ; const char aCannotOpenSFor[]
.rodata:00000000000059A5 aCannotOpenSFor db 'cannot open %s for writing',0
.rodata:00000000000059A5                                         ; DATA XREF: main+593↑o
.rodata:00000000000059C0 ; const char aCannotFstatS[]
.rodata:00000000000059C0 aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: main+487↑o
.rodata:00000000000059D0 ; const char aFailedToCloseS[]
.rodata:00000000000059D0 aFailedToCloseS db 'failed to close %s',0
.rodata:00000000000059D0                                         ; DATA XREF: main+6C9↑o
.rodata:00000000000059E3 aNoCreate       db 'no-create',0        ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000059ED aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:00000000000059F2 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BC0↓o
.rodata:00000000000059FA                 align 20h
.rodata:0000000000005A00 ; const char aTrySHelpForMor[]
.rodata:0000000000005A00 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005A00                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005A27                 align 8
.rodata:0000000000005A28 ; const char aShrinkOrExtend[]
.rodata:0000000000005A28 aShrinkOrExtend db 'Shrink or extend the size of each FILE to the specified size',0Ah
.rodata:0000000000005A28                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005A28                 db 0Ah
.rodata:0000000000005A28                 db 'A FILE argument that does not exist is created.',0Ah
.rodata:0000000000005A28                 db 0Ah
.rodata:0000000000005A28                 db 'If a FILE is larger than the specified size, the extra data is lo'
.rodata:0000000000005A28                 db 'st.',0Ah
.rodata:0000000000005A28                 db 'If a FILE is shorter, it is extended and the extended part (hole)'
.rodata:0000000000005A28                 db 0Ah
.rodata:0000000000005A28                 db 'reads as zero bytes.',0Ah,0
.rodata:0000000000005B34                 align 8
.rodata:0000000000005B38 ; const char aMandatoryArgum[]
.rodata:0000000000005B38 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000005B38                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005B38                 db 'ns too.',0Ah,0
.rodata:0000000000005B83                 align 8
.rodata:0000000000005B88 ; const char aCNoCreateDoNot[]
.rodata:0000000000005B88 aCNoCreateDoNot db '  -c, --no-create        do not create any files',0Ah,0
.rodata:0000000000005B88                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000005BBA                 align 20h
.rodata:0000000000005BC0 ; const char aOIoBlocksTreat[]
.rodata:0000000000005BC0 aOIoBlocksTreat db '  -o, --io-blocks        treat SIZE as number of IO blocks instea'
.rodata:0000000000005BC0                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005BC0                 db 'd of bytes',0Ah,0
.rodata:0000000000005C0D                 align 10h
.rodata:0000000000005C10 ; const char aRReferenceRfil[]
.rodata:0000000000005C10 aRReferenceRfil db '  -r, --reference=RFILE  base size on RFILE',0Ah
.rodata:0000000000005C10                                         ; DATA XREF: usage+118↑o
.rodata:0000000000005C10                 db '  -s, --size=SIZE        set or adjust the file size by SIZE byte'
.rodata:0000000000005C10                 db 's',0Ah,0
.rodata:0000000000005C80 ; const char aHelpDisplayThi[]
.rodata:0000000000005C80 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005C80                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000005CAD                 align 10h
.rodata:0000000000005CB0 ; const char aVersionOutputV[]
.rodata:0000000000005CB0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005CB0                                         ; DATA XREF: usage+162↑o
.rodata:0000000000005CE6                 align 8
.rodata:0000000000005CE8 ; const char aTheSizeArgumen[]
.rodata:0000000000005CE8 aTheSizeArgumen db 0Ah                  ; DATA XREF: usage+187↑o
.rodata:0000000000005CE8                 db 'The SIZE argument is an integer and optional unit (example: 10K i'
.rodata:0000000000005CE8                 db 's 10*1024).',0Ah
.rodata:0000000000005CE8                 db 'Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers o'
.rodata:0000000000005CE8                 db 'f 1000).',0Ah
.rodata:0000000000005CE8                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:0000000000005DBC                 align 20h
.rodata:0000000000005DC0 ; const char aSizeMayAlsoBeP[]
.rodata:0000000000005DC0 aSizeMayAlsoBeP db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:0000000000005DC0                 db 'SIZE may also be prefixed by one of the following modifying chara'
.rodata:0000000000005DC0                 db 'cters:',0Ah
.rodata:0000000000005DC0                 db 27h,'+',27h,' extend by, ',27h,'-',27h,' reduce by, ',27h,'<',27h,' '
.rodata:0000000000005DC0                 db 'at most, ',27h,'>',27h,' at least,',0Ah
.rodata:0000000000005DC0                 db 27h,'/',27h,' round down to multiple of, ',27h,'%',27h,' round up '
.rodata:0000000000005DC0                 db 'to multiple of.',0Ah,0
.rodata:0000000000005E7F                 align 20h
.rodata:0000000000005E80 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005E80                                         ; DATA XREF: usage+29F↑o
.rodata:0000000000005E80                                         ; usage+303↑o ...
.rodata:0000000000005EA8 ; const char aReportAnyTrans[]
.rodata:0000000000005EA8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005EA8                                         ; DATA XREF: usage+3F7↑o
.rodata:0000000000005EA8                 db 'am/>',0Ah,0
.rodata:0000000000005EEF                 align 10h
.rodata:0000000000005EF0 ; const char aOrAvailableLoc[]
.rodata:0000000000005EF0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005EF0                                         ; DATA XREF: usage:loc_24FE↑o
.rodata:0000000000005F23                 align 8
.rodata:0000000000005F28 aMultipleRelati db 'multiple relative modifiers specified',0
.rodata:0000000000005F28                                         ; DATA XREF: main:loc_20AD↑o
.rodata:0000000000005F4E                 align 10h
.rodata:0000000000005F50 aYouMustSpecify_0 db 'you must specify either %s or %s',0
.rodata:0000000000005F50                                         ; DATA XREF: main+95E↑o
.rodata:0000000000005F71                 align 8
.rodata:0000000000005F78 ; const char aYouMustSpecify[]
.rodata:0000000000005F78 aYouMustSpecify db 'you must specify a relative %s with %s',0
.rodata:0000000000005F78                                         ; DATA XREF: main+318↑o
.rodata:0000000000005F9F                 align 20h
.rodata:0000000000005FA0 aSWasSpecifiedB db '%s was specified but %s was not',0
.rodata:0000000000005FA0                                         ; DATA XREF: main+37F↑o
.rodata:0000000000005FC0 ; const char aOverflowInLdLd[]
.rodata:0000000000005FC0 aOverflowInLdLd db 'overflow in %ld * %ld byte blocks for file %s',0
.rodata:0000000000005FC0                                         ; DATA XREF: main+793↑o
.rodata:0000000000005FEE                 align 10h
.rodata:0000000000005FF0 ; const char aSHasUnusableAp[]
.rodata:0000000000005FF0 aSHasUnusableAp db '%s has unusable, apparently negative size',0
.rodata:0000000000005FF0                                         ; DATA XREF: main+7F9↑o
.rodata:000000000000601A                 align 20h
.rodata:0000000000006020 aOverflowRoundi db 'overflow rounding up size of file %s',0
.rodata:0000000000006020                                         ; DATA XREF: main+8F0↑o
.rodata:0000000000006045                 align 8
.rodata:0000000000006048 aOverflowExtend db 'overflow extending size of file %s',0
.rodata:0000000000006048                                         ; DATA XREF: main+911↑o
.rodata:000000000000606B                 align 10h
.rodata:0000000000006070 ; const char aFailedToTrunca[]
.rodata:0000000000006070 aFailedToTrunca db 'failed to truncate %s at %ld bytes',0
.rodata:0000000000006070                                         ; DATA XREF: main+606↑o
.rodata:0000000000006093 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000006098 ; const char aWriteError[]
.rodata:0000000000006098 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2653↑o
.rodata:00000000000060A4 ; const char format[]
.rodata:00000000000060A4 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000060A4                                         ; xnumtoimax+7F↑o ...
.rodata:00000000000060AB                 align 10h
.rodata:00000000000060B0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000060B0                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000060E8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000060F0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000060F4 unk_60F4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000060F5                 db  80h
.rodata:00000000000060F6                 db  98h
.rodata:00000000000060F7                 db    0
.rodata:00000000000060F8 unk_60F8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000060F9                 db  80h
.rodata:00000000000060FA                 db  99h
.rodata:00000000000060FB                 db    0
.rodata:00000000000060FC unk_60FC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000060FD                 db    7
.rodata:00000000000060FE                 db  65h ; e
.rodata:00000000000060FF                 db    0
.rodata:0000000000006100 unk_6100        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000006101                 db 0AFh
.rodata:0000000000006102                 db    0
.rodata:0000000000006103 unk_6103        db  22h ; "             ; DATA XREF: gettext_quote:loc_2780↑o
.rodata:0000000000006103                                         ; quotearg_buffer_restyled:loc_353B↑o ...
.rodata:0000000000006104                 db    0
.rodata:0000000000006105 ; const char asc_6105[2]
.rodata:0000000000006105 asc_6105        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000006105                                         ; quotearg_buffer_restyled:loc_2903↑o ...
.rodata:0000000000006107 ; const char asc_6107[2]
.rodata:0000000000006107 asc_6107        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000006107                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000006109 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000006111 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000006117 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000006124 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207C18↓o
.rodata:0000000000006124                                         ; .data.rel.ro:0000000000207C38↓o
.rodata:0000000000006131 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006131                                         ; DATA XREF: .data.rel.ro:0000000000207C20↓o
.rodata:0000000000006145 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000006147 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C30↓o
.rodata:000000000000614F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C48↓o
.rodata:0000000000006157                 align 20h
.rodata:0000000000006160 jpt_28E1        dd offset loc_368A - 6160h
.rodata:0000000000006160                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000006160                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000006160                 dd offset loc_28E3 - 6160h ; jump table for switch statement
.rodata:0000000000006160                 dd offset loc_38B8 - 6160h
.rodata:0000000000006160                 dd offset loc_36C4 - 6160h
.rodata:0000000000006160                 dd offset loc_34B4 - 6160h
.rodata:0000000000006160                 dd offset loc_3510 - 6160h
.rodata:0000000000006160                 dd offset loc_3565 - 6160h
.rodata:0000000000006160                 dd offset loc_35AA - 6160h
.rodata:0000000000006160                 dd offset loc_35E4 - 6160h
.rodata:0000000000006160                 dd offset loc_35E4 - 6160h
.rodata:0000000000006160                 dd offset loc_35E4 - 6160h
.rodata:000000000000618C jpt_2A3E        dd offset loc_2C60 - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000618C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch ; jump table for switch statement
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset loc_2CA0 - 618Ch, offset loc_2BA8 - 618Ch
.rodata:000000000000618C                 dd offset loc_2B68 - 618Ch, offset loc_2D30 - 618Ch, offset loc_2D20 - 618Ch
.rodata:000000000000618C                 dd offset loc_2D10 - 618Ch, offset loc_2D00 - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset def_2A3E - 618Ch
.rodata:000000000000618C                 dd offset def_2A3E - 618Ch, offset def_2A3E - 618Ch, offset loc_2CF0 - 618Ch
.rodata:000000000000618C                 dd offset loc_2CE0 - 618Ch, offset loc_2CE0 - 618Ch, offset loc_2CB0 - 618Ch
.rodata:000000000000618C                 dd offset loc_2CE0 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2CE0 - 618Ch
.rodata:000000000000618C                 dd offset loc_2B43 - 618Ch, offset loc_2CE0 - 618Ch, offset loc_2CE0 - 618Ch
.rodata:000000000000618C                 dd offset loc_2CE0 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2CE0 - 618Ch
.rodata:000000000000618C                 dd offset loc_2CE0 - 618Ch, offset loc_2CE0 - 618Ch, offset loc_2CE0 - 618Ch
.rodata:000000000000618C                 dd offset loc_2B13 - 618Ch, offset def_2A3E - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2CE0 - 618Ch, offset loc_2BB8 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2CE0 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2CE0 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch, offset loc_2C88 - 618Ch
.rodata:000000000000618C                 dd offset loc_2A43 - 618Ch, offset loc_2CE0 - 618Ch, offset loc_2A43 - 618Ch
.rodata:000000000000618C                 dd offset loc_2CB0 - 618Ch
.rodata:0000000000006388 jpt_2DCA        dd offset loc_2E30 - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006388                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h ; jump table for switch statement
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset loc_2E20 - 6388h, offset loc_2F70 - 6388h
.rodata:0000000000006388                 dd offset loc_2F58 - 6388h, offset loc_2E08 - 6388h, offset loc_2F48 - 6388h
.rodata:0000000000006388                 dd offset loc_2DF0 - 6388h, offset loc_2F30 - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset def_2DCA - 6388h
.rodata:0000000000006388                 dd offset def_2DCA - 6388h, offset def_2DCA - 6388h, offset loc_2F18 - 6388h
.rodata:0000000000006388                 dd offset loc_2F00 - 6388h, offset loc_2F00 - 6388h, offset loc_2EE8 - 6388h
.rodata:0000000000006388                 dd offset loc_2F00 - 6388h, offset loc_2ED0 - 6388h, offset loc_2F00 - 6388h
.rodata:0000000000006388                 dd offset loc_2B40 - 6388h, offset loc_2F00 - 6388h, offset loc_2F00 - 6388h
.rodata:0000000000006388                 dd offset loc_2F00 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2F00 - 6388h
.rodata:0000000000006388                 dd offset loc_2F00 - 6388h, offset loc_2F00 - 6388h, offset loc_2F00 - 6388h
.rodata:0000000000006388                 dd offset loc_2B10 - 6388h, offset def_2DCA - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2F00 - 6388h, offset loc_2DD0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2F00 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2F00 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h, offset loc_2ED0 - 6388h
.rodata:0000000000006388                 dd offset loc_2A40 - 6388h, offset loc_2F00 - 6388h, offset loc_2A40 - 6388h
.rodata:0000000000006388                 dd offset loc_2EE8 - 6388h
.rodata:0000000000006584                 align 20h
.rodata:00000000000065A0                 public quoting_style_vals
.rodata:00000000000065A0 quoting_style_vals db    0
.rodata:00000000000065A1                 db    0
.rodata:00000000000065A2                 db    0
.rodata:00000000000065A3                 db    0
.rodata:00000000000065A4                 db    1
.rodata:00000000000065A5                 db    0
.rodata:00000000000065A6                 db    0
.rodata:00000000000065A7                 db    0
.rodata:00000000000065A8                 db    2
.rodata:00000000000065A9                 db    0
.rodata:00000000000065AA                 db    0
.rodata:00000000000065AB                 db    0
.rodata:00000000000065AC                 db    3
.rodata:00000000000065AD                 db    0
.rodata:00000000000065AE                 db    0
.rodata:00000000000065AF                 db    0
.rodata:00000000000065B0                 db    4
.rodata:00000000000065B1                 db    0
.rodata:00000000000065B2                 db    0
.rodata:00000000000065B3                 db    0
.rodata:00000000000065B4                 db    5
.rodata:00000000000065B5                 db    0
.rodata:00000000000065B6                 db    0
.rodata:00000000000065B7                 db    0
.rodata:00000000000065B8                 db    6
.rodata:00000000000065B9                 db    0
.rodata:00000000000065BA                 db    0
.rodata:00000000000065BB                 db    0
.rodata:00000000000065BC                 db    7
.rodata:00000000000065BD                 db    0
.rodata:00000000000065BE                 db    0
.rodata:00000000000065BF                 db    0
.rodata:00000000000065C0                 db    8
.rodata:00000000000065C1                 db    0
.rodata:00000000000065C2                 db    0
.rodata:00000000000065C3                 db    0
.rodata:00000000000065C4                 db    9
.rodata:00000000000065C5                 db    0
.rodata:00000000000065C6                 db    0
.rodata:00000000000065C7                 db    0
.rodata:00000000000065C8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000065D4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000065DB ; const char aC_0[]
.rodata:00000000000065DB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_442C↑o
.rodata:00000000000065DF ; const char aWrittenByS[]
.rodata:00000000000065DF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000065DF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000065EF ; const char aWrittenBySAndS[]
.rodata:00000000000065EF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000065EF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006606 ; const char aWrittenBySSAnd[]
.rodata:0000000000006606 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006606                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006622 ; const char aReportBugsToS[]
.rodata:0000000000006622 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006622                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006637 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006637                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000664D ; const char aSHomePageS[]
.rodata:000000000000664D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000664D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006661                 align 8
.rodata:0000000000006668 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006668 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006668                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006668                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006668                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006668                 db '.',0Ah
.rodata:0000000000006668                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006668                 db 0Ah,0
.rodata:0000000000006734                 align 8
.rodata:0000000000006738 ; const char aWrittenBySSSAn[]
.rodata:0000000000006738 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006738                                         ; DATA XREF: version_etc_arn:loc_4680↑o
.rodata:0000000000006738                 db 'and %s.',0Ah,0
.rodata:0000000000006758 ; const char aWrittenBySSSSA[]
.rodata:0000000000006758 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006758                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006758                 db '%s, and %s.',0Ah,0
.rodata:000000000000677C                 align 20h
.rodata:0000000000006780 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006780 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006780                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006780                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000067A8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000067A8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000067A8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000067A8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000067D4                 align 8
.rodata:00000000000067D8 ; const char aWrittenBySSSSS[]
.rodata:00000000000067D8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000067D8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000067D8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000067D8                 db 'and %s.',0Ah,0
.rodata:0000000000006808 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006808 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006808                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006808                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006808                 db '%s, and %s.',0Ah,0
.rodata:000000000000683C                 align 20h
.rodata:0000000000006840 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006840                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006840                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006840                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000687C                 align 20h
.rodata:0000000000006880 ; const char aGeneralHelpUsi[]
.rodata:0000000000006880 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000006880                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000006880                 db 0
.rodata:00000000000068C1                 align 4
.rodata:00000000000068C4 jpt_4494        dd offset loc_4516 - 68C4h
.rodata:00000000000068C4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000068C4                                         ; version_etc_arn+9D↑r
.rodata:00000000000068C4                 dd offset loc_45A8 - 68C4h ; jump table for switch statement
.rodata:00000000000068C4                 dd offset loc_45E8 - 68C4h
.rodata:00000000000068C4                 dd offset loc_4630 - 68C4h
.rodata:00000000000068C4                 dd offset loc_4680 - 68C4h
.rodata:00000000000068C4                 dd offset loc_46D8 - 68C4h
.rodata:00000000000068C4                 dd offset loc_4708 - 68C4h
.rodata:00000000000068C4                 dd offset loc_4770 - 68C4h
.rodata:00000000000068C4                 dd offset loc_44A0 - 68C4h
.rodata:00000000000068C4                 dd offset loc_4550 - 68C4h
.rodata:00000000000068EC                 align 20h
.rodata:0000000000006900                 public version_etc_copyright
.rodata:0000000000006900 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006900                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000692F ; const char aMemoryExhauste[]
.rodata:000000000000692F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006940 ; const char file[]
.rodata:0000000000006940 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000006940                                         ; DATA XREF: xstrtoimax+696↑o
.rodata:0000000000006960 ; const char assertion[]
.rodata:0000000000006960 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000006960                                         ; DATA XREF: xstrtoimax+69D↑o
.rodata:0000000000006986                 align 8
.rodata:0000000000006988 jpt_4F9E        dd offset loc_52D0 - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                                         ; DATA XREF: xstrtoimax+19C↑o
.rodata:0000000000006988                                         ; xstrtoimax+1A7↑r
.rodata:0000000000006988                 dd offset loc_5200 - 6988h, offset def_4F9E - 6988h, offset loc_51A0 - 6988h ; jump table for switch statement
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset loc_5160 - 6988h, offset def_4F9E - 6988h, offset loc_4FA0 - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset loc_5268 - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset loc_5300 - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset loc_50F0 - 6988h
.rodata:0000000000006988                 dd offset loc_5080 - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset loc_5050 - 6988h
.rodata:0000000000006988                 dd offset loc_5000 - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset loc_51A0 - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset loc_5160 - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset loc_4FA0 - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset def_4F9E - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset loc_5300 - 6988h
.rodata:0000000000006988                 dd offset def_4F9E - 6988h, offset def_4F9E - 6988h, offset loc_5020 - 6988h
.rodata:0000000000006A60 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000006A60 __PRETTY_FUNCTION___4162 db 'xstrtoimax',0
.rodata:0000000000006A60                                         ; DATA XREF: xstrtoimax:loc_547F↑o
.rodata:0000000000006A6B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006A6D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5600↑o
.rodata:0000000000006A73 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006A73                                         ; locale_charset:loc_5650↑o
.rodata:0000000000006A73 _rodata         ends
.rodata:0000000000006A73
LOAD:0000000000006A79 ; ===========================================================================
LOAD:0000000000006A79
LOAD:0000000000006A79 ; Segment type: Pure code
LOAD:0000000000006A79 ; Segment permissions: Read/Execute
LOAD:0000000000006A79 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006A79                 assume cs:LOAD
LOAD:0000000000006A79                 ;org 6A79h
LOAD:0000000000006A79                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006A79                 align 4
LOAD:0000000000006A79 LOAD            ends
LOAD:0000000000006A79
.eh_frame_hdr:0000000000006A7C ; ===========================================================================
.eh_frame_hdr:0000000000006A7C
.eh_frame_hdr:0000000000006A7C ; Segment type: Pure data
.eh_frame_hdr:0000000000006A7C ; Segment permissions: Read
.eh_frame_hdr:0000000000006A7C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006A7C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006A7C                 ;org 6A7Ch
.eh_frame_hdr:0000000000006A7C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006A7D                 db  1Bh
.eh_frame_hdr:0000000000006A7E                 db    3
.eh_frame_hdr:0000000000006A7F                 db  3Bh ; ;
.eh_frame_hdr:0000000000006A80                 db  50h ; P
.eh_frame_hdr:0000000000006A81                 db    2
.eh_frame_hdr:0000000000006A82                 db    0
.eh_frame_hdr:0000000000006A83                 db    0
.eh_frame_hdr:0000000000006A84                 db  49h ; I
.eh_frame_hdr:0000000000006A85                 db    0
.eh_frame_hdr:0000000000006A86                 db    0
.eh_frame_hdr:0000000000006A87                 db    0
.eh_frame_hdr:0000000000006A88                 db  54h ; T
.eh_frame_hdr:0000000000006A89                 db 0A9h
.eh_frame_hdr:0000000000006A8A                 db 0FFh
.eh_frame_hdr:0000000000006A8B                 db 0FFh
.eh_frame_hdr:0000000000006A8C                 db  9Ch
.eh_frame_hdr:0000000000006A8D                 db    2
.eh_frame_hdr:0000000000006A8E                 db    0
.eh_frame_hdr:0000000000006A8F                 db    0
.eh_frame_hdr:0000000000006A90                 db  54h ; T
.eh_frame_hdr:0000000000006A91                 db 0ACh
.eh_frame_hdr:0000000000006A92                 db 0FFh
.eh_frame_hdr:0000000000006A93                 db 0FFh
.eh_frame_hdr:0000000000006A94                 db 0C4h
.eh_frame_hdr:0000000000006A95                 db    2
.eh_frame_hdr:0000000000006A96                 db    0
.eh_frame_hdr:0000000000006A97                 db    0
.eh_frame_hdr:0000000000006A98                 db  64h ; d
.eh_frame_hdr:0000000000006A99                 db 0ACh
.eh_frame_hdr:0000000000006A9A                 db 0FFh
.eh_frame_hdr:0000000000006A9B                 db 0FFh
.eh_frame_hdr:0000000000006A9C                 db    8
.eh_frame_hdr:0000000000006A9D                 db    3
.eh_frame_hdr:0000000000006A9E                 db    0
.eh_frame_hdr:0000000000006A9F                 db    0
.eh_frame_hdr:0000000000006AA0                 db  44h ; D
.eh_frame_hdr:0000000000006AA1                 db 0B6h
.eh_frame_hdr:0000000000006AA2                 db 0FFh
.eh_frame_hdr:0000000000006AA3                 db 0FFh
.eh_frame_hdr:0000000000006AA4                 db  6Ch ; l
.eh_frame_hdr:0000000000006AA5                 db    2
.eh_frame_hdr:0000000000006AA6                 db    0
.eh_frame_hdr:0000000000006AA7                 db    0
.eh_frame_hdr:0000000000006AA8                 db  54h ; T
.eh_frame_hdr:0000000000006AA9                 db 0B7h
.eh_frame_hdr:0000000000006AAA                 db 0FFh
.eh_frame_hdr:0000000000006AAB                 db 0FFh
.eh_frame_hdr:0000000000006AAC                 db 0DCh
.eh_frame_hdr:0000000000006AAD                 db    2
.eh_frame_hdr:0000000000006AAE                 db    0
.eh_frame_hdr:0000000000006AAF                 db    0
.eh_frame_hdr:0000000000006AB0                 db  74h ; t
.eh_frame_hdr:0000000000006AB1                 db 0BBh
.eh_frame_hdr:0000000000006AB2                 db 0FFh
.eh_frame_hdr:0000000000006AB3                 db 0FFh
.eh_frame_hdr:0000000000006AB4                 db  5Ch ; \
.eh_frame_hdr:0000000000006AB5                 db    3
.eh_frame_hdr:0000000000006AB6                 db    0
.eh_frame_hdr:0000000000006AB7                 db    0
.eh_frame_hdr:0000000000006AB8                 db  84h
.eh_frame_hdr:0000000000006AB9                 db 0BBh
.eh_frame_hdr:0000000000006ABA                 db 0FFh
.eh_frame_hdr:0000000000006ABB                 db 0FFh
.eh_frame_hdr:0000000000006ABC                 db  70h ; p
.eh_frame_hdr:0000000000006ABD                 db    3
.eh_frame_hdr:0000000000006ABE                 db    0
.eh_frame_hdr:0000000000006ABF                 db    0
.eh_frame_hdr:0000000000006AC0                 db  94h
.eh_frame_hdr:0000000000006AC1                 db 0BBh
.eh_frame_hdr:0000000000006AC2                 db 0FFh
.eh_frame_hdr:0000000000006AC3                 db 0FFh
.eh_frame_hdr:0000000000006AC4                 db  84h
.eh_frame_hdr:0000000000006AC5                 db    3
.eh_frame_hdr:0000000000006AC6                 db    0
.eh_frame_hdr:0000000000006AC7                 db    0
.eh_frame_hdr:0000000000006AC8                 db  44h ; D
.eh_frame_hdr:0000000000006AC9                 db 0BCh
.eh_frame_hdr:0000000000006ACA                 db 0FFh
.eh_frame_hdr:0000000000006ACB                 db 0FFh
.eh_frame_hdr:0000000000006ACC                 db 0B4h
.eh_frame_hdr:0000000000006ACD                 db    3
.eh_frame_hdr:0000000000006ACE                 db    0
.eh_frame_hdr:0000000000006ACF                 db    0
.eh_frame_hdr:0000000000006AD0                 db 0E4h
.eh_frame_hdr:0000000000006AD1                 db 0BCh
.eh_frame_hdr:0000000000006AD2                 db 0FFh
.eh_frame_hdr:0000000000006AD3                 db 0FFh
.eh_frame_hdr:0000000000006AD4                 db 0D4h
.eh_frame_hdr:0000000000006AD5                 db    3
.eh_frame_hdr:0000000000006AD6                 db    0
.eh_frame_hdr:0000000000006AD7                 db    0
.eh_frame_hdr:0000000000006AD8                 db 0D4h
.eh_frame_hdr:0000000000006AD9                 db 0BDh
.eh_frame_hdr:0000000000006ADA                 db 0FFh
.eh_frame_hdr:0000000000006ADB                 db 0FFh
.eh_frame_hdr:0000000000006ADC                 db  18h
.eh_frame_hdr:0000000000006ADD                 db    4
.eh_frame_hdr:0000000000006ADE                 db    0
.eh_frame_hdr:0000000000006ADF                 db    0
.eh_frame_hdr:0000000000006AE0                 db  14h
.eh_frame_hdr:0000000000006AE1                 db 0D0h
.eh_frame_hdr:0000000000006AE2                 db 0FFh
.eh_frame_hdr:0000000000006AE3                 db 0FFh
.eh_frame_hdr:0000000000006AE4                 db  90h
.eh_frame_hdr:0000000000006AE5                 db    4
.eh_frame_hdr:0000000000006AE6                 db    0
.eh_frame_hdr:0000000000006AE7                 db    0
.eh_frame_hdr:0000000000006AE8                 db 0C4h
.eh_frame_hdr:0000000000006AE9                 db 0D1h
.eh_frame_hdr:0000000000006AEA                 db 0FFh
.eh_frame_hdr:0000000000006AEB                 db 0FFh
.eh_frame_hdr:0000000000006AEC                 db 0FCh
.eh_frame_hdr:0000000000006AED                 db    4
.eh_frame_hdr:0000000000006AEE                 db    0
.eh_frame_hdr:0000000000006AEF                 db    0
.eh_frame_hdr:0000000000006AF0                 db    4
.eh_frame_hdr:0000000000006AF1                 db 0D2h
.eh_frame_hdr:0000000000006AF2                 db 0FFh
.eh_frame_hdr:0000000000006AF3                 db 0FFh
.eh_frame_hdr:0000000000006AF4                 db  28h ; (
.eh_frame_hdr:0000000000006AF5                 db    5
.eh_frame_hdr:0000000000006AF6                 db    0
.eh_frame_hdr:0000000000006AF7                 db    0
.eh_frame_hdr:0000000000006AF8                 db  24h ; $
.eh_frame_hdr:0000000000006AF9                 db 0D2h
.eh_frame_hdr:0000000000006AFA                 db 0FFh
.eh_frame_hdr:0000000000006AFB                 db 0FFh
.eh_frame_hdr:0000000000006AFC                 db  3Ch ; <
.eh_frame_hdr:0000000000006AFD                 db    5
.eh_frame_hdr:0000000000006AFE                 db    0
.eh_frame_hdr:0000000000006AFF                 db    0
.eh_frame_hdr:0000000000006B00                 db  44h ; D
.eh_frame_hdr:0000000000006B01                 db 0D2h
.eh_frame_hdr:0000000000006B02                 db 0FFh
.eh_frame_hdr:0000000000006B03                 db 0FFh
.eh_frame_hdr:0000000000006B04                 db  50h ; P
.eh_frame_hdr:0000000000006B05                 db    5
.eh_frame_hdr:0000000000006B06                 db    0
.eh_frame_hdr:0000000000006B07                 db    0
.eh_frame_hdr:0000000000006B08                 db  84h
.eh_frame_hdr:0000000000006B09                 db 0D2h
.eh_frame_hdr:0000000000006B0A                 db 0FFh
.eh_frame_hdr:0000000000006B0B                 db 0FFh
.eh_frame_hdr:0000000000006B0C                 db  64h ; d
.eh_frame_hdr:0000000000006B0D                 db    5
.eh_frame_hdr:0000000000006B0E                 db    0
.eh_frame_hdr:0000000000006B0F                 db    0
.eh_frame_hdr:0000000000006B10                 db 0A4h
.eh_frame_hdr:0000000000006B11                 db 0D2h
.eh_frame_hdr:0000000000006B12                 db 0FFh
.eh_frame_hdr:0000000000006B13                 db 0FFh
.eh_frame_hdr:0000000000006B14                 db  78h ; x
.eh_frame_hdr:0000000000006B15                 db    5
.eh_frame_hdr:0000000000006B16                 db    0
.eh_frame_hdr:0000000000006B17                 db    0
.eh_frame_hdr:0000000000006B18                 db 0D4h
.eh_frame_hdr:0000000000006B19                 db 0D2h
.eh_frame_hdr:0000000000006B1A                 db 0FFh
.eh_frame_hdr:0000000000006B1B                 db 0FFh
.eh_frame_hdr:0000000000006B1C                 db  8Ch
.eh_frame_hdr:0000000000006B1D                 db    5
.eh_frame_hdr:0000000000006B1E                 db    0
.eh_frame_hdr:0000000000006B1F                 db    0
.eh_frame_hdr:0000000000006B20                 db  54h ; T
.eh_frame_hdr:0000000000006B21                 db 0D3h
.eh_frame_hdr:0000000000006B22                 db 0FFh
.eh_frame_hdr:0000000000006B23                 db 0FFh
.eh_frame_hdr:0000000000006B24                 db 0E0h
.eh_frame_hdr:0000000000006B25                 db    5
.eh_frame_hdr:0000000000006B26                 db    0
.eh_frame_hdr:0000000000006B27                 db    0
.eh_frame_hdr:0000000000006B28                 db  44h ; D
.eh_frame_hdr:0000000000006B29                 db 0D4h
.eh_frame_hdr:0000000000006B2A                 db 0FFh
.eh_frame_hdr:0000000000006B2B                 db 0FFh
.eh_frame_hdr:0000000000006B2C                 db  4Ch ; L
.eh_frame_hdr:0000000000006B2D                 db    6
.eh_frame_hdr:0000000000006B2E                 db    0
.eh_frame_hdr:0000000000006B2F                 db    0
.eh_frame_hdr:0000000000006B30                 db  54h ; T
.eh_frame_hdr:0000000000006B31                 db 0D4h
.eh_frame_hdr:0000000000006B32                 db 0FFh
.eh_frame_hdr:0000000000006B33                 db 0FFh
.eh_frame_hdr:0000000000006B34                 db  60h ; `
.eh_frame_hdr:0000000000006B35                 db    6
.eh_frame_hdr:0000000000006B36                 db    0
.eh_frame_hdr:0000000000006B37                 db    0
.eh_frame_hdr:0000000000006B38                 db 0F4h
.eh_frame_hdr:0000000000006B39                 db 0D4h
.eh_frame_hdr:0000000000006B3A                 db 0FFh
.eh_frame_hdr:0000000000006B3B                 db 0FFh
.eh_frame_hdr:0000000000006B3C                 db  8Ch
.eh_frame_hdr:0000000000006B3D                 db    6
.eh_frame_hdr:0000000000006B3E                 db    0
.eh_frame_hdr:0000000000006B3F                 db    0
.eh_frame_hdr:0000000000006B40                 db  14h
.eh_frame_hdr:0000000000006B41                 db 0D5h
.eh_frame_hdr:0000000000006B42                 db 0FFh
.eh_frame_hdr:0000000000006B43                 db 0FFh
.eh_frame_hdr:0000000000006B44                 db 0A0h
.eh_frame_hdr:0000000000006B45                 db    6
.eh_frame_hdr:0000000000006B46                 db    0
.eh_frame_hdr:0000000000006B47                 db    0
.eh_frame_hdr:0000000000006B48                 db  24h ; $
.eh_frame_hdr:0000000000006B49                 db 0D5h
.eh_frame_hdr:0000000000006B4A                 db 0FFh
.eh_frame_hdr:0000000000006B4B                 db 0FFh
.eh_frame_hdr:0000000000006B4C                 db 0B4h
.eh_frame_hdr:0000000000006B4D                 db    6
.eh_frame_hdr:0000000000006B4E                 db    0
.eh_frame_hdr:0000000000006B4F                 db    0
.eh_frame_hdr:0000000000006B50                 db  44h ; D
.eh_frame_hdr:0000000000006B51                 db 0D5h
.eh_frame_hdr:0000000000006B52                 db 0FFh
.eh_frame_hdr:0000000000006B53                 db 0FFh
.eh_frame_hdr:0000000000006B54                 db 0C8h
.eh_frame_hdr:0000000000006B55                 db    6
.eh_frame_hdr:0000000000006B56                 db    0
.eh_frame_hdr:0000000000006B57                 db    0
.eh_frame_hdr:0000000000006B58                 db  64h ; d
.eh_frame_hdr:0000000000006B59                 db 0D5h
.eh_frame_hdr:0000000000006B5A                 db 0FFh
.eh_frame_hdr:0000000000006B5B                 db 0FFh
.eh_frame_hdr:0000000000006B5C                 db 0DCh
.eh_frame_hdr:0000000000006B5D                 db    6
.eh_frame_hdr:0000000000006B5E                 db    0
.eh_frame_hdr:0000000000006B5F                 db    0
.eh_frame_hdr:0000000000006B60                 db 0F4h
.eh_frame_hdr:0000000000006B61                 db 0D5h
.eh_frame_hdr:0000000000006B62                 db 0FFh
.eh_frame_hdr:0000000000006B63                 db 0FFh
.eh_frame_hdr:0000000000006B64                 db 0F8h
.eh_frame_hdr:0000000000006B65                 db    6
.eh_frame_hdr:0000000000006B66                 db    0
.eh_frame_hdr:0000000000006B67                 db    0
.eh_frame_hdr:0000000000006B68                 db  84h
.eh_frame_hdr:0000000000006B69                 db 0D6h
.eh_frame_hdr:0000000000006B6A                 db 0FFh
.eh_frame_hdr:0000000000006B6B                 db 0FFh
.eh_frame_hdr:0000000000006B6C                 db  14h
.eh_frame_hdr:0000000000006B6D                 db    7
.eh_frame_hdr:0000000000006B6E                 db    0
.eh_frame_hdr:0000000000006B6F                 db    0
.eh_frame_hdr:0000000000006B70                 db  94h
.eh_frame_hdr:0000000000006B71                 db 0D6h
.eh_frame_hdr:0000000000006B72                 db 0FFh
.eh_frame_hdr:0000000000006B73                 db 0FFh
.eh_frame_hdr:0000000000006B74                 db  28h ; (
.eh_frame_hdr:0000000000006B75                 db    7
.eh_frame_hdr:0000000000006B76                 db    0
.eh_frame_hdr:0000000000006B77                 db    0
.eh_frame_hdr:0000000000006B78                 db 0A4h
.eh_frame_hdr:0000000000006B79                 db 0D6h
.eh_frame_hdr:0000000000006B7A                 db 0FFh
.eh_frame_hdr:0000000000006B7B                 db 0FFh
.eh_frame_hdr:0000000000006B7C                 db  3Ch ; <
.eh_frame_hdr:0000000000006B7D                 db    7
.eh_frame_hdr:0000000000006B7E                 db    0
.eh_frame_hdr:0000000000006B7F                 db    0
.eh_frame_hdr:0000000000006B80                 db  44h ; D
.eh_frame_hdr:0000000000006B81                 db 0D7h
.eh_frame_hdr:0000000000006B82                 db 0FFh
.eh_frame_hdr:0000000000006B83                 db 0FFh
.eh_frame_hdr:0000000000006B84                 db  58h ; X
.eh_frame_hdr:0000000000006B85                 db    7
.eh_frame_hdr:0000000000006B86                 db    0
.eh_frame_hdr:0000000000006B87                 db    0
.eh_frame_hdr:0000000000006B88                 db  54h ; T
.eh_frame_hdr:0000000000006B89                 db 0D7h
.eh_frame_hdr:0000000000006B8A                 db 0FFh
.eh_frame_hdr:0000000000006B8B                 db 0FFh
.eh_frame_hdr:0000000000006B8C                 db  6Ch ; l
.eh_frame_hdr:0000000000006B8D                 db    7
.eh_frame_hdr:0000000000006B8E                 db    0
.eh_frame_hdr:0000000000006B8F                 db    0
.eh_frame_hdr:0000000000006B90                 db  74h ; t
.eh_frame_hdr:0000000000006B91                 db 0D7h
.eh_frame_hdr:0000000000006B92                 db 0FFh
.eh_frame_hdr:0000000000006B93                 db 0FFh
.eh_frame_hdr:0000000000006B94                 db  80h
.eh_frame_hdr:0000000000006B95                 db    7
.eh_frame_hdr:0000000000006B96                 db    0
.eh_frame_hdr:0000000000006B97                 db    0
.eh_frame_hdr:0000000000006B98                 db  84h
.eh_frame_hdr:0000000000006B99                 db 0D7h
.eh_frame_hdr:0000000000006B9A                 db 0FFh
.eh_frame_hdr:0000000000006B9B                 db 0FFh
.eh_frame_hdr:0000000000006B9C                 db  94h
.eh_frame_hdr:0000000000006B9D                 db    7
.eh_frame_hdr:0000000000006B9E                 db    0
.eh_frame_hdr:0000000000006B9F                 db    0
.eh_frame_hdr:0000000000006BA0                 db  14h
.eh_frame_hdr:0000000000006BA1                 db 0D8h
.eh_frame_hdr:0000000000006BA2                 db 0FFh
.eh_frame_hdr:0000000000006BA3                 db 0FFh
.eh_frame_hdr:0000000000006BA4                 db 0B0h
.eh_frame_hdr:0000000000006BA5                 db    7
.eh_frame_hdr:0000000000006BA6                 db    0
.eh_frame_hdr:0000000000006BA7                 db    0
.eh_frame_hdr:0000000000006BA8                 db 0B4h
.eh_frame_hdr:0000000000006BA9                 db 0D8h
.eh_frame_hdr:0000000000006BAA                 db 0FFh
.eh_frame_hdr:0000000000006BAB                 db 0FFh
.eh_frame_hdr:0000000000006BAC                 db 0CCh
.eh_frame_hdr:0000000000006BAD                 db    7
.eh_frame_hdr:0000000000006BAE                 db    0
.eh_frame_hdr:0000000000006BAF                 db    0
.eh_frame_hdr:0000000000006BB0                 db 0C4h
.eh_frame_hdr:0000000000006BB1                 db 0D8h
.eh_frame_hdr:0000000000006BB2                 db 0FFh
.eh_frame_hdr:0000000000006BB3                 db 0FFh
.eh_frame_hdr:0000000000006BB4                 db 0E0h
.eh_frame_hdr:0000000000006BB5                 db    7
.eh_frame_hdr:0000000000006BB6                 db    0
.eh_frame_hdr:0000000000006BB7                 db    0
.eh_frame_hdr:0000000000006BB8                 db 0E4h
.eh_frame_hdr:0000000000006BB9                 db 0D8h
.eh_frame_hdr:0000000000006BBA                 db 0FFh
.eh_frame_hdr:0000000000006BBB                 db 0FFh
.eh_frame_hdr:0000000000006BBC                 db 0F4h
.eh_frame_hdr:0000000000006BBD                 db    7
.eh_frame_hdr:0000000000006BBE                 db    0
.eh_frame_hdr:0000000000006BBF                 db    0
.eh_frame_hdr:0000000000006BC0                 db    4
.eh_frame_hdr:0000000000006BC1                 db 0D9h
.eh_frame_hdr:0000000000006BC2                 db 0FFh
.eh_frame_hdr:0000000000006BC3                 db 0FFh
.eh_frame_hdr:0000000000006BC4                 db    8
.eh_frame_hdr:0000000000006BC5                 db    8
.eh_frame_hdr:0000000000006BC6                 db    0
.eh_frame_hdr:0000000000006BC7                 db    0
.eh_frame_hdr:0000000000006BC8                 db  14h
.eh_frame_hdr:0000000000006BC9                 db 0D9h
.eh_frame_hdr:0000000000006BCA                 db 0FFh
.eh_frame_hdr:0000000000006BCB                 db 0FFh
.eh_frame_hdr:0000000000006BCC                 db  1Ch
.eh_frame_hdr:0000000000006BCD                 db    8
.eh_frame_hdr:0000000000006BCE                 db    0
.eh_frame_hdr:0000000000006BCF                 db    0
.eh_frame_hdr:0000000000006BD0                 db  34h ; 4
.eh_frame_hdr:0000000000006BD1                 db 0D9h
.eh_frame_hdr:0000000000006BD2                 db 0FFh
.eh_frame_hdr:0000000000006BD3                 db 0FFh
.eh_frame_hdr:0000000000006BD4                 db  30h ; 0
.eh_frame_hdr:0000000000006BD5                 db    8
.eh_frame_hdr:0000000000006BD6                 db    0
.eh_frame_hdr:0000000000006BD7                 db    0
.eh_frame_hdr:0000000000006BD8                 db  54h ; T
.eh_frame_hdr:0000000000006BD9                 db 0D9h
.eh_frame_hdr:0000000000006BDA                 db 0FFh
.eh_frame_hdr:0000000000006BDB                 db 0FFh
.eh_frame_hdr:0000000000006BDC                 db  44h ; D
.eh_frame_hdr:0000000000006BDD                 db    8
.eh_frame_hdr:0000000000006BDE                 db    0
.eh_frame_hdr:0000000000006BDF                 db    0
.eh_frame_hdr:0000000000006BE0                 db  74h ; t
.eh_frame_hdr:0000000000006BE1                 db 0D9h
.eh_frame_hdr:0000000000006BE2                 db 0FFh
.eh_frame_hdr:0000000000006BE3                 db 0FFh
.eh_frame_hdr:0000000000006BE4                 db  5Ch ; \
.eh_frame_hdr:0000000000006BE5                 db    8
.eh_frame_hdr:0000000000006BE6                 db    0
.eh_frame_hdr:0000000000006BE7                 db    0
.eh_frame_hdr:0000000000006BE8                 db  94h
.eh_frame_hdr:0000000000006BE9                 db 0DDh
.eh_frame_hdr:0000000000006BEA                 db 0FFh
.eh_frame_hdr:0000000000006BEB                 db 0FFh
.eh_frame_hdr:0000000000006BEC                 db  70h ; p
.eh_frame_hdr:0000000000006BED                 db    9
.eh_frame_hdr:0000000000006BEE                 db    0
.eh_frame_hdr:0000000000006BEF                 db    0
.eh_frame_hdr:0000000000006BF0                 db 0B4h
.eh_frame_hdr:0000000000006BF1                 db 0DDh
.eh_frame_hdr:0000000000006BF2                 db 0FFh
.eh_frame_hdr:0000000000006BF3                 db 0FFh
.eh_frame_hdr:0000000000006BF4                 db  84h
.eh_frame_hdr:0000000000006BF5                 db    9
.eh_frame_hdr:0000000000006BF6                 db    0
.eh_frame_hdr:0000000000006BF7                 db    0
.eh_frame_hdr:0000000000006BF8                 db  34h ; 4
.eh_frame_hdr:0000000000006BF9                 db 0DEh
.eh_frame_hdr:0000000000006BFA                 db 0FFh
.eh_frame_hdr:0000000000006BFB                 db 0FFh
.eh_frame_hdr:0000000000006BFC                 db 0A0h
.eh_frame_hdr:0000000000006BFD                 db    9
.eh_frame_hdr:0000000000006BFE                 db    0
.eh_frame_hdr:0000000000006BFF                 db    0
.eh_frame_hdr:0000000000006C00                 db  14h
.eh_frame_hdr:0000000000006C01                 db 0DFh
.eh_frame_hdr:0000000000006C02                 db 0FFh
.eh_frame_hdr:0000000000006C03                 db 0FFh
.eh_frame_hdr:0000000000006C04                 db 0CCh
.eh_frame_hdr:0000000000006C05                 db    9
.eh_frame_hdr:0000000000006C06                 db    0
.eh_frame_hdr:0000000000006C07                 db    0
.eh_frame_hdr:0000000000006C08                 db  94h
.eh_frame_hdr:0000000000006C09                 db 0DFh
.eh_frame_hdr:0000000000006C0A                 db 0FFh
.eh_frame_hdr:0000000000006C0B                 db 0FFh
.eh_frame_hdr:0000000000006C0C                 db 0ECh
.eh_frame_hdr:0000000000006C0D                 db    9
.eh_frame_hdr:0000000000006C0E                 db    0
.eh_frame_hdr:0000000000006C0F                 db    0
.eh_frame_hdr:0000000000006C10                 db 0B4h
.eh_frame_hdr:0000000000006C11                 db 0DFh
.eh_frame_hdr:0000000000006C12                 db 0FFh
.eh_frame_hdr:0000000000006C13                 db 0FFh
.eh_frame_hdr:0000000000006C14                 db    8
.eh_frame_hdr:0000000000006C15                 db  0Ah
.eh_frame_hdr:0000000000006C16                 db    0
.eh_frame_hdr:0000000000006C17                 db    0
.eh_frame_hdr:0000000000006C18                 db 0E4h
.eh_frame_hdr:0000000000006C19                 db 0DFh
.eh_frame_hdr:0000000000006C1A                 db 0FFh
.eh_frame_hdr:0000000000006C1B                 db 0FFh
.eh_frame_hdr:0000000000006C1C                 db  1Ch
.eh_frame_hdr:0000000000006C1D                 db  0Ah
.eh_frame_hdr:0000000000006C1E                 db    0
.eh_frame_hdr:0000000000006C1F                 db    0
.eh_frame_hdr:0000000000006C20                 db 0F4h
.eh_frame_hdr:0000000000006C21                 db 0DFh
.eh_frame_hdr:0000000000006C22                 db 0FFh
.eh_frame_hdr:0000000000006C23                 db 0FFh
.eh_frame_hdr:0000000000006C24                 db  30h ; 0
.eh_frame_hdr:0000000000006C25                 db  0Ah
.eh_frame_hdr:0000000000006C26                 db    0
.eh_frame_hdr:0000000000006C27                 db    0
.eh_frame_hdr:0000000000006C28                 db  34h ; 4
.eh_frame_hdr:0000000000006C29                 db 0E0h
.eh_frame_hdr:0000000000006C2A                 db 0FFh
.eh_frame_hdr:0000000000006C2B                 db 0FFh
.eh_frame_hdr:0000000000006C2C                 db  54h ; T
.eh_frame_hdr:0000000000006C2D                 db  0Ah
.eh_frame_hdr:0000000000006C2E                 db    0
.eh_frame_hdr:0000000000006C2F                 db    0
.eh_frame_hdr:0000000000006C30                 db  64h ; d
.eh_frame_hdr:0000000000006C31                 db 0E0h
.eh_frame_hdr:0000000000006C32                 db 0FFh
.eh_frame_hdr:0000000000006C33                 db 0FFh
.eh_frame_hdr:0000000000006C34                 db  68h ; h
.eh_frame_hdr:0000000000006C35                 db  0Ah
.eh_frame_hdr:0000000000006C36                 db    0
.eh_frame_hdr:0000000000006C37                 db    0
.eh_frame_hdr:0000000000006C38                 db 0F4h
.eh_frame_hdr:0000000000006C39                 db 0E0h
.eh_frame_hdr:0000000000006C3A                 db 0FFh
.eh_frame_hdr:0000000000006C3B                 db 0FFh
.eh_frame_hdr:0000000000006C3C                 db  80h
.eh_frame_hdr:0000000000006C3D                 db  0Ah
.eh_frame_hdr:0000000000006C3E                 db    0
.eh_frame_hdr:0000000000006C3F                 db    0
.eh_frame_hdr:0000000000006C40                 db  44h ; D
.eh_frame_hdr:0000000000006C41                 db 0E1h
.eh_frame_hdr:0000000000006C42                 db 0FFh
.eh_frame_hdr:0000000000006C43                 db 0FFh
.eh_frame_hdr:0000000000006C44                 db  98h
.eh_frame_hdr:0000000000006C45                 db  0Ah
.eh_frame_hdr:0000000000006C46                 db    0
.eh_frame_hdr:0000000000006C47                 db    0
.eh_frame_hdr:0000000000006C48                 db  64h ; d
.eh_frame_hdr:0000000000006C49                 db 0E1h
.eh_frame_hdr:0000000000006C4A                 db 0FFh
.eh_frame_hdr:0000000000006C4B                 db 0FFh
.eh_frame_hdr:0000000000006C4C                 db 0B4h
.eh_frame_hdr:0000000000006C4D                 db  0Ah
.eh_frame_hdr:0000000000006C4E                 db    0
.eh_frame_hdr:0000000000006C4F                 db    0
.eh_frame_hdr:0000000000006C50                 db  94h
.eh_frame_hdr:0000000000006C51                 db 0E1h
.eh_frame_hdr:0000000000006C52                 db 0FFh
.eh_frame_hdr:0000000000006C53                 db 0FFh
.eh_frame_hdr:0000000000006C54                 db 0D0h
.eh_frame_hdr:0000000000006C55                 db  0Ah
.eh_frame_hdr:0000000000006C56                 db    0
.eh_frame_hdr:0000000000006C57                 db    0
.eh_frame_hdr:0000000000006C58                 db 0C4h
.eh_frame_hdr:0000000000006C59                 db 0E1h
.eh_frame_hdr:0000000000006C5A                 db 0FFh
.eh_frame_hdr:0000000000006C5B                 db 0FFh
.eh_frame_hdr:0000000000006C5C                 db 0F8h
.eh_frame_hdr:0000000000006C5D                 db  0Ah
.eh_frame_hdr:0000000000006C5E                 db    0
.eh_frame_hdr:0000000000006C5F                 db    0
.eh_frame_hdr:0000000000006C60                 db 0E4h
.eh_frame_hdr:0000000000006C61                 db 0E1h
.eh_frame_hdr:0000000000006C62                 db 0FFh
.eh_frame_hdr:0000000000006C63                 db 0FFh
.eh_frame_hdr:0000000000006C64                 db  14h
.eh_frame_hdr:0000000000006C65                 db  0Bh
.eh_frame_hdr:0000000000006C66                 db    0
.eh_frame_hdr:0000000000006C67                 db    0
.eh_frame_hdr:0000000000006C68                 db  24h ; $
.eh_frame_hdr:0000000000006C69                 db 0E2h
.eh_frame_hdr:0000000000006C6A                 db 0FFh
.eh_frame_hdr:0000000000006C6B                 db 0FFh
.eh_frame_hdr:0000000000006C6C                 db  2Ch ; ,
.eh_frame_hdr:0000000000006C6D                 db  0Bh
.eh_frame_hdr:0000000000006C6E                 db    0
.eh_frame_hdr:0000000000006C6F                 db    0
.eh_frame_hdr:0000000000006C70                 db  44h ; D
.eh_frame_hdr:0000000000006C71                 db 0E3h
.eh_frame_hdr:0000000000006C72                 db 0FFh
.eh_frame_hdr:0000000000006C73                 db 0FFh
.eh_frame_hdr:0000000000006C74                 db  78h ; x
.eh_frame_hdr:0000000000006C75                 db  0Bh
.eh_frame_hdr:0000000000006C76                 db    0
.eh_frame_hdr:0000000000006C77                 db    0
.eh_frame_hdr:0000000000006C78                 db  74h ; t
.eh_frame_hdr:0000000000006C79                 db 0E3h
.eh_frame_hdr:0000000000006C7A                 db 0FFh
.eh_frame_hdr:0000000000006C7B                 db 0FFh
.eh_frame_hdr:0000000000006C7C                 db  94h
.eh_frame_hdr:0000000000006C7D                 db  0Bh
.eh_frame_hdr:0000000000006C7E                 db    0
.eh_frame_hdr:0000000000006C7F                 db    0
.eh_frame_hdr:0000000000006C80                 db  34h ; 4
.eh_frame_hdr:0000000000006C81                 db 0EAh
.eh_frame_hdr:0000000000006C82                 db 0FFh
.eh_frame_hdr:0000000000006C83                 db 0FFh
.eh_frame_hdr:0000000000006C84                 db 0E4h
.eh_frame_hdr:0000000000006C85                 db  0Bh
.eh_frame_hdr:0000000000006C86                 db    0
.eh_frame_hdr:0000000000006C87                 db    0
.eh_frame_hdr:0000000000006C88                 db 0C4h
.eh_frame_hdr:0000000000006C89                 db 0EAh
.eh_frame_hdr:0000000000006C8A                 db 0FFh
.eh_frame_hdr:0000000000006C8B                 db 0FFh
.eh_frame_hdr:0000000000006C8C                 db  24h ; $
.eh_frame_hdr:0000000000006C8D                 db  0Ch
.eh_frame_hdr:0000000000006C8E                 db    0
.eh_frame_hdr:0000000000006C8F                 db    0
.eh_frame_hdr:0000000000006C90                 db  44h ; D
.eh_frame_hdr:0000000000006C91                 db 0EBh
.eh_frame_hdr:0000000000006C92                 db 0FFh
.eh_frame_hdr:0000000000006C93                 db 0FFh
.eh_frame_hdr:0000000000006C94                 db  74h ; t
.eh_frame_hdr:0000000000006C95                 db  0Ch
.eh_frame_hdr:0000000000006C96                 db    0
.eh_frame_hdr:0000000000006C97                 db    0
.eh_frame_hdr:0000000000006C98                 db 0A4h
.eh_frame_hdr:0000000000006C99                 db 0EBh
.eh_frame_hdr:0000000000006C9A                 db 0FFh
.eh_frame_hdr:0000000000006C9B                 db 0FFh
.eh_frame_hdr:0000000000006C9C                 db  94h
.eh_frame_hdr:0000000000006C9D                 db  0Ch
.eh_frame_hdr:0000000000006C9E                 db    0
.eh_frame_hdr:0000000000006C9F                 db    0
.eh_frame_hdr:0000000000006CA0                 db 0E4h
.eh_frame_hdr:0000000000006CA1                 db 0EBh
.eh_frame_hdr:0000000000006CA2                 db 0FFh
.eh_frame_hdr:0000000000006CA3                 db 0FFh
.eh_frame_hdr:0000000000006CA4                 db 0B4h
.eh_frame_hdr:0000000000006CA5                 db  0Ch
.eh_frame_hdr:0000000000006CA6                 db    0
.eh_frame_hdr:0000000000006CA7                 db    0
.eh_frame_hdr:0000000000006CA8                 db  64h ; d
.eh_frame_hdr:0000000000006CA9                 db 0ECh
.eh_frame_hdr:0000000000006CAA                 db 0FFh
.eh_frame_hdr:0000000000006CAB                 db 0FFh
.eh_frame_hdr:0000000000006CAC                 db 0ECh
.eh_frame_hdr:0000000000006CAD                 db  0Ch
.eh_frame_hdr:0000000000006CAE                 db    0
.eh_frame_hdr:0000000000006CAF                 db    0
.eh_frame_hdr:0000000000006CB0                 db 0A4h
.eh_frame_hdr:0000000000006CB1                 db 0ECh
.eh_frame_hdr:0000000000006CB2                 db 0FFh
.eh_frame_hdr:0000000000006CB3                 db 0FFh
.eh_frame_hdr:0000000000006CB4                 db  0Ch
.eh_frame_hdr:0000000000006CB5                 db  0Dh
.eh_frame_hdr:0000000000006CB6                 db    0
.eh_frame_hdr:0000000000006CB7                 db    0
.eh_frame_hdr:0000000000006CB8                 db    4
.eh_frame_hdr:0000000000006CB9                 db 0EDh
.eh_frame_hdr:0000000000006CBA                 db 0FFh
.eh_frame_hdr:0000000000006CBB                 db 0FFh
.eh_frame_hdr:0000000000006CBC                 db  3Ch ; <
.eh_frame_hdr:0000000000006CBD                 db  0Dh
.eh_frame_hdr:0000000000006CBE                 db    0
.eh_frame_hdr:0000000000006CBF                 db    0
.eh_frame_hdr:0000000000006CC0                 db  74h ; t
.eh_frame_hdr:0000000000006CC1                 db 0EDh
.eh_frame_hdr:0000000000006CC2                 db 0FFh
.eh_frame_hdr:0000000000006CC3                 db 0FFh
.eh_frame_hdr:0000000000006CC4                 db  84h
.eh_frame_hdr:0000000000006CC5                 db  0Dh
.eh_frame_hdr:0000000000006CC6                 db    0
.eh_frame_hdr:0000000000006CC7                 db    0
.eh_frame_hdr:0000000000006CC8                 db  84h
.eh_frame_hdr:0000000000006CC9                 db 0EDh
.eh_frame_hdr:0000000000006CCA                 db 0FFh
.eh_frame_hdr:0000000000006CCB                 db 0FFh
.eh_frame_hdr:0000000000006CCC                 db  9Ch
.eh_frame_hdr:0000000000006CCD                 db  0Dh
.eh_frame_hdr:0000000000006CCE                 db    0
.eh_frame_hdr:0000000000006CCF                 db    0
.eh_frame_hdr:0000000000006CCF _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006CCF
.eh_frame:0000000000006CD0 ; ===========================================================================
.eh_frame:0000000000006CD0
.eh_frame:0000000000006CD0 ; Segment type: Pure data
.eh_frame:0000000000006CD0 ; Segment permissions: Read
.eh_frame:0000000000006CD0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006CD0                 assume cs:_eh_frame
.eh_frame:0000000000006CD0                 ;org 6CD0h
.eh_frame:0000000000006CD0                 db  14h
.eh_frame:0000000000006CD1                 db    0
.eh_frame:0000000000006CD2                 db    0
.eh_frame:0000000000006CD3                 db    0
.eh_frame:0000000000006CD4                 db    0
.eh_frame:0000000000006CD5                 db    0
.eh_frame:0000000000006CD6                 db    0
.eh_frame:0000000000006CD7                 db    0
.eh_frame:0000000000006CD8                 db    1
.eh_frame:0000000000006CD9                 db  7Ah ; z
.eh_frame:0000000000006CDA                 db  52h ; R
.eh_frame:0000000000006CDB                 db    0
.eh_frame:0000000000006CDC                 db    1
.eh_frame:0000000000006CDD                 db  78h ; x
.eh_frame:0000000000006CDE                 db  10h
.eh_frame:0000000000006CDF                 db    1
.eh_frame:0000000000006CE0                 db  1Bh
.eh_frame:0000000000006CE1                 db  0Ch
.eh_frame:0000000000006CE2                 db    7
.eh_frame:0000000000006CE3                 db    8
.eh_frame:0000000000006CE4                 db  90h
.eh_frame:0000000000006CE5                 db    1
.eh_frame:0000000000006CE6                 db    7
.eh_frame:0000000000006CE7                 db  10h
.eh_frame:0000000000006CE8                 db  14h
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db  1Ch
.eh_frame:0000000000006CED                 db    0
.eh_frame:0000000000006CEE                 db    0
.eh_frame:0000000000006CEF                 db    0
.eh_frame:0000000000006CF0                 db 0D0h
.eh_frame:0000000000006CF1                 db 0B3h
.eh_frame:0000000000006CF2                 db 0FFh
.eh_frame:0000000000006CF3                 db 0FFh
.eh_frame:0000000000006CF4                 db  2Bh ; +
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db    0
.eh_frame:0000000000006CF9                 db    0
.eh_frame:0000000000006CFA                 db    0
.eh_frame:0000000000006CFB                 db    0
.eh_frame:0000000000006CFC                 db    0
.eh_frame:0000000000006CFD                 db    0
.eh_frame:0000000000006CFE                 db    0
.eh_frame:0000000000006CFF                 db    0
.eh_frame:0000000000006D00                 db  14h
.eh_frame:0000000000006D01                 db    0
.eh_frame:0000000000006D02                 db    0
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db    0
.eh_frame:0000000000006D05                 db    0
.eh_frame:0000000000006D06                 db    0
.eh_frame:0000000000006D07                 db    0
.eh_frame:0000000000006D08                 db    1
.eh_frame:0000000000006D09                 db  7Ah ; z
.eh_frame:0000000000006D0A                 db  52h ; R
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db    1
.eh_frame:0000000000006D0D                 db  78h ; x
.eh_frame:0000000000006D0E                 db  10h
.eh_frame:0000000000006D0F                 db    1
.eh_frame:0000000000006D10                 db  1Bh
.eh_frame:0000000000006D11                 db  0Ch
.eh_frame:0000000000006D12                 db    7
.eh_frame:0000000000006D13                 db    8
.eh_frame:0000000000006D14                 db  90h
.eh_frame:0000000000006D15                 db    1
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D18                 db  24h ; $
.eh_frame:0000000000006D19                 db    0
.eh_frame:0000000000006D1A                 db    0
.eh_frame:0000000000006D1B                 db    0
.eh_frame:0000000000006D1C                 db  1Ch
.eh_frame:0000000000006D1D                 db    0
.eh_frame:0000000000006D1E                 db    0
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db 0B0h
.eh_frame:0000000000006D21                 db 0A6h
.eh_frame:0000000000006D22                 db 0FFh
.eh_frame:0000000000006D23                 db 0FFh
.eh_frame:0000000000006D24                 db    0
.eh_frame:0000000000006D25                 db    3
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db    0
.eh_frame:0000000000006D29                 db  0Eh
.eh_frame:0000000000006D2A                 db  10h
.eh_frame:0000000000006D2B                 db  46h ; F
.eh_frame:0000000000006D2C                 db  0Eh
.eh_frame:0000000000006D2D                 db  18h
.eh_frame:0000000000006D2E                 db  4Ah ; J
.eh_frame:0000000000006D2F                 db  0Fh
.eh_frame:0000000000006D30                 db  0Bh
.eh_frame:0000000000006D31                 db  77h ; w
.eh_frame:0000000000006D32                 db    8
.eh_frame:0000000000006D33                 db  80h
.eh_frame:0000000000006D34                 db    0
.eh_frame:0000000000006D35                 db  3Fh ; ?
.eh_frame:0000000000006D36                 db  1Ah
.eh_frame:0000000000006D37                 db  3Bh ; ;
.eh_frame:0000000000006D38                 db  2Ah ; *
.eh_frame:0000000000006D39                 db  33h ; 3
.eh_frame:0000000000006D3A                 db  24h ; $
.eh_frame:0000000000006D3B                 db  22h ; "
.eh_frame:0000000000006D3C                 db    0
.eh_frame:0000000000006D3D                 db    0
.eh_frame:0000000000006D3E                 db    0
.eh_frame:0000000000006D3F                 db    0
.eh_frame:0000000000006D40                 db  14h
.eh_frame:0000000000006D41                 db    0
.eh_frame:0000000000006D42                 db    0
.eh_frame:0000000000006D43                 db    0
.eh_frame:0000000000006D44                 db  44h ; D
.eh_frame:0000000000006D45                 db    0
.eh_frame:0000000000006D46                 db    0
.eh_frame:0000000000006D47                 db    0
.eh_frame:0000000000006D48                 db  88h
.eh_frame:0000000000006D49                 db 0A9h
.eh_frame:0000000000006D4A                 db 0FFh
.eh_frame:0000000000006D4B                 db 0FFh
.eh_frame:0000000000006D4C                 db    8
.eh_frame:0000000000006D4D                 db    0
.eh_frame:0000000000006D4E                 db    0
.eh_frame:0000000000006D4F                 db    0
.eh_frame:0000000000006D50                 db    0
.eh_frame:0000000000006D51                 db    0
.eh_frame:0000000000006D52                 db    0
.eh_frame:0000000000006D53                 db    0
.eh_frame:0000000000006D54                 db    0
.eh_frame:0000000000006D55                 db    0
.eh_frame:0000000000006D56                 db    0
.eh_frame:0000000000006D57                 db    0
.eh_frame:0000000000006D58                 db  28h ; (
.eh_frame:0000000000006D59                 db    0
.eh_frame:0000000000006D5A                 db    0
.eh_frame:0000000000006D5B                 db    0
.eh_frame:0000000000006D5C                 db  5Ch ; \
.eh_frame:0000000000006D5D                 db    0
.eh_frame:0000000000006D5E                 db    0
.eh_frame:0000000000006D5F                 db    0
.eh_frame:0000000000006D60                 db  70h ; p
.eh_frame:0000000000006D61                 db 0B4h
.eh_frame:0000000000006D62                 db 0FFh
.eh_frame:0000000000006D63                 db 0FFh
.eh_frame:0000000000006D64                 db  1Ah
.eh_frame:0000000000006D65                 db    4
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db    0
.eh_frame:0000000000006D69                 db  42h ; B
.eh_frame:0000000000006D6A                 db  0Eh
.eh_frame:0000000000006D6B                 db  10h
.eh_frame:0000000000006D6C                 db  8Dh
.eh_frame:0000000000006D6D                 db    2
.eh_frame:0000000000006D6E                 db  42h ; B
.eh_frame:0000000000006D6F                 db  0Eh
.eh_frame:0000000000006D70                 db  18h
.eh_frame:0000000000006D71                 db  8Ch
.eh_frame:0000000000006D72                 db    3
.eh_frame:0000000000006D73                 db  46h ; F
.eh_frame:0000000000006D74                 db  0Eh
.eh_frame:0000000000006D75                 db  20h
.eh_frame:0000000000006D76                 db  86h
.eh_frame:0000000000006D77                 db    4
.eh_frame:0000000000006D78                 db  41h ; A
.eh_frame:0000000000006D79                 db  0Eh
.eh_frame:0000000000006D7A                 db  28h ; (
.eh_frame:0000000000006D7B                 db  83h
.eh_frame:0000000000006D7C                 db    5
.eh_frame:0000000000006D7D                 db  49h ; I
.eh_frame:0000000000006D7E                 db  0Eh
.eh_frame:0000000000006D7F                 db 0B0h
.eh_frame:0000000000006D80                 db    1
.eh_frame:0000000000006D81                 db    0
.eh_frame:0000000000006D82                 db    0
.eh_frame:0000000000006D83                 db    0
.eh_frame:0000000000006D84                 db  50h ; P
.eh_frame:0000000000006D85                 db    0
.eh_frame:0000000000006D86                 db    0
.eh_frame:0000000000006D87                 db    0
.eh_frame:0000000000006D88                 db  88h
.eh_frame:0000000000006D89                 db    0
.eh_frame:0000000000006D8A                 db    0
.eh_frame:0000000000006D8B                 db    0
.eh_frame:0000000000006D8C                 db  54h ; T
.eh_frame:0000000000006D8D                 db 0A9h
.eh_frame:0000000000006D8E                 db 0FFh
.eh_frame:0000000000006D8F                 db 0FFh
.eh_frame:0000000000006D90                 db 0D9h
.eh_frame:0000000000006D91                 db    9
.eh_frame:0000000000006D92                 db    0
.eh_frame:0000000000006D93                 db    0
.eh_frame:0000000000006D94                 db    0
.eh_frame:0000000000006D95                 db  42h ; B
.eh_frame:0000000000006D96                 db  0Eh
.eh_frame:0000000000006D97                 db  10h
.eh_frame:0000000000006D98                 db  8Fh
.eh_frame:0000000000006D99                 db    2
.eh_frame:0000000000006D9A                 db  42h ; B
.eh_frame:0000000000006D9B                 db  0Eh
.eh_frame:0000000000006D9C                 db  18h
.eh_frame:0000000000006D9D                 db  8Eh
.eh_frame:0000000000006D9E                 db    3
.eh_frame:0000000000006D9F                 db  42h ; B
.eh_frame:0000000000006DA0                 db  0Eh
.eh_frame:0000000000006DA1                 db  20h
.eh_frame:0000000000006DA2                 db  8Dh
.eh_frame:0000000000006DA3                 db    4
.eh_frame:0000000000006DA4                 db  42h ; B
.eh_frame:0000000000006DA5                 db  0Eh
.eh_frame:0000000000006DA6                 db  28h ; (
.eh_frame:0000000000006DA7                 db  8Ch
.eh_frame:0000000000006DA8                 db    5
.eh_frame:0000000000006DA9                 db  44h ; D
.eh_frame:0000000000006DAA                 db  0Eh
.eh_frame:0000000000006DAB                 db  30h ; 0
.eh_frame:0000000000006DAC                 db  86h
.eh_frame:0000000000006DAD                 db    6
.eh_frame:0000000000006DAE                 db  41h ; A
.eh_frame:0000000000006DAF                 db  0Eh
.eh_frame:0000000000006DB0                 db  38h ; 8
.eh_frame:0000000000006DB1                 db  83h
.eh_frame:0000000000006DB2                 db    7
.eh_frame:0000000000006DB3                 db  4Fh ; O
.eh_frame:0000000000006DB4                 db  0Eh
.eh_frame:0000000000006DB5                 db  90h
.eh_frame:0000000000006DB6                 db    2
.eh_frame:0000000000006DB7                 db    3
.eh_frame:0000000000006DB8                 db  5Fh ; _
.eh_frame:0000000000006DB9                 db    7
.eh_frame:0000000000006DBA                 db  0Ah
.eh_frame:0000000000006DBB                 db  0Eh
.eh_frame:0000000000006DBC                 db  38h ; 8
.eh_frame:0000000000006DBD                 db  41h ; A
.eh_frame:0000000000006DBE                 db  0Eh
.eh_frame:0000000000006DBF                 db  30h ; 0
.eh_frame:0000000000006DC0                 db  41h ; A
.eh_frame:0000000000006DC1                 db  0Eh
.eh_frame:0000000000006DC2                 db  28h ; (
.eh_frame:0000000000006DC3                 db  42h ; B
.eh_frame:0000000000006DC4                 db  0Eh
.eh_frame:0000000000006DC5                 db  20h
.eh_frame:0000000000006DC6                 db  42h ; B
.eh_frame:0000000000006DC7                 db  0Eh
.eh_frame:0000000000006DC8                 db  18h
.eh_frame:0000000000006DC9                 db  42h ; B
.eh_frame:0000000000006DCA                 db  0Eh
.eh_frame:0000000000006DCB                 db  10h
.eh_frame:0000000000006DCC                 db  42h ; B
.eh_frame:0000000000006DCD                 db  0Eh
.eh_frame:0000000000006DCE                 db    8
.eh_frame:0000000000006DCF                 db  41h ; A
.eh_frame:0000000000006DD0                 db  0Bh
.eh_frame:0000000000006DD1                 db    0
.eh_frame:0000000000006DD2                 db    0
.eh_frame:0000000000006DD3                 db    0
.eh_frame:0000000000006DD4                 db    0
.eh_frame:0000000000006DD5                 db    0
.eh_frame:0000000000006DD6                 db    0
.eh_frame:0000000000006DD7                 db    0
.eh_frame:0000000000006DD8                 db  10h
.eh_frame:0000000000006DD9                 db    0
.eh_frame:0000000000006DDA                 db    0
.eh_frame:0000000000006DDB                 db    0
.eh_frame:0000000000006DDC                 db 0DCh
.eh_frame:0000000000006DDD                 db    0
.eh_frame:0000000000006DDE                 db    0
.eh_frame:0000000000006DDF                 db    0
.eh_frame:0000000000006DE0                 db  10h
.eh_frame:0000000000006DE1                 db 0B8h
.eh_frame:0000000000006DE2                 db 0FFh
.eh_frame:0000000000006DE3                 db 0FFh
.eh_frame:0000000000006DE4                 db    8
.eh_frame:0000000000006DE5                 db    0
.eh_frame:0000000000006DE6                 db    0
.eh_frame:0000000000006DE7                 db    0
.eh_frame:0000000000006DE8                 db    0
.eh_frame:0000000000006DE9                 db    0
.eh_frame:0000000000006DEA                 db    0
.eh_frame:0000000000006DEB                 db    0
.eh_frame:0000000000006DEC                 db  10h
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db 0F0h
.eh_frame:0000000000006DF1                 db    0
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db  0Ch
.eh_frame:0000000000006DF5                 db 0B8h
.eh_frame:0000000000006DF6                 db 0FFh
.eh_frame:0000000000006DF7                 db 0FFh
.eh_frame:0000000000006DF8                 db    8
.eh_frame:0000000000006DF9                 db    0
.eh_frame:0000000000006DFA                 db    0
.eh_frame:0000000000006DFB                 db    0
.eh_frame:0000000000006DFC                 db    0
.eh_frame:0000000000006DFD                 db    0
.eh_frame:0000000000006DFE                 db    0
.eh_frame:0000000000006DFF                 db    0
.eh_frame:0000000000006E00                 db  2Ch ; ,
.eh_frame:0000000000006E01                 db    0
.eh_frame:0000000000006E02                 db    0
.eh_frame:0000000000006E03                 db    0
.eh_frame:0000000000006E04                 db    4
.eh_frame:0000000000006E05                 db    1
.eh_frame:0000000000006E06                 db    0
.eh_frame:0000000000006E07                 db    0
.eh_frame:0000000000006E08                 db    8
.eh_frame:0000000000006E09                 db 0B8h
.eh_frame:0000000000006E0A                 db 0FFh
.eh_frame:0000000000006E0B                 db 0FFh
.eh_frame:0000000000006E0C                 db 0A4h
.eh_frame:0000000000006E0D                 db    0
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db    0
.eh_frame:0000000000006E11                 db  41h ; A
.eh_frame:0000000000006E12                 db  0Eh
.eh_frame:0000000000006E13                 db  10h
.eh_frame:0000000000006E14                 db  86h
.eh_frame:0000000000006E15                 db    2
.eh_frame:0000000000006E16                 db  41h ; A
.eh_frame:0000000000006E17                 db  0Eh
.eh_frame:0000000000006E18                 db  18h
.eh_frame:0000000000006E19                 db  83h
.eh_frame:0000000000006E1A                 db    3
.eh_frame:0000000000006E1B                 db  44h ; D
.eh_frame:0000000000006E1C                 db  0Eh
.eh_frame:0000000000006E1D                 db  20h
.eh_frame:0000000000006E1E                 db  7Ah ; z
.eh_frame:0000000000006E1F                 db  0Ah
.eh_frame:0000000000006E20                 db  0Eh
.eh_frame:0000000000006E21                 db  18h
.eh_frame:0000000000006E22                 db  41h ; A
.eh_frame:0000000000006E23                 db  0Eh
.eh_frame:0000000000006E24                 db  10h
.eh_frame:0000000000006E25                 db  41h ; A
.eh_frame:0000000000006E26                 db  0Eh
.eh_frame:0000000000006E27                 db    8
.eh_frame:0000000000006E28                 db  41h ; A
.eh_frame:0000000000006E29                 db  0Bh
.eh_frame:0000000000006E2A                 db    0
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db    0
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db  1Ch
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db  34h ; 4
.eh_frame:0000000000006E35                 db    1
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db  88h
.eh_frame:0000000000006E39                 db 0B8h
.eh_frame:0000000000006E3A                 db 0FFh
.eh_frame:0000000000006E3B                 db 0FFh
.eh_frame:0000000000006E3C                 db  9Fh
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db    0
.eh_frame:0000000000006E41                 db  44h ; D
.eh_frame:0000000000006E42                 db  0Eh
.eh_frame:0000000000006E43                 db  10h
.eh_frame:0000000000006E44                 db  83h
.eh_frame:0000000000006E45                 db    2
.eh_frame:0000000000006E46                 db    2
.eh_frame:0000000000006E47                 db  78h ; x
.eh_frame:0000000000006E48                 db  0Ah
.eh_frame:0000000000006E49                 db  0Eh
.eh_frame:0000000000006E4A                 db    8
.eh_frame:0000000000006E4B                 db  41h ; A
.eh_frame:0000000000006E4C                 db  0Bh
.eh_frame:0000000000006E4D                 db    0
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db  40h ; @
.eh_frame:0000000000006E51                 db    0
.eh_frame:0000000000006E52                 db    0
.eh_frame:0000000000006E53                 db    0
.eh_frame:0000000000006E54                 db  54h ; T
.eh_frame:0000000000006E55                 db    1
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db    8
.eh_frame:0000000000006E59                 db 0B9h
.eh_frame:0000000000006E5A                 db 0FFh
.eh_frame:0000000000006E5B                 db 0FFh
.eh_frame:0000000000006E5C                 db 0E7h
.eh_frame:0000000000006E5D                 db    0
.eh_frame:0000000000006E5E                 db    0
.eh_frame:0000000000006E5F                 db    0
.eh_frame:0000000000006E60                 db    0
.eh_frame:0000000000006E61                 db  41h ; A
.eh_frame:0000000000006E62                 db  0Eh
.eh_frame:0000000000006E63                 db  10h
.eh_frame:0000000000006E64                 db  86h
.eh_frame:0000000000006E65                 db    2
.eh_frame:0000000000006E66                 db  41h ; A
.eh_frame:0000000000006E67                 db  0Eh
.eh_frame:0000000000006E68                 db  18h
.eh_frame:0000000000006E69                 db  83h
.eh_frame:0000000000006E6A                 db    3
.eh_frame:0000000000006E6B                 db  49h ; I
.eh_frame:0000000000006E6C                 db  0Eh
.eh_frame:0000000000006E6D                 db  20h
.eh_frame:0000000000006E6E                 db  6Eh ; n
.eh_frame:0000000000006E6F                 db  0Ah
.eh_frame:0000000000006E70                 db  0Eh
.eh_frame:0000000000006E71                 db  18h
.eh_frame:0000000000006E72                 db  41h ; A
.eh_frame:0000000000006E73                 db  0Eh
.eh_frame:0000000000006E74                 db  10h
.eh_frame:0000000000006E75                 db  41h ; A
.eh_frame:0000000000006E76                 db  0Eh
.eh_frame:0000000000006E77                 db    8
.eh_frame:0000000000006E78                 db  45h ; E
.eh_frame:0000000000006E79                 db  0Bh
.eh_frame:0000000000006E7A                 db    2
.eh_frame:0000000000006E7B                 db  4Ah ; J
.eh_frame:0000000000006E7C                 db  0Ah
.eh_frame:0000000000006E7D                 db  0Eh
.eh_frame:0000000000006E7E                 db  18h
.eh_frame:0000000000006E7F                 db  41h ; A
.eh_frame:0000000000006E80                 db  0Eh
.eh_frame:0000000000006E81                 db  10h
.eh_frame:0000000000006E82                 db  41h ; A
.eh_frame:0000000000006E83                 db  0Eh
.eh_frame:0000000000006E84                 db    8
.eh_frame:0000000000006E85                 db  44h ; D
.eh_frame:0000000000006E86                 db  0Bh
.eh_frame:0000000000006E87                 db    2
.eh_frame:0000000000006E88                 db  54h ; T
.eh_frame:0000000000006E89                 db  0Eh
.eh_frame:0000000000006E8A                 db  18h
.eh_frame:0000000000006E8B                 db  41h ; A
.eh_frame:0000000000006E8C                 db  0Eh
.eh_frame:0000000000006E8D                 db  10h
.eh_frame:0000000000006E8E                 db  41h ; A
.eh_frame:0000000000006E8F                 db  0Eh
.eh_frame:0000000000006E90                 db    8
.eh_frame:0000000000006E91                 db    0
.eh_frame:0000000000006E92                 db    0
.eh_frame:0000000000006E93                 db    0
.eh_frame:0000000000006E94                 db  74h ; t
.eh_frame:0000000000006E95                 db    0
.eh_frame:0000000000006E96                 db    0
.eh_frame:0000000000006E97                 db    0
.eh_frame:0000000000006E98                 db  98h
.eh_frame:0000000000006E99                 db    1
.eh_frame:0000000000006E9A                 db    0
.eh_frame:0000000000006E9B                 db    0
.eh_frame:0000000000006E9C                 db 0B4h
.eh_frame:0000000000006E9D                 db 0B9h
.eh_frame:0000000000006E9E                 db 0FFh
.eh_frame:0000000000006E9F                 db 0FFh
.eh_frame:0000000000006EA0                 db  34h ; 4
.eh_frame:0000000000006EA1                 db  12h
.eh_frame:0000000000006EA2                 db    0
.eh_frame:0000000000006EA3                 db    0
.eh_frame:0000000000006EA4                 db    0
.eh_frame:0000000000006EA5                 db  42h ; B
.eh_frame:0000000000006EA6                 db  0Eh
.eh_frame:0000000000006EA7                 db  10h
.eh_frame:0000000000006EA8                 db  8Fh
.eh_frame:0000000000006EA9                 db    2
.eh_frame:0000000000006EAA                 db  42h ; B
.eh_frame:0000000000006EAB                 db  0Eh
.eh_frame:0000000000006EAC                 db  18h
.eh_frame:0000000000006EAD                 db  8Eh
.eh_frame:0000000000006EAE                 db    3
.eh_frame:0000000000006EAF                 db  45h ; E
.eh_frame:0000000000006EB0                 db  0Eh
.eh_frame:0000000000006EB1                 db  20h
.eh_frame:0000000000006EB2                 db  8Dh
.eh_frame:0000000000006EB3                 db    4
.eh_frame:0000000000006EB4                 db  42h ; B
.eh_frame:0000000000006EB5                 db  0Eh
.eh_frame:0000000000006EB6                 db  28h ; (
.eh_frame:0000000000006EB7                 db  8Ch
.eh_frame:0000000000006EB8                 db    5
.eh_frame:0000000000006EB9                 db  44h ; D
.eh_frame:0000000000006EBA                 db  0Eh
.eh_frame:0000000000006EBB                 db  30h ; 0
.eh_frame:0000000000006EBC                 db  86h
.eh_frame:0000000000006EBD                 db    6
.eh_frame:0000000000006EBE                 db  41h ; A
.eh_frame:0000000000006EBF                 db  0Eh
.eh_frame:0000000000006EC0                 db  38h ; 8
.eh_frame:0000000000006EC1                 db  83h
.eh_frame:0000000000006EC2                 db    7
.eh_frame:0000000000006EC3                 db  53h ; S
.eh_frame:0000000000006EC4                 db  0Eh
.eh_frame:0000000000006EC5                 db 0F0h
.eh_frame:0000000000006EC6                 db    1
.eh_frame:0000000000006EC7                 db    3
.eh_frame:0000000000006EC8                 db  81h
.eh_frame:0000000000006EC9                 db  0Bh
.eh_frame:0000000000006ECA                 db  0Eh
.eh_frame:0000000000006ECB                 db 0F8h
.eh_frame:0000000000006ECC                 db    1
.eh_frame:0000000000006ECD                 db  4Ah ; J
.eh_frame:0000000000006ECE                 db  0Eh
.eh_frame:0000000000006ECF                 db  80h
.eh_frame:0000000000006ED0                 db    2
.eh_frame:0000000000006ED1                 db  44h ; D
.eh_frame:0000000000006ED2                 db  0Eh
.eh_frame:0000000000006ED3                 db  88h
.eh_frame:0000000000006ED4                 db    2
.eh_frame:0000000000006ED5                 db  45h ; E
.eh_frame:0000000000006ED6                 db  0Eh
.eh_frame:0000000000006ED7                 db  90h
.eh_frame:0000000000006ED8                 db    2
.eh_frame:0000000000006ED9                 db  5Fh ; _
.eh_frame:0000000000006EDA                 db  0Eh
.eh_frame:0000000000006EDB                 db 0F0h
.eh_frame:0000000000006EDC                 db    1
.eh_frame:0000000000006EDD                 db  64h ; d
.eh_frame:0000000000006EDE                 db  0Ah
.eh_frame:0000000000006EDF                 db  0Eh
.eh_frame:0000000000006EE0                 db  38h ; 8
.eh_frame:0000000000006EE1                 db  41h ; A
.eh_frame:0000000000006EE2                 db  0Eh
.eh_frame:0000000000006EE3                 db  30h ; 0
.eh_frame:0000000000006EE4                 db  41h ; A
.eh_frame:0000000000006EE5                 db  0Eh
.eh_frame:0000000000006EE6                 db  28h ; (
.eh_frame:0000000000006EE7                 db  42h ; B
.eh_frame:0000000000006EE8                 db  0Eh
.eh_frame:0000000000006EE9                 db  20h
.eh_frame:0000000000006EEA                 db  42h ; B
.eh_frame:0000000000006EEB                 db  0Eh
.eh_frame:0000000000006EEC                 db  18h
.eh_frame:0000000000006EED                 db  42h ; B
.eh_frame:0000000000006EEE                 db  0Eh
.eh_frame:0000000000006EEF                 db  10h
.eh_frame:0000000000006EF0                 db  42h ; B
.eh_frame:0000000000006EF1                 db  0Eh
.eh_frame:0000000000006EF2                 db    8
.eh_frame:0000000000006EF3                 db  44h ; D
.eh_frame:0000000000006EF4                 db  0Bh
.eh_frame:0000000000006EF5                 db    3
.eh_frame:0000000000006EF6                 db  99h
.eh_frame:0000000000006EF7                 db    5
.eh_frame:0000000000006EF8                 db  0Eh
.eh_frame:0000000000006EF9                 db 0F8h
.eh_frame:0000000000006EFA                 db    1
.eh_frame:0000000000006EFB                 db  4Dh ; M
.eh_frame:0000000000006EFC                 db  0Eh
.eh_frame:0000000000006EFD                 db  80h
.eh_frame:0000000000006EFE                 db    2
.eh_frame:0000000000006EFF                 db  44h ; D
.eh_frame:0000000000006F00                 db  0Eh
.eh_frame:0000000000006F01                 db  88h
.eh_frame:0000000000006F02                 db    2
.eh_frame:0000000000006F03                 db  47h ; G
.eh_frame:0000000000006F04                 db  0Eh
.eh_frame:0000000000006F05                 db  90h
.eh_frame:0000000000006F06                 db    2
.eh_frame:0000000000006F07                 db  5Bh ; [
.eh_frame:0000000000006F08                 db  0Eh
.eh_frame:0000000000006F09                 db 0F0h
.eh_frame:0000000000006F0A                 db    1
.eh_frame:0000000000006F0B                 db    0
.eh_frame:0000000000006F0C                 db  68h ; h
.eh_frame:0000000000006F0D                 db    0
.eh_frame:0000000000006F0E                 db    0
.eh_frame:0000000000006F0F                 db    0
.eh_frame:0000000000006F10                 db  10h
.eh_frame:0000000000006F11                 db    2
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db  7Ch ; |
.eh_frame:0000000000006F15                 db 0CBh
.eh_frame:0000000000006F16                 db 0FFh
.eh_frame:0000000000006F17                 db 0FFh
.eh_frame:0000000000006F18                 db 0ABh
.eh_frame:0000000000006F19                 db    1
.eh_frame:0000000000006F1A                 db    0
.eh_frame:0000000000006F1B                 db    0
.eh_frame:0000000000006F1C                 db    0
.eh_frame:0000000000006F1D                 db  42h ; B
.eh_frame:0000000000006F1E                 db  0Eh
.eh_frame:0000000000006F1F                 db  10h
.eh_frame:0000000000006F20                 db  8Fh
.eh_frame:0000000000006F21                 db    2
.eh_frame:0000000000006F22                 db  42h ; B
.eh_frame:0000000000006F23                 db  0Eh
.eh_frame:0000000000006F24                 db  18h
.eh_frame:0000000000006F25                 db  8Eh
.eh_frame:0000000000006F26                 db    3
.eh_frame:0000000000006F27                 db  45h ; E
.eh_frame:0000000000006F28                 db  0Eh
.eh_frame:0000000000006F29                 db  20h
.eh_frame:0000000000006F2A                 db  8Dh
.eh_frame:0000000000006F2B                 db    4
.eh_frame:0000000000006F2C                 db  42h ; B
.eh_frame:0000000000006F2D                 db  0Eh
.eh_frame:0000000000006F2E                 db  28h ; (
.eh_frame:0000000000006F2F                 db  8Ch
.eh_frame:0000000000006F30                 db    5
.eh_frame:0000000000006F31                 db  44h ; D
.eh_frame:0000000000006F32                 db  0Eh
.eh_frame:0000000000006F33                 db  30h ; 0
.eh_frame:0000000000006F34                 db  86h
.eh_frame:0000000000006F35                 db    6
.eh_frame:0000000000006F36                 db  41h ; A
.eh_frame:0000000000006F37                 db  0Eh
.eh_frame:0000000000006F38                 db  38h ; 8
.eh_frame:0000000000006F39                 db  83h
.eh_frame:0000000000006F3A                 db    7
.eh_frame:0000000000006F3B                 db  47h ; G
.eh_frame:0000000000006F3C                 db  0Eh
.eh_frame:0000000000006F3D                 db  60h ; `
.eh_frame:0000000000006F3E                 db    2
.eh_frame:0000000000006F3F                 db  99h
.eh_frame:0000000000006F40                 db  0Eh
.eh_frame:0000000000006F41                 db  68h ; h
.eh_frame:0000000000006F42                 db  5Fh ; _
.eh_frame:0000000000006F43                 db  0Eh
.eh_frame:0000000000006F44                 db  70h ; p
.eh_frame:0000000000006F45                 db  46h ; F
.eh_frame:0000000000006F46                 db  0Eh
.eh_frame:0000000000006F47                 db  78h ; x
.eh_frame:0000000000006F48                 db  42h ; B
.eh_frame:0000000000006F49                 db  0Eh
.eh_frame:0000000000006F4A                 db  80h
.eh_frame:0000000000006F4B                 db    1
.eh_frame:0000000000006F4C                 db  59h ; Y
.eh_frame:0000000000006F4D                 db  0Eh
.eh_frame:0000000000006F4E                 db  60h ; `
.eh_frame:0000000000006F4F                 db    2
.eh_frame:0000000000006F50                 db  40h ; @
.eh_frame:0000000000006F51                 db  0Eh
.eh_frame:0000000000006F52                 db  68h ; h
.eh_frame:0000000000006F53                 db  4Bh ; K
.eh_frame:0000000000006F54                 db  0Eh
.eh_frame:0000000000006F55                 db  70h ; p
.eh_frame:0000000000006F56                 db  43h ; C
.eh_frame:0000000000006F57                 db  0Eh
.eh_frame:0000000000006F58                 db  78h ; x
.eh_frame:0000000000006F59                 db  45h ; E
.eh_frame:0000000000006F5A                 db  0Eh
.eh_frame:0000000000006F5B                 db  80h
.eh_frame:0000000000006F5C                 db    1
.eh_frame:0000000000006F5D                 db  5Eh ; ^
.eh_frame:0000000000006F5E                 db  0Eh
.eh_frame:0000000000006F5F                 db  60h ; `
.eh_frame:0000000000006F60                 db  4Ch ; L
.eh_frame:0000000000006F61                 db  0Ah
.eh_frame:0000000000006F62                 db  0Eh
.eh_frame:0000000000006F63                 db  38h ; 8
.eh_frame:0000000000006F64                 db  44h ; D
.eh_frame:0000000000006F65                 db  0Eh
.eh_frame:0000000000006F66                 db  30h ; 0
.eh_frame:0000000000006F67                 db  41h ; A
.eh_frame:0000000000006F68                 db  0Eh
.eh_frame:0000000000006F69                 db  28h ; (
.eh_frame:0000000000006F6A                 db  42h ; B
.eh_frame:0000000000006F6B                 db  0Eh
.eh_frame:0000000000006F6C                 db  20h
.eh_frame:0000000000006F6D                 db  42h ; B
.eh_frame:0000000000006F6E                 db  0Eh
.eh_frame:0000000000006F6F                 db  18h
.eh_frame:0000000000006F70                 db  42h ; B
.eh_frame:0000000000006F71                 db  0Eh
.eh_frame:0000000000006F72                 db  10h
.eh_frame:0000000000006F73                 db  42h ; B
.eh_frame:0000000000006F74                 db  0Eh
.eh_frame:0000000000006F75                 db    8
.eh_frame:0000000000006F76                 db  46h ; F
.eh_frame:0000000000006F77                 db  0Bh
.eh_frame:0000000000006F78                 db  28h ; (
.eh_frame:0000000000006F79                 db    0
.eh_frame:0000000000006F7A                 db    0
.eh_frame:0000000000006F7B                 db    0
.eh_frame:0000000000006F7C                 db  7Ch ; |
.eh_frame:0000000000006F7D                 db    2
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db 0C0h
.eh_frame:0000000000006F81                 db 0CCh
.eh_frame:0000000000006F82                 db 0FFh
.eh_frame:0000000000006F83                 db 0FFh
.eh_frame:0000000000006F84                 db  36h ; 6
.eh_frame:0000000000006F85                 db    0
.eh_frame:0000000000006F86                 db    0
.eh_frame:0000000000006F87                 db    0
.eh_frame:0000000000006F88                 db    0
.eh_frame:0000000000006F89                 db  42h ; B
.eh_frame:0000000000006F8A                 db  0Eh
.eh_frame:0000000000006F8B                 db  10h
.eh_frame:0000000000006F8C                 db  8Ch
.eh_frame:0000000000006F8D                 db    2
.eh_frame:0000000000006F8E                 db  41h ; A
.eh_frame:0000000000006F8F                 db  0Eh
.eh_frame:0000000000006F90                 db  18h
.eh_frame:0000000000006F91                 db  86h
.eh_frame:0000000000006F92                 db    3
.eh_frame:0000000000006F93                 db  41h ; A
.eh_frame:0000000000006F94                 db  0Eh
.eh_frame:0000000000006F95                 db  20h
.eh_frame:0000000000006F96                 db  83h
.eh_frame:0000000000006F97                 db    4
.eh_frame:0000000000006F98                 db  6Eh ; n
.eh_frame:0000000000006F99                 db  0Eh
.eh_frame:0000000000006F9A                 db  18h
.eh_frame:0000000000006F9B                 db  41h ; A
.eh_frame:0000000000006F9C                 db  0Eh
.eh_frame:0000000000006F9D                 db  10h
.eh_frame:0000000000006F9E                 db  42h ; B
.eh_frame:0000000000006F9F                 db  0Eh
.eh_frame:0000000000006FA0                 db    8
.eh_frame:0000000000006FA1                 db    0
.eh_frame:0000000000006FA2                 db    0
.eh_frame:0000000000006FA3                 db    0
.eh_frame:0000000000006FA4                 db  10h
.eh_frame:0000000000006FA5                 db    0
.eh_frame:0000000000006FA6                 db    0
.eh_frame:0000000000006FA7                 db    0
.eh_frame:0000000000006FA8                 db 0A8h
.eh_frame:0000000000006FA9                 db    2
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db 0D4h
.eh_frame:0000000000006FAD                 db 0CCh
.eh_frame:0000000000006FAE                 db 0FFh
.eh_frame:0000000000006FAF                 db 0FFh
.eh_frame:0000000000006FB0                 db  11h
.eh_frame:0000000000006FB1                 db    0
.eh_frame:0000000000006FB2                 db    0
.eh_frame:0000000000006FB3                 db    0
.eh_frame:0000000000006FB4                 db    0
.eh_frame:0000000000006FB5                 db    0
.eh_frame:0000000000006FB6                 db    0
.eh_frame:0000000000006FB7                 db    0
.eh_frame:0000000000006FB8                 db  10h
.eh_frame:0000000000006FB9                 db    0
.eh_frame:0000000000006FBA                 db    0
.eh_frame:0000000000006FBB                 db    0
.eh_frame:0000000000006FBC                 db 0BCh
.eh_frame:0000000000006FBD                 db    2
.eh_frame:0000000000006FBE                 db    0
.eh_frame:0000000000006FBF                 db    0
.eh_frame:0000000000006FC0                 db 0E0h
.eh_frame:0000000000006FC1                 db 0CCh
.eh_frame:0000000000006FC2                 db 0FFh
.eh_frame:0000000000006FC3                 db 0FFh
.eh_frame:0000000000006FC4                 db  11h
.eh_frame:0000000000006FC5                 db    0
.eh_frame:0000000000006FC6                 db    0
.eh_frame:0000000000006FC7                 db    0
.eh_frame:0000000000006FC8                 db    0
.eh_frame:0000000000006FC9                 db    0
.eh_frame:0000000000006FCA                 db    0
.eh_frame:0000000000006FCB                 db    0
.eh_frame:0000000000006FCC                 db  10h
.eh_frame:0000000000006FCD                 db    0
.eh_frame:0000000000006FCE                 db    0
.eh_frame:0000000000006FCF                 db    0
.eh_frame:0000000000006FD0                 db 0D0h
.eh_frame:0000000000006FD1                 db    2
.eh_frame:0000000000006FD2                 db    0
.eh_frame:0000000000006FD3                 db    0
.eh_frame:0000000000006FD4                 db 0ECh
.eh_frame:0000000000006FD5                 db 0CCh
.eh_frame:0000000000006FD6                 db 0FFh
.eh_frame:0000000000006FD7                 db 0FFh
.eh_frame:0000000000006FD8                 db  35h ; 5
.eh_frame:0000000000006FD9                 db    0
.eh_frame:0000000000006FDA                 db    0
.eh_frame:0000000000006FDB                 db    0
.eh_frame:0000000000006FDC                 db    0
.eh_frame:0000000000006FDD                 db    0
.eh_frame:0000000000006FDE                 db    0
.eh_frame:0000000000006FDF                 db    0
.eh_frame:0000000000006FE0                 db  10h
.eh_frame:0000000000006FE1                 db    0
.eh_frame:0000000000006FE2                 db    0
.eh_frame:0000000000006FE3                 db    0
.eh_frame:0000000000006FE4                 db 0E4h
.eh_frame:0000000000006FE5                 db    2
.eh_frame:0000000000006FE6                 db    0
.eh_frame:0000000000006FE7                 db    0
.eh_frame:0000000000006FE8                 db  18h
.eh_frame:0000000000006FE9                 db 0CDh
.eh_frame:0000000000006FEA                 db 0FFh
.eh_frame:0000000000006FEB                 db 0FFh
.eh_frame:0000000000006FEC                 db  15h
.eh_frame:0000000000006FED                 db    0
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db    0
.eh_frame:0000000000006FF1                 db    0
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db  10h
.eh_frame:0000000000006FF5                 db    0
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db 0F8h
.eh_frame:0000000000006FF9                 db    2
.eh_frame:0000000000006FFA                 db    0
.eh_frame:0000000000006FFB                 db    0
.eh_frame:0000000000006FFC                 db  24h ; $
.eh_frame:0000000000006FFD                 db 0CDh
.eh_frame:0000000000006FFE                 db 0FFh
.eh_frame:0000000000006FFF                 db 0FFh
.eh_frame:0000000000007000                 db  30h ; 0
.eh_frame:0000000000007001                 db    0
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db    0
.eh_frame:0000000000007005                 db  6Bh ; k
.eh_frame:0000000000007006                 db  0Eh
.eh_frame:0000000000007007                 db  10h
.eh_frame:0000000000007008                 db  50h ; P
.eh_frame:0000000000007009                 db    0
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db  0Ch
.eh_frame:000000000000700D                 db    3
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db  40h ; @
.eh_frame:0000000000007011                 db 0CDh
.eh_frame:0000000000007012                 db 0FFh
.eh_frame:0000000000007013                 db 0FFh
.eh_frame:0000000000007014                 db  74h ; t
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db    0
.eh_frame:0000000000007019                 db  42h ; B
.eh_frame:000000000000701A                 db  0Eh
.eh_frame:000000000000701B                 db  10h
.eh_frame:000000000000701C                 db  8Fh
.eh_frame:000000000000701D                 db    2
.eh_frame:000000000000701E                 db  42h ; B
.eh_frame:000000000000701F                 db  0Eh
.eh_frame:0000000000007020                 db  18h
.eh_frame:0000000000007021                 db  8Eh
.eh_frame:0000000000007022                 db    3
.eh_frame:0000000000007023                 db  49h ; I
.eh_frame:0000000000007024                 db  0Eh
.eh_frame:0000000000007025                 db  20h
.eh_frame:0000000000007026                 db  8Dh
.eh_frame:0000000000007027                 db    4
.eh_frame:0000000000007028                 db  42h ; B
.eh_frame:0000000000007029                 db  0Eh
.eh_frame:000000000000702A                 db  28h ; (
.eh_frame:000000000000702B                 db  8Ch
.eh_frame:000000000000702C                 db    5
.eh_frame:000000000000702D                 db  44h ; D
.eh_frame:000000000000702E                 db  0Eh
.eh_frame:000000000000702F                 db  30h ; 0
.eh_frame:0000000000007030                 db  86h
.eh_frame:0000000000007031                 db    6
.eh_frame:0000000000007032                 db  41h ; A
.eh_frame:0000000000007033                 db  0Eh
.eh_frame:0000000000007034                 db  38h ; 8
.eh_frame:0000000000007035                 db  83h
.eh_frame:0000000000007036                 db    7
.eh_frame:0000000000007037                 db  4Dh ; M
.eh_frame:0000000000007038                 db  0Eh
.eh_frame:0000000000007039                 db  50h ; P
.eh_frame:000000000000703A                 db  5Fh ; _
.eh_frame:000000000000703B                 db  0Eh
.eh_frame:000000000000703C                 db  58h ; X
.eh_frame:000000000000703D                 db  47h ; G
.eh_frame:000000000000703E                 db  0Eh
.eh_frame:000000000000703F                 db  60h ; `
.eh_frame:0000000000007040                 db  46h ; F
.eh_frame:0000000000007041                 db  0Eh
.eh_frame:0000000000007042                 db  68h ; h
.eh_frame:0000000000007043                 db  44h ; D
.eh_frame:0000000000007044                 db  0Eh
.eh_frame:0000000000007045                 db  70h ; p
.eh_frame:0000000000007046                 db  58h ; X
.eh_frame:0000000000007047                 db  0Eh
.eh_frame:0000000000007048                 db  38h ; 8
.eh_frame:0000000000007049                 db  41h ; A
.eh_frame:000000000000704A                 db  0Eh
.eh_frame:000000000000704B                 db  30h ; 0
.eh_frame:000000000000704C                 db  41h ; A
.eh_frame:000000000000704D                 db  0Eh
.eh_frame:000000000000704E                 db  28h ; (
.eh_frame:000000000000704F                 db  42h ; B
.eh_frame:0000000000007050                 db  0Eh
.eh_frame:0000000000007051                 db  20h
.eh_frame:0000000000007052                 db  42h ; B
.eh_frame:0000000000007053                 db  0Eh
.eh_frame:0000000000007054                 db  18h
.eh_frame:0000000000007055                 db  42h ; B
.eh_frame:0000000000007056                 db  0Eh
.eh_frame:0000000000007057                 db  10h
.eh_frame:0000000000007058                 db  42h ; B
.eh_frame:0000000000007059                 db  0Eh
.eh_frame:000000000000705A                 db    8
.eh_frame:000000000000705B                 db    0
.eh_frame:000000000000705C                 db  68h ; h
.eh_frame:000000000000705D                 db    0
.eh_frame:000000000000705E                 db    0
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  60h ; `
.eh_frame:0000000000007061                 db    3
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db  6Ch ; l
.eh_frame:0000000000007065                 db 0CDh
.eh_frame:0000000000007066                 db 0FFh
.eh_frame:0000000000007067                 db 0FFh
.eh_frame:0000000000007068                 db 0E3h
.eh_frame:0000000000007069                 db    0
.eh_frame:000000000000706A                 db    0
.eh_frame:000000000000706B                 db    0
.eh_frame:000000000000706C                 db    0
.eh_frame:000000000000706D                 db  42h ; B
.eh_frame:000000000000706E                 db  0Eh
.eh_frame:000000000000706F                 db  10h
.eh_frame:0000000000007070                 db  8Fh
.eh_frame:0000000000007071                 db    2
.eh_frame:0000000000007072                 db  42h ; B
.eh_frame:0000000000007073                 db  0Eh
.eh_frame:0000000000007074                 db  18h
.eh_frame:0000000000007075                 db  8Eh
.eh_frame:0000000000007076                 db    3
.eh_frame:0000000000007077                 db  49h ; I
.eh_frame:0000000000007078                 db  0Eh
.eh_frame:0000000000007079                 db  20h
.eh_frame:000000000000707A                 db  8Dh
.eh_frame:000000000000707B                 db    4
.eh_frame:000000000000707C                 db  42h ; B
.eh_frame:000000000000707D                 db  0Eh
.eh_frame:000000000000707E                 db  28h ; (
.eh_frame:000000000000707F                 db  8Ch
.eh_frame:0000000000007080                 db    5
.eh_frame:0000000000007081                 db  44h ; D
.eh_frame:0000000000007082                 db  0Eh
.eh_frame:0000000000007083                 db  30h ; 0
.eh_frame:0000000000007084                 db  86h
.eh_frame:0000000000007085                 db    6
.eh_frame:0000000000007086                 db  41h ; A
.eh_frame:0000000000007087                 db  0Eh
.eh_frame:0000000000007088                 db  38h ; 8
.eh_frame:0000000000007089                 db  83h
.eh_frame:000000000000708A                 db    7
.eh_frame:000000000000708B                 db  4Dh ; M
.eh_frame:000000000000708C                 db  0Eh
.eh_frame:000000000000708D                 db  70h ; p
.eh_frame:000000000000708E                 db  65h ; e
.eh_frame:000000000000708F                 db  0Eh
.eh_frame:0000000000007090                 db  78h ; x
.eh_frame:0000000000007091                 db  4Dh ; M
.eh_frame:0000000000007092                 db  0Eh
.eh_frame:0000000000007093                 db  80h
.eh_frame:0000000000007094                 db    1
.eh_frame:0000000000007095                 db  46h ; F
.eh_frame:0000000000007096                 db  0Eh
.eh_frame:0000000000007097                 db  88h
.eh_frame:0000000000007098                 db    1
.eh_frame:0000000000007099                 db  42h ; B
.eh_frame:000000000000709A                 db  0Eh
.eh_frame:000000000000709B                 db  90h
.eh_frame:000000000000709C                 db    1
.eh_frame:000000000000709D                 db  5Eh ; ^
.eh_frame:000000000000709E                 db  0Eh
.eh_frame:000000000000709F                 db  70h ; p
.eh_frame:00000000000070A0                 db  56h ; V
.eh_frame:00000000000070A1                 db  0Eh
.eh_frame:00000000000070A2                 db  78h ; x
.eh_frame:00000000000070A3                 db  43h ; C
.eh_frame:00000000000070A4                 db  0Eh
.eh_frame:00000000000070A5                 db  80h
.eh_frame:00000000000070A6                 db    1
.eh_frame:00000000000070A7                 db  43h ; C
.eh_frame:00000000000070A8                 db  0Eh
.eh_frame:00000000000070A9                 db  88h
.eh_frame:00000000000070AA                 db    1
.eh_frame:00000000000070AB                 db  56h ; V
.eh_frame:00000000000070AC                 db  0Eh
.eh_frame:00000000000070AD                 db  90h
.eh_frame:00000000000070AE                 db    1
.eh_frame:00000000000070AF                 db  52h ; R
.eh_frame:00000000000070B0                 db  0Eh
.eh_frame:00000000000070B1                 db  70h ; p
.eh_frame:00000000000070B2                 db  5Bh ; [
.eh_frame:00000000000070B3                 db  0Eh
.eh_frame:00000000000070B4                 db  38h ; 8
.eh_frame:00000000000070B5                 db  41h ; A
.eh_frame:00000000000070B6                 db  0Eh
.eh_frame:00000000000070B7                 db  30h ; 0
.eh_frame:00000000000070B8                 db  41h ; A
.eh_frame:00000000000070B9                 db  0Eh
.eh_frame:00000000000070BA                 db  28h ; (
.eh_frame:00000000000070BB                 db  42h ; B
.eh_frame:00000000000070BC                 db  0Eh
.eh_frame:00000000000070BD                 db  20h
.eh_frame:00000000000070BE                 db  42h ; B
.eh_frame:00000000000070BF                 db  0Eh
.eh_frame:00000000000070C0                 db  18h
.eh_frame:00000000000070C1                 db  42h ; B
.eh_frame:00000000000070C2                 db  0Eh
.eh_frame:00000000000070C3                 db  10h
.eh_frame:00000000000070C4                 db  42h ; B
.eh_frame:00000000000070C5                 db  0Eh
.eh_frame:00000000000070C6                 db    8
.eh_frame:00000000000070C7                 db    0
.eh_frame:00000000000070C8                 db  10h
.eh_frame:00000000000070C9                 db    0
.eh_frame:00000000000070CA                 db    0
.eh_frame:00000000000070CB                 db    0
.eh_frame:00000000000070CC                 db 0CCh
.eh_frame:00000000000070CD                 db    3
.eh_frame:00000000000070CE                 db    0
.eh_frame:00000000000070CF                 db    0
.eh_frame:00000000000070D0                 db 0F0h
.eh_frame:00000000000070D1                 db 0CDh
.eh_frame:00000000000070D2                 db 0FFh
.eh_frame:00000000000070D3                 db 0FFh
.eh_frame:00000000000070D4                 db  0Ah
.eh_frame:00000000000070D5                 db    0
.eh_frame:00000000000070D6                 db    0
.eh_frame:00000000000070D7                 db    0
.eh_frame:00000000000070D8                 db    0
.eh_frame:00000000000070D9                 db    0
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db  28h ; (
.eh_frame:00000000000070DD                 db    0
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db 0E0h
.eh_frame:00000000000070E1                 db    3
.eh_frame:00000000000070E2                 db    0
.eh_frame:00000000000070E3                 db    0
.eh_frame:00000000000070E4                 db 0ECh
.eh_frame:00000000000070E5                 db 0CDh
.eh_frame:00000000000070E6                 db 0FFh
.eh_frame:00000000000070E7                 db 0FFh
.eh_frame:00000000000070E8                 db  93h
.eh_frame:00000000000070E9                 db    0
.eh_frame:00000000000070EA                 db    0
.eh_frame:00000000000070EB                 db    0
.eh_frame:00000000000070EC                 db    0
.eh_frame:00000000000070ED                 db  48h ; H
.eh_frame:00000000000070EE                 db  0Eh
.eh_frame:00000000000070EF                 db  10h
.eh_frame:00000000000070F0                 db  8Ch
.eh_frame:00000000000070F1                 db    2
.eh_frame:00000000000070F2                 db  48h ; H
.eh_frame:00000000000070F3                 db  0Eh
.eh_frame:00000000000070F4                 db  18h
.eh_frame:00000000000070F5                 db  86h
.eh_frame:00000000000070F6                 db    3
.eh_frame:00000000000070F7                 db  41h ; A
.eh_frame:00000000000070F8                 db  0Eh
.eh_frame:00000000000070F9                 db  20h
.eh_frame:00000000000070FA                 db  83h
.eh_frame:00000000000070FB                 db    4
.eh_frame:00000000000070FC                 db    2
.eh_frame:00000000000070FD                 db  74h ; t
.eh_frame:00000000000070FE                 db  0Eh
.eh_frame:00000000000070FF                 db  18h
.eh_frame:0000000000007100                 db  4Bh ; K
.eh_frame:0000000000007101                 db  0Eh
.eh_frame:0000000000007102                 db  10h
.eh_frame:0000000000007103                 db  42h ; B
.eh_frame:0000000000007104                 db  0Eh
.eh_frame:0000000000007105                 db    8
.eh_frame:0000000000007106                 db    0
.eh_frame:0000000000007107                 db    0
.eh_frame:0000000000007108                 db  10h
.eh_frame:0000000000007109                 db    0
.eh_frame:000000000000710A                 db    0
.eh_frame:000000000000710B                 db    0
.eh_frame:000000000000710C                 db  0Ch
.eh_frame:000000000000710D                 db    4
.eh_frame:000000000000710E                 db    0
.eh_frame:000000000000710F                 db    0
.eh_frame:0000000000007110                 db  60h ; `
.eh_frame:0000000000007111                 db 0CEh
.eh_frame:0000000000007112                 db 0FFh
.eh_frame:0000000000007113                 db 0FFh
.eh_frame:0000000000007114                 db  13h
.eh_frame:0000000000007115                 db    0
.eh_frame:0000000000007116                 db    0
.eh_frame:0000000000007117                 db    0
.eh_frame:0000000000007118                 db    0
.eh_frame:0000000000007119                 db    0
.eh_frame:000000000000711A                 db    0
.eh_frame:000000000000711B                 db    0
.eh_frame:000000000000711C                 db  10h
.eh_frame:000000000000711D                 db    0
.eh_frame:000000000000711E                 db    0
.eh_frame:000000000000711F                 db    0
.eh_frame:0000000000007120                 db  20h
.eh_frame:0000000000007121                 db    4
.eh_frame:0000000000007122                 db    0
.eh_frame:0000000000007123                 db    0
.eh_frame:0000000000007124                 db  6Ch ; l
.eh_frame:0000000000007125                 db 0CEh
.eh_frame:0000000000007126                 db 0FFh
.eh_frame:0000000000007127                 db 0FFh
.eh_frame:0000000000007128                 db  0Ch
.eh_frame:0000000000007129                 db    0
.eh_frame:000000000000712A                 db    0
.eh_frame:000000000000712B                 db    0
.eh_frame:000000000000712C                 db    0
.eh_frame:000000000000712D                 db    0
.eh_frame:000000000000712E                 db    0
.eh_frame:000000000000712F                 db    0
.eh_frame:0000000000007130                 db  10h
.eh_frame:0000000000007131                 db    0
.eh_frame:0000000000007132                 db    0
.eh_frame:0000000000007133                 db    0
.eh_frame:0000000000007134                 db  34h ; 4
.eh_frame:0000000000007135                 db    4
.eh_frame:0000000000007136                 db    0
.eh_frame:0000000000007137                 db    0
.eh_frame:0000000000007138                 db  68h ; h
.eh_frame:0000000000007139                 db 0CEh
.eh_frame:000000000000713A                 db 0FFh
.eh_frame:000000000000713B                 db 0FFh
.eh_frame:000000000000713C                 db  18h
.eh_frame:000000000000713D                 db    0
.eh_frame:000000000000713E                 db    0
.eh_frame:000000000000713F                 db    0
.eh_frame:0000000000007140                 db    0
.eh_frame:0000000000007141                 db    0
.eh_frame:0000000000007142                 db    0
.eh_frame:0000000000007143                 db    0
.eh_frame:0000000000007144                 db  10h
.eh_frame:0000000000007145                 db    0
.eh_frame:0000000000007146                 db    0
.eh_frame:0000000000007147                 db    0
.eh_frame:0000000000007148                 db  48h ; H
.eh_frame:0000000000007149                 db    4
.eh_frame:000000000000714A                 db    0
.eh_frame:000000000000714B                 db    0
.eh_frame:000000000000714C                 db  74h ; t
.eh_frame:000000000000714D                 db 0CEh
.eh_frame:000000000000714E                 db 0FFh
.eh_frame:000000000000714F                 db 0FFh
.eh_frame:0000000000007150                 db  14h
.eh_frame:0000000000007151                 db    0
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db    0
.eh_frame:0000000000007155                 db    0
.eh_frame:0000000000007156                 db    0
.eh_frame:0000000000007157                 db    0
.eh_frame:0000000000007158                 db  18h
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db  5Ch ; \
.eh_frame:000000000000715D                 db    4
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db  80h
.eh_frame:0000000000007161                 db 0CEh
.eh_frame:0000000000007162                 db 0FFh
.eh_frame:0000000000007163                 db 0FFh
.eh_frame:0000000000007164                 db  8Eh
.eh_frame:0000000000007165                 db    0
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db    0
.eh_frame:0000000000007169                 db  44h ; D
.eh_frame:000000000000716A                 db  0Eh
.eh_frame:000000000000716B                 db  50h ; P
.eh_frame:000000000000716C                 db    2
.eh_frame:000000000000716D                 db  7Fh ; 
.eh_frame:000000000000716E                 db  0Ah
.eh_frame:000000000000716F                 db  0Eh
.eh_frame:0000000000007170                 db    8
.eh_frame:0000000000007171                 db  41h ; A
.eh_frame:0000000000007172                 db  0Bh
.eh_frame:0000000000007173                 db    0
.eh_frame:0000000000007174                 db  18h
.eh_frame:0000000000007175                 db    0
.eh_frame:0000000000007176                 db    0
.eh_frame:0000000000007177                 db    0
.eh_frame:0000000000007178                 db  78h ; x
.eh_frame:0000000000007179                 db    4
.eh_frame:000000000000717A                 db    0
.eh_frame:000000000000717B                 db    0
.eh_frame:000000000000717C                 db 0F4h
.eh_frame:000000000000717D                 db 0CEh
.eh_frame:000000000000717E                 db 0FFh
.eh_frame:000000000000717F                 db 0FFh
.eh_frame:0000000000007180                 db  8Ah
.eh_frame:0000000000007181                 db    0
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db    0
.eh_frame:0000000000007185                 db  44h ; D
.eh_frame:0000000000007186                 db  0Eh
.eh_frame:0000000000007187                 db  50h ; P
.eh_frame:0000000000007188                 db    2
.eh_frame:0000000000007189                 db  7Bh ; {
.eh_frame:000000000000718A                 db  0Ah
.eh_frame:000000000000718B                 db  0Eh
.eh_frame:000000000000718C                 db    8
.eh_frame:000000000000718D                 db  41h ; A
.eh_frame:000000000000718E                 db  0Bh
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db  10h
.eh_frame:0000000000007191                 db    0
.eh_frame:0000000000007192                 db    0
.eh_frame:0000000000007193                 db    0
.eh_frame:0000000000007194                 db  94h
.eh_frame:0000000000007195                 db    4
.eh_frame:0000000000007196                 db    0
.eh_frame:0000000000007197                 db    0
.eh_frame:0000000000007198                 db  68h ; h
.eh_frame:0000000000007199                 db 0CFh
.eh_frame:000000000000719A                 db 0FFh
.eh_frame:000000000000719B                 db 0FFh
.eh_frame:000000000000719C                 db  0Ch
.eh_frame:000000000000719D                 db    0
.eh_frame:000000000000719E                 db    0
.eh_frame:000000000000719F                 db    0
.eh_frame:00000000000071A0                 db    0
.eh_frame:00000000000071A1                 db    0
.eh_frame:00000000000071A2                 db    0
.eh_frame:00000000000071A3                 db    0
.eh_frame:00000000000071A4                 db  10h
.eh_frame:00000000000071A5                 db    0
.eh_frame:00000000000071A6                 db    0
.eh_frame:00000000000071A7                 db    0
.eh_frame:00000000000071A8                 db 0A8h
.eh_frame:00000000000071A9                 db    4
.eh_frame:00000000000071AA                 db    0
.eh_frame:00000000000071AB                 db    0
.eh_frame:00000000000071AC                 db  64h ; d
.eh_frame:00000000000071AD                 db 0CFh
.eh_frame:00000000000071AE                 db 0FFh
.eh_frame:00000000000071AF                 db 0FFh
.eh_frame:00000000000071B0                 db  0Fh
.eh_frame:00000000000071B1                 db    0
.eh_frame:00000000000071B2                 db    0
.eh_frame:00000000000071B3                 db    0
.eh_frame:00000000000071B4                 db    0
.eh_frame:00000000000071B5                 db    0
.eh_frame:00000000000071B6                 db    0
.eh_frame:00000000000071B7                 db    0
.eh_frame:00000000000071B8                 db  18h
.eh_frame:00000000000071B9                 db    0
.eh_frame:00000000000071BA                 db    0
.eh_frame:00000000000071BB                 db    0
.eh_frame:00000000000071BC                 db 0BCh
.eh_frame:00000000000071BD                 db    4
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db  60h ; `
.eh_frame:00000000000071C1                 db 0CFh
.eh_frame:00000000000071C2                 db 0FFh
.eh_frame:00000000000071C3                 db 0FFh
.eh_frame:00000000000071C4                 db  98h
.eh_frame:00000000000071C5                 db    0
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db    0
.eh_frame:00000000000071C9                 db  44h ; D
.eh_frame:00000000000071CA                 db  0Eh
.eh_frame:00000000000071CB                 db  50h ; P
.eh_frame:00000000000071CC                 db    2
.eh_frame:00000000000071CD                 db  8Eh
.eh_frame:00000000000071CE                 db  0Ah
.eh_frame:00000000000071CF                 db  0Eh
.eh_frame:00000000000071D0                 db    8
.eh_frame:00000000000071D1                 db  41h ; A
.eh_frame:00000000000071D2                 db  0Bh
.eh_frame:00000000000071D3                 db    0
.eh_frame:00000000000071D4                 db  10h
.eh_frame:00000000000071D5                 db    0
.eh_frame:00000000000071D6                 db    0
.eh_frame:00000000000071D7                 db    0
.eh_frame:00000000000071D8                 db 0D8h
.eh_frame:00000000000071D9                 db    4
.eh_frame:00000000000071DA                 db    0
.eh_frame:00000000000071DB                 db    0
.eh_frame:00000000000071DC                 db 0E4h
.eh_frame:00000000000071DD                 db 0CFh
.eh_frame:00000000000071DE                 db 0FFh
.eh_frame:00000000000071DF                 db 0FFh
.eh_frame:00000000000071E0                 db  10h
.eh_frame:00000000000071E1                 db    0
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db    0
.eh_frame:00000000000071E5                 db    0
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db  10h
.eh_frame:00000000000071E9                 db    0
.eh_frame:00000000000071EA                 db    0
.eh_frame:00000000000071EB                 db    0
.eh_frame:00000000000071EC                 db 0ECh
.eh_frame:00000000000071ED                 db    4
.eh_frame:00000000000071EE                 db    0
.eh_frame:00000000000071EF                 db    0
.eh_frame:00000000000071F0                 db 0E0h
.eh_frame:00000000000071F1                 db 0CFh
.eh_frame:00000000000071F2                 db 0FFh
.eh_frame:00000000000071F3                 db 0FFh
.eh_frame:00000000000071F4                 db  11h
.eh_frame:00000000000071F5                 db    0
.eh_frame:00000000000071F6                 db    0
.eh_frame:00000000000071F7                 db    0
.eh_frame:00000000000071F8                 db    0
.eh_frame:00000000000071F9                 db    0
.eh_frame:00000000000071FA                 db    0
.eh_frame:00000000000071FB                 db    0
.eh_frame:00000000000071FC                 db  10h
.eh_frame:00000000000071FD                 db    0
.eh_frame:00000000000071FE                 db    0
.eh_frame:00000000000071FF                 db    0
.eh_frame:0000000000007200                 db    0
.eh_frame:0000000000007201                 db    5
.eh_frame:0000000000007202                 db    0
.eh_frame:0000000000007203                 db    0
.eh_frame:0000000000007204                 db 0ECh
.eh_frame:0000000000007205                 db 0CFh
.eh_frame:0000000000007206                 db 0FFh
.eh_frame:0000000000007207                 db 0FFh
.eh_frame:0000000000007208                 db  0Ah
.eh_frame:0000000000007209                 db    0
.eh_frame:000000000000720A                 db    0
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db    0
.eh_frame:000000000000720D                 db    0
.eh_frame:000000000000720E                 db    0
.eh_frame:000000000000720F                 db    0
.eh_frame:0000000000007210                 db  18h
.eh_frame:0000000000007211                 db    0
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db  14h
.eh_frame:0000000000007215                 db    5
.eh_frame:0000000000007216                 db    0
.eh_frame:0000000000007217                 db    0
.eh_frame:0000000000007218                 db 0E8h
.eh_frame:0000000000007219                 db 0CFh
.eh_frame:000000000000721A                 db 0FFh
.eh_frame:000000000000721B                 db 0FFh
.eh_frame:000000000000721C                 db  8Eh
.eh_frame:000000000000721D                 db    0
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db    0
.eh_frame:0000000000007221                 db  44h ; D
.eh_frame:0000000000007222                 db  0Eh
.eh_frame:0000000000007223                 db  50h ; P
.eh_frame:0000000000007224                 db    2
.eh_frame:0000000000007225                 db  7Fh ; 
.eh_frame:0000000000007226                 db  0Ah
.eh_frame:0000000000007227                 db  0Eh
.eh_frame:0000000000007228                 db    8
.eh_frame:0000000000007229                 db  41h ; A
.eh_frame:000000000000722A                 db  0Bh
.eh_frame:000000000000722B                 db    0
.eh_frame:000000000000722C                 db  18h
.eh_frame:000000000000722D                 db    0
.eh_frame:000000000000722E                 db    0
.eh_frame:000000000000722F                 db    0
.eh_frame:0000000000007230                 db  30h ; 0
.eh_frame:0000000000007231                 db    5
.eh_frame:0000000000007232                 db    0
.eh_frame:0000000000007233                 db    0
.eh_frame:0000000000007234                 db  5Ch ; \
.eh_frame:0000000000007235                 db 0D0h
.eh_frame:0000000000007236                 db 0FFh
.eh_frame:0000000000007237                 db 0FFh
.eh_frame:0000000000007238                 db  91h
.eh_frame:0000000000007239                 db    0
.eh_frame:000000000000723A                 db    0
.eh_frame:000000000000723B                 db    0
.eh_frame:000000000000723C                 db    0
.eh_frame:000000000000723D                 db  44h ; D
.eh_frame:000000000000723E                 db  0Eh
.eh_frame:000000000000723F                 db  50h ; P
.eh_frame:0000000000007240                 db    2
.eh_frame:0000000000007241                 db  82h
.eh_frame:0000000000007242                 db  0Ah
.eh_frame:0000000000007243                 db  0Eh
.eh_frame:0000000000007244                 db    8
.eh_frame:0000000000007245                 db  41h ; A
.eh_frame:0000000000007246                 db  0Bh
.eh_frame:0000000000007247                 db    0
.eh_frame:0000000000007248                 db  10h
.eh_frame:0000000000007249                 db    0
.eh_frame:000000000000724A                 db    0
.eh_frame:000000000000724B                 db    0
.eh_frame:000000000000724C                 db  4Ch ; L
.eh_frame:000000000000724D                 db    5
.eh_frame:000000000000724E                 db    0
.eh_frame:000000000000724F                 db    0
.eh_frame:0000000000007250                 db 0E0h
.eh_frame:0000000000007251                 db 0D0h
.eh_frame:0000000000007252                 db 0FFh
.eh_frame:0000000000007253                 db 0FFh
.eh_frame:0000000000007254                 db  0Ch
.eh_frame:0000000000007255                 db    0
.eh_frame:0000000000007256                 db    0
.eh_frame:0000000000007257                 db    0
.eh_frame:0000000000007258                 db    0
.eh_frame:0000000000007259                 db    0
.eh_frame:000000000000725A                 db    0
.eh_frame:000000000000725B                 db    0
.eh_frame:000000000000725C                 db  10h
.eh_frame:000000000000725D                 db    0
.eh_frame:000000000000725E                 db    0
.eh_frame:000000000000725F                 db    0
.eh_frame:0000000000007260                 db  60h ; `
.eh_frame:0000000000007261                 db    5
.eh_frame:0000000000007262                 db    0
.eh_frame:0000000000007263                 db    0
.eh_frame:0000000000007264                 db 0DCh
.eh_frame:0000000000007265                 db 0D0h
.eh_frame:0000000000007266                 db 0FFh
.eh_frame:0000000000007267                 db 0FFh
.eh_frame:0000000000007268                 db  17h
.eh_frame:0000000000007269                 db    0
.eh_frame:000000000000726A                 db    0
.eh_frame:000000000000726B                 db    0
.eh_frame:000000000000726C                 db    0
.eh_frame:000000000000726D                 db    0
.eh_frame:000000000000726E                 db    0
.eh_frame:000000000000726F                 db    0
.eh_frame:0000000000007270                 db  10h
.eh_frame:0000000000007271                 db    0
.eh_frame:0000000000007272                 db    0
.eh_frame:0000000000007273                 db    0
.eh_frame:0000000000007274                 db  74h ; t
.eh_frame:0000000000007275                 db    5
.eh_frame:0000000000007276                 db    0
.eh_frame:0000000000007277                 db    0
.eh_frame:0000000000007278                 db 0E8h
.eh_frame:0000000000007279                 db 0D0h
.eh_frame:000000000000727A                 db 0FFh
.eh_frame:000000000000727B                 db 0FFh
.eh_frame:000000000000727C                 db  13h
.eh_frame:000000000000727D                 db    0
.eh_frame:000000000000727E                 db    0
.eh_frame:000000000000727F                 db    0
.eh_frame:0000000000007280                 db    0
.eh_frame:0000000000007281                 db    0
.eh_frame:0000000000007282                 db    0
.eh_frame:0000000000007283                 db    0
.eh_frame:0000000000007284                 db  10h
.eh_frame:0000000000007285                 db    0
.eh_frame:0000000000007286                 db    0
.eh_frame:0000000000007287                 db    0
.eh_frame:0000000000007288                 db  88h
.eh_frame:0000000000007289                 db    5
.eh_frame:000000000000728A                 db    0
.eh_frame:000000000000728B                 db    0
.eh_frame:000000000000728C                 db 0F4h
.eh_frame:000000000000728D                 db 0D0h
.eh_frame:000000000000728E                 db 0FFh
.eh_frame:000000000000728F                 db 0FFh
.eh_frame:0000000000007290                 db  0Ch
.eh_frame:0000000000007291                 db    0
.eh_frame:0000000000007292                 db    0
.eh_frame:0000000000007293                 db    0
.eh_frame:0000000000007294                 db    0
.eh_frame:0000000000007295                 db    0
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db  10h
.eh_frame:0000000000007299                 db    0
.eh_frame:000000000000729A                 db    0
.eh_frame:000000000000729B                 db    0
.eh_frame:000000000000729C                 db  9Ch
.eh_frame:000000000000729D                 db    5
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db 0F0h
.eh_frame:00000000000072A1                 db 0D0h
.eh_frame:00000000000072A2                 db 0FFh
.eh_frame:00000000000072A3                 db 0FFh
.eh_frame:00000000000072A4                 db  14h
.eh_frame:00000000000072A5                 db    0
.eh_frame:00000000000072A6                 db    0
.eh_frame:00000000000072A7                 db    0
.eh_frame:00000000000072A8                 db    0
.eh_frame:00000000000072A9                 db    0
.eh_frame:00000000000072AA                 db    0
.eh_frame:00000000000072AB                 db    0
.eh_frame:00000000000072AC                 db  10h
.eh_frame:00000000000072AD                 db    0
.eh_frame:00000000000072AE                 db    0
.eh_frame:00000000000072AF                 db    0
.eh_frame:00000000000072B0                 db 0B0h
.eh_frame:00000000000072B1                 db    5
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db 0FCh
.eh_frame:00000000000072B5                 db 0D0h
.eh_frame:00000000000072B6                 db 0FFh
.eh_frame:00000000000072B7                 db 0FFh
.eh_frame:00000000000072B8                 db  13h
.eh_frame:00000000000072B9                 db    0
.eh_frame:00000000000072BA                 db    0
.eh_frame:00000000000072BB                 db    0
.eh_frame:00000000000072BC                 db    0
.eh_frame:00000000000072BD                 db    0
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db  14h
.eh_frame:00000000000072C1                 db    0
.eh_frame:00000000000072C2                 db    0
.eh_frame:00000000000072C3                 db    0
.eh_frame:00000000000072C4                 db 0C4h
.eh_frame:00000000000072C5                 db    5
.eh_frame:00000000000072C6                 db    0
.eh_frame:00000000000072C7                 db    0
.eh_frame:00000000000072C8                 db    8
.eh_frame:00000000000072C9                 db 0D1h
.eh_frame:00000000000072CA                 db 0FFh
.eh_frame:00000000000072CB                 db 0FFh
.eh_frame:00000000000072CC                 db  18h
.eh_frame:00000000000072CD                 db    0
.eh_frame:00000000000072CE                 db    0
.eh_frame:00000000000072CF                 db    0
.eh_frame:00000000000072D0                 db    0
.eh_frame:00000000000072D1                 db    0
.eh_frame:00000000000072D2                 db    0
.eh_frame:00000000000072D3                 db    0
.eh_frame:00000000000072D4                 db    0
.eh_frame:00000000000072D5                 db    0
.eh_frame:00000000000072D6                 db    0
.eh_frame:00000000000072D7                 db    0
.eh_frame:00000000000072D8                 db  10h
.eh_frame:00000000000072D9                 db    1
.eh_frame:00000000000072DA                 db    0
.eh_frame:00000000000072DB                 db    0
.eh_frame:00000000000072DC                 db 0DCh
.eh_frame:00000000000072DD                 db    5
.eh_frame:00000000000072DE                 db    0
.eh_frame:00000000000072DF                 db    0
.eh_frame:00000000000072E0                 db  10h
.eh_frame:00000000000072E1                 db 0D1h
.eh_frame:00000000000072E2                 db 0FFh
.eh_frame:00000000000072E3                 db 0FFh
.eh_frame:00000000000072E4                 db  17h
.eh_frame:00000000000072E5                 db    4
.eh_frame:00000000000072E6                 db    0
.eh_frame:00000000000072E7                 db    0
.eh_frame:00000000000072E8                 db    0
.eh_frame:00000000000072E9                 db  42h ; B
.eh_frame:00000000000072EA                 db  0Eh
.eh_frame:00000000000072EB                 db  10h
.eh_frame:00000000000072EC                 db  8Fh
.eh_frame:00000000000072ED                 db    2
.eh_frame:00000000000072EE                 db  42h ; B
.eh_frame:00000000000072EF                 db  0Eh
.eh_frame:00000000000072F0                 db  18h
.eh_frame:00000000000072F1                 db  8Eh
.eh_frame:00000000000072F2                 db    3
.eh_frame:00000000000072F3                 db  42h ; B
.eh_frame:00000000000072F4                 db  0Eh
.eh_frame:00000000000072F5                 db  20h
.eh_frame:00000000000072F6                 db  8Dh
.eh_frame:00000000000072F7                 db    4
.eh_frame:00000000000072F8                 db  42h ; B
.eh_frame:00000000000072F9                 db  0Eh
.eh_frame:00000000000072FA                 db  28h ; (
.eh_frame:00000000000072FB                 db  8Ch
.eh_frame:00000000000072FC                 db    5
.eh_frame:00000000000072FD                 db  44h ; D
.eh_frame:00000000000072FE                 db  0Eh
.eh_frame:00000000000072FF                 db  30h ; 0
.eh_frame:0000000000007300                 db  86h
.eh_frame:0000000000007301                 db    6
.eh_frame:0000000000007302                 db  41h ; A
.eh_frame:0000000000007303                 db  0Eh
.eh_frame:0000000000007304                 db  38h ; 8
.eh_frame:0000000000007305                 db  83h
.eh_frame:0000000000007306                 db    7
.eh_frame:0000000000007307                 db  4Ah ; J
.eh_frame:0000000000007308                 db  0Eh
.eh_frame:0000000000007309                 db  60h ; `
.eh_frame:000000000000730A                 db    2
.eh_frame:000000000000730B                 db 0DDh
.eh_frame:000000000000730C                 db  0Eh
.eh_frame:000000000000730D                 db  68h ; h
.eh_frame:000000000000730E                 db  57h ; W
.eh_frame:000000000000730F                 db  0Eh
.eh_frame:0000000000007310                 db  70h ; p
.eh_frame:0000000000007311                 db  42h ; B
.eh_frame:0000000000007312                 db  0Eh
.eh_frame:0000000000007313                 db  78h ; x
.eh_frame:0000000000007314                 db  42h ; B
.eh_frame:0000000000007315                 db  0Eh
.eh_frame:0000000000007316                 db  80h
.eh_frame:0000000000007317                 db    1
.eh_frame:0000000000007318                 db  42h ; B
.eh_frame:0000000000007319                 db  0Eh
.eh_frame:000000000000731A                 db  88h
.eh_frame:000000000000731B                 db    1
.eh_frame:000000000000731C                 db  42h ; B
.eh_frame:000000000000731D                 db  0Eh
.eh_frame:000000000000731E                 db  90h
.eh_frame:000000000000731F                 db    1
.eh_frame:0000000000007320                 db  53h ; S
.eh_frame:0000000000007321                 db  0Eh
.eh_frame:0000000000007322                 db  60h ; `
.eh_frame:0000000000007323                 db  44h ; D
.eh_frame:0000000000007324                 db  0Ah
.eh_frame:0000000000007325                 db  0Eh
.eh_frame:0000000000007326                 db  38h ; 8
.eh_frame:0000000000007327                 db  41h ; A
.eh_frame:0000000000007328                 db  0Eh
.eh_frame:0000000000007329                 db  30h ; 0
.eh_frame:000000000000732A                 db  41h ; A
.eh_frame:000000000000732B                 db  0Eh
.eh_frame:000000000000732C                 db  28h ; (
.eh_frame:000000000000732D                 db  42h ; B
.eh_frame:000000000000732E                 db  0Eh
.eh_frame:000000000000732F                 db  20h
.eh_frame:0000000000007330                 db  42h ; B
.eh_frame:0000000000007331                 db  0Eh
.eh_frame:0000000000007332                 db  18h
.eh_frame:0000000000007333                 db  42h ; B
.eh_frame:0000000000007334                 db  0Eh
.eh_frame:0000000000007335                 db  10h
.eh_frame:0000000000007336                 db  42h ; B
.eh_frame:0000000000007337                 db  0Eh
.eh_frame:0000000000007338                 db    8
.eh_frame:0000000000007339                 db  44h ; D
.eh_frame:000000000000733A                 db  0Bh
.eh_frame:000000000000733B                 db    2
.eh_frame:000000000000733C                 db  78h ; x
.eh_frame:000000000000733D                 db  0Ah
.eh_frame:000000000000733E                 db  0Eh
.eh_frame:000000000000733F                 db  68h ; h
.eh_frame:0000000000007340                 db  48h ; H
.eh_frame:0000000000007341                 db  0Bh
.eh_frame:0000000000007342                 db  5Ah ; Z
.eh_frame:0000000000007343                 db  0Ah
.eh_frame:0000000000007344                 db  0Eh
.eh_frame:0000000000007345                 db  38h ; 8
.eh_frame:0000000000007346                 db  47h ; G
.eh_frame:0000000000007347                 db  0Eh
.eh_frame:0000000000007348                 db  30h ; 0
.eh_frame:0000000000007349                 db  41h ; A
.eh_frame:000000000000734A                 db  0Eh
.eh_frame:000000000000734B                 db  28h ; (
.eh_frame:000000000000734C                 db  42h ; B
.eh_frame:000000000000734D                 db  0Eh
.eh_frame:000000000000734E                 db  20h
.eh_frame:000000000000734F                 db  42h ; B
.eh_frame:0000000000007350                 db  0Eh
.eh_frame:0000000000007351                 db  18h
.eh_frame:0000000000007352                 db  42h ; B
.eh_frame:0000000000007353                 db  0Eh
.eh_frame:0000000000007354                 db  10h
.eh_frame:0000000000007355                 db  42h ; B
.eh_frame:0000000000007356                 db  0Eh
.eh_frame:0000000000007357                 db    8
.eh_frame:0000000000007358                 db  56h ; V
.eh_frame:0000000000007359                 db  0Bh
.eh_frame:000000000000735A                 db  5Eh ; ^
.eh_frame:000000000000735B                 db  0Ah
.eh_frame:000000000000735C                 db  0Eh
.eh_frame:000000000000735D                 db  38h ; 8
.eh_frame:000000000000735E                 db  52h ; R
.eh_frame:000000000000735F                 db  0Eh
.eh_frame:0000000000007360                 db  30h ; 0
.eh_frame:0000000000007361                 db  41h ; A
.eh_frame:0000000000007362                 db  0Eh
.eh_frame:0000000000007363                 db  28h ; (
.eh_frame:0000000000007364                 db  42h ; B
.eh_frame:0000000000007365                 db  0Eh
.eh_frame:0000000000007366                 db  20h
.eh_frame:0000000000007367                 db  42h ; B
.eh_frame:0000000000007368                 db  0Eh
.eh_frame:0000000000007369                 db  18h
.eh_frame:000000000000736A                 db  42h ; B
.eh_frame:000000000000736B                 db  0Eh
.eh_frame:000000000000736C                 db  10h
.eh_frame:000000000000736D                 db  42h ; B
.eh_frame:000000000000736E                 db  0Eh
.eh_frame:000000000000736F                 db    8
.eh_frame:0000000000007370                 db  4Fh ; O
.eh_frame:0000000000007371                 db  0Bh
.eh_frame:0000000000007372                 db  62h ; b
.eh_frame:0000000000007373                 db  0Ah
.eh_frame:0000000000007374                 db  0Eh
.eh_frame:0000000000007375                 db  38h ; 8
.eh_frame:0000000000007376                 db  50h ; P
.eh_frame:0000000000007377                 db  0Eh
.eh_frame:0000000000007378                 db  30h ; 0
.eh_frame:0000000000007379                 db  41h ; A
.eh_frame:000000000000737A                 db  0Eh
.eh_frame:000000000000737B                 db  28h ; (
.eh_frame:000000000000737C                 db  42h ; B
.eh_frame:000000000000737D                 db  0Eh
.eh_frame:000000000000737E                 db  20h
.eh_frame:000000000000737F                 db  42h ; B
.eh_frame:0000000000007380                 db  0Eh
.eh_frame:0000000000007381                 db  18h
.eh_frame:0000000000007382                 db  42h ; B
.eh_frame:0000000000007383                 db  0Eh
.eh_frame:0000000000007384                 db  10h
.eh_frame:0000000000007385                 db  42h ; B
.eh_frame:0000000000007386                 db  0Eh
.eh_frame:0000000000007387                 db    8
.eh_frame:0000000000007388                 db  55h ; U
.eh_frame:0000000000007389                 db  0Bh
.eh_frame:000000000000738A                 db  66h ; f
.eh_frame:000000000000738B                 db  0Eh
.eh_frame:000000000000738C                 db  68h ; h
.eh_frame:000000000000738D                 db  42h ; B
.eh_frame:000000000000738E                 db  0Eh
.eh_frame:000000000000738F                 db  70h ; p
.eh_frame:0000000000007390                 db  5Ch ; \
.eh_frame:0000000000007391                 db  0Eh
.eh_frame:0000000000007392                 db  68h ; h
.eh_frame:0000000000007393                 db  41h ; A
.eh_frame:0000000000007394                 db  0Eh
.eh_frame:0000000000007395                 db  60h ; `
.eh_frame:0000000000007396                 db  44h ; D
.eh_frame:0000000000007397                 db  0Ah
.eh_frame:0000000000007398                 db  0Eh
.eh_frame:0000000000007399                 db  38h ; 8
.eh_frame:000000000000739A                 db  41h ; A
.eh_frame:000000000000739B                 db  0Eh
.eh_frame:000000000000739C                 db  30h ; 0
.eh_frame:000000000000739D                 db  41h ; A
.eh_frame:000000000000739E                 db  0Eh
.eh_frame:000000000000739F                 db  28h ; (
.eh_frame:00000000000073A0                 db  42h ; B
.eh_frame:00000000000073A1                 db  0Eh
.eh_frame:00000000000073A2                 db  20h
.eh_frame:00000000000073A3                 db  42h ; B
.eh_frame:00000000000073A4                 db  0Eh
.eh_frame:00000000000073A5                 db  18h
.eh_frame:00000000000073A6                 db  42h ; B
.eh_frame:00000000000073A7                 db  0Eh
.eh_frame:00000000000073A8                 db  10h
.eh_frame:00000000000073A9                 db  42h ; B
.eh_frame:00000000000073AA                 db  0Eh
.eh_frame:00000000000073AB                 db    8
.eh_frame:00000000000073AC                 db  45h ; E
.eh_frame:00000000000073AD                 db  0Bh
.eh_frame:00000000000073AE                 db  68h ; h
.eh_frame:00000000000073AF                 db  0Ah
.eh_frame:00000000000073B0                 db  0Eh
.eh_frame:00000000000073B1                 db  68h ; h
.eh_frame:00000000000073B2                 db  48h ; H
.eh_frame:00000000000073B3                 db  0Bh
.eh_frame:00000000000073B4                 db  72h ; r
.eh_frame:00000000000073B5                 db  0Eh
.eh_frame:00000000000073B6                 db  68h ; h
.eh_frame:00000000000073B7                 db  45h ; E
.eh_frame:00000000000073B8                 db  0Eh
.eh_frame:00000000000073B9                 db  70h ; p
.eh_frame:00000000000073BA                 db  42h ; B
.eh_frame:00000000000073BB                 db  0Eh
.eh_frame:00000000000073BC                 db  78h ; x
.eh_frame:00000000000073BD                 db  42h ; B
.eh_frame:00000000000073BE                 db  0Eh
.eh_frame:00000000000073BF                 db  80h
.eh_frame:00000000000073C0                 db    1
.eh_frame:00000000000073C1                 db  5Eh ; ^
.eh_frame:00000000000073C2                 db  0Eh
.eh_frame:00000000000073C3                 db  60h ; `
.eh_frame:00000000000073C4                 db  44h ; D
.eh_frame:00000000000073C5                 db  0Ah
.eh_frame:00000000000073C6                 db  0Eh
.eh_frame:00000000000073C7                 db  38h ; 8
.eh_frame:00000000000073C8                 db  41h ; A
.eh_frame:00000000000073C9                 db  0Eh
.eh_frame:00000000000073CA                 db  30h ; 0
.eh_frame:00000000000073CB                 db  41h ; A
.eh_frame:00000000000073CC                 db  0Eh
.eh_frame:00000000000073CD                 db  28h ; (
.eh_frame:00000000000073CE                 db  42h ; B
.eh_frame:00000000000073CF                 db  0Eh
.eh_frame:00000000000073D0                 db  20h
.eh_frame:00000000000073D1                 db  42h ; B
.eh_frame:00000000000073D2                 db  0Eh
.eh_frame:00000000000073D3                 db  18h
.eh_frame:00000000000073D4                 db  42h ; B
.eh_frame:00000000000073D5                 db  0Eh
.eh_frame:00000000000073D6                 db  10h
.eh_frame:00000000000073D7                 db  42h ; B
.eh_frame:00000000000073D8                 db  0Eh
.eh_frame:00000000000073D9                 db    8
.eh_frame:00000000000073DA                 db  41h ; A
.eh_frame:00000000000073DB                 db  0Bh
.eh_frame:00000000000073DC                 db  79h ; y
.eh_frame:00000000000073DD                 db  0Ah
.eh_frame:00000000000073DE                 db  0Eh
.eh_frame:00000000000073DF                 db  68h ; h
.eh_frame:00000000000073E0                 db  42h ; B
.eh_frame:00000000000073E1                 db  0Eh
.eh_frame:00000000000073E2                 db  70h ; p
.eh_frame:00000000000073E3                 db  42h ; B
.eh_frame:00000000000073E4                 db  0Eh
.eh_frame:00000000000073E5                 db  78h ; x
.eh_frame:00000000000073E6                 db  42h ; B
.eh_frame:00000000000073E7                 db  0Eh
.eh_frame:00000000000073E8                 db  80h
.eh_frame:00000000000073E9                 db    1
.eh_frame:00000000000073EA                 db  51h ; Q
.eh_frame:00000000000073EB                 db  0Bh
.eh_frame:00000000000073EC                 db  10h
.eh_frame:00000000000073ED                 db    0
.eh_frame:00000000000073EE                 db    0
.eh_frame:00000000000073EF                 db    0
.eh_frame:00000000000073F0                 db 0F0h
.eh_frame:00000000000073F1                 db    6
.eh_frame:00000000000073F2                 db    0
.eh_frame:00000000000073F3                 db    0
.eh_frame:00000000000073F4                 db  1Ch
.eh_frame:00000000000073F5                 db 0D4h
.eh_frame:00000000000073F6                 db 0FFh
.eh_frame:00000000000073F7                 db 0FFh
.eh_frame:00000000000073F8                 db  20h
.eh_frame:00000000000073F9                 db    0
.eh_frame:00000000000073FA                 db    0
.eh_frame:00000000000073FB                 db    0
.eh_frame:00000000000073FC                 db    0
.eh_frame:00000000000073FD                 db    0
.eh_frame:00000000000073FE                 db    0
.eh_frame:00000000000073FF                 db    0
.eh_frame:0000000000007400                 db  18h
.eh_frame:0000000000007401                 db    0
.eh_frame:0000000000007402                 db    0
.eh_frame:0000000000007403                 db    0
.eh_frame:0000000000007404                 db    4
.eh_frame:0000000000007405                 db    7
.eh_frame:0000000000007406                 db    0
.eh_frame:0000000000007407                 db    0
.eh_frame:0000000000007408                 db  28h ; (
.eh_frame:0000000000007409                 db 0D4h
.eh_frame:000000000000740A                 db 0FFh
.eh_frame:000000000000740B                 db 0FFh
.eh_frame:000000000000740C                 db  78h ; x
.eh_frame:000000000000740D                 db    0
.eh_frame:000000000000740E                 db    0
.eh_frame:000000000000740F                 db    0
.eh_frame:0000000000007410                 db    0
.eh_frame:0000000000007411                 db  44h ; D
.eh_frame:0000000000007412                 db  0Eh
.eh_frame:0000000000007413                 db  70h ; p
.eh_frame:0000000000007414                 db    2
.eh_frame:0000000000007415                 db  60h ; `
.eh_frame:0000000000007416                 db  0Ah
.eh_frame:0000000000007417                 db  0Eh
.eh_frame:0000000000007418                 db    8
.eh_frame:0000000000007419                 db  41h ; A
.eh_frame:000000000000741A                 db  0Bh
.eh_frame:000000000000741B                 db    0
.eh_frame:000000000000741C                 db  28h ; (
.eh_frame:000000000000741D                 db    0
.eh_frame:000000000000741E                 db    0
.eh_frame:000000000000741F                 db    0
.eh_frame:0000000000007420                 db  20h
.eh_frame:0000000000007421                 db    7
.eh_frame:0000000000007422                 db    0
.eh_frame:0000000000007423                 db    0
.eh_frame:0000000000007424                 db  8Ch
.eh_frame:0000000000007425                 db 0D4h
.eh_frame:0000000000007426                 db 0FFh
.eh_frame:0000000000007427                 db 0FFh
.eh_frame:0000000000007428                 db 0D5h
.eh_frame:0000000000007429                 db    0
.eh_frame:000000000000742A                 db    0
.eh_frame:000000000000742B                 db    0
.eh_frame:000000000000742C                 db    0
.eh_frame:000000000000742D                 db  41h ; A
.eh_frame:000000000000742E                 db  0Eh
.eh_frame:000000000000742F                 db  10h
.eh_frame:0000000000007430                 db  86h
.eh_frame:0000000000007431                 db    2
.eh_frame:0000000000007432                 db  41h ; A
.eh_frame:0000000000007433                 db  0Eh
.eh_frame:0000000000007434                 db  18h
.eh_frame:0000000000007435                 db  83h
.eh_frame:0000000000007436                 db    3
.eh_frame:0000000000007437                 db  50h ; P
.eh_frame:0000000000007438                 db  0Eh
.eh_frame:0000000000007439                 db 0D0h
.eh_frame:000000000000743A                 db    1
.eh_frame:000000000000743B                 db    2
.eh_frame:000000000000743C                 db 0ABh
.eh_frame:000000000000743D                 db  0Ah
.eh_frame:000000000000743E                 db  0Eh
.eh_frame:000000000000743F                 db  18h
.eh_frame:0000000000007440                 db  41h ; A
.eh_frame:0000000000007441                 db  0Eh
.eh_frame:0000000000007442                 db  10h
.eh_frame:0000000000007443                 db  41h ; A
.eh_frame:0000000000007444                 db  0Eh
.eh_frame:0000000000007445                 db    8
.eh_frame:0000000000007446                 db  41h ; A
.eh_frame:0000000000007447                 db  0Bh
.eh_frame:0000000000007448                 db  1Ch
.eh_frame:0000000000007449                 db    0
.eh_frame:000000000000744A                 db    0
.eh_frame:000000000000744B                 db    0
.eh_frame:000000000000744C                 db  4Ch ; L
.eh_frame:000000000000744D                 db    7
.eh_frame:000000000000744E                 db    0
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db  40h ; @
.eh_frame:0000000000007451                 db 0D5h
.eh_frame:0000000000007452                 db 0FFh
.eh_frame:0000000000007453                 db 0FFh
.eh_frame:0000000000007454                 db  80h
.eh_frame:0000000000007455                 db    0
.eh_frame:0000000000007456                 db    0
.eh_frame:0000000000007457                 db    0
.eh_frame:0000000000007458                 db    0
.eh_frame:0000000000007459                 db  41h ; A
.eh_frame:000000000000745A                 db  0Eh
.eh_frame:000000000000745B                 db  10h
.eh_frame:000000000000745C                 db  83h
.eh_frame:000000000000745D                 db    2
.eh_frame:000000000000745E                 db    2
.eh_frame:000000000000745F                 db  7Ah ; z
.eh_frame:0000000000007460                 db  0Eh
.eh_frame:0000000000007461                 db    8
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db    0
.eh_frame:0000000000007465                 db    0
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db  18h
.eh_frame:0000000000007469                 db    0
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db  6Ch ; l
.eh_frame:000000000000746D                 db    7
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db 0A0h
.eh_frame:0000000000007471                 db 0D5h
.eh_frame:0000000000007472                 db 0FFh
.eh_frame:0000000000007473                 db 0FFh
.eh_frame:0000000000007474                 db  1Ah
.eh_frame:0000000000007475                 db    0
.eh_frame:0000000000007476                 db    0
.eh_frame:0000000000007477                 db    0
.eh_frame:0000000000007478                 db    0
.eh_frame:0000000000007479                 db  41h ; A
.eh_frame:000000000000747A                 db  0Eh
.eh_frame:000000000000747B                 db  10h
.eh_frame:000000000000747C                 db  83h
.eh_frame:000000000000747D                 db    2
.eh_frame:000000000000747E                 db  53h ; S
.eh_frame:000000000000747F                 db  0Ah
.eh_frame:0000000000007480                 db  0Eh
.eh_frame:0000000000007481                 db    8
.eh_frame:0000000000007482                 db  41h ; A
.eh_frame:0000000000007483                 db  0Bh
.eh_frame:0000000000007484                 db  10h
.eh_frame:0000000000007485                 db    0
.eh_frame:0000000000007486                 db    0
.eh_frame:0000000000007487                 db    0
.eh_frame:0000000000007488                 db  88h
.eh_frame:0000000000007489                 db    7
.eh_frame:000000000000748A                 db    0
.eh_frame:000000000000748B                 db    0
.eh_frame:000000000000748C                 db 0A4h
.eh_frame:000000000000748D                 db 0D5h
.eh_frame:000000000000748E                 db 0FFh
.eh_frame:000000000000748F                 db 0FFh
.eh_frame:0000000000007490                 db  24h ; $
.eh_frame:0000000000007491                 db    0
.eh_frame:0000000000007492                 db    0
.eh_frame:0000000000007493                 db    0
.eh_frame:0000000000007494                 db    0
.eh_frame:0000000000007495                 db  5Fh ; _
.eh_frame:0000000000007496                 db  0Eh
.eh_frame:0000000000007497                 db  10h
.eh_frame:0000000000007498                 db  10h
.eh_frame:0000000000007499                 db    0
.eh_frame:000000000000749A                 db    0
.eh_frame:000000000000749B                 db    0
.eh_frame:000000000000749C                 db  9Ch
.eh_frame:000000000000749D                 db    7
.eh_frame:000000000000749E                 db    0
.eh_frame:000000000000749F                 db    0
.eh_frame:00000000000074A0                 db 0C0h
.eh_frame:00000000000074A1                 db 0D5h
.eh_frame:00000000000074A2                 db 0FFh
.eh_frame:00000000000074A3                 db 0FFh
.eh_frame:00000000000074A4                 db    2
.eh_frame:00000000000074A5                 db    0
.eh_frame:00000000000074A6                 db    0
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db    0
.eh_frame:00000000000074A9                 db    0
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db  20h
.eh_frame:00000000000074AD                 db    0
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db 0B0h
.eh_frame:00000000000074B1                 db    7
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db 0BCh
.eh_frame:00000000000074B5                 db 0D5h
.eh_frame:00000000000074B6                 db 0FFh
.eh_frame:00000000000074B7                 db 0FFh
.eh_frame:00000000000074B8                 db  36h ; 6
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db    0
.eh_frame:00000000000074BD                 db  44h ; D
.eh_frame:00000000000074BE                 db  0Eh
.eh_frame:00000000000074BF                 db  10h
.eh_frame:00000000000074C0                 db  83h
.eh_frame:00000000000074C1                 db    2
.eh_frame:00000000000074C2                 db  5Dh ; ]
.eh_frame:00000000000074C3                 db  0Ah
.eh_frame:00000000000074C4                 db  0Eh
.eh_frame:00000000000074C5                 db    8
.eh_frame:00000000000074C6                 db  47h ; G
.eh_frame:00000000000074C7                 db  0Bh
.eh_frame:00000000000074C8                 db  48h ; H
.eh_frame:00000000000074C9                 db  0Ah
.eh_frame:00000000000074CA                 db  0Eh
.eh_frame:00000000000074CB                 db    8
.eh_frame:00000000000074CC                 db  41h ; A
.eh_frame:00000000000074CD                 db  0Bh
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db  10h
.eh_frame:00000000000074D1                 db    0
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4                 db 0D4h
.eh_frame:00000000000074D5                 db    7
.eh_frame:00000000000074D6                 db    0
.eh_frame:00000000000074D7                 db    0
.eh_frame:00000000000074D8                 db 0D8h
.eh_frame:00000000000074D9                 db 0D5h
.eh_frame:00000000000074DA                 db 0FFh
.eh_frame:00000000000074DB                 db 0FFh
.eh_frame:00000000000074DC                 db  24h ; $
.eh_frame:00000000000074DD                 db    0
.eh_frame:00000000000074DE                 db    0
.eh_frame:00000000000074DF                 db    0
.eh_frame:00000000000074E0                 db    0
.eh_frame:00000000000074E1                 db  5Fh ; _
.eh_frame:00000000000074E2                 db  0Eh
.eh_frame:00000000000074E3                 db  10h
.eh_frame:00000000000074E4                 db  14h
.eh_frame:00000000000074E5                 db    0
.eh_frame:00000000000074E6                 db    0
.eh_frame:00000000000074E7                 db    0
.eh_frame:00000000000074E8                 db 0E8h
.eh_frame:00000000000074E9                 db    7
.eh_frame:00000000000074EA                 db    0
.eh_frame:00000000000074EB                 db    0
.eh_frame:00000000000074EC                 db 0F4h
.eh_frame:00000000000074ED                 db 0D5h
.eh_frame:00000000000074EE                 db 0FFh
.eh_frame:00000000000074EF                 db 0FFh
.eh_frame:00000000000074F0                 db  82h
.eh_frame:00000000000074F1                 db    0
.eh_frame:00000000000074F2                 db    0
.eh_frame:00000000000074F3                 db    0
.eh_frame:00000000000074F4                 db    0
.eh_frame:00000000000074F5                 db    2
.eh_frame:00000000000074F6                 db  5Fh ; _
.eh_frame:00000000000074F7                 db  0Eh
.eh_frame:00000000000074F8                 db  10h
.eh_frame:00000000000074F9                 db  49h ; I
.eh_frame:00000000000074FA                 db  0Eh
.eh_frame:00000000000074FB                 db    8
.eh_frame:00000000000074FC                 db  14h
.eh_frame:00000000000074FD                 db    0
.eh_frame:00000000000074FE                 db    0
.eh_frame:00000000000074FF                 db    0
.eh_frame:0000000000007500                 db    0
.eh_frame:0000000000007501                 db    8
.eh_frame:0000000000007502                 db    0
.eh_frame:0000000000007503                 db    0
.eh_frame:0000000000007504                 db  6Ch ; l
.eh_frame:0000000000007505                 db 0D6h
.eh_frame:0000000000007506                 db 0FFh
.eh_frame:0000000000007507                 db 0FFh
.eh_frame:0000000000007508                 db  4Ah ; J
.eh_frame:0000000000007509                 db    0
.eh_frame:000000000000750A                 db    0
.eh_frame:000000000000750B                 db    0
.eh_frame:000000000000750C                 db    0
.eh_frame:000000000000750D                 db    2
.eh_frame:000000000000750E                 db  45h ; E
.eh_frame:000000000000750F                 db  0Eh
.eh_frame:0000000000007510                 db  10h
.eh_frame:0000000000007511                 db    0
.eh_frame:0000000000007512                 db    0
.eh_frame:0000000000007513                 db    0
.eh_frame:0000000000007514                 db  18h
.eh_frame:0000000000007515                 db    0
.eh_frame:0000000000007516                 db    0
.eh_frame:0000000000007517                 db    0
.eh_frame:0000000000007518                 db  18h
.eh_frame:0000000000007519                 db    8
.eh_frame:000000000000751A                 db    0
.eh_frame:000000000000751B                 db    0
.eh_frame:000000000000751C                 db 0A4h
.eh_frame:000000000000751D                 db 0D6h
.eh_frame:000000000000751E                 db 0FFh
.eh_frame:000000000000751F                 db 0FFh
.eh_frame:0000000000007520                 db  17h
.eh_frame:0000000000007521                 db    0
.eh_frame:0000000000007522                 db    0
.eh_frame:0000000000007523                 db    0
.eh_frame:0000000000007524                 db    0
.eh_frame:0000000000007525                 db  41h ; A
.eh_frame:0000000000007526                 db  0Eh
.eh_frame:0000000000007527                 db  10h
.eh_frame:0000000000007528                 db  83h
.eh_frame:0000000000007529                 db    2
.eh_frame:000000000000752A                 db  51h ; Q
.eh_frame:000000000000752B                 db  0Eh
.eh_frame:000000000000752C                 db    8
.eh_frame:000000000000752D                 db    0
.eh_frame:000000000000752E                 db    0
.eh_frame:000000000000752F                 db    0
.eh_frame:0000000000007530                 db  18h
.eh_frame:0000000000007531                 db    0
.eh_frame:0000000000007532                 db    0
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db  34h ; 4
.eh_frame:0000000000007535                 db    8
.eh_frame:0000000000007536                 db    0
.eh_frame:0000000000007537                 db    0
.eh_frame:0000000000007538                 db 0A8h
.eh_frame:0000000000007539                 db 0D6h
.eh_frame:000000000000753A                 db 0FFh
.eh_frame:000000000000753B                 db 0FFh
.eh_frame:000000000000753C                 db  2Eh ; .
.eh_frame:000000000000753D                 db    0
.eh_frame:000000000000753E                 db    0
.eh_frame:000000000000753F                 db    0
.eh_frame:0000000000007540                 db    0
.eh_frame:0000000000007541                 db  47h ; G
.eh_frame:0000000000007542                 db  0Eh
.eh_frame:0000000000007543                 db  10h
.eh_frame:0000000000007544                 db  61h ; a
.eh_frame:0000000000007545                 db  0Ah
.eh_frame:0000000000007546                 db  0Eh
.eh_frame:0000000000007547                 db    8
.eh_frame:0000000000007548                 db  41h ; A
.eh_frame:0000000000007549                 db  0Bh
.eh_frame:000000000000754A                 db    0
.eh_frame:000000000000754B                 db    0
.eh_frame:000000000000754C                 db  24h ; $
.eh_frame:000000000000754D                 db    0
.eh_frame:000000000000754E                 db    0
.eh_frame:000000000000754F                 db    0
.eh_frame:0000000000007550                 db  50h ; P
.eh_frame:0000000000007551                 db    8
.eh_frame:0000000000007552                 db    0
.eh_frame:0000000000007553                 db    0
.eh_frame:0000000000007554                 db 0BCh
.eh_frame:0000000000007555                 db 0D6h
.eh_frame:0000000000007556                 db 0FFh
.eh_frame:0000000000007557                 db 0FFh
.eh_frame:0000000000007558                 db  28h ; (
.eh_frame:0000000000007559                 db    0
.eh_frame:000000000000755A                 db    0
.eh_frame:000000000000755B                 db    0
.eh_frame:000000000000755C                 db    0
.eh_frame:000000000000755D                 db  41h ; A
.eh_frame:000000000000755E                 db  0Eh
.eh_frame:000000000000755F                 db  10h
.eh_frame:0000000000007560                 db  86h
.eh_frame:0000000000007561                 db    2
.eh_frame:0000000000007562                 db  41h ; A
.eh_frame:0000000000007563                 db  0Eh
.eh_frame:0000000000007564                 db  18h
.eh_frame:0000000000007565                 db  83h
.eh_frame:0000000000007566                 db    3
.eh_frame:0000000000007567                 db  4Dh ; M
.eh_frame:0000000000007568                 db  0Eh
.eh_frame:0000000000007569                 db  20h
.eh_frame:000000000000756A                 db  49h ; I
.eh_frame:000000000000756B                 db  0Eh
.eh_frame:000000000000756C                 db  18h
.eh_frame:000000000000756D                 db  47h ; G
.eh_frame:000000000000756E                 db  0Eh
.eh_frame:000000000000756F                 db  10h
.eh_frame:0000000000007570                 db  41h ; A
.eh_frame:0000000000007571                 db  0Eh
.eh_frame:0000000000007572                 db    8
.eh_frame:0000000000007573                 db    0
.eh_frame:0000000000007574                 db  18h
.eh_frame:0000000000007575                 db    0
.eh_frame:0000000000007576                 db    0
.eh_frame:0000000000007577                 db    0
.eh_frame:0000000000007578                 db  78h ; x
.eh_frame:0000000000007579                 db    8
.eh_frame:000000000000757A                 db    0
.eh_frame:000000000000757B                 db    0
.eh_frame:000000000000757C                 db 0C4h
.eh_frame:000000000000757D                 db 0D6h
.eh_frame:000000000000757E                 db 0FFh
.eh_frame:000000000000757F                 db 0FFh
.eh_frame:0000000000007580                 db  13h
.eh_frame:0000000000007581                 db    0
.eh_frame:0000000000007582                 db    0
.eh_frame:0000000000007583                 db    0
.eh_frame:0000000000007584                 db    0
.eh_frame:0000000000007585                 db  41h ; A
.eh_frame:0000000000007586                 db  0Eh
.eh_frame:0000000000007587                 db  10h
.eh_frame:0000000000007588                 db  83h
.eh_frame:0000000000007589                 db    2
.eh_frame:000000000000758A                 db  50h ; P
.eh_frame:000000000000758B                 db  0Eh
.eh_frame:000000000000758C                 db    8
.eh_frame:000000000000758D                 db    0
.eh_frame:000000000000758E                 db    0
.eh_frame:000000000000758F                 db    0
.eh_frame:0000000000007590                 db  14h
.eh_frame:0000000000007591                 db    0
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db  94h
.eh_frame:0000000000007595                 db    8
.eh_frame:0000000000007596                 db    0
.eh_frame:0000000000007597                 db    0
.eh_frame:0000000000007598                 db 0C8h
.eh_frame:0000000000007599                 db 0D6h
.eh_frame:000000000000759A                 db 0FFh
.eh_frame:000000000000759B                 db 0FFh
.eh_frame:000000000000759C                 db  35h ; 5
.eh_frame:000000000000759D                 db    0
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db    0
.eh_frame:00000000000075A1                 db  4Bh ; K
.eh_frame:00000000000075A2                 db  0Eh
.eh_frame:00000000000075A3                 db  10h
.eh_frame:00000000000075A4                 db    0
.eh_frame:00000000000075A5                 db    0
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db  48h ; H
.eh_frame:00000000000075A9                 db    0
.eh_frame:00000000000075AA                 db    0
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC                 db 0ACh
.eh_frame:00000000000075AD                 db    8
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db 0F0h
.eh_frame:00000000000075B1                 db 0D6h
.eh_frame:00000000000075B2                 db 0FFh
.eh_frame:00000000000075B3                 db 0FFh
.eh_frame:00000000000075B4                 db  11h
.eh_frame:00000000000075B5                 db    1
.eh_frame:00000000000075B6                 db    0
.eh_frame:00000000000075B7                 db    0
.eh_frame:00000000000075B8                 db    0
.eh_frame:00000000000075B9                 db  42h ; B
.eh_frame:00000000000075BA                 db  0Eh
.eh_frame:00000000000075BB                 db  10h
.eh_frame:00000000000075BC                 db  8Fh
.eh_frame:00000000000075BD                 db    2
.eh_frame:00000000000075BE                 db  42h ; B
.eh_frame:00000000000075BF                 db  0Eh
.eh_frame:00000000000075C0                 db  18h
.eh_frame:00000000000075C1                 db  8Eh
.eh_frame:00000000000075C2                 db    3
.eh_frame:00000000000075C3                 db  45h ; E
.eh_frame:00000000000075C4                 db  0Eh
.eh_frame:00000000000075C5                 db  20h
.eh_frame:00000000000075C6                 db  8Dh
.eh_frame:00000000000075C7                 db    4
.eh_frame:00000000000075C8                 db  42h ; B
.eh_frame:00000000000075C9                 db  0Eh
.eh_frame:00000000000075CA                 db  28h ; (
.eh_frame:00000000000075CB                 db  8Ch
.eh_frame:00000000000075CC                 db    5
.eh_frame:00000000000075CD                 db  44h ; D
.eh_frame:00000000000075CE                 db  0Eh
.eh_frame:00000000000075CF                 db  30h ; 0
.eh_frame:00000000000075D0                 db  86h
.eh_frame:00000000000075D1                 db    6
.eh_frame:00000000000075D2                 db  41h ; A
.eh_frame:00000000000075D3                 db  0Eh
.eh_frame:00000000000075D4                 db  38h ; 8
.eh_frame:00000000000075D5                 db  83h
.eh_frame:00000000000075D6                 db    7
.eh_frame:00000000000075D7                 db  4Eh ; N
.eh_frame:00000000000075D8                 db  0Eh
.eh_frame:00000000000075D9                 db  50h ; P
.eh_frame:00000000000075DA                 db    2
.eh_frame:00000000000075DB                 db  9Fh
.eh_frame:00000000000075DC                 db  0Ah
.eh_frame:00000000000075DD                 db  0Eh
.eh_frame:00000000000075DE                 db  38h ; 8
.eh_frame:00000000000075DF                 db  41h ; A
.eh_frame:00000000000075E0                 db  0Eh
.eh_frame:00000000000075E1                 db  30h ; 0
.eh_frame:00000000000075E2                 db  41h ; A
.eh_frame:00000000000075E3                 db  0Eh
.eh_frame:00000000000075E4                 db  28h ; (
.eh_frame:00000000000075E5                 db  42h ; B
.eh_frame:00000000000075E6                 db  0Eh
.eh_frame:00000000000075E7                 db  20h
.eh_frame:00000000000075E8                 db  42h ; B
.eh_frame:00000000000075E9                 db  0Eh
.eh_frame:00000000000075EA                 db  18h
.eh_frame:00000000000075EB                 db  42h ; B
.eh_frame:00000000000075EC                 db  0Eh
.eh_frame:00000000000075ED                 db  10h
.eh_frame:00000000000075EE                 db  42h ; B
.eh_frame:00000000000075EF                 db  0Eh
.eh_frame:00000000000075F0                 db    8
.eh_frame:00000000000075F1                 db  49h ; I
.eh_frame:00000000000075F2                 db  0Bh
.eh_frame:00000000000075F3                 db    0
.eh_frame:00000000000075F4                 db  18h
.eh_frame:00000000000075F5                 db    0
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db 0F8h
.eh_frame:00000000000075F9                 db    8
.eh_frame:00000000000075FA                 db    0
.eh_frame:00000000000075FB                 db    0
.eh_frame:00000000000075FC                 db 0C4h
.eh_frame:00000000000075FD                 db 0D7h
.eh_frame:00000000000075FE                 db 0FFh
.eh_frame:00000000000075FF                 db 0FFh
.eh_frame:0000000000007600                 db  21h ; !
.eh_frame:0000000000007601                 db    0
.eh_frame:0000000000007602                 db    0
.eh_frame:0000000000007603                 db    0
.eh_frame:0000000000007604                 db    0
.eh_frame:0000000000007605                 db  44h ; D
.eh_frame:0000000000007606                 db  0Eh
.eh_frame:0000000000007607                 db  18h
.eh_frame:0000000000007608                 db  42h ; B
.eh_frame:0000000000007609                 db  0Eh
.eh_frame:000000000000760A                 db  20h
.eh_frame:000000000000760B                 db  5Ah ; Z
.eh_frame:000000000000760C                 db  0Eh
.eh_frame:000000000000760D                 db    8
.eh_frame:000000000000760E                 db    0
.eh_frame:000000000000760F                 db    0
.eh_frame:0000000000007610                 db  4Ch ; L
.eh_frame:0000000000007611                 db    0
.eh_frame:0000000000007612                 db    0
.eh_frame:0000000000007613                 db    0
.eh_frame:0000000000007614                 db  14h
.eh_frame:0000000000007615                 db    9
.eh_frame:0000000000007616                 db    0
.eh_frame:0000000000007617                 db    0
.eh_frame:0000000000007618                 db 0D8h
.eh_frame:0000000000007619                 db 0D7h
.eh_frame:000000000000761A                 db 0FFh
.eh_frame:000000000000761B                 db 0FFh
.eh_frame:000000000000761C                 db 0B3h
.eh_frame:000000000000761D                 db    6
.eh_frame:000000000000761E                 db    0
.eh_frame:000000000000761F                 db    0
.eh_frame:0000000000007620                 db    0
.eh_frame:0000000000007621                 db  42h ; B
.eh_frame:0000000000007622                 db  0Eh
.eh_frame:0000000000007623                 db  10h
.eh_frame:0000000000007624                 db  8Fh
.eh_frame:0000000000007625                 db    2
.eh_frame:0000000000007626                 db  42h ; B
.eh_frame:0000000000007627                 db  0Eh
.eh_frame:0000000000007628                 db  18h
.eh_frame:0000000000007629                 db  8Eh
.eh_frame:000000000000762A                 db    3
.eh_frame:000000000000762B                 db  42h ; B
.eh_frame:000000000000762C                 db  0Eh
.eh_frame:000000000000762D                 db  20h
.eh_frame:000000000000762E                 db  8Dh
.eh_frame:000000000000762F                 db    4
.eh_frame:0000000000007630                 db  42h ; B
.eh_frame:0000000000007631                 db  0Eh
.eh_frame:0000000000007632                 db  28h ; (
.eh_frame:0000000000007633                 db  8Ch
.eh_frame:0000000000007634                 db    5
.eh_frame:0000000000007635                 db  41h ; A
.eh_frame:0000000000007636                 db  0Eh
.eh_frame:0000000000007637                 db  30h ; 0
.eh_frame:0000000000007638                 db  86h
.eh_frame:0000000000007639                 db    6
.eh_frame:000000000000763A                 db  41h ; A
.eh_frame:000000000000763B                 db  0Eh
.eh_frame:000000000000763C                 db  38h ; 8
.eh_frame:000000000000763D                 db  83h
.eh_frame:000000000000763E                 db    7
.eh_frame:000000000000763F                 db  44h ; D
.eh_frame:0000000000007640                 db  0Eh
.eh_frame:0000000000007641                 db  60h ; `
.eh_frame:0000000000007642                 db    2
.eh_frame:0000000000007643                 db  96h
.eh_frame:0000000000007644                 db  0Ah
.eh_frame:0000000000007645                 db  0Eh
.eh_frame:0000000000007646                 db  38h ; 8
.eh_frame:0000000000007647                 db  41h ; A
.eh_frame:0000000000007648                 db  0Eh
.eh_frame:0000000000007649                 db  30h ; 0
.eh_frame:000000000000764A                 db  41h ; A
.eh_frame:000000000000764B                 db  0Eh
.eh_frame:000000000000764C                 db  28h ; (
.eh_frame:000000000000764D                 db  42h ; B
.eh_frame:000000000000764E                 db  0Eh
.eh_frame:000000000000764F                 db  20h
.eh_frame:0000000000007650                 db  42h ; B
.eh_frame:0000000000007651                 db  0Eh
.eh_frame:0000000000007652                 db  18h
.eh_frame:0000000000007653                 db  42h ; B
.eh_frame:0000000000007654                 db  0Eh
.eh_frame:0000000000007655                 db  10h
.eh_frame:0000000000007656                 db  42h ; B
.eh_frame:0000000000007657                 db  0Eh
.eh_frame:0000000000007658                 db    8
.eh_frame:0000000000007659                 db  42h ; B
.eh_frame:000000000000765A                 db  0Bh
.eh_frame:000000000000765B                 db    0
.eh_frame:000000000000765C                 db    0
.eh_frame:000000000000765D                 db    0
.eh_frame:000000000000765E                 db    0
.eh_frame:000000000000765F                 db    0
.eh_frame:0000000000007660                 db  3Ch ; <
.eh_frame:0000000000007661                 db    0
.eh_frame:0000000000007662                 db    0
.eh_frame:0000000000007663                 db    0
.eh_frame:0000000000007664                 db  64h ; d
.eh_frame:0000000000007665                 db    9
.eh_frame:0000000000007666                 db    0
.eh_frame:0000000000007667                 db    0
.eh_frame:0000000000007668                 db  48h ; H
.eh_frame:0000000000007669                 db 0DEh
.eh_frame:000000000000766A                 db 0FFh
.eh_frame:000000000000766B                 db 0FFh
.eh_frame:000000000000766C                 db  83h
.eh_frame:000000000000766D                 db    0
.eh_frame:000000000000766E                 db    0
.eh_frame:000000000000766F                 db    0
.eh_frame:0000000000007670                 db    0
.eh_frame:0000000000007671                 db  42h ; B
.eh_frame:0000000000007672                 db  0Eh
.eh_frame:0000000000007673                 db  10h
.eh_frame:0000000000007674                 db  8Dh
.eh_frame:0000000000007675                 db    2
.eh_frame:0000000000007676                 db  42h ; B
.eh_frame:0000000000007677                 db  0Eh
.eh_frame:0000000000007678                 db  18h
.eh_frame:0000000000007679                 db  8Ch
.eh_frame:000000000000767A                 db    3
.eh_frame:000000000000767B                 db  44h ; D
.eh_frame:000000000000767C                 db  0Eh
.eh_frame:000000000000767D                 db  20h
.eh_frame:000000000000767E                 db  86h
.eh_frame:000000000000767F                 db    4
.eh_frame:0000000000007680                 db  41h ; A
.eh_frame:0000000000007681                 db  0Eh
.eh_frame:0000000000007682                 db  28h ; (
.eh_frame:0000000000007683                 db  83h
.eh_frame:0000000000007684                 db    5
.eh_frame:0000000000007685                 db  4Ah ; J
.eh_frame:0000000000007686                 db  0Eh
.eh_frame:0000000000007687                 db  40h ; @
.eh_frame:0000000000007688                 db    2
.eh_frame:0000000000007689                 db  64h ; d
.eh_frame:000000000000768A                 db  0Ah
.eh_frame:000000000000768B                 db  0Eh
.eh_frame:000000000000768C                 db  28h ; (
.eh_frame:000000000000768D                 db  41h ; A
.eh_frame:000000000000768E                 db  0Eh
.eh_frame:000000000000768F                 db  20h
.eh_frame:0000000000007690                 db  41h ; A
.eh_frame:0000000000007691                 db  0Eh
.eh_frame:0000000000007692                 db  18h
.eh_frame:0000000000007693                 db  42h ; B
.eh_frame:0000000000007694                 db  0Eh
.eh_frame:0000000000007695                 db  10h
.eh_frame:0000000000007696                 db  42h ; B
.eh_frame:0000000000007697                 db  0Eh
.eh_frame:0000000000007698                 db    8
.eh_frame:0000000000007699                 db  41h ; A
.eh_frame:000000000000769A                 db  0Bh
.eh_frame:000000000000769B                 db    0
.eh_frame:000000000000769C                 db    0
.eh_frame:000000000000769D                 db    0
.eh_frame:000000000000769E                 db    0
.eh_frame:000000000000769F                 db    0
.eh_frame:00000000000076A0                 db  4Ch ; L
.eh_frame:00000000000076A1                 db    0
.eh_frame:00000000000076A2                 db    0
.eh_frame:00000000000076A3                 db    0
.eh_frame:00000000000076A4                 db 0A4h
.eh_frame:00000000000076A5                 db    9
.eh_frame:00000000000076A6                 db    0
.eh_frame:00000000000076A7                 db    0
.eh_frame:00000000000076A8                 db  98h
.eh_frame:00000000000076A9                 db 0DEh
.eh_frame:00000000000076AA                 db 0FFh
.eh_frame:00000000000076AB                 db 0FFh
.eh_frame:00000000000076AC                 db  7Dh ; }
.eh_frame:00000000000076AD                 db    0
.eh_frame:00000000000076AE                 db    0
.eh_frame:00000000000076AF                 db    0
.eh_frame:00000000000076B0                 db    0
.eh_frame:00000000000076B1                 db  42h ; B
.eh_frame:00000000000076B2                 db  0Eh
.eh_frame:00000000000076B3                 db  10h
.eh_frame:00000000000076B4                 db  8Ch
.eh_frame:00000000000076B5                 db    2
.eh_frame:00000000000076B6                 db  41h ; A
.eh_frame:00000000000076B7                 db  0Eh
.eh_frame:00000000000076B8                 db  18h
.eh_frame:00000000000076B9                 db  86h
.eh_frame:00000000000076BA                 db    3
.eh_frame:00000000000076BB                 db  44h ; D
.eh_frame:00000000000076BC                 db  0Eh
.eh_frame:00000000000076BD                 db  20h
.eh_frame:00000000000076BE                 db  83h
.eh_frame:00000000000076BF                 db    4
.eh_frame:00000000000076C0                 db  69h ; i
.eh_frame:00000000000076C1                 db  0Ah
.eh_frame:00000000000076C2                 db  0Eh
.eh_frame:00000000000076C3                 db  18h
.eh_frame:00000000000076C4                 db  41h ; A
.eh_frame:00000000000076C5                 db  0Eh
.eh_frame:00000000000076C6                 db  10h
.eh_frame:00000000000076C7                 db  42h ; B
.eh_frame:00000000000076C8                 db  0Eh
.eh_frame:00000000000076C9                 db    8
.eh_frame:00000000000076CA                 db  45h ; E
.eh_frame:00000000000076CB                 db  0Bh
.eh_frame:00000000000076CC                 db  55h ; U
.eh_frame:00000000000076CD                 db  0Ah
.eh_frame:00000000000076CE                 db  0Eh
.eh_frame:00000000000076CF                 db  18h
.eh_frame:00000000000076D0                 db  41h ; A
.eh_frame:00000000000076D1                 db  0Eh
.eh_frame:00000000000076D2                 db  10h
.eh_frame:00000000000076D3                 db  42h ; B
.eh_frame:00000000000076D4                 db  0Eh
.eh_frame:00000000000076D5                 db    8
.eh_frame:00000000000076D6                 db  48h ; H
.eh_frame:00000000000076D7                 db  0Bh
.eh_frame:00000000000076D8                 db  41h ; A
.eh_frame:00000000000076D9                 db  0Ah
.eh_frame:00000000000076DA                 db  0Eh
.eh_frame:00000000000076DB                 db  18h
.eh_frame:00000000000076DC                 db  46h ; F
.eh_frame:00000000000076DD                 db  0Eh
.eh_frame:00000000000076DE                 db  10h
.eh_frame:00000000000076DF                 db  42h ; B
.eh_frame:00000000000076E0                 db  0Eh
.eh_frame:00000000000076E1                 db    8
.eh_frame:00000000000076E2                 db  47h ; G
.eh_frame:00000000000076E3                 db  0Bh
.eh_frame:00000000000076E4                 db  49h ; I
.eh_frame:00000000000076E5                 db  0Eh
.eh_frame:00000000000076E6                 db  18h
.eh_frame:00000000000076E7                 db  41h ; A
.eh_frame:00000000000076E8                 db  0Eh
.eh_frame:00000000000076E9                 db  10h
.eh_frame:00000000000076EA                 db  42h ; B
.eh_frame:00000000000076EB                 db  0Eh
.eh_frame:00000000000076EC                 db    8
.eh_frame:00000000000076ED                 db    0
.eh_frame:00000000000076EE                 db    0
.eh_frame:00000000000076EF                 db    0
.eh_frame:00000000000076F0                 db  1Ch
.eh_frame:00000000000076F1                 db    0
.eh_frame:00000000000076F2                 db    0
.eh_frame:00000000000076F3                 db    0
.eh_frame:00000000000076F4                 db 0F4h
.eh_frame:00000000000076F5                 db    9
.eh_frame:00000000000076F6                 db    0
.eh_frame:00000000000076F7                 db    0
.eh_frame:00000000000076F8                 db 0C8h
.eh_frame:00000000000076F9                 db 0DEh
.eh_frame:00000000000076FA                 db 0FFh
.eh_frame:00000000000076FB                 db 0FFh
.eh_frame:00000000000076FC                 db  60h ; `
.eh_frame:00000000000076FD                 db    0
.eh_frame:00000000000076FE                 db    0
.eh_frame:00000000000076FF                 db    0
.eh_frame:0000000000007700                 db    0
.eh_frame:0000000000007701                 db  44h ; D
.eh_frame:0000000000007702                 db  0Eh
.eh_frame:0000000000007703                 db  10h
.eh_frame:0000000000007704                 db  75h ; u
.eh_frame:0000000000007705                 db  0Ah
.eh_frame:0000000000007706                 db  0Eh
.eh_frame:0000000000007707                 db    8
.eh_frame:0000000000007708                 db  47h ; G
.eh_frame:0000000000007709                 db  0Bh
.eh_frame:000000000000770A                 db  5Fh ; _
.eh_frame:000000000000770B                 db  0Eh
.eh_frame:000000000000770C                 db    8
.eh_frame:000000000000770D                 db    0
.eh_frame:000000000000770E                 db    0
.eh_frame:000000000000770F                 db    0
.eh_frame:0000000000007710                 db  1Ch
.eh_frame:0000000000007711                 db    0
.eh_frame:0000000000007712                 db    0
.eh_frame:0000000000007713                 db    0
.eh_frame:0000000000007714                 db  14h
.eh_frame:0000000000007715                 db  0Ah
.eh_frame:0000000000007716                 db    0
.eh_frame:0000000000007717                 db    0
.eh_frame:0000000000007718                 db    8
.eh_frame:0000000000007719                 db 0DFh
.eh_frame:000000000000771A                 db 0FFh
.eh_frame:000000000000771B                 db 0FFh
.eh_frame:000000000000771C                 db  3Ch ; <
.eh_frame:000000000000771D                 db    0
.eh_frame:000000000000771E                 db    0
.eh_frame:000000000000771F                 db    0
.eh_frame:0000000000007720                 db    0
.eh_frame:0000000000007721                 db  44h ; D
.eh_frame:0000000000007722                 db  0Eh
.eh_frame:0000000000007723                 db  10h
.eh_frame:0000000000007724                 db  61h ; a
.eh_frame:0000000000007725                 db  0Ah
.eh_frame:0000000000007726                 db  0Eh
.eh_frame:0000000000007727                 db    8
.eh_frame:0000000000007728                 db  4Bh ; K
.eh_frame:0000000000007729                 db  0Bh
.eh_frame:000000000000772A                 db  4Bh ; K
.eh_frame:000000000000772B                 db  0Eh
.eh_frame:000000000000772C                 db    8
.eh_frame:000000000000772D                 db    0
.eh_frame:000000000000772E                 db    0
.eh_frame:000000000000772F                 db    0
.eh_frame:0000000000007730                 db  34h ; 4
.eh_frame:0000000000007731                 db    0
.eh_frame:0000000000007732                 db    0
.eh_frame:0000000000007733                 db    0
.eh_frame:0000000000007734                 db  34h ; 4
.eh_frame:0000000000007735                 db  0Ah
.eh_frame:0000000000007736                 db    0
.eh_frame:0000000000007737                 db    0
.eh_frame:0000000000007738                 db  28h ; (
.eh_frame:0000000000007739                 db 0DFh
.eh_frame:000000000000773A                 db 0FFh
.eh_frame:000000000000773B                 db 0FFh
.eh_frame:000000000000773C                 db  7Bh ; {
.eh_frame:000000000000773D                 db    0
.eh_frame:000000000000773E                 db    0
.eh_frame:000000000000773F                 db    0
.eh_frame:0000000000007740                 db    0
.eh_frame:0000000000007741                 db  42h ; B
.eh_frame:0000000000007742                 db  0Eh
.eh_frame:0000000000007743                 db  10h
.eh_frame:0000000000007744                 db  8Ch
.eh_frame:0000000000007745                 db    2
.eh_frame:0000000000007746                 db  41h ; A
.eh_frame:0000000000007747                 db  0Eh
.eh_frame:0000000000007748                 db  18h
.eh_frame:0000000000007749                 db  86h
.eh_frame:000000000000774A                 db    3
.eh_frame:000000000000774B                 db  41h ; A
.eh_frame:000000000000774C                 db  0Eh
.eh_frame:000000000000774D                 db  20h
.eh_frame:000000000000774E                 db  83h
.eh_frame:000000000000774F                 db    4
.eh_frame:0000000000007750                 db  7Dh ; }
.eh_frame:0000000000007751                 db  0Ah
.eh_frame:0000000000007752                 db  0Eh
.eh_frame:0000000000007753                 db  18h
.eh_frame:0000000000007754                 db  41h ; A
.eh_frame:0000000000007755                 db  0Eh
.eh_frame:0000000000007756                 db  10h
.eh_frame:0000000000007757                 db  42h ; B
.eh_frame:0000000000007758                 db  0Eh
.eh_frame:0000000000007759                 db    8
.eh_frame:000000000000775A                 db  44h ; D
.eh_frame:000000000000775B                 db  0Bh
.eh_frame:000000000000775C                 db  60h ; `
.eh_frame:000000000000775D                 db  0Ah
.eh_frame:000000000000775E                 db  0Eh
.eh_frame:000000000000775F                 db  18h
.eh_frame:0000000000007760                 db  41h ; A
.eh_frame:0000000000007761                 db  0Eh
.eh_frame:0000000000007762                 db  10h
.eh_frame:0000000000007763                 db  42h ; B
.eh_frame:0000000000007764                 db  0Eh
.eh_frame:0000000000007765                 db    8
.eh_frame:0000000000007766                 db  45h ; E
.eh_frame:0000000000007767                 db  0Bh
.eh_frame:0000000000007768                 db  1Ch
.eh_frame:0000000000007769                 db    0
.eh_frame:000000000000776A                 db    0
.eh_frame:000000000000776B                 db    0
.eh_frame:000000000000776C                 db  6Ch ; l
.eh_frame:000000000000776D                 db  0Ah
.eh_frame:000000000000776E                 db    0
.eh_frame:000000000000776F                 db    0
.eh_frame:0000000000007770                 db  70h ; p
.eh_frame:0000000000007771                 db 0DFh
.eh_frame:0000000000007772                 db 0FFh
.eh_frame:0000000000007773                 db 0FFh
.eh_frame:0000000000007774                 db  40h ; @
.eh_frame:0000000000007775                 db    0
.eh_frame:0000000000007776                 db    0
.eh_frame:0000000000007777                 db    0
.eh_frame:0000000000007778                 db    0
.eh_frame:0000000000007779                 db  44h ; D
.eh_frame:000000000000777A                 db  0Eh
.eh_frame:000000000000777B                 db  10h
.eh_frame:000000000000777C                 db  83h
.eh_frame:000000000000777D                 db    2
.eh_frame:000000000000777E                 db  5Ah ; Z
.eh_frame:000000000000777F                 db  0Ah
.eh_frame:0000000000007780                 db  0Eh
.eh_frame:0000000000007781                 db    8
.eh_frame:0000000000007782                 db  4Ah ; J
.eh_frame:0000000000007783                 db  0Bh
.eh_frame:0000000000007784                 db  53h ; S
.eh_frame:0000000000007785                 db  0Eh
.eh_frame:0000000000007786                 db    8
.eh_frame:0000000000007787                 db    0
.eh_frame:0000000000007788                 db  2Ch ; ,
.eh_frame:0000000000007789                 db    0
.eh_frame:000000000000778A                 db    0
.eh_frame:000000000000778B                 db    0
.eh_frame:000000000000778C                 db  8Ch
.eh_frame:000000000000778D                 db  0Ah
.eh_frame:000000000000778E                 db    0
.eh_frame:000000000000778F                 db    0
.eh_frame:0000000000007790                 db  90h
.eh_frame:0000000000007791                 db 0DFh
.eh_frame:0000000000007792                 db 0FFh
.eh_frame:0000000000007793                 db 0FFh
.eh_frame:0000000000007794                 db  57h ; W
.eh_frame:0000000000007795                 db    0
.eh_frame:0000000000007796                 db    0
.eh_frame:0000000000007797                 db    0
.eh_frame:0000000000007798                 db    0
.eh_frame:0000000000007799                 db  63h ; c
.eh_frame:000000000000779A                 db  0Eh
.eh_frame:000000000000779B                 db  10h
.eh_frame:000000000000779C                 db  8Ch
.eh_frame:000000000000779D                 db    2
.eh_frame:000000000000779E                 db  41h ; A
.eh_frame:000000000000779F                 db  0Eh
.eh_frame:00000000000077A0                 db  18h
.eh_frame:00000000000077A1                 db  86h
.eh_frame:00000000000077A2                 db    3
.eh_frame:00000000000077A3                 db  44h ; D
.eh_frame:00000000000077A4                 db  0Eh
.eh_frame:00000000000077A5                 db  20h
.eh_frame:00000000000077A6                 db  83h
.eh_frame:00000000000077A7                 db    4
.eh_frame:00000000000077A8                 db  6Bh ; k
.eh_frame:00000000000077A9                 db  0Eh
.eh_frame:00000000000077AA                 db  18h
.eh_frame:00000000000077AB                 db  41h ; A
.eh_frame:00000000000077AC                 db  0Eh
.eh_frame:00000000000077AD                 db  10h
.eh_frame:00000000000077AE                 db  42h ; B
.eh_frame:00000000000077AF                 db  0Eh
.eh_frame:00000000000077B0                 db    8
.eh_frame:00000000000077B1                 db    0
.eh_frame:00000000000077B2                 db    0
.eh_frame:00000000000077B3                 db    0
.eh_frame:00000000000077B4                 db    0
.eh_frame:00000000000077B5                 db    0
.eh_frame:00000000000077B6                 db    0
.eh_frame:00000000000077B7                 db    0
.eh_frame:00000000000077B8                 db  44h ; D
.eh_frame:00000000000077B9                 db    0
.eh_frame:00000000000077BA                 db    0
.eh_frame:00000000000077BB                 db    0
.eh_frame:00000000000077BC                 db 0BCh
.eh_frame:00000000000077BD                 db  0Ah
.eh_frame:00000000000077BE                 db    0
.eh_frame:00000000000077BF                 db    0
.eh_frame:00000000000077C0                 db 0C0h
.eh_frame:00000000000077C1                 db 0DFh
.eh_frame:00000000000077C2                 db 0FFh
.eh_frame:00000000000077C3                 db 0FFh
.eh_frame:00000000000077C4                 db  65h ; e
.eh_frame:00000000000077C5                 db    0
.eh_frame:00000000000077C6                 db    0
.eh_frame:00000000000077C7                 db    0
.eh_frame:00000000000077C8                 db    0
.eh_frame:00000000000077C9                 db  42h ; B
.eh_frame:00000000000077CA                 db  0Eh
.eh_frame:00000000000077CB                 db  10h
.eh_frame:00000000000077CC                 db  8Fh
.eh_frame:00000000000077CD                 db    2
.eh_frame:00000000000077CE                 db  42h ; B
.eh_frame:00000000000077CF                 db  0Eh
.eh_frame:00000000000077D0                 db  18h
.eh_frame:00000000000077D1                 db  8Eh
.eh_frame:00000000000077D2                 db    3
.eh_frame:00000000000077D3                 db  45h ; E
.eh_frame:00000000000077D4                 db  0Eh
.eh_frame:00000000000077D5                 db  20h
.eh_frame:00000000000077D6                 db  8Dh
.eh_frame:00000000000077D7                 db    4
.eh_frame:00000000000077D8                 db  42h ; B
.eh_frame:00000000000077D9                 db  0Eh
.eh_frame:00000000000077DA                 db  28h ; (
.eh_frame:00000000000077DB                 db  8Ch
.eh_frame:00000000000077DC                 db    5
.eh_frame:00000000000077DD                 db  48h ; H
.eh_frame:00000000000077DE                 db  0Eh
.eh_frame:00000000000077DF                 db  30h ; 0
.eh_frame:00000000000077E0                 db  86h
.eh_frame:00000000000077E1                 db    6
.eh_frame:00000000000077E2                 db  48h ; H
.eh_frame:00000000000077E3                 db  0Eh
.eh_frame:00000000000077E4                 db  38h ; 8
.eh_frame:00000000000077E5                 db  83h
.eh_frame:00000000000077E6                 db    7
.eh_frame:00000000000077E7                 db  4Dh ; M
.eh_frame:00000000000077E8                 db  0Eh
.eh_frame:00000000000077E9                 db  40h ; @
.eh_frame:00000000000077EA                 db  72h ; r
.eh_frame:00000000000077EB                 db  0Eh
.eh_frame:00000000000077EC                 db  38h ; 8
.eh_frame:00000000000077ED                 db  41h ; A
.eh_frame:00000000000077EE                 db  0Eh
.eh_frame:00000000000077EF                 db  30h ; 0
.eh_frame:00000000000077F0                 db  41h ; A
.eh_frame:00000000000077F1                 db  0Eh
.eh_frame:00000000000077F2                 db  28h ; (
.eh_frame:00000000000077F3                 db  42h ; B
.eh_frame:00000000000077F4                 db  0Eh
.eh_frame:00000000000077F5                 db  20h
.eh_frame:00000000000077F6                 db  42h ; B
.eh_frame:00000000000077F7                 db  0Eh
.eh_frame:00000000000077F8                 db  18h
.eh_frame:00000000000077F9                 db  42h ; B
.eh_frame:00000000000077FA                 db  0Eh
.eh_frame:00000000000077FB                 db  10h
.eh_frame:00000000000077FC                 db  42h ; B
.eh_frame:00000000000077FD                 db  0Eh
.eh_frame:00000000000077FE                 db    8
.eh_frame:00000000000077FF                 db    0
.eh_frame:0000000000007800                 db  14h
.eh_frame:0000000000007801                 db    0
.eh_frame:0000000000007802                 db    0
.eh_frame:0000000000007803                 db    0
.eh_frame:0000000000007804                 db    4
.eh_frame:0000000000007805                 db  0Bh
.eh_frame:0000000000007806                 db    0
.eh_frame:0000000000007807                 db    0
.eh_frame:0000000000007808                 db 0E8h
.eh_frame:0000000000007809                 db 0DFh
.eh_frame:000000000000780A                 db 0FFh
.eh_frame:000000000000780B                 db 0FFh
.eh_frame:000000000000780C                 db    2
.eh_frame:000000000000780D                 db    0
.eh_frame:000000000000780E                 db    0
.eh_frame:000000000000780F                 db    0
.eh_frame:0000000000007810                 db    0
.eh_frame:0000000000007811                 db    0
.eh_frame:0000000000007812                 db    0
.eh_frame:0000000000007813                 db    0
.eh_frame:0000000000007814                 db    0
.eh_frame:0000000000007815                 db    0
.eh_frame:0000000000007816                 db    0
.eh_frame:0000000000007817                 db    0
.eh_frame:0000000000007818                 db  10h
.eh_frame:0000000000007819                 db    0
.eh_frame:000000000000781A                 db    0
.eh_frame:000000000000781B                 db    0
.eh_frame:000000000000781C                 db  1Ch
.eh_frame:000000000000781D                 db  0Bh
.eh_frame:000000000000781E                 db    0
.eh_frame:000000000000781F                 db    0
.eh_frame:0000000000007820                 db 0E0h
.eh_frame:0000000000007821                 db 0DFh
.eh_frame:0000000000007822                 db 0FFh
.eh_frame:0000000000007823                 db 0FFh
.eh_frame:0000000000007824                 db  0Eh
.eh_frame:0000000000007825                 db    0
.eh_frame:0000000000007826                 db    0
.eh_frame:0000000000007827                 db    0
.eh_frame:0000000000007828                 db    0
.eh_frame:0000000000007829                 db    0
.eh_frame:000000000000782A                 db    0
.eh_frame:000000000000782B                 db    0
.eh_frame:000000000000782C __FRAME_END__   db    0
.eh_frame:000000000000782D                 db    0
.eh_frame:000000000000782E                 db    0
.eh_frame:000000000000782F                 db    0
.eh_frame:000000000000782F _eh_frame       ends
.eh_frame:000000000000782F
.init_array:0000000000207B10 ; ELF Initialization Function Table
.init_array:0000000000207B10 ; ===========================================================================
.init_array:0000000000207B10
.init_array:0000000000207B10 ; Segment type: Pure data
.init_array:0000000000207B10 ; Segment permissions: Read/Write
.init_array:0000000000207B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B10                 assume cs:_init_array
.init_array:0000000000207B10                 ;org 207B10h
.init_array:0000000000207B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B10
.fini_array:0000000000207B18 ; ELF Termination Function Table
.fini_array:0000000000207B18 ; ===========================================================================
.fini_array:0000000000207B18
.fini_array:0000000000207B18 ; Segment type: Pure data
.fini_array:0000000000207B18 ; Segment permissions: Read/Write
.fini_array:0000000000207B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B18                 assume cs:_fini_array
.fini_array:0000000000207B18                 ;org 207B18h
.fini_array:0000000000207B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B18
.data.rel.ro:0000000000207B20 ; ===========================================================================
.data.rel.ro:0000000000207B20
.data.rel.ro:0000000000207B20 ; Segment type: Pure data
.data.rel.ro:0000000000207B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B20                 ;org 207B20h
.data.rel.ro:0000000000207B20 ; struct option longopts
.data.rel.ro:0000000000207B20 longopts        dq offset aNoCreate     ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main:loc_1753↑o
.data.rel.ro:0000000000207B20                 dd 0                    ; has_arg ; "no-create"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 63h                  ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aIoBlocks+2   ; "io-blocks"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  6Fh ; o
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aReference+2  ; "reference"
.data.rel.ro:0000000000207B68                 db    1
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  72h ; r
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aSize+2       ; "size"
.data.rel.ro:0000000000207B88                 db    1
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  73h ; s
.data.rel.ro:0000000000207B99                 db    0
.data.rel.ro:0000000000207B9A                 db    0
.data.rel.ro:0000000000207B9B                 db    0
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Eh ; ~
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db  7Dh ; }
.data.rel.ro:0000000000207BD9                 db 0FFh
.data.rel.ro:0000000000207BDA                 db 0FFh
.data.rel.ro:0000000000207BDB                 db 0FFh
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 db    0
.data.rel.ro:0000000000207BE1                 db    0
.data.rel.ro:0000000000207BE2                 db    0
.data.rel.ro:0000000000207BE3                 db    0
.data.rel.ro:0000000000207BE4                 db    0
.data.rel.ro:0000000000207BE5                 db    0
.data.rel.ro:0000000000207BE6                 db    0
.data.rel.ro:0000000000207BE7                 db    0
.data.rel.ro:0000000000207BE8                 db    0
.data.rel.ro:0000000000207BE9                 db    0
.data.rel.ro:0000000000207BEA                 db    0
.data.rel.ro:0000000000207BEB                 db    0
.data.rel.ro:0000000000207BEC                 db    0
.data.rel.ro:0000000000207BED                 db    0
.data.rel.ro:0000000000207BEE                 db    0
.data.rel.ro:0000000000207BEF                 db    0
.data.rel.ro:0000000000207BF0                 db    0
.data.rel.ro:0000000000207BF1                 db    0
.data.rel.ro:0000000000207BF2                 db    0
.data.rel.ro:0000000000207BF3                 db    0
.data.rel.ro:0000000000207BF4                 db    0
.data.rel.ro:0000000000207BF5                 db    0
.data.rel.ro:0000000000207BF6                 db    0
.data.rel.ro:0000000000207BF7                 db    0
.data.rel.ro:0000000000207BF8                 db    0
.data.rel.ro:0000000000207BF9                 db    0
.data.rel.ro:0000000000207BFA                 db    0
.data.rel.ro:0000000000207BFB                 db    0
.data.rel.ro:0000000000207BFC                 db    0
.data.rel.ro:0000000000207BFD                 db    0
.data.rel.ro:0000000000207BFE                 db    0
.data.rel.ro:0000000000207BFF                 db    0
.data.rel.ro:0000000000207C00                 public quoting_style_args
.data.rel.ro:0000000000207C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C28                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C50                 db    0
.data.rel.ro:0000000000207C51                 db    0
.data.rel.ro:0000000000207C52                 db    0
.data.rel.ro:0000000000207C53                 db    0
.data.rel.ro:0000000000207C54                 db    0
.data.rel.ro:0000000000207C55                 db    0
.data.rel.ro:0000000000207C56                 db    0
.data.rel.ro:0000000000207C57                 db    0
.data.rel.ro:0000000000207C57 _data_rel_ro    ends
.data.rel.ro:0000000000207C57
LOAD:0000000000207C58 ; ELF Dynamic Information
LOAD:0000000000207C58 ; ===========================================================================
LOAD:0000000000207C58
LOAD:0000000000207C58 ; Segment type: Pure data
LOAD:0000000000207C58 ; Segment permissions: Read/Write
LOAD:0000000000207C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C58                 assume cs:LOAD
LOAD:0000000000207C58                 ;org 207C58h
LOAD:0000000000207C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C68                 Elf64_Dyn <0Ch, 13B8h>  ; DT_INIT
LOAD:0000000000207C78                 Elf64_Dyn <0Dh, 5810h>  ; DT_FINI
LOAD:0000000000207C88                 Elf64_Dyn <19h, 207B10h> ; DT_INIT_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <1Ah, 207B18h> ; DT_FINI_ARRAY
LOAD:0000000000207CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CD8                 Elf64_Dyn <5, 898h>     ; DT_STRTAB
LOAD:0000000000207CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CF8                 Elf64_Dyn <0Ah, 2C6h>   ; DT_STRSZ
LOAD:0000000000207D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D28                 Elf64_Dyn <3, 207E48h>  ; DT_PLTGOT
LOAD:0000000000207D38                 Elf64_Dyn <2, 468h>     ; DT_PLTRELSZ
LOAD:0000000000207D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D58                 Elf64_Dyn <17h, 0F50h>  ; DT_JMPREL
LOAD:0000000000207D68                 Elf64_Dyn <7, 0C38h>    ; DT_RELA
LOAD:0000000000207D78                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000207D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFFEh, 0BD8h> ; DT_VERNEED
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DD8                 Elf64_Dyn <6FFFFFF0h, 0B5Eh> ; DT_VERSYM
LOAD:0000000000207DE8                 Elf64_Dyn <6FFFFFF9h, 16h> ; DT_RELACOUNT
LOAD:0000000000207DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E28                 db    0
LOAD:0000000000207E29                 db    0
LOAD:0000000000207E2A                 db    0
LOAD:0000000000207E2B                 db    0
LOAD:0000000000207E2C                 db    0
LOAD:0000000000207E2D                 db    0
LOAD:0000000000207E2E                 db    0
LOAD:0000000000207E2F                 db    0
LOAD:0000000000207E30                 db    0
LOAD:0000000000207E31                 db    0
LOAD:0000000000207E32                 db    0
LOAD:0000000000207E33                 db    0
LOAD:0000000000207E34                 db    0
LOAD:0000000000207E35                 db    0
LOAD:0000000000207E36                 db    0
LOAD:0000000000207E37                 db    0
LOAD:0000000000207E38                 db    0
LOAD:0000000000207E39                 db    0
LOAD:0000000000207E3A                 db    0
LOAD:0000000000207E3B                 db    0
LOAD:0000000000207E3C                 db    0
LOAD:0000000000207E3D                 db    0
LOAD:0000000000207E3E                 db    0
LOAD:0000000000207E3F                 db    0
LOAD:0000000000207E40                 db    0
LOAD:0000000000207E41                 db    0
LOAD:0000000000207E42                 db    0
LOAD:0000000000207E43                 db    0
LOAD:0000000000207E44                 db    0
LOAD:0000000000207E45                 db    0
LOAD:0000000000207E46                 db    0
LOAD:0000000000207E47                 db    0
LOAD:0000000000207E47 LOAD            ends
LOAD:0000000000207E47
.got:0000000000207E48 ; ===========================================================================
.got:0000000000207E48
.got:0000000000207E48 ; Segment type: Pure data
.got:0000000000207E48 ; Segment permissions: Read/Write
.got:0000000000207E48 _got            segment qword public 'DATA' use64
.got:0000000000207E48                 assume cs:_got
.got:0000000000207E48                 ;org 207E48h
.got:0000000000207E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E50 qword_207E50    dq 0                    ; DATA XREF: sub_13D0↑r
.got:0000000000207E58 qword_207E58    dq 0                    ; DATA XREF: sub_13D0+6↑r
.got:0000000000207E60 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E68 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E70 __errno_location_ptr dq offset __errno_location
.got:0000000000207E70                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E78 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E80 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E88 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E90 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E98 __strtol_internal_ptr dq offset __strtol_internal
.got:0000000000207E98                                         ; DATA XREF: ___strtol_internal↑r
.got:0000000000207EA0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207EA8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207EA8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EB0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EB8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EB8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EC0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EC8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207ED0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207ED8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EE0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000207EE8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EF0 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:0000000000207EF8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207F00 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207F00                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207F08 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207F10 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000207F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F40 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000207F48 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F50 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F58 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F60 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000207F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F90 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000207F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FE0                                         ; DATA XREF: start+24↑r
.got:0000000000207FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FF8 _got            ends
.got:0000000000207FF8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+E2↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2692↑r
.data:0000000000208018                                         ; xalloc_die+17↑r
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_3B0D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000208080                                         ; LOAD:0000000000000838↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000208088                                         ; main+DB↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public optind@@GLIBC_2_2_5
.bss:0000000000208090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:0000000000208090                                         ; main:loc_19AE↑r
.bss:0000000000208090                                         ; Alternative name is 'optind'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208094                 align 8
.bss:0000000000208098                 public optarg@@GLIBC_2_2_5
.bss:0000000000208098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:0000000000208098                                         ; main+128↑r ...
.bss:0000000000208098                                         ; Alternative name is 'optarg'
.bss:0000000000208098                                         ; Copy of shared data
.bss:00000000002080A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080A0                                         ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000820↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 align 20h
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:00000000002080C0                                         ; usage+3D↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 10h
.bss:00000000002080D0 ; char *ref_file
.bss:00000000002080D0 ref_file        dq ?                    ; DATA XREF: main+21F↑w
.bss:00000000002080D0                                         ; main+2D5↑r ...
.bss:00000000002080D8 block_mode      db ?                    ; DATA XREF: main:loc_17A0↑w
.bss:00000000002080D8                                         ; main:loc_1A27↑r ...
.bss:00000000002080D9 no_create       db ?                    ; DATA XREF: main:loc_17F0↑w
.bss:00000000002080D9                                         ; main:loc_1AC5↑r ...
.bss:00000000002080DA                 align 20h
.bss:00000000002080E0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080E0                                         ; close_stdout+1B↑r
.bss:00000000002080E1                 align 8
.bss:00000000002080E8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080E8                                         ; close_stdout+56↑r
.bss:00000000002080F0                 public program_name
.bss:00000000002080F0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080F0                                         ; set_program_name:loc_272D↑w
.bss:00000000002080F8                 align 20h
.bss:0000000000208100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208100                                         ; quotearg_free+46↑o ...
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208200                                         ; get_quoting_style↑o ...
.bss:0000000000208210 xmmword_208210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208220 xmmword_208220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208230 qword_208230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208230 _bss            ends
.bss:0000000000208230
.prgend:0000000000208238 ; ===========================================================================
.prgend:0000000000208238
.prgend:0000000000208238 ; Segment type: Zero-length
.prgend:0000000000208238 _prgend         segment byte public '' use64
.prgend:0000000000208238 _end            label byte
.prgend:0000000000208238 _prgend         ends
.prgend:0000000000208238
extern:0000000000208240 ; ===========================================================================
extern:0000000000208240
extern:0000000000208240 ; Segment type: Externs
extern:0000000000208240 ; extern
extern:0000000000208240 ; void free(void *ptr)
extern:0000000000208240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208248 ; void __noreturn abort(void)
extern:0000000000208248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208250 ; int *_errno_location(void)
extern:0000000000208250                 extrn __errno_location:near
extern:0000000000208250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208260 ; void __noreturn exit(int status)
extern:0000000000208260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208268 ; size_t _fpending(FILE *fp)
extern:0000000000208268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208270 ; char *textdomain(const char *domainname)
extern:0000000000208270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208278 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000208278                 extrn __strtol_internal:near
extern:0000000000208278                                         ; CODE XREF: ___strtol_internal↑j
extern:0000000000208278                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:0000000000208280 ; int fclose(FILE *stream)
extern:0000000000208280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208288                 extrn bindtextdomain:near
extern:0000000000208288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082A0 ; size_t strlen(const char *s)
extern:00000000002082A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082A8                 extrn __stack_chk_fail:near
extern:00000000002082A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082C0 ; char *strchr(const char *s, int c)
extern:00000000002082C0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002082C0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002082C8 ; char *strrchr(const char *s, int c)
extern:00000000002082C8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082C8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082D0 ; int ftruncate(int fd, __off_t length)
extern:00000000002082D0                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:00000000002082D0                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:00000000002082D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082E0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002082E0                 extrn __assert_fail:near
extern:00000000002082E0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002082E0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002082E8 ; void *memset(void *s, int c, size_t n)
extern:00000000002082E8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082E8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082F0 ; int close(int fd)
extern:00000000002082F0                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002082F0                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002082F8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002082F8                 extrn __libc_start_main:near
extern:00000000002082F8                                         ; CODE XREF: start+24↑p
extern:00000000002082F8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208300 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208300                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208300                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208308 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208308                 extrn fputs_unlocked:near
extern:0000000000208308                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208308                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208310 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208310                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208310                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208318 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208318                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208318                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208320 ; int fileno(FILE *stream)
extern:0000000000208320                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208320                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208328 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000208328                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000208328                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000208330 ; void *malloc(size_t size)
extern:0000000000208330                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208330                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208338 ; int fflush(FILE *stream)
extern:0000000000208338                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208338                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208340 ; char *nl_langinfo(nl_item item)
extern:0000000000208340                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208340                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208348 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000208348                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000208348                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000208350 ; int _freading(FILE *fp)
extern:0000000000208350                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208350                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208358 ; void *realloc(void *ptr, size_t size)
extern:0000000000208358                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208358                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208360 ; char *setlocale(int category, const char *locale)
extern:0000000000208360                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208360                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208368                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208368                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208370 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208370                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208370                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208378 ; int open(const char *file, int oflag, ...)
extern:0000000000208378                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000208378                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000208380 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208380                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208380                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208388 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208388                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208388                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208390 ; void __noreturn exit(int status)
extern:0000000000208390                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208390                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208398 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208398                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208398                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083A0                 extrn __fprintf_chk:near
extern:00000000002083A0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083A8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083A8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083A8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083B0 ; int iswprint(wint_t wc)
extern:00000000002083B0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083B0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083B8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083B8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083B8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083B8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083C0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083C0                 extrn __ctype_b_loc:near
extern:00000000002083C0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083C0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083C8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083C8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083D0                 extrn __gmon_start__:near ; weak
extern:00000000002083D0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083D0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083D8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083D8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083D8
extern:00000000002083D8
extern:00000000002083D8                 end start
