LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 303E1B2D80412D6725D65BBAE49FB46D35FF523DDD432199AC903F2F7E47153B
LOAD:0000000000000000 ; Input MD5    : B5285E55A09BFCB9F467370BCF6018FD
LOAD:0000000000000000 ; Input CRC32  : 200D0602
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/realpath
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'realpath.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'relpath.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'canonicalize.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 34FD0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 95B0h                ; Size in file image
LOAD:00000000000000D8                 dq 95B0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9A30h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209A30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 670h                 ; Size in file image
LOAD:0000000000000110                 dq 828h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7E70h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7E70h                ; Physical address
LOAD:00000000000001B0                 dq 3D4h                 ; Size in file image
LOAD:00000000000001B8                 dq 3D4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9A30h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209A30h              ; Physical address
LOAD:0000000000000220                 dq 5D0h                 ; Size in file image
LOAD:0000000000000228                 dq 5D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 59h, 2Ah, 0BCh, 59h, 2Dh, 93h, 79h, 0DAh, 0F3h, 7Eh ; Desc
LOAD:0000000000000284                 db 54h, 6Ah, 6Fh, 7Fh, 5Eh, 3Fh, 0DEh, 0EDh, 61h, 5Ah
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Ch
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8B0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8B0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8B0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_8B0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aReadlink - offset byte_8B0, 12h, 0, 0, \ ; "readlink"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8B0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_8B0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_8B0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_8B0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8B0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_8B0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aLxstat - offset byte_8B0, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_8B0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_8B0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_8B0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFxstatat - offset byte_8B0, 12h, 0, 0, \ ; "__fxstatat"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aOverflow - offset byte_8B0, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrrchr - offset byte_8B0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLseek - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004F0                            0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8B0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGetcwd - offset byte_8B0, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrspn - offset byte_8B0, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aLibcStartMain - offset byte_8B0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemcmp - offset byte_8B0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFputsUnlocked - offset byte_8B0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aCalloc - offset byte_8B0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrcmp - offset byte_8B0, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_8B0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8B0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8B0, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aXstat - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aMalloc - offset byte_8B0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFflush - offset byte_8B0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aNlLanginfo - offset byte_8B0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8B0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_8B0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aSetlocale - offset byte_8B0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aPrintfChk - offset byte_8B0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMemmove - offset byte_8B0, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aError - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aFseeko - offset byte_8B0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaAtexit - offset byte_8B0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8B0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8B0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8B0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aItmRegistertmc - offset byte_8B0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMbsinit - offset byte_8B0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aIswprint - offset byte_8B0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaFinalize - offset byte_8B0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8B0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStdout - offset byte_8B0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007F0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgname - offset byte_8B0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aProgramInvocat - offset byte_8B0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000820                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aPrognameFull - offset byte_8B0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8B0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000850                            offset __bss_start, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aStderr - offset byte_8B0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000868                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aOptind - offset byte_8B0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000880                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000898                 Elf64_Sym <offset aOptarg - offset byte_8B0, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000898                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0 ; ELF String Table
LOAD:00000000000008B0 byte_8B0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008B0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008B1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:00000000000008BB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000008C2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008CF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008D9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008E1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000008E9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:00000000000008F0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000008F8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000902 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000908 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000919 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000922 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:000000000000092B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000933 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000939 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000939                                         ; LOAD:0000000000000730↑o
LOAD:000000000000093F aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000946 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000946                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:000000000000095E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000095E                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000975 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:000000000000097C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000983 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:000000000000098A aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000099B aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:00000000000009A2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009B0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:00000000000009B7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009BD aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:00000000000009C4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000009CB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000009D2 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009DA aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009E6 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009F4 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000009FB aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A06 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A0D aReadlink       db 'readlink',0         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A16 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A22 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A29 aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A30 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A37 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A42 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A42                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A60 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A6F aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A77 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000A7F aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A7F                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000A8E aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A99 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AA0 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AA0                                         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AB2 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AB9 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000AC4 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AD3 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AD8 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AE3 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000AF3 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B00 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000B0A aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B16 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B21 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:0000000000000B2B aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B37 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B37                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000B53 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B62 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B62                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B7C ; ELF GNU Symbol Version Table
LOAD:0000000000000B7C                 dw 0
LOAD:0000000000000B7E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B88                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B9E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000BA4                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; getcwd@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BBC                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BBE                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BD0                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BDE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BE0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BE8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000BF8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BF8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8B0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C08                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8B0, \ ; "GLIBC_2.3"
LOAD:0000000000000C08                                10h>
LOAD:0000000000000C18                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8B0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8B0, \ ; "GLIBC_2.14"
LOAD:0000000000000C28                                10h>
LOAD:0000000000000C38                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8B0, \ ; "GLIBC_2.4"
LOAD:0000000000000C38                                10h>
LOAD:0000000000000C48                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8B0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C58 ; ELF RELA Relocation Table
LOAD:0000000000000C58                 Elf64_Rela <209A30h, 8, 1D90h> ; R_X86_64_RELATIVE +1D90h
LOAD:0000000000000C70                 Elf64_Rela <209A38h, 8, 1D50h> ; R_X86_64_RELATIVE +1D50h
LOAD:0000000000000C88                 Elf64_Rela <209A40h, 8, 703Dh> ; R_X86_64_RELATIVE +703Dh
LOAD:0000000000000CA0                 Elf64_Rela <209A60h, 8, 7053h> ; R_X86_64_RELATIVE +7053h
LOAD:0000000000000CB8                 Elf64_Rela <209A80h, 8, 7068h> ; R_X86_64_RELATIVE +7068h
LOAD:0000000000000CD0                 Elf64_Rela <209AA0h, 8, 7074h> ; R_X86_64_RELATIVE +7074h
LOAD:0000000000000CE8                 Elf64_Rela <209AC0h, 8, 7082h> ; R_X86_64_RELATIVE +7082h
LOAD:0000000000000D00                 Elf64_Rela <209AE0h, 8, 7088h> ; R_X86_64_RELATIVE +7088h
LOAD:0000000000000D18                 Elf64_Rela <209B00h, 8, 708Eh> ; R_X86_64_RELATIVE +708Eh
LOAD:0000000000000D30                 Elf64_Rela <209B20h, 8, 709Ah> ; R_X86_64_RELATIVE +709Ah
LOAD:0000000000000D48                 Elf64_Rela <209B40h, 8, 709Fh> ; R_X86_64_RELATIVE +709Fh
LOAD:0000000000000D60                 Elf64_Rela <209B60h, 8, 70A7h> ; R_X86_64_RELATIVE +70A7h
LOAD:0000000000000D78                 Elf64_Rela <209B80h, 8, 70B0h> ; R_X86_64_RELATIVE +70B0h
LOAD:0000000000000D90                 Elf64_Rela <209BA0h, 8, 70B5h> ; R_X86_64_RELATIVE +70B5h
LOAD:0000000000000DA8                 Elf64_Rela <209BE0h, 8, 7619h> ; R_X86_64_RELATIVE +7619h
LOAD:0000000000000DC0                 Elf64_Rela <209BE8h, 8, 7621h> ; R_X86_64_RELATIVE +7621h
LOAD:0000000000000DD8                 Elf64_Rela <209BF0h, 8, 7627h> ; R_X86_64_RELATIVE +7627h
LOAD:0000000000000DF0                 Elf64_Rela <209BF8h, 8, 7634h> ; R_X86_64_RELATIVE +7634h
LOAD:0000000000000E08                 Elf64_Rela <209C00h, 8, 7641h> ; R_X86_64_RELATIVE +7641h
LOAD:0000000000000E20                 Elf64_Rela <209C08h, 8, 7655h> ; R_X86_64_RELATIVE +7655h
LOAD:0000000000000E38                 Elf64_Rela <209C10h, 8, 7657h> ; R_X86_64_RELATIVE +7657h
LOAD:0000000000000E50                 Elf64_Rela <209C18h, 8, 763Ah> ; R_X86_64_RELATIVE +763Ah
LOAD:0000000000000E68                 Elf64_Rela <209C20h, 8, 7010h> ; R_X86_64_RELATIVE +7010h
LOAD:0000000000000E80                 Elf64_Rela <209C28h, 8, 765Fh> ; R_X86_64_RELATIVE +765Fh
LOAD:0000000000000E98                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000000EB0                 Elf64_Rela <20A018h, 8, 74F8h> ; R_X86_64_RELATIVE +74F8h
LOAD:0000000000000EC8                 Elf64_Rela <20A080h, 8, 20A090h> ; R_X86_64_RELATIVE +20A090h
LOAD:0000000000000EE0                 Elf64_Rela <20A098h, 8, 20A120h> ; R_X86_64_RELATIVE +20A120h
LOAD:0000000000000EF8                 Elf64_Rela <209FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000F10                 Elf64_Rela <209FC8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F28                 Elf64_Rela <209FD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F40                 Elf64_Rela <209FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F58                 Elf64_Rela <209FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F70                 Elf64_Rela <20A0A0h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F88                 Elf64_Rela <20A0A8h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000FA0                 Elf64_Rela <20A0B0h, 3C00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000FB8                 Elf64_Rela <20A0B8h, 3D00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000FD0                 Elf64_Rela <20A0C0h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FE8                 Elf64_Rela <20A0E0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001000 ; ELF JMPREL Relocation Table
LOAD:0000000000001000                 Elf64_Rela <209E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001018                 Elf64_Rela <209E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001030                 Elf64_Rela <209E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001048                 Elf64_Rela <209E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001060                 Elf64_Rela <209E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001078                 Elf64_Rela <209E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001090                 Elf64_Rela <209E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:00000000000010A8                 Elf64_Rela <209E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000010C0                 Elf64_Rela <209E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000010D8                 Elf64_Rela <209E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010F0                 Elf64_Rela <209E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001108                 Elf64_Rela <209E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001120                 Elf64_Rela <209EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001138                 Elf64_Rela <209EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001150                 Elf64_Rela <209EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001168                 Elf64_Rela <209EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001180                 Elf64_Rela <209EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001198                 Elf64_Rela <209EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:00000000000011B0                 Elf64_Rela <209ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000011C8                 Elf64_Rela <209ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000011E0                 Elf64_Rela <209EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011F8                 Elf64_Rela <209EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001210                 Elf64_Rela <209EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:0000000000001228                 Elf64_Rela <209EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001240                 Elf64_Rela <209F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001258                 Elf64_Rela <209F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001270                 Elf64_Rela <209F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001288                 Elf64_Rela <209F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000012A0                 Elf64_Rela <209F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000012B8                 Elf64_Rela <209F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000012D0                 Elf64_Rela <209F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:00000000000012E8                 Elf64_Rela <209F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001300                 Elf64_Rela <209F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001318                 Elf64_Rela <209F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001330                 Elf64_Rela <209F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001348                 Elf64_Rela <209F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001360                 Elf64_Rela <209F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001378                 Elf64_Rela <209F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001390                 Elf64_Rela <209F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:00000000000013A8                 Elf64_Rela <209F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000013C0                 Elf64_Rela <209F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000013D8                 Elf64_Rela <209F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000013F0                 Elf64_Rela <209F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001408                 Elf64_Rela <209F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001420                 Elf64_Rela <209FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001438                 Elf64_Rela <209FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001450                 Elf64_Rela <209FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001468                 Elf64_Rela <209FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001468 LOAD            ends
LOAD:0000000000001468
.init:0000000000001480 ; ===========================================================================
.init:0000000000001480
.init:0000000000001480 ; Segment type: Pure code
.init:0000000000001480 ; Segment permissions: Read/Execute
.init:0000000000001480 _init           segment dword public 'CODE' use64
.init:0000000000001480                 assume cs:_init
.init:0000000000001480                 ;org 1480h
.init:0000000000001480                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001480
.init:0000000000001480 ; =============== S U B R O U T I N E =======================================
.init:0000000000001480
.init:0000000000001480
.init:0000000000001480                 public _init_proc
.init:0000000000001480 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001480                 sub     rsp, 8          ; _init
.init:0000000000001484                 mov     rax, cs:__gmon_start___ptr
.init:000000000000148B                 test    rax, rax
.init:000000000000148E                 jz      short loc_1492
.init:0000000000001490                 call    rax ; __gmon_start__
.init:0000000000001492
.init:0000000000001492 loc_1492:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001492                 add     rsp, 8
.init:0000000000001496                 retn
.init:0000000000001496 _init_proc      endp
.init:0000000000001496
.init:0000000000001496 _init           ends
.init:0000000000001496
LOAD:0000000000001497 ; ===========================================================================
LOAD:0000000000001497
LOAD:0000000000001497 ; Segment type: Pure code
LOAD:0000000000001497 ; Segment permissions: Read/Execute
LOAD:0000000000001497 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001497                 assume cs:LOAD
LOAD:0000000000001497                 ;org 1497h
LOAD:0000000000001497                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001497                 align 20h
LOAD:0000000000001497 LOAD            ends
LOAD:0000000000001497
.plt:00000000000014A0 ; ===========================================================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Segment type: Pure code
.plt:00000000000014A0 ; Segment permissions: Read/Execute
.plt:00000000000014A0 _plt            segment para public 'CODE' use64
.plt:00000000000014A0                 assume cs:_plt
.plt:00000000000014A0                 ;org 14A0h
.plt:00000000000014A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0
.plt:00000000000014A0 sub_14A0        proc near               ; CODE XREF: .plt:00000000000014BB↓j
.plt:00000000000014A0                                         ; .plt:00000000000014CB↓j ...
.plt:00000000000014A0 ; __unwind {
.plt:00000000000014A0                 push    cs:qword_209E30
.plt:00000000000014A6                 jmp     cs:qword_209E38
.plt:00000000000014A6 sub_14A0        endp
.plt:00000000000014A6
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014AC                 align 10h
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void free(void *ptr)
.plt:00000000000014B0 _free           proc near               ; CODE XREF: main+2E5↓p
.plt:00000000000014B0                                         ; main+40F↓p ...
.plt:00000000000014B0                 jmp     cs:free_ptr
.plt:00000000000014B0 _free           endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0
.plt:00000000000014BB                 jmp     sub_14A0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: noreturn thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; void __noreturn abort(void)
.plt:00000000000014C0 _abort          proc near               ; CODE XREF: safe_hasher:loc_2E3D↓p
.plt:00000000000014C0                                         ; hash_get_first+3C↓p ...
.plt:00000000000014C0                 jmp     cs:abort_ptr
.plt:00000000000014C0 _abort          endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    1
.plt:00000000000014CB                 jmp     sub_14A0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int *__errno_location(void)
.plt:00000000000014D0 ___errno_location proc near             ; CODE XREF: main+33A↓p
.plt:00000000000014D0                                         ; main+476↓p ...
.plt:00000000000014D0                 jmp     cs:__errno_location_ptr
.plt:00000000000014D0 ___errno_location endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    2
.plt:00000000000014DB                 jmp     sub_14A0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014E0 _strncmp        proc near               ; CODE XREF: usage+22C↓p
.plt:00000000000014E0                                         ; usage+2ED↓p
.plt:00000000000014E0                 jmp     cs:strncmp_ptr
.plt:00000000000014E0 _strncmp        endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    3
.plt:00000000000014EB                 jmp     sub_14A0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: noreturn thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; void __noreturn _exit(int status)
.plt:00000000000014F0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014F0                 jmp     cs:_exit_ptr
.plt:00000000000014F0 __exit          endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    4
.plt:00000000000014FB                 jmp     sub_14A0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; size_t __fpending(FILE *fp)
.plt:0000000000001500 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001500                 jmp     cs:__fpending_ptr
.plt:0000000000001500 ___fpending     endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    5
.plt:000000000000150B                 jmp     sub_14A0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000001510 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000001510                 jmp     cs:readlink_ptr
.plt:0000000000001510 _readlink       endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    6
.plt:000000000000151B                 jmp     sub_14A0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; char *textdomain(const char *domainname)
.plt:0000000000001520 _textdomain     proc near               ; CODE XREF: main+59↓p
.plt:0000000000001520                 jmp     cs:textdomain_ptr
.plt:0000000000001520 _textdomain     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    7
.plt:000000000000152B                 jmp     sub_14A0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; int fclose(FILE *stream)
.plt:0000000000001530 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001530                                         ; rpl_fclose+6B↓j
.plt:0000000000001530                 jmp     cs:fclose_ptr
.plt:0000000000001530 _fclose         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    8
.plt:000000000000153B                 jmp     sub_14A0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001540 _bindtextdomain proc near               ; CODE XREF: main+4D↓p
.plt:0000000000001540                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001540 _bindtextdomain endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    9
.plt:000000000000154B                 jmp     sub_14A0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001550 _dcgettext      proc near               ; CODE XREF: main+447↓p
.plt:0000000000001550                                         ; isdir+7F↓p ...
.plt:0000000000001550                 jmp     cs:dcgettext_ptr
.plt:0000000000001550 _dcgettext      endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Ah
.plt:000000000000155B                 jmp     sub_14A0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001560 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001560                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001560 ___ctype_get_mb_cur_max endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    0Bh
.plt:000000000000156B                 jmp     sub_14A0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; size_t strlen(const char *s)
.plt:0000000000001570 _strlen         proc near               ; CODE XREF: buffer_or_output+19↓p
.plt:0000000000001570                                         ; canonicalize_filename_mode+77↓p ...
.plt:0000000000001570                 jmp     cs:strlen_ptr
.plt:0000000000001570 _strlen         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Ch
.plt:000000000000157B                 jmp     sub_14A0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001580 ___lxstat       proc near               ; CODE XREF: canonicalize_filename_mode:loc_2880↓p
.plt:0000000000001580                 jmp     cs:__lxstat_ptr
.plt:0000000000001580 ___lxstat       endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    0Dh
.plt:000000000000158B                 jmp     sub_14A0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: noreturn thunk
.plt:0000000000001590
.plt:0000000000001590 ___stack_chk_fail proc near             ; CODE XREF: isdir:loc_1F20↓p
.plt:0000000000001590                                         ; canonicalize_filename_mode:loc_2B91↓p ...
.plt:0000000000001590                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001590 ___stack_chk_fail endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    0Eh
.plt:000000000000159B                 jmp     sub_14A0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000015A0 _getopt_long    proc near               ; CODE XREF: main+83↓p
.plt:00000000000015A0                 jmp     cs:getopt_long_ptr
.plt:00000000000015A0 _getopt_long    endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    0Fh
.plt:00000000000015AB                 jmp     sub_14A0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000015B0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000015B0                 jmp     cs:mbrtowc_ptr
.plt:00000000000015B0 _mbrtowc        endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    10h
.plt:00000000000015BB                 jmp     sub_14A0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:00000000000015C0 ___fxstatat     proc near               ; CODE XREF: same_nameat_part_0+47↓p
.plt:00000000000015C0                                         ; same_nameat_part_0+7F↓p
.plt:00000000000015C0                 jmp     cs:__fxstatat_ptr
.plt:00000000000015C0 ___fxstatat     endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    11h
.plt:00000000000015CB                 jmp     sub_14A0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000015D0 ___overflow     proc near               ; CODE XREF: main:loc_1B3B↓p
.plt:00000000000015D0                 jmp     cs:__overflow_ptr
.plt:00000000000015D0 ___overflow     endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    12h
.plt:00000000000015DB                 jmp     sub_14A0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; char *strrchr(const char *s, int c)
.plt:00000000000015E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000015E0                 jmp     cs:strrchr_ptr
.plt:00000000000015E0 _strrchr        endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    13h
.plt:00000000000015EB                 jmp     sub_14A0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000015F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000015F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000015F0                 jmp     cs:lseek_ptr
.plt:00000000000015F0 _lseek          endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    14h
.plt:00000000000015FB                 jmp     sub_14A0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001600 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001600                                         ; xzalloc+12↓j
.plt:0000000000001600                 jmp     cs:memset_ptr
.plt:0000000000001600 _memset         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    15h
.plt:000000000000160B                 jmp     sub_14A0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *getcwd(char *buf, size_t size)
.plt:0000000000001610 _getcwd         proc near               ; CODE XREF: xgetcwd+5↓p
.plt:0000000000001610                 jmp     cs:getcwd_ptr
.plt:0000000000001610 _getcwd         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    16h
.plt:000000000000161B                 jmp     sub_14A0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001620 _strspn         proc near               ; CODE XREF: canonicalize_filename_mode+2A4↓p
.plt:0000000000001620                 jmp     cs:strspn_ptr
.plt:0000000000001620 _strspn         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    17h
.plt:000000000000162B                 jmp     sub_14A0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001630 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001630                                         ; same_nameat+69↓p
.plt:0000000000001630                 jmp     cs:memcmp_ptr
.plt:0000000000001630 _memcmp         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    18h
.plt:000000000000163B                 jmp     sub_14A0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001640 _fputs_unlocked proc near               ; CODE XREF: main+2B1↓p
.plt:0000000000001640                                         ; usage+9D↓p ...
.plt:0000000000001640                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001640 _fputs_unlocked endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    19h
.plt:000000000000164B                 jmp     sub_14A0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001650 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:0000000000001650                                         ; hash_rehash+C6↓p ...
.plt:0000000000001650                 jmp     cs:calloc_ptr
.plt:0000000000001650 _calloc         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Ah
.plt:000000000000165B                 jmp     sub_14A0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001660 _strcmp         proc near               ; CODE XREF: triple_compare_ino_str+24↓p
.plt:0000000000001660                 jmp     cs:strcmp_ptr
.plt:0000000000001660 _strcmp         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    1Bh
.plt:000000000000166B                 jmp     sub_14A0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001670 _memcpy         proc near               ; CODE XREF: buffer_or_output+42↓p
.plt:0000000000001670                                         ; canonicalize_filename_mode+183↓p ...
.plt:0000000000001670                 jmp     cs:memcpy_ptr
.plt:0000000000001670 _memcpy         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Ch
.plt:000000000000167B                 jmp     sub_14A0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int fileno(FILE *stream)
.plt:0000000000001680 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001680                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001680                 jmp     cs:fileno_ptr
.plt:0000000000001680 _fileno         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    1Dh
.plt:000000000000168B                 jmp     sub_14A0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001690 ___xstat        proc near               ; CODE XREF: isdir+2A↓p
.plt:0000000000001690                                         ; canonicalize_filename_mode+269↓p
.plt:0000000000001690                 jmp     cs:__xstat_ptr
.plt:0000000000001690 ___xstat        endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    1Eh
.plt:000000000000169B                 jmp     sub_14A0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *malloc(size_t size)
.plt:00000000000016A0 _malloc         proc near               ; CODE XREF: transfer_entries+125↓p
.plt:00000000000016A0                                         ; hash_initialize+3E↓p ...
.plt:00000000000016A0                 jmp     cs:malloc_ptr
.plt:00000000000016A0 _malloc         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    1Fh
.plt:00000000000016AB                 jmp     sub_14A0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int fflush(FILE *stream)
.plt:00000000000016B0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000016B0                                         ; rpl_fflush+3B↓j
.plt:00000000000016B0                 jmp     cs:fflush_ptr
.plt:00000000000016B0 _fflush         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    20h ; ' '
.plt:00000000000016BB                 jmp     sub_14A0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *nl_langinfo(nl_item item)
.plt:00000000000016C0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000016C0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000016C0 _nl_langinfo    endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    21h ; '!'
.plt:00000000000016CB                 jmp     sub_14A0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int __freading(FILE *fp)
.plt:00000000000016D0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000016D0                                         ; rpl_fflush+9↓p
.plt:00000000000016D0                 jmp     cs:__freading_ptr
.plt:00000000000016D0 ___freading     endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    22h ; '"'
.plt:00000000000016DB                 jmp     sub_14A0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000016E0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000016E0                 jmp     cs:realloc_ptr
.plt:00000000000016E0 _realloc        endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    23h ; '#'
.plt:00000000000016EB                 jmp     sub_14A0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; char *setlocale(int category, const char *locale)
.plt:00000000000016F0 _setlocale      proc near               ; CODE XREF: main+3A↓p
.plt:00000000000016F0                                         ; usage+213↓p ...
.plt:00000000000016F0                 jmp     cs:setlocale_ptr
.plt:00000000000016F0 _setlocale      endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    24h ; '$'
.plt:00000000000016FB                 jmp     sub_14A0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001700                                         ; usage+207↓p ...
.plt:0000000000001700                 jmp     cs:__printf_chk_ptr
.plt:0000000000001700 ___printf_chk   endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    25h ; '%'
.plt:000000000000170B                 jmp     sub_14A0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001710 _memmove        proc near               ; CODE XREF: canonicalize_filename_mode+4A8↓p
.plt:0000000000001710                 jmp     cs:memmove_ptr
.plt:0000000000001710 _memmove        endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    26h ; '&'
.plt:000000000000171B                 jmp     sub_14A0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001720 _error          proc near               ; CODE XREF: main+352↓p
.plt:0000000000001720                                         ; main+3CD↓p ...
.plt:0000000000001720                 jmp     cs:error_ptr
.plt:0000000000001720 _error          endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    27h ; '''
.plt:000000000000172B                 jmp     sub_14A0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001730 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_6E4A↓j
.plt:0000000000001730                 jmp     cs:fseeko_ptr
.plt:0000000000001730 _fseeko         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    28h ; '('
.plt:000000000000173B                 jmp     sub_14A0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001740 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001740                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001740 ___cxa_atexit   endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    29h ; ')'
.plt:000000000000174B                 jmp     sub_14A0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: noreturn thunk
.plt:0000000000001750
.plt:0000000000001750 ; void __noreturn exit(int status)
.plt:0000000000001750 _exit           proc near               ; CODE XREF: main+152↓p
.plt:0000000000001750                                         ; usage+58↓p
.plt:0000000000001750                 jmp     cs:exit_ptr
.plt:0000000000001750 _exit           endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Ah ; '*'
.plt:000000000000175B                 jmp     sub_14A0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001760 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001760                 jmp     cs:fwrite_ptr
.plt:0000000000001760 _fwrite         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2Bh ; '+'
.plt:000000000000176B                 jmp     sub_14A0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001770                                         ; hash_print_statistics+76↓p ...
.plt:0000000000001770                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001770 ___fprintf_chk  endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Ch ; ','
.plt:000000000000177B                 jmp     sub_14A0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001780 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001780                 jmp     cs:mbsinit_ptr
.plt:0000000000001780 _mbsinit        endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    2Dh ; '-'
.plt:000000000000178B                 jmp     sub_14A0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int iswprint(wint_t wc)
.plt:0000000000001790 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001790                 jmp     cs:iswprint_ptr
.plt:0000000000001790 _iswprint       endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    2Eh ; '.'
.plt:000000000000179B                 jmp     sub_14A0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000017A0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000017A0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000017A0 ___ctype_b_loc  endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    2Fh ; '/'
.plt:00000000000017AB                 jmp     sub_14A0
.plt:00000000000017AB ; } // starts at 14A0
.plt:00000000000017AB _plt            ends
.plt:00000000000017AB
.plt.got:00000000000017B0 ; ===========================================================================
.plt.got:00000000000017B0
.plt.got:00000000000017B0 ; Segment type: Pure code
.plt.got:00000000000017B0 ; Segment permissions: Read/Execute
.plt.got:00000000000017B0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000017B0                 assume cs:_plt_got
.plt.got:00000000000017B0                 ;org 17B0h
.plt.got:00000000000017B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000017B0
.plt.got:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000017B0
.plt.got:00000000000017B0 ; Attributes: thunk
.plt.got:00000000000017B0
.plt.got:00000000000017B0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000017B0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000017B0 ; __unwind {
.plt.got:00000000000017B0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000017B0 __cxa_finalize  endp
.plt.got:00000000000017B0
.plt.got:00000000000017B0 ; ---------------------------------------------------------------------------
.plt.got:00000000000017B6                 align 8
.plt.got:00000000000017B6 ; } // starts at 17B0
.plt.got:00000000000017B6 _plt_got        ends
.plt.got:00000000000017B6
LOAD:00000000000017B8 ; ===========================================================================
LOAD:00000000000017B8
LOAD:00000000000017B8 ; Segment type: Pure code
LOAD:00000000000017B8 ; Segment permissions: Read/Execute
LOAD:00000000000017B8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017B8                 assume cs:LOAD
LOAD:00000000000017B8                 ;org 17B8h
LOAD:00000000000017B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017B8                 align 20h
LOAD:00000000000017B8 LOAD            ends
LOAD:00000000000017B8
.text:00000000000017C0 ; ===========================================================================
.text:00000000000017C0
.text:00000000000017C0 ; Segment type: Pure code
.text:00000000000017C0 ; Segment permissions: Read/Execute
.text:00000000000017C0 _text           segment para public 'CODE' use64
.text:00000000000017C0                 assume cs:_text
.text:00000000000017C0                 ;org 17C0h
.text:00000000000017C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000017C0
.text:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017C0
.text:00000000000017C0
.text:00000000000017C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000017C0                 public main
.text:00000000000017C0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000017C0 ; __unwind {
.text:00000000000017C0                 push    r15
.text:00000000000017C2                 push    r14
.text:00000000000017C4                 xor     r15d, r15d
.text:00000000000017C7                 push    r13
.text:00000000000017C9                 push    r12
.text:00000000000017CB                 mov     r12d, edi
.text:00000000000017CE                 push    rbp
.text:00000000000017CF                 push    rbx
.text:00000000000017D0                 mov     rbp, rsi
.text:00000000000017D3                 lea     r13, longopts
.text:00000000000017DA                 xor     r14d, r14d
.text:00000000000017DD                 mov     ebx, 1
.text:00000000000017E2                 sub     rsp, 8
.text:00000000000017E6                 mov     rdi, [rsi]
.text:00000000000017E9                 call    set_program_name
.text:00000000000017EE                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000017F5                 mov     edi, 6          ; category
.text:00000000000017FA                 call    _setlocale
.text:00000000000017FF                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001806                 lea     rdi, domainname ; "coreutils"
.text:000000000000180D                 call    _bindtextdomain
.text:0000000000001812                 lea     rdi, domainname ; "coreutils"
.text:0000000000001819                 call    _textdomain
.text:000000000000181E                 lea     rdi, close_stdout
.text:0000000000001825                 call    atexit
.text:000000000000182A                 nop     word ptr [rax+rax+00h]
.text:0000000000001830
.text:0000000000001830 loc_1830:                               ; CODE XREF: main+C3↓j
.text:0000000000001830                                         ; main+E8↓j ...
.text:0000000000001830                 lea     rdx, shortopts  ; "eLmPqsz"
.text:0000000000001837                 xor     r8d, r8d        ; longind
.text:000000000000183A                 mov     rcx, r13        ; longopts
.text:000000000000183D                 mov     rsi, rbp        ; argv
.text:0000000000001840                 mov     edi, r12d       ; argc
.text:0000000000001843                 call    _getopt_long
.text:0000000000001848                 cmp     eax, 0FFFFFFFFh
.text:000000000000184B                 jz      loc_197C
.text:0000000000001851                 cmp     eax, 6Dh ; 'm'
.text:0000000000001854                 jz      loc_1920
.text:000000000000185A                 jle     short loc_1888
.text:000000000000185C                 cmp     eax, 7Ah ; 'z'
.text:000000000000185F                 jz      loc_1940
.text:0000000000001865                 jg      short loc_18B0
.text:0000000000001867                 cmp     eax, 71h ; 'q'
.text:000000000000186A                 jz      loc_1930
.text:0000000000001870                 cmp     eax, 73h ; 's'
.text:0000000000001873                 jnz     loc_1C1A
.text:0000000000001879                 or      ebx, 4
.text:000000000000187C                 mov     cs:logical, 0
.text:0000000000001883                 jmp     short loc_1830
.text:0000000000001883 ; ---------------------------------------------------------------------------
.text:0000000000001885                 align 8
.text:0000000000001888
.text:0000000000001888 loc_1888:                               ; CODE XREF: main+9A↑j
.text:0000000000001888                 cmp     eax, 4Ch ; 'L'
.text:000000000000188B                 jz      loc_1960
.text:0000000000001891                 jle     short loc_18D8
.text:0000000000001893                 cmp     eax, 50h ; 'P'
.text:0000000000001896                 jz      loc_1950
.text:000000000000189C                 cmp     eax, 65h ; 'e'
.text:000000000000189F                 jnz     loc_1C1A
.text:00000000000018A5                 and     ebx, 0FFFFFFFCh
.text:00000000000018A8                 jmp     short loc_1830
.text:00000000000018A8 ; ---------------------------------------------------------------------------
.text:00000000000018AA                 align 10h
.text:00000000000018B0
.text:00000000000018B0 loc_18B0:                               ; CODE XREF: main+A5↑j
.text:00000000000018B0                 cmp     eax, 80h
.text:00000000000018B5                 jz      loc_1970
.text:00000000000018BB                 cmp     eax, 81h
.text:00000000000018C0                 jnz     loc_1C1A
.text:00000000000018C6                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:00000000000018CD                 jmp     loc_1830
.text:00000000000018CD ; ---------------------------------------------------------------------------
.text:00000000000018D2                 align 8
.text:00000000000018D8
.text:00000000000018D8 loc_18D8:                               ; CODE XREF: main+D1↑j
.text:00000000000018D8                 cmp     eax, 0FFFFFF7Dh
.text:00000000000018DD                 jnz     loc_1BEB
.text:00000000000018E3                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000018EA                 mov     rcx, cs:Version
.text:00000000000018F1                 lea     r8, aPadraigBrady ; "Padraig Brady"
.text:00000000000018F8                 lea     rdx, unk_6FD2
.text:00000000000018FF                 lea     rsi, aRealpath  ; "realpath"
.text:0000000000001906                 xor     r9d, r9d
.text:0000000000001909                 xor     eax, eax
.text:000000000000190B                 call    version_etc
.text:0000000000001910                 xor     edi, edi        ; status
.text:0000000000001912                 call    _exit
.text:0000000000001912 ; ---------------------------------------------------------------------------
.text:0000000000001917                 align 20h
.text:0000000000001920
.text:0000000000001920 loc_1920:                               ; CODE XREF: main+94↑j
.text:0000000000001920                 and     ebx, 0FFFFFFFCh
.text:0000000000001923                 or      ebx, 2
.text:0000000000001926                 jmp     loc_1830
.text:0000000000001926 ; ---------------------------------------------------------------------------
.text:000000000000192B                 align 10h
.text:0000000000001930
.text:0000000000001930 loc_1930:                               ; CODE XREF: main+AA↑j
.text:0000000000001930                 mov     cs:verbose, 0
.text:0000000000001937                 jmp     loc_1830
.text:0000000000001937 ; ---------------------------------------------------------------------------
.text:000000000000193C                 align 20h
.text:0000000000001940
.text:0000000000001940 loc_1940:                               ; CODE XREF: main+9F↑j
.text:0000000000001940                 mov     cs:use_nuls, 1
.text:0000000000001947                 jmp     loc_1830
.text:0000000000001947 ; ---------------------------------------------------------------------------
.text:000000000000194C                 align 10h
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: main+D6↑j
.text:0000000000001950                 and     ebx, 0FFFFFFFBh
.text:0000000000001953                 mov     cs:logical, 0
.text:000000000000195A                 jmp     loc_1830
.text:000000000000195A ; ---------------------------------------------------------------------------
.text:000000000000195F                 align 20h
.text:0000000000001960
.text:0000000000001960 loc_1960:                               ; CODE XREF: main+CB↑j
.text:0000000000001960                 or      ebx, 4
.text:0000000000001963                 mov     cs:logical, 1
.text:000000000000196A                 jmp     loc_1830
.text:000000000000196A ; ---------------------------------------------------------------------------
.text:000000000000196F                 align 10h
.text:0000000000001970
.text:0000000000001970 loc_1970:                               ; CODE XREF: main+F5↑j
.text:0000000000001970                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:0000000000001977                 jmp     loc_1830
.text:000000000000197C ; ---------------------------------------------------------------------------
.text:000000000000197C
.text:000000000000197C loc_197C:                               ; CODE XREF: main+8B↑j
.text:000000000000197C                 cmp     cs:optind@@GLIBC_2_2_5, r12d
.text:0000000000001983                 jge     loc_1BF9
.text:0000000000001989                 mov     r13d, ebx
.text:000000000000198C                 and     r13d, 3
.text:0000000000001990                 test    r14, r14
.text:0000000000001993                 jz      loc_1B19
.text:0000000000001999                 test    r15, r15
.text:000000000000199C                 jnz     loc_1B19
.text:00000000000019A2                 mov     r15, r14
.text:00000000000019A5
.text:00000000000019A5 loc_19A5:                               ; CODE XREF: main+362↓j
.text:00000000000019A5                 mov     esi, ebx
.text:00000000000019A7                 mov     rdi, r15
.text:00000000000019AA                 call    realpath_canon
.text:00000000000019AF                 test    rax, rax
.text:00000000000019B2                 mov     cs:can_relative_to, rax
.text:00000000000019B9                 jz      loc_1C24
.text:00000000000019BF                 test    r13d, r13d
.text:00000000000019C2                 jz      loc_1B58
.text:00000000000019C8
.text:00000000000019C8 loc_19C8:                               ; CODE XREF: main+35C↓j
.text:00000000000019C8                                         ; main+3A2↓j
.text:00000000000019C8                 cmp     r14, r15
.text:00000000000019CB                 jz      loc_1B45
.text:00000000000019D1                 test    r14, r14
.text:00000000000019D4                 jz      short loc_1A16
.text:00000000000019D6                 mov     esi, ebx
.text:00000000000019D8                 mov     rdi, r14
.text:00000000000019DB                 call    realpath_canon
.text:00000000000019E0                 test    rax, rax
.text:00000000000019E3                 mov     r15, rax
.text:00000000000019E6                 jz      loc_1C53
.text:00000000000019EC                 test    r13d, r13d
.text:00000000000019EF                 jz      loc_1B92
.text:00000000000019F5
.text:00000000000019F5 loc_19F5:                               ; CODE XREF: main+3DC↓j
.text:00000000000019F5                 mov     r13, cs:can_relative_to
.text:00000000000019FC                 mov     rdi, r15
.text:00000000000019FF                 mov     rsi, r13
.text:0000000000001A02                 call    path_prefix
.text:0000000000001A07                 test    al, al
.text:0000000000001A09                 jz      loc_1BCC
.text:0000000000001A0F                 mov     cs:can_relative_base, r15
.text:0000000000001A16
.text:0000000000001A16 loc_1A16:                               ; CODE XREF: main+214↑j
.text:0000000000001A16                                         ; main+393↓j ...
.text:0000000000001A16                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001A1C                 mov     r13d, 1
.text:0000000000001A22                 cmp     eax, r12d
.text:0000000000001A25                 jl      loc_1ABE
.text:0000000000001A2B                 jmp     loc_1B27
.text:0000000000001A30 ; ---------------------------------------------------------------------------
.text:0000000000001A30
.text:0000000000001A30 loc_1A30:                               ; CODE XREF: main+315↓j
.text:0000000000001A30                 mov     r9, cs:can_relative_to
.text:0000000000001A37                 test    r9, r9
.text:0000000000001A3A                 jz      short loc_1A67
.text:0000000000001A3C                 mov     rdi, cs:can_relative_base
.text:0000000000001A43                 test    rdi, rdi
.text:0000000000001A46                 jz      short loc_1A54
.text:0000000000001A48                 mov     rsi, rax
.text:0000000000001A4B                 call    path_prefix
.text:0000000000001A50                 test    al, al
.text:0000000000001A52                 jz      short loc_1A67
.text:0000000000001A54
.text:0000000000001A54 loc_1A54:                               ; CODE XREF: main+286↑j
.text:0000000000001A54                 xor     ecx, ecx
.text:0000000000001A56                 xor     edx, edx
.text:0000000000001A58                 mov     rsi, r9
.text:0000000000001A5B                 mov     rdi, r14
.text:0000000000001A5E                 call    relpath
.text:0000000000001A63                 test    al, al
.text:0000000000001A65                 jnz     short loc_1A76
.text:0000000000001A67
.text:0000000000001A67 loc_1A67:                               ; CODE XREF: main+27A↑j
.text:0000000000001A67                                         ; main+292↑j
.text:0000000000001A67                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001A6E                 mov     rdi, r14        ; s
.text:0000000000001A71                 call    _fputs_unlocked
.text:0000000000001A76
.text:0000000000001A76 loc_1A76:                               ; CODE XREF: main+2A5↑j
.text:0000000000001A76                 cmp     cs:use_nuls, 1
.text:0000000000001A7D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001A84                 mov     rax, [rdi+28h]
.text:0000000000001A88                 sbb     esi, esi
.text:0000000000001A8A                 and     esi, 0Ah        ; int
.text:0000000000001A8D                 cmp     rax, [rdi+30h]
.text:0000000000001A91                 jnb     loc_1B3B
.text:0000000000001A97                 lea     rdx, [rax+1]
.text:0000000000001A9B                 mov     [rdi+28h], rdx
.text:0000000000001A9F                 mov     [rax], sil
.text:0000000000001AA2
.text:0000000000001AA2 loc_1AA2:                               ; CODE XREF: main+380↓j
.text:0000000000001AA2                 mov     rdi, r14        ; ptr
.text:0000000000001AA5                 call    _free
.text:0000000000001AAA
.text:0000000000001AAA loc_1AAA:                               ; CODE XREF: main+326↓j
.text:0000000000001AAA                                         ; main+357↓j
.text:0000000000001AAA                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001AB0                 add     eax, 1
.text:0000000000001AB3                 cmp     eax, r12d
.text:0000000000001AB6                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001ABC                 jge     short loc_1B27
.text:0000000000001ABE
.text:0000000000001ABE loc_1ABE:                               ; CODE XREF: main+265↑j
.text:0000000000001ABE                 cdqe
.text:0000000000001AC0                 mov     esi, ebx
.text:0000000000001AC2                 mov     r15, [rbp+rax*8+0]
.text:0000000000001AC7                 mov     rdi, r15
.text:0000000000001ACA                 call    realpath_canon
.text:0000000000001ACF                 test    rax, rax
.text:0000000000001AD2                 mov     r14, rax
.text:0000000000001AD5                 jnz     loc_1A30
.text:0000000000001ADB                 movzx   r13d, cs:verbose
.text:0000000000001AE3                 test    r13b, r13b
.text:0000000000001AE6                 jz      short loc_1AAA
.text:0000000000001AE8                 mov     rdx, r15
.text:0000000000001AEB                 mov     esi, 3
.text:0000000000001AF0                 xor     edi, edi
.text:0000000000001AF2                 call    quotearg_n_style_colon
.text:0000000000001AF7                 mov     r13, rax
.text:0000000000001AFA                 call    ___errno_location
.text:0000000000001AFF                 mov     esi, [rax]      ; errnum
.text:0000000000001B01                 lea     rdx, format+4   ; format
.text:0000000000001B08                 mov     rcx, r13
.text:0000000000001B0B                 xor     edi, edi        ; status
.text:0000000000001B0D                 xor     eax, eax
.text:0000000000001B0F                 xor     r13d, r13d
.text:0000000000001B12                 call    _error
.text:0000000000001B17                 jmp     short loc_1AAA
.text:0000000000001B19 ; ---------------------------------------------------------------------------
.text:0000000000001B19
.text:0000000000001B19 loc_1B19:                               ; CODE XREF: main+1D3↑j
.text:0000000000001B19                                         ; main+1DC↑j
.text:0000000000001B19                 test    r15, r15
.text:0000000000001B1C                 jz      loc_19C8
.text:0000000000001B22                 jmp     loc_19A5
.text:0000000000001B27 ; ---------------------------------------------------------------------------
.text:0000000000001B27
.text:0000000000001B27 loc_1B27:                               ; CODE XREF: main+26B↑j
.text:0000000000001B27                                         ; main+2FC↑j
.text:0000000000001B27                 xor     r13d, 1
.text:0000000000001B2B                 pop     rdx
.text:0000000000001B2C                 movzx   eax, r13b
.text:0000000000001B30                 pop     rbx
.text:0000000000001B31                 pop     rbp
.text:0000000000001B32                 pop     r12
.text:0000000000001B34                 pop     r13
.text:0000000000001B36                 pop     r14
.text:0000000000001B38                 pop     r15
.text:0000000000001B3A                 retn
.text:0000000000001B3B ; ---------------------------------------------------------------------------
.text:0000000000001B3B
.text:0000000000001B3B loc_1B3B:                               ; CODE XREF: main+2D1↑j
.text:0000000000001B3B                 call    ___overflow
.text:0000000000001B40                 jmp     loc_1AA2
.text:0000000000001B45 ; ---------------------------------------------------------------------------
.text:0000000000001B45
.text:0000000000001B45 loc_1B45:                               ; CODE XREF: main+20B↑j
.text:0000000000001B45                 mov     rax, cs:can_relative_to
.text:0000000000001B4C                 mov     cs:can_relative_base, rax
.text:0000000000001B53                 jmp     loc_1A16
.text:0000000000001B58 ; ---------------------------------------------------------------------------
.text:0000000000001B58
.text:0000000000001B58 loc_1B58:                               ; CODE XREF: main+202↑j
.text:0000000000001B58                 mov     rdi, rax        ; filename
.text:0000000000001B5B                 call    isdir
.text:0000000000001B60                 test    al, al
.text:0000000000001B62                 jnz     loc_19C8
.text:0000000000001B68                 mov     rdx, r15
.text:0000000000001B6B                 mov     esi, 3
.text:0000000000001B70                 xor     edi, edi
.text:0000000000001B72                 call    quotearg_n_style_colon
.text:0000000000001B77                 lea     rdx, format+4   ; format
.text:0000000000001B7E                 mov     rcx, rax
.text:0000000000001B81                 mov     esi, 14h        ; errnum
.text:0000000000001B86                 mov     edi, 1          ; status
.text:0000000000001B8B                 xor     eax, eax
.text:0000000000001B8D                 call    _error
.text:0000000000001B92
.text:0000000000001B92 loc_1B92:                               ; CODE XREF: main+22F↑j
.text:0000000000001B92                 mov     rdi, rax        ; filename
.text:0000000000001B95                 call    isdir
.text:0000000000001B9A                 test    al, al
.text:0000000000001B9C                 jnz     loc_19F5
.text:0000000000001BA2                 mov     rdx, r14
.text:0000000000001BA5                 mov     esi, 3
.text:0000000000001BAA                 xor     edi, edi
.text:0000000000001BAC                 call    quotearg_n_style_colon
.text:0000000000001BB1                 lea     rdx, format+4   ; format
.text:0000000000001BB8                 mov     rcx, rax
.text:0000000000001BBB                 mov     esi, 14h        ; errnum
.text:0000000000001BC0                 mov     edi, 1          ; status
.text:0000000000001BC5                 xor     eax, eax
.text:0000000000001BC7                 call    _error
.text:0000000000001BCC
.text:0000000000001BCC loc_1BCC:                               ; CODE XREF: main+249↑j
.text:0000000000001BCC                 mov     rdi, r15        ; ptr
.text:0000000000001BCF                 call    _free
.text:0000000000001BD4                 mov     cs:can_relative_base, r13
.text:0000000000001BDB                 mov     cs:can_relative_to, 0
.text:0000000000001BE6                 jmp     loc_1A16
.text:0000000000001BEB ; ---------------------------------------------------------------------------
.text:0000000000001BEB
.text:0000000000001BEB loc_1BEB:                               ; CODE XREF: main+11D↑j
.text:0000000000001BEB                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001BF0                 jnz     short loc_1C1A
.text:0000000000001BF2                 xor     edi, edi        ; status
.text:0000000000001BF4                 call    usage
.text:0000000000001BF9 ; ---------------------------------------------------------------------------
.text:0000000000001BF9
.text:0000000000001BF9 loc_1BF9:                               ; CODE XREF: main+1C3↑j
.text:0000000000001BF9                 lea     rsi, msgid      ; "missing operand"
.text:0000000000001C00                 mov     edx, 5          ; category
.text:0000000000001C05                 xor     edi, edi        ; domainname
.text:0000000000001C07                 call    _dcgettext
.text:0000000000001C0C                 xor     esi, esi        ; errnum
.text:0000000000001C0E                 mov     rdx, rax        ; format
.text:0000000000001C11                 xor     edi, edi        ; status
.text:0000000000001C13                 xor     eax, eax
.text:0000000000001C15                 call    _error
.text:0000000000001C1A
.text:0000000000001C1A loc_1C1A:                               ; CODE XREF: main+B3↑j
.text:0000000000001C1A                                         ; main+DF↑j ...
.text:0000000000001C1A                 mov     edi, 1          ; status
.text:0000000000001C1F                 call    usage
.text:0000000000001C24 ; ---------------------------------------------------------------------------
.text:0000000000001C24
.text:0000000000001C24 loc_1C24:                               ; CODE XREF: main+1F9↑j
.text:0000000000001C24                 mov     rdx, r15
.text:0000000000001C27                 mov     esi, 3
.text:0000000000001C2C                 xor     edi, edi
.text:0000000000001C2E                 call    quotearg_n_style_colon
.text:0000000000001C33                 mov     rbx, rax
.text:0000000000001C36                 call    ___errno_location
.text:0000000000001C3B                 mov     esi, [rax]      ; errnum
.text:0000000000001C3D                 lea     rdx, format+4   ; format
.text:0000000000001C44                 mov     rcx, rbx
.text:0000000000001C47                 mov     edi, 1          ; status
.text:0000000000001C4C                 xor     eax, eax
.text:0000000000001C4E                 call    _error
.text:0000000000001C53
.text:0000000000001C53 loc_1C53:                               ; CODE XREF: main+226↑j
.text:0000000000001C53                 mov     rdx, r14
.text:0000000000001C56                 mov     esi, 3
.text:0000000000001C5B                 xor     edi, edi
.text:0000000000001C5D                 call    quotearg_n_style_colon
.text:0000000000001C62                 mov     rbx, rax
.text:0000000000001C65                 call    ___errno_location
.text:0000000000001C6A                 mov     esi, [rax]      ; errnum
.text:0000000000001C6C                 lea     rdx, format+4   ; format
.text:0000000000001C73                 mov     rcx, rbx
.text:0000000000001C76                 mov     edi, 1          ; status
.text:0000000000001C7B                 xor     eax, eax
.text:0000000000001C7D                 call    _error
.text:0000000000001C7D ; } // starts at 17C0
.text:0000000000001C82                 db      2Eh
.text:0000000000001C82                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001C8C                 nop     dword ptr [rax+00h]
.text:0000000000001C8C main            endp ; sp-analysis failed
.text:0000000000001C8C
.text:0000000000001C90
.text:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C90
.text:0000000000001C90 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001C90
.text:0000000000001C90 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001C90                 public start
.text:0000000000001C90 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001C90 ; __unwind {
.text:0000000000001C90                 xor     ebp, ebp
.text:0000000000001C92                 mov     r9, rdx         ; rtld_fini
.text:0000000000001C95                 pop     rsi             ; argc
.text:0000000000001C96                 mov     rdx, rsp        ; ubp_av
.text:0000000000001C99                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001C9D                 push    rax
.text:0000000000001C9E                 push    rsp             ; stack_end
.text:0000000000001C9F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001CA6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001CAD                 lea     rdi, main       ; main
.text:0000000000001CB4                 call    cs:__libc_start_main_ptr
.text:0000000000001CBA                 hlt
.text:0000000000001CBA ; } // starts at 1C90
.text:0000000000001CBA start           endp
.text:0000000000001CBA
.text:0000000000001CBA ; ---------------------------------------------------------------------------
.text:0000000000001CBB                 align 20h
.text:0000000000001CC0
.text:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CC0
.text:0000000000001CC0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001CC0
.text:0000000000001CC0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1D73↓p
.text:0000000000001CC0                 lea     rdi, __bss_start
.text:0000000000001CC7                 push    rbp
.text:0000000000001CC8                 lea     rax, __bss_start
.text:0000000000001CCF                 cmp     rax, rdi
.text:0000000000001CD2                 mov     rbp, rsp
.text:0000000000001CD5                 jz      short loc_1CF0
.text:0000000000001CD7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001CDE                 test    rax, rax
.text:0000000000001CE1                 jz      short loc_1CF0
.text:0000000000001CE3                 pop     rbp
.text:0000000000001CE4                 jmp     rax
.text:0000000000001CE4 ; ---------------------------------------------------------------------------
.text:0000000000001CE6                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001CF0                                         ; deregister_tm_clones+21↑j
.text:0000000000001CF0                 pop     rbp
.text:0000000000001CF1                 retn
.text:0000000000001CF1 deregister_tm_clones endp
.text:0000000000001CF1
.text:0000000000001CF1 ; ---------------------------------------------------------------------------
.text:0000000000001CF2                 align 20h
.text:0000000000001D00
.text:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D00
.text:0000000000001D00 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001D00
.text:0000000000001D00 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001D00                 lea     rdi, __bss_start
.text:0000000000001D07                 lea     rsi, __bss_start
.text:0000000000001D0E                 push    rbp
.text:0000000000001D0F                 sub     rsi, rdi
.text:0000000000001D12                 mov     rbp, rsp
.text:0000000000001D15                 sar     rsi, 3
.text:0000000000001D19                 mov     rax, rsi
.text:0000000000001D1C                 shr     rax, 3Fh
.text:0000000000001D20                 add     rsi, rax
.text:0000000000001D23                 sar     rsi, 1
.text:0000000000001D26                 jz      short loc_1D40
.text:0000000000001D28                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001D2F                 test    rax, rax
.text:0000000000001D32                 jz      short loc_1D40
.text:0000000000001D34                 pop     rbp
.text:0000000000001D35                 jmp     rax
.text:0000000000001D35 ; ---------------------------------------------------------------------------
.text:0000000000001D37                 align 20h
.text:0000000000001D40
.text:0000000000001D40 loc_1D40:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001D40                                         ; register_tm_clones+32↑j
.text:0000000000001D40                 pop     rbp
.text:0000000000001D41                 retn
.text:0000000000001D41 register_tm_clones endp
.text:0000000000001D41
.text:0000000000001D41 ; ---------------------------------------------------------------------------
.text:0000000000001D42                 align 10h
.text:0000000000001D50
.text:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D50
.text:0000000000001D50 ; Attributes: info_from_lumina
.text:0000000000001D50
.text:0000000000001D50 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001D50                 cmp     cs:completed_7697, 0
.text:0000000000001D57                 jnz     short locret_1D88
.text:0000000000001D59                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001D61                 push    rbp
.text:0000000000001D62                 mov     rbp, rsp
.text:0000000000001D65                 jz      short loc_1D73
.text:0000000000001D67                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001D6E                 call    __cxa_finalize
.text:0000000000001D73
.text:0000000000001D73 loc_1D73:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001D73                 call    deregister_tm_clones
.text:0000000000001D78                 mov     cs:completed_7697, 1
.text:0000000000001D7F                 pop     rbp
.text:0000000000001D80                 retn
.text:0000000000001D80 ; ---------------------------------------------------------------------------
.text:0000000000001D81                 align 8
.text:0000000000001D88
.text:0000000000001D88 locret_1D88:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001D88                 rep retn
.text:0000000000001D88 __do_global_dtors_aux endp
.text:0000000000001D88
.text:0000000000001D88 ; ---------------------------------------------------------------------------
.text:0000000000001D8A                 align 10h
.text:0000000000001D90
.text:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D90
.text:0000000000001D90 ; Attributes: bp-based frame
.text:0000000000001D90
.text:0000000000001D90 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001D90                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001D90                 push    rbp
.text:0000000000001D91                 mov     rbp, rsp
.text:0000000000001D94                 pop     rbp
.text:0000000000001D95                 jmp     register_tm_clones
.text:0000000000001D95 frame_dummy     endp
.text:0000000000001D95
.text:0000000000001D95 ; ---------------------------------------------------------------------------
.text:0000000000001D9A                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DA0
.text:0000000000001DA0
.text:0000000000001DA0 path_prefix     proc near               ; CODE XREF: main+242↑p
.text:0000000000001DA0                                         ; main+28B↑p
.text:0000000000001DA0 ; __unwind {
.text:0000000000001DA0                 movzx   eax, byte ptr [rdi+1]
.text:0000000000001DA4                 test    al, al
.text:0000000000001DA6                 jz      short loc_1E00
.text:0000000000001DA8                 cmp     al, 2Fh ; '/'
.text:0000000000001DAA                 jz      short loc_1E10
.text:0000000000001DAC
.text:0000000000001DAC loc_1DAC:                               ; CODE XREF: path_prefix+74↓j
.text:0000000000001DAC                 movzx   edx, byte ptr [rsi+1]
.text:0000000000001DB0                 cmp     al, dl
.text:0000000000001DB2                 setnz   al
.text:0000000000001DB5                 test    dl, dl
.text:0000000000001DB7                 setz    dl
.text:0000000000001DBA                 or      al, dl
.text:0000000000001DBC                 jnz     short loc_1E28
.text:0000000000001DBE                 add     rdi, 1
.text:0000000000001DC2                 add     rsi, 1
.text:0000000000001DC6                 jmp     short loc_1DDB
.text:0000000000001DC6 ; ---------------------------------------------------------------------------
.text:0000000000001DC8                 align 10h
.text:0000000000001DD0
.text:0000000000001DD0 loc_1DD0:                               ; CODE XREF: path_prefix+48↓j
.text:0000000000001DD0                 movzx   ecx, byte ptr [rsi]
.text:0000000000001DD3                 test    cl, cl
.text:0000000000001DD5                 jz      short locret_1DFA
.text:0000000000001DD7                 cmp     dl, cl
.text:0000000000001DD9                 jnz     short locret_1E20
.text:0000000000001DDB
.text:0000000000001DDB loc_1DDB:                               ; CODE XREF: path_prefix+26↑j
.text:0000000000001DDB                 add     rdi, 1
.text:0000000000001DDF                 movzx   edx, byte ptr [rdi]
.text:0000000000001DE2                 add     rsi, 1
.text:0000000000001DE6                 test    dl, dl
.text:0000000000001DE8                 jnz     short loc_1DD0
.text:0000000000001DEA                 movzx   edx, byte ptr [rsi]
.text:0000000000001DED                 cmp     dl, 2Fh ; '/'
.text:0000000000001DF0                 setz    al
.text:0000000000001DF3                 test    dl, dl
.text:0000000000001DF5                 setz    dl
.text:0000000000001DF8                 or      eax, edx
.text:0000000000001DFA
.text:0000000000001DFA locret_1DFA:                            ; CODE XREF: path_prefix+35↑j
.text:0000000000001DFA                 rep retn
.text:0000000000001DFA ; ---------------------------------------------------------------------------
.text:0000000000001DFC                 align 20h
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: path_prefix+6↑j
.text:0000000000001E00                 cmp     byte ptr [rsi+1], 2Fh ; '/'
.text:0000000000001E04                 setnz   al
.text:0000000000001E07                 retn
.text:0000000000001E07 ; ---------------------------------------------------------------------------
.text:0000000000001E08                 align 10h
.text:0000000000001E10
.text:0000000000001E10 loc_1E10:                               ; CODE XREF: path_prefix+A↑j
.text:0000000000001E10                 cmp     byte ptr [rdi+2], 0
.text:0000000000001E14                 jnz     short loc_1DAC
.text:0000000000001E16                 cmp     byte ptr [rsi+1], 2Fh ; '/'
.text:0000000000001E1A                 setz    al
.text:0000000000001E1D                 retn
.text:0000000000001E1D ; ---------------------------------------------------------------------------
.text:0000000000001E1E                 align 20h
.text:0000000000001E20
.text:0000000000001E20 locret_1E20:                            ; CODE XREF: path_prefix+39↑j
.text:0000000000001E20                 rep retn
.text:0000000000001E20 ; ---------------------------------------------------------------------------
.text:0000000000001E22                 align 8
.text:0000000000001E28
.text:0000000000001E28 loc_1E28:                               ; CODE XREF: path_prefix+1C↑j
.text:0000000000001E28                 xor     eax, eax
.text:0000000000001E2A                 retn
.text:0000000000001E2A ; } // starts at 1DA0
.text:0000000000001E2A path_prefix     endp
.text:0000000000001E2A
.text:0000000000001E2A ; ---------------------------------------------------------------------------
.text:0000000000001E2B                 align 10h
.text:0000000000001E30
.text:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E30
.text:0000000000001E30
.text:0000000000001E30 realpath_canon  proc near               ; CODE XREF: main+1EA↑p
.text:0000000000001E30                                         ; main+21B↑p ...
.text:0000000000001E30 ; __unwind {
.text:0000000000001E30                 push    rbp
.text:0000000000001E31                 push    rbx
.text:0000000000001E32                 mov     ebp, esi
.text:0000000000001E34                 sub     rsp, 8
.text:0000000000001E38                 call    canonicalize_filename_mode
.text:0000000000001E3D                 cmp     cs:logical, 0
.text:0000000000001E44                 mov     rbx, rax
.text:0000000000001E47                 jz      short loc_1E69
.text:0000000000001E49                 test    rax, rax
.text:0000000000001E4C                 jz      short loc_1E69
.text:0000000000001E4E                 mov     esi, ebp
.text:0000000000001E50                 mov     rdi, rax        ; src
.text:0000000000001E53                 and     esi, 0FFFFFFFBh
.text:0000000000001E56                 call    canonicalize_filename_mode
.text:0000000000001E5B                 mov     rbp, rax
.text:0000000000001E5E                 mov     rdi, rbx        ; ptr
.text:0000000000001E61                 mov     rbx, rbp
.text:0000000000001E64                 call    _free
.text:0000000000001E69
.text:0000000000001E69 loc_1E69:                               ; CODE XREF: realpath_canon+17↑j
.text:0000000000001E69                                         ; realpath_canon+1C↑j
.text:0000000000001E69                 add     rsp, 8
.text:0000000000001E6D                 mov     rax, rbx
.text:0000000000001E70                 pop     rbx
.text:0000000000001E71                 pop     rbp
.text:0000000000001E72                 retn
.text:0000000000001E72 ; } // starts at 1E30
.text:0000000000001E72 realpath_canon  endp
.text:0000000000001E72
.text:0000000000001E72 ; ---------------------------------------------------------------------------
.text:0000000000001E73                 align 20h
.text:0000000000001E80
.text:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E80
.text:0000000000001E80
.text:0000000000001E80 ; __int64 __fastcall isdir(char *filename)
.text:0000000000001E80 isdir           proc near               ; CODE XREF: main+39B↑p
.text:0000000000001E80                                         ; main+3D5↑p
.text:0000000000001E80
.text:0000000000001E80 var_A0          = dword ptr -0A0h
.text:0000000000001E80 var_20          = qword ptr -20h
.text:0000000000001E80
.text:0000000000001E80 ; __unwind {
.text:0000000000001E80                 push    rbp
.text:0000000000001E81                 push    rbx
.text:0000000000001E82                 mov     rsi, rdi        ; filename
.text:0000000000001E85                 mov     rbx, rdi
.text:0000000000001E88                 mov     edi, 1          ; ver
.text:0000000000001E8D                 sub     rsp, 0A8h
.text:0000000000001E94                 mov     rdx, rsp        ; stat_buf
.text:0000000000001E97                 mov     rax, fs:28h
.text:0000000000001EA0                 mov     [rsp+0B8h+var_20], rax
.text:0000000000001EA8                 xor     eax, eax
.text:0000000000001EAA                 call    ___xstat
.text:0000000000001EAF                 test    eax, eax
.text:0000000000001EB1                 jnz     short loc_1EE1
.text:0000000000001EB3                 mov     eax, [rsp+0B8h+var_A0]
.text:0000000000001EB7                 and     eax, 0F000h
.text:0000000000001EBC                 cmp     eax, 4000h
.text:0000000000001EC1                 setz    al
.text:0000000000001EC4                 mov     rcx, [rsp+0B8h+var_20]
.text:0000000000001ECC                 xor     rcx, fs:28h
.text:0000000000001ED5                 jnz     short loc_1F20
.text:0000000000001ED7                 add     rsp, 0A8h
.text:0000000000001EDE                 pop     rbx
.text:0000000000001EDF                 pop     rbp
.text:0000000000001EE0                 retn
.text:0000000000001EE1 ; ---------------------------------------------------------------------------
.text:0000000000001EE1
.text:0000000000001EE1 loc_1EE1:                               ; CODE XREF: isdir+31↑j
.text:0000000000001EE1                 mov     rsi, rbx
.text:0000000000001EE4                 mov     edi, 4
.text:0000000000001EE9                 call    quotearg_style
.text:0000000000001EEE                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000001EF5                 mov     edx, 5          ; category
.text:0000000000001EFA                 xor     edi, edi        ; domainname
.text:0000000000001EFC                 mov     rbp, rax
.text:0000000000001EFF                 call    _dcgettext
.text:0000000000001F04                 mov     rbx, rax
.text:0000000000001F07                 call    ___errno_location
.text:0000000000001F0C                 mov     esi, [rax]      ; errnum
.text:0000000000001F0E                 mov     rcx, rbp
.text:0000000000001F11                 mov     rdx, rbx        ; format
.text:0000000000001F14                 mov     edi, 1          ; status
.text:0000000000001F19                 xor     eax, eax
.text:0000000000001F1B                 call    _error
.text:0000000000001F20
.text:0000000000001F20 loc_1F20:                               ; CODE XREF: isdir+55↑j
.text:0000000000001F20                 call    ___stack_chk_fail
.text:0000000000001F20 ; } // starts at 1E80
.text:0000000000001F20 isdir           endp
.text:0000000000001F20
.text:0000000000001F20 ; ---------------------------------------------------------------------------
.text:0000000000001F25                 align 10h
.text:0000000000001F30
.text:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F30
.text:0000000000001F30 ; Attributes: noreturn
.text:0000000000001F30
.text:0000000000001F30 ; void __fastcall __noreturn usage(int status)
.text:0000000000001F30                 public usage
.text:0000000000001F30 usage           proc near               ; CODE XREF: main+434↑p
.text:0000000000001F30                                         ; main+45F↑p
.text:0000000000001F30
.text:0000000000001F30 var_A8          = qword ptr -0A8h
.text:0000000000001F30 var_A0          = qword ptr -0A0h
.text:0000000000001F30 var_98          = qword ptr -98h
.text:0000000000001F30 var_90          = qword ptr -90h
.text:0000000000001F30 var_88          = qword ptr -88h
.text:0000000000001F30 var_80          = qword ptr -80h
.text:0000000000001F30 var_78          = qword ptr -78h
.text:0000000000001F30 var_70          = qword ptr -70h
.text:0000000000001F30 var_68          = qword ptr -68h
.text:0000000000001F30 var_60          = qword ptr -60h
.text:0000000000001F30 var_58          = qword ptr -58h
.text:0000000000001F30 var_50          = qword ptr -50h
.text:0000000000001F30 var_48          = qword ptr -48h
.text:0000000000001F30 var_40          = qword ptr -40h
.text:0000000000001F30 var_30          = qword ptr -30h
.text:0000000000001F30
.text:0000000000001F30 ; __unwind {
.text:0000000000001F30                 push    r13
.text:0000000000001F32                 push    r12
.text:0000000000001F34                 mov     edx, 5          ; category
.text:0000000000001F39                 push    rbp
.text:0000000000001F3A                 push    rbx
.text:0000000000001F3B                 mov     ebp, edi
.text:0000000000001F3D                 sub     rsp, 88h
.text:0000000000001F44                 mov     rbx, cs:program_name
.text:0000000000001F4B                 mov     rax, fs:28h
.text:0000000000001F54                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001F59                 xor     eax, eax
.text:0000000000001F5B                 test    edi, edi
.text:0000000000001F5D                 jz      short loc_1F8D
.text:0000000000001F5F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001F66                 xor     edi, edi        ; domainname
.text:0000000000001F68                 call    _dcgettext
.text:0000000000001F6D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001F74                 mov     rdx, rax
.text:0000000000001F77                 mov     rcx, rbx
.text:0000000000001F7A                 mov     esi, 1
.text:0000000000001F7F                 xor     eax, eax
.text:0000000000001F81                 call    ___fprintf_chk
.text:0000000000001F86
.text:0000000000001F86 loc_1F86:                               ; CODE XREF: usage+2A6↓j
.text:0000000000001F86                 mov     edi, ebp        ; status
.text:0000000000001F88                 call    _exit
.text:0000000000001F8D ; ---------------------------------------------------------------------------
.text:0000000000001F8D
.text:0000000000001F8D loc_1F8D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001F8D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:0000000000001F94                 xor     edi, edi        ; domainname
.text:0000000000001F96                 call    _dcgettext
.text:0000000000001F9B                 mov     rdx, rbx
.text:0000000000001F9E                 mov     rsi, rax
.text:0000000000001FA1                 mov     edi, 1
.text:0000000000001FA6                 xor     eax, eax
.text:0000000000001FA8                 call    ___printf_chk
.text:0000000000001FAD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FB4                 lea     rsi, aPrintTheResolv ; "Print the resolved absolute file name;"...
.text:0000000000001FBB                 mov     edx, 5          ; category
.text:0000000000001FC0                 xor     edi, edi        ; domainname
.text:0000000000001FC2                 call    _dcgettext
.text:0000000000001FC7                 mov     rsi, rbx        ; stream
.text:0000000000001FCA                 mov     rdi, rax        ; s
.text:0000000000001FCD                 call    _fputs_unlocked
.text:0000000000001FD2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FD9                 lea     rsi, aECanonicalizeE ; "  -e, --canonicalize-existing  all comp"...
.text:0000000000001FE0                 mov     edx, 5          ; category
.text:0000000000001FE5                 xor     edi, edi        ; domainname
.text:0000000000001FE7                 call    _dcgettext
.text:0000000000001FEC                 mov     rsi, rbx        ; stream
.text:0000000000001FEF                 mov     rdi, rax        ; s
.text:0000000000001FF2                 call    _fputs_unlocked
.text:0000000000001FF7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FFE                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002005                 mov     edx, 5          ; category
.text:000000000000200A                 xor     edi, edi        ; domainname
.text:000000000000200C                 call    _dcgettext
.text:0000000000002011                 mov     rsi, rbx        ; stream
.text:0000000000002014                 mov     rdi, rax        ; s
.text:0000000000002017                 call    _fputs_unlocked
.text:000000000000201C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002023                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000202A                 mov     edx, 5          ; category
.text:000000000000202F                 xor     edi, edi        ; domainname
.text:0000000000002031                 call    _dcgettext
.text:0000000000002036                 mov     rsi, rbx        ; stream
.text:0000000000002039                 mov     rdi, rax        ; s
.text:000000000000203C                 lea     rbx, aRealpath  ; "realpath"
.text:0000000000002043                 call    _fputs_unlocked
.text:0000000000002048                 lea     rax, asc_6F5C   ; "["
.text:000000000000204F                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002056                 mov     [rsp+0A8h+var_48], 0
.text:000000000000205F                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002068                 mov     rdx, rsp
.text:000000000000206B                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000206F                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002076                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000207B                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002082                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002087                 lea     rax, domainname ; "coreutils"
.text:000000000000208E                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002093                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000209A                 mov     [rsp+0A8h+var_98], rax
.text:000000000000209F                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000020A6                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000020AB                 mov     [rsp+0A8h+var_90], rax
.text:00000000000020B0                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000020B7                 mov     [rsp+0A8h+var_88], rax
.text:00000000000020BC                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000020C3                 mov     [rsp+0A8h+var_80], rax
.text:00000000000020C8                 mov     [rsp+0A8h+var_70], rax
.text:00000000000020CD                 mov     [rsp+0A8h+var_60], rax
.text:00000000000020D2                 mov     [rsp+0A8h+var_50], rax
.text:00000000000020D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: usage+1CD↓j
.text:00000000000020E0                 add     rdx, 10h
.text:00000000000020E4                 mov     rdi, [rdx]
.text:00000000000020E7                 test    rdi, rdi
.text:00000000000020EA                 jz      short loc_20FF
.text:00000000000020EC                 mov     ecx, 9
.text:00000000000020F1                 mov     rsi, rbx
.text:00000000000020F4                 repe cmpsb
.text:00000000000020F6                 setnbe  al
.text:00000000000020F9                 sbb     al, 0
.text:00000000000020FB                 test    al, al
.text:00000000000020FD                 jnz     short loc_20E0
.text:00000000000020FF
.text:00000000000020FF loc_20FF:                               ; CODE XREF: usage+1BA↑j
.text:00000000000020FF                 mov     r12, [rdx+8]
.text:0000000000002103                 xor     edi, edi        ; domainname
.text:0000000000002105                 mov     edx, 5          ; category
.text:000000000000210A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002111                 test    r12, r12
.text:0000000000002114                 jz      loc_21DB
.text:000000000000211A                 call    _dcgettext
.text:000000000000211F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002126                 lea     rdx, unk_6FD2
.text:000000000000212D                 mov     rsi, rax
.text:0000000000002130                 mov     edi, 1
.text:0000000000002135                 xor     eax, eax
.text:0000000000002137                 call    ___printf_chk
.text:000000000000213C                 xor     esi, esi        ; locale
.text:000000000000213E                 mov     edi, 5          ; category
.text:0000000000002143                 call    _setlocale
.text:0000000000002148                 test    rax, rax
.text:000000000000214B                 jz      short loc_2169
.text:000000000000214D                 lea     rsi, s2         ; "en_"
.text:0000000000002154                 mov     edx, 3          ; n
.text:0000000000002159                 mov     rdi, rax        ; s1
.text:000000000000215C                 call    _strncmp
.text:0000000000002161                 test    eax, eax
.text:0000000000002163                 jnz     loc_2270
.text:0000000000002169
.text:0000000000002169 loc_2169:                               ; CODE XREF: usage+21B↑j
.text:0000000000002169                                         ; usage+365↓j
.text:0000000000002169                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002170                 xor     edi, edi        ; domainname
.text:0000000000002172                 mov     edx, 5          ; category
.text:0000000000002177                 call    _dcgettext
.text:000000000000217C                 lea     rcx, aRealpath  ; "realpath"
.text:0000000000002183                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000218A                 mov     rsi, rax
.text:000000000000218D                 mov     edi, 1
.text:0000000000002192                 xor     eax, eax
.text:0000000000002194                 call    ___printf_chk
.text:0000000000002199                 cmp     r12, rbx
.text:000000000000219C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000021A3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000021AA                 cmovz   rbx, rcx
.text:00000000000021AE
.text:00000000000021AE loc_21AE:                               ; CODE XREF: usage+334↓j
.text:00000000000021AE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000021B5                 xor     edi, edi        ; domainname
.text:00000000000021B7                 mov     edx, 5          ; category
.text:00000000000021BC                 call    _dcgettext
.text:00000000000021C1                 mov     rcx, rbx
.text:00000000000021C4                 mov     rsi, rax
.text:00000000000021C7                 mov     rdx, r12
.text:00000000000021CA                 mov     edi, 1
.text:00000000000021CF                 xor     eax, eax
.text:00000000000021D1                 call    ___printf_chk
.text:00000000000021D6                 jmp     loc_1F86
.text:00000000000021DB ; ---------------------------------------------------------------------------
.text:00000000000021DB
.text:00000000000021DB loc_21DB:                               ; CODE XREF: usage+1E4↑j
.text:00000000000021DB                 call    _dcgettext
.text:00000000000021E0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000021E7                 lea     rdx, unk_6FD2
.text:00000000000021EE                 mov     rsi, rax
.text:00000000000021F1                 mov     edi, 1
.text:00000000000021F6                 xor     eax, eax
.text:00000000000021F8                 call    ___printf_chk
.text:00000000000021FD                 xor     esi, esi        ; locale
.text:00000000000021FF                 mov     edi, 5          ; category
.text:0000000000002204                 call    _setlocale
.text:0000000000002209                 test    rax, rax
.text:000000000000220C                 jz      short loc_2226
.text:000000000000220E                 lea     rsi, s2         ; "en_"
.text:0000000000002215                 mov     edx, 3          ; n
.text:000000000000221A                 mov     rdi, rax        ; s1
.text:000000000000221D                 call    _strncmp
.text:0000000000002222                 test    eax, eax
.text:0000000000002224                 jnz     short loc_2269
.text:0000000000002226
.text:0000000000002226 loc_2226:                               ; CODE XREF: usage+2DC↑j
.text:0000000000002226                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000222D                 mov     edx, 5          ; category
.text:0000000000002232                 xor     edi, edi        ; domainname
.text:0000000000002234                 lea     r12, aRealpath  ; "realpath"
.text:000000000000223B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002242                 call    _dcgettext
.text:0000000000002247                 lea     rcx, aRealpath  ; "realpath"
.text:000000000000224E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002255                 mov     rsi, rax
.text:0000000000002258                 mov     edi, 1
.text:000000000000225D                 xor     eax, eax
.text:000000000000225F                 call    ___printf_chk
.text:0000000000002264                 jmp     loc_21AE
.text:0000000000002269 ; ---------------------------------------------------------------------------
.text:0000000000002269
.text:0000000000002269 loc_2269:                               ; CODE XREF: usage+2F4↑j
.text:0000000000002269                 lea     r12, aRealpath  ; "realpath"
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: usage+233↑j
.text:0000000000002270                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002277                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000227E                 xor     edi, edi        ; domainname
.text:0000000000002280                 mov     edx, 5          ; category
.text:0000000000002285                 call    _dcgettext
.text:000000000000228A                 mov     rsi, r13        ; stream
.text:000000000000228D                 mov     rdi, rax        ; s
.text:0000000000002290                 call    _fputs_unlocked
.text:0000000000002295                 jmp     loc_2169
.text:0000000000002295 ; } // starts at 1F30
.text:0000000000002295 usage           endp
.text:0000000000002295
.text:0000000000002295 ; ---------------------------------------------------------------------------
.text:000000000000229A                 align 20h
.text:00000000000022A0
.text:00000000000022A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022A0
.text:00000000000022A0
.text:00000000000022A0 ; __int64 __fastcall buffer_or_output(void *src)
.text:00000000000022A0 buffer_or_output proc near              ; CODE XREF: relpath+10D↓p
.text:00000000000022A0                                         ; relpath+14D↓p ...
.text:00000000000022A0 ; __unwind {
.text:00000000000022A0                 push    r14
.text:00000000000022A2                 push    r13
.text:00000000000022A4                 mov     r14, rdi
.text:00000000000022A7                 push    r12
.text:00000000000022A9                 push    rbp
.text:00000000000022AA                 push    rbx
.text:00000000000022AB                 mov     r13, [rsi]
.text:00000000000022AE                 test    r13, r13
.text:00000000000022B1                 jz      short loc_2300
.text:00000000000022B3                 mov     r12, rdx
.text:00000000000022B6                 mov     rbx, rsi
.text:00000000000022B9                 call    _strlen
.text:00000000000022BE                 mov     rbp, rax
.text:00000000000022C1                 cmp     [r12], rbp
.text:00000000000022C5                 mov     eax, 1
.text:00000000000022CA                 ja      short loc_22D8
.text:00000000000022CC                 pop     rbx
.text:00000000000022CD                 pop     rbp
.text:00000000000022CE                 pop     r12
.text:00000000000022D0                 pop     r13
.text:00000000000022D2                 pop     r14
.text:00000000000022D4                 retn
.text:00000000000022D4 ; ---------------------------------------------------------------------------
.text:00000000000022D5                 align 8
.text:00000000000022D8
.text:00000000000022D8 loc_22D8:                               ; CODE XREF: buffer_or_output+2A↑j
.text:00000000000022D8                 lea     rdx, [rbp+1]    ; n
.text:00000000000022DC                 mov     rsi, r14        ; src
.text:00000000000022DF                 mov     rdi, r13        ; s
.text:00000000000022E2                 call    _memcpy
.text:00000000000022E7                 add     [rbx], rbp
.text:00000000000022EA                 sub     [r12], rbp
.text:00000000000022EE                 xor     eax, eax
.text:00000000000022F0                 pop     rbx
.text:00000000000022F1                 pop     rbp
.text:00000000000022F2                 pop     r12
.text:00000000000022F4                 pop     r13
.text:00000000000022F6                 pop     r14
.text:00000000000022F8                 retn
.text:00000000000022F8 ; ---------------------------------------------------------------------------
.text:00000000000022F9                 align 20h
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: buffer_or_output+11↑j
.text:0000000000002300                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002307                 call    _fputs_unlocked
.text:000000000000230C                 pop     rbx
.text:000000000000230D                 xor     eax, eax
.text:000000000000230F                 pop     rbp
.text:0000000000002310                 pop     r12
.text:0000000000002312                 pop     r13
.text:0000000000002314                 pop     r14
.text:0000000000002316                 retn
.text:0000000000002316 ; } // starts at 22A0
.text:0000000000002316 buffer_or_output endp
.text:0000000000002316
.text:0000000000002316 ; ---------------------------------------------------------------------------
.text:0000000000002317                 align 20h
.text:0000000000002320
.text:0000000000002320 ; =============== S U B R O U T I N E =======================================
.text:0000000000002320
.text:0000000000002320
.text:0000000000002320                 public relpath
.text:0000000000002320 relpath         proc near               ; CODE XREF: main+29E↑p
.text:0000000000002320
.text:0000000000002320 var_48          = qword ptr -48h
.text:0000000000002320 var_40          = qword ptr -40h
.text:0000000000002320
.text:0000000000002320 ; __unwind {
.text:0000000000002320                 push    r15
.text:0000000000002322                 push    r14
.text:0000000000002324                 push    r13
.text:0000000000002326                 push    r12
.text:0000000000002328                 push    rbp
.text:0000000000002329                 push    rbx
.text:000000000000232A                 sub     rsp, 18h
.text:000000000000232E                 movzx   r8d, byte ptr [rdi+1]
.text:0000000000002333                 mov     [rsp+48h+var_48], rcx
.text:0000000000002337                 movzx   ecx, byte ptr [rsi+1]
.text:000000000000233B                 mov     [rsp+48h+var_40], rdx
.text:0000000000002340                 cmp     cl, 2Fh ; '/'
.text:0000000000002343                 setz    r9b
.text:0000000000002347                 cmp     r8b, 2Fh ; '/'
.text:000000000000234B                 setz    dl
.text:000000000000234E                 xor     eax, eax
.text:0000000000002350                 cmp     r9b, dl
.text:0000000000002353                 jz      short loc_2368
.text:0000000000002355
.text:0000000000002355 loc_2355:                               ; CODE XREF: relpath+58↓j
.text:0000000000002355                                         ; relpath+C1↓j ...
.text:0000000000002355                 add     rsp, 18h
.text:0000000000002359                 pop     rbx
.text:000000000000235A                 pop     rbp
.text:000000000000235B                 pop     r12
.text:000000000000235D                 pop     r13
.text:000000000000235F                 pop     r14
.text:0000000000002361                 pop     r15
.text:0000000000002363                 retn
.text:0000000000002363 ; ---------------------------------------------------------------------------
.text:0000000000002364                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: relpath+33↑j
.text:0000000000002368                 movzx   edx, byte ptr [rdi]
.text:000000000000236B                 movzx   r10d, byte ptr [rsi]
.text:000000000000236F                 test    dl, dl
.text:0000000000002371                 setz    r9b
.text:0000000000002375                 test    r10b, r10b
.text:0000000000002378                 jz      short loc_2355
.text:000000000000237A                 cmp     r10b, dl
.text:000000000000237D                 setnz   al
.text:0000000000002380                 or      al, r9b
.text:0000000000002383                 jnz     loc_2550
.text:0000000000002389                 xor     edx, edx
.text:000000000000238B                 xor     r9d, r9d
.text:000000000000238E                 jmp     short loc_23B4
.text:0000000000002390 ; ---------------------------------------------------------------------------
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: relpath+A9↓j
.text:0000000000002390                 add     rdx, 1
.text:0000000000002394                 cmp     r8b, cl
.text:0000000000002397                 jnz     loc_2530
.text:000000000000239D                 test    r10b, r10b
.text:00000000000023A0                 jnz     loc_2530
.text:00000000000023A6                 mov     r10d, ecx
.text:00000000000023A9                 movzx   r8d, byte ptr [rdi+rdx+1]
.text:00000000000023AF                 movzx   ecx, byte ptr [rsi+rdx+1]
.text:00000000000023B4
.text:00000000000023B4 loc_23B4:                               ; CODE XREF: relpath+6E↑j
.text:00000000000023B4                 lea     r11d, [rdx+1]
.text:00000000000023B8                 cmp     r10b, 2Fh ; '/'
.text:00000000000023BC                 cmovz   r9d, r11d
.text:00000000000023C0                 test    r8b, r8b
.text:00000000000023C3                 setz    r10b
.text:00000000000023C7                 test    cl, cl
.text:00000000000023C9                 jnz     short loc_2390
.text:00000000000023CB                 cmp     r8b, 2Fh ; '/'
.text:00000000000023CF                 jz      loc_2540
.text:00000000000023D5
.text:00000000000023D5 loc_23D5:                               ; CODE XREF: relpath+213↓j
.text:00000000000023D5                 test    r10b, r10b
.text:00000000000023D8                 jnz     loc_2540
.text:00000000000023DE
.text:00000000000023DE loc_23DE:                               ; CODE XREF: relpath+219↓j
.text:00000000000023DE                 test    r9d, r9d
.text:00000000000023E1                 jz      loc_2355
.text:00000000000023E7
.text:00000000000023E7 loc_23E7:                               ; CODE XREF: relpath+223↓j
.text:00000000000023E7                 movsxd  r9, r9d
.text:00000000000023EA                 lea     r12, [rsi+r9]
.text:00000000000023EE                 lea     rbx, [rdi+r9]
.text:00000000000023F2                 movzx   eax, byte ptr [r12]
.text:00000000000023F7                 cmp     al, 2Fh ; '/'
.text:00000000000023F9                 jnz     short loc_2405
.text:00000000000023FB                 movzx   eax, byte ptr [r12+1]
.text:0000000000002401                 add     r12, 1
.text:0000000000002405
.text:0000000000002405 loc_2405:                               ; CODE XREF: relpath+D9↑j
.text:0000000000002405                 xor     edx, edx
.text:0000000000002407                 cmp     byte ptr [rbx], 2Fh ; '/'
.text:000000000000240A                 setz    dl
.text:000000000000240D                 add     rbx, rdx
.text:0000000000002410                 test    al, al
.text:0000000000002412                 jnz     short loc_2458
.text:0000000000002414                 cmp     byte ptr [rbx], 0
.text:0000000000002417                 lea     rax, asc_74DB+2 ; "."
.text:000000000000241E                 lea     rsi, [rsp+48h+var_40]
.text:0000000000002423                 mov     rdx, rsp
.text:0000000000002426                 cmovz   rbx, rax
.text:000000000000242A                 mov     rdi, rbx        ; src
.text:000000000000242D                 call    buffer_or_output
.text:0000000000002432                 mov     ebp, eax
.text:0000000000002434
.text:0000000000002434 loc_2434:                               ; CODE XREF: relpath+1A3↓j
.text:0000000000002434                                         ; relpath+1D2↓j
.text:0000000000002434                 test    bpl, bpl
.text:0000000000002437                 jnz     loc_2500
.text:000000000000243D
.text:000000000000243D loc_243D:                               ; CODE XREF: relpath+20B↓j
.text:000000000000243D                 add     rsp, 18h
.text:0000000000002441                 mov     eax, ebp
.text:0000000000002443                 pop     rbx
.text:0000000000002444                 xor     eax, 1
.text:0000000000002447                 pop     rbp
.text:0000000000002448                 pop     r12
.text:000000000000244A                 pop     r13
.text:000000000000244C                 pop     r14
.text:000000000000244E                 pop     r15
.text:0000000000002450                 retn
.text:0000000000002450 ; ---------------------------------------------------------------------------
.text:0000000000002451                 align 8
.text:0000000000002458
.text:0000000000002458 loc_2458:                               ; CODE XREF: relpath+F2↑j
.text:0000000000002458                 lea     r13, [rsp+48h+var_40]
.text:000000000000245D                 mov     r14, rsp
.text:0000000000002460                 lea     rdi, asc_74DB+1 ; src
.text:0000000000002467                 mov     rdx, r14
.text:000000000000246A                 mov     rsi, r13
.text:000000000000246D                 call    buffer_or_output
.text:0000000000002472                 mov     ebp, eax
.text:0000000000002474                 movzx   eax, byte ptr [r12]
.text:0000000000002479                 test    al, al
.text:000000000000247B                 jz      short loc_24C0
.text:000000000000247D                 lea     r15, asc_74DB   ; "/.."
.text:0000000000002484                 jmp     short loc_249D
.text:0000000000002484 ; ---------------------------------------------------------------------------
.text:0000000000002486                 align 10h
.text:0000000000002490
.text:0000000000002490 loc_2490:                               ; CODE XREF: relpath+17F↓j
.text:0000000000002490                 add     r12, 1
.text:0000000000002494                 movzx   eax, byte ptr [r12]
.text:0000000000002499                 test    al, al
.text:000000000000249B                 jz      short loc_24C0
.text:000000000000249D
.text:000000000000249D loc_249D:                               ; CODE XREF: relpath+164↑j
.text:000000000000249D                                         ; relpath+19C↓j
.text:000000000000249D                 cmp     al, 2Fh ; '/'
.text:000000000000249F                 jnz     short loc_2490
.text:00000000000024A1                 add     r12, 1
.text:00000000000024A5                 mov     rdx, r14
.text:00000000000024A8                 mov     rsi, r13
.text:00000000000024AB                 mov     rdi, r15        ; src
.text:00000000000024AE                 call    buffer_or_output
.text:00000000000024B3                 or      ebp, eax
.text:00000000000024B5                 movzx   eax, byte ptr [r12]
.text:00000000000024BA                 test    al, al
.text:00000000000024BC                 jnz     short loc_249D
.text:00000000000024BE                 xchg    ax, ax
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: relpath+15B↑j
.text:00000000000024C0                                         ; relpath+17B↑j
.text:00000000000024C0                 cmp     byte ptr [rbx], 0
.text:00000000000024C3                 jz      loc_2434
.text:00000000000024C9                 lea     rdi, aLibs+6    ; src
.text:00000000000024D0                 mov     rdx, r14
.text:00000000000024D3                 mov     rsi, r13
.text:00000000000024D6                 call    buffer_or_output
.text:00000000000024DB                 mov     rdx, r14
.text:00000000000024DE                 mov     r12d, eax
.text:00000000000024E1                 mov     rsi, r13
.text:00000000000024E4                 mov     rdi, rbx        ; src
.text:00000000000024E7                 call    buffer_or_output
.text:00000000000024EC                 or      r12d, eax
.text:00000000000024EF                 or      ebp, r12d
.text:00000000000024F2                 jmp     loc_2434
.text:00000000000024F2 ; ---------------------------------------------------------------------------
.text:00000000000024F7                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: relpath+117↑j
.text:0000000000002500                 lea     rsi, aGeneratingRela ; "generating relative path"
.text:0000000000002507                 xor     edi, edi        ; domainname
.text:0000000000002509                 mov     edx, 5          ; category
.text:000000000000250E                 call    _dcgettext
.text:0000000000002513                 lea     rdx, format+4   ; format
.text:000000000000251A                 mov     rcx, rax
.text:000000000000251D                 mov     esi, 24h ; '$'  ; errnum
.text:0000000000002522                 xor     edi, edi        ; status
.text:0000000000002524                 xor     eax, eax
.text:0000000000002526                 call    _error
.text:000000000000252B                 jmp     loc_243D
.text:0000000000002530 ; ---------------------------------------------------------------------------
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: relpath+77↑j
.text:0000000000002530                                         ; relpath+80↑j
.text:0000000000002530                 cmp     cl, 2Fh ; '/'
.text:0000000000002533                 jz      loc_23D5
.text:0000000000002539                 jmp     loc_23DE
.text:0000000000002539 ; ---------------------------------------------------------------------------
.text:000000000000253E                 align 20h
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: relpath+AF↑j
.text:0000000000002540                                         ; relpath+B8↑j
.text:0000000000002540                 mov     r9d, r11d
.text:0000000000002543                 jmp     loc_23E7
.text:0000000000002543 ; ---------------------------------------------------------------------------
.text:0000000000002548                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: relpath+63↑j
.text:0000000000002550                 xor     eax, eax
.text:0000000000002552                 jmp     loc_2355
.text:0000000000002552 ; } // starts at 2320
.text:0000000000002552 relpath         endp
.text:0000000000002552
.text:0000000000002552 ; ---------------------------------------------------------------------------
.text:0000000000002557                 align 20h
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560 ; Attributes: info_from_lumina
.text:0000000000002560
.text:0000000000002560 ; char *__fastcall canonicalize_filename_mode(const char *name, canonicalize_mode_t_0 can_mode)
.text:0000000000002560                 public canonicalize_filename_mode
.text:0000000000002560 canonicalize_filename_mode proc near    ; CODE XREF: realpath_canon+8↑p
.text:0000000000002560                                         ; realpath_canon+26↑p
.text:0000000000002560
.text:0000000000002560 var_114         = dword ptr -114h
.text:0000000000002560 stat_buf        = qword ptr -110h
.text:0000000000002560 var_108         = qword ptr -108h
.text:0000000000002560 var_FD          = byte ptr -0FDh
.text:0000000000002560 var_FC          = dword ptr -0FCh
.text:0000000000002560 n               = qword ptr -0F8h
.text:0000000000002560 ptr             = qword ptr -0F0h
.text:0000000000002560 var_E8          = qword ptr -0E8h
.text:0000000000002560 var_E0          = qword ptr -0E0h
.text:0000000000002560 var_D8          = byte ptr -0D8h
.text:0000000000002560 var_C0          = dword ptr -0C0h
.text:0000000000002560 var_A8          = qword ptr -0A8h
.text:0000000000002560 var_40          = qword ptr -40h
.text:0000000000002560
.text:0000000000002560 ; __unwind {
.text:0000000000002560                 push    r15
.text:0000000000002562                 push    r14
.text:0000000000002564                 push    r13
.text:0000000000002566                 push    r12
.text:0000000000002568                 push    rbp
.text:0000000000002569                 push    rbx
.text:000000000000256A                 sub     rsp, 0E8h
.text:0000000000002571                 mov     rax, fs:28h
.text:000000000000257A                 mov     [rsp+118h+var_40], rax
.text:0000000000002582                 xor     eax, eax
.text:0000000000002584                 mov     eax, esi
.text:0000000000002586                 and     eax, 4
.text:0000000000002589                 setnz   [rsp+118h+var_FD]
.text:000000000000258E                 and     esi, 3
.text:0000000000002591                 mov     [rsp+118h+var_FC], eax
.text:0000000000002595                 lea     eax, [rsi-1]
.text:0000000000002598                 mov     [rsp+118h+var_114], esi
.text:000000000000259C                 test    esi, eax
.text:000000000000259E                 jnz     loc_2AF0
.text:00000000000025A4                 test    rdi, rdi
.text:00000000000025A7                 mov     r14, rdi
.text:00000000000025AA                 jz      loc_2AF0
.text:00000000000025B0                 movzx   eax, byte ptr [rdi]
.text:00000000000025B3                 test    al, al
.text:00000000000025B5                 jz      loc_2B30
.text:00000000000025BB                 cmp     al, 2Fh ; '/'
.text:00000000000025BD                 jz      loc_2A80
.text:00000000000025C3                 call    xgetcwd
.text:00000000000025C8                 test    rax, rax
.text:00000000000025CB                 mov     rbp, rax
.text:00000000000025CE                 jz      loc_2780
.text:00000000000025D4                 mov     rdi, rax        ; s
.text:00000000000025D7                 call    _strlen
.text:00000000000025DC                 cmp     rax, 0FFFh
.text:00000000000025E2                 mov     r15, rax
.text:00000000000025E5                 jbe     loc_2AA0
.text:00000000000025EB                 add     r15, rbp
.text:00000000000025EE                 mov     rbx, r15
.text:00000000000025F1
.text:00000000000025F1 loc_25F1:                               ; CODE XREF: canonicalize_filename_mode+53B↓j
.text:00000000000025F1                                         ; canonicalize_filename_mode+55A↓j
.text:00000000000025F1                 lea     rax, [rsp+118h+var_D8]
.text:00000000000025F6                 mov     [rsp+118h+n], r14
.text:00000000000025FB                 mov     [rsp+118h+var_108], 0
.text:0000000000002604                 mov     [rsp+118h+var_E8], 0
.text:000000000000260D                 mov     [rsp+118h+ptr], 0
.text:0000000000002616                 mov     [rsp+118h+stat_buf], rax
.text:000000000000261B
.text:000000000000261B loc_261B:                               ; CODE XREF: canonicalize_filename_mode+3D5↓j
.text:000000000000261B                                         ; canonicalize_filename_mode+3F0↓j ...
.text:000000000000261B                 movzx   eax, byte ptr [r14]
.text:000000000000261F                 test    al, al
.text:0000000000002621                 jz      loc_272F
.text:0000000000002627                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: canonicalize_filename_mode+1C9↓j
.text:0000000000002630                 cmp     al, 2Fh ; '/'
.text:0000000000002632                 jnz     short loc_264C
.text:0000000000002634                 nop     dword ptr [rax+00h]
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: canonicalize_filename_mode+E2↓j
.text:0000000000002638                 add     r14, 1
.text:000000000000263C                 movzx   eax, byte ptr [r14]
.text:0000000000002640                 cmp     al, 2Fh ; '/'
.text:0000000000002642                 jz      short loc_2638
.text:0000000000002644                 test    al, al
.text:0000000000002646                 jz      loc_2910
.text:000000000000264C
.text:000000000000264C loc_264C:                               ; CODE XREF: canonicalize_filename_mode+D2↑j
.text:000000000000264C                 mov     r13, r14
.text:000000000000264F                 jmp     short loc_265D
.text:000000000000264F ; ---------------------------------------------------------------------------
.text:0000000000002651                 align 8
.text:0000000000002658
.text:0000000000002658 loc_2658:                               ; CODE XREF: canonicalize_filename_mode+108↓j
.text:0000000000002658                 cmp     dl, 2Fh ; '/'
.text:000000000000265B                 jz      short loc_266A
.text:000000000000265D
.text:000000000000265D loc_265D:                               ; CODE XREF: canonicalize_filename_mode+EF↑j
.text:000000000000265D                 add     r13, 1
.text:0000000000002661                 movzx   edx, byte ptr [r13+0]
.text:0000000000002666                 test    dl, dl
.text:0000000000002668                 jnz     short loc_2658
.text:000000000000266A
.text:000000000000266A loc_266A:                               ; CODE XREF: canonicalize_filename_mode+FB↑j
.text:000000000000266A                                         ; canonicalize_filename_mode+3B3↓j
.text:000000000000266A                 cmp     r13, r14
.text:000000000000266D                 jz      loc_272F
.text:0000000000002673                 mov     r12, r13
.text:0000000000002676                 sub     r12, r14
.text:0000000000002679                 cmp     r12, 1
.text:000000000000267D                 jz      loc_2850
.text:0000000000002683                 cmp     r12, 2
.text:0000000000002687                 jnz     short loc_2691
.text:0000000000002689                 cmp     al, 2Eh ; '.'
.text:000000000000268B                 jz      loc_2920
.text:0000000000002691
.text:0000000000002691 loc_2691:                               ; CODE XREF: canonicalize_filename_mode+127↑j
.text:0000000000002691                                         ; canonicalize_filename_mode+2F2↓j ...
.text:0000000000002691                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000002696                 jz      short loc_26A0
.text:0000000000002698                 mov     byte ptr [r15], 2Fh ; '/'
.text:000000000000269C                 add     r15, 1
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: canonicalize_filename_mode+136↑j
.text:00000000000026A0                 lea     rax, [r15+r12]
.text:00000000000026A4                 cmp     rbx, rax
.text:00000000000026A7                 ja      short loc_26DA
.text:00000000000026A9                 sub     rbx, rbp
.text:00000000000026AC                 sub     r15, rbp
.text:00000000000026AF                 mov     rdi, rbp
.text:00000000000026B2                 lea     rax, [r12+rbx+1]
.text:00000000000026B7                 add     rbx, 1000h
.text:00000000000026BE                 cmp     r12, 1000h
.text:00000000000026C5                 cmovge  rbx, rax
.text:00000000000026C9                 mov     rsi, rbx
.text:00000000000026CC                 call    xrealloc
.text:00000000000026D1                 mov     rbp, rax
.text:00000000000026D4                 add     rbx, rax
.text:00000000000026D7                 add     r15, rax
.text:00000000000026DA
.text:00000000000026DA loc_26DA:                               ; CODE XREF: canonicalize_filename_mode+147↑j
.text:00000000000026DA                 mov     rdi, r15        ; dest
.text:00000000000026DD                 mov     rdx, r12        ; n
.text:00000000000026E0                 mov     rsi, r14        ; src
.text:00000000000026E3                 call    _memcpy
.text:00000000000026E8                 cmp     [rsp+118h+var_114], 2
.text:00000000000026ED                 lea     r15, [r15+r12]
.text:00000000000026F1                 mov     byte ptr [r15], 0
.text:00000000000026F5                 jnz     loc_27B0
.text:00000000000026FB                 cmp     [rsp+118h+var_FD], 0
.text:0000000000002700                 jz      loc_27B0
.text:0000000000002706
.text:0000000000002706 loc_2706:                               ; CODE XREF: canonicalize_filename_mode+290↓j
.text:0000000000002706                 mov     [rsp+118h+var_C0], 0
.text:000000000000270E
.text:000000000000270E loc_270E:                               ; CODE XREF: canonicalize_filename_mode+31B↓j
.text:000000000000270E                 cmp     byte ptr [r13+0], 0
.text:0000000000002713                 jz      short loc_2720
.text:0000000000002715                 cmp     [rsp+118h+var_114], 2
.text:000000000000271A                 jnz     loc_2B77
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: canonicalize_filename_mode+1B3↑j
.text:0000000000002720                                         ; canonicalize_filename_mode+2B8↓j ...
.text:0000000000002720                 mov     r14, r13
.text:0000000000002723                 movzx   eax, byte ptr [r14]
.text:0000000000002727                 test    al, al
.text:0000000000002729                 jnz     loc_2630
.text:000000000000272F
.text:000000000000272F loc_272F:                               ; CODE XREF: canonicalize_filename_mode+C1↑j
.text:000000000000272F                                         ; canonicalize_filename_mode+10D↑j
.text:000000000000272F                 lea     rax, [rbp+1]
.text:0000000000002733                 cmp     r15, rax
.text:0000000000002736                 jbe     short loc_2743
.text:0000000000002738                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:000000000000273D                 jnz     short loc_2743
.text:000000000000273F                 sub     r15, 1
.text:0000000000002743
.text:0000000000002743 loc_2743:                               ; CODE XREF: canonicalize_filename_mode+1D6↑j
.text:0000000000002743                                         ; canonicalize_filename_mode+1DD↑j
.text:0000000000002743                 lea     rax, [r15+1]
.text:0000000000002747                 mov     byte ptr [r15], 0
.text:000000000000274B                 cmp     rbx, rax
.text:000000000000274E                 jz      short loc_2762
.text:0000000000002750                 sub     r15, rbp
.text:0000000000002753                 mov     rdi, rbp
.text:0000000000002756                 lea     rsi, [r15+1]
.text:000000000000275A                 call    xrealloc
.text:000000000000275F                 mov     rbp, rax
.text:0000000000002762
.text:0000000000002762 loc_2762:                               ; CODE XREF: canonicalize_filename_mode+1EE↑j
.text:0000000000002762                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000002767                 call    _free
.text:000000000000276C                 mov     rax, [rsp+118h+var_108]
.text:0000000000002771                 test    rax, rax
.text:0000000000002774                 jz      short loc_2780
.text:0000000000002776                 mov     rdi, rax        ; ptr
.text:0000000000002779                 call    hash_free
.text:000000000000277E                 xchg    ax, ax
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: canonicalize_filename_mode+6E↑j
.text:0000000000002780                                         ; canonicalize_filename_mode+214↑j ...
.text:0000000000002780                 mov     rcx, [rsp+118h+var_40]
.text:0000000000002788                 xor     rcx, fs:28h
.text:0000000000002791                 mov     rax, rbp
.text:0000000000002794                 jnz     loc_2B91
.text:000000000000279A                 add     rsp, 0E8h
.text:00000000000027A1                 pop     rbx
.text:00000000000027A2                 pop     rbp
.text:00000000000027A3                 pop     r12
.text:00000000000027A5                 pop     r13
.text:00000000000027A7                 pop     r14
.text:00000000000027A9                 pop     r15
.text:00000000000027AB                 retn
.text:00000000000027AB ; ---------------------------------------------------------------------------
.text:00000000000027AC                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: canonicalize_filename_mode+195↑j
.text:00000000000027B0                                         ; canonicalize_filename_mode+1A0↑j
.text:00000000000027B0                 mov     eax, [rsp+118h+var_FC]
.text:00000000000027B4                 mov     rdx, [rsp+118h+stat_buf] ; stat_buf
.text:00000000000027B9                 mov     rsi, rbp        ; filename
.text:00000000000027BC                 mov     edi, 1          ; ver
.text:00000000000027C1                 test    eax, eax
.text:00000000000027C3                 jz      loc_2880
.text:00000000000027C9                 call    ___xstat
.text:00000000000027CE                 test    eax, eax
.text:00000000000027D0                 setnz   al
.text:00000000000027D3
.text:00000000000027D3 loc_27D3:                               ; CODE XREF: canonicalize_filename_mode+32A↓j
.text:00000000000027D3                 test    al, al
.text:00000000000027D5                 jz      loc_2860
.text:00000000000027DB                 call    ___errno_location
.text:00000000000027E0                 mov     r14, rax
.text:00000000000027E3                 mov     edx, [rax]
.text:00000000000027E5                 mov     eax, [rsp+118h+var_114]
.text:00000000000027E9                 test    eax, eax
.text:00000000000027EB                 jz      short loc_281E
.text:00000000000027ED                 cmp     eax, 1
.text:00000000000027F0                 jnz     loc_2706
.text:00000000000027F6                 lea     rsi, aLibs+6    ; accept
.text:00000000000027FD                 mov     rdi, r13        ; s
.text:0000000000002800                 mov     dword ptr [rsp+118h+var_E0], edx
.text:0000000000002804                 call    _strspn
.text:0000000000002809                 cmp     byte ptr [r13+rax+0], 0
.text:000000000000280F                 mov     edx, dword ptr [rsp+118h+var_E0]
.text:0000000000002813                 jnz     short loc_281E
.text:0000000000002815                 cmp     edx, 2
.text:0000000000002818                 jz      loc_2720
.text:000000000000281E
.text:000000000000281E loc_281E:                               ; CODE XREF: canonicalize_filename_mode+28B↑j
.text:000000000000281E                                         ; canonicalize_filename_mode+2B3↑j
.text:000000000000281E                 mov     r12, r14
.text:0000000000002821
.text:0000000000002821 loc_2821:                               ; CODE XREF: canonicalize_filename_mode+624↓j
.text:0000000000002821                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000002826                 mov     [rsp+118h+var_114], edx
.text:000000000000282A                 call    _free
.text:000000000000282F                 mov     rdi, rbp        ; ptr
.text:0000000000002832                 call    _free
.text:0000000000002837                 cmp     [rsp+118h+var_108], 0
.text:000000000000283D                 mov     edx, [rsp+118h+var_114]
.text:0000000000002841                 jz      loc_28FC
.text:0000000000002847                 jmp     loc_28EA
.text:0000000000002847 ; ---------------------------------------------------------------------------
.text:000000000000284C                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: canonicalize_filename_mode+11D↑j
.text:0000000000002850                 cmp     al, 2Eh ; '.'
.text:0000000000002852                 jnz     loc_2691
.text:0000000000002858                 jmp     loc_2720
.text:0000000000002858 ; ---------------------------------------------------------------------------
.text:000000000000285D                 align 20h
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: canonicalize_filename_mode+275↑j
.text:0000000000002860                 mov     eax, [rsp+118h+var_C0]
.text:0000000000002864                 and     eax, 0F000h
.text:0000000000002869                 cmp     eax, 0A000h
.text:000000000000286E                 jz      short loc_2890
.text:0000000000002870                 cmp     eax, 4000h
.text:0000000000002875                 jz      loc_2720
.text:000000000000287B                 jmp     loc_270E
.text:0000000000002880 ; ---------------------------------------------------------------------------
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: canonicalize_filename_mode+263↑j
.text:0000000000002880                 call    ___lxstat
.text:0000000000002885                 test    eax, eax
.text:0000000000002887                 setnz   al
.text:000000000000288A                 jmp     loc_27D3
.text:000000000000288A ; ---------------------------------------------------------------------------
.text:000000000000288F                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: canonicalize_filename_mode+30E↑j
.text:0000000000002890                 cmp     [rsp+118h+var_108], 0
.text:0000000000002896                 jz      loc_2A46
.text:000000000000289C
.text:000000000000289C loc_289C:                               ; CODE XREF: canonicalize_filename_mode+50F↓j
.text:000000000000289C                 mov     rdx, [rsp+118h+stat_buf]
.text:00000000000028A1                 mov     rsi, [rsp+118h+n]
.text:00000000000028A6                 mov     rdi, [rsp+118h+var_108]
.text:00000000000028AB                 call    seen_file
.text:00000000000028B0                 test    al, al
.text:00000000000028B2                 jz      loc_2970
.text:00000000000028B8                 cmp     [rsp+118h+var_114], 2
.text:00000000000028BD                 jz      loc_2720
.text:00000000000028C3                 call    ___errno_location
.text:00000000000028C8                 mov     edx, 28h ; '('
.text:00000000000028CD                 mov     r12, rax
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: canonicalize_filename_mode+5BF↓j
.text:00000000000028D0                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:00000000000028D5                 mov     [rsp+118h+var_114], edx
.text:00000000000028D9                 call    _free
.text:00000000000028DE                 mov     rdi, rbp        ; ptr
.text:00000000000028E1                 call    _free
.text:00000000000028E6                 mov     edx, [rsp+118h+var_114]
.text:00000000000028EA
.text:00000000000028EA loc_28EA:                               ; CODE XREF: canonicalize_filename_mode+2E7↑j
.text:00000000000028EA                 mov     rdi, [rsp+118h+var_108] ; ptr
.text:00000000000028EF                 mov     [rsp+118h+var_114], edx
.text:00000000000028F3                 call    hash_free
.text:00000000000028F8                 mov     edx, [rsp+118h+var_114]
.text:00000000000028FC
.text:00000000000028FC loc_28FC:                               ; CODE XREF: canonicalize_filename_mode+2E1↑j
.text:00000000000028FC                 mov     [r12], edx
.text:0000000000002900                 xor     ebp, ebp
.text:0000000000002902                 jmp     loc_2780
.text:0000000000002902 ; ---------------------------------------------------------------------------
.text:0000000000002907                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: canonicalize_filename_mode+E6↑j
.text:0000000000002910                 mov     r13, r14
.text:0000000000002913                 jmp     loc_266A
.text:0000000000002913 ; ---------------------------------------------------------------------------
.text:0000000000002918                 align 20h
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: canonicalize_filename_mode+12B↑j
.text:0000000000002920                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:0000000000002925                 jnz     loc_2691
.text:000000000000292B                 lea     rax, [rbp+1]
.text:000000000000292F                 mov     r14, r13
.text:0000000000002932                 cmp     r15, rax
.text:0000000000002935                 jbe     loc_261B
.text:000000000000293B                 lea     rax, [r15-1]
.text:000000000000293F                 cmp     rbp, rax
.text:0000000000002942                 jnb     loc_2B89
.text:0000000000002948                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:000000000000294D                 mov     r15, rax
.text:0000000000002950                 jz      loc_261B
.text:0000000000002956
.text:0000000000002956 loc_2956:                               ; CODE XREF: canonicalize_filename_mode+40E↓j
.text:0000000000002956                 sub     r15, 1
.text:000000000000295A                 cmp     rbp, r15
.text:000000000000295D                 jz      loc_2720
.text:0000000000002963                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000002968                 jz      loc_2720
.text:000000000000296E                 jmp     short loc_2956
.text:0000000000002970 ; ---------------------------------------------------------------------------
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: canonicalize_filename_mode+352↑j
.text:0000000000002970                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000002975                 mov     rsi, [rsp+118h+n]
.text:000000000000297A                 mov     rdi, [rsp+118h+var_108]
.text:000000000000297F                 call    record_file
.text:0000000000002984                 mov     rsi, [rsp+118h+var_A8]
.text:0000000000002989                 mov     rdi, rbp        ; path
.text:000000000000298C                 call    areadlink_with_size
.text:0000000000002991                 test    rax, rax
.text:0000000000002994                 mov     r14, rax
.text:0000000000002997                 jz      loc_2B02
.text:000000000000299D                 mov     rdi, rax        ; s
.text:00000000000029A0                 call    _strlen
.text:00000000000029A5                 mov     rdi, r13        ; s
.text:00000000000029A8                 mov     r12, rax
.text:00000000000029AB                 mov     [rsp+118h+n], rax
.text:00000000000029B0                 call    _strlen
.text:00000000000029B5                 cmp     [rsp+118h+var_E8], 0
.text:00000000000029BB                 mov     rdx, rax
.text:00000000000029BE                 lea     rcx, [r12+rdx+1]
.text:00000000000029C3                 jz      loc_2ABF
.text:00000000000029C9                 cmp     [rsp+118h+var_E8], rcx
.text:00000000000029CE                 jnb     short loc_29F1
.text:00000000000029D0                 mov     rdi, [rsp+118h+ptr]
.text:00000000000029D5                 mov     rsi, rcx
.text:00000000000029D8                 mov     [rsp+118h+var_E0], rdx
.text:00000000000029DD                 mov     [rsp+118h+var_E8], rcx
.text:00000000000029E2                 call    xrealloc
.text:00000000000029E7                 mov     rdx, [rsp+118h+var_E0]
.text:00000000000029EC                 mov     [rsp+118h+ptr], rax
.text:00000000000029F1
.text:00000000000029F1 loc_29F1:                               ; CODE XREF: canonicalize_filename_mode+46E↑j
.text:00000000000029F1                                         ; canonicalize_filename_mode+58B↓j
.text:00000000000029F1                 mov     r12, [rsp+118h+ptr]
.text:00000000000029F6                 mov     rdi, [rsp+118h+n]
.text:00000000000029FB                 add     rdx, 1          ; n
.text:00000000000029FF                 mov     rsi, r13        ; src
.text:0000000000002A02                 add     rdi, r12        ; dest
.text:0000000000002A05                 mov     r13, r12
.text:0000000000002A08                 call    _memmove
.text:0000000000002A0D                 mov     rdx, [rsp+118h+n] ; n
.text:0000000000002A12                 mov     rsi, r14        ; src
.text:0000000000002A15                 mov     rdi, r12        ; dest
.text:0000000000002A18                 call    _memcpy
.text:0000000000002A1D                 cmp     byte ptr [r14], 2Fh ; '/'
.text:0000000000002A21                 mov     [rsp+118h+n], r12
.text:0000000000002A26                 lea     rax, [rbp+1]
.text:0000000000002A2A                 jz      loc_2B24
.text:0000000000002A30                 cmp     r15, rax
.text:0000000000002A33                 ja      loc_2B42
.text:0000000000002A39
.text:0000000000002A39 loc_2A39:                               ; CODE XREF: canonicalize_filename_mode+5CB↓j
.text:0000000000002A39                                         ; canonicalize_filename_mode+5F5↓j ...
.text:0000000000002A39                 mov     rdi, r14        ; ptr
.text:0000000000002A3C                 call    _free
.text:0000000000002A41                 jmp     loc_2720
.text:0000000000002A46 ; ---------------------------------------------------------------------------
.text:0000000000002A46
.text:0000000000002A46 loc_2A46:                               ; CODE XREF: canonicalize_filename_mode+336↑j
.text:0000000000002A46                 lea     r8, triple_free
.text:0000000000002A4D                 lea     rcx, triple_compare_ino_str
.text:0000000000002A54                 xor     esi, esi
.text:0000000000002A56                 lea     rdx, triple_hash
.text:0000000000002A5D                 mov     edi, 7
.text:0000000000002A62                 call    hash_initialize
.text:0000000000002A67                 test    rax, rax
.text:0000000000002A6A                 mov     [rsp+118h+var_108], rax
.text:0000000000002A6F                 jnz     loc_289C
.text:0000000000002A75                 call    xalloc_die
.text:0000000000002A75 ; ---------------------------------------------------------------------------
.text:0000000000002A7A                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: canonicalize_filename_mode+5D↑j
.text:0000000000002A80                 mov     edi, 1000h
.text:0000000000002A85                 call    xmalloc
.text:0000000000002A8A                 mov     rbp, rax
.text:0000000000002A8D                 lea     rbx, [rax+1000h]
.text:0000000000002A94                 lea     r15, [rax+1]
.text:0000000000002A98                 mov     byte ptr [rax], 2Fh ; '/'
.text:0000000000002A9B                 jmp     loc_25F1
.text:0000000000002AA0 ; ---------------------------------------------------------------------------
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: canonicalize_filename_mode+85↑j
.text:0000000000002AA0                 mov     rdi, rbp
.text:0000000000002AA3                 mov     esi, 1000h
.text:0000000000002AA8                 call    xrealloc
.text:0000000000002AAD                 mov     rbp, rax
.text:0000000000002AB0                 add     r15, rax
.text:0000000000002AB3                 lea     rbx, [rax+1000h]
.text:0000000000002ABA                 jmp     loc_25F1
.text:0000000000002ABF ; ---------------------------------------------------------------------------
.text:0000000000002ABF
.text:0000000000002ABF loc_2ABF:                               ; CODE XREF: canonicalize_filename_mode+463↑j
.text:0000000000002ABF                 cmp     rcx, 1000h
.text:0000000000002AC6                 mov     eax, 1000h
.text:0000000000002ACB                 mov     [rsp+118h+var_E0], rdx
.text:0000000000002AD0                 cmovnb  rax, rcx
.text:0000000000002AD4                 mov     rdi, rax
.text:0000000000002AD7                 mov     [rsp+118h+var_E8], rax
.text:0000000000002ADC                 call    xmalloc
.text:0000000000002AE1                 mov     rdx, [rsp+118h+var_E0]
.text:0000000000002AE6                 mov     [rsp+118h+ptr], rax
.text:0000000000002AEB                 jmp     loc_29F1
.text:0000000000002AF0 ; ---------------------------------------------------------------------------
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: canonicalize_filename_mode+3E↑j
.text:0000000000002AF0                                         ; canonicalize_filename_mode+4A↑j
.text:0000000000002AF0                 call    ___errno_location
.text:0000000000002AF5                 xor     ebp, ebp
.text:0000000000002AF7                 mov     dword ptr [rax], 16h
.text:0000000000002AFD                 jmp     loc_2780
.text:0000000000002B02 ; ---------------------------------------------------------------------------
.text:0000000000002B02
.text:0000000000002B02 loc_2B02:                               ; CODE XREF: canonicalize_filename_mode+437↑j
.text:0000000000002B02                 call    ___errno_location
.text:0000000000002B07                 cmp     [rsp+118h+var_114], 2
.text:0000000000002B0C                 mov     r14, rax
.text:0000000000002B0F                 mov     edx, [rax]
.text:0000000000002B11                 jnz     short loc_2B1C
.text:0000000000002B13                 cmp     edx, 0Ch
.text:0000000000002B16                 jnz     loc_2720
.text:0000000000002B1C
.text:0000000000002B1C loc_2B1C:                               ; CODE XREF: canonicalize_filename_mode+5B1↑j
.text:0000000000002B1C                 mov     r12, r14
.text:0000000000002B1F                 jmp     loc_28D0
.text:0000000000002B24 ; ---------------------------------------------------------------------------
.text:0000000000002B24
.text:0000000000002B24 loc_2B24:                               ; CODE XREF: canonicalize_filename_mode+4CA↑j
.text:0000000000002B24                 mov     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000002B28                 mov     r15, rax
.text:0000000000002B2B                 jmp     loc_2A39
.text:0000000000002B30 ; ---------------------------------------------------------------------------
.text:0000000000002B30
.text:0000000000002B30 loc_2B30:                               ; CODE XREF: canonicalize_filename_mode+55↑j
.text:0000000000002B30                 call    ___errno_location
.text:0000000000002B35                 xor     ebp, ebp
.text:0000000000002B37                 mov     dword ptr [rax], 2
.text:0000000000002B3D                 jmp     loc_2780
.text:0000000000002B42 ; ---------------------------------------------------------------------------
.text:0000000000002B42
.text:0000000000002B42 loc_2B42:                               ; CODE XREF: canonicalize_filename_mode+4D3↑j
.text:0000000000002B42                 lea     rax, [r15-1]
.text:0000000000002B46                 cmp     rbp, rax
.text:0000000000002B49                 jnb     short loc_2B52
.text:0000000000002B4B                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:0000000000002B50                 jnz     short loc_2B5D
.text:0000000000002B52
.text:0000000000002B52 loc_2B52:                               ; CODE XREF: canonicalize_filename_mode+5E9↑j
.text:0000000000002B52                 mov     r15, rax
.text:0000000000002B55                 jmp     loc_2A39
.text:0000000000002B5A ; ---------------------------------------------------------------------------
.text:0000000000002B5A
.text:0000000000002B5A loc_2B5A:                               ; CODE XREF: canonicalize_filename_mode+615↓j
.text:0000000000002B5A                 mov     rax, r15
.text:0000000000002B5D
.text:0000000000002B5D loc_2B5D:                               ; CODE XREF: canonicalize_filename_mode+5F0↑j
.text:0000000000002B5D                 lea     r15, [rax-1]
.text:0000000000002B61                 cmp     rbp, r15
.text:0000000000002B64                 jz      loc_2A39
.text:0000000000002B6A                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000002B6F                 jz      loc_2A39
.text:0000000000002B75                 jmp     short loc_2B5A
.text:0000000000002B77 ; ---------------------------------------------------------------------------
.text:0000000000002B77
.text:0000000000002B77 loc_2B77:                               ; CODE XREF: canonicalize_filename_mode+1BA↑j
.text:0000000000002B77                 call    ___errno_location
.text:0000000000002B7C                 mov     edx, 14h
.text:0000000000002B81                 mov     r12, rax
.text:0000000000002B84                 jmp     loc_2821
.text:0000000000002B89 ; ---------------------------------------------------------------------------
.text:0000000000002B89
.text:0000000000002B89 loc_2B89:                               ; CODE XREF: canonicalize_filename_mode+3E2↑j
.text:0000000000002B89                 mov     r15, rax
.text:0000000000002B8C                 jmp     loc_261B
.text:0000000000002B91 ; ---------------------------------------------------------------------------
.text:0000000000002B91
.text:0000000000002B91 loc_2B91:                               ; CODE XREF: canonicalize_filename_mode+234↑j
.text:0000000000002B91                 call    ___stack_chk_fail
.text:0000000000002B91 ; } // starts at 2560
.text:0000000000002B91 canonicalize_filename_mode endp
.text:0000000000002B91
.text:0000000000002B91 ; ---------------------------------------------------------------------------
.text:0000000000002B96                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BA0
.text:0000000000002BA0
.text:0000000000002BA0                 public close_stdout_set_file_name
.text:0000000000002BA0 close_stdout_set_file_name proc near
.text:0000000000002BA0 ; __unwind {
.text:0000000000002BA0                 mov     cs:file_name, rdi
.text:0000000000002BA7                 retn
.text:0000000000002BA7 ; } // starts at 2BA0
.text:0000000000002BA7 close_stdout_set_file_name endp
.text:0000000000002BA7
.text:0000000000002BA7 ; ---------------------------------------------------------------------------
.text:0000000000002BA8                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BB0
.text:0000000000002BB0
.text:0000000000002BB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000002BB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002BB0 ; __unwind {
.text:0000000000002BB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000002BB7                 retn
.text:0000000000002BB7 ; } // starts at 2BB0
.text:0000000000002BB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000002BB7
.text:0000000000002BB7 ; ---------------------------------------------------------------------------
.text:0000000000002BB8                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0 ; Attributes: info_from_lumina
.text:0000000000002BC0
.text:0000000000002BC0 ; void __cdecl close_stdout()
.text:0000000000002BC0                 public close_stdout
.text:0000000000002BC0 close_stdout    proc near               ; DATA XREF: main+5E↑o
.text:0000000000002BC0 ; __unwind {
.text:0000000000002BC0                 push    rbp
.text:0000000000002BC1                 push    rbx
.text:0000000000002BC2                 sub     rsp, 8
.text:0000000000002BC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002BCD                 call    close_stream
.text:0000000000002BD2                 test    eax, eax
.text:0000000000002BD4                 jz      short loc_2BEC
.text:0000000000002BD6                 call    ___errno_location
.text:0000000000002BDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002BE2                 mov     rbx, rax
.text:0000000000002BE5                 jz      short loc_2C03
.text:0000000000002BE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002BEA                 jnz     short loc_2C03
.text:0000000000002BEC
.text:0000000000002BEC loc_2BEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002BEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002BF3                 call    close_stream
.text:0000000000002BF8                 test    eax, eax
.text:0000000000002BFA                 jnz     short loc_2C42
.text:0000000000002BFC                 add     rsp, 8
.text:0000000000002C00                 pop     rbx
.text:0000000000002C01                 pop     rbp
.text:0000000000002C02                 retn
.text:0000000000002C03 ; ---------------------------------------------------------------------------
.text:0000000000002C03
.text:0000000000002C03 loc_2C03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002C03                                         ; close_stdout+2A↑j
.text:0000000000002C03                 lea     rsi, aWriteError ; "write error"
.text:0000000000002C0A                 xor     edi, edi        ; domainname
.text:0000000000002C0C                 mov     edx, 5          ; category
.text:0000000000002C11                 call    _dcgettext
.text:0000000000002C16                 mov     rdi, cs:file_name
.text:0000000000002C1D                 mov     rbp, rax
.text:0000000000002C20                 test    rdi, rdi
.text:0000000000002C23                 jz      short loc_2C4D
.text:0000000000002C25                 call    quotearg_colon
.text:0000000000002C2A                 mov     esi, [rbx]      ; errnum
.text:0000000000002C2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002C33                 mov     rcx, rax
.text:0000000000002C36                 mov     r8, rbp
.text:0000000000002C39                 xor     edi, edi        ; status
.text:0000000000002C3B                 xor     eax, eax
.text:0000000000002C3D                 call    _error
.text:0000000000002C42
.text:0000000000002C42 loc_2C42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002C42                                         ; close_stdout+A2↓j
.text:0000000000002C42                 mov     edi, cs:exit_failure ; status
.text:0000000000002C48                 call    __exit
.text:0000000000002C4D ; ---------------------------------------------------------------------------
.text:0000000000002C4D
.text:0000000000002C4D loc_2C4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002C4D                 mov     esi, [rbx]      ; errnum
.text:0000000000002C4F                 lea     rdx, format+4   ; format
.text:0000000000002C56                 mov     rcx, rax
.text:0000000000002C59                 xor     edi, edi        ; status
.text:0000000000002C5B                 xor     eax, eax
.text:0000000000002C5D                 call    _error
.text:0000000000002C62                 jmp     short loc_2C42
.text:0000000000002C62 ; } // starts at 2BC0
.text:0000000000002C62 close_stdout    endp
.text:0000000000002C62
.text:0000000000002C62 ; ---------------------------------------------------------------------------
.text:0000000000002C64                 align 10h
.text:0000000000002C70
.text:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C70
.text:0000000000002C70 ; Attributes: info_from_lumina
.text:0000000000002C70
.text:0000000000002C70 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:0000000000002C70                 public record_file
.text:0000000000002C70 record_file     proc near               ; CODE XREF: canonicalize_filename_mode+41F↑p
.text:0000000000002C70 ; __unwind {
.text:0000000000002C70                 test    rdi, rdi
.text:0000000000002C73                 jz      short locret_2CF0
.text:0000000000002C75                 push    r13
.text:0000000000002C77                 push    r12
.text:0000000000002C79                 mov     r13, rdi
.text:0000000000002C7C                 push    rbp
.text:0000000000002C7D                 push    rbx
.text:0000000000002C7E                 mov     r12, rsi
.text:0000000000002C81                 mov     edi, 18h
.text:0000000000002C86                 mov     rbp, rdx
.text:0000000000002C89                 sub     rsp, 8
.text:0000000000002C8D                 call    xmalloc
.text:0000000000002C92                 mov     rdi, r12        ; src
.text:0000000000002C95                 mov     rbx, rax
.text:0000000000002C98                 call    xstrdup
.text:0000000000002C9D                 mov     [rbx], rax
.text:0000000000002CA0                 mov     rax, [rbp+8]
.text:0000000000002CA4                 mov     rsi, rbx
.text:0000000000002CA7                 mov     rdi, r13
.text:0000000000002CAA                 mov     [rbx+8], rax
.text:0000000000002CAE                 mov     rax, [rbp+0]
.text:0000000000002CB2                 mov     [rbx+10h], rax
.text:0000000000002CB6                 call    hash_insert
.text:0000000000002CBB                 test    rax, rax
.text:0000000000002CBE                 jz      short loc_2CF2
.text:0000000000002CC0                 cmp     rbx, rax
.text:0000000000002CC3                 jz      short loc_2CE0
.text:0000000000002CC5                 add     rsp, 8
.text:0000000000002CC9                 mov     rdi, rbx        ; ptr
.text:0000000000002CCC                 pop     rbx
.text:0000000000002CCD                 pop     rbp
.text:0000000000002CCE                 pop     r12
.text:0000000000002CD0                 pop     r13
.text:0000000000002CD2                 jmp     triple_free
.text:0000000000002CD2 ; ---------------------------------------------------------------------------
.text:0000000000002CD7                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: record_file+53↑j
.text:0000000000002CE0                 add     rsp, 8
.text:0000000000002CE4                 pop     rbx
.text:0000000000002CE5                 pop     rbp
.text:0000000000002CE6                 pop     r12
.text:0000000000002CE8                 pop     r13
.text:0000000000002CEA                 retn
.text:0000000000002CEA ; ---------------------------------------------------------------------------
.text:0000000000002CEB                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 locret_2CF0:                            ; CODE XREF: record_file+3↑j
.text:0000000000002CF0                 rep retn
.text:0000000000002CF2 ; ---------------------------------------------------------------------------
.text:0000000000002CF2
.text:0000000000002CF2 loc_2CF2:                               ; CODE XREF: record_file+4E↑j
.text:0000000000002CF2                 call    xalloc_die
.text:0000000000002CF2 ; } // starts at 2C70
.text:0000000000002CF2 record_file     endp
.text:0000000000002CF2
.text:0000000000002CF2 ; ---------------------------------------------------------------------------
.text:0000000000002CF7                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00 ; Attributes: info_from_lumina
.text:0000000000002D00
.text:0000000000002D00 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:0000000000002D00                 public seen_file
.text:0000000000002D00 seen_file       proc near               ; CODE XREF: canonicalize_filename_mode+34B↑p
.text:0000000000002D00
.text:0000000000002D00 var_28          = qword ptr -28h
.text:0000000000002D00 var_20          = qword ptr -20h
.text:0000000000002D00 var_18          = qword ptr -18h
.text:0000000000002D00 var_10          = qword ptr -10h
.text:0000000000002D00
.text:0000000000002D00 ; __unwind {
.text:0000000000002D00                 sub     rsp, 28h
.text:0000000000002D04                 mov     rax, fs:28h
.text:0000000000002D0D                 mov     [rsp+28h+var_10], rax
.text:0000000000002D12                 xor     eax, eax
.text:0000000000002D14                 test    rdi, rdi
.text:0000000000002D17                 jz      short loc_2D3C
.text:0000000000002D19                 mov     rax, [rdx+8]
.text:0000000000002D1D                 mov     [rsp+28h+var_28], rsi
.text:0000000000002D21                 mov     rsi, rsp
.text:0000000000002D24                 mov     [rsp+28h+var_20], rax
.text:0000000000002D29                 mov     rax, [rdx]
.text:0000000000002D2C                 mov     [rsp+28h+var_18], rax
.text:0000000000002D31                 call    hash_lookup
.text:0000000000002D36                 test    rax, rax
.text:0000000000002D39                 setnz   al
.text:0000000000002D3C
.text:0000000000002D3C loc_2D3C:                               ; CODE XREF: seen_file+17↑j
.text:0000000000002D3C                 mov     rcx, [rsp+28h+var_10]
.text:0000000000002D41                 xor     rcx, fs:28h
.text:0000000000002D4A                 jnz     short loc_2D51
.text:0000000000002D4C                 add     rsp, 28h
.text:0000000000002D50                 retn
.text:0000000000002D51 ; ---------------------------------------------------------------------------
.text:0000000000002D51
.text:0000000000002D51 loc_2D51:                               ; CODE XREF: seen_file+4A↑j
.text:0000000000002D51                 call    ___stack_chk_fail
.text:0000000000002D51 ; } // starts at 2D00
.text:0000000000002D51 seen_file       endp
.text:0000000000002D51
.text:0000000000002D51 ; ---------------------------------------------------------------------------
.text:0000000000002D56                 align 20h
.text:0000000000002D60
.text:0000000000002D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D60
.text:0000000000002D60 ; Attributes: info_from_lumina
.text:0000000000002D60
.text:0000000000002D60 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000002D60 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000002D60                                         ; hash_rehash+7B↓p
.text:0000000000002D60 ; __unwind {
.text:0000000000002D60                 cmp     rdi, 0Ah
.text:0000000000002D64                 mov     eax, 0Ah
.text:0000000000002D69                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000002D73                 cmovb   rdi, rax
.text:0000000000002D77                 or      rdi, 1
.text:0000000000002D7B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D7F                 jz      short loc_2DEF
.text:0000000000002D81                 nop     dword ptr [rax+00000000h]
.text:0000000000002D88
.text:0000000000002D88 loc_2D88:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000002D88                 mov     rax, rdi
.text:0000000000002D8B                 mov     rcx, rdi
.text:0000000000002D8E                 mul     r9
.text:0000000000002D91                 mov     rax, rdx
.text:0000000000002D94                 shr     rax, 1
.text:0000000000002D97                 lea     rax, [rax+rax*2]
.text:0000000000002D9B                 sub     rcx, rax
.text:0000000000002D9E                 cmp     rdi, 9
.text:0000000000002DA2                 mov     rax, rcx
.text:0000000000002DA5                 jbe     short loc_2DE0
.text:0000000000002DA7                 test    rcx, rcx
.text:0000000000002DAA                 jz      short loc_2DE5
.text:0000000000002DAC                 mov     r8d, 10h
.text:0000000000002DB2                 mov     esi, 9
.text:0000000000002DB7                 mov     ecx, 3
.text:0000000000002DBC                 jmp     short loc_2DC9
.text:0000000000002DBC ; ---------------------------------------------------------------------------
.text:0000000000002DBE                 align 20h
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000002DC0                 add     r8, 8
.text:0000000000002DC4                 test    rdx, rdx
.text:0000000000002DC7                 jz      short loc_2DE5
.text:0000000000002DC9
.text:0000000000002DC9 loc_2DC9:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000002DC9                 add     rcx, 2
.text:0000000000002DCD                 xor     edx, edx
.text:0000000000002DCF                 mov     rax, rdi
.text:0000000000002DD2                 div     rcx
.text:0000000000002DD5                 add     rsi, r8
.text:0000000000002DD8                 cmp     rsi, rdi
.text:0000000000002DDB                 mov     rax, rdx
.text:0000000000002DDE                 jb      short loc_2DC0
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: next_prime+45↑j
.text:0000000000002DE0                 test    rax, rax
.text:0000000000002DE3                 jnz     short loc_2DEF
.text:0000000000002DE5
.text:0000000000002DE5 loc_2DE5:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000002DE5                                         ; next_prime+67↑j
.text:0000000000002DE5                 add     rdi, 2
.text:0000000000002DE9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002DED                 jnz     short loc_2D88
.text:0000000000002DEF
.text:0000000000002DEF loc_2DEF:                               ; CODE XREF: next_prime+1F↑j
.text:0000000000002DEF                                         ; next_prime+83↑j
.text:0000000000002DEF                 mov     rax, rdi
.text:0000000000002DF2                 retn
.text:0000000000002DF2 ; } // starts at 2D60
.text:0000000000002DF2 next_prime      endp
.text:0000000000002DF2
.text:0000000000002DF2 ; ---------------------------------------------------------------------------
.text:0000000000002DF3                 align 20h
.text:0000000000002E00
.text:0000000000002E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E00
.text:0000000000002E00
.text:0000000000002E00 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000002E00 ; __unwind {
.text:0000000000002E00                 mov     rax, rdi
.text:0000000000002E03                 xor     edx, edx
.text:0000000000002E05                 ror     rax, 3
.text:0000000000002E09                 div     rsi
.text:0000000000002E0C                 mov     rax, rdx
.text:0000000000002E0F                 retn
.text:0000000000002E0F ; } // starts at 2E00
.text:0000000000002E0F raw_hasher      endp
.text:0000000000002E0F
.text:0000000000002E10
.text:0000000000002E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E10
.text:0000000000002E10
.text:0000000000002E10 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000002E10 ; __unwind {
.text:0000000000002E10                 cmp     rdi, rsi
.text:0000000000002E13                 setz    al
.text:0000000000002E16                 retn
.text:0000000000002E16 ; } // starts at 2E10
.text:0000000000002E16 raw_comparator  endp
.text:0000000000002E16
.text:0000000000002E16 ; ---------------------------------------------------------------------------
.text:0000000000002E17                 align 20h
.text:0000000000002E20
.text:0000000000002E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E20
.text:0000000000002E20 ; Attributes: info_from_lumina
.text:0000000000002E20
.text:0000000000002E20 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000002E20 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000002E20                                         ; transfer_entries+65↓p ...
.text:0000000000002E20 ; __unwind {
.text:0000000000002E20                 push    rbx
.text:0000000000002E21                 mov     rbx, rdi
.text:0000000000002E24                 mov     rdi, rsi
.text:0000000000002E27                 mov     rsi, [rbx+10h]
.text:0000000000002E2B                 call    qword ptr [rbx+30h]
.text:0000000000002E2E                 cmp     [rbx+10h], rax
.text:0000000000002E32                 jbe     short loc_2E3D
.text:0000000000002E34                 shl     rax, 4
.text:0000000000002E38                 add     rax, [rbx]
.text:0000000000002E3B                 pop     rbx
.text:0000000000002E3C                 retn
.text:0000000000002E3D ; ---------------------------------------------------------------------------
.text:0000000000002E3D
.text:0000000000002E3D loc_2E3D:                               ; CODE XREF: safe_hasher+12↑j
.text:0000000000002E3D                 call    _abort
.text:0000000000002E3D ; } // starts at 2E20
.text:0000000000002E3D safe_hasher     endp
.text:0000000000002E3D
.text:0000000000002E3D ; ---------------------------------------------------------------------------
.text:0000000000002E42                 align 10h
.text:0000000000002E50
.text:0000000000002E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E50
.text:0000000000002E50 ; Attributes: info_from_lumina
.text:0000000000002E50
.text:0000000000002E50 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000002E50 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000002E50                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000002E50 ; __unwind {
.text:0000000000002E50                 push    r14
.text:0000000000002E52                 push    r13
.text:0000000000002E54                 mov     r14, rdx
.text:0000000000002E57                 push    r12
.text:0000000000002E59                 push    rbp
.text:0000000000002E5A                 mov     r12, rdi
.text:0000000000002E5D                 push    rbx
.text:0000000000002E5E                 mov     rbp, rsi
.text:0000000000002E61                 mov     r13d, ecx
.text:0000000000002E64                 call    safe_hasher
.text:0000000000002E69                 mov     [r14], rax
.text:0000000000002E6C                 mov     rsi, [rax]
.text:0000000000002E6F                 test    rsi, rsi
.text:0000000000002E72                 jz      loc_2F60
.text:0000000000002E78                 cmp     rsi, rbp
.text:0000000000002E7B                 mov     rbx, rax
.text:0000000000002E7E                 jz      loc_2F13
.text:0000000000002E84                 mov     rdi, rbp
.text:0000000000002E87                 call    qword ptr [r12+38h]
.text:0000000000002E8C                 test    al, al
.text:0000000000002E8E                 jnz     loc_2F10
.text:0000000000002E94                 mov     rax, [rbx+8]
.text:0000000000002E98                 test    rax, rax
.text:0000000000002E9B                 jz      loc_2F60
.text:0000000000002EA1                 mov     rsi, [rax]
.text:0000000000002EA4                 cmp     rbp, rsi
.text:0000000000002EA7                 jnz     short loc_2EC9
.text:0000000000002EA9                 jmp     short loc_2EDC
.text:0000000000002EA9 ; ---------------------------------------------------------------------------
.text:0000000000002EAB                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000002EB0                 mov     rbx, [rbx+8]
.text:0000000000002EB4                 mov     rax, [rbx+8]
.text:0000000000002EB8                 test    rax, rax
.text:0000000000002EBB                 jz      loc_2F60
.text:0000000000002EC1                 mov     rsi, [rax]
.text:0000000000002EC4                 cmp     rsi, rbp
.text:0000000000002EC7                 jz      short loc_2EDC
.text:0000000000002EC9
.text:0000000000002EC9 loc_2EC9:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000002EC9                 mov     rdi, rbp
.text:0000000000002ECC                 call    qword ptr [r12+38h]
.text:0000000000002ED1                 test    al, al
.text:0000000000002ED3                 jz      short loc_2EB0
.text:0000000000002ED5                 mov     rax, [rbx+8]
.text:0000000000002ED9                 mov     rsi, [rax]
.text:0000000000002EDC
.text:0000000000002EDC loc_2EDC:                               ; CODE XREF: hash_find_entry+59↑j
.text:0000000000002EDC                                         ; hash_find_entry+77↑j
.text:0000000000002EDC                 test    r13b, r13b
.text:0000000000002EDF                 jz      short loc_2EFE
.text:0000000000002EE1                 mov     rdx, [rax+8]
.text:0000000000002EE5                 mov     [rbx+8], rdx
.text:0000000000002EE9                 mov     qword ptr [rax], 0
.text:0000000000002EF0                 mov     rdx, [r12+48h]
.text:0000000000002EF5                 mov     [rax+8], rdx
.text:0000000000002EF9                 mov     [r12+48h], rax
.text:0000000000002EFE
.text:0000000000002EFE loc_2EFE:                               ; CODE XREF: hash_find_entry+8F↑j
.text:0000000000002EFE                                         ; hash_find_entry+C6↓j ...
.text:0000000000002EFE                 pop     rbx
.text:0000000000002EFF                 mov     rax, rsi
.text:0000000000002F02                 pop     rbp
.text:0000000000002F03                 pop     r12
.text:0000000000002F05                 pop     r13
.text:0000000000002F07                 pop     r14
.text:0000000000002F09                 retn
.text:0000000000002F09 ; ---------------------------------------------------------------------------
.text:0000000000002F0A                 align 10h
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000002F10                 mov     rsi, [rbx]
.text:0000000000002F13
.text:0000000000002F13 loc_2F13:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000002F13                 test    r13b, r13b
.text:0000000000002F16                 jz      short loc_2EFE
.text:0000000000002F18                 mov     rax, [rbx+8]
.text:0000000000002F1C                 test    rax, rax
.text:0000000000002F1F                 jz      short loc_2F50
.text:0000000000002F21                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000002F25                 movups  xmmword ptr [rbx], xmm0
.text:0000000000002F28                 mov     qword ptr [rax], 0
.text:0000000000002F2F                 mov     rdx, [r12+48h]
.text:0000000000002F34                 mov     [rax+8], rdx
.text:0000000000002F38                 mov     [r12+48h], rax
.text:0000000000002F3D                 mov     rax, rsi
.text:0000000000002F40                 pop     rbx
.text:0000000000002F41                 pop     rbp
.text:0000000000002F42                 pop     r12
.text:0000000000002F44                 pop     r13
.text:0000000000002F46                 pop     r14
.text:0000000000002F48                 retn
.text:0000000000002F48 ; ---------------------------------------------------------------------------
.text:0000000000002F49                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000002F50                 mov     qword ptr [rbx], 0
.text:0000000000002F57                 jmp     short loc_2EFE
.text:0000000000002F57 ; ---------------------------------------------------------------------------
.text:0000000000002F59                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000002F60                                         ; hash_find_entry+4B↑j ...
.text:0000000000002F60                 xor     esi, esi
.text:0000000000002F62                 pop     rbx
.text:0000000000002F63                 mov     rax, rsi
.text:0000000000002F66                 pop     rbp
.text:0000000000002F67                 pop     r12
.text:0000000000002F69                 pop     r13
.text:0000000000002F6B                 pop     r14
.text:0000000000002F6D                 retn
.text:0000000000002F6D ; } // starts at 2E50
.text:0000000000002F6D hash_find_entry endp
.text:0000000000002F6D
.text:0000000000002F6D ; ---------------------------------------------------------------------------
.text:0000000000002F6E                 align 10h
.text:0000000000002F70
.text:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F70
.text:0000000000002F70 ; Attributes: info_from_lumina
.text:0000000000002F70
.text:0000000000002F70 ; _Bool check_tuning(Hash_table *table)
.text:0000000000002F70 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000002F70                                         ; hash_initialize+11B↓p ...
.text:0000000000002F70 ; __unwind {
.text:0000000000002F70                 mov     rdx, [rdi]
.text:0000000000002F73                 lea     rcx, default_tuning
.text:0000000000002F7A                 mov     eax, 1
.text:0000000000002F7F                 cmp     rdx, rcx
.text:0000000000002F82                 jz      short locret_2FE5
.text:0000000000002F84                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000002F89                 ucomiss xmm0, cs:dword_7594
.text:0000000000002F90                 jbe     short loc_2FE0
.text:0000000000002F92                 movss   xmm1, cs:dword_7598
.text:0000000000002F9A                 ucomiss xmm1, xmm0
.text:0000000000002F9D                 jbe     short loc_2FE0
.text:0000000000002F9F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000002FA4                 ucomiss xmm1, cs:dword_759C
.text:0000000000002FAB                 jbe     short loc_2FE0
.text:0000000000002FAD                 movss   xmm1, dword ptr [rdx]
.text:0000000000002FB1                 ucomiss xmm1, cs:dword_75A0
.text:0000000000002FB8                 jb      short loc_2FE0
.text:0000000000002FBA                 addss   xmm1, cs:dword_7594
.text:0000000000002FC2                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000002FC7                 ucomiss xmm2, xmm1
.text:0000000000002FCA                 jbe     short loc_2FE0
.text:0000000000002FCC                 movss   xmm3, cs:dword_75A4
.text:0000000000002FD4                 ucomiss xmm3, xmm2
.text:0000000000002FD7                 jb      short loc_2FE0
.text:0000000000002FD9                 ucomiss xmm0, xmm1
.text:0000000000002FDC                 ja      short locret_2FE5
.text:0000000000002FDE                 xchg    ax, ax
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000002FE0                                         ; check_tuning+2D↑j ...
.text:0000000000002FE0                 mov     [rdi], rcx
.text:0000000000002FE3                 xor     eax, eax
.text:0000000000002FE5
.text:0000000000002FE5 locret_2FE5:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000002FE5                                         ; check_tuning+6C↑j
.text:0000000000002FE5                 rep retn
.text:0000000000002FE5 ; } // starts at 2F70
.text:0000000000002FE5 check_tuning    endp
.text:0000000000002FE5
.text:0000000000002FE5 ; ---------------------------------------------------------------------------
.text:0000000000002FE7                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FF0
.text:0000000000002FF0 ; Attributes: info_from_lumina
.text:0000000000002FF0
.text:0000000000002FF0 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000002FF0 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000002FF0                                         ; hash_rehash+152↓p ...
.text:0000000000002FF0 ; __unwind {
.text:0000000000002FF0                 push    r15
.text:0000000000002FF2                 push    r14
.text:0000000000002FF4                 push    r13
.text:0000000000002FF6                 push    r12
.text:0000000000002FF8                 push    rbp
.text:0000000000002FF9                 push    rbx
.text:0000000000002FFA                 sub     rsp, 8
.text:0000000000002FFE                 mov     r12, [rsi]
.text:0000000000003001                 cmp     r12, [rsi+8]
.text:0000000000003005                 jnb     loc_30E8
.text:000000000000300B                 mov     rbp, rdi
.text:000000000000300E                 mov     r13, rsi
.text:0000000000003011                 mov     r14d, edx
.text:0000000000003014                 nop     dword ptr [rax+00h]
.text:0000000000003018
.text:0000000000003018 loc_3018:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000003018                 mov     r15, [r12]
.text:000000000000301C                 test    r15, r15
.text:000000000000301F                 jz      loc_30DA
.text:0000000000003025                 mov     rbx, [r12+8]
.text:000000000000302A                 test    rbx, rbx
.text:000000000000302D                 jnz     short loc_304C
.text:000000000000302F                 jmp     short loc_308B
.text:000000000000302F ; ---------------------------------------------------------------------------
.text:0000000000003031                 align 8
.text:0000000000003038
.text:0000000000003038 loc_3038:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000003038                 mov     rcx, [rax+8]
.text:000000000000303C                 test    rdx, rdx
.text:000000000000303F                 mov     [rbx+8], rcx
.text:0000000000003043                 mov     [rax+8], rbx
.text:0000000000003047                 mov     rbx, rdx
.text:000000000000304A                 jz      short loc_3087
.text:000000000000304C
.text:000000000000304C loc_304C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000304C                                         ; transfer_entries+95↓j
.text:000000000000304C                 mov     r15, [rbx]
.text:000000000000304F                 mov     rdi, rbp
.text:0000000000003052                 mov     rsi, r15
.text:0000000000003055                 call    safe_hasher
.text:000000000000305A                 cmp     qword ptr [rax], 0
.text:000000000000305E                 mov     rdx, [rbx+8]
.text:0000000000003062                 jnz     short loc_3038
.text:0000000000003064                 mov     [rax], r15
.text:0000000000003067                 add     qword ptr [rbp+18h], 1
.text:000000000000306C                 test    rdx, rdx
.text:000000000000306F                 mov     qword ptr [rbx], 0
.text:0000000000003076                 mov     rax, [rbp+48h]
.text:000000000000307A                 mov     [rbx+8], rax
.text:000000000000307E                 mov     [rbp+48h], rbx
.text:0000000000003082                 mov     rbx, rdx
.text:0000000000003085                 jnz     short loc_304C
.text:0000000000003087
.text:0000000000003087 loc_3087:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000003087                 mov     r15, [r12]
.text:000000000000308B
.text:000000000000308B loc_308B:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000308B                 test    r14b, r14b
.text:000000000000308E                 mov     qword ptr [r12+8], 0
.text:0000000000003097                 jnz     short loc_30DA
.text:0000000000003099                 mov     rsi, r15
.text:000000000000309C                 mov     rdi, rbp
.text:000000000000309F                 call    safe_hasher
.text:00000000000030A4                 cmp     qword ptr [rax], 0
.text:00000000000030A8                 mov     rbx, rax
.text:00000000000030AB                 jz      short loc_3100
.text:00000000000030AD                 mov     rax, [rbp+48h]
.text:00000000000030B1                 test    rax, rax
.text:00000000000030B4                 jz      short loc_3110
.text:00000000000030B6                 mov     rdx, [rax+8]
.text:00000000000030BA                 mov     [rbp+48h], rdx
.text:00000000000030BE
.text:00000000000030BE loc_30BE:                               ; CODE XREF: transfer_entries+12D↓j
.text:00000000000030BE                 mov     rdx, [rbx+8]
.text:00000000000030C2                 mov     [rax], r15
.text:00000000000030C5                 mov     [rax+8], rdx
.text:00000000000030C9                 mov     [rbx+8], rax
.text:00000000000030CD
.text:00000000000030CD loc_30CD:                               ; CODE XREF: transfer_entries+118↓j
.text:00000000000030CD                 mov     qword ptr [r12], 0
.text:00000000000030D5                 sub     qword ptr [r13+18h], 1
.text:00000000000030DA
.text:00000000000030DA loc_30DA:                               ; CODE XREF: transfer_entries+2F↑j
.text:00000000000030DA                                         ; transfer_entries+A7↑j
.text:00000000000030DA                 add     r12, 10h
.text:00000000000030DE                 cmp     [r13+8], r12
.text:00000000000030E2                 ja      loc_3018
.text:00000000000030E8
.text:00000000000030E8 loc_30E8:                               ; CODE XREF: transfer_entries+15↑j
.text:00000000000030E8                 add     rsp, 8
.text:00000000000030EC                 mov     eax, 1
.text:00000000000030F1                 pop     rbx
.text:00000000000030F2                 pop     rbp
.text:00000000000030F3                 pop     r12
.text:00000000000030F5                 pop     r13
.text:00000000000030F7                 pop     r14
.text:00000000000030F9                 pop     r15
.text:00000000000030FB                 retn
.text:00000000000030FB ; ---------------------------------------------------------------------------
.text:00000000000030FC                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000003100                 mov     [rax], r15
.text:0000000000003103                 add     qword ptr [rbp+18h], 1
.text:0000000000003108                 jmp     short loc_30CD
.text:0000000000003108 ; ---------------------------------------------------------------------------
.text:000000000000310A                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000003110                 mov     edi, 10h        ; size
.text:0000000000003115                 call    _malloc
.text:000000000000311A                 test    rax, rax
.text:000000000000311D                 jnz     short loc_30BE
.text:000000000000311F                 add     rsp, 8
.text:0000000000003123                 xor     eax, eax
.text:0000000000003125                 pop     rbx
.text:0000000000003126                 pop     rbp
.text:0000000000003127                 pop     r12
.text:0000000000003129                 pop     r13
.text:000000000000312B                 pop     r14
.text:000000000000312D                 pop     r15
.text:000000000000312F                 retn
.text:000000000000312F ; } // starts at 2FF0
.text:000000000000312F transfer_entries endp
.text:000000000000312F
.text:0000000000003130
.text:0000000000003130 ; =============== S U B R O U T I N E =======================================
.text:0000000000003130
.text:0000000000003130
.text:0000000000003130                 public hash_get_n_buckets
.text:0000000000003130 hash_get_n_buckets proc near
.text:0000000000003130 ; __unwind {
.text:0000000000003130                 mov     rax, [rdi+10h]
.text:0000000000003134                 retn
.text:0000000000003134 ; } // starts at 3130
.text:0000000000003134 hash_get_n_buckets endp
.text:0000000000003134
.text:0000000000003134 ; ---------------------------------------------------------------------------
.text:0000000000003135                 align 20h
.text:0000000000003140
.text:0000000000003140 ; =============== S U B R O U T I N E =======================================
.text:0000000000003140
.text:0000000000003140
.text:0000000000003140                 public hash_get_n_buckets_used
.text:0000000000003140 hash_get_n_buckets_used proc near
.text:0000000000003140 ; __unwind {
.text:0000000000003140                 mov     rax, [rdi+18h]
.text:0000000000003144                 retn
.text:0000000000003144 ; } // starts at 3140
.text:0000000000003144 hash_get_n_buckets_used endp
.text:0000000000003144
.text:0000000000003144 ; ---------------------------------------------------------------------------
.text:0000000000003145                 align 10h
.text:0000000000003150
.text:0000000000003150 ; =============== S U B R O U T I N E =======================================
.text:0000000000003150
.text:0000000000003150
.text:0000000000003150                 public hash_get_n_entries
.text:0000000000003150 hash_get_n_entries proc near
.text:0000000000003150 ; __unwind {
.text:0000000000003150                 mov     rax, [rdi+20h]
.text:0000000000003154                 retn
.text:0000000000003154 ; } // starts at 3150
.text:0000000000003154 hash_get_n_entries endp
.text:0000000000003154
.text:0000000000003154 ; ---------------------------------------------------------------------------
.text:0000000000003155                 align 20h
.text:0000000000003160
.text:0000000000003160 ; =============== S U B R O U T I N E =======================================
.text:0000000000003160
.text:0000000000003160 ; Attributes: info_from_lumina
.text:0000000000003160
.text:0000000000003160 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:0000000000003160                 public hash_get_max_bucket_length
.text:0000000000003160 hash_get_max_bucket_length proc near
.text:0000000000003160 ; __unwind {
.text:0000000000003160                 mov     rsi, [rdi]
.text:0000000000003163                 mov     rdi, [rdi+8]
.text:0000000000003167                 xor     eax, eax
.text:0000000000003169                 cmp     rsi, rdi
.text:000000000000316C                 jnb     short locret_31A7
.text:000000000000316E                 xchg    ax, ax
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000003170                 cmp     qword ptr [rsi], 0
.text:0000000000003174                 jz      short loc_319C
.text:0000000000003176                 mov     rdx, [rsi+8]
.text:000000000000317A                 mov     ecx, 1
.text:000000000000317F                 test    rdx, rdx
.text:0000000000003182                 jz      short loc_3195
.text:0000000000003184                 nop     dword ptr [rax+00h]
.text:0000000000003188
.text:0000000000003188 loc_3188:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000003188                 mov     rdx, [rdx+8]
.text:000000000000318C                 add     rcx, 1
.text:0000000000003190                 test    rdx, rdx
.text:0000000000003193                 jnz     short loc_3188
.text:0000000000003195
.text:0000000000003195 loc_3195:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000003195                 cmp     rax, rcx
.text:0000000000003198                 cmovb   rax, rcx
.text:000000000000319C
.text:000000000000319C loc_319C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000319C                 add     rsi, 10h
.text:00000000000031A0                 cmp     rsi, rdi
.text:00000000000031A3                 jb      short loc_3170
.text:00000000000031A5                 rep retn
.text:00000000000031A7 ; ---------------------------------------------------------------------------
.text:00000000000031A7
.text:00000000000031A7 locret_31A7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:00000000000031A7                 rep retn
.text:00000000000031A7 ; } // starts at 3160
.text:00000000000031A7 hash_get_max_bucket_length endp
.text:00000000000031A7
.text:00000000000031A7 ; ---------------------------------------------------------------------------
.text:00000000000031A9                 align 10h
.text:00000000000031B0
.text:00000000000031B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031B0
.text:00000000000031B0 ; Attributes: info_from_lumina
.text:00000000000031B0
.text:00000000000031B0 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:00000000000031B0                 public hash_table_ok
.text:00000000000031B0 hash_table_ok   proc near
.text:00000000000031B0 ; __unwind {
.text:00000000000031B0                 mov     rcx, [rdi]
.text:00000000000031B3                 mov     r8, [rdi+8]
.text:00000000000031B7                 xor     edx, edx
.text:00000000000031B9                 xor     esi, esi
.text:00000000000031BB                 cmp     rcx, r8
.text:00000000000031BE                 jnb     short loc_31F6
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: hash_table_ok+44↓j
.text:00000000000031C0                 cmp     qword ptr [rcx], 0
.text:00000000000031C4                 jz      short loc_31ED
.text:00000000000031C6                 mov     rax, [rcx+8]
.text:00000000000031CA                 add     rsi, 1
.text:00000000000031CE                 add     rdx, 1
.text:00000000000031D2                 test    rax, rax
.text:00000000000031D5                 jz      short loc_31ED
.text:00000000000031D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: hash_table_ok+3B↓j
.text:00000000000031E0                 mov     rax, [rax+8]
.text:00000000000031E4                 add     rdx, 1
.text:00000000000031E8                 test    rax, rax
.text:00000000000031EB                 jnz     short loc_31E0
.text:00000000000031ED
.text:00000000000031ED loc_31ED:                               ; CODE XREF: hash_table_ok+14↑j
.text:00000000000031ED                                         ; hash_table_ok+25↑j
.text:00000000000031ED                 add     rcx, 10h
.text:00000000000031F1                 cmp     rcx, r8
.text:00000000000031F4                 jb      short loc_31C0
.text:00000000000031F6
.text:00000000000031F6 loc_31F6:                               ; CODE XREF: hash_table_ok+E↑j
.text:00000000000031F6                 xor     eax, eax
.text:00000000000031F8                 cmp     [rdi+18h], rsi
.text:00000000000031FC                 jz      short loc_3200
.text:00000000000031FE                 rep retn
.text:0000000000003200 ; ---------------------------------------------------------------------------
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000003200                 cmp     [rdi+20h], rdx
.text:0000000000003204                 setz    al
.text:0000000000003207                 retn
.text:0000000000003207 ; } // starts at 31B0
.text:0000000000003207 hash_table_ok   endp
.text:0000000000003207
.text:0000000000003207 ; ---------------------------------------------------------------------------
.text:0000000000003208                 align 10h
.text:0000000000003210
.text:0000000000003210 ; =============== S U B R O U T I N E =======================================
.text:0000000000003210
.text:0000000000003210 ; Attributes: info_from_lumina
.text:0000000000003210
.text:0000000000003210 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000003210                 public hash_print_statistics
.text:0000000000003210 hash_print_statistics proc near
.text:0000000000003210 ; __unwind {
.text:0000000000003210                 push    r13
.text:0000000000003212                 push    r12
.text:0000000000003214                 mov     r12, rsi
.text:0000000000003217                 push    rbp
.text:0000000000003218                 push    rbx
.text:0000000000003219                 xor     ebx, ebx
.text:000000000000321B                 sub     rsp, 8
.text:000000000000321F                 mov     rsi, [rdi]
.text:0000000000003222                 mov     rcx, [rdi+20h]
.text:0000000000003226                 mov     rbp, [rdi+10h]
.text:000000000000322A                 mov     r13, [rdi+18h]
.text:000000000000322E                 mov     rdi, [rdi+8]
.text:0000000000003232                 cmp     rsi, rdi
.text:0000000000003235                 jnb     short loc_3275
.text:0000000000003237                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000003240                 cmp     qword ptr [rsi], 0
.text:0000000000003244                 jz      short loc_326C
.text:0000000000003246                 mov     rax, [rsi+8]
.text:000000000000324A                 mov     edx, 1
.text:000000000000324F                 test    rax, rax
.text:0000000000003252                 jz      short loc_3265
.text:0000000000003254                 nop     dword ptr [rax+00h]
.text:0000000000003258
.text:0000000000003258 loc_3258:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000003258                 mov     rax, [rax+8]
.text:000000000000325C                 add     rdx, 1
.text:0000000000003260                 test    rax, rax
.text:0000000000003263                 jnz     short loc_3258
.text:0000000000003265
.text:0000000000003265 loc_3265:                               ; CODE XREF: hash_print_statistics+42↑j
.text:0000000000003265                 cmp     rbx, rdx
.text:0000000000003268                 cmovb   rbx, rdx
.text:000000000000326C
.text:000000000000326C loc_326C:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000326C                 add     rsi, 10h
.text:0000000000003270                 cmp     rsi, rdi
.text:0000000000003273                 jb      short loc_3240
.text:0000000000003275
.text:0000000000003275 loc_3275:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000003275                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000327C                 mov     esi, 1
.text:0000000000003281                 mov     rdi, r12
.text:0000000000003284                 xor     eax, eax
.text:0000000000003286                 call    ___fprintf_chk
.text:000000000000328B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000003292                 xor     eax, eax
.text:0000000000003294                 mov     rcx, rbp
.text:0000000000003297                 mov     esi, 1
.text:000000000000329C                 mov     rdi, r12
.text:000000000000329F                 call    ___fprintf_chk
.text:00000000000032A4                 test    r13, r13
.text:00000000000032A7                 js      short loc_3310
.text:00000000000032A9                 pxor    xmm0, xmm0
.text:00000000000032AD                 test    rbp, rbp
.text:00000000000032B0                 cvtsi2sd xmm0, r13
.text:00000000000032B5                 mulsd   xmm0, cs:qword_75B8
.text:00000000000032BD                 js      short loc_3339
.text:00000000000032BF
.text:00000000000032BF loc_32BF:                               ; CODE XREF: hash_print_statistics+127↓j
.text:00000000000032BF                 pxor    xmm1, xmm1
.text:00000000000032C3                 cvtsi2sd xmm1, rbp
.text:00000000000032C8
.text:00000000000032C8 loc_32C8:                               ; CODE XREF: hash_print_statistics+142↓j
.text:00000000000032C8                 divsd   xmm0, xmm1
.text:00000000000032CC                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00000000000032D3                 mov     rcx, r13
.text:00000000000032D6                 mov     rdi, r12
.text:00000000000032D9                 mov     esi, 1
.text:00000000000032DE                 mov     eax, 1
.text:00000000000032E3                 call    ___fprintf_chk
.text:00000000000032E8                 add     rsp, 8
.text:00000000000032EC                 mov     rcx, rbx
.text:00000000000032EF                 mov     rdi, r12
.text:00000000000032F2                 pop     rbx
.text:00000000000032F3                 pop     rbp
.text:00000000000032F4                 pop     r12
.text:00000000000032F6                 pop     r13
.text:00000000000032F8                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00000000000032FF                 mov     esi, 1
.text:0000000000003304                 xor     eax, eax
.text:0000000000003306                 jmp     ___fprintf_chk
.text:0000000000003306 ; ---------------------------------------------------------------------------
.text:000000000000330B                 align 10h
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000003310                 mov     rax, r13
.text:0000000000003313                 mov     rdx, r13
.text:0000000000003316                 pxor    xmm0, xmm0
.text:000000000000331A                 shr     rax, 1
.text:000000000000331D                 and     edx, 1
.text:0000000000003320                 or      rax, rdx
.text:0000000000003323                 test    rbp, rbp
.text:0000000000003326                 cvtsi2sd xmm0, rax
.text:000000000000332B                 addsd   xmm0, xmm0
.text:000000000000332F                 mulsd   xmm0, cs:qword_75B8
.text:0000000000003337                 jns     short loc_32BF
.text:0000000000003339
.text:0000000000003339 loc_3339:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000003339                 mov     rax, rbp
.text:000000000000333C                 pxor    xmm1, xmm1
.text:0000000000003340                 shr     rax, 1
.text:0000000000003343                 and     ebp, 1
.text:0000000000003346                 or      rax, rbp
.text:0000000000003349                 cvtsi2sd xmm1, rax
.text:000000000000334E                 addsd   xmm1, xmm1
.text:0000000000003352                 jmp     loc_32C8
.text:0000000000003352 ; } // starts at 3210
.text:0000000000003352 hash_print_statistics endp
.text:0000000000003352
.text:0000000000003352 ; ---------------------------------------------------------------------------
.text:0000000000003357                 align 20h
.text:0000000000003360
.text:0000000000003360 ; =============== S U B R O U T I N E =======================================
.text:0000000000003360
.text:0000000000003360 ; Attributes: info_from_lumina
.text:0000000000003360
.text:0000000000003360 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:0000000000003360                 public hash_lookup
.text:0000000000003360 hash_lookup     proc near               ; CODE XREF: seen_file+31↑p
.text:0000000000003360 ; __unwind {
.text:0000000000003360                 push    r12
.text:0000000000003362                 push    rbp
.text:0000000000003363                 mov     r12, rdi
.text:0000000000003366                 push    rbx
.text:0000000000003367                 mov     rbp, rsi
.text:000000000000336A                 call    safe_hasher
.text:000000000000336F                 mov     rsi, [rax]
.text:0000000000003372                 test    rsi, rsi
.text:0000000000003375                 jz      short loc_339D
.text:0000000000003377                 mov     rbx, rax
.text:000000000000337A                 jmp     short loc_3383
.text:000000000000337A ; ---------------------------------------------------------------------------
.text:000000000000337C                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: hash_lookup+3B↓j
.text:0000000000003380                 mov     rsi, [rbx]
.text:0000000000003383
.text:0000000000003383 loc_3383:                               ; CODE XREF: hash_lookup+1A↑j
.text:0000000000003383                 cmp     rsi, rbp
.text:0000000000003386                 jz      short loc_339F
.text:0000000000003388                 mov     rdi, rbp
.text:000000000000338B                 call    qword ptr [r12+38h]
.text:0000000000003390                 test    al, al
.text:0000000000003392                 jnz     short loc_33B0
.text:0000000000003394                 mov     rbx, [rbx+8]
.text:0000000000003398                 test    rbx, rbx
.text:000000000000339B                 jnz     short loc_3380
.text:000000000000339D
.text:000000000000339D loc_339D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000339D                 xor     esi, esi
.text:000000000000339F
.text:000000000000339F loc_339F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000339F                 pop     rbx
.text:00000000000033A0                 mov     rax, rsi
.text:00000000000033A3                 pop     rbp
.text:00000000000033A4                 pop     r12
.text:00000000000033A6                 retn
.text:00000000000033A6 ; ---------------------------------------------------------------------------
.text:00000000000033A7                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: hash_lookup+32↑j
.text:00000000000033B0                 mov     rsi, [rbx]
.text:00000000000033B3                 pop     rbx
.text:00000000000033B4                 pop     rbp
.text:00000000000033B5                 mov     rax, rsi
.text:00000000000033B8                 pop     r12
.text:00000000000033BA                 retn
.text:00000000000033BA ; } // starts at 3360
.text:00000000000033BA hash_lookup     endp
.text:00000000000033BA
.text:00000000000033BA ; ---------------------------------------------------------------------------
.text:00000000000033BB                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0 ; Attributes: info_from_lumina
.text:00000000000033C0
.text:00000000000033C0 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:00000000000033C0                 public hash_get_first
.text:00000000000033C0 hash_get_first  proc near
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 cmp     qword ptr [rdi+20h], 0
.text:00000000000033C5                 jz      short loc_33F3
.text:00000000000033C7                 mov     rdx, [rdi]
.text:00000000000033CA                 mov     rcx, [rdi+8]
.text:00000000000033CE                 cmp     rdx, rcx
.text:00000000000033D1                 jnb     short loc_33F8
.text:00000000000033D3                 mov     rax, [rdx]
.text:00000000000033D6                 test    rax, rax
.text:00000000000033D9                 jnz     short locret_33F6
.text:00000000000033DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: hash_get_first+2F↓j
.text:00000000000033E0                 add     rdx, 10h
.text:00000000000033E4                 cmp     rdx, rcx
.text:00000000000033E7                 jnb     short loc_33F8
.text:00000000000033E9                 mov     rax, [rdx]
.text:00000000000033EC                 test    rax, rax
.text:00000000000033EF                 jz      short loc_33E0
.text:00000000000033F1                 rep retn
.text:00000000000033F3 ; ---------------------------------------------------------------------------
.text:00000000000033F3
.text:00000000000033F3 loc_33F3:                               ; CODE XREF: hash_get_first+5↑j
.text:00000000000033F3                 xor     eax, eax
.text:00000000000033F5                 retn
.text:00000000000033F6 ; ---------------------------------------------------------------------------
.text:00000000000033F6
.text:00000000000033F6 locret_33F6:                            ; CODE XREF: hash_get_first+19↑j
.text:00000000000033F6                 rep retn
.text:00000000000033F8 ; ---------------------------------------------------------------------------
.text:00000000000033F8
.text:00000000000033F8 loc_33F8:                               ; CODE XREF: hash_get_first+11↑j
.text:00000000000033F8                                         ; hash_get_first+27↑j
.text:00000000000033F8                 sub     rsp, 8
.text:00000000000033FC                 call    _abort
.text:00000000000033FC ; } // starts at 33C0
.text:00000000000033FC hash_get_first  endp
.text:00000000000033FC
.text:00000000000033FC ; ---------------------------------------------------------------------------
.text:0000000000003401                 align 10h
.text:0000000000003410
.text:0000000000003410 ; =============== S U B R O U T I N E =======================================
.text:0000000000003410
.text:0000000000003410 ; Attributes: info_from_lumina
.text:0000000000003410
.text:0000000000003410 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000003410                 public hash_get_next
.text:0000000000003410 hash_get_next   proc near
.text:0000000000003410 ; __unwind {
.text:0000000000003410                 push    rbp
.text:0000000000003411                 push    rbx
.text:0000000000003412                 mov     rbp, rdi
.text:0000000000003415                 mov     rbx, rsi
.text:0000000000003418                 sub     rsp, 8
.text:000000000000341C                 call    safe_hasher
.text:0000000000003421                 mov     rdx, rax
.text:0000000000003424                 mov     rcx, rax
.text:0000000000003427                 mov     rax, [rdx]
.text:000000000000342A                 mov     rdx, [rdx+8]
.text:000000000000342E                 cmp     rax, rbx
.text:0000000000003431                 jz      short loc_3449
.text:0000000000003433                 nop     dword ptr [rax+rax+00h]
.text:0000000000003438
.text:0000000000003438 loc_3438:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000003438                 test    rdx, rdx
.text:000000000000343B                 jz      short loc_344E
.text:000000000000343D                 mov     rax, [rdx]
.text:0000000000003440                 mov     rdx, [rdx+8]
.text:0000000000003444                 cmp     rax, rbx
.text:0000000000003447                 jnz     short loc_3438
.text:0000000000003449
.text:0000000000003449 loc_3449:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000003449                 test    rdx, rdx
.text:000000000000344C                 jnz     short loc_3478
.text:000000000000344E
.text:000000000000344E loc_344E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000344E                 mov     rdx, [rbp+8]
.text:0000000000003452                 jmp     short loc_3460
.text:0000000000003452 ; ---------------------------------------------------------------------------
.text:0000000000003454                 align 8
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: hash_get_next+57↓j
.text:0000000000003458                 mov     rax, [rcx]
.text:000000000000345B                 test    rax, rax
.text:000000000000345E                 jnz     short loc_346B
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: hash_get_next+42↑j
.text:0000000000003460                 add     rcx, 10h
.text:0000000000003464                 cmp     rdx, rcx
.text:0000000000003467                 ja      short loc_3458
.text:0000000000003469                 xor     eax, eax
.text:000000000000346B
.text:000000000000346B loc_346B:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000346B                 add     rsp, 8
.text:000000000000346F                 pop     rbx
.text:0000000000003470                 pop     rbp
.text:0000000000003471                 retn
.text:0000000000003471 ; ---------------------------------------------------------------------------
.text:0000000000003472                 align 8
.text:0000000000003478
.text:0000000000003478 loc_3478:                               ; CODE XREF: hash_get_next+3C↑j
.text:0000000000003478                 mov     rax, [rdx]
.text:000000000000347B                 add     rsp, 8
.text:000000000000347F                 pop     rbx
.text:0000000000003480                 pop     rbp
.text:0000000000003481                 retn
.text:0000000000003481 ; } // starts at 3410
.text:0000000000003481 hash_get_next   endp
.text:0000000000003481
.text:0000000000003481 ; ---------------------------------------------------------------------------
.text:0000000000003482                 align 10h
.text:0000000000003490
.text:0000000000003490 ; =============== S U B R O U T I N E =======================================
.text:0000000000003490
.text:0000000000003490 ; Attributes: info_from_lumina
.text:0000000000003490
.text:0000000000003490 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000003490                 public hash_get_entries
.text:0000000000003490 hash_get_entries proc near
.text:0000000000003490 ; __unwind {
.text:0000000000003490                 mov     r9, [rdi]
.text:0000000000003493                 cmp     [rdi+8], r9
.text:0000000000003497                 jbe     short loc_34F2
.text:0000000000003499                 xor     r8d, r8d
.text:000000000000349C
.text:000000000000349C loc_349C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000349C                 mov     rcx, [r9]
.text:000000000000349F                 test    rcx, rcx
.text:00000000000034A2                 jz      short loc_34DD
.text:00000000000034A4                 cmp     rdx, r8
.text:00000000000034A7                 jbe     short loc_34E7
.text:00000000000034A9                 mov     [rsi+r8*8], rcx
.text:00000000000034AD                 mov     rcx, [r9+8]
.text:00000000000034B1                 lea     rax, [r8+1]
.text:00000000000034B5                 test    rcx, rcx
.text:00000000000034B8                 jz      short loc_34DA
.text:00000000000034BA                 nop     word ptr [rax+rax+00h]
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: hash_get_entries+48↓j
.text:00000000000034C0                 cmp     rdx, rax
.text:00000000000034C3                 jz      short locret_34F0
.text:00000000000034C5                 mov     r8, [rcx]
.text:00000000000034C8                 add     rax, 1
.text:00000000000034CC                 mov     [rsi+rax*8-8], r8
.text:00000000000034D1                 mov     rcx, [rcx+8]
.text:00000000000034D5                 test    rcx, rcx
.text:00000000000034D8                 jnz     short loc_34C0
.text:00000000000034DA
.text:00000000000034DA loc_34DA:                               ; CODE XREF: hash_get_entries+28↑j
.text:00000000000034DA                 mov     r8, rax
.text:00000000000034DD
.text:00000000000034DD loc_34DD:                               ; CODE XREF: hash_get_entries+12↑j
.text:00000000000034DD                 add     r9, 10h
.text:00000000000034E1                 cmp     [rdi+8], r9
.text:00000000000034E5                 ja      short loc_349C
.text:00000000000034E7
.text:00000000000034E7 loc_34E7:                               ; CODE XREF: hash_get_entries+17↑j
.text:00000000000034E7                 mov     rax, r8
.text:00000000000034EA                 retn
.text:00000000000034EA ; ---------------------------------------------------------------------------
.text:00000000000034EB                 align 10h
.text:00000000000034F0
.text:00000000000034F0 locret_34F0:                            ; CODE XREF: hash_get_entries+33↑j
.text:00000000000034F0                 rep retn
.text:00000000000034F2 ; ---------------------------------------------------------------------------
.text:00000000000034F2
.text:00000000000034F2 loc_34F2:                               ; CODE XREF: hash_get_entries+7↑j
.text:00000000000034F2                 xor     eax, eax
.text:00000000000034F4                 retn
.text:00000000000034F4 ; } // starts at 3490
.text:00000000000034F4 hash_get_entries endp
.text:00000000000034F4
.text:00000000000034F4 ; ---------------------------------------------------------------------------
.text:00000000000034F5                 align 20h
.text:0000000000003500
.text:0000000000003500 ; =============== S U B R O U T I N E =======================================
.text:0000000000003500
.text:0000000000003500 ; Attributes: info_from_lumina
.text:0000000000003500
.text:0000000000003500 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000003500                 public hash_do_for_each
.text:0000000000003500 hash_do_for_each proc near
.text:0000000000003500 ; __unwind {
.text:0000000000003500                 push    r15
.text:0000000000003502                 push    r14
.text:0000000000003504                 push    r13
.text:0000000000003506                 push    r12
.text:0000000000003508                 push    rbp
.text:0000000000003509                 push    rbx
.text:000000000000350A                 sub     rsp, 8
.text:000000000000350E                 mov     r14, [rdi]
.text:0000000000003511                 cmp     [rdi+8], r14
.text:0000000000003515                 jbe     short loc_3566
.text:0000000000003517                 mov     r13, rdx
.text:000000000000351A                 mov     r12, rsi
.text:000000000000351D                 mov     r15, rdi
.text:0000000000003520                 xor     ebp, ebp
.text:0000000000003522
.text:0000000000003522 loc_3522:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000003522                 mov     rdi, [r14]
.text:0000000000003525                 test    rdi, rdi
.text:0000000000003528                 jz      short loc_354A
.text:000000000000352A                 mov     rbx, r14
.text:000000000000352D                 jmp     short loc_3533
.text:000000000000352D ; ---------------------------------------------------------------------------
.text:000000000000352F                 align 10h
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000003530                 mov     rdi, [rbx]
.text:0000000000003533
.text:0000000000003533 loc_3533:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000003533                 mov     rsi, r13
.text:0000000000003536                 call    r12
.text:0000000000003539                 test    al, al
.text:000000000000353B                 jz      short loc_3554
.text:000000000000353D                 mov     rbx, [rbx+8]
.text:0000000000003541                 add     rbp, 1
.text:0000000000003545                 test    rbx, rbx
.text:0000000000003548                 jnz     short loc_3530
.text:000000000000354A
.text:000000000000354A loc_354A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000354A                 add     r14, 10h
.text:000000000000354E                 cmp     [r15+8], r14
.text:0000000000003552                 ja      short loc_3522
.text:0000000000003554
.text:0000000000003554 loc_3554:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:0000000000003554                                         ; hash_do_for_each+68↓j
.text:0000000000003554                 add     rsp, 8
.text:0000000000003558                 mov     rax, rbp
.text:000000000000355B                 pop     rbx
.text:000000000000355C                 pop     rbp
.text:000000000000355D                 pop     r12
.text:000000000000355F                 pop     r13
.text:0000000000003561                 pop     r14
.text:0000000000003563                 pop     r15
.text:0000000000003565                 retn
.text:0000000000003566 ; ---------------------------------------------------------------------------
.text:0000000000003566
.text:0000000000003566 loc_3566:                               ; CODE XREF: hash_do_for_each+15↑j
.text:0000000000003566                 xor     ebp, ebp
.text:0000000000003568                 jmp     short loc_3554
.text:0000000000003568 ; } // starts at 3500
.text:0000000000003568 hash_do_for_each endp
.text:0000000000003568
.text:0000000000003568 ; ---------------------------------------------------------------------------
.text:000000000000356A                 align 10h
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570 ; Attributes: info_from_lumina
.text:0000000000003570
.text:0000000000003570 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000003570                 public hash_string
.text:0000000000003570 hash_string     proc near
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 movzx   ecx, byte ptr [rdi]
.text:0000000000003573                 xor     edx, edx
.text:0000000000003575                 test    cl, cl
.text:0000000000003577                 jz      short loc_359D
.text:0000000000003579                 nop     dword ptr [rax+00000000h]
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000003580                 mov     rax, rdx
.text:0000000000003583                 add     rdi, 1
.text:0000000000003587                 shl     rax, 5
.text:000000000000358B                 sub     rax, rdx
.text:000000000000358E                 xor     edx, edx
.text:0000000000003590                 add     rax, rcx
.text:0000000000003593                 movzx   ecx, byte ptr [rdi]
.text:0000000000003596                 div     rsi
.text:0000000000003599                 test    cl, cl
.text:000000000000359B                 jnz     short loc_3580
.text:000000000000359D
.text:000000000000359D loc_359D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000359D                 mov     rax, rdx
.text:00000000000035A0                 retn
.text:00000000000035A0 ; } // starts at 3570
.text:00000000000035A0 hash_string     endp
.text:00000000000035A0
.text:00000000000035A0 ; ---------------------------------------------------------------------------
.text:00000000000035A1                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0 ; Attributes: info_from_lumina
.text:00000000000035B0
.text:00000000000035B0 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:00000000000035B0                 public hash_reset_tuning
.text:00000000000035B0 hash_reset_tuning proc near
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 mov     rax, 3F80000000000000h
.text:00000000000035BA                 mov     byte ptr [rdi+10h], 0
.text:00000000000035BE                 mov     [rdi], rax
.text:00000000000035C1                 mov     rax, 3FB4FDF43F4CCCCDh
.text:00000000000035CB                 mov     [rdi+8], rax
.text:00000000000035CF                 retn
.text:00000000000035CF ; } // starts at 35B0
.text:00000000000035CF hash_reset_tuning endp
.text:00000000000035CF
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0 ; Attributes: info_from_lumina
.text:00000000000035D0
.text:00000000000035D0 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:00000000000035D0                 public hash_initialize
.text:00000000000035D0 hash_initialize proc near               ; CODE XREF: canonicalize_filename_mode+502↑p
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 push    r15
.text:00000000000035D2                 push    r14
.text:00000000000035D4                 lea     rax, raw_hasher
.text:00000000000035DB                 push    r13
.text:00000000000035DD                 push    r12
.text:00000000000035DF                 mov     r12, rdx
.text:00000000000035E2                 push    rbp
.text:00000000000035E3                 push    rbx
.text:00000000000035E4                 mov     r13, rcx
.text:00000000000035E7                 mov     rbp, rdi
.text:00000000000035EA                 mov     edi, 50h ; 'P'  ; size
.text:00000000000035EF                 mov     r15, rsi
.text:00000000000035F2                 sub     rsp, 8
.text:00000000000035F6                 test    rdx, rdx
.text:00000000000035F9                 mov     r14, r8
.text:00000000000035FC                 cmovz   r12, rax
.text:0000000000003600                 lea     rax, raw_comparator
.text:0000000000003607                 test    rcx, rcx
.text:000000000000360A                 cmovz   r13, rax
.text:000000000000360E                 call    _malloc
.text:0000000000003613                 test    rax, rax
.text:0000000000003616                 mov     rbx, rax
.text:0000000000003619                 jz      loc_36CA
.text:000000000000361F                 test    r15, r15
.text:0000000000003622                 lea     rdi, [rax+28h]
.text:0000000000003626                 jz      loc_36E0
.text:000000000000362C                 mov     [rax+28h], r15
.text:0000000000003630                 call    check_tuning
.text:0000000000003635                 test    al, al
.text:0000000000003637                 jz      loc_36C0
.text:000000000000363D                 cmp     byte ptr [r15+10h], 0
.text:0000000000003642                 jz      loc_3740
.text:0000000000003648
.text:0000000000003648 loc_3648:                               ; CODE XREF: hash_initialize+16A↓j
.text:0000000000003648                                         ; hash_initialize+1A5↓j
.text:0000000000003648                 mov     rdi, rbp
.text:000000000000364B                 call    next_prime
.text:0000000000003650                 mov     edx, 8
.text:0000000000003655                 mov     rbp, rax
.text:0000000000003658                 xor     ecx, ecx
.text:000000000000365A                 mov     rax, rdx
.text:000000000000365D                 mul     rbp
.text:0000000000003660                 jo      loc_377A
.text:0000000000003666
.text:0000000000003666 loc_3666:                               ; CODE XREF: hash_initialize+1AF↓j
.text:0000000000003666                 test    rax, rax
.text:0000000000003669                 js      short loc_36C0
.text:000000000000366B                 test    rcx, rcx
.text:000000000000366E                 jnz     short loc_36C0
.text:0000000000003670                 test    rbp, rbp
.text:0000000000003673                 mov     [rbx+10h], rbp
.text:0000000000003677                 jz      short loc_36C0
.text:0000000000003679                 mov     esi, 10h        ; size
.text:000000000000367E                 mov     rdi, rbp        ; nmemb
.text:0000000000003681                 call    _calloc
.text:0000000000003686                 test    rax, rax
.text:0000000000003689                 mov     [rbx], rax
.text:000000000000368C                 jz      short loc_36C0
.text:000000000000368E                 shl     rbp, 4
.text:0000000000003692                 mov     qword ptr [rbx+18h], 0
.text:000000000000369A                 mov     qword ptr [rbx+20h], 0
.text:00000000000036A2                 add     rbp, rax
.text:00000000000036A5                 mov     [rbx+30h], r12
.text:00000000000036A9                 mov     [rbx+38h], r13
.text:00000000000036AD                 mov     [rbx+8], rbp
.text:00000000000036B1                 mov     [rbx+40h], r14
.text:00000000000036B5                 mov     qword ptr [rbx+48h], 0
.text:00000000000036BD                 jmp     short loc_36CA
.text:00000000000036BD ; ---------------------------------------------------------------------------
.text:00000000000036BF                 align 20h
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: hash_initialize+67↑j
.text:00000000000036C0                                         ; hash_initialize+99↑j ...
.text:00000000000036C0                 mov     rdi, rbx        ; ptr
.text:00000000000036C3                 xor     ebx, ebx
.text:00000000000036C5                 call    _free
.text:00000000000036CA
.text:00000000000036CA loc_36CA:                               ; CODE XREF: hash_initialize+49↑j
.text:00000000000036CA                                         ; hash_initialize+ED↑j
.text:00000000000036CA                 add     rsp, 8
.text:00000000000036CE                 mov     rax, rbx
.text:00000000000036D1                 pop     rbx
.text:00000000000036D2                 pop     rbp
.text:00000000000036D3                 pop     r12
.text:00000000000036D5                 pop     r13
.text:00000000000036D7                 pop     r14
.text:00000000000036D9                 pop     r15
.text:00000000000036DB                 retn
.text:00000000000036DB ; ---------------------------------------------------------------------------
.text:00000000000036DC                 align 20h
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: hash_initialize+56↑j
.text:00000000000036E0                 lea     rax, default_tuning
.text:00000000000036E7                 mov     [rbx+28h], rax
.text:00000000000036EB                 call    check_tuning
.text:00000000000036F0                 test    al, al
.text:00000000000036F2                 movss   xmm1, cs:dword_75A8
.text:00000000000036FA                 jz      short loc_36C0
.text:00000000000036FC                 test    rbp, rbp
.text:00000000000036FF                 js      short loc_374B
.text:0000000000003701
.text:0000000000003701 loc_3701:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000003701                 pxor    xmm0, xmm0
.text:0000000000003705                 cvtsi2ss xmm0, rbp
.text:000000000000370A
.text:000000000000370A loc_370A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000370A                 divss   xmm0, xmm1
.text:000000000000370E                 ucomiss xmm0, cs:dword_75AC
.text:0000000000003715                 jnb     short loc_36C0
.text:0000000000003717                 ucomiss xmm0, cs:dword_75B0
.text:000000000000371E                 jb      short loc_3770
.text:0000000000003720                 subss   xmm0, cs:dword_75B0
.text:0000000000003728                 mov     rax, 8000000000000000h
.text:0000000000003732                 cvttss2si rbp, xmm0
.text:0000000000003737                 xor     rbp, rax
.text:000000000000373A                 jmp     loc_3648
.text:000000000000373A ; ---------------------------------------------------------------------------
.text:000000000000373F                 align 20h
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000003740                 test    rbp, rbp
.text:0000000000003743                 movss   xmm1, dword ptr [r15+8]
.text:0000000000003749                 jns     short loc_3701
.text:000000000000374B
.text:000000000000374B loc_374B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000374B                 mov     rax, rbp
.text:000000000000374E                 pxor    xmm0, xmm0
.text:0000000000003752                 shr     rax, 1
.text:0000000000003755                 and     ebp, 1
.text:0000000000003758                 or      rax, rbp
.text:000000000000375B                 cvtsi2ss xmm0, rax
.text:0000000000003760                 addss   xmm0, xmm0
.text:0000000000003764                 jmp     short loc_370A
.text:0000000000003764 ; ---------------------------------------------------------------------------
.text:0000000000003766                 align 10h
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000003770                 cvttss2si rbp, xmm0
.text:0000000000003775                 jmp     loc_3648
.text:000000000000377A ; ---------------------------------------------------------------------------
.text:000000000000377A
.text:000000000000377A loc_377A:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000377A                 mov     ecx, 1
.text:000000000000377F                 jmp     loc_3666
.text:000000000000377F ; } // starts at 35D0
.text:000000000000377F hash_initialize endp
.text:000000000000377F
.text:000000000000377F ; ---------------------------------------------------------------------------
.text:0000000000003784                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790 ; Attributes: info_from_lumina
.text:0000000000003790
.text:0000000000003790 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000003790                 public hash_clear
.text:0000000000003790 hash_clear      proc near
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 push    r12
.text:0000000000003792                 push    rbp
.text:0000000000003793                 mov     rbp, rdi
.text:0000000000003796                 push    rbx
.text:0000000000003797                 mov     r12, [rdi]
.text:000000000000379A                 cmp     r12, [rdi+8]
.text:000000000000379E                 jnb     short loc_380B
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: hash_clear+79↓j
.text:00000000000037A0                 cmp     qword ptr [r12], 0
.text:00000000000037A5                 jz      short loc_3801
.text:00000000000037A7                 mov     rbx, [r12+8]
.text:00000000000037AC                 mov     rax, [rbp+40h]
.text:00000000000037B0                 test    rbx, rbx
.text:00000000000037B3                 jz      short loc_37E5
.text:00000000000037B5                 nop     dword ptr [rax]
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: hash_clear+53↓j
.text:00000000000037B8                 test    rax, rax
.text:00000000000037BB                 jz      short loc_37C6
.text:00000000000037BD                 mov     rdi, [rbx]
.text:00000000000037C0                 call    rax
.text:00000000000037C2                 mov     rax, [rbp+40h]
.text:00000000000037C6
.text:00000000000037C6 loc_37C6:                               ; CODE XREF: hash_clear+2B↑j
.text:00000000000037C6                 mov     rdx, [rbx+8]
.text:00000000000037CA                 mov     rcx, [rbp+48h]
.text:00000000000037CE                 mov     qword ptr [rbx], 0
.text:00000000000037D5                 test    rdx, rdx
.text:00000000000037D8                 mov     [rbx+8], rcx
.text:00000000000037DC                 mov     [rbp+48h], rbx
.text:00000000000037E0                 mov     rbx, rdx
.text:00000000000037E3                 jnz     short loc_37B8
.text:00000000000037E5
.text:00000000000037E5 loc_37E5:                               ; CODE XREF: hash_clear+23↑j
.text:00000000000037E5                 test    rax, rax
.text:00000000000037E8                 jz      short loc_37F0
.text:00000000000037EA                 mov     rdi, [r12]
.text:00000000000037EE                 call    rax
.text:00000000000037F0
.text:00000000000037F0 loc_37F0:                               ; CODE XREF: hash_clear+58↑j
.text:00000000000037F0                 mov     qword ptr [r12], 0
.text:00000000000037F8                 mov     qword ptr [r12+8], 0
.text:0000000000003801
.text:0000000000003801 loc_3801:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000003801                 add     r12, 10h
.text:0000000000003805                 cmp     [rbp+8], r12
.text:0000000000003809                 ja      short loc_37A0
.text:000000000000380B
.text:000000000000380B loc_380B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000380B                 mov     qword ptr [rbp+18h], 0
.text:0000000000003813                 mov     qword ptr [rbp+20h], 0
.text:000000000000381B                 pop     rbx
.text:000000000000381C                 pop     rbp
.text:000000000000381D                 pop     r12
.text:000000000000381F                 retn
.text:000000000000381F ; } // starts at 3790
.text:000000000000381F hash_clear      endp
.text:000000000000381F
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820 ; Attributes: info_from_lumina
.text:0000000000003820
.text:0000000000003820 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000003820                 public hash_free
.text:0000000000003820 hash_free       proc near               ; CODE XREF: canonicalize_filename_mode+219↑p
.text:0000000000003820                                         ; canonicalize_filename_mode+393↑p
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 push    r12
.text:0000000000003822                 push    rbp
.text:0000000000003823                 mov     r12, rdi
.text:0000000000003826                 push    rbx
.text:0000000000003827                 cmp     qword ptr [rdi+40h], 0
.text:000000000000382C                 mov     rbp, [rdi]
.text:000000000000382F                 mov     rax, [rdi+8]
.text:0000000000003833                 jz      short loc_3883
.text:0000000000003835                 cmp     qword ptr [rdi+20h], 0
.text:000000000000383A                 jz      short loc_3883
.text:000000000000383C                 cmp     rbp, rax
.text:000000000000383F                 jnb     short loc_38BC
.text:0000000000003841                 nop     dword ptr [rax+00000000h]
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000003848                 mov     rdi, [rbp+0]
.text:000000000000384C                 test    rdi, rdi
.text:000000000000384F                 jz      short loc_3876
.text:0000000000003851                 mov     rbx, rbp
.text:0000000000003854                 jmp     short loc_3863
.text:0000000000003854 ; ---------------------------------------------------------------------------
.text:0000000000003856                 align 20h
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: hash_free+4F↓j
.text:0000000000003860                 mov     rdi, [rbx]
.text:0000000000003863
.text:0000000000003863 loc_3863:                               ; CODE XREF: hash_free+34↑j
.text:0000000000003863                 call    qword ptr [r12+40h]
.text:0000000000003868                 mov     rbx, [rbx+8]
.text:000000000000386C                 test    rbx, rbx
.text:000000000000386F                 jnz     short loc_3860
.text:0000000000003871                 mov     rax, [r12+8]
.text:0000000000003876
.text:0000000000003876 loc_3876:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000003876                 add     rbp, 10h
.text:000000000000387A                 cmp     rax, rbp
.text:000000000000387D                 ja      short loc_3848
.text:000000000000387F                 mov     rbp, [r12]
.text:0000000000003883
.text:0000000000003883 loc_3883:                               ; CODE XREF: hash_free+13↑j
.text:0000000000003883                                         ; hash_free+1A↑j
.text:0000000000003883                 cmp     rbp, rax
.text:0000000000003886                 jnb     short loc_38BC
.text:0000000000003888                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000003890                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000003894                 test    rdi, rdi
.text:0000000000003897                 jz      short loc_38B1
.text:0000000000003899                 nop     dword ptr [rax+00000000h]
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: hash_free+8F↓j
.text:00000000000038A0                 mov     rbx, [rdi+8]
.text:00000000000038A4                 call    _free
.text:00000000000038A9                 test    rbx, rbx
.text:00000000000038AC                 mov     rdi, rbx
.text:00000000000038AF                 jnz     short loc_38A0
.text:00000000000038B1
.text:00000000000038B1 loc_38B1:                               ; CODE XREF: hash_free+77↑j
.text:00000000000038B1                 add     rbp, 10h
.text:00000000000038B5                 cmp     [r12+8], rbp
.text:00000000000038BA                 ja      short loc_3890
.text:00000000000038BC
.text:00000000000038BC loc_38BC:                               ; CODE XREF: hash_free+1F↑j
.text:00000000000038BC                                         ; hash_free+66↑j
.text:00000000000038BC                 mov     rdi, [r12+48h]  ; ptr
.text:00000000000038C1                 test    rdi, rdi
.text:00000000000038C4                 jz      short loc_38E1
.text:00000000000038C6                 db      2Eh
.text:00000000000038C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: hash_free+BF↓j
.text:00000000000038D0                 mov     rbx, [rdi+8]
.text:00000000000038D4                 call    _free
.text:00000000000038D9                 test    rbx, rbx
.text:00000000000038DC                 mov     rdi, rbx
.text:00000000000038DF                 jnz     short loc_38D0
.text:00000000000038E1
.text:00000000000038E1 loc_38E1:                               ; CODE XREF: hash_free+A4↑j
.text:00000000000038E1                 mov     rdi, [r12]      ; ptr
.text:00000000000038E5                 call    _free
.text:00000000000038EA                 pop     rbx
.text:00000000000038EB                 mov     rdi, r12        ; ptr
.text:00000000000038EE                 pop     rbp
.text:00000000000038EF                 pop     r12
.text:00000000000038F1                 jmp     _free
.text:00000000000038F1 ; } // starts at 3820
.text:00000000000038F1 hash_free       endp
.text:00000000000038F1
.text:00000000000038F1 ; ---------------------------------------------------------------------------
.text:00000000000038F6                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900 ; Attributes: info_from_lumina
.text:0000000000003900
.text:0000000000003900 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000003900                 public hash_rehash
.text:0000000000003900 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000003900                                         ; hash_delete+10F↓p
.text:0000000000003900
.text:0000000000003900 ptr             = qword ptr -78h
.text:0000000000003900 var_70          = qword ptr -70h
.text:0000000000003900 var_68          = qword ptr -68h
.text:0000000000003900 var_60          = qword ptr -60h
.text:0000000000003900 var_58          = qword ptr -58h
.text:0000000000003900 var_50          = qword ptr -50h
.text:0000000000003900 var_48          = qword ptr -48h
.text:0000000000003900 var_40          = qword ptr -40h
.text:0000000000003900 var_38          = qword ptr -38h
.text:0000000000003900 var_30          = qword ptr -30h
.text:0000000000003900 var_20          = qword ptr -20h
.text:0000000000003900
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 push    r12
.text:0000000000003902                 push    rbp
.text:0000000000003903                 mov     rbp, rdi
.text:0000000000003906                 push    rbx
.text:0000000000003907                 sub     rsp, 60h
.text:000000000000390B                 mov     r12, [rdi+28h]
.text:000000000000390F                 mov     rax, fs:28h
.text:0000000000003918                 mov     [rsp+78h+var_20], rax
.text:000000000000391D                 xor     eax, eax
.text:000000000000391F                 cmp     byte ptr [r12+10h], 0
.text:0000000000003925                 jnz     short loc_3978
.text:0000000000003927                 test    rsi, rsi
.text:000000000000392A                 js      loc_3AA8
.text:0000000000003930                 pxor    xmm0, xmm0
.text:0000000000003934                 cvtsi2ss xmm0, rsi
.text:0000000000003939
.text:0000000000003939 loc_3939:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000003939                 divss   xmm0, dword ptr [r12+8]
.text:0000000000003940                 ucomiss xmm0, cs:dword_75AC
.text:0000000000003947                 jnb     loc_3A80
.text:000000000000394D                 ucomiss xmm0, cs:dword_75B0
.text:0000000000003954                 jb      loc_3AD0
.text:000000000000395A                 subss   xmm0, cs:dword_75B0
.text:0000000000003962                 mov     rax, 8000000000000000h
.text:000000000000396C                 cvttss2si rsi, xmm0
.text:0000000000003971                 xor     rsi, rax
.text:0000000000003974                 nop     dword ptr [rax+00h]
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000003978                                         ; hash_rehash+1D5↓j
.text:0000000000003978                 mov     rdi, rsi
.text:000000000000397B                 call    next_prime
.text:0000000000003980                 mov     edx, 8
.text:0000000000003985                 mov     rbx, rax
.text:0000000000003988                 xor     ecx, ecx
.text:000000000000398A                 mov     rax, rdx
.text:000000000000398D                 mul     rbx
.text:0000000000003990                 jo      loc_3B2F
.text:0000000000003996
.text:0000000000003996 loc_3996:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000003996                 test    rax, rax
.text:0000000000003999                 mov     eax, 1
.text:000000000000399E                 cmovs   rcx, rax
.text:00000000000039A2                 test    rbx, rbx
.text:00000000000039A5                 jz      loc_3A80
.text:00000000000039AB                 and     ecx, 1
.text:00000000000039AE                 jnz     loc_3A80
.text:00000000000039B4                 cmp     [rbp+10h], rbx
.text:00000000000039B8                 jz      loc_3AE0
.text:00000000000039BE                 mov     esi, 10h        ; size
.text:00000000000039C3                 mov     rdi, rbx        ; nmemb
.text:00000000000039C6                 call    _calloc
.text:00000000000039CB                 test    rax, rax
.text:00000000000039CE                 mov     [rsp+78h+ptr], rax
.text:00000000000039D2                 jz      loc_3A80
.text:00000000000039D8                 mov     [rsp+78h+var_68], rbx
.text:00000000000039DD                 shl     rbx, 4
.text:00000000000039E1                 mov     [rsp+78h+var_50], r12
.text:00000000000039E6                 add     rbx, rax
.text:00000000000039E9                 mov     rax, [rbp+30h]
.text:00000000000039ED                 mov     r12, rsp
.text:00000000000039F0                 xor     edx, edx
.text:00000000000039F2                 mov     rsi, rbp
.text:00000000000039F5                 mov     rdi, r12
.text:00000000000039F8                 mov     [rsp+78h+var_70], rbx
.text:00000000000039FD                 mov     [rsp+78h+var_60], 0
.text:0000000000003A06                 mov     [rsp+78h+var_48], rax
.text:0000000000003A0B                 mov     rax, [rbp+38h]
.text:0000000000003A0F                 mov     [rsp+78h+var_58], 0
.text:0000000000003A18                 mov     [rsp+78h+var_40], rax
.text:0000000000003A1D                 mov     rax, [rbp+40h]
.text:0000000000003A21                 mov     [rsp+78h+var_38], rax
.text:0000000000003A26                 mov     rax, [rbp+48h]
.text:0000000000003A2A                 mov     [rsp+78h+var_30], rax
.text:0000000000003A2F                 call    transfer_entries
.text:0000000000003A34                 test    al, al
.text:0000000000003A36                 mov     ebx, eax
.text:0000000000003A38                 jnz     loc_3AF0
.text:0000000000003A3E                 mov     rax, [rsp+78h+var_30]
.text:0000000000003A43                 mov     edx, 1
.text:0000000000003A48                 mov     rsi, r12
.text:0000000000003A4B                 mov     rdi, rbp
.text:0000000000003A4E                 mov     [rbp+48h], rax
.text:0000000000003A52                 call    transfer_entries
.text:0000000000003A57                 test    al, al
.text:0000000000003A59                 jz      loc_3B39
.text:0000000000003A5F                 xor     edx, edx
.text:0000000000003A61                 mov     rsi, r12
.text:0000000000003A64                 mov     rdi, rbp
.text:0000000000003A67                 call    transfer_entries
.text:0000000000003A6C                 test    al, al
.text:0000000000003A6E                 jz      loc_3B39
.text:0000000000003A74                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000003A78                 call    _free
.text:0000000000003A7D                 jmp     short loc_3A82
.text:0000000000003A7D ; ---------------------------------------------------------------------------
.text:0000000000003A7F                 align 20h
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000003A80                                         ; hash_rehash+A5↑j ...
.text:0000000000003A80                 xor     ebx, ebx
.text:0000000000003A82
.text:0000000000003A82 loc_3A82:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000003A82                                         ; hash_rehash+1E5↓j ...
.text:0000000000003A82                 mov     rcx, [rsp+78h+var_20]
.text:0000000000003A87                 xor     rcx, fs:28h
.text:0000000000003A90                 mov     eax, ebx
.text:0000000000003A92                 jnz     loc_3B2A
.text:0000000000003A98                 add     rsp, 60h
.text:0000000000003A9C                 pop     rbx
.text:0000000000003A9D                 pop     rbp
.text:0000000000003A9E                 pop     r12
.text:0000000000003AA0                 retn
.text:0000000000003AA0 ; ---------------------------------------------------------------------------
.text:0000000000003AA1                 align 8
.text:0000000000003AA8
.text:0000000000003AA8 loc_3AA8:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000003AA8                 mov     rax, rsi
.text:0000000000003AAB                 pxor    xmm0, xmm0
.text:0000000000003AAF                 shr     rax, 1
.text:0000000000003AB2                 and     esi, 1
.text:0000000000003AB5                 or      rax, rsi
.text:0000000000003AB8                 cvtsi2ss xmm0, rax
.text:0000000000003ABD                 addss   xmm0, xmm0
.text:0000000000003AC1                 jmp     loc_3939
.text:0000000000003AC1 ; ---------------------------------------------------------------------------
.text:0000000000003AC6                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000003AD0                 cvttss2si rsi, xmm0
.text:0000000000003AD5                 jmp     loc_3978
.text:0000000000003AD5 ; ---------------------------------------------------------------------------
.text:0000000000003ADA                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000003AE0                 mov     ebx, 1
.text:0000000000003AE5                 jmp     short loc_3A82
.text:0000000000003AE5 ; ---------------------------------------------------------------------------
.text:0000000000003AE7                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000003AF0                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000003AF4                 call    _free
.text:0000000000003AF9                 mov     rax, [rsp+78h+ptr]
.text:0000000000003AFD                 mov     [rbp+0], rax
.text:0000000000003B01                 mov     rax, [rsp+78h+var_70]
.text:0000000000003B06                 mov     [rbp+8], rax
.text:0000000000003B0A                 mov     rax, [rsp+78h+var_68]
.text:0000000000003B0F                 mov     [rbp+10h], rax
.text:0000000000003B13                 mov     rax, [rsp+78h+var_60]
.text:0000000000003B18                 mov     [rbp+18h], rax
.text:0000000000003B1C                 mov     rax, [rsp+78h+var_30]
.text:0000000000003B21                 mov     [rbp+48h], rax
.text:0000000000003B25                 jmp     loc_3A82
.text:0000000000003B2A ; ---------------------------------------------------------------------------
.text:0000000000003B2A
.text:0000000000003B2A loc_3B2A:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000003B2A                 call    ___stack_chk_fail
.text:0000000000003B2F ; ---------------------------------------------------------------------------
.text:0000000000003B2F
.text:0000000000003B2F loc_3B2F:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000003B2F                 mov     ecx, 1
.text:0000000000003B34                 jmp     loc_3996
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B39
.text:0000000000003B39 loc_3B39:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000003B39                                         ; hash_rehash+16E↑j
.text:0000000000003B39                 call    _abort
.text:0000000000003B39 ; } // starts at 3900
.text:0000000000003B39 hash_rehash     endp
.text:0000000000003B39
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B3E                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40 ; Attributes: info_from_lumina
.text:0000000000003B40
.text:0000000000003B40 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000003B40                 public hash_insert_if_absent
.text:0000000000003B40 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000003B40
.text:0000000000003B40 var_38          = qword ptr -38h
.text:0000000000003B40 var_30          = qword ptr -30h
.text:0000000000003B40
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 push    r13
.text:0000000000003B42                 push    r12
.text:0000000000003B44                 push    rbp
.text:0000000000003B45                 push    rbx
.text:0000000000003B46                 sub     rsp, 18h
.text:0000000000003B4A                 mov     rax, fs:28h
.text:0000000000003B53                 mov     [rsp+38h+var_30], rax
.text:0000000000003B58                 xor     eax, eax
.text:0000000000003B5A                 test    rsi, rsi
.text:0000000000003B5D                 jz      loc_3D1D
.text:0000000000003B63                 mov     r12, rsp
.text:0000000000003B66                 xor     ecx, ecx
.text:0000000000003B68                 mov     r13, rdx
.text:0000000000003B6B                 mov     rdx, r12
.text:0000000000003B6E                 mov     rbx, rdi
.text:0000000000003B71                 mov     rbp, rsi
.text:0000000000003B74                 call    hash_find_entry
.text:0000000000003B79                 test    rax, rax
.text:0000000000003B7C                 mov     rdx, rax
.text:0000000000003B7F                 jz      short loc_3BB0
.text:0000000000003B81                 xor     eax, eax
.text:0000000000003B83                 test    r13, r13
.text:0000000000003B86                 jz      short loc_3B8C
.text:0000000000003B88                 mov     [r13+0], rdx
.text:0000000000003B8C
.text:0000000000003B8C loc_3B8C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000003B8C                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000003B8C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000003B91                 xor     rcx, fs:28h
.text:0000000000003B9A                 jnz     loc_3DBF
.text:0000000000003BA0                 add     rsp, 18h
.text:0000000000003BA4                 pop     rbx
.text:0000000000003BA5                 pop     rbp
.text:0000000000003BA6                 pop     r12
.text:0000000000003BA8                 pop     r13
.text:0000000000003BAA                 retn
.text:0000000000003BAA ; ---------------------------------------------------------------------------
.text:0000000000003BAB                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000003BB0                 mov     rax, [rbx+18h]
.text:0000000000003BB4                 test    rax, rax
.text:0000000000003BB7                 js      short loc_3C30
.text:0000000000003BB9                 pxor    xmm1, xmm1
.text:0000000000003BBD                 mov     rdx, [rbx+28h]
.text:0000000000003BC1                 cvtsi2ss xmm1, rax
.text:0000000000003BC6                 mov     rax, [rbx+10h]
.text:0000000000003BCA                 test    rax, rax
.text:0000000000003BCD                 js      loc_3C5A
.text:0000000000003BD3
.text:0000000000003BD3 loc_3BD3:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000003BD3                 pxor    xmm0, xmm0
.text:0000000000003BD7                 cvtsi2ss xmm0, rax
.text:0000000000003BDC
.text:0000000000003BDC loc_3BDC:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000003BDC                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000003BE1                 ucomiss xmm1, xmm0
.text:0000000000003BE4                 ja      loc_3C80
.text:0000000000003BEA
.text:0000000000003BEA loc_3BEA:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000003BEA                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000003BEA                 mov     r12, [rsp+38h+var_38]
.text:0000000000003BEE                 cmp     qword ptr [r12], 0
.text:0000000000003BF3                 jz      loc_3D28
.text:0000000000003BF9                 mov     rax, [rbx+48h]
.text:0000000000003BFD                 test    rax, rax
.text:0000000000003C00                 jz      loc_3D40
.text:0000000000003C06                 mov     rdx, [rax+8]
.text:0000000000003C0A                 mov     [rbx+48h], rdx
.text:0000000000003C0E
.text:0000000000003C0E loc_3C0E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000003C0E                 mov     rdx, [r12+8]
.text:0000000000003C13                 mov     [rax], rbp
.text:0000000000003C16                 mov     [rax+8], rdx
.text:0000000000003C1A                 mov     [r12+8], rax
.text:0000000000003C1F                 mov     eax, 1
.text:0000000000003C24                 add     qword ptr [rbx+20h], 1
.text:0000000000003C29                 jmp     loc_3B8C
.text:0000000000003C29 ; ---------------------------------------------------------------------------
.text:0000000000003C2E                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000003C30                 mov     rdx, rax
.text:0000000000003C33                 pxor    xmm1, xmm1
.text:0000000000003C37                 and     eax, 1
.text:0000000000003C3A                 shr     rdx, 1
.text:0000000000003C3D                 or      rdx, rax
.text:0000000000003C40                 mov     rax, [rbx+10h]
.text:0000000000003C44                 cvtsi2ss xmm1, rdx
.text:0000000000003C49                 mov     rdx, [rbx+28h]
.text:0000000000003C4D                 test    rax, rax
.text:0000000000003C50                 addss   xmm1, xmm1
.text:0000000000003C54                 jns     loc_3BD3
.text:0000000000003C5A
.text:0000000000003C5A loc_3C5A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000003C5A                 mov     rcx, rax
.text:0000000000003C5D                 pxor    xmm0, xmm0
.text:0000000000003C61                 shr     rcx, 1
.text:0000000000003C64                 and     eax, 1
.text:0000000000003C67                 or      rcx, rax
.text:0000000000003C6A                 cvtsi2ss xmm0, rcx
.text:0000000000003C6F                 addss   xmm0, xmm0
.text:0000000000003C73                 jmp     loc_3BDC
.text:0000000000003C73 ; ---------------------------------------------------------------------------
.text:0000000000003C78                 align 20h
.text:0000000000003C80
.text:0000000000003C80 loc_3C80:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000003C80                 lea     rdi, [rbx+28h]
.text:0000000000003C84                 call    check_tuning
.text:0000000000003C89                 mov     rax, [rbx+10h]
.text:0000000000003C8D                 mov     rdx, [rbx+28h]
.text:0000000000003C91                 test    rax, rax
.text:0000000000003C94                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000003C99                 js      loc_3D60
.text:0000000000003C9F                 pxor    xmm0, xmm0
.text:0000000000003CA3                 cvtsi2ss xmm0, rax
.text:0000000000003CA8
.text:0000000000003CA8 loc_3CA8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000003CA8                 mov     rax, [rbx+18h]
.text:0000000000003CAC                 test    rax, rax
.text:0000000000003CAF                 js      loc_3D80
.text:0000000000003CB5                 pxor    xmm1, xmm1
.text:0000000000003CB9                 cvtsi2ss xmm1, rax
.text:0000000000003CBE
.text:0000000000003CBE loc_3CBE:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000003CBE                 movaps  xmm3, xmm2
.text:0000000000003CC1                 mulss   xmm3, xmm0
.text:0000000000003CC5                 ucomiss xmm1, xmm3
.text:0000000000003CC8                 jbe     loc_3BEA
.text:0000000000003CCE                 cmp     byte ptr [rdx+10h], 0
.text:0000000000003CD2                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000003CD7                 jnz     short loc_3CDD
.text:0000000000003CD9                 mulss   xmm0, xmm2
.text:0000000000003CDD
.text:0000000000003CDD loc_3CDD:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000003CDD                 ucomiss xmm0, cs:dword_75AC
.text:0000000000003CE4                 jnb     short loc_3D53
.text:0000000000003CE6                 ucomiss xmm0, cs:dword_75B0
.text:0000000000003CED                 jnb     loc_3DA0
.text:0000000000003CF3                 cvttss2si rsi, xmm0
.text:0000000000003CF8
.text:0000000000003CF8 loc_3CF8:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000003CF8                 mov     rdi, rbx
.text:0000000000003CFB                 call    hash_rehash
.text:0000000000003D00                 test    al, al
.text:0000000000003D02                 jz      short loc_3D53
.text:0000000000003D04                 xor     ecx, ecx
.text:0000000000003D06                 mov     rdx, r12
.text:0000000000003D09                 mov     rsi, rbp
.text:0000000000003D0C                 mov     rdi, rbx
.text:0000000000003D0F                 call    hash_find_entry
.text:0000000000003D14                 test    rax, rax
.text:0000000000003D17                 jz      loc_3BEA
.text:0000000000003D1D
.text:0000000000003D1D loc_3D1D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:0000000000003D1D                 call    _abort
.text:0000000000003D1D ; ---------------------------------------------------------------------------
.text:0000000000003D22                 align 8
.text:0000000000003D28
.text:0000000000003D28 loc_3D28:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000003D28                 mov     [r12], rbp
.text:0000000000003D2C                 mov     eax, 1
.text:0000000000003D31                 add     qword ptr [rbx+20h], 1
.text:0000000000003D36                 add     qword ptr [rbx+18h], 1
.text:0000000000003D3B                 jmp     loc_3B8C
.text:0000000000003D40 ; ---------------------------------------------------------------------------
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000003D40                 mov     edi, 10h        ; size
.text:0000000000003D45                 call    _malloc
.text:0000000000003D4A                 test    rax, rax
.text:0000000000003D4D                 jnz     loc_3C0E
.text:0000000000003D53
.text:0000000000003D53 loc_3D53:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000003D53                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000003D53                 mov     eax, 0FFFFFFFFh
.text:0000000000003D58                 jmp     loc_3B8C
.text:0000000000003D58 ; ---------------------------------------------------------------------------
.text:0000000000003D5D                 align 20h
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:0000000000003D60                 mov     rcx, rax
.text:0000000000003D63                 pxor    xmm0, xmm0
.text:0000000000003D67                 shr     rcx, 1
.text:0000000000003D6A                 and     eax, 1
.text:0000000000003D6D                 or      rcx, rax
.text:0000000000003D70                 cvtsi2ss xmm0, rcx
.text:0000000000003D75                 addss   xmm0, xmm0
.text:0000000000003D79                 jmp     loc_3CA8
.text:0000000000003D79 ; ---------------------------------------------------------------------------
.text:0000000000003D7E                 align 20h
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000003D80                 mov     rcx, rax
.text:0000000000003D83                 pxor    xmm1, xmm1
.text:0000000000003D87                 shr     rcx, 1
.text:0000000000003D8A                 and     eax, 1
.text:0000000000003D8D                 or      rcx, rax
.text:0000000000003D90                 cvtsi2ss xmm1, rcx
.text:0000000000003D95                 addss   xmm1, xmm1
.text:0000000000003D99                 jmp     loc_3CBE
.text:0000000000003D99 ; ---------------------------------------------------------------------------
.text:0000000000003D9E                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000003DA0                 subss   xmm0, cs:dword_75B0
.text:0000000000003DA8                 mov     rax, 8000000000000000h
.text:0000000000003DB2                 cvttss2si rsi, xmm0
.text:0000000000003DB7                 xor     rsi, rax
.text:0000000000003DBA                 jmp     loc_3CF8
.text:0000000000003DBF ; ---------------------------------------------------------------------------
.text:0000000000003DBF
.text:0000000000003DBF loc_3DBF:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:0000000000003DBF                 call    ___stack_chk_fail
.text:0000000000003DBF ; } // starts at 3B40
.text:0000000000003DBF hash_insert_if_absent endp
.text:0000000000003DBF
.text:0000000000003DBF ; ---------------------------------------------------------------------------
.text:0000000000003DC4                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DD0
.text:0000000000003DD0 ; Attributes: info_from_lumina
.text:0000000000003DD0
.text:0000000000003DD0 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000003DD0                 public hash_insert
.text:0000000000003DD0 hash_insert     proc near               ; CODE XREF: record_file+46↑p
.text:0000000000003DD0
.text:0000000000003DD0 var_18          = qword ptr -18h
.text:0000000000003DD0 var_10          = qword ptr -10h
.text:0000000000003DD0
.text:0000000000003DD0 ; __unwind {
.text:0000000000003DD0                 push    rbx
.text:0000000000003DD1                 mov     rbx, rsi
.text:0000000000003DD4                 sub     rsp, 10h
.text:0000000000003DD8                 mov     rdx, rsp
.text:0000000000003DDB                 mov     rax, fs:28h
.text:0000000000003DE4                 mov     [rsp+18h+var_10], rax
.text:0000000000003DE9                 xor     eax, eax
.text:0000000000003DEB                 call    hash_insert_if_absent
.text:0000000000003DF0                 cmp     eax, 0FFFFFFFFh
.text:0000000000003DF3                 jz      short loc_3E20
.text:0000000000003DF5                 test    eax, eax
.text:0000000000003DF7                 jnz     short loc_3DFD
.text:0000000000003DF9                 mov     rbx, [rsp+18h+var_18]
.text:0000000000003DFD
.text:0000000000003DFD loc_3DFD:                               ; CODE XREF: hash_insert+27↑j
.text:0000000000003DFD                                         ; hash_insert+52↓j
.text:0000000000003DFD                 mov     rcx, [rsp+18h+var_10]
.text:0000000000003E02                 xor     rcx, fs:28h
.text:0000000000003E0B                 mov     rax, rbx
.text:0000000000003E0E                 jnz     short loc_3E24
.text:0000000000003E10                 add     rsp, 10h
.text:0000000000003E14                 pop     rbx
.text:0000000000003E15                 retn
.text:0000000000003E15 ; ---------------------------------------------------------------------------
.text:0000000000003E16                 align 20h
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000003E20                 xor     ebx, ebx
.text:0000000000003E22                 jmp     short loc_3DFD
.text:0000000000003E24 ; ---------------------------------------------------------------------------
.text:0000000000003E24
.text:0000000000003E24 loc_3E24:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000003E24                 call    ___stack_chk_fail
.text:0000000000003E24 ; } // starts at 3DD0
.text:0000000000003E24 hash_insert     endp
.text:0000000000003E24
.text:0000000000003E24 ; ---------------------------------------------------------------------------
.text:0000000000003E29                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30 ; Attributes: info_from_lumina
.text:0000000000003E30
.text:0000000000003E30 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000003E30                 public hash_delete
.text:0000000000003E30 hash_delete     proc near
.text:0000000000003E30
.text:0000000000003E30 var_28          = qword ptr -28h
.text:0000000000003E30 var_20          = qword ptr -20h
.text:0000000000003E30
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 push    r12
.text:0000000000003E32                 push    rbp
.text:0000000000003E33                 mov     ecx, 1
.text:0000000000003E38                 push    rbx
.text:0000000000003E39                 mov     rbx, rdi
.text:0000000000003E3C                 sub     rsp, 10h
.text:0000000000003E40                 mov     rdx, rsp
.text:0000000000003E43                 mov     rax, fs:28h
.text:0000000000003E4C                 mov     [rsp+28h+var_20], rax
.text:0000000000003E51                 xor     eax, eax
.text:0000000000003E53                 call    hash_find_entry
.text:0000000000003E58                 test    rax, rax
.text:0000000000003E5B                 mov     rbp, rax
.text:0000000000003E5E                 jz      short loc_3E6F
.text:0000000000003E60                 mov     rax, [rsp+28h+var_28]
.text:0000000000003E64                 sub     qword ptr [rbx+20h], 1
.text:0000000000003E69                 cmp     qword ptr [rax], 0
.text:0000000000003E6D                 jz      short loc_3E90
.text:0000000000003E6F
.text:0000000000003E6F loc_3E6F:                               ; CODE XREF: hash_delete+2E↑j
.text:0000000000003E6F                                         ; hash_delete+9F↓j ...
.text:0000000000003E6F                 mov     rcx, [rsp+28h+var_20]
.text:0000000000003E74                 xor     rcx, fs:28h
.text:0000000000003E7D                 mov     rax, rbp
.text:0000000000003E80                 jnz     loc_402E
.text:0000000000003E86                 add     rsp, 10h
.text:0000000000003E8A                 pop     rbx
.text:0000000000003E8B                 pop     rbp
.text:0000000000003E8C                 pop     r12
.text:0000000000003E8E                 retn
.text:0000000000003E8E ; ---------------------------------------------------------------------------
.text:0000000000003E8F                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000003E90                 mov     rax, [rbx+18h]
.text:0000000000003E94                 sub     rax, 1
.text:0000000000003E98                 test    rax, rax
.text:0000000000003E9B                 mov     [rbx+18h], rax
.text:0000000000003E9F                 js      loc_3FA0
.text:0000000000003EA5                 pxor    xmm0, xmm0
.text:0000000000003EA9                 cvtsi2ss xmm0, rax
.text:0000000000003EAE
.text:0000000000003EAE loc_3EAE:                               ; CODE XREF: hash_delete+189↓j
.text:0000000000003EAE                 mov     rax, [rbx+10h]
.text:0000000000003EB2                 mov     rdx, [rbx+28h]
.text:0000000000003EB6                 test    rax, rax
.text:0000000000003EB9                 js      loc_3F80
.text:0000000000003EBF                 pxor    xmm1, xmm1
.text:0000000000003EC3                 cvtsi2ss xmm1, rax
.text:0000000000003EC8
.text:0000000000003EC8 loc_3EC8:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000003EC8                 mulss   xmm1, dword ptr [rdx]
.text:0000000000003ECC                 ucomiss xmm1, xmm0
.text:0000000000003ECF                 jbe     short loc_3E6F
.text:0000000000003ED1                 lea     rdi, [rbx+28h]
.text:0000000000003ED5                 call    check_tuning
.text:0000000000003EDA                 mov     rax, [rbx+10h]
.text:0000000000003EDE                 mov     rdx, [rbx+28h]
.text:0000000000003EE2                 test    rax, rax
.text:0000000000003EE5                 js      loc_4010
.text:0000000000003EEB                 pxor    xmm0, xmm0
.text:0000000000003EEF                 cvtsi2ss xmm0, rax
.text:0000000000003EF4
.text:0000000000003EF4 loc_3EF4:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000003EF4                 mov     rax, [rbx+18h]
.text:0000000000003EF8                 test    rax, rax
.text:0000000000003EFB                 js      loc_3FF0
.text:0000000000003F01                 pxor    xmm1, xmm1
.text:0000000000003F05                 cvtsi2ss xmm1, rax
.text:0000000000003F0A
.text:0000000000003F0A loc_3F0A:                               ; CODE XREF: hash_delete+1D9↓j
.text:0000000000003F0A                 movss   xmm2, dword ptr [rdx]
.text:0000000000003F0E                 mulss   xmm2, xmm0
.text:0000000000003F12                 ucomiss xmm2, xmm1
.text:0000000000003F15                 jbe     loc_3E6F
.text:0000000000003F1B                 cmp     byte ptr [rdx+10h], 0
.text:0000000000003F1F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000003F24                 jz      loc_3FE0
.text:0000000000003F2A
.text:0000000000003F2A loc_3F2A:                               ; CODE XREF: hash_delete+1B5↓j
.text:0000000000003F2A                 ucomiss xmm0, cs:dword_75B0
.text:0000000000003F31                 jnb     loc_3FC0
.text:0000000000003F37                 cvttss2si rsi, xmm0
.text:0000000000003F3C
.text:0000000000003F3C loc_3F3C:                               ; CODE XREF: hash_delete+1AA↓j
.text:0000000000003F3C                 mov     rdi, rbx
.text:0000000000003F3F                 call    hash_rehash
.text:0000000000003F44                 test    al, al
.text:0000000000003F46                 jnz     loc_3E6F
.text:0000000000003F4C                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000003F50                 test    rdi, rdi
.text:0000000000003F53                 jz      short loc_3F69
.text:0000000000003F55                 nop     dword ptr [rax]
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000003F58                 mov     r12, [rdi+8]
.text:0000000000003F5C                 call    _free
.text:0000000000003F61                 test    r12, r12
.text:0000000000003F64                 mov     rdi, r12
.text:0000000000003F67                 jnz     short loc_3F58
.text:0000000000003F69
.text:0000000000003F69 loc_3F69:                               ; CODE XREF: hash_delete+123↑j
.text:0000000000003F69                 mov     qword ptr [rbx+48h], 0
.text:0000000000003F71                 jmp     loc_3E6F
.text:0000000000003F71 ; ---------------------------------------------------------------------------
.text:0000000000003F76                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000003F80                 mov     rcx, rax
.text:0000000000003F83                 pxor    xmm1, xmm1
.text:0000000000003F87                 shr     rcx, 1
.text:0000000000003F8A                 and     eax, 1
.text:0000000000003F8D                 or      rcx, rax
.text:0000000000003F90                 cvtsi2ss xmm1, rcx
.text:0000000000003F95                 addss   xmm1, xmm1
.text:0000000000003F99                 jmp     loc_3EC8
.text:0000000000003F99 ; ---------------------------------------------------------------------------
.text:0000000000003F9E                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000003FA0                 mov     rdx, rax
.text:0000000000003FA3                 pxor    xmm0, xmm0
.text:0000000000003FA7                 shr     rdx, 1
.text:0000000000003FAA                 and     eax, 1
.text:0000000000003FAD                 or      rdx, rax
.text:0000000000003FB0                 cvtsi2ss xmm0, rdx
.text:0000000000003FB5                 addss   xmm0, xmm0
.text:0000000000003FB9                 jmp     loc_3EAE
.text:0000000000003FB9 ; ---------------------------------------------------------------------------
.text:0000000000003FBE                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000003FC0                 subss   xmm0, cs:dword_75B0
.text:0000000000003FC8                 mov     rax, 8000000000000000h
.text:0000000000003FD2                 cvttss2si rsi, xmm0
.text:0000000000003FD7                 xor     rsi, rax
.text:0000000000003FDA                 jmp     loc_3F3C
.text:0000000000003FDA ; ---------------------------------------------------------------------------
.text:0000000000003FDF                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000003FE0                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000003FE5                 jmp     loc_3F2A
.text:0000000000003FE5 ; ---------------------------------------------------------------------------
.text:0000000000003FEA                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000003FF0                 mov     rcx, rax
.text:0000000000003FF3                 pxor    xmm1, xmm1
.text:0000000000003FF7                 shr     rcx, 1
.text:0000000000003FFA                 and     eax, 1
.text:0000000000003FFD                 or      rcx, rax
.text:0000000000004000                 cvtsi2ss xmm1, rcx
.text:0000000000004005                 addss   xmm1, xmm1
.text:0000000000004009                 jmp     loc_3F0A
.text:0000000000004009 ; ---------------------------------------------------------------------------
.text:000000000000400E                 align 10h
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000004010                 mov     rcx, rax
.text:0000000000004013                 pxor    xmm0, xmm0
.text:0000000000004017                 shr     rcx, 1
.text:000000000000401A                 and     eax, 1
.text:000000000000401D                 or      rcx, rax
.text:0000000000004020                 cvtsi2ss xmm0, rcx
.text:0000000000004025                 addss   xmm0, xmm0
.text:0000000000004029                 jmp     loc_3EF4
.text:000000000000402E ; ---------------------------------------------------------------------------
.text:000000000000402E
.text:000000000000402E loc_402E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000402E                 call    ___stack_chk_fail
.text:000000000000402E ; } // starts at 3E30
.text:000000000000402E hash_delete     endp
.text:000000000000402E
.text:000000000000402E ; ---------------------------------------------------------------------------
.text:0000000000004033                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040 ; Attributes: info_from_lumina
.text:0000000000004040
.text:0000000000004040 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:0000000000004040                 public triple_hash
.text:0000000000004040 triple_hash     proc near               ; DATA XREF: canonicalize_filename_mode+4F6↑o
.text:0000000000004040 ; __unwind {
.text:0000000000004040                 push    rbp
.text:0000000000004041                 push    rbx
.text:0000000000004042                 mov     rbp, rdi
.text:0000000000004045                 mov     rbx, rsi
.text:0000000000004048                 sub     rsp, 8
.text:000000000000404C                 mov     rdi, [rdi]
.text:000000000000404F                 call    hash_pjw
.text:0000000000004054                 xor     rax, [rbp+8]
.text:0000000000004058                 xor     edx, edx
.text:000000000000405A                 add     rsp, 8
.text:000000000000405E                 div     rbx
.text:0000000000004061                 pop     rbx
.text:0000000000004062                 pop     rbp
.text:0000000000004063                 mov     rax, rdx
.text:0000000000004066                 retn
.text:0000000000004066 ; } // starts at 4040
.text:0000000000004066 triple_hash     endp
.text:0000000000004066
.text:0000000000004066 ; ---------------------------------------------------------------------------
.text:0000000000004067                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public triple_hash_no_name
.text:0000000000004070 triple_hash_no_name proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 mov     rax, [rdi+8]
.text:0000000000004074                 xor     edx, edx
.text:0000000000004076                 div     rsi
.text:0000000000004079                 mov     rax, rdx
.text:000000000000407C                 retn
.text:000000000000407C ; } // starts at 4070
.text:000000000000407C triple_hash_no_name endp
.text:000000000000407C
.text:000000000000407C ; ---------------------------------------------------------------------------
.text:000000000000407D                 align 20h
.text:0000000000004080
.text:0000000000004080 ; =============== S U B R O U T I N E =======================================
.text:0000000000004080
.text:0000000000004080 ; Attributes: info_from_lumina
.text:0000000000004080
.text:0000000000004080 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:0000000000004080                 public triple_compare
.text:0000000000004080 triple_compare  proc near
.text:0000000000004080 ; __unwind {
.text:0000000000004080                 xor     eax, eax
.text:0000000000004082                 mov     rdx, [rsi+8]
.text:0000000000004086                 cmp     [rdi+8], rdx
.text:000000000000408A                 jz      short loc_4090
.text:000000000000408C
.text:000000000000408C locret_408C:                            ; CODE XREF: triple_compare+18↓j
.text:000000000000408C                 rep retn
.text:000000000000408C ; ---------------------------------------------------------------------------
.text:000000000000408E                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: triple_compare+A↑j
.text:0000000000004090                 mov     rcx, [rsi+10h]
.text:0000000000004094                 cmp     [rdi+10h], rcx
.text:0000000000004098                 jnz     short locret_408C
.text:000000000000409A                 sub     rsp, 8
.text:000000000000409E                 mov     rsi, [rsi]
.text:00000000000040A1                 mov     rdi, [rdi]
.text:00000000000040A4                 call    same_name
.text:00000000000040A9                 add     rsp, 8
.text:00000000000040AD                 retn
.text:00000000000040AD ; } // starts at 4080
.text:00000000000040AD triple_compare  endp
.text:00000000000040AD
.text:00000000000040AD ; ---------------------------------------------------------------------------
.text:00000000000040AE                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0 ; Attributes: info_from_lumina
.text:00000000000040B0
.text:00000000000040B0 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:00000000000040B0                 public triple_compare_ino_str
.text:00000000000040B0 triple_compare_ino_str proc near        ; DATA XREF: canonicalize_filename_mode+4ED↑o
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 xor     eax, eax
.text:00000000000040B2                 mov     rdx, [rsi+8]
.text:00000000000040B6                 cmp     [rdi+8], rdx
.text:00000000000040BA                 jz      short loc_40C0
.text:00000000000040BC
.text:00000000000040BC locret_40BC:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:00000000000040BC                 rep retn
.text:00000000000040BC ; ---------------------------------------------------------------------------
.text:00000000000040BE                 align 20h
.text:00000000000040C0
.text:00000000000040C0 loc_40C0:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:00000000000040C0                 mov     rcx, [rsi+10h]
.text:00000000000040C4                 cmp     [rdi+10h], rcx
.text:00000000000040C8                 jnz     short locret_40BC
.text:00000000000040CA                 sub     rsp, 8
.text:00000000000040CE                 mov     rsi, [rsi]      ; s2
.text:00000000000040D1                 mov     rdi, [rdi]      ; s1
.text:00000000000040D4                 call    _strcmp
.text:00000000000040D9                 test    eax, eax
.text:00000000000040DB                 setz    al
.text:00000000000040DE                 add     rsp, 8
.text:00000000000040E2                 retn
.text:00000000000040E2 ; } // starts at 40B0
.text:00000000000040E2 triple_compare_ino_str endp
.text:00000000000040E2
.text:00000000000040E2 ; ---------------------------------------------------------------------------
.text:00000000000040E3                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0
.text:00000000000040F0 ; __int64 __fastcall triple_free(void *ptr)
.text:00000000000040F0                 public triple_free
.text:00000000000040F0 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:00000000000040F0                                         ; DATA XREF: canonicalize_filename_mode:loc_2A46↑o
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    rbx
.text:00000000000040F1                 mov     rbx, rdi
.text:00000000000040F4                 mov     rdi, [rdi]      ; ptr
.text:00000000000040F7                 call    _free
.text:00000000000040FC                 mov     rdi, rbx        ; ptr
.text:00000000000040FF                 pop     rbx
.text:0000000000004100                 jmp     _free
.text:0000000000004100 ; } // starts at 40F0
.text:0000000000004100 triple_free     endp
.text:0000000000004100
.text:0000000000004100 ; ---------------------------------------------------------------------------
.text:0000000000004105                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110
.text:0000000000004110                 public set_program_name
.text:0000000000004110 set_program_name proc near              ; CODE XREF: main+29↑p
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 test    rdi, rdi
.text:0000000000004113                 push    rbx
.text:0000000000004114                 jz      short loc_418D
.text:0000000000004116                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000411B                 mov     rbx, rdi
.text:000000000000411E                 call    _strrchr
.text:0000000000004123                 test    rax, rax
.text:0000000000004126                 jz      short loc_417D
.text:0000000000004128                 lea     r8, [rax+1]
.text:000000000000412C                 mov     rdx, r8
.text:000000000000412F                 sub     rdx, rbx
.text:0000000000004132                 cmp     rdx, 6
.text:0000000000004136                 jle     short loc_417D
.text:0000000000004138                 lea     rsi, [rax-6]
.text:000000000000413C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000004143                 mov     ecx, 7
.text:0000000000004148                 repe cmpsb
.text:000000000000414A                 setnbe  dl
.text:000000000000414D                 sbb     dl, 0
.text:0000000000004150                 test    dl, dl
.text:0000000000004152                 jnz     short loc_417D
.text:0000000000004154                 lea     rdi, aLt        ; "lt-"
.text:000000000000415B                 mov     ecx, 3
.text:0000000000004160                 mov     rsi, r8
.text:0000000000004163                 mov     rbx, r8
.text:0000000000004166                 repe cmpsb
.text:0000000000004168                 setnbe  dl
.text:000000000000416B                 sbb     dl, 0
.text:000000000000416E                 test    dl, dl
.text:0000000000004170                 jnz     short loc_417D
.text:0000000000004172                 lea     rbx, [rax+4]
.text:0000000000004176                 mov     cs:__bss_start, rbx
.text:000000000000417D
.text:000000000000417D loc_417D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000417D                                         ; set_program_name+26↑j ...
.text:000000000000417D                 mov     cs:program_name, rbx
.text:0000000000004184                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000418B                 pop     rbx
.text:000000000000418C                 retn
.text:000000000000418D ; ---------------------------------------------------------------------------
.text:000000000000418D
.text:000000000000418D loc_418D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000418D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004194                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000419B                 mov     edx, 37h ; '7'  ; n
.text:00000000000041A0                 mov     esi, 1          ; size
.text:00000000000041A5                 call    _fwrite
.text:00000000000041AA                 call    _abort
.text:00000000000041AA ; } // starts at 4110
.text:00000000000041AA set_program_name endp
.text:00000000000041AA
.text:00000000000041AA ; ---------------------------------------------------------------------------
.text:00000000000041AF                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0 ; Attributes: info_from_lumina
.text:00000000000041B0
.text:00000000000041B0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000041B0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000041B0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 push    rbp
.text:00000000000041B1                 push    rbx
.text:00000000000041B2                 mov     rbp, rdi
.text:00000000000041B5                 mov     ebx, esi
.text:00000000000041B7                 sub     rsp, 8
.text:00000000000041BB                 call    locale_charset
.text:00000000000041C0                 movzx   edx, byte ptr [rax]
.text:00000000000041C3                 and     edx, 0FFFFFFDFh
.text:00000000000041C6                 cmp     dl, 55h ; 'U'
.text:00000000000041C9                 jz      short loc_4240
.text:00000000000041CB                 cmp     dl, 47h ; 'G'
.text:00000000000041CE                 jz      short loc_41F0
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000041D0                                         ; gettext_quote+50↓j ...
.text:00000000000041D0                 lea     rax, unk_7613
.text:00000000000041D7                 lea     rdx, asc_7615   ; "'"
.text:00000000000041DE                 cmp     ebx, 9
.text:00000000000041E1                 cmovnz  rax, rdx
.text:00000000000041E5                 add     rsp, 8
.text:00000000000041E9                 pop     rbx
.text:00000000000041EA                 pop     rbp
.text:00000000000041EB                 retn
.text:00000000000041EB ; ---------------------------------------------------------------------------
.text:00000000000041EC                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000041F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000041F4                 and     edx, 0FFFFFFDFh
.text:00000000000041F7                 cmp     dl, 42h ; 'B'
.text:00000000000041FA                 jnz     short loc_41D0
.text:00000000000041FC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004200                 jnz     short loc_41D0
.text:0000000000004202                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004206                 jnz     short loc_41D0
.text:0000000000004208                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000420C                 jnz     short loc_41D0
.text:000000000000420E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004212                 jnz     short loc_41D0
.text:0000000000004214                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004218                 jnz     short loc_41D0
.text:000000000000421A                 cmp     byte ptr [rax+7], 0
.text:000000000000421E                 jnz     short loc_41D0
.text:0000000000004220                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004224                 lea     rax, unk_760C
.text:000000000000422B                 lea     rdx, unk_7610
.text:0000000000004232                 cmovnz  rax, rdx
.text:0000000000004236                 add     rsp, 8
.text:000000000000423A                 pop     rbx
.text:000000000000423B                 pop     rbp
.text:000000000000423C                 retn
.text:000000000000423C ; ---------------------------------------------------------------------------
.text:000000000000423D                 align 20h
.text:0000000000004240
.text:0000000000004240 loc_4240:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004240                 movzx   edx, byte ptr [rax+1]
.text:0000000000004244                 and     edx, 0FFFFFFDFh
.text:0000000000004247                 cmp     dl, 54h ; 'T'
.text:000000000000424A                 jnz     short loc_41D0
.text:000000000000424C                 movzx   edx, byte ptr [rax+2]
.text:0000000000004250                 and     edx, 0FFFFFFDFh
.text:0000000000004253                 cmp     dl, 46h ; 'F'
.text:0000000000004256                 jnz     loc_41D0
.text:000000000000425C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000004260                 jnz     loc_41D0
.text:0000000000004266                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000426A                 jnz     loc_41D0
.text:0000000000004270                 cmp     byte ptr [rax+5], 0
.text:0000000000004274                 jnz     loc_41D0
.text:000000000000427A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000427E                 lea     rax, unk_7604
.text:0000000000004285                 lea     rdx, unk_7608
.text:000000000000428C                 cmovnz  rax, rdx
.text:0000000000004290                 add     rsp, 8
.text:0000000000004294                 pop     rbx
.text:0000000000004295                 pop     rbp
.text:0000000000004296                 retn
.text:0000000000004296 ; } // starts at 41B0
.text:0000000000004296 gettext_quote   endp
.text:0000000000004296
.text:0000000000004296 ; ---------------------------------------------------------------------------
.text:0000000000004297                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0 ; Attributes: info_from_lumina
.text:00000000000042A0
.text:00000000000042A0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000042A0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000042A0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000042A0
.text:00000000000042A0 var_E0          = dword ptr -0E0h
.text:00000000000042A0 var_DB          = byte ptr -0DBh
.text:00000000000042A0 var_DA          = byte ptr -0DAh
.text:00000000000042A0 var_D9          = byte ptr -0D9h
.text:00000000000042A0 s               = qword ptr -0D8h
.text:00000000000042A0 n               = qword ptr -0D0h
.text:00000000000042A0 var_C8          = qword ptr -0C8h
.text:00000000000042A0 ps              = qword ptr -0C0h
.text:00000000000042A0 var_B8          = qword ptr -0B8h
.text:00000000000042A0 var_B0          = qword ptr -0B0h
.text:00000000000042A0 var_A8          = qword ptr -0A8h
.text:00000000000042A0 s2              = qword ptr -0A0h
.text:00000000000042A0 var_98          = qword ptr -98h
.text:00000000000042A0 var_90          = qword ptr -90h
.text:00000000000042A0 var_88          = qword ptr -88h
.text:00000000000042A0 var_80          = qword ptr -80h
.text:00000000000042A0 var_78          = qword ptr -78h
.text:00000000000042A0 var_70          = dword ptr -70h
.text:00000000000042A0 var_6C          = byte ptr -6Ch
.text:00000000000042A0 var_6B          = byte ptr -6Bh
.text:00000000000042A0 var_6A          = byte ptr -6Ah
.text:00000000000042A0 var_69          = byte ptr -69h
.text:00000000000042A0 var_68          = qword ptr -68h
.text:00000000000042A0 var_60          = qword ptr -60h
.text:00000000000042A0 wc              = dword ptr -4Ch
.text:00000000000042A0 var_48          = qword ptr -48h
.text:00000000000042A0 var_40          = qword ptr -40h
.text:00000000000042A0 arg_0           = qword ptr  8
.text:00000000000042A0 arg_8           = qword ptr  10h
.text:00000000000042A0 arg_10          = qword ptr  18h
.text:00000000000042A0
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 push    r15
.text:00000000000042A2                 push    r14
.text:00000000000042A4                 mov     r15d, r8d
.text:00000000000042A7                 push    r13
.text:00000000000042A9                 push    r12
.text:00000000000042AB                 mov     r14, rdi
.text:00000000000042AE                 push    rbp
.text:00000000000042AF                 push    rbx
.text:00000000000042B0                 mov     ebx, r9d
.text:00000000000042B3                 mov     r13, rsi
.text:00000000000042B6                 mov     rbp, rcx
.text:00000000000042B9                 and     ebx, 2
.text:00000000000042BC                 sub     rsp, 0B8h
.text:00000000000042C3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000042CB                 mov     [rsp+0E8h+s], rdx
.text:00000000000042D0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000042D5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000042DA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000042DF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000042E7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000042EC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000042F4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000042F9                 mov     rax, fs:28h
.text:0000000000004302                 mov     [rsp+0E8h+var_40], rax
.text:000000000000430A                 xor     eax, eax
.text:000000000000430C                 call    ___ctype_get_mb_cur_max
.text:0000000000004311                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004315                 mov     [rsp+0E8h+var_90], rax
.text:000000000000431A                 ja      def_4331        ; jumptable 00000000000121F1 default case
.text:0000000000004320                 lea     rcx, jpt_4331
.text:0000000000004327                 mov     edx, r15d
.text:000000000000432A                 movsxd  rax, ds:(jpt_4331 - 7680h)[rcx+rdx*4]
.text:000000000000432E                 add     rax, rcx
.text:0000000000004331                 jmp     rax             ; switch jump
.text:0000000000004333 ; ---------------------------------------------------------------------------
.text:0000000000004333
.text:0000000000004333 loc_4333:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004333                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004333                                         ; DATA XREF: ...
.text:0000000000004333                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004338                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000433D                 xor     r12d, r12d
.text:0000000000004340                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004349                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000434E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004353
.text:0000000000004353 loc_4353:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000004353                 lea     rax, asc_7615   ; "'"
.text:000000000000435A                 mov     [rsp+0E8h+n], 1
.text:0000000000004363                 xor     r15d, r15d
.text:0000000000004366                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000436E                 mov     [rsp+0E8h+s2], rax
.text:0000000000004373
.text:0000000000004373 loc_4373:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000004373                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000004373                 xor     r11d, r11d
.text:0000000000004376                 mov     rax, rbp
.text:0000000000004379                 mov     r8d, r12d
.text:000000000000437C                 mov     rbp, r11
.text:000000000000437F                 mov     r11, rax
.text:0000000000004382                 nop     word ptr [rax+rax+00h]
.text:0000000000004388
.text:0000000000004388 loc_4388:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000004388                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000004388                 cmp     r11, rbp
.text:000000000000438B                 setnz   r12b
.text:000000000000438F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004393                 jnz     short loc_43A2
.text:0000000000004395                 mov     rax, [rsp+0E8h+s]
.text:000000000000439A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000439E                 setnz   r12b
.text:00000000000043A2
.text:00000000000043A2 loc_43A2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000043A2                 test    r12b, r12b
.text:00000000000043A5                 jz      loc_4A00
.text:00000000000043AB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000043B0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000043B5                 lea     r9, [rdi+rbp]
.text:00000000000043B9                 setnz   al
.text:00000000000043BC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000043C0                 mov     r10d, eax
.text:00000000000043C3                 jz      loc_4470
.text:00000000000043C9                 mov     rax, [rsp+0E8h+n]
.text:00000000000043CE                 test    rax, rax
.text:00000000000043D1                 jz      loc_4800
.text:00000000000043D7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000043DB                 lea     rbx, [rbp+rax+0]
.text:00000000000043E0                 jnz     short loc_4410
.text:00000000000043E2                 cmp     rax, 1
.text:00000000000043E6                 jbe     short loc_4410
.text:00000000000043E8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000043ED                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000043F2                 mov     [rsp+0E8h+ps], r9
.text:00000000000043F7                 call    _strlen
.text:00000000000043FC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004402                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004408                 mov     r11, rax
.text:000000000000440B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004410                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004410                 cmp     rbx, r11
.text:0000000000004413                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004418                 ja      loc_49D0
.text:000000000000441E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004423                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004428                 mov     rdi, r9         ; s1
.text:000000000000442B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004430                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004435                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000443A                 call    _memcmp
.text:000000000000443F                 test    eax, eax
.text:0000000000004441                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004446                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000444C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004451                 jnz     loc_49D0
.text:0000000000004457                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000445C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004462                 jnz     loc_53E5
.text:0000000000004468                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004470
.text:0000000000004470 loc_4470:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000004470                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000004470                 movzx   ebx, byte ptr [r9]
.text:0000000000004474                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004477                 ja      def_448E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000447D                 lea     rcx, jpt_448E
.text:0000000000004484                 movzx   edx, bl
.text:0000000000004487                 movsxd  rax, ds:(jpt_448E - 76ACh)[rcx+rdx*4]
.text:000000000000448B                 add     rax, rcx
.text:000000000000448E                 jmp     rax             ; switch jump
.text:0000000000004490 ; ---------------------------------------------------------------------------
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004490                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004490                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000004493
.text:0000000000004493 loc_4493:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004493                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004493                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000004497                 setnz   al
.text:000000000000449A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000449E                 jnz     short loc_44AC
.text:00000000000044A0                 mov     rax, [rsp+0E8h+s]
.text:00000000000044A5                 cmp     byte ptr [rax+1], 0
.text:00000000000044A9                 setnz   al
.text:00000000000044AC
.text:00000000000044AC loc_44AC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000044AC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044B1                 setz    dl
.text:00000000000044B4                 test    al, al
.text:00000000000044B6                 jz      loc_4708
.text:00000000000044BC
.text:00000000000044BC loc_44BC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000044BC                 xor     r12d, r12d
.text:00000000000044BF                 xor     eax, eax
.text:00000000000044C1                 nop     dword ptr [rax+00000000h]
.text:00000000000044C8
.text:00000000000044C8 loc_44C8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000044C8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000044C8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000044CD                 jnz     loc_45E2
.text:00000000000044D3                 test    dl, dl
.text:00000000000044D5                 jnz     loc_45E2
.text:00000000000044DB
.text:00000000000044DB loc_44DB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000044DB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000044E0                 test    rsi, rsi
.text:00000000000044E3                 jz      short loc_44F9
.text:00000000000044E5                 mov     edx, ebx
.text:00000000000044E7                 shr     dl, 5
.text:00000000000044EA                 movzx   edx, dl
.text:00000000000044ED                 mov     edx, [rsi+rdx*4]
.text:00000000000044F0                 bt      edx, ebx
.text:00000000000044F3                 jb      loc_4643
.text:00000000000044F9
.text:00000000000044F9 loc_44F9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000044F9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000044F9                 test    r10b, r10b
.text:00000000000044FC                 jnz     loc_4643
.text:0000000000004502                 xor     eax, 1
.text:0000000000004505                 add     rbp, 1
.text:0000000000004509                 and     eax, r8d
.text:000000000000450C
.text:000000000000450C loc_450C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000450C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000450C                 test    al, al
.text:000000000000450E                 jz      short loc_4530
.text:0000000000004510                 cmp     r13, r15
.text:0000000000004513                 jbe     short loc_451A
.text:0000000000004515                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000451A
.text:000000000000451A loc_451A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000451A                 lea     rax, [r15+1]
.text:000000000000451E                 cmp     r13, rax
.text:0000000000004521                 jbe     short loc_4529
.text:0000000000004523                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004529
.text:0000000000004529 loc_4529:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004529                 add     r15, 2
.text:000000000000452D                 xor     r8d, r8d
.text:0000000000004530
.text:0000000000004530 loc_4530:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004530                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004530                 cmp     r15, r13
.text:0000000000004533                 jnb     short loc_4539
.text:0000000000004535                 mov     [r14+r15], bl
.text:0000000000004539
.text:0000000000004539 loc_4539:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004539                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000453E                 add     r15, 1
.text:0000000000004542                 mov     eax, 0
.text:0000000000004547                 test    r12b, r12b
.text:000000000000454A                 cmovz   edi, eax
.text:000000000000454D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004552                 jmp     loc_4388
.text:0000000000004552 ; ---------------------------------------------------------------------------
.text:0000000000004557                 align 20h
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004560                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004560                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000004563
.text:0000000000004563 loc_4563:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004563                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004563                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000004567                 cmp     eax, 2
.text:000000000000456A                 jz      loc_4B28
.text:0000000000004570                 cmp     eax, 5
.text:0000000000004573                 jz      loc_4AE8
.text:0000000000004579                 cmp     eax, 2
.text:000000000000457C                 mov     ebx, 3Fh ; '?'
.text:0000000000004581                 setz    dl
.text:0000000000004584                 xor     r12d, r12d
.text:0000000000004587                 xor     eax, eax
.text:0000000000004589                 jmp     loc_44C8
.text:0000000000004589 ; ---------------------------------------------------------------------------
.text:000000000000458E                 align 10h
.text:0000000000004590
.text:0000000000004590 loc_4590:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004590                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004590                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000004593
.text:0000000000004593 loc_4593:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004593                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004593                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000004598                 jz      loc_4AA0
.text:000000000000459E                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000045A3                 xor     edx, edx
.text:00000000000045A5                 xor     eax, eax
.text:00000000000045A7                 mov     ebx, 27h ; '''
.text:00000000000045AC                 jmp     loc_44C8
.text:00000000000045AC ; ---------------------------------------------------------------------------
.text:00000000000045B1                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045B8                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:00000000000045B8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000045BD                 mov     ebx, 74h ; 't'
.text:00000000000045C2
.text:00000000000045C2 loc_45C2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000045C2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000045C2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000045C7                 setz    al
.text:00000000000045CA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000045CE                 jnz     loc_471E
.text:00000000000045D4
.text:00000000000045D4 loc_45D4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000045D4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000045D4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000045D9                 jnz     short loc_4640
.text:00000000000045DB
.text:00000000000045DB loc_45DB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000045DB                 mov     ebx, edx
.text:00000000000045DD                 xor     r12d, r12d
.text:00000000000045E0                 xor     eax, eax
.text:00000000000045E2
.text:00000000000045E2 loc_45E2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000045E2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000045E2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000045E7                 jnz     loc_44DB
.text:00000000000045ED                 jmp     loc_44F9
.text:00000000000045ED ; ---------------------------------------------------------------------------
.text:00000000000045F2                 align 8
.text:00000000000045F8
.text:00000000000045F8 loc_45F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045F8                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:00000000000045F8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000045FD                 mov     ebx, 62h ; 'b'
.text:0000000000004602                 jmp     short loc_45D4
.text:0000000000004602 ; ---------------------------------------------------------------------------
.text:0000000000004604                 align 8
.text:0000000000004608
.text:0000000000004608 loc_4608:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004608                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004608                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000460D                 jz      loc_49E0
.text:0000000000004613                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004618                 jz      loc_4830
.text:000000000000461E
.text:000000000000461E loc_461E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000461E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004623                 jz      loc_4830
.text:0000000000004629                 cmp     [rsp+0E8h+n], 0
.text:000000000000462F                 jnz     loc_49EB
.text:0000000000004635                 mov     ebx, 5Ch ; '\'
.text:000000000000463A                 nop     word ptr [rax+rax+00h]
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004640                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004640                 xor     r12d, r12d
.text:0000000000004643
.text:0000000000004643 loc_4643:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004643                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004643                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004648                 setz    dl
.text:000000000000464B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004650                 mov     eax, edx
.text:0000000000004652                 jnz     loc_4EA8
.text:0000000000004658                 mov     eax, r8d
.text:000000000000465B                 xor     eax, 1
.text:000000000000465E                 and     al, dl
.text:0000000000004660                 jz      short loc_4691
.text:0000000000004662                 cmp     r13, r15
.text:0000000000004665                 jbe     short loc_466C
.text:0000000000004667                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000466C
.text:000000000000466C loc_466C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000466C                 lea     rdx, [r15+1]
.text:0000000000004670                 cmp     r13, rdx
.text:0000000000004673                 jbe     short loc_467B
.text:0000000000004675                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000467B
.text:000000000000467B loc_467B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000467B                 lea     rdx, [r15+2]
.text:000000000000467F                 cmp     r13, rdx
.text:0000000000004682                 jbe     short loc_468A
.text:0000000000004684                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000468A
.text:000000000000468A loc_468A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000468A                 add     r15, 3
.text:000000000000468E                 mov     r8d, eax
.text:0000000000004691
.text:0000000000004691 loc_4691:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004691                 cmp     r13, r15
.text:0000000000004694                 jbe     short loc_469B
.text:0000000000004696                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000469B
.text:000000000000469B loc_469B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000469B                 add     r15, 1
.text:000000000000469F                 add     rbp, 1
.text:00000000000046A3                 jmp     loc_4530
.text:00000000000046A3 ; ---------------------------------------------------------------------------
.text:00000000000046A8                 align 10h
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046B0                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:00000000000046B0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000046B5                 jnz     loc_4883
.text:00000000000046BB                 xor     edx, edx
.text:00000000000046BD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000046C2                 jz      loc_45DB
.text:00000000000046C8                 add     rbp, 1
.text:00000000000046CC                 jmp     loc_4388
.text:00000000000046CC ; ---------------------------------------------------------------------------
.text:00000000000046D1                 align 8
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046D8                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:00000000000046D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000046DD                 setz    dl
.text:00000000000046E0                 xor     eax, eax
.text:00000000000046E2                 jmp     loc_44C8
.text:00000000000046E2 ; ---------------------------------------------------------------------------
.text:00000000000046E7                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046F0                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:00000000000046F0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000046F5                 mov     ebx, 61h ; 'a'
.text:00000000000046FA                 jmp     loc_45D4
.text:00000000000046FA ; ---------------------------------------------------------------------------
.text:00000000000046FF                 align 20h
.text:0000000000004700
.text:0000000000004700 loc_4700:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004700                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004700                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004705                 setz    dl
.text:0000000000004708
.text:0000000000004708 loc_4708:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004708                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004708                 test    rbp, rbp
.text:000000000000470B                 jnz     loc_44BC
.text:0000000000004711
.text:0000000000004711 loc_4711:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004711                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004711                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004716                 and     al, dl
.text:0000000000004718                 jz      loc_44C8
.text:000000000000471E
.text:000000000000471E loc_471E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000471E                 mov     rbp, r11
.text:0000000000004721                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004729                 jmp     loc_4E29
.text:0000000000004729 ; ---------------------------------------------------------------------------
.text:000000000000472E                 align 10h
.text:0000000000004730
.text:0000000000004730 loc_4730:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004730                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004730                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004735                 setz    dl
.text:0000000000004738                 xor     r12d, r12d
.text:000000000000473B                 jmp     short loc_4711
.text:000000000000473B ; ---------------------------------------------------------------------------
.text:000000000000473D                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004740                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004740                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004745                 mov     ebx, 20h ; ' '
.text:000000000000474A                 setz    dl
.text:000000000000474D                 jmp     short loc_4711
.text:000000000000474D ; ---------------------------------------------------------------------------
.text:000000000000474F                 align 10h
.text:0000000000004750
.text:0000000000004750 loc_4750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004750                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004750                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004755                 mov     ebx, 72h ; 'r'
.text:000000000000475A                 jmp     loc_45C2
.text:000000000000475A ; ---------------------------------------------------------------------------
.text:000000000000475F                 align 20h
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004760                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004760                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004765                 mov     ebx, 66h ; 'f'
.text:000000000000476A                 jmp     loc_45D4
.text:000000000000476A ; ---------------------------------------------------------------------------
.text:000000000000476F                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004770                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004770                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004775                 mov     ebx, 76h ; 'v'
.text:000000000000477A                 jmp     loc_45D4
.text:000000000000477A ; ---------------------------------------------------------------------------
.text:000000000000477F                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004780                                         ; DATA XREF: .rodata:jpt_448E↓o
.text:0000000000004780                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004785                 mov     ebx, 6Eh ; 'n'
.text:000000000000478A                 jmp     loc_45C2
.text:000000000000478A ; ---------------------------------------------------------------------------
.text:000000000000478F                 align 10h
.text:0000000000004790
.text:0000000000004790 def_481A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004790                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004790                                         ; DATA XREF: ...
.text:0000000000004790                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004793                 nop     dword ptr [rax+rax+00h]
.text:0000000000004798
.text:0000000000004798 def_448E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004798                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004798                                         ; DATA XREF: ...
.text:0000000000004798                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000479E                 jnz     loc_4B48
.text:00000000000047A4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000047A9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000047AE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000047B3                 call    ___ctype_b_loc
.text:00000000000047B8                 mov     rcx, [rax]
.text:00000000000047BB                 movzx   edx, bl
.text:00000000000047BE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000047C4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000047CA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000047CF                 mov     edi, 1
.text:00000000000047D4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000047D8                 and     ax, 4000h
.text:00000000000047DC                 setnz   r12b
.text:00000000000047E0                 setz    al
.text:00000000000047E3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000047E7
.text:00000000000047E7 loc_47E7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000047E7                 test    al, al
.text:00000000000047E9                 jnz     loc_5181
.text:00000000000047EF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000047F4                 setz    dl
.text:00000000000047F7                 jmp     loc_44C8
.text:00000000000047F7 ; ---------------------------------------------------------------------------
.text:00000000000047FC                 align 20h
.text:0000000000004800
.text:0000000000004800 loc_4800:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004800                 movzx   ebx, byte ptr [r9]
.text:0000000000004804                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004807                 ja      short def_481A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004809                 lea     rcx, jpt_481A
.text:0000000000004810                 movzx   edx, bl
.text:0000000000004813                 movsxd  rax, ds:(jpt_481A - 78A8h)[rcx+rdx*4]
.text:0000000000004817                 add     rax, rcx
.text:000000000000481A                 jmp     rax             ; switch jump
.text:000000000000481A ; ---------------------------------------------------------------------------
.text:000000000000481C                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004820                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004820                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004823                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004828                 jnz     loc_461E
.text:000000000000482E                 xchg    ax, ax
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004830                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004830                 mov     edx, 5Ch ; '\'
.text:0000000000004835                 mov     ebx, 5Ch ; '\'
.text:000000000000483A                 jmp     loc_45D4
.text:000000000000483A ; ---------------------------------------------------------------------------
.text:000000000000483F                 align 20h
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004840                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004840                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004845                 xor     r10d, r10d
.text:0000000000004848                 mov     ebx, 66h ; 'f'
.text:000000000000484D                 jmp     loc_45D4
.text:000000000000484D ; ---------------------------------------------------------------------------
.text:0000000000004852                 align 8
.text:0000000000004858
.text:0000000000004858 loc_4858:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004858                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004858                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000485D                 xor     r10d, r10d
.text:0000000000004860                 mov     ebx, 6Eh ; 'n'
.text:0000000000004865                 jmp     loc_45C2
.text:0000000000004865 ; ---------------------------------------------------------------------------
.text:000000000000486A                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004870                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004870                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004875                 jmp     loc_4640
.text:0000000000004875 ; ---------------------------------------------------------------------------
.text:000000000000487A                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004880                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004880                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004883
.text:0000000000004883 loc_4883:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004883                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004888                 setz    dl
.text:000000000000488B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004890                 jnz     loc_542A
.text:0000000000004896                 mov     eax, r8d
.text:0000000000004899                 mov     rcx, r15
.text:000000000000489C                 xor     eax, 1
.text:000000000000489F                 and     al, dl
.text:00000000000048A1                 jz      short loc_48D0
.text:00000000000048A3                 cmp     r13, r15
.text:00000000000048A6                 jbe     short loc_48AD
.text:00000000000048A8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000048AD
.text:00000000000048AD loc_48AD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000048AD                 lea     rcx, [r15+1]
.text:00000000000048B1                 cmp     r13, rcx
.text:00000000000048B4                 jbe     short loc_48BC
.text:00000000000048B6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000048BC
.text:00000000000048BC loc_48BC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000048BC                 lea     rcx, [r15+2]
.text:00000000000048C0                 cmp     r13, rcx
.text:00000000000048C3                 ja      loc_4EF9
.text:00000000000048C9
.text:00000000000048C9 loc_48C9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000048C9                 lea     rcx, [r15+3]
.text:00000000000048CD                 mov     r8d, eax
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000048D0                 cmp     r13, rcx
.text:00000000000048D3                 jbe     short loc_48DA
.text:00000000000048D5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000048DA
.text:00000000000048DA loc_48DA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000048DA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000048DF                 lea     r15, [rcx+1]
.text:00000000000048E3                 jz      loc_4EE9
.text:00000000000048E9                 lea     rax, [rbp+1]
.text:00000000000048ED                 cmp     rax, r11
.text:00000000000048F0                 jnb     short loc_490B
.text:00000000000048F2                 mov     rax, [rsp+0E8h+s]
.text:00000000000048F7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000048FC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004900                 sub     eax, 30h ; '0'
.text:0000000000004903                 cmp     al, 9
.text:0000000000004905                 jbe     loc_5139
.text:000000000000490B
.text:000000000000490B loc_490B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000490B                 mov     eax, r12d
.text:000000000000490E                 mov     ebx, 30h ; '0'
.text:0000000000004913                 xor     r12d, r12d
.text:0000000000004916                 jmp     loc_44C8
.text:0000000000004916 ; ---------------------------------------------------------------------------
.text:000000000000491B                 align 20h
.text:0000000000004920
.text:0000000000004920 loc_4920:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004920                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004920                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004925                 mov     r12d, r10d
.text:0000000000004928                 setz    dl
.text:000000000000492B                 xor     r10d, r10d
.text:000000000000492E                 xor     eax, eax
.text:0000000000004930                 jmp     loc_44C8
.text:0000000000004930 ; ---------------------------------------------------------------------------
.text:0000000000004935                 align 8
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004938                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004938                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000493D                 setz    dl
.text:0000000000004940                 xor     r10d, r10d
.text:0000000000004943                 jmp     loc_4708
.text:0000000000004943 ; ---------------------------------------------------------------------------
.text:0000000000004948                 align 10h
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004950                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004950                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004955                 setz    dl
.text:0000000000004958                 xor     r10d, r10d
.text:000000000000495B                 xor     r12d, r12d
.text:000000000000495E                 jmp     loc_4711
.text:000000000000495E ; ---------------------------------------------------------------------------
.text:0000000000004963                 align 8
.text:0000000000004968
.text:0000000000004968 loc_4968:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004968                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004968                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000496D                 mov     r12d, r10d
.text:0000000000004970                 mov     ebx, 20h ; ' '
.text:0000000000004975                 setz    dl
.text:0000000000004978                 xor     r10d, r10d
.text:000000000000497B                 jmp     loc_4711
.text:0000000000004980 ; ---------------------------------------------------------------------------
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004980                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004980                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004985                 xor     r10d, r10d
.text:0000000000004988                 mov     ebx, 72h ; 'r'
.text:000000000000498D                 jmp     loc_45C2
.text:000000000000498D ; ---------------------------------------------------------------------------
.text:0000000000004992                 align 8
.text:0000000000004998
.text:0000000000004998 loc_4998:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004998                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:0000000000004998                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000499D                 jmp     loc_4640
.text:000000000000499D ; ---------------------------------------------------------------------------
.text:00000000000049A2                 align 8
.text:00000000000049A8
.text:00000000000049A8 loc_49A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049A8                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:00000000000049A8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000049AD                 xor     r10d, r10d
.text:00000000000049B0                 mov     ebx, 74h ; 't'
.text:00000000000049B5                 jmp     loc_45C2
.text:00000000000049B5 ; ---------------------------------------------------------------------------
.text:00000000000049BA                 align 20h
.text:00000000000049C0
.text:00000000000049C0 loc_49C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049C0                                         ; DATA XREF: .rodata:jpt_481A↓o
.text:00000000000049C0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000049C5                 jmp     loc_4640
.text:00000000000049C5 ; ---------------------------------------------------------------------------
.text:00000000000049CA                 align 10h
.text:00000000000049D0
.text:00000000000049D0 loc_49D0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000049D0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000049D0                 xor     r10d, r10d
.text:00000000000049D3                 jmp     loc_4470
.text:00000000000049D3 ; ---------------------------------------------------------------------------
.text:00000000000049D8                 align 20h
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000049E0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000049E5                 jnz     loc_5350
.text:00000000000049EB
.text:00000000000049EB loc_49EB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000049EB                 add     rbp, 1
.text:00000000000049EF                 mov     eax, r8d
.text:00000000000049F2                 xor     r12d, r12d
.text:00000000000049F5                 mov     ebx, 5Ch ; '\'
.text:00000000000049FA                 jmp     loc_450C
.text:00000000000049FA ; ---------------------------------------------------------------------------
.text:00000000000049FF                 align 20h
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004A00                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A05                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004A0A                 mov     r12d, r8d
.text:0000000000004A0D                 mov     rbp, r11
.text:0000000000004A10                 setz    dl
.text:0000000000004A13                 mov     eax, ebx
.text:0000000000004A15                 test    r15, r15
.text:0000000000004A18                 setz    cl
.text:0000000000004A1B                 and     eax, edx
.text:0000000000004A1D                 and     al, cl
.text:0000000000004A1F                 jnz     loc_5486
.text:0000000000004A25                 mov     eax, ebx
.text:0000000000004A27                 xor     eax, 1
.text:0000000000004A2A                 and     dl, al
.text:0000000000004A2C                 jz      loc_539C
.text:0000000000004A32                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004A37                 jz      loc_539A
.text:0000000000004A3D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004A42                 jnz     loc_543D
.text:0000000000004A48                 test    r13, r13
.text:0000000000004A4B                 setz    al
.text:0000000000004A4E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004A54                 setnz   dl
.text:0000000000004A57                 and     al, dl
.text:0000000000004A59                 jz      loc_547C
.text:0000000000004A5F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004A64
.text:0000000000004A64 loc_4A64:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004A64                 lea     rbx, asc_7615   ; "'"
.text:0000000000004A6B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000004A6F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004A77                 mov     r15d, 1
.text:0000000000004A7D                 mov     [rsp+0E8h+n], 1
.text:0000000000004A86                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004A8B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004A90                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004A94                 jmp     loc_4373
.text:0000000000004A94 ; ---------------------------------------------------------------------------
.text:0000000000004A99                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 loc_4AA0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004AA0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004AA5                 jnz     loc_5350
.text:0000000000004AAB                 test    r13, r13
.text:0000000000004AAE                 jz      loc_4EB0
.text:0000000000004AB4                 xor     edx, edx
.text:0000000000004AB6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004ABC                 jnz     loc_4EB0
.text:0000000000004AC2
.text:0000000000004AC2 loc_4AC2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004AC2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004AC2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004AC7                 add     r15, 3
.text:0000000000004ACB                 xor     eax, eax
.text:0000000000004ACD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004AD2                 xor     r8d, r8d
.text:0000000000004AD5                 mov     r13, rdx
.text:0000000000004AD8                 mov     ebx, 27h ; '''
.text:0000000000004ADD                 jmp     loc_44F9
.text:0000000000004ADD ; ---------------------------------------------------------------------------
.text:0000000000004AE2                 align 8
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004AE8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000004AED                 jz      short loc_4B10
.text:0000000000004AEF                 lea     rcx, [rbp+2]
.text:0000000000004AF3                 cmp     rcx, r11
.text:0000000000004AF6                 jnb     short loc_4B10
.text:0000000000004AF8                 mov     rax, [rsp+0E8h+s]
.text:0000000000004AFD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004B02                 jz      loc_5292
.text:0000000000004B08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004B10
.text:0000000000004B10 loc_4B10:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004B10                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004B10                 xor     edx, edx
.text:0000000000004B12                 xor     r12d, r12d
.text:0000000000004B15                 xor     eax, eax
.text:0000000000004B17                 mov     ebx, 3Fh ; '?'
.text:0000000000004B1C                 jmp     loc_44C8
.text:0000000000004B1C ; ---------------------------------------------------------------------------
.text:0000000000004B21                 align 8
.text:0000000000004B28
.text:0000000000004B28 loc_4B28:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004B28                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004B2D                 jnz     loc_5350
.text:0000000000004B33                 xor     r12d, r12d
.text:0000000000004B36                 xor     eax, eax
.text:0000000000004B38                 mov     ebx, 3Fh ; '?'
.text:0000000000004B3D                 jmp     loc_44F9
.text:0000000000004B3D ; ---------------------------------------------------------------------------
.text:0000000000004B42                 align 8
.text:0000000000004B48
.text:0000000000004B48 loc_4B48:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004B48                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004B50                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B54                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004B60                 mov     [rsp+0E8h+ps], rax
.text:0000000000004B65                 jnz     short loc_4B94
.text:0000000000004B67                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004B6C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004B71                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004B76                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004B7B                 call    _strlen
.text:0000000000004B80                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004B86                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004B8C                 mov     r11, rax
.text:0000000000004B8F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004B94
.text:0000000000004B94 loc_4B94:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004B94                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004B9C                 xor     ecx, ecx
.text:0000000000004B9E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004BA2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004BA7                 mov     rbx, rcx
.text:0000000000004BAA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004BB2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004BB7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004BBC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004BC4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004BC9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004BCE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004BD3
.text:0000000000004BD3 loc_4BD3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004BD3                 mov     rax, [rsp+0E8h+s]
.text:0000000000004BD8                 lea     r14, [rbp+rbx+0]
.text:0000000000004BDD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004BE2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004BE7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004BEC                 lea     r13, [rax+r14]
.text:0000000000004BF0                 sub     rdx, r14
.text:0000000000004BF3                 mov     rsi, r13
.text:0000000000004BF6                 call    rpl_mbrtowc
.text:0000000000004BFB                 test    rax, rax
.text:0000000000004BFE                 mov     r15, rax
.text:0000000000004C01                 jz      short loc_4C51
.text:0000000000004C03                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C07                 jz      loc_5225
.text:0000000000004C0D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004C11                 jz      loc_51B1
.text:0000000000004C17                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C1C                 setz    al
.text:0000000000004C1F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004C23                 jnz     loc_4DC0
.text:0000000000004C29
.text:0000000000004C29 loc_4C29:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004C29                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004C29                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004C30                 call    _iswprint
.text:0000000000004C35                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004C3A                 test    eax, eax
.text:0000000000004C3C                 mov     eax, 0
.text:0000000000004C41                 cmovz   r12d, eax
.text:0000000000004C45                 add     rbx, r15
.text:0000000000004C48                 call    _mbsinit
.text:0000000000004C4D                 test    eax, eax
.text:0000000000004C4F                 jz      short loc_4BD3
.text:0000000000004C51
.text:0000000000004C51 loc_4C51:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004C51                 mov     edx, r12d
.text:0000000000004C54                 mov     rdi, rbx
.text:0000000000004C57                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004C5D                 xor     edx, 1
.text:0000000000004C60                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004C65                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004C6B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004C6F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004C77                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004C7C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004C81                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004C86
.text:0000000000004C86 loc_4C86:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004C86                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004C86                 cmp     rdi, 1
.text:0000000000004C8A                 jbe     loc_528B
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004C90                 mov     rcx, rdi
.text:0000000000004C93                 xor     esi, esi
.text:0000000000004C95                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004C9B                 add     rcx, rbp
.text:0000000000004C9E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004CA3                 jmp     loc_4D5E
.text:0000000000004CA3 ; ---------------------------------------------------------------------------
.text:0000000000004CA8                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004CB0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004CB5                 setz    al
.text:0000000000004CB8                 test    r9b, r9b
.text:0000000000004CBB                 jnz     loc_5170
.text:0000000000004CC1                 mov     esi, r8d
.text:0000000000004CC4                 xor     esi, 1
.text:0000000000004CC7                 and     al, sil
.text:0000000000004CCA                 jz      short loc_4CFB
.text:0000000000004CCC                 cmp     r13, r15
.text:0000000000004CCF                 jbe     short loc_4CD6
.text:0000000000004CD1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004CD6
.text:0000000000004CD6 loc_4CD6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004CD6                 lea     rsi, [r15+1]
.text:0000000000004CDA                 cmp     r13, rsi
.text:0000000000004CDD                 jbe     short loc_4CE5
.text:0000000000004CDF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004CE5
.text:0000000000004CE5 loc_4CE5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004CE5                 lea     rsi, [r15+2]
.text:0000000000004CE9                 cmp     r13, rsi
.text:0000000000004CEC                 jbe     short loc_4CF4
.text:0000000000004CEE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004CF4
.text:0000000000004CF4 loc_4CF4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004CF4                 add     r15, 3
.text:0000000000004CF8                 mov     r8d, eax
.text:0000000000004CFB
.text:0000000000004CFB loc_4CFB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000004CFB                 cmp     r13, r15
.text:0000000000004CFE                 jbe     short loc_4D05
.text:0000000000004D00                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004D05
.text:0000000000004D05 loc_4D05:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004D05                 lea     rax, [r15+1]
.text:0000000000004D09                 cmp     r13, rax
.text:0000000000004D0C                 jbe     short loc_4D1B
.text:0000000000004D0E                 mov     eax, ebx
.text:0000000000004D10                 shr     al, 6
.text:0000000000004D13                 add     eax, 30h ; '0'
.text:0000000000004D16                 mov     [r14+r15+1], al
.text:0000000000004D1B
.text:0000000000004D1B loc_4D1B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000004D1B                 lea     rax, [r15+2]
.text:0000000000004D1F                 cmp     r13, rax
.text:0000000000004D22                 jbe     short loc_4D34
.text:0000000000004D24                 mov     eax, ebx
.text:0000000000004D26                 shr     al, 3
.text:0000000000004D29                 and     eax, 7
.text:0000000000004D2C                 add     eax, 30h ; '0'
.text:0000000000004D2F                 mov     [r14+r15+2], al
.text:0000000000004D34
.text:0000000000004D34 loc_4D34:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004D34                 and     ebx, 7
.text:0000000000004D37                 add     rbp, 1
.text:0000000000004D3B                 add     r15, 3
.text:0000000000004D3F                 add     ebx, 30h ; '0'
.text:0000000000004D42                 cmp     rbp, rcx
.text:0000000000004D45                 jnb     loc_4530
.text:0000000000004D4B                 mov     esi, edx
.text:0000000000004D4D
.text:0000000000004D4D loc_4D4D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000004D4D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000004D4D                 cmp     r13, r15
.text:0000000000004D50                 jbe     short loc_4D56
.text:0000000000004D52                 mov     [r14+r15], bl
.text:0000000000004D56
.text:0000000000004D56 loc_4D56:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004D56                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000004D5A                 add     r15, 1
.text:0000000000004D5E
.text:0000000000004D5E loc_4D5E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000004D5E                 test    dl, dl
.text:0000000000004D60                 jnz     loc_4CB0
.text:0000000000004D66                 mov     eax, esi
.text:0000000000004D68                 xor     eax, 1
.text:0000000000004D6B                 and     eax, r8d
.text:0000000000004D6E                 test    r10b, r10b
.text:0000000000004D71                 jz      short loc_4D81
.text:0000000000004D73                 cmp     r13, r15
.text:0000000000004D76                 jbe     short loc_4D7D
.text:0000000000004D78                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004D7D
.text:0000000000004D7D loc_4D7D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000004D7D                 add     r15, 1
.text:0000000000004D81
.text:0000000000004D81 loc_4D81:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004D81                 add     rbp, 1
.text:0000000000004D85                 cmp     rbp, rcx
.text:0000000000004D88                 jnb     loc_450C
.text:0000000000004D8E                 test    al, al
.text:0000000000004D90                 jz      loc_518E
.text:0000000000004D96                 cmp     r13, r15
.text:0000000000004D99                 jbe     short loc_4DA0
.text:0000000000004D9B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004DA0                 lea     rax, [r15+1]
.text:0000000000004DA4                 cmp     r13, rax
.text:0000000000004DA7                 jbe     short loc_4DAF
.text:0000000000004DA9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004DAF
.text:0000000000004DAF loc_4DAF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000004DAF                 add     r15, 2
.text:0000000000004DB3                 xor     r10d, r10d
.text:0000000000004DB6                 xor     r8d, r8d
.text:0000000000004DB9                 jmp     short loc_4D4D
.text:0000000000004DB9 ; ---------------------------------------------------------------------------
.text:0000000000004DBB                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004DC0                 cmp     r15, 1
.text:0000000000004DC4                 jz      loc_4C29
.text:0000000000004DCA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004DCF                 lea     rcx, [rdi+r15]
.text:0000000000004DD3                 lea     rdx, [rdi+r14+1]
.text:0000000000004DD8                 lea     r8, [rcx+r14]
.text:0000000000004DDC                 jmp     short loc_4DED
.text:0000000000004DDC ; ---------------------------------------------------------------------------
.text:0000000000004DDE                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004DE0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004DE0                 add     rdx, 1
.text:0000000000004DE4                 cmp     r8, rdx
.text:0000000000004DE7                 jz      loc_4C29
.text:0000000000004DED
.text:0000000000004DED loc_4DED:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000004DED                 movzx   ecx, byte ptr [rdx]
.text:0000000000004DF0                 sub     ecx, 5Bh ; '['
.text:0000000000004DF3                 cmp     cl, 21h ; '!'
.text:0000000000004DF6                 ja      short loc_4DE0
.text:0000000000004DF8                 mov     esi, 1
.text:0000000000004DFD                 shl     rsi, cl
.text:0000000000004E00                 mov     rcx, rsi
.text:0000000000004E03                 mov     rsi, 20000002Bh
.text:0000000000004E0D                 test    rcx, rsi
.text:0000000000004E10                 jz      short loc_4DE0
.text:0000000000004E12                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004E17                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004E1C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004E21                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004E29
.text:0000000000004E29 loc_4E29:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004E29                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004E29                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004E2E                 jz      short loc_4E40
.text:0000000000004E30                 test    al, al
.text:0000000000004E32                 mov     eax, 4
.text:0000000000004E37                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000004E3C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004E40
.text:0000000000004E40 loc_4E40:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004E40                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004E40                 sub     rsp, 8
.text:0000000000004E44                 mov     rcx, rbp
.text:0000000000004E47                 mov     rsi, r13
.text:0000000000004E4A                 push    [rsp+0F0h+var_88]
.text:0000000000004E4E                 push    [rsp+0F8h+var_80]
.text:0000000000004E52                 mov     rdi, r14
.text:0000000000004E55                 push    0
.text:0000000000004E57                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004E5F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004E64                 mov     rdx, [rsp+108h+s]
.text:0000000000004E69                 and     r9d, 0FFFFFFFDh
.text:0000000000004E6D                 call    quotearg_buffer_restyled
.text:0000000000004E72                 add     rsp, 20h
.text:0000000000004E76                 mov     r15, rax
.text:0000000000004E79
.text:0000000000004E79 loc_4E79:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004E79                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004E79                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004E81                 xor     rbx, fs:28h
.text:0000000000004E8A                 mov     rax, r15
.text:0000000000004E8D                 jnz     loc_5493
.text:0000000000004E93                 add     rsp, 0B8h
.text:0000000000004E9A                 pop     rbx
.text:0000000000004E9B                 pop     rbp
.text:0000000000004E9C                 pop     r12
.text:0000000000004E9E                 pop     r13
.text:0000000000004EA0                 pop     r14
.text:0000000000004EA2                 pop     r15
.text:0000000000004EA4                 retn
.text:0000000000004EA4 ; ---------------------------------------------------------------------------
.text:0000000000004EA5                 align 8
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004EA8                 mov     rbp, r11
.text:0000000000004EAB                 jmp     loc_4E29
.text:0000000000004EB0 ; ---------------------------------------------------------------------------
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004EB0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004EB0                 cmp     r13, r15
.text:0000000000004EB3                 jbe     short loc_4EBA
.text:0000000000004EB5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004EBA
.text:0000000000004EBA loc_4EBA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000004EBA                 lea     rax, [r15+1]
.text:0000000000004EBE                 cmp     r13, rax
.text:0000000000004EC1                 jbe     short loc_4EC9
.text:0000000000004EC3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004EC9
.text:0000000000004EC9 loc_4EC9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004EC9                 lea     rax, [r15+2]
.text:0000000000004ECD                 cmp     r13, rax
.text:0000000000004ED0                 jbe     loc_54C2
.text:0000000000004ED6                 mov     rdx, r13
.text:0000000000004ED9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004EDF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004EE4                 jmp     loc_4AC2
.text:0000000000004EE9 ; ---------------------------------------------------------------------------
.text:0000000000004EE9
.text:0000000000004EE9 loc_4EE9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004EE9                 mov     eax, r12d
.text:0000000000004EEC                 mov     ebx, 30h ; '0'
.text:0000000000004EF1                 xor     r12d, r12d
.text:0000000000004EF4                 jmp     loc_44F9
.text:0000000000004EF9 ; ---------------------------------------------------------------------------
.text:0000000000004EF9
.text:0000000000004EF9 loc_4EF9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004EF9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004EFF                 jmp     loc_48C9
.text:0000000000004F04 ; ---------------------------------------------------------------------------
.text:0000000000004F04
.text:0000000000004F04 loc_4F04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F04                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000004F04                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004F06                 jnz     loc_4333        ; jumptable 00000000000121F1 case 1
.text:0000000000004F0C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F11
.text:0000000000004F11 loc_4F11:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004F11                 test    r13, r13
.text:0000000000004F14                 jnz     loc_54AA
.text:0000000000004F1A                 lea     rax, asc_7615   ; "'"
.text:0000000000004F21                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F2A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F2F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F34                 xor     r12d, r12d
.text:0000000000004F37                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004F3C                 mov     [rsp+0E8h+n], 1
.text:0000000000004F45                 mov     [rsp+0E8h+s2], rax
.text:0000000000004F4A                 mov     r15d, 1
.text:0000000000004F50                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004F58                 jmp     loc_4373
.text:0000000000004F58 ; ---------------------------------------------------------------------------
.text:0000000000004F5D                 align 20h
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F60                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000004F60                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004F62                 jnz     loc_535D
.text:0000000000004F68                 test    r13, r13
.text:0000000000004F6B                 jz      loc_5196
.text:0000000000004F71                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004F75                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F7A                 xor     r12d, r12d
.text:0000000000004F7D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F82                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F8B
.text:0000000000004F8B loc_4F8B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000004F8B                 lea     rax, unk_7613
.text:0000000000004F92                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004F97                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F9C                 mov     [rsp+0E8h+n], 1
.text:0000000000004FA5                 mov     r15d, 1
.text:0000000000004FAB                 mov     [rsp+0E8h+s2], rax
.text:0000000000004FB0                 jmp     loc_4373
.text:0000000000004FB5 ; ---------------------------------------------------------------------------
.text:0000000000004FB5
.text:0000000000004FB5 loc_4FB5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004FB5                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000004FB5                 lea     rax, unk_7613   ; jumptable 00000000000121F1 case 6
.text:0000000000004FBC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004FC1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004FC6                 xor     r12d, r12d
.text:0000000000004FC9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004FD2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004FD7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004FDC                 mov     [rsp+0E8h+n], 1
.text:0000000000004FE5                 xor     r15d, r15d
.text:0000000000004FE8                 mov     [rsp+0E8h+s2], rax
.text:0000000000004FED                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004FF5                 jmp     loc_4373
.text:0000000000004FFA ; ---------------------------------------------------------------------------
.text:0000000000004FFA
.text:0000000000004FFA loc_4FFA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004FFA                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000004FFA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000004FFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005004                 xor     r12d, r12d
.text:0000000000005007                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005010                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005015                 xor     r15d, r15d
.text:0000000000005018                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000501D                 mov     [rsp+0E8h+n], 0
.text:0000000000005026                 mov     [rsp+0E8h+s2], 0
.text:000000000000502F                 jmp     loc_4373
.text:0000000000005034 ; ---------------------------------------------------------------------------
.text:0000000000005034
.text:0000000000005034 loc_5034:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005034                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000005034                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000005039                 jz      short loc_5091
.text:000000000000503B                 lea     rsi, asc_7617   ; "`"
.text:0000000000005042                 xor     edi, edi        ; domainname
.text:0000000000005044                 mov     edx, 5          ; category
.text:0000000000005049                 call    _dcgettext
.text:000000000000504E                 mov     rcx, rax
.text:0000000000005051                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005056                 lea     rax, asc_7617   ; "`"
.text:000000000000505D                 cmp     rcx, rax
.text:0000000000005060                 jz      loc_53FE
.text:0000000000005066
.text:0000000000005066 loc_5066:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000005066                 lea     rsi, asc_7615   ; "'"
.text:000000000000506D                 xor     edi, edi        ; domainname
.text:000000000000506F                 mov     edx, 5          ; category
.text:0000000000005074                 call    _dcgettext
.text:0000000000005079                 mov     rcx, rax
.text:000000000000507C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005081                 lea     rax, asc_7615   ; "'"
.text:0000000000005088                 cmp     rcx, rax
.text:000000000000508B                 jz      loc_5414
.text:0000000000005091
.text:0000000000005091 loc_5091:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000005091                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000005091                 xor     r15d, r15d
.text:0000000000005094                 test    ebx, ebx
.text:0000000000005096                 jz      loc_525D
.text:000000000000509C
.text:000000000000509C loc_509C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000509C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000509C                 test    ebx, ebx
.text:000000000000509E                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000050A3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000050A8                 xor     r12d, r12d
.text:00000000000050AB                 mov     rdi, rbx        ; s
.text:00000000000050AE                 call    _strlen
.text:00000000000050B3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000050B8                 mov     [rsp+0E8h+n], rax
.text:00000000000050BD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000050C2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000050C7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000050D0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000050D5                 jmp     loc_4373
.text:00000000000050DA ; ---------------------------------------------------------------------------
.text:00000000000050DA
.text:00000000000050DA loc_50DA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000050DA                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:00000000000050DA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000050DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000050E4                 xor     r12d, r12d
.text:00000000000050E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000050F0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000050F5                 xor     r15d, r15d
.text:00000000000050F8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000050FD                 mov     [rsp+0E8h+n], 0
.text:0000000000005106                 mov     [rsp+0E8h+s2], 0
.text:000000000000510F                 jmp     loc_4373
.text:0000000000005114 ; ---------------------------------------------------------------------------
.text:0000000000005114
.text:0000000000005114 loc_5114:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005114                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000005114                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005119                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000511E                 xor     r12d, r12d
.text:0000000000005121                 mov     [rsp+0E8h+var_98], 0
.text:000000000000512A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000512F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005134                 jmp     loc_4353
.text:0000000000005139 ; ---------------------------------------------------------------------------
.text:0000000000005139
.text:0000000000005139 loc_5139:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005139                 cmp     r13, r15
.text:000000000000513C                 jbe     short loc_5143
.text:000000000000513E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000005143
.text:0000000000005143 loc_5143:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000005143                 lea     rax, [rcx+2]
.text:0000000000005147                 cmp     r13, rax
.text:000000000000514A                 jbe     short loc_5152
.text:000000000000514C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000005152
.text:0000000000005152 loc_5152:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000005152                 mov     eax, r12d
.text:0000000000005155                 lea     r15, [rcx+3]
.text:0000000000005159                 xor     r12d, r12d
.text:000000000000515C                 mov     ebx, 30h ; '0'
.text:0000000000005161                 jmp     loc_44C8
.text:0000000000005161 ; ---------------------------------------------------------------------------
.text:0000000000005166                 align 10h
.text:0000000000005170
.text:0000000000005170 loc_5170:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000005170                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005175                 mov     rbp, r11
.text:0000000000005178                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000517C                 jmp     loc_4E29
.text:0000000000005181 ; ---------------------------------------------------------------------------
.text:0000000000005181
.text:0000000000005181 loc_5181:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000005181                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005186                 xor     r12d, r12d
.text:0000000000005189                 jmp     loc_4C90
.text:000000000000518E ; ---------------------------------------------------------------------------
.text:000000000000518E
.text:000000000000518E loc_518E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000518E                 xor     r10d, r10d
.text:0000000000005191                 jmp     loc_4D4D
.text:0000000000005196 ; ---------------------------------------------------------------------------
.text:0000000000005196
.text:0000000000005196 loc_5196:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000005196                 mov     [rsp+0E8h+var_98], 0
.text:000000000000519F                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000051A4                 xor     r12d, r12d
.text:00000000000051A7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000051AC                 jmp     loc_4F8B
.text:00000000000051B1 ; ---------------------------------------------------------------------------
.text:00000000000051B1
.text:00000000000051B1 loc_51B1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000051B1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000051B6                 mov     rsi, r14
.text:00000000000051B9                 mov     rcx, r13
.text:00000000000051BC                 mov     rax, rbx
.text:00000000000051BF                 mov     rdi, rbx
.text:00000000000051C2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000051C8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000051CD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000051D5                 cmp     rsi, r11
.text:00000000000051D8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000051DE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000051E6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000051EB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000051F0                 jnb     short loc_5218
.text:00000000000051F2                 cmp     byte ptr [rcx], 0
.text:00000000000051F5                 jnz     short loc_5207
.text:00000000000051F7                 jmp     short loc_5218
.text:00000000000051F7 ; ---------------------------------------------------------------------------
.text:00000000000051F9                 align 20h
.text:0000000000005200
.text:0000000000005200 loc_5200:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005200                 cmp     byte ptr [r9+rax], 0
.text:0000000000005205                 jz      short loc_5215
.text:0000000000005207
.text:0000000000005207 loc_5207:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005207                 add     rax, 1
.text:000000000000520B                 lea     rdx, [rbp+rax+0]
.text:0000000000005210                 cmp     r11, rdx
.text:0000000000005213                 ja      short loc_5200
.text:0000000000005215
.text:0000000000005215 loc_5215:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005215                 mov     rdi, rax
.text:0000000000005218
.text:0000000000005218 loc_5218:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005218                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005218                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000521D                 xor     r12d, r12d
.text:0000000000005220                 jmp     loc_4C86
.text:0000000000005225 ; ---------------------------------------------------------------------------
.text:0000000000005225
.text:0000000000005225 loc_5225:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005225                 mov     rdi, rbx
.text:0000000000005228                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000522E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005233                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005239                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005241                 xor     r12d, r12d
.text:0000000000005244                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005249                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000524E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005253                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005258                 jmp     loc_4C86
.text:000000000000525D ; ---------------------------------------------------------------------------
.text:000000000000525D
.text:000000000000525D loc_525D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000525D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000005262                 movzx   eax, byte ptr [rdx]
.text:0000000000005265                 test    al, al
.text:0000000000005267                 jz      loc_509C
.text:000000000000526D                 nop     dword ptr [rax]
.text:0000000000005270
.text:0000000000005270 loc_5270:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000005270                 cmp     r13, r15
.text:0000000000005273                 jbe     short loc_5279
.text:0000000000005275                 mov     [r14+r15], al
.text:0000000000005279
.text:0000000000005279 loc_5279:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000005279                 add     r15, 1
.text:000000000000527D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000005282                 test    al, al
.text:0000000000005284                 jnz     short loc_5270
.text:0000000000005286                 jmp     loc_509C
.text:000000000000528B ; ---------------------------------------------------------------------------
.text:000000000000528B
.text:000000000000528B loc_528B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000528B                 mov     eax, edx
.text:000000000000528D                 jmp     loc_47E7
.text:0000000000005292 ; ---------------------------------------------------------------------------
.text:0000000000005292
.text:0000000000005292 loc_5292:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000005292                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000005296                 cmp     bl, 3Eh ; '>'
.text:0000000000005299                 ja      loc_4B10
.text:000000000000529F                 mov     rax, 7000A38200000000h
.text:00000000000052A9                 bt      rax, rbx
.text:00000000000052AD                 jnb     loc_4B10
.text:00000000000052B3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000052B8                 jnz     loc_54A2
.text:00000000000052BE                 cmp     r13, r15
.text:00000000000052C1                 jbe     short loc_52C8
.text:00000000000052C3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000052C8                 lea     rax, [r15+1]
.text:00000000000052CC                 cmp     r13, rax
.text:00000000000052CF                 jbe     short loc_52D7
.text:00000000000052D1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000052D7
.text:00000000000052D7 loc_52D7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000052D7                 lea     rax, [r15+2]
.text:00000000000052DB                 cmp     r13, rax
.text:00000000000052DE                 jbe     short loc_52E6
.text:00000000000052E0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000052E6
.text:00000000000052E6 loc_52E6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000052E6                 lea     rax, [r15+3]
.text:00000000000052EA                 cmp     r13, rax
.text:00000000000052ED                 jbe     short loc_52F5
.text:00000000000052EF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000052F5
.text:00000000000052F5 loc_52F5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000052F5                 add     r15, 4
.text:00000000000052F9                 xor     edx, edx
.text:00000000000052FB                 xor     r12d, r12d
.text:00000000000052FE                 xor     eax, eax
.text:0000000000005300                 mov     rbp, rcx
.text:0000000000005303                 jmp     loc_44C8
.text:0000000000005308 ; ---------------------------------------------------------------------------
.text:0000000000005308
.text:0000000000005308 loc_5308:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005308                                         ; DATA XREF: .rodata:jpt_4331↓o
.text:0000000000005308                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000530A                 jz      loc_5498
.text:0000000000005310                 lea     rax, asc_7615   ; "'"
.text:0000000000005317                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000531C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005321                 xor     r12d, r12d
.text:0000000000005324                 mov     [rsp+0E8h+var_98], 0
.text:000000000000532D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005332                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005337                 mov     [rsp+0E8h+n], 1
.text:0000000000005340                 xor     r15d, r15d
.text:0000000000005343                 mov     [rsp+0E8h+s2], rax
.text:0000000000005348                 jmp     loc_4373
.text:0000000000005348 ; ---------------------------------------------------------------------------
.text:000000000000534D                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000005350                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000005350                 mov     rbp, r11
.text:0000000000005353                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005358                 jmp     loc_4E29
.text:000000000000535D ; ---------------------------------------------------------------------------
.text:000000000000535D
.text:000000000000535D loc_535D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000535D                 lea     rax, unk_7613
.text:0000000000005364                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005369                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000536E                 xor     r12d, r12d
.text:0000000000005371                 mov     [rsp+0E8h+var_98], 0
.text:000000000000537A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000537F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005384                 mov     [rsp+0E8h+n], 1
.text:000000000000538D                 xor     r15d, r15d
.text:0000000000005390                 mov     [rsp+0E8h+s2], rax
.text:0000000000005395                 jmp     loc_4373
.text:000000000000539A ; ---------------------------------------------------------------------------
.text:000000000000539A
.text:000000000000539A loc_539A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000539A                 mov     eax, edx
.text:000000000000539C
.text:000000000000539C loc_539C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000539C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000539C                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000053A1                 test    rbx, rbx
.text:00000000000053A4                 jz      short loc_53D2
.text:00000000000053A6                 test    al, al
.text:00000000000053A8                 jz      short loc_53D2
.text:00000000000053AA                 movzx   ecx, byte ptr [rbx]
.text:00000000000053AD                 mov     rax, rbx
.text:00000000000053B0                 test    cl, cl
.text:00000000000053B2                 jz      short loc_53D2
.text:00000000000053B4                 mov     rdx, r15
.text:00000000000053B7                 sub     rax, r15
.text:00000000000053BA
.text:00000000000053BA loc_53BA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000053BA                 cmp     r13, rdx
.text:00000000000053BD                 jbe     short loc_53C3
.text:00000000000053BF                 mov     [r14+rdx], cl
.text:00000000000053C3
.text:00000000000053C3 loc_53C3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000053C3                 add     rdx, 1
.text:00000000000053C7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000053CB                 test    cl, cl
.text:00000000000053CD                 jnz     short loc_53BA
.text:00000000000053CF                 mov     r15, rdx
.text:00000000000053D2
.text:00000000000053D2 loc_53D2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000053D2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000053D2                 cmp     r13, r15
.text:00000000000053D5                 jbe     loc_4E79
.text:00000000000053DB                 mov     byte ptr [r14+r15], 0
.text:00000000000053E0                 jmp     loc_4E79
.text:00000000000053E5 ; ---------------------------------------------------------------------------
.text:00000000000053E5
.text:00000000000053E5 loc_53E5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000053E5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000053EA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000053EF                 mov     rbp, r11
.text:00000000000053F2                 setz    al
.text:00000000000053F5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000053F9                 jmp     loc_4E29
.text:00000000000053FE ; ---------------------------------------------------------------------------
.text:00000000000053FE
.text:00000000000053FE loc_53FE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000053FE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005402                 mov     rdi, rcx
.text:0000000000005405                 call    gettext_quote
.text:000000000000540A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000540F                 jmp     loc_5066
.text:0000000000005414 ; ---------------------------------------------------------------------------
.text:0000000000005414
.text:0000000000005414 loc_5414:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005414                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005418                 mov     rdi, rcx
.text:000000000000541B                 call    gettext_quote
.text:0000000000005420                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005425                 jmp     loc_5091
.text:000000000000542A ; ---------------------------------------------------------------------------
.text:000000000000542A
.text:000000000000542A loc_542A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000542A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000542F                 mov     rbp, r11
.text:0000000000005432                 mov     eax, edx
.text:0000000000005434                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005438                 jmp     loc_4E29
.text:000000000000543D ; ---------------------------------------------------------------------------
.text:000000000000543D
.text:000000000000543D loc_543D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000543D                 sub     rsp, 8
.text:0000000000005441                 mov     r8d, 5
.text:0000000000005447                 mov     rcx, r11
.text:000000000000544A                 push    [rsp+0F0h+var_88]
.text:000000000000544E                 push    [rsp+0F8h+var_80]
.text:0000000000005452                 mov     rdi, r14
.text:0000000000005455                 push    [rsp+100h+var_C8]
.text:0000000000005459                 mov     r9d, [rsp+108h+var_70]
.text:0000000000005461                 mov     rdx, [rsp+108h+s]
.text:0000000000005466                 mov     rsi, [rsp+108h+var_98]
.text:000000000000546B                 call    quotearg_buffer_restyled
.text:0000000000005470                 add     rsp, 20h
.text:0000000000005474                 mov     r15, rax
.text:0000000000005477                 jmp     loc_4E79
.text:000000000000547C ; ---------------------------------------------------------------------------
.text:000000000000547C
.text:000000000000547C loc_547C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000547C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000005481                 jmp     loc_539C
.text:0000000000005486 ; ---------------------------------------------------------------------------
.text:0000000000005486
.text:0000000000005486 loc_5486:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000005486                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000548E                 jmp     loc_4E29
.text:0000000000005493 ; ---------------------------------------------------------------------------
.text:0000000000005493
.text:0000000000005493 loc_5493:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000005493                 call    ___stack_chk_fail
.text:0000000000005498 ; ---------------------------------------------------------------------------
.text:0000000000005498
.text:0000000000005498 loc_5498:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000005498                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000549D                 jmp     loc_4F11
.text:00000000000054A2 ; ---------------------------------------------------------------------------
.text:00000000000054A2
.text:00000000000054A2 loc_54A2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000054A2                 mov     rbp, r11
.text:00000000000054A5                 jmp     loc_4E40
.text:00000000000054AA ; ---------------------------------------------------------------------------
.text:00000000000054AA
.text:00000000000054AA loc_54AA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000054AA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000054AF                 xor     eax, eax
.text:00000000000054B1                 xor     r12d, r12d
.text:00000000000054B4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000054BD                 jmp     loc_4A64
.text:00000000000054C2 ; ---------------------------------------------------------------------------
.text:00000000000054C2
.text:00000000000054C2 loc_54C2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000054C2                 mov     rdx, r13
.text:00000000000054C5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000054CA                 jmp     loc_4AC2
.text:00000000000054CF ; ---------------------------------------------------------------------------
.text:00000000000054CF
.text:00000000000054CF def_4331:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000054CF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000054CF ; } // starts at 42A0
.text:00000000000054CF quotearg_buffer_restyled endp
.text:00000000000054CF
.text:00000000000054CF ; ---------------------------------------------------------------------------
.text:00000000000054D4                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000054E0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000054E0
.text:00000000000054E0 var_50          = qword ptr -50h
.text:00000000000054E0 var_48          = qword ptr -48h
.text:00000000000054E0 var_40          = dword ptr -40h
.text:00000000000054E0 var_3C          = dword ptr -3Ch
.text:00000000000054E0
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 push    r15
.text:00000000000054E2                 push    r14
.text:00000000000054E4                 movsxd  r15, edi
.text:00000000000054E7                 push    r13
.text:00000000000054E9                 push    r12
.text:00000000000054EB                 mov     r14, rdx
.text:00000000000054EE                 push    rbp
.text:00000000000054EF                 push    rbx
.text:00000000000054F0                 mov     rbp, rcx
.text:00000000000054F3                 sub     rsp, 28h
.text:00000000000054F7                 mov     [rsp+58h+var_50], rsi
.text:00000000000054FC                 call    ___errno_location
.text:0000000000005501                 mov     r13, rax
.text:0000000000005504                 mov     eax, [rax]
.text:0000000000005506                 test    r15d, r15d
.text:0000000000005509                 mov     rbx, cs:slotvec
.text:0000000000005510                 mov     [rsp+58h+var_40], eax
.text:0000000000005514                 js      loc_5681
.text:000000000000551A                 cmp     cs:nslots, r15d
.text:0000000000005521                 jg      short loc_5585
.text:0000000000005523                 cmp     r15d, 7FFFFFFFh
.text:000000000000552A                 jz      loc_5686
.text:0000000000005530                 lea     r12d, [r15+1]
.text:0000000000005534                 lea     rax, slotvec0
.text:000000000000553B                 movsxd  rsi, r12d
.text:000000000000553E                 shl     rsi, 4
.text:0000000000005542                 cmp     rbx, rax
.text:0000000000005545                 jz      loc_5660
.text:000000000000554B                 mov     rdi, rbx
.text:000000000000554E                 call    xrealloc
.text:0000000000005553                 mov     rbx, rax
.text:0000000000005556                 mov     cs:slotvec, rax
.text:000000000000555D
.text:000000000000555D loc_555D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000555D                 movsxd  rdi, cs:nslots
.text:0000000000005564                 mov     edx, r12d
.text:0000000000005567                 xor     esi, esi        ; c
.text:0000000000005569                 sub     edx, edi
.text:000000000000556B                 shl     rdi, 4
.text:000000000000556F                 movsxd  rdx, edx
.text:0000000000005572                 add     rdi, rbx        ; s
.text:0000000000005575                 shl     rdx, 4          ; n
.text:0000000000005579                 call    _memset
.text:000000000000557E                 mov     cs:nslots, r12d
.text:0000000000005585
.text:0000000000005585 loc_5585:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000005585                 mov     eax, [rbp+4]
.text:0000000000005588                 shl     r15, 4
.text:000000000000558C                 sub     rsp, 8
.text:0000000000005590                 add     rbx, r15
.text:0000000000005593                 lea     r15, [rbp+8]
.text:0000000000005597                 mov     r8d, [rbp+0]
.text:000000000000559B                 mov     r11, [rbx]
.text:000000000000559E                 mov     r12, [rbx+8]
.text:00000000000055A2                 mov     rcx, r14
.text:00000000000055A5                 or      eax, 1
.text:00000000000055A8                 mov     [rsp+60h+var_3C], eax
.text:00000000000055AC                 push    qword ptr [rbp+30h]
.text:00000000000055AF                 mov     r9d, eax
.text:00000000000055B2                 push    qword ptr [rbp+28h]
.text:00000000000055B5                 push    r15
.text:00000000000055B7                 mov     rsi, r11
.text:00000000000055BA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000055BF                 mov     rdi, r12
.text:00000000000055C2                 mov     [rsp+78h+var_48], r11
.text:00000000000055C7                 call    quotearg_buffer_restyled
.text:00000000000055CC                 add     rsp, 20h
.text:00000000000055D0                 mov     r11, [rsp+58h+var_48]
.text:00000000000055D5                 cmp     r11, rax
.text:00000000000055D8                 ja      short loc_5641
.text:00000000000055DA                 lea     rsi, [rax+1]
.text:00000000000055DE                 lea     rax, slot0
.text:00000000000055E5                 cmp     r12, rax
.text:00000000000055E8                 mov     [rbx], rsi
.text:00000000000055EB                 jz      short loc_55FF
.text:00000000000055ED                 mov     rdi, r12        ; ptr
.text:00000000000055F0                 mov     [rsp+58h+var_48], rsi
.text:00000000000055F5                 call    _free
.text:00000000000055FA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000055FF
.text:00000000000055FF loc_55FF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000055FF                 mov     rdi, rsi
.text:0000000000005602                 mov     [rsp+58h+var_48], rsi
.text:0000000000005607                 call    xmalloc
.text:000000000000560C                 sub     rsp, 8
.text:0000000000005610                 mov     [rbx+8], rax
.text:0000000000005614                 mov     r8d, [rbp+0]
.text:0000000000005618                 push    qword ptr [rbp+30h]
.text:000000000000561B                 push    qword ptr [rbp+28h]
.text:000000000000561E                 mov     rcx, r14
.text:0000000000005621                 push    r15
.text:0000000000005623                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005628                 mov     rdi, rax
.text:000000000000562B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005630                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005635                 mov     r12, rax
.text:0000000000005638                 call    quotearg_buffer_restyled
.text:000000000000563D                 add     rsp, 20h
.text:0000000000005641
.text:0000000000005641 loc_5641:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005641                 mov     eax, [rsp+58h+var_40]
.text:0000000000005645                 mov     [r13+0], eax
.text:0000000000005649                 add     rsp, 28h
.text:000000000000564D                 mov     rax, r12
.text:0000000000005650                 pop     rbx
.text:0000000000005651                 pop     rbp
.text:0000000000005652                 pop     r12
.text:0000000000005654                 pop     r13
.text:0000000000005656                 pop     r14
.text:0000000000005658                 pop     r15
.text:000000000000565A                 retn
.text:000000000000565A ; ---------------------------------------------------------------------------
.text:000000000000565B                 align 20h
.text:0000000000005660
.text:0000000000005660 loc_5660:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005660                 xor     edi, edi
.text:0000000000005662                 call    xrealloc
.text:0000000000005667                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000566F                 mov     rbx, rax
.text:0000000000005672                 mov     cs:slotvec, rax
.text:0000000000005679                 movups  xmmword ptr [rax], xmm0
.text:000000000000567C                 jmp     loc_555D
.text:0000000000005681 ; ---------------------------------------------------------------------------
.text:0000000000005681
.text:0000000000005681 loc_5681:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000005681                 call    _abort
.text:0000000000005686 ; ---------------------------------------------------------------------------
.text:0000000000005686
.text:0000000000005686 loc_5686:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000005686                 call    xalloc_die
.text:0000000000005686 ; } // starts at 54E0
.text:0000000000005686 quotearg_n_options endp
.text:0000000000005686
.text:0000000000005686 ; ---------------------------------------------------------------------------
.text:000000000000568B                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690 ; Attributes: info_from_lumina
.text:0000000000005690
.text:0000000000005690 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005690                 public clone_quoting_options
.text:0000000000005690 clone_quoting_options proc near
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 push    r12
.text:0000000000005692                 push    rbp
.text:0000000000005693                 push    rbx
.text:0000000000005694                 mov     rbx, rdi
.text:0000000000005697                 call    ___errno_location
.text:000000000000569C                 mov     r12d, [rax]
.text:000000000000569F                 mov     rbp, rax
.text:00000000000056A2                 lea     rax, default_quoting_options
.text:00000000000056A9                 test    rbx, rbx
.text:00000000000056AC                 mov     esi, 38h ; '8'  ; n
.text:00000000000056B1                 cmovz   rbx, rax
.text:00000000000056B5                 mov     rdi, rbx        ; src
.text:00000000000056B8                 call    xmemdup
.text:00000000000056BD                 mov     [rbp+0], r12d
.text:00000000000056C1                 pop     rbx
.text:00000000000056C2                 pop     rbp
.text:00000000000056C3                 pop     r12
.text:00000000000056C5                 retn
.text:00000000000056C5 ; } // starts at 5690
.text:00000000000056C5 clone_quoting_options endp
.text:00000000000056C5
.text:00000000000056C5 ; ---------------------------------------------------------------------------
.text:00000000000056C6                 align 10h
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0
.text:00000000000056D0                 public get_quoting_style
.text:00000000000056D0 get_quoting_style proc near
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 lea     rax, default_quoting_options
.text:00000000000056D7                 test    rdi, rdi
.text:00000000000056DA                 cmovz   rdi, rax
.text:00000000000056DE                 mov     eax, [rdi]
.text:00000000000056E0                 retn
.text:00000000000056E0 ; } // starts at 56D0
.text:00000000000056E0 get_quoting_style endp
.text:00000000000056E0
.text:00000000000056E0 ; ---------------------------------------------------------------------------
.text:00000000000056E1                 align 10h
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0
.text:00000000000056F0                 public set_quoting_style
.text:00000000000056F0 set_quoting_style proc near
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 lea     rax, default_quoting_options
.text:00000000000056F7                 test    rdi, rdi
.text:00000000000056FA                 cmovz   rdi, rax
.text:00000000000056FE                 mov     [rdi], esi
.text:0000000000005700                 retn
.text:0000000000005700 ; } // starts at 56F0
.text:0000000000005700 set_quoting_style endp
.text:0000000000005700
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005701                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710 ; Attributes: info_from_lumina
.text:0000000000005710
.text:0000000000005710 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005710                 public set_char_quoting
.text:0000000000005710 set_char_quoting proc near
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 lea     rax, default_quoting_options
.text:0000000000005717                 test    rdi, rdi
.text:000000000000571A                 mov     ecx, esi
.text:000000000000571C                 cmovz   rdi, rax
.text:0000000000005720                 mov     eax, esi
.text:0000000000005722                 and     ecx, 1Fh
.text:0000000000005725                 shr     al, 5
.text:0000000000005728                 movzx   eax, al
.text:000000000000572B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005730                 mov     esi, [rdi]
.text:0000000000005732                 mov     eax, esi
.text:0000000000005734                 shr     eax, cl
.text:0000000000005736                 xor     edx, eax
.text:0000000000005738                 and     eax, 1
.text:000000000000573B                 and     edx, 1
.text:000000000000573E                 shl     edx, cl
.text:0000000000005740                 xor     edx, esi
.text:0000000000005742                 mov     [rdi], edx
.text:0000000000005744                 retn
.text:0000000000005744 ; } // starts at 5710
.text:0000000000005744 set_char_quoting endp
.text:0000000000005744
.text:0000000000005744 ; ---------------------------------------------------------------------------
.text:0000000000005745                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750
.text:0000000000005750                 public set_quoting_flags
.text:0000000000005750 set_quoting_flags proc near
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 lea     rax, default_quoting_options
.text:0000000000005757                 test    rdi, rdi
.text:000000000000575A                 cmovz   rdi, rax
.text:000000000000575E                 mov     eax, [rdi+4]
.text:0000000000005761                 mov     [rdi+4], esi
.text:0000000000005764                 retn
.text:0000000000005764 ; } // starts at 5750
.text:0000000000005764 set_quoting_flags endp
.text:0000000000005764
.text:0000000000005764 ; ---------------------------------------------------------------------------
.text:0000000000005765                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770 ; Attributes: info_from_lumina
.text:0000000000005770
.text:0000000000005770 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005770                 public set_custom_quoting
.text:0000000000005770 set_custom_quoting proc near
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 lea     rax, default_quoting_options
.text:0000000000005777                 test    rdi, rdi
.text:000000000000577A                 cmovz   rdi, rax
.text:000000000000577E                 test    rsi, rsi
.text:0000000000005781                 mov     dword ptr [rdi], 0Ah
.text:0000000000005787                 jz      short loc_5797
.text:0000000000005789                 test    rdx, rdx
.text:000000000000578C                 jz      short loc_5797
.text:000000000000578E                 mov     [rdi+28h], rsi
.text:0000000000005792                 mov     [rdi+30h], rdx
.text:0000000000005796                 retn
.text:0000000000005797 ; ---------------------------------------------------------------------------
.text:0000000000005797
.text:0000000000005797 loc_5797:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005797                                         ; set_custom_quoting+1C↑j
.text:0000000000005797                 sub     rsp, 8
.text:000000000000579B                 call    _abort
.text:000000000000579B ; } // starts at 5770
.text:000000000000579B set_custom_quoting endp
.text:000000000000579B
.text:00000000000057A0
.text:00000000000057A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057A0
.text:00000000000057A0 ; Attributes: info_from_lumina
.text:00000000000057A0
.text:00000000000057A0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000057A0                 public quotearg_buffer
.text:00000000000057A0 quotearg_buffer proc near
.text:00000000000057A0
.text:00000000000057A0 var_40          = qword ptr -40h
.text:00000000000057A0
.text:00000000000057A0 ; __unwind {
.text:00000000000057A0                 push    r15
.text:00000000000057A2                 push    r14
.text:00000000000057A4                 lea     rax, default_quoting_options
.text:00000000000057AB                 push    r13
.text:00000000000057AD                 push    r12
.text:00000000000057AF                 mov     r13, rdi
.text:00000000000057B2                 push    rbp
.text:00000000000057B3                 push    rbx
.text:00000000000057B4                 mov     rbx, r8
.text:00000000000057B7                 mov     r14, rsi
.text:00000000000057BA                 mov     r15, rdx
.text:00000000000057BD                 sub     rsp, 18h
.text:00000000000057C1                 test    r8, r8
.text:00000000000057C4                 cmovz   rbx, rax
.text:00000000000057C8                 mov     [rsp+48h+var_40], rcx
.text:00000000000057CD                 call    ___errno_location
.text:00000000000057D2                 mov     r12d, [rax]
.text:00000000000057D5                 mov     rbp, rax
.text:00000000000057D8                 lea     rax, [rbx+8]
.text:00000000000057DC                 sub     rsp, 8
.text:00000000000057E0                 mov     r9d, [rbx+4]
.text:00000000000057E4                 push    qword ptr [rbx+30h]
.text:00000000000057E7                 mov     r8d, [rbx]
.text:00000000000057EA                 push    qword ptr [rbx+28h]
.text:00000000000057ED                 mov     rdx, r15
.text:00000000000057F0                 push    rax
.text:00000000000057F1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000057F6                 mov     rsi, r14
.text:00000000000057F9                 mov     rdi, r13
.text:00000000000057FC                 call    quotearg_buffer_restyled
.text:0000000000005801                 mov     [rbp+0], r12d
.text:0000000000005805                 add     rsp, 38h
.text:0000000000005809                 pop     rbx
.text:000000000000580A                 pop     rbp
.text:000000000000580B                 pop     r12
.text:000000000000580D                 pop     r13
.text:000000000000580F                 pop     r14
.text:0000000000005811                 pop     r15
.text:0000000000005813                 retn
.text:0000000000005813 ; } // starts at 57A0
.text:0000000000005813 quotearg_buffer endp
.text:0000000000005813
.text:0000000000005813 ; ---------------------------------------------------------------------------
.text:0000000000005814                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820 ; Attributes: info_from_lumina
.text:0000000000005820
.text:0000000000005820 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005820                 public quotearg_alloc_mem
.text:0000000000005820 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005820
.text:0000000000005820 var_5C          = dword ptr -5Ch
.text:0000000000005820 var_58          = qword ptr -58h
.text:0000000000005820 var_50          = qword ptr -50h
.text:0000000000005820 var_48          = qword ptr -48h
.text:0000000000005820 var_40          = qword ptr -40h
.text:0000000000005820
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 push    r15
.text:0000000000005822                 push    r14
.text:0000000000005824                 lea     rax, default_quoting_options
.text:000000000000582B                 push    r13
.text:000000000000582D                 push    r12
.text:000000000000582F                 mov     r12, rdx
.text:0000000000005832                 push    rbp
.text:0000000000005833                 push    rbx
.text:0000000000005834                 mov     rbx, rcx
.text:0000000000005837                 mov     r14, rdi
.text:000000000000583A                 mov     r15, rsi
.text:000000000000583D                 sub     rsp, 38h
.text:0000000000005841                 test    rcx, rcx
.text:0000000000005844                 cmovz   rbx, rax
.text:0000000000005848                 xor     ebp, ebp
.text:000000000000584A                 call    ___errno_location
.text:000000000000584F                 test    r12, r12
.text:0000000000005852                 mov     r13, rax
.text:0000000000005855                 mov     eax, [rax]
.text:0000000000005857                 setz    bpl
.text:000000000000585B                 or      ebp, [rbx+4]
.text:000000000000585E                 lea     r10, [rbx+8]
.text:0000000000005862                 sub     rsp, 8
.text:0000000000005866                 mov     r8d, [rbx]
.text:0000000000005869                 mov     rcx, r15
.text:000000000000586C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005870                 push    qword ptr [rbx+30h]
.text:0000000000005873                 mov     rdx, r14
.text:0000000000005876                 push    qword ptr [rbx+28h]
.text:0000000000005879                 push    r10
.text:000000000000587B                 xor     esi, esi
.text:000000000000587D                 mov     r9d, ebp
.text:0000000000005880                 xor     edi, edi
.text:0000000000005882                 mov     [rsp+88h+var_48], r10
.text:0000000000005887                 call    quotearg_buffer_restyled
.text:000000000000588C                 lea     rsi, [rax+1]
.text:0000000000005890                 mov     [rsp+88h+var_40], rax
.text:0000000000005895                 add     rsp, 20h
.text:0000000000005899                 mov     rdi, rsi
.text:000000000000589C                 mov     [rsp+68h+var_50], rsi
.text:00000000000058A1                 call    xmalloc
.text:00000000000058A6                 mov     [rsp+68h+var_58], rax
.text:00000000000058AB                 sub     rsp, 8
.text:00000000000058AF                 push    qword ptr [rbx+30h]
.text:00000000000058B2                 push    qword ptr [rbx+28h]
.text:00000000000058B5                 mov     r10, [rsp+80h+var_48]
.text:00000000000058BA                 mov     r9d, ebp
.text:00000000000058BD                 mov     r8d, [rbx]
.text:00000000000058C0                 mov     rcx, r15
.text:00000000000058C3                 mov     rdx, r14
.text:00000000000058C6                 mov     rdi, rax
.text:00000000000058C9                 push    r10
.text:00000000000058CB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000058D0                 call    quotearg_buffer_restyled
.text:00000000000058D5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000058D9                 add     rsp, 20h
.text:00000000000058DD                 test    r12, r12
.text:00000000000058E0                 mov     [r13+0], eax
.text:00000000000058E4                 jz      short loc_58EF
.text:00000000000058E6                 mov     r11, [rsp+68h+var_40]
.text:00000000000058EB                 mov     [r12], r11
.text:00000000000058EF
.text:00000000000058EF loc_58EF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000058EF                 mov     rax, [rsp+68h+var_58]
.text:00000000000058F4                 add     rsp, 38h
.text:00000000000058F8                 pop     rbx
.text:00000000000058F9                 pop     rbp
.text:00000000000058FA                 pop     r12
.text:00000000000058FC                 pop     r13
.text:00000000000058FE                 pop     r14
.text:0000000000005900                 pop     r15
.text:0000000000005902                 retn
.text:0000000000005902 ; } // starts at 5820
.text:0000000000005902 quotearg_alloc_mem endp
.text:0000000000005902
.text:0000000000005902 ; ---------------------------------------------------------------------------
.text:0000000000005903                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910
.text:0000000000005910                 public quotearg_alloc
.text:0000000000005910 quotearg_alloc  proc near
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 mov     rcx, rdx
.text:0000000000005913                 xor     edx, edx
.text:0000000000005915                 jmp     quotearg_alloc_mem
.text:0000000000005915 ; } // starts at 5910
.text:0000000000005915 quotearg_alloc  endp
.text:0000000000005915
.text:0000000000005915 ; ---------------------------------------------------------------------------
.text:000000000000591A                 align 20h
.text:0000000000005920
.text:0000000000005920 ; =============== S U B R O U T I N E =======================================
.text:0000000000005920
.text:0000000000005920 ; Attributes: info_from_lumina
.text:0000000000005920
.text:0000000000005920 ; void __cdecl quotearg_free()
.text:0000000000005920                 public quotearg_free
.text:0000000000005920 quotearg_free   proc near
.text:0000000000005920 ; __unwind {
.text:0000000000005920                 mov     eax, cs:nslots
.text:0000000000005926                 push    r12
.text:0000000000005928                 mov     r12, cs:slotvec
.text:000000000000592F                 push    rbp
.text:0000000000005930                 push    rbx
.text:0000000000005931                 cmp     eax, 1
.text:0000000000005934                 jle     short loc_5961
.text:0000000000005936                 sub     eax, 2
.text:0000000000005939                 lea     rbx, [r12+18h]
.text:000000000000593E                 shl     rax, 4
.text:0000000000005942                 lea     rbp, [r12+rax+28h]
.text:0000000000005947                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005950                 mov     rdi, [rbx]      ; ptr
.text:0000000000005953                 add     rbx, 10h
.text:0000000000005957                 call    _free
.text:000000000000595C                 cmp     rbx, rbp
.text:000000000000595F                 jnz     short loc_5950
.text:0000000000005961
.text:0000000000005961 loc_5961:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005961                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005966                 lea     rbx, slot0
.text:000000000000596D                 cmp     rdi, rbx
.text:0000000000005970                 jz      short loc_5989
.text:0000000000005972                 call    _free
.text:0000000000005977                 mov     cs:slotvec0, 100h
.text:0000000000005982                 mov     cs:off_20A098, rbx
.text:0000000000005989
.text:0000000000005989 loc_5989:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005989                 lea     rbx, slotvec0
.text:0000000000005990                 cmp     r12, rbx
.text:0000000000005993                 jz      short loc_59A4
.text:0000000000005995                 mov     rdi, r12        ; ptr
.text:0000000000005998                 call    _free
.text:000000000000599D                 mov     cs:slotvec, rbx
.text:00000000000059A4
.text:00000000000059A4 loc_59A4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000059A4                 pop     rbx
.text:00000000000059A5                 mov     cs:nslots, 1
.text:00000000000059AF                 pop     rbp
.text:00000000000059B0                 pop     r12
.text:00000000000059B2                 retn
.text:00000000000059B2 ; } // starts at 5920
.text:00000000000059B2 quotearg_free   endp
.text:00000000000059B2
.text:00000000000059B2 ; ---------------------------------------------------------------------------
.text:00000000000059B3                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0
.text:00000000000059C0                 public quotearg_n
.text:00000000000059C0 quotearg_n      proc near
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 lea     rcx, default_quoting_options
.text:00000000000059C7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000059CE                 jmp     quotearg_n_options
.text:00000000000059CE ; } // starts at 59C0
.text:00000000000059CE quotearg_n      endp
.text:00000000000059CE
.text:00000000000059CE ; ---------------------------------------------------------------------------
.text:00000000000059D3                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0
.text:00000000000059E0                 public quotearg_n_mem
.text:00000000000059E0 quotearg_n_mem  proc near
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 lea     rcx, default_quoting_options
.text:00000000000059E7                 jmp     quotearg_n_options
.text:00000000000059E7 ; } // starts at 59E0
.text:00000000000059E7 quotearg_n_mem  endp
.text:00000000000059E7
.text:00000000000059E7 ; ---------------------------------------------------------------------------
.text:00000000000059EC                 align 10h
.text:00000000000059F0
.text:00000000000059F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059F0
.text:00000000000059F0
.text:00000000000059F0                 public quotearg
.text:00000000000059F0 quotearg        proc near
.text:00000000000059F0 ; __unwind {
.text:00000000000059F0                 lea     rcx, default_quoting_options
.text:00000000000059F7                 mov     rsi, rdi
.text:00000000000059FA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A01                 xor     edi, edi
.text:0000000000005A03                 jmp     quotearg_n_options
.text:0000000000005A03 ; } // starts at 59F0
.text:0000000000005A03 quotearg        endp
.text:0000000000005A03
.text:0000000000005A03 ; ---------------------------------------------------------------------------
.text:0000000000005A08                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10
.text:0000000000005A10                 public quotearg_mem
.text:0000000000005A10 quotearg_mem    proc near
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 lea     rcx, default_quoting_options
.text:0000000000005A17                 mov     rdx, rsi
.text:0000000000005A1A                 mov     rsi, rdi
.text:0000000000005A1D                 xor     edi, edi
.text:0000000000005A1F                 jmp     quotearg_n_options
.text:0000000000005A1F ; } // starts at 5A10
.text:0000000000005A1F quotearg_mem    endp
.text:0000000000005A1F
.text:0000000000005A1F ; ---------------------------------------------------------------------------
.text:0000000000005A24                 align 10h
.text:0000000000005A30
.text:0000000000005A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A30
.text:0000000000005A30 ; Attributes: info_from_lumina
.text:0000000000005A30
.text:0000000000005A30 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005A30                 public quotearg_n_style
.text:0000000000005A30 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005A30
.text:0000000000005A30 var_48          = dword ptr -48h
.text:0000000000005A30 var_44          = qword ptr -44h
.text:0000000000005A30 var_3C          = qword ptr -3Ch
.text:0000000000005A30 var_34          = qword ptr -34h
.text:0000000000005A30 var_2C          = qword ptr -2Ch
.text:0000000000005A30 var_24          = qword ptr -24h
.text:0000000000005A30 var_1C          = qword ptr -1Ch
.text:0000000000005A30 var_14          = dword ptr -14h
.text:0000000000005A30 var_10          = qword ptr -10h
.text:0000000000005A30
.text:0000000000005A30 ; __unwind {
.text:0000000000005A30                 sub     rsp, 48h
.text:0000000000005A34                 mov     rax, rdx
.text:0000000000005A37                 mov     rdx, fs:28h
.text:0000000000005A40                 mov     [rsp+48h+var_10], rdx
.text:0000000000005A45                 xor     edx, edx
.text:0000000000005A47                 cmp     esi, 0Ah
.text:0000000000005A4A                 jz      short loc_5AB4
.text:0000000000005A4C                 mov     [rsp+48h+var_48], esi
.text:0000000000005A4F                 mov     rcx, rsp
.text:0000000000005A52                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A59                 mov     rsi, rax
.text:0000000000005A5C                 mov     [rsp+48h+var_44], 0
.text:0000000000005A65                 mov     [rsp+48h+var_3C], 0
.text:0000000000005A6E                 mov     [rsp+48h+var_34], 0
.text:0000000000005A77                 mov     [rsp+48h+var_2C], 0
.text:0000000000005A80                 mov     [rsp+48h+var_24], 0
.text:0000000000005A89                 mov     [rsp+48h+var_1C], 0
.text:0000000000005A92                 mov     [rsp+48h+var_14], 0
.text:0000000000005A9A                 call    quotearg_n_options
.text:0000000000005A9F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005AA4                 xor     rcx, fs:28h
.text:0000000000005AAD                 jnz     short loc_5AB9
.text:0000000000005AAF                 add     rsp, 48h
.text:0000000000005AB3                 retn
.text:0000000000005AB4 ; ---------------------------------------------------------------------------
.text:0000000000005AB4
.text:0000000000005AB4 loc_5AB4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005AB4                 call    _abort
.text:0000000000005AB9 ; ---------------------------------------------------------------------------
.text:0000000000005AB9
.text:0000000000005AB9 loc_5AB9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005AB9                 call    ___stack_chk_fail
.text:0000000000005AB9 ; } // starts at 5A30
.text:0000000000005AB9 quotearg_n_style endp
.text:0000000000005AB9
.text:0000000000005AB9 ; ---------------------------------------------------------------------------
.text:0000000000005ABE                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0 ; Attributes: info_from_lumina
.text:0000000000005AC0
.text:0000000000005AC0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005AC0                 public quotearg_n_style_mem
.text:0000000000005AC0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005AC0
.text:0000000000005AC0 var_48          = dword ptr -48h
.text:0000000000005AC0 var_44          = qword ptr -44h
.text:0000000000005AC0 var_3C          = qword ptr -3Ch
.text:0000000000005AC0 var_34          = qword ptr -34h
.text:0000000000005AC0 var_2C          = qword ptr -2Ch
.text:0000000000005AC0 var_24          = qword ptr -24h
.text:0000000000005AC0 var_1C          = qword ptr -1Ch
.text:0000000000005AC0 var_14          = dword ptr -14h
.text:0000000000005AC0 var_10          = qword ptr -10h
.text:0000000000005AC0
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 sub     rsp, 48h
.text:0000000000005AC4                 mov     rax, rdx
.text:0000000000005AC7                 mov     rdx, rcx
.text:0000000000005ACA                 mov     rcx, fs:28h
.text:0000000000005AD3                 mov     [rsp+48h+var_10], rcx
.text:0000000000005AD8                 xor     ecx, ecx
.text:0000000000005ADA                 cmp     esi, 0Ah
.text:0000000000005ADD                 jz      short loc_5B40
.text:0000000000005ADF                 mov     [rsp+48h+var_48], esi
.text:0000000000005AE2                 mov     rcx, rsp
.text:0000000000005AE5                 mov     rsi, rax
.text:0000000000005AE8                 mov     [rsp+48h+var_44], 0
.text:0000000000005AF1                 mov     [rsp+48h+var_3C], 0
.text:0000000000005AFA                 mov     [rsp+48h+var_34], 0
.text:0000000000005B03                 mov     [rsp+48h+var_2C], 0
.text:0000000000005B0C                 mov     [rsp+48h+var_24], 0
.text:0000000000005B15                 mov     [rsp+48h+var_1C], 0
.text:0000000000005B1E                 mov     [rsp+48h+var_14], 0
.text:0000000000005B26                 call    quotearg_n_options
.text:0000000000005B2B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005B30                 xor     rdx, fs:28h
.text:0000000000005B39                 jnz     short loc_5B45
.text:0000000000005B3B                 add     rsp, 48h
.text:0000000000005B3F                 retn
.text:0000000000005B40 ; ---------------------------------------------------------------------------
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005B40                 call    _abort
.text:0000000000005B45 ; ---------------------------------------------------------------------------
.text:0000000000005B45
.text:0000000000005B45 loc_5B45:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005B45                 call    ___stack_chk_fail
.text:0000000000005B45 ; } // starts at 5AC0
.text:0000000000005B45 quotearg_n_style_mem endp
.text:0000000000005B45
.text:0000000000005B45 ; ---------------------------------------------------------------------------
.text:0000000000005B4A                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50
.text:0000000000005B50                 public quotearg_style
.text:0000000000005B50 quotearg_style  proc near               ; CODE XREF: isdir+69↑p
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 mov     rdx, rsi
.text:0000000000005B53                 mov     esi, edi
.text:0000000000005B55                 xor     edi, edi
.text:0000000000005B57                 jmp     quotearg_n_style
.text:0000000000005B57 ; } // starts at 5B50
.text:0000000000005B57 quotearg_style  endp
.text:0000000000005B57
.text:0000000000005B57 ; ---------------------------------------------------------------------------
.text:0000000000005B5C                 align 20h
.text:0000000000005B60
.text:0000000000005B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B60
.text:0000000000005B60
.text:0000000000005B60                 public quotearg_style_mem
.text:0000000000005B60 quotearg_style_mem proc near
.text:0000000000005B60 ; __unwind {
.text:0000000000005B60                 mov     rcx, rdx
.text:0000000000005B63                 mov     rdx, rsi
.text:0000000000005B66                 mov     esi, edi
.text:0000000000005B68                 xor     edi, edi
.text:0000000000005B6A                 jmp     quotearg_n_style_mem
.text:0000000000005B6A ; } // starts at 5B60
.text:0000000000005B6A quotearg_style_mem endp
.text:0000000000005B6A
.text:0000000000005B6A ; ---------------------------------------------------------------------------
.text:0000000000005B6F                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70 ; Attributes: info_from_lumina
.text:0000000000005B70
.text:0000000000005B70 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005B70                 public quotearg_char_mem
.text:0000000000005B70 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005B70                                         ; quotearg_colon+C↓j ...
.text:0000000000005B70
.text:0000000000005B70 var_48          = xmmword ptr -48h
.text:0000000000005B70 var_38          = xmmword ptr -38h
.text:0000000000005B70 var_28          = xmmword ptr -28h
.text:0000000000005B70 var_18          = qword ptr -18h
.text:0000000000005B70 var_10          = qword ptr -10h
.text:0000000000005B70
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 sub     rsp, 48h
.text:0000000000005B74                 mov     ecx, edx
.text:0000000000005B76                 mov     rax, fs:28h
.text:0000000000005B7F                 mov     [rsp+48h+var_10], rax
.text:0000000000005B84                 xor     eax, eax
.text:0000000000005B86                 mov     rax, cs:qword_20A250
.text:0000000000005B8D                 mov     r8, rsp
.text:0000000000005B90                 and     ecx, 1Fh
.text:0000000000005B93                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005B9B                 mov     [rsp+48h+var_18], rax
.text:0000000000005BA0                 mov     eax, edx
.text:0000000000005BA2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005BA6                 shr     al, 5
.text:0000000000005BA9                 movzx   eax, al
.text:0000000000005BAC                 lea     r9, [r8+rax*4+8]
.text:0000000000005BB1                 movdqa  xmm0, cs:xmmword_20A230
.text:0000000000005BB9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005BBE                 movdqa  xmm0, cs:xmmword_20A240
.text:0000000000005BC6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005BCB                 mov     edx, [r9]
.text:0000000000005BCE                 mov     eax, edx
.text:0000000000005BD0                 shr     eax, cl
.text:0000000000005BD2                 not     eax
.text:0000000000005BD4                 and     eax, 1
.text:0000000000005BD7                 shl     eax, cl
.text:0000000000005BD9                 mov     rcx, r8
.text:0000000000005BDC                 xor     eax, edx
.text:0000000000005BDE                 mov     rdx, rsi
.text:0000000000005BE1                 mov     rsi, rdi
.text:0000000000005BE4                 mov     [r9], eax
.text:0000000000005BE7                 xor     edi, edi
.text:0000000000005BE9                 call    quotearg_n_options
.text:0000000000005BEE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005BF3                 xor     rsi, fs:28h
.text:0000000000005BFC                 jnz     short loc_5C03
.text:0000000000005BFE                 add     rsp, 48h
.text:0000000000005C02                 retn
.text:0000000000005C03 ; ---------------------------------------------------------------------------
.text:0000000000005C03
.text:0000000000005C03 loc_5C03:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005C03                 call    ___stack_chk_fail
.text:0000000000005C03 ; } // starts at 5B70
.text:0000000000005C03 quotearg_char_mem endp
.text:0000000000005C03
.text:0000000000005C03 ; ---------------------------------------------------------------------------
.text:0000000000005C08                 align 10h
.text:0000000000005C10
.text:0000000000005C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C10
.text:0000000000005C10
.text:0000000000005C10                 public quotearg_char
.text:0000000000005C10 quotearg_char   proc near
.text:0000000000005C10 ; __unwind {
.text:0000000000005C10                 movsx   edx, sil
.text:0000000000005C14                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C1B                 jmp     quotearg_char_mem
.text:0000000000005C1B ; } // starts at 5C10
.text:0000000000005C1B quotearg_char   endp
.text:0000000000005C1B
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20                 public quotearg_colon
.text:0000000000005C20 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 mov     edx, 3Ah ; ':'
.text:0000000000005C25                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C2C                 jmp     quotearg_char_mem
.text:0000000000005C2C ; } // starts at 5C20
.text:0000000000005C2C quotearg_colon  endp
.text:0000000000005C2C
.text:0000000000005C2C ; ---------------------------------------------------------------------------
.text:0000000000005C31                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40                 public quotearg_colon_mem
.text:0000000000005C40 quotearg_colon_mem proc near
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 mov     edx, 3Ah ; ':'
.text:0000000000005C45                 jmp     quotearg_char_mem
.text:0000000000005C45 ; } // starts at 5C40
.text:0000000000005C45 quotearg_colon_mem endp
.text:0000000000005C45
.text:0000000000005C45 ; ---------------------------------------------------------------------------
.text:0000000000005C4A                 align 10h
.text:0000000000005C50
.text:0000000000005C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C50
.text:0000000000005C50 ; Attributes: info_from_lumina
.text:0000000000005C50
.text:0000000000005C50 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005C50                 public quotearg_n_style_colon
.text:0000000000005C50 quotearg_n_style_colon proc near        ; CODE XREF: main+332↑p
.text:0000000000005C50                                         ; main+3B2↑p ...
.text:0000000000005C50
.text:0000000000005C50 var_48          = dword ptr -48h
.text:0000000000005C50 var_44          = qword ptr -44h
.text:0000000000005C50 var_3C          = qword ptr -3Ch
.text:0000000000005C50 var_34          = qword ptr -34h
.text:0000000000005C50 var_2C          = qword ptr -2Ch
.text:0000000000005C50 var_24          = qword ptr -24h
.text:0000000000005C50 var_1C          = qword ptr -1Ch
.text:0000000000005C50 var_14          = dword ptr -14h
.text:0000000000005C50 var_10          = qword ptr -10h
.text:0000000000005C50
.text:0000000000005C50 ; __unwind {
.text:0000000000005C50                 sub     rsp, 48h
.text:0000000000005C54                 mov     rax, rdx
.text:0000000000005C57                 mov     rdx, fs:28h
.text:0000000000005C60                 mov     [rsp+48h+var_10], rdx
.text:0000000000005C65                 xor     edx, edx
.text:0000000000005C67                 cmp     esi, 0Ah
.text:0000000000005C6A                 jz      short loc_5CD4
.text:0000000000005C6C                 mov     [rsp+48h+var_48], esi
.text:0000000000005C6F                 mov     rcx, rsp
.text:0000000000005C72                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C79                 mov     rsi, rax
.text:0000000000005C7C                 mov     [rsp+48h+var_44], 0
.text:0000000000005C85                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005C8E                 mov     [rsp+48h+var_34], 0
.text:0000000000005C97                 mov     [rsp+48h+var_2C], 0
.text:0000000000005CA0                 mov     [rsp+48h+var_24], 0
.text:0000000000005CA9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005CB2                 mov     [rsp+48h+var_14], 0
.text:0000000000005CBA                 call    quotearg_n_options
.text:0000000000005CBF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005CC4                 xor     rcx, fs:28h
.text:0000000000005CCD                 jnz     short loc_5CD9
.text:0000000000005CCF                 add     rsp, 48h
.text:0000000000005CD3                 retn
.text:0000000000005CD4 ; ---------------------------------------------------------------------------
.text:0000000000005CD4
.text:0000000000005CD4 loc_5CD4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005CD4                 call    _abort
.text:0000000000005CD9 ; ---------------------------------------------------------------------------
.text:0000000000005CD9
.text:0000000000005CD9 loc_5CD9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005CD9                 call    ___stack_chk_fail
.text:0000000000005CD9 ; } // starts at 5C50
.text:0000000000005CD9 quotearg_n_style_colon endp
.text:0000000000005CD9
.text:0000000000005CD9 ; ---------------------------------------------------------------------------
.text:0000000000005CDE                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CE0
.text:0000000000005CE0 ; Attributes: info_from_lumina
.text:0000000000005CE0
.text:0000000000005CE0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005CE0                 public quotearg_n_custom_mem
.text:0000000000005CE0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005CE0                                         ; quotearg_custom+12↓j ...
.text:0000000000005CE0
.text:0000000000005CE0 var_48          = xmmword ptr -48h
.text:0000000000005CE0 var_38          = xmmword ptr -38h
.text:0000000000005CE0 var_28          = xmmword ptr -28h
.text:0000000000005CE0 var_18          = qword ptr -18h
.text:0000000000005CE0 var_10          = qword ptr -10h
.text:0000000000005CE0
.text:0000000000005CE0 ; __unwind {
.text:0000000000005CE0                 sub     rsp, 48h
.text:0000000000005CE4                 mov     r9, rcx
.text:0000000000005CE7                 mov     rcx, cs:qword_20A250
.text:0000000000005CEE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005CF6                 mov     rax, fs:28h
.text:0000000000005CFF                 mov     [rsp+48h+var_10], rax
.text:0000000000005D04                 xor     eax, eax
.text:0000000000005D06                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005D0A                 test    rsi, rsi
.text:0000000000005D0D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005D12                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005D19                 movdqa  xmm0, cs:xmmword_20A230
.text:0000000000005D21                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005D26                 movdqa  xmm0, cs:xmmword_20A240
.text:0000000000005D2E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005D33                 jz      short loc_5D67
.text:0000000000005D35                 test    rdx, rdx
.text:0000000000005D38                 jz      short loc_5D67
.text:0000000000005D3A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000005D3F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005D44                 mov     rcx, rsp
.text:0000000000005D47                 mov     rdx, r8
.text:0000000000005D4A                 mov     rsi, r9
.text:0000000000005D4D                 call    quotearg_n_options
.text:0000000000005D52                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005D57                 xor     rdi, fs:28h
.text:0000000000005D60                 jnz     short loc_5D6C
.text:0000000000005D62                 add     rsp, 48h
.text:0000000000005D66                 retn
.text:0000000000005D67 ; ---------------------------------------------------------------------------
.text:0000000000005D67
.text:0000000000005D67 loc_5D67:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005D67                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005D67                 call    _abort
.text:0000000000005D6C ; ---------------------------------------------------------------------------
.text:0000000000005D6C
.text:0000000000005D6C loc_5D6C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000005D6C                 call    ___stack_chk_fail
.text:0000000000005D6C ; } // starts at 5CE0
.text:0000000000005D6C quotearg_n_custom_mem endp
.text:0000000000005D6C
.text:0000000000005D6C ; ---------------------------------------------------------------------------
.text:0000000000005D71                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80
.text:0000000000005D80                 public quotearg_n_custom
.text:0000000000005D80 quotearg_n_custom proc near
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D87                 jmp     quotearg_n_custom_mem
.text:0000000000005D87 ; } // starts at 5D80
.text:0000000000005D87 quotearg_n_custom endp
.text:0000000000005D87
.text:0000000000005D87 ; ---------------------------------------------------------------------------
.text:0000000000005D8C                 align 10h
.text:0000000000005D90
.text:0000000000005D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D90
.text:0000000000005D90
.text:0000000000005D90                 public quotearg_custom
.text:0000000000005D90 quotearg_custom proc near
.text:0000000000005D90 ; __unwind {
.text:0000000000005D90                 mov     rcx, rdx
.text:0000000000005D93                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D9A                 mov     rdx, rsi
.text:0000000000005D9D                 mov     rsi, rdi
.text:0000000000005DA0                 xor     edi, edi
.text:0000000000005DA2                 jmp     quotearg_n_custom_mem
.text:0000000000005DA2 ; } // starts at 5D90
.text:0000000000005DA2 quotearg_custom endp
.text:0000000000005DA2
.text:0000000000005DA2 ; ---------------------------------------------------------------------------
.text:0000000000005DA7                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DB0
.text:0000000000005DB0
.text:0000000000005DB0                 public quotearg_custom_mem
.text:0000000000005DB0 quotearg_custom_mem proc near
.text:0000000000005DB0 ; __unwind {
.text:0000000000005DB0                 mov     r8, rcx
.text:0000000000005DB3                 mov     rcx, rdx
.text:0000000000005DB6                 mov     rdx, rsi
.text:0000000000005DB9                 mov     rsi, rdi
.text:0000000000005DBC                 xor     edi, edi
.text:0000000000005DBE                 jmp     quotearg_n_custom_mem
.text:0000000000005DBE ; } // starts at 5DB0
.text:0000000000005DBE quotearg_custom_mem endp
.text:0000000000005DBE
.text:0000000000005DBE ; ---------------------------------------------------------------------------
.text:0000000000005DC3                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0
.text:0000000000005DD0                 public quote_n_mem
.text:0000000000005DD0 quote_n_mem     proc near
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 lea     rcx, quote_quoting_options
.text:0000000000005DD7                 jmp     quotearg_n_options
.text:0000000000005DD7 ; } // starts at 5DD0
.text:0000000000005DD7 quote_n_mem     endp
.text:0000000000005DD7
.text:0000000000005DD7 ; ---------------------------------------------------------------------------
.text:0000000000005DDC                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0
.text:0000000000005DE0                 public quote_mem
.text:0000000000005DE0 quote_mem       proc near
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 lea     rcx, quote_quoting_options
.text:0000000000005DE7                 mov     rdx, rsi
.text:0000000000005DEA                 mov     rsi, rdi
.text:0000000000005DED                 xor     edi, edi
.text:0000000000005DEF                 jmp     quotearg_n_options
.text:0000000000005DEF ; } // starts at 5DE0
.text:0000000000005DEF quote_mem       endp
.text:0000000000005DEF
.text:0000000000005DEF ; ---------------------------------------------------------------------------
.text:0000000000005DF4                 align 20h
.text:0000000000005E00
.text:0000000000005E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E00
.text:0000000000005E00
.text:0000000000005E00                 public quote_n
.text:0000000000005E00 quote_n         proc near
.text:0000000000005E00 ; __unwind {
.text:0000000000005E00                 lea     rcx, quote_quoting_options
.text:0000000000005E07                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E0E                 jmp     quotearg_n_options
.text:0000000000005E0E ; } // starts at 5E00
.text:0000000000005E0E quote_n         endp
.text:0000000000005E0E
.text:0000000000005E0E ; ---------------------------------------------------------------------------
.text:0000000000005E13                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20
.text:0000000000005E20                 public quote
.text:0000000000005E20 quote           proc near
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 lea     rcx, quote_quoting_options
.text:0000000000005E27                 mov     rsi, rdi
.text:0000000000005E2A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E31                 xor     edi, edi
.text:0000000000005E33                 jmp     quotearg_n_options
.text:0000000000005E33 ; } // starts at 5E20
.text:0000000000005E33 quote           endp
.text:0000000000005E33
.text:0000000000005E33 ; ---------------------------------------------------------------------------
.text:0000000000005E38                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40
.text:0000000000005E40 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:0000000000005E40 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:0000000000005E40
.text:0000000000005E40 var_158         = qword ptr -158h
.text:0000000000005E40 var_150         = qword ptr -150h
.text:0000000000005E40 stat_buf        = stat ptr -0C8h
.text:0000000000005E40 var_30          = qword ptr -30h
.text:0000000000005E40
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 push    r13
.text:0000000000005E42                 push    r12
.text:0000000000005E44                 mov     r13d, edi
.text:0000000000005E47                 push    rbp
.text:0000000000005E48                 push    rbx
.text:0000000000005E49                 mov     rdi, rsi
.text:0000000000005E4C                 mov     ebp, edx
.text:0000000000005E4E                 mov     r12, rcx
.text:0000000000005E51                 sub     rsp, 138h
.text:0000000000005E58                 mov     rax, fs:28h
.text:0000000000005E61                 mov     [rsp+158h+var_30], rax
.text:0000000000005E69                 xor     eax, eax
.text:0000000000005E6B                 call    dir_name
.text:0000000000005E70                 mov     rcx, rsp        ; stat_buf
.text:0000000000005E73                 mov     r8d, 100h       ; flag
.text:0000000000005E79                 mov     rdx, rax        ; filename
.text:0000000000005E7C                 mov     esi, r13d       ; fildes
.text:0000000000005E7F                 mov     edi, 1          ; ver
.text:0000000000005E84                 mov     rbx, rax
.text:0000000000005E87                 call    ___fxstatat
.text:0000000000005E8C                 test    eax, eax
.text:0000000000005E8E                 jnz     loc_5F40
.text:0000000000005E94
.text:0000000000005E94 loc_5E94:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:0000000000005E94                 mov     rdi, rbx        ; ptr
.text:0000000000005E97                 call    _free
.text:0000000000005E9C                 mov     rdi, r12
.text:0000000000005E9F                 call    dir_name
.text:0000000000005EA4                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:0000000000005EAC                 mov     r8d, 100h       ; flag
.text:0000000000005EB2                 mov     rdx, rax        ; filename
.text:0000000000005EB5                 mov     esi, ebp        ; fildes
.text:0000000000005EB7                 mov     edi, 1          ; ver
.text:0000000000005EBC                 mov     rbx, rax
.text:0000000000005EBF                 call    ___fxstatat
.text:0000000000005EC4                 test    eax, eax
.text:0000000000005EC6                 jnz     short loc_5F18
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:0000000000005EC8                 xor     ebp, ebp
.text:0000000000005ECA                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:0000000000005ED2                 cmp     [rsp+158h+var_150], rax
.text:0000000000005ED7                 jnz     short loc_5EE9
.text:0000000000005ED9                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:0000000000005EE1                 cmp     [rsp+158h+var_158], rax
.text:0000000000005EE5                 setz    bpl
.text:0000000000005EE9
.text:0000000000005EE9 loc_5EE9:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:0000000000005EE9                 mov     rdi, rbx        ; ptr
.text:0000000000005EEC                 call    _free
.text:0000000000005EF1                 mov     rdx, [rsp+158h+var_30]
.text:0000000000005EF9                 xor     rdx, fs:28h
.text:0000000000005F02                 mov     eax, ebp
.text:0000000000005F04                 jnz     short loc_5F62
.text:0000000000005F06                 add     rsp, 138h
.text:0000000000005F0D                 pop     rbx
.text:0000000000005F0E                 pop     rbp
.text:0000000000005F0F                 pop     r12
.text:0000000000005F11                 pop     r13
.text:0000000000005F13                 retn
.text:0000000000005F13 ; ---------------------------------------------------------------------------
.text:0000000000005F14                 align 8
.text:0000000000005F18
.text:0000000000005F18 loc_5F18:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:0000000000005F18                 call    ___errno_location
.text:0000000000005F1D                 mov     esi, [rax]      ; errnum
.text:0000000000005F1F                 lea     rdx, format+4   ; format
.text:0000000000005F26                 mov     rcx, rbx
.text:0000000000005F29                 mov     edi, 1          ; status
.text:0000000000005F2E                 xor     eax, eax
.text:0000000000005F30                 call    _error
.text:0000000000005F35                 jmp     short loc_5EC8
.text:0000000000005F35 ; ---------------------------------------------------------------------------
.text:0000000000005F37                 align 20h
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:0000000000005F40                 call    ___errno_location
.text:0000000000005F45                 mov     esi, [rax]      ; errnum
.text:0000000000005F47                 lea     rdx, format+4   ; format
.text:0000000000005F4E                 mov     rcx, rbx
.text:0000000000005F51                 mov     edi, 1          ; status
.text:0000000000005F56                 xor     eax, eax
.text:0000000000005F58                 call    _error
.text:0000000000005F5D                 jmp     loc_5E94
.text:0000000000005F62 ; ---------------------------------------------------------------------------
.text:0000000000005F62
.text:0000000000005F62 loc_5F62:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:0000000000005F62                 call    ___stack_chk_fail
.text:0000000000005F62 ; } // starts at 5E40
.text:0000000000005F62 same_nameat_part_0 endp
.text:0000000000005F62
.text:0000000000005F62 ; ---------------------------------------------------------------------------
.text:0000000000005F67                 align 10h
.text:0000000000005F70
.text:0000000000005F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F70
.text:0000000000005F70
.text:0000000000005F70                 public same_nameat
.text:0000000000005F70 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:0000000000005F70
.text:0000000000005F70 fildes          = dword ptr -3Ch
.text:0000000000005F70
.text:0000000000005F70 ; __unwind {
.text:0000000000005F70                 push    r15
.text:0000000000005F72                 push    r14
.text:0000000000005F74                 mov     r15d, edx
.text:0000000000005F77                 push    r13
.text:0000000000005F79                 push    r12
.text:0000000000005F7B                 push    rbp
.text:0000000000005F7C                 push    rbx
.text:0000000000005F7D                 mov     rbp, rcx
.text:0000000000005F80                 mov     rbx, rsi
.text:0000000000005F83                 sub     rsp, 18h
.text:0000000000005F87                 mov     [rsp+48h+fildes], edi
.text:0000000000005F8B                 mov     rdi, rsi
.text:0000000000005F8E                 call    last_component
.text:0000000000005F93                 mov     rdi, rbp
.text:0000000000005F96                 mov     r12, rax
.text:0000000000005F99                 call    last_component
.text:0000000000005F9E                 mov     rdi, r12
.text:0000000000005FA1                 mov     r13, rax
.text:0000000000005FA4                 call    base_len
.text:0000000000005FA9                 mov     rdi, r13
.text:0000000000005FAC                 mov     r14, rax
.text:0000000000005FAF                 call    base_len
.text:0000000000005FB4                 cmp     r14, rax
.text:0000000000005FB7                 jz      short loc_5FD0
.text:0000000000005FB9
.text:0000000000005FB9 loc_5FB9:                               ; CODE XREF: same_nameat+70↓j
.text:0000000000005FB9                 add     rsp, 18h
.text:0000000000005FBD                 xor     eax, eax
.text:0000000000005FBF                 pop     rbx
.text:0000000000005FC0                 pop     rbp
.text:0000000000005FC1                 pop     r12
.text:0000000000005FC3                 pop     r13
.text:0000000000005FC5                 pop     r14
.text:0000000000005FC7                 pop     r15
.text:0000000000005FC9                 retn
.text:0000000000005FC9 ; ---------------------------------------------------------------------------
.text:0000000000005FCA                 align 10h
.text:0000000000005FD0
.text:0000000000005FD0 loc_5FD0:                               ; CODE XREF: same_nameat+47↑j
.text:0000000000005FD0                 mov     rdx, r14        ; n
.text:0000000000005FD3                 mov     rsi, r13        ; s2
.text:0000000000005FD6                 mov     rdi, r12        ; s1
.text:0000000000005FD9                 call    _memcmp
.text:0000000000005FDE                 test    eax, eax
.text:0000000000005FE0                 jnz     short loc_5FB9
.text:0000000000005FE2                 mov     edi, [rsp+48h+fildes] ; fildes
.text:0000000000005FE6                 add     rsp, 18h
.text:0000000000005FEA                 mov     rcx, rbp
.text:0000000000005FED                 mov     edx, r15d
.text:0000000000005FF0                 mov     rsi, rbx
.text:0000000000005FF3                 pop     rbx
.text:0000000000005FF4                 pop     rbp
.text:0000000000005FF5                 pop     r12
.text:0000000000005FF7                 pop     r13
.text:0000000000005FF9                 pop     r14
.text:0000000000005FFB                 pop     r15
.text:0000000000005FFD                 jmp     same_nameat_part_0
.text:0000000000005FFD ; } // starts at 5F70
.text:0000000000005FFD same_nameat     endp
.text:0000000000005FFD
.text:0000000000005FFD ; ---------------------------------------------------------------------------
.text:0000000000006002                 align 10h
.text:0000000000006010
.text:0000000000006010 ; =============== S U B R O U T I N E =======================================
.text:0000000000006010
.text:0000000000006010
.text:0000000000006010                 public same_name
.text:0000000000006010 same_name       proc near               ; CODE XREF: triple_compare+24↑p
.text:0000000000006010 ; __unwind {
.text:0000000000006010                 mov     edx, 0FFFFFF9Ch
.text:0000000000006015                 mov     rcx, rsi
.text:0000000000006018                 mov     rsi, rdi
.text:000000000000601B                 mov     edi, edx
.text:000000000000601D                 jmp     same_nameat
.text:000000000000601D ; } // starts at 6010
.text:000000000000601D same_name       endp
.text:000000000000601D
.text:000000000000601D ; ---------------------------------------------------------------------------
.text:0000000000006022                 align 10h
.text:0000000000006030
.text:0000000000006030 ; =============== S U B R O U T I N E =======================================
.text:0000000000006030
.text:0000000000006030
.text:0000000000006030 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000006030                 public version_etc_arn
.text:0000000000006030 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_646B↓j
.text:0000000000006030                                         ; version_etc_va:loc_64BB↓p ...
.text:0000000000006030
.text:0000000000006030 var_58          = qword ptr -58h
.text:0000000000006030 var_50          = qword ptr -50h
.text:0000000000006030 var_48          = qword ptr -48h
.text:0000000000006030 var_40          = qword ptr -40h
.text:0000000000006030
.text:0000000000006030 ; __unwind {
.text:0000000000006030                 push    r15
.text:0000000000006032                 push    r14
.text:0000000000006034                 push    r13
.text:0000000000006036                 push    r12
.text:0000000000006038                 mov     r12, r9
.text:000000000000603B                 push    rbp
.text:000000000000603C                 push    rbx
.text:000000000000603D                 mov     rbp, rdi
.text:0000000000006040                 mov     rbx, r8
.text:0000000000006043                 sub     rsp, 28h
.text:0000000000006047                 test    rsi, rsi
.text:000000000000604A                 jz      loc_6168
.text:0000000000006050                 mov     r8, rdx
.text:0000000000006053                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000605A                 mov     r9, rcx
.text:000000000000605D                 xor     eax, eax
.text:000000000000605F                 mov     rcx, rsi
.text:0000000000006062                 mov     esi, 1
.text:0000000000006067                 call    ___fprintf_chk
.text:000000000000606C
.text:000000000000606C loc_606C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000606C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000006073                 xor     edi, edi        ; domainname
.text:0000000000006075                 mov     edx, 5          ; category
.text:000000000000607A                 call    _dcgettext
.text:000000000000607F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000006086                 mov     rcx, rax
.text:0000000000006089                 mov     r8d, 7E3h
.text:000000000000608F                 mov     esi, 1
.text:0000000000006094                 mov     rdi, rbp
.text:0000000000006097                 xor     eax, eax
.text:0000000000006099                 call    ___fprintf_chk
.text:000000000000609E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000060A5                 xor     edi, edi        ; domainname
.text:00000000000060A7                 mov     edx, 5          ; category
.text:00000000000060AC                 call    _dcgettext
.text:00000000000060B1                 mov     rsi, rbp        ; stream
.text:00000000000060B4                 mov     rdi, rax        ; s
.text:00000000000060B7                 call    _fputs_unlocked
.text:00000000000060BC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000060C0                 ja      def_60D4        ; jumptable 00000000000060D4 default case
.text:00000000000060C6                 lea     rdx, jpt_60D4
.text:00000000000060CD                 movsxd  rax, ds:(jpt_60D4 - 7DE8h)[rdx+r12*4]
.text:00000000000060D1                 add     rax, rdx
.text:00000000000060D4                 jmp     rax             ; switch jump
.text:00000000000060D4 ; ---------------------------------------------------------------------------
.text:00000000000060D6                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000060E0                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:00000000000060E0                 mov     r9, [rbx+38h]   ; jumptable 00000000000060D4 case 8
.text:00000000000060E4                 mov     rax, [rbx+10h]
.text:00000000000060E8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000060EF                 mov     r8, [rbx+8]
.text:00000000000060F3                 mov     edx, 5          ; category
.text:00000000000060F8                 xor     edi, edi        ; domainname
.text:00000000000060FA                 mov     r13, [rbx+30h]
.text:00000000000060FE                 mov     r12, [rbx+28h]
.text:0000000000006102                 mov     [rsp+58h+var_48], r9
.text:0000000000006107                 mov     r15, [rbx+20h]
.text:000000000000610B                 mov     r14, [rbx+18h]
.text:000000000000610F                 mov     [rsp+58h+var_58], rax
.text:0000000000006113                 mov     [rsp+58h+var_50], r8
.text:0000000000006118                 mov     rbx, [rbx]
.text:000000000000611B                 call    _dcgettext
.text:0000000000006120                 sub     rsp, 8
.text:0000000000006124
.text:0000000000006124 loc_6124:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006124                 mov     r9, [rsp+60h+var_48]
.text:0000000000006129                 mov     rdx, rax
.text:000000000000612C                 mov     rcx, rbx
.text:000000000000612F                 mov     esi, 1
.text:0000000000006134                 mov     rdi, rbp
.text:0000000000006137                 xor     eax, eax
.text:0000000000006139                 push    r9
.text:000000000000613B                 push    r13
.text:000000000000613D                 push    r12
.text:000000000000613F                 push    r15
.text:0000000000006141                 push    r14
.text:0000000000006143                 mov     r9, [rsp+88h+var_58]
.text:0000000000006148                 mov     r8, [rsp+88h+var_50]
.text:000000000000614D                 call    ___fprintf_chk
.text:0000000000006152                 add     rsp, 30h
.text:0000000000006156
.text:0000000000006156 loc_6156:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006156                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:0000000000006156                 add     rsp, 28h        ; jumptable 00000000000060D4 case 0
.text:000000000000615A                 pop     rbx
.text:000000000000615B                 pop     rbp
.text:000000000000615C                 pop     r12
.text:000000000000615E                 pop     r13
.text:0000000000006160                 pop     r14
.text:0000000000006162                 pop     r15
.text:0000000000006164                 retn
.text:0000000000006164 ; ---------------------------------------------------------------------------
.text:0000000000006165                 align 8
.text:0000000000006168
.text:0000000000006168 loc_6168:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000006168                 mov     r8, rcx
.text:000000000000616B                 mov     rcx, rdx
.text:000000000000616E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000006175                 mov     esi, 1
.text:000000000000617A                 xor     eax, eax
.text:000000000000617C                 call    ___fprintf_chk
.text:0000000000006181                 jmp     loc_606C
.text:0000000000006181 ; ---------------------------------------------------------------------------
.text:0000000000006186                 align 10h
.text:0000000000006190
.text:0000000000006190 loc_6190:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006190                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:0000000000006190                 mov     r10, [rbx+40h]  ; jumptable 00000000000060D4 case 9
.text:0000000000006194                 mov     r9, [rbx+38h]
.text:0000000000006198                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000619F                 mov     rax, [rbx+10h]
.text:00000000000061A3                 mov     r8, [rbx+8]
.text:00000000000061A7                 mov     edx, 5          ; category
.text:00000000000061AC                 mov     r13, [rbx+30h]
.text:00000000000061B0                 mov     r12, [rbx+28h]
.text:00000000000061B4                 mov     r15, [rbx+20h]
.text:00000000000061B8                 mov     r14, [rbx+18h]
.text:00000000000061BC                 mov     rbx, [rbx]
.text:00000000000061BF                 mov     [rsp+58h+var_40], r10
.text:00000000000061C4                 mov     [rsp+58h+var_48], r9
.text:00000000000061C9                 mov     [rsp+58h+var_58], rax
.text:00000000000061CD                 mov     [rsp+58h+var_50], r8
.text:00000000000061D2
.text:00000000000061D2 loc_61D2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000061D2                 xor     edi, edi        ; domainname
.text:00000000000061D4                 call    _dcgettext
.text:00000000000061D9                 mov     r10, [rsp+58h+var_40]
.text:00000000000061DE                 push    r10
.text:00000000000061E0                 jmp     loc_6124
.text:00000000000061E0 ; ---------------------------------------------------------------------------
.text:00000000000061E5                 align 8
.text:00000000000061E8
.text:00000000000061E8 loc_61E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000061E8                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:00000000000061E8                 mov     rbx, [rbx]      ; jumptable 00000000000060D4 case 1
.text:00000000000061EB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000061F2                 mov     edx, 5          ; category
.text:00000000000061F7                 xor     edi, edi        ; domainname
.text:00000000000061F9                 call    _dcgettext
.text:00000000000061FE                 add     rsp, 28h
.text:0000000000006202                 mov     rcx, rbx
.text:0000000000006205                 mov     rdi, rbp
.text:0000000000006208                 pop     rbx
.text:0000000000006209                 pop     rbp
.text:000000000000620A                 pop     r12
.text:000000000000620C                 pop     r13
.text:000000000000620E                 pop     r14
.text:0000000000006210                 pop     r15
.text:0000000000006212                 mov     rdx, rax
.text:0000000000006215                 mov     esi, 1
.text:000000000000621A                 xor     eax, eax
.text:000000000000621C                 jmp     ___fprintf_chk
.text:000000000000621C ; ---------------------------------------------------------------------------
.text:0000000000006221                 align 8
.text:0000000000006228
.text:0000000000006228 loc_6228:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006228                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:0000000000006228                 mov     r12, [rbx+8]    ; jumptable 00000000000060D4 case 2
.text:000000000000622C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000006233                 mov     rbx, [rbx]
.text:0000000000006236                 mov     edx, 5          ; category
.text:000000000000623B                 xor     edi, edi        ; domainname
.text:000000000000623D                 call    _dcgettext
.text:0000000000006242                 add     rsp, 28h
.text:0000000000006246                 mov     r8, r12
.text:0000000000006249                 mov     rcx, rbx
.text:000000000000624C                 mov     rdi, rbp
.text:000000000000624F                 mov     rdx, rax
.text:0000000000006252                 mov     esi, 1
.text:0000000000006257                 pop     rbx
.text:0000000000006258                 pop     rbp
.text:0000000000006259                 pop     r12
.text:000000000000625B                 pop     r13
.text:000000000000625D                 pop     r14
.text:000000000000625F                 pop     r15
.text:0000000000006261                 xor     eax, eax
.text:0000000000006263                 jmp     ___fprintf_chk
.text:0000000000006263 ; ---------------------------------------------------------------------------
.text:0000000000006268                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006270                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:0000000000006270                 mov     r13, [rbx+10h]  ; jumptable 00000000000060D4 case 3
.text:0000000000006274                 mov     r12, [rbx+8]
.text:0000000000006278                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000627F                 mov     rbx, [rbx]
.text:0000000000006282                 mov     edx, 5          ; category
.text:0000000000006287                 xor     edi, edi        ; domainname
.text:0000000000006289                 call    _dcgettext
.text:000000000000628E                 add     rsp, 28h
.text:0000000000006292                 mov     r9, r13
.text:0000000000006295                 mov     r8, r12
.text:0000000000006298                 mov     rcx, rbx
.text:000000000000629B                 mov     rdi, rbp
.text:000000000000629E                 mov     rdx, rax
.text:00000000000062A1                 pop     rbx
.text:00000000000062A2                 pop     rbp
.text:00000000000062A3                 pop     r12
.text:00000000000062A5                 pop     r13
.text:00000000000062A7                 pop     r14
.text:00000000000062A9                 pop     r15
.text:00000000000062AB                 mov     esi, 1
.text:00000000000062B0                 xor     eax, eax
.text:00000000000062B2                 jmp     ___fprintf_chk
.text:00000000000062B2 ; ---------------------------------------------------------------------------
.text:00000000000062B7                 align 20h
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000062C0                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:00000000000062C0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000060D4 case 4
.text:00000000000062C7                 mov     edx, 5          ; category
.text:00000000000062CC                 xor     edi, edi        ; domainname
.text:00000000000062CE                 mov     r14, [rbx+18h]
.text:00000000000062D2                 mov     r13, [rbx+10h]
.text:00000000000062D6                 mov     r12, [rbx+8]
.text:00000000000062DA                 mov     rbx, [rbx]
.text:00000000000062DD                 call    _dcgettext
.text:00000000000062E2                 sub     rsp, 8
.text:00000000000062E6
.text:00000000000062E6 loc_62E6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000062E6                 push    r14
.text:00000000000062E8                 mov     rdx, rax
.text:00000000000062EB                 mov     r9, r13
.text:00000000000062EE                 mov     r8, r12
.text:00000000000062F1                 mov     rcx, rbx
.text:00000000000062F4                 mov     rdi, rbp
.text:00000000000062F7                 mov     esi, 1
.text:00000000000062FC                 xor     eax, eax
.text:00000000000062FE                 call    ___fprintf_chk
.text:0000000000006303                 pop     rax
.text:0000000000006304                 pop     rdx
.text:0000000000006305                 add     rsp, 28h
.text:0000000000006309                 pop     rbx
.text:000000000000630A                 pop     rbp
.text:000000000000630B                 pop     r12
.text:000000000000630D                 pop     r13
.text:000000000000630F                 pop     r14
.text:0000000000006311                 pop     r15
.text:0000000000006313                 retn
.text:0000000000006313 ; ---------------------------------------------------------------------------
.text:0000000000006314                 align 8
.text:0000000000006318
.text:0000000000006318 loc_6318:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006318                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:0000000000006318                 mov     r15, [rbx+20h]  ; jumptable 00000000000060D4 case 5
.text:000000000000631C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006323                 mov     edx, 5          ; category
.text:0000000000006328                 xor     edi, edi        ; domainname
.text:000000000000632A                 mov     r14, [rbx+18h]
.text:000000000000632E                 mov     r13, [rbx+10h]
.text:0000000000006332                 mov     r12, [rbx+8]
.text:0000000000006336                 mov     rbx, [rbx]
.text:0000000000006339                 call    _dcgettext
.text:000000000000633E                 push    r15
.text:0000000000006340                 jmp     short loc_62E6
.text:0000000000006340 ; ---------------------------------------------------------------------------
.text:0000000000006342                 align 8
.text:0000000000006348
.text:0000000000006348 loc_6348:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006348                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:0000000000006348                 mov     r8, [rbx+8]     ; jumptable 00000000000060D4 case 6
.text:000000000000634C                 mov     r12, [rbx+28h]
.text:0000000000006350                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006357                 mov     r15, [rbx+20h]
.text:000000000000635B                 mov     r14, [rbx+18h]
.text:000000000000635F                 mov     edx, 5          ; category
.text:0000000000006364                 mov     r13, [rbx+10h]
.text:0000000000006368                 xor     edi, edi        ; domainname
.text:000000000000636A                 mov     rbx, [rbx]
.text:000000000000636D                 mov     [rsp+58h+var_58], r8
.text:0000000000006371                 call    _dcgettext
.text:0000000000006376                 sub     rsp, 8
.text:000000000000637A                 mov     r9, r13
.text:000000000000637D                 push    r12
.text:000000000000637F                 push    r15
.text:0000000000006381                 push    r14
.text:0000000000006383
.text:0000000000006383 loc_6383:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006383                 mov     r8, [rsp+78h+var_58]
.text:0000000000006388                 mov     rcx, rbx
.text:000000000000638B                 mov     rdx, rax
.text:000000000000638E                 mov     rdi, rbp
.text:0000000000006391                 mov     esi, 1
.text:0000000000006396                 xor     eax, eax
.text:0000000000006398                 call    ___fprintf_chk
.text:000000000000639D                 add     rsp, 20h
.text:00000000000063A1                 add     rsp, 28h
.text:00000000000063A5                 pop     rbx
.text:00000000000063A6                 pop     rbp
.text:00000000000063A7                 pop     r12
.text:00000000000063A9                 pop     r13
.text:00000000000063AB                 pop     r14
.text:00000000000063AD                 pop     r15
.text:00000000000063AF                 retn
.text:00000000000063B0 ; ---------------------------------------------------------------------------
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000063B0                                         ; DATA XREF: .rodata:jpt_60D4↓o
.text:00000000000063B0                 mov     r9, [rbx+10h]   ; jumptable 00000000000060D4 case 7
.text:00000000000063B4                 mov     r13, [rbx+30h]
.text:00000000000063B8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000063BF                 mov     r12, [rbx+28h]
.text:00000000000063C3                 mov     r15, [rbx+20h]
.text:00000000000063C7                 mov     edx, 5          ; category
.text:00000000000063CC                 mov     r14, [rbx+18h]
.text:00000000000063D0                 mov     r8, [rbx+8]
.text:00000000000063D4                 xor     edi, edi        ; domainname
.text:00000000000063D6                 mov     [rsp+58h+var_50], r9
.text:00000000000063DB                 mov     rbx, [rbx]
.text:00000000000063DE                 mov     [rsp+58h+var_58], r8
.text:00000000000063E2                 call    _dcgettext
.text:00000000000063E7                 push    r13
.text:00000000000063E9                 push    r12
.text:00000000000063EB                 push    r15
.text:00000000000063ED                 push    r14
.text:00000000000063EF                 mov     r9, [rsp+78h+var_50]
.text:00000000000063F4                 jmp     short loc_6383
.text:00000000000063F4 ; ---------------------------------------------------------------------------
.text:00000000000063F6                 align 20h
.text:0000000000006400
.text:0000000000006400 def_60D4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006400                 mov     r10, [rbx+40h]  ; jumptable 00000000000060D4 default case
.text:0000000000006404                 mov     r9, [rbx+38h]
.text:0000000000006408                 mov     edx, 5
.text:000000000000640D                 mov     rax, [rbx+10h]
.text:0000000000006411                 mov     r8, [rbx+8]
.text:0000000000006415                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000641C                 mov     r13, [rbx+30h]
.text:0000000000006420                 mov     r12, [rbx+28h]
.text:0000000000006424                 mov     r15, [rbx+20h]
.text:0000000000006428                 mov     r14, [rbx+18h]
.text:000000000000642C                 mov     [rsp+58h+var_40], r10
.text:0000000000006431                 mov     [rsp+58h+var_48], r9
.text:0000000000006436                 mov     [rsp+58h+var_58], rax
.text:000000000000643A                 mov     [rsp+58h+var_50], r8
.text:000000000000643F                 mov     rbx, [rbx]
.text:0000000000006442                 jmp     loc_61D2
.text:0000000000006442 ; } // starts at 6030
.text:0000000000006442 version_etc_arn endp
.text:0000000000006442
.text:0000000000006442 ; ---------------------------------------------------------------------------
.text:0000000000006447                 align 10h
.text:0000000000006450
.text:0000000000006450 ; =============== S U B R O U T I N E =======================================
.text:0000000000006450
.text:0000000000006450 ; Attributes: info_from_lumina
.text:0000000000006450
.text:0000000000006450 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006450                 public version_etc_ar
.text:0000000000006450 version_etc_ar  proc near
.text:0000000000006450 ; __unwind {
.text:0000000000006450                 xor     r9d, r9d
.text:0000000000006453                 cmp     qword ptr [r8], 0
.text:0000000000006457                 jz      short loc_646B
.text:0000000000006459                 nop     dword ptr [rax+00000000h]
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006460                 add     r9, 1
.text:0000000000006464                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006469                 jnz     short loc_6460
.text:000000000000646B
.text:000000000000646B loc_646B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000646B                 jmp     version_etc_arn
.text:000000000000646B ; } // starts at 6450
.text:000000000000646B version_etc_ar  endp
.text:000000000000646B
.text:0000000000006470
.text:0000000000006470 ; =============== S U B R O U T I N E =======================================
.text:0000000000006470
.text:0000000000006470 ; Attributes: info_from_lumina
.text:0000000000006470
.text:0000000000006470 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000006470                 public version_etc_va
.text:0000000000006470 version_etc_va  proc near
.text:0000000000006470
.text:0000000000006470 authtab         = qword ptr -68h
.text:0000000000006470 var_10          = qword ptr -10h
.text:0000000000006470
.text:0000000000006470 ; __unwind {
.text:0000000000006470                 sub     rsp, 68h
.text:0000000000006474                 mov     r10, r8
.text:0000000000006477                 xor     r9d, r9d
.text:000000000000647A                 mov     rax, fs:28h
.text:0000000000006483                 mov     [rsp+68h+var_10], rax
.text:0000000000006488                 xor     eax, eax
.text:000000000000648A                 mov     r8, rsp
.text:000000000000648D                 nop     dword ptr [rax]
.text:0000000000006490
.text:0000000000006490 loc_6490:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006490                 mov     eax, [r10]
.text:0000000000006493                 cmp     eax, 2Fh ; '/'
.text:0000000000006496                 ja      short loc_64DA
.text:0000000000006498                 mov     r11d, eax
.text:000000000000649B                 add     r11, [r10+10h]
.text:000000000000649F                 add     eax, 8
.text:00000000000064A2                 mov     [r10], eax
.text:00000000000064A5
.text:00000000000064A5 loc_64A5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000064A5                 mov     rax, [r11]
.text:00000000000064A8                 test    rax, rax
.text:00000000000064AB                 mov     [r8+r9*8], rax
.text:00000000000064AF                 jz      short loc_64BB
.text:00000000000064B1                 add     r9, 1
.text:00000000000064B5                 cmp     r9, 0Ah
.text:00000000000064B9                 jnz     short loc_6490
.text:00000000000064BB
.text:00000000000064BB loc_64BB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000064BB                 call    version_etc_arn
.text:00000000000064C0                 mov     rax, [rsp+68h+var_10]
.text:00000000000064C5                 xor     rax, fs:28h
.text:00000000000064CE                 jnz     short loc_64D5
.text:00000000000064D0                 add     rsp, 68h
.text:00000000000064D4                 retn
.text:00000000000064D5 ; ---------------------------------------------------------------------------
.text:00000000000064D5
.text:00000000000064D5 loc_64D5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000064D5                 call    ___stack_chk_fail
.text:00000000000064DA ; ---------------------------------------------------------------------------
.text:00000000000064DA
.text:00000000000064DA loc_64DA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000064DA                 mov     r11, [r10+8]
.text:00000000000064DE                 lea     rax, [r11+8]
.text:00000000000064E2                 mov     [r10+8], rax
.text:00000000000064E6                 jmp     short loc_64A5
.text:00000000000064E6 ; } // starts at 6470
.text:00000000000064E6 version_etc_va  endp
.text:00000000000064E6
.text:00000000000064E6 ; ---------------------------------------------------------------------------
.text:00000000000064E8                 align 10h
.text:00000000000064F0
.text:00000000000064F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064F0
.text:00000000000064F0 ; Attributes: info_from_lumina
.text:00000000000064F0
.text:00000000000064F0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000064F0                 public version_etc
.text:00000000000064F0 version_etc     proc near               ; CODE XREF: main+14B↑p
.text:00000000000064F0
.text:00000000000064F0 var_C0          = dword ptr -0C0h
.text:00000000000064F0 var_B8          = qword ptr -0B8h
.text:00000000000064F0 var_B0          = qword ptr -0B0h
.text:00000000000064F0 var_A8          = byte ptr -0A8h
.text:00000000000064F0 var_50          = qword ptr -50h
.text:00000000000064F0 var_48          = byte ptr -48h
.text:00000000000064F0 var_28          = qword ptr -28h
.text:00000000000064F0 var_20          = qword ptr -20h
.text:00000000000064F0 arg_0           = byte ptr  8
.text:00000000000064F0
.text:00000000000064F0 ; __unwind {
.text:00000000000064F0                 push    rbp
.text:00000000000064F1                 push    rbx
.text:00000000000064F2                 mov     r10d, 20h ; ' '
.text:00000000000064F8                 xor     r11d, r11d
.text:00000000000064FB                 sub     rsp, 0B8h
.text:0000000000006502                 mov     rax, fs:28h
.text:000000000000650B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006510                 xor     eax, eax
.text:0000000000006512                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000651A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006522                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000652A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000652F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006537                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000653F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006544                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000654C                 xor     r9d, r9d
.text:000000000000654F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006554                 mov     rbp, rax
.text:0000000000006557                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006560                 cmp     r10d, 2Fh ; '/'
.text:0000000000006564                 ja      short loc_65BC
.text:0000000000006566                 mov     eax, r10d
.text:0000000000006569                 mov     r11d, 1
.text:000000000000656F                 add     r10d, 8
.text:0000000000006573                 add     rax, rbp
.text:0000000000006576
.text:0000000000006576 loc_6576:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006576                 mov     rax, [rax]
.text:0000000000006579                 test    rax, rax
.text:000000000000657C                 mov     [r8+r9*8], rax
.text:0000000000006580                 jz      short loc_658C
.text:0000000000006582                 add     r9, 1
.text:0000000000006586                 cmp     r9, 0Ah
.text:000000000000658A                 jnz     short loc_6560
.text:000000000000658C
.text:000000000000658C loc_658C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000658C                 test    r11b, r11b
.text:000000000000658F                 jnz     short loc_65B5
.text:0000000000006591
.text:0000000000006591 loc_6591:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006591                 call    version_etc_arn
.text:0000000000006596                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000659B                 xor     rax, fs:28h
.text:00000000000065A4                 jnz     short loc_65B0
.text:00000000000065A6                 add     rsp, 0B8h
.text:00000000000065AD                 pop     rbx
.text:00000000000065AE                 pop     rbp
.text:00000000000065AF                 retn
.text:00000000000065B0 ; ---------------------------------------------------------------------------
.text:00000000000065B0
.text:00000000000065B0 loc_65B0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000065B0                 call    ___stack_chk_fail
.text:00000000000065B5 ; ---------------------------------------------------------------------------
.text:00000000000065B5
.text:00000000000065B5 loc_65B5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000065B5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000065BA                 jmp     short loc_6591
.text:00000000000065BC ; ---------------------------------------------------------------------------
.text:00000000000065BC
.text:00000000000065BC loc_65BC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000065BC                 mov     rax, rbx
.text:00000000000065BF                 add     rbx, 8
.text:00000000000065C3                 jmp     short loc_6576
.text:00000000000065C3 ; } // starts at 64F0
.text:00000000000065C3 version_etc     endp
.text:00000000000065C3
.text:00000000000065C3 ; ---------------------------------------------------------------------------
.text:00000000000065C5                 align 10h
.text:00000000000065D0
.text:00000000000065D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065D0
.text:00000000000065D0 ; Attributes: info_from_lumina
.text:00000000000065D0
.text:00000000000065D0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000065D0                 public emit_bug_reporting_address
.text:00000000000065D0 emit_bug_reporting_address proc near
.text:00000000000065D0 ; __unwind {
.text:00000000000065D0                 push    rbx
.text:00000000000065D1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000065D8                 mov     edx, 5          ; category
.text:00000000000065DD                 xor     edi, edi        ; domainname
.text:00000000000065DF                 call    _dcgettext
.text:00000000000065E4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000065EB                 mov     rsi, rax
.text:00000000000065EE                 mov     edi, 1
.text:00000000000065F3                 xor     eax, eax
.text:00000000000065F5                 call    ___printf_chk
.text:00000000000065FA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006601                 mov     edx, 5          ; category
.text:0000000000006606                 xor     edi, edi        ; domainname
.text:0000000000006608                 call    _dcgettext
.text:000000000000660D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006614                 lea     rdx, unk_6FD2
.text:000000000000661B                 mov     rsi, rax
.text:000000000000661E                 mov     edi, 1
.text:0000000000006623                 xor     eax, eax
.text:0000000000006625                 call    ___printf_chk
.text:000000000000662A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006631                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006638                 xor     edi, edi        ; domainname
.text:000000000000663A                 mov     edx, 5          ; category
.text:000000000000663F                 call    _dcgettext
.text:0000000000006644                 mov     rsi, rbx        ; stream
.text:0000000000006647                 mov     rdi, rax        ; s
.text:000000000000664A                 pop     rbx
.text:000000000000664B                 jmp     _fputs_unlocked
.text:000000000000664B ; } // starts at 65D0
.text:000000000000664B emit_bug_reporting_address endp
.text:000000000000664B
.text:0000000000006650
.text:0000000000006650 ; =============== S U B R O U T I N E =======================================
.text:0000000000006650
.text:0000000000006650
.text:0000000000006650                 public xmalloc
.text:0000000000006650 xmalloc         proc near               ; CODE XREF: canonicalize_filename_mode+525↑p
.text:0000000000006650                                         ; canonicalize_filename_mode+57C↑p ...
.text:0000000000006650 ; __unwind {
.text:0000000000006650                 push    rbx
.text:0000000000006651                 mov     rbx, rdi
.text:0000000000006654                 call    _malloc
.text:0000000000006659                 test    rax, rax
.text:000000000000665C                 jnz     short loc_6663
.text:000000000000665E                 test    rbx, rbx
.text:0000000000006661                 jnz     short loc_6665
.text:0000000000006663
.text:0000000000006663 loc_6663:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006663                 pop     rbx
.text:0000000000006664                 retn
.text:0000000000006665 ; ---------------------------------------------------------------------------
.text:0000000000006665
.text:0000000000006665 loc_6665:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006665                 call    xalloc_die
.text:0000000000006665 ; } // starts at 6650
.text:0000000000006665 xmalloc         endp
.text:0000000000006665
.text:0000000000006665 ; ---------------------------------------------------------------------------
.text:000000000000666A                 align 10h
.text:0000000000006670
.text:0000000000006670 ; =============== S U B R O U T I N E =======================================
.text:0000000000006670
.text:0000000000006670 ; Attributes: info_from_lumina
.text:0000000000006670
.text:0000000000006670 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006670                 public xnmalloc
.text:0000000000006670 xnmalloc        proc near
.text:0000000000006670 ; __unwind {
.text:0000000000006670                 mov     rax, rdi
.text:0000000000006673                 mul     rsi
.text:0000000000006676                 mov     rdi, rax
.text:0000000000006679                 seto    al
.text:000000000000667C                 test    rdi, rdi
.text:000000000000667F                 js      short loc_668B
.text:0000000000006681                 movzx   eax, al
.text:0000000000006684                 test    rax, rax
.text:0000000000006687                 jnz     short loc_668B
.text:0000000000006689                 jmp     short xmalloc
.text:000000000000668B ; ---------------------------------------------------------------------------
.text:000000000000668B
.text:000000000000668B loc_668B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000668B                                         ; xnmalloc+17↑j
.text:000000000000668B                 sub     rsp, 8
.text:000000000000668F                 call    xalloc_die
.text:000000000000668F ; } // starts at 6670
.text:000000000000668F xnmalloc        endp
.text:000000000000668F
.text:000000000000668F ; ---------------------------------------------------------------------------
.text:0000000000006694                 align 20h
.text:00000000000066A0
.text:00000000000066A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066A0
.text:00000000000066A0
.text:00000000000066A0                 public xcharalloc
.text:00000000000066A0 xcharalloc      proc near
.text:00000000000066A0 ; __unwind {
.text:00000000000066A0                 jmp     short xmalloc
.text:00000000000066A0 ; } // starts at 66A0
.text:00000000000066A0 xcharalloc      endp
.text:00000000000066A0
.text:00000000000066A0 ; ---------------------------------------------------------------------------
.text:00000000000066A2                 align 10h
.text:00000000000066B0
.text:00000000000066B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066B0
.text:00000000000066B0 ; Attributes: info_from_lumina
.text:00000000000066B0
.text:00000000000066B0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000066B0                 public xrealloc
.text:00000000000066B0 xrealloc        proc near               ; CODE XREF: canonicalize_filename_mode+16C↑p
.text:00000000000066B0                                         ; canonicalize_filename_mode+1FA↑p ...
.text:00000000000066B0 ; __unwind {
.text:00000000000066B0                 test    rsi, rsi
.text:00000000000066B3                 push    rbx
.text:00000000000066B4                 mov     rbx, rsi
.text:00000000000066B7                 jnz     short loc_66BE
.text:00000000000066B9                 test    rdi, rdi
.text:00000000000066BC                 jnz     short loc_66D8
.text:00000000000066BE
.text:00000000000066BE loc_66BE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000066BE                 mov     rsi, rbx        ; size
.text:00000000000066C1                 call    _realloc
.text:00000000000066C6                 test    rax, rax
.text:00000000000066C9                 jnz     short loc_66D0
.text:00000000000066CB                 test    rbx, rbx
.text:00000000000066CE                 jnz     short loc_66E1
.text:00000000000066D0
.text:00000000000066D0 loc_66D0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000066D0                 pop     rbx
.text:00000000000066D1                 retn
.text:00000000000066D1 ; ---------------------------------------------------------------------------
.text:00000000000066D2                 align 8
.text:00000000000066D8
.text:00000000000066D8 loc_66D8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000066D8                 call    _free
.text:00000000000066DD                 xor     eax, eax
.text:00000000000066DF                 pop     rbx
.text:00000000000066E0                 retn
.text:00000000000066E1 ; ---------------------------------------------------------------------------
.text:00000000000066E1
.text:00000000000066E1 loc_66E1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000066E1                 call    xalloc_die
.text:00000000000066E1 ; } // starts at 66B0
.text:00000000000066E1 xrealloc        endp
.text:00000000000066E1
.text:00000000000066E1 ; ---------------------------------------------------------------------------
.text:00000000000066E6                 align 10h
.text:00000000000066F0
.text:00000000000066F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066F0
.text:00000000000066F0 ; Attributes: info_from_lumina
.text:00000000000066F0
.text:00000000000066F0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000066F0                 public xnrealloc
.text:00000000000066F0 xnrealloc       proc near
.text:00000000000066F0 ; __unwind {
.text:00000000000066F0                 mov     rax, rsi
.text:00000000000066F3                 mul     rdx
.text:00000000000066F6                 mov     rsi, rax
.text:00000000000066F9                 seto    al
.text:00000000000066FC                 test    rsi, rsi
.text:00000000000066FF                 js      short loc_670B
.text:0000000000006701                 movzx   eax, al
.text:0000000000006704                 test    rax, rax
.text:0000000000006707                 jnz     short loc_670B
.text:0000000000006709                 jmp     short xrealloc
.text:000000000000670B ; ---------------------------------------------------------------------------
.text:000000000000670B
.text:000000000000670B loc_670B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000670B                                         ; xnrealloc+17↑j
.text:000000000000670B                 sub     rsp, 8
.text:000000000000670F                 call    xalloc_die
.text:000000000000670F ; } // starts at 66F0
.text:000000000000670F xnrealloc       endp
.text:000000000000670F
.text:000000000000670F ; ---------------------------------------------------------------------------
.text:0000000000006714                 align 20h
.text:0000000000006720
.text:0000000000006720 ; =============== S U B R O U T I N E =======================================
.text:0000000000006720
.text:0000000000006720 ; Attributes: info_from_lumina
.text:0000000000006720
.text:0000000000006720 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006720                 public x2nrealloc
.text:0000000000006720 x2nrealloc      proc near
.text:0000000000006720 ; __unwind {
.text:0000000000006720                 test    rdi, rdi
.text:0000000000006723                 mov     r9, rdx
.text:0000000000006726                 mov     rcx, [rsi]
.text:0000000000006729                 jz      short loc_6760
.text:000000000000672B                 xor     edx, edx
.text:000000000000672D                 mov     rax, 5555555555555554h
.text:0000000000006737                 div     r9
.text:000000000000673A                 cmp     rax, rcx
.text:000000000000673D                 jbe     short loc_677B
.text:000000000000673F                 mov     rax, rcx
.text:0000000000006742                 shr     rax, 1
.text:0000000000006745                 lea     rcx, [rax+rcx+1]
.text:000000000000674A
.text:000000000000674A loc_674A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000674A                 mov     [rsi], rcx
.text:000000000000674D                 imul    rcx, r9
.text:0000000000006751                 mov     rsi, rcx
.text:0000000000006754                 jmp     xrealloc
.text:0000000000006754 ; ---------------------------------------------------------------------------
.text:0000000000006759                 align 20h
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006760                 test    rcx, rcx
.text:0000000000006763                 jz      short loc_6788
.text:0000000000006765
.text:0000000000006765 loc_6765:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006765                 mov     rax, rcx
.text:0000000000006768                 mul     r9
.text:000000000000676B                 seto    dl
.text:000000000000676E                 test    rax, rax
.text:0000000000006771                 movzx   edx, dl
.text:0000000000006774                 js      short loc_677B
.text:0000000000006776                 test    rdx, rdx
.text:0000000000006779                 jz      short loc_674A
.text:000000000000677B
.text:000000000000677B loc_677B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000677B                                         ; x2nrealloc+54↑j
.text:000000000000677B                 sub     rsp, 8
.text:000000000000677F                 call    xalloc_die
.text:000000000000677F ; ---------------------------------------------------------------------------
.text:0000000000006784                 align 8
.text:0000000000006788
.text:0000000000006788 loc_6788:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006788                 xor     edx, edx
.text:000000000000678A                 mov     eax, 80h
.text:000000000000678F                 xor     r8d, r8d
.text:0000000000006792                 div     r9
.text:0000000000006795                 test    rax, rax
.text:0000000000006798                 setz    r8b
.text:000000000000679C                 lea     rcx, [r8+rax]
.text:00000000000067A0                 jmp     short loc_6765
.text:00000000000067A0 ; } // starts at 6720
.text:00000000000067A0 x2nrealloc      endp
.text:00000000000067A0
.text:00000000000067A0 ; ---------------------------------------------------------------------------
.text:00000000000067A2                 align 10h
.text:00000000000067B0
.text:00000000000067B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067B0
.text:00000000000067B0 ; Attributes: info_from_lumina
.text:00000000000067B0
.text:00000000000067B0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000067B0                 public x2realloc
.text:00000000000067B0 x2realloc       proc near
.text:00000000000067B0 ; __unwind {
.text:00000000000067B0                 test    rdi, rdi
.text:00000000000067B3                 mov     rax, [rsi]
.text:00000000000067B6                 jz      short loc_67E0
.text:00000000000067B8                 mov     rdx, 5555555555555553h
.text:00000000000067C2                 cmp     rax, rdx
.text:00000000000067C5                 ja      short loc_67F1
.text:00000000000067C7                 mov     rdx, rax
.text:00000000000067CA                 shr     rdx, 1
.text:00000000000067CD                 lea     rax, [rdx+rax+1]
.text:00000000000067D2
.text:00000000000067D2 loc_67D2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000067D2                 mov     [rsi], rax
.text:00000000000067D5                 mov     rsi, rax
.text:00000000000067D8                 jmp     xrealloc
.text:00000000000067D8 ; ---------------------------------------------------------------------------
.text:00000000000067DD                 align 20h
.text:00000000000067E0
.text:00000000000067E0 loc_67E0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000067E0                 test    rax, rax
.text:00000000000067E3                 mov     edx, 80h
.text:00000000000067E8                 cmovz   rax, rdx
.text:00000000000067EC                 test    rax, rax
.text:00000000000067EF                 jns     short loc_67D2
.text:00000000000067F1
.text:00000000000067F1 loc_67F1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000067F1                 sub     rsp, 8
.text:00000000000067F5                 call    xalloc_die
.text:00000000000067F5 ; } // starts at 67B0
.text:00000000000067F5 x2realloc       endp
.text:00000000000067F5
.text:00000000000067F5 ; ---------------------------------------------------------------------------
.text:00000000000067FA                 align 20h
.text:0000000000006800
.text:0000000000006800 ; =============== S U B R O U T I N E =======================================
.text:0000000000006800
.text:0000000000006800
.text:0000000000006800 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006800                 public xzalloc
.text:0000000000006800 xzalloc         proc near
.text:0000000000006800 ; __unwind {
.text:0000000000006800                 push    rbx
.text:0000000000006801                 mov     rbx, rdi
.text:0000000000006804                 call    xmalloc
.text:0000000000006809                 mov     rdx, rbx        ; n
.text:000000000000680C                 xor     esi, esi        ; c
.text:000000000000680E                 mov     rdi, rax        ; s
.text:0000000000006811                 pop     rbx
.text:0000000000006812                 jmp     _memset
.text:0000000000006812 ; } // starts at 6800
.text:0000000000006812 xzalloc         endp
.text:0000000000006812
.text:0000000000006812 ; ---------------------------------------------------------------------------
.text:0000000000006817                 align 20h
.text:0000000000006820
.text:0000000000006820 ; =============== S U B R O U T I N E =======================================
.text:0000000000006820
.text:0000000000006820 ; Attributes: info_from_lumina
.text:0000000000006820
.text:0000000000006820 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006820                 public xcalloc
.text:0000000000006820 xcalloc         proc near
.text:0000000000006820 ; __unwind {
.text:0000000000006820                 mov     rax, rdi
.text:0000000000006823                 sub     rsp, 8
.text:0000000000006827                 mul     rsi
.text:000000000000682A                 seto    dl
.text:000000000000682D                 test    rax, rax
.text:0000000000006830                 js      short loc_6849
.text:0000000000006832                 movzx   edx, dl
.text:0000000000006835                 test    rdx, rdx
.text:0000000000006838                 jnz     short loc_6849
.text:000000000000683A                 call    _calloc
.text:000000000000683F                 test    rax, rax
.text:0000000000006842                 jz      short loc_6849
.text:0000000000006844                 add     rsp, 8
.text:0000000000006848                 retn
.text:0000000000006849 ; ---------------------------------------------------------------------------
.text:0000000000006849
.text:0000000000006849 loc_6849:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006849                                         ; xcalloc+18↑j ...
.text:0000000000006849                 call    xalloc_die
.text:0000000000006849 ; } // starts at 6820
.text:0000000000006849 xcalloc         endp
.text:0000000000006849
.text:0000000000006849 ; ---------------------------------------------------------------------------
.text:000000000000684E                 align 10h
.text:0000000000006850
.text:0000000000006850 ; =============== S U B R O U T I N E =======================================
.text:0000000000006850
.text:0000000000006850 ; Attributes: info_from_lumina
.text:0000000000006850
.text:0000000000006850 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006850                 public xmemdup
.text:0000000000006850 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000006850                                         ; xstrdup+11↓j
.text:0000000000006850 ; __unwind {
.text:0000000000006850                 push    rbp
.text:0000000000006851                 push    rbx
.text:0000000000006852                 mov     rbp, rdi
.text:0000000000006855                 mov     rdi, rsi
.text:0000000000006858                 mov     rbx, rsi
.text:000000000000685B                 sub     rsp, 8
.text:000000000000685F                 call    xmalloc
.text:0000000000006864                 add     rsp, 8
.text:0000000000006868                 mov     rdx, rbx        ; n
.text:000000000000686B                 mov     rsi, rbp        ; src
.text:000000000000686E                 pop     rbx
.text:000000000000686F                 pop     rbp
.text:0000000000006870                 mov     rdi, rax        ; dest
.text:0000000000006873                 jmp     _memcpy
.text:0000000000006873 ; } // starts at 6850
.text:0000000000006873 xmemdup         endp
.text:0000000000006873
.text:0000000000006873 ; ---------------------------------------------------------------------------
.text:0000000000006878                 align 20h
.text:0000000000006880
.text:0000000000006880 ; =============== S U B R O U T I N E =======================================
.text:0000000000006880
.text:0000000000006880
.text:0000000000006880 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006880                 public xstrdup
.text:0000000000006880 xstrdup         proc near               ; CODE XREF: record_file+28↑p
.text:0000000000006880 ; __unwind {
.text:0000000000006880                 push    rbx
.text:0000000000006881                 mov     rbx, rdi
.text:0000000000006884                 call    _strlen
.text:0000000000006889                 mov     rdi, rbx        ; src
.text:000000000000688C                 lea     rsi, [rax+1]    ; n
.text:0000000000006890                 pop     rbx
.text:0000000000006891                 jmp     short xmemdup
.text:0000000000006891 ; } // starts at 6880
.text:0000000000006891 xstrdup         endp
.text:0000000000006891
.text:0000000000006891 ; ---------------------------------------------------------------------------
.text:0000000000006893                 align 20h
.text:00000000000068A0
.text:00000000000068A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068A0
.text:00000000000068A0 ; Attributes: noreturn info_from_lumina
.text:00000000000068A0
.text:00000000000068A0 ; void __cdecl xalloc_die()
.text:00000000000068A0                 public xalloc_die
.text:00000000000068A0 xalloc_die      proc near               ; CODE XREF: canonicalize_filename_mode+515↑p
.text:00000000000068A0                                         ; record_file:loc_2CF2↑p ...
.text:00000000000068A0 ; __unwind {
.text:00000000000068A0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000068A7                 sub     rsp, 8
.text:00000000000068AB                 mov     edx, 5          ; category
.text:00000000000068B0                 xor     edi, edi        ; domainname
.text:00000000000068B2                 call    _dcgettext
.text:00000000000068B7                 mov     edi, cs:exit_failure ; status
.text:00000000000068BD                 lea     rdx, format+4   ; format
.text:00000000000068C4                 mov     rcx, rax
.text:00000000000068C7                 xor     esi, esi        ; errnum
.text:00000000000068C9                 xor     eax, eax
.text:00000000000068CB                 call    _error
.text:00000000000068D0                 call    _abort
.text:00000000000068D0 ; } // starts at 68A0
.text:00000000000068D0 xalloc_die      endp
.text:00000000000068D0
.text:00000000000068D0 ; ---------------------------------------------------------------------------
.text:00000000000068D5                 align 20h
.text:00000000000068E0
.text:00000000000068E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068E0
.text:00000000000068E0 ; Attributes: info_from_lumina
.text:00000000000068E0
.text:00000000000068E0 ; char *__cdecl xgetcwd()
.text:00000000000068E0                 public xgetcwd
.text:00000000000068E0 xgetcwd         proc near               ; CODE XREF: canonicalize_filename_mode+63↑p
.text:00000000000068E0 ; __unwind {
.text:00000000000068E0                 push    rbx
.text:00000000000068E1                 xor     esi, esi        ; size
.text:00000000000068E3                 xor     edi, edi        ; buf
.text:00000000000068E5                 call    _getcwd
.text:00000000000068EA                 test    rax, rax
.text:00000000000068ED                 mov     rbx, rax
.text:00000000000068F0                 jz      short loc_6900
.text:00000000000068F2
.text:00000000000068F2 loc_68F2:                               ; CODE XREF: xgetcwd+28↓j
.text:00000000000068F2                 mov     rax, rbx
.text:00000000000068F5                 pop     rbx
.text:00000000000068F6                 retn
.text:00000000000068F6 ; ---------------------------------------------------------------------------
.text:00000000000068F7                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: xgetcwd+10↑j
.text:0000000000006900                 call    ___errno_location
.text:0000000000006905                 cmp     dword ptr [rax], 0Ch
.text:0000000000006908                 jnz     short loc_68F2
.text:000000000000690A                 call    xalloc_die
.text:000000000000690A ; } // starts at 68E0
.text:000000000000690A xgetcwd         endp
.text:000000000000690A
.text:000000000000690A ; ---------------------------------------------------------------------------
.text:000000000000690F                 align 10h
.text:0000000000006910
.text:0000000000006910 ; =============== S U B R O U T I N E =======================================
.text:0000000000006910
.text:0000000000006910 ; Attributes: info_from_lumina
.text:0000000000006910
.text:0000000000006910 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006910                 public rpl_mbrtowc
.text:0000000000006910 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006910
.text:0000000000006910 pwc             = dword ptr -34h
.text:0000000000006910 var_30          = qword ptr -30h
.text:0000000000006910
.text:0000000000006910 ; __unwind {
.text:0000000000006910                 push    r13
.text:0000000000006912                 push    r12
.text:0000000000006914                 mov     r13, rsi
.text:0000000000006917                 push    rbp
.text:0000000000006918                 push    rbx
.text:0000000000006919                 mov     rbx, rdi
.text:000000000000691C                 mov     r12, rdx
.text:000000000000691F                 sub     rsp, 18h
.text:0000000000006923                 mov     rax, fs:28h
.text:000000000000692C                 mov     [rsp+38h+var_30], rax
.text:0000000000006931                 xor     eax, eax
.text:0000000000006933                 lea     rax, [rsp+38h+pwc]
.text:0000000000006938                 test    rdi, rdi
.text:000000000000693B                 cmovz   rbx, rax
.text:000000000000693F                 mov     rdi, rbx        ; pwc
.text:0000000000006942                 call    _mbrtowc
.text:0000000000006947                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000694B                 mov     rbp, rax
.text:000000000000694E                 jbe     short loc_6970
.text:0000000000006950                 test    r12, r12
.text:0000000000006953                 jz      short loc_6970
.text:0000000000006955                 xor     edi, edi
.text:0000000000006957                 call    hard_locale
.text:000000000000695C                 test    al, al
.text:000000000000695E                 jnz     short loc_6970
.text:0000000000006960                 movzx   eax, byte ptr [r13+0]
.text:0000000000006965                 mov     ebp, 1
.text:000000000000696A                 mov     [rbx], eax
.text:000000000000696C                 nop     dword ptr [rax+00h]
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000006970                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000006970                 mov     rdx, [rsp+38h+var_30]
.text:0000000000006975                 xor     rdx, fs:28h
.text:000000000000697E                 mov     rax, rbp
.text:0000000000006981                 jnz     short loc_698E
.text:0000000000006983                 add     rsp, 18h
.text:0000000000006987                 pop     rbx
.text:0000000000006988                 pop     rbp
.text:0000000000006989                 pop     r12
.text:000000000000698B                 pop     r13
.text:000000000000698D                 retn
.text:000000000000698E ; ---------------------------------------------------------------------------
.text:000000000000698E
.text:000000000000698E loc_698E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000698E                 call    ___stack_chk_fail
.text:000000000000698E ; } // starts at 6910
.text:000000000000698E rpl_mbrtowc     endp
.text:000000000000698E
.text:000000000000698E ; ---------------------------------------------------------------------------
.text:0000000000006993                 align 20h
.text:00000000000069A0
.text:00000000000069A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069A0
.text:00000000000069A0 ; Attributes: info_from_lumina
.text:00000000000069A0
.text:00000000000069A0 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:00000000000069A0                 public areadlink_with_size
.text:00000000000069A0 areadlink_with_size proc near           ; CODE XREF: canonicalize_filename_mode+42C↑p
.text:00000000000069A0 ; __unwind {
.text:00000000000069A0                 push    r15
.text:00000000000069A2                 push    r14
.text:00000000000069A4                 mov     eax, 401h
.text:00000000000069A9                 push    r13
.text:00000000000069AB                 push    r12
.text:00000000000069AD                 mov     r13, rdi
.text:00000000000069B0                 push    rbp
.text:00000000000069B1                 push    rbx
.text:00000000000069B2                 lea     rbx, [rsi+1]
.text:00000000000069B6                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:00000000000069C0                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:00000000000069CA                 sub     rsp, 8
.text:00000000000069CE                 cmp     rsi, 401h
.text:00000000000069D5                 cmovnb  rbx, rax
.text:00000000000069D9                 nop     dword ptr [rax+00000000h]
.text:00000000000069E0
.text:00000000000069E0 loc_69E0:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:00000000000069E0                 mov     rdi, rbx        ; size
.text:00000000000069E3                 call    _malloc
.text:00000000000069E8                 test    rax, rax
.text:00000000000069EB                 mov     rbp, rax
.text:00000000000069EE                 jz      short loc_6A2B
.text:00000000000069F0
.text:00000000000069F0 loc_69F0:                               ; CODE XREF: areadlink_with_size+89↓j
.text:00000000000069F0                 mov     rdx, rbx        ; len
.text:00000000000069F3                 mov     rsi, rax        ; buf
.text:00000000000069F6                 mov     rdi, r13        ; path
.text:00000000000069F9                 call    _readlink
.text:00000000000069FE                 test    rax, rax
.text:0000000000006A01                 mov     r12, rax
.text:0000000000006A04                 js      short loc_6A58
.text:0000000000006A06
.text:0000000000006A06 loc_6A06:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:0000000000006A06                 cmp     rbx, r12
.text:0000000000006A09                 ja      short loc_6A70
.text:0000000000006A0B                 mov     rdi, rbp        ; ptr
.text:0000000000006A0E                 call    _free
.text:0000000000006A13                 cmp     rbx, r14
.text:0000000000006A16                 ja      short loc_6A40
.text:0000000000006A18                 add     rbx, rbx
.text:0000000000006A1B                 mov     rdi, rbx        ; size
.text:0000000000006A1E                 call    _malloc
.text:0000000000006A23                 test    rax, rax
.text:0000000000006A26                 mov     rbp, rax
.text:0000000000006A29                 jnz     short loc_69F0
.text:0000000000006A2B
.text:0000000000006A2B loc_6A2B:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:0000000000006A2B                                         ; areadlink_with_size+CC↓j ...
.text:0000000000006A2B                 add     rsp, 8
.text:0000000000006A2F                 mov     rax, rbp
.text:0000000000006A32                 pop     rbx
.text:0000000000006A33                 pop     rbp
.text:0000000000006A34                 pop     r12
.text:0000000000006A36                 pop     r13
.text:0000000000006A38                 pop     r14
.text:0000000000006A3A                 pop     r15
.text:0000000000006A3C                 retn
.text:0000000000006A3C ; ---------------------------------------------------------------------------
.text:0000000000006A3D                 align 20h
.text:0000000000006A40
.text:0000000000006A40 loc_6A40:                               ; CODE XREF: areadlink_with_size+76↑j
.text:0000000000006A40                 cmp     rbx, r15
.text:0000000000006A43                 ja      short loc_6A80
.text:0000000000006A45                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:0000000000006A4F                 jmp     short loc_69E0
.text:0000000000006A4F ; ---------------------------------------------------------------------------
.text:0000000000006A51                 align 8
.text:0000000000006A58
.text:0000000000006A58 loc_6A58:                               ; CODE XREF: areadlink_with_size+64↑j
.text:0000000000006A58                 call    ___errno_location
.text:0000000000006A5D                 cmp     dword ptr [rax], 22h ; '"'
.text:0000000000006A60                 jz      short loc_6A06
.text:0000000000006A62                 mov     rdi, rbp        ; ptr
.text:0000000000006A65                 xor     ebp, ebp
.text:0000000000006A67                 call    _free
.text:0000000000006A6C                 jmp     short loc_6A2B
.text:0000000000006A6C ; ---------------------------------------------------------------------------
.text:0000000000006A6E                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: areadlink_with_size+69↑j
.text:0000000000006A70                 mov     byte ptr [rbp+r12+0], 0
.text:0000000000006A76                 jmp     short loc_6A2B
.text:0000000000006A76 ; ---------------------------------------------------------------------------
.text:0000000000006A78                 align 20h
.text:0000000000006A80
.text:0000000000006A80 loc_6A80:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:0000000000006A80                 call    ___errno_location
.text:0000000000006A85                 xor     ebp, ebp
.text:0000000000006A87                 mov     dword ptr [rax], 0Ch
.text:0000000000006A8D                 jmp     short loc_6A2B
.text:0000000000006A8D ; } // starts at 69A0
.text:0000000000006A8D areadlink_with_size endp
.text:0000000000006A8D
.text:0000000000006A8D ; ---------------------------------------------------------------------------
.text:0000000000006A8F                 align 10h
.text:0000000000006A90
.text:0000000000006A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A90
.text:0000000000006A90 ; Attributes: info_from_lumina
.text:0000000000006A90
.text:0000000000006A90 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006A90                 public close_stream
.text:0000000000006A90 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006A90                                         ; close_stdout+33↑p
.text:0000000000006A90 ; __unwind {
.text:0000000000006A90                 push    r12
.text:0000000000006A92                 push    rbp
.text:0000000000006A93                 mov     rbp, rdi
.text:0000000000006A96                 push    rbx
.text:0000000000006A97                 call    ___fpending
.text:0000000000006A9C                 mov     ebx, [rbp+0]
.text:0000000000006A9F                 mov     rdi, rbp        ; stream
.text:0000000000006AA2                 mov     r12, rax
.text:0000000000006AA5                 call    rpl_fclose
.text:0000000000006AAA                 and     ebx, 20h
.text:0000000000006AAD                 test    ebx, ebx
.text:0000000000006AAF                 jnz     short loc_6AC8
.text:0000000000006AB1                 test    eax, eax
.text:0000000000006AB3                 jz      short loc_6ABF
.text:0000000000006AB5                 test    r12, r12
.text:0000000000006AB8                 mov     eax, 0FFFFFFFFh
.text:0000000000006ABD                 jz      short loc_6AF8
.text:0000000000006ABF
.text:0000000000006ABF loc_6ABF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000006ABF                 pop     rbx
.text:0000000000006AC0                 pop     rbp
.text:0000000000006AC1                 pop     r12
.text:0000000000006AC3                 retn
.text:0000000000006AC3 ; ---------------------------------------------------------------------------
.text:0000000000006AC4                 align 8
.text:0000000000006AC8
.text:0000000000006AC8 loc_6AC8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006AC8                 test    eax, eax
.text:0000000000006ACA                 jnz     short loc_6AE8
.text:0000000000006ACC                 call    ___errno_location
.text:0000000000006AD1                 mov     dword ptr [rax], 0
.text:0000000000006AD7                 mov     eax, 0FFFFFFFFh
.text:0000000000006ADC                 pop     rbx
.text:0000000000006ADD                 pop     rbp
.text:0000000000006ADE                 pop     r12
.text:0000000000006AE0                 retn
.text:0000000000006AE0 ; ---------------------------------------------------------------------------
.text:0000000000006AE1                 align 8
.text:0000000000006AE8
.text:0000000000006AE8 loc_6AE8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006AE8                 pop     rbx
.text:0000000000006AE9                 mov     eax, 0FFFFFFFFh
.text:0000000000006AEE                 pop     rbp
.text:0000000000006AEF                 pop     r12
.text:0000000000006AF1                 retn
.text:0000000000006AF1 ; ---------------------------------------------------------------------------
.text:0000000000006AF2                 align 8
.text:0000000000006AF8
.text:0000000000006AF8 loc_6AF8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006AF8                 call    ___errno_location
.text:0000000000006AFD                 cmp     dword ptr [rax], 9
.text:0000000000006B00                 pop     rbx
.text:0000000000006B01                 pop     rbp
.text:0000000000006B02                 pop     r12
.text:0000000000006B04                 setnz   al
.text:0000000000006B07                 movzx   eax, al
.text:0000000000006B0A                 neg     eax
.text:0000000000006B0C                 retn
.text:0000000000006B0C ; } // starts at 6A90
.text:0000000000006B0C close_stream    endp
.text:0000000000006B0C
.text:0000000000006B0C ; ---------------------------------------------------------------------------
.text:0000000000006B0D                 align 10h
.text:0000000000006B10
.text:0000000000006B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B10
.text:0000000000006B10
.text:0000000000006B10                 public dir_name
.text:0000000000006B10 dir_name        proc near               ; CODE XREF: same_nameat_part_0+2B↑p
.text:0000000000006B10                                         ; same_nameat_part_0+5F↑p
.text:0000000000006B10 ; __unwind {
.text:0000000000006B10                 sub     rsp, 8
.text:0000000000006B14                 call    mdir_name
.text:0000000000006B19                 test    rax, rax
.text:0000000000006B1C                 jz      short loc_6B23
.text:0000000000006B1E                 add     rsp, 8
.text:0000000000006B22                 retn
.text:0000000000006B23 ; ---------------------------------------------------------------------------
.text:0000000000006B23
.text:0000000000006B23 loc_6B23:                               ; CODE XREF: dir_name+C↑j
.text:0000000000006B23                 call    xalloc_die
.text:0000000000006B23 ; } // starts at 6B10
.text:0000000000006B23 dir_name        endp
.text:0000000000006B23
.text:0000000000006B23 ; ---------------------------------------------------------------------------
.text:0000000000006B28                 align 10h
.text:0000000000006B30
.text:0000000000006B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B30
.text:0000000000006B30 ; Attributes: info_from_lumina
.text:0000000000006B30
.text:0000000000006B30 ; size_t __fastcall dir_len(const char *file)
.text:0000000000006B30                 public dir_len
.text:0000000000006B30 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:0000000000006B30 ; __unwind {
.text:0000000000006B30                 push    rbp
.text:0000000000006B31                 push    rbx
.text:0000000000006B32                 xor     ebp, ebp
.text:0000000000006B34                 mov     rbx, rdi
.text:0000000000006B37                 sub     rsp, 8
.text:0000000000006B3B                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000006B3E                 setz    bpl
.text:0000000000006B42                 call    last_component
.text:0000000000006B47                 mov     rcx, rax
.text:0000000000006B4A                 sub     rcx, rbx
.text:0000000000006B4D                 cmp     rcx, rbp
.text:0000000000006B50                 jbe     short loc_6B80
.text:0000000000006B52                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000006B56                 lea     rdx, [rcx-1]
.text:0000000000006B5A                 jz      short loc_6B6E
.text:0000000000006B5C                 jmp     short loc_6B80
.text:0000000000006B5C ; ---------------------------------------------------------------------------
.text:0000000000006B5E                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: dir_len+41↓j
.text:0000000000006B60                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000006B65                 lea     rax, [rdx-1]
.text:0000000000006B69                 jnz     short loc_6B73
.text:0000000000006B6B                 mov     rdx, rax
.text:0000000000006B6E
.text:0000000000006B6E loc_6B6E:                               ; CODE XREF: dir_len+2A↑j
.text:0000000000006B6E                 cmp     rbp, rdx
.text:0000000000006B71                 jnz     short loc_6B60
.text:0000000000006B73
.text:0000000000006B73 loc_6B73:                               ; CODE XREF: dir_len+39↑j
.text:0000000000006B73                 add     rsp, 8
.text:0000000000006B77                 mov     rax, rdx
.text:0000000000006B7A                 pop     rbx
.text:0000000000006B7B                 pop     rbp
.text:0000000000006B7C                 retn
.text:0000000000006B7C ; ---------------------------------------------------------------------------
.text:0000000000006B7D                 align 20h
.text:0000000000006B80
.text:0000000000006B80 loc_6B80:                               ; CODE XREF: dir_len+20↑j
.text:0000000000006B80                                         ; dir_len+2C↑j
.text:0000000000006B80                 add     rsp, 8
.text:0000000000006B84                 mov     rdx, rcx
.text:0000000000006B87                 mov     rax, rdx
.text:0000000000006B8A                 pop     rbx
.text:0000000000006B8B                 pop     rbp
.text:0000000000006B8C                 retn
.text:0000000000006B8C ; } // starts at 6B30
.text:0000000000006B8C dir_len         endp
.text:0000000000006B8C
.text:0000000000006B8C ; ---------------------------------------------------------------------------
.text:0000000000006B8D                 align 10h
.text:0000000000006B90
.text:0000000000006B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B90
.text:0000000000006B90 ; Attributes: info_from_lumina
.text:0000000000006B90
.text:0000000000006B90 ; char *__fastcall mdir_name(const char *file)
.text:0000000000006B90                 public mdir_name
.text:0000000000006B90 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:0000000000006B90 ; __unwind {
.text:0000000000006B90                 push    rbp
.text:0000000000006B91                 push    rbx
.text:0000000000006B92                 mov     rbp, rdi
.text:0000000000006B95                 sub     rsp, 8
.text:0000000000006B99                 call    dir_len
.text:0000000000006B9E                 test    rax, rax
.text:0000000000006BA1                 mov     rbx, rax
.text:0000000000006BA4                 setz    al
.text:0000000000006BA7                 movzx   eax, al
.text:0000000000006BAA                 lea     rdi, [rbx+rax+1] ; size
.text:0000000000006BAF                 call    _malloc
.text:0000000000006BB4                 test    rax, rax
.text:0000000000006BB7                 mov     rcx, rax
.text:0000000000006BBA                 jz      short loc_6BD6
.text:0000000000006BBC                 mov     rdx, rbx        ; n
.text:0000000000006BBF                 mov     rsi, rbp        ; src
.text:0000000000006BC2                 mov     rdi, rax        ; dest
.text:0000000000006BC5                 call    _memcpy
.text:0000000000006BCA                 test    rbx, rbx
.text:0000000000006BCD                 mov     rcx, rax
.text:0000000000006BD0                 jz      short loc_6BE0
.text:0000000000006BD2
.text:0000000000006BD2 loc_6BD2:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000006BD2                 mov     byte ptr [rcx+rbx], 0
.text:0000000000006BD6
.text:0000000000006BD6 loc_6BD6:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000006BD6                 add     rsp, 8
.text:0000000000006BDA                 mov     rax, rcx
.text:0000000000006BDD                 pop     rbx
.text:0000000000006BDE                 pop     rbp
.text:0000000000006BDF                 retn
.text:0000000000006BE0 ; ---------------------------------------------------------------------------
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000006BE0                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000006BE3                 mov     ebx, 1
.text:0000000000006BE8                 jmp     short loc_6BD2
.text:0000000000006BE8 ; } // starts at 6B90
.text:0000000000006BE8 mdir_name       endp
.text:0000000000006BE8
.text:0000000000006BE8 ; ---------------------------------------------------------------------------
.text:0000000000006BEA                 align 10h
.text:0000000000006BF0
.text:0000000000006BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BF0
.text:0000000000006BF0 ; Attributes: info_from_lumina
.text:0000000000006BF0
.text:0000000000006BF0 ; char *__fastcall last_component(const char *name)
.text:0000000000006BF0                 public last_component
.text:0000000000006BF0 last_component  proc near               ; CODE XREF: same_nameat+1E↑p
.text:0000000000006BF0                                         ; same_nameat+29↑p ...
.text:0000000000006BF0 ; __unwind {
.text:0000000000006BF0                 movzx   edx, byte ptr [rdi]
.text:0000000000006BF3                 mov     rax, rdi
.text:0000000000006BF6                 cmp     dl, 2Fh ; '/'
.text:0000000000006BF9                 jnz     short loc_6C0C
.text:0000000000006BFB                 nop     dword ptr [rax+rax+00h]
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: last_component+1A↓j
.text:0000000000006C00                 add     rax, 1
.text:0000000000006C04                 movzx   edx, byte ptr [rax]
.text:0000000000006C07                 cmp     dl, 2Fh ; '/'
.text:0000000000006C0A                 jz      short loc_6C00
.text:0000000000006C0C
.text:0000000000006C0C loc_6C0C:                               ; CODE XREF: last_component+9↑j
.text:0000000000006C0C                 test    dl, dl
.text:0000000000006C0E                 jz      short locret_6C4A
.text:0000000000006C10                 mov     rcx, rax
.text:0000000000006C13                 xor     esi, esi
.text:0000000000006C15                 jmp     short loc_6C35
.text:0000000000006C15 ; ---------------------------------------------------------------------------
.text:0000000000006C17                 align 20h
.text:0000000000006C20
.text:0000000000006C20 loc_6C20:                               ; CODE XREF: last_component+48↓j
.text:0000000000006C20                 test    sil, sil
.text:0000000000006C23                 jz      short loc_6C2A
.text:0000000000006C25                 mov     rax, rcx
.text:0000000000006C28                 xor     esi, esi
.text:0000000000006C2A
.text:0000000000006C2A loc_6C2A:                               ; CODE XREF: last_component+33↑j
.text:0000000000006C2A                 add     rcx, 1
.text:0000000000006C2E                 movzx   edx, byte ptr [rcx]
.text:0000000000006C31                 test    dl, dl
.text:0000000000006C33                 jz      short locret_6C4A
.text:0000000000006C35
.text:0000000000006C35 loc_6C35:                               ; CODE XREF: last_component+25↑j
.text:0000000000006C35                                         ; last_component+58↓j
.text:0000000000006C35                 cmp     dl, 2Fh ; '/'
.text:0000000000006C38                 jnz     short loc_6C20
.text:0000000000006C3A                 add     rcx, 1
.text:0000000000006C3E                 movzx   edx, byte ptr [rcx]
.text:0000000000006C41                 mov     esi, 1
.text:0000000000006C46                 test    dl, dl
.text:0000000000006C48                 jnz     short loc_6C35
.text:0000000000006C4A
.text:0000000000006C4A locret_6C4A:                            ; CODE XREF: last_component+1E↑j
.text:0000000000006C4A                                         ; last_component+43↑j
.text:0000000000006C4A                 rep retn
.text:0000000000006C4A ; } // starts at 6BF0
.text:0000000000006C4A last_component  endp
.text:0000000000006C4A
.text:0000000000006C4A ; ---------------------------------------------------------------------------
.text:0000000000006C4C                 align 10h
.text:0000000000006C50
.text:0000000000006C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C50
.text:0000000000006C50 ; Attributes: info_from_lumina
.text:0000000000006C50
.text:0000000000006C50 ; size_t __fastcall base_len(const char *name)
.text:0000000000006C50                 public base_len
.text:0000000000006C50 base_len        proc near               ; CODE XREF: same_nameat+34↑p
.text:0000000000006C50                                         ; same_nameat+3F↑p
.text:0000000000006C50 ; __unwind {
.text:0000000000006C50                 push    rbx
.text:0000000000006C51                 mov     rbx, rdi
.text:0000000000006C54                 call    _strlen
.text:0000000000006C59                 cmp     rax, 1
.text:0000000000006C5D                 jbe     short loc_6C6A
.text:0000000000006C5F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000006C64                 lea     rdx, [rax-1]
.text:0000000000006C68                 jz      short loc_6C78
.text:0000000000006C6A
.text:0000000000006C6A loc_6C6A:                               ; CODE XREF: base_len+D↑j
.text:0000000000006C6A                 pop     rbx
.text:0000000000006C6B                 retn
.text:0000000000006C6B ; ---------------------------------------------------------------------------
.text:0000000000006C6C                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: base_len+37↓j
.text:0000000000006C70                 mov     rdx, rax
.text:0000000000006C73                 nop     dword ptr [rax+rax+00h]
.text:0000000000006C78
.text:0000000000006C78 loc_6C78:                               ; CODE XREF: base_len+18↑j
.text:0000000000006C78                 cmp     rdx, 1
.text:0000000000006C7C                 jz      short loc_6C90
.text:0000000000006C7E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000006C83                 lea     rax, [rdx-1]
.text:0000000000006C87                 jz      short loc_6C70
.text:0000000000006C89                 mov     rax, rdx
.text:0000000000006C8C                 pop     rbx
.text:0000000000006C8D                 retn
.text:0000000000006C8D ; ---------------------------------------------------------------------------
.text:0000000000006C8E                 align 10h
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: base_len+2C↑j
.text:0000000000006C90                 mov     eax, 1
.text:0000000000006C95                 pop     rbx
.text:0000000000006C96                 retn
.text:0000000000006C96 ; } // starts at 6C50
.text:0000000000006C96 base_len        endp
.text:0000000000006C96
.text:0000000000006C96 ; ---------------------------------------------------------------------------
.text:0000000000006C97                 align 20h
.text:0000000000006CA0
.text:0000000000006CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CA0
.text:0000000000006CA0
.text:0000000000006CA0                 public hard_locale
.text:0000000000006CA0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006CA0 ; __unwind {
.text:0000000000006CA0                 sub     rsp, 8
.text:0000000000006CA4                 xor     esi, esi        ; locale
.text:0000000000006CA6                 call    _setlocale
.text:0000000000006CAB                 mov     rdx, rax
.text:0000000000006CAE                 mov     eax, 1
.text:0000000000006CB3                 test    rdx, rdx
.text:0000000000006CB6                 jz      short loc_6CD5
.text:0000000000006CB8                 lea     rdi, aC         ; "C"
.text:0000000000006CBF                 mov     ecx, 2
.text:0000000000006CC4                 mov     rsi, rdx
.text:0000000000006CC7                 repe cmpsb
.text:0000000000006CC9                 setnbe  cl
.text:0000000000006CCC                 sbb     cl, 0
.text:0000000000006CCF                 xor     eax, eax
.text:0000000000006CD1                 test    cl, cl
.text:0000000000006CD3                 jnz     short loc_6CE0
.text:0000000000006CD5
.text:0000000000006CD5 loc_6CD5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006CD5                 add     rsp, 8
.text:0000000000006CD9                 retn
.text:0000000000006CD9 ; ---------------------------------------------------------------------------
.text:0000000000006CDA                 align 20h
.text:0000000000006CE0
.text:0000000000006CE0 loc_6CE0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006CE0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006CE7                 mov     ecx, 6
.text:0000000000006CEC                 mov     rsi, rdx
.text:0000000000006CEF                 repe cmpsb
.text:0000000000006CF1                 setnbe  al
.text:0000000000006CF4                 sbb     al, 0
.text:0000000000006CF6                 test    al, al
.text:0000000000006CF8                 setnz   al
.text:0000000000006CFB                 add     rsp, 8
.text:0000000000006CFF                 retn
.text:0000000000006CFF ; } // starts at 6CA0
.text:0000000000006CFF hard_locale     endp
.text:0000000000006CFF
.text:0000000000006D00
.text:0000000000006D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D00
.text:0000000000006D00 ; Attributes: info_from_lumina
.text:0000000000006D00
.text:0000000000006D00 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:0000000000006D00                 public hash_pjw
.text:0000000000006D00 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:0000000000006D00 ; __unwind {
.text:0000000000006D00                 movsx   rcx, byte ptr [rdi]
.text:0000000000006D04                 test    cl, cl
.text:0000000000006D06                 jz      short loc_6D30
.text:0000000000006D08                 xor     eax, eax
.text:0000000000006D0A                 nop     word ptr [rax+rax+00h]
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: hash_pjw+21↓j
.text:0000000000006D10                 rol     rax, 9
.text:0000000000006D14                 add     rdi, 1
.text:0000000000006D18                 add     rax, rcx
.text:0000000000006D1B                 movsx   rcx, byte ptr [rdi]
.text:0000000000006D1F                 test    cl, cl
.text:0000000000006D21                 jnz     short loc_6D10
.text:0000000000006D23                 xor     edx, edx
.text:0000000000006D25                 div     rsi
.text:0000000000006D28                 mov     rax, rdx
.text:0000000000006D2B                 retn
.text:0000000000006D2B ; ---------------------------------------------------------------------------
.text:0000000000006D2C                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: hash_pjw+6↑j
.text:0000000000006D30                 xor     edx, edx
.text:0000000000006D32                 mov     rax, rdx
.text:0000000000006D35                 retn
.text:0000000000006D35 ; } // starts at 6D00
.text:0000000000006D35 hash_pjw        endp
.text:0000000000006D35
.text:0000000000006D35 ; ---------------------------------------------------------------------------
.text:0000000000006D36                 align 20h
.text:0000000000006D40
.text:0000000000006D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D40
.text:0000000000006D40
.text:0000000000006D40                 public locale_charset
.text:0000000000006D40 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006D40 ; __unwind {
.text:0000000000006D40                 sub     rsp, 8
.text:0000000000006D44                 mov     edi, 0Eh        ; item
.text:0000000000006D49                 call    _nl_langinfo
.text:0000000000006D4E                 test    rax, rax
.text:0000000000006D51                 jz      short loc_6D70
.text:0000000000006D53                 cmp     byte ptr [rax], 0
.text:0000000000006D56                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000006D5D                 cmovz   rax, rdx
.text:0000000000006D61                 add     rsp, 8
.text:0000000000006D65                 retn
.text:0000000000006D65 ; ---------------------------------------------------------------------------
.text:0000000000006D66                 align 10h
.text:0000000000006D70
.text:0000000000006D70 loc_6D70:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006D70                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006D77                 add     rsp, 8
.text:0000000000006D7B                 retn
.text:0000000000006D7B ; } // starts at 6D40
.text:0000000000006D7B locale_charset  endp
.text:0000000000006D7B
.text:0000000000006D7B ; ---------------------------------------------------------------------------
.text:0000000000006D7C                 align 20h
.text:0000000000006D80
.text:0000000000006D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D80
.text:0000000000006D80 ; Attributes: info_from_lumina
.text:0000000000006D80
.text:0000000000006D80 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006D80                 public rpl_fclose
.text:0000000000006D80 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006D80 ; __unwind {
.text:0000000000006D80                 push    r12
.text:0000000000006D82                 push    rbp
.text:0000000000006D83                 push    rbx
.text:0000000000006D84                 mov     rbx, rdi
.text:0000000000006D87                 call    _fileno
.text:0000000000006D8C                 test    eax, eax
.text:0000000000006D8E                 mov     rdi, rbx        ; fp
.text:0000000000006D91                 js      short loc_6DE7
.text:0000000000006D93                 call    ___freading
.text:0000000000006D98                 test    eax, eax
.text:0000000000006D9A                 jnz     short loc_6DC8
.text:0000000000006D9C
.text:0000000000006D9C loc_6D9C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000006D9C                 mov     rdi, rbx        ; stream
.text:0000000000006D9F                 call    rpl_fflush
.text:0000000000006DA4                 test    eax, eax
.text:0000000000006DA6                 jz      short loc_6DE4
.text:0000000000006DA8                 call    ___errno_location
.text:0000000000006DAD                 mov     r12d, [rax]
.text:0000000000006DB0                 mov     rdi, rbx        ; stream
.text:0000000000006DB3                 mov     rbp, rax
.text:0000000000006DB6                 call    _fclose
.text:0000000000006DBB                 test    r12d, r12d
.text:0000000000006DBE                 jnz     short loc_6DF0
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006DC0                 pop     rbx
.text:0000000000006DC1                 pop     rbp
.text:0000000000006DC2                 pop     r12
.text:0000000000006DC4                 retn
.text:0000000000006DC4 ; ---------------------------------------------------------------------------
.text:0000000000006DC5                 align 8
.text:0000000000006DC8
.text:0000000000006DC8 loc_6DC8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006DC8                 mov     rdi, rbx        ; stream
.text:0000000000006DCB                 call    _fileno
.text:0000000000006DD0                 xor     esi, esi        ; offset
.text:0000000000006DD2                 mov     edx, 1          ; whence
.text:0000000000006DD7                 mov     edi, eax        ; fd
.text:0000000000006DD9                 call    _lseek
.text:0000000000006DDE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006DE2                 jnz     short loc_6D9C
.text:0000000000006DE4
.text:0000000000006DE4 loc_6DE4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006DE4                 mov     rdi, rbx        ; stream
.text:0000000000006DE7
.text:0000000000006DE7 loc_6DE7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006DE7                 pop     rbx
.text:0000000000006DE8                 pop     rbp
.text:0000000000006DE9                 pop     r12
.text:0000000000006DEB                 jmp     _fclose
.text:0000000000006DF0 ; ---------------------------------------------------------------------------
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000006DF0                 mov     [rbp+0], r12d
.text:0000000000006DF4                 mov     eax, 0FFFFFFFFh
.text:0000000000006DF9                 jmp     short loc_6DC0
.text:0000000000006DF9 ; } // starts at 6D80
.text:0000000000006DF9 rpl_fclose      endp
.text:0000000000006DF9
.text:0000000000006DF9 ; ---------------------------------------------------------------------------
.text:0000000000006DFB                 align 20h
.text:0000000000006E00
.text:0000000000006E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E00
.text:0000000000006E00 ; Attributes: info_from_lumina
.text:0000000000006E00
.text:0000000000006E00 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006E00                 public rpl_fflush
.text:0000000000006E00 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006E00 ; __unwind {
.text:0000000000006E00                 test    rdi, rdi
.text:0000000000006E03                 push    rbx
.text:0000000000006E04                 mov     rbx, rdi
.text:0000000000006E07                 jz      short loc_6E1A
.text:0000000000006E09                 call    ___freading
.text:0000000000006E0E                 test    eax, eax
.text:0000000000006E10                 jz      short loc_6E1A
.text:0000000000006E12                 test    dword ptr [rbx], 100h
.text:0000000000006E18                 jnz     short loc_6E28
.text:0000000000006E1A
.text:0000000000006E1A loc_6E1A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000006E1A                                         ; rpl_fflush+10↑j
.text:0000000000006E1A                 mov     rdi, rbx        ; stream
.text:0000000000006E1D                 pop     rbx
.text:0000000000006E1E                 jmp     _fflush
.text:0000000000006E1E ; ---------------------------------------------------------------------------
.text:0000000000006E23                 align 8
.text:0000000000006E28
.text:0000000000006E28 loc_6E28:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006E28                 mov     rdi, rbx
.text:0000000000006E2B                 mov     edx, 1
.text:0000000000006E30                 xor     esi, esi
.text:0000000000006E32                 call    rpl_fseeko
.text:0000000000006E37                 mov     rdi, rbx        ; stream
.text:0000000000006E3A                 pop     rbx
.text:0000000000006E3B                 jmp     _fflush
.text:0000000000006E3B ; } // starts at 6E00
.text:0000000000006E3B rpl_fflush      endp
.text:0000000000006E3B
.text:0000000000006E40
.text:0000000000006E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E40
.text:0000000000006E40 ; Attributes: info_from_lumina
.text:0000000000006E40
.text:0000000000006E40 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006E40                 public rpl_fseeko
.text:0000000000006E40 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006E40 ; __unwind {
.text:0000000000006E40                 mov     rax, [rdi+8]
.text:0000000000006E44                 cmp     [rdi+10h], rax
.text:0000000000006E48                 jz      short loc_6E50
.text:0000000000006E4A
.text:0000000000006E4A loc_6E4A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000006E4A                                         ; rpl_fseeko+1F↓j
.text:0000000000006E4A                 jmp     _fseeko
.text:0000000000006E4A ; ---------------------------------------------------------------------------
.text:0000000000006E4F                 align 10h
.text:0000000000006E50
.text:0000000000006E50 loc_6E50:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006E50                 mov     rax, [rdi+20h]
.text:0000000000006E54                 cmp     [rdi+28h], rax
.text:0000000000006E58                 jnz     short loc_6E4A
.text:0000000000006E5A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000006E5F                 jnz     short loc_6E4A
.text:0000000000006E61                 push    r12
.text:0000000000006E63                 push    rbp
.text:0000000000006E64                 mov     r12d, edx
.text:0000000000006E67                 push    rbx
.text:0000000000006E68                 mov     rbp, rsi
.text:0000000000006E6B                 mov     rbx, rdi
.text:0000000000006E6E                 call    _fileno
.text:0000000000006E73                 mov     edx, r12d       ; whence
.text:0000000000006E76                 mov     rsi, rbp        ; offset
.text:0000000000006E79                 mov     edi, eax        ; fd
.text:0000000000006E7B                 call    _lseek
.text:0000000000006E80                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E84                 jz      short loc_6E92
.text:0000000000006E86                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006E89                 mov     [rbx+90h], rax
.text:0000000000006E90                 xor     eax, eax
.text:0000000000006E92
.text:0000000000006E92 loc_6E92:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006E92                 pop     rbx
.text:0000000000006E93                 pop     rbp
.text:0000000000006E94                 pop     r12
.text:0000000000006E96                 retn
.text:0000000000006E96 ; } // starts at 6E40
.text:0000000000006E96 rpl_fseeko      endp
.text:0000000000006E96
.text:0000000000006E96 ; ---------------------------------------------------------------------------
.text:0000000000006E97                 align 20h
.text:0000000000006EA0
.text:0000000000006EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EA0
.text:0000000000006EA0 ; Attributes: info_from_lumina
.text:0000000000006EA0
.text:0000000000006EA0 ; void _libc_csu_init(void)
.text:0000000000006EA0                 public __libc_csu_init
.text:0000000000006EA0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006EA0 ; __unwind {
.text:0000000000006EA0                 push    r15
.text:0000000000006EA2                 push    r14
.text:0000000000006EA4                 mov     r15, rdx
.text:0000000000006EA7                 push    r13
.text:0000000000006EA9                 push    r12
.text:0000000000006EAB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006EB2                 push    rbp
.text:0000000000006EB3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000006EBA                 push    rbx
.text:0000000000006EBB                 mov     r13d, edi
.text:0000000000006EBE                 mov     r14, rsi
.text:0000000000006EC1                 sub     rbp, r12
.text:0000000000006EC4                 sub     rsp, 8
.text:0000000000006EC8                 sar     rbp, 3
.text:0000000000006ECC                 call    _init_proc
.text:0000000000006ED1                 test    rbp, rbp
.text:0000000000006ED4                 jz      short loc_6EF6
.text:0000000000006ED6                 xor     ebx, ebx
.text:0000000000006ED8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006EE0
.text:0000000000006EE0 loc_6EE0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006EE0                 mov     rdx, r15
.text:0000000000006EE3                 mov     rsi, r14
.text:0000000000006EE6                 mov     edi, r13d
.text:0000000000006EE9                 call    ds:(__frame_dummy_init_array_entry - 209A30h)[r12+rbx*8]
.text:0000000000006EED                 add     rbx, 1
.text:0000000000006EF1                 cmp     rbp, rbx
.text:0000000000006EF4                 jnz     short loc_6EE0
.text:0000000000006EF6
.text:0000000000006EF6 loc_6EF6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006EF6                 add     rsp, 8
.text:0000000000006EFA                 pop     rbx
.text:0000000000006EFB                 pop     rbp
.text:0000000000006EFC                 pop     r12
.text:0000000000006EFE                 pop     r13
.text:0000000000006F00                 pop     r14
.text:0000000000006F02                 pop     r15
.text:0000000000006F04                 retn
.text:0000000000006F04 ; } // starts at 6EA0
.text:0000000000006F04 __libc_csu_init endp
.text:0000000000006F04
.text:0000000000006F04 ; ---------------------------------------------------------------------------
.text:0000000000006F05                 align 10h
.text:0000000000006F10
.text:0000000000006F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F10
.text:0000000000006F10
.text:0000000000006F10 ; void _libc_csu_fini(void)
.text:0000000000006F10                 public __libc_csu_fini
.text:0000000000006F10 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006F10 ; __unwind {
.text:0000000000006F10                 rep retn
.text:0000000000006F10 ; } // starts at 6F10
.text:0000000000006F10 __libc_csu_fini endp
.text:0000000000006F10
.text:0000000000006F10 ; ---------------------------------------------------------------------------
.text:0000000000006F12                 align 20h
.text:0000000000006F20
.text:0000000000006F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F20
.text:0000000000006F20
.text:0000000000006F20 atexit          proc near               ; CODE XREF: main+65↑p
.text:0000000000006F20 ; __unwind {
.text:0000000000006F20                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006F27                 xor     esi, esi        ; obj
.text:0000000000006F29                 jmp     ___cxa_atexit
.text:0000000000006F29 ; } // starts at 6F20
.text:0000000000006F29 atexit          endp
.text:0000000000006F29
.text:0000000000006F29 _text           ends
.text:0000000000006F29
LOAD:0000000000006F2E ; ===========================================================================
LOAD:0000000000006F2E
LOAD:0000000000006F2E ; Segment type: Pure code
LOAD:0000000000006F2E ; Segment permissions: Read/Execute
LOAD:0000000000006F2E LOAD            segment byte public 'CODE' use64
LOAD:0000000000006F2E                 assume cs:LOAD
LOAD:0000000000006F2E                 ;org 6F2Eh
LOAD:0000000000006F2E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006F2E                 align 10h
LOAD:0000000000006F2E LOAD            ends
LOAD:0000000000006F2E
.fini:0000000000006F30 ; ===========================================================================
.fini:0000000000006F30
.fini:0000000000006F30 ; Segment type: Pure code
.fini:0000000000006F30 ; Segment permissions: Read/Execute
.fini:0000000000006F30 _fini           segment dword public 'CODE' use64
.fini:0000000000006F30                 assume cs:_fini
.fini:0000000000006F30                 ;org 6F30h
.fini:0000000000006F30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006F30
.fini:0000000000006F30 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006F30
.fini:0000000000006F30
.fini:0000000000006F30                 public _term_proc
.fini:0000000000006F30 _term_proc      proc near
.fini:0000000000006F30                 sub     rsp, 8          ; _fini
.fini:0000000000006F34                 add     rsp, 8
.fini:0000000000006F38                 retn
.fini:0000000000006F38 _term_proc      endp
.fini:0000000000006F38
.fini:0000000000006F38 _fini           ends
.fini:0000000000006F38
LOAD:0000000000006F39 ; ===========================================================================
LOAD:0000000000006F39
LOAD:0000000000006F39 ; Segment type: Pure code
LOAD:0000000000006F39 ; Segment permissions: Read/Execute
LOAD:0000000000006F39 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006F39                 assume cs:LOAD
LOAD:0000000000006F39                 ;org 6F39h
LOAD:0000000000006F39                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006F39                 align 20h
LOAD:0000000000006F39 LOAD            ends
LOAD:0000000000006F39
.rodata:0000000000006F40 ; ===========================================================================
.rodata:0000000000006F40
.rodata:0000000000006F40 ; Segment type: Pure data
.rodata:0000000000006F40 ; Segment permissions: Read
.rodata:0000000000006F40 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006F40                 assume cs:_rodata
.rodata:0000000000006F40                 ;org 6F40h
.rodata:0000000000006F40                 public _IO_stdin_used
.rodata:0000000000006F40 _IO_stdin_used  db    1
.rodata:0000000000006F41                 db    0
.rodata:0000000000006F42                 db    2
.rodata:0000000000006F43                 db    0
.rodata:0000000000006F44 ; const char aCannotStatS[]
.rodata:0000000000006F44 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: isdir+6E↑o
.rodata:0000000000006F53 aRealpath       db 'realpath',0         ; DATA XREF: main+13F↑o
.rodata:0000000000006F53                                         ; usage+10C↑o ...
.rodata:0000000000006F5C asc_6F5C        db '[',0                ; DATA XREF: usage+118↑o
.rodata:0000000000006F5E aTestInvocation db 'test invocation',0  ; DATA XREF: usage+13F↑o
.rodata:0000000000006F6E aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006F6E                                         ; DATA XREF: usage+16F↑o
.rodata:0000000000006F6E                                         ; usage+26C↑o ...
.rodata:0000000000006F84 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+180↑o
.rodata:0000000000006F8E aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+18C↑o
.rodata:0000000000006F9D aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+11F↑o
.rodata:0000000000006FA7 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+14B↑o
.rodata:0000000000006FB1 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+163↑o
.rodata:0000000000006FBB ; const char aSOnlineHelpS[]
.rodata:0000000000006FBB aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:0000000000006FBB                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006FD2 unk_6FD2        db  47h ; G             ; DATA XREF: main+138↑o
.rodata:0000000000006FD2                                         ; usage+1F6↑o ...
.rodata:0000000000006FD3                 db  4Eh ; N
.rodata:0000000000006FD4                 db  55h ; U
.rodata:0000000000006FD5                 db  20h
.rodata:0000000000006FD6 ; const char domainname[]
.rodata:0000000000006FD6 domainname      db 'coreutils',0        ; DATA XREF: main+46↑o
.rodata:0000000000006FD6                                         ; main+52↑o ...
.rodata:0000000000006FE0 ; const char s2[]
.rodata:0000000000006FE0 s2              db 'en_',0              ; DATA XREF: usage+21D↑o
.rodata:0000000000006FE0                                         ; usage+2DE↑o
.rodata:0000000000006FE4 ; const char aFullDocumentat[]
.rodata:0000000000006FE4 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006FE4                                         ; DATA XREF: usage:loc_2169↑o
.rodata:0000000000006FE4                                         ; usage:loc_2226↑o
.rodata:0000000000006FFF ; const char dirname[]
.rodata:0000000000006FFF dirname         db '/usr/local/share/locale',0
.rodata:0000000000006FFF                                         ; DATA XREF: main+3F↑o
.rodata:0000000000007017 ; const char shortopts[]
.rodata:0000000000007017 shortopts       db 'eLmPqsz',0          ; DATA XREF: main:loc_1830↑o
.rodata:000000000000701F aPadraigBrady   db 'Padraig Brady',0    ; DATA XREF: main+131↑o
.rodata:000000000000702D ; const char msgid[]
.rodata:000000000000702D msgid           db 'missing operand',0  ; DATA XREF: main:loc_1BF9↑o
.rodata:000000000000703D aCanonicalizeEx db 'canonicalize-existing',0
.rodata:000000000000703D                                         ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000007053 aCanonicalizeMi db 'canonicalize-missing',0
.rodata:0000000000007053                                         ; DATA XREF: .data.rel.ro:0000000000209A60↓o
.rodata:0000000000007068 aRelativeTo     db 'relative-to',0      ; DATA XREF: .data.rel.ro:0000000000209A80↓o
.rodata:0000000000007074 aRelativeBase   db 'relative-base',0    ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:0000000000007082 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:0000000000007088 aStrip          db 'strip',0            ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:000000000000708E aNoSymlinks     db 'no-symlinks',0      ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:000000000000709A aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:000000000000709F aLogical        db 'logical',0          ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:00000000000070A7 aPhysical       db 'physical',0         ; DATA XREF: .data.rel.ro:0000000000209B60↓o
.rodata:00000000000070B0 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:00000000000070B5 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:00000000000070BD                 align 20h
.rodata:00000000000070C0 ; const char aTrySHelpForMor[]
.rodata:00000000000070C0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000070C0                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000070E7                 align 8
.rodata:00000000000070E8 ; const char aUsageSOptionFi[]
.rodata:00000000000070E8 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE...',0Ah,0
.rodata:00000000000070E8                                         ; DATA XREF: usage:loc_1F8D↑o
.rodata:0000000000007107                 align 8
.rodata:0000000000007108 ; const char aPrintTheResolv[]
.rodata:0000000000007108 aPrintTheResolv db 'Print the resolved absolute file name;',0Ah
.rodata:0000000000007108                                         ; DATA XREF: usage+84↑o
.rodata:0000000000007108                 db 'all but the last component must exist',0Ah
.rodata:0000000000007108                 db 0Ah,0
.rodata:0000000000007157                 align 8
.rodata:0000000000007158 ; const char aECanonicalizeE[]
.rodata:0000000000007158 aECanonicalizeE db '  -e, --canonicalize-existing  all components of the path must ex'
.rodata:0000000000007158                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000007158                 db 'ist',0Ah
.rodata:0000000000007158                 db '  -m, --canonicalize-missing   no path components need exist or b'
.rodata:0000000000007158                 db 'e a directory',0Ah
.rodata:0000000000007158                 db '  -L, --logical                resolve ',27h,'..',27h,' component'
.rodata:0000000000007158                 db 's before symlinks',0Ah
.rodata:0000000000007158                 db '  -P, --physical               resolve symlinks as encountered (d'
.rodata:0000000000007158                 db 'efault)',0Ah
.rodata:0000000000007158                 db '  -q, --quiet                  suppress most error messages',0Ah
.rodata:0000000000007158                 db '      --relative-to=DIR        print the resolved path relative t'
.rodata:0000000000007158                 db 'o DIR',0Ah
.rodata:0000000000007158                 db '      --relative-base=DIR      print absolute paths unless paths '
.rodata:0000000000007158                 db 'below DIR',0Ah
.rodata:0000000000007158                 db '  -s, --strip, --no-symlinks   don',27h,'t expand symlinks',0Ah
.rodata:0000000000007158                 db '  -z, --zero                   end each output line with NUL, not'
.rodata:0000000000007158                 db ' newline',0Ah
.rodata:0000000000007158                 db 0Ah,0
.rodata:00000000000073CB                 align 10h
.rodata:00000000000073D0 ; const char aHelpDisplayThi[]
.rodata:00000000000073D0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000073D0                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000073FD                 align 20h
.rodata:0000000000007400 ; const char aVersionOutputV[]
.rodata:0000000000007400 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000007400                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000007436                 align 8
.rodata:0000000000007438 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007438                                         ; DATA XREF: usage+1EF↑o
.rodata:0000000000007438                                         ; usage+253↑o ...
.rodata:0000000000007460 ; const char aReportAnyTrans[]
.rodata:0000000000007460 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007460                                         ; DATA XREF: usage+347↑o
.rodata:0000000000007460                 db 'am/>',0Ah,0
.rodata:00000000000074A7                 align 8
.rodata:00000000000074A8 ; const char aOrAvailableLoc[]
.rodata:00000000000074A8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000074A8                                         ; DATA XREF: usage:loc_21AE↑o
.rodata:00000000000074DB asc_74DB        db '/..',0              ; DATA XREF: relpath+15D↑o
.rodata:00000000000074DB                                         ; relpath+140↑o ...
.rodata:00000000000074DF ; const char aGeneratingRela[]
.rodata:00000000000074DF aGeneratingRela db 'generating relative path',0
.rodata:00000000000074DF                                         ; DATA XREF: relpath:loc_2500↑o
.rodata:00000000000074F8 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000074FD ; const char aWriteError[]
.rodata:00000000000074FD aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2C03↑o
.rodata:0000000000007509 ; const char format[]
.rodata:0000000000007509 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000007509                                         ; main+341↑o ...
.rodata:0000000000007510 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:0000000000007510                                         ; DATA XREF: hash_print_statistics:loc_3275↑o
.rodata:0000000000007528 aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:0000000000007528                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:0000000000007540 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:0000000000007540                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:0000000000007558 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:0000000000007558                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:0000000000007579                 align 20h
.rodata:0000000000007580 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:0000000000007580                                         ; hash_initialize:loc_36E0↑o
.rodata:0000000000007581                 db    0
.rodata:0000000000007582                 db    0
.rodata:0000000000007583                 db    0
.rodata:0000000000007584                 db    0
.rodata:0000000000007585                 db    0
.rodata:0000000000007586                 db  80h
.rodata:0000000000007587                 db  3Fh ; ?
.rodata:0000000000007588                 db 0CDh
.rodata:0000000000007589                 db 0CCh
.rodata:000000000000758A                 db  4Ch ; L
.rodata:000000000000758B                 db  3Fh ; ?
.rodata:000000000000758C                 db 0F4h
.rodata:000000000000758D                 db 0FDh
.rodata:000000000000758E                 db 0B4h
.rodata:000000000000758F                 db  3Fh ; ?
.rodata:0000000000007590                 db    0
.rodata:0000000000007591                 db    0
.rodata:0000000000007592                 db    0
.rodata:0000000000007593                 db    0
.rodata:0000000000007594 dword_7594      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:0000000000007594                                         ; check_tuning+4A↑r
.rodata:0000000000007598 dword_7598      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000759C dword_759C      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:00000000000075A0 dword_75A0      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:00000000000075A4 dword_75A4      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:00000000000075A8 dword_75A8      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:00000000000075AC dword_75AC      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:00000000000075AC                                         ; hash_rehash+40↑r ...
.rodata:00000000000075B0 dword_75B0      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:00000000000075B0                                         ; hash_initialize+150↑r ...
.rodata:00000000000075B4                 align 8
.rodata:00000000000075B8 qword_75B8      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:00000000000075B8                                         ; hash_print_statistics+11F↑r
.rodata:00000000000075C0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000075C0                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000075F8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000075F8                                         ; relpath+1A9↑o ...
.rodata:0000000000007600 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007604 unk_7604        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007605                 db  80h
.rodata:0000000000007606                 db  98h
.rodata:0000000000007607                 db    0
.rodata:0000000000007608 unk_7608        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007609                 db  80h
.rodata:000000000000760A                 db  99h
.rodata:000000000000760B                 db    0
.rodata:000000000000760C unk_760C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000760D                 db    7
.rodata:000000000000760E                 db  65h ; e
.rodata:000000000000760F                 db    0
.rodata:0000000000007610 unk_7610        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007611                 db 0AFh
.rodata:0000000000007612                 db    0
.rodata:0000000000007613 unk_7613        db  22h ; "             ; DATA XREF: gettext_quote:loc_41D0↑o
.rodata:0000000000007613                                         ; quotearg_buffer_restyled:loc_4F8B↑o ...
.rodata:0000000000007614                 db    0
.rodata:0000000000007615 ; const char asc_7615[2]
.rodata:0000000000007615 asc_7615        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007615                                         ; quotearg_buffer_restyled:loc_4353↑o ...
.rodata:0000000000007617 ; const char asc_7617[2]
.rodata:0000000000007617 asc_7617        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007617                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007619 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007621 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209BE8↓o
.rodata:0000000000007627 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:0000000000007634 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BF8↓o
.rodata:0000000000007634                                         ; .data.rel.ro:0000000000209C18↓o
.rodata:0000000000007641 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007641                                         ; DATA XREF: .data.rel.ro:0000000000209C00↓o
.rodata:0000000000007655 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209C08↓o
.rodata:0000000000007657 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209C10↓o
.rodata:000000000000765F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C28↓o
.rodata:0000000000007667                 align 20h
.rodata:0000000000007680 jpt_4331        dd offset loc_50DA - 7680h
.rodata:0000000000007680                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007680                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007680                 dd offset loc_4333 - 7680h ; jump table for switch statement
.rodata:0000000000007680                 dd offset loc_5308 - 7680h
.rodata:0000000000007680                 dd offset loc_5114 - 7680h
.rodata:0000000000007680                 dd offset loc_4F04 - 7680h
.rodata:0000000000007680                 dd offset loc_4F60 - 7680h
.rodata:0000000000007680                 dd offset loc_4FB5 - 7680h
.rodata:0000000000007680                 dd offset loc_4FFA - 7680h
.rodata:0000000000007680                 dd offset loc_5034 - 7680h
.rodata:0000000000007680                 dd offset loc_5034 - 7680h
.rodata:0000000000007680                 dd offset loc_5034 - 7680h
.rodata:00000000000076AC jpt_448E        dd offset loc_46B0 - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000076AC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh ; jump table for switch statement
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset loc_46F0 - 76ACh, offset loc_45F8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_45B8 - 76ACh, offset loc_4780 - 76ACh, offset loc_4770 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4760 - 76ACh, offset loc_4750 - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset def_448E - 76ACh
.rodata:00000000000076AC                 dd offset def_448E - 76ACh, offset def_448E - 76ACh, offset loc_4740 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4730 - 76ACh, offset loc_4730 - 76ACh, offset loc_4700 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4730 - 76ACh, offset loc_46D8 - 76ACh, offset loc_4730 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4593 - 76ACh, offset loc_4730 - 76ACh, offset loc_4730 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4730 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_4730 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4730 - 76ACh, offset loc_4730 - 76ACh, offset loc_4730 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4563 - 76ACh, offset def_448E - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_4730 - 76ACh, offset loc_4608 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_4730 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4730 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh, offset loc_46D8 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4493 - 76ACh, offset loc_4730 - 76ACh, offset loc_4493 - 76ACh
.rodata:00000000000076AC                 dd offset loc_4700 - 76ACh
.rodata:00000000000078A8 jpt_481A        dd offset loc_4880 - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000078A8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h ; jump table for switch statement
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset loc_4870 - 78A8h, offset loc_49C0 - 78A8h
.rodata:00000000000078A8                 dd offset loc_49A8 - 78A8h, offset loc_4858 - 78A8h, offset loc_4998 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4840 - 78A8h, offset loc_4980 - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset def_481A - 78A8h
.rodata:00000000000078A8                 dd offset def_481A - 78A8h, offset def_481A - 78A8h, offset loc_4968 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4950 - 78A8h, offset loc_4950 - 78A8h, offset loc_4938 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4950 - 78A8h, offset loc_4920 - 78A8h, offset loc_4950 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4590 - 78A8h, offset loc_4950 - 78A8h, offset loc_4950 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4950 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4950 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4950 - 78A8h, offset loc_4950 - 78A8h, offset loc_4950 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4560 - 78A8h, offset def_481A - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4950 - 78A8h, offset loc_4820 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4950 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4950 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4920 - 78A8h, offset loc_4920 - 78A8h, offset loc_4920 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4490 - 78A8h, offset loc_4950 - 78A8h, offset loc_4490 - 78A8h
.rodata:00000000000078A8                 dd offset loc_4938 - 78A8h
.rodata:0000000000007AA4                 align 20h
.rodata:0000000000007AC0                 public quoting_style_vals
.rodata:0000000000007AC0 quoting_style_vals db    0
.rodata:0000000000007AC1                 db    0
.rodata:0000000000007AC2                 db    0
.rodata:0000000000007AC3                 db    0
.rodata:0000000000007AC4                 db    1
.rodata:0000000000007AC5                 db    0
.rodata:0000000000007AC6                 db    0
.rodata:0000000000007AC7                 db    0
.rodata:0000000000007AC8                 db    2
.rodata:0000000000007AC9                 db    0
.rodata:0000000000007ACA                 db    0
.rodata:0000000000007ACB                 db    0
.rodata:0000000000007ACC                 db    3
.rodata:0000000000007ACD                 db    0
.rodata:0000000000007ACE                 db    0
.rodata:0000000000007ACF                 db    0
.rodata:0000000000007AD0                 db    4
.rodata:0000000000007AD1                 db    0
.rodata:0000000000007AD2                 db    0
.rodata:0000000000007AD3                 db    0
.rodata:0000000000007AD4                 db    5
.rodata:0000000000007AD5                 db    0
.rodata:0000000000007AD6                 db    0
.rodata:0000000000007AD7                 db    0
.rodata:0000000000007AD8                 db    6
.rodata:0000000000007AD9                 db    0
.rodata:0000000000007ADA                 db    0
.rodata:0000000000007ADB                 db    0
.rodata:0000000000007ADC                 db    7
.rodata:0000000000007ADD                 db    0
.rodata:0000000000007ADE                 db    0
.rodata:0000000000007ADF                 db    0
.rodata:0000000000007AE0                 db    8
.rodata:0000000000007AE1                 db    0
.rodata:0000000000007AE2                 db    0
.rodata:0000000000007AE3                 db    0
.rodata:0000000000007AE4                 db    9
.rodata:0000000000007AE5                 db    0
.rodata:0000000000007AE6                 db    0
.rodata:0000000000007AE7                 db    0
.rodata:0000000000007AE8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007AF4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000007AFB ; const char aC_0[]
.rodata:0000000000007AFB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_606C↑o
.rodata:0000000000007AFF ; const char aWrittenByS[]
.rodata:0000000000007AFF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000007AFF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000007B0F ; const char aWrittenBySAndS[]
.rodata:0000000000007B0F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000007B0F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007B26 ; const char aWrittenBySSAnd[]
.rodata:0000000000007B26 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007B26                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007B42 ; const char aReportBugsToS[]
.rodata:0000000000007B42 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007B42                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000007B57 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007B57                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000007B6D ; const char aSHomePageS[]
.rodata:0000000000007B6D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000007B6D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007B81                 align 8
.rodata:0000000000007B88 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007B88 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007B88                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007B88                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007B88                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007B88                 db '.',0Ah
.rodata:0000000000007B88                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007B88                 db 0Ah,0
.rodata:0000000000007C54                 align 8
.rodata:0000000000007C58 ; const char aWrittenBySSSAn[]
.rodata:0000000000007C58 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007C58                                         ; DATA XREF: version_etc_arn:loc_62C0↑o
.rodata:0000000000007C58                 db 'and %s.',0Ah,0
.rodata:0000000000007C78 ; const char aWrittenBySSSSA[]
.rodata:0000000000007C78 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007C78                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007C78                 db '%s, and %s.',0Ah,0
.rodata:0000000000007C9C                 align 20h
.rodata:0000000000007CA0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007CA0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007CA0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007CA0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007CC8 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007CC8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007CC8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007CC8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007CF4                 align 8
.rodata:0000000000007CF8 ; const char aWrittenBySSSSS[]
.rodata:0000000000007CF8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007CF8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007CF8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007CF8                 db 'and %s.',0Ah,0
.rodata:0000000000007D28 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007D28 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007D28                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007D28                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007D28                 db '%s, and %s.',0Ah,0
.rodata:0000000000007D5C                 align 20h
.rodata:0000000000007D60 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007D60                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007D60                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007D60                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000007D9C                 align 20h
.rodata:0000000000007DA0 ; const char aGeneralHelpUsi[]
.rodata:0000000000007DA0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007DA0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007DA0                 db 0
.rodata:0000000000007DE1                 align 8
.rodata:0000000000007DE8 jpt_60D4        dd offset loc_6156 - 7DE8h
.rodata:0000000000007DE8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000007DE8                                         ; version_etc_arn+9D↑r
.rodata:0000000000007DE8                 dd offset loc_61E8 - 7DE8h ; jump table for switch statement
.rodata:0000000000007DE8                 dd offset loc_6228 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_6270 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_62C0 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_6318 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_6348 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_63B0 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_60E0 - 7DE8h
.rodata:0000000000007DE8                 dd offset loc_6190 - 7DE8h
.rodata:0000000000007E10                 align 20h
.rodata:0000000000007E20                 public version_etc_copyright
.rodata:0000000000007E20 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007E20                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000007E4F ; const char aMemoryExhauste[]
.rodata:0000000000007E4F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007E60 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007E62 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6CE0↑o
.rodata:0000000000007E68 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007E68                                         ; locale_charset:loc_6D70↑o
.rodata:0000000000007E68 _rodata         ends
.rodata:0000000000007E68
LOAD:0000000000007E6E ; ===========================================================================
LOAD:0000000000007E6E
LOAD:0000000000007E6E ; Segment type: Pure code
LOAD:0000000000007E6E ; Segment permissions: Read/Execute
LOAD:0000000000007E6E LOAD            segment byte public 'CODE' use64
LOAD:0000000000007E6E                 assume cs:LOAD
LOAD:0000000000007E6E                 ;org 7E6Eh
LOAD:0000000000007E6E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007E6E                 align 10h
LOAD:0000000000007E6E LOAD            ends
LOAD:0000000000007E6E
.eh_frame_hdr:0000000000007E70 ; ===========================================================================
.eh_frame_hdr:0000000000007E70
.eh_frame_hdr:0000000000007E70 ; Segment type: Pure data
.eh_frame_hdr:0000000000007E70 ; Segment permissions: Read
.eh_frame_hdr:0000000000007E70 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007E70                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007E70                 ;org 7E70h
.eh_frame_hdr:0000000000007E70 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007E71                 db  1Bh
.eh_frame_hdr:0000000000007E72                 db    3
.eh_frame_hdr:0000000000007E73                 db  3Bh ; ;
.eh_frame_hdr:0000000000007E74                 db 0D4h
.eh_frame_hdr:0000000000007E75                 db    3
.eh_frame_hdr:0000000000007E76                 db    0
.eh_frame_hdr:0000000000007E77                 db    0
.eh_frame_hdr:0000000000007E78                 db  79h ; y
.eh_frame_hdr:0000000000007E79                 db    0
.eh_frame_hdr:0000000000007E7A                 db    0
.eh_frame_hdr:0000000000007E7B                 db    0
.eh_frame_hdr:0000000000007E7C                 db  30h ; 0
.eh_frame_hdr:0000000000007E7D                 db  96h
.eh_frame_hdr:0000000000007E7E                 db 0FFh
.eh_frame_hdr:0000000000007E7F                 db 0FFh
.eh_frame_hdr:0000000000007E80                 db  20h
.eh_frame_hdr:0000000000007E81                 db    4
.eh_frame_hdr:0000000000007E82                 db    0
.eh_frame_hdr:0000000000007E83                 db    0
.eh_frame_hdr:0000000000007E84                 db  40h ; @
.eh_frame_hdr:0000000000007E85                 db  99h
.eh_frame_hdr:0000000000007E86                 db 0FFh
.eh_frame_hdr:0000000000007E87                 db 0FFh
.eh_frame_hdr:0000000000007E88                 db  48h ; H
.eh_frame_hdr:0000000000007E89                 db    4
.eh_frame_hdr:0000000000007E8A                 db    0
.eh_frame_hdr:0000000000007E8B                 db    0
.eh_frame_hdr:0000000000007E8C                 db  50h ; P
.eh_frame_hdr:0000000000007E8D                 db  99h
.eh_frame_hdr:0000000000007E8E                 db 0FFh
.eh_frame_hdr:0000000000007E8F                 db 0FFh
.eh_frame_hdr:0000000000007E90                 db 0F4h
.eh_frame_hdr:0000000000007E91                 db    4
.eh_frame_hdr:0000000000007E92                 db    0
.eh_frame_hdr:0000000000007E93                 db    0
.eh_frame_hdr:0000000000007E94                 db  20h
.eh_frame_hdr:0000000000007E95                 db  9Eh
.eh_frame_hdr:0000000000007E96                 db 0FFh
.eh_frame_hdr:0000000000007E97                 db 0FFh
.eh_frame_hdr:0000000000007E98                 db 0F0h
.eh_frame_hdr:0000000000007E99                 db    3
.eh_frame_hdr:0000000000007E9A                 db    0
.eh_frame_hdr:0000000000007E9B                 db    0
.eh_frame_hdr:0000000000007E9C                 db  30h ; 0
.eh_frame_hdr:0000000000007E9D                 db  9Fh
.eh_frame_hdr:0000000000007E9E                 db 0FFh
.eh_frame_hdr:0000000000007E9F                 db 0FFh
.eh_frame_hdr:0000000000007EA0                 db  60h ; `
.eh_frame_hdr:0000000000007EA1                 db    4
.eh_frame_hdr:0000000000007EA2                 db    0
.eh_frame_hdr:0000000000007EA3                 db    0
.eh_frame_hdr:0000000000007EA4                 db 0C0h
.eh_frame_hdr:0000000000007EA5                 db  9Fh
.eh_frame_hdr:0000000000007EA6                 db 0FFh
.eh_frame_hdr:0000000000007EA7                 db 0FFh
.eh_frame_hdr:0000000000007EA8                 db  74h ; t
.eh_frame_hdr:0000000000007EA9                 db    4
.eh_frame_hdr:0000000000007EAA                 db    0
.eh_frame_hdr:0000000000007EAB                 db    0
.eh_frame_hdr:0000000000007EAC                 db  10h
.eh_frame_hdr:0000000000007EAD                 db 0A0h
.eh_frame_hdr:0000000000007EAE                 db 0FFh
.eh_frame_hdr:0000000000007EAF                 db 0FFh
.eh_frame_hdr:0000000000007EB0                 db  9Ch
.eh_frame_hdr:0000000000007EB1                 db    4
.eh_frame_hdr:0000000000007EB2                 db    0
.eh_frame_hdr:0000000000007EB3                 db    0
.eh_frame_hdr:0000000000007EB4                 db 0C0h
.eh_frame_hdr:0000000000007EB5                 db 0A0h
.eh_frame_hdr:0000000000007EB6                 db 0FFh
.eh_frame_hdr:0000000000007EB7                 db 0FFh
.eh_frame_hdr:0000000000007EB8                 db 0C8h
.eh_frame_hdr:0000000000007EB9                 db    4
.eh_frame_hdr:0000000000007EBA                 db    0
.eh_frame_hdr:0000000000007EBB                 db    0
.eh_frame_hdr:0000000000007EBC                 db  30h ; 0
.eh_frame_hdr:0000000000007EBD                 db 0A4h
.eh_frame_hdr:0000000000007EBE                 db 0FFh
.eh_frame_hdr:0000000000007EBF                 db 0FFh
.eh_frame_hdr:0000000000007EC0                 db  40h ; @
.eh_frame_hdr:0000000000007EC1                 db    5
.eh_frame_hdr:0000000000007EC2                 db    0
.eh_frame_hdr:0000000000007EC3                 db    0
.eh_frame_hdr:0000000000007EC4                 db 0B0h
.eh_frame_hdr:0000000000007EC5                 db 0A4h
.eh_frame_hdr:0000000000007EC6                 db 0FFh
.eh_frame_hdr:0000000000007EC7                 db 0FFh
.eh_frame_hdr:0000000000007EC8                 db 0A0h
.eh_frame_hdr:0000000000007EC9                 db    5
.eh_frame_hdr:0000000000007ECA                 db    0
.eh_frame_hdr:0000000000007ECB                 db    0
.eh_frame_hdr:0000000000007ECC                 db 0F0h
.eh_frame_hdr:0000000000007ECD                 db 0A6h
.eh_frame_hdr:0000000000007ECE                 db 0FFh
.eh_frame_hdr:0000000000007ECF                 db 0FFh
.eh_frame_hdr:0000000000007ED0                 db    8
.eh_frame_hdr:0000000000007ED1                 db    6
.eh_frame_hdr:0000000000007ED2                 db    0
.eh_frame_hdr:0000000000007ED3                 db    0
.eh_frame_hdr:0000000000007ED4                 db  30h ; 0
.eh_frame_hdr:0000000000007ED5                 db 0ADh
.eh_frame_hdr:0000000000007ED6                 db 0FFh
.eh_frame_hdr:0000000000007ED7                 db 0FFh
.eh_frame_hdr:0000000000007ED8                 db  58h ; X
.eh_frame_hdr:0000000000007ED9                 db    6
.eh_frame_hdr:0000000000007EDA                 db    0
.eh_frame_hdr:0000000000007EDB                 db    0
.eh_frame_hdr:0000000000007EDC                 db  40h ; @
.eh_frame_hdr:0000000000007EDD                 db 0ADh
.eh_frame_hdr:0000000000007EDE                 db 0FFh
.eh_frame_hdr:0000000000007EDF                 db 0FFh
.eh_frame_hdr:0000000000007EE0                 db  6Ch ; l
.eh_frame_hdr:0000000000007EE1                 db    6
.eh_frame_hdr:0000000000007EE2                 db    0
.eh_frame_hdr:0000000000007EE3                 db    0
.eh_frame_hdr:0000000000007EE4                 db  50h ; P
.eh_frame_hdr:0000000000007EE5                 db 0ADh
.eh_frame_hdr:0000000000007EE6                 db 0FFh
.eh_frame_hdr:0000000000007EE7                 db 0FFh
.eh_frame_hdr:0000000000007EE8                 db  80h
.eh_frame_hdr:0000000000007EE9                 db    6
.eh_frame_hdr:0000000000007EEA                 db    0
.eh_frame_hdr:0000000000007EEB                 db    0
.eh_frame_hdr:0000000000007EEC                 db    0
.eh_frame_hdr:0000000000007EED                 db 0AEh
.eh_frame_hdr:0000000000007EEE                 db 0FFh
.eh_frame_hdr:0000000000007EEF                 db 0FFh
.eh_frame_hdr:0000000000007EF0                 db 0B0h
.eh_frame_hdr:0000000000007EF1                 db    6
.eh_frame_hdr:0000000000007EF2                 db    0
.eh_frame_hdr:0000000000007EF3                 db    0
.eh_frame_hdr:0000000000007EF4                 db  90h
.eh_frame_hdr:0000000000007EF5                 db 0AEh
.eh_frame_hdr:0000000000007EF6                 db 0FFh
.eh_frame_hdr:0000000000007EF7                 db 0FFh
.eh_frame_hdr:0000000000007EF8                 db  10h
.eh_frame_hdr:0000000000007EF9                 db    7
.eh_frame_hdr:0000000000007EFA                 db    0
.eh_frame_hdr:0000000000007EFB                 db    0
.eh_frame_hdr:0000000000007EFC                 db 0F0h
.eh_frame_hdr:0000000000007EFD                 db 0AEh
.eh_frame_hdr:0000000000007EFE                 db 0FFh
.eh_frame_hdr:0000000000007EFF                 db 0FFh
.eh_frame_hdr:0000000000007F00                 db  30h ; 0
.eh_frame_hdr:0000000000007F01                 db    7
.eh_frame_hdr:0000000000007F02                 db    0
.eh_frame_hdr:0000000000007F03                 db    0
.eh_frame_hdr:0000000000007F04                 db  90h
.eh_frame_hdr:0000000000007F05                 db 0AFh
.eh_frame_hdr:0000000000007F06                 db 0FFh
.eh_frame_hdr:0000000000007F07                 db 0FFh
.eh_frame_hdr:0000000000007F08                 db  44h ; D
.eh_frame_hdr:0000000000007F09                 db    7
.eh_frame_hdr:0000000000007F0A                 db    0
.eh_frame_hdr:0000000000007F0B                 db    0
.eh_frame_hdr:0000000000007F0C                 db 0A0h
.eh_frame_hdr:0000000000007F0D                 db 0AFh
.eh_frame_hdr:0000000000007F0E                 db 0FFh
.eh_frame_hdr:0000000000007F0F                 db 0FFh
.eh_frame_hdr:0000000000007F10                 db  58h ; X
.eh_frame_hdr:0000000000007F11                 db    7
.eh_frame_hdr:0000000000007F12                 db    0
.eh_frame_hdr:0000000000007F13                 db    0
.eh_frame_hdr:0000000000007F14                 db 0B0h
.eh_frame_hdr:0000000000007F15                 db 0AFh
.eh_frame_hdr:0000000000007F16                 db 0FFh
.eh_frame_hdr:0000000000007F17                 db 0FFh
.eh_frame_hdr:0000000000007F18                 db  6Ch ; l
.eh_frame_hdr:0000000000007F19                 db    7
.eh_frame_hdr:0000000000007F1A                 db    0
.eh_frame_hdr:0000000000007F1B                 db    0
.eh_frame_hdr:0000000000007F1C                 db 0E0h
.eh_frame_hdr:0000000000007F1D                 db 0AFh
.eh_frame_hdr:0000000000007F1E                 db 0FFh
.eh_frame_hdr:0000000000007F1F                 db 0FFh
.eh_frame_hdr:0000000000007F20                 db  88h
.eh_frame_hdr:0000000000007F21                 db    7
.eh_frame_hdr:0000000000007F22                 db    0
.eh_frame_hdr:0000000000007F23                 db    0
.eh_frame_hdr:0000000000007F24                 db    0
.eh_frame_hdr:0000000000007F25                 db 0B1h
.eh_frame_hdr:0000000000007F26                 db 0FFh
.eh_frame_hdr:0000000000007F27                 db 0FFh
.eh_frame_hdr:0000000000007F28                 db 0E8h
.eh_frame_hdr:0000000000007F29                 db    7
.eh_frame_hdr:0000000000007F2A                 db    0
.eh_frame_hdr:0000000000007F2B                 db    0
.eh_frame_hdr:0000000000007F2C                 db  80h
.eh_frame_hdr:0000000000007F2D                 db 0B1h
.eh_frame_hdr:0000000000007F2E                 db 0FFh
.eh_frame_hdr:0000000000007F2F                 db 0FFh
.eh_frame_hdr:0000000000007F30                 db 0FCh
.eh_frame_hdr:0000000000007F31                 db    7
.eh_frame_hdr:0000000000007F32                 db    0
.eh_frame_hdr:0000000000007F33                 db    0
.eh_frame_hdr:0000000000007F34                 db 0C0h
.eh_frame_hdr:0000000000007F35                 db 0B2h
.eh_frame_hdr:0000000000007F36                 db 0FFh
.eh_frame_hdr:0000000000007F37                 db 0FFh
.eh_frame_hdr:0000000000007F38                 db  5Ch ; \
.eh_frame_hdr:0000000000007F39                 db    8
.eh_frame_hdr:0000000000007F3A                 db    0
.eh_frame_hdr:0000000000007F3B                 db    0
.eh_frame_hdr:0000000000007F3C                 db 0D0h
.eh_frame_hdr:0000000000007F3D                 db 0B2h
.eh_frame_hdr:0000000000007F3E                 db 0FFh
.eh_frame_hdr:0000000000007F3F                 db 0FFh
.eh_frame_hdr:0000000000007F40                 db  70h ; p
.eh_frame_hdr:0000000000007F41                 db    8
.eh_frame_hdr:0000000000007F42                 db    0
.eh_frame_hdr:0000000000007F43                 db    0
.eh_frame_hdr:0000000000007F44                 db 0E0h
.eh_frame_hdr:0000000000007F45                 db 0B2h
.eh_frame_hdr:0000000000007F46                 db 0FFh
.eh_frame_hdr:0000000000007F47                 db 0FFh
.eh_frame_hdr:0000000000007F48                 db  84h
.eh_frame_hdr:0000000000007F49                 db    8
.eh_frame_hdr:0000000000007F4A                 db    0
.eh_frame_hdr:0000000000007F4B                 db    0
.eh_frame_hdr:0000000000007F4C                 db 0F0h
.eh_frame_hdr:0000000000007F4D                 db 0B2h
.eh_frame_hdr:0000000000007F4E                 db 0FFh
.eh_frame_hdr:0000000000007F4F                 db 0FFh
.eh_frame_hdr:0000000000007F50                 db  98h
.eh_frame_hdr:0000000000007F51                 db    8
.eh_frame_hdr:0000000000007F52                 db    0
.eh_frame_hdr:0000000000007F53                 db    0
.eh_frame_hdr:0000000000007F54                 db  40h ; @
.eh_frame_hdr:0000000000007F55                 db 0B3h
.eh_frame_hdr:0000000000007F56                 db 0FFh
.eh_frame_hdr:0000000000007F57                 db 0FFh
.eh_frame_hdr:0000000000007F58                 db 0ACh
.eh_frame_hdr:0000000000007F59                 db    8
.eh_frame_hdr:0000000000007F5A                 db    0
.eh_frame_hdr:0000000000007F5B                 db    0
.eh_frame_hdr:0000000000007F5C                 db 0A0h
.eh_frame_hdr:0000000000007F5D                 db 0B3h
.eh_frame_hdr:0000000000007F5E                 db 0FFh
.eh_frame_hdr:0000000000007F5F                 db 0FFh
.eh_frame_hdr:0000000000007F60                 db 0C0h
.eh_frame_hdr:0000000000007F61                 db    8
.eh_frame_hdr:0000000000007F62                 db    0
.eh_frame_hdr:0000000000007F63                 db    0
.eh_frame_hdr:0000000000007F64                 db 0F0h
.eh_frame_hdr:0000000000007F65                 db 0B4h
.eh_frame_hdr:0000000000007F66                 db 0FFh
.eh_frame_hdr:0000000000007F67                 db 0FFh
.eh_frame_hdr:0000000000007F68                 db 0FCh
.eh_frame_hdr:0000000000007F69                 db    8
.eh_frame_hdr:0000000000007F6A                 db    0
.eh_frame_hdr:0000000000007F6B                 db    0
.eh_frame_hdr:0000000000007F6C                 db  50h ; P
.eh_frame_hdr:0000000000007F6D                 db 0B5h
.eh_frame_hdr:0000000000007F6E                 db 0FFh
.eh_frame_hdr:0000000000007F6F                 db 0FFh
.eh_frame_hdr:0000000000007F70                 db  34h ; 4
.eh_frame_hdr:0000000000007F71                 db    9
.eh_frame_hdr:0000000000007F72                 db    0
.eh_frame_hdr:0000000000007F73                 db    0
.eh_frame_hdr:0000000000007F74                 db 0A0h
.eh_frame_hdr:0000000000007F75                 db 0B5h
.eh_frame_hdr:0000000000007F76                 db 0FFh
.eh_frame_hdr:0000000000007F77                 db 0FFh
.eh_frame_hdr:0000000000007F78                 db  48h ; H
.eh_frame_hdr:0000000000007F79                 db    9
.eh_frame_hdr:0000000000007F7A                 db    0
.eh_frame_hdr:0000000000007F7B                 db    0
.eh_frame_hdr:0000000000007F7C                 db  20h
.eh_frame_hdr:0000000000007F7D                 db 0B6h
.eh_frame_hdr:0000000000007F7E                 db 0FFh
.eh_frame_hdr:0000000000007F7F                 db 0FFh
.eh_frame_hdr:0000000000007F80                 db  7Ch ; |
.eh_frame_hdr:0000000000007F81                 db    9
.eh_frame_hdr:0000000000007F82                 db    0
.eh_frame_hdr:0000000000007F83                 db    0
.eh_frame_hdr:0000000000007F84                 db  90h
.eh_frame_hdr:0000000000007F85                 db 0B6h
.eh_frame_hdr:0000000000007F86                 db 0FFh
.eh_frame_hdr:0000000000007F87                 db 0FFh
.eh_frame_hdr:0000000000007F88                 db  90h
.eh_frame_hdr:0000000000007F89                 db    9
.eh_frame_hdr:0000000000007F8A                 db    0
.eh_frame_hdr:0000000000007F8B                 db    0
.eh_frame_hdr:0000000000007F8C                 db    0
.eh_frame_hdr:0000000000007F8D                 db 0B7h
.eh_frame_hdr:0000000000007F8E                 db 0FFh
.eh_frame_hdr:0000000000007F8F                 db 0FFh
.eh_frame_hdr:0000000000007F90                 db 0DCh
.eh_frame_hdr:0000000000007F91                 db    9
.eh_frame_hdr:0000000000007F92                 db    0
.eh_frame_hdr:0000000000007F93                 db    0
.eh_frame_hdr:0000000000007F94                 db  40h ; @
.eh_frame_hdr:0000000000007F95                 db 0B7h
.eh_frame_hdr:0000000000007F96                 db 0FFh
.eh_frame_hdr:0000000000007F97                 db 0FFh
.eh_frame_hdr:0000000000007F98                 db 0F0h
.eh_frame_hdr:0000000000007F99                 db    9
.eh_frame_hdr:0000000000007F9A                 db    0
.eh_frame_hdr:0000000000007F9B                 db    0
.eh_frame_hdr:0000000000007F9C                 db  60h ; `
.eh_frame_hdr:0000000000007F9D                 db 0B7h
.eh_frame_hdr:0000000000007F9E                 db 0FFh
.eh_frame_hdr:0000000000007F9F                 db 0FFh
.eh_frame_hdr:0000000000007FA0                 db    4
.eh_frame_hdr:0000000000007FA1                 db  0Ah
.eh_frame_hdr:0000000000007FA2                 db    0
.eh_frame_hdr:0000000000007FA3                 db    0
.eh_frame_hdr:0000000000007FA4                 db  20h
.eh_frame_hdr:0000000000007FA5                 db 0B9h
.eh_frame_hdr:0000000000007FA6                 db 0FFh
.eh_frame_hdr:0000000000007FA7                 db 0FFh
.eh_frame_hdr:0000000000007FA8                 db  50h ; P
.eh_frame_hdr:0000000000007FA9                 db  0Ah
.eh_frame_hdr:0000000000007FAA                 db    0
.eh_frame_hdr:0000000000007FAB                 db    0
.eh_frame_hdr:0000000000007FAC                 db 0B0h
.eh_frame_hdr:0000000000007FAD                 db 0B9h
.eh_frame_hdr:0000000000007FAE                 db 0FFh
.eh_frame_hdr:0000000000007FAF                 db 0FFh
.eh_frame_hdr:0000000000007FB0                 db  7Ch ; |
.eh_frame_hdr:0000000000007FB1                 db  0Ah
.eh_frame_hdr:0000000000007FB2                 db    0
.eh_frame_hdr:0000000000007FB3                 db    0
.eh_frame_hdr:0000000000007FB4                 db  90h
.eh_frame_hdr:0000000000007FB5                 db 0BAh
.eh_frame_hdr:0000000000007FB6                 db 0FFh
.eh_frame_hdr:0000000000007FB7                 db 0FFh
.eh_frame_hdr:0000000000007FB8                 db 0A8h
.eh_frame_hdr:0000000000007FB9                 db  0Ah
.eh_frame_hdr:0000000000007FBA                 db    0
.eh_frame_hdr:0000000000007FBB                 db    0
.eh_frame_hdr:0000000000007FBC                 db 0D0h
.eh_frame_hdr:0000000000007FBD                 db 0BCh
.eh_frame_hdr:0000000000007FBE                 db 0FFh
.eh_frame_hdr:0000000000007FBF                 db 0FFh
.eh_frame_hdr:0000000000007FC0                 db 0E0h
.eh_frame_hdr:0000000000007FC1                 db  0Ah
.eh_frame_hdr:0000000000007FC2                 db    0
.eh_frame_hdr:0000000000007FC3                 db    0
.eh_frame_hdr:0000000000007FC4                 db  60h ; `
.eh_frame_hdr:0000000000007FC5                 db 0BFh
.eh_frame_hdr:0000000000007FC6                 db 0FFh
.eh_frame_hdr:0000000000007FC7                 db 0FFh
.eh_frame_hdr:0000000000007FC8                 db  1Ch
.eh_frame_hdr:0000000000007FC9                 db  0Bh
.eh_frame_hdr:0000000000007FCA                 db    0
.eh_frame_hdr:0000000000007FCB                 db    0
.eh_frame_hdr:0000000000007FCC                 db 0C0h
.eh_frame_hdr:0000000000007FCD                 db 0BFh
.eh_frame_hdr:0000000000007FCE                 db 0FFh
.eh_frame_hdr:0000000000007FCF                 db 0FFh
.eh_frame_hdr:0000000000007FD0                 db  40h ; @
.eh_frame_hdr:0000000000007FD1                 db  0Bh
.eh_frame_hdr:0000000000007FD2                 db    0
.eh_frame_hdr:0000000000007FD3                 db    0
.eh_frame_hdr:0000000000007FD4                 db 0D0h
.eh_frame_hdr:0000000000007FD5                 db 0C1h
.eh_frame_hdr:0000000000007FD6                 db 0FFh
.eh_frame_hdr:0000000000007FD7                 db 0FFh
.eh_frame_hdr:0000000000007FD8                 db  78h ; x
.eh_frame_hdr:0000000000007FD9                 db  0Bh
.eh_frame_hdr:0000000000007FDA                 db    0
.eh_frame_hdr:0000000000007FDB                 db    0
.eh_frame_hdr:0000000000007FDC                 db    0
.eh_frame_hdr:0000000000007FDD                 db 0C2h
.eh_frame_hdr:0000000000007FDE                 db 0FFh
.eh_frame_hdr:0000000000007FDF                 db 0FFh
.eh_frame_hdr:0000000000007FE0                 db 0A0h
.eh_frame_hdr:0000000000007FE1                 db  0Bh
.eh_frame_hdr:0000000000007FE2                 db    0
.eh_frame_hdr:0000000000007FE3                 db    0
.eh_frame_hdr:0000000000007FE4                 db  10h
.eh_frame_hdr:0000000000007FE5                 db 0C2h
.eh_frame_hdr:0000000000007FE6                 db 0FFh
.eh_frame_hdr:0000000000007FE7                 db 0FFh
.eh_frame_hdr:0000000000007FE8                 db 0B4h
.eh_frame_hdr:0000000000007FE9                 db  0Bh
.eh_frame_hdr:0000000000007FEA                 db    0
.eh_frame_hdr:0000000000007FEB                 db    0
.eh_frame_hdr:0000000000007FEC                 db  40h ; @
.eh_frame_hdr:0000000000007FED                 db 0C2h
.eh_frame_hdr:0000000000007FEE                 db 0FFh
.eh_frame_hdr:0000000000007FEF                 db 0FFh
.eh_frame_hdr:0000000000007FF0                 db 0CCh
.eh_frame_hdr:0000000000007FF1                 db  0Bh
.eh_frame_hdr:0000000000007FF2                 db    0
.eh_frame_hdr:0000000000007FF3                 db    0
.eh_frame_hdr:0000000000007FF4                 db  80h
.eh_frame_hdr:0000000000007FF5                 db 0C2h
.eh_frame_hdr:0000000000007FF6                 db 0FFh
.eh_frame_hdr:0000000000007FF7                 db 0FFh
.eh_frame_hdr:0000000000007FF8                 db 0E4h
.eh_frame_hdr:0000000000007FF9                 db  0Bh
.eh_frame_hdr:0000000000007FFA                 db    0
.eh_frame_hdr:0000000000007FFB                 db    0
.eh_frame_hdr:0000000000007FFC                 db 0A0h
.eh_frame_hdr:0000000000007FFD                 db 0C2h
.eh_frame_hdr:0000000000007FFE                 db 0FFh
.eh_frame_hdr:0000000000007FFF                 db 0FFh
.eh_frame_hdr:0000000000008000                 db    0
.eh_frame_hdr:0000000000008001                 db  0Ch
.eh_frame_hdr:0000000000008002                 db    0
.eh_frame_hdr:0000000000008003                 db    0
.eh_frame_hdr:0000000000008004                 db  40h ; @
.eh_frame_hdr:0000000000008005                 db 0C3h
.eh_frame_hdr:0000000000008006                 db 0FFh
.eh_frame_hdr:0000000000008007                 db 0FFh
.eh_frame_hdr:0000000000008008                 db  20h
.eh_frame_hdr:0000000000008009                 db  0Ch
.eh_frame_hdr:000000000000800A                 db    0
.eh_frame_hdr:000000000000800B                 db    0
.eh_frame_hdr:000000000000800C                 db  30h ; 0
.eh_frame_hdr:000000000000800D                 db 0C4h
.eh_frame_hdr:000000000000800E                 db 0FFh
.eh_frame_hdr:000000000000800F                 db 0FFh
.eh_frame_hdr:0000000000008010                 db  64h ; d
.eh_frame_hdr:0000000000008011                 db  0Ch
.eh_frame_hdr:0000000000008012                 db    0
.eh_frame_hdr:0000000000008013                 db    0
.eh_frame_hdr:0000000000008014                 db  70h ; p
.eh_frame_hdr:0000000000008015                 db 0D6h
.eh_frame_hdr:0000000000008016                 db 0FFh
.eh_frame_hdr:0000000000008017                 db 0FFh
.eh_frame_hdr:0000000000008018                 db 0DCh
.eh_frame_hdr:0000000000008019                 db  0Ch
.eh_frame_hdr:000000000000801A                 db    0
.eh_frame_hdr:000000000000801B                 db    0
.eh_frame_hdr:000000000000801C                 db  20h
.eh_frame_hdr:000000000000801D                 db 0D8h
.eh_frame_hdr:000000000000801E                 db 0FFh
.eh_frame_hdr:000000000000801F                 db 0FFh
.eh_frame_hdr:0000000000008020                 db  48h ; H
.eh_frame_hdr:0000000000008021                 db  0Dh
.eh_frame_hdr:0000000000008022                 db    0
.eh_frame_hdr:0000000000008023                 db    0
.eh_frame_hdr:0000000000008024                 db  60h ; `
.eh_frame_hdr:0000000000008025                 db 0D8h
.eh_frame_hdr:0000000000008026                 db 0FFh
.eh_frame_hdr:0000000000008027                 db 0FFh
.eh_frame_hdr:0000000000008028                 db  74h ; t
.eh_frame_hdr:0000000000008029                 db  0Dh
.eh_frame_hdr:000000000000802A                 db    0
.eh_frame_hdr:000000000000802B                 db    0
.eh_frame_hdr:000000000000802C                 db  80h
.eh_frame_hdr:000000000000802D                 db 0D8h
.eh_frame_hdr:000000000000802E                 db 0FFh
.eh_frame_hdr:000000000000802F                 db 0FFh
.eh_frame_hdr:0000000000008030                 db  88h
.eh_frame_hdr:0000000000008031                 db  0Dh
.eh_frame_hdr:0000000000008032                 db    0
.eh_frame_hdr:0000000000008033                 db    0
.eh_frame_hdr:0000000000008034                 db 0A0h
.eh_frame_hdr:0000000000008035                 db 0D8h
.eh_frame_hdr:0000000000008036                 db 0FFh
.eh_frame_hdr:0000000000008037                 db 0FFh
.eh_frame_hdr:0000000000008038                 db  9Ch
.eh_frame_hdr:0000000000008039                 db  0Dh
.eh_frame_hdr:000000000000803A                 db    0
.eh_frame_hdr:000000000000803B                 db    0
.eh_frame_hdr:000000000000803C                 db 0E0h
.eh_frame_hdr:000000000000803D                 db 0D8h
.eh_frame_hdr:000000000000803E                 db 0FFh
.eh_frame_hdr:000000000000803F                 db 0FFh
.eh_frame_hdr:0000000000008040                 db 0B0h
.eh_frame_hdr:0000000000008041                 db  0Dh
.eh_frame_hdr:0000000000008042                 db    0
.eh_frame_hdr:0000000000008043                 db    0
.eh_frame_hdr:0000000000008044                 db    0
.eh_frame_hdr:0000000000008045                 db 0D9h
.eh_frame_hdr:0000000000008046                 db 0FFh
.eh_frame_hdr:0000000000008047                 db 0FFh
.eh_frame_hdr:0000000000008048                 db 0C4h
.eh_frame_hdr:0000000000008049                 db  0Dh
.eh_frame_hdr:000000000000804A                 db    0
.eh_frame_hdr:000000000000804B                 db    0
.eh_frame_hdr:000000000000804C                 db  30h ; 0
.eh_frame_hdr:000000000000804D                 db 0D9h
.eh_frame_hdr:000000000000804E                 db 0FFh
.eh_frame_hdr:000000000000804F                 db 0FFh
.eh_frame_hdr:0000000000008050                 db 0D8h
.eh_frame_hdr:0000000000008051                 db  0Dh
.eh_frame_hdr:0000000000008052                 db    0
.eh_frame_hdr:0000000000008053                 db    0
.eh_frame_hdr:0000000000008054                 db 0B0h
.eh_frame_hdr:0000000000008055                 db 0D9h
.eh_frame_hdr:0000000000008056                 db 0FFh
.eh_frame_hdr:0000000000008057                 db 0FFh
.eh_frame_hdr:0000000000008058                 db  2Ch ; ,
.eh_frame_hdr:0000000000008059                 db  0Eh
.eh_frame_hdr:000000000000805A                 db    0
.eh_frame_hdr:000000000000805B                 db    0
.eh_frame_hdr:000000000000805C                 db 0A0h
.eh_frame_hdr:000000000000805D                 db 0DAh
.eh_frame_hdr:000000000000805E                 db 0FFh
.eh_frame_hdr:000000000000805F                 db 0FFh
.eh_frame_hdr:0000000000008060                 db  98h
.eh_frame_hdr:0000000000008061                 db  0Eh
.eh_frame_hdr:0000000000008062                 db    0
.eh_frame_hdr:0000000000008063                 db    0
.eh_frame_hdr:0000000000008064                 db 0B0h
.eh_frame_hdr:0000000000008065                 db 0DAh
.eh_frame_hdr:0000000000008066                 db 0FFh
.eh_frame_hdr:0000000000008067                 db 0FFh
.eh_frame_hdr:0000000000008068                 db 0ACh
.eh_frame_hdr:0000000000008069                 db  0Eh
.eh_frame_hdr:000000000000806A                 db    0
.eh_frame_hdr:000000000000806B                 db    0
.eh_frame_hdr:000000000000806C                 db  50h ; P
.eh_frame_hdr:000000000000806D                 db 0DBh
.eh_frame_hdr:000000000000806E                 db 0FFh
.eh_frame_hdr:000000000000806F                 db 0FFh
.eh_frame_hdr:0000000000008070                 db 0D8h
.eh_frame_hdr:0000000000008071                 db  0Eh
.eh_frame_hdr:0000000000008072                 db    0
.eh_frame_hdr:0000000000008073                 db    0
.eh_frame_hdr:0000000000008074                 db  70h ; p
.eh_frame_hdr:0000000000008075                 db 0DBh
.eh_frame_hdr:0000000000008076                 db 0FFh
.eh_frame_hdr:0000000000008077                 db 0FFh
.eh_frame_hdr:0000000000008078                 db 0ECh
.eh_frame_hdr:0000000000008079                 db  0Eh
.eh_frame_hdr:000000000000807A                 db    0
.eh_frame_hdr:000000000000807B                 db    0
.eh_frame_hdr:000000000000807C                 db  80h
.eh_frame_hdr:000000000000807D                 db 0DBh
.eh_frame_hdr:000000000000807E                 db 0FFh
.eh_frame_hdr:000000000000807F                 db 0FFh
.eh_frame_hdr:0000000000008080                 db    0
.eh_frame_hdr:0000000000008081                 db  0Fh
.eh_frame_hdr:0000000000008082                 db    0
.eh_frame_hdr:0000000000008083                 db    0
.eh_frame_hdr:0000000000008084                 db 0A0h
.eh_frame_hdr:0000000000008085                 db 0DBh
.eh_frame_hdr:0000000000008086                 db 0FFh
.eh_frame_hdr:0000000000008087                 db 0FFh
.eh_frame_hdr:0000000000008088                 db  14h
.eh_frame_hdr:0000000000008089                 db  0Fh
.eh_frame_hdr:000000000000808A                 db    0
.eh_frame_hdr:000000000000808B                 db    0
.eh_frame_hdr:000000000000808C                 db 0C0h
.eh_frame_hdr:000000000000808D                 db 0DBh
.eh_frame_hdr:000000000000808E                 db 0FFh
.eh_frame_hdr:000000000000808F                 db 0FFh
.eh_frame_hdr:0000000000008090                 db  28h ; (
.eh_frame_hdr:0000000000008091                 db  0Fh
.eh_frame_hdr:0000000000008092                 db    0
.eh_frame_hdr:0000000000008093                 db    0
.eh_frame_hdr:0000000000008094                 db  50h ; P
.eh_frame_hdr:0000000000008095                 db 0DCh
.eh_frame_hdr:0000000000008096                 db 0FFh
.eh_frame_hdr:0000000000008097                 db 0FFh
.eh_frame_hdr:0000000000008098                 db  44h ; D
.eh_frame_hdr:0000000000008099                 db  0Fh
.eh_frame_hdr:000000000000809A                 db    0
.eh_frame_hdr:000000000000809B                 db    0
.eh_frame_hdr:000000000000809C                 db 0E0h
.eh_frame_hdr:000000000000809D                 db 0DCh
.eh_frame_hdr:000000000000809E                 db 0FFh
.eh_frame_hdr:000000000000809F                 db 0FFh
.eh_frame_hdr:00000000000080A0                 db  60h ; `
.eh_frame_hdr:00000000000080A1                 db  0Fh
.eh_frame_hdr:00000000000080A2                 db    0
.eh_frame_hdr:00000000000080A3                 db    0
.eh_frame_hdr:00000000000080A4                 db 0F0h
.eh_frame_hdr:00000000000080A5                 db 0DCh
.eh_frame_hdr:00000000000080A6                 db 0FFh
.eh_frame_hdr:00000000000080A7                 db 0FFh
.eh_frame_hdr:00000000000080A8                 db  74h ; t
.eh_frame_hdr:00000000000080A9                 db  0Fh
.eh_frame_hdr:00000000000080AA                 db    0
.eh_frame_hdr:00000000000080AB                 db    0
.eh_frame_hdr:00000000000080AC                 db    0
.eh_frame_hdr:00000000000080AD                 db 0DDh
.eh_frame_hdr:00000000000080AE                 db 0FFh
.eh_frame_hdr:00000000000080AF                 db 0FFh
.eh_frame_hdr:00000000000080B0                 db  88h
.eh_frame_hdr:00000000000080B1                 db  0Fh
.eh_frame_hdr:00000000000080B2                 db    0
.eh_frame_hdr:00000000000080B3                 db    0
.eh_frame_hdr:00000000000080B4                 db 0A0h
.eh_frame_hdr:00000000000080B5                 db 0DDh
.eh_frame_hdr:00000000000080B6                 db 0FFh
.eh_frame_hdr:00000000000080B7                 db 0FFh
.eh_frame_hdr:00000000000080B8                 db 0A4h
.eh_frame_hdr:00000000000080B9                 db  0Fh
.eh_frame_hdr:00000000000080BA                 db    0
.eh_frame_hdr:00000000000080BB                 db    0
.eh_frame_hdr:00000000000080BC                 db 0B0h
.eh_frame_hdr:00000000000080BD                 db 0DDh
.eh_frame_hdr:00000000000080BE                 db 0FFh
.eh_frame_hdr:00000000000080BF                 db 0FFh
.eh_frame_hdr:00000000000080C0                 db 0B8h
.eh_frame_hdr:00000000000080C1                 db  0Fh
.eh_frame_hdr:00000000000080C2                 db    0
.eh_frame_hdr:00000000000080C3                 db    0
.eh_frame_hdr:00000000000080C4                 db 0D0h
.eh_frame_hdr:00000000000080C5                 db 0DDh
.eh_frame_hdr:00000000000080C6                 db 0FFh
.eh_frame_hdr:00000000000080C7                 db 0FFh
.eh_frame_hdr:00000000000080C8                 db 0CCh
.eh_frame_hdr:00000000000080C9                 db  0Fh
.eh_frame_hdr:00000000000080CA                 db    0
.eh_frame_hdr:00000000000080CB                 db    0
.eh_frame_hdr:00000000000080CC                 db 0E0h
.eh_frame_hdr:00000000000080CD                 db 0DDh
.eh_frame_hdr:00000000000080CE                 db 0FFh
.eh_frame_hdr:00000000000080CF                 db 0FFh
.eh_frame_hdr:00000000000080D0                 db 0E0h
.eh_frame_hdr:00000000000080D1                 db  0Fh
.eh_frame_hdr:00000000000080D2                 db    0
.eh_frame_hdr:00000000000080D3                 db    0
.eh_frame_hdr:00000000000080D4                 db  70h ; p
.eh_frame_hdr:00000000000080D5                 db 0DEh
.eh_frame_hdr:00000000000080D6                 db 0FFh
.eh_frame_hdr:00000000000080D7                 db 0FFh
.eh_frame_hdr:00000000000080D8                 db 0FCh
.eh_frame_hdr:00000000000080D9                 db  0Fh
.eh_frame_hdr:00000000000080DA                 db    0
.eh_frame_hdr:00000000000080DB                 db    0
.eh_frame_hdr:00000000000080DC                 db  10h
.eh_frame_hdr:00000000000080DD                 db 0DFh
.eh_frame_hdr:00000000000080DE                 db 0FFh
.eh_frame_hdr:00000000000080DF                 db 0FFh
.eh_frame_hdr:00000000000080E0                 db  18h
.eh_frame_hdr:00000000000080E1                 db  10h
.eh_frame_hdr:00000000000080E2                 db    0
.eh_frame_hdr:00000000000080E3                 db    0
.eh_frame_hdr:00000000000080E4                 db  20h
.eh_frame_hdr:00000000000080E5                 db 0DFh
.eh_frame_hdr:00000000000080E6                 db 0FFh
.eh_frame_hdr:00000000000080E7                 db 0FFh
.eh_frame_hdr:00000000000080E8                 db  2Ch ; ,
.eh_frame_hdr:00000000000080E9                 db  10h
.eh_frame_hdr:00000000000080EA                 db    0
.eh_frame_hdr:00000000000080EB                 db    0
.eh_frame_hdr:00000000000080EC                 db  40h ; @
.eh_frame_hdr:00000000000080ED                 db 0DFh
.eh_frame_hdr:00000000000080EE                 db 0FFh
.eh_frame_hdr:00000000000080EF                 db 0FFh
.eh_frame_hdr:00000000000080F0                 db  40h ; @
.eh_frame_hdr:00000000000080F1                 db  10h
.eh_frame_hdr:00000000000080F2                 db    0
.eh_frame_hdr:00000000000080F3                 db    0
.eh_frame_hdr:00000000000080F4                 db  60h ; `
.eh_frame_hdr:00000000000080F5                 db 0DFh
.eh_frame_hdr:00000000000080F6                 db 0FFh
.eh_frame_hdr:00000000000080F7                 db 0FFh
.eh_frame_hdr:00000000000080F8                 db  54h ; T
.eh_frame_hdr:00000000000080F9                 db  10h
.eh_frame_hdr:00000000000080FA                 db    0
.eh_frame_hdr:00000000000080FB                 db    0
.eh_frame_hdr:00000000000080FC                 db  70h ; p
.eh_frame_hdr:00000000000080FD                 db 0DFh
.eh_frame_hdr:00000000000080FE                 db 0FFh
.eh_frame_hdr:00000000000080FF                 db 0FFh
.eh_frame_hdr:0000000000008100                 db  68h ; h
.eh_frame_hdr:0000000000008101                 db  10h
.eh_frame_hdr:0000000000008102                 db    0
.eh_frame_hdr:0000000000008103                 db    0
.eh_frame_hdr:0000000000008104                 db  90h
.eh_frame_hdr:0000000000008105                 db 0DFh
.eh_frame_hdr:0000000000008106                 db 0FFh
.eh_frame_hdr:0000000000008107                 db 0FFh
.eh_frame_hdr:0000000000008108                 db  7Ch ; |
.eh_frame_hdr:0000000000008109                 db  10h
.eh_frame_hdr:000000000000810A                 db    0
.eh_frame_hdr:000000000000810B                 db    0
.eh_frame_hdr:000000000000810C                 db 0B0h
.eh_frame_hdr:000000000000810D                 db 0DFh
.eh_frame_hdr:000000000000810E                 db 0FFh
.eh_frame_hdr:000000000000810F                 db 0FFh
.eh_frame_hdr:0000000000008110                 db  90h
.eh_frame_hdr:0000000000008111                 db  10h
.eh_frame_hdr:0000000000008112                 db    0
.eh_frame_hdr:0000000000008113                 db    0
.eh_frame_hdr:0000000000008114                 db 0D0h
.eh_frame_hdr:0000000000008115                 db 0DFh
.eh_frame_hdr:0000000000008116                 db 0FFh
.eh_frame_hdr:0000000000008117                 db 0FFh
.eh_frame_hdr:0000000000008118                 db 0A8h
.eh_frame_hdr:0000000000008119                 db  10h
.eh_frame_hdr:000000000000811A                 db    0
.eh_frame_hdr:000000000000811B                 db    0
.eh_frame_hdr:000000000000811C                 db    0
.eh_frame_hdr:000000000000811D                 db 0E1h
.eh_frame_hdr:000000000000811E                 db 0FFh
.eh_frame_hdr:000000000000811F                 db 0FFh
.eh_frame_hdr:0000000000008120                 db 0E4h
.eh_frame_hdr:0000000000008121                 db  10h
.eh_frame_hdr:0000000000008122                 db    0
.eh_frame_hdr:0000000000008123                 db    0
.eh_frame_hdr:0000000000008124                 db 0A0h
.eh_frame_hdr:0000000000008125                 db 0E1h
.eh_frame_hdr:0000000000008126                 db 0FFh
.eh_frame_hdr:0000000000008127                 db 0FFh
.eh_frame_hdr:0000000000008128                 db  44h ; D
.eh_frame_hdr:0000000000008129                 db  11h
.eh_frame_hdr:000000000000812A                 db    0
.eh_frame_hdr:000000000000812B                 db    0
.eh_frame_hdr:000000000000812C                 db 0C0h
.eh_frame_hdr:000000000000812D                 db 0E1h
.eh_frame_hdr:000000000000812E                 db 0FFh
.eh_frame_hdr:000000000000812F                 db 0FFh
.eh_frame_hdr:0000000000008130                 db  58h ; X
.eh_frame_hdr:0000000000008131                 db  11h
.eh_frame_hdr:0000000000008132                 db    0
.eh_frame_hdr:0000000000008133                 db    0
.eh_frame_hdr:0000000000008134                 db 0E0h
.eh_frame_hdr:0000000000008135                 db 0E5h
.eh_frame_hdr:0000000000008136                 db 0FFh
.eh_frame_hdr:0000000000008137                 db 0FFh
.eh_frame_hdr:0000000000008138                 db  6Ch ; l
.eh_frame_hdr:0000000000008139                 db  12h
.eh_frame_hdr:000000000000813A                 db    0
.eh_frame_hdr:000000000000813B                 db    0
.eh_frame_hdr:000000000000813C                 db    0
.eh_frame_hdr:000000000000813D                 db 0E6h
.eh_frame_hdr:000000000000813E                 db 0FFh
.eh_frame_hdr:000000000000813F                 db 0FFh
.eh_frame_hdr:0000000000008140                 db  80h
.eh_frame_hdr:0000000000008141                 db  12h
.eh_frame_hdr:0000000000008142                 db    0
.eh_frame_hdr:0000000000008143                 db    0
.eh_frame_hdr:0000000000008144                 db  80h
.eh_frame_hdr:0000000000008145                 db 0E6h
.eh_frame_hdr:0000000000008146                 db 0FFh
.eh_frame_hdr:0000000000008147                 db 0FFh
.eh_frame_hdr:0000000000008148                 db  9Ch
.eh_frame_hdr:0000000000008149                 db  12h
.eh_frame_hdr:000000000000814A                 db    0
.eh_frame_hdr:000000000000814B                 db    0
.eh_frame_hdr:000000000000814C                 db  60h ; `
.eh_frame_hdr:000000000000814D                 db 0E7h
.eh_frame_hdr:000000000000814E                 db 0FFh
.eh_frame_hdr:000000000000814F                 db 0FFh
.eh_frame_hdr:0000000000008150                 db 0C8h
.eh_frame_hdr:0000000000008151                 db  12h
.eh_frame_hdr:0000000000008152                 db    0
.eh_frame_hdr:0000000000008153                 db    0
.eh_frame_hdr:0000000000008154                 db 0E0h
.eh_frame_hdr:0000000000008155                 db 0E7h
.eh_frame_hdr:0000000000008156                 db 0FFh
.eh_frame_hdr:0000000000008157                 db 0FFh
.eh_frame_hdr:0000000000008158                 db 0E8h
.eh_frame_hdr:0000000000008159                 db  12h
.eh_frame_hdr:000000000000815A                 db    0
.eh_frame_hdr:000000000000815B                 db    0
.eh_frame_hdr:000000000000815C                 db    0
.eh_frame_hdr:000000000000815D                 db 0E8h
.eh_frame_hdr:000000000000815E                 db 0FFh
.eh_frame_hdr:000000000000815F                 db 0FFh
.eh_frame_hdr:0000000000008160                 db    4
.eh_frame_hdr:0000000000008161                 db  13h
.eh_frame_hdr:0000000000008162                 db    0
.eh_frame_hdr:0000000000008163                 db    0
.eh_frame_hdr:0000000000008164                 db  30h ; 0
.eh_frame_hdr:0000000000008165                 db 0E8h
.eh_frame_hdr:0000000000008166                 db 0FFh
.eh_frame_hdr:0000000000008167                 db 0FFh
.eh_frame_hdr:0000000000008168                 db  18h
.eh_frame_hdr:0000000000008169                 db  13h
.eh_frame_hdr:000000000000816A                 db    0
.eh_frame_hdr:000000000000816B                 db    0
.eh_frame_hdr:000000000000816C                 db  40h ; @
.eh_frame_hdr:000000000000816D                 db 0E8h
.eh_frame_hdr:000000000000816E                 db 0FFh
.eh_frame_hdr:000000000000816F                 db 0FFh
.eh_frame_hdr:0000000000008170                 db  2Ch ; ,
.eh_frame_hdr:0000000000008171                 db  13h
.eh_frame_hdr:0000000000008172                 db    0
.eh_frame_hdr:0000000000008173                 db    0
.eh_frame_hdr:0000000000008174                 db  80h
.eh_frame_hdr:0000000000008175                 db 0E8h
.eh_frame_hdr:0000000000008176                 db 0FFh
.eh_frame_hdr:0000000000008177                 db 0FFh
.eh_frame_hdr:0000000000008178                 db  50h ; P
.eh_frame_hdr:0000000000008179                 db  13h
.eh_frame_hdr:000000000000817A                 db    0
.eh_frame_hdr:000000000000817B                 db    0
.eh_frame_hdr:000000000000817C                 db 0B0h
.eh_frame_hdr:000000000000817D                 db 0E8h
.eh_frame_hdr:000000000000817E                 db 0FFh
.eh_frame_hdr:000000000000817F                 db 0FFh
.eh_frame_hdr:0000000000008180                 db  64h ; d
.eh_frame_hdr:0000000000008181                 db  13h
.eh_frame_hdr:0000000000008182                 db    0
.eh_frame_hdr:0000000000008183                 db    0
.eh_frame_hdr:0000000000008184                 db  40h ; @
.eh_frame_hdr:0000000000008185                 db 0E9h
.eh_frame_hdr:0000000000008186                 db 0FFh
.eh_frame_hdr:0000000000008187                 db 0FFh
.eh_frame_hdr:0000000000008188                 db  7Ch ; |
.eh_frame_hdr:0000000000008189                 db  13h
.eh_frame_hdr:000000000000818A                 db    0
.eh_frame_hdr:000000000000818B                 db    0
.eh_frame_hdr:000000000000818C                 db  90h
.eh_frame_hdr:000000000000818D                 db 0E9h
.eh_frame_hdr:000000000000818E                 db 0FFh
.eh_frame_hdr:000000000000818F                 db 0FFh
.eh_frame_hdr:0000000000008190                 db  94h
.eh_frame_hdr:0000000000008191                 db  13h
.eh_frame_hdr:0000000000008192                 db    0
.eh_frame_hdr:0000000000008193                 db    0
.eh_frame_hdr:0000000000008194                 db 0B0h
.eh_frame_hdr:0000000000008195                 db 0E9h
.eh_frame_hdr:0000000000008196                 db 0FFh
.eh_frame_hdr:0000000000008197                 db 0FFh
.eh_frame_hdr:0000000000008198                 db 0B0h
.eh_frame_hdr:0000000000008199                 db  13h
.eh_frame_hdr:000000000000819A                 db    0
.eh_frame_hdr:000000000000819B                 db    0
.eh_frame_hdr:000000000000819C                 db 0E0h
.eh_frame_hdr:000000000000819D                 db 0E9h
.eh_frame_hdr:000000000000819E                 db 0FFh
.eh_frame_hdr:000000000000819F                 db 0FFh
.eh_frame_hdr:00000000000081A0                 db 0CCh
.eh_frame_hdr:00000000000081A1                 db  13h
.eh_frame_hdr:00000000000081A2                 db    0
.eh_frame_hdr:00000000000081A3                 db    0
.eh_frame_hdr:00000000000081A4                 db  10h
.eh_frame_hdr:00000000000081A5                 db 0EAh
.eh_frame_hdr:00000000000081A6                 db 0FFh
.eh_frame_hdr:00000000000081A7                 db 0FFh
.eh_frame_hdr:00000000000081A8                 db 0F4h
.eh_frame_hdr:00000000000081A9                 db  13h
.eh_frame_hdr:00000000000081AA                 db    0
.eh_frame_hdr:00000000000081AB                 db    0
.eh_frame_hdr:00000000000081AC                 db  30h ; 0
.eh_frame_hdr:00000000000081AD                 db 0EAh
.eh_frame_hdr:00000000000081AE                 db 0FFh
.eh_frame_hdr:00000000000081AF                 db 0FFh
.eh_frame_hdr:00000000000081B0                 db  10h
.eh_frame_hdr:00000000000081B1                 db  14h
.eh_frame_hdr:00000000000081B2                 db    0
.eh_frame_hdr:00000000000081B3                 db    0
.eh_frame_hdr:00000000000081B4                 db  70h ; p
.eh_frame_hdr:00000000000081B5                 db 0EAh
.eh_frame_hdr:00000000000081B6                 db 0FFh
.eh_frame_hdr:00000000000081B7                 db 0FFh
.eh_frame_hdr:00000000000081B8                 db  28h ; (
.eh_frame_hdr:00000000000081B9                 db  14h
.eh_frame_hdr:00000000000081BA                 db    0
.eh_frame_hdr:00000000000081BB                 db    0
.eh_frame_hdr:00000000000081BC                 db 0A0h
.eh_frame_hdr:00000000000081BD                 db 0EAh
.eh_frame_hdr:00000000000081BE                 db 0FFh
.eh_frame_hdr:00000000000081BF                 db 0FFh
.eh_frame_hdr:00000000000081C0                 db  48h ; H
.eh_frame_hdr:00000000000081C1                 db  14h
.eh_frame_hdr:00000000000081C2                 db    0
.eh_frame_hdr:00000000000081C3                 db    0
.eh_frame_hdr:00000000000081C4                 db  30h ; 0
.eh_frame_hdr:00000000000081C5                 db 0EBh
.eh_frame_hdr:00000000000081C6                 db 0FFh
.eh_frame_hdr:00000000000081C7                 db 0FFh
.eh_frame_hdr:00000000000081C8                 db  88h
.eh_frame_hdr:00000000000081C9                 db  14h
.eh_frame_hdr:00000000000081CA                 db    0
.eh_frame_hdr:00000000000081CB                 db    0
.eh_frame_hdr:00000000000081CC                 db  20h
.eh_frame_hdr:00000000000081CD                 db 0ECh
.eh_frame_hdr:00000000000081CE                 db 0FFh
.eh_frame_hdr:00000000000081CF                 db 0FFh
.eh_frame_hdr:00000000000081D0                 db 0D8h
.eh_frame_hdr:00000000000081D1                 db  14h
.eh_frame_hdr:00000000000081D2                 db    0
.eh_frame_hdr:00000000000081D3                 db    0
.eh_frame_hdr:00000000000081D4                 db 0A0h
.eh_frame_hdr:00000000000081D5                 db 0ECh
.eh_frame_hdr:00000000000081D6                 db 0FFh
.eh_frame_hdr:00000000000081D7                 db 0FFh
.eh_frame_hdr:00000000000081D8                 db  28h ; (
.eh_frame_hdr:00000000000081D9                 db  15h
.eh_frame_hdr:00000000000081DA                 db    0
.eh_frame_hdr:00000000000081DB                 db    0
.eh_frame_hdr:00000000000081DC                 db 0C0h
.eh_frame_hdr:00000000000081DD                 db 0ECh
.eh_frame_hdr:00000000000081DE                 db 0FFh
.eh_frame_hdr:00000000000081DF                 db 0FFh
.eh_frame_hdr:00000000000081E0                 db  48h ; H
.eh_frame_hdr:00000000000081E1                 db  15h
.eh_frame_hdr:00000000000081E2                 db    0
.eh_frame_hdr:00000000000081E3                 db    0
.eh_frame_hdr:00000000000081E4                 db  20h
.eh_frame_hdr:00000000000081E5                 db 0EDh
.eh_frame_hdr:00000000000081E6                 db 0FFh
.eh_frame_hdr:00000000000081E7                 db 0FFh
.eh_frame_hdr:00000000000081E8                 db  7Ch ; |
.eh_frame_hdr:00000000000081E9                 db  15h
.eh_frame_hdr:00000000000081EA                 db    0
.eh_frame_hdr:00000000000081EB                 db    0
.eh_frame_hdr:00000000000081EC                 db  80h
.eh_frame_hdr:00000000000081ED                 db 0EDh
.eh_frame_hdr:00000000000081EE                 db 0FFh
.eh_frame_hdr:00000000000081EF                 db 0FFh
.eh_frame_hdr:00000000000081F0                 db 0A8h
.eh_frame_hdr:00000000000081F1                 db  15h
.eh_frame_hdr:00000000000081F2                 db    0
.eh_frame_hdr:00000000000081F3                 db    0
.eh_frame_hdr:00000000000081F4                 db 0E0h
.eh_frame_hdr:00000000000081F5                 db 0EDh
.eh_frame_hdr:00000000000081F6                 db 0FFh
.eh_frame_hdr:00000000000081F7                 db 0FFh
.eh_frame_hdr:00000000000081F8                 db 0BCh
.eh_frame_hdr:00000000000081F9                 db  15h
.eh_frame_hdr:00000000000081FA                 db    0
.eh_frame_hdr:00000000000081FB                 db    0
.eh_frame_hdr:00000000000081FC                 db  30h ; 0
.eh_frame_hdr:00000000000081FD                 db 0EEh
.eh_frame_hdr:00000000000081FE                 db 0FFh
.eh_frame_hdr:00000000000081FF                 db 0FFh
.eh_frame_hdr:0000000000008200                 db 0E8h
.eh_frame_hdr:0000000000008201                 db  15h
.eh_frame_hdr:0000000000008202                 db    0
.eh_frame_hdr:0000000000008203                 db    0
.eh_frame_hdr:0000000000008204                 db  90h
.eh_frame_hdr:0000000000008205                 db 0EEh
.eh_frame_hdr:0000000000008206                 db 0FFh
.eh_frame_hdr:0000000000008207                 db 0FFh
.eh_frame_hdr:0000000000008208                 db    8
.eh_frame_hdr:0000000000008209                 db  16h
.eh_frame_hdr:000000000000820A                 db    0
.eh_frame_hdr:000000000000820B                 db    0
.eh_frame_hdr:000000000000820C                 db 0D0h
.eh_frame_hdr:000000000000820D                 db 0EEh
.eh_frame_hdr:000000000000820E                 db 0FFh
.eh_frame_hdr:000000000000820F                 db 0FFh
.eh_frame_hdr:0000000000008210                 db  20h
.eh_frame_hdr:0000000000008211                 db  16h
.eh_frame_hdr:0000000000008212                 db    0
.eh_frame_hdr:0000000000008213                 db    0
.eh_frame_hdr:0000000000008214                 db  10h
.eh_frame_hdr:0000000000008215                 db 0EFh
.eh_frame_hdr:0000000000008216                 db 0FFh
.eh_frame_hdr:0000000000008217                 db 0FFh
.eh_frame_hdr:0000000000008218                 db  40h ; @
.eh_frame_hdr:0000000000008219                 db  16h
.eh_frame_hdr:000000000000821A                 db    0
.eh_frame_hdr:000000000000821B                 db    0
.eh_frame_hdr:000000000000821C                 db  90h
.eh_frame_hdr:000000000000821D                 db 0EFh
.eh_frame_hdr:000000000000821E                 db 0FFh
.eh_frame_hdr:000000000000821F                 db 0FFh
.eh_frame_hdr:0000000000008220                 db  78h ; x
.eh_frame_hdr:0000000000008221                 db  16h
.eh_frame_hdr:0000000000008222                 db    0
.eh_frame_hdr:0000000000008223                 db    0
.eh_frame_hdr:0000000000008224                 db 0D0h
.eh_frame_hdr:0000000000008225                 db 0EFh
.eh_frame_hdr:0000000000008226                 db 0FFh
.eh_frame_hdr:0000000000008227                 db 0FFh
.eh_frame_hdr:0000000000008228                 db  98h
.eh_frame_hdr:0000000000008229                 db  16h
.eh_frame_hdr:000000000000822A                 db    0
.eh_frame_hdr:000000000000822B                 db    0
.eh_frame_hdr:000000000000822C                 db  30h ; 0
.eh_frame_hdr:000000000000822D                 db 0F0h
.eh_frame_hdr:000000000000822E                 db 0FFh
.eh_frame_hdr:000000000000822F                 db 0FFh
.eh_frame_hdr:0000000000008230                 db 0C8h
.eh_frame_hdr:0000000000008231                 db  16h
.eh_frame_hdr:0000000000008232                 db    0
.eh_frame_hdr:0000000000008233                 db    0
.eh_frame_hdr:0000000000008234                 db 0A0h
.eh_frame_hdr:0000000000008235                 db 0F0h
.eh_frame_hdr:0000000000008236                 db 0FFh
.eh_frame_hdr:0000000000008237                 db 0FFh
.eh_frame_hdr:0000000000008238                 db  10h
.eh_frame_hdr:0000000000008239                 db  17h
.eh_frame_hdr:000000000000823A                 db    0
.eh_frame_hdr:000000000000823B                 db    0
.eh_frame_hdr:000000000000823C                 db 0B0h
.eh_frame_hdr:000000000000823D                 db 0F0h
.eh_frame_hdr:000000000000823E                 db 0FFh
.eh_frame_hdr:000000000000823F                 db 0FFh
.eh_frame_hdr:0000000000008240                 db  28h ; (
.eh_frame_hdr:0000000000008241                 db  17h
.eh_frame_hdr:0000000000008242                 db    0
.eh_frame_hdr:0000000000008243                 db    0
.eh_frame_hdr:0000000000008243 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000008243
LOAD:0000000000008244 ; ===========================================================================
LOAD:0000000000008244
LOAD:0000000000008244 ; Segment type: Pure code
LOAD:0000000000008244 ; Segment permissions: Read/Execute
LOAD:0000000000008244 LOAD            segment byte public 'CODE' use64
LOAD:0000000000008244                 assume cs:LOAD
LOAD:0000000000008244                 ;org 8244h
LOAD:0000000000008244                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008244                 align 8
LOAD:0000000000008244 LOAD            ends
LOAD:0000000000008244
.eh_frame:0000000000008248 ; ===========================================================================
.eh_frame:0000000000008248
.eh_frame:0000000000008248 ; Segment type: Pure data
.eh_frame:0000000000008248 ; Segment permissions: Read
.eh_frame:0000000000008248 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000008248                 assume cs:_eh_frame
.eh_frame:0000000000008248                 ;org 8248h
.eh_frame:0000000000008248                 db  14h
.eh_frame:0000000000008249                 db    0
.eh_frame:000000000000824A                 db    0
.eh_frame:000000000000824B                 db    0
.eh_frame:000000000000824C                 db    0
.eh_frame:000000000000824D                 db    0
.eh_frame:000000000000824E                 db    0
.eh_frame:000000000000824F                 db    0
.eh_frame:0000000000008250                 db    1
.eh_frame:0000000000008251                 db  7Ah ; z
.eh_frame:0000000000008252                 db  52h ; R
.eh_frame:0000000000008253                 db    0
.eh_frame:0000000000008254                 db    1
.eh_frame:0000000000008255                 db  78h ; x
.eh_frame:0000000000008256                 db  10h
.eh_frame:0000000000008257                 db    1
.eh_frame:0000000000008258                 db  1Bh
.eh_frame:0000000000008259                 db  0Ch
.eh_frame:000000000000825A                 db    7
.eh_frame:000000000000825B                 db    8
.eh_frame:000000000000825C                 db  90h
.eh_frame:000000000000825D                 db    1
.eh_frame:000000000000825E                 db    7
.eh_frame:000000000000825F                 db  10h
.eh_frame:0000000000008260                 db  14h
.eh_frame:0000000000008261                 db    0
.eh_frame:0000000000008262                 db    0
.eh_frame:0000000000008263                 db    0
.eh_frame:0000000000008264                 db  1Ch
.eh_frame:0000000000008265                 db    0
.eh_frame:0000000000008266                 db    0
.eh_frame:0000000000008267                 db    0
.eh_frame:0000000000008268                 db  28h ; (
.eh_frame:0000000000008269                 db  9Ah
.eh_frame:000000000000826A                 db 0FFh
.eh_frame:000000000000826B                 db 0FFh
.eh_frame:000000000000826C                 db  2Bh ; +
.eh_frame:000000000000826D                 db    0
.eh_frame:000000000000826E                 db    0
.eh_frame:000000000000826F                 db    0
.eh_frame:0000000000008270                 db    0
.eh_frame:0000000000008271                 db    0
.eh_frame:0000000000008272                 db    0
.eh_frame:0000000000008273                 db    0
.eh_frame:0000000000008274                 db    0
.eh_frame:0000000000008275                 db    0
.eh_frame:0000000000008276                 db    0
.eh_frame:0000000000008277                 db    0
.eh_frame:0000000000008278                 db  14h
.eh_frame:0000000000008279                 db    0
.eh_frame:000000000000827A                 db    0
.eh_frame:000000000000827B                 db    0
.eh_frame:000000000000827C                 db    0
.eh_frame:000000000000827D                 db    0
.eh_frame:000000000000827E                 db    0
.eh_frame:000000000000827F                 db    0
.eh_frame:0000000000008280                 db    1
.eh_frame:0000000000008281                 db  7Ah ; z
.eh_frame:0000000000008282                 db  52h ; R
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db    1
.eh_frame:0000000000008285                 db  78h ; x
.eh_frame:0000000000008286                 db  10h
.eh_frame:0000000000008287                 db    1
.eh_frame:0000000000008288                 db  1Bh
.eh_frame:0000000000008289                 db  0Ch
.eh_frame:000000000000828A                 db    7
.eh_frame:000000000000828B                 db    8
.eh_frame:000000000000828C                 db  90h
.eh_frame:000000000000828D                 db    1
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db  24h ; $
.eh_frame:0000000000008291                 db    0
.eh_frame:0000000000008292                 db    0
.eh_frame:0000000000008293                 db    0
.eh_frame:0000000000008294                 db  1Ch
.eh_frame:0000000000008295                 db    0
.eh_frame:0000000000008296                 db    0
.eh_frame:0000000000008297                 db    0
.eh_frame:0000000000008298                 db    8
.eh_frame:0000000000008299                 db  92h
.eh_frame:000000000000829A                 db 0FFh
.eh_frame:000000000000829B                 db 0FFh
.eh_frame:000000000000829C                 db  10h
.eh_frame:000000000000829D                 db    3
.eh_frame:000000000000829E                 db    0
.eh_frame:000000000000829F                 db    0
.eh_frame:00000000000082A0                 db    0
.eh_frame:00000000000082A1                 db  0Eh
.eh_frame:00000000000082A2                 db  10h
.eh_frame:00000000000082A3                 db  46h ; F
.eh_frame:00000000000082A4                 db  0Eh
.eh_frame:00000000000082A5                 db  18h
.eh_frame:00000000000082A6                 db  4Ah ; J
.eh_frame:00000000000082A7                 db  0Fh
.eh_frame:00000000000082A8                 db  0Bh
.eh_frame:00000000000082A9                 db  77h ; w
.eh_frame:00000000000082AA                 db    8
.eh_frame:00000000000082AB                 db  80h
.eh_frame:00000000000082AC                 db    0
.eh_frame:00000000000082AD                 db  3Fh ; ?
.eh_frame:00000000000082AE                 db  1Ah
.eh_frame:00000000000082AF                 db  3Bh ; ;
.eh_frame:00000000000082B0                 db  2Ah ; *
.eh_frame:00000000000082B1                 db  33h ; 3
.eh_frame:00000000000082B2                 db  24h ; $
.eh_frame:00000000000082B3                 db  22h ; "
.eh_frame:00000000000082B4                 db    0
.eh_frame:00000000000082B5                 db    0
.eh_frame:00000000000082B6                 db    0
.eh_frame:00000000000082B7                 db    0
.eh_frame:00000000000082B8                 db  14h
.eh_frame:00000000000082B9                 db    0
.eh_frame:00000000000082BA                 db    0
.eh_frame:00000000000082BB                 db    0
.eh_frame:00000000000082BC                 db  44h ; D
.eh_frame:00000000000082BD                 db    0
.eh_frame:00000000000082BE                 db    0
.eh_frame:00000000000082BF                 db    0
.eh_frame:00000000000082C0                 db 0F0h
.eh_frame:00000000000082C1                 db  94h
.eh_frame:00000000000082C2                 db 0FFh
.eh_frame:00000000000082C3                 db 0FFh
.eh_frame:00000000000082C4                 db    8
.eh_frame:00000000000082C5                 db    0
.eh_frame:00000000000082C6                 db    0
.eh_frame:00000000000082C7                 db    0
.eh_frame:00000000000082C8                 db    0
.eh_frame:00000000000082C9                 db    0
.eh_frame:00000000000082CA                 db    0
.eh_frame:00000000000082CB                 db    0
.eh_frame:00000000000082CC                 db    0
.eh_frame:00000000000082CD                 db    0
.eh_frame:00000000000082CE                 db    0
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db  10h
.eh_frame:00000000000082D1                 db    0
.eh_frame:00000000000082D2                 db    0
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db  5Ch ; \
.eh_frame:00000000000082D5                 db    0
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db 0C8h
.eh_frame:00000000000082D9                 db  9Ah
.eh_frame:00000000000082DA                 db 0FFh
.eh_frame:00000000000082DB                 db 0FFh
.eh_frame:00000000000082DC                 db  8Bh
.eh_frame:00000000000082DD                 db    0
.eh_frame:00000000000082DE                 db    0
.eh_frame:00000000000082DF                 db    0
.eh_frame:00000000000082E0                 db    0
.eh_frame:00000000000082E1                 db    0
.eh_frame:00000000000082E2                 db    0
.eh_frame:00000000000082E3                 db    0
.eh_frame:00000000000082E4                 db  24h ; $
.eh_frame:00000000000082E5                 db    0
.eh_frame:00000000000082E6                 db    0
.eh_frame:00000000000082E7                 db    0
.eh_frame:00000000000082E8                 db  70h ; p
.eh_frame:00000000000082E9                 db    0
.eh_frame:00000000000082EA                 db    0
.eh_frame:00000000000082EB                 db    0
.eh_frame:00000000000082EC                 db  44h ; D
.eh_frame:00000000000082ED                 db  9Bh
.eh_frame:00000000000082EE                 db 0FFh
.eh_frame:00000000000082EF                 db 0FFh
.eh_frame:00000000000082F0                 db  43h ; C
.eh_frame:00000000000082F1                 db    0
.eh_frame:00000000000082F2                 db    0
.eh_frame:00000000000082F3                 db    0
.eh_frame:00000000000082F4                 db    0
.eh_frame:00000000000082F5                 db  41h ; A
.eh_frame:00000000000082F6                 db  0Eh
.eh_frame:00000000000082F7                 db  10h
.eh_frame:00000000000082F8                 db  86h
.eh_frame:00000000000082F9                 db    2
.eh_frame:00000000000082FA                 db  41h ; A
.eh_frame:00000000000082FB                 db  0Eh
.eh_frame:00000000000082FC                 db  18h
.eh_frame:00000000000082FD                 db  83h
.eh_frame:00000000000082FE                 db    3
.eh_frame:00000000000082FF                 db  46h ; F
.eh_frame:0000000000008300                 db  0Eh
.eh_frame:0000000000008301                 db  20h
.eh_frame:0000000000008302                 db  75h ; u
.eh_frame:0000000000008303                 db  0Eh
.eh_frame:0000000000008304                 db  18h
.eh_frame:0000000000008305                 db  44h ; D
.eh_frame:0000000000008306                 db  0Eh
.eh_frame:0000000000008307                 db  10h
.eh_frame:0000000000008308                 db  41h ; A
.eh_frame:0000000000008309                 db  0Eh
.eh_frame:000000000000830A                 db    8
.eh_frame:000000000000830B                 db    0
.eh_frame:000000000000830C                 db  28h ; (
.eh_frame:000000000000830D                 db    0
.eh_frame:000000000000830E                 db    0
.eh_frame:000000000000830F                 db    0
.eh_frame:0000000000008310                 db  98h
.eh_frame:0000000000008311                 db    0
.eh_frame:0000000000008312                 db    0
.eh_frame:0000000000008313                 db    0
.eh_frame:0000000000008314                 db  6Ch ; l
.eh_frame:0000000000008315                 db  9Bh
.eh_frame:0000000000008316                 db 0FFh
.eh_frame:0000000000008317                 db 0FFh
.eh_frame:0000000000008318                 db 0A5h
.eh_frame:0000000000008319                 db    0
.eh_frame:000000000000831A                 db    0
.eh_frame:000000000000831B                 db    0
.eh_frame:000000000000831C                 db    0
.eh_frame:000000000000831D                 db  41h ; A
.eh_frame:000000000000831E                 db  0Eh
.eh_frame:000000000000831F                 db  10h
.eh_frame:0000000000008320                 db  86h
.eh_frame:0000000000008321                 db    2
.eh_frame:0000000000008322                 db  41h ; A
.eh_frame:0000000000008323                 db  0Eh
.eh_frame:0000000000008324                 db  18h
.eh_frame:0000000000008325                 db  83h
.eh_frame:0000000000008326                 db    3
.eh_frame:0000000000008327                 db  52h ; R
.eh_frame:0000000000008328                 db  0Eh
.eh_frame:0000000000008329                 db 0C0h
.eh_frame:000000000000832A                 db    1
.eh_frame:000000000000832B                 db    2
.eh_frame:000000000000832C                 db  4Ah ; J
.eh_frame:000000000000832D                 db  0Ah
.eh_frame:000000000000832E                 db  0Eh
.eh_frame:000000000000832F                 db  18h
.eh_frame:0000000000008330                 db  41h ; A
.eh_frame:0000000000008331                 db  0Eh
.eh_frame:0000000000008332                 db  10h
.eh_frame:0000000000008333                 db  41h ; A
.eh_frame:0000000000008334                 db  0Eh
.eh_frame:0000000000008335                 db    8
.eh_frame:0000000000008336                 db  41h ; A
.eh_frame:0000000000008337                 db  0Bh
.eh_frame:0000000000008338                 db  28h ; (
.eh_frame:0000000000008339                 db    0
.eh_frame:000000000000833A                 db    0
.eh_frame:000000000000833B                 db    0
.eh_frame:000000000000833C                 db 0C4h
.eh_frame:000000000000833D                 db    0
.eh_frame:000000000000833E                 db    0
.eh_frame:000000000000833F                 db    0
.eh_frame:0000000000008340                 db 0F0h
.eh_frame:0000000000008341                 db  9Bh
.eh_frame:0000000000008342                 db 0FFh
.eh_frame:0000000000008343                 db 0FFh
.eh_frame:0000000000008344                 db  6Ah ; j
.eh_frame:0000000000008345                 db    3
.eh_frame:0000000000008346                 db    0
.eh_frame:0000000000008347                 db    0
.eh_frame:0000000000008348                 db    0
.eh_frame:0000000000008349                 db  42h ; B
.eh_frame:000000000000834A                 db  0Eh
.eh_frame:000000000000834B                 db  10h
.eh_frame:000000000000834C                 db  8Dh
.eh_frame:000000000000834D                 db    2
.eh_frame:000000000000834E                 db  42h ; B
.eh_frame:000000000000834F                 db  0Eh
.eh_frame:0000000000008350                 db  18h
.eh_frame:0000000000008351                 db  8Ch
.eh_frame:0000000000008352                 db    3
.eh_frame:0000000000008353                 db  46h ; F
.eh_frame:0000000000008354                 db  0Eh
.eh_frame:0000000000008355                 db  20h
.eh_frame:0000000000008356                 db  86h
.eh_frame:0000000000008357                 db    4
.eh_frame:0000000000008358                 db  41h ; A
.eh_frame:0000000000008359                 db  0Eh
.eh_frame:000000000000835A                 db  28h ; (
.eh_frame:000000000000835B                 db  83h
.eh_frame:000000000000835C                 db    5
.eh_frame:000000000000835D                 db  49h ; I
.eh_frame:000000000000835E                 db  0Eh
.eh_frame:000000000000835F                 db 0B0h
.eh_frame:0000000000008360                 db    1
.eh_frame:0000000000008361                 db    0
.eh_frame:0000000000008362                 db    0
.eh_frame:0000000000008363                 db    0
.eh_frame:0000000000008364                 db  48h ; H
.eh_frame:0000000000008365                 db    0
.eh_frame:0000000000008366                 db    0
.eh_frame:0000000000008367                 db    0
.eh_frame:0000000000008368                 db 0F0h
.eh_frame:0000000000008369                 db    0
.eh_frame:000000000000836A                 db    0
.eh_frame:000000000000836B                 db    0
.eh_frame:000000000000836C                 db  54h ; T
.eh_frame:000000000000836D                 db  94h
.eh_frame:000000000000836E                 db 0FFh
.eh_frame:000000000000836F                 db 0FFh
.eh_frame:0000000000008370                 db 0C2h
.eh_frame:0000000000008371                 db    4
.eh_frame:0000000000008372                 db    0
.eh_frame:0000000000008373                 db    0
.eh_frame:0000000000008374                 db    0
.eh_frame:0000000000008375                 db  42h ; B
.eh_frame:0000000000008376                 db  0Eh
.eh_frame:0000000000008377                 db  10h
.eh_frame:0000000000008378                 db  8Fh
.eh_frame:0000000000008379                 db    2
.eh_frame:000000000000837A                 db  42h ; B
.eh_frame:000000000000837B                 db  0Eh
.eh_frame:000000000000837C                 db  18h
.eh_frame:000000000000837D                 db  8Eh
.eh_frame:000000000000837E                 db    3
.eh_frame:000000000000837F                 db  45h ; E
.eh_frame:0000000000008380                 db  0Eh
.eh_frame:0000000000008381                 db  20h
.eh_frame:0000000000008382                 db  8Dh
.eh_frame:0000000000008383                 db    4
.eh_frame:0000000000008384                 db  42h ; B
.eh_frame:0000000000008385                 db  0Eh
.eh_frame:0000000000008386                 db  28h ; (
.eh_frame:0000000000008387                 db  8Ch
.eh_frame:0000000000008388                 db    5
.eh_frame:0000000000008389                 db  44h ; D
.eh_frame:000000000000838A                 db  0Eh
.eh_frame:000000000000838B                 db  30h ; 0
.eh_frame:000000000000838C                 db  86h
.eh_frame:000000000000838D                 db    6
.eh_frame:000000000000838E                 db  41h ; A
.eh_frame:000000000000838F                 db  0Eh
.eh_frame:0000000000008390                 db  38h ; 8
.eh_frame:0000000000008391                 db  83h
.eh_frame:0000000000008392                 db    7
.eh_frame:0000000000008393                 db  56h ; V
.eh_frame:0000000000008394                 db  0Eh
.eh_frame:0000000000008395                 db  40h ; @
.eh_frame:0000000000008396                 db    3
.eh_frame:0000000000008397                 db  46h ; F
.eh_frame:0000000000008398                 db    3
.eh_frame:0000000000008399                 db  0Ah
.eh_frame:000000000000839A                 db  0Eh
.eh_frame:000000000000839B                 db  38h ; 8
.eh_frame:000000000000839C                 db  45h ; E
.eh_frame:000000000000839D                 db  0Eh
.eh_frame:000000000000839E                 db  30h ; 0
.eh_frame:000000000000839F                 db  41h ; A
.eh_frame:00000000000083A0                 db  0Eh
.eh_frame:00000000000083A1                 db  28h ; (
.eh_frame:00000000000083A2                 db  42h ; B
.eh_frame:00000000000083A3                 db  0Eh
.eh_frame:00000000000083A4                 db  20h
.eh_frame:00000000000083A5                 db  42h ; B
.eh_frame:00000000000083A6                 db  0Eh
.eh_frame:00000000000083A7                 db  18h
.eh_frame:00000000000083A8                 db  42h ; B
.eh_frame:00000000000083A9                 db  0Eh
.eh_frame:00000000000083AA                 db  10h
.eh_frame:00000000000083AB                 db  42h ; B
.eh_frame:00000000000083AC                 db  0Eh
.eh_frame:00000000000083AD                 db    8
.eh_frame:00000000000083AE                 db  41h ; A
.eh_frame:00000000000083AF                 db  0Bh
.eh_frame:00000000000083B0                 db  5Ch ; \
.eh_frame:00000000000083B1                 db    0
.eh_frame:00000000000083B2                 db    0
.eh_frame:00000000000083B3                 db    0
.eh_frame:00000000000083B4                 db  3Ch ; <
.eh_frame:00000000000083B5                 db    1
.eh_frame:00000000000083B6                 db    0
.eh_frame:00000000000083B7                 db    0
.eh_frame:00000000000083B8                 db 0E8h
.eh_frame:00000000000083B9                 db  9Eh
.eh_frame:00000000000083BA                 db 0FFh
.eh_frame:00000000000083BB                 db 0FFh
.eh_frame:00000000000083BC                 db  77h ; w
.eh_frame:00000000000083BD                 db    0
.eh_frame:00000000000083BE                 db    0
.eh_frame:00000000000083BF                 db    0
.eh_frame:00000000000083C0                 db    0
.eh_frame:00000000000083C1                 db  42h ; B
.eh_frame:00000000000083C2                 db  0Eh
.eh_frame:00000000000083C3                 db  10h
.eh_frame:00000000000083C4                 db  8Eh
.eh_frame:00000000000083C5                 db    2
.eh_frame:00000000000083C6                 db  42h ; B
.eh_frame:00000000000083C7                 db  0Eh
.eh_frame:00000000000083C8                 db  18h
.eh_frame:00000000000083C9                 db  8Dh
.eh_frame:00000000000083CA                 db    3
.eh_frame:00000000000083CB                 db  45h ; E
.eh_frame:00000000000083CC                 db  0Eh
.eh_frame:00000000000083CD                 db  20h
.eh_frame:00000000000083CE                 db  8Ch
.eh_frame:00000000000083CF                 db    4
.eh_frame:00000000000083D0                 db  41h ; A
.eh_frame:00000000000083D1                 db  0Eh
.eh_frame:00000000000083D2                 db  28h ; (
.eh_frame:00000000000083D3                 db  86h
.eh_frame:00000000000083D4                 db    5
.eh_frame:00000000000083D5                 db  41h ; A
.eh_frame:00000000000083D6                 db  0Eh
.eh_frame:00000000000083D7                 db  30h ; 0
.eh_frame:00000000000083D8                 db  83h
.eh_frame:00000000000083D9                 db    6
.eh_frame:00000000000083DA                 db  62h ; b
.eh_frame:00000000000083DB                 db  0Ah
.eh_frame:00000000000083DC                 db  0Eh
.eh_frame:00000000000083DD                 db  28h ; (
.eh_frame:00000000000083DE                 db  41h ; A
.eh_frame:00000000000083DF                 db  0Eh
.eh_frame:00000000000083E0                 db  20h
.eh_frame:00000000000083E1                 db  42h ; B
.eh_frame:00000000000083E2                 db  0Eh
.eh_frame:00000000000083E3                 db  18h
.eh_frame:00000000000083E4                 db  42h ; B
.eh_frame:00000000000083E5                 db  0Eh
.eh_frame:00000000000083E6                 db  10h
.eh_frame:00000000000083E7                 db  42h ; B
.eh_frame:00000000000083E8                 db  0Eh
.eh_frame:00000000000083E9                 db    8
.eh_frame:00000000000083EA                 db  44h ; D
.eh_frame:00000000000083EB                 db  0Bh
.eh_frame:00000000000083EC                 db  59h ; Y
.eh_frame:00000000000083ED                 db  0Ah
.eh_frame:00000000000083EE                 db  0Eh
.eh_frame:00000000000083EF                 db  28h ; (
.eh_frame:00000000000083F0                 db  41h ; A
.eh_frame:00000000000083F1                 db  0Eh
.eh_frame:00000000000083F2                 db  20h
.eh_frame:00000000000083F3                 db  42h ; B
.eh_frame:00000000000083F4                 db  0Eh
.eh_frame:00000000000083F5                 db  18h
.eh_frame:00000000000083F6                 db  42h ; B
.eh_frame:00000000000083F7                 db  0Eh
.eh_frame:00000000000083F8                 db  10h
.eh_frame:00000000000083F9                 db  42h ; B
.eh_frame:00000000000083FA                 db  0Eh
.eh_frame:00000000000083FB                 db    8
.eh_frame:00000000000083FC                 db  48h ; H
.eh_frame:00000000000083FD                 db  0Bh
.eh_frame:00000000000083FE                 db  4Dh ; M
.eh_frame:00000000000083FF                 db  0Eh
.eh_frame:0000000000008400                 db  28h ; (
.eh_frame:0000000000008401                 db  43h ; C
.eh_frame:0000000000008402                 db  0Eh
.eh_frame:0000000000008403                 db  20h
.eh_frame:0000000000008404                 db  42h ; B
.eh_frame:0000000000008405                 db  0Eh
.eh_frame:0000000000008406                 db  18h
.eh_frame:0000000000008407                 db  42h ; B
.eh_frame:0000000000008408                 db  0Eh
.eh_frame:0000000000008409                 db  10h
.eh_frame:000000000000840A                 db  42h ; B
.eh_frame:000000000000840B                 db  0Eh
.eh_frame:000000000000840C                 db    8
.eh_frame:000000000000840D                 db    0
.eh_frame:000000000000840E                 db    0
.eh_frame:000000000000840F                 db    0
.eh_frame:0000000000008410                 db  64h ; d
.eh_frame:0000000000008411                 db    0
.eh_frame:0000000000008412                 db    0
.eh_frame:0000000000008413                 db    0
.eh_frame:0000000000008414                 db  9Ch
.eh_frame:0000000000008415                 db    1
.eh_frame:0000000000008416                 db    0
.eh_frame:0000000000008417                 db    0
.eh_frame:0000000000008418                 db    8
.eh_frame:0000000000008419                 db  9Fh
.eh_frame:000000000000841A                 db 0FFh
.eh_frame:000000000000841B                 db 0FFh
.eh_frame:000000000000841C                 db  37h ; 7
.eh_frame:000000000000841D                 db    2
.eh_frame:000000000000841E                 db    0
.eh_frame:000000000000841F                 db    0
.eh_frame:0000000000008420                 db    0
.eh_frame:0000000000008421                 db  42h ; B
.eh_frame:0000000000008422                 db  0Eh
.eh_frame:0000000000008423                 db  10h
.eh_frame:0000000000008424                 db  8Fh
.eh_frame:0000000000008425                 db    2
.eh_frame:0000000000008426                 db  42h ; B
.eh_frame:0000000000008427                 db  0Eh
.eh_frame:0000000000008428                 db  18h
.eh_frame:0000000000008429                 db  8Eh
.eh_frame:000000000000842A                 db    3
.eh_frame:000000000000842B                 db  42h ; B
.eh_frame:000000000000842C                 db  0Eh
.eh_frame:000000000000842D                 db  20h
.eh_frame:000000000000842E                 db  8Dh
.eh_frame:000000000000842F                 db    4
.eh_frame:0000000000008430                 db  42h ; B
.eh_frame:0000000000008431                 db  0Eh
.eh_frame:0000000000008432                 db  28h ; (
.eh_frame:0000000000008433                 db  8Ch
.eh_frame:0000000000008434                 db    5
.eh_frame:0000000000008435                 db  41h ; A
.eh_frame:0000000000008436                 db  0Eh
.eh_frame:0000000000008437                 db  30h ; 0
.eh_frame:0000000000008438                 db  86h
.eh_frame:0000000000008439                 db    6
.eh_frame:000000000000843A                 db  41h ; A
.eh_frame:000000000000843B                 db  0Eh
.eh_frame:000000000000843C                 db  38h ; 8
.eh_frame:000000000000843D                 db  83h
.eh_frame:000000000000843E                 db    7
.eh_frame:000000000000843F                 db  44h ; D
.eh_frame:0000000000008440                 db  0Eh
.eh_frame:0000000000008441                 db  50h ; P
.eh_frame:0000000000008442                 db  6Bh ; k
.eh_frame:0000000000008443                 db  0Ah
.eh_frame:0000000000008444                 db  0Eh
.eh_frame:0000000000008445                 db  38h ; 8
.eh_frame:0000000000008446                 db  41h ; A
.eh_frame:0000000000008447                 db  0Eh
.eh_frame:0000000000008448                 db  30h ; 0
.eh_frame:0000000000008449                 db  41h ; A
.eh_frame:000000000000844A                 db  0Eh
.eh_frame:000000000000844B                 db  28h ; (
.eh_frame:000000000000844C                 db  42h ; B
.eh_frame:000000000000844D                 db  0Eh
.eh_frame:000000000000844E                 db  20h
.eh_frame:000000000000844F                 db  42h ; B
.eh_frame:0000000000008450                 db  0Eh
.eh_frame:0000000000008451                 db  18h
.eh_frame:0000000000008452                 db  42h ; B
.eh_frame:0000000000008453                 db  0Eh
.eh_frame:0000000000008454                 db  10h
.eh_frame:0000000000008455                 db  42h ; B
.eh_frame:0000000000008456                 db  0Eh
.eh_frame:0000000000008457                 db    8
.eh_frame:0000000000008458                 db  45h ; E
.eh_frame:0000000000008459                 db  0Bh
.eh_frame:000000000000845A                 db    2
.eh_frame:000000000000845B                 db 0D9h
.eh_frame:000000000000845C                 db  0Ah
.eh_frame:000000000000845D                 db  0Eh
.eh_frame:000000000000845E                 db  38h ; 8
.eh_frame:000000000000845F                 db  43h ; C
.eh_frame:0000000000008460                 db  0Eh
.eh_frame:0000000000008461                 db  30h ; 0
.eh_frame:0000000000008462                 db  44h ; D
.eh_frame:0000000000008463                 db  0Eh
.eh_frame:0000000000008464                 db  28h ; (
.eh_frame:0000000000008465                 db  42h ; B
.eh_frame:0000000000008466                 db  0Eh
.eh_frame:0000000000008467                 db  20h
.eh_frame:0000000000008468                 db  42h ; B
.eh_frame:0000000000008469                 db  0Eh
.eh_frame:000000000000846A                 db  18h
.eh_frame:000000000000846B                 db  42h ; B
.eh_frame:000000000000846C                 db  0Eh
.eh_frame:000000000000846D                 db  10h
.eh_frame:000000000000846E                 db  42h ; B
.eh_frame:000000000000846F                 db  0Eh
.eh_frame:0000000000008470                 db    8
.eh_frame:0000000000008471                 db  48h ; H
.eh_frame:0000000000008472                 db  0Bh
.eh_frame:0000000000008473                 db    0
.eh_frame:0000000000008474                 db    0
.eh_frame:0000000000008475                 db    0
.eh_frame:0000000000008476                 db    0
.eh_frame:0000000000008477                 db    0
.eh_frame:0000000000008478                 db  4Ch ; L
.eh_frame:0000000000008479                 db    0
.eh_frame:000000000000847A                 db    0
.eh_frame:000000000000847B                 db    0
.eh_frame:000000000000847C                 db    4
.eh_frame:000000000000847D                 db    2
.eh_frame:000000000000847E                 db    0
.eh_frame:000000000000847F                 db    0
.eh_frame:0000000000008480                 db 0E0h
.eh_frame:0000000000008481                 db 0A0h
.eh_frame:0000000000008482                 db 0FFh
.eh_frame:0000000000008483                 db 0FFh
.eh_frame:0000000000008484                 db  36h ; 6
.eh_frame:0000000000008485                 db    6
.eh_frame:0000000000008486                 db    0
.eh_frame:0000000000008487                 db    0
.eh_frame:0000000000008488                 db    0
.eh_frame:0000000000008489                 db  42h ; B
.eh_frame:000000000000848A                 db  0Eh
.eh_frame:000000000000848B                 db  10h
.eh_frame:000000000000848C                 db  8Fh
.eh_frame:000000000000848D                 db    2
.eh_frame:000000000000848E                 db  42h ; B
.eh_frame:000000000000848F                 db  0Eh
.eh_frame:0000000000008490                 db  18h
.eh_frame:0000000000008491                 db  8Eh
.eh_frame:0000000000008492                 db    3
.eh_frame:0000000000008493                 db  42h ; B
.eh_frame:0000000000008494                 db  0Eh
.eh_frame:0000000000008495                 db  20h
.eh_frame:0000000000008496                 db  8Dh
.eh_frame:0000000000008497                 db    4
.eh_frame:0000000000008498                 db  42h ; B
.eh_frame:0000000000008499                 db  0Eh
.eh_frame:000000000000849A                 db  28h ; (
.eh_frame:000000000000849B                 db  8Ch
.eh_frame:000000000000849C                 db    5
.eh_frame:000000000000849D                 db  41h ; A
.eh_frame:000000000000849E                 db  0Eh
.eh_frame:000000000000849F                 db  30h ; 0
.eh_frame:00000000000084A0                 db  86h
.eh_frame:00000000000084A1                 db    6
.eh_frame:00000000000084A2                 db  41h ; A
.eh_frame:00000000000084A3                 db  0Eh
.eh_frame:00000000000084A4                 db  38h ; 8
.eh_frame:00000000000084A5                 db  83h
.eh_frame:00000000000084A6                 db    7
.eh_frame:00000000000084A7                 db  47h ; G
.eh_frame:00000000000084A8                 db  0Eh
.eh_frame:00000000000084A9                 db 0A0h
.eh_frame:00000000000084AA                 db    2
.eh_frame:00000000000084AB                 db    3
.eh_frame:00000000000084AC                 db  30h ; 0
.eh_frame:00000000000084AD                 db    2
.eh_frame:00000000000084AE                 db  0Ah
.eh_frame:00000000000084AF                 db  0Eh
.eh_frame:00000000000084B0                 db  38h ; 8
.eh_frame:00000000000084B1                 db  41h ; A
.eh_frame:00000000000084B2                 db  0Eh
.eh_frame:00000000000084B3                 db  30h ; 0
.eh_frame:00000000000084B4                 db  41h ; A
.eh_frame:00000000000084B5                 db  0Eh
.eh_frame:00000000000084B6                 db  28h ; (
.eh_frame:00000000000084B7                 db  42h ; B
.eh_frame:00000000000084B8                 db  0Eh
.eh_frame:00000000000084B9                 db  20h
.eh_frame:00000000000084BA                 db  42h ; B
.eh_frame:00000000000084BB                 db  0Eh
.eh_frame:00000000000084BC                 db  18h
.eh_frame:00000000000084BD                 db  42h ; B
.eh_frame:00000000000084BE                 db  0Eh
.eh_frame:00000000000084BF                 db  10h
.eh_frame:00000000000084C0                 db  42h ; B
.eh_frame:00000000000084C1                 db  0Eh
.eh_frame:00000000000084C2                 db    8
.eh_frame:00000000000084C3                 db  45h ; E
.eh_frame:00000000000084C4                 db  0Bh
.eh_frame:00000000000084C5                 db    0
.eh_frame:00000000000084C6                 db    0
.eh_frame:00000000000084C7                 db    0
.eh_frame:00000000000084C8                 db  10h
.eh_frame:00000000000084C9                 db    0
.eh_frame:00000000000084CA                 db    0
.eh_frame:00000000000084CB                 db    0
.eh_frame:00000000000084CC                 db  54h ; T
.eh_frame:00000000000084CD                 db    2
.eh_frame:00000000000084CE                 db    0
.eh_frame:00000000000084CF                 db    0
.eh_frame:00000000000084D0                 db 0D0h
.eh_frame:00000000000084D1                 db 0A6h
.eh_frame:00000000000084D2                 db 0FFh
.eh_frame:00000000000084D3                 db 0FFh
.eh_frame:00000000000084D4                 db    8
.eh_frame:00000000000084D5                 db    0
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db    0
.eh_frame:00000000000084D9                 db    0
.eh_frame:00000000000084DA                 db    0
.eh_frame:00000000000084DB                 db    0
.eh_frame:00000000000084DC                 db  10h
.eh_frame:00000000000084DD                 db    0
.eh_frame:00000000000084DE                 db    0
.eh_frame:00000000000084DF                 db    0
.eh_frame:00000000000084E0                 db  68h ; h
.eh_frame:00000000000084E1                 db    2
.eh_frame:00000000000084E2                 db    0
.eh_frame:00000000000084E3                 db    0
.eh_frame:00000000000084E4                 db 0CCh
.eh_frame:00000000000084E5                 db 0A6h
.eh_frame:00000000000084E6                 db 0FFh
.eh_frame:00000000000084E7                 db 0FFh
.eh_frame:00000000000084E8                 db    8
.eh_frame:00000000000084E9                 db    0
.eh_frame:00000000000084EA                 db    0
.eh_frame:00000000000084EB                 db    0
.eh_frame:00000000000084EC                 db    0
.eh_frame:00000000000084ED                 db    0
.eh_frame:00000000000084EE                 db    0
.eh_frame:00000000000084EF                 db    0
.eh_frame:00000000000084F0                 db  2Ch ; ,
.eh_frame:00000000000084F1                 db    0
.eh_frame:00000000000084F2                 db    0
.eh_frame:00000000000084F3                 db    0
.eh_frame:00000000000084F4                 db  7Ch ; |
.eh_frame:00000000000084F5                 db    2
.eh_frame:00000000000084F6                 db    0
.eh_frame:00000000000084F7                 db    0
.eh_frame:00000000000084F8                 db 0C8h
.eh_frame:00000000000084F9                 db 0A6h
.eh_frame:00000000000084FA                 db 0FFh
.eh_frame:00000000000084FB                 db 0FFh
.eh_frame:00000000000084FC                 db 0A4h
.eh_frame:00000000000084FD                 db    0
.eh_frame:00000000000084FE                 db    0
.eh_frame:00000000000084FF                 db    0
.eh_frame:0000000000008500                 db    0
.eh_frame:0000000000008501                 db  41h ; A
.eh_frame:0000000000008502                 db  0Eh
.eh_frame:0000000000008503                 db  10h
.eh_frame:0000000000008504                 db  86h
.eh_frame:0000000000008505                 db    2
.eh_frame:0000000000008506                 db  41h ; A
.eh_frame:0000000000008507                 db  0Eh
.eh_frame:0000000000008508                 db  18h
.eh_frame:0000000000008509                 db  83h
.eh_frame:000000000000850A                 db    3
.eh_frame:000000000000850B                 db  44h ; D
.eh_frame:000000000000850C                 db  0Eh
.eh_frame:000000000000850D                 db  20h
.eh_frame:000000000000850E                 db  7Ah ; z
.eh_frame:000000000000850F                 db  0Ah
.eh_frame:0000000000008510                 db  0Eh
.eh_frame:0000000000008511                 db  18h
.eh_frame:0000000000008512                 db  41h ; A
.eh_frame:0000000000008513                 db  0Eh
.eh_frame:0000000000008514                 db  10h
.eh_frame:0000000000008515                 db  41h ; A
.eh_frame:0000000000008516                 db  0Eh
.eh_frame:0000000000008517                 db    8
.eh_frame:0000000000008518                 db  41h ; A
.eh_frame:0000000000008519                 db  0Bh
.eh_frame:000000000000851A                 db    0
.eh_frame:000000000000851B                 db    0
.eh_frame:000000000000851C                 db    0
.eh_frame:000000000000851D                 db    0
.eh_frame:000000000000851E                 db    0
.eh_frame:000000000000851F                 db    0
.eh_frame:0000000000008520                 db  5Ch ; \
.eh_frame:0000000000008521                 db    0
.eh_frame:0000000000008522                 db    0
.eh_frame:0000000000008523                 db    0
.eh_frame:0000000000008524                 db 0ACh
.eh_frame:0000000000008525                 db    2
.eh_frame:0000000000008526                 db    0
.eh_frame:0000000000008527                 db    0
.eh_frame:0000000000008528                 db  48h ; H
.eh_frame:0000000000008529                 db 0A7h
.eh_frame:000000000000852A                 db 0FFh
.eh_frame:000000000000852B                 db 0FFh
.eh_frame:000000000000852C                 db  87h
.eh_frame:000000000000852D                 db    0
.eh_frame:000000000000852E                 db    0
.eh_frame:000000000000852F                 db    0
.eh_frame:0000000000008530                 db    0
.eh_frame:0000000000008531                 db  47h ; G
.eh_frame:0000000000008532                 db  0Eh
.eh_frame:0000000000008533                 db  10h
.eh_frame:0000000000008534                 db  8Dh
.eh_frame:0000000000008535                 db    2
.eh_frame:0000000000008536                 db  42h ; B
.eh_frame:0000000000008537                 db  0Eh
.eh_frame:0000000000008538                 db  18h
.eh_frame:0000000000008539                 db  8Ch
.eh_frame:000000000000853A                 db    3
.eh_frame:000000000000853B                 db  44h ; D
.eh_frame:000000000000853C                 db  0Eh
.eh_frame:000000000000853D                 db  20h
.eh_frame:000000000000853E                 db  86h
.eh_frame:000000000000853F                 db    4
.eh_frame:0000000000008540                 db  41h ; A
.eh_frame:0000000000008541                 db  0Eh
.eh_frame:0000000000008542                 db  28h ; (
.eh_frame:0000000000008543                 db  83h
.eh_frame:0000000000008544                 db    5
.eh_frame:0000000000008545                 db  4Fh ; O
.eh_frame:0000000000008546                 db  0Eh
.eh_frame:0000000000008547                 db  30h ; 0
.eh_frame:0000000000008548                 db  7Ch ; |
.eh_frame:0000000000008549                 db  0Ah
.eh_frame:000000000000854A                 db  0Eh
.eh_frame:000000000000854B                 db  28h ; (
.eh_frame:000000000000854C                 db  44h ; D
.eh_frame:000000000000854D                 db 0C3h
.eh_frame:000000000000854E                 db  0Eh
.eh_frame:000000000000854F                 db  20h
.eh_frame:0000000000008550                 db  41h ; A
.eh_frame:0000000000008551                 db 0C6h
.eh_frame:0000000000008552                 db  0Eh
.eh_frame:0000000000008553                 db  18h
.eh_frame:0000000000008554                 db  42h ; B
.eh_frame:0000000000008555                 db 0CCh
.eh_frame:0000000000008556                 db  0Eh
.eh_frame:0000000000008557                 db  10h
.eh_frame:0000000000008558                 db  42h ; B
.eh_frame:0000000000008559                 db 0CDh
.eh_frame:000000000000855A                 db  0Eh
.eh_frame:000000000000855B                 db    8
.eh_frame:000000000000855C                 db  4Eh ; N
.eh_frame:000000000000855D                 db  0Bh
.eh_frame:000000000000855E                 db  44h ; D
.eh_frame:000000000000855F                 db  0Eh
.eh_frame:0000000000008560                 db  28h ; (
.eh_frame:0000000000008561                 db  41h ; A
.eh_frame:0000000000008562                 db  0Eh
.eh_frame:0000000000008563                 db  20h
.eh_frame:0000000000008564                 db  41h ; A
.eh_frame:0000000000008565                 db  0Eh
.eh_frame:0000000000008566                 db  18h
.eh_frame:0000000000008567                 db  42h ; B
.eh_frame:0000000000008568                 db  0Eh
.eh_frame:0000000000008569                 db  10h
.eh_frame:000000000000856A                 db  42h ; B
.eh_frame:000000000000856B                 db  0Eh
.eh_frame:000000000000856C                 db    8
.eh_frame:000000000000856D                 db  46h ; F
.eh_frame:000000000000856E                 db 0C3h
.eh_frame:000000000000856F                 db 0C6h
.eh_frame:0000000000008570                 db 0CCh
.eh_frame:0000000000008571                 db 0CDh
.eh_frame:0000000000008572                 db  42h ; B
.eh_frame:0000000000008573                 db  0Eh
.eh_frame:0000000000008574                 db  30h ; 0
.eh_frame:0000000000008575                 db  83h
.eh_frame:0000000000008576                 db    5
.eh_frame:0000000000008577                 db  86h
.eh_frame:0000000000008578                 db    4
.eh_frame:0000000000008579                 db  8Ch
.eh_frame:000000000000857A                 db    3
.eh_frame:000000000000857B                 db  8Dh
.eh_frame:000000000000857C                 db    2
.eh_frame:000000000000857D                 db    0
.eh_frame:000000000000857E                 db    0
.eh_frame:000000000000857F                 db    0
.eh_frame:0000000000008580                 db  1Ch
.eh_frame:0000000000008581                 db    0
.eh_frame:0000000000008582                 db    0
.eh_frame:0000000000008583                 db    0
.eh_frame:0000000000008584                 db  0Ch
.eh_frame:0000000000008585                 db    3
.eh_frame:0000000000008586                 db    0
.eh_frame:0000000000008587                 db    0
.eh_frame:0000000000008588                 db  78h ; x
.eh_frame:0000000000008589                 db 0A7h
.eh_frame:000000000000858A                 db 0FFh
.eh_frame:000000000000858B                 db 0FFh
.eh_frame:000000000000858C                 db  56h ; V
.eh_frame:000000000000858D                 db    0
.eh_frame:000000000000858E                 db    0
.eh_frame:000000000000858F                 db    0
.eh_frame:0000000000008590                 db    0
.eh_frame:0000000000008591                 db  44h ; D
.eh_frame:0000000000008592                 db  0Eh
.eh_frame:0000000000008593                 db  30h ; 0
.eh_frame:0000000000008594                 db    2
.eh_frame:0000000000008595                 db  4Ch ; L
.eh_frame:0000000000008596                 db  0Ah
.eh_frame:0000000000008597                 db  0Eh
.eh_frame:0000000000008598                 db    8
.eh_frame:0000000000008599                 db  41h ; A
.eh_frame:000000000000859A                 db  0Bh
.eh_frame:000000000000859B                 db    0
.eh_frame:000000000000859C                 db    0
.eh_frame:000000000000859D                 db    0
.eh_frame:000000000000859E                 db    0
.eh_frame:000000000000859F                 db    0
.eh_frame:00000000000085A0                 db  10h
.eh_frame:00000000000085A1                 db    0
.eh_frame:00000000000085A2                 db    0
.eh_frame:00000000000085A3                 db    0
.eh_frame:00000000000085A4                 db  2Ch ; ,
.eh_frame:00000000000085A5                 db    3
.eh_frame:00000000000085A6                 db    0
.eh_frame:00000000000085A7                 db    0
.eh_frame:00000000000085A8                 db 0B8h
.eh_frame:00000000000085A9                 db 0A7h
.eh_frame:00000000000085AA                 db 0FFh
.eh_frame:00000000000085AB                 db 0FFh
.eh_frame:00000000000085AC                 db  93h
.eh_frame:00000000000085AD                 db    0
.eh_frame:00000000000085AE                 db    0
.eh_frame:00000000000085AF                 db    0
.eh_frame:00000000000085B0                 db    0
.eh_frame:00000000000085B1                 db    0
.eh_frame:00000000000085B2                 db    0
.eh_frame:00000000000085B3                 db    0
.eh_frame:00000000000085B4                 db  10h
.eh_frame:00000000000085B5                 db    0
.eh_frame:00000000000085B6                 db    0
.eh_frame:00000000000085B7                 db    0
.eh_frame:00000000000085B8                 db  40h ; @
.eh_frame:00000000000085B9                 db    3
.eh_frame:00000000000085BA                 db    0
.eh_frame:00000000000085BB                 db    0
.eh_frame:00000000000085BC                 db  44h ; D
.eh_frame:00000000000085BD                 db 0A8h
.eh_frame:00000000000085BE                 db 0FFh
.eh_frame:00000000000085BF                 db 0FFh
.eh_frame:00000000000085C0                 db  10h
.eh_frame:00000000000085C1                 db    0
.eh_frame:00000000000085C2                 db    0
.eh_frame:00000000000085C3                 db    0
.eh_frame:00000000000085C4                 db    0
.eh_frame:00000000000085C5                 db    0
.eh_frame:00000000000085C6                 db    0
.eh_frame:00000000000085C7                 db    0
.eh_frame:00000000000085C8                 db  10h
.eh_frame:00000000000085C9                 db    0
.eh_frame:00000000000085CA                 db    0
.eh_frame:00000000000085CB                 db    0
.eh_frame:00000000000085CC                 db  54h ; T
.eh_frame:00000000000085CD                 db    3
.eh_frame:00000000000085CE                 db    0
.eh_frame:00000000000085CF                 db    0
.eh_frame:00000000000085D0                 db  40h ; @
.eh_frame:00000000000085D1                 db 0A8h
.eh_frame:00000000000085D2                 db 0FFh
.eh_frame:00000000000085D3                 db 0FFh
.eh_frame:00000000000085D4                 db    7
.eh_frame:00000000000085D5                 db    0
.eh_frame:00000000000085D6                 db    0
.eh_frame:00000000000085D7                 db    0
.eh_frame:00000000000085D8                 db    0
.eh_frame:00000000000085D9                 db    0
.eh_frame:00000000000085DA                 db    0
.eh_frame:00000000000085DB                 db    0
.eh_frame:00000000000085DC                 db  18h
.eh_frame:00000000000085DD                 db    0
.eh_frame:00000000000085DE                 db    0
.eh_frame:00000000000085DF                 db    0
.eh_frame:00000000000085E0                 db  68h ; h
.eh_frame:00000000000085E1                 db    3
.eh_frame:00000000000085E2                 db    0
.eh_frame:00000000000085E3                 db    0
.eh_frame:00000000000085E4                 db  3Ch ; <
.eh_frame:00000000000085E5                 db 0A8h
.eh_frame:00000000000085E6                 db 0FFh
.eh_frame:00000000000085E7                 db 0FFh
.eh_frame:00000000000085E8                 db  22h ; "
.eh_frame:00000000000085E9                 db    0
.eh_frame:00000000000085EA                 db    0
.eh_frame:00000000000085EB                 db    0
.eh_frame:00000000000085EC                 db    0
.eh_frame:00000000000085ED                 db  41h ; A
.eh_frame:00000000000085EE                 db  0Eh
.eh_frame:00000000000085EF                 db  10h
.eh_frame:00000000000085F0                 db  83h
.eh_frame:00000000000085F1                 db    2
.eh_frame:00000000000085F2                 db  5Bh ; [
.eh_frame:00000000000085F3                 db  0Ah
.eh_frame:00000000000085F4                 db  0Eh
.eh_frame:00000000000085F5                 db    8
.eh_frame:00000000000085F6                 db  41h ; A
.eh_frame:00000000000085F7                 db  0Bh
.eh_frame:00000000000085F8                 db  5Ch ; \
.eh_frame:00000000000085F9                 db    0
.eh_frame:00000000000085FA                 db    0
.eh_frame:00000000000085FB                 db    0
.eh_frame:00000000000085FC                 db  84h
.eh_frame:00000000000085FD                 db    3
.eh_frame:00000000000085FE                 db    0
.eh_frame:00000000000085FF                 db    0
.eh_frame:0000000000008600                 db  50h ; P
.eh_frame:0000000000008601                 db 0A8h
.eh_frame:0000000000008602                 db 0FFh
.eh_frame:0000000000008603                 db 0FFh
.eh_frame:0000000000008604                 db  1Eh
.eh_frame:0000000000008605                 db    1
.eh_frame:0000000000008606                 db    0
.eh_frame:0000000000008607                 db    0
.eh_frame:0000000000008608                 db    0
.eh_frame:0000000000008609                 db  42h ; B
.eh_frame:000000000000860A                 db  0Eh
.eh_frame:000000000000860B                 db  10h
.eh_frame:000000000000860C                 db  8Eh
.eh_frame:000000000000860D                 db    2
.eh_frame:000000000000860E                 db  42h ; B
.eh_frame:000000000000860F                 db  0Eh
.eh_frame:0000000000008610                 db  18h
.eh_frame:0000000000008611                 db  8Dh
.eh_frame:0000000000008612                 db    3
.eh_frame:0000000000008613                 db  45h ; E
.eh_frame:0000000000008614                 db  0Eh
.eh_frame:0000000000008615                 db  20h
.eh_frame:0000000000008616                 db  8Ch
.eh_frame:0000000000008617                 db    4
.eh_frame:0000000000008618                 db  41h ; A
.eh_frame:0000000000008619                 db  0Eh
.eh_frame:000000000000861A                 db  28h ; (
.eh_frame:000000000000861B                 db  86h
.eh_frame:000000000000861C                 db    5
.eh_frame:000000000000861D                 db  44h ; D
.eh_frame:000000000000861E                 db  0Eh
.eh_frame:000000000000861F                 db  30h ; 0
.eh_frame:0000000000008620                 db  83h
.eh_frame:0000000000008621                 db    6
.eh_frame:0000000000008622                 db    2
.eh_frame:0000000000008623                 db 0A1h
.eh_frame:0000000000008624                 db  0Ah
.eh_frame:0000000000008625                 db  0Eh
.eh_frame:0000000000008626                 db  28h ; (
.eh_frame:0000000000008627                 db  44h ; D
.eh_frame:0000000000008628                 db  0Eh
.eh_frame:0000000000008629                 db  20h
.eh_frame:000000000000862A                 db  42h ; B
.eh_frame:000000000000862B                 db  0Eh
.eh_frame:000000000000862C                 db  18h
.eh_frame:000000000000862D                 db  42h ; B
.eh_frame:000000000000862E                 db  0Eh
.eh_frame:000000000000862F                 db  10h
.eh_frame:0000000000008630                 db  42h ; B
.eh_frame:0000000000008631                 db  0Eh
.eh_frame:0000000000008632                 db    8
.eh_frame:0000000000008633                 db  47h ; G
.eh_frame:0000000000008634                 db  0Bh
.eh_frame:0000000000008635                 db  71h ; q
.eh_frame:0000000000008636                 db  0Ah
.eh_frame:0000000000008637                 db  0Eh
.eh_frame:0000000000008638                 db  28h ; (
.eh_frame:0000000000008639                 db  41h ; A
.eh_frame:000000000000863A                 db  0Eh
.eh_frame:000000000000863B                 db  20h
.eh_frame:000000000000863C                 db  42h ; B
.eh_frame:000000000000863D                 db  0Eh
.eh_frame:000000000000863E                 db  18h
.eh_frame:000000000000863F                 db  42h ; B
.eh_frame:0000000000008640                 db  0Eh
.eh_frame:0000000000008641                 db  10h
.eh_frame:0000000000008642                 db  42h ; B
.eh_frame:0000000000008643                 db  0Eh
.eh_frame:0000000000008644                 db    8
.eh_frame:0000000000008645                 db  48h ; H
.eh_frame:0000000000008646                 db  0Bh
.eh_frame:0000000000008647                 db  53h ; S
.eh_frame:0000000000008648                 db  0Eh
.eh_frame:0000000000008649                 db  28h ; (
.eh_frame:000000000000864A                 db  44h ; D
.eh_frame:000000000000864B                 db  0Eh
.eh_frame:000000000000864C                 db  20h
.eh_frame:000000000000864D                 db  42h ; B
.eh_frame:000000000000864E                 db  0Eh
.eh_frame:000000000000864F                 db  18h
.eh_frame:0000000000008650                 db  42h ; B
.eh_frame:0000000000008651                 db  0Eh
.eh_frame:0000000000008652                 db  10h
.eh_frame:0000000000008653                 db  42h ; B
.eh_frame:0000000000008654                 db  0Eh
.eh_frame:0000000000008655                 db    8
.eh_frame:0000000000008656                 db    0
.eh_frame:0000000000008657                 db    0
.eh_frame:0000000000008658                 db  10h
.eh_frame:0000000000008659                 db    0
.eh_frame:000000000000865A                 db    0
.eh_frame:000000000000865B                 db    0
.eh_frame:000000000000865C                 db 0E4h
.eh_frame:000000000000865D                 db    3
.eh_frame:000000000000865E                 db    0
.eh_frame:000000000000865F                 db    0
.eh_frame:0000000000008660                 db  10h
.eh_frame:0000000000008661                 db 0A9h
.eh_frame:0000000000008662                 db 0FFh
.eh_frame:0000000000008663                 db 0FFh
.eh_frame:0000000000008664                 db  77h ; w
.eh_frame:0000000000008665                 db    0
.eh_frame:0000000000008666                 db    0
.eh_frame:0000000000008667                 db    0
.eh_frame:0000000000008668                 db    0
.eh_frame:0000000000008669                 db    0
.eh_frame:000000000000866A                 db    0
.eh_frame:000000000000866B                 db    0
.eh_frame:000000000000866C                 db  5Ch ; \
.eh_frame:000000000000866D                 db    0
.eh_frame:000000000000866E                 db    0
.eh_frame:000000000000866F                 db    0
.eh_frame:0000000000008670                 db 0F8h
.eh_frame:0000000000008671                 db    3
.eh_frame:0000000000008672                 db    0
.eh_frame:0000000000008673                 db    0
.eh_frame:0000000000008674                 db  7Ch ; |
.eh_frame:0000000000008675                 db 0A9h
.eh_frame:0000000000008676                 db 0FFh
.eh_frame:0000000000008677                 db 0FFh
.eh_frame:0000000000008678                 db  40h ; @
.eh_frame:0000000000008679                 db    1
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db    0
.eh_frame:000000000000867D                 db  42h ; B
.eh_frame:000000000000867E                 db  0Eh
.eh_frame:000000000000867F                 db  10h
.eh_frame:0000000000008680                 db  8Fh
.eh_frame:0000000000008681                 db    2
.eh_frame:0000000000008682                 db  42h ; B
.eh_frame:0000000000008683                 db  0Eh
.eh_frame:0000000000008684                 db  18h
.eh_frame:0000000000008685                 db  8Eh
.eh_frame:0000000000008686                 db    3
.eh_frame:0000000000008687                 db  42h ; B
.eh_frame:0000000000008688                 db  0Eh
.eh_frame:0000000000008689                 db  20h
.eh_frame:000000000000868A                 db  8Dh
.eh_frame:000000000000868B                 db    4
.eh_frame:000000000000868C                 db  42h ; B
.eh_frame:000000000000868D                 db  0Eh
.eh_frame:000000000000868E                 db  28h ; (
.eh_frame:000000000000868F                 db  8Ch
.eh_frame:0000000000008690                 db    5
.eh_frame:0000000000008691                 db  41h ; A
.eh_frame:0000000000008692                 db  0Eh
.eh_frame:0000000000008693                 db  30h ; 0
.eh_frame:0000000000008694                 db  86h
.eh_frame:0000000000008695                 db    6
.eh_frame:0000000000008696                 db  41h ; A
.eh_frame:0000000000008697                 db  0Eh
.eh_frame:0000000000008698                 db  38h ; 8
.eh_frame:0000000000008699                 db  83h
.eh_frame:000000000000869A                 db    7
.eh_frame:000000000000869B                 db  44h ; D
.eh_frame:000000000000869C                 db  0Eh
.eh_frame:000000000000869D                 db  40h ; @
.eh_frame:000000000000869E                 db    2
.eh_frame:000000000000869F                 db 0EEh
.eh_frame:00000000000086A0                 db  0Ah
.eh_frame:00000000000086A1                 db  0Eh
.eh_frame:00000000000086A2                 db  38h ; 8
.eh_frame:00000000000086A3                 db  46h ; F
.eh_frame:00000000000086A4                 db  0Eh
.eh_frame:00000000000086A5                 db  30h ; 0
.eh_frame:00000000000086A6                 db  41h ; A
.eh_frame:00000000000086A7                 db  0Eh
.eh_frame:00000000000086A8                 db  28h ; (
.eh_frame:00000000000086A9                 db  42h ; B
.eh_frame:00000000000086AA                 db  0Eh
.eh_frame:00000000000086AB                 db  20h
.eh_frame:00000000000086AC                 db  42h ; B
.eh_frame:00000000000086AD                 db  0Eh
.eh_frame:00000000000086AE                 db  18h
.eh_frame:00000000000086AF                 db  42h ; B
.eh_frame:00000000000086B0                 db  0Eh
.eh_frame:00000000000086B1                 db  10h
.eh_frame:00000000000086B2                 db  42h ; B
.eh_frame:00000000000086B3                 db  0Eh
.eh_frame:00000000000086B4                 db    8
.eh_frame:00000000000086B5                 db  45h ; E
.eh_frame:00000000000086B6                 db  0Bh
.eh_frame:00000000000086B7                 db  63h ; c
.eh_frame:00000000000086B8                 db  0Eh
.eh_frame:00000000000086B9                 db  38h ; 8
.eh_frame:00000000000086BA                 db  43h ; C
.eh_frame:00000000000086BB                 db  0Eh
.eh_frame:00000000000086BC                 db  30h ; 0
.eh_frame:00000000000086BD                 db  41h ; A
.eh_frame:00000000000086BE                 db  0Eh
.eh_frame:00000000000086BF                 db  28h ; (
.eh_frame:00000000000086C0                 db  42h ; B
.eh_frame:00000000000086C1                 db  0Eh
.eh_frame:00000000000086C2                 db  20h
.eh_frame:00000000000086C3                 db  42h ; B
.eh_frame:00000000000086C4                 db  0Eh
.eh_frame:00000000000086C5                 db  18h
.eh_frame:00000000000086C6                 db  42h ; B
.eh_frame:00000000000086C7                 db  0Eh
.eh_frame:00000000000086C8                 db  10h
.eh_frame:00000000000086C9                 db  42h ; B
.eh_frame:00000000000086CA                 db  0Eh
.eh_frame:00000000000086CB                 db    8
.eh_frame:00000000000086CC                 db  10h
.eh_frame:00000000000086CD                 db    0
.eh_frame:00000000000086CE                 db    0
.eh_frame:00000000000086CF                 db    0
.eh_frame:00000000000086D0                 db  58h ; X
.eh_frame:00000000000086D1                 db    4
.eh_frame:00000000000086D2                 db    0
.eh_frame:00000000000086D3                 db    0
.eh_frame:00000000000086D4                 db  5Ch ; \
.eh_frame:00000000000086D5                 db 0AAh
.eh_frame:00000000000086D6                 db 0FFh
.eh_frame:00000000000086D7                 db 0FFh
.eh_frame:00000000000086D8                 db    5
.eh_frame:00000000000086D9                 db    0
.eh_frame:00000000000086DA                 db    0
.eh_frame:00000000000086DB                 db    0
.eh_frame:00000000000086DC                 db    0
.eh_frame:00000000000086DD                 db    0
.eh_frame:00000000000086DE                 db    0
.eh_frame:00000000000086DF                 db    0
.eh_frame:00000000000086E0                 db  10h
.eh_frame:00000000000086E1                 db    0
.eh_frame:00000000000086E2                 db    0
.eh_frame:00000000000086E3                 db    0
.eh_frame:00000000000086E4                 db  6Ch ; l
.eh_frame:00000000000086E5                 db    4
.eh_frame:00000000000086E6                 db    0
.eh_frame:00000000000086E7                 db    0
.eh_frame:00000000000086E8                 db  58h ; X
.eh_frame:00000000000086E9                 db 0AAh
.eh_frame:00000000000086EA                 db 0FFh
.eh_frame:00000000000086EB                 db 0FFh
.eh_frame:00000000000086EC                 db    5
.eh_frame:00000000000086ED                 db    0
.eh_frame:00000000000086EE                 db    0
.eh_frame:00000000000086EF                 db    0
.eh_frame:00000000000086F0                 db    0
.eh_frame:00000000000086F1                 db    0
.eh_frame:00000000000086F2                 db    0
.eh_frame:00000000000086F3                 db    0
.eh_frame:00000000000086F4                 db  10h
.eh_frame:00000000000086F5                 db    0
.eh_frame:00000000000086F6                 db    0
.eh_frame:00000000000086F7                 db    0
.eh_frame:00000000000086F8                 db  80h
.eh_frame:00000000000086F9                 db    4
.eh_frame:00000000000086FA                 db    0
.eh_frame:00000000000086FB                 db    0
.eh_frame:00000000000086FC                 db  54h ; T
.eh_frame:00000000000086FD                 db 0AAh
.eh_frame:00000000000086FE                 db 0FFh
.eh_frame:00000000000086FF                 db 0FFh
.eh_frame:0000000000008700                 db    5
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db    0
.eh_frame:0000000000008705                 db    0
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  10h
.eh_frame:0000000000008709                 db    0
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db  94h
.eh_frame:000000000000870D                 db    4
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db  50h ; P
.eh_frame:0000000000008711                 db 0AAh
.eh_frame:0000000000008712                 db 0FFh
.eh_frame:0000000000008713                 db 0FFh
.eh_frame:0000000000008714                 db  49h ; I
.eh_frame:0000000000008715                 db    0
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db    0
.eh_frame:0000000000008719                 db    0
.eh_frame:000000000000871A                 db    0
.eh_frame:000000000000871B                 db    0
.eh_frame:000000000000871C                 db  10h
.eh_frame:000000000000871D                 db    0
.eh_frame:000000000000871E                 db    0
.eh_frame:000000000000871F                 db    0
.eh_frame:0000000000008720                 db 0A8h
.eh_frame:0000000000008721                 db    4
.eh_frame:0000000000008722                 db    0
.eh_frame:0000000000008723                 db    0
.eh_frame:0000000000008724                 db  8Ch
.eh_frame:0000000000008725                 db 0AAh
.eh_frame:0000000000008726                 db 0FFh
.eh_frame:0000000000008727                 db 0FFh
.eh_frame:0000000000008728                 db  58h ; X
.eh_frame:0000000000008729                 db    0
.eh_frame:000000000000872A                 db    0
.eh_frame:000000000000872B                 db    0
.eh_frame:000000000000872C                 db    0
.eh_frame:000000000000872D                 db    0
.eh_frame:000000000000872E                 db    0
.eh_frame:000000000000872F                 db    0
.eh_frame:0000000000008730                 db  38h ; 8
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db 0BCh
.eh_frame:0000000000008735                 db    4
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db 0D8h
.eh_frame:0000000000008739                 db 0AAh
.eh_frame:000000000000873A                 db 0FFh
.eh_frame:000000000000873B                 db 0FFh
.eh_frame:000000000000873C                 db  47h ; G
.eh_frame:000000000000873D                 db    1
.eh_frame:000000000000873E                 db    0
.eh_frame:000000000000873F                 db    0
.eh_frame:0000000000008740                 db    0
.eh_frame:0000000000008741                 db  42h ; B
.eh_frame:0000000000008742                 db  0Eh
.eh_frame:0000000000008743                 db  10h
.eh_frame:0000000000008744                 db  8Dh
.eh_frame:0000000000008745                 db    2
.eh_frame:0000000000008746                 db  42h ; B
.eh_frame:0000000000008747                 db  0Eh
.eh_frame:0000000000008748                 db  18h
.eh_frame:0000000000008749                 db  8Ch
.eh_frame:000000000000874A                 db    3
.eh_frame:000000000000874B                 db  44h ; D
.eh_frame:000000000000874C                 db  0Eh
.eh_frame:000000000000874D                 db  20h
.eh_frame:000000000000874E                 db  86h
.eh_frame:000000000000874F                 db    4
.eh_frame:0000000000008750                 db  41h ; A
.eh_frame:0000000000008751                 db  0Eh
.eh_frame:0000000000008752                 db  28h ; (
.eh_frame:0000000000008753                 db  83h
.eh_frame:0000000000008754                 db    5
.eh_frame:0000000000008755                 db  46h ; F
.eh_frame:0000000000008756                 db  0Eh
.eh_frame:0000000000008757                 db  30h ; 0
.eh_frame:0000000000008758                 db    2
.eh_frame:0000000000008759                 db 0CDh
.eh_frame:000000000000875A                 db  0Ah
.eh_frame:000000000000875B                 db  0Eh
.eh_frame:000000000000875C                 db  28h ; (
.eh_frame:000000000000875D                 db  47h ; G
.eh_frame:000000000000875E                 db  0Eh
.eh_frame:000000000000875F                 db  20h
.eh_frame:0000000000008760                 db  41h ; A
.eh_frame:0000000000008761                 db  0Eh
.eh_frame:0000000000008762                 db  18h
.eh_frame:0000000000008763                 db  42h ; B
.eh_frame:0000000000008764                 db  0Eh
.eh_frame:0000000000008765                 db  10h
.eh_frame:0000000000008766                 db  42h ; B
.eh_frame:0000000000008767                 db  0Eh
.eh_frame:0000000000008768                 db    8
.eh_frame:0000000000008769                 db  58h ; X
.eh_frame:000000000000876A                 db  0Bh
.eh_frame:000000000000876B                 db    0
.eh_frame:000000000000876C                 db  34h ; 4
.eh_frame:000000000000876D                 db    0
.eh_frame:000000000000876E                 db    0
.eh_frame:000000000000876F                 db    0
.eh_frame:0000000000008770                 db 0F8h
.eh_frame:0000000000008771                 db    4
.eh_frame:0000000000008772                 db    0
.eh_frame:0000000000008773                 db    0
.eh_frame:0000000000008774                 db 0ECh
.eh_frame:0000000000008775                 db 0ABh
.eh_frame:0000000000008776                 db 0FFh
.eh_frame:0000000000008777                 db 0FFh
.eh_frame:0000000000008778                 db  5Bh ; [
.eh_frame:0000000000008779                 db    0
.eh_frame:000000000000877A                 db    0
.eh_frame:000000000000877B                 db    0
.eh_frame:000000000000877C                 db    0
.eh_frame:000000000000877D                 db  42h ; B
.eh_frame:000000000000877E                 db  0Eh
.eh_frame:000000000000877F                 db  10h
.eh_frame:0000000000008780                 db  8Ch
.eh_frame:0000000000008781                 db    2
.eh_frame:0000000000008782                 db  41h ; A
.eh_frame:0000000000008783                 db  0Eh
.eh_frame:0000000000008784                 db  18h
.eh_frame:0000000000008785                 db  86h
.eh_frame:0000000000008786                 db    3
.eh_frame:0000000000008787                 db  44h ; D
.eh_frame:0000000000008788                 db  0Eh
.eh_frame:0000000000008789                 db  20h
.eh_frame:000000000000878A                 db  83h
.eh_frame:000000000000878B                 db    4
.eh_frame:000000000000878C                 db  79h ; y
.eh_frame:000000000000878D                 db  0Ah
.eh_frame:000000000000878E                 db  0Eh
.eh_frame:000000000000878F                 db  18h
.eh_frame:0000000000008790                 db  44h ; D
.eh_frame:0000000000008791                 db  0Eh
.eh_frame:0000000000008792                 db  10h
.eh_frame:0000000000008793                 db  42h ; B
.eh_frame:0000000000008794                 db  0Eh
.eh_frame:0000000000008795                 db    8
.eh_frame:0000000000008796                 db  4Ah ; J
.eh_frame:0000000000008797                 db  0Bh
.eh_frame:0000000000008798                 db  44h ; D
.eh_frame:0000000000008799                 db  0Eh
.eh_frame:000000000000879A                 db  18h
.eh_frame:000000000000879B                 db  41h ; A
.eh_frame:000000000000879C                 db  0Eh
.eh_frame:000000000000879D                 db  10h
.eh_frame:000000000000879E                 db  45h ; E
.eh_frame:000000000000879F                 db  0Eh
.eh_frame:00000000000087A0                 db    8
.eh_frame:00000000000087A1                 db    0
.eh_frame:00000000000087A2                 db    0
.eh_frame:00000000000087A3                 db    0
.eh_frame:00000000000087A4                 db  10h
.eh_frame:00000000000087A5                 db    0
.eh_frame:00000000000087A6                 db    0
.eh_frame:00000000000087A7                 db    0
.eh_frame:00000000000087A8                 db  30h ; 0
.eh_frame:00000000000087A9                 db    5
.eh_frame:00000000000087AA                 db    0
.eh_frame:00000000000087AB                 db    0
.eh_frame:00000000000087AC                 db  14h
.eh_frame:00000000000087AD                 db 0ACh
.eh_frame:00000000000087AE                 db 0FFh
.eh_frame:00000000000087AF                 db 0FFh
.eh_frame:00000000000087B0                 db  41h ; A
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db    0
.eh_frame:00000000000087B5                 db  7Ch ; |
.eh_frame:00000000000087B6                 db  0Eh
.eh_frame:00000000000087B7                 db  10h
.eh_frame:00000000000087B8                 db  30h ; 0
.eh_frame:00000000000087B9                 db    0
.eh_frame:00000000000087BA                 db    0
.eh_frame:00000000000087BB                 db    0
.eh_frame:00000000000087BC                 db  44h ; D
.eh_frame:00000000000087BD                 db    5
.eh_frame:00000000000087BE                 db    0
.eh_frame:00000000000087BF                 db    0
.eh_frame:00000000000087C0                 db  50h ; P
.eh_frame:00000000000087C1                 db 0ACh
.eh_frame:00000000000087C2                 db 0FFh
.eh_frame:00000000000087C3                 db 0FFh
.eh_frame:00000000000087C4                 db  72h ; r
.eh_frame:00000000000087C5                 db    0
.eh_frame:00000000000087C6                 db    0
.eh_frame:00000000000087C7                 db    0
.eh_frame:00000000000087C8                 db    0
.eh_frame:00000000000087C9                 db  41h ; A
.eh_frame:00000000000087CA                 db  0Eh
.eh_frame:00000000000087CB                 db  10h
.eh_frame:00000000000087CC                 db  86h
.eh_frame:00000000000087CD                 db    2
.eh_frame:00000000000087CE                 db  41h ; A
.eh_frame:00000000000087CF                 db  0Eh
.eh_frame:00000000000087D0                 db  18h
.eh_frame:00000000000087D1                 db  83h
.eh_frame:00000000000087D2                 db    3
.eh_frame:00000000000087D3                 db  4Ah ; J
.eh_frame:00000000000087D4                 db  0Eh
.eh_frame:00000000000087D5                 db  20h
.eh_frame:00000000000087D6                 db    2
.eh_frame:00000000000087D7                 db  53h ; S
.eh_frame:00000000000087D8                 db  0Ah
.eh_frame:00000000000087D9                 db  0Eh
.eh_frame:00000000000087DA                 db  18h
.eh_frame:00000000000087DB                 db  41h ; A
.eh_frame:00000000000087DC                 db  0Eh
.eh_frame:00000000000087DD                 db  10h
.eh_frame:00000000000087DE                 db  41h ; A
.eh_frame:00000000000087DF                 db  0Eh
.eh_frame:00000000000087E0                 db    8
.eh_frame:00000000000087E1                 db  47h ; G
.eh_frame:00000000000087E2                 db  0Bh
.eh_frame:00000000000087E3                 db  47h ; G
.eh_frame:00000000000087E4                 db  0Eh
.eh_frame:00000000000087E5                 db  18h
.eh_frame:00000000000087E6                 db  41h ; A
.eh_frame:00000000000087E7                 db  0Eh
.eh_frame:00000000000087E8                 db  10h
.eh_frame:00000000000087E9                 db  41h ; A
.eh_frame:00000000000087EA                 db  0Eh
.eh_frame:00000000000087EB                 db    8
.eh_frame:00000000000087EC                 db  10h
.eh_frame:00000000000087ED                 db    0
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db  78h ; x
.eh_frame:00000000000087F1                 db    5
.eh_frame:00000000000087F2                 db    0
.eh_frame:00000000000087F3                 db    0
.eh_frame:00000000000087F4                 db  9Ch
.eh_frame:00000000000087F5                 db 0ACh
.eh_frame:00000000000087F6                 db 0FFh
.eh_frame:00000000000087F7                 db 0FFh
.eh_frame:00000000000087F8                 db  65h ; e
.eh_frame:00000000000087F9                 db    0
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db    0
.eh_frame:00000000000087FD                 db    0
.eh_frame:00000000000087FE                 db    0
.eh_frame:00000000000087FF                 db    0
.eh_frame:0000000000008800                 db  48h ; H
.eh_frame:0000000000008801                 db    0
.eh_frame:0000000000008802                 db    0
.eh_frame:0000000000008803                 db    0
.eh_frame:0000000000008804                 db  8Ch
.eh_frame:0000000000008805                 db    5
.eh_frame:0000000000008806                 db    0
.eh_frame:0000000000008807                 db    0
.eh_frame:0000000000008808                 db 0F8h
.eh_frame:0000000000008809                 db 0ACh
.eh_frame:000000000000880A                 db 0FFh
.eh_frame:000000000000880B                 db 0FFh
.eh_frame:000000000000880C                 db  6Ah ; j
.eh_frame:000000000000880D                 db    0
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db    0
.eh_frame:0000000000008811                 db  42h ; B
.eh_frame:0000000000008812                 db  0Eh
.eh_frame:0000000000008813                 db  10h
.eh_frame:0000000000008814                 db  8Fh
.eh_frame:0000000000008815                 db    2
.eh_frame:0000000000008816                 db  42h ; B
.eh_frame:0000000000008817                 db  0Eh
.eh_frame:0000000000008818                 db  18h
.eh_frame:0000000000008819                 db  8Eh
.eh_frame:000000000000881A                 db    3
.eh_frame:000000000000881B                 db  42h ; B
.eh_frame:000000000000881C                 db  0Eh
.eh_frame:000000000000881D                 db  20h
.eh_frame:000000000000881E                 db  8Dh
.eh_frame:000000000000881F                 db    4
.eh_frame:0000000000008820                 db  42h ; B
.eh_frame:0000000000008821                 db  0Eh
.eh_frame:0000000000008822                 db  28h ; (
.eh_frame:0000000000008823                 db  8Ch
.eh_frame:0000000000008824                 db    5
.eh_frame:0000000000008825                 db  41h ; A
.eh_frame:0000000000008826                 db  0Eh
.eh_frame:0000000000008827                 db  30h ; 0
.eh_frame:0000000000008828                 db  86h
.eh_frame:0000000000008829                 db    6
.eh_frame:000000000000882A                 db  41h ; A
.eh_frame:000000000000882B                 db  0Eh
.eh_frame:000000000000882C                 db  38h ; 8
.eh_frame:000000000000882D                 db  83h
.eh_frame:000000000000882E                 db    7
.eh_frame:000000000000882F                 db  44h ; D
.eh_frame:0000000000008830                 db  0Eh
.eh_frame:0000000000008831                 db  40h ; @
.eh_frame:0000000000008832                 db    2
.eh_frame:0000000000008833                 db  4Ah ; J
.eh_frame:0000000000008834                 db  0Ah
.eh_frame:0000000000008835                 db  0Eh
.eh_frame:0000000000008836                 db  38h ; 8
.eh_frame:0000000000008837                 db  44h ; D
.eh_frame:0000000000008838                 db  0Eh
.eh_frame:0000000000008839                 db  30h ; 0
.eh_frame:000000000000883A                 db  41h ; A
.eh_frame:000000000000883B                 db  0Eh
.eh_frame:000000000000883C                 db  28h ; (
.eh_frame:000000000000883D                 db  42h ; B
.eh_frame:000000000000883E                 db  0Eh
.eh_frame:000000000000883F                 db  20h
.eh_frame:0000000000008840                 db  42h ; B
.eh_frame:0000000000008841                 db  0Eh
.eh_frame:0000000000008842                 db  18h
.eh_frame:0000000000008843                 db  42h ; B
.eh_frame:0000000000008844                 db  0Eh
.eh_frame:0000000000008845                 db  10h
.eh_frame:0000000000008846                 db  42h ; B
.eh_frame:0000000000008847                 db  0Eh
.eh_frame:0000000000008848                 db    8
.eh_frame:0000000000008849                 db  41h ; A
.eh_frame:000000000000884A                 db  0Bh
.eh_frame:000000000000884B                 db    0
.eh_frame:000000000000884C                 db  10h
.eh_frame:000000000000884D                 db    0
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db 0D8h
.eh_frame:0000000000008851                 db    5
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db  1Ch
.eh_frame:0000000000008855                 db 0ADh
.eh_frame:0000000000008856                 db 0FFh
.eh_frame:0000000000008857                 db 0FFh
.eh_frame:0000000000008858                 db  31h ; 1
.eh_frame:0000000000008859                 db    0
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db    0
.eh_frame:000000000000885D                 db    0
.eh_frame:000000000000885E                 db    0
.eh_frame:000000000000885F                 db    0
.eh_frame:0000000000008860                 db  10h
.eh_frame:0000000000008861                 db    0
.eh_frame:0000000000008862                 db    0
.eh_frame:0000000000008863                 db    0
.eh_frame:0000000000008864                 db 0ECh
.eh_frame:0000000000008865                 db    5
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db  48h ; H
.eh_frame:0000000000008869                 db 0ADh
.eh_frame:000000000000886A                 db 0FFh
.eh_frame:000000000000886B                 db 0FFh
.eh_frame:000000000000886C                 db  20h
.eh_frame:000000000000886D                 db    0
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db    0
.eh_frame:0000000000008871                 db    0
.eh_frame:0000000000008872                 db    0
.eh_frame:0000000000008873                 db    0
.eh_frame:0000000000008874                 db  48h ; H
.eh_frame:0000000000008875                 db    0
.eh_frame:0000000000008876                 db    0
.eh_frame:0000000000008877                 db    0
.eh_frame:0000000000008878                 db    0
.eh_frame:0000000000008879                 db    6
.eh_frame:000000000000887A                 db    0
.eh_frame:000000000000887B                 db    0
.eh_frame:000000000000887C                 db  54h ; T
.eh_frame:000000000000887D                 db 0ADh
.eh_frame:000000000000887E                 db 0FFh
.eh_frame:000000000000887F                 db 0FFh
.eh_frame:0000000000008880                 db 0B4h
.eh_frame:0000000000008881                 db    1
.eh_frame:0000000000008882                 db    0
.eh_frame:0000000000008883                 db    0
.eh_frame:0000000000008884                 db    0
.eh_frame:0000000000008885                 db  42h ; B
.eh_frame:0000000000008886                 db  0Eh
.eh_frame:0000000000008887                 db  10h
.eh_frame:0000000000008888                 db  8Fh
.eh_frame:0000000000008889                 db    2
.eh_frame:000000000000888A                 db  42h ; B
.eh_frame:000000000000888B                 db  0Eh
.eh_frame:000000000000888C                 db  18h
.eh_frame:000000000000888D                 db  8Eh
.eh_frame:000000000000888E                 db    3
.eh_frame:000000000000888F                 db  49h ; I
.eh_frame:0000000000008890                 db  0Eh
.eh_frame:0000000000008891                 db  20h
.eh_frame:0000000000008892                 db  8Dh
.eh_frame:0000000000008893                 db    4
.eh_frame:0000000000008894                 db  42h ; B
.eh_frame:0000000000008895                 db  0Eh
.eh_frame:0000000000008896                 db  28h ; (
.eh_frame:0000000000008897                 db  8Ch
.eh_frame:0000000000008898                 db    5
.eh_frame:0000000000008899                 db  44h ; D
.eh_frame:000000000000889A                 db  0Eh
.eh_frame:000000000000889B                 db  30h ; 0
.eh_frame:000000000000889C                 db  86h
.eh_frame:000000000000889D                 db    6
.eh_frame:000000000000889E                 db  41h ; A
.eh_frame:000000000000889F                 db  0Eh
.eh_frame:00000000000088A0                 db  38h ; 8
.eh_frame:00000000000088A1                 db  83h
.eh_frame:00000000000088A2                 db    7
.eh_frame:00000000000088A3                 db  52h ; R
.eh_frame:00000000000088A4                 db  0Eh
.eh_frame:00000000000088A5                 db  40h ; @
.eh_frame:00000000000088A6                 db    2
.eh_frame:00000000000088A7                 db 0D8h
.eh_frame:00000000000088A8                 db  0Ah
.eh_frame:00000000000088A9                 db  0Eh
.eh_frame:00000000000088AA                 db  38h ; 8
.eh_frame:00000000000088AB                 db  44h ; D
.eh_frame:00000000000088AC                 db  0Eh
.eh_frame:00000000000088AD                 db  30h ; 0
.eh_frame:00000000000088AE                 db  41h ; A
.eh_frame:00000000000088AF                 db  0Eh
.eh_frame:00000000000088B0                 db  28h ; (
.eh_frame:00000000000088B1                 db  42h ; B
.eh_frame:00000000000088B2                 db  0Eh
.eh_frame:00000000000088B3                 db  20h
.eh_frame:00000000000088B4                 db  42h ; B
.eh_frame:00000000000088B5                 db  0Eh
.eh_frame:00000000000088B6                 db  18h
.eh_frame:00000000000088B7                 db  42h ; B
.eh_frame:00000000000088B8                 db  0Eh
.eh_frame:00000000000088B9                 db  10h
.eh_frame:00000000000088BA                 db  42h ; B
.eh_frame:00000000000088BB                 db  0Eh
.eh_frame:00000000000088BC                 db    8
.eh_frame:00000000000088BD                 db  45h ; E
.eh_frame:00000000000088BE                 db  0Bh
.eh_frame:00000000000088BF                 db    0
.eh_frame:00000000000088C0                 db  28h ; (
.eh_frame:00000000000088C1                 db    0
.eh_frame:00000000000088C2                 db    0
.eh_frame:00000000000088C3                 db    0
.eh_frame:00000000000088C4                 db  4Ch ; L
.eh_frame:00000000000088C5                 db    6
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db 0C8h
.eh_frame:00000000000088C9                 db 0AEh
.eh_frame:00000000000088CA                 db 0FFh
.eh_frame:00000000000088CB                 db 0FFh
.eh_frame:00000000000088CC                 db  90h
.eh_frame:00000000000088CD                 db    0
.eh_frame:00000000000088CE                 db    0
.eh_frame:00000000000088CF                 db    0
.eh_frame:00000000000088D0                 db    0
.eh_frame:00000000000088D1                 db  42h ; B
.eh_frame:00000000000088D2                 db  0Eh
.eh_frame:00000000000088D3                 db  10h
.eh_frame:00000000000088D4                 db  8Ch
.eh_frame:00000000000088D5                 db    2
.eh_frame:00000000000088D6                 db  41h ; A
.eh_frame:00000000000088D7                 db  0Eh
.eh_frame:00000000000088D8                 db  18h
.eh_frame:00000000000088D9                 db  86h
.eh_frame:00000000000088DA                 db    3
.eh_frame:00000000000088DB                 db  44h ; D
.eh_frame:00000000000088DC                 db  0Eh
.eh_frame:00000000000088DD                 db  20h
.eh_frame:00000000000088DE                 db  83h
.eh_frame:00000000000088DF                 db    4
.eh_frame:00000000000088E0                 db    2
.eh_frame:00000000000088E1                 db  85h
.eh_frame:00000000000088E2                 db  0Eh
.eh_frame:00000000000088E3                 db  18h
.eh_frame:00000000000088E4                 db  41h ; A
.eh_frame:00000000000088E5                 db  0Eh
.eh_frame:00000000000088E6                 db  10h
.eh_frame:00000000000088E7                 db  42h ; B
.eh_frame:00000000000088E8                 db  0Eh
.eh_frame:00000000000088E9                 db    8
.eh_frame:00000000000088EA                 db    0
.eh_frame:00000000000088EB                 db    0
.eh_frame:00000000000088EC                 db  28h ; (
.eh_frame:00000000000088ED                 db    0
.eh_frame:00000000000088EE                 db    0
.eh_frame:00000000000088EF                 db    0
.eh_frame:00000000000088F0                 db  78h ; x
.eh_frame:00000000000088F1                 db    6
.eh_frame:00000000000088F2                 db    0
.eh_frame:00000000000088F3                 db    0
.eh_frame:00000000000088F4                 db  2Ch ; ,
.eh_frame:00000000000088F5                 db 0AFh
.eh_frame:00000000000088F6                 db 0FFh
.eh_frame:00000000000088F7                 db 0FFh
.eh_frame:00000000000088F8                 db 0D6h
.eh_frame:00000000000088F9                 db    0
.eh_frame:00000000000088FA                 db    0
.eh_frame:00000000000088FB                 db    0
.eh_frame:00000000000088FC                 db    0
.eh_frame:00000000000088FD                 db  42h ; B
.eh_frame:00000000000088FE                 db  0Eh
.eh_frame:00000000000088FF                 db  10h
.eh_frame:0000000000008900                 db  8Ch
.eh_frame:0000000000008901                 db    2
.eh_frame:0000000000008902                 db  41h ; A
.eh_frame:0000000000008903                 db  0Eh
.eh_frame:0000000000008904                 db  18h
.eh_frame:0000000000008905                 db  86h
.eh_frame:0000000000008906                 db    3
.eh_frame:0000000000008907                 db  44h ; D
.eh_frame:0000000000008908                 db  0Eh
.eh_frame:0000000000008909                 db  20h
.eh_frame:000000000000890A                 db  83h
.eh_frame:000000000000890B                 db    4
.eh_frame:000000000000890C                 db    2
.eh_frame:000000000000890D                 db 0C4h
.eh_frame:000000000000890E                 db  0Eh
.eh_frame:000000000000890F                 db  18h
.eh_frame:0000000000008910                 db  44h ; D
.eh_frame:0000000000008911                 db  0Eh
.eh_frame:0000000000008912                 db  10h
.eh_frame:0000000000008913                 db  42h ; B
.eh_frame:0000000000008914                 db  0Eh
.eh_frame:0000000000008915                 db    8
.eh_frame:0000000000008916                 db    0
.eh_frame:0000000000008917                 db    0
.eh_frame:0000000000008918                 db  34h ; 4
.eh_frame:0000000000008919                 db    0
.eh_frame:000000000000891A                 db    0
.eh_frame:000000000000891B                 db    0
.eh_frame:000000000000891C                 db 0A4h
.eh_frame:000000000000891D                 db    6
.eh_frame:000000000000891E                 db    0
.eh_frame:000000000000891F                 db    0
.eh_frame:0000000000008920                 db 0E0h
.eh_frame:0000000000008921                 db 0AFh
.eh_frame:0000000000008922                 db 0FFh
.eh_frame:0000000000008923                 db 0FFh
.eh_frame:0000000000008924                 db  3Eh ; >
.eh_frame:0000000000008925                 db    2
.eh_frame:0000000000008926                 db    0
.eh_frame:0000000000008927                 db    0
.eh_frame:0000000000008928                 db    0
.eh_frame:0000000000008929                 db  42h ; B
.eh_frame:000000000000892A                 db  0Eh
.eh_frame:000000000000892B                 db  10h
.eh_frame:000000000000892C                 db  8Ch
.eh_frame:000000000000892D                 db    2
.eh_frame:000000000000892E                 db  41h ; A
.eh_frame:000000000000892F                 db  0Eh
.eh_frame:0000000000008930                 db  18h
.eh_frame:0000000000008931                 db  86h
.eh_frame:0000000000008932                 db    3
.eh_frame:0000000000008933                 db  44h ; D
.eh_frame:0000000000008934                 db  0Eh
.eh_frame:0000000000008935                 db  20h
.eh_frame:0000000000008936                 db  83h
.eh_frame:0000000000008937                 db    4
.eh_frame:0000000000008938                 db  44h ; D
.eh_frame:0000000000008939                 db  0Eh
.eh_frame:000000000000893A                 db  80h
.eh_frame:000000000000893B                 db    1
.eh_frame:000000000000893C                 db    3
.eh_frame:000000000000893D                 db  91h
.eh_frame:000000000000893E                 db    1
.eh_frame:000000000000893F                 db  0Ah
.eh_frame:0000000000008940                 db  0Eh
.eh_frame:0000000000008941                 db  20h
.eh_frame:0000000000008942                 db  41h ; A
.eh_frame:0000000000008943                 db  0Eh
.eh_frame:0000000000008944                 db  18h
.eh_frame:0000000000008945                 db  41h ; A
.eh_frame:0000000000008946                 db  0Eh
.eh_frame:0000000000008947                 db  10h
.eh_frame:0000000000008948                 db  42h ; B
.eh_frame:0000000000008949                 db  0Eh
.eh_frame:000000000000894A                 db    8
.eh_frame:000000000000894B                 db  48h ; H
.eh_frame:000000000000894C                 db  0Bh
.eh_frame:000000000000894D                 db    0
.eh_frame:000000000000894E                 db    0
.eh_frame:000000000000894F                 db    0
.eh_frame:0000000000008950                 db  38h ; 8
.eh_frame:0000000000008951                 db    0
.eh_frame:0000000000008952                 db    0
.eh_frame:0000000000008953                 db    0
.eh_frame:0000000000008954                 db 0DCh
.eh_frame:0000000000008955                 db    6
.eh_frame:0000000000008956                 db    0
.eh_frame:0000000000008957                 db    0
.eh_frame:0000000000008958                 db 0E8h
.eh_frame:0000000000008959                 db 0B1h
.eh_frame:000000000000895A                 db 0FFh
.eh_frame:000000000000895B                 db 0FFh
.eh_frame:000000000000895C                 db  84h
.eh_frame:000000000000895D                 db    2
.eh_frame:000000000000895E                 db    0
.eh_frame:000000000000895F                 db    0
.eh_frame:0000000000008960                 db    0
.eh_frame:0000000000008961                 db  42h ; B
.eh_frame:0000000000008962                 db  0Eh
.eh_frame:0000000000008963                 db  10h
.eh_frame:0000000000008964                 db  8Dh
.eh_frame:0000000000008965                 db    2
.eh_frame:0000000000008966                 db  42h ; B
.eh_frame:0000000000008967                 db  0Eh
.eh_frame:0000000000008968                 db  18h
.eh_frame:0000000000008969                 db  8Ch
.eh_frame:000000000000896A                 db    3
.eh_frame:000000000000896B                 db  41h ; A
.eh_frame:000000000000896C                 db  0Eh
.eh_frame:000000000000896D                 db  20h
.eh_frame:000000000000896E                 db  86h
.eh_frame:000000000000896F                 db    4
.eh_frame:0000000000008970                 db  41h ; A
.eh_frame:0000000000008971                 db  0Eh
.eh_frame:0000000000008972                 db  28h ; (
.eh_frame:0000000000008973                 db  83h
.eh_frame:0000000000008974                 db    5
.eh_frame:0000000000008975                 db  44h ; D
.eh_frame:0000000000008976                 db  0Eh
.eh_frame:0000000000008977                 db  40h ; @
.eh_frame:0000000000008978                 db    2
.eh_frame:0000000000008979                 db  5Ah ; Z
.eh_frame:000000000000897A                 db  0Ah
.eh_frame:000000000000897B                 db  0Eh
.eh_frame:000000000000897C                 db  28h ; (
.eh_frame:000000000000897D                 db  41h ; A
.eh_frame:000000000000897E                 db  0Eh
.eh_frame:000000000000897F                 db  20h
.eh_frame:0000000000008980                 db  41h ; A
.eh_frame:0000000000008981                 db  0Eh
.eh_frame:0000000000008982                 db  18h
.eh_frame:0000000000008983                 db  42h ; B
.eh_frame:0000000000008984                 db  0Eh
.eh_frame:0000000000008985                 db  10h
.eh_frame:0000000000008986                 db  42h ; B
.eh_frame:0000000000008987                 db  0Eh
.eh_frame:0000000000008988                 db    8
.eh_frame:0000000000008989                 db  46h ; F
.eh_frame:000000000000898A                 db  0Bh
.eh_frame:000000000000898B                 db    0
.eh_frame:000000000000898C                 db  20h
.eh_frame:000000000000898D                 db    0
.eh_frame:000000000000898E                 db    0
.eh_frame:000000000000898F                 db    0
.eh_frame:0000000000008990                 db  18h
.eh_frame:0000000000008991                 db    7
.eh_frame:0000000000008992                 db    0
.eh_frame:0000000000008993                 db    0
.eh_frame:0000000000008994                 db  3Ch ; <
.eh_frame:0000000000008995                 db 0B4h
.eh_frame:0000000000008996                 db 0FFh
.eh_frame:0000000000008997                 db 0FFh
.eh_frame:0000000000008998                 db  59h ; Y
.eh_frame:0000000000008999                 db    0
.eh_frame:000000000000899A                 db    0
.eh_frame:000000000000899B                 db    0
.eh_frame:000000000000899C                 db    0
.eh_frame:000000000000899D                 db  41h ; A
.eh_frame:000000000000899E                 db  0Eh
.eh_frame:000000000000899F                 db  10h
.eh_frame:00000000000089A0                 db  83h
.eh_frame:00000000000089A1                 db    2
.eh_frame:00000000000089A2                 db  47h ; G
.eh_frame:00000000000089A3                 db  0Eh
.eh_frame:00000000000089A4                 db  20h
.eh_frame:00000000000089A5                 db  7Ch ; |
.eh_frame:00000000000089A6                 db  0Ah
.eh_frame:00000000000089A7                 db  0Eh
.eh_frame:00000000000089A8                 db  10h
.eh_frame:00000000000089A9                 db  41h ; A
.eh_frame:00000000000089AA                 db  0Eh
.eh_frame:00000000000089AB                 db    8
.eh_frame:00000000000089AC                 db  4Bh ; K
.eh_frame:00000000000089AD                 db  0Bh
.eh_frame:00000000000089AE                 db    0
.eh_frame:00000000000089AF                 db    0
.eh_frame:00000000000089B0                 db  34h ; 4
.eh_frame:00000000000089B1                 db    0
.eh_frame:00000000000089B2                 db    0
.eh_frame:00000000000089B3                 db    0
.eh_frame:00000000000089B4                 db  3Ch ; <
.eh_frame:00000000000089B5                 db    7
.eh_frame:00000000000089B6                 db    0
.eh_frame:00000000000089B7                 db    0
.eh_frame:00000000000089B8                 db  78h ; x
.eh_frame:00000000000089B9                 db 0B4h
.eh_frame:00000000000089BA                 db 0FFh
.eh_frame:00000000000089BB                 db 0FFh
.eh_frame:00000000000089BC                 db    3
.eh_frame:00000000000089BD                 db    2
.eh_frame:00000000000089BE                 db    0
.eh_frame:00000000000089BF                 db    0
.eh_frame:00000000000089C0                 db    0
.eh_frame:00000000000089C1                 db  42h ; B
.eh_frame:00000000000089C2                 db  0Eh
.eh_frame:00000000000089C3                 db  10h
.eh_frame:00000000000089C4                 db  8Ch
.eh_frame:00000000000089C5                 db    2
.eh_frame:00000000000089C6                 db  41h ; A
.eh_frame:00000000000089C7                 db  0Eh
.eh_frame:00000000000089C8                 db  18h
.eh_frame:00000000000089C9                 db  86h
.eh_frame:00000000000089CA                 db    3
.eh_frame:00000000000089CB                 db  46h ; F
.eh_frame:00000000000089CC                 db  0Eh
.eh_frame:00000000000089CD                 db  20h
.eh_frame:00000000000089CE                 db  83h
.eh_frame:00000000000089CF                 db    4
.eh_frame:00000000000089D0                 db  47h ; G
.eh_frame:00000000000089D1                 db  0Eh
.eh_frame:00000000000089D2                 db  30h ; 0
.eh_frame:00000000000089D3                 db    2
.eh_frame:00000000000089D4                 db  4Ah ; J
.eh_frame:00000000000089D5                 db  0Ah
.eh_frame:00000000000089D6                 db  0Eh
.eh_frame:00000000000089D7                 db  20h
.eh_frame:00000000000089D8                 db  41h ; A
.eh_frame:00000000000089D9                 db  0Eh
.eh_frame:00000000000089DA                 db  18h
.eh_frame:00000000000089DB                 db  41h ; A
.eh_frame:00000000000089DC                 db  0Eh
.eh_frame:00000000000089DD                 db  10h
.eh_frame:00000000000089DE                 db  42h ; B
.eh_frame:00000000000089DF                 db  0Eh
.eh_frame:00000000000089E0                 db    8
.eh_frame:00000000000089E1                 db  42h ; B
.eh_frame:00000000000089E2                 db  0Bh
.eh_frame:00000000000089E3                 db    0
.eh_frame:00000000000089E4                 db    0
.eh_frame:00000000000089E5                 db    0
.eh_frame:00000000000089E6                 db    0
.eh_frame:00000000000089E7                 db    0
.eh_frame:00000000000089E8                 db  24h ; $
.eh_frame:00000000000089E9                 db    0
.eh_frame:00000000000089EA                 db    0
.eh_frame:00000000000089EB                 db    0
.eh_frame:00000000000089EC                 db  74h ; t
.eh_frame:00000000000089ED                 db    7
.eh_frame:00000000000089EE                 db    0
.eh_frame:00000000000089EF                 db    0
.eh_frame:00000000000089F0                 db  50h ; P
.eh_frame:00000000000089F1                 db 0B6h
.eh_frame:00000000000089F2                 db 0FFh
.eh_frame:00000000000089F3                 db 0FFh
.eh_frame:00000000000089F4                 db  27h ; '
.eh_frame:00000000000089F5                 db    0
.eh_frame:00000000000089F6                 db    0
.eh_frame:00000000000089F7                 db    0
.eh_frame:00000000000089F8                 db    0
.eh_frame:00000000000089F9                 db  41h ; A
.eh_frame:00000000000089FA                 db  0Eh
.eh_frame:00000000000089FB                 db  10h
.eh_frame:00000000000089FC                 db  86h
.eh_frame:00000000000089FD                 db    2
.eh_frame:00000000000089FE                 db  41h ; A
.eh_frame:00000000000089FF                 db  0Eh
.eh_frame:0000000000008A00                 db  18h
.eh_frame:0000000000008A01                 db  83h
.eh_frame:0000000000008A02                 db    3
.eh_frame:0000000000008A03                 db  4Ah ; J
.eh_frame:0000000000008A04                 db  0Eh
.eh_frame:0000000000008A05                 db  20h
.eh_frame:0000000000008A06                 db  52h ; R
.eh_frame:0000000000008A07                 db  0Eh
.eh_frame:0000000000008A08                 db  18h
.eh_frame:0000000000008A09                 db  44h ; D
.eh_frame:0000000000008A0A                 db  0Eh
.eh_frame:0000000000008A0B                 db  10h
.eh_frame:0000000000008A0C                 db  41h ; A
.eh_frame:0000000000008A0D                 db  0Eh
.eh_frame:0000000000008A0E                 db    8
.eh_frame:0000000000008A0F                 db    0
.eh_frame:0000000000008A10                 db  10h
.eh_frame:0000000000008A11                 db    0
.eh_frame:0000000000008A12                 db    0
.eh_frame:0000000000008A13                 db    0
.eh_frame:0000000000008A14                 db  9Ch
.eh_frame:0000000000008A15                 db    7
.eh_frame:0000000000008A16                 db    0
.eh_frame:0000000000008A17                 db    0
.eh_frame:0000000000008A18                 db  58h ; X
.eh_frame:0000000000008A19                 db 0B6h
.eh_frame:0000000000008A1A                 db 0FFh
.eh_frame:0000000000008A1B                 db 0FFh
.eh_frame:0000000000008A1C                 db  0Dh
.eh_frame:0000000000008A1D                 db    0
.eh_frame:0000000000008A1E                 db    0
.eh_frame:0000000000008A1F                 db    0
.eh_frame:0000000000008A20                 db    0
.eh_frame:0000000000008A21                 db    0
.eh_frame:0000000000008A22                 db    0
.eh_frame:0000000000008A23                 db    0
.eh_frame:0000000000008A24                 db  14h
.eh_frame:0000000000008A25                 db    0
.eh_frame:0000000000008A26                 db    0
.eh_frame:0000000000008A27                 db    0
.eh_frame:0000000000008A28                 db 0B0h
.eh_frame:0000000000008A29                 db    7
.eh_frame:0000000000008A2A                 db    0
.eh_frame:0000000000008A2B                 db    0
.eh_frame:0000000000008A2C                 db  54h ; T
.eh_frame:0000000000008A2D                 db 0B6h
.eh_frame:0000000000008A2E                 db 0FFh
.eh_frame:0000000000008A2F                 db 0FFh
.eh_frame:0000000000008A30                 db  2Eh ; .
.eh_frame:0000000000008A31                 db    0
.eh_frame:0000000000008A32                 db    0
.eh_frame:0000000000008A33                 db    0
.eh_frame:0000000000008A34                 db    0
.eh_frame:0000000000008A35                 db  5Eh ; ^
.eh_frame:0000000000008A36                 db  0Eh
.eh_frame:0000000000008A37                 db  10h
.eh_frame:0000000000008A38                 db  4Fh ; O
.eh_frame:0000000000008A39                 db  0Eh
.eh_frame:0000000000008A3A                 db    8
.eh_frame:0000000000008A3B                 db    0
.eh_frame:0000000000008A3C                 db  14h
.eh_frame:0000000000008A3D                 db    0
.eh_frame:0000000000008A3E                 db    0
.eh_frame:0000000000008A3F                 db    0
.eh_frame:0000000000008A40                 db 0C8h
.eh_frame:0000000000008A41                 db    7
.eh_frame:0000000000008A42                 db    0
.eh_frame:0000000000008A43                 db    0
.eh_frame:0000000000008A44                 db  6Ch ; l
.eh_frame:0000000000008A45                 db 0B6h
.eh_frame:0000000000008A46                 db 0FFh
.eh_frame:0000000000008A47                 db 0FFh
.eh_frame:0000000000008A48                 db  33h ; 3
.eh_frame:0000000000008A49                 db    0
.eh_frame:0000000000008A4A                 db    0
.eh_frame:0000000000008A4B                 db    0
.eh_frame:0000000000008A4C                 db    0
.eh_frame:0000000000008A4D                 db  5Eh ; ^
.eh_frame:0000000000008A4E                 db  0Eh
.eh_frame:0000000000008A4F                 db  10h
.eh_frame:0000000000008A50                 db  54h ; T
.eh_frame:0000000000008A51                 db  0Eh
.eh_frame:0000000000008A52                 db    8
.eh_frame:0000000000008A53                 db    0
.eh_frame:0000000000008A54                 db  18h
.eh_frame:0000000000008A55                 db    0
.eh_frame:0000000000008A56                 db    0
.eh_frame:0000000000008A57                 db    0
.eh_frame:0000000000008A58                 db 0E0h
.eh_frame:0000000000008A59                 db    7
.eh_frame:0000000000008A5A                 db    0
.eh_frame:0000000000008A5B                 db    0
.eh_frame:0000000000008A5C                 db  94h
.eh_frame:0000000000008A5D                 db 0B6h
.eh_frame:0000000000008A5E                 db 0FFh
.eh_frame:0000000000008A5F                 db 0FFh
.eh_frame:0000000000008A60                 db  15h
.eh_frame:0000000000008A61                 db    0
.eh_frame:0000000000008A62                 db    0
.eh_frame:0000000000008A63                 db    0
.eh_frame:0000000000008A64                 db    0
.eh_frame:0000000000008A65                 db  41h ; A
.eh_frame:0000000000008A66                 db  0Eh
.eh_frame:0000000000008A67                 db  10h
.eh_frame:0000000000008A68                 db  83h
.eh_frame:0000000000008A69                 db    2
.eh_frame:0000000000008A6A                 db  4Fh ; O
.eh_frame:0000000000008A6B                 db  0Eh
.eh_frame:0000000000008A6C                 db    8
.eh_frame:0000000000008A6D                 db    0
.eh_frame:0000000000008A6E                 db    0
.eh_frame:0000000000008A6F                 db    0
.eh_frame:0000000000008A70                 db  1Ch
.eh_frame:0000000000008A71                 db    0
.eh_frame:0000000000008A72                 db    0
.eh_frame:0000000000008A73                 db    0
.eh_frame:0000000000008A74                 db 0FCh
.eh_frame:0000000000008A75                 db    7
.eh_frame:0000000000008A76                 db    0
.eh_frame:0000000000008A77                 db    0
.eh_frame:0000000000008A78                 db  98h
.eh_frame:0000000000008A79                 db 0B6h
.eh_frame:0000000000008A7A                 db 0FFh
.eh_frame:0000000000008A7B                 db 0FFh
.eh_frame:0000000000008A7C                 db  9Fh
.eh_frame:0000000000008A7D                 db    0
.eh_frame:0000000000008A7E                 db    0
.eh_frame:0000000000008A7F                 db    0
.eh_frame:0000000000008A80                 db    0
.eh_frame:0000000000008A81                 db  44h ; D
.eh_frame:0000000000008A82                 db  0Eh
.eh_frame:0000000000008A83                 db  10h
.eh_frame:0000000000008A84                 db  83h
.eh_frame:0000000000008A85                 db    2
.eh_frame:0000000000008A86                 db    2
.eh_frame:0000000000008A87                 db  78h ; x
.eh_frame:0000000000008A88                 db  0Ah
.eh_frame:0000000000008A89                 db  0Eh
.eh_frame:0000000000008A8A                 db    8
.eh_frame:0000000000008A8B                 db  41h ; A
.eh_frame:0000000000008A8C                 db  0Bh
.eh_frame:0000000000008A8D                 db    0
.eh_frame:0000000000008A8E                 db    0
.eh_frame:0000000000008A8F                 db    0
.eh_frame:0000000000008A90                 db  40h ; @
.eh_frame:0000000000008A91                 db    0
.eh_frame:0000000000008A92                 db    0
.eh_frame:0000000000008A93                 db    0
.eh_frame:0000000000008A94                 db  1Ch
.eh_frame:0000000000008A95                 db    8
.eh_frame:0000000000008A96                 db    0
.eh_frame:0000000000008A97                 db    0
.eh_frame:0000000000008A98                 db  18h
.eh_frame:0000000000008A99                 db 0B7h
.eh_frame:0000000000008A9A                 db 0FFh
.eh_frame:0000000000008A9B                 db 0FFh
.eh_frame:0000000000008A9C                 db 0E7h
.eh_frame:0000000000008A9D                 db    0
.eh_frame:0000000000008A9E                 db    0
.eh_frame:0000000000008A9F                 db    0
.eh_frame:0000000000008AA0                 db    0
.eh_frame:0000000000008AA1                 db  41h ; A
.eh_frame:0000000000008AA2                 db  0Eh
.eh_frame:0000000000008AA3                 db  10h
.eh_frame:0000000000008AA4                 db  86h
.eh_frame:0000000000008AA5                 db    2
.eh_frame:0000000000008AA6                 db  41h ; A
.eh_frame:0000000000008AA7                 db  0Eh
.eh_frame:0000000000008AA8                 db  18h
.eh_frame:0000000000008AA9                 db  83h
.eh_frame:0000000000008AAA                 db    3
.eh_frame:0000000000008AAB                 db  49h ; I
.eh_frame:0000000000008AAC                 db  0Eh
.eh_frame:0000000000008AAD                 db  20h
.eh_frame:0000000000008AAE                 db  6Eh ; n
.eh_frame:0000000000008AAF                 db  0Ah
.eh_frame:0000000000008AB0                 db  0Eh
.eh_frame:0000000000008AB1                 db  18h
.eh_frame:0000000000008AB2                 db  41h ; A
.eh_frame:0000000000008AB3                 db  0Eh
.eh_frame:0000000000008AB4                 db  10h
.eh_frame:0000000000008AB5                 db  41h ; A
.eh_frame:0000000000008AB6                 db  0Eh
.eh_frame:0000000000008AB7                 db    8
.eh_frame:0000000000008AB8                 db  45h ; E
.eh_frame:0000000000008AB9                 db  0Bh
.eh_frame:0000000000008ABA                 db    2
.eh_frame:0000000000008ABB                 db  4Ah ; J
.eh_frame:0000000000008ABC                 db  0Ah
.eh_frame:0000000000008ABD                 db  0Eh
.eh_frame:0000000000008ABE                 db  18h
.eh_frame:0000000000008ABF                 db  41h ; A
.eh_frame:0000000000008AC0                 db  0Eh
.eh_frame:0000000000008AC1                 db  10h
.eh_frame:0000000000008AC2                 db  41h ; A
.eh_frame:0000000000008AC3                 db  0Eh
.eh_frame:0000000000008AC4                 db    8
.eh_frame:0000000000008AC5                 db  44h ; D
.eh_frame:0000000000008AC6                 db  0Bh
.eh_frame:0000000000008AC7                 db    2
.eh_frame:0000000000008AC8                 db  54h ; T
.eh_frame:0000000000008AC9                 db  0Eh
.eh_frame:0000000000008ACA                 db  18h
.eh_frame:0000000000008ACB                 db  41h ; A
.eh_frame:0000000000008ACC                 db  0Eh
.eh_frame:0000000000008ACD                 db  10h
.eh_frame:0000000000008ACE                 db  41h ; A
.eh_frame:0000000000008ACF                 db  0Eh
.eh_frame:0000000000008AD0                 db    8
.eh_frame:0000000000008AD1                 db    0
.eh_frame:0000000000008AD2                 db    0
.eh_frame:0000000000008AD3                 db    0
.eh_frame:0000000000008AD4                 db  74h ; t
.eh_frame:0000000000008AD5                 db    0
.eh_frame:0000000000008AD6                 db    0
.eh_frame:0000000000008AD7                 db    0
.eh_frame:0000000000008AD8                 db  60h ; `
.eh_frame:0000000000008AD9                 db    8
.eh_frame:0000000000008ADA                 db    0
.eh_frame:0000000000008ADB                 db    0
.eh_frame:0000000000008ADC                 db 0C4h
.eh_frame:0000000000008ADD                 db 0B7h
.eh_frame:0000000000008ADE                 db 0FFh
.eh_frame:0000000000008ADF                 db 0FFh
.eh_frame:0000000000008AE0                 db  34h ; 4
.eh_frame:0000000000008AE1                 db  12h
.eh_frame:0000000000008AE2                 db    0
.eh_frame:0000000000008AE3                 db    0
.eh_frame:0000000000008AE4                 db    0
.eh_frame:0000000000008AE5                 db  42h ; B
.eh_frame:0000000000008AE6                 db  0Eh
.eh_frame:0000000000008AE7                 db  10h
.eh_frame:0000000000008AE8                 db  8Fh
.eh_frame:0000000000008AE9                 db    2
.eh_frame:0000000000008AEA                 db  42h ; B
.eh_frame:0000000000008AEB                 db  0Eh
.eh_frame:0000000000008AEC                 db  18h
.eh_frame:0000000000008AED                 db  8Eh
.eh_frame:0000000000008AEE                 db    3
.eh_frame:0000000000008AEF                 db  45h ; E
.eh_frame:0000000000008AF0                 db  0Eh
.eh_frame:0000000000008AF1                 db  20h
.eh_frame:0000000000008AF2                 db  8Dh
.eh_frame:0000000000008AF3                 db    4
.eh_frame:0000000000008AF4                 db  42h ; B
.eh_frame:0000000000008AF5                 db  0Eh
.eh_frame:0000000000008AF6                 db  28h ; (
.eh_frame:0000000000008AF7                 db  8Ch
.eh_frame:0000000000008AF8                 db    5
.eh_frame:0000000000008AF9                 db  44h ; D
.eh_frame:0000000000008AFA                 db  0Eh
.eh_frame:0000000000008AFB                 db  30h ; 0
.eh_frame:0000000000008AFC                 db  86h
.eh_frame:0000000000008AFD                 db    6
.eh_frame:0000000000008AFE                 db  41h ; A
.eh_frame:0000000000008AFF                 db  0Eh
.eh_frame:0000000000008B00                 db  38h ; 8
.eh_frame:0000000000008B01                 db  83h
.eh_frame:0000000000008B02                 db    7
.eh_frame:0000000000008B03                 db  53h ; S
.eh_frame:0000000000008B04                 db  0Eh
.eh_frame:0000000000008B05                 db 0F0h
.eh_frame:0000000000008B06                 db    1
.eh_frame:0000000000008B07                 db    3
.eh_frame:0000000000008B08                 db  81h
.eh_frame:0000000000008B09                 db  0Bh
.eh_frame:0000000000008B0A                 db  0Eh
.eh_frame:0000000000008B0B                 db 0F8h
.eh_frame:0000000000008B0C                 db    1
.eh_frame:0000000000008B0D                 db  4Ah ; J
.eh_frame:0000000000008B0E                 db  0Eh
.eh_frame:0000000000008B0F                 db  80h
.eh_frame:0000000000008B10                 db    2
.eh_frame:0000000000008B11                 db  44h ; D
.eh_frame:0000000000008B12                 db  0Eh
.eh_frame:0000000000008B13                 db  88h
.eh_frame:0000000000008B14                 db    2
.eh_frame:0000000000008B15                 db  45h ; E
.eh_frame:0000000000008B16                 db  0Eh
.eh_frame:0000000000008B17                 db  90h
.eh_frame:0000000000008B18                 db    2
.eh_frame:0000000000008B19                 db  5Fh ; _
.eh_frame:0000000000008B1A                 db  0Eh
.eh_frame:0000000000008B1B                 db 0F0h
.eh_frame:0000000000008B1C                 db    1
.eh_frame:0000000000008B1D                 db  64h ; d
.eh_frame:0000000000008B1E                 db  0Ah
.eh_frame:0000000000008B1F                 db  0Eh
.eh_frame:0000000000008B20                 db  38h ; 8
.eh_frame:0000000000008B21                 db  41h ; A
.eh_frame:0000000000008B22                 db  0Eh
.eh_frame:0000000000008B23                 db  30h ; 0
.eh_frame:0000000000008B24                 db  41h ; A
.eh_frame:0000000000008B25                 db  0Eh
.eh_frame:0000000000008B26                 db  28h ; (
.eh_frame:0000000000008B27                 db  42h ; B
.eh_frame:0000000000008B28                 db  0Eh
.eh_frame:0000000000008B29                 db  20h
.eh_frame:0000000000008B2A                 db  42h ; B
.eh_frame:0000000000008B2B                 db  0Eh
.eh_frame:0000000000008B2C                 db  18h
.eh_frame:0000000000008B2D                 db  42h ; B
.eh_frame:0000000000008B2E                 db  0Eh
.eh_frame:0000000000008B2F                 db  10h
.eh_frame:0000000000008B30                 db  42h ; B
.eh_frame:0000000000008B31                 db  0Eh
.eh_frame:0000000000008B32                 db    8
.eh_frame:0000000000008B33                 db  44h ; D
.eh_frame:0000000000008B34                 db  0Bh
.eh_frame:0000000000008B35                 db    3
.eh_frame:0000000000008B36                 db  99h
.eh_frame:0000000000008B37                 db    5
.eh_frame:0000000000008B38                 db  0Eh
.eh_frame:0000000000008B39                 db 0F8h
.eh_frame:0000000000008B3A                 db    1
.eh_frame:0000000000008B3B                 db  4Dh ; M
.eh_frame:0000000000008B3C                 db  0Eh
.eh_frame:0000000000008B3D                 db  80h
.eh_frame:0000000000008B3E                 db    2
.eh_frame:0000000000008B3F                 db  44h ; D
.eh_frame:0000000000008B40                 db  0Eh
.eh_frame:0000000000008B41                 db  88h
.eh_frame:0000000000008B42                 db    2
.eh_frame:0000000000008B43                 db  47h ; G
.eh_frame:0000000000008B44                 db  0Eh
.eh_frame:0000000000008B45                 db  90h
.eh_frame:0000000000008B46                 db    2
.eh_frame:0000000000008B47                 db  5Bh ; [
.eh_frame:0000000000008B48                 db  0Eh
.eh_frame:0000000000008B49                 db 0F0h
.eh_frame:0000000000008B4A                 db    1
.eh_frame:0000000000008B4B                 db    0
.eh_frame:0000000000008B4C                 db  68h ; h
.eh_frame:0000000000008B4D                 db    0
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db 0D8h
.eh_frame:0000000000008B51                 db    8
.eh_frame:0000000000008B52                 db    0
.eh_frame:0000000000008B53                 db    0
.eh_frame:0000000000008B54                 db  8Ch
.eh_frame:0000000000008B55                 db 0C9h
.eh_frame:0000000000008B56                 db 0FFh
.eh_frame:0000000000008B57                 db 0FFh
.eh_frame:0000000000008B58                 db 0ABh
.eh_frame:0000000000008B59                 db    1
.eh_frame:0000000000008B5A                 db    0
.eh_frame:0000000000008B5B                 db    0
.eh_frame:0000000000008B5C                 db    0
.eh_frame:0000000000008B5D                 db  42h ; B
.eh_frame:0000000000008B5E                 db  0Eh
.eh_frame:0000000000008B5F                 db  10h
.eh_frame:0000000000008B60                 db  8Fh
.eh_frame:0000000000008B61                 db    2
.eh_frame:0000000000008B62                 db  42h ; B
.eh_frame:0000000000008B63                 db  0Eh
.eh_frame:0000000000008B64                 db  18h
.eh_frame:0000000000008B65                 db  8Eh
.eh_frame:0000000000008B66                 db    3
.eh_frame:0000000000008B67                 db  45h ; E
.eh_frame:0000000000008B68                 db  0Eh
.eh_frame:0000000000008B69                 db  20h
.eh_frame:0000000000008B6A                 db  8Dh
.eh_frame:0000000000008B6B                 db    4
.eh_frame:0000000000008B6C                 db  42h ; B
.eh_frame:0000000000008B6D                 db  0Eh
.eh_frame:0000000000008B6E                 db  28h ; (
.eh_frame:0000000000008B6F                 db  8Ch
.eh_frame:0000000000008B70                 db    5
.eh_frame:0000000000008B71                 db  44h ; D
.eh_frame:0000000000008B72                 db  0Eh
.eh_frame:0000000000008B73                 db  30h ; 0
.eh_frame:0000000000008B74                 db  86h
.eh_frame:0000000000008B75                 db    6
.eh_frame:0000000000008B76                 db  41h ; A
.eh_frame:0000000000008B77                 db  0Eh
.eh_frame:0000000000008B78                 db  38h ; 8
.eh_frame:0000000000008B79                 db  83h
.eh_frame:0000000000008B7A                 db    7
.eh_frame:0000000000008B7B                 db  47h ; G
.eh_frame:0000000000008B7C                 db  0Eh
.eh_frame:0000000000008B7D                 db  60h ; `
.eh_frame:0000000000008B7E                 db    2
.eh_frame:0000000000008B7F                 db  99h
.eh_frame:0000000000008B80                 db  0Eh
.eh_frame:0000000000008B81                 db  68h ; h
.eh_frame:0000000000008B82                 db  5Fh ; _
.eh_frame:0000000000008B83                 db  0Eh
.eh_frame:0000000000008B84                 db  70h ; p
.eh_frame:0000000000008B85                 db  46h ; F
.eh_frame:0000000000008B86                 db  0Eh
.eh_frame:0000000000008B87                 db  78h ; x
.eh_frame:0000000000008B88                 db  42h ; B
.eh_frame:0000000000008B89                 db  0Eh
.eh_frame:0000000000008B8A                 db  80h
.eh_frame:0000000000008B8B                 db    1
.eh_frame:0000000000008B8C                 db  59h ; Y
.eh_frame:0000000000008B8D                 db  0Eh
.eh_frame:0000000000008B8E                 db  60h ; `
.eh_frame:0000000000008B8F                 db    2
.eh_frame:0000000000008B90                 db  40h ; @
.eh_frame:0000000000008B91                 db  0Eh
.eh_frame:0000000000008B92                 db  68h ; h
.eh_frame:0000000000008B93                 db  4Bh ; K
.eh_frame:0000000000008B94                 db  0Eh
.eh_frame:0000000000008B95                 db  70h ; p
.eh_frame:0000000000008B96                 db  43h ; C
.eh_frame:0000000000008B97                 db  0Eh
.eh_frame:0000000000008B98                 db  78h ; x
.eh_frame:0000000000008B99                 db  45h ; E
.eh_frame:0000000000008B9A                 db  0Eh
.eh_frame:0000000000008B9B                 db  80h
.eh_frame:0000000000008B9C                 db    1
.eh_frame:0000000000008B9D                 db  5Eh ; ^
.eh_frame:0000000000008B9E                 db  0Eh
.eh_frame:0000000000008B9F                 db  60h ; `
.eh_frame:0000000000008BA0                 db  4Ch ; L
.eh_frame:0000000000008BA1                 db  0Ah
.eh_frame:0000000000008BA2                 db  0Eh
.eh_frame:0000000000008BA3                 db  38h ; 8
.eh_frame:0000000000008BA4                 db  44h ; D
.eh_frame:0000000000008BA5                 db  0Eh
.eh_frame:0000000000008BA6                 db  30h ; 0
.eh_frame:0000000000008BA7                 db  41h ; A
.eh_frame:0000000000008BA8                 db  0Eh
.eh_frame:0000000000008BA9                 db  28h ; (
.eh_frame:0000000000008BAA                 db  42h ; B
.eh_frame:0000000000008BAB                 db  0Eh
.eh_frame:0000000000008BAC                 db  20h
.eh_frame:0000000000008BAD                 db  42h ; B
.eh_frame:0000000000008BAE                 db  0Eh
.eh_frame:0000000000008BAF                 db  18h
.eh_frame:0000000000008BB0                 db  42h ; B
.eh_frame:0000000000008BB1                 db  0Eh
.eh_frame:0000000000008BB2                 db  10h
.eh_frame:0000000000008BB3                 db  42h ; B
.eh_frame:0000000000008BB4                 db  0Eh
.eh_frame:0000000000008BB5                 db    8
.eh_frame:0000000000008BB6                 db  46h ; F
.eh_frame:0000000000008BB7                 db  0Bh
.eh_frame:0000000000008BB8                 db  28h ; (
.eh_frame:0000000000008BB9                 db    0
.eh_frame:0000000000008BBA                 db    0
.eh_frame:0000000000008BBB                 db    0
.eh_frame:0000000000008BBC                 db  44h ; D
.eh_frame:0000000000008BBD                 db    9
.eh_frame:0000000000008BBE                 db    0
.eh_frame:0000000000008BBF                 db    0
.eh_frame:0000000000008BC0                 db 0D0h
.eh_frame:0000000000008BC1                 db 0CAh
.eh_frame:0000000000008BC2                 db 0FFh
.eh_frame:0000000000008BC3                 db 0FFh
.eh_frame:0000000000008BC4                 db  36h ; 6
.eh_frame:0000000000008BC5                 db    0
.eh_frame:0000000000008BC6                 db    0
.eh_frame:0000000000008BC7                 db    0
.eh_frame:0000000000008BC8                 db    0
.eh_frame:0000000000008BC9                 db  42h ; B
.eh_frame:0000000000008BCA                 db  0Eh
.eh_frame:0000000000008BCB                 db  10h
.eh_frame:0000000000008BCC                 db  8Ch
.eh_frame:0000000000008BCD                 db    2
.eh_frame:0000000000008BCE                 db  41h ; A
.eh_frame:0000000000008BCF                 db  0Eh
.eh_frame:0000000000008BD0                 db  18h
.eh_frame:0000000000008BD1                 db  86h
.eh_frame:0000000000008BD2                 db    3
.eh_frame:0000000000008BD3                 db  41h ; A
.eh_frame:0000000000008BD4                 db  0Eh
.eh_frame:0000000000008BD5                 db  20h
.eh_frame:0000000000008BD6                 db  83h
.eh_frame:0000000000008BD7                 db    4
.eh_frame:0000000000008BD8                 db  6Eh ; n
.eh_frame:0000000000008BD9                 db  0Eh
.eh_frame:0000000000008BDA                 db  18h
.eh_frame:0000000000008BDB                 db  41h ; A
.eh_frame:0000000000008BDC                 db  0Eh
.eh_frame:0000000000008BDD                 db  10h
.eh_frame:0000000000008BDE                 db  42h ; B
.eh_frame:0000000000008BDF                 db  0Eh
.eh_frame:0000000000008BE0                 db    8
.eh_frame:0000000000008BE1                 db    0
.eh_frame:0000000000008BE2                 db    0
.eh_frame:0000000000008BE3                 db    0
.eh_frame:0000000000008BE4                 db  10h
.eh_frame:0000000000008BE5                 db    0
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db  70h ; p
.eh_frame:0000000000008BE9                 db    9
.eh_frame:0000000000008BEA                 db    0
.eh_frame:0000000000008BEB                 db    0
.eh_frame:0000000000008BEC                 db 0E4h
.eh_frame:0000000000008BED                 db 0CAh
.eh_frame:0000000000008BEE                 db 0FFh
.eh_frame:0000000000008BEF                 db 0FFh
.eh_frame:0000000000008BF0                 db  11h
.eh_frame:0000000000008BF1                 db    0
.eh_frame:0000000000008BF2                 db    0
.eh_frame:0000000000008BF3                 db    0
.eh_frame:0000000000008BF4                 db    0
.eh_frame:0000000000008BF5                 db    0
.eh_frame:0000000000008BF6                 db    0
.eh_frame:0000000000008BF7                 db    0
.eh_frame:0000000000008BF8                 db  10h
.eh_frame:0000000000008BF9                 db    0
.eh_frame:0000000000008BFA                 db    0
.eh_frame:0000000000008BFB                 db    0
.eh_frame:0000000000008BFC                 db  84h
.eh_frame:0000000000008BFD                 db    9
.eh_frame:0000000000008BFE                 db    0
.eh_frame:0000000000008BFF                 db    0
.eh_frame:0000000000008C00                 db 0F0h
.eh_frame:0000000000008C01                 db 0CAh
.eh_frame:0000000000008C02                 db 0FFh
.eh_frame:0000000000008C03                 db 0FFh
.eh_frame:0000000000008C04                 db  11h
.eh_frame:0000000000008C05                 db    0
.eh_frame:0000000000008C06                 db    0
.eh_frame:0000000000008C07                 db    0
.eh_frame:0000000000008C08                 db    0
.eh_frame:0000000000008C09                 db    0
.eh_frame:0000000000008C0A                 db    0
.eh_frame:0000000000008C0B                 db    0
.eh_frame:0000000000008C0C                 db  10h
.eh_frame:0000000000008C0D                 db    0
.eh_frame:0000000000008C0E                 db    0
.eh_frame:0000000000008C0F                 db    0
.eh_frame:0000000000008C10                 db  98h
.eh_frame:0000000000008C11                 db    9
.eh_frame:0000000000008C12                 db    0
.eh_frame:0000000000008C13                 db    0
.eh_frame:0000000000008C14                 db 0FCh
.eh_frame:0000000000008C15                 db 0CAh
.eh_frame:0000000000008C16                 db 0FFh
.eh_frame:0000000000008C17                 db 0FFh
.eh_frame:0000000000008C18                 db  35h ; 5
.eh_frame:0000000000008C19                 db    0
.eh_frame:0000000000008C1A                 db    0
.eh_frame:0000000000008C1B                 db    0
.eh_frame:0000000000008C1C                 db    0
.eh_frame:0000000000008C1D                 db    0
.eh_frame:0000000000008C1E                 db    0
.eh_frame:0000000000008C1F                 db    0
.eh_frame:0000000000008C20                 db  10h
.eh_frame:0000000000008C21                 db    0
.eh_frame:0000000000008C22                 db    0
.eh_frame:0000000000008C23                 db    0
.eh_frame:0000000000008C24                 db 0ACh
.eh_frame:0000000000008C25                 db    9
.eh_frame:0000000000008C26                 db    0
.eh_frame:0000000000008C27                 db    0
.eh_frame:0000000000008C28                 db  28h ; (
.eh_frame:0000000000008C29                 db 0CBh
.eh_frame:0000000000008C2A                 db 0FFh
.eh_frame:0000000000008C2B                 db 0FFh
.eh_frame:0000000000008C2C                 db  15h
.eh_frame:0000000000008C2D                 db    0
.eh_frame:0000000000008C2E                 db    0
.eh_frame:0000000000008C2F                 db    0
.eh_frame:0000000000008C30                 db    0
.eh_frame:0000000000008C31                 db    0
.eh_frame:0000000000008C32                 db    0
.eh_frame:0000000000008C33                 db    0
.eh_frame:0000000000008C34                 db  10h
.eh_frame:0000000000008C35                 db    0
.eh_frame:0000000000008C36                 db    0
.eh_frame:0000000000008C37                 db    0
.eh_frame:0000000000008C38                 db 0C0h
.eh_frame:0000000000008C39                 db    9
.eh_frame:0000000000008C3A                 db    0
.eh_frame:0000000000008C3B                 db    0
.eh_frame:0000000000008C3C                 db  34h ; 4
.eh_frame:0000000000008C3D                 db 0CBh
.eh_frame:0000000000008C3E                 db 0FFh
.eh_frame:0000000000008C3F                 db 0FFh
.eh_frame:0000000000008C40                 db  30h ; 0
.eh_frame:0000000000008C41                 db    0
.eh_frame:0000000000008C42                 db    0
.eh_frame:0000000000008C43                 db    0
.eh_frame:0000000000008C44                 db    0
.eh_frame:0000000000008C45                 db  6Bh ; k
.eh_frame:0000000000008C46                 db  0Eh
.eh_frame:0000000000008C47                 db  10h
.eh_frame:0000000000008C48                 db  50h ; P
.eh_frame:0000000000008C49                 db    0
.eh_frame:0000000000008C4A                 db    0
.eh_frame:0000000000008C4B                 db    0
.eh_frame:0000000000008C4C                 db 0D4h
.eh_frame:0000000000008C4D                 db    9
.eh_frame:0000000000008C4E                 db    0
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db  50h ; P
.eh_frame:0000000000008C51                 db 0CBh
.eh_frame:0000000000008C52                 db 0FFh
.eh_frame:0000000000008C53                 db 0FFh
.eh_frame:0000000000008C54                 db  74h ; t
.eh_frame:0000000000008C55                 db    0
.eh_frame:0000000000008C56                 db    0
.eh_frame:0000000000008C57                 db    0
.eh_frame:0000000000008C58                 db    0
.eh_frame:0000000000008C59                 db  42h ; B
.eh_frame:0000000000008C5A                 db  0Eh
.eh_frame:0000000000008C5B                 db  10h
.eh_frame:0000000000008C5C                 db  8Fh
.eh_frame:0000000000008C5D                 db    2
.eh_frame:0000000000008C5E                 db  42h ; B
.eh_frame:0000000000008C5F                 db  0Eh
.eh_frame:0000000000008C60                 db  18h
.eh_frame:0000000000008C61                 db  8Eh
.eh_frame:0000000000008C62                 db    3
.eh_frame:0000000000008C63                 db  49h ; I
.eh_frame:0000000000008C64                 db  0Eh
.eh_frame:0000000000008C65                 db  20h
.eh_frame:0000000000008C66                 db  8Dh
.eh_frame:0000000000008C67                 db    4
.eh_frame:0000000000008C68                 db  42h ; B
.eh_frame:0000000000008C69                 db  0Eh
.eh_frame:0000000000008C6A                 db  28h ; (
.eh_frame:0000000000008C6B                 db  8Ch
.eh_frame:0000000000008C6C                 db    5
.eh_frame:0000000000008C6D                 db  44h ; D
.eh_frame:0000000000008C6E                 db  0Eh
.eh_frame:0000000000008C6F                 db  30h ; 0
.eh_frame:0000000000008C70                 db  86h
.eh_frame:0000000000008C71                 db    6
.eh_frame:0000000000008C72                 db  41h ; A
.eh_frame:0000000000008C73                 db  0Eh
.eh_frame:0000000000008C74                 db  38h ; 8
.eh_frame:0000000000008C75                 db  83h
.eh_frame:0000000000008C76                 db    7
.eh_frame:0000000000008C77                 db  4Dh ; M
.eh_frame:0000000000008C78                 db  0Eh
.eh_frame:0000000000008C79                 db  50h ; P
.eh_frame:0000000000008C7A                 db  5Fh ; _
.eh_frame:0000000000008C7B                 db  0Eh
.eh_frame:0000000000008C7C                 db  58h ; X
.eh_frame:0000000000008C7D                 db  47h ; G
.eh_frame:0000000000008C7E                 db  0Eh
.eh_frame:0000000000008C7F                 db  60h ; `
.eh_frame:0000000000008C80                 db  46h ; F
.eh_frame:0000000000008C81                 db  0Eh
.eh_frame:0000000000008C82                 db  68h ; h
.eh_frame:0000000000008C83                 db  44h ; D
.eh_frame:0000000000008C84                 db  0Eh
.eh_frame:0000000000008C85                 db  70h ; p
.eh_frame:0000000000008C86                 db  58h ; X
.eh_frame:0000000000008C87                 db  0Eh
.eh_frame:0000000000008C88                 db  38h ; 8
.eh_frame:0000000000008C89                 db  41h ; A
.eh_frame:0000000000008C8A                 db  0Eh
.eh_frame:0000000000008C8B                 db  30h ; 0
.eh_frame:0000000000008C8C                 db  41h ; A
.eh_frame:0000000000008C8D                 db  0Eh
.eh_frame:0000000000008C8E                 db  28h ; (
.eh_frame:0000000000008C8F                 db  42h ; B
.eh_frame:0000000000008C90                 db  0Eh
.eh_frame:0000000000008C91                 db  20h
.eh_frame:0000000000008C92                 db  42h ; B
.eh_frame:0000000000008C93                 db  0Eh
.eh_frame:0000000000008C94                 db  18h
.eh_frame:0000000000008C95                 db  42h ; B
.eh_frame:0000000000008C96                 db  0Eh
.eh_frame:0000000000008C97                 db  10h
.eh_frame:0000000000008C98                 db  42h ; B
.eh_frame:0000000000008C99                 db  0Eh
.eh_frame:0000000000008C9A                 db    8
.eh_frame:0000000000008C9B                 db    0
.eh_frame:0000000000008C9C                 db  68h ; h
.eh_frame:0000000000008C9D                 db    0
.eh_frame:0000000000008C9E                 db    0
.eh_frame:0000000000008C9F                 db    0
.eh_frame:0000000000008CA0                 db  28h ; (
.eh_frame:0000000000008CA1                 db  0Ah
.eh_frame:0000000000008CA2                 db    0
.eh_frame:0000000000008CA3                 db    0
.eh_frame:0000000000008CA4                 db  7Ch ; |
.eh_frame:0000000000008CA5                 db 0CBh
.eh_frame:0000000000008CA6                 db 0FFh
.eh_frame:0000000000008CA7                 db 0FFh
.eh_frame:0000000000008CA8                 db 0E3h
.eh_frame:0000000000008CA9                 db    0
.eh_frame:0000000000008CAA                 db    0
.eh_frame:0000000000008CAB                 db    0
.eh_frame:0000000000008CAC                 db    0
.eh_frame:0000000000008CAD                 db  42h ; B
.eh_frame:0000000000008CAE                 db  0Eh
.eh_frame:0000000000008CAF                 db  10h
.eh_frame:0000000000008CB0                 db  8Fh
.eh_frame:0000000000008CB1                 db    2
.eh_frame:0000000000008CB2                 db  42h ; B
.eh_frame:0000000000008CB3                 db  0Eh
.eh_frame:0000000000008CB4                 db  18h
.eh_frame:0000000000008CB5                 db  8Eh
.eh_frame:0000000000008CB6                 db    3
.eh_frame:0000000000008CB7                 db  49h ; I
.eh_frame:0000000000008CB8                 db  0Eh
.eh_frame:0000000000008CB9                 db  20h
.eh_frame:0000000000008CBA                 db  8Dh
.eh_frame:0000000000008CBB                 db    4
.eh_frame:0000000000008CBC                 db  42h ; B
.eh_frame:0000000000008CBD                 db  0Eh
.eh_frame:0000000000008CBE                 db  28h ; (
.eh_frame:0000000000008CBF                 db  8Ch
.eh_frame:0000000000008CC0                 db    5
.eh_frame:0000000000008CC1                 db  44h ; D
.eh_frame:0000000000008CC2                 db  0Eh
.eh_frame:0000000000008CC3                 db  30h ; 0
.eh_frame:0000000000008CC4                 db  86h
.eh_frame:0000000000008CC5                 db    6
.eh_frame:0000000000008CC6                 db  41h ; A
.eh_frame:0000000000008CC7                 db  0Eh
.eh_frame:0000000000008CC8                 db  38h ; 8
.eh_frame:0000000000008CC9                 db  83h
.eh_frame:0000000000008CCA                 db    7
.eh_frame:0000000000008CCB                 db  4Dh ; M
.eh_frame:0000000000008CCC                 db  0Eh
.eh_frame:0000000000008CCD                 db  70h ; p
.eh_frame:0000000000008CCE                 db  65h ; e
.eh_frame:0000000000008CCF                 db  0Eh
.eh_frame:0000000000008CD0                 db  78h ; x
.eh_frame:0000000000008CD1                 db  4Dh ; M
.eh_frame:0000000000008CD2                 db  0Eh
.eh_frame:0000000000008CD3                 db  80h
.eh_frame:0000000000008CD4                 db    1
.eh_frame:0000000000008CD5                 db  46h ; F
.eh_frame:0000000000008CD6                 db  0Eh
.eh_frame:0000000000008CD7                 db  88h
.eh_frame:0000000000008CD8                 db    1
.eh_frame:0000000000008CD9                 db  42h ; B
.eh_frame:0000000000008CDA                 db  0Eh
.eh_frame:0000000000008CDB                 db  90h
.eh_frame:0000000000008CDC                 db    1
.eh_frame:0000000000008CDD                 db  5Eh ; ^
.eh_frame:0000000000008CDE                 db  0Eh
.eh_frame:0000000000008CDF                 db  70h ; p
.eh_frame:0000000000008CE0                 db  56h ; V
.eh_frame:0000000000008CE1                 db  0Eh
.eh_frame:0000000000008CE2                 db  78h ; x
.eh_frame:0000000000008CE3                 db  43h ; C
.eh_frame:0000000000008CE4                 db  0Eh
.eh_frame:0000000000008CE5                 db  80h
.eh_frame:0000000000008CE6                 db    1
.eh_frame:0000000000008CE7                 db  43h ; C
.eh_frame:0000000000008CE8                 db  0Eh
.eh_frame:0000000000008CE9                 db  88h
.eh_frame:0000000000008CEA                 db    1
.eh_frame:0000000000008CEB                 db  56h ; V
.eh_frame:0000000000008CEC                 db  0Eh
.eh_frame:0000000000008CED                 db  90h
.eh_frame:0000000000008CEE                 db    1
.eh_frame:0000000000008CEF                 db  52h ; R
.eh_frame:0000000000008CF0                 db  0Eh
.eh_frame:0000000000008CF1                 db  70h ; p
.eh_frame:0000000000008CF2                 db  5Bh ; [
.eh_frame:0000000000008CF3                 db  0Eh
.eh_frame:0000000000008CF4                 db  38h ; 8
.eh_frame:0000000000008CF5                 db  41h ; A
.eh_frame:0000000000008CF6                 db  0Eh
.eh_frame:0000000000008CF7                 db  30h ; 0
.eh_frame:0000000000008CF8                 db  41h ; A
.eh_frame:0000000000008CF9                 db  0Eh
.eh_frame:0000000000008CFA                 db  28h ; (
.eh_frame:0000000000008CFB                 db  42h ; B
.eh_frame:0000000000008CFC                 db  0Eh
.eh_frame:0000000000008CFD                 db  20h
.eh_frame:0000000000008CFE                 db  42h ; B
.eh_frame:0000000000008CFF                 db  0Eh
.eh_frame:0000000000008D00                 db  18h
.eh_frame:0000000000008D01                 db  42h ; B
.eh_frame:0000000000008D02                 db  0Eh
.eh_frame:0000000000008D03                 db  10h
.eh_frame:0000000000008D04                 db  42h ; B
.eh_frame:0000000000008D05                 db  0Eh
.eh_frame:0000000000008D06                 db    8
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db  10h
.eh_frame:0000000000008D09                 db    0
.eh_frame:0000000000008D0A                 db    0
.eh_frame:0000000000008D0B                 db    0
.eh_frame:0000000000008D0C                 db  94h
.eh_frame:0000000000008D0D                 db  0Ah
.eh_frame:0000000000008D0E                 db    0
.eh_frame:0000000000008D0F                 db    0
.eh_frame:0000000000008D10                 db    0
.eh_frame:0000000000008D11                 db 0CCh
.eh_frame:0000000000008D12                 db 0FFh
.eh_frame:0000000000008D13                 db 0FFh
.eh_frame:0000000000008D14                 db  0Ah
.eh_frame:0000000000008D15                 db    0
.eh_frame:0000000000008D16                 db    0
.eh_frame:0000000000008D17                 db    0
.eh_frame:0000000000008D18                 db    0
.eh_frame:0000000000008D19                 db    0
.eh_frame:0000000000008D1A                 db    0
.eh_frame:0000000000008D1B                 db    0
.eh_frame:0000000000008D1C                 db  28h ; (
.eh_frame:0000000000008D1D                 db    0
.eh_frame:0000000000008D1E                 db    0
.eh_frame:0000000000008D1F                 db    0
.eh_frame:0000000000008D20                 db 0A8h
.eh_frame:0000000000008D21                 db  0Ah
.eh_frame:0000000000008D22                 db    0
.eh_frame:0000000000008D23                 db    0
.eh_frame:0000000000008D24                 db 0FCh
.eh_frame:0000000000008D25                 db 0CBh
.eh_frame:0000000000008D26                 db 0FFh
.eh_frame:0000000000008D27                 db 0FFh
.eh_frame:0000000000008D28                 db  93h
.eh_frame:0000000000008D29                 db    0
.eh_frame:0000000000008D2A                 db    0
.eh_frame:0000000000008D2B                 db    0
.eh_frame:0000000000008D2C                 db    0
.eh_frame:0000000000008D2D                 db  48h ; H
.eh_frame:0000000000008D2E                 db  0Eh
.eh_frame:0000000000008D2F                 db  10h
.eh_frame:0000000000008D30                 db  8Ch
.eh_frame:0000000000008D31                 db    2
.eh_frame:0000000000008D32                 db  48h ; H
.eh_frame:0000000000008D33                 db  0Eh
.eh_frame:0000000000008D34                 db  18h
.eh_frame:0000000000008D35                 db  86h
.eh_frame:0000000000008D36                 db    3
.eh_frame:0000000000008D37                 db  41h ; A
.eh_frame:0000000000008D38                 db  0Eh
.eh_frame:0000000000008D39                 db  20h
.eh_frame:0000000000008D3A                 db  83h
.eh_frame:0000000000008D3B                 db    4
.eh_frame:0000000000008D3C                 db    2
.eh_frame:0000000000008D3D                 db  74h ; t
.eh_frame:0000000000008D3E                 db  0Eh
.eh_frame:0000000000008D3F                 db  18h
.eh_frame:0000000000008D40                 db  4Bh ; K
.eh_frame:0000000000008D41                 db  0Eh
.eh_frame:0000000000008D42                 db  10h
.eh_frame:0000000000008D43                 db  42h ; B
.eh_frame:0000000000008D44                 db  0Eh
.eh_frame:0000000000008D45                 db    8
.eh_frame:0000000000008D46                 db    0
.eh_frame:0000000000008D47                 db    0
.eh_frame:0000000000008D48                 db  10h
.eh_frame:0000000000008D49                 db    0
.eh_frame:0000000000008D4A                 db    0
.eh_frame:0000000000008D4B                 db    0
.eh_frame:0000000000008D4C                 db 0D4h
.eh_frame:0000000000008D4D                 db  0Ah
.eh_frame:0000000000008D4E                 db    0
.eh_frame:0000000000008D4F                 db    0
.eh_frame:0000000000008D50                 db  70h ; p
.eh_frame:0000000000008D51                 db 0CCh
.eh_frame:0000000000008D52                 db 0FFh
.eh_frame:0000000000008D53                 db 0FFh
.eh_frame:0000000000008D54                 db  13h
.eh_frame:0000000000008D55                 db    0
.eh_frame:0000000000008D56                 db    0
.eh_frame:0000000000008D57                 db    0
.eh_frame:0000000000008D58                 db    0
.eh_frame:0000000000008D59                 db    0
.eh_frame:0000000000008D5A                 db    0
.eh_frame:0000000000008D5B                 db    0
.eh_frame:0000000000008D5C                 db  10h
.eh_frame:0000000000008D5D                 db    0
.eh_frame:0000000000008D5E                 db    0
.eh_frame:0000000000008D5F                 db    0
.eh_frame:0000000000008D60                 db 0E8h
.eh_frame:0000000000008D61                 db  0Ah
.eh_frame:0000000000008D62                 db    0
.eh_frame:0000000000008D63                 db    0
.eh_frame:0000000000008D64                 db  7Ch ; |
.eh_frame:0000000000008D65                 db 0CCh
.eh_frame:0000000000008D66                 db 0FFh
.eh_frame:0000000000008D67                 db 0FFh
.eh_frame:0000000000008D68                 db  0Ch
.eh_frame:0000000000008D69                 db    0
.eh_frame:0000000000008D6A                 db    0
.eh_frame:0000000000008D6B                 db    0
.eh_frame:0000000000008D6C                 db    0
.eh_frame:0000000000008D6D                 db    0
.eh_frame:0000000000008D6E                 db    0
.eh_frame:0000000000008D6F                 db    0
.eh_frame:0000000000008D70                 db  10h
.eh_frame:0000000000008D71                 db    0
.eh_frame:0000000000008D72                 db    0
.eh_frame:0000000000008D73                 db    0
.eh_frame:0000000000008D74                 db 0FCh
.eh_frame:0000000000008D75                 db  0Ah
.eh_frame:0000000000008D76                 db    0
.eh_frame:0000000000008D77                 db    0
.eh_frame:0000000000008D78                 db  78h ; x
.eh_frame:0000000000008D79                 db 0CCh
.eh_frame:0000000000008D7A                 db 0FFh
.eh_frame:0000000000008D7B                 db 0FFh
.eh_frame:0000000000008D7C                 db  18h
.eh_frame:0000000000008D7D                 db    0
.eh_frame:0000000000008D7E                 db    0
.eh_frame:0000000000008D7F                 db    0
.eh_frame:0000000000008D80                 db    0
.eh_frame:0000000000008D81                 db    0
.eh_frame:0000000000008D82                 db    0
.eh_frame:0000000000008D83                 db    0
.eh_frame:0000000000008D84                 db  10h
.eh_frame:0000000000008D85                 db    0
.eh_frame:0000000000008D86                 db    0
.eh_frame:0000000000008D87                 db    0
.eh_frame:0000000000008D88                 db  10h
.eh_frame:0000000000008D89                 db  0Bh
.eh_frame:0000000000008D8A                 db    0
.eh_frame:0000000000008D8B                 db    0
.eh_frame:0000000000008D8C                 db  84h
.eh_frame:0000000000008D8D                 db 0CCh
.eh_frame:0000000000008D8E                 db 0FFh
.eh_frame:0000000000008D8F                 db 0FFh
.eh_frame:0000000000008D90                 db  14h
.eh_frame:0000000000008D91                 db    0
.eh_frame:0000000000008D92                 db    0
.eh_frame:0000000000008D93                 db    0
.eh_frame:0000000000008D94                 db    0
.eh_frame:0000000000008D95                 db    0
.eh_frame:0000000000008D96                 db    0
.eh_frame:0000000000008D97                 db    0
.eh_frame:0000000000008D98                 db  18h
.eh_frame:0000000000008D99                 db    0
.eh_frame:0000000000008D9A                 db    0
.eh_frame:0000000000008D9B                 db    0
.eh_frame:0000000000008D9C                 db  24h ; $
.eh_frame:0000000000008D9D                 db  0Bh
.eh_frame:0000000000008D9E                 db    0
.eh_frame:0000000000008D9F                 db    0
.eh_frame:0000000000008DA0                 db  90h
.eh_frame:0000000000008DA1                 db 0CCh
.eh_frame:0000000000008DA2                 db 0FFh
.eh_frame:0000000000008DA3                 db 0FFh
.eh_frame:0000000000008DA4                 db  8Eh
.eh_frame:0000000000008DA5                 db    0
.eh_frame:0000000000008DA6                 db    0
.eh_frame:0000000000008DA7                 db    0
.eh_frame:0000000000008DA8                 db    0
.eh_frame:0000000000008DA9                 db  44h ; D
.eh_frame:0000000000008DAA                 db  0Eh
.eh_frame:0000000000008DAB                 db  50h ; P
.eh_frame:0000000000008DAC                 db    2
.eh_frame:0000000000008DAD                 db  7Fh ; 
.eh_frame:0000000000008DAE                 db  0Ah
.eh_frame:0000000000008DAF                 db  0Eh
.eh_frame:0000000000008DB0                 db    8
.eh_frame:0000000000008DB1                 db  41h ; A
.eh_frame:0000000000008DB2                 db  0Bh
.eh_frame:0000000000008DB3                 db    0
.eh_frame:0000000000008DB4                 db  18h
.eh_frame:0000000000008DB5                 db    0
.eh_frame:0000000000008DB6                 db    0
.eh_frame:0000000000008DB7                 db    0
.eh_frame:0000000000008DB8                 db  40h ; @
.eh_frame:0000000000008DB9                 db  0Bh
.eh_frame:0000000000008DBA                 db    0
.eh_frame:0000000000008DBB                 db    0
.eh_frame:0000000000008DBC                 db    4
.eh_frame:0000000000008DBD                 db 0CDh
.eh_frame:0000000000008DBE                 db 0FFh
.eh_frame:0000000000008DBF                 db 0FFh
.eh_frame:0000000000008DC0                 db  8Ah
.eh_frame:0000000000008DC1                 db    0
.eh_frame:0000000000008DC2                 db    0
.eh_frame:0000000000008DC3                 db    0
.eh_frame:0000000000008DC4                 db    0
.eh_frame:0000000000008DC5                 db  44h ; D
.eh_frame:0000000000008DC6                 db  0Eh
.eh_frame:0000000000008DC7                 db  50h ; P
.eh_frame:0000000000008DC8                 db    2
.eh_frame:0000000000008DC9                 db  7Bh ; {
.eh_frame:0000000000008DCA                 db  0Ah
.eh_frame:0000000000008DCB                 db  0Eh
.eh_frame:0000000000008DCC                 db    8
.eh_frame:0000000000008DCD                 db  41h ; A
.eh_frame:0000000000008DCE                 db  0Bh
.eh_frame:0000000000008DCF                 db    0
.eh_frame:0000000000008DD0                 db  10h
.eh_frame:0000000000008DD1                 db    0
.eh_frame:0000000000008DD2                 db    0
.eh_frame:0000000000008DD3                 db    0
.eh_frame:0000000000008DD4                 db  5Ch ; \
.eh_frame:0000000000008DD5                 db  0Bh
.eh_frame:0000000000008DD6                 db    0
.eh_frame:0000000000008DD7                 db    0
.eh_frame:0000000000008DD8                 db  78h ; x
.eh_frame:0000000000008DD9                 db 0CDh
.eh_frame:0000000000008DDA                 db 0FFh
.eh_frame:0000000000008DDB                 db 0FFh
.eh_frame:0000000000008DDC                 db  0Ch
.eh_frame:0000000000008DDD                 db    0
.eh_frame:0000000000008DDE                 db    0
.eh_frame:0000000000008DDF                 db    0
.eh_frame:0000000000008DE0                 db    0
.eh_frame:0000000000008DE1                 db    0
.eh_frame:0000000000008DE2                 db    0
.eh_frame:0000000000008DE3                 db    0
.eh_frame:0000000000008DE4                 db  10h
.eh_frame:0000000000008DE5                 db    0
.eh_frame:0000000000008DE6                 db    0
.eh_frame:0000000000008DE7                 db    0
.eh_frame:0000000000008DE8                 db  70h ; p
.eh_frame:0000000000008DE9                 db  0Bh
.eh_frame:0000000000008DEA                 db    0
.eh_frame:0000000000008DEB                 db    0
.eh_frame:0000000000008DEC                 db  74h ; t
.eh_frame:0000000000008DED                 db 0CDh
.eh_frame:0000000000008DEE                 db 0FFh
.eh_frame:0000000000008DEF                 db 0FFh
.eh_frame:0000000000008DF0                 db  0Fh
.eh_frame:0000000000008DF1                 db    0
.eh_frame:0000000000008DF2                 db    0
.eh_frame:0000000000008DF3                 db    0
.eh_frame:0000000000008DF4                 db    0
.eh_frame:0000000000008DF5                 db    0
.eh_frame:0000000000008DF6                 db    0
.eh_frame:0000000000008DF7                 db    0
.eh_frame:0000000000008DF8                 db  18h
.eh_frame:0000000000008DF9                 db    0
.eh_frame:0000000000008DFA                 db    0
.eh_frame:0000000000008DFB                 db    0
.eh_frame:0000000000008DFC                 db  84h
.eh_frame:0000000000008DFD                 db  0Bh
.eh_frame:0000000000008DFE                 db    0
.eh_frame:0000000000008DFF                 db    0
.eh_frame:0000000000008E00                 db  70h ; p
.eh_frame:0000000000008E01                 db 0CDh
.eh_frame:0000000000008E02                 db 0FFh
.eh_frame:0000000000008E03                 db 0FFh
.eh_frame:0000000000008E04                 db  98h
.eh_frame:0000000000008E05                 db    0
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db    0
.eh_frame:0000000000008E09                 db  44h ; D
.eh_frame:0000000000008E0A                 db  0Eh
.eh_frame:0000000000008E0B                 db  50h ; P
.eh_frame:0000000000008E0C                 db    2
.eh_frame:0000000000008E0D                 db  8Eh
.eh_frame:0000000000008E0E                 db  0Ah
.eh_frame:0000000000008E0F                 db  0Eh
.eh_frame:0000000000008E10                 db    8
.eh_frame:0000000000008E11                 db  41h ; A
.eh_frame:0000000000008E12                 db  0Bh
.eh_frame:0000000000008E13                 db    0
.eh_frame:0000000000008E14                 db  10h
.eh_frame:0000000000008E15                 db    0
.eh_frame:0000000000008E16                 db    0
.eh_frame:0000000000008E17                 db    0
.eh_frame:0000000000008E18                 db 0A0h
.eh_frame:0000000000008E19                 db  0Bh
.eh_frame:0000000000008E1A                 db    0
.eh_frame:0000000000008E1B                 db    0
.eh_frame:0000000000008E1C                 db 0F4h
.eh_frame:0000000000008E1D                 db 0CDh
.eh_frame:0000000000008E1E                 db 0FFh
.eh_frame:0000000000008E1F                 db 0FFh
.eh_frame:0000000000008E20                 db  10h
.eh_frame:0000000000008E21                 db    0
.eh_frame:0000000000008E22                 db    0
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db    0
.eh_frame:0000000000008E25                 db    0
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db  10h
.eh_frame:0000000000008E29                 db    0
.eh_frame:0000000000008E2A                 db    0
.eh_frame:0000000000008E2B                 db    0
.eh_frame:0000000000008E2C                 db 0B4h
.eh_frame:0000000000008E2D                 db  0Bh
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db 0F0h
.eh_frame:0000000000008E31                 db 0CDh
.eh_frame:0000000000008E32                 db 0FFh
.eh_frame:0000000000008E33                 db 0FFh
.eh_frame:0000000000008E34                 db  11h
.eh_frame:0000000000008E35                 db    0
.eh_frame:0000000000008E36                 db    0
.eh_frame:0000000000008E37                 db    0
.eh_frame:0000000000008E38                 db    0
.eh_frame:0000000000008E39                 db    0
.eh_frame:0000000000008E3A                 db    0
.eh_frame:0000000000008E3B                 db    0
.eh_frame:0000000000008E3C                 db  10h
.eh_frame:0000000000008E3D                 db    0
.eh_frame:0000000000008E3E                 db    0
.eh_frame:0000000000008E3F                 db    0
.eh_frame:0000000000008E40                 db 0C8h
.eh_frame:0000000000008E41                 db  0Bh
.eh_frame:0000000000008E42                 db    0
.eh_frame:0000000000008E43                 db    0
.eh_frame:0000000000008E44                 db 0FCh
.eh_frame:0000000000008E45                 db 0CDh
.eh_frame:0000000000008E46                 db 0FFh
.eh_frame:0000000000008E47                 db 0FFh
.eh_frame:0000000000008E48                 db  0Ah
.eh_frame:0000000000008E49                 db    0
.eh_frame:0000000000008E4A                 db    0
.eh_frame:0000000000008E4B                 db    0
.eh_frame:0000000000008E4C                 db    0
.eh_frame:0000000000008E4D                 db    0
.eh_frame:0000000000008E4E                 db    0
.eh_frame:0000000000008E4F                 db    0
.eh_frame:0000000000008E50                 db  18h
.eh_frame:0000000000008E51                 db    0
.eh_frame:0000000000008E52                 db    0
.eh_frame:0000000000008E53                 db    0
.eh_frame:0000000000008E54                 db 0DCh
.eh_frame:0000000000008E55                 db  0Bh
.eh_frame:0000000000008E56                 db    0
.eh_frame:0000000000008E57                 db    0
.eh_frame:0000000000008E58                 db 0F8h
.eh_frame:0000000000008E59                 db 0CDh
.eh_frame:0000000000008E5A                 db 0FFh
.eh_frame:0000000000008E5B                 db 0FFh
.eh_frame:0000000000008E5C                 db  8Eh
.eh_frame:0000000000008E5D                 db    0
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db    0
.eh_frame:0000000000008E61                 db  44h ; D
.eh_frame:0000000000008E62                 db  0Eh
.eh_frame:0000000000008E63                 db  50h ; P
.eh_frame:0000000000008E64                 db    2
.eh_frame:0000000000008E65                 db  7Fh ; 
.eh_frame:0000000000008E66                 db  0Ah
.eh_frame:0000000000008E67                 db  0Eh
.eh_frame:0000000000008E68                 db    8
.eh_frame:0000000000008E69                 db  41h ; A
.eh_frame:0000000000008E6A                 db  0Bh
.eh_frame:0000000000008E6B                 db    0
.eh_frame:0000000000008E6C                 db  18h
.eh_frame:0000000000008E6D                 db    0
.eh_frame:0000000000008E6E                 db    0
.eh_frame:0000000000008E6F                 db    0
.eh_frame:0000000000008E70                 db 0F8h
.eh_frame:0000000000008E71                 db  0Bh
.eh_frame:0000000000008E72                 db    0
.eh_frame:0000000000008E73                 db    0
.eh_frame:0000000000008E74                 db  6Ch ; l
.eh_frame:0000000000008E75                 db 0CEh
.eh_frame:0000000000008E76                 db 0FFh
.eh_frame:0000000000008E77                 db 0FFh
.eh_frame:0000000000008E78                 db  91h
.eh_frame:0000000000008E79                 db    0
.eh_frame:0000000000008E7A                 db    0
.eh_frame:0000000000008E7B                 db    0
.eh_frame:0000000000008E7C                 db    0
.eh_frame:0000000000008E7D                 db  44h ; D
.eh_frame:0000000000008E7E                 db  0Eh
.eh_frame:0000000000008E7F                 db  50h ; P
.eh_frame:0000000000008E80                 db    2
.eh_frame:0000000000008E81                 db  82h
.eh_frame:0000000000008E82                 db  0Ah
.eh_frame:0000000000008E83                 db  0Eh
.eh_frame:0000000000008E84                 db    8
.eh_frame:0000000000008E85                 db  41h ; A
.eh_frame:0000000000008E86                 db  0Bh
.eh_frame:0000000000008E87                 db    0
.eh_frame:0000000000008E88                 db  10h
.eh_frame:0000000000008E89                 db    0
.eh_frame:0000000000008E8A                 db    0
.eh_frame:0000000000008E8B                 db    0
.eh_frame:0000000000008E8C                 db  14h
.eh_frame:0000000000008E8D                 db  0Ch
.eh_frame:0000000000008E8E                 db    0
.eh_frame:0000000000008E8F                 db    0
.eh_frame:0000000000008E90                 db 0F0h
.eh_frame:0000000000008E91                 db 0CEh
.eh_frame:0000000000008E92                 db 0FFh
.eh_frame:0000000000008E93                 db 0FFh
.eh_frame:0000000000008E94                 db  0Ch
.eh_frame:0000000000008E95                 db    0
.eh_frame:0000000000008E96                 db    0
.eh_frame:0000000000008E97                 db    0
.eh_frame:0000000000008E98                 db    0
.eh_frame:0000000000008E99                 db    0
.eh_frame:0000000000008E9A                 db    0
.eh_frame:0000000000008E9B                 db    0
.eh_frame:0000000000008E9C                 db  10h
.eh_frame:0000000000008E9D                 db    0
.eh_frame:0000000000008E9E                 db    0
.eh_frame:0000000000008E9F                 db    0
.eh_frame:0000000000008EA0                 db  28h ; (
.eh_frame:0000000000008EA1                 db  0Ch
.eh_frame:0000000000008EA2                 db    0
.eh_frame:0000000000008EA3                 db    0
.eh_frame:0000000000008EA4                 db 0ECh
.eh_frame:0000000000008EA5                 db 0CEh
.eh_frame:0000000000008EA6                 db 0FFh
.eh_frame:0000000000008EA7                 db 0FFh
.eh_frame:0000000000008EA8                 db  17h
.eh_frame:0000000000008EA9                 db    0
.eh_frame:0000000000008EAA                 db    0
.eh_frame:0000000000008EAB                 db    0
.eh_frame:0000000000008EAC                 db    0
.eh_frame:0000000000008EAD                 db    0
.eh_frame:0000000000008EAE                 db    0
.eh_frame:0000000000008EAF                 db    0
.eh_frame:0000000000008EB0                 db  10h
.eh_frame:0000000000008EB1                 db    0
.eh_frame:0000000000008EB2                 db    0
.eh_frame:0000000000008EB3                 db    0
.eh_frame:0000000000008EB4                 db  3Ch ; <
.eh_frame:0000000000008EB5                 db  0Ch
.eh_frame:0000000000008EB6                 db    0
.eh_frame:0000000000008EB7                 db    0
.eh_frame:0000000000008EB8                 db 0F8h
.eh_frame:0000000000008EB9                 db 0CEh
.eh_frame:0000000000008EBA                 db 0FFh
.eh_frame:0000000000008EBB                 db 0FFh
.eh_frame:0000000000008EBC                 db  13h
.eh_frame:0000000000008EBD                 db    0
.eh_frame:0000000000008EBE                 db    0
.eh_frame:0000000000008EBF                 db    0
.eh_frame:0000000000008EC0                 db    0
.eh_frame:0000000000008EC1                 db    0
.eh_frame:0000000000008EC2                 db    0
.eh_frame:0000000000008EC3                 db    0
.eh_frame:0000000000008EC4                 db  10h
.eh_frame:0000000000008EC5                 db    0
.eh_frame:0000000000008EC6                 db    0
.eh_frame:0000000000008EC7                 db    0
.eh_frame:0000000000008EC8                 db  50h ; P
.eh_frame:0000000000008EC9                 db  0Ch
.eh_frame:0000000000008ECA                 db    0
.eh_frame:0000000000008ECB                 db    0
.eh_frame:0000000000008ECC                 db    4
.eh_frame:0000000000008ECD                 db 0CFh
.eh_frame:0000000000008ECE                 db 0FFh
.eh_frame:0000000000008ECF                 db 0FFh
.eh_frame:0000000000008ED0                 db  0Ch
.eh_frame:0000000000008ED1                 db    0
.eh_frame:0000000000008ED2                 db    0
.eh_frame:0000000000008ED3                 db    0
.eh_frame:0000000000008ED4                 db    0
.eh_frame:0000000000008ED5                 db    0
.eh_frame:0000000000008ED6                 db    0
.eh_frame:0000000000008ED7                 db    0
.eh_frame:0000000000008ED8                 db  10h
.eh_frame:0000000000008ED9                 db    0
.eh_frame:0000000000008EDA                 db    0
.eh_frame:0000000000008EDB                 db    0
.eh_frame:0000000000008EDC                 db  64h ; d
.eh_frame:0000000000008EDD                 db  0Ch
.eh_frame:0000000000008EDE                 db    0
.eh_frame:0000000000008EDF                 db    0
.eh_frame:0000000000008EE0                 db    0
.eh_frame:0000000000008EE1                 db 0CFh
.eh_frame:0000000000008EE2                 db 0FFh
.eh_frame:0000000000008EE3                 db 0FFh
.eh_frame:0000000000008EE4                 db  14h
.eh_frame:0000000000008EE5                 db    0
.eh_frame:0000000000008EE6                 db    0
.eh_frame:0000000000008EE7                 db    0
.eh_frame:0000000000008EE8                 db    0
.eh_frame:0000000000008EE9                 db    0
.eh_frame:0000000000008EEA                 db    0
.eh_frame:0000000000008EEB                 db    0
.eh_frame:0000000000008EEC                 db  10h
.eh_frame:0000000000008EED                 db    0
.eh_frame:0000000000008EEE                 db    0
.eh_frame:0000000000008EEF                 db    0
.eh_frame:0000000000008EF0                 db  78h ; x
.eh_frame:0000000000008EF1                 db  0Ch
.eh_frame:0000000000008EF2                 db    0
.eh_frame:0000000000008EF3                 db    0
.eh_frame:0000000000008EF4                 db  0Ch
.eh_frame:0000000000008EF5                 db 0CFh
.eh_frame:0000000000008EF6                 db 0FFh
.eh_frame:0000000000008EF7                 db 0FFh
.eh_frame:0000000000008EF8                 db  13h
.eh_frame:0000000000008EF9                 db    0
.eh_frame:0000000000008EFA                 db    0
.eh_frame:0000000000008EFB                 db    0
.eh_frame:0000000000008EFC                 db    0
.eh_frame:0000000000008EFD                 db    0
.eh_frame:0000000000008EFE                 db    0
.eh_frame:0000000000008EFF                 db    0
.eh_frame:0000000000008F00                 db  14h
.eh_frame:0000000000008F01                 db    0
.eh_frame:0000000000008F02                 db    0
.eh_frame:0000000000008F03                 db    0
.eh_frame:0000000000008F04                 db  8Ch
.eh_frame:0000000000008F05                 db  0Ch
.eh_frame:0000000000008F06                 db    0
.eh_frame:0000000000008F07                 db    0
.eh_frame:0000000000008F08                 db  18h
.eh_frame:0000000000008F09                 db 0CFh
.eh_frame:0000000000008F0A                 db 0FFh
.eh_frame:0000000000008F0B                 db 0FFh
.eh_frame:0000000000008F0C                 db  18h
.eh_frame:0000000000008F0D                 db    0
.eh_frame:0000000000008F0E                 db    0
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db    0
.eh_frame:0000000000008F11                 db    0
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14                 db    0
.eh_frame:0000000000008F15                 db    0
.eh_frame:0000000000008F16                 db    0
.eh_frame:0000000000008F17                 db    0
.eh_frame:0000000000008F18                 db  38h ; 8
.eh_frame:0000000000008F19                 db    0
.eh_frame:0000000000008F1A                 db    0
.eh_frame:0000000000008F1B                 db    0
.eh_frame:0000000000008F1C                 db 0A4h
.eh_frame:0000000000008F1D                 db  0Ch
.eh_frame:0000000000008F1E                 db    0
.eh_frame:0000000000008F1F                 db    0
.eh_frame:0000000000008F20                 db  20h
.eh_frame:0000000000008F21                 db 0CFh
.eh_frame:0000000000008F22                 db 0FFh
.eh_frame:0000000000008F23                 db 0FFh
.eh_frame:0000000000008F24                 db  27h ; '
.eh_frame:0000000000008F25                 db    1
.eh_frame:0000000000008F26                 db    0
.eh_frame:0000000000008F27                 db    0
.eh_frame:0000000000008F28                 db    0
.eh_frame:0000000000008F29                 db  42h ; B
.eh_frame:0000000000008F2A                 db  0Eh
.eh_frame:0000000000008F2B                 db  10h
.eh_frame:0000000000008F2C                 db  8Dh
.eh_frame:0000000000008F2D                 db    2
.eh_frame:0000000000008F2E                 db  42h ; B
.eh_frame:0000000000008F2F                 db  0Eh
.eh_frame:0000000000008F30                 db  18h
.eh_frame:0000000000008F31                 db  8Ch
.eh_frame:0000000000008F32                 db    3
.eh_frame:0000000000008F33                 db  44h ; D
.eh_frame:0000000000008F34                 db  0Eh
.eh_frame:0000000000008F35                 db  20h
.eh_frame:0000000000008F36                 db  86h
.eh_frame:0000000000008F37                 db    4
.eh_frame:0000000000008F38                 db  41h ; A
.eh_frame:0000000000008F39                 db  0Eh
.eh_frame:0000000000008F3A                 db  28h ; (
.eh_frame:0000000000008F3B                 db  83h
.eh_frame:0000000000008F3C                 db    5
.eh_frame:0000000000008F3D                 db  4Fh ; O
.eh_frame:0000000000008F3E                 db  0Eh
.eh_frame:0000000000008F3F                 db 0E0h
.eh_frame:0000000000008F40                 db    2
.eh_frame:0000000000008F41                 db    2
.eh_frame:0000000000008F42                 db 0B5h
.eh_frame:0000000000008F43                 db  0Ah
.eh_frame:0000000000008F44                 db  0Eh
.eh_frame:0000000000008F45                 db  28h ; (
.eh_frame:0000000000008F46                 db  41h ; A
.eh_frame:0000000000008F47                 db  0Eh
.eh_frame:0000000000008F48                 db  20h
.eh_frame:0000000000008F49                 db  41h ; A
.eh_frame:0000000000008F4A                 db  0Eh
.eh_frame:0000000000008F4B                 db  18h
.eh_frame:0000000000008F4C                 db  42h ; B
.eh_frame:0000000000008F4D                 db  0Eh
.eh_frame:0000000000008F4E                 db  10h
.eh_frame:0000000000008F4F                 db  42h ; B
.eh_frame:0000000000008F50                 db  0Eh
.eh_frame:0000000000008F51                 db    8
.eh_frame:0000000000008F52                 db  45h ; E
.eh_frame:0000000000008F53                 db  0Bh
.eh_frame:0000000000008F54                 db  5Ch ; \
.eh_frame:0000000000008F55                 db    0
.eh_frame:0000000000008F56                 db    0
.eh_frame:0000000000008F57                 db    0
.eh_frame:0000000000008F58                 db 0E0h
.eh_frame:0000000000008F59                 db  0Ch
.eh_frame:0000000000008F5A                 db    0
.eh_frame:0000000000008F5B                 db    0
.eh_frame:0000000000008F5C                 db  14h
.eh_frame:0000000000008F5D                 db 0D0h
.eh_frame:0000000000008F5E                 db 0FFh
.eh_frame:0000000000008F5F                 db 0FFh
.eh_frame:0000000000008F60                 db  92h
.eh_frame:0000000000008F61                 db    0
.eh_frame:0000000000008F62                 db    0
.eh_frame:0000000000008F63                 db    0
.eh_frame:0000000000008F64                 db    0
.eh_frame:0000000000008F65                 db  42h ; B
.eh_frame:0000000000008F66                 db  0Eh
.eh_frame:0000000000008F67                 db  10h
.eh_frame:0000000000008F68                 db  8Fh
.eh_frame:0000000000008F69                 db    2
.eh_frame:0000000000008F6A                 db  42h ; B
.eh_frame:0000000000008F6B                 db  0Eh
.eh_frame:0000000000008F6C                 db  18h
.eh_frame:0000000000008F6D                 db  8Eh
.eh_frame:0000000000008F6E                 db    3
.eh_frame:0000000000008F6F                 db  45h ; E
.eh_frame:0000000000008F70                 db  0Eh
.eh_frame:0000000000008F71                 db  20h
.eh_frame:0000000000008F72                 db  8Dh
.eh_frame:0000000000008F73                 db    4
.eh_frame:0000000000008F74                 db  42h ; B
.eh_frame:0000000000008F75                 db  0Eh
.eh_frame:0000000000008F76                 db  28h ; (
.eh_frame:0000000000008F77                 db  8Ch
.eh_frame:0000000000008F78                 db    5
.eh_frame:0000000000008F79                 db  41h ; A
.eh_frame:0000000000008F7A                 db  0Eh
.eh_frame:0000000000008F7B                 db  30h ; 0
.eh_frame:0000000000008F7C                 db  86h
.eh_frame:0000000000008F7D                 db    6
.eh_frame:0000000000008F7E                 db  41h ; A
.eh_frame:0000000000008F7F                 db  0Eh
.eh_frame:0000000000008F80                 db  38h ; 8
.eh_frame:0000000000008F81                 db  83h
.eh_frame:0000000000008F82                 db    7
.eh_frame:0000000000008F83                 db  4Ah ; J
.eh_frame:0000000000008F84                 db  0Eh
.eh_frame:0000000000008F85                 db  50h ; P
.eh_frame:0000000000008F86                 db  76h ; v
.eh_frame:0000000000008F87                 db  0Ah
.eh_frame:0000000000008F88                 db  0Eh
.eh_frame:0000000000008F89                 db  38h ; 8
.eh_frame:0000000000008F8A                 db  43h ; C
.eh_frame:0000000000008F8B                 db  0Eh
.eh_frame:0000000000008F8C                 db  30h ; 0
.eh_frame:0000000000008F8D                 db  41h ; A
.eh_frame:0000000000008F8E                 db  0Eh
.eh_frame:0000000000008F8F                 db  28h ; (
.eh_frame:0000000000008F90                 db  42h ; B
.eh_frame:0000000000008F91                 db  0Eh
.eh_frame:0000000000008F92                 db  20h
.eh_frame:0000000000008F93                 db  42h ; B
.eh_frame:0000000000008F94                 db  0Eh
.eh_frame:0000000000008F95                 db  18h
.eh_frame:0000000000008F96                 db  42h ; B
.eh_frame:0000000000008F97                 db  0Eh
.eh_frame:0000000000008F98                 db  10h
.eh_frame:0000000000008F99                 db  42h ; B
.eh_frame:0000000000008F9A                 db  0Eh
.eh_frame:0000000000008F9B                 db    8
.eh_frame:0000000000008F9C                 db  47h ; G
.eh_frame:0000000000008F9D                 db  0Bh
.eh_frame:0000000000008F9E                 db  5Ah ; Z
.eh_frame:0000000000008F9F                 db  0Eh
.eh_frame:0000000000008FA0                 db  38h ; 8
.eh_frame:0000000000008FA1                 db  4Ah ; J
.eh_frame:0000000000008FA2                 db  0Eh
.eh_frame:0000000000008FA3                 db  30h ; 0
.eh_frame:0000000000008FA4                 db  41h ; A
.eh_frame:0000000000008FA5                 db  0Eh
.eh_frame:0000000000008FA6                 db  28h ; (
.eh_frame:0000000000008FA7                 db  42h ; B
.eh_frame:0000000000008FA8                 db  0Eh
.eh_frame:0000000000008FA9                 db  20h
.eh_frame:0000000000008FAA                 db  42h ; B
.eh_frame:0000000000008FAB                 db  0Eh
.eh_frame:0000000000008FAC                 db  18h
.eh_frame:0000000000008FAD                 db  42h ; B
.eh_frame:0000000000008FAE                 db  0Eh
.eh_frame:0000000000008FAF                 db  10h
.eh_frame:0000000000008FB0                 db  42h ; B
.eh_frame:0000000000008FB1                 db  0Eh
.eh_frame:0000000000008FB2                 db    8
.eh_frame:0000000000008FB3                 db    0
.eh_frame:0000000000008FB4                 db  10h
.eh_frame:0000000000008FB5                 db    0
.eh_frame:0000000000008FB6                 db    0
.eh_frame:0000000000008FB7                 db    0
.eh_frame:0000000000008FB8                 db  40h ; @
.eh_frame:0000000000008FB9                 db  0Dh
.eh_frame:0000000000008FBA                 db    0
.eh_frame:0000000000008FBB                 db    0
.eh_frame:0000000000008FBC                 db  54h ; T
.eh_frame:0000000000008FBD                 db 0D0h
.eh_frame:0000000000008FBE                 db 0FFh
.eh_frame:0000000000008FBF                 db 0FFh
.eh_frame:0000000000008FC0                 db  12h
.eh_frame:0000000000008FC1                 db    0
.eh_frame:0000000000008FC2                 db    0
.eh_frame:0000000000008FC3                 db    0
.eh_frame:0000000000008FC4                 db    0
.eh_frame:0000000000008FC5                 db    0
.eh_frame:0000000000008FC6                 db    0
.eh_frame:0000000000008FC7                 db    0
.eh_frame:0000000000008FC8                 db  10h
.eh_frame:0000000000008FC9                 db    1
.eh_frame:0000000000008FCA                 db    0
.eh_frame:0000000000008FCB                 db    0
.eh_frame:0000000000008FCC                 db  54h ; T
.eh_frame:0000000000008FCD                 db  0Dh
.eh_frame:0000000000008FCE                 db    0
.eh_frame:0000000000008FCF                 db    0
.eh_frame:0000000000008FD0                 db  60h ; `
.eh_frame:0000000000008FD1                 db 0D0h
.eh_frame:0000000000008FD2                 db 0FFh
.eh_frame:0000000000008FD3                 db 0FFh
.eh_frame:0000000000008FD4                 db  17h
.eh_frame:0000000000008FD5                 db    4
.eh_frame:0000000000008FD6                 db    0
.eh_frame:0000000000008FD7                 db    0
.eh_frame:0000000000008FD8                 db    0
.eh_frame:0000000000008FD9                 db  42h ; B
.eh_frame:0000000000008FDA                 db  0Eh
.eh_frame:0000000000008FDB                 db  10h
.eh_frame:0000000000008FDC                 db  8Fh
.eh_frame:0000000000008FDD                 db    2
.eh_frame:0000000000008FDE                 db  42h ; B
.eh_frame:0000000000008FDF                 db  0Eh
.eh_frame:0000000000008FE0                 db  18h
.eh_frame:0000000000008FE1                 db  8Eh
.eh_frame:0000000000008FE2                 db    3
.eh_frame:0000000000008FE3                 db  42h ; B
.eh_frame:0000000000008FE4                 db  0Eh
.eh_frame:0000000000008FE5                 db  20h
.eh_frame:0000000000008FE6                 db  8Dh
.eh_frame:0000000000008FE7                 db    4
.eh_frame:0000000000008FE8                 db  42h ; B
.eh_frame:0000000000008FE9                 db  0Eh
.eh_frame:0000000000008FEA                 db  28h ; (
.eh_frame:0000000000008FEB                 db  8Ch
.eh_frame:0000000000008FEC                 db    5
.eh_frame:0000000000008FED                 db  44h ; D
.eh_frame:0000000000008FEE                 db  0Eh
.eh_frame:0000000000008FEF                 db  30h ; 0
.eh_frame:0000000000008FF0                 db  86h
.eh_frame:0000000000008FF1                 db    6
.eh_frame:0000000000008FF2                 db  41h ; A
.eh_frame:0000000000008FF3                 db  0Eh
.eh_frame:0000000000008FF4                 db  38h ; 8
.eh_frame:0000000000008FF5                 db  83h
.eh_frame:0000000000008FF6                 db    7
.eh_frame:0000000000008FF7                 db  4Ah ; J
.eh_frame:0000000000008FF8                 db  0Eh
.eh_frame:0000000000008FF9                 db  60h ; `
.eh_frame:0000000000008FFA                 db    2
.eh_frame:0000000000008FFB                 db 0DDh
.eh_frame:0000000000008FFC                 db  0Eh
.eh_frame:0000000000008FFD                 db  68h ; h
.eh_frame:0000000000008FFE                 db  57h ; W
.eh_frame:0000000000008FFF                 db  0Eh
.eh_frame:0000000000009000                 db  70h ; p
.eh_frame:0000000000009001                 db  42h ; B
.eh_frame:0000000000009002                 db  0Eh
.eh_frame:0000000000009003                 db  78h ; x
.eh_frame:0000000000009004                 db  42h ; B
.eh_frame:0000000000009005                 db  0Eh
.eh_frame:0000000000009006                 db  80h
.eh_frame:0000000000009007                 db    1
.eh_frame:0000000000009008                 db  42h ; B
.eh_frame:0000000000009009                 db  0Eh
.eh_frame:000000000000900A                 db  88h
.eh_frame:000000000000900B                 db    1
.eh_frame:000000000000900C                 db  42h ; B
.eh_frame:000000000000900D                 db  0Eh
.eh_frame:000000000000900E                 db  90h
.eh_frame:000000000000900F                 db    1
.eh_frame:0000000000009010                 db  53h ; S
.eh_frame:0000000000009011                 db  0Eh
.eh_frame:0000000000009012                 db  60h ; `
.eh_frame:0000000000009013                 db  44h ; D
.eh_frame:0000000000009014                 db  0Ah
.eh_frame:0000000000009015                 db  0Eh
.eh_frame:0000000000009016                 db  38h ; 8
.eh_frame:0000000000009017                 db  41h ; A
.eh_frame:0000000000009018                 db  0Eh
.eh_frame:0000000000009019                 db  30h ; 0
.eh_frame:000000000000901A                 db  41h ; A
.eh_frame:000000000000901B                 db  0Eh
.eh_frame:000000000000901C                 db  28h ; (
.eh_frame:000000000000901D                 db  42h ; B
.eh_frame:000000000000901E                 db  0Eh
.eh_frame:000000000000901F                 db  20h
.eh_frame:0000000000009020                 db  42h ; B
.eh_frame:0000000000009021                 db  0Eh
.eh_frame:0000000000009022                 db  18h
.eh_frame:0000000000009023                 db  42h ; B
.eh_frame:0000000000009024                 db  0Eh
.eh_frame:0000000000009025                 db  10h
.eh_frame:0000000000009026                 db  42h ; B
.eh_frame:0000000000009027                 db  0Eh
.eh_frame:0000000000009028                 db    8
.eh_frame:0000000000009029                 db  44h ; D
.eh_frame:000000000000902A                 db  0Bh
.eh_frame:000000000000902B                 db    2
.eh_frame:000000000000902C                 db  78h ; x
.eh_frame:000000000000902D                 db  0Ah
.eh_frame:000000000000902E                 db  0Eh
.eh_frame:000000000000902F                 db  68h ; h
.eh_frame:0000000000009030                 db  48h ; H
.eh_frame:0000000000009031                 db  0Bh
.eh_frame:0000000000009032                 db  5Ah ; Z
.eh_frame:0000000000009033                 db  0Ah
.eh_frame:0000000000009034                 db  0Eh
.eh_frame:0000000000009035                 db  38h ; 8
.eh_frame:0000000000009036                 db  47h ; G
.eh_frame:0000000000009037                 db  0Eh
.eh_frame:0000000000009038                 db  30h ; 0
.eh_frame:0000000000009039                 db  41h ; A
.eh_frame:000000000000903A                 db  0Eh
.eh_frame:000000000000903B                 db  28h ; (
.eh_frame:000000000000903C                 db  42h ; B
.eh_frame:000000000000903D                 db  0Eh
.eh_frame:000000000000903E                 db  20h
.eh_frame:000000000000903F                 db  42h ; B
.eh_frame:0000000000009040                 db  0Eh
.eh_frame:0000000000009041                 db  18h
.eh_frame:0000000000009042                 db  42h ; B
.eh_frame:0000000000009043                 db  0Eh
.eh_frame:0000000000009044                 db  10h
.eh_frame:0000000000009045                 db  42h ; B
.eh_frame:0000000000009046                 db  0Eh
.eh_frame:0000000000009047                 db    8
.eh_frame:0000000000009048                 db  56h ; V
.eh_frame:0000000000009049                 db  0Bh
.eh_frame:000000000000904A                 db  5Eh ; ^
.eh_frame:000000000000904B                 db  0Ah
.eh_frame:000000000000904C                 db  0Eh
.eh_frame:000000000000904D                 db  38h ; 8
.eh_frame:000000000000904E                 db  52h ; R
.eh_frame:000000000000904F                 db  0Eh
.eh_frame:0000000000009050                 db  30h ; 0
.eh_frame:0000000000009051                 db  41h ; A
.eh_frame:0000000000009052                 db  0Eh
.eh_frame:0000000000009053                 db  28h ; (
.eh_frame:0000000000009054                 db  42h ; B
.eh_frame:0000000000009055                 db  0Eh
.eh_frame:0000000000009056                 db  20h
.eh_frame:0000000000009057                 db  42h ; B
.eh_frame:0000000000009058                 db  0Eh
.eh_frame:0000000000009059                 db  18h
.eh_frame:000000000000905A                 db  42h ; B
.eh_frame:000000000000905B                 db  0Eh
.eh_frame:000000000000905C                 db  10h
.eh_frame:000000000000905D                 db  42h ; B
.eh_frame:000000000000905E                 db  0Eh
.eh_frame:000000000000905F                 db    8
.eh_frame:0000000000009060                 db  4Fh ; O
.eh_frame:0000000000009061                 db  0Bh
.eh_frame:0000000000009062                 db  62h ; b
.eh_frame:0000000000009063                 db  0Ah
.eh_frame:0000000000009064                 db  0Eh
.eh_frame:0000000000009065                 db  38h ; 8
.eh_frame:0000000000009066                 db  50h ; P
.eh_frame:0000000000009067                 db  0Eh
.eh_frame:0000000000009068                 db  30h ; 0
.eh_frame:0000000000009069                 db  41h ; A
.eh_frame:000000000000906A                 db  0Eh
.eh_frame:000000000000906B                 db  28h ; (
.eh_frame:000000000000906C                 db  42h ; B
.eh_frame:000000000000906D                 db  0Eh
.eh_frame:000000000000906E                 db  20h
.eh_frame:000000000000906F                 db  42h ; B
.eh_frame:0000000000009070                 db  0Eh
.eh_frame:0000000000009071                 db  18h
.eh_frame:0000000000009072                 db  42h ; B
.eh_frame:0000000000009073                 db  0Eh
.eh_frame:0000000000009074                 db  10h
.eh_frame:0000000000009075                 db  42h ; B
.eh_frame:0000000000009076                 db  0Eh
.eh_frame:0000000000009077                 db    8
.eh_frame:0000000000009078                 db  55h ; U
.eh_frame:0000000000009079                 db  0Bh
.eh_frame:000000000000907A                 db  66h ; f
.eh_frame:000000000000907B                 db  0Eh
.eh_frame:000000000000907C                 db  68h ; h
.eh_frame:000000000000907D                 db  42h ; B
.eh_frame:000000000000907E                 db  0Eh
.eh_frame:000000000000907F                 db  70h ; p
.eh_frame:0000000000009080                 db  5Ch ; \
.eh_frame:0000000000009081                 db  0Eh
.eh_frame:0000000000009082                 db  68h ; h
.eh_frame:0000000000009083                 db  41h ; A
.eh_frame:0000000000009084                 db  0Eh
.eh_frame:0000000000009085                 db  60h ; `
.eh_frame:0000000000009086                 db  44h ; D
.eh_frame:0000000000009087                 db  0Ah
.eh_frame:0000000000009088                 db  0Eh
.eh_frame:0000000000009089                 db  38h ; 8
.eh_frame:000000000000908A                 db  41h ; A
.eh_frame:000000000000908B                 db  0Eh
.eh_frame:000000000000908C                 db  30h ; 0
.eh_frame:000000000000908D                 db  41h ; A
.eh_frame:000000000000908E                 db  0Eh
.eh_frame:000000000000908F                 db  28h ; (
.eh_frame:0000000000009090                 db  42h ; B
.eh_frame:0000000000009091                 db  0Eh
.eh_frame:0000000000009092                 db  20h
.eh_frame:0000000000009093                 db  42h ; B
.eh_frame:0000000000009094                 db  0Eh
.eh_frame:0000000000009095                 db  18h
.eh_frame:0000000000009096                 db  42h ; B
.eh_frame:0000000000009097                 db  0Eh
.eh_frame:0000000000009098                 db  10h
.eh_frame:0000000000009099                 db  42h ; B
.eh_frame:000000000000909A                 db  0Eh
.eh_frame:000000000000909B                 db    8
.eh_frame:000000000000909C                 db  45h ; E
.eh_frame:000000000000909D                 db  0Bh
.eh_frame:000000000000909E                 db  68h ; h
.eh_frame:000000000000909F                 db  0Ah
.eh_frame:00000000000090A0                 db  0Eh
.eh_frame:00000000000090A1                 db  68h ; h
.eh_frame:00000000000090A2                 db  48h ; H
.eh_frame:00000000000090A3                 db  0Bh
.eh_frame:00000000000090A4                 db  72h ; r
.eh_frame:00000000000090A5                 db  0Eh
.eh_frame:00000000000090A6                 db  68h ; h
.eh_frame:00000000000090A7                 db  45h ; E
.eh_frame:00000000000090A8                 db  0Eh
.eh_frame:00000000000090A9                 db  70h ; p
.eh_frame:00000000000090AA                 db  42h ; B
.eh_frame:00000000000090AB                 db  0Eh
.eh_frame:00000000000090AC                 db  78h ; x
.eh_frame:00000000000090AD                 db  42h ; B
.eh_frame:00000000000090AE                 db  0Eh
.eh_frame:00000000000090AF                 db  80h
.eh_frame:00000000000090B0                 db    1
.eh_frame:00000000000090B1                 db  5Eh ; ^
.eh_frame:00000000000090B2                 db  0Eh
.eh_frame:00000000000090B3                 db  60h ; `
.eh_frame:00000000000090B4                 db  44h ; D
.eh_frame:00000000000090B5                 db  0Ah
.eh_frame:00000000000090B6                 db  0Eh
.eh_frame:00000000000090B7                 db  38h ; 8
.eh_frame:00000000000090B8                 db  41h ; A
.eh_frame:00000000000090B9                 db  0Eh
.eh_frame:00000000000090BA                 db  30h ; 0
.eh_frame:00000000000090BB                 db  41h ; A
.eh_frame:00000000000090BC                 db  0Eh
.eh_frame:00000000000090BD                 db  28h ; (
.eh_frame:00000000000090BE                 db  42h ; B
.eh_frame:00000000000090BF                 db  0Eh
.eh_frame:00000000000090C0                 db  20h
.eh_frame:00000000000090C1                 db  42h ; B
.eh_frame:00000000000090C2                 db  0Eh
.eh_frame:00000000000090C3                 db  18h
.eh_frame:00000000000090C4                 db  42h ; B
.eh_frame:00000000000090C5                 db  0Eh
.eh_frame:00000000000090C6                 db  10h
.eh_frame:00000000000090C7                 db  42h ; B
.eh_frame:00000000000090C8                 db  0Eh
.eh_frame:00000000000090C9                 db    8
.eh_frame:00000000000090CA                 db  41h ; A
.eh_frame:00000000000090CB                 db  0Bh
.eh_frame:00000000000090CC                 db  79h ; y
.eh_frame:00000000000090CD                 db  0Ah
.eh_frame:00000000000090CE                 db  0Eh
.eh_frame:00000000000090CF                 db  68h ; h
.eh_frame:00000000000090D0                 db  42h ; B
.eh_frame:00000000000090D1                 db  0Eh
.eh_frame:00000000000090D2                 db  70h ; p
.eh_frame:00000000000090D3                 db  42h ; B
.eh_frame:00000000000090D4                 db  0Eh
.eh_frame:00000000000090D5                 db  78h ; x
.eh_frame:00000000000090D6                 db  42h ; B
.eh_frame:00000000000090D7                 db  0Eh
.eh_frame:00000000000090D8                 db  80h
.eh_frame:00000000000090D9                 db    1
.eh_frame:00000000000090DA                 db  51h ; Q
.eh_frame:00000000000090DB                 db  0Bh
.eh_frame:00000000000090DC                 db  10h
.eh_frame:00000000000090DD                 db    0
.eh_frame:00000000000090DE                 db    0
.eh_frame:00000000000090DF                 db    0
.eh_frame:00000000000090E0                 db  68h ; h
.eh_frame:00000000000090E1                 db  0Eh
.eh_frame:00000000000090E2                 db    0
.eh_frame:00000000000090E3                 db    0
.eh_frame:00000000000090E4                 db  6Ch ; l
.eh_frame:00000000000090E5                 db 0D3h
.eh_frame:00000000000090E6                 db 0FFh
.eh_frame:00000000000090E7                 db 0FFh
.eh_frame:00000000000090E8                 db  20h
.eh_frame:00000000000090E9                 db    0
.eh_frame:00000000000090EA                 db    0
.eh_frame:00000000000090EB                 db    0
.eh_frame:00000000000090EC                 db    0
.eh_frame:00000000000090ED                 db    0
.eh_frame:00000000000090EE                 db    0
.eh_frame:00000000000090EF                 db    0
.eh_frame:00000000000090F0                 db  18h
.eh_frame:00000000000090F1                 db    0
.eh_frame:00000000000090F2                 db    0
.eh_frame:00000000000090F3                 db    0
.eh_frame:00000000000090F4                 db  7Ch ; |
.eh_frame:00000000000090F5                 db  0Eh
.eh_frame:00000000000090F6                 db    0
.eh_frame:00000000000090F7                 db    0
.eh_frame:00000000000090F8                 db  78h ; x
.eh_frame:00000000000090F9                 db 0D3h
.eh_frame:00000000000090FA                 db 0FFh
.eh_frame:00000000000090FB                 db 0FFh
.eh_frame:00000000000090FC                 db  78h ; x
.eh_frame:00000000000090FD                 db    0
.eh_frame:00000000000090FE                 db    0
.eh_frame:00000000000090FF                 db    0
.eh_frame:0000000000009100                 db    0
.eh_frame:0000000000009101                 db  44h ; D
.eh_frame:0000000000009102                 db  0Eh
.eh_frame:0000000000009103                 db  70h ; p
.eh_frame:0000000000009104                 db    2
.eh_frame:0000000000009105                 db  60h ; `
.eh_frame:0000000000009106                 db  0Ah
.eh_frame:0000000000009107                 db  0Eh
.eh_frame:0000000000009108                 db    8
.eh_frame:0000000000009109                 db  41h ; A
.eh_frame:000000000000910A                 db  0Bh
.eh_frame:000000000000910B                 db    0
.eh_frame:000000000000910C                 db  28h ; (
.eh_frame:000000000000910D                 db    0
.eh_frame:000000000000910E                 db    0
.eh_frame:000000000000910F                 db    0
.eh_frame:0000000000009110                 db  98h
.eh_frame:0000000000009111                 db  0Eh
.eh_frame:0000000000009112                 db    0
.eh_frame:0000000000009113                 db    0
.eh_frame:0000000000009114                 db 0DCh
.eh_frame:0000000000009115                 db 0D3h
.eh_frame:0000000000009116                 db 0FFh
.eh_frame:0000000000009117                 db 0FFh
.eh_frame:0000000000009118                 db 0D5h
.eh_frame:0000000000009119                 db    0
.eh_frame:000000000000911A                 db    0
.eh_frame:000000000000911B                 db    0
.eh_frame:000000000000911C                 db    0
.eh_frame:000000000000911D                 db  41h ; A
.eh_frame:000000000000911E                 db  0Eh
.eh_frame:000000000000911F                 db  10h
.eh_frame:0000000000009120                 db  86h
.eh_frame:0000000000009121                 db    2
.eh_frame:0000000000009122                 db  41h ; A
.eh_frame:0000000000009123                 db  0Eh
.eh_frame:0000000000009124                 db  18h
.eh_frame:0000000000009125                 db  83h
.eh_frame:0000000000009126                 db    3
.eh_frame:0000000000009127                 db  50h ; P
.eh_frame:0000000000009128                 db  0Eh
.eh_frame:0000000000009129                 db 0D0h
.eh_frame:000000000000912A                 db    1
.eh_frame:000000000000912B                 db    2
.eh_frame:000000000000912C                 db 0ABh
.eh_frame:000000000000912D                 db  0Ah
.eh_frame:000000000000912E                 db  0Eh
.eh_frame:000000000000912F                 db  18h
.eh_frame:0000000000009130                 db  41h ; A
.eh_frame:0000000000009131                 db  0Eh
.eh_frame:0000000000009132                 db  10h
.eh_frame:0000000000009133                 db  41h ; A
.eh_frame:0000000000009134                 db  0Eh
.eh_frame:0000000000009135                 db    8
.eh_frame:0000000000009136                 db  41h ; A
.eh_frame:0000000000009137                 db  0Bh
.eh_frame:0000000000009138                 db  1Ch
.eh_frame:0000000000009139                 db    0
.eh_frame:000000000000913A                 db    0
.eh_frame:000000000000913B                 db    0
.eh_frame:000000000000913C                 db 0C4h
.eh_frame:000000000000913D                 db  0Eh
.eh_frame:000000000000913E                 db    0
.eh_frame:000000000000913F                 db    0
.eh_frame:0000000000009140                 db  90h
.eh_frame:0000000000009141                 db 0D4h
.eh_frame:0000000000009142                 db 0FFh
.eh_frame:0000000000009143                 db 0FFh
.eh_frame:0000000000009144                 db  80h
.eh_frame:0000000000009145                 db    0
.eh_frame:0000000000009146                 db    0
.eh_frame:0000000000009147                 db    0
.eh_frame:0000000000009148                 db    0
.eh_frame:0000000000009149                 db  41h ; A
.eh_frame:000000000000914A                 db  0Eh
.eh_frame:000000000000914B                 db  10h
.eh_frame:000000000000914C                 db  83h
.eh_frame:000000000000914D                 db    2
.eh_frame:000000000000914E                 db    2
.eh_frame:000000000000914F                 db  7Ah ; z
.eh_frame:0000000000009150                 db  0Eh
.eh_frame:0000000000009151                 db    8
.eh_frame:0000000000009152                 db    0
.eh_frame:0000000000009153                 db    0
.eh_frame:0000000000009154                 db    0
.eh_frame:0000000000009155                 db    0
.eh_frame:0000000000009156                 db    0
.eh_frame:0000000000009157                 db    0
.eh_frame:0000000000009158                 db  18h
.eh_frame:0000000000009159                 db    0
.eh_frame:000000000000915A                 db    0
.eh_frame:000000000000915B                 db    0
.eh_frame:000000000000915C                 db 0E4h
.eh_frame:000000000000915D                 db  0Eh
.eh_frame:000000000000915E                 db    0
.eh_frame:000000000000915F                 db    0
.eh_frame:0000000000009160                 db 0F0h
.eh_frame:0000000000009161                 db 0D4h
.eh_frame:0000000000009162                 db 0FFh
.eh_frame:0000000000009163                 db 0FFh
.eh_frame:0000000000009164                 db  1Ah
.eh_frame:0000000000009165                 db    0
.eh_frame:0000000000009166                 db    0
.eh_frame:0000000000009167                 db    0
.eh_frame:0000000000009168                 db    0
.eh_frame:0000000000009169                 db  41h ; A
.eh_frame:000000000000916A                 db  0Eh
.eh_frame:000000000000916B                 db  10h
.eh_frame:000000000000916C                 db  83h
.eh_frame:000000000000916D                 db    2
.eh_frame:000000000000916E                 db  53h ; S
.eh_frame:000000000000916F                 db  0Ah
.eh_frame:0000000000009170                 db  0Eh
.eh_frame:0000000000009171                 db    8
.eh_frame:0000000000009172                 db  41h ; A
.eh_frame:0000000000009173                 db  0Bh
.eh_frame:0000000000009174                 db  10h
.eh_frame:0000000000009175                 db    0
.eh_frame:0000000000009176                 db    0
.eh_frame:0000000000009177                 db    0
.eh_frame:0000000000009178                 db    0
.eh_frame:0000000000009179                 db  0Fh
.eh_frame:000000000000917A                 db    0
.eh_frame:000000000000917B                 db    0
.eh_frame:000000000000917C                 db 0F4h
.eh_frame:000000000000917D                 db 0D4h
.eh_frame:000000000000917E                 db 0FFh
.eh_frame:000000000000917F                 db 0FFh
.eh_frame:0000000000009180                 db  24h ; $
.eh_frame:0000000000009181                 db    0
.eh_frame:0000000000009182                 db    0
.eh_frame:0000000000009183                 db    0
.eh_frame:0000000000009184                 db    0
.eh_frame:0000000000009185                 db  5Fh ; _
.eh_frame:0000000000009186                 db  0Eh
.eh_frame:0000000000009187                 db  10h
.eh_frame:0000000000009188                 db  10h
.eh_frame:0000000000009189                 db    0
.eh_frame:000000000000918A                 db    0
.eh_frame:000000000000918B                 db    0
.eh_frame:000000000000918C                 db  14h
.eh_frame:000000000000918D                 db  0Fh
.eh_frame:000000000000918E                 db    0
.eh_frame:000000000000918F                 db    0
.eh_frame:0000000000009190                 db  10h
.eh_frame:0000000000009191                 db 0D5h
.eh_frame:0000000000009192                 db 0FFh
.eh_frame:0000000000009193                 db 0FFh
.eh_frame:0000000000009194                 db    2
.eh_frame:0000000000009195                 db    0
.eh_frame:0000000000009196                 db    0
.eh_frame:0000000000009197                 db    0
.eh_frame:0000000000009198                 db    0
.eh_frame:0000000000009199                 db    0
.eh_frame:000000000000919A                 db    0
.eh_frame:000000000000919B                 db    0
.eh_frame:000000000000919C                 db  20h
.eh_frame:000000000000919D                 db    0
.eh_frame:000000000000919E                 db    0
.eh_frame:000000000000919F                 db    0
.eh_frame:00000000000091A0                 db  28h ; (
.eh_frame:00000000000091A1                 db  0Fh
.eh_frame:00000000000091A2                 db    0
.eh_frame:00000000000091A3                 db    0
.eh_frame:00000000000091A4                 db  0Ch
.eh_frame:00000000000091A5                 db 0D5h
.eh_frame:00000000000091A6                 db 0FFh
.eh_frame:00000000000091A7                 db 0FFh
.eh_frame:00000000000091A8                 db  36h ; 6
.eh_frame:00000000000091A9                 db    0
.eh_frame:00000000000091AA                 db    0
.eh_frame:00000000000091AB                 db    0
.eh_frame:00000000000091AC                 db    0
.eh_frame:00000000000091AD                 db  44h ; D
.eh_frame:00000000000091AE                 db  0Eh
.eh_frame:00000000000091AF                 db  10h
.eh_frame:00000000000091B0                 db  83h
.eh_frame:00000000000091B1                 db    2
.eh_frame:00000000000091B2                 db  5Dh ; ]
.eh_frame:00000000000091B3                 db  0Ah
.eh_frame:00000000000091B4                 db  0Eh
.eh_frame:00000000000091B5                 db    8
.eh_frame:00000000000091B6                 db  47h ; G
.eh_frame:00000000000091B7                 db  0Bh
.eh_frame:00000000000091B8                 db  48h ; H
.eh_frame:00000000000091B9                 db  0Ah
.eh_frame:00000000000091BA                 db  0Eh
.eh_frame:00000000000091BB                 db    8
.eh_frame:00000000000091BC                 db  41h ; A
.eh_frame:00000000000091BD                 db  0Bh
.eh_frame:00000000000091BE                 db    0
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db  10h
.eh_frame:00000000000091C1                 db    0
.eh_frame:00000000000091C2                 db    0
.eh_frame:00000000000091C3                 db    0
.eh_frame:00000000000091C4                 db  4Ch ; L
.eh_frame:00000000000091C5                 db  0Fh
.eh_frame:00000000000091C6                 db    0
.eh_frame:00000000000091C7                 db    0
.eh_frame:00000000000091C8                 db  28h ; (
.eh_frame:00000000000091C9                 db 0D5h
.eh_frame:00000000000091CA                 db 0FFh
.eh_frame:00000000000091CB                 db 0FFh
.eh_frame:00000000000091CC                 db  24h ; $
.eh_frame:00000000000091CD                 db    0
.eh_frame:00000000000091CE                 db    0
.eh_frame:00000000000091CF                 db    0
.eh_frame:00000000000091D0                 db    0
.eh_frame:00000000000091D1                 db  5Fh ; _
.eh_frame:00000000000091D2                 db  0Eh
.eh_frame:00000000000091D3                 db  10h
.eh_frame:00000000000091D4                 db  14h
.eh_frame:00000000000091D5                 db    0
.eh_frame:00000000000091D6                 db    0
.eh_frame:00000000000091D7                 db    0
.eh_frame:00000000000091D8                 db  60h ; `
.eh_frame:00000000000091D9                 db  0Fh
.eh_frame:00000000000091DA                 db    0
.eh_frame:00000000000091DB                 db    0
.eh_frame:00000000000091DC                 db  44h ; D
.eh_frame:00000000000091DD                 db 0D5h
.eh_frame:00000000000091DE                 db 0FFh
.eh_frame:00000000000091DF                 db 0FFh
.eh_frame:00000000000091E0                 db  82h
.eh_frame:00000000000091E1                 db    0
.eh_frame:00000000000091E2                 db    0
.eh_frame:00000000000091E3                 db    0
.eh_frame:00000000000091E4                 db    0
.eh_frame:00000000000091E5                 db    2
.eh_frame:00000000000091E6                 db  5Fh ; _
.eh_frame:00000000000091E7                 db  0Eh
.eh_frame:00000000000091E8                 db  10h
.eh_frame:00000000000091E9                 db  49h ; I
.eh_frame:00000000000091EA                 db  0Eh
.eh_frame:00000000000091EB                 db    8
.eh_frame:00000000000091EC                 db  14h
.eh_frame:00000000000091ED                 db    0
.eh_frame:00000000000091EE                 db    0
.eh_frame:00000000000091EF                 db    0
.eh_frame:00000000000091F0                 db  78h ; x
.eh_frame:00000000000091F1                 db  0Fh
.eh_frame:00000000000091F2                 db    0
.eh_frame:00000000000091F3                 db    0
.eh_frame:00000000000091F4                 db 0BCh
.eh_frame:00000000000091F5                 db 0D5h
.eh_frame:00000000000091F6                 db 0FFh
.eh_frame:00000000000091F7                 db 0FFh
.eh_frame:00000000000091F8                 db  4Ah ; J
.eh_frame:00000000000091F9                 db    0
.eh_frame:00000000000091FA                 db    0
.eh_frame:00000000000091FB                 db    0
.eh_frame:00000000000091FC                 db    0
.eh_frame:00000000000091FD                 db    2
.eh_frame:00000000000091FE                 db  45h ; E
.eh_frame:00000000000091FF                 db  0Eh
.eh_frame:0000000000009200                 db  10h
.eh_frame:0000000000009201                 db    0
.eh_frame:0000000000009202                 db    0
.eh_frame:0000000000009203                 db    0
.eh_frame:0000000000009204                 db  18h
.eh_frame:0000000000009205                 db    0
.eh_frame:0000000000009206                 db    0
.eh_frame:0000000000009207                 db    0
.eh_frame:0000000000009208                 db  90h
.eh_frame:0000000000009209                 db  0Fh
.eh_frame:000000000000920A                 db    0
.eh_frame:000000000000920B                 db    0
.eh_frame:000000000000920C                 db 0F4h
.eh_frame:000000000000920D                 db 0D5h
.eh_frame:000000000000920E                 db 0FFh
.eh_frame:000000000000920F                 db 0FFh
.eh_frame:0000000000009210                 db  17h
.eh_frame:0000000000009211                 db    0
.eh_frame:0000000000009212                 db    0
.eh_frame:0000000000009213                 db    0
.eh_frame:0000000000009214                 db    0
.eh_frame:0000000000009215                 db  41h ; A
.eh_frame:0000000000009216                 db  0Eh
.eh_frame:0000000000009217                 db  10h
.eh_frame:0000000000009218                 db  83h
.eh_frame:0000000000009219                 db    2
.eh_frame:000000000000921A                 db  51h ; Q
.eh_frame:000000000000921B                 db  0Eh
.eh_frame:000000000000921C                 db    8
.eh_frame:000000000000921D                 db    0
.eh_frame:000000000000921E                 db    0
.eh_frame:000000000000921F                 db    0
.eh_frame:0000000000009220                 db  18h
.eh_frame:0000000000009221                 db    0
.eh_frame:0000000000009222                 db    0
.eh_frame:0000000000009223                 db    0
.eh_frame:0000000000009224                 db 0ACh
.eh_frame:0000000000009225                 db  0Fh
.eh_frame:0000000000009226                 db    0
.eh_frame:0000000000009227                 db    0
.eh_frame:0000000000009228                 db 0F8h
.eh_frame:0000000000009229                 db 0D5h
.eh_frame:000000000000922A                 db 0FFh
.eh_frame:000000000000922B                 db 0FFh
.eh_frame:000000000000922C                 db  2Eh ; .
.eh_frame:000000000000922D                 db    0
.eh_frame:000000000000922E                 db    0
.eh_frame:000000000000922F                 db    0
.eh_frame:0000000000009230                 db    0
.eh_frame:0000000000009231                 db  47h ; G
.eh_frame:0000000000009232                 db  0Eh
.eh_frame:0000000000009233                 db  10h
.eh_frame:0000000000009234                 db  61h ; a
.eh_frame:0000000000009235                 db  0Ah
.eh_frame:0000000000009236                 db  0Eh
.eh_frame:0000000000009237                 db    8
.eh_frame:0000000000009238                 db  41h ; A
.eh_frame:0000000000009239                 db  0Bh
.eh_frame:000000000000923A                 db    0
.eh_frame:000000000000923B                 db    0
.eh_frame:000000000000923C                 db  24h ; $
.eh_frame:000000000000923D                 db    0
.eh_frame:000000000000923E                 db    0
.eh_frame:000000000000923F                 db    0
.eh_frame:0000000000009240                 db 0C8h
.eh_frame:0000000000009241                 db  0Fh
.eh_frame:0000000000009242                 db    0
.eh_frame:0000000000009243                 db    0
.eh_frame:0000000000009244                 db  0Ch
.eh_frame:0000000000009245                 db 0D6h
.eh_frame:0000000000009246                 db 0FFh
.eh_frame:0000000000009247                 db 0FFh
.eh_frame:0000000000009248                 db  28h ; (
.eh_frame:0000000000009249                 db    0
.eh_frame:000000000000924A                 db    0
.eh_frame:000000000000924B                 db    0
.eh_frame:000000000000924C                 db    0
.eh_frame:000000000000924D                 db  41h ; A
.eh_frame:000000000000924E                 db  0Eh
.eh_frame:000000000000924F                 db  10h
.eh_frame:0000000000009250                 db  86h
.eh_frame:0000000000009251                 db    2
.eh_frame:0000000000009252                 db  41h ; A
.eh_frame:0000000000009253                 db  0Eh
.eh_frame:0000000000009254                 db  18h
.eh_frame:0000000000009255                 db  83h
.eh_frame:0000000000009256                 db    3
.eh_frame:0000000000009257                 db  4Dh ; M
.eh_frame:0000000000009258                 db  0Eh
.eh_frame:0000000000009259                 db  20h
.eh_frame:000000000000925A                 db  49h ; I
.eh_frame:000000000000925B                 db  0Eh
.eh_frame:000000000000925C                 db  18h
.eh_frame:000000000000925D                 db  47h ; G
.eh_frame:000000000000925E                 db  0Eh
.eh_frame:000000000000925F                 db  10h
.eh_frame:0000000000009260                 db  41h ; A
.eh_frame:0000000000009261                 db  0Eh
.eh_frame:0000000000009262                 db    8
.eh_frame:0000000000009263                 db    0
.eh_frame:0000000000009264                 db  18h
.eh_frame:0000000000009265                 db    0
.eh_frame:0000000000009266                 db    0
.eh_frame:0000000000009267                 db    0
.eh_frame:0000000000009268                 db 0F0h
.eh_frame:0000000000009269                 db  0Fh
.eh_frame:000000000000926A                 db    0
.eh_frame:000000000000926B                 db    0
.eh_frame:000000000000926C                 db  14h
.eh_frame:000000000000926D                 db 0D6h
.eh_frame:000000000000926E                 db 0FFh
.eh_frame:000000000000926F                 db 0FFh
.eh_frame:0000000000009270                 db  13h
.eh_frame:0000000000009271                 db    0
.eh_frame:0000000000009272                 db    0
.eh_frame:0000000000009273                 db    0
.eh_frame:0000000000009274                 db    0
.eh_frame:0000000000009275                 db  41h ; A
.eh_frame:0000000000009276                 db  0Eh
.eh_frame:0000000000009277                 db  10h
.eh_frame:0000000000009278                 db  83h
.eh_frame:0000000000009279                 db    2
.eh_frame:000000000000927A                 db  50h ; P
.eh_frame:000000000000927B                 db  0Eh
.eh_frame:000000000000927C                 db    8
.eh_frame:000000000000927D                 db    0
.eh_frame:000000000000927E                 db    0
.eh_frame:000000000000927F                 db    0
.eh_frame:0000000000009280                 db  14h
.eh_frame:0000000000009281                 db    0
.eh_frame:0000000000009282                 db    0
.eh_frame:0000000000009283                 db    0
.eh_frame:0000000000009284                 db  0Ch
.eh_frame:0000000000009285                 db  10h
.eh_frame:0000000000009286                 db    0
.eh_frame:0000000000009287                 db    0
.eh_frame:0000000000009288                 db  18h
.eh_frame:0000000000009289                 db 0D6h
.eh_frame:000000000000928A                 db 0FFh
.eh_frame:000000000000928B                 db 0FFh
.eh_frame:000000000000928C                 db  35h ; 5
.eh_frame:000000000000928D                 db    0
.eh_frame:000000000000928E                 db    0
.eh_frame:000000000000928F                 db    0
.eh_frame:0000000000009290                 db    0
.eh_frame:0000000000009291                 db  4Bh ; K
.eh_frame:0000000000009292                 db  0Eh
.eh_frame:0000000000009293                 db  10h
.eh_frame:0000000000009294                 db    0
.eh_frame:0000000000009295                 db    0
.eh_frame:0000000000009296                 db    0
.eh_frame:0000000000009297                 db    0
.eh_frame:0000000000009298                 db  1Ch
.eh_frame:0000000000009299                 db    0
.eh_frame:000000000000929A                 db    0
.eh_frame:000000000000929B                 db    0
.eh_frame:000000000000929C                 db  24h ; $
.eh_frame:000000000000929D                 db  10h
.eh_frame:000000000000929E                 db    0
.eh_frame:000000000000929F                 db    0
.eh_frame:00000000000092A0                 db  40h ; @
.eh_frame:00000000000092A1                 db 0D6h
.eh_frame:00000000000092A2                 db 0FFh
.eh_frame:00000000000092A3                 db 0FFh
.eh_frame:00000000000092A4                 db  2Fh ; /
.eh_frame:00000000000092A5                 db    0
.eh_frame:00000000000092A6                 db    0
.eh_frame:00000000000092A7                 db    0
.eh_frame:00000000000092A8                 db    0
.eh_frame:00000000000092A9                 db  41h ; A
.eh_frame:00000000000092AA                 db  0Eh
.eh_frame:00000000000092AB                 db  10h
.eh_frame:00000000000092AC                 db  83h
.eh_frame:00000000000092AD                 db    2
.eh_frame:00000000000092AE                 db  55h ; U
.eh_frame:00000000000092AF                 db  0Ah
.eh_frame:00000000000092B0                 db  0Eh
.eh_frame:00000000000092B1                 db    8
.eh_frame:00000000000092B2                 db  4Ah ; J
.eh_frame:00000000000092B3                 db  0Bh
.eh_frame:00000000000092B4                 db    0
.eh_frame:00000000000092B5                 db    0
.eh_frame:00000000000092B6                 db    0
.eh_frame:00000000000092B7                 db    0
.eh_frame:00000000000092B8                 db  3Ch ; <
.eh_frame:00000000000092B9                 db    0
.eh_frame:00000000000092BA                 db    0
.eh_frame:00000000000092BB                 db    0
.eh_frame:00000000000092BC                 db  44h ; D
.eh_frame:00000000000092BD                 db  10h
.eh_frame:00000000000092BE                 db    0
.eh_frame:00000000000092BF                 db    0
.eh_frame:00000000000092C0                 db  50h ; P
.eh_frame:00000000000092C1                 db 0D6h
.eh_frame:00000000000092C2                 db 0FFh
.eh_frame:00000000000092C3                 db 0FFh
.eh_frame:00000000000092C4                 db  83h
.eh_frame:00000000000092C5                 db    0
.eh_frame:00000000000092C6                 db    0
.eh_frame:00000000000092C7                 db    0
.eh_frame:00000000000092C8                 db    0
.eh_frame:00000000000092C9                 db  42h ; B
.eh_frame:00000000000092CA                 db  0Eh
.eh_frame:00000000000092CB                 db  10h
.eh_frame:00000000000092CC                 db  8Dh
.eh_frame:00000000000092CD                 db    2
.eh_frame:00000000000092CE                 db  42h ; B
.eh_frame:00000000000092CF                 db  0Eh
.eh_frame:00000000000092D0                 db  18h
.eh_frame:00000000000092D1                 db  8Ch
.eh_frame:00000000000092D2                 db    3
.eh_frame:00000000000092D3                 db  44h ; D
.eh_frame:00000000000092D4                 db  0Eh
.eh_frame:00000000000092D5                 db  20h
.eh_frame:00000000000092D6                 db  86h
.eh_frame:00000000000092D7                 db    4
.eh_frame:00000000000092D8                 db  41h ; A
.eh_frame:00000000000092D9                 db  0Eh
.eh_frame:00000000000092DA                 db  28h ; (
.eh_frame:00000000000092DB                 db  83h
.eh_frame:00000000000092DC                 db    5
.eh_frame:00000000000092DD                 db  4Ah ; J
.eh_frame:00000000000092DE                 db  0Eh
.eh_frame:00000000000092DF                 db  40h ; @
.eh_frame:00000000000092E0                 db    2
.eh_frame:00000000000092E1                 db  64h ; d
.eh_frame:00000000000092E2                 db  0Ah
.eh_frame:00000000000092E3                 db  0Eh
.eh_frame:00000000000092E4                 db  28h ; (
.eh_frame:00000000000092E5                 db  41h ; A
.eh_frame:00000000000092E6                 db  0Eh
.eh_frame:00000000000092E7                 db  20h
.eh_frame:00000000000092E8                 db  41h ; A
.eh_frame:00000000000092E9                 db  0Eh
.eh_frame:00000000000092EA                 db  18h
.eh_frame:00000000000092EB                 db  42h ; B
.eh_frame:00000000000092EC                 db  0Eh
.eh_frame:00000000000092ED                 db  10h
.eh_frame:00000000000092EE                 db  42h ; B
.eh_frame:00000000000092EF                 db  0Eh
.eh_frame:00000000000092F0                 db    8
.eh_frame:00000000000092F1                 db  41h ; A
.eh_frame:00000000000092F2                 db  0Bh
.eh_frame:00000000000092F3                 db    0
.eh_frame:00000000000092F4                 db    0
.eh_frame:00000000000092F5                 db    0
.eh_frame:00000000000092F6                 db    0
.eh_frame:00000000000092F7                 db    0
.eh_frame:00000000000092F8                 db  4Ch ; L
.eh_frame:00000000000092F9                 db    0
.eh_frame:00000000000092FA                 db    0
.eh_frame:00000000000092FB                 db    0
.eh_frame:00000000000092FC                 db  84h
.eh_frame:00000000000092FD                 db  10h
.eh_frame:00000000000092FE                 db    0
.eh_frame:00000000000092FF                 db    0
.eh_frame:0000000000009300                 db 0A0h
.eh_frame:0000000000009301                 db 0D6h
.eh_frame:0000000000009302                 db 0FFh
.eh_frame:0000000000009303                 db 0FFh
.eh_frame:0000000000009304                 db 0EFh
.eh_frame:0000000000009305                 db    0
.eh_frame:0000000000009306                 db    0
.eh_frame:0000000000009307                 db    0
.eh_frame:0000000000009308                 db    0
.eh_frame:0000000000009309                 db  42h ; B
.eh_frame:000000000000930A                 db  0Eh
.eh_frame:000000000000930B                 db  10h
.eh_frame:000000000000930C                 db  8Fh
.eh_frame:000000000000930D                 db    2
.eh_frame:000000000000930E                 db  42h ; B
.eh_frame:000000000000930F                 db  0Eh
.eh_frame:0000000000009310                 db  18h
.eh_frame:0000000000009311                 db  8Eh
.eh_frame:0000000000009312                 db    3
.eh_frame:0000000000009313                 db  47h ; G
.eh_frame:0000000000009314                 db  0Eh
.eh_frame:0000000000009315                 db  20h
.eh_frame:0000000000009316                 db  8Dh
.eh_frame:0000000000009317                 db    4
.eh_frame:0000000000009318                 db  42h ; B
.eh_frame:0000000000009319                 db  0Eh
.eh_frame:000000000000931A                 db  28h ; (
.eh_frame:000000000000931B                 db  8Ch
.eh_frame:000000000000931C                 db    5
.eh_frame:000000000000931D                 db  44h ; D
.eh_frame:000000000000931E                 db  0Eh
.eh_frame:000000000000931F                 db  30h ; 0
.eh_frame:0000000000009320                 db  86h
.eh_frame:0000000000009321                 db    6
.eh_frame:0000000000009322                 db  41h ; A
.eh_frame:0000000000009323                 db  0Eh
.eh_frame:0000000000009324                 db  38h ; 8
.eh_frame:0000000000009325                 db  83h
.eh_frame:0000000000009326                 db    7
.eh_frame:0000000000009327                 db  5Ch ; \
.eh_frame:0000000000009328                 db  0Eh
.eh_frame:0000000000009329                 db  40h ; @
.eh_frame:000000000000932A                 db    2
.eh_frame:000000000000932B                 db  61h ; a
.eh_frame:000000000000932C                 db  0Ah
.eh_frame:000000000000932D                 db  0Eh
.eh_frame:000000000000932E                 db  38h ; 8
.eh_frame:000000000000932F                 db  44h ; D
.eh_frame:0000000000009330                 db  0Eh
.eh_frame:0000000000009331                 db  30h ; 0
.eh_frame:0000000000009332                 db  41h ; A
.eh_frame:0000000000009333                 db  0Eh
.eh_frame:0000000000009334                 db  28h ; (
.eh_frame:0000000000009335                 db  42h ; B
.eh_frame:0000000000009336                 db  0Eh
.eh_frame:0000000000009337                 db  20h
.eh_frame:0000000000009338                 db  42h ; B
.eh_frame:0000000000009339                 db  0Eh
.eh_frame:000000000000933A                 db  18h
.eh_frame:000000000000933B                 db  42h ; B
.eh_frame:000000000000933C                 db  0Eh
.eh_frame:000000000000933D                 db  10h
.eh_frame:000000000000933E                 db  42h ; B
.eh_frame:000000000000933F                 db  0Eh
.eh_frame:0000000000009340                 db    8
.eh_frame:0000000000009341                 db  44h ; D
.eh_frame:0000000000009342                 db  0Bh
.eh_frame:0000000000009343                 db    0
.eh_frame:0000000000009344                 db    0
.eh_frame:0000000000009345                 db    0
.eh_frame:0000000000009346                 db    0
.eh_frame:0000000000009347                 db    0
.eh_frame:0000000000009348                 db  4Ch ; L
.eh_frame:0000000000009349                 db    0
.eh_frame:000000000000934A                 db    0
.eh_frame:000000000000934B                 db    0
.eh_frame:000000000000934C                 db 0D4h
.eh_frame:000000000000934D                 db  10h
.eh_frame:000000000000934E                 db    0
.eh_frame:000000000000934F                 db    0
.eh_frame:0000000000009350                 db  40h ; @
.eh_frame:0000000000009351                 db 0D7h
.eh_frame:0000000000009352                 db 0FFh
.eh_frame:0000000000009353                 db 0FFh
.eh_frame:0000000000009354                 db  7Dh ; }
.eh_frame:0000000000009355                 db    0
.eh_frame:0000000000009356                 db    0
.eh_frame:0000000000009357                 db    0
.eh_frame:0000000000009358                 db    0
.eh_frame:0000000000009359                 db  42h ; B
.eh_frame:000000000000935A                 db  0Eh
.eh_frame:000000000000935B                 db  10h
.eh_frame:000000000000935C                 db  8Ch
.eh_frame:000000000000935D                 db    2
.eh_frame:000000000000935E                 db  41h ; A
.eh_frame:000000000000935F                 db  0Eh
.eh_frame:0000000000009360                 db  18h
.eh_frame:0000000000009361                 db  86h
.eh_frame:0000000000009362                 db    3
.eh_frame:0000000000009363                 db  44h ; D
.eh_frame:0000000000009364                 db  0Eh
.eh_frame:0000000000009365                 db  20h
.eh_frame:0000000000009366                 db  83h
.eh_frame:0000000000009367                 db    4
.eh_frame:0000000000009368                 db  69h ; i
.eh_frame:0000000000009369                 db  0Ah
.eh_frame:000000000000936A                 db  0Eh
.eh_frame:000000000000936B                 db  18h
.eh_frame:000000000000936C                 db  41h ; A
.eh_frame:000000000000936D                 db  0Eh
.eh_frame:000000000000936E                 db  10h
.eh_frame:000000000000936F                 db  42h ; B
.eh_frame:0000000000009370                 db  0Eh
.eh_frame:0000000000009371                 db    8
.eh_frame:0000000000009372                 db  45h ; E
.eh_frame:0000000000009373                 db  0Bh
.eh_frame:0000000000009374                 db  55h ; U
.eh_frame:0000000000009375                 db  0Ah
.eh_frame:0000000000009376                 db  0Eh
.eh_frame:0000000000009377                 db  18h
.eh_frame:0000000000009378                 db  41h ; A
.eh_frame:0000000000009379                 db  0Eh
.eh_frame:000000000000937A                 db  10h
.eh_frame:000000000000937B                 db  42h ; B
.eh_frame:000000000000937C                 db  0Eh
.eh_frame:000000000000937D                 db    8
.eh_frame:000000000000937E                 db  48h ; H
.eh_frame:000000000000937F                 db  0Bh
.eh_frame:0000000000009380                 db  41h ; A
.eh_frame:0000000000009381                 db  0Ah
.eh_frame:0000000000009382                 db  0Eh
.eh_frame:0000000000009383                 db  18h
.eh_frame:0000000000009384                 db  46h ; F
.eh_frame:0000000000009385                 db  0Eh
.eh_frame:0000000000009386                 db  10h
.eh_frame:0000000000009387                 db  42h ; B
.eh_frame:0000000000009388                 db  0Eh
.eh_frame:0000000000009389                 db    8
.eh_frame:000000000000938A                 db  47h ; G
.eh_frame:000000000000938B                 db  0Bh
.eh_frame:000000000000938C                 db  49h ; I
.eh_frame:000000000000938D                 db  0Eh
.eh_frame:000000000000938E                 db  18h
.eh_frame:000000000000938F                 db  41h ; A
.eh_frame:0000000000009390                 db  0Eh
.eh_frame:0000000000009391                 db  10h
.eh_frame:0000000000009392                 db  42h ; B
.eh_frame:0000000000009393                 db  0Eh
.eh_frame:0000000000009394                 db    8
.eh_frame:0000000000009395                 db    0
.eh_frame:0000000000009396                 db    0
.eh_frame:0000000000009397                 db    0
.eh_frame:0000000000009398                 db  1Ch
.eh_frame:0000000000009399                 db    0
.eh_frame:000000000000939A                 db    0
.eh_frame:000000000000939B                 db    0
.eh_frame:000000000000939C                 db  24h ; $
.eh_frame:000000000000939D                 db  11h
.eh_frame:000000000000939E                 db    0
.eh_frame:000000000000939F                 db    0
.eh_frame:00000000000093A0                 db  70h ; p
.eh_frame:00000000000093A1                 db 0D7h
.eh_frame:00000000000093A2                 db 0FFh
.eh_frame:00000000000093A3                 db 0FFh
.eh_frame:00000000000093A4                 db  18h
.eh_frame:00000000000093A5                 db    0
.eh_frame:00000000000093A6                 db    0
.eh_frame:00000000000093A7                 db    0
.eh_frame:00000000000093A8                 db    0
.eh_frame:00000000000093A9                 db  44h ; D
.eh_frame:00000000000093AA                 db  0Eh
.eh_frame:00000000000093AB                 db  10h
.eh_frame:00000000000093AC                 db  4Eh ; N
.eh_frame:00000000000093AD                 db  0Ah
.eh_frame:00000000000093AE                 db  0Eh
.eh_frame:00000000000093AF                 db    8
.eh_frame:00000000000093B0                 db  41h ; A
.eh_frame:00000000000093B1                 db  0Bh
.eh_frame:00000000000093B2                 db    0
.eh_frame:00000000000093B3                 db    0
.eh_frame:00000000000093B4                 db    0
.eh_frame:00000000000093B5                 db    0
.eh_frame:00000000000093B6                 db    0
.eh_frame:00000000000093B7                 db    0
.eh_frame:00000000000093B8                 db  30h ; 0
.eh_frame:00000000000093B9                 db    0
.eh_frame:00000000000093BA                 db    0
.eh_frame:00000000000093BB                 db    0
.eh_frame:00000000000093BC                 db  44h ; D
.eh_frame:00000000000093BD                 db  11h
.eh_frame:00000000000093BE                 db    0
.eh_frame:00000000000093BF                 db    0
.eh_frame:00000000000093C0                 db  70h ; p
.eh_frame:00000000000093C1                 db 0D7h
.eh_frame:00000000000093C2                 db 0FFh
.eh_frame:00000000000093C3                 db 0FFh
.eh_frame:00000000000093C4                 db  5Dh ; ]
.eh_frame:00000000000093C5                 db    0
.eh_frame:00000000000093C6                 db    0
.eh_frame:00000000000093C7                 db    0
.eh_frame:00000000000093C8                 db    0
.eh_frame:00000000000093C9                 db  41h ; A
.eh_frame:00000000000093CA                 db  0Eh
.eh_frame:00000000000093CB                 db  10h
.eh_frame:00000000000093CC                 db  86h
.eh_frame:00000000000093CD                 db    2
.eh_frame:00000000000093CE                 db  41h ; A
.eh_frame:00000000000093CF                 db  0Eh
.eh_frame:00000000000093D0                 db  18h
.eh_frame:00000000000093D1                 db  83h
.eh_frame:00000000000093D2                 db    3
.eh_frame:00000000000093D3                 db  49h ; I
.eh_frame:00000000000093D4                 db  0Eh
.eh_frame:00000000000093D5                 db  20h
.eh_frame:00000000000093D6                 db  7Ch ; |
.eh_frame:00000000000093D7                 db  0Ah
.eh_frame:00000000000093D8                 db  0Eh
.eh_frame:00000000000093D9                 db  18h
.eh_frame:00000000000093DA                 db  44h ; D
.eh_frame:00000000000093DB                 db  0Eh
.eh_frame:00000000000093DC                 db  10h
.eh_frame:00000000000093DD                 db  41h ; A
.eh_frame:00000000000093DE                 db  0Eh
.eh_frame:00000000000093DF                 db    8
.eh_frame:00000000000093E0                 db  44h ; D
.eh_frame:00000000000093E1                 db  0Bh
.eh_frame:00000000000093E2                 db  44h ; D
.eh_frame:00000000000093E3                 db  0Eh
.eh_frame:00000000000093E4                 db  18h
.eh_frame:00000000000093E5                 db  47h ; G
.eh_frame:00000000000093E6                 db  0Eh
.eh_frame:00000000000093E7                 db  10h
.eh_frame:00000000000093E8                 db  41h ; A
.eh_frame:00000000000093E9                 db  0Eh
.eh_frame:00000000000093EA                 db    8
.eh_frame:00000000000093EB                 db    0
.eh_frame:00000000000093EC                 db  28h ; (
.eh_frame:00000000000093ED                 db    0
.eh_frame:00000000000093EE                 db    0
.eh_frame:00000000000093EF                 db    0
.eh_frame:00000000000093F0                 db  78h ; x
.eh_frame:00000000000093F1                 db  11h
.eh_frame:00000000000093F2                 db    0
.eh_frame:00000000000093F3                 db    0
.eh_frame:00000000000093F4                 db  9Ch
.eh_frame:00000000000093F5                 db 0D7h
.eh_frame:00000000000093F6                 db 0FFh
.eh_frame:00000000000093F7                 db 0FFh
.eh_frame:00000000000093F8                 db  5Ah ; Z
.eh_frame:00000000000093F9                 db    0
.eh_frame:00000000000093FA                 db    0
.eh_frame:00000000000093FB                 db    0
.eh_frame:00000000000093FC                 db    0
.eh_frame:00000000000093FD                 db  41h ; A
.eh_frame:00000000000093FE                 db  0Eh
.eh_frame:00000000000093FF                 db  10h
.eh_frame:0000000000009400                 db  86h
.eh_frame:0000000000009401                 db    2
.eh_frame:0000000000009402                 db  41h ; A
.eh_frame:0000000000009403                 db  0Eh
.eh_frame:0000000000009404                 db  18h
.eh_frame:0000000000009405                 db  83h
.eh_frame:0000000000009406                 db    3
.eh_frame:0000000000009407                 db  47h ; G
.eh_frame:0000000000009408                 db  0Eh
.eh_frame:0000000000009409                 db  20h
.eh_frame:000000000000940A                 db    2
.eh_frame:000000000000940B                 db  41h ; A
.eh_frame:000000000000940C                 db  0Ah
.eh_frame:000000000000940D                 db  0Eh
.eh_frame:000000000000940E                 db  18h
.eh_frame:000000000000940F                 db  44h ; D
.eh_frame:0000000000009410                 db  0Eh
.eh_frame:0000000000009411                 db  10h
.eh_frame:0000000000009412                 db  41h ; A
.eh_frame:0000000000009413                 db  0Eh
.eh_frame:0000000000009414                 db    8
.eh_frame:0000000000009415                 db  41h ; A
.eh_frame:0000000000009416                 db  0Bh
.eh_frame:0000000000009417                 db    0
.eh_frame:0000000000009418                 db  10h
.eh_frame:0000000000009419                 db    0
.eh_frame:000000000000941A                 db    0
.eh_frame:000000000000941B                 db    0
.eh_frame:000000000000941C                 db 0A4h
.eh_frame:000000000000941D                 db  11h
.eh_frame:000000000000941E                 db    0
.eh_frame:000000000000941F                 db    0
.eh_frame:0000000000009420                 db 0D0h
.eh_frame:0000000000009421                 db 0D7h
.eh_frame:0000000000009422                 db 0FFh
.eh_frame:0000000000009423                 db 0FFh
.eh_frame:0000000000009424                 db  5Ch ; \
.eh_frame:0000000000009425                 db    0
.eh_frame:0000000000009426                 db    0
.eh_frame:0000000000009427                 db    0
.eh_frame:0000000000009428                 db    0
.eh_frame:0000000000009429                 db    0
.eh_frame:000000000000942A                 db    0
.eh_frame:000000000000942B                 db    0
.eh_frame:000000000000942C                 db  28h ; (
.eh_frame:000000000000942D                 db    0
.eh_frame:000000000000942E                 db    0
.eh_frame:000000000000942F                 db    0
.eh_frame:0000000000009430                 db 0B8h
.eh_frame:0000000000009431                 db  11h
.eh_frame:0000000000009432                 db    0
.eh_frame:0000000000009433                 db    0
.eh_frame:0000000000009434                 db  1Ch
.eh_frame:0000000000009435                 db 0D8h
.eh_frame:0000000000009436                 db 0FFh
.eh_frame:0000000000009437                 db 0FFh
.eh_frame:0000000000009438                 db  47h ; G
.eh_frame:0000000000009439                 db    0
.eh_frame:000000000000943A                 db    0
.eh_frame:000000000000943B                 db    0
.eh_frame:000000000000943C                 db    0
.eh_frame:000000000000943D                 db  41h ; A
.eh_frame:000000000000943E                 db  0Eh
.eh_frame:000000000000943F                 db  10h
.eh_frame:0000000000009440                 db  83h
.eh_frame:0000000000009441                 db    2
.eh_frame:0000000000009442                 db  5Ah ; Z
.eh_frame:0000000000009443                 db  0Ah
.eh_frame:0000000000009444                 db  0Eh
.eh_frame:0000000000009445                 db    8
.eh_frame:0000000000009446                 db  45h ; E
.eh_frame:0000000000009447                 db  0Bh
.eh_frame:0000000000009448                 db  5Dh ; ]
.eh_frame:0000000000009449                 db  0Ah
.eh_frame:000000000000944A                 db  0Eh
.eh_frame:000000000000944B                 db    8
.eh_frame:000000000000944C                 db  43h ; C
.eh_frame:000000000000944D                 db  0Bh
.eh_frame:000000000000944E                 db  46h ; F
.eh_frame:000000000000944F                 db  0Eh
.eh_frame:0000000000009450                 db    8
.eh_frame:0000000000009451                 db    0
.eh_frame:0000000000009452                 db    0
.eh_frame:0000000000009453                 db    0
.eh_frame:0000000000009454                 db    0
.eh_frame:0000000000009455                 db    0
.eh_frame:0000000000009456                 db    0
.eh_frame:0000000000009457                 db    0
.eh_frame:0000000000009458                 db  1Ch
.eh_frame:0000000000009459                 db    0
.eh_frame:000000000000945A                 db    0
.eh_frame:000000000000945B                 db    0
.eh_frame:000000000000945C                 db 0E4h
.eh_frame:000000000000945D                 db  11h
.eh_frame:000000000000945E                 db    0
.eh_frame:000000000000945F                 db    0
.eh_frame:0000000000009460                 db  40h ; @
.eh_frame:0000000000009461                 db 0D8h
.eh_frame:0000000000009462                 db 0FFh
.eh_frame:0000000000009463                 db 0FFh
.eh_frame:0000000000009464                 db  60h ; `
.eh_frame:0000000000009465                 db    0
.eh_frame:0000000000009466                 db    0
.eh_frame:0000000000009467                 db    0
.eh_frame:0000000000009468                 db    0
.eh_frame:0000000000009469                 db  44h ; D
.eh_frame:000000000000946A                 db  0Eh
.eh_frame:000000000000946B                 db  10h
.eh_frame:000000000000946C                 db  75h ; u
.eh_frame:000000000000946D                 db  0Ah
.eh_frame:000000000000946E                 db  0Eh
.eh_frame:000000000000946F                 db    8
.eh_frame:0000000000009470                 db  47h ; G
.eh_frame:0000000000009471                 db  0Bh
.eh_frame:0000000000009472                 db  5Fh ; _
.eh_frame:0000000000009473                 db  0Eh
.eh_frame:0000000000009474                 db    8
.eh_frame:0000000000009475                 db    0
.eh_frame:0000000000009476                 db    0
.eh_frame:0000000000009477                 db    0
.eh_frame:0000000000009478                 db  14h
.eh_frame:0000000000009479                 db    0
.eh_frame:000000000000947A                 db    0
.eh_frame:000000000000947B                 db    0
.eh_frame:000000000000947C                 db    4
.eh_frame:000000000000947D                 db  12h
.eh_frame:000000000000947E                 db    0
.eh_frame:000000000000947F                 db    0
.eh_frame:0000000000009480                 db  80h
.eh_frame:0000000000009481                 db 0D8h
.eh_frame:0000000000009482                 db 0FFh
.eh_frame:0000000000009483                 db 0FFh
.eh_frame:0000000000009484                 db  36h ; 6
.eh_frame:0000000000009485                 db    0
.eh_frame:0000000000009486                 db    0
.eh_frame:0000000000009487                 db    0
.eh_frame:0000000000009488                 db    0
.eh_frame:0000000000009489                 db    0
.eh_frame:000000000000948A                 db    0
.eh_frame:000000000000948B                 db    0
.eh_frame:000000000000948C                 db    0
.eh_frame:000000000000948D                 db    0
.eh_frame:000000000000948E                 db    0
.eh_frame:000000000000948F                 db    0
.eh_frame:0000000000009490                 db  1Ch
.eh_frame:0000000000009491                 db    0
.eh_frame:0000000000009492                 db    0
.eh_frame:0000000000009493                 db    0
.eh_frame:0000000000009494                 db  1Ch
.eh_frame:0000000000009495                 db  12h
.eh_frame:0000000000009496                 db    0
.eh_frame:0000000000009497                 db    0
.eh_frame:0000000000009498                 db 0A8h
.eh_frame:0000000000009499                 db 0D8h
.eh_frame:000000000000949A                 db 0FFh
.eh_frame:000000000000949B                 db 0FFh
.eh_frame:000000000000949C                 db  3Ch ; <
.eh_frame:000000000000949D                 db    0
.eh_frame:000000000000949E                 db    0
.eh_frame:000000000000949F                 db    0
.eh_frame:00000000000094A0                 db    0
.eh_frame:00000000000094A1                 db  44h ; D
.eh_frame:00000000000094A2                 db  0Eh
.eh_frame:00000000000094A3                 db  10h
.eh_frame:00000000000094A4                 db  61h ; a
.eh_frame:00000000000094A5                 db  0Ah
.eh_frame:00000000000094A6                 db  0Eh
.eh_frame:00000000000094A7                 db    8
.eh_frame:00000000000094A8                 db  4Bh ; K
.eh_frame:00000000000094A9                 db  0Bh
.eh_frame:00000000000094AA                 db  4Bh ; K
.eh_frame:00000000000094AB                 db  0Eh
.eh_frame:00000000000094AC                 db    8
.eh_frame:00000000000094AD                 db    0
.eh_frame:00000000000094AE                 db    0
.eh_frame:00000000000094AF                 db    0
.eh_frame:00000000000094B0                 db  34h ; 4
.eh_frame:00000000000094B1                 db    0
.eh_frame:00000000000094B2                 db    0
.eh_frame:00000000000094B3                 db    0
.eh_frame:00000000000094B4                 db  3Ch ; <
.eh_frame:00000000000094B5                 db  12h
.eh_frame:00000000000094B6                 db    0
.eh_frame:00000000000094B7                 db    0
.eh_frame:00000000000094B8                 db 0C8h
.eh_frame:00000000000094B9                 db 0D8h
.eh_frame:00000000000094BA                 db 0FFh
.eh_frame:00000000000094BB                 db 0FFh
.eh_frame:00000000000094BC                 db  7Bh ; {
.eh_frame:00000000000094BD                 db    0
.eh_frame:00000000000094BE                 db    0
.eh_frame:00000000000094BF                 db    0
.eh_frame:00000000000094C0                 db    0
.eh_frame:00000000000094C1                 db  42h ; B
.eh_frame:00000000000094C2                 db  0Eh
.eh_frame:00000000000094C3                 db  10h
.eh_frame:00000000000094C4                 db  8Ch
.eh_frame:00000000000094C5                 db    2
.eh_frame:00000000000094C6                 db  41h ; A
.eh_frame:00000000000094C7                 db  0Eh
.eh_frame:00000000000094C8                 db  18h
.eh_frame:00000000000094C9                 db  86h
.eh_frame:00000000000094CA                 db    3
.eh_frame:00000000000094CB                 db  41h ; A
.eh_frame:00000000000094CC                 db  0Eh
.eh_frame:00000000000094CD                 db  20h
.eh_frame:00000000000094CE                 db  83h
.eh_frame:00000000000094CF                 db    4
.eh_frame:00000000000094D0                 db  7Dh ; }
.eh_frame:00000000000094D1                 db  0Ah
.eh_frame:00000000000094D2                 db  0Eh
.eh_frame:00000000000094D3                 db  18h
.eh_frame:00000000000094D4                 db  41h ; A
.eh_frame:00000000000094D5                 db  0Eh
.eh_frame:00000000000094D6                 db  10h
.eh_frame:00000000000094D7                 db  42h ; B
.eh_frame:00000000000094D8                 db  0Eh
.eh_frame:00000000000094D9                 db    8
.eh_frame:00000000000094DA                 db  44h ; D
.eh_frame:00000000000094DB                 db  0Bh
.eh_frame:00000000000094DC                 db  60h ; `
.eh_frame:00000000000094DD                 db  0Ah
.eh_frame:00000000000094DE                 db  0Eh
.eh_frame:00000000000094DF                 db  18h
.eh_frame:00000000000094E0                 db  41h ; A
.eh_frame:00000000000094E1                 db  0Eh
.eh_frame:00000000000094E2                 db  10h
.eh_frame:00000000000094E3                 db  42h ; B
.eh_frame:00000000000094E4                 db  0Eh
.eh_frame:00000000000094E5                 db    8
.eh_frame:00000000000094E6                 db  45h ; E
.eh_frame:00000000000094E7                 db  0Bh
.eh_frame:00000000000094E8                 db  1Ch
.eh_frame:00000000000094E9                 db    0
.eh_frame:00000000000094EA                 db    0
.eh_frame:00000000000094EB                 db    0
.eh_frame:00000000000094EC                 db  74h ; t
.eh_frame:00000000000094ED                 db  12h
.eh_frame:00000000000094EE                 db    0
.eh_frame:00000000000094EF                 db    0
.eh_frame:00000000000094F0                 db  10h
.eh_frame:00000000000094F1                 db 0D9h
.eh_frame:00000000000094F2                 db 0FFh
.eh_frame:00000000000094F3                 db 0FFh
.eh_frame:00000000000094F4                 db  40h ; @
.eh_frame:00000000000094F5                 db    0
.eh_frame:00000000000094F6                 db    0
.eh_frame:00000000000094F7                 db    0
.eh_frame:00000000000094F8                 db    0
.eh_frame:00000000000094F9                 db  44h ; D
.eh_frame:00000000000094FA                 db  0Eh
.eh_frame:00000000000094FB                 db  10h
.eh_frame:00000000000094FC                 db  83h
.eh_frame:00000000000094FD                 db    2
.eh_frame:00000000000094FE                 db  5Ah ; Z
.eh_frame:00000000000094FF                 db  0Ah
.eh_frame:0000000000009500                 db  0Eh
.eh_frame:0000000000009501                 db    8
.eh_frame:0000000000009502                 db  4Ah ; J
.eh_frame:0000000000009503                 db  0Bh
.eh_frame:0000000000009504                 db  53h ; S
.eh_frame:0000000000009505                 db  0Eh
.eh_frame:0000000000009506                 db    8
.eh_frame:0000000000009507                 db    0
.eh_frame:0000000000009508                 db  2Ch ; ,
.eh_frame:0000000000009509                 db    0
.eh_frame:000000000000950A                 db    0
.eh_frame:000000000000950B                 db    0
.eh_frame:000000000000950C                 db  94h
.eh_frame:000000000000950D                 db  12h
.eh_frame:000000000000950E                 db    0
.eh_frame:000000000000950F                 db    0
.eh_frame:0000000000009510                 db  30h ; 0
.eh_frame:0000000000009511                 db 0D9h
.eh_frame:0000000000009512                 db 0FFh
.eh_frame:0000000000009513                 db 0FFh
.eh_frame:0000000000009514                 db  57h ; W
.eh_frame:0000000000009515                 db    0
.eh_frame:0000000000009516                 db    0
.eh_frame:0000000000009517                 db    0
.eh_frame:0000000000009518                 db    0
.eh_frame:0000000000009519                 db  63h ; c
.eh_frame:000000000000951A                 db  0Eh
.eh_frame:000000000000951B                 db  10h
.eh_frame:000000000000951C                 db  8Ch
.eh_frame:000000000000951D                 db    2
.eh_frame:000000000000951E                 db  41h ; A
.eh_frame:000000000000951F                 db  0Eh
.eh_frame:0000000000009520                 db  18h
.eh_frame:0000000000009521                 db  86h
.eh_frame:0000000000009522                 db    3
.eh_frame:0000000000009523                 db  44h ; D
.eh_frame:0000000000009524                 db  0Eh
.eh_frame:0000000000009525                 db  20h
.eh_frame:0000000000009526                 db  83h
.eh_frame:0000000000009527                 db    4
.eh_frame:0000000000009528                 db  6Bh ; k
.eh_frame:0000000000009529                 db  0Eh
.eh_frame:000000000000952A                 db  18h
.eh_frame:000000000000952B                 db  41h ; A
.eh_frame:000000000000952C                 db  0Eh
.eh_frame:000000000000952D                 db  10h
.eh_frame:000000000000952E                 db  42h ; B
.eh_frame:000000000000952F                 db  0Eh
.eh_frame:0000000000009530                 db    8
.eh_frame:0000000000009531                 db    0
.eh_frame:0000000000009532                 db    0
.eh_frame:0000000000009533                 db    0
.eh_frame:0000000000009534                 db    0
.eh_frame:0000000000009535                 db    0
.eh_frame:0000000000009536                 db    0
.eh_frame:0000000000009537                 db    0
.eh_frame:0000000000009538                 db  44h ; D
.eh_frame:0000000000009539                 db    0
.eh_frame:000000000000953A                 db    0
.eh_frame:000000000000953B                 db    0
.eh_frame:000000000000953C                 db 0C4h
.eh_frame:000000000000953D                 db  12h
.eh_frame:000000000000953E                 db    0
.eh_frame:000000000000953F                 db    0
.eh_frame:0000000000009540                 db  60h ; `
.eh_frame:0000000000009541                 db 0D9h
.eh_frame:0000000000009542                 db 0FFh
.eh_frame:0000000000009543                 db 0FFh
.eh_frame:0000000000009544                 db  65h ; e
.eh_frame:0000000000009545                 db    0
.eh_frame:0000000000009546                 db    0
.eh_frame:0000000000009547                 db    0
.eh_frame:0000000000009548                 db    0
.eh_frame:0000000000009549                 db  42h ; B
.eh_frame:000000000000954A                 db  0Eh
.eh_frame:000000000000954B                 db  10h
.eh_frame:000000000000954C                 db  8Fh
.eh_frame:000000000000954D                 db    2
.eh_frame:000000000000954E                 db  42h ; B
.eh_frame:000000000000954F                 db  0Eh
.eh_frame:0000000000009550                 db  18h
.eh_frame:0000000000009551                 db  8Eh
.eh_frame:0000000000009552                 db    3
.eh_frame:0000000000009553                 db  45h ; E
.eh_frame:0000000000009554                 db  0Eh
.eh_frame:0000000000009555                 db  20h
.eh_frame:0000000000009556                 db  8Dh
.eh_frame:0000000000009557                 db    4
.eh_frame:0000000000009558                 db  42h ; B
.eh_frame:0000000000009559                 db  0Eh
.eh_frame:000000000000955A                 db  28h ; (
.eh_frame:000000000000955B                 db  8Ch
.eh_frame:000000000000955C                 db    5
.eh_frame:000000000000955D                 db  48h ; H
.eh_frame:000000000000955E                 db  0Eh
.eh_frame:000000000000955F                 db  30h ; 0
.eh_frame:0000000000009560                 db  86h
.eh_frame:0000000000009561                 db    6
.eh_frame:0000000000009562                 db  48h ; H
.eh_frame:0000000000009563                 db  0Eh
.eh_frame:0000000000009564                 db  38h ; 8
.eh_frame:0000000000009565                 db  83h
.eh_frame:0000000000009566                 db    7
.eh_frame:0000000000009567                 db  4Dh ; M
.eh_frame:0000000000009568                 db  0Eh
.eh_frame:0000000000009569                 db  40h ; @
.eh_frame:000000000000956A                 db  72h ; r
.eh_frame:000000000000956B                 db  0Eh
.eh_frame:000000000000956C                 db  38h ; 8
.eh_frame:000000000000956D                 db  41h ; A
.eh_frame:000000000000956E                 db  0Eh
.eh_frame:000000000000956F                 db  30h ; 0
.eh_frame:0000000000009570                 db  41h ; A
.eh_frame:0000000000009571                 db  0Eh
.eh_frame:0000000000009572                 db  28h ; (
.eh_frame:0000000000009573                 db  42h ; B
.eh_frame:0000000000009574                 db  0Eh
.eh_frame:0000000000009575                 db  20h
.eh_frame:0000000000009576                 db  42h ; B
.eh_frame:0000000000009577                 db  0Eh
.eh_frame:0000000000009578                 db  18h
.eh_frame:0000000000009579                 db  42h ; B
.eh_frame:000000000000957A                 db  0Eh
.eh_frame:000000000000957B                 db  10h
.eh_frame:000000000000957C                 db  42h ; B
.eh_frame:000000000000957D                 db  0Eh
.eh_frame:000000000000957E                 db    8
.eh_frame:000000000000957F                 db    0
.eh_frame:0000000000009580                 db  14h
.eh_frame:0000000000009581                 db    0
.eh_frame:0000000000009582                 db    0
.eh_frame:0000000000009583                 db    0
.eh_frame:0000000000009584                 db  0Ch
.eh_frame:0000000000009585                 db  13h
.eh_frame:0000000000009586                 db    0
.eh_frame:0000000000009587                 db    0
.eh_frame:0000000000009588                 db  88h
.eh_frame:0000000000009589                 db 0D9h
.eh_frame:000000000000958A                 db 0FFh
.eh_frame:000000000000958B                 db 0FFh
.eh_frame:000000000000958C                 db    2
.eh_frame:000000000000958D                 db    0
.eh_frame:000000000000958E                 db    0
.eh_frame:000000000000958F                 db    0
.eh_frame:0000000000009590                 db    0
.eh_frame:0000000000009591                 db    0
.eh_frame:0000000000009592                 db    0
.eh_frame:0000000000009593                 db    0
.eh_frame:0000000000009594                 db    0
.eh_frame:0000000000009595                 db    0
.eh_frame:0000000000009596                 db    0
.eh_frame:0000000000009597                 db    0
.eh_frame:0000000000009598                 db  10h
.eh_frame:0000000000009599                 db    0
.eh_frame:000000000000959A                 db    0
.eh_frame:000000000000959B                 db    0
.eh_frame:000000000000959C                 db  24h ; $
.eh_frame:000000000000959D                 db  13h
.eh_frame:000000000000959E                 db    0
.eh_frame:000000000000959F                 db    0
.eh_frame:00000000000095A0                 db  80h
.eh_frame:00000000000095A1                 db 0D9h
.eh_frame:00000000000095A2                 db 0FFh
.eh_frame:00000000000095A3                 db 0FFh
.eh_frame:00000000000095A4                 db  0Eh
.eh_frame:00000000000095A5                 db    0
.eh_frame:00000000000095A6                 db    0
.eh_frame:00000000000095A7                 db    0
.eh_frame:00000000000095A8                 db    0
.eh_frame:00000000000095A9                 db    0
.eh_frame:00000000000095AA                 db    0
.eh_frame:00000000000095AB                 db    0
.eh_frame:00000000000095AC __FRAME_END__   db    0
.eh_frame:00000000000095AD                 db    0
.eh_frame:00000000000095AE                 db    0
.eh_frame:00000000000095AF                 db    0
.eh_frame:00000000000095AF _eh_frame       ends
.eh_frame:00000000000095AF
.init_array:0000000000209A30 ; ELF Initialization Function Table
.init_array:0000000000209A30 ; ===========================================================================
.init_array:0000000000209A30
.init_array:0000000000209A30 ; Segment type: Pure data
.init_array:0000000000209A30 ; Segment permissions: Read/Write
.init_array:0000000000209A30 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209A30                 assume cs:_init_array
.init_array:0000000000209A30                 ;org 209A30h
.init_array:0000000000209A30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209A30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209A30                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209A30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209A30
.fini_array:0000000000209A38 ; ELF Termination Function Table
.fini_array:0000000000209A38 ; ===========================================================================
.fini_array:0000000000209A38
.fini_array:0000000000209A38 ; Segment type: Pure data
.fini_array:0000000000209A38 ; Segment permissions: Read/Write
.fini_array:0000000000209A38 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209A38                 assume cs:_fini_array
.fini_array:0000000000209A38                 ;org 209A38h
.fini_array:0000000000209A38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209A38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209A38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209A38
.data.rel.ro:0000000000209A40 ; ===========================================================================
.data.rel.ro:0000000000209A40
.data.rel.ro:0000000000209A40 ; Segment type: Pure data
.data.rel.ro:0000000000209A40 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209A40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209A40                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209A40                 ;org 209A40h
.data.rel.ro:0000000000209A40 ; struct option longopts
.data.rel.ro:0000000000209A40 longopts        dq offset aCanonicalizeEx; name
.data.rel.ro:0000000000209A40                                         ; DATA XREF: main+13↑o
.data.rel.ro:0000000000209A40                 dd 0                    ; has_arg ; "canonicalize-existing"
.data.rel.ro:0000000000209A40                 db 4 dup(0)
.data.rel.ro:0000000000209A40                 dq 0                    ; flag
.data.rel.ro:0000000000209A40                 dd 65h                  ; val
.data.rel.ro:0000000000209A40                 db 4 dup(0)
.data.rel.ro:0000000000209A60                 dq offset aCanonicalizeMi ; "canonicalize-missing"
.data.rel.ro:0000000000209A68                 db    0
.data.rel.ro:0000000000209A69                 db    0
.data.rel.ro:0000000000209A6A                 db    0
.data.rel.ro:0000000000209A6B                 db    0
.data.rel.ro:0000000000209A6C                 db    0
.data.rel.ro:0000000000209A6D                 db    0
.data.rel.ro:0000000000209A6E                 db    0
.data.rel.ro:0000000000209A6F                 db    0
.data.rel.ro:0000000000209A70                 db    0
.data.rel.ro:0000000000209A71                 db    0
.data.rel.ro:0000000000209A72                 db    0
.data.rel.ro:0000000000209A73                 db    0
.data.rel.ro:0000000000209A74                 db    0
.data.rel.ro:0000000000209A75                 db    0
.data.rel.ro:0000000000209A76                 db    0
.data.rel.ro:0000000000209A77                 db    0
.data.rel.ro:0000000000209A78                 db  6Dh ; m
.data.rel.ro:0000000000209A79                 db    0
.data.rel.ro:0000000000209A7A                 db    0
.data.rel.ro:0000000000209A7B                 db    0
.data.rel.ro:0000000000209A7C                 db    0
.data.rel.ro:0000000000209A7D                 db    0
.data.rel.ro:0000000000209A7E                 db    0
.data.rel.ro:0000000000209A7F                 db    0
.data.rel.ro:0000000000209A80                 dq offset aRelativeTo   ; "relative-to"
.data.rel.ro:0000000000209A88                 db    1
.data.rel.ro:0000000000209A89                 db    0
.data.rel.ro:0000000000209A8A                 db    0
.data.rel.ro:0000000000209A8B                 db    0
.data.rel.ro:0000000000209A8C                 db    0
.data.rel.ro:0000000000209A8D                 db    0
.data.rel.ro:0000000000209A8E                 db    0
.data.rel.ro:0000000000209A8F                 db    0
.data.rel.ro:0000000000209A90                 db    0
.data.rel.ro:0000000000209A91                 db    0
.data.rel.ro:0000000000209A92                 db    0
.data.rel.ro:0000000000209A93                 db    0
.data.rel.ro:0000000000209A94                 db    0
.data.rel.ro:0000000000209A95                 db    0
.data.rel.ro:0000000000209A96                 db    0
.data.rel.ro:0000000000209A97                 db    0
.data.rel.ro:0000000000209A98                 db  80h
.data.rel.ro:0000000000209A99                 db    0
.data.rel.ro:0000000000209A9A                 db    0
.data.rel.ro:0000000000209A9B                 db    0
.data.rel.ro:0000000000209A9C                 db    0
.data.rel.ro:0000000000209A9D                 db    0
.data.rel.ro:0000000000209A9E                 db    0
.data.rel.ro:0000000000209A9F                 db    0
.data.rel.ro:0000000000209AA0                 dq offset aRelativeBase ; "relative-base"
.data.rel.ro:0000000000209AA8                 db    1
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  81h
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aQuiet        ; "quiet"
.data.rel.ro:0000000000209AC8                 db    0
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  71h ; q
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aStrip        ; "strip"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  73h ; s
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aNoSymlinks   ; "no-symlinks"
.data.rel.ro:0000000000209B08                 db    0
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  73h ; s
.data.rel.ro:0000000000209B19                 db    0
.data.rel.ro:0000000000209B1A                 db    0
.data.rel.ro:0000000000209B1B                 db    0
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aZero         ; "zero"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  7Ah ; z
.data.rel.ro:0000000000209B39                 db    0
.data.rel.ro:0000000000209B3A                 db    0
.data.rel.ro:0000000000209B3B                 db    0
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aLogical      ; "logical"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  4Ch ; L
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 dq offset aPhysical     ; "physical"
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db  50h ; P
.data.rel.ro:0000000000209B79                 db    0
.data.rel.ro:0000000000209B7A                 db    0
.data.rel.ro:0000000000209B7B                 db    0
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B88                 db    0
.data.rel.ro:0000000000209B89                 db    0
.data.rel.ro:0000000000209B8A                 db    0
.data.rel.ro:0000000000209B8B                 db    0
.data.rel.ro:0000000000209B8C                 db    0
.data.rel.ro:0000000000209B8D                 db    0
.data.rel.ro:0000000000209B8E                 db    0
.data.rel.ro:0000000000209B8F                 db    0
.data.rel.ro:0000000000209B90                 db    0
.data.rel.ro:0000000000209B91                 db    0
.data.rel.ro:0000000000209B92                 db    0
.data.rel.ro:0000000000209B93                 db    0
.data.rel.ro:0000000000209B94                 db    0
.data.rel.ro:0000000000209B95                 db    0
.data.rel.ro:0000000000209B96                 db    0
.data.rel.ro:0000000000209B97                 db    0
.data.rel.ro:0000000000209B98                 db  7Eh ; ~
.data.rel.ro:0000000000209B99                 db 0FFh
.data.rel.ro:0000000000209B9A                 db 0FFh
.data.rel.ro:0000000000209B9B                 db 0FFh
.data.rel.ro:0000000000209B9C                 db    0
.data.rel.ro:0000000000209B9D                 db    0
.data.rel.ro:0000000000209B9E                 db    0
.data.rel.ro:0000000000209B9F                 db    0
.data.rel.ro:0000000000209BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209BA8                 db    0
.data.rel.ro:0000000000209BA9                 db    0
.data.rel.ro:0000000000209BAA                 db    0
.data.rel.ro:0000000000209BAB                 db    0
.data.rel.ro:0000000000209BAC                 db    0
.data.rel.ro:0000000000209BAD                 db    0
.data.rel.ro:0000000000209BAE                 db    0
.data.rel.ro:0000000000209BAF                 db    0
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB8                 db  7Dh ; }
.data.rel.ro:0000000000209BB9                 db 0FFh
.data.rel.ro:0000000000209BBA                 db 0FFh
.data.rel.ro:0000000000209BBB                 db 0FFh
.data.rel.ro:0000000000209BBC                 db    0
.data.rel.ro:0000000000209BBD                 db    0
.data.rel.ro:0000000000209BBE                 db    0
.data.rel.ro:0000000000209BBF                 db    0
.data.rel.ro:0000000000209BC0                 db    0
.data.rel.ro:0000000000209BC1                 db    0
.data.rel.ro:0000000000209BC2                 db    0
.data.rel.ro:0000000000209BC3                 db    0
.data.rel.ro:0000000000209BC4                 db    0
.data.rel.ro:0000000000209BC5                 db    0
.data.rel.ro:0000000000209BC6                 db    0
.data.rel.ro:0000000000209BC7                 db    0
.data.rel.ro:0000000000209BC8                 db    0
.data.rel.ro:0000000000209BC9                 db    0
.data.rel.ro:0000000000209BCA                 db    0
.data.rel.ro:0000000000209BCB                 db    0
.data.rel.ro:0000000000209BCC                 db    0
.data.rel.ro:0000000000209BCD                 db    0
.data.rel.ro:0000000000209BCE                 db    0
.data.rel.ro:0000000000209BCF                 db    0
.data.rel.ro:0000000000209BD0                 db    0
.data.rel.ro:0000000000209BD1                 db    0
.data.rel.ro:0000000000209BD2                 db    0
.data.rel.ro:0000000000209BD3                 db    0
.data.rel.ro:0000000000209BD4                 db    0
.data.rel.ro:0000000000209BD5                 db    0
.data.rel.ro:0000000000209BD6                 db    0
.data.rel.ro:0000000000209BD7                 db    0
.data.rel.ro:0000000000209BD8                 db    0
.data.rel.ro:0000000000209BD9                 db    0
.data.rel.ro:0000000000209BDA                 db    0
.data.rel.ro:0000000000209BDB                 db    0
.data.rel.ro:0000000000209BDC                 db    0
.data.rel.ro:0000000000209BDD                 db    0
.data.rel.ro:0000000000209BDE                 db    0
.data.rel.ro:0000000000209BDF                 db    0
.data.rel.ro:0000000000209BE0                 public quoting_style_args
.data.rel.ro:0000000000209BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000209C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C30                 db    0
.data.rel.ro:0000000000209C31                 db    0
.data.rel.ro:0000000000209C32                 db    0
.data.rel.ro:0000000000209C33                 db    0
.data.rel.ro:0000000000209C34                 db    0
.data.rel.ro:0000000000209C35                 db    0
.data.rel.ro:0000000000209C36                 db    0
.data.rel.ro:0000000000209C37                 db    0
.data.rel.ro:0000000000209C37 _data_rel_ro    ends
.data.rel.ro:0000000000209C37
LOAD:0000000000209C38 ; ELF Dynamic Information
LOAD:0000000000209C38 ; ===========================================================================
LOAD:0000000000209C38
LOAD:0000000000209C38 ; Segment type: Pure data
LOAD:0000000000209C38 ; Segment permissions: Read/Write
LOAD:0000000000209C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C38                 assume cs:LOAD
LOAD:0000000000209C38                 ;org 209C38h
LOAD:0000000000209C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C48                 Elf64_Dyn <0Ch, 1480h>  ; DT_INIT
LOAD:0000000000209C58                 Elf64_Dyn <0Dh, 6F30h>  ; DT_FINI
LOAD:0000000000209C68                 Elf64_Dyn <19h, 209A30h> ; DT_INIT_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <1Ah, 209A38h> ; DT_FINI_ARRAY
LOAD:0000000000209C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209CB8                 Elf64_Dyn <5, 8B0h>     ; DT_STRTAB
LOAD:0000000000209CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000209CD8                 Elf64_Dyn <0Ah, 2CCh>   ; DT_STRSZ
LOAD:0000000000209CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209D08                 Elf64_Dyn <3, 209E28h>  ; DT_PLTGOT
LOAD:0000000000209D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000209D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D38                 Elf64_Dyn <17h, 1000h>  ; DT_JMPREL
LOAD:0000000000209D48                 Elf64_Dyn <7, 0C58h>    ; DT_RELA
LOAD:0000000000209D58                 Elf64_Dyn <8, 3A8h>     ; DT_RELASZ
LOAD:0000000000209D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFFEh, 0BF8h> ; DT_VERNEED
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209DB8                 Elf64_Dyn <6FFFFFF0h, 0B7Ch> ; DT_VERSYM
LOAD:0000000000209DC8                 Elf64_Dyn <6FFFFFF9h, 1Ch> ; DT_RELACOUNT
LOAD:0000000000209DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E08                 db    0
LOAD:0000000000209E09                 db    0
LOAD:0000000000209E0A                 db    0
LOAD:0000000000209E0B                 db    0
LOAD:0000000000209E0C                 db    0
LOAD:0000000000209E0D                 db    0
LOAD:0000000000209E0E                 db    0
LOAD:0000000000209E0F                 db    0
LOAD:0000000000209E10                 db    0
LOAD:0000000000209E11                 db    0
LOAD:0000000000209E12                 db    0
LOAD:0000000000209E13                 db    0
LOAD:0000000000209E14                 db    0
LOAD:0000000000209E15                 db    0
LOAD:0000000000209E16                 db    0
LOAD:0000000000209E17                 db    0
LOAD:0000000000209E18                 db    0
LOAD:0000000000209E19                 db    0
LOAD:0000000000209E1A                 db    0
LOAD:0000000000209E1B                 db    0
LOAD:0000000000209E1C                 db    0
LOAD:0000000000209E1D                 db    0
LOAD:0000000000209E1E                 db    0
LOAD:0000000000209E1F                 db    0
LOAD:0000000000209E20                 db    0
LOAD:0000000000209E21                 db    0
LOAD:0000000000209E22                 db    0
LOAD:0000000000209E23                 db    0
LOAD:0000000000209E24                 db    0
LOAD:0000000000209E25                 db    0
LOAD:0000000000209E26                 db    0
LOAD:0000000000209E27                 db    0
LOAD:0000000000209E27 LOAD            ends
LOAD:0000000000209E27
.got:0000000000209E28 ; ===========================================================================
.got:0000000000209E28
.got:0000000000209E28 ; Segment type: Pure data
.got:0000000000209E28 ; Segment permissions: Read/Write
.got:0000000000209E28 _got            segment qword public 'DATA' use64
.got:0000000000209E28                 assume cs:_got
.got:0000000000209E28                 ;org 209E28h
.got:0000000000209E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E30 qword_209E30    dq 0                    ; DATA XREF: sub_14A0↑r
.got:0000000000209E38 qword_209E38    dq 0                    ; DATA XREF: sub_14A0+6↑r
.got:0000000000209E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E50 __errno_location_ptr dq offset __errno_location
.got:0000000000209E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E70 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:0000000000209E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209EA8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000209EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EC8 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:0000000000209ED0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209ED8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209EE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EF0 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:0000000000209EF8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000209F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209F18 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F30 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000209F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F70 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000209F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FC8                                         ; DATA XREF: start+24↑r
.got:0000000000209FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FE0 _got            ends
.got:0000000000209FE0
LOAD:0000000000209FE8 ; ===========================================================================
LOAD:0000000000209FE8
LOAD:0000000000209FE8 ; Segment type: Pure data
LOAD:0000000000209FE8 ; Segment permissions: Read/Write
LOAD:0000000000209FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FE8                 assume cs:LOAD
LOAD:0000000000209FE8                 ;org 209FE8h
LOAD:0000000000209FE8                 align 20h
LOAD:0000000000209FE8 LOAD            ends
LOAD:0000000000209FE8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010 verbose         db 1                    ; DATA XREF: main:loc_1930↑w
.data:000000000020A010                                         ; main+31B↑r
.data:000000000020A011                 align 8
.data:000000000020A018                 public Version
.data:000000000020A018 Version         dq offset a831          ; DATA XREF: main+12A↑r
.data:000000000020A018                                         ; "8.31"
.data:000000000020A020                 public exit_failure
.data:000000000020A020 ; int exit_failure
.data:000000000020A020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2C42↑r
.data:000000000020A020                                         ; xalloc_die+17↑r
.data:000000000020A024                 align 20h
.data:000000000020A040                 public quote_quoting_options
.data:000000000020A040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A040                                         ; quote_mem↑o ...
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058                 db    0
.data:000000000020A059                 db    0
.data:000000000020A05A                 db    0
.data:000000000020A05B                 db    0
.data:000000000020A05C                 db    0
.data:000000000020A05D                 db    0
.data:000000000020A05E                 db    0
.data:000000000020A05F                 db    0
.data:000000000020A060                 db    0
.data:000000000020A061                 db    0
.data:000000000020A062                 db    0
.data:000000000020A063                 db    0
.data:000000000020A064                 db    0
.data:000000000020A065                 db    0
.data:000000000020A066                 db    0
.data:000000000020A067                 db    0
.data:000000000020A068                 db    0
.data:000000000020A069                 db    0
.data:000000000020A06A                 db    0
.data:000000000020A06B                 db    0
.data:000000000020A06C                 db    0
.data:000000000020A06D                 db    0
.data:000000000020A06E                 db    0
.data:000000000020A06F                 db    0
.data:000000000020A070                 db    0
.data:000000000020A071                 db    0
.data:000000000020A072                 db    0
.data:000000000020A073                 db    0
.data:000000000020A074                 db    0
.data:000000000020A075                 db    0
.data:000000000020A076                 db    0
.data:000000000020A077                 db    0
.data:000000000020A078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A078                                         ; quotearg_n_options:loc_555D↑r ...
.data:000000000020A07C                 align 20h
.data:000000000020A080 ; void *slotvec
.data:000000000020A080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A080                                         ; quotearg_n_options+76↑w ...
.data:000000000020A088                 align 10h
.data:000000000020A090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A090                                         ; quotearg_n_options+187↑r ...
.data:000000000020A098 off_20A098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A098 _data           ends
.data:000000000020A098
.bss:000000000020A0A0 ; ===========================================================================
.bss:000000000020A0A0
.bss:000000000020A0A0 ; Segment type: Uninitialized
.bss:000000000020A0A0 ; Segment permissions: Read/Write
.bss:000000000020A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A0A0                 assume cs:_bss
.bss:000000000020A0A0                 ;org 20A0A0h
.bss:000000000020A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A0A0                 public __bss_start ; weak
.bss:000000000020A0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000808↑o
.bss:000000000020A0A0                                         ; LOAD:0000000000000850↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A0A0                                         ; _edata
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020A0A8 ; FILE *stdout
.bss:000000000020A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:000000000020A0A8                                         ; main+123↑r ...
.bss:000000000020A0A8                                         ; Alternative name is 'stdout'
.bss:000000000020A0A8                                         ; Copy of shared data
.bss:000000000020A0B0                 public optind@@GLIBC_2_2_5
.bss:000000000020A0B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:000000000020A0B0                                         ; main:loc_197C↑r ...
.bss:000000000020A0B0                                         ; Alternative name is 'optind'
.bss:000000000020A0B0                                         ; Copy of shared data
.bss:000000000020A0B4                 align 8
.bss:000000000020A0B8                 public optarg@@GLIBC_2_2_5
.bss:000000000020A0B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:000000000020A0B8                                         ; main+106↑r ...
.bss:000000000020A0B8                                         ; Alternative name is 'optarg'
.bss:000000000020A0B8                                         ; Copy of shared data
.bss:000000000020A0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0C0                                         ; DATA XREF: LOAD:0000000000000820↑o
.bss:000000000020A0C0                                         ; LOAD:0000000000000838↑o ...
.bss:000000000020A0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8                 align 20h
.bss:000000000020A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0E0 ; FILE *stderr
.bss:000000000020A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:000000000020A0E0                                         ; usage+3D↑r ...
.bss:000000000020A0E0                                         ; Alternative name is 'stderr'
.bss:000000000020A0E0                                         ; Copy of shared data
.bss:000000000020A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0E9                 align 10h
.bss:000000000020A0F0 can_relative_base dq ?                  ; DATA XREF: main+24F↑w
.bss:000000000020A0F0                                         ; main+27C↑r ...
.bss:000000000020A0F8 can_relative_to dq ?                    ; DATA XREF: main+1F2↑w
.bss:000000000020A0F8                                         ; main:loc_19F5↑r ...
.bss:000000000020A100 use_nuls        db ?                    ; DATA XREF: main:loc_1940↑w
.bss:000000000020A100                                         ; main:loc_1A76↑r
.bss:000000000020A101 logical         db ?                    ; DATA XREF: main+BC↑w
.bss:000000000020A101                                         ; main+193↑w ...
.bss:000000000020A102                 align 8
.bss:000000000020A108 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A108                                         ; close_stdout+1B↑r
.bss:000000000020A109                 align 10h
.bss:000000000020A110 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A110                                         ; close_stdout+56↑r
.bss:000000000020A118                 public program_name
.bss:000000000020A118 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A118                                         ; set_program_name:loc_417D↑w
.bss:000000000020A120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A120                                         ; quotearg_free+46↑o ...
.bss:000000000020A121                 db    ? ;
.bss:000000000020A122                 db    ? ;
.bss:000000000020A123                 db    ? ;
.bss:000000000020A124                 db    ? ;
.bss:000000000020A125                 db    ? ;
.bss:000000000020A126                 db    ? ;
.bss:000000000020A127                 db    ? ;
.bss:000000000020A128                 db    ? ;
.bss:000000000020A129                 db    ? ;
.bss:000000000020A12A                 db    ? ;
.bss:000000000020A12B                 db    ? ;
.bss:000000000020A12C                 db    ? ;
.bss:000000000020A12D                 db    ? ;
.bss:000000000020A12E                 db    ? ;
.bss:000000000020A12F                 db    ? ;
.bss:000000000020A130                 db    ? ;
.bss:000000000020A131                 db    ? ;
.bss:000000000020A132                 db    ? ;
.bss:000000000020A133                 db    ? ;
.bss:000000000020A134                 db    ? ;
.bss:000000000020A135                 db    ? ;
.bss:000000000020A136                 db    ? ;
.bss:000000000020A137                 db    ? ;
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200                 db    ? ;
.bss:000000000020A201                 db    ? ;
.bss:000000000020A202                 db    ? ;
.bss:000000000020A203                 db    ? ;
.bss:000000000020A204                 db    ? ;
.bss:000000000020A205                 db    ? ;
.bss:000000000020A206                 db    ? ;
.bss:000000000020A207                 db    ? ;
.bss:000000000020A208                 db    ? ;
.bss:000000000020A209                 db    ? ;
.bss:000000000020A20A                 db    ? ;
.bss:000000000020A20B                 db    ? ;
.bss:000000000020A20C                 db    ? ;
.bss:000000000020A20D                 db    ? ;
.bss:000000000020A20E                 db    ? ;
.bss:000000000020A20F                 db    ? ;
.bss:000000000020A210                 db    ? ;
.bss:000000000020A211                 db    ? ;
.bss:000000000020A212                 db    ? ;
.bss:000000000020A213                 db    ? ;
.bss:000000000020A214                 db    ? ;
.bss:000000000020A215                 db    ? ;
.bss:000000000020A216                 db    ? ;
.bss:000000000020A217                 db    ? ;
.bss:000000000020A218                 db    ? ;
.bss:000000000020A219                 db    ? ;
.bss:000000000020A21A                 db    ? ;
.bss:000000000020A21B                 db    ? ;
.bss:000000000020A21C                 db    ? ;
.bss:000000000020A21D                 db    ? ;
.bss:000000000020A21E                 db    ? ;
.bss:000000000020A21F                 db    ? ;
.bss:000000000020A220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A220                                         ; get_quoting_style↑o ...
.bss:000000000020A230 xmmword_20A230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A240 xmmword_20A240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A250 qword_20A250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A250 _bss            ends
.bss:000000000020A250
.prgend:000000000020A258 ; ===========================================================================
.prgend:000000000020A258
.prgend:000000000020A258 ; Segment type: Zero-length
.prgend:000000000020A258 _prgend         segment byte public '' use64
.prgend:000000000020A258 _end            label byte
.prgend:000000000020A258 _prgend         ends
.prgend:000000000020A258
extern:000000000020A260 ; ===========================================================================
extern:000000000020A260
extern:000000000020A260 ; Segment type: Externs
extern:000000000020A260 ; extern
extern:000000000020A260 ; void free(void *ptr)
extern:000000000020A260                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A260                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A268 ; void __noreturn abort(void)
extern:000000000020A268                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A268                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A270 ; int *_errno_location(void)
extern:000000000020A270                 extrn __errno_location:near
extern:000000000020A270                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A270                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A278 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A278                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A278                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A280 ; void __noreturn exit(int status)
extern:000000000020A280                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A280                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A288 ; size_t _fpending(FILE *fp)
extern:000000000020A288                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A288                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A290 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:000000000020A290                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:000000000020A290                                         ; DATA XREF: .got:readlink_ptr↑o
extern:000000000020A298 ; char *textdomain(const char *domainname)
extern:000000000020A298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2A0 ; int fclose(FILE *stream)
extern:000000000020A2A0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2A8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2A8                 extrn bindtextdomain:near
extern:000000000020A2A8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A2B0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A2B0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A2B8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A2B8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A2B8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A2C0 ; size_t strlen(const char *s)
extern:000000000020A2C0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A2C8 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020A2C8                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020A2D0                 extrn __stack_chk_fail:near
extern:000000000020A2D0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A2D8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A2D8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A2E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A2E0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A2E8 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020A2E8                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020A2F0 ; int _overflow(_IO_FILE *, int)
extern:000000000020A2F0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A2F8 ; char *strrchr(const char *s, int c)
extern:000000000020A2F8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A300 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A300                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A300                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A308 ; void *memset(void *s, int c, size_t n)
extern:000000000020A308                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A308                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A310 ; char *getcwd(char *buf, size_t size)
extern:000000000020A310                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:000000000020A310                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:000000000020A318 ; size_t strspn(const char *s, const char *accept)
extern:000000000020A318                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020A318                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020A320 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A320                 extrn __libc_start_main:near
extern:000000000020A320                                         ; CODE XREF: start+24↑p
extern:000000000020A320                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A328 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A328                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A328                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A330 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A330                 extrn fputs_unlocked:near
extern:000000000020A330                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A330                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A338 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A338                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A338                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A340 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A340                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A340                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A348 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A348                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A348                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A350 ; int fileno(FILE *stream)
extern:000000000020A350                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A350                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A358 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020A358                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020A358                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020A360 ; void *malloc(size_t size)
extern:000000000020A360                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A360                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A368 ; int fflush(FILE *stream)
extern:000000000020A368                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A368                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A370 ; char *nl_langinfo(nl_item item)
extern:000000000020A370                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A370                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A378 ; int _freading(FILE *fp)
extern:000000000020A378                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A378                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A380 ; void *realloc(void *ptr, size_t size)
extern:000000000020A380                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A380                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A388 ; char *setlocale(int category, const char *locale)
extern:000000000020A388                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A388                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A390                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A390                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A398 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020A398                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020A398                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020A3A0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A3A0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A3A8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A3A8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A3B0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A3B0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A3B8 ; void __noreturn exit(int status)
extern:000000000020A3B8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A3C0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A3C0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A3C8                 extrn __fprintf_chk:near
extern:000000000020A3C8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A3D0 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A3D0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A3D8 ; int iswprint(wint_t wc)
extern:000000000020A3D8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A3E0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A3E0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A3E0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A3E8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A3E8                 extrn __ctype_b_loc:near
extern:000000000020A3E8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A3F0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A3F0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A3F8                 extrn __gmon_start__:near ; weak
extern:000000000020A3F8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A3F8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A400                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A400                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A400
extern:000000000020A400
extern:000000000020A400                 end start
